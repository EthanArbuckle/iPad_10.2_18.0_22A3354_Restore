void sub_10027DC10(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_ppt_notityETATrayUpdateCompleted");

}

id sub_10027DD20(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "configureNavigationDisplay:", a2);
}

BOOL sub_10027E4F0(id a1, GEOComposedWaypoint *a2, unint64_t a3, BOOL *a4)
{
  return -[GEOComposedWaypoint isServerProvidedWaypoint](a2, "isServerProvidedWaypoint", a3, a4) ^ 1;
}

void sub_10027EEA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10027EEBC(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  unsigned int v3;
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "etaCardController"));
    v3 = objc_msgSend(v2, "isShowingShareETASuggestion");

    if (v3)
      +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 399, 126, 0);
    objc_msgSend(v4, "setShareEtaDisclosureAutoDismissTimer:", 0);
    objc_msgSend(v4, "_updateShareButtonContentAndVisibility:", 1);
    WeakRetained = v4;
  }

}

void sub_10027F4EC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 152));
  _Unwind_Resume(a1);
}

void sub_10027F540(uint64_t a1)
{
  int v1;
  id WeakRetained;
  void *v3;
  id v4;

  v1 = *(unsigned __int8 *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (v1)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "chromeViewController"));
    objc_msgSend(v3, "interruptAutohideForIncidentalInteraction");
  }
  else
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "guidanceCardController"));
    objc_msgSend(v3, "showTemporarilyHiddenJunctionViewAnimated:", 0);
  }

}

uint64_t sub_10027F5A4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "setIsTogglingETACard:", 0);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10027F5F0(uint64_t a1)
{
  _QWORD block[4];
  id v3;
  id v4;
  char v5;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10027F688;
  block[3] = &unk_1011AE9B0;
  objc_copyWeak(&v4, (id *)(a1 + 40));
  v5 = *(_BYTE *)(a1 + 48);
  v3 = *(id *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  objc_destroyWeak(&v4);
}

void sub_10027F688(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  void *v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v2 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "etaCardController"));
  v5 = *(unsigned __int8 *)(a1 + 48);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10027F768;
  v6[3] = &unk_1011AE988;
  objc_copyWeak(&v8, v2);
  v7 = *(id *)(a1 + 32);
  objc_msgSend(v4, "setExpanded:animated:completion:", 1, v5, v6);

  objc_destroyWeak(&v8);
}

void sub_10027F754(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10027F768(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "setIsTogglingETACard:", 0);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10027F7B4(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  void *v4;
  id v5;
  id v6;

  v2 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "setIsTogglingETACard:", 0);

  v6 = objc_loadWeakRetained(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "chromeViewController"));
  v5 = objc_loadWeakRetained(v2);
  objc_msgSend(v4, "updateCardsForContext:animated:completion:", v5, 0, *(_QWORD *)(a1 + 32));

}

id sub_1002801A4(uint64_t a1, double a2, double a3)
{
  LODWORD(a3) = *(_DWORD *)(a1 + 48);
  return _objc_msgSend(*(id *)(a1 + 32), "_loadCompressionTestCardWithHeight:priority:", *(double *)(a1 + 40), a3);
}

void sub_100280630(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_sendOtherEVStationsRequest");

}

void sub_1002809BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002809E8(uint64_t a1, void *a2)
{
  id v3;
  id *v4;
  id *WeakRetained;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  id *v15;
  _QWORD v16[5];
  id v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];

  v3 = a2;
  v4 = (id *)(a1 + 32);
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v15 = WeakRetained;
    v6 = WeakRetained[11];
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    if (v7)
    {
      v8 = *(_QWORD *)v19;
      do
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(_QWORD *)v19 != v8)
            objc_enumerationMutation(v6);
          v10 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i);
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("name")));

          if (v11)
          {
            v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("name")));
            v16[0] = _NSConcreteStackBlock;
            v16[1] = 3221225472;
            v16[2] = sub_100280C14;
            v16[3] = &unk_1011AEAA0;
            v16[4] = v10;
            objc_copyWeak(&v17, v4);
            v13 = objc_msgSend(v3, "addButtonRowWithTitle:action:", v12, v16);

            objc_destroyWeak(&v17);
          }
        }
        v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      }
      while (v7);
    }

    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Path: %@"), v15[12]));
    objc_msgSend(v3, "setFooter:", v14);

    WeakRetained = v15;
  }

}

void sub_100280BF8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100280C14(id *a1)
{
  id *v1;
  void *v2;
  void *v3;
  double v4;
  CLLocationDegrees v5;
  void *v6;
  double v7;
  CLLocationDegrees v8;
  void *v9;
  double v10;
  double v11;
  void *v12;
  double v13;
  double v14;
  void *v15;
  double v16;
  double v17;
  id WeakRetained;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  MKMapPoint v23;
  id v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  void *v36;
  id v37;
  CLLocationCoordinate2D v38;

  v1 = a1;
  v37 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "objectForKeyedSubscript:", CFSTR("data")));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "objectForKeyedSubscript:", CFSTR("target_point")));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("latitude")));
  objc_msgSend(v3, "doubleValue");
  v5 = v4;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("longitude")));
  objc_msgSend(v6, "doubleValue");
  v8 = v7;

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "objectForKeyedSubscript:", CFSTR("heading")));
  objc_msgSend(v9, "doubleValue");
  v11 = v10;

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "objectForKeyedSubscript:", CFSTR("pitch")));
  objc_msgSend(v12, "doubleValue");
  v14 = v13;

  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "objectForKeyedSubscript:", CFSTR("distance")));
  objc_msgSend(v15, "doubleValue");
  v17 = v16;

  v1 += 5;
  WeakRetained = objc_loadWeakRetained(v1);
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v20 = objc_loadWeakRetained(v1);
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "allVisibleMapViewsForDebugController:", v20));
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "firstObject"));

  v38.latitude = v5;
  v38.longitude = v8;
  v23 = MKMapPointForCoordinate(v38);
  v24 = objc_msgSend(v22, "bounds");
  v27 = MKMapRectMakeWithZoomLevel(v24, v23.x, v23.y, v17, v25, v26);
  v29 = v28;
  v31 = v30;
  v33 = v32;
  objc_msgSend(v22, "frame");
  v36 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapCamera _cameraLookingAtMapRect:forViewSize:](MKMapCamera, "_cameraLookingAtMapRect:forViewSize:", v27, v29, v31, v33, v34, v35));
  objc_msgSend(v36, "setPitch:", v14);
  objc_msgSend(v36, "setHeading:", v11);
  objc_msgSend(v22, "setCamera:", v36);

}

void sub_100280E48(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  _QWORD v10[4];
  id v11;
  _QWORD v12[4];
  id v13;
  _QWORD v14[4];
  id v15;

  v3 = a2;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100281028;
  v14[3] = &unk_1011AD260;
  objc_copyWeak(&v15, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Copy File Path"), v14);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100281088;
  v12[3] = &unk_1011AD260;
  objc_copyWeak(&v13, (id *)(a1 + 32));
  v5 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Clear All Bookmarks"), v12);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1002811D4;
  v10[3] = &unk_1011AD260;
  objc_copyWeak(&v11, (id *)(a1 + 32));
  v6 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Share Bookmark File"), v10);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1002812E8;
  v8[3] = &unk_1011AD260;
  objc_copyWeak(&v9, (id *)(a1 + 32));
  v7 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Add Current Search Framing"), v8);
  objc_destroyWeak(&v9);
  objc_destroyWeak(&v11);
  objc_destroyWeak(&v13);
  objc_destroyWeak(&v15);

}

void sub_100280FE4(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;

  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100281028(uint64_t a1)
{
  _QWORD *WeakRetained;
  uint64_t v2;
  void *v3;
  _QWORD *v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained[12];
    v4 = WeakRetained;
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIPasteboard generalPasteboard](UIPasteboard, "generalPasteboard"));
    objc_msgSend(v3, "setString:", v2);

    WeakRetained = v4;
  }

}

void sub_100281088(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  void *v4;
  _QWORD v5[5];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", CFSTR("Alert"), CFSTR("Do you want to clear list"), 1));
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10028119C;
    v5[3] = &unk_1011AD938;
    v5[4] = WeakRetained;
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", CFSTR("Yes"), 0, v5));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", CFSTR("Cancel"), 0, &stru_1011AEB08));
    objc_msgSend(v2, "addAction:", v3);
    objc_msgSend(v2, "addAction:", v4);
    objc_msgSend(WeakRetained, "presentViewController:animated:completion:", v2, 1, 0);

  }
}

id sub_10028119C(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "removeAllObjects");
  return objc_msgSend(*(id *)(a1 + 32), "saveFileAndReload");
}

void sub_1002811D4(uint64_t a1)
{
  _QWORD *WeakRetained;
  void *v2;
  MapsDebugFileExportController *v3;
  id v4;
  _QWORD v5[4];
  id v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", WeakRetained[12]));
    v3 = -[MapsDebugFileExportController initWithFileAtURL:presentingViewController:]([MapsDebugFileExportController alloc], "initWithFileAtURL:presentingViewController:", v2, WeakRetained);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1002812A0;
    v5[3] = &unk_1011AC860;
    v6 = v2;
    v4 = v2;
    -[MapsDebugFileExportController startWithCompletion:](v3, "startWithCompletion:", v5);

  }
}

void sub_1002812A0(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  objc_msgSend(v2, "removeItemAtURL:error:", *(_QWORD *)(a1 + 32), 0);

}

void sub_1002812E8(uint64_t a1)
{
  id *v1;
  id *WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  double v16;
  void *v17;
  void *v18;
  void *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  id v27;
  double v28;
  double v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  id v40;
  void *v41;
  void *v42;
  _QWORD v43[3];
  _QWORD v44[3];
  _QWORD v45[4];
  _QWORD v46[4];
  _QWORD v47[3];
  _QWORD v48[3];

  v1 = (id *)(a1 + 32);
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedMapsDelegate](UIApplication, "sharedMapsDelegate"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "appCoordinator"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "baseActionCoordinator"));

    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "placeCardViewController"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "placeCardItem"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "mapItem"));

    if (v8)
    {
      v9 = objc_loadWeakRetained(v1);
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "delegate"));
      v11 = objc_loadWeakRetained(v1);
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "allVisibleMapViewsForDebugController:", v11));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "firstObject"));

      v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "camera"));
      v14 = objc_msgSend(v42, "copy");
      objc_msgSend(v14, "setHeading:", 0.0);
      objc_msgSend(v14, "setPitch:", 0.0);
      v47[0] = CFSTR("latitude");
      objc_msgSend(v14, "centerCoordinate");
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
      v48[0] = v15;
      v47[1] = CFSTR("longitude");
      objc_msgSend(v14, "centerCoordinate");
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v16));
      v48[1] = v17;
      v47[2] = CFSTR("altitude");
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", 0.0));
      v48[2] = v18;
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v48, v47, 3));

      objc_msgSend(v13, "frame");
      if (v20 != 0.0)
      {
        objc_msgSend(v13, "frame");
        v22 = v21;
        objc_msgSend(v13, "frame");
        v24 = v22 / v23;
        *(float *)&v24 = v22 / v23;
        objc_msgSend(v14, "enclosingMapRectForAspectRatio:", v24);
        if (v25 != 0.0)
        {
          v26 = v25;
          v27 = objc_msgSend(v13, "frame");
          v29 = MKZoomLevelForScaleF(v27, v28 / v26);
          v46[0] = v19;
          v45[0] = CFSTR("target_point");
          v45[1] = CFSTR("heading");
          objc_msgSend(v42, "heading");
          v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
          v46[1] = v30;
          v45[2] = CFSTR("pitch");
          objc_msgSend(v42, "pitch");
          v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
          v46[2] = v31;
          v45[3] = CFSTR("distance");
          v41 = v5;
          v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v29));
          v46[3] = v32;
          v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v46, v45, 4));

          v43[0] = CFSTR("name");
          v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "name"));
          v44[0] = v34;
          v43[1] = CFSTR("muid");
          v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v8, "_muid")));
          v43[2] = CFSTR("data");
          v44[1] = v35;
          v44[2] = v33;
          v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v44, v43, 3));

          v5 = v41;
          objc_msgSend(WeakRetained[11], "addObject:", v36);
          objc_msgSend(WeakRetained, "saveFileAndReload");

        }
      }

    }
    else
    {
      v37 = v5;
      v38 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", CFSTR("Alert"), CFSTR("Failed to save, must search for POI and have placecard"), 1));
      v39 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", CFSTR("OK"), 0, &stru_1011AEB28));
      objc_msgSend(v38, "addAction:", v39);
      v40 = objc_loadWeakRetained(v1);
      objc_msgSend(v40, "presentViewController:animated:completion:", v38, 1, 0);

      v5 = v37;
    }

  }
}

uint64_t sub_100283F2C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];

  v2 = 40;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "allObjects"));
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v4)
  {
    v5 = v4;
    v6 = 0;
    v7 = *(_QWORD *)v21;
    while (1)
    {
      v8 = 0;
      v19 = v5;
      do
      {
        if (*(_QWORD *)v21 != v7)
          objc_enumerationMutation(v3);
        v9 = *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v8);
        v10 = *(_QWORD **)(a1 + 32);
        if (v9 == v10[26])
        {
          v12 = objc_msgSend(v10, "layoutForCurrentViewControllerWithStyle:", objc_msgSend(*(id *)(a1 + 32), "containerStyle"));
          if (v12)
            goto LABEL_12;
        }
        else
        {
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)((char *)v10 + v2), "containeeStateForContainee:", *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v8)));
          v12 = objc_msgSend(v11, "layoutForStyle:", objc_msgSend(*(id *)(a1 + 32), "containerStyle"));

          if (v12)
            goto LABEL_12;
        }
        if ((-[ContainerViewController delaysFirstCardPresentation]_0() & 1) == 0)
        {
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentViewController"));
          v14 = v7;
          v15 = v2;
          v16 = v3;
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "cardPresentationController"));
          objc_msgSend(v17, "updateHeightForCurrentLayout");

          v3 = v16;
          v2 = v15;
          v7 = v14;
          v5 = v19;

        }
LABEL_12:
        v6 |= objc_msgSend(*(id *)(a1 + 32), "_updateContaineeIfNeeded:withLayout:", v9, v12);
        v8 = (char *)v8 + 1;
      }
      while (v5 != v8);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
      if (!v5)
        goto LABEL_16;
    }
  }
  LOBYTE(v6) = 0;
LABEL_16:

  return v6 & 1;
}

void sub_100284114(uint64_t a1)
{
  id v2;
  NSObject *v3;
  int v4;
  void *v5;
  id v6;
  NSObject *v7;
  uint8_t v8[16];
  uint8_t buf[16];

  v2 = sub_100431B2C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Container viewWillTransitionToSize animation block", buf, 2u);
  }

  v4 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  objc_msgSend(*(id *)(a1 + 32), "suspendPropagatingEdgeInsetsForReason:", CFSTR("container view transitioning size"));
  objc_msgSend(*(id *)(a1 + 32), "animateAlongsideCardTransition");
  if (v4 && *(_BYTE *)(a1 + 48))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
    objc_msgSend(v5, "setNeedsLayout");

  }
  v6 = sub_100431B2C();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Container viewWillTransitionToSize animation block end", v8, 2u);
  }

}

void sub_10028420C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  double *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  uint8_t v10[16];
  uint8_t buf[16];

  v2 = sub_100431B2C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Container viewWillTransitionToSize completion", buf, 2u);
  }

  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72) = 0;
  +[PPTNotificationCenter postNotificationIfNeededWithName:object:userInfo:](PPTNotificationCenter, "postNotificationIfNeededWithName:object:userInfo:", CFSTR("PPTTestOrientationDidRotateNotification"), *(_QWORD *)(a1 + 32), 0);
  objc_msgSend(*(id *)(a1 + 32), "resumePropagatingEdgeInsets");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 256), "updateLayoutStyle");
  v4 = *(double **)(a1 + 32);
  if (v4[9] > 0.0)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "traitCollection"));
    v6 = objc_msgSend(v5, "userInterfaceIdiom");

    if (v6 == (id)5 && (*(unsigned int (**)(void))(*(_QWORD *)(a1 + 40) + 16))() && *(_BYTE *)(a1 + 48))
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
      objc_msgSend(v7, "setNeedsLayout");

    }
  }
  v8 = sub_100431B2C();
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Container viewWillTransitionToSize completion end", v10, 2u);
  }

}

void sub_1002844D0(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  uint8_t v8[16];
  uint8_t buf[16];

  v2 = sub_100431B2C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Container willTransitionToTraitCollection animation block", buf, 2u);
  }

  objc_msgSend(*(id *)(a1 + 32), "_updateOverrideTraitCollectionsForStyle:", objc_msgSend(*(id *)(a1 + 32), "containerStyle"));
  if (*(_BYTE *)(a1 + 40))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "iosBasedChromeViewController"));
    objc_msgSend(v4, "setNeedsUpdateComponent:animated:", CFSTR("statusBarStyle"), 1);

    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "iosBasedChromeViewController"));
    objc_msgSend(v5, "updateComponentsIfNeeded");

  }
  v6 = sub_100431B2C();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Container willTransitionToTraitCollection animation block end", v8, 2u);
  }

}

void sub_1002845DC(id a1, UIViewControllerTransitionCoordinatorContext *a2)
{
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = sub_100431B2C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Container willTransitionToTraitCollection completion end", v4, 2u);
  }

}

void sub_100284E88(uint64_t a1)
{
  void *v2;
  id v3;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 92) = 0;
  objc_msgSend(*(id *)(a1 + 32), "setContaineesHidden:", objc_msgSend(*(id *)(a1 + 32), "shouldHideCard"));
  if ((objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "containerReadyToInsert") & 1) == 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "setContainerReadyToInsert:", 1);
    if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "dequeueWaitingContainees"))
    {
      v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentViewController"));
      objc_msgSend(v2, "didBecomeCurrent");

    }
  }
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v3, "postNotificationName:object:", CFSTR("ContainerDidUnlockNotification"), *(_QWORD *)(a1 + 32));

}

void sub_10028656C(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  unsigned int v5;
  void *v6;
  void *v7;
  _QWORD *v8;
  double v9;
  double Height;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  double v15;
  double v16;
  id v17;
  NSObject *v18;
  id v19;
  void *v20;
  objc_class *v21;
  NSString *v22;
  void *v23;
  void *v24;
  void *v25;
  __CFString *v26;
  void *v27;
  CGFloat v28;
  double *v29;
  void *v30;
  uint8_t buf[4];
  __CFString *v32;
  CGRect v33;
  CGRect v34;
  CGRect v35;

  v2 = objc_msgSend(*(id *)(a1 + 32), "containeeLayout");
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentViewController"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "cardPresentationController"));
  v5 = objc_msgSend(v4, "useDefaultLayoutWhenCalculatingBottomInsetForFloatingControls");

  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentViewController"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "cardPresentationController"));
    v2 = objc_msgSend(v7, "defaultContaineeLayout");

  }
  if (v2 != (id)5)
  {
    v8 = *(_QWORD **)(a1 + 32);
    if (*(_BYTE *)(a1 + 40))
    {
      objc_msgSend(v8, "_cardHeightForComputingBottomMapEdgeInsets");
      Height = v9;
    }
    else
    {
      v11 = (void *)v8[3];
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "currentViewController"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKey:", v12));

      objc_msgSend(v13, "bounds");
      Height = CGRectGetHeight(v33);

    }
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentViewController"));
    objc_msgSend(v14, "heightForLayout:", objc_msgSend(*(id *)(a1 + 32), "maxLayoutForEdgeInsetsUpdate"));
    v16 = v15;

    if (v16 != -1.0)
      goto LABEL_19;
    v17 = sub_10043165C();
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
LABEL_18:

      v16 = Height;
LABEL_19:
      if (v16 < Height)
        Height = v16;
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
      objc_msgSend(v27, "bounds");
      v28 = CGRectGetHeight(v34);
      v29 = *(double **)(a1 + 32);
      if (Height < v28 * 0.600000024)
      {
        v29[10] = Height;
      }
      else
      {
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "view"));
        objc_msgSend(v30, "bounds");
        *(CGFloat *)(*(_QWORD *)(a1 + 32) + 80) = CGRectGetHeight(v35) * 0.600000024;

      }
      return;
    }
    v19 = *(id *)(a1 + 32);
    v20 = v19;
    if (!v19)
    {
      v26 = CFSTR("<nil>");
      goto LABEL_17;
    }
    v21 = (objc_class *)objc_opt_class(v19);
    v22 = NSStringFromClass(v21);
    v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
    if ((objc_opt_respondsToSelector(v20, "accessibilityIdentifier") & 1) != 0)
    {
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "performSelector:", "accessibilityIdentifier"));
      v25 = v24;
      if (v24 && !objc_msgSend(v24, "isEqualToString:", v23))
      {
        v26 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v23, v20, v25));

        goto LABEL_15;
      }

    }
    v26 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v23, v20));
LABEL_15:

LABEL_17:
    *(_DWORD *)buf = 138543362;
    v32 = v26;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "[%{public}@] Default height limit is not supported, don't limit", buf, 0xCu);

    goto LABEL_18;
  }
}

id sub_100287C94(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "didResignContainee:finished:", *(_QWORD *)(a1 + 40), 1);
  return objc_msgSend(*(id *)(a1 + 40), "didResignCurrent");
}

id sub_100288040(uint64_t a1)
{
  void *v2;
  ContaineeState *v3;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 40);
  v3 = -[ContaineeState initWithContainee:]([ContaineeState alloc], "initWithContainee:", *(_QWORD *)(a1 + 40));
  objc_msgSend(v2, "replaceLastOne:", v3);

  return objc_msgSend(*(id *)(a1 + 32), "assertPresentationStackAppearsCorrect");
}

void sub_100288514(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v6;
  unsigned int v7;
  void *v8;
  ContaineeState *v9;
  id v10;
  void *v11;
  id v12;

  v12 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "cardPresentationController"));
  v7 = objc_msgSend(v6, "usingSheetPresentation");

  if (v7)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "cardPresentationController"));
    objc_msgSend(v8, "setHidden:", 0);

  }
  v9 = (ContaineeState *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "containeeStateForContainee:", v12));
  if (!v9)
  {
    v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "lastObject"));

    v11 = v12;
    if (v10 == v12)
    {
      *a4 = 1;
      goto LABEL_7;
    }
    v9 = -[ContaineeState initWithContainee:]([ContaineeState alloc], "initWithContainee:", v12);
  }
  objc_msgSend(*(id *)(a1 + 48), "pushContaineeState:", v9);

  v11 = v12;
LABEL_7:

}

uint64_t sub_100288C40(uint64_t a1)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "didPresentContainee:finished:", *(_QWORD *)(a1 + 40), 1);
  objc_msgSend(*(id *)(a1 + 40), "didBecomeCurrent");
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, 1);
  return result;
}

void sub_100288C90(id a1)
{
  byte_1014A38D0 = GEOConfigGetBOOL(MapsConfig_AllowCardsToSpecifyAlwaysDefaultLayout, off_1014B4A48);
}

id sub_100288CB8(uint64_t a1)
{
  id result;

  if (-[ContainerViewController delaysFirstCardPresentation]_0())
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 194) = 1;
    objc_msgSend(*(id *)(a1 + 32), "_dismissPresentedViewControllersIfNeededForViewController:", *(_QWORD *)(a1 + 40));
  }
  result = objc_msgSend(*(id *)(a1 + 32), "suspendPropagatingEdgeInsetsForReason:", CFSTR("container will present controller"));
  if (*(_QWORD *)(a1 + 40))
  {
    if (!*(_BYTE *)(a1 + 56))
      return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "pushContaineeState:", *(_QWORD *)(a1 + 48));
  }
  return result;
}

uint64_t sub_100288D38(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  id v9;
  void *v10;
  objc_class *v11;
  NSString *v12;
  void *v13;
  void *v14;
  void *v15;
  __CFString *v16;
  uint64_t result;
  uint8_t buf[4];
  __CFString *v19;

  if (!*(_BYTE *)(a1 + 48))
    goto LABEL_11;
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(*(_QWORD *)(a1 + 40) + 40);
  if (!v2)
  {
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "popAll"));
LABEL_7:
    v5 = (void *)v6;
    goto LABEL_8;
  }
  v4 = objc_msgSend(v3, "indexOfContainee:");
  if (v4 != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 40), "popFromIndex:", v4));
    goto LABEL_7;
  }
  v5 = 0;
LABEL_8:
  if (objc_msgSend(v5, "count"))
    objc_msgSend(*(id *)(a1 + 40), "removeControllersFromStack:", v5);

LABEL_11:
  objc_msgSend(*(id *)(a1 + 40), "updateMapEdgeInsets");
  objc_msgSend(*(id *)(a1 + 40), "resumePropagatingEdgeInsets");
  objc_msgSend(*(id *)(a1 + 40), "assertPresentationStackAppearsCorrect");
  if ((objc_msgSend(*(id *)(a1 + 40), "_chromeEnabled") & 1) != 0)
    goto LABEL_23;
  v7 = sub_10043165C();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    v9 = *(id *)(a1 + 40);
    v10 = v9;
    if (!v9)
    {
      v16 = CFSTR("<nil>");
      goto LABEL_21;
    }
    v11 = (objc_class *)objc_opt_class(v9);
    v12 = NSStringFromClass(v11);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    if ((objc_opt_respondsToSelector(v10, "accessibilityIdentifier") & 1) != 0)
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "performSelector:", "accessibilityIdentifier"));
      v15 = v14;
      if (v14 && !objc_msgSend(v14, "isEqualToString:", v13))
      {
        v16 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v13, v10, v15));

        goto LABEL_19;
      }

    }
    v16 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v13, v10));
LABEL_19:

LABEL_21:
    *(_DWORD *)buf = 138543362;
    v19 = v16;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[%{public}@] Chrome is not enabled; hide containees",
      buf,
      0xCu);

  }
  objc_msgSend(*(id *)(a1 + 40), "setContaineesHidden:", 1);
LABEL_23:
  result = -[ContainerViewController delaysFirstCardPresentation]_0();
  if ((_DWORD)result)
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 194) = 0;
  return result;
}

id sub_10028969C(uint64_t a1)
{
  void *v2;
  double v3;
  double v4;
  void *v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentViewController"));
  objc_msgSend(v2, "heightForLayout:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 200));
  v4 = v3;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v5, "layoutIfNeeded");

  objc_msgSend(*(id *)(a1 + 32), "contentHeightUpdatedWithValue:", v4);
  return objc_msgSend(*(id *)(a1 + 32), "_updateVisibleContentForLayout:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 200));
}

id sub_100289720(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v2 + 90))
  {
    objc_msgSend((id)v2, "containee:didChangeLayout:", *(_QWORD *)(v2 + 208), *(_QWORD *)(v2 + 200));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentViewController"));
    objc_msgSend(v3, "didChangeLayout:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 200));

    v4 = *(void **)(a1 + 32);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "currentViewController"));
    objc_msgSend(v5, "heightForLayout:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 200));
    objc_msgSend(v4, "contentHeightUpdatedWithValue:");

    objc_msgSend(*(id *)(a1 + 32), "transitionEnded");
  }
  else
  {
    *(_BYTE *)(v2 + 91) = 1;
  }
  return objc_msgSend(*(id *)(a1 + 32), "updateContaineeStackState");
}

id sub_100289CF8(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v2, "layoutIfNeeded");

  objc_msgSend(*(id *)(a1 + 32), "contentHeightUpdatedWithValue:", *(double *)(a1 + 40));
  return objc_msgSend(*(id *)(a1 + 32), "_updateVisibleContentForLayout:", *(_QWORD *)(a1 + 48));
}

id sub_100289D40(uint64_t a1)
{
  _BYTE *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *(_BYTE **)(a1 + 32);
  if (v2[90])
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "view"));
    objc_msgSend(v3, "layoutIfNeeded");

    objc_msgSend(*(id *)(a1 + 32), "_completeStateIfNeeded");
    v4 = *(void **)(a1 + 32);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "currentViewController"));
    objc_msgSend(v5, "heightForLayout:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 200));
    objc_msgSend(v4, "contentHeightUpdatedWithValue:");

  }
  else
  {
    v2[91] = 1;
  }
  return objc_msgSend(*(id *)(a1 + 32), "updateContaineeStackState");
}

id sub_10028A92C(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v6;
  id v7;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "identifier"));
  v7 = objc_msgSend(v6, "isEqualToString:", *(_QWORD *)(a1 + 32));

  if ((_DWORD)v7)
    *a4 = 1;
  return v7;
}

void sub_10028AC9C(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cardPresentationController"));
  objc_msgSend(v1, "setHidden:", 1);

}

void sub_10028ACD0(uint64_t a1, void *a2)
{
  void *v3;
  _QWORD v4[4];
  id v5;
  char v6;

  if ((objc_msgSend(a2, "isCancelled") & 1) == 0)
  {
    v3 = *(void **)(a1 + 32);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_10028AD54;
    v4[3] = &unk_1011ACE58;
    v5 = v3;
    v6 = *(_BYTE *)(a1 + 40);
    objc_msgSend(v5, "dismissViewControllerAnimated:completion:", 0, v4);

  }
}

void sub_10028AD54(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(unsigned __int8 *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cardPresentationController"));
  objc_msgSend(v2, "setHidden:", v1);

}

id sub_10028BA58(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_internal_ensurePresentationsMatchContaineeStackAllowingFault:allowingAnimations:skipUnlock:", *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 41), *(unsigned __int8 *)(a1 + 42));
}

id sub_10028BA70(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chromeViewController"));
  objc_msgSend(v2, "dismissViewControllerAnimated:completion:", 0, 0);

  v3 = sub_10043165C();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 40);
    v8 = 138412546;
    v9 = v5;
    v10 = 2112;
    v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%@ Did dismiss for rebuild, sequentially presenting %@", (uint8_t *)&v8, 0x16u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "_sequentiallyPresentViewControllers:allowAnimations:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

id sub_10028BB4C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_unlockCardQueue");
}

id sub_10028BC00(uint64_t a1)
{
  id v2;
  id v3;
  __int128 v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint8_t buf[4];
  uint64_t v29;
  __int16 v30;
  void *v31;
  _BYTE v32[128];

  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
  if (v3)
  {
    v5 = v3;
    v6 = *(_QWORD *)v25;
    *(_QWORD *)&v4 = 138412546;
    v23 = v4;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v25 != v6)
          objc_enumerationMutation(v2);
        v8 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)i);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "presentingViewController", v23, (_QWORD)v24));

        if (v9)
        {
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "presentingViewController"));
          objc_msgSend(v10, "dismissViewControllerAnimated:completion:", 0, 0);

        }
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "cardPresentationController"));
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "containerViewController"));
        objc_msgSend(v8, "setModalPresentationStyle:", 7);
        objc_msgSend(v8, "setModalPresentationStyle:", 2);
        objc_msgSend(v11, "configureForSheetPresentationWithContainer:layout:", v12, objc_msgSend(v8, "retainedLayout"));
        v13 = sub_10043165C();
        v14 = objc_claimAutoreleasedReturnValue(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        {
          v15 = *(_QWORD *)(a1 + 40);
          *(_DWORD *)buf = v23;
          v29 = v15;
          v30 = 2112;
          v31 = v8;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "%@ presenting %@ for rebuild", buf, 0x16u);
        }

        objc_msgSend(*(id *)(a1 + 40), "_maps_topMostPresentViewController:animated:completion:", v8, 0, 0);
      }
      v5 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
    }
    while (v5);
  }

  v16 = sub_10043165C();
  v17 = objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    v18 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138412290;
    v29 = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "%@ rebuild complete, unlocking queue", buf, 0xCu);
  }

  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lastObject"));
  objc_msgSend(*(id *)(a1 + 40), "setCurrentViewController:", v19);

  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "currentViewController"));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "view"));
  objc_msgSend(v21, "setUserInteractionEnabled:", 1);

  return objc_msgSend(*(id *)(a1 + 40), "_unlockCardQueue");
}

id sub_10028C624(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dismissViewControllerAnimated:completion:", 0, 0);
}

uint64_t sub_10028C908(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, 1);
  return result;
}

void sub_10028CE94(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "didPresentContainee:finished:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 136), 1);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "didBecomeCurrent");
  v5 = objc_retainBlock(*(id *)(*(_QWORD *)(a1 + 32) + 152));
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 152);
  *(_QWORD *)(v2 + 152) = 0;

  v4 = v5;
  if (v5)
  {
    (*((void (**)(id, uint64_t))v5 + 2))(v5, 1);
    v4 = v5;
  }

}

id sub_10028D030(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "didResignContainee:finished:", *(_QWORD *)(a1 + 40), 1);
  return objc_msgSend(*(id *)(a1 + 40), "didResignCurrent");
}

void sub_10028D6FC(id a1)
{
  CustomSearchManager *v1;
  void *v2;

  v1 = objc_alloc_init(CustomSearchManager);
  v2 = (void *)qword_1014D1ED0;
  qword_1014D1ED0 = (uint64_t)v1;

}

id sub_10028DC8C(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "results"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "testStatistics"));
  objc_msgSend(v2, "addEntriesFromDictionary:", v3);

  return objc_msgSend(*(id *)(a1 + 32), "finishedTest");
}

void sub_10028E99C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_10028E9C4(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *WeakRetained;
  _QWORD *v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    if (*(_QWORD *)(a1 + 40) == WeakRetained[4])
    {
      objc_msgSend(WeakRetained, "_setFetchedImage:", v3);
      if (!v3)
      {
        v6 = sub_100432EDC();
        v7 = objc_claimAutoreleasedReturnValue(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
        {
          v8 = v5[5];
          v9 = 138412290;
          v10 = v8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Failed to fetch icon for favorite '%@'", (uint8_t *)&v9, 0xCu);
        }

      }
    }
  }

}

void sub_10028EAC0(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *WeakRetained;
  _QWORD *v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    if (*(_QWORD *)(a1 + 40) == WeakRetained[4])
    {
      objc_msgSend(WeakRetained, "_setFetchedImage:", v3);
      if (!v3)
      {
        v6 = sub_100432EDC();
        v7 = objc_claimAutoreleasedReturnValue(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
        {
          v8 = v5[5];
          v9 = 138412290;
          v10 = v8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Failed to fetch icon for favorite '%@'", (uint8_t *)&v9, 0xCu);
        }

      }
    }
  }

}

void sub_10028EBBC(uint64_t a1)
{
  _QWORD *WeakRetained;
  _QWORD *v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  double v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = WeakRetained;
  if (WeakRetained
    && *(_QWORD *)(a1 + 40) == WeakRetained[4]
    && *(_QWORD *)(a1 + 48) <= 4uLL
    && objc_msgSend(WeakRetained, "_shouldFetchMissingImage"))
  {
    v4 = *(_QWORD *)(a1 + 48) + 1;
    v5 = sub_100432EDC();
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      v7 = v3[5];
      v8 = 138413058;
      v9 = v7;
      v10 = 2048;
      v11 = (double)(unint64_t)v4 * 5.0;
      v12 = 1024;
      v13 = v4;
      v14 = 1024;
      v15 = 5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Favorite '%@' icon missing after %gs. Retry %d/%d.", (uint8_t *)&v8, 0x22u);
    }

    objc_msgSend(v3, "_fetchImageWithImageCount:retryCount:", *(_QWORD *)(a1 + 40), v4);
  }

}

void sub_10028EFC8(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_updateTitlesFromEntry");
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observers"));
  objc_msgSend(v2, "shortcutsRowCellModelDidUpdate:", *(_QWORD *)(a1 + 32));

}

void sub_1002908D0(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  objc_msgSend(*(id *)(a1 + 32), "_alertDidFinishProcessing");
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;

}

void sub_100290A98(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100290AB4(uint64_t a1, void *a2)
{
  id v3;
  id *v4;
  id *v5;
  id v6;
  id WeakRetained;
  const __CFString *v8;
  id *v9;
  id v10;
  id v11;
  id v12;
  void **v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  void *v16;
  id v17;
  _QWORD v18[4];
  id v19;
  _QWORD v20[4];
  id v21;
  _QWORD v22[4];
  id v23;

  v3 = a2;
  if (+[MapsEventRecorder isRecording](MapsEventRecorder, "isRecording"))
  {
    v13 = _NSConcreteStackBlock;
    v14 = 3221225472;
    v15 = sub_100290E9C;
    v16 = &unk_1011AD260;
    v4 = &v17;
    v5 = (id *)(a1 + 32);
    objc_copyWeak(&v17, v5);
    v6 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("End Event Recording"), &v13);
    WeakRetained = objc_loadWeakRetained(v5);
    if (objc_msgSend(WeakRetained, "tapToRadarEnabled", v13, v14, v15, v16))
      v8 = CFSTR("Tap-to-Radar Enabled");
    else
      v8 = CFSTR("Tap-to-Radar Disabled");

  }
  else
  {
    v9 = (id *)(a1 + 32);
    v10 = objc_loadWeakRetained(v9);
    objc_msgSend(v10, "setTapToRadarEnabled:", 0);

    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_100290CF0;
    v22[3] = &unk_1011AD260;
    v4 = &v23;
    objc_copyWeak(&v23, v9);
    v11 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Begin Event Recording"), v22);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_100290E2C;
    v20[3] = &unk_1011AEE60;
    objc_copyWeak(&v21, v9);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_100290E60;
    v18[3] = &unk_1011AD4F0;
    objc_copyWeak(&v19, v9);
    v12 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Tap-to-Radar"), v20, v18);
    objc_destroyWeak(&v19);
    objc_destroyWeak(&v21);
  }
  objc_destroyWeak(v4);

}

void sub_100290CBC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100290CF0(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v8[4];
  id v9;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = objc_msgSend(WeakRetained, "tapToRadarEnabled");
  v4 = objc_loadWeakRetained(v1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "view"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "window"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[MapsEventRecorder initializeDefaultRecorderWithTapToRadar:window:](MapsEventRecorder, "initializeDefaultRecorderWithTapToRadar:window:", v3, v6));

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100290E00;
  v8[3] = &unk_1011AD260;
  objc_copyWeak(&v9, v1);
  objc_msgSend(v7, "beginRecordingWithCompletion:", v8);
  objc_destroyWeak(&v9);

}

void sub_100290DEC(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100290E00(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "rebuildSections");

}

id sub_100290E2C(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = objc_msgSend(WeakRetained, "tapToRadarEnabled");

  return v2;
}

void sub_100290E60(uint64_t a1, uint64_t a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setTapToRadarEnabled:", a2);

}

void sub_100290E9C(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MapsEventRecorder defaultRecorder](MapsEventRecorder, "defaultRecorder"));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100290F48;
  v3[3] = &unk_1011AD260;
  objc_copyWeak(&v4, (id *)(a1 + 32));
  objc_msgSend(v2, "endRecordingWithCompletion:", v3);

  objc_destroyWeak(&v4);
}

void sub_100290F34(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100290F48(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "rebuildSections");

}

void sub_1002910D0(id *a1)
{
  MapsRecordAnIssuePanView *v2;
  id v3;
  MapsRecordAnIssuePanView *v4;
  _QWORD v5[4];
  MapsRecordAnIssuePanView *v6;

  v2 = -[MapsRecordAnIssuePanView initWithParent:]([MapsRecordAnIssuePanView alloc], "initWithParent:", a1[4]);
  v3 = objc_msgSend(objc_alloc((Class)UIPanGestureRecognizer), "initWithTarget:action:", v2, "mapsRecordAnIssueEndViewPan:");
  -[MapsRecordAnIssuePanView addGestureRecognizer:](v2, "addGestureRecognizer:", v3);
  -[MapsRecordAnIssuePanView setAlpha:](v2, "setAlpha:", 0.0);
  objc_msgSend(a1[5], "addSubview:", v2);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1002911D4;
  v5[3] = &unk_1011AC860;
  v6 = v2;
  v4 = v2;
  +[UIView animateWithDuration:animations:](UIView, "animateWithDuration:animations:", v5, 0.3);
  objc_msgSend(a1[6], "stopAnimating");
  objc_msgSend(a1[6], "removeFromSuperview");
  objc_msgSend(a1[4], "rebuildSections");

}

id sub_1002911D4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 1.0);
}

void sub_100291240(id a1)
{
  RideBookingImageCache *v1;
  void *v2;

  v1 = objc_alloc_init(RideBookingImageCache);
  v2 = (void *)qword_1014D1EE0;
  qword_1014D1EE0 = (uint64_t)v1;

}

void sub_100291480(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1002914A8(id a1)
{
  uint64_t v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  objc_msgSend(v2, "scale");
  qword_1014D1EF0 = v1;

}

void sub_100291650(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100291C74(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char isKindOfClass;
  void *v5;
  void *v6;
  id v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataSource"));
  v3 = objc_opt_class(UITableViewDiffableDataSource);
  isKindOfClass = objc_opt_isKindOfClass(v2, v3);

  v5 = *(void **)(a1 + 32);
  if ((isKindOfClass & 1) != 0)
  {
    v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "dataSource"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "snapshot"));
    objc_msgSend(v7, "applySnapshot:animatingDifferences:", v6, 1);

  }
  else
  {
    objc_msgSend(v5, "performBatchUpdates:completion:", &stru_1011AEEC0, 0);
  }
}

id sub_100291F2C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "setParkedCar:", a2);
}

void sub_10029253C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10029256C(uint64_t a1, void *a2)
{
  id result;

  result = objc_msgSend(a2, "count");
  if (result)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  return result;
}

uint64_t sub_100292B30(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100292B40(uint64_t a1)
{

}

void sub_100292B48(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "copy");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_100292E50(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = objc_msgSend(*(id *)(a1 + 40), "copy");
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1002935C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002935F4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100293604(uint64_t a1)
{

}

void sub_10029360C(uint64_t a1, int a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(void **)(v3 + 40);
  if (a2)
  {
    if (!v4)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[LoadingIndicatorController sharedController](LoadingIndicatorController, "sharedController"));
      v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "beginShowingLoadingIndicator"));
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v7 = *(void **)(v6 + 40);
      *(_QWORD *)(v6 + 40) = v5;

    }
  }
  else if (v4)
  {
    *(_QWORD *)(v3 + 40) = 0;

  }
}

void sub_100293694(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id WeakRetained;
  void *v6;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  v13 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (v13)
    {
      if (objc_msgSend(v13, "code") == (id)-2
        && (v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "domain")),
            v7 = GEOErrorDomain(v6),
            v8 = (void *)objc_claimAutoreleasedReturnValue(v7),
            v9 = objc_msgSend(v6, "isEqualToString:", v8),
            v8,
            v6,
            v9))
      {
        objc_msgSend(WeakRetained, "_searchCanceled");
      }
      else
      {
        objc_msgSend(WeakRetained, "_searchFailedWithError:ticket:enableStructuredRAPAffordance:", v13, *(_QWORD *)(a1 + 32), objc_msgSend(WeakRetained, "_shouldEnableRAPForNoResultsWithError:", v13));
      }
      objc_msgSend(WeakRetained, "reset");
    }
    else
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[SearchInfo searchInfoWithTicket:searchType:](SearchInfo, "searchInfoWithTicket:searchType:", *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 48)));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "traits"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "mapRegion"));
      objc_msgSend(v10, "setRequestedMapRegion:", v12);

      objc_msgSend(WeakRetained, "_searchReceivedResults:", v10);
    }
  }

}

void sub_100293950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100293968(uint64_t a1, int a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(void **)(v3 + 40);
  if (a2)
  {
    if (!v4)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[LoadingIndicatorController sharedController](LoadingIndicatorController, "sharedController"));
      v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "beginShowingLoadingIndicator"));
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v7 = *(void **)(v6 + 40);
      *(_QWORD *)(v6 + 40) = v5;

    }
  }
  else if (v4)
  {
    *(_QWORD *)(v3 + 40) = 0;

  }
}

void sub_1002939F0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  unsigned int v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v4 = a3;
  v12 = v4;
  if (v4)
  {
    if (objc_msgSend(v4, "code") == (id)-2
      && (v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "domain")),
          v6 = GEOErrorDomain(v5),
          v7 = (void *)objc_claimAutoreleasedReturnValue(v6),
          v8 = objc_msgSend(v5, "isEqualToString:", v7),
          v7,
          v5,
          v8))
    {
      objc_msgSend(*(id *)(a1 + 32), "_searchCanceled");
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 32), "_searchFailedWithError:", v12);
    }
    objc_msgSend(*(id *)(a1 + 32), "reset");
  }
  else
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[SearchInfo searchInfoWithTicket:searchType:](SearchInfo, "searchInfoWithTicket:searchType:", *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48)));
    objc_msgSend(v9, "setSelectedIndex:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "traits"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "mapRegion"));
    objc_msgSend(v9, "setRequestedMapRegion:", v11);

    objc_msgSend(*(id *)(a1 + 32), "_searchReceivedResults:", v9);
  }

}

void sub_100293CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  id *v25;

  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

void sub_100293D28(uint64_t a1, int a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(void **)(v3 + 40);
  if (a2)
  {
    if (!v4)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[LoadingIndicatorController sharedController](LoadingIndicatorController, "sharedController"));
      v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "beginShowingLoadingIndicator"));
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v7 = *(void **)(v6 + 40);
      *(_QWORD *)(v6 + 40) = v5;

    }
  }
  else if (v4)
  {
    *(_QWORD *)(v3 + 40) = 0;

  }
}

void sub_100293DB0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id WeakRetained;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  unsigned __int8 v19;
  char v20;
  void *v21;
  void *v22;
  unsigned __int8 v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  void *v27;
  __int16 v28;
  id v29;

  v6 = a3;
  v7 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v9 = sub_10043222C();
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchQuery"));
      v26 = 138412546;
      v27 = v11;
      v28 = 2112;
      v29 = v7;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Search received for Query: %@ with Error: %@", (uint8_t *)&v26, 0x16u);

    }
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[SearchInfo searchInfoWithTicket:searchType:](SearchInfo, "searchInfoWithTicket:searchType:", *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 64)));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "traits"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "mapRegion"));
    objc_msgSend(v12, "setRequestedMapRegion:", v14);

    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "traits"));
    objc_msgSend(v12, "setSearchAlongRoute:", objc_msgSend(v15, "navigating"));

    if (objc_msgSend(v7, "code") == (id)-2
      && (v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "domain")),
          v17 = GEOErrorDomain(v16),
          v18 = (void *)objc_claimAutoreleasedReturnValue(v17),
          v19 = objc_msgSend(v16, "isEqualToString:", v18),
          v18,
          v16,
          (v19 & 1) != 0))
    {
      v20 = 1;
    }
    else
    {
      if (*(_BYTE *)(a1 + 68))
      {
        v21 = (void *)objc_claimAutoreleasedReturnValue(+[SearchHistoryRecorderFactory historyRecorderWithTicket:ticketError:searchInfo:auxiliaryControlsOrigin:refinedMapItems:completionTitle:](SearchHistoryRecorderFactory, "historyRecorderWithTicket:ticketError:searchInfo:auxiliaryControlsOrigin:refinedMapItems:completionTitle:", *(_QWORD *)(a1 + 32), v7, v12, *(_QWORD *)(a1 + 56), v6, *(_QWORD *)(a1 + 40)));
        objc_msgSend(v21, "recordItemInHistory");

      }
      v20 = 0;
    }
    if (objc_msgSend(v7, "code") == (id)-8)
    {
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "publisher"));
      if (v22
        || (v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "placeCollections")),
            objc_msgSend(v22, "count")))
      {

        goto LABEL_20;
      }
      v23 = objc_msgSend(v12, "canRedoSearch");

      if ((v23 & 1) != 0)
        goto LABEL_20;
    }
    if (v7)
    {
      v24 = objc_msgSend(*(id *)(a1 + 32), "searchResultType");
      v25 = v24;
      if ((v20 & 1) != 0)
      {
        objc_msgSend(WeakRetained, "_searchCanceled");
        if (!v25)
          goto LABEL_21;
      }
      else if (!v24)
      {
        objc_msgSend(WeakRetained, "_searchFailedWithError:ticket:enableStructuredRAPAffordance:", v7, *(_QWORD *)(a1 + 32), objc_msgSend(WeakRetained, "_shouldEnableRAPForNoResultsWithError:", v7));
        goto LABEL_21;
      }
    }
LABEL_20:
    objc_msgSend(WeakRetained, "_searchReceivedResults:", v12);
LABEL_21:

  }
}

id sub_100294A08(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_searchForHistoryItem:completedQuery:traits:source:isRedoOrAutoRedoSearch:", *(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 56), *(unsigned __int8 *)(a1 + 60));
}

id sub_100294A28(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_searchForHistoryItem:completedQuery:traits:source:isRedoOrAutoRedoSearch:", *(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 56), *(unsigned __int8 *)(a1 + 60));
}

void sub_100294C94(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  NSObject *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  int8x16_t v29;
  _QWORD v30[4];
  int8x16_t v31;
  id v32;
  id v33;
  double v34;
  double v35;
  int v36;
  NSErrorUserInfoKey v37;
  const __CFString *v38;
  uint8_t buf[4];
  void *v40;

  v3 = a2;
  if (v3)
  {
    v4 = sub_10043229C();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "handle"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "handle"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "handleIdentifier"));
      *(_DWORD *)buf = 138412290;
      v40 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Got fresh location for handle: %@", buf, 0xCu);

    }
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "handle"));
    objc_msgSend(v9, "setLocation:", v3);

    objc_msgSend(v3, "latLng");
    v11 = v10;
    objc_msgSend(v3, "latLng");
    v13 = v12;
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "ticketForReverseGeocodeCoordinate:traits:", *(_QWORD *)(a1 + 56), v11, v13));

    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_100295030;
    v30[3] = &unk_1011AF0B0;
    v29 = *(int8x16_t *)(a1 + 32);
    v16 = (id)v29.i64[0];
    v31 = vextq_s8(v29, v29, 8uLL);
    v34 = v11;
    v35 = v13;
    v32 = *(id *)(a1 + 48);
    v33 = *(id *)(a1 + 56);
    v36 = *(_DWORD *)(a1 + 64);
    objc_msgSend(v15, "submitWithHandler:networkActivity:", v30, 0);

LABEL_5:
    goto LABEL_10;
  }
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contact"));
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "postalAddresses"));
  v19 = objc_msgSend(v18, "count");

  v20 = sub_10043229C();
  v21 = objc_claimAutoreleasedReturnValue(v20);
  v22 = v21;
  if (!v19)
  {
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "handle"));
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "handle"));
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "handleIdentifier"));
      *(_DWORD *)buf = 138412290;
      v40 = v27;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Failed to get fresh location for handle: %@", buf, 0xCu);

    }
    v37 = NSLocalizedDescriptionKey;
    v38 = CFSTR("Unable to get fresh location.");
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v38, &v37, 1));
    v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("SearchFindMy"), 0, v15));
    objc_msgSend(*(id *)(a1 + 40), "_searchFailedWithError:", v28);

    goto LABEL_5;
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
  {
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contact"));
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "identifier"));
    *(_DWORD *)buf = 138412290;
    v40 = v24;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "Couldn't get fresh location but showing the contact card for: %@", buf, 0xCu);

  }
  objc_msgSend(*(id *)(a1 + 40), "_searchForContactAddressedForAutocompletePerson:searchResults:traits:source:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(unsigned int *)(a1 + 64));
LABEL_10:

}

void sub_100295030(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  SearchResult *v11;
  SearchResult *v12;
  NSObject *v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  id v18;
  void *v19;
  int v20;
  id v21;

  v5 = a2;
  v6 = a3;
  if (v6 || !objc_msgSend(v5, "count"))
  {
    v7 = sub_10043229C();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v20 = 138412290;
      v21 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Fresh location ReverseGeocodeAction resolveMapItem: %@", (uint8_t *)&v20, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 32), "_handleGeocoderError:", v6);
  }
  else
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "title"));
    objc_msgSend(v9, "setName:", v10);

    v11 = -[SearchResult initWithMapItem:]([SearchResult alloc], "initWithMapItem:", v9);
    v12 = v11;
    if (v11)
    {
      -[SearchResult setLocationType:](v11, "setLocationType:", 4);
      -[SearchResult setCoordinate:preserveLocationInfo:](v12, "setCoordinate:preserveLocationInfo:", 1, *(double *)(a1 + 64), *(double *)(a1 + 72));
      -[SearchResult setAutocompletePerson:](v12, "setAutocompletePerson:", *(_QWORD *)(a1 + 40));
      v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "updatedContactFrom:", v9));
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[AddressBookAddress singleAddressForContact:](AddressBookAddress, "singleAddressForContact:", v13));
      -[SearchResult setAddress:](v12, "setAddress:", v14);

      v15 = sub_10043229C();
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        v17 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject identifier](v13, "identifier"));
        v20 = 138412290;
        v21 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "SearchResult with shared location created. ContactIdentifier:%@", (uint8_t *)&v20, 0xCu);

      }
      objc_msgSend(*(id *)(a1 + 48), "addObject:", v12);
    }
    else
    {
      v18 = sub_10043229C();
      v13 = objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "name"));
        v20 = 138412290;
        v21 = v19;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Failed to create search result for mapItem: %@", (uint8_t *)&v20, 0xCu);

      }
    }

    objc_msgSend(*(id *)(a1 + 32), "_searchForContactAddressedForAutocompletePerson:searchResults:traits:source:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(unsigned int *)(a1 + 80));
  }

}

void sub_100295650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 208), 8);
  _Block_object_dispose((const void *)(v33 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_10029568C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  _QWORD v19[4];
  id v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  void *v31;

  v3 = a2;
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
  v4 = *(void **)(a1 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "value"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "stringFromPostalAddress:", v5));

  v7 = sub_10043229C();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), "identifier"));
    *(_DWORD *)buf = 138412546;
    v29 = v6;
    v30 = 2112;
    v31 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Performing rev-geo for address:(%@). ContactIdentifier:%@", buf, 0x16u);

  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet newlineCharacterSet](NSCharacterSet, "newlineCharacterSet"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "componentsSeparatedByCharactersInSet:", v10));
  v12 = objc_msgSend(v11, "componentsJoinedByString:", CFSTR(","));

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "ticketForForwardGeocodeString:traits:", v6, *(_QWORD *)(a1 + 48)));

  v19[0] = _NSConcreteStackBlock;
  v19[2] = sub_1002958C8;
  v19[3] = &unk_1011AF100;
  v26 = *(_QWORD *)(a1 + 88);
  v15 = *(_QWORD *)(a1 + 56);
  v16 = *(void **)(a1 + 64);
  v20 = v6;
  v21 = v15;
  v19[1] = 3221225472;
  v22 = v16;
  v23 = v3;
  v27 = *(_QWORD *)(a1 + 96);
  v24 = *(id *)(a1 + 72);
  v25 = *(id *)(a1 + 32);
  v17 = v3;
  v18 = v6;
  objc_msgSend(v14, "submitWithHandler:networkActivity:", v19, 0);

}

void sub_1002958C8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  SearchResult *v9;
  void *v10;
  void *v11;
  SearchResult *v12;
  void *v13;
  unsigned __int8 v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  SearchResult *v18;
  void *v19;
  unsigned __int8 v20;
  void *v21;
  unsigned int v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  NSObject *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  int v32;
  SearchResult *v33;
  __int16 v34;
  _BYTE v35[14];
  __int16 v36;
  uint64_t v37;

  v5 = a2;
  v6 = a3;
  if (v6 || !objc_msgSend(v5, "count"))
  {
    v7 = sub_10043229C();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = *(SearchResult **)(a1 + 32);
      v32 = 138412546;
      v33 = v9;
      v34 = 2112;
      *(_QWORD *)v35 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to geocode address %@, error: %@", (uint8_t *)&v32, 0x16u);
    }

    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), a3);
    objc_msgSend(*(id *)(a1 + 40), "_handleGeocoderError:", v6);
  }
  else
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "title"));
    objc_msgSend(v10, "setName:", v11);

    v12 = -[SearchResult initWithMapItem:]([SearchResult alloc], "initWithMapItem:", v10);
    if (v12)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "label"));
      v14 = objc_msgSend(v13, "isEqual:", CNLabelHome);

      if ((v14 & 1) != 0)
      {
        v15 = 1;
      }
      else
      {
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "label"));
        v20 = objc_msgSend(v19, "isEqual:", CNLabelWork);

        if ((v20 & 1) != 0)
        {
          v15 = 2;
        }
        else
        {
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "label"));
          v22 = objc_msgSend(v21, "isEqual:", CNLabelSchool);

          if (v22)
            v15 = 3;
          else
            v15 = 0;
        }
      }
      -[SearchResult setLocationType:](v12, "setLocationType:", v15);
      -[SearchResult setAutocompletePerson:](v12, "setAutocompletePerson:", *(_QWORD *)(a1 + 48));
      v23 = *(void **)(a1 + 48);
      v24 = (void *)objc_claimAutoreleasedReturnValue(-[SearchResult mapItem](v12, "mapItem"));
      v25 = (id)-[SearchResult locationType](v12, "locationType");
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "identifier"));
      v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "contactPrioritizingWithAddressFor:kind:cnLabelValueIdentifier:followedBy:", v24, v25, v26, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40)));

      v27 = sub_10043229C();
      v28 = objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        v29 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject identifier](v17, "identifier"));
        v30 = *(_QWORD *)(a1 + 32);
        v32 = 138413058;
        v33 = v12;
        v34 = 1024;
        *(_DWORD *)v35 = v15;
        *(_WORD *)&v35[4] = 2112;
        *(_QWORD *)&v35[6] = v29;
        v36 = 2112;
        v37 = v30;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "SearchResult:%@ created with type:%u ContactIdentifier:%@ address:%@", (uint8_t *)&v32, 0x26u);

      }
      v31 = (void *)objc_claimAutoreleasedReturnValue(+[AddressBookAddress singleAddressForContact:](AddressBookAddress, "singleAddressForContact:", v17));
      -[SearchResult setAddress:](v12, "setAddress:", v31);

      objc_msgSend(*(id *)(a1 + 64), "addObject:", v12);
    }
    else
    {
      v16 = sub_10043229C();
      v17 = objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        v18 = (SearchResult *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "name"));
        v32 = 138412290;
        v33 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Failed to create search result for mapItem: %@", (uint8_t *)&v32, 0xCu);

      }
    }

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));

}

void sub_100295C7C(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  NSObject *v5;
  id v6;
  NSObject *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *j;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  NSObject *v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  void *i;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  NSObject *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  id v40;
  void *v41;
  NSObject *v42;
  _QWORD block[4];
  id v44;
  id v45;
  id v46;
  id v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _BYTE v56[128];
  uint8_t v57[128];
  uint8_t buf[4];
  void *v59;
  __int16 v60;
  void *v61;
  __int16 v62;
  void *v63;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (WeakRetained)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "correctedSearchResultsFrom:", *(_QWORD *)(a1 + 40)));
    v4 = v3;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40) && !objc_msgSend(v3, "count"))
    {
      v33 = sub_10043229C();
      v5 = objc_claimAutoreleasedReturnValue(v33);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v34 = v5;
        v35 = v4;
        v36 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
        v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "contact"));
        v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "identifier"));
        v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "identifier"));
        *(_DWORD *)buf = 138412802;
        v59 = v36;
        v4 = v35;
        v5 = v34;
        v60 = 2112;
        v61 = v38;
        v62 = 2112;
        v63 = v39;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "There is an error : %@ while searching for contacts. The contact identifier: %@ and handle identifier: %@", buf, 0x20u);

      }
      goto LABEL_41;
    }
    v5 = objc_alloc_init((Class)NSMutableArray);
    if ((unint64_t)objc_msgSend(v4, "count") > 4)
    {
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40))
      {
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "firstObject"));

        if (v19)
        {
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "firstObject"));
          -[NSObject addObject:](v5, "addObject:", v20);

        }
      }
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "orderedSearchResults:itemsToFrame:", v4, v5));
      v21 = sub_10043229C();
      v22 = objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v59 = v9;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "Framing search results: %@", buf, 0xCu);
      }
      v41 = v4;
      v42 = v5;

      v23 = sub_10039DCD4(v9, &stru_1011AF188);
      v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
      v48 = 0u;
      v49 = 0u;
      v50 = 0u;
      v51 = 0u;
      v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v48, v56, 16);
      if (v25)
      {
        v26 = v25;
        v12 = 0;
        v27 = *(_QWORD *)v49;
        do
        {
          for (i = 0; i != v26; i = (char *)i + 1)
          {
            if (*(_QWORD *)v49 != v27)
              objc_enumerationMutation(v24);
            v29 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v48 + 1) + 8 * (_QWORD)i), "_displayMapRegion", v41));
            v30 = (void *)v29;
            if (v12)
            {
              v31 = GEOMapRegionUnion(v12, v29);
              v32 = objc_claimAutoreleasedReturnValue(v31);

              v12 = (void *)v32;
            }
            else
            {
              v12 = (void *)v29;
            }
          }
          v26 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v48, v56, 16);
        }
        while (v26);
      }
      else
      {
        v12 = 0;
      }

      v4 = v41;
    }
    else
    {
      v6 = sub_10043229C();
      v7 = objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Framing all search results", buf, 2u);
      }

      v8 = sub_10039DCD4(v4, &stru_1011AF168);
      v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      v52 = 0u;
      v53 = 0u;
      v54 = 0u;
      v55 = 0u;
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v52, v57, 16);
      if (!v10)
      {
        v12 = 0;
LABEL_40:

        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_10029614C;
        block[3] = &unk_1011AF1B0;
        v44 = v4;
        v45 = *(id *)(a1 + 48);
        v46 = v12;
        v47 = WeakRetained;
        v40 = v12;
        dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

LABEL_41:
        goto LABEL_42;
      }
      v11 = v10;
      v42 = v5;
      v12 = 0;
      v13 = *(_QWORD *)v53;
      do
      {
        for (j = 0; j != v11; j = (char *)j + 1)
        {
          if (*(_QWORD *)v53 != v13)
            objc_enumerationMutation(v9);
          v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v52 + 1) + 8 * (_QWORD)j), "_displayMapRegion"));
          v16 = (void *)v15;
          if (v12)
          {
            v17 = GEOMapRegionUnion(v12, v15);
            v18 = objc_claimAutoreleasedReturnValue(v17);

            v12 = (void *)v18;
          }
          else
          {
            v12 = (void *)v15;
          }
        }
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v52, v57, 16);
      }
      while (v11);
    }
    v5 = v42;
    goto LABEL_40;
  }
LABEL_42:

}

id sub_10029613C(id a1, SearchResult *a2, unint64_t a3)
{
  return -[SearchResult mapItem](a2, "mapItem", a3);
}

id sub_100296144(id a1, SearchResult *a2, unint64_t a3)
{
  return -[SearchResult mapItem](a2, "mapItem", a3);
}

void sub_10029614C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;

  v2 = sub_10043229C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    v7 = 138412546;
    v8 = v4;
    v9 = 2112;
    v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "SearchResuls: %@, ACPerson: %@", (uint8_t *)&v7, 0x16u);
  }

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[SearchInfo searchInfoWithResults:boundingMapRegion:autocompleterPerson:](SearchInfo, "searchInfoWithResults:boundingMapRegion:autocompleterPerson:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40)));
  objc_msgSend(v6, "setSelectedIndex:", 0);
  objc_msgSend(*(id *)(a1 + 56), "_searchReceivedResults:", v6);

}

BOOL sub_10029639C(id a1, SearchResult *a2, unint64_t a3, BOOL *a4)
{
  return -[SearchResult locationType](a2, "locationType", a3, a4) == 4;
}

BOOL sub_1002963BC(id a1, SearchResult *a2, unint64_t a3, BOOL *a4)
{
  return -[SearchResult locationType](a2, "locationType", a3, a4) == 1;
}

BOOL sub_1002963DC(id a1, SearchResult *a2, unint64_t a3, BOOL *a4)
{
  return -[SearchResult locationType](a2, "locationType", a3, a4) == 2;
}

BOOL sub_1002963FC(id a1, SearchResult *a2, unint64_t a3, BOOL *a4)
{
  return -[SearchResult locationType](a2, "locationType", a3, a4) == 3;
}

BOOL sub_10029641C(id a1, SearchResult *a2, unint64_t a3, BOOL *a4)
{
  return -[SearchResult locationType](a2, "locationType", a3, a4) == 0;
}

void sub_1002967D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

BOOL sub_100296800(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "locationType") == *(_DWORD *)(a1 + 32);
}

void sub_100296830(uint64_t a1, void *a2)
{
  void *v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  void *v10;
  void *v11;
  id v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  id v17;

  v17 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "mapItem"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "_geoMapItem"));
  objc_msgSend(v5, "coordinate");
  v7 = v6;
  v9 = v8;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapItem"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "_geoMapItem"));
  v12 = objc_msgSend(v11, "coordinate");
  v15 = GEOCalculateDistance(v12, v7, v9, v13, v14);

  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (v15 < *(double *)(v16 + 24))
  {
    *(double *)(v16 + 24) = v15;
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a2);
  }

}

void sub_10029740C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD block[4];
  id v8;
  id v9;
  uint64_t v10;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002974B8;
  block[3] = &unk_1011AD238;
  v8 = a2;
  v9 = a3;
  v10 = *(_QWORD *)(a1 + 32);
  v5 = v9;
  v6 = v8;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_1002974B8(uint64_t a1)
{
  BOOL v2;
  SearchResult *v3;
  void *v4;
  void *v5;
  SearchResult *v6;

  if (*(_QWORD *)(a1 + 32))
    v2 = *(_QWORD *)(a1 + 40) == 0;
  else
    v2 = 0;
  if (v2)
  {
    v3 = -[SearchResult initWithMapItem:]([SearchResult alloc], "initWithMapItem:", *(_QWORD *)(a1 + 32));
    v6 = v3;
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v6, 1));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[SearchInfo searchInfoWithResults:](SearchInfo, "searchInfoWithResults:", v4));

    objc_msgSend(*(id *)(a1 + 48), "_searchReceivedResults:", v5);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 48), "_searchFailedWithError:");
  }
}

void sub_100297938(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_100297968(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  NSString *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;

  v23 = a4;
  if (v23)
  {
    v5 = NSStringFromSelector(*(SEL *)(a1 + 64));
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    sub_100297ABC((uint64_t)v23, v7, v8, v9, v10, v11, v12, v13, (uint64_t)v6);

    objc_msgSend(*(id *)(a1 + 32), "_handleGeocoderError:", v23);
  }
  else
  {
    v14 = objc_msgSend(*(id *)(a1 + 40), "isValid");
    v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
    if (v14)
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[SearchInfo searchInfoWithTicket:addressBookAddress:searchType:](SearchInfo, "searchInfoWithTicket:addressBookAddress:searchType:", v15, *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 72)));
    }
    else
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[SearchInfo searchInfoWithTicket:searchType:](SearchInfo, "searchInfoWithTicket:searchType:", v15, *(unsigned int *)(a1 + 72)));
      if (objc_msgSend(*(id *)(a1 + 48), "length"))
      {
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "results"));
        v18 = objc_msgSend(v17, "count");

        if (v18 == (id)1)
        {
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "results"));
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "firstObject"));

          v21 = *(_QWORD *)(a1 + 48);
          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "mapItem"));
          objc_msgSend(v22, "setName:", v21);

        }
      }
    }
    objc_msgSend(*(id *)(a1 + 32), "_searchReceivedResults:", v16);

  }
}

void sub_100297ABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v9;

  if (CFPreferencesGetAppBooleanValue(CFSTR("LogSearch"), CFSTR("com.apple.Maps"), 0)
    || CFPreferencesGetAppBooleanValue(CFSTR("ComprehensiveLogging"), CFSTR("com.apple.Maps"), 0))
  {
    v9 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:arguments:", CFSTR("[SearchManager %@] Failed to geocode \"%@\" (%@)"), &a9);
    NSLog(CFSTR("%@"), v9);

  }
}

void sub_100297B50(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSString *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  SearchResult *v16;
  void *v17;
  void *v18;
  SearchResult *v19;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = NSStringFromSelector(*(SEL *)(a1 + 56));
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    sub_100297ABC((uint64_t)v8, v9, v10, v11, v12, v13, v14, v15, (uint64_t)v8);

    objc_msgSend(*(id *)(a1 + 32), "_handleGeocoderError:", v6);
  }
  else if (v5)
  {
    v16 = -[SearchResult initWithMapItem:searchResultType:addressBookAddress:retainedSearchMetadata:resultIndex:]([SearchResult alloc], "initWithMapItem:searchResultType:addressBookAddress:retainedSearchMetadata:resultIndex:", v5, *(unsigned int *)(a1 + 64), *(_QWORD *)(a1 + 40), 0, 0);
    v19 = v16;
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v19, 1));
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[SearchInfo searchInfoWithResults:](SearchInfo, "searchInfoWithResults:", v17));

    objc_msgSend(*(id *)(a1 + 32), "_searchReceivedResults:", v18);
  }

}

void sub_100297C8C(uint64_t a1, int a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(void **)(v3 + 40);
  if (a2)
  {
    if (!v4)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[LoadingIndicatorController sharedController](LoadingIndicatorController, "sharedController"));
      v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "beginShowingLoadingIndicator"));
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v7 = *(void **)(v6 + 40);
      *(_QWORD *)(v6 + 40) = v5;

    }
  }
  else if (v4)
  {
    *(_QWORD *)(v3 + 40) = 0;

  }
}

void sub_100298044(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "searchSessionData"));
  objc_msgSend(v5, "searchManager:didReceiveSearchInfo:searchSessionData:error:", v3, v2, v4, 0);

}

void sub_100298460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void sub_10029848C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "_maps_ticketForSearchHistoryEntry:source:traits:isRedoOrAutoRedoSearch:", v3, *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 60)));

  objc_msgSend(*(id *)(a1 + 40), "_submitSearchTicket:defaultSearchResultType:saveToHistory:origin:", v5, 0, 0, ((*(_DWORD *)(a1 + 56) - 6) & 0xFFFFFFF9) == 0);
}

void sub_100298538(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  SearchResult *v11;
  void *v12;
  void *v13;
  SearchResult *v14;
  void *v15;

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "geoMapItem"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapItem _itemWithGeoMapItem:](MKMapItem, "_itemWithGeoMapItem:", v3));

  if (objc_msgSend(v4, "_hasMUID"))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    v6 = *(void **)(a1 + 32);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "searchFieldItem"));
    objc_msgSend(v5, "searchManager:willProcessSearchFieldItem:", v6, v7);

    v8 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "_identifier"));
    v15 = v9;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v15, 1));
    v11 = (SearchResult *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "ticketForIdentifiers:resultProviderID:contentProvider:traits:", v10, objc_msgSend(v4, "_resultProviderID"), 0, *(_QWORD *)(a1 + 40)));

    objc_msgSend(*(id *)(a1 + 32), "_submitTicket:defaultSearchResultType:origin:", v11, 0, ((*(_DWORD *)(a1 + 64) - 6) & 0xFFFFFFF9) == 0);
  }
  else
  {
    v11 = -[SearchResult initWithMapItem:]([SearchResult alloc], "initWithMapItem:", v4);
    v12 = *(void **)(a1 + 32);
    v14 = v11;
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v14, 1));
    objc_msgSend(v12, "_searchForSearchResults:completedQuery:", v13, *(_QWORD *)(a1 + 48));

  }
}

void sub_1002989C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1002989E0(uint64_t a1, int a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(void **)(v3 + 40);
  if (a2)
  {
    if (!v4)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[LoadingIndicatorController sharedController](LoadingIndicatorController, "sharedController"));
      v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "beginShowingLoadingIndicator"));
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v7 = *(void **)(v6 + 40);
      *(_QWORD *)(v6 + 40) = v5;

    }
  }
  else if (v4)
  {
    *(_QWORD *)(v3 + 40) = 0;

  }
}

void sub_100298A68(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  void *i;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (v9)
  {
    v22 = *(_QWORD *)(a1 + 32);
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v22, 1));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[SearchInfo searchInfoWithResults:](SearchInfo, "searchInfoWithResults:", v10));

  }
  else
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[SearchInfo searchInfoWithTicket:addressBookAddress:searchType:forRefinementSearchForBookmark:](SearchInfo, "searchInfoWithTicket:addressBookAddress:searchType:forRefinementSearchForBookmark:", *(_QWORD *)(a1 + 40), 0, objc_msgSend(*(id *)(a1 + 32), "type"), *(_QWORD *)(a1 + 32)));
  }
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "results", 0));
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v18;
    do
    {
      for (i = 0; i != v14; i = (char *)i + 1)
      {
        if (*(_QWORD *)v18 != v15)
          objc_enumerationMutation(v12);
        objc_msgSend(*(id *)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)i), "markAsOriginatingFromBookmarks");
      }
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    }
    while (v14);
  }

  objc_msgSend(*(id *)(a1 + 48), "_searchReceivedResults:", v11);
}

void sub_1002999E4(uint64_t a1)
{
  uint64_t Array;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD v22[11];

  Array = GEOConfigGetArray(MapsConfig_SearchDefaultSortPriorityMapping, off_1014B3368);
  v2 = objc_claimAutoreleasedReturnValue(Array);
  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[GEOSortPriorityMapping sortPriorityMappingFromDefaultsValue:](GEOSortPriorityMapping, "sortPriorityMappingFromDefaultsValue:", v2));
    if (v3)
    {
      v4 = objc_claimAutoreleasedReturnValue(+[PersonalizedItemPriorityFunction priorityFunctionForGEOSortPriorityMapping:](PersonalizedItemPriorityFunction, "priorityFunctionForGEOSortPriorityMapping:", v3));
      v5 = (void *)qword_1014D1F08;
      qword_1014D1F08 = v4;

    }
  }
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[PersonalizedItemPriorityFunctionEntry entryWithPriority:sourceType:matchBlock:](PersonalizedItemPriorityFunctionEntry, "entryWithPriority:sourceType:matchBlock:", 400, 1, &stru_1011AF450));
  v22[0] = v20;
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[PersonalizedItemPriorityFunctionEntry entryWithPriority:sourceType:matchBlock:](PersonalizedItemPriorityFunctionEntry, "entryWithPriority:sourceType:matchBlock:", 350, 1, &stru_1011AF470));
  v22[1] = v19;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[PersonalizedItemPriorityFunctionEntry entryWithPriority:sourceType:sourceSubtype:](PersonalizedItemPriorityFunctionEntry, "entryWithPriority:sourceType:sourceSubtype:", 350, 6, 6));
  v22[2] = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[PersonalizedItemPriorityFunctionEntry entryWithPriority:sourceType:sourceSubtype:](PersonalizedItemPriorityFunctionEntry, "entryWithPriority:sourceType:sourceSubtype:", 350, 6, 8));
  v22[3] = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[PersonalizedItemPriorityFunctionEntry entryWithPriority:sourceType:sourceSubtype:](PersonalizedItemPriorityFunctionEntry, "entryWithPriority:sourceType:sourceSubtype:", 300, 3, 2));
  v22[4] = v8;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[PersonalizedItemPriorityFunctionEntry entryWithPriority:sourceType:](PersonalizedItemPriorityFunctionEntry, "entryWithPriority:sourceType:", 300, 9));
  v22[5] = v9;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[PersonalizedItemPriorityFunctionEntry entryWithPriority:sourceType:](PersonalizedItemPriorityFunctionEntry, "entryWithPriority:sourceType:", 250, 2));
  v22[6] = v10;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[PersonalizedItemPriorityFunctionEntry entryWithPriority:sourceType:sourceSubtype:](PersonalizedItemPriorityFunctionEntry, "entryWithPriority:sourceType:sourceSubtype:", 200, 3, 1));
  v22[7] = v11;
  v18 = (void *)v2;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[PersonalizedItemPriorityFunctionEntry entryWithPriority:sourceType:](PersonalizedItemPriorityFunctionEntry, "entryWithPriority:sourceType:", 150, 8));
  v22[8] = v12;
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[PersonalizedItemPriorityFunctionEntry entryWithPriority:sourceType:](PersonalizedItemPriorityFunctionEntry, "entryWithPriority:sourceType:", 100, 1));
  v22[9] = v13;
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[PersonalizedItemPriorityFunctionEntry defaultEntryWithPriority:](PersonalizedItemPriorityFunctionEntry, "defaultEntryWithPriority:", 200));
  v22[10] = v14;
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v22, 11));

  v16 = objc_msgSend(objc_alloc(*(Class *)(a1 + 32)), "initWithEntries:", v15);
  v17 = (void *)qword_1014D1F10;
  qword_1014D1F10 = (uint64_t)v16;

}

BOOL sub_100299C8C(id a1, PersonalizedAutocompleteItem *a2)
{
  PersonalizedAutocompleteItem *v2;
  void *v3;
  uint64_t v4;
  char isKindOfClass;
  void *v6;
  void *v7;
  BOOL v8;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(-[PersonalizedAutocompleteItem autocompleteObject](v2, "autocompleteObject"));
  v4 = objc_opt_class(MKLocalSearchCompletion);
  isKindOfClass = objc_opt_isKindOfClass(v3, v4);

  if ((isKindOfClass & 1) != 0)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(-[PersonalizedAutocompleteItem autocompleteObject](v2, "autocompleteObject"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "directionIntent"));
    v8 = v7 != 0;

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

BOOL sub_100299D1C(id a1, PersonalizedAutocompleteItem *a2)
{
  PersonalizedAutocompleteItem *v2;
  void *v3;
  uint64_t v4;
  char isKindOfClass;
  void *v6;
  void *v7;
  BOOL v8;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(-[PersonalizedAutocompleteItem autocompleteObject](v2, "autocompleteObject"));
  v4 = objc_opt_class(MKLocalSearchCompletion);
  isKindOfClass = objc_opt_isKindOfClass(v3, v4);

  if ((isKindOfClass & 1) != 0)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(-[PersonalizedAutocompleteItem autocompleteObject](v2, "autocompleteObject"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "clientResolved"));
    v8 = v7 != 0;

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

void sub_100299E28(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  _QWORD v8[3];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[PersonalizedItemPriorityFunctionEntry entryWithPriority:sourceType:](PersonalizedItemPriorityFunctionEntry, "entryWithPriority:sourceType:", 100, 1));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[PersonalizedItemPriorityFunctionEntry entryWithPriority:sourceType:](PersonalizedItemPriorityFunctionEntry, "entryWithPriority:sourceType:", 1, 7, v2));
  v8[1] = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[PersonalizedItemPriorityFunctionEntry defaultEntryWithPriority:](PersonalizedItemPriorityFunctionEntry, "defaultEntryWithPriority:", 10));
  v8[2] = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v8, 3));

  v6 = objc_msgSend(objc_alloc(*(Class *)(a1 + 32)), "initWithEntries:", v5);
  v7 = (void *)qword_1014D1F20;
  qword_1014D1F20 = (uint64_t)v6;

}

DirectionsWaypoint *__cdecl sub_100299FBC(id a1, GEOComposedWaypoint *a2, unint64_t a3)
{
  GEOComposedWaypoint *v3;
  DirectionsWaypoint *v4;

  v3 = a2;
  v4 = objc_alloc_init(DirectionsWaypoint);
  -[DirectionsWaypoint updateFromGEOComposedWaypoint:](v4, "updateFromGEOComposedWaypoint:", v3);

  return v4;
}

const __CFString *sub_10029A24C(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR(".Unknown");
  else
    return *(&off_1011AF520 + a1);
}

void sub_10029BB2C(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v1, "layoutIfNeeded");

}

id sub_10029BB5C(uint64_t a1)
{
  id result;
  uint64_t v3;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 33) = 0;
  if (objc_msgSend(*(id *)(a1 + 32), "cardState") == (id)2 || objc_msgSend(*(id *)(a1 + 32), "cardState") == (id)3)
    +[PPTNotificationCenter postNotificationIfNeededWithName:object:userInfo:](PPTNotificationCenter, "postNotificationIfNeededWithName:object:userInfo:", CFSTR("MapsTestingMapsRegionUpdatedWithGuidanceStep"), *(_QWORD *)(a1 + 32), 0);
  result = +[PPTNotificationCenter postNotificationIfNeededWithName:object:userInfo:](PPTNotificationCenter, "postNotificationIfNeededWithName:object:userInfo:", CFSTR("MapsPPTGuidanceDidUpdateNotifcation"), *(_QWORD *)(a1 + 32), 0);
  v3 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v3 + 34))
  {
    *(_BYTE *)(v3 + 34) = 0;
    return objc_msgSend(*(id *)(a1 + 32), "_scheduleReloadAnimated:", *(unsigned __int8 *)(a1 + 40));
  }
  return result;
}

void sub_10029C270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10029C28C(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "fullGuidanceSign"));
    objc_msgSend(v3, "showJunctionViewAnimated:", *(unsigned __int8 *)(a1 + 40));

    WeakRetained = v4;
  }

}

id sub_10029FEE0(id a1, CarFocusableButton *a2, unint64_t a3)
{
  void *v3;
  double v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(-[CarFocusableButton heightAnchor](a2, "heightAnchor", a3));
  LODWORD(v4) = 1144750080;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "constraintEqualToConstant:priority:", 44.0, v4));

  return v5;
}

BOOL sub_1002A0300(id a1, GEOComposedWaypoint *a2, unint64_t a3, BOOL *a4)
{
  return -[GEOComposedWaypoint isServerProvidedWaypoint](a2, "isServerProvidedWaypoint", a3, a4) ^ 1;
}

BOOL sub_1002A1D00(id a1, GEOComposedWaypoint *a2, unint64_t a3, BOOL *a4)
{
  return -[GEOComposedWaypoint isServerProvidedWaypoint](a2, "isServerProvidedWaypoint", a3, a4) ^ 1;
}

BOOL sub_1002A20B8(id a1, GEOComposedWaypoint *a2, unint64_t a3, BOOL *a4)
{
  return -[GEOComposedWaypoint isServerProvidedWaypoint](a2, "isServerProvidedWaypoint", a3, a4) ^ 1;
}

void sub_1002A24C0(id *a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  unsigned __int8 v12;
  void *v13;
  void *v14;
  void *v15;
  unsigned int v16;
  id v17;

  v17 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "etaInfo"));
  v8 = a1[4];
  v9 = v7;
  v10 = (unint64_t)v8;
  if (!(v9 | v10))
  {
    v9 = 0;
LABEL_8:

    goto LABEL_9;
  }
  v11 = (void *)v10;
  v12 = objc_msgSend((id)v9, "isEqual:", v10);

  if ((v12 & 1) != 0)
    goto LABEL_8;
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "waypoint"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "uniqueID"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "waypointID"));
  v16 = objc_msgSend(v14, "isEqual:", v15);

  if (v16)
  {
    objc_msgSend(v17, "setEtaInfo:", a1[4]);
    v9 = objc_claimAutoreleasedReturnValue(+[NSIndexPath indexPathForRow:inSection:](NSIndexPath, "indexPathForRow:inSection:", a3, 1));
    if (objc_msgSend(a1[5], "containsObject:", v9))
      objc_msgSend(a1[6], "addObject:", v9);
    *a4 = 1;
    goto LABEL_8;
  }
LABEL_9:

}

id sub_1002A2ADC()
{
  if (qword_1014D1F38 != -1)
    dispatch_once(&qword_1014D1F38, &stru_1011AF628);
  return (id)qword_1014D1F30;
}

void sub_1002A3514(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint8_t v12[8];
  _QWORD v13[2];
  _QWORD v14[2];

  v2 = sub_1002A2ADC();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Swapping video", v12, 2u);
  }

  v4 = objc_alloc((Class)NSDataAsset);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "videoNameForCurrentState"));
  v6 = objc_msgSend(v4, "initWithName:", v5);

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "data"));
  v13[0] = AVAssetPreferPreciseDurationAndTimingKey;
  v13[1] = AVAssetReferenceRestrictionsKey;
  v14[0] = &__kCFBooleanFalse;
  v14[1] = &off_10126C928;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v14, v13, 2));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[AVAsset assetWithData:contentType:options:](AVAsset, "assetWithData:contentType:options:", v7, AVFileTypeQuickTimeMovie, v8));

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[AVPlayerItem playerItemWithAsset:](AVPlayerItem, "playerItemWithAsset:", v9));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "playerView"));
  objc_msgSend(v11, "replaceCurrentItemWithPlayerItem:preserveCurrentTimestamp:", v10, *(unsigned __int8 *)(a1 + 40));

}

void sub_1002A3794(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFScanningAnimationView");
  v2 = (void *)qword_1014D1F30;
  qword_1014D1F30 = (uint64_t)v1;

}

uint64_t sub_1002A37C4()
{
  if (qword_1014D1F48 != -1)
    dispatch_once(&qword_1014D1F48, &stru_1011AF678);
  return byte_1014D1F40;
}

void sub_1002A3804(id a1)
{
  byte_1014D1F40 = MGGetSInt32Answer(CFSTR("JwLB44/jEB8aFDpXQ16Tuw"), 0) == 2;
}

void sub_1002A3C18(id a1)
{
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = objc_msgSend(v1, "integerForKey:", CFSTR("__internal__keyColorOverride"));

  switch((unint64_t)v2)
  {
    case 1uLL:
      v3 = objc_claimAutoreleasedReturnValue(+[UIColor systemRedColor](UIColor, "systemRedColor"));
      break;
    case 2uLL:
      v3 = objc_claimAutoreleasedReturnValue(+[UIColor systemGreenColor](UIColor, "systemGreenColor"));
      break;
    case 4uLL:
      v3 = objc_claimAutoreleasedReturnValue(+[UIColor systemOrangeColor](UIColor, "systemOrangeColor"));
      break;
    case 5uLL:
      v3 = objc_claimAutoreleasedReturnValue(+[UIColor systemYellowColor](UIColor, "systemYellowColor"));
      break;
    case 6uLL:
      v3 = objc_claimAutoreleasedReturnValue(+[UIColor systemTealColor](UIColor, "systemTealColor"));
      break;
    case 7uLL:
      v3 = objc_claimAutoreleasedReturnValue(+[UIColor systemPinkColor](UIColor, "systemPinkColor"));
      break;
    case 8uLL:
      v3 = objc_claimAutoreleasedReturnValue(+[UIColor systemGrayColor](UIColor, "systemGrayColor"));
      break;
    default:
      v3 = objc_claimAutoreleasedReturnValue(+[UIColor systemBlueColor](UIColor, "systemBlueColor"));
      break;
  }
  v4 = (void *)qword_1014D1F50;
  qword_1014D1F50 = v3;

}

void sub_1002A3D60(id a1)
{
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = objc_msgSend(v1, "integerForKey:", CFSTR("__internal__keyColorOverride"));

  switch((unint64_t)v2)
  {
    case 1uLL:
      v3 = objc_claimAutoreleasedReturnValue(+[UIColor systemDarkRedColor](UIColor, "systemDarkRedColor"));
      break;
    case 2uLL:
      v3 = objc_claimAutoreleasedReturnValue(+[UIColor systemDarkGreenColor](UIColor, "systemDarkGreenColor"));
      break;
    case 4uLL:
      v3 = objc_claimAutoreleasedReturnValue(+[UIColor systemDarkOrangeColor](UIColor, "systemDarkOrangeColor"));
      break;
    case 5uLL:
      v3 = objc_claimAutoreleasedReturnValue(+[UIColor systemDarkYellowColor](UIColor, "systemDarkYellowColor"));
      break;
    case 6uLL:
      v3 = objc_claimAutoreleasedReturnValue(+[UIColor systemDarkTealColor](UIColor, "systemDarkTealColor"));
      break;
    case 7uLL:
      v3 = objc_claimAutoreleasedReturnValue(+[UIColor systemDarkPinkColor](UIColor, "systemDarkPinkColor"));
      break;
    case 8uLL:
      v3 = objc_claimAutoreleasedReturnValue(+[UIColor darkGrayColor](UIColor, "darkGrayColor"));
      break;
    default:
      v3 = objc_claimAutoreleasedReturnValue(+[UIColor systemDarkBlueColor](UIColor, "systemDarkBlueColor"));
      break;
  }
  v4 = (void *)qword_1014D1F60;
  qword_1014D1F60 = v3;

}

uint64_t sub_1002A5AA0(uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 48) && +[UIView areAnimationsEnabled](UIView, "areAnimationsEnabled"))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v2, "postNotificationName:object:", CFSTR("BacklightLuminanceDidChangeNotification"), *(_QWORD *)(a1 + 40));

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1002A8010(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "removals", 0));
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v9;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v6), "object"));
        objc_msgSend(*(id *)(a1 + 40), "sendSubviewToBack:", v7);
        objc_msgSend(v7, "setAlpha:", 0.0);
        objc_msgSend(v7, "setHidden:", 1);

        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v4);
  }

}

void sub_1002A8138(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *j;
  void *v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  _BYTE v24[128];

  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "removals"));
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v19, v24, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v20 != v5)
          objc_enumerationMutation(v2);
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)i), "object"));
        objc_msgSend(*(id *)(a1 + 40), "_maps_removeArrangedSubview:", v7);
        objc_msgSend(v7, "setHidden:", 0);
        objc_msgSend(v7, "setAlpha:", 1.0);

      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v19, v24, 16);
    }
    while (v4);
  }

  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "insertions", 0));
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v23, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v16;
    do
    {
      for (j = 0; j != v10; j = (char *)j + 1)
      {
        if (*(_QWORD *)v16 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)j);
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "object"));
        objc_msgSend(v14, "setHidden:", 1);
        objc_msgSend(v14, "setAlpha:", 0.0);
        objc_msgSend(*(id *)(a1 + 40), "insertArrangedSubview:atIndex:", v14, objc_msgSend(v13, "index"));

      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v23, 16);
    }
    while (v10);
  }

}

void sub_1002A8338(uint64_t a1)
{
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];

  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "insertions", 0));
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v8;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v8 != v4)
          objc_enumerationMutation(v1);
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * (_QWORD)v5), "object"));
        objc_msgSend(v6, "setHidden:", 0);
        objc_msgSend(v6, "setAlpha:", 1.0);

        v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v3);
  }

}

id sub_1002A8444(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "runWithCurrentOptions");
}

NSString *sub_1002A8844(void *a1, void *a2, void *a3)
{
  NSString *v5;
  NSString *v6;
  NSString *v7;
  NSString *v8;
  NSComparisonResult v9;
  NSComparisonResult v10;
  NSComparisonResult v11;
  NSString *v12;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = v5;
  if (v5)
  {
    v9 = UIContentSizeCategoryCompareToCategory(v5, UIContentSizeCategoryUnspecified);
    v8 = v5;
    if (v9)
    {
      if (!v6
        || UIContentSizeCategoryCompareToCategory(v6, UIContentSizeCategoryUnspecified) == NSOrderedSame
        || (v10 = UIContentSizeCategoryCompareToCategory(v6, v5), v8 = v6, v10 != NSOrderedDescending))
      {
        if (!v7
          || UIContentSizeCategoryCompareToCategory(v7, UIContentSizeCategoryUnspecified) == NSOrderedSame
          || (v11 = UIContentSizeCategoryCompareToCategory(v7, v5), v8 = v7, v11 != NSOrderedAscending))
        {
          v8 = v5;
        }
      }
    }
  }
  v12 = v8;

  return v12;
}

uint64_t sub_1002A8950(void *a1, void *a2)
{
  NSString *v3;
  NSString *v4;
  NSString *v5;
  _BOOL4 v6;
  NSComparisonResult v7;
  _BOOL8 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3 == v4)
  {
    v11 = 0;
    goto LABEL_18;
  }
  if (!v3)
  {
    v6 = 1;
    if (v4)
      goto LABEL_4;
LABEL_17:
    v11 = !v6;
    goto LABEL_18;
  }
  v6 = UIContentSizeCategoryCompareToCategory(v3, UIContentSizeCategoryUnspecified) == NSOrderedSame;
  if (!v5)
    goto LABEL_17;
LABEL_4:
  v7 = UIContentSizeCategoryCompareToCategory(v5, UIContentSizeCategoryUnspecified);
  if (v7)
    v8 = 0;
  else
    v8 = v6;
  if (v7)
    v9 = v6;
  else
    v9 = 1;
  v10 = v8 - 1;
  if (v6)
    v11 = v10;
  else
    v11 = 1;
  if ((v9 & 1) == 0)
    v11 = UIContentSizeCategoryCompareToCategory(v3, v5);
LABEL_18:

  return v11;
}

uint64_t sub_1002A8A0C(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  BOOL v7;
  BOOL v8;
  uint64_t result;
  BOOL v10;
  unsigned int v11;

  v3 = a2;
  v4 = objc_msgSend(a1, "_backlightLuminance");
  v5 = objc_msgSend(v3, "_backlightLuminance");

  if (v4 == (id)-1)
    return 0;
  v7 = v4 == (id)2 && v5 == (id)1;
  v8 = v5 == (id)2 && v4 == (id)1;
  result = 1;
  if (!v8)
  {
    if (v4)
      v10 = 0;
    else
      v10 = v5 == (id)1;
    v11 = v10;
    if (v4 == (id)1 && v5 == 0)
      v11 = 1;
    if (v7)
      return 1;
    else
      return v11;
  }
  return result;
}

uint64_t sub_1002A8AA0(void *a1)
{
  void *v1;
  id v2;

  if (!a1)
    return -1;
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "traitCollection"));
  v2 = objc_msgSend(v1, "userInterfaceIdiom");

  return (uint64_t)v2;
}

id sub_1002A8AFC(void *a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  id v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  char v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  double *v22;
  void *v23;
  void *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  double *v30;
  _BYTE v31[128];

  v11 = a1;
  v12 = objc_alloc_init((Class)NSMutableDictionary);
  v30 = (double *)&a10;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v25 = v11;
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "componentsSeparatedByString:", CFSTR(",")));
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v27;
    v17 = 1;
    do
    {
      v18 = 0;
      do
      {
        if (*(_QWORD *)v27 != v16)
          objc_enumerationMutation(v13);
        v19 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)v18);
        v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet whitespaceAndNewlineCharacterSet](NSCharacterSet, "whitespaceAndNewlineCharacterSet"));
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "stringByTrimmingCharactersInSet:", v20));

        if ((v17 & 1) == 0)
        {
          v22 = v30++;
          a2 = *v22;
        }
        v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a2));
        objc_msgSend(v12, "setObject:forKeyedSubscript:", v23, v21);

        v17 = 0;
        v18 = (char *)v18 + 1;
      }
      while (v15 != v18);
      v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
      v17 = 0;
    }
    while (v15);
  }

  return v12;
}

id sub_1002A8E94()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "delegate"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "window"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "rootViewController"));

  return v3;
}

NSNumber *__cdecl sub_1002A8F3C(id a1, NSNumber *a2, unint64_t a3)
{
  NSNumber *v3;
  double v4;
  NSNumber *v5;

  v3 = a2;
  -[NSNumber cgFloatValue](v3, "cgFloatValue");
  if (vabdd_f64(v4, UISheetPresentationControllerDetentInactive) <= 2.22044605e-16)
    v5 = 0;
  else
    v5 = v3;

  return v5;
}

void sub_1002A905C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

id sub_1002A9078(uint64_t a1, uint64_t a2)
{
  char v2;
  void *v4;
  id WeakRetained;
  void *v6;

  v2 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[_UIBackgroundViewConfiguration defaultPlainListCellConfigurationForState:](_UIBackgroundViewConfiguration, "defaultPlainListCellConfigurationForState:", a2));
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if ((v2 & 4) != 0)
    {
      objc_msgSend(v4, "setBackgroundColorMode:", 1);
      objc_msgSend(v4, "setCornerRadius:", 5.0);
      objc_msgSend(v4, "setBackgroundInsets:", 0.0, 10.0, 0.0, 10.0);
    }
    else
    {
      objc_msgSend(v4, "setBackgroundColorMode:", 0);
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor clearColor](UIColor, "clearColor"));
      objc_msgSend(v4, "setBackgroundColor:", v6);

    }
  }

  return v4;
}

void sub_1002A91C0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

id sub_1002A91DC(uint64_t a1, uint64_t a2)
{
  char v2;
  void *v4;
  id WeakRetained;
  void *v6;

  v2 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[_UIBackgroundViewConfiguration defaultPlainListCellConfigurationForState:](_UIBackgroundViewConfiguration, "defaultPlainListCellConfigurationForState:", a2));
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if ((v2 & 4) != 0)
    {
      objc_msgSend(v4, "setBackgroundColorMode:", 1);
      objc_msgSend(v4, "setCornerRadius:", 5.0);
      objc_msgSend(v4, "setBackgroundInsets:", 0.0, 10.0, 0.0, 10.0);
    }
    else
    {
      objc_msgSend(v4, "setBackgroundColorMode:", 0);
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor clearColor](UIColor, "clearColor"));
      objc_msgSend(v4, "setBackgroundColor:", v6);

    }
  }

  return v4;
}

id sub_1002A931C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setRemembersLastFocusedIndexPath:", *(unsigned __int8 *)(a1 + 40));
}

id sub_1002A958C()
{
  if (qword_1014D1F78 != -1)
    dispatch_once(&qword_1014D1F78, &stru_1011AF830);
  return (id)qword_1014D1F70;
}

PedestrianARSessionArrivalStepAvailabilityMonitor *sub_1002A9D5C(uint64_t a1)
{
  PedestrianARSessionArrivalStepAvailabilityMonitor *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  PedestrianARSessionArrivalStepAvailabilityMonitor *v7;

  v2 = [PedestrianARSessionArrivalStepAvailabilityMonitor alloc];
  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "platformController"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[MNNavigationService sharedService](MNNavigationService, "sharedService"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[MKLocationManager sharedLocationManager](MKLocationManager, "sharedLocationManager"));
  v7 = -[PedestrianARSessionArrivalStepAvailabilityMonitor initWithObserver:platformController:navigationService:locationManager:](v2, "initWithObserver:platformController:navigationService:locationManager:", v3, v4, v5, v6);

  return v7;
}

PedestrianARSessionCarPlayConnectionMonitor *sub_1002A9E00(uint64_t a1)
{
  return -[PedestrianARSessionCarPlayConnectionMonitor initWithObserver:]([PedestrianARSessionCarPlayConnectionMonitor alloc], "initWithObserver:", *(_QWORD *)(a1 + 32));
}

PedestrianARSessionCoarseLocationMonitor *sub_1002A9E30(uint64_t a1)
{
  PedestrianARSessionCoarseLocationMonitor *v2;
  uint64_t v3;
  id v4;
  PedestrianARSessionCoarseLocationMonitor *v5;

  v2 = [PedestrianARSessionCoarseLocationMonitor alloc];
  v3 = *(_QWORD *)(a1 + 32);
  v4 = objc_alloc_init((Class)MKLocationManager);
  v5 = -[PedestrianARSessionCoarseLocationMonitor initWithObserver:locationManager:](v2, "initWithObserver:locationManager:", v3, v4);

  return v5;
}

PedestrianARSessionMapsSkyMonitor *sub_1002A9E94(uint64_t a1)
{
  return -[PedestrianARSessionMapsSkyMonitor initWithObserver:]([PedestrianARSessionMapsSkyMonitor alloc], "initWithObserver:", *(_QWORD *)(a1 + 32));
}

PedestrianARSessionNetworkReachabilityMonitor *sub_1002A9EC4(uint64_t a1)
{
  return -[PedestrianARSessionNetworkReachabilityMonitor initWithObserver:]([PedestrianARSessionNetworkReachabilityMonitor alloc], "initWithObserver:", *(_QWORD *)(a1 + 32));
}

PedestrianARSessionOfflineMonitor *sub_1002A9EF4(uint64_t a1)
{
  return -[PedestrianARSessionOfflineMonitor initWithObserver:]([PedestrianARSessionOfflineMonitor alloc], "initWithObserver:", *(_QWORD *)(a1 + 32));
}

PedestrianARSessionRouteDistanceMonitor *sub_1002A9F24(uint64_t a1)
{
  PedestrianARSessionRouteDistanceMonitor *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  PedestrianARSessionRouteDistanceMonitor *v7;

  v2 = [PedestrianARSessionRouteDistanceMonitor alloc];
  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "platformController"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[MNNavigationService sharedService](MNNavigationService, "sharedService"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[MKLocationManager sharedLocationManager](MKLocationManager, "sharedLocationManager"));
  v7 = -[PedestrianARSessionRouteDistanceMonitor initWithObserver:platformController:navigationService:locationManager:](v2, "initWithObserver:platformController:navigationService:locationManager:", v3, v4, v5, v6);

  return v7;
}

PedestrianARSessionRoutePlanningConfigurationMonitor *sub_1002A9FC8(uint64_t a1)
{
  PedestrianARSessionRoutePlanningConfigurationMonitor *v2;
  void *v3;
  void *v4;
  PedestrianARSessionRoutePlanningConfigurationMonitor *v5;

  v2 = [PedestrianARSessionRoutePlanningConfigurationMonitor alloc];
  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "platformController"));
  v5 = -[PedestrianARSessionRoutePlanningConfigurationMonitor initWithObserver:platformController:](v2, "initWithObserver:platformController:", v3, v4);

  return v5;
}

PedestrianARSessionThermalStateMonitor *sub_1002AA02C(uint64_t a1)
{
  PedestrianARSessionThermalStateMonitor *v2;
  uint64_t v3;
  void *v4;
  PedestrianARSessionThermalStateMonitor *v5;

  v2 = [PedestrianARSessionThermalStateMonitor alloc];
  v3 = *(_QWORD *)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MapsThermalPressureController sharedController](MapsThermalPressureController, "sharedController"));
  v5 = -[PedestrianARSessionThermalStateMonitor initWithObserver:thermalPressureController:](v2, "initWithObserver:thermalPressureController:", v3, v4);

  return v5;
}

PedestrianARSessionTileAvailabilityMonitor *sub_1002AA094(uint64_t a1)
{
  VLFTileObserver *v2;
  void *v3;
  void *v4;
  VLFTileObserver *v5;
  PedestrianARSessionTileAvailabilityMonitor *v6;

  v2 = [VLFTileObserver alloc];
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MKLocationManager sharedLocationManager](MKLocationManager, "sharedLocationManager"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MNNavigationService sharedService](MNNavigationService, "sharedService"));
  v5 = -[VLFTileObserver initWithLocationManager:navigationService:purpose:](v2, "initWithLocationManager:navigationService:purpose:", v3, v4, 3);

  v6 = -[PedestrianARSessionTileAvailabilityMonitor initWithObserver:tileObserver:]([PedestrianARSessionTileAvailabilityMonitor alloc], "initWithObserver:tileObserver:", *(_QWORD *)(a1 + 32), v5);
  return v6;
}

PedestrianARSessionTransportTypeMonitor *sub_1002AA134(uint64_t a1)
{
  PedestrianARSessionTransportTypeMonitor *v2;
  void *v3;
  void *v4;
  PedestrianARSessionTransportTypeMonitor *v5;

  v2 = [PedestrianARSessionTransportTypeMonitor alloc];
  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "platformController"));
  v5 = -[PedestrianARSessionTransportTypeMonitor initWithObserver:platformController:](v2, "initWithObserver:platformController:", v3, v4);

  return v5;
}

PedestrianARSessionSunsetSunriseMonitor *sub_1002AA198(uint64_t a1)
{
  PedestrianARSessionSunsetSunriseMonitor *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  PedestrianARSessionSunsetSunriseMonitor *v7;

  v2 = [PedestrianARSessionSunsetSunriseMonitor alloc];
  v3 = *(_QWORD *)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MKLocationManager sharedLocationManager](MKLocationManager, "sharedLocationManager"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[SunsetSunriseCalculator sharedCalculator](SunsetSunriseCalculator, "sharedCalculator"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "platformController"));
  v7 = -[PedestrianARSessionSunsetSunriseMonitor initWithObserver:locationManager:sunsetSunriseCalculator:platformController:transportTypeSupportProvider:](v2, "initWithObserver:locationManager:sunsetSunriseCalculator:platformController:transportTypeSupportProvider:", v3, v4, v5, v6, objc_opt_class(PedestrianARSessionTask));

  return v7;
}

int64_t sub_1002AAC9C(id a1, PedestrianARSessionMonitor *a2, PedestrianARSessionMonitor *a3)
{
  PedestrianARSessionMonitor *v4;
  objc_class *v5;
  NSString *v6;
  void *v7;
  objc_class *v8;
  NSString *v9;
  void *v10;
  id v11;

  v4 = a3;
  v5 = (objc_class *)objc_opt_class(a2);
  v6 = NSStringFromClass(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = (objc_class *)objc_opt_class(v4);

  v9 = NSStringFromClass(v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v11 = objc_msgSend(v7, "compare:", v10);

  return (int64_t)v11;
}

NSString *__cdecl sub_1002AAD18(id a1, PedestrianARSessionMonitor *a2, unint64_t a3)
{
  PedestrianARSessionMonitor *v3;
  unsigned int v4;
  __CFString *v5;
  __CFString *v6;
  void *v7;
  void *v8;

  v3 = a2;
  v4 = -[PedestrianARSessionMonitor shouldShowPedestrianAR](v3, "shouldShowPedestrianAR");
  v5 = CFSTR("NO");
  if (v4)
    v5 = CFSTR("YES");
  v6 = v5;
  v7 = (void *)objc_claimAutoreleasedReturnValue(-[PedestrianARSessionMonitor debugDescription](v3, "debugDescription"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("allowing AR: %@ %@\n"), v6, v7));
  return (NSString *)v8;
}

void sub_1002AB044(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "PedestrianARSessionStateManager");
  v2 = (void *)qword_1014D1F70;
  qword_1014D1F70 = (uint64_t)v1;

}

UIColor *__cdecl sub_1002ABE24(id a1, MapsTheme *a2)
{
  return -[MapsTheme keyColor](a2, "keyColor");
}

void sub_1002AC314(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1002AC330(uint64_t a1, void *a2)
{
  _QWORD *WeakRetained;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  uint64_t v9;
  id v10;
  id v11;
  void *v12;
  _QWORD *v13;
  id v14;
  _QWORD v15[4];
  id v16;
  _QWORD v17[5];
  id v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];

  v14 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v13 = WeakRetained;
    v4 = (void *)WeakRetained[11];
    if (v4)
    {
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v5 = v4;
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
      if (v6)
      {
        v7 = *(_QWORD *)v20;
        do
        {
          for (i = 0; i != v6; i = (char *)i + 1)
          {
            if (*(_QWORD *)v20 != v7)
              objc_enumerationMutation(v5);
            v9 = *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)i);
            v17[0] = _NSConcreteStackBlock;
            v17[1] = 3221225472;
            v17[2] = sub_1002AC56C;
            v17[3] = &unk_1011AD1E8;
            objc_copyWeak(&v18, (id *)(a1 + 32));
            v17[4] = v9;
            v10 = objc_msgSend(v14, "addNavigationRowWithTitle:action:", v9, v17);
            objc_destroyWeak(&v18);
          }
          v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
        }
        while (v6);
      }

    }
    else
    {
      v11 = objc_msgSend(v14, "addIndeterminateProgressIndicator");
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[GEOPlaceCardRequester sharedRequester](GEOPlaceCardRequester, "sharedRequester"));
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      v15[2] = sub_1002AC664;
      v15[3] = &unk_1011AF878;
      objc_copyWeak(&v16, (id *)(a1 + 32));
      objc_msgSend(v12, "fetchAllCacheEntriesWithRequesterHandler:", v15);

      objc_destroyWeak(&v16);
    }
    WeakRetained = v13;
  }

}

void sub_1002AC54C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1002AC56C(uint64_t a1)
{
  id *v2;
  id *WeakRetained;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  id *v11;

  v2 = (id *)(a1 + 40);
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v11 = WeakRetained;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[11], "objectForKey:", *(_QWORD *)(a1 + 32)));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[GEOMapItemStorage mapItemStorageForSerializedPlaceData:](GEOMapItemStorage, "mapItemStorageForSerializedPlaceData:", v4));
    v6 = objc_alloc((Class)MUPlaceViewController);
    v7 = objc_msgSend(objc_alloc((Class)MKMapItem), "initWithGeoMapItem:isPlaceHolderPlace:", v5, 0);
    v8 = objc_msgSend(v6, "initWithMapItem:", v7);

    v9 = objc_loadWeakRetained(v2);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "navigationController"));
    objc_msgSend(v10, "pushViewController:animated:", v8, 1);

    WeakRetained = v11;
  }

}

void sub_1002AC664(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1002AC708;
  v5[3] = &unk_1011AD1E8;
  objc_copyWeak(&v7, (id *)(a1 + 32));
  v6 = v3;
  v4 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v5);

  objc_destroyWeak(&v7);
}

void sub_1002AC708(uint64_t a1)
{
  id *WeakRetained;
  void *v3;
  id *v4;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (*(_QWORD *)(a1 + 32))
      v3 = *(void **)(a1 + 32);
    else
      v3 = &__NSDictionary0__struct;
    v4 = WeakRetained;
    objc_storeStrong(WeakRetained + 11, v3);
    objc_msgSend(v4, "rebuildSections");
    WeakRetained = v4;
  }

}

id sub_1002AD0D8()
{
  if (qword_1014D1F90 != -1)
    dispatch_once(&qword_1014D1F90, &stru_1011AF8C0);
  return (id)qword_1014D1F88;
}

void sub_1002AF038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, id *a11, id *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,id a52)
{
  objc_destroyWeak(location);
  objc_destroyWeak(a11);
  objc_destroyWeak(a12);
  objc_destroyWeak(&a52);
  _Unwind_Resume(a1);
}

void sub_1002AF0A0(uint64_t a1)
{
  id WeakRetained;
  id v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  int v7;
  id v8;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = sub_1002AD0D8();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v7 = 134349056;
      v8 = WeakRetained;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%{public}p] Displaying more info from URL", (uint8_t *)&v7, 0xCu);
    }

    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
    v5 = GEOVisualLocalizationCrowdsourcingLearnMoreURL();
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    objc_msgSend(v4, "viewController:openURL:", WeakRetained, v6);

  }
}

void sub_1002AF18C(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void (**v9)(_QWORD, _QWORD);
  int v10;
  id v11;

  v3 = a2;
  GEOConfigSetBOOL(GeoServicesConfig_VLFCrowdsourcingDataCollectionEnabled[0], GeoServicesConfig_VLFCrowdsourcingDataCollectionEnabled[1], 1);
  +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 76, 75, 0);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v5 = sub_1002AD0D8();
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v10 = 134349056;
      v11 = WeakRetained;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[%{public}p] User accepted VL crowdsourcing", (uint8_t *)&v10, 0xCu);
    }

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "sender"));
    objc_msgSend(WeakRetained, "handleDismissAction:", v7);

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "completion"));
    if (v8)
    {
      v9 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "completion"));
      v9[2](v9, 1);

    }
  }

}

void sub_1002AF2D8(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void (**v9)(_QWORD, _QWORD);
  int v10;
  id v11;

  v3 = a2;
  GEOConfigSetBOOL(GeoServicesConfig_VLFCrowdsourcingDataCollectionEnabled[0], GeoServicesConfig_VLFCrowdsourcingDataCollectionEnabled[1], 0);
  +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 77, 75, 0);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v5 = sub_1002AD0D8();
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v10 = 134349056;
      v11 = WeakRetained;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[%{public}p] User declined VL crowdsourcing", (uint8_t *)&v10, 0xCu);
    }

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "sender"));
    objc_msgSend(WeakRetained, "handleDismissAction:", v7);

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "completion"));
    if (v8)
    {
      v9 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "completion"));
      v9[2](v9, 0);

    }
  }

}

void sub_1002B0000(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFCrowdsourcingPermissionContaineeViewController");
  v2 = (void *)qword_1014D1F88;
  qword_1014D1F88 = (uint64_t)v1;

}

id sub_1002B01F8()
{
  if (qword_1014D1FA0 != -1)
    dispatch_once(&qword_1014D1FA0, &stru_1011AF9F8);
  return (id)qword_1014D1F98;
}

uint64_t sub_1002B044C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1002B1410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id *location)
{
  id *v13;
  uint64_t v14;

  objc_destroyWeak(v13);
  objc_destroyWeak((id *)(v14 - 160));
  _Unwind_Resume(a1);
}

uint64_t sub_1002B1450(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1002B1460(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "dismissViewControllerAnimated:completion:", 1, 0);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1002B1498(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  if (objc_msgSend(v5, "cancels"))
    v6 = *(unsigned __int8 *)(a1 + 48);
  else
    v6 = 0;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "title"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1002B15AC;
  v10[3] = &unk_1011AF8E8;
  v12 = *(id *)(a1 + 40);
  v13 = a3;
  v8 = v5;
  v11 = v8;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v7, v6, v10));

  objc_msgSend(*(id *)(a1 + 32), "addAction:", v9);
  if (*(_BYTE *)(a1 + 49) && (objc_msgSend(v8, "cancels") & 1) == 0)
    objc_msgSend(*(id *)(a1 + 32), "setPreferredAction:", v9);

}

id sub_1002B15AC(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(uint64_t, _QWORD))(v2 + 16))(v2, *(_QWORD *)(a1 + 48));
  return objc_msgSend(*(id *)(a1 + 32), "fire");
}

uint64_t sub_1002B15E0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, id))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), objc_msgSend(*(id *)(a1 + 32), "count"));
}

void sub_1002B160C(uint64_t a1)
{
  void *v1;
  _QWORD v2[4];
  id v3;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1002B167C;
  v2[3] = &unk_1011ADA00;
  v1 = *(void **)(a1 + 32);
  v3 = *(id *)(a1 + 40);
  objc_msgSend(v1, "dismissViewControllerAnimated:completion:", 1, v2);

}

uint64_t sub_1002B167C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1002B1690(uint64_t a1)
{
  _QWORD *WeakRetained;
  void *v2;
  _QWORD *v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = (void *)WeakRetained[2];
    WeakRetained[2] = 0;
    v3 = WeakRetained;

    WeakRetained = v3;
  }

}

uint64_t sub_1002B16C8(uint64_t a1)
{
  void *v2;

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "postNotificationName:object:", CFSTR("LocationAuthorizationDismissedNotification"), 0);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1002B1728(uint64_t a1)
{
  CFTypeRef *WeakRetained;
  void *v2;
  CFTypeRef v3;
  void *v4;
  CFTypeRef *v5;

  WeakRetained = (CFTypeRef *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = (void *)WeakRetained[1];
    WeakRetained[1] = 0;
    v5 = WeakRetained;

    v3 = CFRetain(v5[2]);
    CFAutorelease(v3);
    v4 = (void *)v5[2];
    v5[2] = 0;

    WeakRetained = v5;
  }

}

void sub_1002B1784(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_mapkit_locationErrorSettingsURL"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  objc_msgSend(v2, "_maps_openURL:options:completionHandler:", v3, 0, 0);

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

uint64_t sub_1002B1800(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_1002B1834(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "dismissViewControllerAnimated:completion:", 1, 0);
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

id sub_1002B187C(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return +[UIView setAnimationsEnabled:](UIView, "setAnimationsEnabled:", 1);
}

uint64_t sub_1002B18A8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1002B18B8(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "dismissViewControllerAnimated:completion:", 1, 0);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1002B18F4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 32));
  objc_msgSend(WeakRetained, "_maps_topMostPresentViewController:animated:completion:", *(_QWORD *)(a1 + 40), 1, 0);

}

uint64_t sub_1002B193C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1002B194C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1002B195C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "dismissViewControllerAnimated:completion:", 1, 0);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1002B1998(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 32));
  objc_msgSend(WeakRetained, "_maps_topMostPresentViewController:animated:completion:", *(_QWORD *)(a1 + 40), 1, 0);

}

uint64_t sub_1002B1AF0(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 24) = 0;
  *(_BYTE *)(*(_QWORD *)(result + 32) + 25) = 0;
  *(_DWORD *)(*(_QWORD *)(result + 32) + 28) = 0;
  return result;
}

void sub_1002B1CC8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "InterruptionManager");
  v2 = (void *)qword_1014D1F98;
  qword_1014D1F98 = (uint64_t)v1;

}

void sub_1002B2558(id a1, RAPSearchWhichOneQuestion *a2, RAPSearchResultCategoryQuestion *a3)
{
  RAPSearchResultCategoryQuestion *v4;
  RAPSearchWhichOneQuestion *v5;
  uint64_t v6;
  RAPUserSearch *selectedValue;

  v4 = a3;
  v5 = a2;
  -[RAPSearchResultCategoryQuestion resetCachedMenuItems](v4, "resetCachedMenuItems");
  v6 = objc_claimAutoreleasedReturnValue(-[RAPSearchWhichOneQuestion selectedValue](v5, "selectedValue"));

  selectedValue = v4->_selectedValue;
  v4->_selectedValue = (RAPUserSearch *)v6;

}

void sub_1002B3044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002B306C(uint64_t a1)
{
  void *v1;
  void *v2;
  void (**v3)(_QWORD, _QWORD);
  id v4;
  id *WeakRetained;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSError GEOErrorWithCode:reason:](NSError, "GEOErrorWithCode:reason:", 0, CFSTR("User cancelled the action")));
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[10], "resultBlock"));

    if (v2)
    {
      v3 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[10], "resultBlock"));
      ((void (**)(_QWORD, void *))v3)[2](v3, v1);

    }
    v4 = objc_loadWeakRetained(WeakRetained + 9);
    objc_msgSend(v4, "collectionPickerClosed:", WeakRetained);

    objc_msgSend(WeakRetained, "cleanControllers");
  }

}

void sub_1002B331C(uint64_t a1)
{
  id v2;
  uint64_t v3;
  id WeakRetained;

  v2 = objc_msgSend(*(id *)(a1 + 32), "handlerType");
  v3 = *(_QWORD *)(a1 + 40);
  if (v2 == (id)1)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v3 + 72));
    objc_msgSend(WeakRetained, "collectionPickerNewCollection:", *(_QWORD *)(a1 + 40));
  }
  else
  {
    objc_msgSend(*(id *)(v3 + 80), "applyToCollection:completion:", *(_QWORD *)(a1 + 32), 0);
    WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 40) + 72));
    objc_msgSend(WeakRetained, "collectionPickerClosed:", *(_QWORD *)(a1 + 40));
  }

}

uint64_t sub_1002B3398(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setName:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

id sub_1002B33C8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "presentViewController:animated:completion:", *(_QWORD *)(a1 + 40), 1, 0);
}

id sub_1002B348C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_collectionPickerDismissedAfterSelectingCollection:parentVC:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

id sub_1002B3600(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_collectionPickerDismissedAfterSelectingCollection:parentVC:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

BOOL sub_1002B5730(id a1, id a2, NSDictionary *a3)
{
  void *v3;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "category", a3));

  return v3 == 0;
}

void sub_1002B5B44(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  _QWORD v7[5];
  id v8;
  id v9;
  int v10;

  if (objc_msgSend(*(id *)(a1 + 32), "autocompleteChangeCounter") == *(_DWORD *)(a1 + 56))
  {
    v2 = *(id *)(a1 + 40);
    v3 = *(id *)(a1 + 48);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1002B5C08;
    v7[3] = &unk_1011AE330;
    v4 = *(_QWORD *)(a1 + 32);
    v10 = *(_DWORD *)(a1 + 56);
    v7[4] = v4;
    v8 = v2;
    v9 = v3;
    v5 = v3;
    v6 = v2;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v7);

  }
}

id sub_1002B5C08(uint64_t a1)
{
  id result;
  id v3;
  NSObject *v4;
  uint8_t v5[16];

  result = objc_msgSend(*(id *)(a1 + 32), "autocompleteChangeCounter");
  if ((_DWORD)result == *(_DWORD *)(a1 + 56))
  {
    objc_msgSend(*(id *)(a1 + 32), "processPersonalizedItemsDebug:", *(_QWORD *)(a1 + 40));
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 112), *(id *)(a1 + 48));
    v3 = sub_10043222C();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "SearchDataProvider - did process new AC list", v5, 2u);
    }

    return objc_msgSend(*(id *)(a1 + 32), "_dataChanged");
  }
  return result;
}

UIColor *__cdecl sub_1002B65FC(id a1, UITraitCollection *a2)
{
  UIUserInterfaceStyle v2;
  double v3;

  v2 = -[UITraitCollection userInterfaceStyle](a2, "userInterfaceStyle");
  v3 = 0.0;
  if (v2 == UIUserInterfaceStyleDark)
    v3 = 1.0;
  return (UIColor *)(id)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", v3, 0.550000012));
}

id sub_1002B6F00(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setAlpha:", 0.0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "setAlpha:", 0.0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "setAlpha:", 0.0);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "setAlpha:", 0.0);
}

_QWORD *sub_1002B6F70(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = result[4];
  if (!*(_QWORD *)(v1 + 80))
  {
    v2 = result;
    objc_msgSend(*(id *)(v1 + 16), "removeFromSuperview");
    objc_msgSend(*(id *)(v2[4] + 48), "removeFromSuperview");
    objc_msgSend(*(id *)(v2[4] + 40), "removeFromSuperview");
    return objc_msgSend(*(id *)(v2[4] + 32), "removeFromSuperview");
  }
  return result;
}

void sub_1002B6FEC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD v18[3];

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "addSubview:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setAlpha:", 0.0);
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "centerXAnchor"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "centerXAnchor"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "constraintEqualToAnchor:", v15));
  v18[0] = v14;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "centerYAnchor"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "centerYAnchor"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "constraintEqualToAnchor:", v3));
  v18[1] = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "heightAnchor"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "heightAnchor"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "constraintEqualToAnchor:", v6));
  v18[2] = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v18, 3));
  +[NSLayoutConstraint activateConstraints:](NSLayoutConstraint, "activateConstraints:", v8);

  v9 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v9 + 64))
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v9 + 16), "widthAnchor"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "widthAnchor"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "constraintEqualToAnchor:", v11));
    v17 = v12;
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v17, 1));
    +[NSLayoutConstraint activateConstraints:](NSLayoutConstraint, "activateConstraints:", v13);

  }
}

id sub_1002B724C(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setAlpha:", 1.0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "setAlpha:", 0.0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "setAlpha:", 0.0);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "setAlpha:", 0.0);
}

_QWORD *sub_1002B72BC(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = result[4];
  if (*(_QWORD *)(v1 + 80) == 1)
  {
    v2 = result;
    objc_msgSend(*(id *)(v1 + 48), "removeFromSuperview");
    objc_msgSend(*(id *)(v2[4] + 40), "removeFromSuperview");
    return objc_msgSend(*(id *)(v2[4] + 32), "removeFromSuperview");
  }
  return result;
}

void sub_1002B732C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD v18[3];

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "addSubview:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "addSubview:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "startAnimating");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "setAlpha:", 0.0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "setAlpha:", 0.0);
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "centerYAnchor"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "centerYAnchor"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "constraintEqualToAnchor:", v15));
  v18[0] = v14;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "centerYAnchor"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "centerYAnchor"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "constraintEqualToAnchor:", v3));
  v18[1] = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "trailingAnchor"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "leadingAnchor"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "constraintEqualToAnchor:constant:", v6, -5.0));
  v18[2] = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v18, 3));
  +[NSLayoutConstraint activateConstraints:](NSLayoutConstraint, "activateConstraints:", v8);

  v9 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v9 + 64))
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v9 + 40), "centerXAnchor"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "centerXAnchor"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "constraintEqualToAnchor:", v11));
    v17 = v12;
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v17, 1));
    +[NSLayoutConstraint activateConstraints:](NSLayoutConstraint, "activateConstraints:", v13);

  }
}

id sub_1002B75C4(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setAlpha:", 0.0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "setAlpha:", 1.0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "setAlpha:", 1.0);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "setAlpha:", 0.0);
}

_QWORD *sub_1002B7634(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = result[4];
  if ((*(_QWORD *)(v1 + 80) & 0xFFFFFFFFFFFFFFFELL) == 2)
  {
    v2 = result;
    objc_msgSend(*(id *)(v1 + 16), "removeFromSuperview");
    result = objc_msgSend(*(id *)(v2[4] + 32), "removeFromSuperview");
    if (*(_QWORD *)(v2[4] + 80) == 2)
    {
      result = (_QWORD *)MapsFeature_IsEnabled_ShelbyvilleSearch(result);
      if ((_DWORD)result)
      {
        result = (_QWORD *)GEOConfigGetBOOL(MapsConfig_SearchAutoRedoPrototype, off_1014B3DE8);
        if ((_DWORD)result)
          return _objc_msgSend((id)v2[4], "executeAction");
      }
    }
  }
  return result;
}

void sub_1002B76D8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v9[2];

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "addSubview:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "setAlpha:", 0.0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "centerXAnchor"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "centerXAnchor"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "constraintEqualToAnchor:", v3));
  v9[0] = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "centerYAnchor"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "centerYAnchor"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "constraintEqualToAnchor:", v6));
  v9[1] = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v9, 2));
  +[NSLayoutConstraint activateConstraints:](NSLayoutConstraint, "activateConstraints:", v8);

}

id sub_1002B783C(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setAlpha:", 0.0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "setAlpha:", 1.0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "setAlpha:", 0.0);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "setAlpha:", 1.0);
}

_QWORD *sub_1002B78AC(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = result[4];
  if (*(_QWORD *)(v1 + 80) == 4)
  {
    v2 = result;
    objc_msgSend(*(id *)(v1 + 48), "removeFromSuperview");
    objc_msgSend(*(id *)(v2[4] + 40), "removeFromSuperview");
    return objc_msgSend(*(id *)(v2[4] + 16), "removeFromSuperview");
  }
  return result;
}

double *sub_1002B791C(double *result)
{
  if (*((_BYTE *)result + 48))
    return (double *)objc_msgSend(*(id *)(*((_QWORD *)result + 4) + 56), "setConstant:", result[5] + *(double *)(*((_QWORD *)result + 4) + 88));
  return result;
}

id sub_1002B7950(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  return objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
}

void sub_1002B7980(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  char v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    v2 = (*(uint64_t (**)(void))(v2 + 16))();
  if (*(_BYTE *)(a1 + 48) && (MapsFeature_IsEnabled_SearchAndDiscovery(v2) & 1) == 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 72));
    v4 = objc_opt_respondsToSelector(WeakRetained, "localSearchViewContentSizeChanged");

    if ((v4 & 1) != 0)
    {
      v5 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 72));
      objc_msgSend(v5, "localSearchViewContentSizeChanged");

    }
  }
}

void sub_1002B80F0(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  id v5;

  if (a2)
  {
    v3 = *(void **)(a1 + 32);
    v4 = a2;
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "coordinator"));
    objc_msgSend(v5, "viewController:selectParkedCar:andPerformAction:selectPOIOnMap:", *(_QWORD *)(a1 + 40), v4, objc_msgSend(*(id *)(a1 + 48), "parkedCarAction"), 1);

  }
}

UIFont *__cdecl sub_1002B8188(id a1)
{
  UIFont *v1;
  void *v2;
  void *v3;

  v1 = sub_100BA54C4(&stru_1011E7C38);
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont _maps_cappedFont:withMaxPoint:](UIFont, "_maps_cappedFont:withMaxPoint:", v2, 30.0));

  return (UIFont *)v3;
}

void sub_1002B87AC(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "localizedStringForKey:value:table:", CFSTR("Pause [Flyover]"), CFSTR("localized string not found"), 0));
  v3 = (void *)qword_1014D1FA8;
  qword_1014D1FA8 = v2;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("Start [Flyover]"), CFSTR("localized string not found"), 0));
  v6 = (void *)qword_1014D1FB0;
  qword_1014D1FB0 = v5;

  v9 = (id)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "localizedStringForKey:value:table:", CFSTR("Start City [Flyover]"), CFSTR("localized string not found"), 0));
  v8 = (void *)qword_1014D1FB8;
  qword_1014D1FB8 = v7;

}

void sub_1002B9254(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "localizedStringForKey:value:table:", CFSTR("Pause [Flyover]"), CFSTR("localized string not found"), 0));
  v3 = (void *)qword_1014D1FC8;
  qword_1014D1FC8 = v2;

  v6 = (id)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "localizedStringForKey:value:table:", CFSTR("Resume [Flyover]"), CFSTR("localized string not found"), 0));
  v5 = (void *)qword_1014D1FD0;
  qword_1014D1FD0 = v4;

}

id sub_1002B9EE4()
{
  if (qword_1014D1FE8 != -1)
    dispatch_once(&qword_1014D1FE8, &stru_1011AFC68);
  return (id)qword_1014D1FE0;
}

void sub_1002BACEC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFSessionLocationSignalEnvironmentMonitor");
  v2 = (void *)qword_1014D1FE0;
  qword_1014D1FE0 = (uint64_t)v1;

}

id sub_1002BB3F0(uint64_t a1, void *a2)
{
  id v3;

  v3 = objc_msgSend(a2, "mutableCopy");
  objc_msgSend(v3, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 32), NSFontAttributeName);
  return v3;
}

void sub_1002BD678(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id WeakRetained;
  id v5;
  NSObject *v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  NSObject *v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  void *v18;
  unsigned int v19;
  void *v20;
  unsigned __int8 v21;
  id v22;
  NSObject *v23;
  void *v24;
  id v25;
  NSObject *v26;
  id v27;
  id v28;
  NSObject *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;

  v2 = sub_100431B2C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v31) = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "ContainerStyleManager containerStyleManagerWillChangeStyle", (uint8_t *)&v31, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 64));
  objc_msgSend(WeakRetained, "containerStyleManagerWillChangeStyle:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56));

  v5 = sub_100431B2C();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v31) = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "ContainerStyleManager configureStyleLayout", (uint8_t *)&v31, 2u);
  }

  objc_msgSend(*(id *)(a1 + 32), "configureStyleLayout");
  v7 = sub_100431B2C();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v31) = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "ContainerStyleManager containerStyleManagerConfigureLayoutForStyle", (uint8_t *)&v31, 2u);
  }

  v9 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 64));
  objc_msgSend(v9, "containerStyleManagerConfigureLayoutForStyle:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56));

  v10 = sub_100431B2C();
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v31) = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "ContainerStyleManager layoutForStyle", (uint8_t *)&v31, 2u);
  }

  v12 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 64));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "currentViewController"));

  v14 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 64));
  v15 = (uint64_t)objc_msgSend(v14, "layoutForCurrentViewControllerWithStyle:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56));

  if (!v15)
  {
    v16 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 64));
    v17 = objc_msgSend(v16, "originalLayoutForViewController:", v13);

    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "cardPresentationController"));
    v19 = objc_msgSend(v18, "presentedModally");

    if (v19)
      v15 = 5;
    else
      v15 = (uint64_t)v17;
  }
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "cardPresentationController"));
  v21 = objc_msgSend(v20, "usingSheetPresentation");

  if ((v21 & 1) == 0)
  {
    v22 = sub_100431B2C();
    v23 = objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v31) = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "ContainerStyleManager wantsLayout", (uint8_t *)&v31, 2u);
    }

    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "cardPresentationController"));
    objc_msgSend(v24, "wantsLayout:", v15);

  }
  v25 = sub_100431B2C();
  v26 = objc_claimAutoreleasedReturnValue(v25);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v31) = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "ContainerStyleManager containerStyleManagerDidChangeStyle", (uint8_t *)&v31, 2u);
  }

  v27 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 64));
  objc_msgSend(v27, "containerStyleManagerDidChangeStyle:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56));

  v28 = sub_100431B2C();
  v29 = objc_claimAutoreleasedReturnValue(v28);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
  {
    v30 = *(_QWORD *)(a1 + 40);
    v31 = 134217984;
    v32 = v30;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "ContainerStyleManager configureStyleLayout %lu end", (uint8_t *)&v31, 0xCu);
  }

}

void sub_1002BDB78(id a1, UIAlertAction *a2)
{
  UIAlertAction *v2;

  v2 = a2;
  exit(0);
}

void sub_1002BDDB8(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 72));
  _Unwind_Resume(a1);
}

void sub_1002BDDFC(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  _QWORD v12[4];
  id v13;

  v3 = a2;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1002BDFC0;
  v12[3] = &unk_1011AD4F0;
  objc_copyWeak(&v13, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:", CFSTR("Show Blank Placecard"), MapsUIConfig_StubPlacecard[0], MapsUIConfig_StubPlacecard[1], 0, v12);
  v5 = objc_msgSend(v3, "addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:", CFSTR("Use Dynamic Placecard"), GeoServicesConfig_PlaceCardUseDynamicLayout[0], GeoServicesConfig_PlaceCardUseDynamicLayout[1], 1, &stru_1011AFD00);
  v6 = objc_msgSend(v3, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Log the expected Layout"), MapKitConfig_PlaceLayoutLogEnabled[0], MapKitConfig_PlaceLayoutLogEnabled[1]);
  v7 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Clear Custom Layout"), &stru_1011AFD20);
  v8 = objc_msgSend(v3, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Show Layout Debug Info"), MapKitConfig_PlaceLayoutDebugEnabled[0], MapKitConfig_PlaceLayoutDebugEnabled[1]);
  v9 = objc_msgSend(v3, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Show Brand Debug Action"), CFSTR("MKPlaceBrandDebugEnabled"));
  v10 = objc_msgSend(v3, "addSwitchRowWithTitle:defaultsKey:switchOnStateIfUnset:changeHandler:", CFSTR("Show Identifier"), CFSTR("GEOPlaceShowGEOIDKey"), 0, 0);
  v11 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Web Modules"), &stru_1011AFD60);
  objc_destroyWeak(&v13);

}

void sub_1002BDFA8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1002BDFC0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_promptForRestart");

}

void sub_1002BDFF0(id a1)
{
  _GEOConfigRemoveValueSync(MapKitConfig_PlaceCardCustomLayout[0], MapKitConfig_PlaceCardCustomLayout[1]);
}

void sub_1002BE000(id a1, MapsDebugValuesViewController *a2)
{
  id v2;

  v2 = -[MapsDebugValuesViewController addSectionWithTitle:content:](a2, "addSectionWithTitle:content:", 0, &stru_1011AFD80);
}

void sub_1002BE02C(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](a2, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Default height"), CFSTR("100"), 2, MapKitConfig_MKWebContentDefaultHeight[0], MapKitConfig_MKWebContentDefaultHeight[1]);
}

void sub_1002BE06C(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](a2, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enable MapItem URL Extra Storage"), MapKitConfig_MapItemURLExtraStorageEnabled[0], MapKitConfig_MapItemURLExtraStorageEnabled[1]);
}

void sub_1002BE0A0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  unsigned int v8;
  id v9;
  _QWORD v10[4];
  id v11;
  _QWORD v12[4];
  id v13;
  _QWORD v14[4];
  id v15;

  v3 = a2;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1002BE264;
  v14[3] = &unk_1011AD260;
  objc_copyWeak(&v15, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Copy Full State for Handoff"), v14);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1002BE298;
  v12[3] = &unk_1011AD260;
  objc_copyWeak(&v13, (id *)(a1 + 32));
  v5 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Copy Compact State for Handoff"), v12);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1002BE2CC;
  v10[3] = &unk_1011AD260;
  objc_copyWeak(&v11, (id *)(a1 + 32));
  v6 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Paste State from Handoff"), v10);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GEOPlatform sharedPlatform](GEOPlatform, "sharedPlatform"));
  v8 = objc_msgSend(v7, "isInternalInstall");

  if (v8)
    v9 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Copy last applied Handoff/state restoration"), &stru_1011AFDC0);
  objc_destroyWeak(&v11);
  objc_destroyWeak(&v13);
  objc_destroyWeak(&v15);

}

void sub_1002BE22C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1002BE264(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_copyStateWithFidelity:", 268435439);

}

void sub_1002BE298(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_copyStateWithFidelity:", 268435407);

}

void sub_1002BE2CC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_pasteStateWithAssumedSourceFidelity:", 268435439);

}

void sub_1002BE300(id a1)
{
  void *v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectForKey:", CFSTR("lastUserActivityData")));
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "bzip2UncompressedData"));

  v3 = objc_msgSend(objc_alloc((Class)NSString), "initWithData:encoding:", v8, 4);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", CFSTR("dateLastUserActivity")));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<%@> :\n%@"), v5, v3));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[UIPasteboard generalPasteboard](UIPasteboard, "generalPasteboard"));
  objc_msgSend(v7, "setString:", v6);

}

void sub_1002BE3F8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  void **v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  void *v10;
  id v11;
  _QWORD v12[4];
  id v13;
  _QWORD v14[4];
  id v15;
  _QWORD v16[4];
  id v17;

  v3 = a2;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1002BE5D4;
  v16[3] = &unk_1011AD260;
  objc_copyWeak(&v17, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Copy Full State"), v16);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1002BE604;
  v14[3] = &unk_1011AD260;
  objc_copyWeak(&v15, (id *)(a1 + 32));
  v5 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Paste Full State"), v14);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1002BE634;
  v12[3] = &unk_1011AEE60;
  objc_copyWeak(&v13, (id *)(a1 + 32));
  v7 = _NSConcreteStackBlock;
  v8 = 3221225472;
  v9 = sub_1002BE668;
  v10 = &unk_1011AD4F0;
  objc_copyWeak(&v11, (id *)(a1 + 32));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Continuously Record"), v12, &v7));
  objc_msgSend(v6, "setSubtitle:", CFSTR("Will stop when the app quits"), v7, v8, v9, v10);

  objc_destroyWeak(&v11);
  objc_destroyWeak(&v13);
  objc_destroyWeak(&v15);
  objc_destroyWeak(&v17);

}

void sub_1002BE594(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;

  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1002BE5D4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_copyStateWithFidelity:", 0xFFFFFFFLL);

}

void sub_1002BE604(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_pasteStateWithAssumedSourceFidelity:", 0xFFFFFFFLL);

}

id sub_1002BE634(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = objc_msgSend(WeakRetained, "recordsContinuously");

  return v2;
}

void sub_1002BE668(uint64_t a1, uint64_t a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setRecordsContinuously:", a2);

}

void sub_1002BE6A4(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](a2, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enable Distance Thresholds"), GeoServicesConfig_ITTEnableDistanceThresholds[0], GeoServicesConfig_ITTEnableDistanceThresholds[1]);
}

void sub_1002BED50(id a1, UIAlertAction *a2)
{
  UIAlertAction *v2;

  v2 = a2;
  exit(0);
}

uint64_t sub_1002BF090(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1002BF0A0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_1002BF784()
{
  if (qword_1014D1FF8 != -1)
    dispatch_once(&qword_1014D1FF8, &stru_1011AFE70);
  return (id)qword_1014D1FF0;
}

id sub_1002BF7C4(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;

  v2 = sub_100B3A5D4();
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "oneFavorites"));
  objc_msgSend(v4, "registerMeCardObserver:", *(_QWORD *)(a1 + 32));

  return _objc_msgSend(*(id *)(a1 + 32), "_updateMeCard");
}

void sub_1002BF9A8(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;

  v2 = sub_100B3A5D4();
  v4 = (id)objc_claimAutoreleasedReturnValue(v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "oneFavorites"));
  objc_msgSend(v3, "unregisterMeCardObserver:", *(_QWORD *)(a1 + 32));

}

void sub_1002BFB64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002BFB90(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  _QWORD block[4];
  id v9;
  id v10;
  id v11;

  v5 = a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002BFC58;
  block[3] = &unk_1011AFE28;
  v9 = a3;
  v6 = v9;
  objc_copyWeak(&v11, (id *)(a1 + 32));
  v10 = v5;
  v7 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  objc_destroyWeak(&v11);
}

void sub_1002BFC58(uint64_t a1)
{
  uint64_t v2;
  id v3;
  NSObject *v4;
  NSObject *v5;
  id WeakRetained;
  uint64_t v7;
  id v8;
  id v9;
  int v10;
  id v11;
  __int16 v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = sub_1002BF784();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = v4;
  if (v2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
      v7 = *(_QWORD *)(a1 + 32);
      v10 = 134349315;
      v11 = WeakRetained;
      v12 = 2113;
      v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[%{public}p] Error fetching me card: %{private}@", (uint8_t *)&v10, 0x16u);

    }
    v8 = objc_loadWeakRetained((id *)(a1 + 48));
    objc_msgSend(v8, "setState:", 2);
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v9 = objc_loadWeakRetained((id *)(a1 + 48));
      v10 = 134349056;
      v11 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[%{public}p] Received me card", (uint8_t *)&v10, 0xCu);

    }
    v8 = objc_loadWeakRetained((id *)(a1 + 48));
    objc_msgSend(v8, "_updateHomeWorkEntries:", *(_QWORD *)(a1 + 40));
  }

}

void sub_1002C1164(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_updateHomeWorkEntries:", *(_QWORD *)(a1 + 32));

}

void sub_1002C12E4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFSessionHomeWorkMonitor");
  v2 = (void *)qword_1014D1FF0;
  qword_1014D1FF0 = (uint64_t)v1;

}

void sub_1002C1958(uint64_t a1)
{
  uint64_t v2;
  id v3;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "setVisibleMapRect:");
  if (*(_BYTE *)(a1 + 40))
    v2 = 104;
  else
    v2 = 0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "setMapType:", v2);
  v3 = (id)objc_claimAutoreleasedReturnValue(+[MKPointOfInterestFilter filterExcludingAllCategories](MKPointOfInterestFilter, "filterExcludingAllCategories"));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "setPointOfInterestFilter:", v3);

}

void sub_1002C249C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  _Block_object_dispose(&a34, 8);
  _Unwind_Resume(a1);
}

void sub_1002C2A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  id *v24;
  id *v25;

  objc_destroyWeak(v25);
  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1002C2A38()
{
  if (qword_1014D2018 != -1)
    dispatch_once(&qword_1014D2018, &stru_1011AFF98);
  return (id)qword_1014D2010;
}

void sub_1002C2A78(id *a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained(a1 + 7);
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "setAlpha:", 1.0);
    objc_msgSend(a1[4], "setActive:", 0);
    objc_msgSend(a1[5], "setActive:", 1);
    objc_msgSend(a1[6], "layoutIfNeeded");
    WeakRetained = v3;
  }

}

void sub_1002C2AD8(uint64_t a1)
{
  id *WeakRetained;
  id *v3;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_storeStrong(WeakRetained + 5, *(id *)(a1 + 32));
    objc_msgSend(v3, "resetTimerAnimated:", *(unsigned __int8 *)(a1 + 48));
    WeakRetained = v3;
  }

}

void sub_1002C2DC0(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 96));
  _Unwind_Resume(a1);
}

void sub_1002C2DEC(id *a1)
{
  id *WeakRetained;
  id *v3;

  WeakRetained = (id *)objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "setAlpha:", 0.0);
    objc_msgSend(v3[5], "setActive:", 0);
    objc_msgSend(a1[4], "setActive:", 1);
    objc_msgSend(a1[5], "layoutIfNeeded");
    WeakRetained = v3;
  }

}

void sub_1002C2E58(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  uint64_t v4;
  _BYTE *v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v5 = WeakRetained;
    objc_msgSend(WeakRetained, "removeFromSuperview");
    v3 = v5;
    v5[64] = 0;
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
    {
      (*(void (**)(void))(v4 + 16))();
      v3 = v5;
    }
  }

}

void sub_1002C3044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002C3068(uint64_t a1)
{
  _QWORD *WeakRetained;
  _QWORD *v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "dismissAnimated:completion:", *(unsigned __int8 *)(a1 + 40), WeakRetained[7]);
    WeakRetained = v3;
  }

}

Class sub_1002C33A8(uint64_t a1)
{
  const char *v2;
  char *v3;
  Class result;
  char *v5;
  __int128 v6;
  uint64_t v7;

  v5 = 0;
  v2 = (const char *)&qword_1014D2000;
  if (!qword_1014D2008)
  {
    v6 = off_1011AFF80;
    v7 = 0;
    qword_1014D2008 = _sl_dlopen(&v6, &v5);
    v3 = v5;
    if (!qword_1014D2008)
    {
      abort_report_np("%s", v5);
      goto LABEL_7;
    }
    if (v5)
      goto LABEL_8;
  }
  while (1)
  {
    v2 = "MTMaterialLayer";
    result = objc_getClass("MTMaterialLayer");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_7:
    v3 = (char *)abort_report_np("Unable to find class %s", v2);
LABEL_8:
    free(v3);
  }
  qword_1014D2000 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1002C34AC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "MapsPopupMessageView");
  v2 = (void *)qword_1014D2010;
  qword_1014D2010 = (uint64_t)v1;

}

id sub_1002C3C68(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  double top;
  double leading;
  double bottom;
  double trailing;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "traitCollection"));
  v6 = objc_msgSend(v5, "userInterfaceIdiom");

  v7 = objc_msgSend(objc_alloc((Class)UICollectionLayoutListConfiguration), "initWithAppearance:", 2 * (v6 != (id)5));
  objc_msgSend(v7, "setShowsSeparators:", v6 != (id)5);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "separatorConfiguration"));
  v9 = objc_msgSend(v8, "copy");

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "theme"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "dynamicHairlineColor"));
  objc_msgSend(v9, "setColor:", v11);

  objc_msgSend(v7, "setSeparatorConfiguration:", v9);
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor clearColor](UIColor, "clearColor"));
  objc_msgSend(v7, "setBackgroundColor:", v12);

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutSection sectionWithListConfiguration:layoutEnvironment:](NSCollectionLayoutSection, "sectionWithListConfiguration:layoutEnvironment:", v7, v4));
  if (v6 == (id)5)
  {
    top = NSDirectionalEdgeInsetsZero.top;
    leading = NSDirectionalEdgeInsetsZero.leading;
    bottom = NSDirectionalEdgeInsetsZero.bottom;
    trailing = NSDirectionalEdgeInsetsZero.trailing;
  }
  else
  {
    top = 0.0;
    leading = 16.0;
    bottom = 0.0;
    trailing = 16.0;
  }
  objc_msgSend(v13, "setContentInsets:", top, leading, bottom, trailing);

  return v13;
}

void sub_1002C5040(uint64_t a1)
{
  id v1;

  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 152) = *(_QWORD *)(a1 + 64);
  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cardPresentationController"));
  objc_msgSend(v1, "updateHeightForCurrentLayoutAnimated:", 1);

}

void sub_1002C55F8(id a1)
{
  byte_1014D2020 = 0;
  +[CarQuickRouteRefreshOperation suspendQueues:](CarQuickRouteRefreshOperation, "suspendQueues:", 0);
}

void sub_1002C5778(id a1)
{
  +[CarQuickRouteRefreshOperation suspendQueues:](CarQuickRouteRefreshOperation, "suspendQueues:", 0);
}

void sub_1002C5DA4(id a1)
{
  id v1;
  void *v2;

  v1 = -[MapsOfflineHelper init_internal]([MapsOfflineHelper alloc], "init_internal");
  v2 = (void *)qword_1014D2040;
  qword_1014D2040 = (uint64_t)v1;

}

void sub_1002C6360(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trackingController"));
  objc_msgSend(v2, "setUseForcedTrackingMode:", 1);

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "carChromeViewController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "defaultMapSettings"));
  objc_msgSend(v3, "reload");

}

id sub_1002C63CC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "applyMapSettingsAndTrackingAnimated:", *(unsigned __int8 *)(a1 + 40));
}

void sub_1002C64B8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trackingController"));
  objc_msgSend((id)v2, "setUseForcedTrackingMode:", 0);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "nextTopContext"));
  v4 = objc_opt_class(CarMapWidgetRouteGeniusModeController);
  LOBYTE(v2) = objc_opt_isKindOfClass(v3, v4);

  if ((v2 & 1) == 0)
  {
    v6 = (id)objc_claimAutoreleasedReturnValue(+[CarDisplayController sharedInstance](CarDisplayController, "sharedInstance"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "routeGeniusManager"));
    objc_msgSend(v5, "deactivateForAllChromes");

  }
}

void sub_1002C8EAC(uint64_t a1)
{
  double v2;
  id v3;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "setHidden:", *(unsigned __int8 *)(a1 + 40));
  v2 = 0.0;
  if (!*(_BYTE *)(a1 + 40))
    v2 = 20.0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setConstant:", v2);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "superview"));
  objc_msgSend(v3, "layoutIfNeeded");

}

void sub_1002C93A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002C93D4(uint64_t a1)
{
  void *v2;
  id WeakRetained;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v2, "setBool:forKey:", 1, CFSTR("HasShownCustomNavModeAdvisoryKey"));

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    objc_msgSend(WeakRetained, "_continuePushNavigationWithRoute:navigationMode:completion:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40));
    WeakRetained = v4;
  }

}

void sub_1002C9608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002C962C(id *a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id v7;
  id v8;
  id v9[2];

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1002C9720;
  v5[3] = &unk_1011B00C0;
  objc_copyWeak(v9, a1 + 6);
  v9[1] = a1[7];
  v4 = v3;
  v6 = v4;
  v7 = a1[4];
  v8 = a1[5];
  +[NavigationSimulationPromptController promptIfNeededForSimulationForRoute:navigationTracePlayback:continueWithOptions:](NavigationSimulationPromptController, "promptIfNeededForSimulationForRoute:navigationTracePlayback:continueWithOptions:", v4, 0, v5);

  objc_destroyWeak(v9);
}

void sub_1002C970C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1002C9720(uint64_t a1, uint64_t a2, int a3)
{
  id v3;
  NSObject *v4;
  NSObject *WeakRetained;
  void *v8;
  void *v9;
  unsigned int v10;
  id v11;
  NSObject *v12;
  NSObject *v13;
  void *v14;
  RouteCollection *v15;
  void *v16;
  NavigationSessionBuilder *v17;
  uint64_t v18;
  __int128 v19;
  NavigationSessionBuilder *v20;
  void *v21;
  uint64_t v22;
  _OWORD v23[3];
  uint64_t v24;
  uint64_t v25;

  if (a3)
  {
    v3 = sub_100431C0C();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      LOWORD(v23[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Navigation simulation popup was dismissed.", (uint8_t *)v23, 2u);
    }
  }
  else
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    v4 = WeakRetained;
    if (WeakRetained)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject sessionStack](WeakRetained, "sessionStack"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "valueForKey:", CFSTR("class")));
      v10 = objc_msgSend(v9, "containsObject:", objc_opt_class(NavigationSession));

      v11 = sub_100431C0C();
      v12 = objc_claimAutoreleasedReturnValue(v11);
      v13 = v12;
      if (v10)
      {
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v23[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Aborting navigation session push as there is already one active", (uint8_t *)v23, 2u);
        }
      }
      else
      {
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          v14 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject sessionStack](v4, "sessionStack"));
          LODWORD(v23[0]) = 138412290;
          *(_QWORD *)((char *)v23 + 4) = v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Pushing navigation on top of %@", (uint8_t *)v23, 0xCu);

        }
        *(_QWORD *)(a2 + 48) = 1;
        *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 64);
        v15 = [RouteCollection alloc];
        v25 = *(_QWORD *)(a1 + 32);
        v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v25, 1));
        v13 = -[RouteCollection initWithRoutes:currentRouteIndex:](v15, "initWithRoutes:currentRouteIndex:", v16, 0);

        v17 = [NavigationSessionBuilder alloc];
        v18 = *(_QWORD *)(a1 + 40);
        v19 = *(_OWORD *)(a2 + 16);
        v23[0] = *(_OWORD *)a2;
        v23[1] = v19;
        v23[2] = *(_OWORD *)(a2 + 32);
        v24 = *(_QWORD *)(a2 + 48);
        v20 = -[NavigationSessionBuilder initWithRouteCollection:navigationDetailsOptions:mapServiceTraits:sessionInitiator:isResumingMultipointRoute:tracePlaybackPath:](v17, "initWithRouteCollection:navigationDetailsOptions:mapServiceTraits:sessionInitiator:isResumingMultipointRoute:tracePlaybackPath:", v13, v23, v18, 1, 0, 0);
        v21 = (void *)objc_claimAutoreleasedReturnValue(-[NavigationSessionBuilder build](v20, "build"));
        -[NSObject pushSession:](v4, "pushSession:", v21);
        v22 = *(_QWORD *)(a1 + 48);
        if (v22)
          (*(void (**)(uint64_t, _QWORD, _QWORD))(v22 + 16))(v22, 0, 0);

      }
    }
  }

}

void sub_1002CA164(id a1)
{
  UserProfileLinkGarageProvider *v1;
  void *v2;

  v1 = objc_alloc_init(UserProfileLinkGarageProvider);
  v2 = (void *)qword_1014D2050;
  qword_1014D2050 = (uint64_t)v1;

}

void sub_1002CA50C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1002CA530(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  _QWORD block[5];
  id v14;
  uint64_t v15;
  uint8_t buf[4];
  id v17;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = WeakRetained;
  if (WeakRetained)
  {
    if (!v5 || v6)
    {
      v11 = sub_1004326FC();
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v17 = v6;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Failed to get virtual garage with error: %@", buf, 0xCu);
      }

    }
    else
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1002CA668;
      block[3] = &unk_1011AD238;
      block[4] = WeakRetained;
      v9 = v5;
      v10 = *(_QWORD *)(a1 + 32);
      v14 = v9;
      v15 = v10;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

    }
  }

}

id sub_1002CA668(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 40), *(id *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 48), "_loadUnpairedVehicles");
  return objc_msgSend(*(id *)(a1 + 48), "_updateLinkAndNotifyObservers:", 1);
}

void sub_1002CA750(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1002CA774(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  NSObject *v8;
  id v9;
  _QWORD block[4];
  NSObject *v11;
  id v12;
  uint64_t v13;
  uint8_t buf[4];
  id v15;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (!v5 || v6)
    {
      v9 = sub_1004321BC();
      v8 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v15 = v6;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to get unpaired apps from garage with error: %@", buf, 0xCu);
      }
    }
    else
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1002CA8A8;
      block[3] = &unk_1011AD238;
      v11 = v5;
      v12 = WeakRetained;
      v13 = *(_QWORD *)(a1 + 32);
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
      v8 = v11;
    }

  }
}

id sub_1002CA8A8(id *a1)
{
  id result;

  result = objc_msgSend(a1[4], "count");
  if (result)
  {
    objc_msgSend(a1[5], "setHasUnpairedVehicles:", 1);
    return objc_msgSend(a1[6], "_updateLinkAndNotifyObservers:", 1);
  }
  return result;
}

void sub_1002CAA94(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 40), *(id *)(a1 + 40));
    objc_msgSend(WeakRetained, "_updateLinkAndNotifyObservers:", 1);
  }

}

id sub_1002CAB94(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateLinkAndNotifyObservers:", 1);
}

void sub_1002CB308(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  objc_class *v10;
  NSString *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;

  v17 = a2;
  v5 = a3;
  if (v5)
  {
    v6 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0
      || (v7 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v5, v7) & 1) != 0))
    {
      v8 = v5;
LABEL_11:
      v15 = *(void **)(a1 + 32);
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: %@"), v17, v8));
      objc_msgSend(v15, "addObject:", v16);

      goto LABEL_12;
    }
    v9 = v5;
    v10 = (objc_class *)objc_opt_class(v9);
    v11 = NSStringFromClass(v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    if ((objc_opt_respondsToSelector(v9, "accessibilityIdentifier") & 1) != 0)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "performSelector:", "accessibilityIdentifier"));
      v14 = v13;
      if (v13 && !objc_msgSend(v13, "isEqualToString:", v12))
      {
        v8 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v12, v9, v14));

        goto LABEL_10;
      }

    }
    v8 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v12, v9));
LABEL_10:

    goto LABEL_11;
  }
LABEL_12:

}

void sub_1002CB488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v4;

  if (a3)
  {
    v3 = *(void **)(a1 + 32);
    v4 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: %@"), a2, a3));
    objc_msgSend(v3, "addObject:", v4);

  }
}

void sub_1002CB59C(id a1)
{
  FloatingButtonItem *v1;
  void *v2;

  v1 = -[FloatingButtonItem initWithButton:option:]([FloatingButtonItem alloc], "initWithButton:option:", 0, 0);
  v2 = (void *)qword_1014D2060;
  qword_1014D2060 = (uint64_t)v1;

  *(_BYTE *)(qword_1014D2060 + 8) = 1;
}

void sub_1002CB93C(uint64_t a1, void *a2)
{
  id v3;
  _ButtonsGroupViewController *v4;

  v3 = a2;
  v4 = -[_ButtonsGroupViewController initWithFloatingButtonItems:visualEffectDisabled:]([_ButtonsGroupViewController alloc], "initWithFloatingButtonItems:visualEffectDisabled:", v3, *(unsigned __int8 *)(a1 + 48));

  -[_ButtonsGroupViewController setBlurGroupName:](v4, "setBlurGroupName:", *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 40), "addObject:", v4);

}

void sub_1002CC0D0(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v1, "invalidateIntrinsicContentSize");

}

id sub_1002CC26C()
{
  if (qword_1014D2078 != -1)
    dispatch_once(&qword_1014D2078, &stru_1011B01C0);
  return (id)qword_1014D2070;
}

void sub_1002CC608(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "RoutePlanningServerEnvrionmentChangeRouteRefreshTask");
  v2 = (void *)qword_1014D2070;
  qword_1014D2070 = (uint64_t)v1;

}

id sub_1002CD6F0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dismissViewControllerAnimated:completion:", 1, 0);
}

void sub_1002CE008(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = v2[19];
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "selectedTraceName"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectedTracePath"));
  (*(void (**)(uint64_t, id, void *))(v3 + 16))(v3, v5, v4);

}

void sub_1002CE074(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v2, "deselectRowAtIndexPath:animated:", *(_QWORD *)(a1 + 40), 0);

}

void sub_1002CE67C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002CE698(uint64_t a1, void *a2)
{
  _BYTE *WeakRetained;
  id v4;

  v4 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && objc_msgSend(v4, "count"))
  {
    WeakRetained[120] = 0;
    objc_msgSend(WeakRetained, "rebuildContent:", v4);
  }

}

void sub_1002CEA64(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1002CEA80(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *WeakRetained;
  void *v5;
  uint64_t v6;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[MapsSyncStore sharedStore](_TtC8MapsSync13MapsSyncStore, "sharedStore"));
    v6 = WeakRetained[16];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1002CEB5C;
    v7[3] = &unk_1011AE218;
    v8 = *(id *)(a1 + 32);
    objc_msgSend(v5, "saveWithObjects:completionHandler:", v6, v7);

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

void sub_1002CEB5C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1002CEBEC;
  v6[3] = &unk_1011ACAD0;
  v4 = *(id *)(a1 + 32);
  v7 = v3;
  v8 = v4;
  v5 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);

}

uint64_t sub_1002CEBEC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_1002CF6D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_1002CF6E4(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = sub_100431F8C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Finished saving maneuver icon, will leave dispatch_group.", v4, 2u);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1002CF754(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = sub_100431F8C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Finished saving map snapshot, will leave dispatch_group.", v4, 2u);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1002CF7C4(uint64_t a1)
{
  id WeakRetained;
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = sub_100431F8C();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Finished saving both maneuver and map snapshots, will load request.", v4, 2u);
    }

    objc_msgSend(WeakRetained, "loadWebView");
  }

}

void sub_1002CF910(id *a1)
{
  id *v2;
  id WeakRetained;
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  _QWORD block[4];
  id v19;
  id v20;
  _QWORD *v21;
  uint64_t *v22;
  _QWORD v23[62];
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t);
  id v29;
  _QWORD v30[4];
  id v31;
  id v32[2];

  v2 = a1 + 6;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (!WeakRetained)
    goto LABEL_11;
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472;
  v30[2] = sub_1002CFBB4;
  v30[3] = &unk_1011B02B0;
  objc_copyWeak(v32, v2);
  v31 = a1[5];
  v4 = objc_retainBlock(v30);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "traitCollection"));
  v6 = objc_msgSend(v5, "userInterfaceStyle");

  if (v6 != (id)2)
  {
    if (UIAccessibilityIsInvertColorsEnabled())
      goto LABEL_4;
LABEL_6:
    v7 = objc_claimAutoreleasedReturnValue(+[UIColor blackColor](UIColor, "blackColor"));
    goto LABEL_7;
  }
  if (UIAccessibilityIsInvertColorsEnabled())
    goto LABEL_6;
LABEL_4:
  v7 = objc_claimAutoreleasedReturnValue(+[UIColor whiteColor](UIColor, "whiteColor"));
LABEL_7:
  v8 = (void *)v7;
  v24 = 0;
  v25 = &v24;
  v26 = 0x3032000000;
  v27 = sub_1002CFCF0;
  v28 = sub_1002CFD00;
  v9 = objc_msgSend(*((id *)a1[4] + 18), "maneuverType");
  v10 = objc_msgSend(*((id *)a1[4] + 18), "drivingSide");
  MKDefaultGuidanceManeuverMetrics(v23);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "traitCollection"));
  objc_msgSend(v11, "displayScale");
  v13 = v12;
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor lightGrayColor](UIColor, "lightGrayColor"));
  v15 = MKManeuverArrowImage(v9, v10, v23, v8, v14, 0, 100.0, 100.0, v13);
  v29 = (id)objc_claimAutoreleasedReturnValue(v15);

  if (v25[5])
  {
    ((void (*)(_QWORD *))v4[2])(v4);
  }
  else
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002CFD08;
    block[3] = &unk_1011B02D8;
    v16 = v8;
    v17 = a1[4];
    v19 = v16;
    v20 = v17;
    v22 = &v24;
    v21 = v4;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  }
  _Block_object_dispose(&v24, 8);

  objc_destroyWeak(v32);
LABEL_11:

}

void sub_1002CFB80(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  _Block_object_dispose((const void *)(v2 - 200), 8);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1002CFBB4(uint64_t a1, void *a2)
{
  id v3;
  dispatch_queue_global_t global_queue;
  NSObject *v5;
  id v6;
  _QWORD block[4];
  id v8;
  id v9;
  id v10;

  v3 = a2;
  global_queue = dispatch_get_global_queue(33, 0);
  v5 = objc_claimAutoreleasedReturnValue(global_queue);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002CFC80;
  block[3] = &unk_1011B0288;
  objc_copyWeak(&v10, (id *)(a1 + 40));
  v8 = v3;
  v9 = *(id *)(a1 + 32);
  v6 = v3;
  dispatch_async(v5, block);

  objc_destroyWeak(&v10);
}

void sub_1002CFC80(id *a1)
{
  id *WeakRetained;
  id *v3;

  WeakRetained = (id *)objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_storeStrong(WeakRetained + 27, a1[4]);
    objc_msgSend(v3, "saveImage:withIdentifier:", a1[4], CFSTR("RAPManeuverIconIdentifier"));
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, a1[5]);
    WeakRetained = v3;
  }

}

uint64_t sub_1002CFCF0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1002CFD00(uint64_t a1)
{

}

void sub_1002CFD08(_QWORD *a1)
{
  id v2;
  NSObject *v3;
  GuidanceManeuverView *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  GuidanceManeuverArtwork *v13;
  id v14;
  id v15;
  void *v16;
  GuidanceManeuverArtwork *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unsigned int v21;
  id v22;
  _BYTE v23[496];
  _BYTE v24[496];
  _BYTE __dst[496];
  uint8_t __src[496];
  uint8_t buf[16];

  v2 = sub_100431F8C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
  }

  v4 = -[GuidanceManeuverView initWithFrame:]([GuidanceManeuverView alloc], "initWithFrame:", 0.0, 0.0, 100.0, 100.0);
  +[SignStyle arrowMetricsForStyle:](SignStyle, "arrowMetricsForStyle:", 0);
  memcpy(__dst, __src, sizeof(__dst));
  -[GuidanceManeuverView setArrowMetrics:](v4, "setArrowMetrics:", __dst);
  +[SignStyle junctionArrowMetricsForStyle:](SignStyle, "junctionArrowMetricsForStyle:", 0);
  memcpy(v23, v24, sizeof(v23));
  -[GuidanceManeuverView setJunctionArrowMetrics:](v4, "setJunctionArrowMetrics:", v23);
  -[GuidanceManeuverView setFraming:](v4, "setFraming:", 1);
  -[GuidanceManeuverView setArrowColor:](v4, "setArrowColor:", a1[4]);
  v22 = objc_alloc((Class)MKJunction);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[5] + 144), "geoStep"));
  v21 = objc_msgSend(v5, "junctionType");
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[5] + 144), "geoStep"));
  v7 = objc_msgSend(v6, "maneuverType");
  v8 = objc_msgSend(*(id *)(a1[5] + 144), "drivingSide");
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[5] + 144), "geoStep"));
  v10 = objc_msgSend(v9, "junctionElements");
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[5] + 144), "geoStep"));
  v12 = objc_msgSend(v22, "initWithType:maneuver:drivingSide:elements:count:", v21, v7, v8, v10, objc_msgSend(v11, "junctionElementsCount"));

  v13 = [GuidanceManeuverArtwork alloc];
  v14 = objc_msgSend(*(id *)(a1[5] + 144), "maneuverType");
  v15 = objc_msgSend(*(id *)(a1[5] + 144), "drivingSide");
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[5] + 144), "artworkOverride"));
  v17 = -[GuidanceManeuverArtwork initWithManeuver:junction:drivingSide:artworkDataSource:](v13, "initWithManeuver:junction:drivingSide:artworkDataSource:", v14, v12, v15, v16);
  -[GuidanceManeuverView setManeuverArtwork:](v4, "setManeuverArtwork:", v17);

  v18 = objc_claimAutoreleasedReturnValue(-[GuidanceManeuverView imageRepresentation](v4, "imageRepresentation"));
  v19 = *(_QWORD *)(a1[7] + 8);
  v20 = *(void **)(v19 + 40);
  *(_QWORD *)(v19 + 40) = v18;

  (*(void (**)(void))(a1[6] + 16))();
}

void sub_1002D054C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002D0570(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  _QWORD *WeakRetained;
  id v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  NSObject *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (a3)
    {
      v7 = sub_100431F8C();
      v8 = objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        v9 = *(_QWORD *)(a1 + 48);
        v16 = 134217984;
        v17 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to create a snapshot of step with stepID: %lu", (uint8_t *)&v16, 0xCu);
      }
    }
    else
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
      v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "UUIDString"));
      v12 = (void *)WeakRetained[26];
      WeakRetained[26] = v11;

      v13 = sub_100431F8C();
      v14 = objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        v15 = *(_QWORD *)(a1 + 48);
        v16 = 134217984;
        v17 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Successfully created a snapshot of step with stepID: %lu. Will process to saving", (uint8_t *)&v16, 0xCu);
      }

      v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "image"));
      objc_msgSend(WeakRetained, "saveImage:withIdentifier:", v8, WeakRetained[26]);
    }

    dispatch_async((dispatch_queue_t)&_dispatch_main_q, *(dispatch_block_t *)(a1 + 32));
  }

}

void sub_1002D07F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002D080C(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_submit");
    WeakRetained = v2;
  }

}

void sub_1002D0944(uint64_t a1, void *a2)
{
  NSObject *v4;
  uint64_t v5;
  int v6;
  NSObject *v7;
  NSObject *v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  id v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  NSObject *v19;

  v4 = a2;
  if (v4)
  {
    v5 = objc_opt_class(NSString);
    v6 = objc_opt_isKindOfClass(v4, v5) & 1;
    if (v6)
      v7 = v4;
    else
      v7 = 0;
    v8 = v7;
    v9 = sub_100431F8C();
    v10 = objc_claimAutoreleasedReturnValue(v9);
    v11 = v10;
    if (v6)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        v12 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 184);
        v16 = 138412546;
        v17 = v12;
        v18 = 2112;
        v19 = v4;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "_updateAggregatedDataWithCompletion: will update aggregatedData from: %@ to %@", (uint8_t *)&v16, 0x16u);
      }

      objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 184), a2);
      v13 = *(_QWORD *)(a1 + 40);
      v14 = v4;
      if (v13)
      {
        (*(void (**)(void))(v13 + 16))();
        v14 = v4;
      }
    }
    else
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      {
        LOWORD(v16) = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "_updateAggregatedDataWithCompletion webView gave us unsupported object as aggregatedData", (uint8_t *)&v16, 2u);
      }

      v14 = 0;
    }
  }
  else
  {
    v15 = sub_100431F8C();
    v14 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v16) = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "_updateAggregatedDataWithCompletion got nil back from web module.", (uint8_t *)&v16, 2u);
    }
  }

}

void sub_1002D0F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002D0FBC(id a1, id a2, id a3)
{
  (*((void (**)(id, uint64_t))a3 + 2))(a3, 1);
}

void sub_1002D0FCC(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id WeakRetained;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint8_t v10[16];

  v2 = sub_100431F8C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "_uploadForm -> willStartSubmitting", v10, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 32), "startAnimating");
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "navigationController"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "navigationBar"));
    objc_msgSend(v6, "setUserInteractionEnabled:", 0);

    v7 = *(_QWORD *)(a1 + 32);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "navigationItem"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "rightBarButtonItem"));
    objc_msgSend(v9, "setCustomView:", v7);

  }
}

void sub_1002D10B4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  NSObject *v6;
  id *WeakRetained;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  UGCCommunityAcknowledgementViewController *v14;
  void *v15;
  UGCCommunityAcknowledgementViewController *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  _QWORD v23[5];
  uint8_t buf[4];
  id v25;

  v4 = a3;
  v5 = sub_100431F8C();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    v25 = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "_uploadForm -> didFinishSubmitting error: %@", buf, 0xCu);
  }

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 32), "stopAnimating");
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "navigationController"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "navigationBar"));
    objc_msgSend(v9, "setUserInteractionEnabled:", 1);

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "navigationItem"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "rightBarButtonItem"));
    objc_msgSend(v11, "setCustomView:", 0);

    if (v4)
    {
      v12 = sub_1008587A8();
      v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      objc_msgSend(WeakRetained, "presentViewController:animated:completion:", v13, 1, 0);

    }
    else
    {
      if (MapsFeature_IsEnabled_RAPSydney())
      {
        v14 = [UGCCommunityAcknowledgementViewController alloc];
        v15 = (void *)objc_claimAutoreleasedReturnValue(+[RAPAcknowledgementOptions defaultOptions](RAPAcknowledgementOptions, "defaultOptions"));
        v23[0] = _NSConcreteStackBlock;
        v23[1] = 3221225472;
        v23[2] = sub_1002D1370;
        v23[3] = &unk_1011AC860;
        v23[4] = WeakRetained;
        v16 = -[UGCCommunityAcknowledgementViewController initWithOptions:completion:](v14, "initWithOptions:completion:", v15, v23);

        v17 = (void *)objc_claimAutoreleasedReturnValue(-[UGCCommunityAcknowledgementViewController navigationItem](v16, "navigationItem"));
        objc_msgSend(v17, "setHidesBackButton:", 1);

        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "navigationController"));
        objc_msgSend(v18, "pushViewController:animated:", v16, 1);

      }
      else
      {
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "view"));
        v16 = (UGCCommunityAcknowledgementViewController *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "window"));

        v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "localizedStringForKey:value:table:", CFSTR("[RAP Web UI] Thanks for your report"), CFSTR("localized string not found"), 0));

        +[ActionValidationController presentDefaultValidationActionWithTitle:inWindow:](ActionValidationController, "presentDefaultValidationActionWithTitle:inWindow:", v21, v16);
        v22 = objc_loadWeakRetained(WeakRetained + 24);
        objc_msgSend(v22, "routeStepDetailViewControllerDidSubmitReport:", WeakRetained);

      }
      +[RAPAnalyticsManager captureRAPSendActionFromReport:](RAPAnalyticsManager, "captureRAPSendActionFromReport:", WeakRetained[17]);
    }
  }

}

id sub_1002D1370(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 192));
  objc_msgSend(WeakRetained, "routeStepDetailViewControllerDidSubmitReport:", *(_QWORD *)(a1 + 32));

  return +[RAPAnalyticsManager captureRAPAcknowledgementDoneActionFromReport:](RAPAnalyticsManager, "captureRAPAcknowledgementDoneActionFromReport:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 136));
}

void sub_1002D2C58(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  void *v5;
  objc_class *v6;
  NSString *v7;
  void *v8;
  void *v9;
  void *v10;
  __CFString *v11;
  __CFString *v12;
  id v13;
  const __CFString *v14;
  const __CFString *v15;
  id v16;
  id WeakRetained;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  uint8_t buf[4];
  __CFString *v26;
  __int16 v27;
  const __CFString *v28;
  __int16 v29;
  id v30;

  v2 = sub_100431C0C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (!os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    goto LABEL_16;
  v4 = *(id *)(a1 + 32);
  v5 = v4;
  if (!v4)
  {
    v11 = CFSTR("<nil>");
    goto LABEL_10;
  }
  v6 = (objc_class *)objc_opt_class(v4);
  v7 = NSStringFromClass(v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  if ((objc_opt_respondsToSelector(v5, "accessibilityIdentifier") & 1) != 0)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "performSelector:", "accessibilityIdentifier"));
    v10 = v9;
    if (v9 && !objc_msgSend(v9, "isEqualToString:", v8))
    {
      v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v8, v5, v10));

      goto LABEL_8;
    }

  }
  v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v8, v5));
LABEL_8:

LABEL_10:
  v12 = v11;
  v13 = objc_msgSend(*(id *)(a1 + 40), "sessionState");
  v14 = CFSTR("NotStarted");
  if (v13 == (id)1)
    v14 = CFSTR("Running");
  if (v13 == (id)2)
    v15 = CFSTR("Suspended");
  else
    v15 = v14;
  v16 = objc_msgSend(*(id *)(a1 + 40), "navigationType");
  *(_DWORD *)buf = 138543874;
  v26 = v12;
  v27 = 2114;
  v28 = v15;
  v29 = 2050;
  v30 = v16;
  _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%{public}@] Pushing nav mode now: %{public}@, %{public}ld", buf, 0x20u);

LABEL_16:
  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 104));
  objc_msgSend(WeakRetained, "updateThemeForVisualEffectStyle:", 1);

  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chromeViewController"));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "navModeController"));
  objc_msgSend(v18, "pushContext:animated:completion:", v19, 1, 0);

  v20 = *(void **)(a1 + 32);
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "navActionCoordinator"));
  objc_msgSend(v21, "setAppCoordinator:", v20);

  v22 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedMapsDelegate](UIApplication, "sharedMapsDelegate"));
  objc_msgSend(v22, "acquireSecureAppAssertionIfNeeded");

  v23 = objc_msgSend(*(id *)(a1 + 32), "_analyticsPipelineTransportModeForMSPTransportType:", objc_msgSend(*(id *)(a1 + 40), "currentTransportType"));
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[GEOAPSharedStateData sharedData](GEOAPSharedStateData, "sharedData"));
  objc_msgSend(v24, "setMapUiShownActiveNavMode:", v23);

}

void sub_1002D2EFC(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  StepModeController *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  id v14;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 104));
  objc_msgSend(WeakRetained, "updateThemeForVisualEffectStyle:", 1);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "currentRouteCollection"));
  v14 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "currentRoute"));

  if (objc_msgSend(v14, "transportType") == 1)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chromeViewController"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "transitNavigationContext"));
    objc_msgSend(v4, "pushContext:animated:completion:", v5, 1, 0);
  }
  else
  {
    v6 = -[StepModeController initWithRoute:initialStepIndex:desiredUserTrackingMode:]([StepModeController alloc], "initWithRoute:initialStepIndex:desiredUserTrackingMode:", v14, 0, &off_10126CAA8);
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(void **)(v7 + 112);
    *(_QWORD *)(v7 + 112) = v6;

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chromeViewController"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stepModeController"));
    objc_msgSend(v9, "pushContext:animated:completion:", v10, 1, 0);

    v11 = *(void **)(a1 + 32);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "stepModeController"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "actionCoordinator"));
    objc_msgSend(v5, "setAppCoordinator:", v11);
  }

  v12 = objc_msgSend(*(id *)(a1 + 32), "_analyticsPipelineTransportModeForMSPTransportType:", objc_msgSend(*(id *)(a1 + 40), "currentTransportType"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[GEOAPSharedStateData sharedData](GEOAPSharedStateData, "sharedData"));
  objc_msgSend(v13, "setMapUiShownActiveNavMode:", v12);

}

void sub_1002D3520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002D354C(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void (**v7)(_QWORD);
  void *v8;
  _QWORD *v9;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    if (!*(_BYTE *)(a1 + 48))
    {
      v9 = WeakRetained;
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "baseActionCoordinator"));
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "destination"));
      objc_msgSend(v4, "viewController:selectLastDirectionsDestinationComposedWaypoint:", 0, v5);

      v3 = v9;
      v6 = (void *)v9[4];
      if (v6)
      {
        v7 = (void (**)(_QWORD))objc_msgSend(v6, "copy");
        v8 = (void *)v9[4];
        v9[4] = 0;

        v7[2](v7);
        v3 = v9;
      }
    }
  }

}

void sub_1002D3F44(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "baseActionCoordinator"));
  objc_msgSend(v2, "viewController:showCollection:", 0, *(_QWORD *)(a1 + 40));

}

void sub_1002D402C(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "baseActionCoordinator"));
  objc_msgSend(v1, "toggleRoutePlanning");

}

void sub_1002D4118(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "baseActionCoordinator"));
  objc_msgSend(v2, "viewController:doDirectionItem:withUserInfo:", 0, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_1002D4264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002D4288(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  _QWORD v14[5];
  id v15;
  id v16;
  _QWORD v17[4];
  id v18;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    if (v3 && objc_msgSend(v3, "count"))
    {
      v5 = objc_alloc((Class)GEORouteBuilder_PersistentData);
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "firstObject"));
      v7 = objc_msgSend(v5, "initWithPersistentData:", v6);

      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "buildRoute"));
      objc_msgSend(WeakRetained, "enterRouteCreationWithRoute:originMapItem:destinationMapItem:userInfo:completion:", v8, a1[4], 0, 0, a1[5]);
    }
    else
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "_geoMapItem"));
      v7 = (id)objc_claimAutoreleasedReturnValue(+[GEORouteBuilder_PlaceDataCuratedHike builderWithMapItem:](GEORouteBuilder_PlaceDataCuratedHike, "builderWithMapItem:", v9));

      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "buildRoute"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "chromeViewController"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "currentTraits"));

      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_1002D4460;
      v17[3] = &unk_1011B0430;
      v18 = v10;
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_1002D4530;
      v14[3] = &unk_1011B0458;
      v14[4] = WeakRetained;
      v15 = a1[4];
      v16 = a1[5];
      v12 = v10;
      v13 = objc_msgSend(v12, "_maps_convertToNavigableRouteWithTraits:errorHandler:completionHandler:", v8, v17, v14);

    }
  }

}

void sub_1002D4460(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  v7 = a2;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "userProvidedName"));
  v9 = objc_msgSend(v8, "length");
  v10 = *(void **)(a1 + 32);
  if (v9)
    v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "userProvidedName"));
  else
    v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "name"));
  v14 = (id)v11;

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedMapsDelegate](UIApplication, "sharedMapsDelegate"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "storageID"));
  objc_msgSend(v12, "interruptConvertToNavigableSavedRouteID:routeName:error:directionsError:", v13, v14, v7, v6);

}

id sub_1002D4530(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "enterRouteCreationWithRoute:originMapItem:destinationMapItem:userInfo:completion:", a2, *(_QWORD *)(a1 + 40), 0, 0, *(_QWORD *)(a1 + 48));
}

id sub_1002D47C8(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  return objc_msgSend(*(id *)(a1 + 32), "setIsPresentingRouteCreation:", 0);
}

void sub_1002D4894(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "baseActionCoordinator"));
  objc_msgSend(v2, "viewController:presentParentMapItem:", 0, *(_QWORD *)(a1 + 40));

}

void sub_1002D49E0(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "baseActionCoordinator"));
  objc_msgSend(v2, "viewController:presentRelatedMapItems:withTitle:originalMapItem:analyticsDelegate:", 0, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));

}

void sub_1002D4AC0(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "baseActionCoordinator"));
  objc_msgSend(v2, "viewController:showCuratedCollectionIdentifier:", 0, *(_QWORD *)(a1 + 40));

}

void sub_1002D4B9C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "baseActionCoordinator"));
  objc_msgSend(v2, "viewController:showGuidesHome:", 0, *(_QWORD *)(a1 + 40));

}

void sub_1002D4C78(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "baseActionCoordinator"));
  objc_msgSend(v2, "viewControllerShowPublisherWithID:", *(_QWORD *)(a1 + 40));

}

void sub_1002D4D28(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "baseActionCoordinator"));
  objc_msgSend(v1, "viewControllerShowAllCollections");

}

void sub_1002D4E14(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "baseActionCoordinator"));
  objc_msgSend(v2, "viewController:showCuratedCollectionsList:usingTitle:usingCollectionIds:completion:", 0, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), 0, 0);

}

void sub_1002D4F1C(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "baseActionCoordinator"));
  objc_msgSend(v1, "viewControllerPresentUserProfile:", 0);

}

void sub_1002D501C(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "baseActionCoordinator"));
  objc_msgSend(v1, "viewControllerShowOfflineMaps:", 0);

}

void sub_1002D50C0(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "baseActionCoordinator"));
  objc_msgSend(v1, "viewControllerShowExpiredOfflineMaps:", 0);

}

void sub_1002D51C4(uint64_t a1)
{
  void *v2;
  id v3;

  if (*(_BYTE *)(a1 + 56))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "baseActionCoordinator"));
    objc_msgSend(v2, "viewControllerShowOfflineMaps:", 0);

  }
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "baseActionCoordinator"));
  objc_msgSend(v3, "viewController:showOfflineMapRegionSelectorForRegion:name:", 0, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_1002D57C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id *location)
{
  uint64_t v15;

  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v15 - 152));
  _Unwind_Resume(a1);
}

void sub_1002D5838(uint64_t a1)
{
  id v2;
  NSObject *v3;
  _BOOL4 v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  id v8;
  void *v9;
  objc_class *v10;
  NSString *v11;
  void *v12;
  void *v13;
  void *v14;
  __CFString *v15;
  id v16;
  objc_class *v17;
  NSString *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  const char *v23;
  NSObject *v24;
  os_log_type_t v25;
  uint32_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  id v31;
  void *v32;
  unsigned int v33;
  StartNavigationDetailsBuilder *v34;
  void *v35;
  void *v36;
  StartNavigationDetailsBuilder *v37;
  void *v38;
  void *v39;
  id v40;
  NavigationSessionConfiguration *v41;
  void *v42;
  NavigationSessionConfiguration *v43;
  id v44;
  NSObject *v45;
  id v46;
  void *v47;
  objc_class *v48;
  NSString *v49;
  void *v50;
  void *v51;
  void *v52;
  __CFString *v53;
  id v54;
  NSObject *v55;
  NavigationSessionConfiguration *v56;
  void *v57;
  uint64_t v58;
  id v59;
  NSObject *v60;
  uint64_t v61;
  void *v62;
  id v63;
  __int128 v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  NavigationSession *v70;
  void *v71;
  _QWORD v72[4];
  NavigationSessionConfiguration *v73;
  id v74;
  _BYTE buf[32];
  __int128 v76;
  uint64_t v77;

  v2 = sub_100431C0C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG);

  v5 = sub_100431C0C();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = v6;
  if (!v4)
  {
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      goto LABEL_23;
    v16 = objc_loadWeakRetained((id *)(a1 + 48));
    v9 = v16;
    if (!v16)
    {
      v15 = CFSTR("<nil>");
      goto LABEL_21;
    }
    v17 = (objc_class *)objc_opt_class(v16);
    v18 = NSStringFromClass(v17);
    v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    if ((objc_opt_respondsToSelector(v9, "accessibilityIdentifier") & 1) != 0)
    {
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "performSelector:", "accessibilityIdentifier"));
      v21 = v20;
      if (v20 && !objc_msgSend(v20, "isEqualToString:", v19))
      {
        v15 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v19, v9, v21));

        goto LABEL_17;
      }

    }
    v15 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v19, v9));
LABEL_17:

LABEL_21:
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)&buf[4] = v15;
    v23 = "[%{public}@] Starting nav";
    v24 = v7;
    v25 = OS_LOG_TYPE_INFO;
    v26 = 12;
    goto LABEL_22;
  }
  if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    goto LABEL_23;
  v8 = objc_loadWeakRetained((id *)(a1 + 48));
  v9 = v8;
  if (!v8)
  {
    v15 = CFSTR("<nil>");
    goto LABEL_19;
  }
  v10 = (objc_class *)objc_opt_class(v8);
  v11 = NSStringFromClass(v10);
  v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  if ((objc_opt_respondsToSelector(v9, "accessibilityIdentifier") & 1) != 0)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "performSelector:", "accessibilityIdentifier"));
    v14 = v13;
    if (v13 && !objc_msgSend(v13, "isEqualToString:", v12))
    {
      v15 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v12, v9, v14));

      goto LABEL_9;
    }

  }
  v15 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v12, v9));
LABEL_9:

LABEL_19:
  v22 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)buf = 138543618;
  *(_QWORD *)&buf[4] = v15;
  *(_WORD *)&buf[12] = 2112;
  *(_QWORD *)&buf[14] = v22;
  v23 = "[%{public}@] Starting nav with route collection: %@";
  v24 = v7;
  v25 = OS_LOG_TYPE_DEBUG;
  v26 = 22;
LABEL_22:
  _os_log_impl((void *)&_mh_execute_header, v24, v25, v23, buf, v26);

LABEL_23:
  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "platformController"));
  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "currentSession"));

  v29 = objc_opt_class(RoutePlanningSession);
  if ((objc_opt_isKindOfClass(v28, v29) & 1) != 0)
    v30 = v28;
  else
    v30 = 0;
  v31 = v30;

  if (v31)
  {
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "configuration"));
    v33 = objc_msgSend(v32, "isNavigationTracePlayback");

    if (v33)
    {
      v34 = [StartNavigationDetailsBuilder alloc];
      v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "configuration"));
      v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "tracePlaybackPath"));
      v37 = -[StartNavigationDetailsBuilder initWithTracePlaybackPath:routeCollection:](v34, "initWithTracePlaybackPath:routeCollection:", v36, *(_QWORD *)(a1 + 32));

      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "configuration"));
      -[StartNavigationDetailsBuilder setIsResumingMultipointRoute:](v37, "setIsResumingMultipointRoute:", objc_msgSend(v38, "isResumingMultipointRoute"));

      v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "baseActionCoordinator"));
      v40 = objc_msgSend(v39, "newTraits");

      -[StartNavigationDetailsBuilder setTraits:](v37, "setTraits:", v40);
      v41 = [NavigationSessionConfiguration alloc];
      v42 = (void *)objc_claimAutoreleasedReturnValue(-[StartNavigationDetailsBuilder buildNavigationDetails](v37, "buildNavigationDetails"));
      v43 = -[NavigationSessionConfiguration initWithStartNavigationDetails:routeCollection:traits:isETAOnlyMode:](v41, "initWithStartNavigationDetails:routeCollection:traits:isETAOnlyMode:", v42, *(_QWORD *)(a1 + 32), v40, 0);

      v44 = sub_100431C0C();
      v45 = objc_claimAutoreleasedReturnValue(v44);
      if (!os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
      {
LABEL_47:

        v70 = -[NavigationSession initWithInitiator:configuration:]([NavigationSession alloc], "initWithInitiator:configuration:", 1, v43);
        v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "platformController"));
        objc_msgSend(v71, "pushSession:", v70);

        goto LABEL_48;
      }
      v46 = objc_loadWeakRetained((id *)(a1 + 48));
      v47 = v46;
      if (!v46)
      {
        v53 = CFSTR("<nil>");
        goto LABEL_46;
      }
      v48 = (objc_class *)objc_opt_class(v46);
      v49 = NSStringFromClass(v48);
      v50 = (void *)objc_claimAutoreleasedReturnValue(v49);
      if ((objc_opt_respondsToSelector(v47, "accessibilityIdentifier") & 1) != 0)
      {
        v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "performSelector:", "accessibilityIdentifier"));
        v52 = v51;
        if (v51 && !objc_msgSend(v51, "isEqualToString:", v50))
        {
          v53 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v50, v47, v52));

          goto LABEL_35;
        }

      }
      v53 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v50, v47));
LABEL_35:

LABEL_46:
      v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "configuration"));
      v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "tracePlaybackPath"));
      *(_DWORD *)buf = 138543618;
      *(_QWORD *)&buf[4] = v53;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v69;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_INFO, "[%{public}@] Configured navigation session for trace playback with path: %@", buf, 0x16u);

      goto LABEL_47;
    }
    v59 = sub_100431C0C();
    v60 = objc_claimAutoreleasedReturnValue(v59);
    if (os_log_type_enabled(v60, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v31;
      _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_INFO, "Beginning navigation with route planning session %{public}@", buf, 0xCu);
    }

    v37 = (StartNavigationDetailsBuilder *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "navigationStateMonitoringTask"));
    v61 = *(_QWORD *)(a1 + 32);
    v40 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "chromeViewController"));
    v43 = (NavigationSessionConfiguration *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "currentTraits"));
    v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "configuration"));
    v63 = objc_msgSend(v62, "isResumingMultipointRoute");
    v64 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)buf = *(_OWORD *)(a1 + 56);
    *(_OWORD *)&buf[16] = v64;
    v76 = *(_OWORD *)(a1 + 88);
    v77 = *(_QWORD *)(a1 + 104);
    -[StartNavigationDetailsBuilder beginNavigationWithRouteCollection:navigationDetailsOptions:mapServiceTraits:sessionInitiator:isResumingMultipointRoute:](v37, "beginNavigationWithRouteCollection:navigationDetailsOptions:mapServiceTraits:sessionInitiator:isResumingMultipointRoute:", v61, buf, v43, 1, v63);

  }
  else
  {
    v54 = sub_100431C0C();
    v55 = objc_claimAutoreleasedReturnValue(v54);
    if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_INFO, "Directly pushing navigation to route", buf, 2u);
    }

    v56 = (NavigationSessionConfiguration *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentRoute"));
    v57 = (void *)objc_claimAutoreleasedReturnValue(-[NavigationSessionConfiguration userProvidedName](v56, "userProvidedName"));
    if (objc_msgSend(v57, "length"))
      v58 = objc_claimAutoreleasedReturnValue(-[NavigationSessionConfiguration userProvidedName](v56, "userProvidedName"));
    else
      v58 = objc_claimAutoreleasedReturnValue(-[NavigationSessionConfiguration name](v56, "name"));
    v65 = (void *)v58;

    v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "platformController"));
    v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentRoute"));
    v72[0] = _NSConcreteStackBlock;
    v72[1] = 3221225472;
    v72[2] = sub_1002D5FE4;
    v72[3] = &unk_1011B04D0;
    v73 = v56;
    v74 = v65;
    v40 = v65;
    v37 = v56;
    objc_msgSend(v66, "pushNavigationWithRoute:navigationMode:shouldCheckNavSafetyAlert:completion:", v67, 0, 0, v72);

    v43 = v73;
  }
LABEL_48:

}

void sub_1002D5FE4(uint64_t a1, unint64_t a2, unint64_t a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;

  if (a2 | a3)
  {
    v5 = (id)a3;
    v6 = (id)a2;
    v8 = (id)objc_claimAutoreleasedReturnValue(+[UIApplication sharedMapsDelegate](UIApplication, "sharedMapsDelegate"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "storageID"));
    objc_msgSend(v8, "interruptConvertToNavigableSavedRouteID:routeName:error:directionsError:", v7, *(_QWORD *)(a1 + 40), v6, v5);

  }
}

void sub_1002D6080(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  void *v5;
  objc_class *v6;
  NSString *v7;
  void *v8;
  void *v9;
  void *v10;
  __CFString *v11;
  uint8_t buf[4];
  __CFString *v13;

  v2 = sub_100431C0C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = objc_loadWeakRetained((id *)(a1 + 32));
    v5 = v4;
    if (!v4)
    {
      v11 = CFSTR("<nil>");
      goto LABEL_10;
    }
    v6 = (objc_class *)objc_opt_class(v4);
    v7 = NSStringFromClass(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if ((objc_opt_respondsToSelector(v5, "accessibilityIdentifier") & 1) != 0)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "performSelector:", "accessibilityIdentifier"));
      v10 = v9;
      if (v9 && !objc_msgSend(v9, "isEqualToString:", v8))
      {
        v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v8, v5, v10));

        goto LABEL_8;
      }

    }
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v8, v5));
LABEL_8:

LABEL_10:
    *(_DWORD *)buf = 138543362;
    v13 = v11;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%{public}@] User canceled End Navigation prompt", buf, 0xCu);

  }
}

void sub_1002D6208(id *a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  id v6;
  void *v7;
  objc_class *v8;
  NSString *v9;
  void *v10;
  void *v11;
  void *v12;
  __CFString *v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  NSObject *v18;
  id v19;
  void *v20;
  objc_class *v21;
  NSString *v22;
  void *v23;
  void *v24;
  void *v25;
  __CFString *v26;
  _QWORD v27[4];
  id v28;
  id v29;
  uint8_t buf[4];
  __CFString *v31;

  v3 = a2;
  v4 = sub_100431C0C();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v6 = objc_loadWeakRetained(a1 + 6);
    v7 = v6;
    if (!v6)
    {
      v13 = CFSTR("<nil>");
      goto LABEL_10;
    }
    v8 = (objc_class *)objc_opt_class(v6);
    v9 = NSStringFromClass(v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    if ((objc_opt_respondsToSelector(v7, "accessibilityIdentifier") & 1) != 0)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "performSelector:", "accessibilityIdentifier"));
      v12 = v11;
      if (v11 && !objc_msgSend(v11, "isEqualToString:", v10))
      {
        v13 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v10, v7, v12));

        goto LABEL_8;
      }

    }
    v13 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v10, v7));
LABEL_8:

LABEL_10:
    *(_DWORD *)buf = 138543362;
    v31 = v13;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[%{public}@] User accepted End Navigation prompt", buf, 0xCu);

  }
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "auxiliaryTasksManager"));
  v15 = objc_msgSend(v14, "auxilaryTaskForClass:", objc_opt_class(NavigationStateMonitoringTask));
  v16 = (void *)objc_claimAutoreleasedReturnValue(v15);

  v17 = sub_100431C0C();
  v18 = objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    v19 = objc_loadWeakRetained(a1 + 6);
    v20 = v19;
    if (!v19)
    {
      v26 = CFSTR("<nil>");
      goto LABEL_20;
    }
    v21 = (objc_class *)objc_opt_class(v19);
    v22 = NSStringFromClass(v21);
    v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
    if ((objc_opt_respondsToSelector(v20, "accessibilityIdentifier") & 1) != 0)
    {
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "performSelector:", "accessibilityIdentifier"));
      v25 = v24;
      if (v24 && !objc_msgSend(v24, "isEqualToString:", v23))
      {
        v26 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v23, v20, v25));

        goto LABEL_18;
      }

    }
    v26 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v23, v20));
LABEL_18:

LABEL_20:
    *(_DWORD *)buf = 138543362;
    v31 = v26;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "[%{public}@] Ending current navigation session and waiting for navd confirmation before starting next navigation session", buf, 0xCu);

  }
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = sub_1002D6588;
  v27[3] = &unk_1011B0520;
  objc_copyWeak(&v29, a1 + 6);
  v28 = a1[5];
  objc_msgSend(v16, "endNavigationWithCompletion:", v27);

  objc_destroyWeak(&v29);
}

void sub_1002D656C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002D6588(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  void *v5;
  objc_class *v6;
  NSString *v7;
  void *v8;
  void *v9;
  void *v10;
  __CFString *v11;
  uint8_t buf[4];
  __CFString *v14;

  v2 = sub_100431C0C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = objc_loadWeakRetained((id *)(a1 + 40));
    v5 = v4;
    if (!v4)
    {
      v11 = CFSTR("<nil>");
      goto LABEL_10;
    }
    v6 = (objc_class *)objc_opt_class(v4);
    v7 = NSStringFromClass(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if ((objc_opt_respondsToSelector(v5, "accessibilityIdentifier") & 1) != 0)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "performSelector:", "accessibilityIdentifier"));
      v10 = v9;
      if (v9 && !objc_msgSend(v9, "isEqualToString:", v8))
      {
        v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v8, v5, v10));

        goto LABEL_8;
      }

    }
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v8, v5));
LABEL_8:

LABEL_10:
    *(_DWORD *)buf = 138543362;
    v14 = v11;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%{public}@] Navigation ended; starting new navigation session now",
      buf,
      0xCu);

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1002D6804(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1002D6820(uint64_t a1)
{
  _QWORD *WeakRetained;
  _QWORD *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  char isKindOfClass;
  id v8;
  void *v9;
  NSObject *v10;
  id v11;
  int v12;
  _QWORD *v13;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "platformController"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "currentSession"));
    v6 = objc_opt_class(NavigationSession);
    isKindOfClass = objc_opt_isKindOfClass(v5, v6);

    if ((isKindOfClass & 1) != 0)
    {
      v8 = objc_retainBlock(*(id *)(a1 + 32));
      v9 = (void *)v3[4];
      v3[4] = v8;

      v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "platformController"));
      -[NSObject clearSessions](v10, "clearSessions");
    }
    else
    {
      v11 = sub_100431C0C();
      v10 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        v12 = 134349056;
        v13 = v3;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "[%{public}p] endNavigationWithCompletion: navigation was already ended elsewhere. aborting.", (uint8_t *)&v12, 0xCu);
      }
    }

  }
}

BOOL sub_1002D6E78(id a1, MapsSession *a2, unint64_t a3, BOOL *a4)
{
  MapsSession *v4;
  uint64_t v5;
  uint64_t v6;
  char isKindOfClass;

  v4 = a2;
  v6 = objc_opt_class(RoutePlanningSession, v5);
  isKindOfClass = objc_opt_isKindOfClass(v4, v6);

  return isKindOfClass & 1;
}

BOOL sub_1002D6EC0(id a1, MapsSession *a2)
{
  MapsSession *v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  v2 = a2;
  v4 = objc_opt_class(RoutePlanningSession, v3);
  v5 = (v2 != 0) & objc_opt_isKindOfClass(v2, v4);

  return v5;
}

BOOL sub_1002D6F0C(id a1, ChromeContext *a2, unint64_t a3, BOOL *a4)
{
  ChromeContext *v4;
  uint64_t v5;
  uint64_t v6;
  char isKindOfClass;

  v4 = a2;
  v6 = objc_opt_class(MapsCustomRouteViewContext, v5);
  isKindOfClass = objc_opt_isKindOfClass(v4, v6);

  return isKindOfClass & 1;
}

void sub_1002D7348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  id *v25;
  id *v26;

  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1002D7378(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v6;
  char *v7;
  id v8;
  NSObject *v9;
  id WeakRetained;
  id v11;
  void *v12;
  int v14;
  id v15;

  v6 = a3;
  *a4 = *(_BYTE *)(a1 + 48);
  v7 = (char *)objc_msgSend(v6, "indexOfObject:", *(_QWORD *)(a1 + 32));
  if (v7)
  {
    if (v7 == (char *)0x7FFFFFFFFFFFFFFFLL)
    {
      v8 = sub_100431C0C();
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
        v14 = 134349056;
        v15 = WeakRetained;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "[%{public}p] Nav mode controller is not present in the contexts stack; leaving coordinated change early",
          (uint8_t *)&v14,
          0xCu);

      }
      v11 = v6;
    }
    else
    {
      v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_maps_subarrayToIndex:", v7 - 1));
    }
    v12 = v11;
  }
  else
  {
    v12 = &__NSArray0__struct;
  }

  return v12;
}

void sub_1002D748C(uint64_t a1)
{
  void *v2;
  id *v3;
  id WeakRetained;
  uint64_t v5;
  id v6;
  id v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  v3 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(v2, "postNotificationName:object:", CFSTR("MapsTestingDidEndGuidanceOrStepping"), WeakRetained);

  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    (*(void (**)(void))(v5 + 16))();
  v6 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(v6, "applyPendingActionIfNeeded");

  v7 = objc_loadWeakRetained(v3);
  objc_msgSend(v7, "archiveMapsActivity");

}

id sub_1002D7928(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "postNotificationName:object:", CFSTR("MapsTestingDidEndGuidanceOrStepping"), *(_QWORD *)(a1 + 32));

  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
    (*(void (**)(void))(v3 + 16))();
  return objc_msgSend(*(id *)(a1 + 32), "applyPendingActionIfNeeded");
}

void sub_1002D7D50(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "platformController"));
  objc_msgSend(v2, "popUntil:", &stru_1011B0678);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "baseActionCoordinator"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "currentDirectionItem"));

  if (v4)
  {
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "baseActionCoordinator"));
    objc_msgSend(v5, "viewControllerDoLastDirectionItem:", 0);

  }
}

BOOL sub_1002D7DF4(id a1, MapsSession *a2)
{
  MapsSession *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char isKindOfClass;
  uint64_t v7;

  v2 = a2;
  v4 = objc_opt_class(RoutePlanningSession, v3);
  if ((objc_opt_isKindOfClass(v2, v4) & 1) != 0)
  {
    isKindOfClass = 1;
  }
  else
  {
    v7 = objc_opt_class(RideBookingPlanningSession, v5);
    isKindOfClass = objc_opt_isKindOfClass(v2, v7);
  }

  return isKindOfClass & 1;
}

uint64_t sub_1002D7E5C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1002D7EC0(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "navModeController"));
  objc_msgSend(v1, "setShowFullScreenDirectionsList:", 1);

}

uint64_t sub_1002D8684(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_1002D8AF0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, BOOL))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40) == 0);
}

void sub_1002D9268(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  HomeSharedTripsContentInjector *v5;
  id v6;
  NSObject *v7;
  id v8;
  NSObject *v9;
  char *v10;
  int v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "baseModeController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "topContext"));

  if (v3 != v2)
  {
    v6 = sub_1004318FC();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v11 = 136315906;
      v12 = "-[AppCoordinator _openSharedTrip:]_block_invoke";
      v13 = 2080;
      v14 = "AppCoordinator.m";
      v15 = 1024;
      v16 = 1232;
      v17 = 2080;
      v18 = "chrome.topContext == baseModeController";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s [%s:%d] Assertion: (%s)", (uint8_t *)&v11, 0x26u);
    }

    if (sub_100A70734())
    {
      v8 = sub_1004318FC();
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v10 = (char *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
        v11 = 138412290;
        v12 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&v11, 0xCu);

      }
    }
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "baseActionCoordinator"));
  v5 = -[HomeSharedTripsContentInjector initWithSharedTrip:]([HomeSharedTripsContentInjector alloc], "initWithSharedTrip:", *(_QWORD *)(a1 + 48));
  -[HomeSharedTripsContentInjector setBaseModeController:](v5, "setBaseModeController:", v2);
  objc_msgSend(v4, "setSidebarContentInjector:", v5);

}

id sub_1002D9434(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  IOSSharedTripsContext *v10;
  void *v11;
  void *v12;
  _QWORD v14[2];

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "lastObject"));
  v6 = objc_opt_class(IOSSharedTripsContext);
  if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0)
    v7 = v5;
  else
    v7 = 0;
  v8 = v7;

  if (v8)
  {
    objc_msgSend(v8, "setSelectedTrip:", *(_QWORD *)(a1 + 32));
    v9 = v4;
  }
  else
  {
    v10 = -[SharedTripsContext initWithInitialSelectedSharedTrip:]([IOSSharedTripsContext alloc], "initWithInitialSelectedSharedTrip:", *(_QWORD *)(a1 + 32));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "baseActionCoordinator"));
    -[IOSSharedTripsContext setDelegate:](v10, "setDelegate:", v11);

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "firstObject"));
    v14[0] = v12;
    v14[1] = v10;
    v9 = (id)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v14, 2));

  }
  return v9;
}

void sub_1002D97E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002D9814(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;
  id WeakRetained;
  id v7;
  _QWORD v8[4];
  id v9;

  v7 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "groupIdentifier"));
  v4 = v3;
  if (v3
    && (v8[0] = _NSConcreteStackBlock,
        v8[1] = 3221225472,
        v8[2] = sub_1002D98EC,
        v8[3] = &unk_1011B06F0,
        v9 = v3,
        v5 = objc_msgSend(v7, "indexOfObjectPassingTest:", v8),
        v9,
        v5 == (id)0x7FFFFFFFFFFFFFFFLL))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(WeakRetained, "presentAlertForMissingSharedTrip:", *(_QWORD *)(a1 + 32));
  }
  else
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(WeakRetained, "_openSharedTrip:", *(_QWORD *)(a1 + 32));
  }

}

id sub_1002D98EC(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v6;
  id v7;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "groupIdentifier"));
  v7 = objc_msgSend(v6, "isEqualToString:", *(_QWORD *)(a1 + 32));

  if ((_DWORD)v7)
    *a4 = 1;
  return v7;
}

id sub_1002DA3BC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setCenterCoordinate:animated:", 1, *(double *)(a1 + 40), *(double *)(a1 + 48));
}

void sub_1002DA3D0(uint64_t a1)
{
  void *v2;
  SearchResult *v3;

  v3 = -[SearchResult initWithMapItem:]([SearchResult alloc], "initWithMapItem:", *(_QWORD *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "baseActionCoordinator"));
  objc_msgSend(v2, "viewController:openSearchResult:", 0, v3);

}

void sub_1002DA430(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "baseActionCoordinator"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "mapSelectionManager"));
  objc_msgSend(v2, "selectMapItem:animated:", *(_QWORD *)(a1 + 40), 1);

}

void sub_1002DA680(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observedNavigationSession"));
  v3 = objc_msgSend(v2, "guidanceType");

  if (v3 == (id)2)
    objc_msgSend(*(id *)(a1 + 32), "endNavigationAndReturnToRoutePlanning:", 1);
}

void sub_1002DBEC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002DBEDC(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v12 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "photo"));

    if (v4)
    {
      v5 = *(void **)(a1 + 32);
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "photo"));
      objc_msgSend(v5, "addPhoto:", v6);

      v7 = *(void **)(a1 + 40);
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "photo"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "photo"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "photo"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "_maps_diffableDataSourceIdentifier"));
      objc_msgSend(v7, "addImage:forIdentifier:", v9, v11);

      objc_msgSend(v12, "clearSelectedPhoto");
    }
    objc_msgSend(WeakRetained, "_updateDoneButton");
  }

}

void sub_1002DC128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002DC14C(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "firstObject"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "viewModel"));
    objc_msgSend(v5, "setRapRecord:", v4);

    objc_msgSend(WeakRetained, "_updateSummarySection");
  }

}

void sub_1002DCAF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

NSCollectionLayoutSection *__cdecl sub_1002DCB14(id a1, int64_t a2, NSCollectionLayoutEnvironment *a3)
{
  NSCollectionLayoutEnvironment *v3;
  id v4;
  void *v5;
  void *v6;

  v3 = a3;
  v4 = objc_msgSend(objc_alloc((Class)UICollectionLayoutListConfiguration), "initWithAppearance:", 2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor clearColor](UIColor, "clearColor"));
  objc_msgSend(v4, "setBackgroundColor:", v5);

  objc_msgSend(v4, "setItemSeparatorHandler:", &stru_1011B0820);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutSection sectionWithListConfiguration:layoutEnvironment:](NSCollectionLayoutSection, "sectionWithListConfiguration:layoutEnvironment:", v4, v3));

  objc_msgSend(v6, "setContentInsets:", 0.0, 16.0, 10.0, 16.0);
  return (NSCollectionLayoutSection *)v6;
}

UIListSeparatorConfiguration *__cdecl sub_1002DCBCC(id a1, NSIndexPath *a2, UIListSeparatorConfiguration *a3)
{
  NSIndexPath *v4;
  UIListSeparatorConfiguration *v5;

  v4 = a2;
  v5 = a3;
  -[UIListSeparatorConfiguration setTopSeparatorVisibility:](v5, "setTopSeparatorVisibility:", 2);
  -[UIListSeparatorConfiguration setBottomSeparatorVisibility:](v5, "setBottomSeparatorVisibility:", 2);
  if ((id)-[NSIndexPath section](v4, "section") == (id)2 && !-[NSIndexPath row](v4, "row"))
    -[UIListSeparatorConfiguration setBottomSeparatorVisibility:](v5, "setBottomSeparatorVisibility:", 1);

  return v5;
}

void sub_1002DCC3C(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "viewModel"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "button"));
    objc_msgSend(v4, "_performButtonAction:", objc_msgSend(v3, "buttonAction"));

    WeakRetained = v4;
  }

}

void sub_1002DD3D4(id a1)
{
  void *v1;
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[UIApplication sharedMapsDelegate](UIApplication, "sharedMapsDelegate"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "appCoordinator"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "baseActionCoordinator"));
  objc_msgSend(v2, "viewControllerShowReports:fromEntryPoint:", 0, 713);

}

void sub_1002DD438(id a1)
{
  void *v1;
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[UIApplication sharedMapsDelegate](UIApplication, "sharedMapsDelegate"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "appCoordinator"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "baseActionCoordinator"));
  objc_msgSend(v2, "viewControllerShowReports:fromEntryPoint:", 0, 713);

}

void sub_1002DD6BC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1002DD6D8(id a1, id a2, id a3)
{
  (*((void (**)(id, uint64_t))a3 + 2))(a3, 1);
}

id sub_1002DD6E8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "startAnimating");
}

void sub_1002DD6F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  UGCCommunityAcknowledgementViewController *v11;
  uint64_t v12;
  UGCCommunityAcknowledgementViewController *v13;
  void *v14;
  void *v15;
  _QWORD v16[6];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 32), "stopAnimating");
    if (a3)
    {
      v6 = sub_1008587A8();
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      objc_msgSend(WeakRetained, "presentViewController:animated:completion:", v7, 1, 0);

    }
    else
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[RAPAcknowledgementOptions defaultOptions](RAPAcknowledgementOptions, "defaultOptions"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "localizedStringForKey:value:table:", CFSTR("[RAP] Button Title for the Thank You screen"), CFSTR("localized string not found"), 0));
      objc_msgSend(v8, "setPrimaryButtonTitle:", v10);

      v11 = [UGCCommunityAcknowledgementViewController alloc];
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_1002DD878;
      v16[3] = &unk_1011AC8B0;
      v12 = *(_QWORD *)(a1 + 40);
      v16[4] = WeakRetained;
      v16[5] = v12;
      v13 = -[UGCCommunityAcknowledgementViewController initWithOptions:completion:](v11, "initWithOptions:completion:", v8, v16);
      v14 = (void *)objc_claimAutoreleasedReturnValue(-[UGCCommunityAcknowledgementViewController navigationItem](v13, "navigationItem"));
      objc_msgSend(v14, "setHidesBackButton:", 1);

      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "navigationController"));
      objc_msgSend(v15, "pushViewController:animated:", v13, 1);

      +[RAPAnalyticsManager captureRAPSendActionFromReport:](RAPAnalyticsManager, "captureRAPSendActionFromReport:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24));
    }
  }

}

id sub_1002DD878(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 24), "previousFeedbackID"));
  objc_msgSend(v2, "_setRAPRecordAsInReviewWithReportID:", v3);

  return _objc_msgSend(*(id *)(a1 + 32), "_dismissAndOpenReportsHome");
}

void sub_1002E08A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

BOOL sub_1002E08C0(id a1)
{
  void *v1;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
  objc_msgSend(v1, "captureUserAction:onTarget:eventValue:", 18, 637, 0);

  return 1;
}

void sub_1002E0904(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  _QWORD *v17;
  id v18;
  _QWORD v19[4];
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;

  v5 = a2;
  v6 = objc_msgSend(v5, "rideOptionIndex");
  v7 = *(void **)(a1 + 32);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "actionSheetTitle"));
  if (v8)
  {
    objc_msgSend(v7, "addObject:", v8);
  }
  else
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
    objc_msgSend(v7, "addObject:", v9);

  }
  v10 = *(void **)(a1 + 40);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "actionSheetArtworks"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "firstObject"));
  if (v12)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "actionSheetArtworks"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "firstObject"));
    objc_msgSend(v10, "addObject:", v14);

  }
  else
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
    objc_msgSend(v10, "addObject:", v13);
  }

  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_1002E0AF4;
  v19[3] = &unk_1011B0938;
  v15 = *(void **)(a1 + 48);
  v20 = *(id *)(a1 + 56);
  v24 = v6;
  v23 = *(id *)(a1 + 72);
  v21 = *(id *)(a1 + 64);
  v16 = v5;
  v22 = v16;
  v17 = objc_retainBlock(v19);
  objc_msgSend(v15, "addObject:", v17);

  v18 = objc_msgSend(v16, "rideOptionIndex");
  if (v18 == objc_msgSend(*(id *)(a1 + 56), "selectedRideOptionIndex"))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = a3;

}

void sub_1002E0AF4(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;

  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "transitLineForRideOption:", *(_QWORD *)(a1 + 64)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "composedRoute"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "segments"));
  v4 = objc_msgSend(v3, "indexOfObject:", *(_QWORD *)(a1 + 32));

  objc_msgSend(*(id *)(a1 + 32), "setSelectedRideOptionIndex:", *(_QWORD *)(a1 + 64));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[MNNavigationService sharedService](MNNavigationService, "sharedService"));
  objc_msgSend(v5, "setRideIndex:forSegmentIndex:", *(_QWORD *)(a1 + 64), v4);

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GEOPlaceActionDetails actionDetailsWithMapItem:timestamp:resultIndex:targetID:](GEOPlaceActionDetails, "actionDetailsWithMapItem:timestamp:resultIndex:targetID:", 0, *(unsigned int *)(a1 + 64), objc_msgSend(v9, "muid"), 0.0));
  objc_msgSend(v6, "captureUserAction:onTarget:eventValue:placeActionDetails:", 1032, 637, 0, v7);

  v8 = *(_QWORD *)(a1 + 56);
  if (v8)
    (*(void (**)(uint64_t, _QWORD, _QWORD, id))(v8 + 16))(v8, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), objc_msgSend(*(id *)(a1 + 48), "rideOptionIndex"));

}

void sub_1002E0C34(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  id v7;

  v5 = a2;
  v6 = v5;
  v7 = v5;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) == a3)
  {
    objc_msgSend(v5, "_setChecked:", 1);
    v6 = v7;
  }
  objc_msgSend(*(id *)(a1 + 32), "addAction:", v6);

}

void sub_1002E1A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002E1A1C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1002E1A2C(uint64_t a1)
{

}

void sub_1002E1A34(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_1002E1A44(id a1, NSError *a2)
{
  NSError *v2;
  id v3;
  NSObject *v4;
  int v5;
  NSError *v6;

  v2 = a2;
  v3 = sub_100432A0C();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = 138412290;
    v6 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "No view model to return with error %@", (uint8_t *)&v5, 0xCu);
  }

}

void sub_1002E1C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002E1C88(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *WeakRetained;
  id v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  int v17;
  id v18;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (v6)
    {
      v8 = sub_100432A0C();
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        v17 = 138412290;
        v18 = v6;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Failed Sundew call when attempting to fetch with error %@", (uint8_t *)&v17, 0xCu);
      }

      v10 = objc_claimAutoreleasedReturnValue(+[Result resultWithError:](Result, "resultWithError:", v6));
      v11 = (void *)WeakRetained[11];
      WeakRetained[11] = v10;

    }
    else
    {
      v12 = objc_alloc((Class)MUPlaceUserAttributionViewModel);
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "attributionName"));
      v14 = objc_msgSend(v12, "initWithAttributionName:", v13);
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[Result resultWithValue:](Result, "resultWithValue:", v14));
      objc_msgSend(WeakRetained, "setUserAttributionResult:", v15);

      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "photoGalleryViewController"));
      objc_msgSend(v16, "reloadUserAttribution");

    }
  }

}

id sub_1002E2108(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setPhotoGalleryViewController:", 0);
}

void sub_1002E41D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *a10, id *location)
{
  uint64_t v11;

  objc_destroyWeak(location);
  objc_destroyWeak(a10);
  objc_destroyWeak((id *)(v11 - 144));
  os_activity_scope_leave((os_activity_scope_state_t)(v11 - 160));
  _Unwind_Resume(a1);
}

void sub_1002E4214(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  os_activity_scope_state_s v9;
  uint8_t buf[4];
  uint64_t v11;

  v3 = a2;
  v9.opaque[0] = 0;
  v9.opaque[1] = 0;
  os_activity_scope_enter(*(os_activity_t *)(a1 + 32), &v9);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "_handleResponseWithHandler:result:", *(_QWORD *)(a1 + 48), v3);
  }
  else
  {
    v6 = sub_1004328BC();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138543362;
      v11 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[%{public}@] Underlying task completed, but waypoint task no longer exists", buf, 0xCu);
    }

  }
  os_activity_scope_leave(&v9);

}

void sub_1002E430C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1002E4328(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  NSObject *v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  os_activity_scope_state_s v10;
  uint8_t buf[4];
  uint64_t v12;

  v3 = a2;
  v10.opaque[0] = 0;
  v10.opaque[1] = 0;
  os_activity_scope_enter(*(os_activity_t *)(a1 + 32), &v10);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  v5 = sub_1004328BC();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
  if (WeakRetained)
  {
    if (v7)
    {
      v8 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138543362;
      v12 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[%{public}@] Underlying task requested client resolution", buf, 0xCu);
    }

    objc_msgSend(WeakRetained, "_resolveItem:traits:completion:networkActivityHandler:", v3, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  }
  else
  {
    if (v7)
    {
      v9 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138543362;
      v12 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[%{public}@] Underlying task requested client resolution, but waypoint task no longer exists", buf, 0xCu);
    }

  }
  os_activity_scope_leave(&v10);

}

void sub_1002E4464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1002E4550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1002E4AE0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v9 = a2;
  if (v9)
  {
    v3 = objc_msgSend(objc_alloc((Class)GEOLocation), "initWithCLLocation:", v9);
    v4 = objc_msgSend(objc_alloc((Class)GEOComposedWaypoint), "initWithLocation:isCurrentLocation:", v3, 1);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = objc_claimAutoreleasedReturnValue(+[Result resultWithValue:](Result, "resultWithValue:", v4));
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 32);
    v7 = GEOErrorDomain(0);
    v3 = (id)objc_claimAutoreleasedReturnValue(v7);
    v4 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v3, -8, 0));
    v6 = objc_claimAutoreleasedReturnValue(+[Result resultWithError:](Result, "resultWithError:", v4));
  }
  v8 = (void *)v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v5, v6);

}

void sub_1002E4D00(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1002E4D24(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  id v5;
  id WeakRetained;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "mapItem"));

  if (v3)
  {
    v5 = objc_msgSend(*(id *)(a1 + 32), "copy");
    objc_msgSend(v5, "clearKnownClientResolvedTypes");
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "mapItem"));
    objc_msgSend(v10, "coordinate");
    objc_msgSend(WeakRetained, "_loadWaypointWithCorrectedMapItem:coordinate:handler:traits:networkActivityHandler:", v7, *(_QWORD *)(a1 + 40), v5, *(_QWORD *)(a1 + 48));
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 40);
    v9 = GEOErrorDomain(v4);
    v5 = (id)objc_claimAutoreleasedReturnValue(v9);
    WeakRetained = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v5, -8, 0));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[Result resultWithError:](Result, "resultWithError:", WeakRetained));
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v7);
  }

}

void sub_1002E4F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002E4F84(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id WeakRetained;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;

  v15 = a2;
  v5 = a3;
  v6 = v5;
  if (v5)
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "mapItem"));
  else
    v7 = 0;
  if (objc_msgSend(*(id *)(a1 + 32), "hasSequenceNumber"))
    objc_msgSend(*(id *)(a1 + 32), "setSequenceNumber:", objc_msgSend(*(id *)(a1 + 32), "sequenceNumber") + 1);
  v8 = objc_msgSend(*(id *)(a1 + 32), "copy");
  v9 = objc_msgSend(v8, "clearKnownClientResolvedTypes");
  if (v7)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    objc_msgSend(WeakRetained, "_loadWaypointWithMapItem:handler:traits:networkActivityHandler:", v7, *(_QWORD *)(a1 + 40), v8, *(_QWORD *)(a1 + 48));
  }
  else if (v15)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    objc_msgSend(WeakRetained, "_loadWaypointWithAddress:handler:traits:networkActivityHandler:", v15, *(_QWORD *)(a1 + 40), v8, *(_QWORD *)(a1 + 48));
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 40);
    v12 = GEOErrorDomain(v9);
    WeakRetained = (id)objc_claimAutoreleasedReturnValue(v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", WeakRetained, -8, 0));
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[Result resultWithError:](Result, "resultWithError:", v13));
    (*(void (**)(uint64_t, void *))(v11 + 16))(v11, v14);

  }
}

void sub_1002E5908(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  objc_class *v10;
  NSString *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;

  v17 = a2;
  v5 = a3;
  if (v5)
  {
    v6 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0
      || (v7 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v5, v7) & 1) != 0))
    {
      v8 = v5;
LABEL_11:
      v15 = *(void **)(a1 + 32);
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: %@"), v17, v8));
      objc_msgSend(v15, "addObject:", v16);

      goto LABEL_12;
    }
    v9 = v5;
    v10 = (objc_class *)objc_opt_class(v9);
    v11 = NSStringFromClass(v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    if ((objc_opt_respondsToSelector(v9, "accessibilityIdentifier") & 1) != 0)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "performSelector:", "accessibilityIdentifier"));
      v14 = v13;
      if (v13 && !objc_msgSend(v13, "isEqualToString:", v12))
      {
        v8 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v12, v9, v14));

        goto LABEL_10;
      }

    }
    v8 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v12, v9));
LABEL_10:

    goto LABEL_11;
  }
LABEL_12:

}

void sub_1002E5A88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v4;

  if (a3)
  {
    v3 = *(void **)(a1 + 32);
    v4 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: %@"), a2, a3));
    objc_msgSend(v3, "addObject:", v4);

  }
}

void sub_1002E65EC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 112));
  _Unwind_Resume(a1);
}

void sub_1002E6620(uint64_t a1)
{
  id *WeakRetained;
  id v3;
  NSObject *v4;
  unsigned int v5;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  id v13;
  const char *v14;
  uint8_t *v15;
  id v16;
  uint64_t v17;
  uint8_t v18[2];
  uint8_t buf[16];

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (!WeakRetained)
    goto LABEL_24;
  v3 = sub_10043253C();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Action Button Tapped in Maps Home", buf, 2u);
  }

  v5 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "suggestionType");
  if (v5 - 1 < 2 || v5 == 4)
  {
    if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "canPresentEducationScreen"))
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "transitPayActionDelegate"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "educationScreenAssetURLs"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "educationScreenTitle"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "educationScreenText"));
      objc_msgSend(v7, "presentEducationScreenWithAssetURLs:titleText:bodyText:", v8, v9, v10);

LABEL_14:
      v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "analyticsValue"));
      +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 308, 8, v12);
LABEL_20:

      goto LABEL_21;
    }
    v13 = sub_10043253C();
    v12 = objc_claimAutoreleasedReturnValue(v13);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      goto LABEL_20;
    LOWORD(v17) = 0;
    v14 = "Cannot present education screen because canPresentEducationScreen returned NO";
    v15 = (uint8_t *)&v17;
LABEL_19:
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, v14, v15, 2u);
    goto LABEL_20;
  }
  if (v5 == 3)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "paymentMethods"));

    if (v11)
    {
      objc_msgSend(WeakRetained[9], "markActionExecuted:", 1);
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "transitPayActionDelegate"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "paymentMethods"));
      objc_msgSend(v7, "presentWalletDCIViewControllerWithTransitSystems:callbackDelegate:", v8, *(_QWORD *)(a1 + 32));
      goto LABEL_14;
    }
    v16 = sub_10043253C();
    v12 = objc_claimAutoreleasedReturnValue(v16);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      goto LABEL_20;
    *(_WORD *)v18 = 0;
    v14 = "Cannot present DCI flow because modelData.paymentMethod is nil";
    v15 = v18;
    goto LABEL_19;
  }
LABEL_21:
  if (objc_msgSend(WeakRetained[6], "suggestionType", v17) == 1
    || objc_msgSend(WeakRetained[6], "suggestionType") == 2)
  {
    objc_msgSend(WeakRetained[4], "handleManualTipDismissForMarket:tipType:sinkType:", WeakRetained[7], objc_msgSend(WeakRetained[6], "suggestionType"), 2);
    objc_msgSend(WeakRetained, "setShowFeature:", 0);
    objc_msgSend(WeakRetained, "_notifyObservers");
  }
LABEL_24:

}

void sub_1002E68B0(uint64_t a1)
{
  void *v2;
  id *WeakRetained;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  void *v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "analyticsValue"));
  +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 307, 8, v2);

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v4 = sub_10043253C();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[6], "title"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[6], "subtitle"));
      v8 = 138412546;
      v9 = v6;
      v10 = 2112;
      v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "TipKit displayed in Maps Home with\nTitle: %@\nSubtitle: %@\n", (uint8_t *)&v8, 0x16u);

    }
    objc_msgSend(WeakRetained[4], "handleTipDisplayForMarket:tipType:sinkType:", WeakRetained[7], objc_msgSend(WeakRetained[6], "suggestionType"), 2);
  }

}

void sub_1002E69F4(uint64_t a1)
{
  void *v2;
  id *WeakRetained;
  id v4;
  NSObject *v5;
  uint8_t v6[16];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "analyticsValue"));
  +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 306, 8, v2);

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v4 = sub_10043253C();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "TipKit dismissed in Maps Home", v6, 2u);
    }

    objc_msgSend(WeakRetained[4], "handleManualTipDismissForMarket:tipType:sinkType:", WeakRetained[7], objc_msgSend(WeakRetained[6], "suggestionType"), 2);
    objc_msgSend(WeakRetained, "setShowFeature:", 0);
    objc_msgSend(WeakRetained, "_notifyObservers");
  }

}

void sub_1002E6B48(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1002E6BE8(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "updateFeatureEligibility");
    WeakRetained = v2;
  }

}

void sub_1002E6DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002E6E00(uint64_t a1, char a2, char a3)
{
  id *v5;
  NSObject **WeakRetained;
  NSObject **v7;
  NSObject *v8;
  _QWORD v9[4];
  id v10;
  char v11;
  char v12;

  v5 = (id *)(a1 + 32);
  WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 32));
  v7 = WeakRetained;
  if (WeakRetained)
  {
    v8 = WeakRetained[10];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1002E6EB0;
    v9[3] = &unk_1011B0A98;
    objc_copyWeak(&v10, v5);
    v11 = a2;
    v12 = a3;
    dispatch_async(v8, v9);
    objc_destroyWeak(&v10);
  }

}

void sub_1002E6EB0(uint64_t a1)
{
  id *v2;
  id *WeakRetained;
  id *v4;
  id v5;
  NSObject *v6;
  _QWORD v7[4];
  id v8;
  char v9;
  uint8_t buf[16];

  v2 = (id *)(a1 + 32);
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    if (*(_BYTE *)(a1 + 40))
    {
      if (objc_msgSend(WeakRetained[3], "startLocationUpdatesForDelegate:", WeakRetained))
      {
        v7[0] = _NSConcreteStackBlock;
        v7[1] = 3221225472;
        v7[2] = sub_1002E6FB4;
        v7[3] = &unk_1011AD388;
        objc_copyWeak(&v8, v2);
        v9 = *(_BYTE *)(a1 + 41);
        dispatch_async((dispatch_queue_t)&_dispatch_main_q, v7);
        objc_destroyWeak(&v8);
      }
    }
    else
    {
      v5 = sub_10043253C();
      v6 = objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Maps Home - User is not eligible for Transit + Pay with no payment card in Wallet", buf, 2u);
      }

    }
  }

}

void sub_1002E6FB4(uint64_t a1)
{
  TransitPayFeatureDiscoveryMetadataStore *v2;
  void *v3;
  _QWORD *WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = -[TransitPayFeatureDiscoveryMetadataStore initWithTouristStatus:]([TransitPayFeatureDiscoveryMetadataStore alloc], "initWithTouristStatus:", *(unsigned __int8 *)(a1 + 40));
    v3 = (void *)WeakRetained[4];
    WeakRetained[4] = v2;

  }
}

void sub_1002E7140(uint64_t a1)
{
  id *v2;
  id *WeakRetained;
  id *v4;
  id v5;
  double v6;
  id v7;
  NSObject *v8;
  const __CFString *v9;
  TransitPassManager *v10;
  id v11;
  id v12;
  NSObject *v13;
  NSObject *v14;
  _QWORD v15[4];
  id v16;
  int8x16_t v17;
  _QWORD v18[4];
  id v19;
  uint64_t v20;
  id v21;
  uint8_t buf[4];
  const __CFString *v23;

  v2 = (id *)(a1 + 72);
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 72));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = objc_msgSend(WeakRetained[1], "isTouristHere");
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = v6 > MapsSuggestionsConfidenceDontKnow(v5);
    v7 = sub_10043253C();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
        v9 = CFSTR("Yes");
      else
        v9 = CFSTR("No");
      *(_DWORD *)buf = 138412290;
      v23 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Maps Home: isTourist: %@", buf, 0xCu);
    }

    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
    dispatch_group_wait(*(dispatch_group_t *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL);
    v10 = -[TransitPassManager initWithIsTourist:]([TransitPassManager alloc], "initWithIsTourist:", *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24));
    v11 = v4[5];
    v4[5] = v10;

    objc_msgSend(v4[5], "setDelegate:", v4);
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
    v12 = v4[5];
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_1002E739C;
    v18[3] = &unk_1011B0B10;
    objc_copyWeak(&v21, v2);
    v20 = *(_QWORD *)(a1 + 64);
    v19 = *(id *)(a1 + 32);
    objc_msgSend(v12, "userHasPaymentCardWithHandler:", v18);
    v13 = *(NSObject **)(a1 + 32);
    v14 = *(NSObject **)(*(_QWORD *)(a1 + 40) + 80);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_1002E751C;
    v15[3] = &unk_1011B0B38;
    v16 = *(id *)(a1 + 48);
    v17 = vextq_s8(*(int8x16_t *)(a1 + 56), *(int8x16_t *)(a1 + 56), 8uLL);
    dispatch_group_notify(v13, v14, v15);

    objc_destroyWeak(&v21);
  }

}

void sub_1002E7380(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1002E739C(uint64_t a1, char a2)
{
  NSObject **WeakRetained;
  NSObject **v5;
  NSObject *v6;
  id v7;
  __int128 v8;
  _QWORD block[4];
  __int128 v10;
  char v11;

  WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 48));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    v6 = WeakRetained[10];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002E7440;
    block[3] = &unk_1011B0AE8;
    v11 = a2;
    v8 = *(_OWORD *)(a1 + 32);
    v7 = (id)v8;
    v10 = v8;
    dispatch_async(v6, block);

  }
}

void sub_1002E7440(uint64_t a1)
{
  id v2;
  NSObject *v3;
  const __CFString *v4;
  int v5;
  const __CFString *v6;

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *(_BYTE *)(a1 + 48);
  v2 = sub_10043253C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
      v4 = CFSTR("Yes");
    else
      v4 = CFSTR("No");
    v5 = 138412290;
    v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Maps Home: userHasPaymentCard: %@", (uint8_t *)&v5, 0xCu);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_1002E751C(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[4] + 16))(a1[4], *(unsigned __int8 *)(*(_QWORD *)(a1[5] + 8) + 24), *(unsigned __int8 *)(*(_QWORD *)(a1[6] + 8) + 24));
}

void sub_1002E78B4(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  _QWORD *v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  double Double;
  dispatch_time_t v10;
  id v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  const char *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint32_t v20;
  id v21;
  NSObject *v22;
  uint64_t Log;
  _QWORD v24[4];
  id v25;
  NSObject *v26;
  uint64_t *v27;
  uint64_t *v28;
  id v29;
  _QWORD v30[5];
  NSObject *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t);
  void (*v47)(uint64_t);
  id v48;
  uint8_t buf[4];
  const char *v50;
  __int16 v51;
  int v52;
  __int16 v53;
  const char *v54;
  __int16 v55;
  const char *v56;

  v2 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(*((id *)WeakRetained + 3), "stopLocationUpdates");
    v43 = 0;
    v44 = &v43;
    v45 = 0x3032000000;
    v46 = sub_1002E7D4C;
    v47 = sub_1002E7D5C;
    v48 = 0;
    v39 = 0;
    v40 = &v39;
    v41 = 0x2020000000;
    v42 = 0;
    v35 = 0;
    v36 = &v35;
    v37 = 0x2020000000;
    v38 = 0;
    v5 = dispatch_group_create();
    dispatch_group_enter(v5);
    v6 = (void *)v4[8];
    v7 = *(_QWORD *)(a1 + 32);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_1002E7D64;
    v30[3] = &unk_1011B0B88;
    v33 = &v39;
    v34 = &v35;
    v32 = &v43;
    v30[4] = v4;
    v8 = v5;
    v31 = v8;
    objc_msgSend(v6, "cachedPolygonForLocation:withCompletion:", v7, v30);
    Double = GEOConfigGetDouble(MapsConfig_TransitPayNumberOfSecondsToWaitToUncachePolygons, off_1014B4398);
    v10 = dispatch_time(0, (uint64_t)(Double * 1000000000.0));
    dispatch_group_wait(v8, v10);
    if (!*((_BYTE *)v40 + 24))
    {
      dispatch_group_enter(v8);
      v11 = sub_10043253C();
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Found no payment polygon mapItem in the cache. Calling the service.", buf, 2u);
      }

      v13 = (void *)v4[2];
      v14 = *(_QWORD *)(a1 + 32);
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      v24[2] = sub_1002E7E54;
      v24[3] = &unk_1011B0BB0;
      objc_copyWeak(&v29, v2);
      v27 = &v43;
      v25 = *(id *)(a1 + 32);
      v28 = &v35;
      v26 = v8;
      objc_msgSend(v13, "paymentPolygonsAtLocation:completion:", v14, v24);

      objc_destroyWeak(&v29);
    }
    dispatch_group_wait(v8, v10);
    if (v44[5])
    {
      if (!*((_BYTE *)v36 + 24))
      {
LABEL_18:

        _Block_object_dispose(&v35, 8);
        _Block_object_dispose(&v39, 8);
        _Block_object_dispose(&v43, 8);

        goto LABEL_19;
      }
      if (v4[5])
      {
        objc_msgSend(v4, "fetchTransitMessageFromPassManagerUsingPolygon:");
        goto LABEL_18;
      }
      v21 = sub_10043253C();
      v22 = objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136446978;
        v50 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Shared/Feature Discovery/Sources/TransitPayFeatureDiscoverySource.m";
        v51 = 1024;
        v52 = 357;
        v53 = 2082;
        v54 = "-[TransitPayFeatureDiscoverySource didUpdateLocation:]_block_invoke_2";
        v55 = 2082;
        v56 = "strongSelf->_passManager == nil";
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "At %{public}s:%d, %{public}s forbids: %{public}s. passManager is nil. Something has gone very wrong.", buf, 0x26u);
      }

      Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "TransitPay");
      v16 = objc_claimAutoreleasedReturnValue(Log);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136446978;
        v50 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Shared/Feature Discovery/Sources/TransitPayFeatureDiscoverySource.m";
        v51 = 1024;
        v52 = 357;
        v53 = 2082;
        v54 = "-[TransitPayFeatureDiscoverySource didUpdateLocation:]_block_invoke";
        v55 = 2082;
        v56 = "strongSelf->_passManager == nil";
        v17 = "At %{public}s:%d, %{public}s forbids: %{public}s. passManager is nil. Something has gone very wrong.";
        v18 = v16;
        v19 = OS_LOG_TYPE_FAULT;
        v20 = 38;
        goto LABEL_16;
      }
    }
    else
    {
      v15 = sub_10043253C();
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        v17 = "Could not fetch a payment polygon mapItem from either the cache or the service";
        v18 = v16;
        v19 = OS_LOG_TYPE_ERROR;
        v20 = 2;
LABEL_16:
        _os_log_impl((void *)&_mh_execute_header, v18, v19, v17, buf, v20);
      }
    }

    goto LABEL_18;
  }
LABEL_19:

}

void sub_1002E7CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002E7D4C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1002E7D5C(uint64_t a1)
{

}

void sub_1002E7D64(uint64_t a1, void *a2)
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v4 = a2;
  v5 = v4;
  if (v4 && objc_msgSend(v4, "conformsToProtocol:", &OBJC_PROTOCOL___GEOMapItem))
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a2);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
    v6 = *(void **)(a1 + 32);
    v8 = v5;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v8, 1));
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = objc_msgSend(v6, "_hasPaymentAndSuggestionsData:error:", v7, 0);

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void sub_1002E7E54(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id *WeakRetained;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;

  v10 = a2;
  v5 = a3;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "firstObject"));
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v9 = *(void **)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v7;

    objc_msgSend(WeakRetained[8], "cachePolygon:forLocation:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), *(_QWORD *)(a1 + 32));
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend(WeakRetained, "_hasPaymentAndSuggestionsData:error:", v10, v5);
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  }

}

void sub_1002E80B8(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "setShowFeature:", 0);
    objc_msgSend(v2, "_notifyObservers");
    WeakRetained = v2;
  }

}

void sub_1002E81D0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  _QWORD block[4];
  id v7;
  id v8;
  id location;

  v4 = a3;
  objc_initWeak(&location, *(id *)(a1 + 32));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002E8280;
  block[3] = &unk_1011AD1E8;
  objc_copyWeak(&v8, &location);
  v7 = v4;
  v5 = v4;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  objc_destroyWeak(&v8);
  objc_destroyWeak(&location);
}

void sub_1002E8280(uint64_t a1)
{
  id WeakRetained;
  _QWORD *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  void *v10;
  id v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  NSObject *v15;
  os_log_type_t v16;
  id v17;
  __int16 v18;
  __int16 v19;
  uint8_t buf[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v4 = *(void **)(a1 + 32);
    if (!v4)
    {
      v8 = sub_10043253C();
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Got callback into MapsHome from TransitPassManager and modelData is nil.", buf, 2u);
      }

      v10 = (void *)v3[6];
      v3[6] = 0;

      v6 = v3;
      v7 = 0;
      goto LABEL_9;
    }
    objc_storeStrong((id *)WeakRetained + 6, v4);
    v5 = (void *)v3[4];
    if (v5)
    {
      if ((objc_msgSend(v5, "shouldDisplayTipInMarket:tipType:sinkType:", v3[7], objc_msgSend(*(id *)(a1 + 32), "suggestionType"), 2) & 1) != 0)
      {
        v6 = v3;
        v7 = 1;
LABEL_9:
        objc_msgSend(v6, "setShowFeature:", v7);
        objc_msgSend(v3, "_notifyObservers");
        goto LABEL_16;
      }
      v17 = sub_10043253C();
      v12 = objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        v18 = 0;
        v13 = "User has either dismissed the tip recently or has seen the tip more than the set threshold in Maps home";
        v14 = (uint8_t *)&v18;
        v15 = v12;
        v16 = OS_LOG_TYPE_INFO;
        goto LABEL_14;
      }
    }
    else
    {
      v11 = sub_10043253C();
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        v19 = 0;
        v13 = "dataStore is nil. Something has gone very wrong.";
        v14 = (uint8_t *)&v19;
        v15 = v12;
        v16 = OS_LOG_TYPE_ERROR;
LABEL_14:
        _os_log_impl((void *)&_mh_execute_header, v15, v16, v13, v14, 2u);
      }
    }

  }
LABEL_16:

}

void sub_1002E8538(uint64_t a1)
{
  id *WeakRetained;
  id *v2;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained[4], "handleManualTipDismissForMarket:tipType:sinkType:", WeakRetained[7], 3, 2);
    objc_msgSend(v2, "setShowFeature:", 0);
    objc_msgSend(v2, "_notifyObservers");
    WeakRetained = v2;
  }

}

id sub_1002E8B8C(uint64_t a1)
{
  double v2;
  double v3;

  v2 = floor(*(double *)(a1 + 48));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "frame");
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setScrollEnabled:", v2 > ceil(v3));
}

id sub_1002E9420(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;

  v3 = a2;
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "directionsAction"));

  if (v4 == v3)
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "addStopAction"));
  else
    v5 = v3;
  v6 = v5;

  return v6;
}

void sub_1002E97FC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

id sub_1002E9820(uint64_t a1)
{
  id WeakRetained;
  void *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "previewViewController"));

  return v2;
}

id sub_1002E9858(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  void *v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    *((_BYTE *)WeakRetained + 248) = 1;
    if (*((_QWORD *)WeakRetained + 30))
      v3 = (void *)*((_QWORD *)WeakRetained + 30);
    else
      v3 = &__NSArray0__struct;
  }
  else
  {
    v3 = &__NSArray0__struct;
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIMenu menuWithTitle:children:](UIMenu, "menuWithTitle:children:", &stru_1011EB268, v3));

  return v4;
}

void sub_1002E9AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002E9B04(uint64_t a1)
{
  _QWORD *WeakRetained;
  _QWORD *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "performAction:", WeakRetained[16]);
    WeakRetained = v2;
  }

}

void sub_1002E9C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002E9CB4(uint64_t a1)
{
  _QWORD *WeakRetained;
  _QWORD *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "performAction:", WeakRetained[17]);
    WeakRetained = v2;
  }

}

void sub_1002E9E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002E9E7C(uint64_t a1)
{
  _QWORD *WeakRetained;
  _QWORD *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "performAction:", WeakRetained[18]);
    WeakRetained = v2;
  }

}

void sub_1002EA01C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002EA044(uint64_t a1)
{
  _QWORD *WeakRetained;
  _QWORD *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "performAction:", WeakRetained[19]);
    WeakRetained = v2;
  }

}

void sub_1002EA1F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002EA214(uint64_t a1)
{
  _QWORD *WeakRetained;
  _QWORD *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "performAction:", WeakRetained[21]);
    WeakRetained = v2;
  }

}

void sub_1002EA3AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002EA3D0(uint64_t a1)
{
  _QWORD *WeakRetained;
  _QWORD *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "performAction:", WeakRetained[20]);
    WeakRetained = v2;
  }

}

void sub_1002EA5A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002EA5C4(uint64_t a1)
{
  _QWORD *WeakRetained;
  _QWORD *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "performAction:", WeakRetained[22]);
    WeakRetained = v2;
  }

}

void sub_1002EA794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002EA7B8(uint64_t a1)
{
  _QWORD *WeakRetained;
  _QWORD *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "performAction:", WeakRetained[23]);
    WeakRetained = v2;
  }

}

void sub_1002EA958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002EA980(uint64_t a1)
{
  _QWORD *WeakRetained;
  _QWORD *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "performAction:", WeakRetained[25]);
    WeakRetained = v2;
  }

}

void sub_1002EAB0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002EAB30(uint64_t a1)
{
  id *v1;
  id v2;
  _QWORD *WeakRetained;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = objc_loadWeakRetained(v1);
    objc_msgSend(v2, "performAction:", WeakRetained[24]);

  }
}

void sub_1002EB10C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id location)
{
  id *v30;
  id *v31;

  objc_destroyWeak(v31);
  objc_destroyWeak(v30);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1002EB150(uint64_t a1, void *a2)
{
  id v3;
  id *WeakRetained;
  uint64_t v5;
  char isKindOfClass;
  id v7;
  id v8;
  void *v9;
  unsigned int v10;
  id v11;
  void *v12;
  unsigned int v13;
  id v14;
  void *v15;
  unsigned int v16;
  id v17;
  void *v18;
  unsigned int v19;
  id v20;
  void *v21;
  unsigned int v22;
  id v23;

  v3 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v5 = objc_opt_class(UIAction);
    isKindOfClass = objc_opt_isKindOfClass(v3, v5);
    v7 = v3;
    v8 = v7;
    if ((isKindOfClass & 1) != 0)
    {
      if (*(_BYTE *)(a1 + 40))
      {
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "identifier"));
        v10 = objc_msgSend(v9, "isEqualToString:", CFSTR("_callAction"));

        if (v10)
        {
          v11 = objc_msgSend(v8, "copy");

          objc_msgSend(v11, "setAttributes:", 0);
          objc_storeStrong(WeakRetained + 18, v11);
          v8 = v11;
        }
      }
      if (*(_BYTE *)(a1 + 41))
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
        v13 = objc_msgSend(v12, "isEqualToString:", CFSTR("_webAction"));

        if (v13)
        {
          v14 = objc_msgSend(v8, "copy");

          objc_msgSend(v14, "setAttributes:", 0);
          objc_storeStrong(WeakRetained + 19, v14);
          v8 = v14;
        }
      }
      if (*(_BYTE *)(a1 + 42))
      {
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
        v16 = objc_msgSend(v15, "isEqualToString:", CFSTR("_transitLineDirectionsAction"));

        if (v16)
        {
          v17 = objc_msgSend(v8, "copy");

          objc_msgSend(v17, "setAttributes:", 0);
          objc_storeStrong(WeakRetained + 25, v17);
          v8 = v17;
        }
      }
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
      v19 = objc_msgSend(v18, "isEqualToString:", CFSTR("_directionsAction"));

      if (v19)
      {
        v20 = objc_msgSend(v8, "copy");

        objc_msgSend(v20, "setAttributes:", *(_BYTE *)(a1 + 43) == 0);
        objc_storeStrong(WeakRetained + 16, v20);
        v8 = v20;
      }
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
      v22 = objc_msgSend(v21, "isEqualToString:", CFSTR("_addStopAction"));

      if (v22)
      {
        v23 = objc_msgSend(v8, "copy");

        objc_msgSend(v23, "setAttributes:", *(_BYTE *)(a1 + 43) == 0);
        objc_storeStrong(WeakRetained + 17, v23);
        v8 = v23;
      }
    }
  }
  else
  {
    v8 = v3;
  }

  return v8;
}

id sub_1002EB3A0(uint64_t a1)
{
  _QWORD *WeakRetained;
  void *v2;
  void *v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = &__NSArray0__struct;
  if (WeakRetained && WeakRetained[30])
    v2 = (void *)WeakRetained[30];
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIMenu menuWithTitle:children:](UIMenu, "menuWithTitle:children:", &stru_1011EB268, v2));

  return v3;
}

uint64_t sub_1002EB488(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "isEqual:", *(_QWORD *)(a1 + 32)) ^ 1;
}

void sub_1002EB57C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id WeakRetained;
  uint64_t v5;
  id v6;
  char v7;
  uint64_t v8;
  id v9;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v2 + 24) || *(_QWORD *)(v2 + 264))
  {
    v3 = *(_QWORD *)(a1 + 40);
    if (v3 == *(_QWORD *)(v2 + 144))
    {
      WeakRetained = objc_loadWeakRetained((id *)(v2 + 256));
      objc_msgSend(WeakRetained, "quickActionMenuPresenter:selectedCall:", *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 264));
      v9 = 0;
      v5 = 17073;
    }
    else if (v3 == *(_QWORD *)(v2 + 152))
    {
      WeakRetained = objc_loadWeakRetained((id *)(v2 + 256));
      objc_msgSend(WeakRetained, "quickActionMenuPresenter:selectedViewWebsiteFor:", *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 264));
      v9 = 0;
      v5 = 17079;
    }
    else if (v3 == *(_QWORD *)(v2 + 176) || v3 == *(_QWORD *)(v2 + 184))
    {
      WeakRetained = objc_loadWeakRetained((id *)(v2 + 256));
      objc_msgSend(WeakRetained, "quickActionMenuPresenter:selectedShareLocationOf:", *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 264));
      v9 = 0;
      v5 = 17076;
    }
    else if (v3 == *(_QWORD *)(v2 + 128))
    {
      WeakRetained = objc_loadWeakRetained((id *)(v2 + 256));
      objc_msgSend(WeakRetained, "quickActionMenuPresenter:selectedDirectionsTo:", *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 264));
      v9 = 0;
      v5 = 17074;
    }
    else if (v3 == *(_QWORD *)(v2 + 136))
    {
      WeakRetained = objc_loadWeakRetained((id *)(v2 + 256));
      objc_msgSend(WeakRetained, "quickActionMenuPresenter:selectedDirectionsTo:", *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 264));
      v9 = 0;
      v5 = 291;
    }
    else if (v3 == *(_QWORD *)(v2 + 168))
    {
      v6 = objc_loadWeakRetained((id *)(v2 + 256));
      v7 = objc_opt_respondsToSelector(v6, "quickActionMenuPresenter:selectedDropPinAt:");

      v8 = *(_QWORD *)(a1 + 32);
      if ((v7 & 1) == 0)
      {
        v9 = 0;
        +[GEOAPPortal captureUserAction:target:value:placeActionDetails:](GEOAPPortal, "captureUserAction:target:value:placeActionDetails:", 17050, *(unsigned int *)(v8 + 252), 0, *(_QWORD *)(v8 + 112));
        goto LABEL_18;
      }
      WeakRetained = objc_loadWeakRetained((id *)(v8 + 256));
      objc_msgSend(WeakRetained, "quickActionMenuPresenter:selectedDropPinAt:", *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
      v9 = 0;
      v5 = 17050;
    }
    else if (v3 == *(_QWORD *)(v2 + 160))
    {
      WeakRetained = objc_loadWeakRetained((id *)(v2 + 256));
      objc_msgSend(WeakRetained, "quickActionMenuPresenter:selectedRemoveDroppedPinOf:", *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 264));
      v9 = 0;
      v5 = 17053;
    }
    else if (v3 == *(_QWORD *)(v2 + 192))
    {
      v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 8), "_maps_analyticsEventValue"));
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "set_maps_lineShouldZoomMapRegionOnSelection:", 1);
      WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 256));
      objc_msgSend(WeakRetained, "quickActionMenuPresenter:selectedViewTransitLinesOnMap:", *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
      v5 = 17078;
    }
    else
    {
      if (v3 != *(_QWORD *)(v2 + 200))
      {
        v9 = 0;
        +[GEOAPPortal captureUserAction:target:value:placeActionDetails:](GEOAPPortal, "captureUserAction:target:value:placeActionDetails:", 17075, *(unsigned int *)(v2 + 252), 0, *(_QWORD *)(v2 + 112));
LABEL_18:

        return;
      }
      WeakRetained = objc_loadWeakRetained((id *)(v2 + 256));
      objc_msgSend(WeakRetained, "quickActionMenuPresenter:selectedDirectionsTo:", *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 264));
      v9 = 0;
      v5 = 17075;
    }

    +[GEOAPPortal captureUserAction:target:value:placeActionDetails:](GEOAPPortal, "captureUserAction:target:value:placeActionDetails:", v5, *(unsigned int *)(*(_QWORD *)(a1 + 32) + 252), v9, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 112));
    goto LABEL_18;
  }
}

_QWORD *sub_1002EB8A4(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  id WeakRetained;

  v1 = result;
  v2 = result[4];
  if (*(_QWORD *)(v2 + 24) || *(_QWORD *)(v2 + 264))
  {
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 256));
    objc_msgSend(WeakRetained, "quickActionMenuPresenter:selectedShowPlaceCard:", v1[4], *(_QWORD *)(v1[4] + 264));

    +[GEOAPPortal captureUserAction:target:value:placeActionDetails:](GEOAPPortal, "captureUserAction:target:value:placeActionDetails:", 17077, *(unsigned int *)(v1[4] + 252), 0, *(_QWORD *)(v1[4] + 112));
    *(_BYTE *)(v1[4] + 224) = 0;
    return objc_msgSend((id)v1[4], "reset");
  }
  return result;
}

void sub_1002EC15C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

uint64_t sub_1002EC1D4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1002EC1E4(uint64_t a1)
{

}

void sub_1002EC1EC(uint64_t a1)
{
  uint64_t v1;
  id *v3;
  id WeakRetained;
  void *v5;
  id v6;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  if (v1)
  {
    v3 = (id *)(a1 + 40);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(WeakRetained, "setSearchResult:", v1);

    v6 = objc_loadWeakRetained(v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "mapItem"));
    objc_msgSend(v6, "setResolvedMapItem:", v5);

  }
}

void sub_1002EC290(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;

  v9 = a2;
  v7 = a3;
  v8 = a4;
  if (!v8)
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a3);
  if (!*(_BYTE *)(a1 + 56))
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_1002EC31C(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  id WeakRetained;
  id v6;

  v3 = (id *)(a1 + 40);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  objc_msgSend(WeakRetained, "_updateSearchResultWithMapItemIfNeeded:", v4);

  v6 = objc_loadWeakRetained(v3);
  objc_msgSend(v6, "setResolvedMapItem:", v4);

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1002EC384(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  id v8;
  void *v9;
  id v10;

  v10 = a2;
  v5 = objc_msgSend(v10, "count");
  if (!a3 && v5)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "firstObject"));
    objc_msgSend(WeakRetained, "_updateSearchResultWithMapItemIfNeeded:", v7);

    v8 = objc_loadWeakRetained((id *)(a1 + 40));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "firstObject"));
    objc_msgSend(v8, "setResolvedMapItem:", v9);

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_1002EC438(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  id v15;

  v15 = a2;
  v5 = objc_msgSend(v15, "count");
  if (a3 || !v5)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapItem"));
    v12 = WeakRetained;
    v14 = v13;
  }
  else
  {
    WeakRetained = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "firstObject"));
    v7 = MKLocalizedStringForCurrentLocation();
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    objc_msgSend(WeakRetained, "setName:", v8);

    v9 = objc_loadWeakRetained((id *)(a1 + 48));
    objc_msgSend(v9, "_updateSearchResultWithMapItemIfNeeded:", WeakRetained);

    v10 = objc_loadWeakRetained((id *)(a1 + 48));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "searchResult"));
    objc_msgSend(v11, "setType:", 4);

    v12 = objc_loadWeakRetained((id *)(a1 + 48));
    v13 = v12;
    v14 = WeakRetained;
  }
  objc_msgSend(v12, "setResolvedMapItem:", v14);

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1002EC998(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1002EC9B4(uint64_t a1)
{
  id v2;

  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 16), *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
  if (*(_QWORD *)(a1 + 40) == *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8))
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "mapItem"));
    objc_msgSend(*(id *)(a1 + 32), "setResolvedMapItem:", v2);

  }
}

void sub_1002ECA38(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;

  v5 = a3;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a3);
  if (!*(_BYTE *)(a1 + 56))
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_1002ECC64(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  id v6;

  v6 = a2;
  if (!a3 && objc_msgSend(v6, "count"))
  {
    objc_msgSend(*(id *)(a1 + 32), "setSearchResult:", 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "firstObject"));
    objc_msgSend(*(id *)(a1 + 32), "setResolvedMapItem:", v5);

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void sub_1002ECF58(_QWORD *a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  unsigned int v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[6];

  v5 = a2;
  if (!a3 && a1[6] == *(_QWORD *)(a1[4] + 48))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[MKLocationManager sharedLocationManager](MKLocationManager, "sharedLocationManager"));
    v7 = objc_msgSend(v6, "isAuthorizedForPreciseLocation");

    if (v7)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
      v9 = a1[5];
      objc_msgSend(v5, "coordinate");
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "ticketForNearestTransitStation:coordinate:traits:", v9, 0));

      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_1002ED058;
      v12[3] = &unk_1011B0D90;
      v11 = a1[6];
      v12[4] = a1[4];
      v12[5] = v11;
      objc_msgSend(v10, "submitWithHandler:networkActivity:", v12, 0);

    }
  }

}

void sub_1002ED058(uint64_t a1, void *a2, void *a3)
{
  id v5;
  SearchResult *v6;
  void *v7;
  SearchResult *v8;
  id v9;

  v9 = a2;
  v5 = a3;
  if (!v5 && *(_QWORD *)(a1 + 40) == *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48) && objc_msgSend(v9, "count"))
  {
    v6 = [SearchResult alloc];
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "firstObject"));
    v8 = -[SearchResult initWithMapItem:](v6, "initWithMapItem:", v7);
    objc_msgSend(*(id *)(a1 + 32), "setSearchResult:", v8);

    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 208) = 1;
    objc_msgSend(*(id *)(a1 + 32), "updateActionEnableStates");
  }

}

BOOL sub_1002EE93C(id a1, id a2)
{
  id v2;
  uint64_t v3;
  BOOL v4;

  v2 = a2;
  v3 = objc_opt_class(MKLocalSearchCompletion);
  v4 = (objc_opt_isKindOfClass(v2, v3) & 1) == 0 || objc_msgSend(v2, "_type") != (id)2;

  return v4;
}

uint64_t sub_1002EEA38(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  void *v6;
  unsigned int v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v3 = a2;
  v4 = objc_opt_class(MKLocalSearchCompletion);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    v5 = v3;
    if (objc_msgSend(v5, "_type") == (id)1
      && (v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "mapItem")),
          v7 = objc_msgSend(v6, "_hasMUID"),
          v6,
          v7))
    {
      v8 = *(void **)(a1 + 32);
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "mapItem"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v9, "_muid")));
      v11 = (uint64_t)objc_msgSend(v8, "containsObject:", v10);

    }
    else
    {
      v11 = 1;
    }

  }
  else
  {
    v11 = 1;
  }

  return v11;
}

void sub_1002EEB70(id a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = objc_alloc_init((Class)NSMeasurementFormatter);
  v2 = (void *)qword_1014D2088;
  qword_1014D2088 = (uint64_t)v1;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1014D2088, "numberFormatter"));
  objc_msgSend(v3, "setMaximumFractionDigits:", 0);

  objc_msgSend((id)qword_1014D2088, "setUnitStyle:", 2);
  objc_msgSend((id)qword_1014D2088, "setUnitOptions:", 1);
}

id sub_1002F001C(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "identifierCache"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifierForObject:", v3));

  return v5;
}

TwoLinesCollectionOutlineCellModel *sub_1002F0074(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  SidebarOutlineCellBackgroundModel *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  SidebarOutlineCellBackgroundModel *v13;
  uint64_t v14;
  TwoLineOutlineCellButtonAccessoryModel *v15;
  TwoLinesSharedTripSummaryOutlineCellModel *v16;
  TwoLineOutlineCellButtonAccessoryModel *v17;
  TwoLinesMapsSuggestionsEntryOutlineCellModel *v18;
  uint64_t v19;
  TwoLinesOutlineCellUGCRatingRequestAccessoryModel *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  void *i;
  void *v29;
  void *v30;
  id v31;
  id v32;
  void *v33;
  uint64_t v34;
  char isKindOfClass;
  void *v36;
  void *v37;
  void *v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  void *j;
  void *v44;
  id v45;
  uint64_t v46;
  void *v47;
  unsigned __int8 v48;
  uint64_t v49;
  void *v50;
  void *v51;
  unsigned int v52;
  void *v53;
  _BOOL4 v54;
  uint64_t v55;
  void *v56;
  id v57;
  void *v58;
  id v59;
  void *v60;
  SidebarOutlineCellBackgroundModel *v61;
  TwoLinesCollectionOutlineCellModel *v62;
  unsigned int v64;
  void *v65;
  void *v66;
  void *v67;
  TwoLinesOutlineCellActionModel *v68;
  void *v69;
  void *v70;
  TwoLinesOutlineCellActionModel *v71;
  TwoLinesCollectionOutlineCellModel *v72;
  void *v73;
  id v74;
  void *v75;
  unsigned int v76;
  uint64_t v77;
  SidebarOutlineCellBackgroundModel *v78;
  uint64_t v79;
  void *v80;
  void *v81;
  id v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  SidebarOutlineCellBackgroundModel *v93;
  void *v94;
  SidebarOutlineCellBackgroundModel *v95;
  TwoLineOutlineCellButtonAccessoryModel *v96;
  TwoLineOutlineCellButtonAccessoryModel *v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  _BYTE v106[128];
  TwoLineOutlineCellButtonAccessoryModel *v107;
  _BYTE v108[128];
  TwoLinesOutlineCellUGCRatingRequestAccessoryModel *v109;
  TwoLineOutlineCellButtonAccessoryModel *v110;

  v5 = a2;
  v6 = a3;
  v7 = [SidebarOutlineCellBackgroundModel alloc];
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v9 = objc_msgSend(v8, "isCollectionViewFocusedWithSectionController:", *(_QWORD *)(a1 + 32));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v11 = objc_msgSend(v10, "isCollectionViewProxyFocusedWithSectionController:", *(_QWORD *)(a1 + 32));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v13 = -[SidebarOutlineCellBackgroundModel initWithStyle:dropStyle:grouping:collectionViewFocused:collectionViewProxyFocused:collectionViewHasDropSession:](v7, "initWithStyle:dropStyle:grouping:collectionViewFocused:collectionViewProxyFocused:collectionViewHasDropSession:", 0, 0, 1, v9, v11, objc_msgSend(v12, "hasCollectionViewDropSessionWithSectionController:", *(_QWORD *)(a1 + 32)));

  v14 = objc_opt_class(SharedTripSummary);
  if ((objc_opt_isKindOfClass(v5, v14) & 1) != 0)
  {
    v15 = -[TwoLineOutlineCellButtonAccessoryModel initWithAccessoryType:visibility:delegate:]([TwoLineOutlineCellButtonAccessoryModel alloc], "initWithAccessoryType:visibility:delegate:", 1, 0, *(_QWORD *)(a1 + 32));
    v16 = [TwoLinesSharedTripSummaryOutlineCellModel alloc];
    v110 = v15;
    v17 = (TwoLineOutlineCellButtonAccessoryModel *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v110, 1));
    v18 = -[TwoLinesSharedTripSummaryOutlineCellModel initWithSharedTripSummary:accessoryModels:backgroundModel:](v16, "initWithSharedTripSummary:accessoryModels:backgroundModel:", v5, v17, v13);
  }
  else
  {
    v19 = objc_opt_class(MapsSuggestionsEntry);
    if ((objc_opt_isKindOfClass(v5, v19) & 1) != 0)
    {
      v17 = (TwoLineOutlineCellButtonAccessoryModel *)v5;
      if (-[TwoLineOutlineCellButtonAccessoryModel type](v17, "type") == (id)21
        || GEOConfigGetBOOL(MapsConfig_ARPForceAllMapsHomeSuggestionsAsRatingSuggestions, off_1014B3A78))
      {
        v20 = -[TwoLinesOutlineCellUGCRatingRequestAccessoryModel initWithDelegate:]([TwoLinesOutlineCellUGCRatingRequestAccessoryModel alloc], "initWithDelegate:", *(_QWORD *)(a1 + 32));
        v109 = v20;
        v15 = (TwoLineOutlineCellButtonAccessoryModel *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v109, 1));

      }
      else
      {
        v15 = 0;
      }
      v18 = -[TwoLinesMapsSuggestionsEntryOutlineCellModel initWithMapsSuggestionsEntry:accessoryModels:backgroundModel:]([TwoLinesMapsSuggestionsEntryOutlineCellModel alloc], "initWithMapsSuggestionsEntry:accessoryModels:backgroundModel:", v17, v15, v13);
    }
    else
    {
      v95 = v13;
      v21 = objc_opt_class(CollectionHandler);
      if ((objc_opt_isKindOfClass(v5, v21) & 1) != 0)
      {
        v96 = (TwoLineOutlineCellButtonAccessoryModel *)v5;
        v22 = *(void **)(a1 + 40);
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "topIdentifierPath"));
        v91 = objc_msgSend(v22, "containsObject:", v23);

        v104 = 0u;
        v105 = 0u;
        v102 = 0u;
        v103 = 0u;
        v24 = *(id *)(a1 + 40);
        v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v102, v108, 16);
        if (v25)
        {
          v26 = v25;
          v27 = *(_QWORD *)v103;
          do
          {
            for (i = 0; i != v26; i = (char *)i + 1)
            {
              if (*(_QWORD *)v103 != v27)
                objc_enumerationMutation(v24);
              v29 = *(void **)(*((_QWORD *)&v102 + 1) + 8 * (_QWORD)i);
              v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "topIdentifierPath"));
              if (objc_msgSend(v29, "hasPrefix:", v30))
              {
                v31 = objc_msgSend(v29, "length");
                v32 = objc_msgSend(v6, "depth");

                if (v31 > v32)
                {

                  v49 = 1;
                  goto LABEL_37;
                }
              }
              else
              {

              }
            }
            v26 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v102, v108, 16);
          }
          while (v26);
        }

        if (v91)
        {
          v49 = 0;
LABEL_37:
          v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "expandedIdentifierPaths"));
          v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "topIdentifierPath"));
          v52 = objc_msgSend(v50, "containsObject:", v51);

          v53 = (void *)objc_claimAutoreleasedReturnValue(-[TwoLineOutlineCellButtonAccessoryModel content](v96, "content"));
          v54 = objc_msgSend(v53, "count") != 0;

          v93 = [SidebarOutlineCellBackgroundModel alloc];
          if ((v52 & v54) != 0)
            v55 = 2;
          else
            v55 = 0;
          v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
          v57 = objc_msgSend(v56, "isCollectionViewFocusedWithSectionController:", *(_QWORD *)(a1 + 32));
          v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
          v59 = objc_msgSend(v58, "isCollectionViewProxyFocusedWithSectionController:", *(_QWORD *)(a1 + 32));
          v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
          v61 = -[SidebarOutlineCellBackgroundModel initWithStyle:dropStyle:grouping:collectionViewFocused:collectionViewProxyFocused:collectionViewHasDropSession:](v93, "initWithStyle:dropStyle:grouping:collectionViewFocused:collectionViewProxyFocused:collectionViewHasDropSession:", v49, 0, v55, v57, v59, objc_msgSend(v60, "hasCollectionViewDropSessionWithSectionController:", *(_QWORD *)(a1 + 32)));

        }
        else
        {
          v61 = v95;
        }
        v17 = -[TwoLineOutlineCellButtonAccessoryModel initWithAccessoryType:visibility:delegate:]([TwoLineOutlineCellButtonAccessoryModel alloc], "initWithAccessoryType:visibility:delegate:", 2, 1, *(_QWORD *)(a1 + 32));
        v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
        v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v66, "localizedStringForKey:value:table:", CFSTR("[Proactive Tray] Add Shared Guide"), CFSTR("localized string not found"), 0));

        v68 = [TwoLinesOutlineCellActionModel alloc];
        v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
        v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v69, "localizedStringForKey:value:table:", CFSTR("[Proactive Tray] Discard"), CFSTR("localized string not found"), 0));
        v71 = -[TwoLinesOutlineCellActionModel initWithButtonTitle1:buttonTitle2:delegate:](v68, "initWithButtonTitle1:buttonTitle2:delegate:", v67, v70, *(_QWORD *)(a1 + 32));

        v72 = [TwoLinesCollectionOutlineCellModel alloc];
        v107 = v17;
        v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v107, 1));
        v15 = v96;
        v62 = -[TwoLinesCollectionOutlineCellModel initWithCollection:accessoryModels:backgroundModel:actionModel:](v72, "initWithCollection:accessoryModels:backgroundModel:actionModel:", v96, v73, v61, v71);

        v13 = v61;
        goto LABEL_44;
      }
      v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "parentItem"));
      v34 = objc_opt_class(CollectionHandler);
      isKindOfClass = objc_opt_isKindOfClass(v33, v34);

      if ((isKindOfClass & 1) == 0)
      {
        v62 = 0;
        goto LABEL_45;
      }
      v97 = (TwoLineOutlineCellButtonAccessoryModel *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "parentItem"));
      v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "topIdentifierPath"));
      v17 = (TwoLineOutlineCellButtonAccessoryModel *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "identifierPathByRemovingLastIdentifier"));

      v37 = *(void **)(a1 + 40);
      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "topIdentifierPath"));
      v92 = objc_msgSend(v37, "containsObject:", v38);

      v89 = objc_msgSend(*(id *)(a1 + 40), "containsObject:", v17);
      v98 = 0u;
      v99 = 0u;
      v100 = 0u;
      v101 = 0u;
      v39 = *(id *)(a1 + 40);
      v40 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v98, v106, 16);
      if (v40)
      {
        v41 = v40;
        v42 = *(_QWORD *)v99;
        do
        {
          for (j = 0; j != v41; j = (char *)j + 1)
          {
            if (*(_QWORD *)v99 != v42)
              objc_enumerationMutation(v39);
            v44 = *(void **)(*((_QWORD *)&v98 + 1) + 8 * (_QWORD)j);
            if (objc_msgSend(v44, "hasPrefix:", v17))
            {
              v45 = objc_msgSend(v44, "length");
              if (v45 >= objc_msgSend(v6, "depth"))
              {
                v46 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "topIdentifierPath"));
                if (v44 == (void *)v46)
                {

                }
                else
                {
                  v47 = (void *)v46;
                  v48 = objc_msgSend(v44, "isEqual:", v46);

                  if ((v48 & 1) == 0)
                  {

                    v64 = v92;
                    goto LABEL_47;
                  }
                }
              }
            }
          }
          v41 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v98, v106, 16);
        }
        while (v41);
      }

      v64 = v92;
      if ((v92 | v89) == 1)
      {
LABEL_47:
        if (v97)
          v65 = (void *)objc_claimAutoreleasedReturnValue(-[TwoLineOutlineCellButtonAccessoryModel content](v97, "content"));
        else
          v65 = &__NSArray0__struct;
        v74 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v65, "lastObject"));
        v75 = v74;
        v94 = v65;
        if (v74 == v5)
        {
          v77 = 4;
        }
        else
        {
          v76 = objc_msgSend(v74, "isEqual:", v5);
          v77 = 3;
          if (v76)
            v77 = 4;
        }
        v86 = v77;

        v78 = [SidebarOutlineCellBackgroundModel alloc];
        v79 = 2;
        if (v64)
          v79 = 0;
        v90 = v79;
        v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate", v86));
        v88 = objc_msgSend(v80, "isCollectionViewFocusedWithSectionController:", *(_QWORD *)(a1 + 32));
        v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
        v82 = objc_msgSend(v81, "isCollectionViewProxyFocusedWithSectionController:", *(_QWORD *)(a1 + 32));
        v83 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
        v13 = -[SidebarOutlineCellBackgroundModel initWithStyle:dropStyle:grouping:collectionViewFocused:collectionViewProxyFocused:collectionViewHasDropSession:](v78, "initWithStyle:dropStyle:grouping:collectionViewFocused:collectionViewProxyFocused:collectionViewHasDropSession:", v90, 0, v87, v88, v82, objc_msgSend(v83, "hasCollectionViewDropSessionWithSectionController:", *(_QWORD *)(a1 + 32)));

      }
      else
      {
        v13 = v95;
      }
      v84 = objc_opt_class(MKMapItem);
      v15 = v97;
      if ((objc_opt_isKindOfClass(v5, v84) & 1) != 0)
      {
        v18 = -[TwoLinesCollectionMapItemOutlineCellModel initWithMapItem:currentLocation:distanceUnit:backgroundModel:]([TwoLinesCollectionMapItemOutlineCellModel alloc], "initWithMapItem:currentLocation:distanceUnit:backgroundModel:", v5, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v13);
      }
      else
      {
        v85 = objc_opt_class(HomeCollectionSortItem);
        if ((objc_opt_isKindOfClass(v5, v85) & 1) == 0)
        {
          v62 = 0;
          goto LABEL_44;
        }
        v18 = (TwoLinesMapsSuggestionsEntryOutlineCellModel *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "cellModelWithBackgroundModel:", v13));
      }
    }
  }
  v62 = (TwoLinesCollectionOutlineCellModel *)v18;
LABEL_44:

LABEL_45:
  return v62;
}

id sub_1002F0964(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;

  v3 = a2;
  v4 = objc_opt_class(CollectionHandler);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_childItemsInCollection:", v3));
  else
    v5 = &__NSArray0__struct;

  return v5;
}

id sub_1002F09CC(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;

  v3 = *(void **)(a1 + 32);
  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "expandedIdentifierPaths"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "topIdentifierPath"));

  v7 = objc_msgSend(v5, "containsObject:", v6);
  return v7;
}

void sub_1002F0C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002F0C44(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_deleteSnapshot:", *(_QWORD *)(a1 + 32));

}

void sub_1002F14C0(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1002F14EC(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  uint64_t v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v4, 1));
    objc_msgSend(WeakRetained, "beginDeletions:", v3);

  }
}

void sub_1002F1584(uint64_t a1, char a2)
{
  id WeakRetained;
  void *v5;
  uint64_t v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained && (a2 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 32);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v6, 1));
    objc_msgSend(WeakRetained, "endFailedDeletions:error:", v5, 0);

  }
}

void sub_1002F17AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002F17D0(uint64_t a1, int a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  uint64_t v6;

  if (a2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    if (WeakRetained)
    {
      v6 = *(_QWORD *)(a1 + 32);
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v6, 1));
      objc_msgSend(WeakRetained, "beginDeletions:", v4);

      v5 = (void *)objc_claimAutoreleasedReturnValue(+[MSPSharedTripService sharedInstance](MSPSharedTripService, "sharedInstance"));
      objc_msgSend(v5, "blockSharedTripWithIdentifier:", *(_QWORD *)(a1 + 40));

    }
  }
}

void sub_1002F1BB8(id a1, NSError *a2)
{
  NSError *v2;
  id v3;
  NSObject *v4;
  int v5;
  NSError *v6;

  v2 = a2;
  if (v2)
  {
    v3 = sub_100432EDC();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Error saving shared collection: %@", (uint8_t *)&v5, 0xCu);
    }

  }
}

void sub_1002F2F0C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a2;
  v5 = objc_msgSend(v10, "stationIdentifier");
  v6 = *(_QWORD *)(a1 + 32);
  if (v5 == *(id *)(v6 + 48))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "departure"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "scheduledDepartureDate"));

    if (!v8 || (v9 = *(void **)(a1 + 40)) == 0 || objc_msgSend(v9, "isEqualToDate:", v8))
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) = a3;

  }
  else if (*(_BYTE *)(v6 + 8) && (v5 == *(id *)(v6 + 24) || v5 == *(id *)(v6 + 32) || v5 == *(id *)(v6 + 40)))
  {
    *(_QWORD *)(v6 + 56) = a3;
  }
  if (objc_msgSend(v10, "isHidden"))
    objc_msgSend(*(id *)(a1 + 48), "addIndex:", a3);

}

void sub_1002F2FEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v4;

  v3 = *(void **)(a1 + 32);
  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSValue valueWithRange:](NSValue, "valueWithRange:", a2, a3));
  objc_msgSend(v3, "addObject:", v4);

}

void sub_1002F303C(uint64_t a1, void *a2, uint64_t a3)
{
  void *v4;
  id v5;
  TransitTripStopItem *v6;

  v4 = *(void **)(a1 + 32);
  v5 = a2;
  v6 = -[TransitTripStopItem initWithTransitTripStop:stopIndex:]([TransitTripStopItem alloc], "initWithTransitTripStop:stopIndex:", v5, a3);

  objc_msgSend(v4, "addObject:", v6);
}

void sub_1002F3698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 128), 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002F36D4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1002F36E4(uint64_t a1)
{

}

void sub_1002F36EC(_QWORD *a1, void *a2, uint64_t a3, _BYTE *a4)
{
  unsigned __int8 v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  double v24;
  double v25;
  void *v26;
  void *v27;
  void *v28;
  double v29;
  double v30;
  id v31;

  v31 = a2;
  v8 = objc_msgSend(v31, "isPlaceholder");
  v9 = v31;
  if ((v8 & 1) == 0)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "transitTripStop"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "departure"));

    v12 = *(_QWORD *)(a1[5] + 8);
    if (*(_BYTE *)(v12 + 24))
    {
      *(_BYTE *)(v12 + 24) = 1;
    }
    else
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "liveDepartureDate"));
      *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = v13 != 0;

    }
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "departureDate"));

    if (v14)
    {
      v15 = (void *)a1[4];
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "transitTripStop"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "departure"));
      LOBYTE(v15) = objc_msgSend(v15, "_isPastDeparture:", v17);

      if ((v15 & 1) == 0)
      {
LABEL_7:
        if (!a3
          && *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24)
          && (v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "departureDate")), v22,
                                                                                                   v22))
        {
          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "departureDate"));
          objc_msgSend(v23, "timeIntervalSinceDate:", *(_QWORD *)(a1[4] + 16));
          v25 = v24;

          if (GEOTransitDepartureIsImminentDepartureTimeInterval(v25))
          {
            *(_QWORD *)(*(_QWORD *)(a1[8] + 8) + 24) = 0;
LABEL_19:
            *a4 = 1;
          }
        }
        else
        {
          objc_storeStrong((id *)(*(_QWORD *)(a1[6] + 8) + 40), a2);
        }

        v9 = v31;
        goto LABEL_21;
      }
    }
    else
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[6] + 8) + 40), "transitTripStop"));
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "departure"));
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "departureDate"));

      if (!v20)
        goto LABEL_7;
    }
    *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24) = a3;
    v21 = *(void **)(*(_QWORD *)(a1[6] + 8) + 40);
    if (v21 && *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24))
    {
      if (objc_msgSend(v21, "isPlaceholder"))
      {
        *(_QWORD *)(*(_QWORD *)(a1[8] + 8) + 24) = a3;
      }
      else
      {
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[6] + 8) + 40), "transitTripStop"));
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "departure"));

        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "departureDate"));
        objc_msgSend(v28, "timeIntervalSinceDate:", *(_QWORD *)(a1[4] + 16));
        v30 = v29;

        *(_QWORD *)(*(_QWORD *)(a1[8] + 8) + 24) = a3
                                                     + GEOTransitDepartureIsImminentDepartureTimeInterval(v30);

      }
    }
    goto LABEL_19;
  }
LABEL_21:

}

void sub_1002F61DC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v7[4];
  id v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CarDisplayController sharedInstance](CarDisplayController, "sharedInstance"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "chromeViewController"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "currentTraits"));

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ticketForSearchFieldOfflinePlaceholderWithTraits:", v4));

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1002F62D8;
  v7[3] = &unk_1011B0F78;
  objc_copyWeak(&v8, (id *)(a1 + 32));
  objc_msgSend(v6, "submitWithHandler:networkActivity:", v7, 0);
  objc_destroyWeak(&v8);

}

void sub_1002F62C4(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1002F62D8(uint64_t a1, char a2, uint64_t a3)
{
  _BYTE *WeakRetained;
  void *v6;
  void *v7;
  id v8;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    WeakRetained[8] = (a3 == 0) & a2;
    v8 = WeakRetained;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "searchButton"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "_getSearchButtonTitle"));
    objc_msgSend(v6, "updateSearchButtonTitle:", v7);

    WeakRetained = v8;
  }

}

void sub_1002F6880(uint64_t a1, void *a2)
{
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "object"));
  objc_msgSend(*(id *)(a1 + 32), "setCurrentSearchSession:", v3);

}

id sub_1002F6A94()
{
  if (qword_1014D20A8 != -1)
    dispatch_once(&qword_1014D20A8, &stru_1011B10A8);
  return (id)qword_1014D20A0;
}

id sub_1002F6C68(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "searchSessionDidChangeSearchFieldItem:", *(_QWORD *)(a1 + 32));
}

id sub_1002F6E88(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setSearchFieldItem:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "_willProcessSearchFieldItem");
  objc_msgSend(*(id *)(a1 + 32), "didChangeSearchFieldItem");
  objc_msgSend(*(id *)(a1 + 32), "setSearchInfo:", *(_QWORD *)(a1 + 48));
  return objc_msgSend(*(id *)(a1 + 32), "didChangeSearchResults");
}

id sub_1002F6F40(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "searchSessionDidChangeSearchFieldItem:", *(_QWORD *)(a1 + 32));
}

id sub_1002F7008(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "searchSessionDidChangeSearchResults:", *(_QWORD *)(a1 + 32));
}

void sub_1002F7418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002F7454(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "_refreshEVChargers:", *(_QWORD *)(a1 + 32));
    WeakRetained = v3;
  }

}

void sub_1002F74C4(id a1, GCDTimer *a2, unint64_t a3, BOOL *a4)
{
  -[GCDTimer invalidate](a2, "invalidate", a3, a4);
}

void sub_1002F763C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002F7658(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_identifier"));

  if (v3)
  {
    v4 = *(void **)(a1 + 32);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_identifier"));
    objc_msgSend(v4, "addObject:", v5);

  }
}

void sub_1002F76C0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  id *WeakRetained;
  id *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  void **v21;
  uint64_t v22;
  void (*v23)(uint64_t, void *);
  void *v24;
  id v25;
  _QWORD v26[4];
  id v27;
  uint8_t buf[16];

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = sub_1002F6A94();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Error receieved while refreshing the ev chargers", buf, 2u);
    }

  }
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  v10 = WeakRetained;
  if (WeakRetained)
  {
    if (!objc_msgSend(WeakRetained[1], "count"))
    {
      v11 = sub_1002F6A94();
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "The timers are invalidated while updating the charger information", buf, 2u);
      }

    }
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "searchInfo"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "results"));
    v15 = objc_msgSend(v14, "mutableCopy");

    v16 = objc_alloc_init((Class)NSMutableDictionary);
    v17 = *(void **)(a1 + 32);
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    v26[2] = sub_1002F78C0;
    v26[3] = &unk_1011B1060;
    v18 = v16;
    v27 = v18;
    objc_msgSend(v17, "enumerateObjectsUsingBlock:", v26);
    v21 = _NSConcreteStackBlock;
    v22 = 3221225472;
    v23 = sub_1002F7910;
    v24 = &unk_1011ACD00;
    v25 = v18;
    v19 = v18;
    objc_msgSend(v15, "enumerateObjectsUsingBlock:", &v21);
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "searchInfo", v21, v22, v23, v24));
    objc_msgSend(v20, "updateSearchInfo:", v15);

    objc_msgSend(v10, "notifyToRefreshEVChargers:", v15);
  }

}

void sub_1002F78C0(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "_identifier"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v3, v4);

}

void sub_1002F7910(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v9 = v3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "mapItem"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "_identifier"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v6));

  if (v7)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "mapItem"));
    objc_msgSend(v8, "_updateRealTimeEVChargerAvailability:", v7);

  }
}

void sub_1002F7A1C(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "refreshedEVChargersReceieved:") & 1) != 0)
    objc_msgSend(v3, "refreshedEVChargersReceieved:", *(_QWORD *)(a1 + 32));

}

void sub_1002F7C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002F7C9C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1002F7CAC(uint64_t a1)
{

}

id sub_1002F7CB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observers"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  objc_msgSend(*(id *)(a1 + 32), "setObservers:", 0);
  return _objc_msgSend(*(id *)(a1 + 32), "setInvalidated:", 1);
}

id sub_1002F7D04(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "searchSessionDidInvalidate:reason:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_1002F81D8(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observers"));
  objc_msgSend(v2, "addObject:", *(_QWORD *)(a1 + 40));

}

void sub_1002F82B4(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observers"));
  objc_msgSend(v2, "removeObject:", *(_QWORD *)(a1 + 40));

}

void sub_1002F83E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1002F8400(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observers"));
  v2 = objc_msgSend(v5, "copy");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

id sub_1002F8AF4(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "searchSessionWillPerformSearch:", *(_QWORD *)(a1 + 32));
}

id sub_1002F8E50(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "searchSessionDidFail:", *(_QWORD *)(a1 + 32));
}

void sub_1002F8F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002F8F34(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 32) + 21);
  return result;
}

void sub_1002F91A4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "SearchSession");
  v2 = (void *)qword_1014D20A0;
  qword_1014D20A0 = (uint64_t)v1;

}

id sub_1002F9D5C(void *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "geoAddress"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "structuredAddress"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "locality"));

  return v3;
}

void sub_1002FA480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002FA498(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) |= GEOAllRequestCounterInterfaceTypes[a2];
  return result;
}

void sub_1002FFF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002FFF9C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1002FFFAC(uint64_t a1)
{

}

void sub_1002FFFB4(uint64_t a1, int a2, id obj)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a2;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), obj);
}

void sub_100300344(id a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  NSAttributedStringKey v8;
  void *v9;

  v1 = objc_alloc((Class)NSAttributedString);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("[Directions] road descriptions separator"), CFSTR("localized string not found"), 0));
  v8 = NSForegroundColorAttributeName;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor secondaryLabelColor](UIColor, "secondaryLabelColor"));
  v9 = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1));
  v6 = objc_msgSend(v1, "initWithString:attributes:", v3, v5);
  v7 = (void *)qword_1014D20B8;
  qword_1014D20B8 = (uint64_t)v6;

}

void sub_1003009CC(uint64_t a1, void *a2, uint64_t a3)
{
  void *v4;
  id v5;
  uint64_t v6;
  id v7;

  v4 = *(void **)(a1 + 32);
  v5 = a2;
  if (a3)
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "_minorLabelColor"));
  else
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "_majorLabelColor"));
  v7 = (id)v6;
  objc_msgSend(v5, "setTextColor:", v6);

}

void sub_100301C10(id a1)
{
  id v1;

  v1 = (id)_GEOConfigAddBlockListenerForKey(MapsConfig_MapsRefineYourLocation, off_1014B3678, &_dispatch_main_q, &stru_1011B11B0);
  byte_1014D20C0 = GEOConfigGetBOOL(MapsConfig_MapsRefineYourLocation, off_1014B3678);
}

void sub_100301C60(id a1, $464B15F94E0D705FD6D497CD7841E26A a2)
{
  byte_1014D20C0 = GEOConfigGetBOOL(MapsConfig_MapsRefineYourLocation, off_1014B3678);
}

id sub_1003022F8()
{
  if (qword_1014D20D8 != -1)
    dispatch_once(&qword_1014D20D8, &stru_1011B11F8);
  return (id)qword_1014D20D0;
}

void sub_100303878(uint64_t a1)
{
  uint64_t v2;
  id v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  id v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void **v19;
  uint64_t v20;
  void (*v21)(uint64_t);
  void *v22;
  id v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint8_t buf[4];
  uint64_t v32;

  v29 = *(_OWORD *)VKAnnotationTrackingBehaviorDefault;
  v2 = VKAnnotationTrackingBehaviorDefault[2];
  LOBYTE(v29) = 1;
  *((_QWORD *)&v29 + 1) = 0;
  v30 = v2;
  LOWORD(v30) = 256;
  v3 = sub_1003022F8();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = VKStringForAnnotationTrackingBehavior(&v29);
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    *(_DWORD *)buf = 138412290;
    v32 = (uint64_t)v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Set annotation tracking behavior: %@", buf, 0xCu);

  }
  v27 = v29;
  v28 = v30;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapView"));
  v25 = v27;
  v26 = v28;
  objc_msgSend(v7, "_setUserTrackingBehavior:", &v25);

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "originalUserState"));
  if (objc_msgSend(v8, "originalUserTrackingMode"))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "originalUserState"));
    v10 = (uint64_t)objc_msgSend(v9, "originalUserTrackingMode");

  }
  else
  {
    v10 = 1;
  }

  v11 = sub_1003022F8();
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    v32 = v10;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Setting tracking mode to %ld", buf, 0xCu);
  }

  v19 = _NSConcreteStackBlock;
  v20 = 3221225472;
  v21 = sub_100303B4C;
  v22 = &unk_1011AD518;
  v23 = *(id *)(a1 + 32);
  v24 = v10;
  +[UIView animateWithDuration:delay:options:animations:completion:](UIView, "animateWithDuration:delay:options:animations:completion:", 0x20000, &v19, 0, 0.5, 0.0);
  v13 = sub_1003022F8();
  v14 = objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Disabling map interaction", buf, 2u);
  }

  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapView", v19, v20, v21, v22));
  objc_msgSend(v15, "setScrollEnabled:", 0);

  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapView"));
  objc_msgSend(v16, "setRotateEnabled:", 0);

  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapView"));
  objc_msgSend(v17, "setZoomEnabled:", 0);

  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapView"));
  objc_msgSend(v18, "setPitchEnabled:", 0);

}

void sub_100303B4C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapView"));
  objc_msgSend(v2, "setUserTrackingMode:animated:", *(_QWORD *)(a1 + 40), 1);

}

void sub_100303EFC(uint64_t a1)
{
  id v2;
  NSObject *v3;
  __CFString *v4;
  __CFString *v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  __CFString *v10;
  __CFString *v11;
  id v12;
  void *v13;
  id v14;
  NSObject *v15;
  __CFString *v16;
  __CFString *v17;
  id v18;
  void *v19;
  id v20;
  NSObject *v21;
  __CFString *v22;
  __CFString *v23;
  id v24;
  void *v25;
  id v26;
  NSObject *v27;
  uint64_t v28;
  __CFString *v29;
  void *v30;
  id v31;
  NSObject *v32;
  __CFString *v33;
  id v34;
  uint64_t v35;
  void *v36;
  int v37;
  id v38;
  NSObject *v39;
  _BOOL4 v40;
  void *v41;
  __CFString *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint8_t buf[4];
  __CFString *v52;

  v2 = sub_1003022F8();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    if (objc_msgSend(*(id *)(a1 + 32), "scrollEnabled"))
      v4 = CFSTR("YES");
    else
      v4 = CFSTR("NO");
    v5 = v4;
    *(_DWORD *)buf = 138412290;
    v52 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Restoring scroll enabled: %@", buf, 0xCu);

  }
  v6 = objc_msgSend(*(id *)(a1 + 32), "scrollEnabled");
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "mapView"));
  objc_msgSend(v7, "setScrollEnabled:", v6);

  v8 = sub_1003022F8();
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    if (objc_msgSend(*(id *)(a1 + 32), "rotateEnabled"))
      v10 = CFSTR("YES");
    else
      v10 = CFSTR("NO");
    v11 = v10;
    *(_DWORD *)buf = 138412290;
    v52 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Restoring rotate enabled: %@", buf, 0xCu);

  }
  v12 = objc_msgSend(*(id *)(a1 + 32), "rotateEnabled");
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "mapView"));
  objc_msgSend(v13, "setRotateEnabled:", v12);

  v14 = sub_1003022F8();
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    if (objc_msgSend(*(id *)(a1 + 32), "zoomEnabled"))
      v16 = CFSTR("YES");
    else
      v16 = CFSTR("NO");
    v17 = v16;
    *(_DWORD *)buf = 138412290;
    v52 = v17;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Restoring zoom enabled: %@", buf, 0xCu);

  }
  v18 = objc_msgSend(*(id *)(a1 + 32), "zoomEnabled");
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "mapView"));
  objc_msgSend(v19, "setZoomEnabled:", v18);

  v20 = sub_1003022F8();
  v21 = objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
  {
    if (objc_msgSend(*(id *)(a1 + 32), "pitchEnabled"))
      v22 = CFSTR("YES");
    else
      v22 = CFSTR("NO");
    v23 = v22;
    *(_DWORD *)buf = 138412290;
    v52 = v23;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Restoring pitch enabled: %@", buf, 0xCu);

  }
  v24 = objc_msgSend(*(id *)(a1 + 32), "pitchEnabled");
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "mapView"));
  objc_msgSend(v25, "setPitchEnabled:", v24);

  v26 = sub_1003022F8();
  v27 = objc_claimAutoreleasedReturnValue(v26);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
  {
    v28 = VKStringForAnnotationTrackingBehavior(a1 + 56);
    v29 = (__CFString *)objc_claimAutoreleasedReturnValue(v28);
    *(_DWORD *)buf = 138412290;
    v52 = v29;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "Restoring user's original tracking behavior: %@", buf, 0xCu);

  }
  v49 = *(_OWORD *)(a1 + 56);
  v50 = *(_QWORD *)(a1 + 72);
  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "mapView"));
  v47 = v49;
  v48 = v50;
  objc_msgSend(v30, "_setUserTrackingBehavior:", &v47);

  if (objc_msgSend(*(id *)(a1 + 48), "originalUserTrackingMode"))
  {
    v31 = sub_1003022F8();
    v32 = objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
    {
      v33 = (__CFString *)objc_msgSend(*(id *)(a1 + 48), "originalUserTrackingMode");
      *(_DWORD *)buf = 134217984;
      v52 = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "Restoring user's original tracking mode: %ld", buf, 0xCu);
    }

    v34 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "mapView"));
    v35 = (uint64_t)objc_msgSend(*(id *)(a1 + 48), "originalUserTrackingMode");
    v36 = v34;
LABEL_31:
    objc_msgSend(v36, "setUserTrackingMode:animated:", v35, 1);
    goto LABEL_32;
  }
  v37 = *(unsigned __int8 *)(a1 + 80);
  v38 = sub_1003022F8();
  v39 = objc_claimAutoreleasedReturnValue(v38);
  v40 = os_log_type_enabled(v39, OS_LOG_TYPE_INFO);
  if (v37)
  {
    if (v40)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "Setting tracking mode to .Follow", buf, 2u);
    }

    v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "mapView"));
    v34 = v36;
    v35 = 1;
    goto LABEL_31;
  }
  if (v40)
  {
    objc_msgSend(*(id *)(a1 + 48), "originalCenterCoordinateDistance");
    *(_DWORD *)buf = 134217984;
    v52 = v42;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "Restoring user's zoom level to %f", buf, 0xCu);
  }

  v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "mapView"));
  v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "camera"));
  v34 = objc_msgSend(v44, "copy");

  objc_msgSend(*(id *)(a1 + 48), "originalCenterCoordinateDistance");
  objc_msgSend(v34, "setCenterCoordinateDistance:");
  v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "mapView"));
  objc_msgSend(v45, "setCamera:animated:", v34, 1);

  v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "mapView"));
  objc_msgSend(v46, "setUserTrackingMode:animated:", 0, 0);

LABEL_32:
  v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v41, "postNotificationName:object:", CFSTR("VLFSessionTaskDidHideVLFUINotification"), 0);

}

void sub_1003047B0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFSessionTask");
  v2 = (void *)qword_1014D20D0;
  qword_1014D20D0 = (uint64_t)v1;

}

void sub_100305EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id location)
{
  id *v28;

  objc_destroyWeak(v28);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100305EF0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  NSErrorUserInfoKey v10;
  id v11;

  v3 = a2;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    if (v3)
    {
      v10 = NSLocalizedDescriptionKey;
      v11 = v3;
      v3 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1));
      v6 = v3;
      v5 = *(_QWORD *)(a1 + 32);
    }
    else
    {
      v6 = 0;
    }
    v7 = GEOErrorDomain(v3);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v8, -8, v6));
    (*(void (**)(uint64_t, _QWORD, void *))(v5 + 16))(v5, 0, v9);

  }
}

void sub_100305FF4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *WeakRetained;
  void *v8;
  void *v9;
  unsigned int v10;
  int v11;
  RAPDisplayedDirectionsPlan *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  RAPDisplayedRouteState *v27;
  void *v28;
  void *v29;
  RAPDisplayedRouteState *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  _QWORD v36[4];
  id v37;
  id v38;
  id v39;
  int v40;
  uint8_t buf[4];
  id v42;
  __int16 v43;
  uint64_t v44;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));
  if (WeakRetained)
  {
    if (!v5 || v6)
    {
      v19 = sub_100431F8C();
      v20 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v42 = v6;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Tracker can't create RAP state because the recording failed with error: %@", buf, 0xCu);
      }

      v21 = *(_QWORD *)(a1 + 72);
      if (v21)
        (*(void (**)(uint64_t, _QWORD, id))(v21 + 16))(v21, 0, v6);
    }
    else
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "routes"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "lastObject"));
      v10 = objc_msgSend(v9, "identifier");
      v11 = *(_DWORD *)(a1 + 96);

      if (v10 == v11)
      {
        v12 = -[RAPDisplayedDirectionsPlan initWithRouteCollection:recording:]([RAPDisplayedDirectionsPlan alloc], "initWithRouteCollection:recording:", *(_QWORD *)(a1 + 32), v5);
        v13 = (void *)WeakRetained[6];
        WeakRetained[6] = v12;

        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "currentRouteCollection"));
        v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "currentRoute"));
        v16 = (void *)WeakRetained[4];
        WeakRetained[4] = v15;

        v17 = (char *)objc_msgSend(*(id *)(a1 + 40), "currentTransportType");
        if ((unint64_t)(v17 - 2) > 3)
          v18 = 0;
        else
          v18 = dword_100E35030[(_QWORD)(v17 - 2)];
        v27 = [RAPDisplayedRouteState alloc];
        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "originName"));
        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "destinationName"));
        v30 = -[RAPDisplayedRouteState initWithStartWaypointTitle:endWaypointTitle:transportType:composedRoute:](v27, "initWithStartWaypointTitle:endWaypointTitle:transportType:composedRoute:", v28, v29, v18, WeakRetained[4]);
        v31 = *(_QWORD *)(a1 + 48);
        v32 = *(void **)(v31 + 40);
        *(_QWORD *)(v31 + 40) = v30;

        v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "mapView"));
        v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "currentTraits"));
        v35 = (void *)objc_claimAutoreleasedReturnValue(+[SearchSession currentSearchSession](SearchSession, "currentSearchSession"));
        v36[0] = _NSConcreteStackBlock;
        v36[1] = 3221225472;
        v36[2] = sub_1003063C4;
        v36[3] = &unk_1011B1248;
        objc_copyWeak(&v39, (id *)(a1 + 88));
        v40 = *(_DWORD *)(a1 + 96);
        v37 = *(id *)(a1 + 80);
        v38 = *(id *)(a1 + 72);
        +[RAPAppStateFactory createAppStateWithMapView:traits:place:searchDataSource:directionsDataSource:completion:](RAPAppStateFactory, "createAppStateWithMapView:traits:place:searchDataSource:directionsDataSource:completion:", v33, v34, 0, v35, WeakRetained, v36);

        objc_destroyWeak(&v39);
      }
      else
      {
        v22 = sub_100431F8C();
        v23 = objc_claimAutoreleasedReturnValue(v22);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          v24 = (void *)*(unsigned int *)(a1 + 96);
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "routes"));
          v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "lastObject"));
          *(_DWORD *)buf = 134218240;
          v42 = v24;
          v43 = 2048;
          v44 = objc_msgSend(v26, "identifier");
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "Tracker can't create RAP state because currentRouteId: %lu doesn't match the recorded id: %lu", buf, 0x16u);

        }
        (*(void (**)(void))(*(_QWORD *)(a1 + 80) + 16))();
      }
    }
  }

}

void sub_1003063A8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1003063C4(uint64_t a1, void *a2)
{
  id v4;
  id *WeakRetained;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  int v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;

  v4 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "directionsHistory"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "firstObject"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "recording"));

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "routes"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "lastObject"));
    v11 = objc_msgSend(v10, "identifier");
    v12 = *(_DWORD *)(a1 + 56);

    if (v11 == v12)
    {
      objc_storeStrong(WeakRetained + 8, a2);
      v13 = *(_QWORD *)(a1 + 40);
      if (v13)
        (*(void (**)(uint64_t, id, _QWORD))(v13 + 16))(v13, v4, 0);
    }
    else
    {
      v14 = sub_100431F8C();
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        v16 = *(unsigned int *)(a1 + 56);
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "routes"));
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "lastObject"));
        v19 = 134218240;
        v20 = v16;
        v21 = 2048;
        v22 = objc_msgSend(v18, "identifier");
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Tracker can't create RAP state because currentRouteId: %lu doesn't match the recorded id: %lu", (uint8_t *)&v19, 0x16u);

      }
      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    }

  }
}

RAPPlaceCorrectableString *sub_1003085E0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  RAPPlaceCorrectableString *v6;

  v5 = a3;
  v6 = -[RAPPlaceCorrectableString initWithKind:originalValue:]([RAPPlaceCorrectableString alloc], "initWithKind:originalValue:", a2, v5);

  -[RAPPlaceCorrectableString addObserver:changeHandler:](v6, "addObserver:changeHandler:", *(_QWORD *)(a1 + 32), &stru_1011B12B0);
  return v6;
}

void sub_10030864C(id a1, RAPPlaceCorrectableItem *a2, RAPPlaceCorrectableAddress *a3)
{
  RAPPlaceCorrectableAddress *v4;

  v4 = a3;
  if (+[RAPPlaceCorrectableAddress _isStructuredAddressType:](RAPPlaceCorrectableAddress, "_isStructuredAddressType:", -[RAPPlaceCorrectableItem kind](a2, "kind")))
  {
    -[RAPPlaceCorrectableAddress _updateFreeformAddressWithStructuredChange](v4, "_updateFreeformAddressWithStructuredChange");
  }
  -[RAPPlaceCorrectableAddress _invokeChangeHandlers](v4, "_invokeChangeHandlers");

}

void sub_100308944(id a1, id a2, id a3)
{
  objc_msgSend(a3, "_invokeChangeHandlers");
}

void sub_1003092CC(id a1, id a2, id a3)
{
  objc_msgSend(a3, "_didChange");
}

void sub_100309340(id a1, id a2, id a3)
{
  objc_msgSend(a3, "_didChange");
}

void sub_10030E840(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x280], 8);
  _Unwind_Resume(a1);
}

PersonalizedMapItemKey *sub_10030E8B0(uint64_t a1, void *a2)
{
  id v3;
  NSNumber *v4;
  void *v5;
  PersonalizedMapItemKey *v6;

  v3 = a2;
  v4 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", GEOMapItemHashForPurpose(v3, 5));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = (PersonalizedMapItemKey *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v5));
  if (!v6)
  {
    v6 = -[PersonalizedMapItemKey initWithGeoMapItem:]([PersonalizedMapItemKey alloc], "initWithGeoMapItem:", v3);
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v6, v5);
  }

  return v6;
}

uint64_t sub_10030E94C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10030E95C(uint64_t a1)
{

}

HistoryEntryRecentsItem *sub_10030E964(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  HistoryEntryRecentsItem *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;

  v3 = a2;
  v4 = objc_opt_class(HistoryEntryRecentsItem);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    v5 = (HistoryEntryRecentsItem *)v3;
  }
  else
  {
    v6 = objc_opt_class(MSPHistoryEntryStorage);
    if ((objc_opt_isKindOfClass(v3, v6) & 1) != 0)
    {
      v7 = v3;
      v5 = (HistoryEntryRecentsItem *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "objectForKeyedSubscript:", v7));
      if (!v5)
      {
        v8 = MSPHistoryEntryMakeFromStorage(v7);
        v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
        v5 = -[HistoryEntryRecentsItem initWithHistoryEntry:]([HistoryEntryRecentsItem alloc], "initWithHistoryEntry:", v9);
        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setObject:forKeyedSubscript:", v5, v7);

      }
    }
    else
    {
      v5 = 0;
    }
  }

  return v5;
}

void sub_10030EA60(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "geoMapItem"));
  if (v3)
  {
    v4 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v5);
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 48), v5);

  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "supersededSearchStorageIdentifier"));

  if (v6)
  {
    v7 = *(void **)(a1 + 56);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "supersededSearchStorageIdentifier"));
    objc_msgSend(v7, "addObject:", v8);

  }
}

void sub_10030EB20(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v3 = *(void **)(a1 + 32);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "storageIdentifier"));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v3, "containsObject:", v4) ^ 1;

}

void sub_10030EB78(uint64_t a1, void *a2)
{
  void *v3;
  int v4;
  void *v5;
  void *v6;
  uint64_t v7;
  char isKindOfClass;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;

  v18 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "waypoints"));
  if ((unint64_t)objc_msgSend(v3, "count") < 3)
  {

  }
  else
  {
    v4 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 8);

    v5 = v18;
    if (v4 != 2)
      goto LABEL_15;
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "endWaypoint"));
  v7 = objc_opt_class(GEOComposedWaypointToRoute);
  isKindOfClass = objc_opt_isKindOfClass(v6, v7);

  v5 = v18;
  if ((isKindOfClass & 1) == 0)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "endWaypoint"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "mapItemStorage"));

    if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 8) == 2)
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 0;
    }
    else if (v10)
    {
      v11 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
      v12 = objc_claimAutoreleasedReturnValue(v11);
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
      v14 = *(void **)(v13 + 40);
      *(_QWORD *)(v13 + 40) = v12;

      if (objc_msgSend(*(id *)(a1 + 40), "containsObject:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40)))
      {
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 0;
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40)));
        v16 = v15;
        if (v15)
        {
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "linkedRecentRoute"));

          if (!v17)
            objc_msgSend(v16, "setLinkedRecentRoute:", *(_QWORD *)(a1 + 56));
        }

      }
    }

    v5 = v18;
  }
LABEL_15:

}

void sub_10030ECF8(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "geoMapItem"));
  if (v3)
  {
    v8 = v3;
    v4 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

    v3 = v8;
  }

}

void sub_10030F4CC(id a1, RAPPlaceCorrectableString *a2, RAPLookAroundQuestion *a3)
{
  -[RAPLookAroundQuestion _resolveCompleteness](a3, "_resolveCompleteness");
}

void sub_10030F4D4(id a1, id a2, RAPLookAroundQuestion *a3)
{
  -[RAPLookAroundQuestion _resolveCompleteness](a3, "_resolveCompleteness");
}

void sub_10030F4DC(id a1, RAPPlaceCorrectableAddress *a2, RAPLookAroundQuestion *a3)
{
  -[RAPLookAroundQuestion _resolveCompleteness](a3, "_resolveCompleteness");
}

BOOL sub_10030FEE8(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  _BOOL8 v4;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet whitespaceAndNewlineCharacterSet](NSCharacterSet, "whitespaceAndNewlineCharacterSet"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "stringByTrimmingCharactersInSet:", v2));

  v4 = objc_msgSend(v3, "length") != 0;
  return v4;
}

void sub_100311C58(uint64_t a1)
{
  void *v2;
  double v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  _QWORD block[5];
  id v10;
  uint64_t v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapItemIfLoaded"));
  v3 = *(double *)(a1 + 48);
  v4 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 40)), "iconSize");
  v5 = +[MKMapItem _maps_markerImageForMapItem:scale:size:useMarkerFallback:](MKMapItem, "_maps_markerImageForMapItem:scale:size:useMarkerFallback:", v2, v4, objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 40)), "useMarkerFallback"), v3);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100311D48;
  block[3] = &unk_1011B15B0;
  v7 = *(_QWORD *)(a1 + 56);
  v10 = v6;
  v11 = v7;
  block[4] = *(_QWORD *)(a1 + 40);
  v8 = v6;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

_QWORD *sub_100311D48(_QWORD *result)
{
  uint64_t v1;

  v1 = result[4];
  if (result[6] == *(_QWORD *)(v1 + 8))
    return objc_msgSend(*(id *)(v1 + 32), "setImage:", result[5]);
  return result;
}

void sub_100312890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1003128A8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1003128B8(uint64_t a1)
{

}

void sub_1003128C0(uint64_t a1, void *a2, _BYTE *a3)
{
  id v6;
  id v7;

  v6 = a2;
  if (v6)
  {
    v7 = v6;
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
    v6 = v7;
    *a3 = 1;
  }

}

void sub_100312DD8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 32);
  *(_QWORD *)(v2 + 32) = 0;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = 0;

}

void sub_100312EA4(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  id v9;

  v5 = *(void **)(*(_QWORD *)(a1 + 32) + 40);
  v9 = a2;
  v6 = objc_msgSend(v5, "count");
  v7 = (unint64_t)objc_msgSend(*(id *)(a1 + 32), "visibilityMask");
  v8 = 2;
  if (v6 == (id)(a3 + 1))
    v8 = 4;
  objc_msgSend(v9, "setShouldBeHiddenFromMap:", (v7 & v8) == 0);

}

RouteStartEndItem *__cdecl sub_1003131EC(id a1, SearchResult *a2, unint64_t a3)
{
  SearchResult *v3;
  RouteStartEndItem *v4;

  v3 = a2;
  v4 = -[RouteStartEndItem initWithSearchResult:routeFeatureType:]([RouteStartEndItem alloc], "initWithSearchResult:routeFeatureType:", v3, 2);

  return v4;
}

id sub_100313234(id *a1)
{
  objc_storeStrong((id *)a1[4] + 4, a1[5]);
  objc_storeStrong((id *)a1[4] + 5, a1[6]);
  return objc_msgSend(a1[4], "_updateItemVisibility");
}

void sub_100313350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100313368(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v2 + 32))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "addObject:");
    v2 = *(_QWORD *)(a1 + 32);
  }
  return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "addObjectsFromArray:", *(_QWORD *)(v2 + 40));
}

void sub_100313480(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "keys"));
  v2 = objc_msgSend(v5, "copy");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_100313578(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 40);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(a1 + 40);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)v6), "keys", (_QWORD)v10));
        v9 = objc_msgSend(v8, "copy");
        objc_msgSend(v7, "addObject:", v9);

        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v4);
  }

}

void sub_1003137CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003137E4(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;

  if (objc_msgSend(*(id *)(a1 + 32), "isEqualToSearchResult:forPurpose:", a2, 5))
  {
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 40), "objectAtIndexedSubscript:", a3));
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v9 = *(void **)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v7;

    *a4 = 1;
  }
}

void sub_100313AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_100313ACC(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  unsigned int v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  unsigned __int8 v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;

  v22 = a2;
  v6 = objc_msgSend(v22, "conformsToProtocol:", &OBJC_PROTOCOL___CustomPOIAnnotation);
  v7 = v22;
  if (v6)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "searchResult"));
    v9 = v8;
    v10 = *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    if (!v10)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "mapItem"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "_venueInfo"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "venueIdentifier"));
      v14 = objc_msgSend(v13, "_hasVenueID");

      if ((v14 & 1) != 0)
      {
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "mapItem"));
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "_venueInfo"));
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "venueIdentifier"));
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend(v17, "venueID");

LABEL_8:
        v7 = v22;
        goto LABEL_9;
      }
      v10 = *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    }
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "mapItem"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "_venueInfo"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "venueIdentifier"));
    v21 = objc_msgSend(v20, "venueID");

    if (v10 != v21)
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
      *a4 = 1;
    }
    goto LABEL_8;
  }
LABEL_9:

}

void sub_100314088(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_1014D20E0;
  qword_1014D20E0 = (uint64_t)v1;

}

id sub_100317D84(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "removeFromSuperview");
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;

  return _objc_msgSend(*(id *)(a1 + 32), "presentNewToastIfNecessary");
}

void sub_1003182FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100318324(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  NSObject **WeakRetained;
  NSObject **v9;
  NSObject *v10;
  _QWORD block[5];
  id v12;
  id v13;

  v6 = a2;
  v7 = a4;
  WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 32));
  v9 = WeakRetained;
  if (WeakRetained)
  {
    v10 = WeakRetained[5];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1003183E8;
    block[3] = &unk_1011AD238;
    block[4] = WeakRetained;
    v12 = v7;
    v13 = v6;
    dispatch_async(v10, block);

  }
}

id sub_1003183E8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 48), *(id *)(a1 + 40));
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 56), *(id *)(a1 + 48));
  v2 = *(_QWORD **)(a1 + 32);
  v3 = v2[3];
  if (v3)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v3 + 16))(v2[3], *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));
    v2 = *(_QWORD **)(a1 + 32);
  }
  return objc_msgSend(v2, "_completeOperation");
}

id sub_10031892C()
{
  if (qword_1014D20F8 != -1)
    dispatch_once(&qword_1014D20F8, &stru_1011B18B0);
  return (id)qword_1014D20F0;
}

void sub_100318AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  uint64_t v15;

  objc_destroyWeak(&location);
  os_activity_scope_leave((os_activity_scope_state_t)(v15 - 48));
  _Unwind_Resume(a1);
}

void sub_100318B04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id WeakRetained;
  id v4;
  os_activity_scope_state_s v5;

  v1 = a1;
  v5.opaque[0] = 0;
  v5.opaque[1] = 0;
  os_activity_scope_enter(*(os_activity_t *)(a1 + 32), &v5);
  v2 = *(_QWORD *)(v1 + 32);
  v1 += 40;
  WeakRetained = objc_loadWeakRetained((id *)v1);
  objc_msgSend(WeakRetained, "setActivity:", v2);

  v4 = objc_loadWeakRetained((id *)v1);
  objc_msgSend(v4, "_startOnIsolationQueue");

  os_activity_scope_leave(&v5);
}

void sub_100318B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_100318FD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_100318FEC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_stopOnIsolationQueue");

}

void sub_100319334(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_100319348(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id WeakRetained;
  void *v5;
  uint8_t v6[16];

  v2 = sub_10031892C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Refreshing waypoints", v6, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_stopOnIsolationQueue");
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "receivedResults"));
  objc_msgSend(v5, "removeAllObjects");

  objc_msgSend(WeakRetained, "_startOnIsolationQueue");
}

void sub_10031968C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1003196B4(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  NSObject *v5;
  _QWORD block[4];
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "isolationQueue"));
  if (v5)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100319788;
    block[3] = &unk_1011B1740;
    v11 = *(_QWORD *)(a1 + 56);
    v7 = *(id *)(a1 + 32);
    v8 = v3;
    v9 = *(id *)(a1 + 40);
    v10 = WeakRetained;
    dispatch_async(v5, block);

  }
}

id sub_100319788(uint64_t a1)
{
  id v2;
  NSObject *v3;
  NSObject *v4;
  os_signpost_id_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  int v17;
  void *v18;

  v2 = sub_10031892C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 64);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v3))
  {
    v6 = *(void **)(a1 + 32);
    v17 = 138543362;
    v18 = v6;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_INTERVAL_END, v5, "FetchGEOComposedWaypoint", "%{public}@", (uint8_t *)&v17, 0xCu);
  }

  v7 = *(_QWORD *)(a1 + 40);
  v8 = sub_10031892C();
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = v9;
  if (v7)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "identifier"));
      v17 = 138543362;
      v18 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Waypoint (%{public}@) resolving succeeded", (uint8_t *)&v17, 0xCu);

    }
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "receivedResults"));
    objc_msgSend(v12, "setObject:forKey:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  }
  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "identifier"));
      v17 = 138543362;
      v18 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Waypoint (%{public}@) resolving returned a nil result; defaulting to a generic error.",
        (uint8_t *)&v17,
        0xCu);

    }
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "receivedResults"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("WaypointRequestErrorDomain"), 0, 0));
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[Result resultWithError:](Result, "resultWithError:", v14));
    objc_msgSend(v12, "setObject:forKey:", v15, *(_QWORD *)(a1 + 48));

  }
  return objc_msgSend(*(id *)(a1 + 56), "_processTaskFinished:", *(_QWORD *)(a1 + 48));
}

void sub_10031A108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10031A128(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10031A138(uint64_t a1)
{

}

void sub_10031A144(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_10031A154(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "receivedResults"));
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKey:", v4));

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10031A254;
  v10[3] = &unk_1011B17F8;
  v11 = *(id *)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10031A260;
  v7[3] = &unk_1011B1820;
  v8 = *(id *)(a1 + 40);
  v9 = *(id *)(a1 + 48);
  objc_msgSend(v6, "withValue:orError:", v10, v7);

}

id sub_10031A254(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObject:", a2);
}

void sub_10031A260(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *(void **)(a1 + 32);
  v5 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  objc_msgSend(v3, "addObject:", v4);

  objc_msgSend(*(id *)(a1 + 40), "addObject:", v5);
}

void sub_10031A3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10031A3C0(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[6];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "receivedResults"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "keyEnumerator"));

  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v14 != v6)
          objc_enumerationMutation(v3);
        v8 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "receivedResults"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", v8));
        v12[0] = _NSConcreteStackBlock;
        v12[1] = 3221225472;
        v12[2] = sub_10031A550;
        v12[3] = &unk_1011B1870;
        v11 = *(_QWORD *)(a1 + 40);
        v12[4] = v8;
        v12[5] = v11;
        objc_msgSend(v10, "withValue:orError:", v12, &stru_1011B1890);

      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v5);
  }

}

void sub_10031A550(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  id v4;
  id v5;

  v2 = *(void **)(a1 + 32);
  v3 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  v4 = a2;
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "request"));
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v4, v5);

}

void sub_10031A658(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_10031A66C(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  id v7;
  void *v8;
  id v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (!WeakRetained)
  {
    v7 = sub_10031892C();
    v4 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v12 = 0;
      v5 = "WaypointController was deallocated before we could kick off dynamic origin refreshing; will not refresh dynamic origin";
      v6 = (uint8_t *)&v12;
      goto LABEL_11;
    }
LABEL_12:

    goto LABEL_13;
  }
  if (objc_msgSend(WeakRetained, "isRunning"))
  {
    v3 = sub_10031892C();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v11 = 0;
      v5 = "Waypoint resolution is currently already in flight; will not refresh dynamic origin";
      v6 = (uint8_t *)&v11;
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, v5, v6, 2u);
      goto LABEL_12;
    }
    goto LABEL_12;
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "resolvedWaypointSetResult"));

  if (!v8)
  {
    v9 = sub_10031892C();
    v4 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v10 = 0;
      v5 = "Waypoint resolution has not begun yet; will not refresh dynamic origin";
      v6 = (uint8_t *)&v10;
      goto LABEL_11;
    }
    goto LABEL_12;
  }
  objc_msgSend(v2, "_refreshDynamicOrigin");
LABEL_13:

}

void sub_10031A974(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_10031A988(uint64_t a1)
{
  id WeakRetained;
  id v2;
  NSObject *v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  uint8_t v9[16];
  uint8_t buf[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = sub_10031892C();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Rebroadcasting waypoint", buf, 2u);
    }

    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "resolvedWaypointSetResult"));
    if (!v4)
    {
      v5 = sub_10031892C();
      v6 = objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Tried to rebroadcast waypoints but we don't have any", v9, 2u);
      }

    }
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "resolvedWaypointSetResult"));
    objc_msgSend(v7, "waypointController:didResolveWaypointSet:", WeakRetained, v8);

  }
}

void sub_10031ABA4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "WaypointController");
  v2 = (void *)qword_1014D20F0;
  qword_1014D20F0 = (uint64_t)v1;

}

id sub_10031C450(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "configureForType:", 1);
}

id sub_10031C45C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "configureWithSuggestedApp:", *(_QWORD *)(a1 + 40));
}

void sub_10031C998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10031C9B0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10031C9C0(uint64_t a1)
{

}

void sub_10031C9C8(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v7;
  unsigned int v8;
  id v9;

  v9 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "iOSBundleIdentifier"));
  v8 = objc_msgSend(v7, "isEqualToString:", *(_QWORD *)(a1 + 32));

  if (v8)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
    *a4 = 1;
  }

}

BOOL sub_10031D188(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  _BOOL8 v5;
  id v6;
  NSObject *v7;
  id v8;
  void *v9;
  objc_class *v10;
  NSString *v11;
  void *v12;
  void *v13;
  void *v14;
  __CFString *v15;
  uint8_t buf[4];
  __CFString *v18;
  CGRect v19;

  v3 = a2;
  v4 = objc_opt_class(CarAlternateRouteFocusItem);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) == 0)
  {
    v6 = sub_10043364C();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
LABEL_13:

      v5 = 0;
      goto LABEL_14;
    }
    v8 = *(id *)(a1 + 32);
    v9 = v8;
    if (!v8)
    {
      v15 = CFSTR("<nil>");
      goto LABEL_12;
    }
    v10 = (objc_class *)objc_opt_class(v8);
    v11 = NSStringFromClass(v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    if ((objc_opt_respondsToSelector(v9, "accessibilityIdentifier") & 1) != 0)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "performSelector:", "accessibilityIdentifier"));
      v14 = v13;
      if (v13 && !objc_msgSend(v13, "isEqualToString:", v12))
      {
        v15 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v12, v9, v14));

        goto LABEL_10;
      }

    }
    v15 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v12, v9));
LABEL_10:

LABEL_12:
    *(_DWORD *)buf = 138543362;
    v18 = v15;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[%{public}@] CarAlternateRouteItemContainingView: focusItemsInRect got focusItem that is not CarAlternateRouteFocusItem.", buf, 0xCu);

    goto LABEL_13;
  }
  objc_msgSend(v3, "frame");
  v5 = CGRectIntersectsRect(v19, *(CGRect *)(a1 + 40));
LABEL_14:

  return v5;
}

id sub_10031DBA8(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "setFocusedRouteIndex:", *(_QWORD *)(a1 + 32));
}

void sub_10031DE24(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapView"));

  if (v2)
  {
    if (objc_msgSend(*(id *)(a1 + 32), "isActive"))
      _objc_msgSend(*(id *)(a1 + 32), "_rebuildAlternateRouteFocusItems");
  }
}

void sub_10031E3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

id sub_10031E414(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id result;

  result = objc_msgSend(a2, "isEqual:", *(_QWORD *)(a1 + 32));
  if ((_DWORD)result)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a3;
    *a4 = 1;
  }
  return result;
}

uint64_t sub_10031E9E4(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  unsigned int v5;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "currentRoute"));
  v5 = objc_msgSend(v3, "isEqual:", v4);

  return v5 ^ 1;
}

NSValue *sub_10031EA40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_msgSend(*(id *)(a1 + 32), "_frameForRoute:offset:", a2, a3);
  return +[NSValue valueWithCGRect:](NSValue, "valueWithCGRect:");
}

CarAlternateRouteFocusItem *sub_10031EA68(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  id v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  CarAlternateRouteFocusItem *v16;

  v5 = *(void **)(a1 + 32);
  v6 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectAtIndexedSubscript:", a3));
  objc_msgSend(v7, "CGRectValue");
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v15 = v14;

  v16 = -[CarAlternateRouteFocusItem initWithRoute:containingView:frame:delegate:]([CarAlternateRouteFocusItem alloc], "initWithRoute:containingView:frame:delegate:", v6, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24), v9, v11, v13, v15);
  return v16;
}

int64_t sub_10031EB10(id a1, CarAlternateRouteFocusItem *a2, CarAlternateRouteFocusItem *a3)
{
  CarAlternateRouteFocusItem *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  double v10;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[CarAlternateRouteFocusItem route](a2, "route"));
  objc_msgSend(v5, "_maps_boundingMapRect");
  v7 = v6;

  v8 = (void *)objc_claimAutoreleasedReturnValue(-[CarAlternateRouteFocusItem route](v4, "route"));
  objc_msgSend(v8, "_maps_boundingMapRect");
  v10 = v9;

  if (v7 < v10)
    return -1;
  else
    return v7 > v10;
}

void sub_10031EBF4(uint64_t a1, void *a2, uint64_t a3)
{
  void *v4;
  id v5;
  id v6;

  v4 = *(void **)(a1 + 32);
  v5 = a2;
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "route"));
  objc_msgSend(v4, "_frameForRoute:offset:", v6, a3);
  objc_msgSend(v5, "setFrame:");

}

id sub_10031F6A0(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "routeInfo"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "route"));
  v6 = objc_msgSend(v3, "isEqual:", v5);

  return v6;
}

void sub_1003201F4(uint64_t a1)
{
  void *v2;
  unsigned __int8 v3;
  id v4;
  void *v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[GEOPlatform sharedPlatform](GEOPlatform, "sharedPlatform"));
  v3 = objc_msgSend(v2, "supportsNavigation");

  if ((v3 & 1) != 0 || MGGetBoolAnswer(CFSTR("assistant")))
  {
    v4 = objc_alloc_init(*(Class *)(a1 + 32));
    v5 = (void *)qword_1014D2100;
    qword_1014D2100 = (uint64_t)v4;

  }
}

BOOL sub_100320798(id a1, UIScene *a2, unint64_t a3, BOOL *a4)
{
  UIScene *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  char isKindOfClass;

  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[UIScene session](v4, "session"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "role"));
  if (objc_msgSend(v6, "isEqualToString:", _UIWindowSceneSessionRoleCarPlay))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(-[UIScene delegate](v4, "delegate"));
    v8 = objc_opt_class(CarSceneDelegate);
    isKindOfClass = objc_opt_isKindOfClass(v7, v8);

  }
  else
  {
    isKindOfClass = 0;
  }

  return isKindOfClass & 1;
}

id sub_10032083C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "delegate"));
  if (objc_msgSend(v4, "sceneType") == (id)7)
    v5 = objc_msgSend(*(id *)(a1 + 32), "_isSceneForeground:", v3);
  else
    v5 = 0;

  return v5;
}

id sub_1003208A4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "delegate"));
  if (objc_msgSend(v4, "sceneType") == (id)7
    || +[UIApplication _maps_shouldIgnoreActivationStateForScene:](UIApplication, "_maps_shouldIgnoreActivationStateForScene:", v3)|| (objc_msgSend(*(id *)(a1 + 32), "_isSceneOccluded:", v3) & 1) != 0)
  {
    v5 = 0;
  }
  else
  {
    v5 = objc_msgSend(*(id *)(a1 + 32), "_isSceneForeground:", v3);
  }

  return v5;
}

void sub_100320D58(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100320D78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *WeakRetained;
  void *v10;
  uint64_t v11;
  _QWORD *v12;

  sub_100B0AAF0(OS_LOG_TYPE_INFO, CFSTR("MAPS IPC Siri plugin connection invalidated."), a3, a4, a5, a6, a7, a8, v11);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v10 = (void *)WeakRetained[11];
    WeakRetained[11] = 0;
    v12 = WeakRetained;

    WeakRetained = v12;
  }

}

void sub_100320DCC(id a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_100B0AAF0(OS_LOG_TYPE_INFO, CFSTR("MAPS IPC Siri plugin connection interrupted."), v1, v2, v3, v4, v5, v6, v7);
}

void sub_100320F94(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100320FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *WeakRetained;
  void *v10;
  uint64_t v11;
  _QWORD *v12;

  sub_100B0AAF0(OS_LOG_TYPE_INFO, CFSTR("MAPS IPC Companion daemon connection invalidated."), a3, a4, a5, a6, a7, a8, v11);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v10 = (void *)WeakRetained[12];
    WeakRetained[12] = 0;
    v12 = WeakRetained;

    WeakRetained = v12;
  }

}

void sub_100321008(id a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_100B0AAF0(OS_LOG_TYPE_INFO, CFSTR("MAPS IPC Companion daemon connection interrupted."), v1, v2, v3, v4, v5, v6, v7);
}

void sub_1003211D0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1003211F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *WeakRetained;
  void *v10;
  uint64_t v11;
  _QWORD *v12;

  sub_100B0AAF0(OS_LOG_TYPE_INFO, CFSTR("MAPS IPC Companion daemon connection invalidated."), a3, a4, a5, a6, a7, a8, v11);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v10 = (void *)WeakRetained[12];
    WeakRetained[12] = 0;
    v12 = WeakRetained;

    WeakRetained = v12;
  }

}

void sub_100321244(id a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_100B0AAF0(OS_LOG_TYPE_INFO, CFSTR("MAPS IPC Companion daemon connection interrupted."), v1, v2, v3, v4, v5, v6, v7);
}

void sub_10032131C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  IPCNavigationActionReply *v10;
  uint64_t v11;
  uint64_t v12;
  IPCNavigationActionReply *v13;
  IPCNavigationActionReply *v14;

  v14 = objc_alloc_init(IPCNavigationActionReply);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "externalGuidanceSource"));

  if (v2)
  {
    if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24))
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedMapsDelegate](UIApplication, "sharedMapsDelegate"));
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "appCoordinator"));
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "navModeController"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "navActionCoordinator"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "trafficIncidentAlertCoordinator"));

      objc_msgSend(v7, "dismissAlertViewForTrafficIncidentAlert:acceptedNewRoute:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), objc_msgSend(*(id *)(a1 + 40), "shouldReroute"));
      v8 = *(_QWORD *)(a1 + 32);
      v9 = *(void **)(v8 + 24);
      *(_QWORD *)(v8 + 24) = 0;

      -[IPCNavigationActionReply setSuccess:](v14, "setSuccess:", 1);
      goto LABEL_7;
    }
    -[IPCNavigationActionReply setSuccess:](v14, "setSuccess:", 0);
    v10 = v14;
    v11 = 3;
  }
  else
  {
    -[IPCNavigationActionReply setSuccess:](v14, "setSuccess:", 0);
    v10 = v14;
    v11 = 1;
  }
  -[IPCNavigationActionReply setNavigationActionError:](v10, "setNavigationActionError:", v11);
LABEL_7:
  v12 = *(_QWORD *)(a1 + 48);
  v13 = v14;
  if (v12)
  {
    (*(void (**)(uint64_t, IPCNavigationActionReply *))(v12 + 16))(v12, v14);
    v13 = v14;
  }

}

uint64_t sub_1003214FC(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t result;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedMapsDelegate](UIApplication, "sharedMapsDelegate"));
  v3 = objc_msgSend(v2, "dismissCurrentInterruptionOfKind:", 1);

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, id))(result + 16))(result, v3);
  return result;
}

void sub_100321600(uint64_t a1)
{
  IPCNavigationActionReply *v2;
  void *v3;
  id v4;
  uint64_t v5;
  char IsNavigating;
  void *v7;
  uint64_t v8;
  id v9;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 32) = 0;
  v9 = (id)objc_claimAutoreleasedReturnValue(+[UIApplication sharedMapsDelegate](UIApplication, "sharedMapsDelegate"));
  objc_msgSend(v9, "dismissCurrentInterruptionOfKind:", 7);
  v2 = objc_alloc_init(IPCNavigationActionReply);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MNNavigationService sharedService](MNNavigationService, "sharedService"));
  v4 = objc_msgSend(v3, "state");
  IsNavigating = MNNavigationServiceStateIsNavigating(v4, v5);

  if ((IsNavigating & 1) != 0)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "backgroundNavigationDelegate"));
    objc_msgSend(v7, "endBackgroundNavigation");

    -[IPCNavigationActionReply setSuccess:](v2, "setSuccess:", 1);
  }
  else
  {
    -[IPCNavigationActionReply setSuccess:](v2, "setSuccess:", 0);
    -[IPCNavigationActionReply setNavigationActionError:](v2, "setNavigationActionError:", 1);
  }
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
    (*(void (**)(uint64_t, IPCNavigationActionReply *))(v8 + 16))(v8, v2);

}

void sub_1003217A8(id *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void (**v17)(id, void *);
  _QWORD v18[4];
  id v19;
  id v20;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "_currentGuidanceStateMessageWithGuidanceCausedVibration:", 0));
  if (objc_msgSend(a1[5], "includeRoute"))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "externalGuidanceSource"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "routeRepresentator"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "legacyRouteRepresentation"));
    objc_msgSend(v2, "setLegacyRouteData:", v5);

    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "externalGuidanceSource"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "routeRepresentator"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "originalWaypointRouteRepresentation"));
    objc_msgSend(v2, "setOriginalWaypointRouteData:", v8);

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "externalGuidanceSource"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "etaFilterData"));
    objc_msgSend(v2, "setEtaFilterData:", v10);

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "externalGuidanceSource"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "incidentsOnRouteData"));
    objc_msgSend(v2, "setIncidentsOnRouteData:", v12);

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "externalGuidanceSource"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "incidentsOnRouteOffsets"));
    objc_msgSend(v2, "setIncidentsOnRouteOffsets:", v14);

  }
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "virtualGarageSource"));

  if (v15)
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "virtualGarageSource"));
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_1003219B0;
    v18[3] = &unk_1011B1B40;
    v19 = v2;
    v20 = a1[6];
    objc_msgSend(v16, "getEvChargingMetadata:", v18);

  }
  else
  {
    v17 = (void (**)(id, void *))a1[6];
    if (v17)
      v17[2](v17, v2);
  }

}

void sub_1003219B0(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;

  v3 = a2;
  v19 = v3;
  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "setEvChargingMetadata:", v3);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "debugDescription"));
    sub_100B0AAF0(OS_LOG_TYPE_INFO, CFSTR("MAPS IPC Attached EV info in the response: %@"), v11, v12, v13, v14, v15, v16, (uint64_t)v10);

  }
  else
  {
    sub_100B0AAF0(OS_LOG_TYPE_INFO, CFSTR("MAPS IPC No EV info could be found."), v4, v5, v6, v7, v8, v9, v18);
  }
  v17 = *(_QWORD *)(a1 + 40);
  if (v17)
    (*(void (**)(uint64_t, _QWORD))(v17 + 16))(v17, *(_QWORD *)(a1 + 32));

}

void sub_100321AF8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD block[5];
  id v7;
  id v8;

  v3 = a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100321B8C;
  block[3] = &unk_1011AECC0;
  v4 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v7 = v3;
  v8 = v4;
  v5 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

uint64_t sub_100321B8C(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 33) = 1;
  objc_msgSend(*(id *)(a1 + 32), "setNotificationSettings:", *(_QWORD *)(a1 + 40));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_100321C60(uint64_t a1)
{
  void *v2;
  void *v3;
  IPCNavigationActionReply *v4;
  _QWORD v5[4];
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "externalGuidanceSource"));

  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "externalGuidanceSource"));
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100321D34;
    v5[3] = &unk_1011B1B90;
    v6 = *(id *)(a1 + 40);
    objc_msgSend(v3, "repeatCurrentTrafficAlert:", v5);

  }
  else
  {
    v4 = objc_alloc_init(IPCNavigationActionReply);
    -[IPCNavigationActionReply setSuccess:](v4, "setSuccess:", 0);
    -[IPCNavigationActionReply setNavigationActionError:](v4, "setNavigationActionError:", 1);

  }
}

void sub_100321D34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  IPCNavigationActionReply *v5;
  IPCNavigationActionReply *v6;

  v6 = objc_alloc_init(IPCNavigationActionReply);
  -[IPCNavigationActionReply setSuccess:](v6, "setSuccess:", a2);
  if ((a2 & 1) == 0)
    -[IPCNavigationActionReply setNavigationActionError:](v6, "setNavigationActionError:", 2);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t, IPCNavigationActionReply *))(v4 + 16))(v4, v6);
    v5 = v6;
  }

}

void sub_100321E3C(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  IPCNavigationActionReply *v5;
  _QWORD v6[4];
  id v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "externalGuidanceSource"));

  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "externalGuidanceSource"));
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100321F24;
    v6[3] = &unk_1011B1B90;
    v7 = *(id *)(a1 + 40);
    objc_msgSend(v3, "repeatCurrentGuidance:", v6);

  }
  else
  {
    v5 = objc_alloc_init(IPCNavigationActionReply);
    -[IPCNavigationActionReply setSuccess:](v5, "setSuccess:", 0);
    -[IPCNavigationActionReply setNavigationActionError:](v5, "setNavigationActionError:", 1);
    v4 = *(_QWORD *)(a1 + 40);
    if (v4)
      (*(void (**)(uint64_t, IPCNavigationActionReply *))(v4 + 16))(v4, v5);

  }
}

void sub_100321F24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  IPCNavigationActionReply *v5;
  IPCNavigationActionReply *v6;

  v6 = objc_alloc_init(IPCNavigationActionReply);
  -[IPCNavigationActionReply setSuccess:](v6, "setSuccess:", a2);
  if ((a2 & 1) == 0)
    -[IPCNavigationActionReply setNavigationActionError:](v6, "setNavigationActionError:", 2);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t, IPCNavigationActionReply *))(v4 + 16))(v4, v6);
    v5 = v6;
  }

}

void sub_100322058(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 32) = 0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "bundleIdentifier"));
  v4 = +[CLInUseAssertion newAssertionForBundleIdentifier:withReason:](CLInUseAssertion, "newAssertionForBundleIdentifier:withReason:", v3, CFSTR("Maps is starting navigation in response to a Siri/Watch request"));
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(v5 + 56);
  *(_QWORD *)(v5 + 56) = v4;

  objc_msgSend(*(id *)(a1 + 32), "setLoadDirectionsDelayedReply:", *(_QWORD *)(a1 + 48));
  objc_msgSend(*(id *)(a1 + 32), "_startWaitingToSendResponse");
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication _maps_keyMapsSceneDelegate](UIApplication, "_maps_keyMapsSceneDelegate"));
  if (v7)
  {

LABEL_4:
    sub_100B0AAF0(OS_LOG_TYPE_INFO, CFSTR("MAPS IPC There is a key and/or application scene, continuing with the request"), v8, v9, v10, v11, v12, v13, v14);
    v15 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "backgroundNavigationDelegate"));
    objc_msgSend(v15, "prepareBackgroundNavigationWithMessage:", *(_QWORD *)(a1 + 40));

    return;
  }
  if (+[UIApplication _maps_numberOfApplicationScenes](UIApplication, "_maps_numberOfApplicationScenes"))
    goto LABEL_4;
  sub_100B0AAF0(OS_LOG_TYPE_INFO, CFSTR("MAPS IPC There isn't a key nor application scene, delaying request"), v8, v9, v10, v11, v12, v13, v14);
  _objc_msgSend(*(id *)(a1 + 32), "_startWaitingToHandleMessage:", *(_QWORD *)(a1 + 40));
}

void sub_100322238(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "setStartNavigationDelayedReply:", *(_QWORD *)(a1 + 48));
  objc_msgSend(*(id *)(a1 + 32), "_startWaitingToSendResponse");
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "backgroundNavigationDelegate"));
  objc_msgSend(v2, "startPreparedBackgroundNavigationWithMessage:", *(_QWORD *)(a1 + 40));

}

void sub_100322328(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "externalGuidanceSource"));
  objc_msgSend(v2, "setVoiceGuidanceEnabled:", objc_msgSend(*(id *)(a1 + 40), "muteNavigation") ^ 1);

}

void sub_100322410(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  int v5;
  id v6;
  id v7;
  int v8;
  __CFString *v9;
  __CFString *v10;
  id v11;
  void *v12;
  id v13;
  NSNumber *v14;
  void *v15;
  void *v16;
  id v17;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "externalGuidanceSource"));

  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "requestedVolume"));
    if (v3)
    {
      v17 = v3;
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "externalGuidanceSource"));
      objc_msgSend(v4, "setVoiceGuidanceEnabled:", objc_msgSend(v17, "isEqualToString:", CFSTR("Off Volume")) ^ 1);

      v5 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 156);
      v6 = v17;
      if (qword_1014D2118 != -1)
        dispatch_once(&qword_1014D2118, &stru_1011B1CD8);
      v7 = (id)qword_1014D2110;
      if (v5 == 2)
      {
        v8 = MNHeadphonesAreInUse();
        v9 = CFSTR("VoiceVolumeForWalkingWithoutHeadphonesContext");
        if (v8)
          v9 = CFSTR("VoiceVolumeForWalkingWithHeadphonesContext");
        v10 = v9;
      }
      else
      {
        v10 = CFSTR("VoiceVolumeForDrivingContext");
      }
      v11 = objc_msgSend(v6, "isEqualToString:", CFSTR("Off Volume"));
      if ((v11 & 1) == 0)
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "path"));
        _CFPreferencesSetAppValueWithContainer(v10, v6, CFSTR("com.apple.Maps"), v12);

      }
      if (qword_1014D2118 != -1)
        dispatch_once(&qword_1014D2118, &stru_1011B1CD8);
      v13 = (id)qword_1014D2110;
      v14 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v11);
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "path"));
      _CFPreferencesSetAppValueWithContainer(CFSTR("VoiceIsMute"), v14, CFSTR("com.apple.Maps"), v15);

      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "path"));
      _CFPreferencesSynchronizeWithContainer(CFSTR("com.apple.Maps"), kCFPreferencesCurrentUser, kCFPreferencesAnyHost, v16);

      GSSendAppPreferencesChanged(CFSTR("com.apple.Maps"), CFSTR("VoiceIsMute"));
      GSSendAppPreferencesChanged(CFSTR("com.apple.Maps"), v10);

      v3 = v17;
    }

  }
}

void sub_100322ACC(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_currentGuidanceStateMessageWithGuidanceCausedVibration:", *(unsigned __int8 *)(a1 + 40)));
  v2 = objc_msgSend(v4, "copy");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 112), "receivedGuidanceState:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "backgroundNavigationDelegate"));
  objc_msgSend(v3, "updateWithGuidance:", v4);

  objc_msgSend(*(id *)(a1 + 32), "_sendWeakLocationNotificationIfNeededWithGuidanceState:", v4);
}

void sub_100322DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100B0AAF0(OS_LOG_TYPE_INFO, CFSTR("MAPS IPC Sent request: %@ error: %@"), a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 32));
}

id sub_100324214(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "navigationStateDidChangeTo:reason:error:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_1003242D4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1003242F0(uint64_t a1, char a2)
{
  _QWORD v3[4];
  id v4;
  char v5;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100324370;
  v3[3] = &unk_1011AD388;
  objc_copyWeak(&v4, (id *)(a1 + 32));
  v5 = a2;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v3);
  objc_destroyWeak(&v4);
}

void sub_100324370(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  id v4;

  v2 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_noteGuidanceStateChanged");

  v4 = objc_loadWeakRetained(v2);
  objc_msgSend(v4, "_pushGuidanceStateIfChangedWithVibration:", *(unsigned __int8 *)(a1 + 40));

}

MKServerFormattedString *__cdecl sub_1003248A8(id a1, NSString *a2, unint64_t a3)
{
  return (MKServerFormattedString *)-[NSString mkServerFormattedString](a2, "mkServerFormattedString", a3);
}

void sub_100324A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100324A34(uint64_t a1, uint64_t a2)
{
  _QWORD *WeakRetained;
  id v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    WeakRetained[1] = *(_QWORD *)(a1 + 40);
    v5 = WeakRetained;
    objc_msgSend(WeakRetained, "_noteGuidanceStateChanged");
    objc_msgSend(v5, "_pushGuidanceStateIfChangedWithVibration:", a2);
    WeakRetained = v5;
  }

}

void sub_100324BB8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_100324BD4(uint64_t a1, uint64_t a2)
{
  _QWORD *WeakRetained;
  _BYTE *v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    WeakRetained[1] = 0;
    v4 = WeakRetained;
    objc_msgSend(WeakRetained, "setState:withReason:", 1, 5);
    v4[16] = 0;
    objc_msgSend(v4, "_noteGuidanceStateChanged");
    objc_msgSend(v4, "_pushGuidanceStateIfChangedWithVibration:", a2);
    WeakRetained = v4;
  }

}

void sub_100324C38(uint64_t a1, char a2)
{
  _QWORD v3[4];
  id v4;
  char v5;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100324CB0;
  v3[3] = &unk_1011B06A0;
  v4 = *(id *)(a1 + 32);
  v5 = a2;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v3);

}

uint64_t sub_100324CB0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

id sub_10032549C(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)MKServerFormattedString), "initWithGeoServerString:parameters:", v3, *(_QWORD *)(a1 + 32));

  return v4;
}

id sub_1003254F0(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)MKServerFormattedString), "initWithGeoServerString:parameters:", v3, *(_QWORD *)(a1 + 32));

  return v4;
}

void sub_100325B14(id a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v3 = objc_msgSend(objc_alloc((Class)LSApplicationRecord), "initWithBundleIdentifier:allowPlaceholder:error:", CFSTR("com.apple.Maps"), 0, 0);
  v1 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dataContainerURL"));
  v2 = (void *)qword_1014D2110;
  qword_1014D2110 = v1;

}

BOOL sub_100325B6C(void *a1, unint64_t a2)
{
  id v3;
  void *v4;
  _BOOL8 v5;
  void *v7;
  unsigned int v8;
  unint64_t UInteger;

  v3 = a1;
  v4 = v3;
  v5 = 1;
  if (a2 <= 0xA)
  {
    if (((1 << a2) & 0x503) != 0)
    {
LABEL_3:
      v5 = 0;
      goto LABEL_4;
    }
    if (a2 == 2 && (objc_msgSend(v3, "isResumingMultipointRoute") & 1) == 0)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "route"));
      v8 = objc_msgSend(v7, "isMultipointRoute");

      if (v8)
      {
        UInteger = GEOConfigGetUInteger(MapsConfig_RequiredStepProgressForInterruptingInflightMSR, off_1014B4BE8);
        v5 = (unint64_t)objc_msgSend(v4, "stepIndex") >= UInteger;
        goto LABEL_4;
      }
      goto LABEL_3;
    }
  }
LABEL_4:

  return v5;
}

id sub_100325FC4()
{
  if (qword_1014D2128 != -1)
    dispatch_once(&qword_1014D2128, &stru_1011B1E08);
  return (id)qword_1014D2120;
}

void sub_100326004(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  id v8;

  v3 = a2;
  if (v3)
  {
    v4 = sub_100325FC4();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v7 = 138412290;
      v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "_preserveAutosharingContacts: Error saving archived sharing state: %@", (uint8_t *)&v7, 0xCu);
    }

  }
  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
    (*(void (**)(void))(v6 + 16))();

}

void sub_100326460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100326484(uint64_t a1)
{
  _QWORD v2[4];
  id v3;
  id v4;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100326514;
  v2[3] = &unk_1011B1D58;
  v3 = *(id *)(a1 + 32);
  objc_copyWeak(&v4, (id *)(a1 + 40));
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v2);
  objc_destroyWeak(&v4);

}

void sub_100326514(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  _BYTE *WeakRetained;
  void *v6;
  uint8_t v7[16];

  v2 = sub_100325FC4();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Route paused, running completion handler and trying to start route genius", v7, 2u);
  }

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    (*(void (**)(void))(v4 + 16))();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v6 = WeakRetained;
  if (WeakRetained)
  {
    WeakRetained[33] = 1;
    objc_msgSend(WeakRetained, "_launchRouteGeniusIfNeeded");
  }

}

void sub_1003266F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10032671C(uint64_t a1)
{
  _QWORD v2[4];
  id v3;
  id v4;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1003267AC;
  v2[3] = &unk_1011B1D58;
  v3 = *(id *)(a1 + 32);
  objc_copyWeak(&v4, (id *)(a1 + 40));
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v2);
  objc_destroyWeak(&v4);

}

void sub_1003267AC(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  _BYTE *WeakRetained;
  uint8_t v6[16];

  v2 = sub_100325FC4();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "un-pause completed", v6, 2u);
  }

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    (*(void (**)(void))(v4 + 16))();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
    WeakRetained[33] = 0;

}

void sub_100326B88(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  _QWORD v3[4];
  id v4;

  v1 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100326BFC;
  v3[3] = &unk_1011AC860;
  v4 = *(id *)(a1 + 48);
  objc_msgSend(v1, "_interruptAndSaveHistoryEntry:completion:", v2, v3);

}

void sub_100326BFC(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = sub_100325FC4();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Finished saving directions item on app termination.", v4, 2u);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100326F1C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  void *v6;
  int v7;
  void *v8;
  __int16 v9;
  id v10;

  v3 = a2;
  v4 = sub_100325FC4();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resumeRouteHandle"));
    v7 = 138412546;
    v8 = v6;
    v9 = 2112;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "navigationService:didUpdateResumeRouteHandle Did update resumeRouteHandle: %@ error: %@", (uint8_t *)&v7, 0x16u);

  }
}

void sub_1003270E0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  id v21;
  __int16 v22;
  void *v23;

  if (a3)
  {
    v5 = *(void **)(a1 + 40);
    v4 = *(_QWORD *)(a1 + 48);
    v6 = *(void **)(a1 + 32);
    v7 = a3;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "route"));
    LOWORD(v4) = (unsigned __int16)objc_msgSend(v6, "_routeProgressWaypointIndexForCurrentLegIndex:inRoute:", v4, v8);

    objc_msgSend(v7, "setRouteProgressWaypointIndex:", (__int16)v4);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_currentRouteHandleStorage"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "routeRequestStorage"));
    objc_msgSend(v10, "setResumeRouteHandleStorage:", v9);

    objc_msgSend(*(id *)(a1 + 32), "_updateEVInfoForHistoryEntry:", v7);
    v11 = sub_100325FC4();
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      v13 = *(_QWORD *)(a1 + 48);
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "route"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "legs"));
      v16 = objc_msgSend(v15, "count");
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "resumeRouteHandle"));
      v18 = 134218498;
      v19 = v13;
      v20 = 2048;
      v21 = v16;
      v22 = 2112;
      v23 = v17;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "navigationServiceDidResume: recording resume waypoint index: %lu (%lu legs), resumeHandle: %@", (uint8_t *)&v18, 0x20u);

    }
  }
}

void sub_100327734(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  unsigned int v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  NSObject *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  int v24;
  uint64_t v25;
  __int16 v26;
  id v27;
  __int16 v28;
  id v29;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_currentRouteHandleStorage"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "routeRequestStorage"));
    objc_msgSend(v8, "setResumeRouteHandleStorage:", v7);

    v9 = objc_msgSend(*(id *)(a1 + 32), "_updateEVInfoForHistoryEntry:", v6);
    v10 = *(_QWORD *)(a1 + 48) + 1;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "route"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "legs"));
    v13 = objc_msgSend(v12, "count");

    if ((id)v10 == v13)
    {
      v14 = sub_100325FC4();
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        v24 = 67109120;
        LODWORD(v25) = v9;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "navigationServiceDidArrive: skip recording resume waypoint index, we're end of route, didUpdateEVInfo: %d", (uint8_t *)&v24, 8u);
      }

    }
    else
    {
      v16 = *(void **)(a1 + 32);
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "route"));
      v18 = objc_msgSend(v16, "_routeProgressWaypointIndexForCurrentLegIndex:inRoute:", v10, v17);

      v19 = sub_100325FC4();
      v20 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        v21 = *(_QWORD *)(a1 + 48);
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "route"));
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "legs"));
        v24 = 134218496;
        v25 = v21;
        v26 = 2048;
        v27 = v18;
        v28 = 2048;
        v29 = objc_msgSend(v23, "count");
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "navigationServiceDidArrive: at end of leg %lu, recording resume waypoint index: %lu (%lu legs)", (uint8_t *)&v24, 0x20u);

      }
      objc_msgSend(v6, "setRouteProgressWaypointIndex:", (__int16)v18);
    }
  }

}

void sub_100327EAC(id a1, NSError *a2)
{
  NSError *v2;
  id v3;
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint32_t v9;
  int v10;
  NSError *v11;

  v2 = a2;
  v3 = sub_100325FC4();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = v4;
  if (v2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v10 = 138543362;
      v11 = v2;
      v6 = "Failed to commit SPR/EV history entry update with error: %{public}@";
      v7 = v5;
      v8 = OS_LOG_TYPE_ERROR;
      v9 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v7, v8, v6, (uint8_t *)&v10, v9);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    LOWORD(v10) = 0;
    v6 = "Successfully committed SPR/EV history entry";
    v7 = v5;
    v8 = OS_LOG_TYPE_INFO;
    v9 = 2;
    goto LABEL_6;
  }

}

void sub_100327F8C(id a1, NSError *a2)
{
  NSError *v2;
  id v3;
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint32_t v9;
  int v10;
  NSError *v11;

  v2 = a2;
  v3 = sub_100325FC4();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = v4;
  if (v2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v10 = 138543362;
      v11 = v2;
      v6 = "Failed to commit MPR history entry update with error: %{public}@";
      v7 = v5;
      v8 = OS_LOG_TYPE_ERROR;
      v9 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v7, v8, v6, (uint8_t *)&v10, v9);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    LOWORD(v10) = 0;
    v6 = "Successfully committed MPR history entry";
    v7 = v5;
    v8 = OS_LOG_TYPE_INFO;
    v9 = 2;
    goto LABEL_6;
  }

}

void sub_10032822C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  char *v8;
  void *v9;
  char *v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  char *v14;
  id v15;
  NSObject *v16;
  void *v17;
  id v18;
  const char *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint32_t v22;
  id v23;
  int v24;
  char *v25;
  __int16 v26;
  id v27;
  __int16 v28;
  id v29;

  v3 = a2;
  v4 = objc_opt_class(MSHistoryMultiPointRoute);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    v5 = v3;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[MNNavigationService sharedService](MNNavigationService, "sharedService"));
    v7 = objc_msgSend(v6, "stepIndex");

    v8 = (char *)objc_msgSend(*(id *)(a1 + 32), "legIndexForStepIndex:", v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "legs"));
    v10 = (char *)objc_msgSend(v9, "count");

    if (v8 >= v10)
    {
      v23 = sub_100325FC4();
      v16 = objc_claimAutoreleasedReturnValue(v23);
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
LABEL_13:

        goto LABEL_14;
      }
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "steps"));
      v24 = 134218496;
      v25 = v8;
      v26 = 2048;
      v27 = v7;
      v28 = 2048;
      v29 = objc_msgSend(v17, "count");
      v19 = "Got currentLegIndex: %lu, currentStepIndex: %lu, number of steps: %lu";
      v20 = v16;
      v21 = OS_LOG_TYPE_ERROR;
      v22 = 32;
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 48);
      if (v11 == 4 || v11 == 2)
      {
        ++v8;
        v12 = sub_100325FC4();
        v13 = objc_claimAutoreleasedReturnValue(v12);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          v24 = 134217984;
          v25 = v8;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Advanced currentLegIndex to %lu due to the arrival state", (uint8_t *)&v24, 0xCu);
        }

      }
      v14 = (char *)objc_msgSend(*(id *)(a1 + 40), "_routeProgressWaypointIndexForCurrentLegIndex:inRoute:", v8, *(_QWORD *)(a1 + 32));
      objc_msgSend(v5, "setRouteProgressWaypointIndex:", (__int16)v14);
      objc_msgSend(*(id *)(a1 + 40), "_updateEVInfoForHistoryEntry:", v5);
      v15 = sub_100325FC4();
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        goto LABEL_13;
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "legs"));
      v18 = objc_msgSend(v17, "count");
      v24 = 134218240;
      v25 = v14;
      v26 = 2048;
      v27 = v18;
      v19 = "Updating MPR history entry waypoint index for new route: %lu (%lu legs)";
      v20 = v16;
      v21 = OS_LOG_TYPE_INFO;
      v22 = 22;
    }
    _os_log_impl((void *)&_mh_execute_header, v20, v21, v19, (uint8_t *)&v24, v22);

    goto LABEL_13;
  }
LABEL_14:

}

void sub_100328A80(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "HistoryDirectionsItemSavingTask");
  v2 = (void *)qword_1014D2120;
  qword_1014D2120 = (uint64_t)v1;

}

id sub_100328C04()
{
  if (qword_1014D2138 != -1)
    dispatch_once(&qword_1014D2138, &stru_1011B1ED0);
  return (id)qword_1014D2130;
}

void sub_10032A334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10032A360(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "hideVIOLabel:", 1);

}

void sub_10032A588(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_10032A5A4(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "updateHeightConstraints");
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "superview"));
  objc_msgSend(v2, "layoutIfNeeded");

}

void sub_10032A5F8(uint64_t a1)
{
  id *WeakRetained;
  id *v2;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained[2], "removeFromSuperview");
    WeakRetained = v2;
  }

}

id sub_10032A88C(uint64_t a1)
{
  void *v2;
  NSString *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  NSString *v9;
  void *v10;

  v2 = *(void **)(a1 + 32);
  v3 = NSStringFromSelector("collapsedHeight");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  objc_msgSend(v2, "willChangeValueForKey:", v4);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "collectionViewLayout"));
  objc_msgSend(v6, "invalidateLayout");

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView"));
  objc_msgSend(v7, "layoutIfNeeded");

  objc_msgSend(*(id *)(a1 + 32), "_updateActiveStepIndexAnimated:", 0);
  objc_msgSend(*(id *)(a1 + 32), "_updateLayoutProgressWithDuration:completion:", 0, 0.0);
  v8 = *(void **)(a1 + 32);
  v9 = NSStringFromSelector("collapsedHeight");
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  objc_msgSend(v8, "didChangeValueForKey:", v10);

  return objc_msgSend(*(id *)(a1 + 32), "_updateCollectionViewBottomInset");
}

void sub_10032AA70(uint64_t a1)
{
  id *v2;
  unsigned int v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  _QWORD *v16;
  id v17;
  void *v18;
  uint64_t v19;
  id v20;
  void *v21;
  double v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  _QWORD v28[3];
  _QWORD v29[3];

  if (*(_BYTE *)(a1 + 40))
  {
    v2 = (id *)(a1 + 32);
    v3 = objc_msgSend(*(id *)(a1 + 32), "isExpanded");
    v4 = sub_1006E6850();
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    objc_msgSend(*((id *)*v2 + 10), "setNonBlurredColor:", v5);

    if (!v3)
      return;
    v6 = sub_1006E68C4();
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    objc_msgSend(*((id *)*v2 + 28), "setOverlayColor:", v7);

    v8 = sub_1006E6850();
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "colorWithAlphaComponent:", 0.0));
    v29[0] = v10;
    v11 = sub_1006E6850();
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "colorWithAlphaComponent:", 0.25));
    v29[1] = v13;
    v14 = sub_1006E6850();
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    v29[2] = v15;
    v16 = v29;
  }
  else
  {
    v17 = sub_1006E6768();
    v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    v19 = *(_QWORD *)(a1 + 32);
    v2 = (id *)(a1 + 32);
    objc_msgSend(*(id *)(v19 + 80), "setNonBlurredColor:", v18);

    v20 = sub_1006E66E4();
    v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
    objc_msgSend(*v2, "layoutProgress");
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "colorWithAlphaComponent:", v22 * 0.239999995));
    objc_msgSend(*((id *)*v2 + 28), "setOverlayColor:", v23);

    v24 = sub_1006E6768();
    v9 = (void *)objc_claimAutoreleasedReturnValue(v24);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "colorWithAlphaComponent:", 0.0));
    v28[0] = v10;
    v25 = sub_1006E6768();
    v12 = (void *)objc_claimAutoreleasedReturnValue(v25);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "colorWithAlphaComponent:", 0.25));
    v28[1] = v13;
    v26 = sub_1006E6768();
    v15 = (void *)objc_claimAutoreleasedReturnValue(v26);
    v28[2] = v15;
    v16 = v28;
  }
  v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v16, 3));
  objc_msgSend(*((id *)*v2 + 13), "setColors:", v27);

}

void sub_10032B860(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(unsigned __int8 *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "footerView"));
  objc_msgSend(v2, "setShouldShowEndButton:", v1);

}

void sub_10032BF80(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_displayIndexPath"));
  objc_msgSend(v2, "scrollToIndexPath:animated:", v3, *(unsigned __int8 *)(a1 + 40));

}

void sub_10032C4BC(uint64_t a1, uint64_t a2)
{
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSIndexPath indexPathForItem:inSection:](NSIndexPath, "indexPathForItem:inSection:", a2, 0));
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);

}

id sub_10032C8B4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
}

id sub_10032C9D4(uint64_t a1)
{
  id v2;
  _BOOL8 v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "setShowsHairline:", objc_msgSend(*(id *)(a1 + 40), "_showsHairlineForItemIndex:", *(_QWORD *)(a1 + 56)));
  objc_msgSend(*(id *)(a1 + 48), "setItem:", *(_QWORD *)(a1 + 32));
  if (objc_msgSend(*(id *)(a1 + 40), "isLaneGuidanceActive"))
  {
    v2 = *(id *)(a1 + 56);
    v3 = v2 == objc_msgSend(*(id *)(a1 + 40), "activeStepIndex");
  }
  else
  {
    v3 = 0;
  }
  objc_msgSend(*(id *)(a1 + 48), "setHideManeuverArrow:", v3);
  v4 = *(void **)(a1 + 48);
  v5 = objc_msgSend(*(id *)(a1 + 40), "_stateForItemIndex:", *(_QWORD *)(a1 + 56));
  objc_msgSend(*(id *)(a1 + 40), "layoutProgress");
  objc_msgSend(v4, "setState:layoutProgress:", v5);
  objc_msgSend(*(id *)(a1 + 48), "setDelegate:", *(_QWORD *)(a1 + 40));
  return objc_msgSend(*(id *)(a1 + 48), "layoutIfNeeded");
}

void sub_10032D550(uint64_t a1)
{
  unsigned __int8 *v2;
  int v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(unsigned __int8 **)(a1 + 32);
  v3 = v2[57];
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "collectionView"));
  if (v3)
  {
    v6 = *(_QWORD *)(a1 + 40);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v6, 1));
    objc_msgSend(v4, "reloadItemsAtIndexPaths:", v5);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 40);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v7, 1));
    objc_msgSend(v4, "reconfigureItemsAtIndexPaths:", v5);
  }

}

void sub_10032E3C8(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  void *v9;
  id v10;

  objc_msgSend(*(id *)(a1 + 32), "_collapsedSignHeight");
  v3 = v2;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "setConstant:");
  objc_msgSend(*(id *)(a1 + 32), "layoutProgress");
  if (fabs(v4) <= 2.22044605e-16)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 112), "setConstant:", v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "footerView"));
    objc_msgSend(v5, "minimumHeight");
    v7 = v3 + v6;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "signDelegate"));
    objc_msgSend(v8, "setSignListHeight:", v7);

  }
  objc_msgSend(*(id *)(a1 + 32), "scrollToIndexPath:animated:", *(_QWORD *)(a1 + 40), 0);
  objc_msgSend(*(id *)(a1 + 32), "_updateCurrentManeuverBackground");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 256), "setActiveStepIndex:", objc_msgSend(*(id *)(a1 + 32), "activeStepIndex"));
  v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "superview"));
  objc_msgSend(v9, "layoutIfNeeded");

}

void sub_10032E4E4(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "_cleanupStepCountdowns");
  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v1, "postNotificationName:object:", CFSTR("MapsPPTGuidanceDidUpdateNotifcation"), 0);

}

void sub_10032E614(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "_updateSelectionBackgrounds");
  objc_msgSend(*(id *)(a1 + 32), "updateHeightConstraints");
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "superview"));
  objc_msgSend(v2, "layoutIfNeeded");

}

uint64_t sub_10032E670(uint64_t a1)
{
  unsigned __int8 *v2;
  uint64_t v3;
  void *v4;
  uint64_t result;

  v2 = *(unsigned __int8 **)(a1 + 32);
  v3 = v2[160];
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "collectionView"));
  objc_msgSend(v4, "setScrollEnabled:", v3);

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_10032E770(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  _BOOL8 v14;
  void *v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];

  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView", 0));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "indexPathsForVisibleItems"));

  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v18;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v18 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)v7);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "cellForItemAtIndexPath:", v8));

        v11 = objc_opt_class(NavSignManeuverCell);
        if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
        {
          v12 = v10;
          if (objc_msgSend(*(id *)(a1 + 32), "isLaneGuidanceActive"))
          {
            v13 = objc_msgSend(v8, "item");
            v14 = v13 == objc_msgSend(*(id *)(a1 + 32), "activeStepIndex");
          }
          else
          {
            v14 = 0;
          }
          objc_msgSend(v12, "setHideManeuverArrow:", v14);

        }
        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    }
    while (v5);
  }

  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "superview"));
  objc_msgSend(v16, "layoutIfNeeded");

}

void sub_100330144(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "NavSignListViewController");
  v2 = (void *)qword_1014D2130;
  qword_1014D2130 = (uint64_t)v1;

}

void sub_1003303F4(void *a1)
{
  void (**v1)(id, void *, void *, _BYTE *);
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v1 = a1;
  v2 = 0;
  v12 = 0;
  do
  {
    v3 = v2 + 16;
    if (v2 == 368)
      break;
    v4 = (char *)off_1011B1EF0 + v2;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", *(char **)((char *)off_1011B1EF0 + v2), 4));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", *((_QWORD *)v4 + 1), 4));
    if (objc_msgSend(v6, "hasPrefix:", CFSTR("@privateFrameworksPath")))
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "privateFrameworksPath"));
      v9 = v6;
      v10 = 22;
LABEL_7:
      v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "stringByReplacingCharactersInRange:withString:", 0, v10, v8));

      v6 = (void *)v8;
      goto LABEL_8;
    }
    if (objc_msgSend(v6, "hasPrefix:", CFSTR("@builtInPlugInsPath")))
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "builtInPlugInsPath"));
      v9 = v6;
      v10 = 19;
      goto LABEL_7;
    }
    if (!objc_msgSend(v6, "hasPrefix:", CFSTR("@GEOConfigDebug")))
      goto LABEL_9;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[GEOFilePaths pathFor:](GEOFilePaths, "pathFor:", 39));
    v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "stringByReplacingCharactersInRange:withString:", 0, 15, v7));
LABEL_8:

    v6 = (void *)v11;
LABEL_9:
    v1[2](v1, v5, v6, &v12);

    v2 = v3;
  }
  while (!v12);

}

void sub_100330D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100330D84(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  void *v9;
  void *v10;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[CollectionsFilterCell reuseIdentifier](CollectionsFilterCell, "reuseIdentifier"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "dequeueReusableCellWithReuseIdentifier:forIndexPath:", v8, v6));

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "filterAtIndexPath:", v6));
    objc_msgSend(v9, "configureWithModel:", v10);

  }
  else
  {
    v9 = 0;
  }

  return v9;
}

void sub_10033142C(uint64_t a1, void *a2)
{
  id v3;
  BOOL v4;
  void *v5;
  void *v6;
  CollectionsFilterViewModel *v7;
  void *v8;
  CollectionsFilterViewModel *v9;
  void *v10;
  CollectionsFilterViewModel *v11;
  CollectionsFilterViewModel *v12;
  id v13;

  v13 = a2;
  v3 = objc_msgSend(v13, "filterType");
  if (v3 == (id)1)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "addressFilter"));

    v5 = v13;
    if (v10)
    {
      v11 = [CollectionsFilterViewModel alloc];
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "addressFilter"));
      v9 = -[CollectionsFilterViewModel initWithAllCollectionsAddressFilter:isDarkMode:](v11, "initWithAllCollectionsAddressFilter:isDarkMode:", v8, *(unsigned __int8 *)(a1 + 40));
      goto LABEL_8;
    }
  }
  else
  {
    v4 = v3 == (id)2;
    v5 = v13;
    if (v4)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "keywordFilter"));

      v5 = v13;
      if (v6)
      {
        v7 = [CollectionsFilterViewModel alloc];
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "keywordFilter"));
        v9 = -[CollectionsFilterViewModel initWithAllCollectionsKeywordFilter:isDarkMode:](v7, "initWithAllCollectionsKeywordFilter:isDarkMode:", v8, *(unsigned __int8 *)(a1 + 40));
LABEL_8:
        v12 = v9;

        objc_msgSend(*(id *)(a1 + 32), "addObject:", v12);
        v5 = v13;
      }
    }
  }

}

void sub_1003316D8(uint64_t a1, void *a2)
{
  id v3;
  BOOL v4;
  void *v5;
  void *v6;
  CollectionsFilterViewModel *v7;
  void *v8;
  CollectionsFilterViewModel *v9;
  void *v10;
  CollectionsFilterViewModel *v11;
  CollectionsFilterViewModel *v12;
  id v13;

  v13 = a2;
  v3 = objc_msgSend(v13, "filterType");
  if (v3 == (id)1)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "addressFilter"));

    v5 = v13;
    if (v10)
    {
      v11 = [CollectionsFilterViewModel alloc];
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "addressFilter"));
      v9 = -[CollectionsFilterViewModel initWithAddressFilter:isDarkMode:](v11, "initWithAddressFilter:isDarkMode:", v8, *(unsigned __int8 *)(a1 + 40));
      goto LABEL_8;
    }
  }
  else
  {
    v4 = v3 == (id)2;
    v5 = v13;
    if (v4)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "keywordFilter"));

      v5 = v13;
      if (v6)
      {
        v7 = [CollectionsFilterViewModel alloc];
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "keywordFilter"));
        v9 = -[CollectionsFilterViewModel initWithKeywordFilter:isDarkMode:](v7, "initWithKeywordFilter:isDarkMode:", v8, *(unsigned __int8 *)(a1 + 40));
LABEL_8:
        v12 = v9;

        objc_msgSend(*(id *)(a1 + 32), "addObject:", v12);
        v5 = v13;
      }
    }
  }

}

void sub_10033198C(uint64_t a1, void *a2)
{
  void *v3;
  CollectionsFilterViewModel *v4;
  void *v5;
  CollectionsFilterViewModel *v6;
  id v7;

  v7 = a2;
  if (objc_msgSend(v7, "filterType") == (id)1)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "conceptFilter"));

    if (v3)
    {
      v4 = [CollectionsFilterViewModel alloc];
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "conceptFilter"));
      v6 = -[CollectionsFilterViewModel initWithGuidesHomeConceptFilter:isDarkMode:](v4, "initWithGuidesHomeConceptFilter:isDarkMode:", v5, *(unsigned __int8 *)(a1 + 40));

      objc_msgSend(*(id *)(a1 + 32), "addObject:", v6);
    }
  }

}

id sub_100332098()
{
  if (qword_1014D2148 != -1)
    dispatch_once(&qword_1014D2148, &stru_1011B2110);
  return (id)qword_1014D2140;
}

void sub_10033231C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_10033233C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "updateState");

}

void sub_100332368(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "updateState");

}

void sub_10033284C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFSessionUsageMonitor");
  v2 = (void *)qword_1014D2140;
  qword_1014D2140 = (uint64_t)v1;

}

void sub_100332F88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100332FA4(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_transitionIfImpressionState:toImpressionState:", 1, 2);
    WeakRetained = v2;
  }

}

void sub_100333A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100333A6C(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v6;
  unsigned int v7;
  id v8;

  v8 = a2;
  if (objc_msgSend(v8, "type") == (id)6)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
    v7 = objc_msgSend(v6, "isEqualToString:", CFSTR("NearbyTransit"));

    if (v7)
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
      *a4 = 1;
    }
  }

}

void sub_100333B94(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  const char *v5;
  id v6;
  NSString *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  unsigned int v12;
  id v13;
  NSObject *v14;
  void *v15;
  const char *v16;
  id v17;
  NSString *v18;
  uint64_t v19;
  void *v20;
  const __CFString *v21;
  _QWORD v22[4];
  id v23;
  char v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  const __CFString *v30;

  v2 = sub_100431CEC();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = (void *)objc_opt_class(*(_QWORD *)(a1 + 32));
    v5 = *(const char **)(a1 + 48);
    v6 = v4;
    v7 = NSStringFromSelector(v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    *(_DWORD *)buf = 138412546;
    v26 = v4;
    v27 = 2112;
    v28 = (uint64_t)v8;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%@ %@: Checking if isTransitUserHere", buf, 0x16u);

  }
  v9 = sub_100B3A5D4();
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "oneInsights"));
  v12 = objc_msgSend(v11, "isTransitUserHere");
  v13 = sub_100431CEC();
  v14 = objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    v15 = (void *)objc_opt_class(*(_QWORD *)(a1 + 32));
    v16 = *(const char **)(a1 + 48);
    v17 = v15;
    v18 = NSStringFromSelector(v16);
    v19 = objc_claimAutoreleasedReturnValue(v18);
    v20 = (void *)v19;
    v21 = CFSTR("No");
    *(_DWORD *)buf = 138412802;
    v26 = v15;
    v27 = 2112;
    if (v12)
      v21 = CFSTR("Yes");
    v28 = v19;
    v29 = 2112;
    v30 = v21;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "%@ %@: isTransitUserHere: %@", buf, 0x20u);

  }
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_100333DB8;
  v22[3] = &unk_1011AD388;
  objc_copyWeak(&v23, (id *)(a1 + 40));
  v24 = v12;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v22);
  objc_destroyWeak(&v23);

}

void sub_100333DB8(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "setTransitUserHere:", *(unsigned __int8 *)(a1 + 40));
    WeakRetained = v3;
  }

}

uint64_t sub_100334344(_QWORD *a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  const char *v5;
  id v6;
  NSString *v7;
  void *v8;
  uint64_t result;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;

  v2 = sub_100432EDC();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = (void *)objc_opt_class(a1[4]);
    v5 = (const char *)a1[6];
    v6 = v4;
    v7 = NSStringFromSelector(v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    v10 = 138412546;
    v11 = v4;
    v12 = 2112;
    v13 = v8;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%@ %@: Accepted Nearby Transit tip", (uint8_t *)&v10, 0x16u);

  }
  result = a1[5];
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_100334440(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  const char *v5;
  id v6;
  NSString *v7;
  void *v8;
  void *v9;
  uint64_t result;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;

  v2 = sub_100432EDC();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = (void *)objc_opt_class(*(_QWORD *)(a1 + 32));
    v5 = *(const char **)(a1 + 48);
    v6 = v4;
    v7 = NSStringFromSelector(v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    v11 = 138412546;
    v12 = v4;
    v13 = 2112;
    v14 = v8;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%@ %@: Displayed Nearby Transit tip", (uint8_t *)&v11, 0x16u);

  }
  if ((objc_msgSend(*(id *)(a1 + 32), "hasRecordedSession") & 1) == 0)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataStore"));
    objc_msgSend(v9, "incrementSessionsShown");

    objc_msgSend(*(id *)(a1 + 32), "setRecordedSession:", 1);
  }
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_10033456C(_QWORD *a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  const char *v5;
  id v6;
  NSString *v7;
  void *v8;
  uint64_t result;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;

  v2 = sub_100432EDC();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = (void *)objc_opt_class(a1[4]);
    v5 = (const char *)a1[6];
    v6 = v4;
    v7 = NSStringFromSelector(v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    v10 = 138412546;
    v11 = v4;
    v12 = 2112;
    v13 = v8;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%@ %@: Dismissed Nearby Transit tip", (uint8_t *)&v10, 0x16u);

  }
  result = a1[5];
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

id sub_100336540()
{
  if (qword_1014D2158 != -1)
    dispatch_once(&qword_1014D2158, &stru_1011B21A8);
  return (id)qword_1014D2150;
}

void sub_100336BEC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "NavdRouteCollectionUpdateProvider");
  v2 = (void *)qword_1014D2150;
  qword_1014D2150 = (uint64_t)v1;

}

void sub_100337DC4(uint64_t a1, void *a2)
{
  id v3;
  SearchResult *v4;
  SearchFieldItem *v5;
  void *v6;
  void *v7;
  void *v8;
  SearchResult *v9;

  v3 = a2;
  v4 = -[SearchResult initWithMapItem:]([SearchResult alloc], "initWithMapItem:", v3);

  v5 = objc_alloc_init(SearchFieldItem);
  -[SearchFieldItem setSearchResult:](v5, "setSearchResult:", v4);
  v9 = v4;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v9, 1));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[SearchInfo searchInfoWithResults:](SearchInfo, "searchInfoWithResults:", v6));

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "appCoordinator"));
  objc_msgSend(v8, "openSearch:andResults:", v5, v7);

}

void sub_1003380D4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1003380F8(uint64_t a1, void *a2)
{
  id v3;
  NSObject **WeakRetained;
  NSObject **v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  _QWORD block[4];
  id v12;
  id v13;
  id v14;

  v3 = a2;
  WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 40));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    v6 = WeakRetained[1];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100338220;
    block[3] = &unk_1011B0300;
    objc_copyWeak(&v14, (id *)(a1 + 40));
    v13 = *(id *)(a1 + 32);
    v12 = v3;
    dispatch_async(v6, block);

    objc_destroyWeak(&v14);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 32);
    v8 = GEOErrorDomain(0);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v9, -8, 0));
    (*(void (**)(uint64_t, _QWORD, void *))(v7 + 16))(v7, 0, v10);

  }
}

void sub_100338220(uint64_t a1)
{
  _QWORD *WeakRetained;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v9 = WeakRetained;
  if (WeakRetained)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_processUpdatedSyncVehicles:", *(_QWORD *)(a1 + 32)));
    v4 = objc_msgSend(v3, "copy");
    v5 = (void *)v9[2];
    v9[2] = v4;

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 40);
    v7 = GEOErrorDomain(0);
    v3 = (void *)objc_claimAutoreleasedReturnValue(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v3, -8, 0));
    (*(void (**)(uint64_t, _QWORD, void *))(v6 + 16))(v6, 0, v8);

  }
}

void sub_100338444(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_addOrEditVehicle:", *(_QWORD *)(a1 + 32));

}

void sub_1003385D8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;
  void *v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
  v9 = v2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v9, 1));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MapsSyncQueryPredicate queryPredicateWithFormat:argumentArray:](_TtC8MapsSync22MapsSyncQueryPredicate, "queryPredicateWithFormat:argumentArray:", CFSTR("vehicleIdentifier == %@"), v3));

  v5 = objc_msgSend(objc_alloc((Class)_TtC8MapsSync20MapsSyncQueryOptions), "initWithPredicate:sortDescriptors:range:", v4, 0, 0);
  v6 = objc_alloc_init((Class)MSVehicleRequest);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100338744;
  v7[3] = &unk_1011AD9D0;
  objc_copyWeak(&v8, (id *)(a1 + 40));
  objc_msgSend(v6, "fetchWithOptions:completionHandler:", v5, v7);

  objc_destroyWeak(&v8);
}

void sub_100338728(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100338744(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t Log;
  NSObject *WeakRetained;
  void *v9;
  int v10;
  id v11;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "com.apple.Maps.VirtualGaragePersister");
    WeakRetained = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(WeakRetained, OS_LOG_TYPE_ERROR))
    {
      v10 = 138412290;
      v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, WeakRetained, OS_LOG_TYPE_ERROR, "Failed to load load sync vehicle: %@", (uint8_t *)&v10, 0xCu);
    }
  }
  else
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
    -[NSObject _removeSyncVehicle:](WeakRetained, "_removeSyncVehicle:", v9);

  }
}

void sub_10033897C(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD v4[4];
  id v5;
  uint64_t v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MapsSyncStore sharedStore](_TtC8MapsSync13MapsSyncStore, "sharedStore"));
  v6 = *(_QWORD *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v6, 1));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100338A64;
  v4[3] = &unk_1011B1BE0;
  v5 = *(id *)(a1 + 32);
  objc_msgSend(v2, "deleteWithObjects:completionHandler:", v3, v4);

}

void sub_100338A64(uint64_t a1, void *a2)
{
  id v3;
  uint64_t Log;
  NSObject *v5;
  NSObject *v6;
  void *v7;
  const char *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint32_t v11;
  int v12;
  void *v13;
  __int16 v14;
  id v15;

  v3 = a2;
  Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "com.apple.Maps.VirtualGaragePersister");
  v5 = objc_claimAutoreleasedReturnValue(Log);
  v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
      v12 = 138412546;
      v13 = v7;
      v14 = 2112;
      v15 = v3;
      v8 = "Failed to delete vehicle: %@ error: %@";
      v9 = v6;
      v10 = OS_LOG_TYPE_ERROR;
      v11 = 22;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v9, v10, v8, (uint8_t *)&v12, v11);

    }
  }
  else if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
    v12 = 138412290;
    v13 = v7;
    v8 = "Successfully removed vehicle %@.";
    v9 = v6;
    v10 = OS_LOG_TYPE_INFO;
    v11 = 12;
    goto LABEL_6;
  }

}

void sub_100338D40(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_addOrEditVehicle:", *(_QWORD *)(a1 + 32));

}

void sub_100339180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, uint64_t a18, id a19)
{
  id *v19;
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a19);
  _Unwind_Resume(a1);
}

void sub_1003391C0(id *a1, void *a2)
{
  id v3;
  _QWORD *WeakRetained;
  id v5;
  NSObject *v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;
  id v11;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained(a1 + 5);
  v5 = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    v6 = WeakRetained[1];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1003392B4;
    v7[3] = &unk_1011B2288;
    v8 = v3;
    v9 = a1[4];
    v10 = v5;
    objc_copyWeak(&v11, a1 + 5);
    dispatch_async(v6, v7);
    objc_destroyWeak(&v11);

  }
}

void sub_1003392B4(id *a1)
{
  uint64_t Log;
  NSObject *v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  void *v31;
  id v32;
  void *v33;
  void *v34;
  NSMutableDictionary *v35;
  id v36;
  uint64_t v37;
  void *i;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  id v45;
  uint64_t v46;
  NSObject *v47;
  void *v48;
  void *v49;
  id v50;
  void *v51;
  void *v52;
  void *v53;
  id v54;
  void *v55;
  unsigned int v56;
  void *v57;
  void *v58;
  void *v59;
  id v60;
  void *v61;
  id v62;
  void *v63;
  id v64;
  void *v65;
  void *v66;
  id v67;
  void *v68;
  id obj;
  _QWORD v71[4];
  id v72;
  id v73;
  id v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  void *v79;
  uint8_t buf[4];
  void *v81;
  __int16 v82;
  id v83;
  _BYTE v84[128];

  v67 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "firstObject"));
  if (!v67)
  {
    Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "com.apple.Maps.VirtualGaragePersister");
    v2 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = a1[5];
      *(_DWORD *)buf = 138412290;
      v81 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Didn't find vehicle: %@ in sync storage. Will create a new one.", buf, 0xCu);
    }

    v67 = objc_alloc_init((Class)MSVehicle);
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "identifier", v67));
  v5 = objc_msgSend(v4, "copy");
  objc_msgSend(v68, "setVehicleIdentifier:", v5);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "iapIdentifier"));
  v7 = objc_msgSend(v6, "copy");
  objc_msgSend(v68, "setIapIdentifier:", v7);

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "siriIntentsIdentifier"));
  v9 = objc_msgSend(v8, "copy");
  objc_msgSend(v68, "setSiriIntentsIdentifier:", v9);

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "creationDate"));
  objc_msgSend(v68, "setDateOfVehicleIngestion:", v10);

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "lastStateUpdateDate"));
  objc_msgSend(v68, "setLastStateUpdateDate:", v11);

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "displayName"));
  v13 = objc_msgSend(v12, "copy");
  objc_msgSend(v68, "setDisplayName:", v13);

  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "year"));
  if (objc_msgSend(v14, "integerValue"))
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "year"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v15, "integerValue")));
    objc_msgSend(v68, "setYear:", v16);

  }
  else
  {
    objc_msgSend(v68, "setYear:", 0);
  }

  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "manufacturer"));
  v18 = objc_msgSend(v17, "copy");
  objc_msgSend(v68, "setManufacturer:", v18);

  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "model"));
  v20 = objc_msgSend(v19, "copy");
  objc_msgSend(v68, "setModel:", v20);

  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "colorHex"));
  v22 = objc_msgSend(v21, "copy");
  objc_msgSend(v68, "setColorHex:", v22);

  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "licensePlate"));
  v24 = objc_msgSend(v23, "copy");
  objc_msgSend(v68, "setLicensePlate:", v24);

  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "lprVehicleType"));
  v26 = objc_msgSend(v25, "copy");
  objc_msgSend(v68, "setLprVehicleType:", v26);

  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "lprPowerType"));
  v28 = objc_msgSend(v27, "copy");
  objc_msgSend(v68, "setLprPowerType:", v28);

  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "headUnitBluetoothIdentifier"));
  v30 = objc_msgSend(v29, "copy");
  objc_msgSend(v68, "setHeadUnitBluetoothIdentifier:", v30);

  v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "headUnitIdentifier"));
  v32 = objc_msgSend(v31, "copy");
  objc_msgSend(v68, "setHeadUnitMacAddress:", v32);

  v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(a1[6], "supportedConnectors")));
  objc_msgSend(v68, "setSupportedConnectors:", v33);

  v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "powerByConnector"));
  if (v34)
  {
    v35 = objc_opt_new(NSMutableDictionary);
    v77 = 0u;
    v78 = 0u;
    v75 = 0u;
    v76 = 0u;
    obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "powerByConnector"));
    v36 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v75, v84, 16);
    if (v36)
    {
      v37 = *(_QWORD *)v76;
      do
      {
        for (i = 0; i != v36; i = (char *)i + 1)
        {
          if (*(_QWORD *)v76 != v37)
            objc_enumerationMutation(obj);
          v39 = *(_QWORD *)(*((_QWORD *)&v75 + 1) + 8 * (_QWORD)i);
          v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "powerByConnector"));
          v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "objectForKeyedSubscript:", v39));

          v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSUnitPower watts](NSUnitPower, "watts"));
          v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "measurementByConvertingToUnit:", v42));
          objc_msgSend(v43, "doubleValue");
          v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
          -[NSMutableDictionary setObject:forKeyedSubscript:](v35, "setObject:forKeyedSubscript:", v44, v39);

        }
        v36 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v75, v84, 16);
      }
      while (v36);
    }

    v74 = 0;
    v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v35, 1, &v74));
    v45 = v74;
    if (v45 || !v34)
    {
      v46 = GEOFindOrCreateLog(DefaultLoggingSubsystem, "com.apple.Maps.VirtualGaragePersister");
      v47 = objc_claimAutoreleasedReturnValue(v46);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "powerByConnector"));
        *(_DWORD *)buf = 138412546;
        v81 = v48;
        v82 = 2112;
        v83 = v45;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "Failed to persist poweByConnector dictionary: %@, error: %@.", buf, 0x16u);

      }
    }

  }
  objc_msgSend(v68, "setPowerByConnector:", v34);
  v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "preferredChargingNetworks"));

  if (v49)
  {
    v50 = objc_alloc_init((Class)VGChargingNetworksStorage);
    v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "preferredChargingNetworks"));
    v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "allObjects"));
    v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "_geo_map:", &stru_1011B2238));

    v54 = objc_msgSend(v53, "mutableCopy");
    objc_msgSend(v50, "setNetworks:", v54);

    objc_msgSend(v50, "setUsesPreferredNetworksForRouting:", objc_msgSend(a1[6], "usesPreferredNetworksForRouting"));
    v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "data"));

  }
  objc_msgSend(v68, "setPreferredChargingNetworks:", v49);
  v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "currentVehicleState"));
  if (v55)
  {
    v56 = objc_msgSend(a1[6], "isPureElectricVehicle");

    if (v56)
    {
      v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "currentVehicleState"));
      v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "_storage"));

      v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "pairedAppInstallDeviceIdentifier"));
      v60 = objc_msgSend(v59, "copy");
      objc_msgSend(v58, "setPairedAppInstallDeviceIdentifier:", v60);

      v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "pairedAppInstallSessionIdentifier"));
      v62 = objc_msgSend(v61, "copy");
      objc_msgSend(v58, "setPairedAppInstallSessionIdentifier:", v62);

      v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "data"));
    }
    else
    {
      v55 = 0;
    }
  }
  objc_msgSend(v68, "setCurrentVehicleState:", v55);
  v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "pairedAppIdentifier"));
  v64 = objc_msgSend(v63, "copy");
  objc_msgSend(v68, "setPairedAppIdentifier:", v64);

  v65 = (void *)objc_claimAutoreleasedReturnValue(+[MapsSyncStore sharedStore](_TtC8MapsSync13MapsSyncStore, "sharedStore"));
  v79 = v68;
  v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v79, 1));
  v71[0] = _NSConcreteStackBlock;
  v71[1] = 3221225472;
  v71[2] = sub_100339B8C;
  v71[3] = &unk_1011B2260;
  objc_copyWeak(&v73, a1 + 7);
  v72 = a1[5];
  objc_msgSend(v65, "saveWithObjects:completionHandler:", v66, v71);

  objc_destroyWeak(&v73);
}

void sub_100339B68(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

VGChargingNetworkStorage *__cdecl sub_100339B84(id a1, VGChargingNetwork *a2)
{
  return (VGChargingNetworkStorage *)VGChargingNetworkStorageFromVGChargingNetwork(a2);
}

void sub_100339B8C(uint64_t a1, void *a2)
{
  id v3;
  NSObject **WeakRetained;
  NSObject **v5;
  NSObject *v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 40));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    v6 = WeakRetained[1];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100339C38;
    v7[3] = &unk_1011AC8B0;
    v8 = v3;
    v9 = *(id *)(a1 + 32);
    dispatch_async(v6, v7);

  }
}

void sub_100339C38(uint64_t a1)
{
  uint64_t v2;
  uint64_t Log;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint32_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 32);
  Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "com.apple.Maps.VirtualGaragePersister");
  v4 = objc_claimAutoreleasedReturnValue(Log);
  v5 = v4;
  if (v2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v7 = *(_QWORD *)(a1 + 32);
      v6 = *(_QWORD *)(a1 + 40);
      v13 = 138412546;
      v14 = v6;
      v15 = 2112;
      v16 = v7;
      v8 = "Failed to persist vehicle: %@ error: %@";
      v9 = v5;
      v10 = OS_LOG_TYPE_ERROR;
      v11 = 22;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v9, v10, v8, (uint8_t *)&v13, v11);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v12 = *(_QWORD *)(a1 + 40);
    v13 = 138412290;
    v14 = v12;
    v8 = "Successfully saved vehicle %@ as MSVehicle.";
    v9 = v5;
    v10 = OS_LOG_TYPE_INFO;
    v11 = 12;
    goto LABEL_6;
  }

}

void sub_10033A054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10033A070(uint64_t a1, void *a2)
{
  id *WeakRetained;
  id *v4;
  id v5;
  id v6;

  v6 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = objc_loadWeakRetained(WeakRetained + 3);
    objc_msgSend(v5, "garagePersister:wantsToUpdateVehicles:", v4, v6);

  }
}

id sub_10033B4F0(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "hairLineAlpha");
}

id sub_10033B504(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "setHairLineAlpha:");
}

void sub_10033B95C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  int v5;
  void *v6;

  v2 = sub_10043245C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "shortcut"));
    v5 = 138412290;
    v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Failed to save favorite button shortcut %@", (uint8_t *)&v5, 0xCu);

  }
}

id sub_10033C9F4(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "setAlpha:", 1.0);
}

id sub_10033CA0C(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[5];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10033CA74;
  v3[3] = &unk_1011AC860;
  v1 = *(_QWORD *)(a1 + 40);
  v3[4] = *(_QWORD *)(a1 + 32);
  return +[UIView animateWithDuration:animations:completion:](UIView, "animateWithDuration:animations:completion:", v3, v1, 0.3);
}

id sub_10033CA74(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "setAlpha:", 0.0);
}

id sub_10033CD2C(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "setFrame:", *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "setFrame:", *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 96), "setFrame:", *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64));
  return objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
}

id sub_10033D6A0()
{
  if (qword_1014D2168 != -1)
    dispatch_once(&qword_1014D2168, &stru_1011B2360);
  return (id)qword_1014D2160;
}

void sub_10033DB1C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "PedestrianARSessionCarPlayConnectionMonitor");
  v2 = (void *)qword_1014D2160;
  qword_1014D2160 = (uint64_t)v1;

}

void sub_10033DE50(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

id sub_10033DE74()
{
  if (qword_1014D2178 != -1)
    dispatch_once(&qword_1014D2178, &stru_1011B2430);
  return (id)qword_1014D2170;
}

void sub_10033DEB4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  os_signpost_id_t v9;
  id WeakRetained;
  void (**v11)(_QWORD, _QWORD, _QWORD);
  void *v12;
  id v13;
  void *v14;
  void (**v15)(_QWORD, _QWORD, _QWORD);
  uint8_t v16[16];

  v5 = a2;
  v6 = sub_10033DE74();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 48);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    *(_WORD *)v16 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_INTERVAL_END, v9, "FetchingCitySelectorView", "", v16, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (!a3
    && v5
    && (v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "sections")),
        v13 = objc_msgSend(v12, "count"),
        v12,
        v13))
  {
    objc_msgSend(WeakRetained, "setResult:", v5);
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "sections"));
    objc_msgSend(WeakRetained, "setSections:", v14);

    v15 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "stateHandler"));
    ((void (**)(_QWORD, id, uint64_t))v15)[2](v15, objc_msgSend(WeakRetained, "state"), 2);

    objc_msgSend(WeakRetained, "setState:", 2);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v11 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "stateHandler"));
    ((void (**)(_QWORD, id, uint64_t))v11)[2](v11, objc_msgSend(WeakRetained, "state"), 3);

    objc_msgSend(WeakRetained, "setState:", 3);
  }

}

void sub_10033E350(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 104));
  _Unwind_Resume(a1);
}

void sub_10033E384(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "sections"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10033E43C;
  v7[3] = &unk_1011B23E8;
  v8 = v3;
  v9 = *(id *)(a1 + 32);
  v6 = v3;
  objc_msgSend(v5, "enumerateObjectsUsingBlock:", v7);

}

void sub_10033E43C(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "pdGuideLocationEntries"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "geoMapItemIdentifier"));
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", v7));

  v8 = v9;
  if (v9)
  {
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v9);
    v8 = v9;
    *a4 = 1;
  }

}

void sub_10033E4C8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  os_signpost_id_t v12;
  id v13;
  NSObject *v14;
  NSObject *v15;
  os_signpost_id_t v16;
  uint8_t v17[16];
  uint8_t buf[16];

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = WeakRetained;
  if (WeakRetained)
  {
    if (v6)
    {
      objc_msgSend(WeakRetained, "setGuideLocations:", 0);
      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
      v9 = sub_10033DE74();
      v10 = objc_claimAutoreleasedReturnValue(v9);
      v11 = v10;
      v12 = *(_QWORD *)(a1 + 48);
      if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_INTERVAL_END, v12, "FetchingCitySelectorViewBatch", "", buf, 2u);
      }

    }
    else
    {
      v13 = sub_10033DE74();
      v14 = objc_claimAutoreleasedReturnValue(v13);
      v15 = v14;
      v16 = *(_QWORD *)(a1 + 48);
      if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v14))
      {
        *(_WORD *)v17 = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_INTERVAL_END, v16, "FetchingCitySelectorViewBatch", "", v17, 2u);
      }

      objc_msgSend(v8, "setGuideLocations:", v5);
      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    }
  }

}

void sub_10033E740(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CitySelectorAPIController");
  v2 = (void *)qword_1014D2170;
  qword_1014D2170 = (uint64_t)v1;

}

void sub_10033FA80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_10033FB28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_10033FB88(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100340098(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1003401F0(id a1)
{
  void *v1;

  v1 = (void *)qword_1014D2188;
  qword_1014D2188 = (uint64_t)&off_101273080;

}

id sub_100341E94(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_updatePageIndicatorVisibility");
  return _objc_msgSend(*(id *)(a1 + 32), "_updateSignHeightConstraintsFrom:to:progress:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(double *)(a1 + 56));
}

void sub_100341EC4(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "steppingPageViewControllerDidChangeSignHeight:", *(_QWORD *)(a1 + 32));

}

uint64_t sub_100341F04(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "window"));

  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
    objc_msgSend(v4, "layoutIfNeeded");

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

id sub_100342460(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_animateSizeClassChange");
}

id sub_100342468(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_sizeClassDidChange");
}

void sub_100345808(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v6;
  void *v7;
  void *v8;
  id v9;
  id v10;

  v6 = a3;
  v7 = *(void **)(a1 + 32);
  v10 = v6;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "contentDownloader"));
  LODWORD(v7) = objc_msgSend(v7, "isEqual:", v8);

  if ((_DWORD)v7)
  {
    v9 = objc_msgSend(*(id *)(a1 + 40), "copy");
    objc_msgSend(v10, "setVenueContents:", v9);

    objc_msgSend(*(id *)(a1 + 48), "_notifyObservers");
    *a4 = 1;
  }

}

id sub_100349880(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "revisionIdentifiers"));
  v6 = objc_msgSend(v5, "indexOfObject:", v4);

  if (v6 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    v7 = 0;
  }
  else
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "routeIdentifiers"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectAtIndexedSubscript:", v6));

  }
  return v7;
}

void sub_100349D14(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  NSNumber *v10;
  void *v11;
  const __CFString *v12;
  void *v13;

  v5 = a2;
  v6 = *(void **)(a1 + 32);
  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectAtIndexedSubscript:", a3));
    objc_msgSend(v5, "setUniqueRouteID:", v7);

  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "uniqueRouteID"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 8), "objectForKeyedSubscript:", v8));
  if (!v9)
  {
    v12 = CFSTR("canNavigate");
    v10 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 40)), "_canRunNavigationForRoute:", v5));
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    v13 = v11;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v13, &v12, 1));

  }
  objc_msgSend(*(id *)(a1 + 48), "setObject:forKeyedSubscript:", v9, v8);

}

NSUUID *__cdecl sub_100349E50(id a1, GEOComposedRoute *a2, unint64_t a3)
{
  return (NSUUID *)-[GEOComposedRoute uniqueRouteID](a2, "uniqueRouteID", a3);
}

void sub_10034A380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10034A3A4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10034A3B4(uint64_t a1)
{

}

void sub_10034A3BC(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v7;
  unsigned int v8;
  id v9;

  v9 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "routeID"));
  v8 = objc_msgSend(v7, "isEqualToData:", *(_QWORD *)(a1 + 32));

  if (v8)
  {
    *a4 = 1;
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  }

}

id sub_10034A570(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_generateCompanionRouteFromComposedRoute:", a2);
}

void sub_10034A964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10034A97C(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v7;
  unsigned int v8;
  id v9;

  v9 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "uniqueRouteID"));
  v8 = objc_msgSend(v7, "isEqual:", *(_QWORD *)(a1 + 32));

  if (v8)
  {
    *a4 = 1;
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  }

}

NSUUID *__cdecl sub_10034AB8C(id a1, GEOComposedRoute *a2, unint64_t a3)
{
  return (NSUUID *)-[GEOComposedRoute revisionIdentifier](a2, "revisionIdentifier", a3);
}

NSArray *__cdecl sub_10034AB94(id a1, GEOComposedRoute *a2, unint64_t a3)
{
  return (NSArray *)-[GEOComposedRoute rideSelections](a2, "rideSelections", a3);
}

NSUUID *__cdecl sub_10034AB9C(id a1, GEOCompanionRouteDetails *a2, unint64_t a3)
{
  void *v3;
  void *v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(-[GEOCompanionRouteDetails revisionID](a2, "revisionID", a3));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID _maps_UUIDWithData:](NSUUID, "_maps_UUIDWithData:", v3));

  return (NSUUID *)v4;
}

GEOComposedRoute *__cdecl sub_10034B110(id a1, NSUUID *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v5;

  v5 = 0;
  v3 = MNGetRouteFromSubpathWithID(a2, CFSTR("planning"), &v5);
  return (GEOComposedRoute *)(id)objc_claimAutoreleasedReturnValue(v3);
}

void sub_10034B144(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("transitRouteUpdate")));
  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "routeWithID:", v5));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "revisionIdentifier"));
    v10 = v6;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v10, 1));
    objc_msgSend(v7, "applyUpdatesToTransitRoute:", v9);

    objc_msgSend(v7, "setRevisionIdentifier:", v8);
  }

}

void sub_10034B660(uint64_t a1)
{
  int v1;
  id v2;
  NSObject *v3;
  _BOOL4 v4;
  const char *v5;
  uint8_t *v6;
  __int16 v7;
  __int16 v8;

  v1 = *(unsigned __int8 *)(a1 + 32);
  v2 = sub_10043214C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);
  if (v1)
  {
    if (v4)
    {
      v8 = 0;
      v5 = "Configured to prefer disk route storage";
      v6 = (uint8_t *)&v8;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, v5, v6, 2u);
    }
  }
  else if (v4)
  {
    v7 = 0;
    v5 = "Configured not to attempt disk route storage";
    v6 = (uint8_t *)&v7;
    goto LABEL_6;
  }

}

void sub_10034BF54(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MNNavigationService sharedService](MNNavigationService, "sharedService"));
  objc_msgSend(v2, "registerObserver:", *(_QWORD *)(a1 + 32));

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v3, "addObserver:selector:name:object:", *(_QWORD *)(a1 + 32), "_trafficAlertVisibilityChanged:", CFSTR("CarTrafficAlertDidChangeVisibility"), 0);

}

void sub_10034BFCC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _BOOL8 v8;
  void *v9;
  void *v10;
  id v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chromeViewController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "mapView"));
  objc_msgSend(v3, "_setApplicationState:", 2);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chromeViewController"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "mapView"));
  objc_msgSend(v5, "_setDisplayedSearchResultsType:", 0);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chromeViewController"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "userLocationView"));
  v8 = 1;
  objc_msgSend(v7, "setMode:animated:", 1, 1);

  v11 = (id)objc_claimAutoreleasedReturnValue(+[MNNavigationService sharedService](MNNavigationService, "sharedService"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "route"));
  objc_msgSend(*(id *)(a1 + 32), "setCurrentRoute:", v9);

  if (objc_msgSend(v11, "navigationState") != 6)
    v8 = objc_msgSend(v11, "navigationState") == 7;
  objc_msgSend(*(id *)(a1 + 32), "setHasArrived:", v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "displayEtaInfo"));

  if (v10)
    objc_msgSend(*(id *)(a1 + 32), "_updateDisplayETA");

}

id sub_10034C168(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MNNavigationService sharedService](MNNavigationService, "sharedService"));
  objc_msgSend(v2, "unregisterObserver:", *(_QWORD *)(a1 + 32));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cameraStyleManager"));
  objc_msgSend(v3, "unregisterObserver:", *(_QWORD *)(a1 + 32));

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v4, "removeObserver:", *(_QWORD *)(a1 + 32));

  return objc_msgSend(*(id *)(a1 + 32), "_cancelAlertDismissTimer");
}

id sub_10034C5DC(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "configureNavigationDisplay:", a2);
}

void sub_10034C94C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10034C970(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "_dismissAlertIfNeeded:withResponse:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_10034CED4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CarMapWidgetNavigationModeController");
  v2 = (void *)qword_1014D2198;
  qword_1014D2198 = (uint64_t)v1;

}

void sub_10034E3C8(id a1, UIAction *a2)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[MNNavigationService sharedService](MNNavigationService, "sharedService"));
  objc_msgSend(v2, "stopNavigationWithReason:", 2);

}

void sub_10034E400(id a1, UIAction *a2)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[MNNavigationService sharedService](MNNavigationService, "sharedService"));
  objc_msgSend(v2, "stopNavigationWithReason:", 3);

}

void sub_10034E438(id a1, UIAction *a2)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[MNNavigationService sharedService](MNNavigationService, "sharedService"));
  objc_msgSend(v2, "advanceToNextLeg");

}

void sub_10034E46C(id a1, UIAction *a2)
{
  id v2;
  NSObject *v3;
  void *v4;
  void *v5;
  NSObject *v6;
  id v7;
  uint8_t v8[16];
  uint8_t buf[16];

  v2 = sub_100431C0C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "User tapped walking button in dynamic island banner", buf, 2u);
  }

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MNNavigationService sharedService](MNNavigationService, "sharedService"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "alternateWalkingRoute"));

  if (v5)
  {
    v6 = objc_claimAutoreleasedReturnValue(+[MNNavigationService sharedService](MNNavigationService, "sharedService"));
    -[NSObject changeTransportType:route:](v6, "changeTransportType:route:", 2, v5);
  }
  else
  {
    v7 = sub_100431C0C();
    v6 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "No remaining walking route found. Cannot transition to walking transport type.", v8, 2u);
    }
  }

}

void sub_10034E568(id a1, UIAction *a2)
{
  id v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  uint8_t buf[16];

  v2 = sub_100431C0C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "User tapped find my button in dynamic island banner", buf, 2u);
  }

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MNNavigationService sharedService](MNNavigationService, "sharedService"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "destination"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "findMyHandleID"));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("findmy://friend/%@"), v6));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", v7));

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10034E6BC;
  v11[3] = &unk_1011AE8F8;
  v12 = v8;
  v10 = v8;
  objc_msgSend(v9, "_maps_openURL:options:completionHandler:", v10, 0, v11);

}

void sub_10034E6BC(uint64_t a1, int a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  id v6;
  uint8_t buf[4];
  uint64_t v8;

  if (a2)
  {
    v6 = (id)objc_claimAutoreleasedReturnValue(+[MNNavigationService sharedService](MNNavigationService, "sharedService"));
    objc_msgSend(v6, "stopNavigationWithReason:", 2);

  }
  else
  {
    v3 = sub_100431C0C();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Error when trying to open find my URL: %@", buf, 0xCu);
    }

  }
}

void sub_10034E7AC(uint64_t a1)
{
  id v2;
  NSObject *v3;
  _QWORD v4[4];
  id v5;
  uint8_t buf[16];

  v2 = sub_100431C0C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "User tapped EV stations button in dynamic island banner", buf, 2u);
  }

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10034E868;
  v4[3] = &unk_1011B1BE0;
  v5 = *(id *)(a1 + 32);
  +[UIApplication _maps_unlockApplicationWithCompletion:](UIApplication, "_maps_unlockApplicationWithCompletion:", v4);

}

void sub_10034E868(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  id v8;

  v3 = a2;
  v4 = sub_100431C0C();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v7 = 138412290;
      v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Error unlocking Maps for EV stations: %@", (uint8_t *)&v7, 0xCu);
    }
  }
  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      LOWORD(v7) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Maps successfully launched; posting notification now",
        (uint8_t *)&v7,
        2u);
    }

    v6 = objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    -[NSObject postNotificationName:object:](v6, "postNotificationName:object:", off_1014A6C00, *(_QWORD *)(a1 + 32));
  }

}

void sub_10034EC0C(uint64_t a1)
{
  void *v2;
  void *v3;
  char *v4;
  void *v5;
  void *v6;
  char *v7;
  void *v8;
  void *v9;
  unsigned int v10;
  void *v11;
  void *v12;
  unsigned int v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  void *v27;
  void *v28;
  double v29;
  _BOOL8 v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  id *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  void *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  void *v59;
  void *v60;
  uint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  int v69;
  int v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  id v74;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "item"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "guidanceState"));
  v4 = (char *)objc_msgSend(v3, "currentLegIndex") + 1;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "item"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "guidanceState"));
  v7 = (char *)objc_msgSend(v6, "numberOfLegs");

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "item"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "guidanceState"));
  v10 = objc_msgSend(v9, "isInArrivalState");

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "item"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "guidanceState"));
  v13 = objc_msgSend(v12, "isInParkingState");

  v14 = (void *)objc_claimAutoreleasedReturnValue(+[MNNavigationService sharedService](MNNavigationService, "sharedService"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "destination"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "findMyHandleID"));

  v17 = (void *)objc_claimAutoreleasedReturnValue(+[MNNavigationService sharedService](MNNavigationService, "sharedService"));
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "alternateWalkingRoute"));

  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "minorText"));
  if (v19)
    v20 = 1;
  else
    v20 = v13;
  v70 = v20;

  v21 = 0;
  v22 = *(_QWORD *)(a1 + 32);
  v23 = *(unsigned __int8 *)(v22 + 200);
  if (*(_BYTE *)(v22 + 200) && v10 && v4 >= v7 && v16)
  {
    v21 = objc_msgSend((id)v22, "_isEligibleToShowFindMyButton");
    v22 = *(_QWORD *)(a1 + 32);
    v23 = *(unsigned __int8 *)(v22 + 200);
  }
  v24 = 0;
  if (v23 && ((v13 ^ 1) & 1) == 0 && v18)
  {
    v24 = objc_msgSend((id)v22, "_isEligibleToShowWalkingButton");
    v22 = *(_QWORD *)(a1 + 32);
    v23 = *(unsigned __int8 *)(v22 + 200);
  }
  v25 = v10 | v13;
  if (v23)
  {
    if (v4 < v7)
      v26 = v25;
    else
      v26 = 0;
    v71 = v26 ^ 1;
    if (v25)
    {
      v27 = (void *)objc_claimAutoreleasedReturnValue(+[MNNavigationService sharedService](MNNavigationService, "sharedService"));
      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "arrivalChargingStationInfo"));
      objc_msgSend(v28, "chargingTime");
      v30 = v29 <= 0.0;

      v22 = *(_QWORD *)(a1 + 32);
      v25 = 1;
      v31 = v26;
    }
    else
    {
      v26 = 0;
      v31 = 0;
      v30 = 1;
    }
  }
  else
  {
    v26 = 0;
    v30 = 1;
    v71 = 1;
    v31 = 1;
  }
  v32 = v26 & v30;
  v33 = v21 ^ 1;
  v73 = v31;
  v34 = (_DWORD)v33 != objc_msgSend(*(id *)(v22 + 144), "isHidden")
     || v24 == objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "isHidden")
     || v31 != objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 112), "isHidden")
     || v26 == objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "isHidden")
     || v32 == objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "isHidden")
     || v30 != objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 152), "isHidden");
  v69 = v34;
  v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contentView"));
  v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "content"));
  v74 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "visibilityFingerprint"));

  v37 = *(void **)(a1 + 32);
  v72 = v32;
  if (v25)
  {
    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "contentView"));
    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "content"));
    v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "headerView"));
    objc_msgSend(v40, "setHidden:", 1);

    v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contentView"));
    v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "content"));
    v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "iconView"));
    objc_msgSend(v43, "setHidden:", 1);

    v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contentView"));
    v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "content"));
    v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "trailingTopView"));
LABEL_32:
    v53 = v46;
LABEL_33:
    v54 = 1;
    goto LABEL_34;
  }
  v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "maneuverItem"));
  v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "laneGuidanceInfo"));

  v49 = *(id **)(a1 + 32);
  if (v48)
  {
    v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "contentView"));
    v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "content"));
    v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "headerView"));
    objc_msgSend(v52, "setHidden:", 0);

    v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contentView"));
    v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "content"));
    v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "iconView"));
    goto LABEL_32;
  }
  v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49[5], "maneuverArtwork"));

  v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contentView"));
  v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v66, "content"));
  v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v67, "headerView"));
  objc_msgSend(v68, "setHidden:", 1);

  v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contentView"));
  v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "content"));
  v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "iconView"));
  v53 = v46;
  if (!v65)
    goto LABEL_33;
  v54 = 0;
LABEL_34:
  objc_msgSend(v46, "setHidden:", v54);

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "setHidden:", v70 ^ 1u);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 144), "setHidden:", v33);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "setHidden:", v24 ^ 1);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 112), "setHidden:", v73);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "setHidden:", v71);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "setHidden:", v72 ^ 1u);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 152), "setHidden:", v30);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "setHidden:", *(_BYTE *)(*(_QWORD *)(a1 + 32) + 200) == 0);
  if (v69)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "invalidateStackViewAxis");
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "updateStackViewAxisIfNeeded");
  }
  v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "maneuverItem"));
  v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "maneuverGuidanceInfo"));
  v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "shieldInfo"));

  if (v57)
    v58 = v25;
  else
    v58 = 1;
  v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contentView"));
  v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "content"));
  v61 = objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "trailingTopView"));
  objc_msgSend((id)v61, "setHidden:", v58);

  v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contentView"));
  v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "content"));
  v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "visibilityFingerprint"));
  LOBYTE(v61) = objc_msgSend(v64, "isEqual:", v74);

  if ((v61 & 1) == 0)
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 88) = 0xBFF0000000000000;
  objc_msgSend(*(id *)(a1 + 32), "_updateConstraints");

}

id sub_1003518A0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_startRecentsTest");
}

void sub_100351930(uint64_t a1)
{
  dispatch_time_t v2;
  _QWORD block[5];

  v2 = dispatch_time(0, 1000000000);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003519A8;
  block[3] = &unk_1011AC860;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_after(v2, (dispatch_queue_t)&_dispatch_main_q, block);
}

id sub_1003519A8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_setupTrayLayoutAndPerformScrollTest");
}

id sub_100351A34(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_performScrollTest");
}

id sub_100352290(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "shouldPersistExpandedIdentifierPath:", a2);
}

id sub_10035254C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "delegate"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "sectionController:nodeSnapshotAtIndexPath:", *(_QWORD *)(a1 + 32), v4));

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifierPath"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sectionIdentifierPath"));
  LODWORD(v5) = objc_msgSend(v7, "hasPrefix:", v8);

  if ((_DWORD)v5)
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifierPath"));
  else
    v9 = 0;

  return v9;
}

void sub_100353038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100353050(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  id v5;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "_snapshotByFilteringDeletionsFromSnapshot:", v4));

  if (v5 != v4)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  return v5;
}

id sub_100353224(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_1003539C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1003539DC(uint64_t a1)
{
  id WeakRetained;
  void *v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "contextMenuForSnapshot:", *(_QWORD *)(a1 + 32)));

  return v3;
}

void sub_1003554A0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD v18[3];

  v16 = *(void **)(a1 + 32);
  v5 = a2;
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "topAnchor"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 32), "topAnchor"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "constraintEqualToAnchor:", v6));
  v18[0] = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "bottomAnchor"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 32), "bottomAnchor"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "constraintEqualToAnchor:", v9));
  v18[1] = v10;
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "centerXAnchor"));

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 40), "objectAtIndexedSubscript:", a3));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "centerXAnchor"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "constraintEqualToAnchor:", v13));
  v18[2] = v14;
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v18, 3));
  objc_msgSend(v16, "addObjectsFromArray:", v15);

}

void sub_1003556B4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v6 = a2;
  if (v5 == a3)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemBlackColor](UIColor, "systemBlackColor"));
    objc_msgSend(v6, "setTintColor:", v7);

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "setActive:", 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "centerXAnchor"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "centerXAnchor"));

    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "constraintEqualToAnchor:", v9));
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(void **)(v11 + 56);
    *(_QWORD *)(v11 + 56) = v10;

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "setActive:", 1);
  }
  else
  {
    v13 = (id)objc_claimAutoreleasedReturnValue(+[UIColor secondaryLabelColor](UIColor, "secondaryLabelColor"));
    objc_msgSend(v6, "setTintColor:", v13);

  }
}

void sub_100355858(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIImageSymbolConfiguration configurationWithPointSize:weight:](UIImageSymbolConfiguration, "configurationWithPointSize:weight:", 4, 38.0));
  v2 = (void *)qword_1014D21B0;
  qword_1014D21B0 = v1;

}

id sub_100355CCC(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_updateContent");
  return objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
}

id sub_10035622C(void *a1, CGFloat a2, double a3, CGFloat a4, CGFloat a5)
{
  id v9;
  id v10;
  void *v11;
  void *v12;
  double v13;
  CGFloat v14;
  id v15;
  void *v16;
  CGContext *CurrentContext;
  CGColor *SRGB;
  void *v19;
  UIImage *ImageFromCurrentImageContext;
  void *v21;
  CGFloat red[5];
  __int128 v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGSize v28;
  CGSize v29;

  v9 = a1;
  if (qword_1014D21C0 != -1)
    dispatch_once(&qword_1014D21C0, &stru_1011B2968);
  v10 = v9;
  *(_QWORD *)&red[0] = v10;
  red[1] = a2;
  red[2] = a3;
  red[3] = a4;
  red[4] = a5;
  v24 = xmmword_100E352C0;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSValue valueWithBytes:objCType:](NSValue, "valueWithBytes:objCType:", red, "{?=@dddd{CGPoint=dd}}"));

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1014D21B8, "objectForKeyedSubscript:", v11));
  if (!v12)
  {
    v13 = ceil(a3);
    v14 = v13 + v13 + a2 * 2.0;
    v15 = v10;
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[UIBezierPath bezierPathWithRoundedRect:cornerRadius:](UIBezierPath, "bezierPathWithRoundedRect:cornerRadius:", v13, v13, a2 + a2, a2 + a2, a2));
    v28.width = v14;
    v28.height = v14;
    UIGraphicsBeginImageContextWithOptions(v28, 0, a5);
    CurrentContext = UIGraphicsGetCurrentContext();
    CGContextSaveGState(CurrentContext);
    CGContextTranslateCTM(CurrentContext, 0.0, 3.0);
    CGContextSaveGState(CurrentContext);
    red[0] = 0.0;
    v26 = 0.0;
    v27 = 0.0;
    v25 = 0.0;
    objc_msgSend(v15, "getRed:green:blue:alpha:", red, &v27, &v26, &v25);

    v25 = a4;
    SRGB = CGColorCreateSRGB(red[0], v27, v26, a4);
    v29.width = 0.0;
    v29.height = v14 + 3.0;
    CGContextSetShadowWithColor(CurrentContext, v29, a3, SRGB);
    CGColorRelease(SRGB);
    CGContextTranslateCTM(CurrentContext, 0.0, -(v14 + 3.0));
    objc_msgSend(v16, "fill");
    CGContextRestoreGState(CurrentContext);
    CGContextRestoreGState(CurrentContext);
    CGContextSetBlendMode(CurrentContext, kCGBlendModeDestinationOut);
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemBlackColor](UIColor, "systemBlackColor"));
    objc_msgSend(v19, "set");

    objc_msgSend(v16, "fill");
    ImageFromCurrentImageContext = UIGraphicsGetImageFromCurrentImageContext();
    v21 = (void *)objc_claimAutoreleasedReturnValue(ImageFromCurrentImageContext);
    UIGraphicsEndImageContext();
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "resizableImageWithCapInsets:", v13 + a2 + 1.5, v13 + a2 + 0.0, v13 + a2 + 1.5, v13 + a2 + 0.0));

    if (v12)
      objc_msgSend((id)qword_1014D21B8, "setObject:forKeyedSubscript:", v12, v11);
  }

  return v12;
}

void sub_1003564CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

void sub_100356624(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v2 = (void *)qword_1014D21B8;
  qword_1014D21B8 = v1;

}

void sub_100358340(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100358364(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  id v5;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    if (v5)
    {
      objc_msgSend(WeakRetained, "_presentAlertForError:", v5);
    }
    else
    {
      objc_msgSend(WeakRetained, "closeAction:", *(_QWORD *)(a1 + 32));
      +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 41, 77, 0);
    }
  }

}

id sub_100359C30(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_alertDidFinishProcessing");
}

void sub_10035B5B8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_10035B5E0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "handleDismissAction:", *(_QWORD *)(a1 + 32));

}

void sub_10035B61C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "handleDismissAction:", *(_QWORD *)(a1 + 32));

}

uint64_t start(int a1, char **a2)
{
  void *v4;

  NSLog(CFSTR("Maps application main() started"));
  v4 = objc_autoreleasePoolPush();
  UIApplicationMain(a1, a2, CFSTR("MapsApp"), CFSTR("MapsAppDelegate"));
  objc_autoreleasePoolPop(v4);
  return 0;
}

ExtensionsActionView *__cdecl sub_10035BB58(id a1, ExtensionsAction *a2, unint64_t a3)
{
  ExtensionsAction *v3;
  ExtensionsActionView *v4;
  void *v5;
  ExtensionsAction *v6;
  _QWORD v8[4];
  ExtensionsAction *v9;

  v3 = a2;
  v4 = objc_alloc_init(ExtensionsActionView);
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[ExtensionsAction title](v3, "title"));
  -[ExtensionsActionView setButtonTitle:](v4, "setButtonTitle:", v5);

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10035BC0C;
  v8[3] = &unk_1011AC860;
  v9 = v3;
  v6 = v3;
  -[ExtensionsActionView setDidTapButton:](v4, "setDidTapButton:", v8);

  return v4;
}

id sub_10035BC0C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "perform");
}

void sub_10035D0AC(uint64_t a1, void *a2, unint64_t a3, _BYTE *a4)
{
  id v7;
  unsigned __int8 v8;
  id v9;

  v7 = a2;
  if (*(_QWORD *)(a1 + 40) <= a3)
  {
    *a4 = 1;
  }
  else
  {
    v9 = v7;
    v8 = objc_msgSend(*(id *)(a1 + 32), "containsObject:", v7);
    v7 = v9;
    if ((v8 & 1) == 0)
    {
      objc_msgSend(*(id *)(a1 + 32), "addObject:", v9);
      v7 = v9;
    }
  }

}

id sub_10035D3B4(uint64_t a1)
{
  id v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  void *v6;
  int v8;
  void *v9;

  v2 = objc_msgSend(*(id *)(a1 + 32), "_integerValueForDefaultsKey:networkDefaultsKey:", CFSTR("HistorySearchLimitKey"), MapsConfig_HistorySearchLimit, off_1014B3348);
  if ((uint64_t)v2 < 0)
    v3 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v3 = (uint64_t)v2;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "addResultSet:withMaxCount:", *(_QWORD *)(a1 + 40), v3);
  v4 = sub_10043222C();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "name"));
    v8 = 138412290;
    v9 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "SearchBarSearchManager - Completed operation: %@", (uint8_t *)&v8, 0xCu);

  }
  return objc_msgSend(*(id *)(a1 + 48), "setDelegate:", 0);
}

id sub_10035D568(uint64_t a1)
{
  id v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  void *v6;
  int v8;
  void *v9;

  v2 = objc_msgSend(*(id *)(a1 + 32), "_integerValueForDefaultsKey:networkDefaultsKey:", CFSTR("RecentsSearchLimitKey"), MapsConfig_RecentsSearchLimit, off_1014B3328);
  if ((uint64_t)v2 < 0)
    v3 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v3 = (uint64_t)v2;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "addResultSet:withMaxCount:", *(_QWORD *)(a1 + 40), v3);
  v4 = sub_10043222C();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "name"));
    v8 = 138412290;
    v9 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "SearchBarSearchManager - Completed operation: %@", (uint8_t *)&v8, 0xCu);

  }
  return objc_msgSend(*(id *)(a1 + 48), "setDelegate:", 0);
}

id sub_10035D714(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  void *v8;
  int v10;
  void *v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "postNotificationName:object:", CFSTR("SearchDidFinishFetchingFindMyHandlesOrAddressBookAddresses"), 0);

  v3 = *(void **)(a1 + 32);
  if (v3 && objc_msgSend(v3, "count"))
  {
    v4 = objc_msgSend(*(id *)(a1 + 40), "_integerValueForDefaultsKey:networkDefaultsKey:", CFSTR("AddressBookSearchLimitKey"), MapsConfig_AddressBookSearchLimit, off_1014B3308);
    if ((uint64_t)v4 < 0)
      v5 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v5 = (uint64_t)v4;
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 24), "addResultSet:withMaxCount:", *(_QWORD *)(a1 + 32), v5);
  }
  v6 = sub_10043222C();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "name"));
    v10 = 138412290;
    v11 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "SearchBarSearchManager - Completed operation: %@", (uint8_t *)&v10, 0xCu);

  }
  return objc_msgSend(*(id *)(a1 + 48), "setDelegate:", 0);
}

void sub_10035D8F8(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  int v7;
  void *v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "postNotificationName:object:", CFSTR("SearchDidFinishFetchingFindMyHandlesOrAddressBookAddresses"), 0);

  v3 = *(void **)(a1 + 32);
  if (v3 && objc_msgSend(v3, "count"))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 24), "addResultSet:withMaxCount:", *(_QWORD *)(a1 + 32), 0x7FFFFFFFFFFFFFFFLL);
    objc_msgSend(*(id *)(a1 + 48), "setDelegate:", 0);
  }
  v4 = sub_10043222C();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "name"));
    v7 = 138412290;
    v8 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "SearchBarSearchManager - Completed operation: %@", (uint8_t *)&v7, 0xCu);

  }
}

void sub_10035E450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,id location)
{
  id *v35;

  objc_destroyWeak(v35);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_10035E474()
{
  if (qword_1014D21D0 != -1)
    dispatch_once(&qword_1014D21D0, &stru_1011B2A38);
  return (id)qword_1014D21C8;
}

void sub_10035E4B4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  _QWORD v4[5];
  id v5;
  id v6[2];

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10035E550;
  v4[3] = &unk_1011AE810;
  objc_copyWeak(v6, (id *)(a1 + 48));
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(a1 + 40);
  v6[1] = *(id *)(a1 + 56);
  v4[4] = v2;
  v5 = v3;
  dispatch_sync((dispatch_queue_t)&_dispatch_main_q, v4);

  objc_destroyWeak(v6);
}

void sub_10035E550(uint64_t a1)
{
  id *WeakRetained;
  id *v3;
  void *v4;
  AutocompleteItemSource *v5;
  id v6;
  NSObject *v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  os_signpost_id_t v11;
  void *v12;
  __int16 v13[8];
  uint8_t buf[16];

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[3], "filteredResultsWithBackfill:", *(_QWORD *)(a1 + 56)));
    v5 = -[AutocompleteItemSource initWithAutocompleteItems:]([AutocompleteItemSource alloc], "initWithAutocompleteItems:", v4);
    v6 = sub_10043222C();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "SearchBarSearchManager - collected results", buf, 2u);
    }

    v8 = sub_10035E474();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    v10 = v9;
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
    if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
    {
      v13[0] = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_INTERVAL_END, v11, "CollectingClientResults", "", (uint8_t *)v13, 2u);
    }

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "delegate"));
    objc_msgSend(v12, "receivedSearchResults:forContext:", v5, *(_QWORD *)(a1 + 40));

  }
}

void sub_10035E72C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "SearchBarSearchManager");
  v2 = (void *)qword_1014D21C8;
  qword_1014D21C8 = (uint64_t)v1;

}

BOOL sub_10035EEAC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  double v8;
  _BOOL8 v9;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "scheduledDepartureDate"));
  v5 = v4;
  if (v4)
    v6 = v4;
  else
    v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "liveDepartureDate"));
  v7 = v6;

  objc_msgSend(v7, "timeIntervalSinceDate:", *(_QWORD *)(a1 + 32));
  v9 = v8 <= 86400.0;

  return v9;
}

void sub_10035F56C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

id sub_10035F58C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id *v6;
  id WeakRetained;
  unint64_t v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  _BOOL8 v23;
  void *v24;
  int v25;
  _BOOL8 v26;
  void *v27;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  _QWORD v46[4];
  id v47;
  void *v48;
  void *v49;
  void *v50;

  v5 = a3;
  v6 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = (unint64_t)objc_msgSend(WeakRetained, "_sectionTypeForSectionIndex:", a2);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "traitCollection"));
  v10 = objc_msgSend(v9, "userInterfaceIdiom");

  if (v10 != (id)5)
  {
    if (v8 == 3)
    {
      v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutDimension estimatedDimension:](NSCollectionLayoutDimension, "estimatedDimension:", 104.0));
      v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutDimension estimatedDimension:](NSCollectionLayoutDimension, "estimatedDimension:", 54.0));
      v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutSize sizeWithWidthDimension:heightDimension:](NSCollectionLayoutSize, "sizeWithWidthDimension:heightDimension:", v29, v30));

      v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutItem itemWithLayoutSize:](NSCollectionLayoutItem, "itemWithLayoutSize:", v45));
      v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutSpacing fixedSpacing:](NSCollectionLayoutSpacing, "fixedSpacing:", 5.0));
      v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutSpacing fixedSpacing:](NSCollectionLayoutSpacing, "fixedSpacing:", 5.0));
      v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutEdgeSpacing spacingForLeading:top:trailing:bottom:](NSCollectionLayoutEdgeSpacing, "spacingForLeading:top:trailing:bottom:", v32, 0, v33, 0));
      objc_msgSend(v31, "setEdgeSpacing:", v34);

      v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutDimension estimatedDimension:](NSCollectionLayoutDimension, "estimatedDimension:", 104.0));
      v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutDimension estimatedDimension:](NSCollectionLayoutDimension, "estimatedDimension:", 54.0));
      v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutSize sizeWithWidthDimension:heightDimension:](NSCollectionLayoutSize, "sizeWithWidthDimension:heightDimension:", v35, v36));

      v49 = v31;
      v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v49, 1));
      v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutGroup horizontalGroupWithLayoutSize:subitems:](NSCollectionLayoutGroup, "horizontalGroupWithLayoutSize:subitems:", v37, v38));

      v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutSection sectionWithGroup:](NSCollectionLayoutSection, "sectionWithGroup:", v39));
      objc_msgSend(v20, "setOrthogonalScrollingBehavior:", 1);
      objc_msgSend(v20, "setContentInsets:", 8.0, 16.0, 0.0, 16.0);
      objc_msgSend(v20, "setInterGroupSpacing:", 7.0);
      v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutDimension fractionalWidthDimension:](NSCollectionLayoutDimension, "fractionalWidthDimension:", 1.0));
      v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutDimension estimatedDimension:](NSCollectionLayoutDimension, "estimatedDimension:", 54.0));
      v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutSize sizeWithWidthDimension:heightDimension:](NSCollectionLayoutSize, "sizeWithWidthDimension:heightDimension:", v40, v41));

      v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutBoundarySupplementaryItem boundarySupplementaryItemWithLayoutSize:elementKind:alignment:](NSCollectionLayoutBoundarySupplementaryItem, "boundarySupplementaryItemWithLayoutSize:elementKind:alignment:", v42, UICollectionElementKindSectionHeader, 1));
      objc_msgSend(v43, "setPinToVisibleBounds:", 0);
      v48 = v43;
      v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v48, 1));
      objc_msgSend(v20, "setBoundarySupplementaryItems:", v44);

      v46[0] = _NSConcreteStackBlock;
      v46[1] = 3221225472;
      v46[2] = sub_10035FBE8;
      v46[3] = &unk_1011B2A88;
      objc_copyWeak(&v47, v6);
      objc_msgSend(v20, "setVisibleItemsInvalidationHandler:", v46);
      objc_destroyWeak(&v47);

      goto LABEL_16;
    }
    if (!v8)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutDimension estimatedDimension:](NSCollectionLayoutDimension, "estimatedDimension:", 104.0));
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutDimension estimatedDimension:](NSCollectionLayoutDimension, "estimatedDimension:", 54.0));
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutSize sizeWithWidthDimension:heightDimension:](NSCollectionLayoutSize, "sizeWithWidthDimension:heightDimension:", v11, v12));

      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutItem itemWithLayoutSize:](NSCollectionLayoutItem, "itemWithLayoutSize:", v13));
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutDimension estimatedDimension:](NSCollectionLayoutDimension, "estimatedDimension:", 104.0));
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutDimension estimatedDimension:](NSCollectionLayoutDimension, "estimatedDimension:", 54.0));
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutSize sizeWithWidthDimension:heightDimension:](NSCollectionLayoutSize, "sizeWithWidthDimension:heightDimension:", v15, v16));

      v50 = v14;
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v50, 1));
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutGroup horizontalGroupWithLayoutSize:subitems:](NSCollectionLayoutGroup, "horizontalGroupWithLayoutSize:subitems:", v17, v18));

      v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutSection sectionWithGroup:](NSCollectionLayoutSection, "sectionWithGroup:", v19));
      objc_msgSend(v20, "setInterGroupSpacing:", 7.0);
      objc_msgSend(v20, "setOrthogonalScrollingBehavior:", 1);
      objc_msgSend(v20, "setContentInsets:", 2.0, 16.0, 0.0, 16.0);

      goto LABEL_16;
    }
  }
  v21 = objc_msgSend(objc_alloc((Class)UICollectionLayoutListConfiguration), "initWithAppearance:", 2);
  v22 = v21;
  v23 = v8 == 7 || v8 == 1;
  objc_msgSend(v21, "setShowsSeparators:", v23);
  if (v8 == 7)
  {
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "separatorConfiguration"));
    MUButtonCellSeparatorInsets();
    objc_msgSend(v24, "setBottomSeparatorInsets:");
    objc_msgSend(v22, "setSeparatorConfiguration:", v24);

    v25 = 0;
LABEL_12:
    v26 = v8 != 8;
    goto LABEL_13;
  }
  v25 = v8 == 4;
  if ((v8 | 4) != 4)
    goto LABEL_12;
  v26 = 0;
LABEL_13:
  objc_msgSend(v22, "setHeaderMode:", v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor clearColor](UIColor, "clearColor"));
  objc_msgSend(v22, "setBackgroundColor:", v27);

  objc_msgSend(v22, "setHeaderTopPadding:", 8.0);
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutSection sectionWithListConfiguration:layoutEnvironment:](NSCollectionLayoutSection, "sectionWithListConfiguration:layoutEnvironment:", v22, v5));
  if (((sub_1002A8AA0(*(void **)(a1 + 32)) == 5) & ~v25) == 0)
    objc_msgSend(v20, "setContentInsets:", 8.0, 16.0, 0.0, 16.0);

LABEL_16:
  return v20;
}

void sub_10035FBCC(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10035FBE8(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_updateDeparturesHeaderTitles");
    WeakRetained = v2;
  }

}

void sub_100360758(uint64_t a1)
{
  _QWORD *v1;
  void *v2;
  id v3;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = (void *)v1[55];
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "departures"));
  objc_msgSend(v1, "departureDataProvider:updatedDepartures:", v2, v3);

}

void sub_100360CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100360D10(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  uint8_t buf[4];
  void *v15;
  __int16 v16;
  id v17;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = sub_1004325AC();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "description"));
      v10 = objc_msgSend(*(id *)(a1 + 32), "muid");
      *(_DWORD *)buf = 138412546;
      v15 = v9;
      v16 = 2048;
      v17 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Error %@ when attempting to refine transit line muid %lld", buf, 0x16u);

    }
  }
  if (objc_msgSend(v5, "count"))
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100360E7C;
    v11[3] = &unk_1011AD1E8;
    objc_copyWeak(&v13, (id *)(a1 + 40));
    v12 = v5;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v11);

    objc_destroyWeak(&v13);
  }

}

void sub_100360E7C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "firstObject"));
    v3 = (void *)*((_QWORD *)WeakRetained + 38);
    *((_QWORD *)WeakRetained + 38) = v2;

    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)WeakRetained + 25), "snapshot"));
    objc_msgSend(*((id *)WeakRetained + 25), "applySnapshot:animatingDifferences:", v4, 0);

  }
}

void sub_100361A08(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "identifier"));
  v7 = objc_msgSend(v6, "muid");
  v8 = *(id *)(*(_QWORD *)(a1 + 32) + 240);

  if (v7 == v8)
  {
    objc_msgSend(*(id *)(a1 + 32), "setSelectedTransitLine:", v11);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "headerTitleView"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "artwork"));
    objc_msgSend(v9, "setArtwork:", v10);

    *a4 = 1;
  }

}

void sub_100361AC4(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v7;
  void *v8;
  double v9;
  double v10;
  void *v11;
  double v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;

  v16 = a2;
  if (objc_msgSend(v16, "stationIdentifier") == *(id *)(*(_QWORD *)(a1 + 32) + 232))
  {
    *a4 = 1;
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 224) = a3;
    v7 = objc_alloc((Class)GEOLocation);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "location"));
    objc_msgSend(v8, "lat");
    v10 = v9;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "location"));
    objc_msgSend(v11, "lng");
    v13 = objc_msgSend(v7, "initWithLatitude:longitude:", v10, v12);
    v14 = *(_QWORD *)(a1 + 32);
    v15 = *(void **)(v14 + 208);
    *(_QWORD *)(v14 + 208) = v13;

  }
}

void sub_1003623C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1003623E4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  _QWORD block[4];
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  __int128 v14;
  uint64_t v15;

  v5 = a2;
  v6 = a3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003624C0;
  block[3] = &unk_1011B2B28;
  objc_copyWeak(&v13, (id *)(a1 + 40));
  v14 = *(_OWORD *)(a1 + 48);
  v15 = *(_QWORD *)(a1 + 64);
  v10 = v6;
  v11 = v5;
  v12 = *(_QWORD *)(a1 + 32);
  v7 = v5;
  v8 = v6;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  objc_destroyWeak(&v13);
}

void sub_1003624C0(uint64_t a1)
{
  id WeakRetained;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  NSObject *v23;
  id v24;
  uint64_t v25;
  int v26;
  id v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (!WeakRetained)
    goto LABEL_19;
  if (*(_QWORD *)(a1 + 32))
  {
    v3 = sub_1004325AC();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "description"));
      v6 = *(_QWORD *)(a1 + 64);
      v7 = *(_QWORD *)(a1 + 72);
      v8 = *(_QWORD *)(a1 + 80);
      v26 = 138413058;
      v27 = v5;
      v28 = 2048;
      v29 = v6;
      v30 = 2048;
      v31 = v7;
      v32 = 2048;
      v33 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Error %@ for stationId %llu lineId %llu tripId %llu", (uint8_t *)&v26, 0x2Au);

    }
    v9 = objc_msgSend(WeakRetained, "isNetworkError:", *(_QWORD *)(a1 + 32));
    if (!objc_msgSend(*(id *)(a1 + 40), "count"))
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "departureDataProvider"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "departures"));
      v12 = objc_msgSend(v11, "count");

      if (!v12)
      {
        if (v9)
          v25 = 4;
        else
          v25 = 3;
        objc_msgSend(*(id *)(a1 + 48), "updateDeparturesSectionForNetworkState:", v25);
        goto LABEL_19;
      }
    }
    if (v9)
    {
      objc_msgSend(WeakRetained, "updateStopsSectionForNetworkState:", 4);
      goto LABEL_19;
    }
  }
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "firstObject"));
  objc_msgSend(WeakRetained, "processUpdatedDepartureSequencesFromMapItem:", v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "_transitInfo"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "transitTripStops"));
  if (objc_msgSend(v15, "count"))
  {
    objc_msgSend(WeakRetained, "updateStopsSectionForNetworkState:", 1);
  }
  else
  {
    v16 = sub_1004325AC();
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = *(void **)(a1 + 64);
      v19 = *(_QWORD *)(a1 + 72);
      v20 = *(_QWORD *)(a1 + 80);
      v26 = 134218496;
      v27 = v18;
      v28 = 2048;
      v29 = v19;
      v30 = 2048;
      v31 = v20;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "No stops found departing station muid %llu w/ lineId %llu tripId %llu", (uint8_t *)&v26, 0x20u);
    }

    objc_msgSend(WeakRetained, "updateStopsSectionForNetworkState:", 3);
    objc_msgSend(WeakRetained, "selectDeparture");
  }
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "composedRoute"));

  if (!v21)
  {
    v22 = sub_1004325AC();
    v23 = objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      v24 = objc_msgSend(WeakRetained, "selectedTripIdentifier");
      v26 = 134217984;
      v27 = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "No trip route provided for the requested trip id %llu", (uint8_t *)&v26, 0xCu);
    }

  }
  objc_msgSend(WeakRetained, "setBoardingStationMapItem:", v13);

LABEL_19:
}

void sub_100362BA4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_100362BD4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  id v12;
  __int128 v13;
  uint64_t v14;

  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "firstObject"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100362CB0;
  v9[3] = &unk_1011B2B78;
  objc_copyWeak(&v12, (id *)(a1 + 32));
  v13 = *(_OWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 56);
  v10 = v5;
  v11 = v6;
  v7 = v6;
  v8 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v9);

  objc_destroyWeak(&v12);
}

void sub_100362CB0(uint64_t a1)
{
  id *WeakRetained;
  id *v3;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  NSObject *v25;
  id v26;
  void *v27;
  int v28;
  id v29;
  __int16 v30;
  id v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    if (*(_QWORD *)(a1 + 32))
    {
      v4 = sub_1004325AC();
      v5 = objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "description"));
        v7 = *(void **)(a1 + 56);
        v8 = *(_QWORD *)(a1 + 64);
        v9 = *(_QWORD *)(a1 + 72);
        v28 = 138413058;
        v29 = v6;
        v30 = 2048;
        v31 = v7;
        v32 = 2048;
        v33 = v8;
        v34 = 2048;
        v35 = v9;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Error %@ for stationId %llu lineId %llu tripId %llu", (uint8_t *)&v28, 0x2Au);

      }
      if (objc_msgSend(v3, "isNetworkError:", *(_QWORD *)(a1 + 32)))
        v10 = 4;
      else
        v10 = 3;
      objc_msgSend(v3, "updateStopsSectionForNetworkState:", v10);
    }
    else
    {
      v11 = *(id *)(a1 + 72);
      if (v11 == objc_msgSend(WeakRetained, "selectedTripIdentifier"))
      {
        v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_transitInfo"));
        v13 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject transitTripStops](v12, "transitTripStops"));
        if (objc_msgSend(v13, "count"))
        {
          objc_msgSend(v3, "updateStopsSectionForNetworkState:", 1);
          objc_msgSend(v3[24], "buildTransitTripStopItemsWithTransitStops:boardingStopDepartureDate:maintainingCollapsedState:", v13, v3[19], 0);
          if (objc_msgSend(v3, "isViewLoaded"))
          {
            objc_msgSend(v3, "_rebuildStopsSection");
            objc_msgSend(v3, "_updateStopsSectionHeader");
          }
        }
        else
        {
          v16 = sub_1004325AC();
          v17 = objc_claimAutoreleasedReturnValue(v16);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            v18 = *(void **)(a1 + 56);
            v19 = *(void **)(a1 + 64);
            v20 = *(_QWORD *)(a1 + 72);
            v28 = 134218496;
            v29 = v18;
            v30 = 2048;
            v31 = v19;
            v32 = 2048;
            v33 = v20;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "No stops found departing station muid %llu w/ lineId %llu tripId %llu", (uint8_t *)&v28, 0x20u);
          }

          objc_msgSend(v3, "updateStopsSectionForNetworkState:", 3);
        }
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_transitInfo"));
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "incidents"));
        objc_msgSend(v3, "setIncidents:", v22);

        v23 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject composedRoute](v12, "composedRoute"));
        if (!v23)
        {
          v24 = sub_1004325AC();
          v25 = objc_claimAutoreleasedReturnValue(v24);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          {
            v26 = objc_msgSend(v3, "selectedTripIdentifier");
            v28 = 134217984;
            v29 = v26;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "No trip route provided for the requested trip id %llu", (uint8_t *)&v28, 0xCu);
          }

        }
        v27 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject composedRoute](v12, "composedRoute"));
        objc_msgSend(v3, "setSelectedTripRoute:", v27);

        objc_msgSend(v3, "selectDeparture");
      }
      else
      {
        v14 = sub_1004325AC();
        v12 = objc_claimAutoreleasedReturnValue(v14);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          v15 = *(void **)(a1 + 72);
          v28 = 134218240;
          v29 = v15;
          v30 = 2048;
          v31 = objc_msgSend(v3, "selectedTripIdentifier");
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Received the stops response for tripIdentifier %llu, but the currently selected tripIdentifier is %llu", (uint8_t *)&v28, 0x16u);
        }
      }

    }
  }

}

void sub_100363CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100363CD0(_QWORD *a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v6 = a2;
  v7 = objc_msgSend(v6, "unsignedIntegerValue");
  v8 = (id)a1[6];
  if (v7 == v8)
  {
    *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 1;
    *a4 = 1;
    v8 = (id)a1[6];
  }
  if (v7 > v8)
  {
    v9 = (void *)a1[4];
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:"));
    v12 = v10;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v12, 1));
    objc_msgSend(v9, "insertSectionsWithIdentifiers:beforeSectionWithIdentifier:", v11, v6);

    *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 1;
    *a4 = 1;
  }

}

id sub_1003641D0(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "selectDeparture");
  return objc_msgSend(*(id *)(a1 + 32), "_updateDeparturesHeaderTitles");
}

void sub_10036453C(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  id v4;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = (void *)v2[55];
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "selectedDepartureSequence"));
  objc_msgSend(v2, "departureDataProvider:selectedDepartureSequence:withIndex:", v3, v4, *(_QWORD *)(a1 + 40));

}

void sub_10036540C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100365424(uint64_t a1, void *a2, uint64_t a3)
{
  id result;

  result = objc_msgSend(a2, "unsignedIntegerValue");
  if (result == *(id *)(a1 + 40))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a3;
  return result;
}

void sub_100366654(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100366670(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100366714;
  v5[3] = &unk_1011AD1E8;
  objc_copyWeak(&v7, (id *)(a1 + 32));
  v6 = v3;
  v4 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v5);

  objc_destroyWeak(&v7);
}

void sub_100366714(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "setPinnedTransitLine:", *(_QWORD *)(a1 + 32) != 0);
    WeakRetained = v3;
  }

}

void sub_100366898(id a1, NSError *a2)
{
  NSError *v2;
  id v3;
  NSObject *v4;
  int v5;
  NSError *v6;

  v2 = a2;
  if (v2)
  {
    v3 = sub_1004325AC();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Error when attempting to pin a transit line: %@", (uint8_t *)&v5, 0xCu);
    }

  }
}

void sub_10036698C(id a1, MSCollectionTransitItem *a2)
{
  MSCollectionTransitItem *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  uint8_t buf[4];
  id v10;
  MSCollectionTransitItem *v11;

  v2 = a2;
  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[MapsSyncStore sharedStore](_TtC8MapsSync13MapsSyncStore, "sharedStore"));
    v11 = v2;
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v11, 1));
    v8 = 0;
    objc_msgSend(v3, "deleteWithObjects:error:", v4, &v8);
    v5 = v8;

    if (v5)
    {
      v6 = sub_1004325AC();
      v7 = objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v10 = v5;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Error when attempting to unpin a transit line: %@", buf, 0xCu);
      }

    }
  }

}

void sub_100366B6C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100366B90(uint64_t a1, void *a2)
{
  id v3;
  id *WeakRetained;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];

  v3 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v15 = a1;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v5 = v3;
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v17;
      while (2)
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(_QWORD *)v17 != v8)
            objc_enumerationMutation(v5);
          v10 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)i);
          v11 = objc_alloc((Class)MSPTransitStorageLine);
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "transitLineStorage"));
          v13 = objc_msgSend(v11, "initWithData:", v12);

          v14 = objc_msgSend(WeakRetained[47], "muid");
          if (v14 == objc_msgSend(v13, "muid"))
          {
            (*(void (**)(void))(*(_QWORD *)(v15 + 32) + 16))();

            goto LABEL_12;
          }

        }
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
        if (v7)
          continue;
        break;
      }
    }

    (*(void (**)(void))(*(_QWORD *)(v15 + 32) + 16))();
  }
LABEL_12:

}

id sub_1003675C4()
{
  if (qword_1014D21E0 != -1)
    dispatch_once(&qword_1014D21E0, &stru_1011B2C98);
  return (id)qword_1014D21D8;
}

id sub_100367604(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setTemporaryDisplayRate:forDuration:", 0, 0.0);
  return _objc_msgSend(*(id *)(a1 + 32), "_cancelWaitForNoMovement");
}

void sub_100367F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100367F44(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id WeakRetained;
  uint8_t v5[16];

  v2 = sub_1003675C4();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Resetting temporary display rate", v5, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setTemporaryDisplayRate:forDuration:", 0, 0.0);

}

void sub_1003683F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100368410(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_checkForRecentMovement");
    WeakRetained = v2;
  }

}

__CFString *sub_1003692E8(unint64_t a1)
{
  __CFString *v1;
  void *v2;

  if (a1 >= 4)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a1));
    v1 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Unknown (%@)"), v2));

  }
  else
  {
    v1 = off_1011B2CB8[a1];
  }
  return v1;
}

__CFString *sub_100369364(uint64_t a1)
{
  void *v1;
  __CFString *v2;

  if (a1)
  {
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a1));
    v2 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Unknown (%@)"), v1));

  }
  else
  {
    v2 = CFSTR("Linear");
  }
  return v2;
}

__CFString *sub_1003693D8(unint64_t a1)
{
  __CFString *v1;
  void *v2;

  if (a1 >= 3)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a1));
    v1 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Unknown (%@)"), v2));

  }
  else
  {
    v1 = off_1011B2CD8[a1];
  }
  return v1;
}

void sub_100369538(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "ChromeNavigationDisplayRateThrottle");
  v2 = (void *)qword_1014D21D8;
  qword_1014D21D8 = (uint64_t)v1;

}

id sub_1003697EC(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  id v5;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  v5 = objc_msgSend(objc_alloc((Class)objc_opt_class(v3)), "initWithResolvedThirdPartyLink:mediaType:", v4, *(_QWORD *)(a1 + 40));

  return v5;
}

uint64_t sub_100369BF4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100369C8C(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSDateComponentsFormatter);
  v2 = (void *)qword_1014D21E8;
  qword_1014D21E8 = (uint64_t)v1;

  objc_msgSend((id)qword_1014D21E8, "setZeroFormattingBehavior:", 14);
  objc_msgSend((id)qword_1014D21E8, "setAllowedUnits:", 64);
  objc_msgSend((id)qword_1014D21E8, "setMaximumUnitCount:", 1);
  objc_msgSend((id)qword_1014D21E8, "setUnitsStyle:", 1);
}

id sub_10036BCA8(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 56);
  if (*(_BYTE *)(v2 + 74))
  {
    objc_msgSend(v3, "setHidden:", 0);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "setHidden:", 0);
    return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "setProgress:", 0.0);
  }
  else
  {
    objc_msgSend(v3, "setHidden:", 1);
    return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "setHidden:", 1);
  }
}

id sub_10036C3C4()
{
  if (qword_1014D2200 != -1)
    dispatch_once(&qword_1014D2200, &stru_1011B2F18);
  return (id)qword_1014D21F8;
}

void sub_10036C900(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10036CB28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10036CB4C(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  unsigned __int8 v11;
  void *v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  NSObject *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  _OWORD v25[3];
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (!WeakRetained)
    goto LABEL_17;
  v30 = 0;
  v28 = 0u;
  v29 = 0u;
  v27 = 0u;
  +[StartNavigationDetailsBuilder defaultNavigationDetailsOptions](StartNavigationDetailsBuilder, "defaultNavigationDetailsOptions");
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentRoutePlanningSessionConfiguration"));
  *(_QWORD *)&v28 = objc_msgSend(v3, "shouldRestoreToLowGuidance");

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observedRoutePlanningSession"));
  LOBYTE(v29) = objc_msgSend(v4, "sessionInitiator") == (id)8;

  v5 = sub_10036C3C4();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v25[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Navigation auto launch timer fired", (uint8_t *)v25, 2u);
  }

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "observedRoutePlanningSession"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "currentRouteCollection"));

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentRoutePlanningSessionConfiguration"));
  if (!objc_msgSend(v9, "shouldStartShortestRoute"))
    goto LABEL_7;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentRoutePlanningSessionConfiguration"));
  v11 = objc_msgSend(v10, "shouldStartFastestRoute");

  if ((v11 & 1) == 0)
  {
    v9 = v8;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "routeCollectionByChangingCurrentRouteIndex:", objc_msgSend(v8, "shortestRouteIndex")));
LABEL_7:

  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentRoutePlanningSessionConfiguration"));
  v13 = objc_msgSend(v12, "shouldStartFastestRoute");

  if (v13)
  {
    v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "routeCollectionByChangingCurrentRouteIndex:", objc_msgSend(v8, "fastestRouteIndex")));

    v8 = (void *)v14;
  }
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "currentRoute"));
  v16 = (unint64_t)objc_msgSend(v15, "source") & 0xFFFFFFFFFFFFFFFELL;

  if (v16 == 2)
    v30 = 1;
  if (objc_msgSend(v8, "count"))
  {
    v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "chromeViewController"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject currentTraits](v17, "currentTraits"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "observedRoutePlanningSession"));
    v20 = objc_msgSend(v19, "sessionInitiator");
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observedRoutePlanningSession"));
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "configuration"));
    v23 = objc_msgSend(v22, "isResumingMultipointRoute");
    v25[0] = v27;
    v25[1] = v28;
    v25[2] = v29;
    v26 = v30;
    objc_msgSend(WeakRetained, "beginNavigationWithRouteCollection:navigationDetailsOptions:mapServiceTraits:sessionInitiator:isResumingMultipointRoute:", v8, v25, v18, v20, v23);

  }
  else
  {
    v24 = sub_10036C3C4();
    v17 = objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v25[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Tried to start navigation from auto launch timer without a route", (uint8_t *)v25, 2u);
    }
  }

LABEL_17:
}

id sub_10036D170(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "handoffDestinationToExternalDevice:", *(_QWORD *)(a1 + 40));
}

void sub_10036D260(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  uint64_t v5;
  char isKindOfClass;
  void *v7;
  void *v8;
  id v9;
  const __CFString *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;

  v15 = a3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chromeViewController"));
  v5 = objc_opt_class(IOSChromeViewController);
  isKindOfClass = objc_opt_isKindOfClass(v4, v5);

  if ((isKindOfClass & 1) != 0)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chromeViewController"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
    v9 = objc_msgSend(v7, "currentUITargetForAnalytics");
    v10 = sub_10052CA34(v15);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    objc_msgSend(v8, "captureUserAction:onTarget:eventValue:", 9020, v9, v11);

  }
  if (v15)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedMapsDelegate](UIApplication, "sharedMapsDelegate"));
    v13 = CarInterruptionUserInfoForDestinationHandoffFailure(*(void **)(a1 + 40), v15);
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    objc_msgSend(v12, "interruptApplicationWithKind:userInfo:completionHandler:", 3, v14, 0);

  }
}

void sub_10036D4F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10036D50C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint8_t v14[128];
  uint8_t buf[4];
  id v16;

  v2 = sub_10036C3C4();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = objc_msgSend(*(id *)(a1 + 32), "count");
    *(_DWORD *)buf = 134217984;
    v16 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Calling %lu navigation completion blocks", buf, 0xCu);
  }

  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v5 = *(id *)(a1 + 32);
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v11;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v11 != v8)
          objc_enumerationMutation(v5);
        (*(void (**)(_QWORD))(*(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)v9) + 16))(*(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)v9));
        v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v7);
  }

}

void sub_10036EA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,id a60)
{
  uint64_t v60;

  _Block_object_dispose((const void *)(v60 - 208), 8);
  objc_destroyWeak(location);
  objc_destroyWeak(&a60);
  _Unwind_Resume(a1);
}

void sub_10036EAC8(uint64_t a1)
{
  _QWORD *WeakRetained;
  uint64_t v3;
  void *v4;
  _QWORD *v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained[3];
    if (v3)
      LOBYTE(v3) = WeakRetained[4] != 0;
    if (!*(_BYTE *)(a1 + 40) && (v3 & 1) == 0)
    {
      v5 = WeakRetained;
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "iosBasedChromeViewController"));
      objc_msgSend(v4, "updateHikingMapConfiguration");

      WeakRetained = v5;
    }
  }

}

void sub_10036EB34(uint64_t a1, int a2)
{
  id v4;
  NSObject *v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  int v9;
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  int v16;

  v4 = sub_10036C3C4();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    v7 = *(_QWORD *)(a1 + 56);
    v8 = *(_QWORD *)(a1 + 64);
    v9 = 134349825;
    v10 = WeakRetained;
    v11 = 2049;
    v12 = v7;
    v13 = 2049;
    v14 = v8;
    v15 = 1025;
    v16 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[%{public}p] Got result for location %{private}f, %{private}f: %{private}d", (uint8_t *)&v9, 0x26u);

  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) |= a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10036EC30(uint64_t a1)
{
  _QWORD *WeakRetained;
  int v3;
  id v4;
  NSObject *v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  _QWORD *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    v3 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    v4 = sub_10036C3C4();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    v6 = os_log_type_enabled(v5, OS_LOG_TYPE_INFO);
    if (v3)
    {
      if (v6)
      {
        v10 = 134349056;
        v11 = WeakRetained;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[%{public}p] Found at least one hiking waypoint", (uint8_t *)&v10, 0xCu);
      }

      v7 = *(_QWORD *)(a1 + 32);
      v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "chromeViewController"));
      v8 = objc_claimAutoreleasedReturnValue(-[NSObject acquireHikingMapToken](v5, "acquireHikingMapToken"));
      if (v7)
      {
        v9 = (void *)WeakRetained[3];
        WeakRetained[3] = v8;
      }
      else
      {
        v9 = (void *)WeakRetained[4];
        WeakRetained[4] = v8;
      }

    }
    else if (v6)
    {
      v10 = 134349056;
      v11 = WeakRetained;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[%{public}p] Found no hiking waypoints", (uint8_t *)&v10, 0xCu);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

id sub_10036F6A8(uint64_t a1)
{
  id result;

  if (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", CFSTR("NavigationForceModernMapMitigation")))
    return objc_msgSend(*(id *)(a1 + 40), "_checkModernMapMitigation");
  if (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", CFSTR("NavigationSuppressAllAnimations")))
    return objc_msgSend(*(id *)(a1 + 40), "_checkAnimationsMitigation");
  if (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", CFSTR("NavigationSuppressETAUpdates")))
    return objc_msgSend(*(id *)(a1 + 40), "_checkETAUpdatesMitigation");
  result = objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", CFSTR("NavigationThermalMitigationForceMapInactive"));
  if ((_DWORD)result)
    return objc_msgSend(*(id *)(a1 + 40), "_checkMapViewMitigation");
  return result;
}

void sub_10036FF28(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "NavigationStateMonitoringTask");
  v2 = (void *)qword_1014D21F8;
  qword_1014D21F8 = (uint64_t)v1;

}

void sub_1003719A0(id a1)
{
  id v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = sub_100371A04();
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Finished background submission", v3, 2u);
  }

}

id sub_100371A04()
{
  if (qword_1014D2210 != -1)
    dispatch_once(&qword_1014D2210, &stru_1011B2FD0);
  return (id)qword_1014D2208;
}

void sub_100371C88(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 80));
  _Unwind_Resume(a1);
}

void sub_100371CB0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id WeakRetained;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  int v10;
  id v11;

  v4 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "ratingsForm"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "photosForm"));
    objc_msgSend(WeakRetained, "captureAnalyticsForRatingsForm:photosForm:", v6, v7);

    if (v4)
    {
      v8 = sub_100371A04();
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v10 = 138412290;
        v11 = v4;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Error with submission %@", (uint8_t *)&v10, 0xCu);
      }

      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    }
  }

}

void sub_100371DD0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id WeakRetained;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  int v10;
  id v11;

  v4 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "ratingsForm"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "photosForm"));
    objc_msgSend(WeakRetained, "captureAnalyticsForRatingsForm:photosForm:", v6, v7);

    if (v4)
    {
      v8 = sub_100371A04();
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v10 = 138412290;
        v11 = v4;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Error with submission %@", (uint8_t *)&v10, 0xCu);
      }

      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    }
  }

}

uint64_t sub_100371F94(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1003720C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1003720E4(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
    objc_msgSend(v3, "inlinePOIEnrichmentController:requestsPresentationOfPhotosWithCoordinator:", v4, *(_QWORD *)(a1 + 32));

    WeakRetained = v4;
  }

}

void sub_100372634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_100372658(uint64_t a1, _QWORD *a2, BOOL *a3)
{
  unint64_t v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allRatingCategories"));
  v8 = objc_msgSend(v7, "count");

  if (v6 < (unint64_t)v8)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allRatingCategories"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectAtIndexedSubscript:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24)));
    *a3 = objc_msgSend(v10, "currentState") == (id)2;

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allRatingCategories"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectAtIndexedSubscript:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24)));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "geoCategoryRating"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "value"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "categoryName"));
    *a2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "stringValue"));

    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  }
  return v6 < (unint64_t)v8;
}

BOOL sub_100372794(uint64_t a1, _QWORD *a2, BOOL *a3)
{
  unint64_t v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allRatingCategories"));
  v8 = objc_msgSend(v7, "count");

  if (v6 < (unint64_t)v8)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allRatingCategories"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectAtIndexedSubscript:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24)));
    *a3 = objc_msgSend(v10, "currentState") == (id)2;

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allRatingCategories"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectAtIndexedSubscript:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24)));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "geoCategoryRating"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "value"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "categoryName"));
    *a2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "stringValue"));

    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  }
  return v6 < (unint64_t)v8;
}

void sub_100372A28(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "UGCInlinePOIEnrichmentController");
  v2 = (void *)qword_1014D2208;
  qword_1014D2208 = (uint64_t)v1;

}

id sub_100373238(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
}

id sub_100373240(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 1.0);
}

void sub_100373494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1003734B0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 0.0);
}

uint64_t sub_1003734BC(uint64_t a1, int a2)
{
  id WeakRetained;
  uint64_t result;

  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 1.0);
    objc_msgSend(*(id *)(a1 + 32), "removeFromSuperview");
    objc_msgSend(*(id *)(a1 + 40), "removeFromParentViewController");
  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(WeakRetained, "_didDismiss");

  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_100373D00(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  void *v5;
  objc_class *v6;
  NSString *v7;
  void *v8;
  void *v9;
  void *v10;
  __CFString *v11;
  uint64_t v12;
  void *v13;
  uint8_t buf[4];
  __CFString *v15;
  __int16 v16;
  uint64_t v17;

  v2 = sub_10043379C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(id *)(a1 + 32);
    v5 = v4;
    if (!v4)
    {
      v11 = CFSTR("<nil>");
      goto LABEL_10;
    }
    v6 = (objc_class *)objc_opt_class(v4);
    v7 = NSStringFromClass(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if ((objc_opt_respondsToSelector(v5, "accessibilityIdentifier") & 1) != 0)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "performSelector:", "accessibilityIdentifier"));
      v10 = v9;
      if (v9 && !objc_msgSend(v9, "isEqualToString:", v8))
      {
        v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v8, v5, v10));

        goto LABEL_8;
      }

    }
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v8, v5));
LABEL_8:

LABEL_10:
    v12 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138543618;
    v15 = v11;
    v16 = 2112;
    v17 = v12;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%{public}@] displaySearchResultsWithCategory: %@", buf, 0x16u);

  }
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[CarChromeModeCoordinator sharedInstance](CarChromeModeCoordinator, "sharedInstance"));
  objc_msgSend(v13, "displaySearchResultsWithCategory:", *(_QWORD *)(a1 + 40));

}

void sub_100374020(id *a1, void *a2)
{
  id v3;
  _QWORD *v4;
  _QWORD v5[4];
  _QWORD *v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100374180;
  v7[3] = &unk_1011B30B8;
  v3 = a2;
  v8 = v3;
  v9 = a1[4];
  v11 = a1[6];
  v10 = a1[5];
  v12 = a1[7];
  v13 = a1[8];
  v14 = a1[9];
  v4 = objc_retainBlock(v7);
  if (sub_1003DF2C0())
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100374444;
    v5[3] = &unk_1011B30E0;
    v6 = v4;
    +[RAPPrivacy performPrivacyCheckWithAppearance:completion:](RAPPrivacy, "performPrivacyCheckWithAppearance:completion:", 4, v5);

  }
  else
  {
    ((void (*)(_QWORD *))v4[2])(v4);
  }

}

void sub_100374180(uint64_t a1)
{
  RAPReport *v2;
  uint64_t v3;
  void *v4;
  RAPReport *v5;
  RAPReport *v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[4];
  id v11;
  RAPReport *v12;
  id v13;
  id v14;
  id v15;

  v2 = [RAPReport alloc];
  v3 = *(_QWORD *)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "submissionManager"));
  v5 = -[RAPReport initWithContext:submitter:](v2, "initWithContext:submitter:", v3, v4);

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1003742C0;
  v10[3] = &unk_1011B3090;
  v13 = *(id *)(a1 + 56);
  v11 = *(id *)(a1 + 48);
  v6 = v5;
  v12 = v6;
  v14 = *(id *)(a1 + 64);
  v15 = *(id *)(a1 + 72);
  v7 = objc_retainBlock(v10);
  if (*(_QWORD *)(a1 + 80))
  {
    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "rapViewControllerWithReport:completion:", v6, v7));
    if (v8)
    {
      v9 = (void *)v8;
      (*(void (**)(void))(*(_QWORD *)(a1 + 80) + 16))();

    }
  }

}

void sub_1003742C0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;

  v5 = a2;
  if (a3 == 1)
  {
    v7 = *(void **)(a1 + 40);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100374408;
    v12[3] = &unk_1011B3040;
    v15 = *(id *)(a1 + 56);
    v13 = *(id *)(a1 + 32);
    v14 = *(id *)(a1 + 40);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100374424;
    v8[3] = &unk_1011B3068;
    v11 = *(id *)(a1 + 64);
    v9 = *(id *)(a1 + 32);
    v10 = *(id *)(a1 + 40);
    objc_msgSend(v7, "submitWithPrivacyRequestHandler:willStartSubmitting:didFinishSubmitting:", &stru_1011B3018, v12, v8);

  }
  else if (!a3)
  {
    v6 = *(_QWORD *)(a1 + 48);
    if (v6)
      (*(void (**)(uint64_t, _QWORD))(v6 + 16))(v6, *(_QWORD *)(a1 + 32));
  }

}

uint64_t sub_100374408(_QWORD *a1)
{
  uint64_t result;

  result = a1[6];
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, a1[4], a1[5]);
  return result;
}

uint64_t sub_100374424(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = a1[6];
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(result + 16))(result, a1[4], a1[5], a3);
  return result;
}

uint64_t sub_100374444(uint64_t result, int a2)
{
  if (a2)
    return (*(uint64_t (**)(void))(*(_QWORD *)(result + 32) + 16))();
  return result;
}

void sub_100374654(id a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = objc_alloc_init((Class)NSNumberFormatter);
  v2 = (void *)qword_1014D2218;
  qword_1014D2218 = (uint64_t)v1;

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSLocale autoupdatingCurrentLocale](NSLocale, "autoupdatingCurrentLocale"));
  objc_msgSend((id)qword_1014D2218, "setLocale:", v3);

  objc_msgSend((id)qword_1014D2218, "setNumberStyle:", 2);
  objc_msgSend((id)qword_1014D2218, "setMinimumFractionDigits:", 0);
  objc_msgSend((id)qword_1014D2218, "setCurrencyCode:", CFSTR("CNY"));
}

void sub_100374CE8(id a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = objc_alloc_init((Class)NSNumberFormatter);
  v2 = (void *)qword_1014D2228;
  qword_1014D2228 = (uint64_t)v1;

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSLocale autoupdatingCurrentLocale](NSLocale, "autoupdatingCurrentLocale"));
  objc_msgSend((id)qword_1014D2228, "setLocale:", v3);

  objc_msgSend((id)qword_1014D2228, "setNumberStyle:", 2);
}

void sub_100374FD4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = objc_msgSend(a2, "integerValue");
  if (objc_msgSend(*(id *)(a1 + 32), "canDisplayMenuItemForQuestionCategory:", v3))
  {
    v4 = *(void **)(a1 + 40);
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "menuItemWithFollowUpQuestionCategory:", v3));
    objc_msgSend(v4, "addObjectIfNotNil:", v5);

  }
}

UIFont *__cdecl sub_10037686C(id a1)
{
  UIFont *v1;
  void *v2;
  void *v3;

  v1 = sub_100BA53E4(&stru_1011E7A78);
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont _maps_cappedFont:withMaxPoint:](UIFont, "_maps_cappedFont:withMaxPoint:", v2, 30.0));

  return (UIFont *)v3;
}

id sub_10037762C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_loadSuggestions");
}

id sub_100378054()
{
  if (qword_1014D2240 != -1)
    dispatch_once(&qword_1014D2240, &stru_1011B31B0);
  return (id)qword_1014D2238;
}

void sub_1003788B8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFScanningAnimationManager");
  v2 = (void *)qword_1014D2238;
  qword_1014D2238 = (uint64_t)v1;

}

void sub_100378B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100378B9C(_QWORD *a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;

  if (a1[4])
  {
    if ((objc_msgSend(*(id *)(a1[5] + 56), "isEqualToArray:") & 1) != 0)
      return;
    v2 = (void *)a1[4];
  }
  else
  {
    v2 = 0;
  }
  v3 = objc_msgSend(v2, "copy");
  v4 = a1[5];
  v5 = *(void **)(v4 + 56);
  *(_QWORD *)(v4 + 56) = v3;

  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
}

void sub_100378DBC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setUpdatingCoalesced:", 0);
  objc_msgSend(WeakRetained, "_updateFraming");

}

void sub_10037938C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1003793C8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1003793D8(uint64_t a1)
{

}

void sub_1003793E0(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "items"));
  v2 = objc_msgSend(v5, "copy");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_100379600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100379618(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "items"));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v2, "count") != 0;

}

void sub_100379744(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "items"));
  v2 = objc_msgSend(v5, "copy");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

id sub_100379B6C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  double v15;
  void *v16;
  void *v17;
  id v18;

  v5 = a3;
  v6 = objc_msgSend(a2, "coordinate");
  v9 = GEOCalculateDistance(v6, *(double *)(a1 + 32), *(double *)(a1 + 40), v7, v8);
  objc_msgSend(v5, "coordinate");
  v11 = v10;
  v13 = v12;

  v15 = GEOCalculateDistance(v14, *(double *)(a1 + 32), *(double *)(a1 + 40), v11, v13);
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v9));
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v15));
  v18 = objc_msgSend(v16, "compare:", v17);

  return v18;
}

void sub_10037A4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10037A4D0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10037A574;
  v5[3] = &unk_1011AD1E8;
  objc_copyWeak(&v7, (id *)(a1 + 32));
  v6 = v3;
  v4 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v5);

  objc_destroyWeak(&v7);
}

void sub_10037A574(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "_updateSharingFooterWithIdentity:", *(_QWORD *)(a1 + 32));
    WeakRetained = v3;
  }

}

void sub_10037A8A0(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setSoftCap:", +[CarDisplayController maximumListLength](CarDisplayController, "maximumListLength"));
  v2 = *(_QWORD **)(a1 + 32);
  if (v2[1])
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "view"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "window"));

    if (v4)
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "addTableView:cellProvider:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[MSPSharedTripService sharedInstance](MSPSharedTripService, "sharedInstance"));
  objc_msgSend(v5, "addSendingObserver:", *(_QWORD *)(a1 + 32));

  v6 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v6, "addObserver:selector:name:object:", *(_QWORD *)(a1 + 32), "_externalDeviceUpdated:", CFSTR("MapsExternalDeviceUpdated"), 0);

}

id sub_10037AA10(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  char isKindOfClass;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MSPSharedTripService sharedInstance](MSPSharedTripService, "sharedInstance"));
  objc_msgSend(v2, "removeSendingObserver:", *(_QWORD *)(a1 + 32));

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v3, "removeObserver:name:object:", *(_QWORD *)(a1 + 32), CFSTR("MapsExternalDeviceUpdated"), 0);

  v4 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v4 + 40))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "nextTopContext"));
    v6 = objc_opt_class(CarKeyboardModeController);
    isKindOfClass = objc_opt_isKindOfClass(v5, v6);

    v4 = *(_QWORD *)(a1 + 32);
    if ((isKindOfClass & 1) == 0)
    {
      objc_msgSend(*(id *)(v4 + 16), "abandon");
      v4 = *(_QWORD *)(a1 + 32);
    }
  }
  objc_msgSend((id)v4, "_commitPendingShares");
  objc_msgSend(*(id *)(a1 + 32), "_cancelDismiss");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "clearTableView");
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setDataSource:");
}

void sub_10037B340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10037B35C(uint64_t a1)
{
  id WeakRetained;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[CarChromeModeCoordinator sharedInstance](CarChromeModeCoordinator, "sharedInstance"));
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(v3, "popFromContext:", WeakRetained);

}

void sub_10037B6D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10037B6F0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_closeResultsController");

}

void sub_10037B7E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10037B804(uint64_t a1, void *a2, void *a3)
{
  id *v4;
  id v5;
  id v6;
  id WeakRetained;

  v4 = (id *)(a1 + 32);
  v5 = a3;
  v6 = a2;
  WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend(WeakRetained, "_handleContactSearchResults:query:", v5, v6);

}

void sub_10037C004(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "tableFooterView"));
  objc_msgSend(v2, "frame");
  objc_msgSend(v1, "scrollRectToVisible:animated:", 1);

}

void sub_10037C2B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10037C2D8(uint64_t a1)
{
  _QWORD *WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD *v7;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v7 = WeakRetained;
    objc_msgSend(WeakRetained, "_cancelDismiss");
    v3 = (void *)v7[4];
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stringValue"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", v4));

    objc_msgSend(v5, "setSharingState:animated:", 1, 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "chromeViewController"));
    objc_msgSend(v6, "captureUserAction:", 9025);

    WeakRetained = v7;
  }

}

void sub_10037C464(uint64_t a1, int a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  void *v12;
  objc_class *v13;
  NSString *v14;
  void *v15;
  void *v16;
  void *v17;
  __CFString *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  __int128 v27;
  _QWORD v28[4];
  id v29;
  __int128 v30;
  uint8_t buf[4];
  __CFString *v32;
  __int16 v33;
  id v34;

  v7 = a3;
  v8 = a4;
  if (v8)
  {
    v9 = sub_10043237C();
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
LABEL_15:

      goto LABEL_16;
    }
    v11 = *(id *)(a1 + 56);
    v12 = v11;
    if (!v11)
    {
      v18 = CFSTR("<nil>");
      goto LABEL_14;
    }
    v13 = (objc_class *)objc_opt_class(v11);
    v14 = NSStringFromClass(v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    if ((objc_opt_respondsToSelector(v12, "accessibilityIdentifier") & 1) != 0)
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "performSelector:", "accessibilityIdentifier"));
      v17 = v16;
      if (v16 && !objc_msgSend(v16, "isEqualToString:", v15))
      {
        v18 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v15, v12, v17));

        goto LABEL_9;
      }

    }
    v18 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v15, v12));
LABEL_9:

LABEL_14:
    *(_DWORD *)buf = 138543618;
    v32 = v18;
    v33 = 2112;
    v34 = v8;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[%{public}@] CarPlay failed to fetch requiresUserConfirmation flag: %@", buf, 0x16u);

    goto LABEL_15;
  }
  if (a2)
  {
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "name"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "handle"));
    v21 = CarInterruptionUserInfoForSharedTripSenderInfo(v19, v20);
    v22 = (void *)objc_claimAutoreleasedReturnValue(v21);

    v23 = *(void **)(a1 + 40);
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472;
    v28[2] = sub_10037C6F0;
    v28[3] = &unk_1011B3298;
    v29 = v22;
    v27 = *(_OWORD *)(a1 + 48);
    v24 = (id)v27;
    v30 = v27;
    v25 = v22;
    v26 = objc_msgSend(v23, "presentInterruptionOfKind:userInfo:completionHandler:", 14, v25, v28);

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
LABEL_16:

}

void sub_10037C6F0(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  __int128 v6;
  _QWORD v7[4];
  __int128 v8;

  if (a2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("kMapsInterruptionSharedTripSenderHandle")));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[MSPSharedTripService sharedInstance](MSPSharedTripService, "sharedInstance"));
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10037C7B0;
    v7[3] = &unk_1011B3270;
    v6 = *(_OWORD *)(a1 + 40);
    v5 = (id)v6;
    v8 = v6;
    objc_msgSend(v4, "reportUserConfirmationOfSharingIdentity:completion:", v3, v7);

  }
}

void sub_10037C7B0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  id v6;
  void *v7;
  objc_class *v8;
  NSString *v9;
  void *v10;
  void *v11;
  void *v12;
  __CFString *v13;
  uint8_t buf[4];
  __CFString *v15;
  __int16 v16;
  id v17;

  v3 = a2;
  if (v3)
  {
    v4 = sub_10043237C();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
LABEL_13:

      goto LABEL_14;
    }
    v6 = *(id *)(a1 + 40);
    v7 = v6;
    if (!v6)
    {
      v13 = CFSTR("<nil>");
      goto LABEL_12;
    }
    v8 = (objc_class *)objc_opt_class(v6);
    v9 = NSStringFromClass(v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    if ((objc_opt_respondsToSelector(v7, "accessibilityIdentifier") & 1) != 0)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "performSelector:", "accessibilityIdentifier"));
      v12 = v11;
      if (v11 && !objc_msgSend(v11, "isEqualToString:", v10))
      {
        v13 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v10, v7, v12));

        goto LABEL_9;
      }

    }
    v13 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v10, v7));
LABEL_9:

LABEL_12:
    *(_DWORD *)buf = 138543618;
    v15 = v13;
    v16 = 2112;
    v17 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[%{public}@] CarPlay failed to report requiresUserConfirmation: %@", buf, 0x16u);

    goto LABEL_13;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
LABEL_14:

}

id sub_10037CF30(int a1)
{
  void *v2;
  const __CFString *v3;
  void *v4;
  void *v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIImageSymbolConfiguration configurationWithPointSize:](UIImageSymbolConfiguration, "configurationWithPointSize:", 28.0));
  if (a1)
    v3 = CFSTR("bolt.car.fill");
  else
    v3 = CFSTR("car.fill");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage systemImageNamed:withConfiguration:](UIImage, "systemImageNamed:withConfiguration:", v3, v2));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "imageWithoutBaseline"));

  return v5;
}

id sub_10037CFB4(int a1)
{
  void *v2;
  const __CFString *v3;
  void *v4;
  void *v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIImageSymbolConfiguration configurationWithPointSize:](UIImageSymbolConfiguration, "configurationWithPointSize:", 56.0));
  if (a1)
    v3 = CFSTR("bolt.car.fill");
  else
    v3 = CFSTR("car.fill");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage systemImageNamed:withConfiguration:](UIImage, "systemImageNamed:withConfiguration:", v3, v2));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "imageWithoutBaseline"));

  return v5;
}

NSMutableArray *sub_10037D03C(void *a1, void *a2)
{
  id v3;
  id v4;
  NSMutableArray *v5;
  uint64_t i;
  void *v7;
  void *v8;

  v3 = a1;
  v4 = a2;
  v5 = objc_opt_new(NSMutableArray);
  for (i = 1; i != 13; ++i)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("VehicleColor%lu"), i));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorNamed:inBundle:compatibleWithTraitCollection:](UIColor, "colorNamed:inBundle:compatibleWithTraitCollection:", v7, v3, v4));
    -[NSMutableArray addObject:](v5, "addObject:", v8);

  }
  return v5;
}

void sub_10037D934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10037D974(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  uint64_t Log;
  NSObject *v5;
  int v6;
  char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[RideBookingRideOptionStatus statusWithApplication:error:](RideBookingRideOptionStatus, "statusWithApplication:error:", WeakRetained, 12));
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
  else
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingApplication");
    v5 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = 136446722;
      v7 = "RideBookingApplication.m";
      v8 = 1026;
      v9 = 143;
      v10 = 2082;
      v11 = "-[RideBookingApplication getRideOptionStatusWithPickupLocation:dropOffLocation:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", (uint8_t *)&v6, 0x1Cu);
    }

  }
}

void sub_10037DAB0(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *WeakRetained;
  uint64_t v8;
  uint64_t Log;
  NSObject *v10;
  NSObject *v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  id v15;
  NSObject *v16;
  id v17;
  NSObject *v18;
  _QWORD block[4];
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint8_t buf[4];
  char *v26;
  __int16 v27;
  _QWORD v28[3];

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  v8 = MapsSuggestionsLoggingSubsystem;
  Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingApplication");
  v10 = objc_claimAutoreleasedReturnValue(Log);
  v11 = v10;
  if (WeakRetained)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v12 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "uniqueName"));
      *(_DWORD *)buf = 138412546;
      v26 = v12;
      v27 = 2080;
      v28[0] = "listRideOptions_resumeWithCompletionHandler";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s END", buf, 0x16u);

    }
    v13 = GEOFindOrCreateLog(v8, "RideBookingApplication");
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_signpost_enabled(v14))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "listRideOptions_resumeWithCompletionHandler", "", buf, 2u);
    }

    v15 = v5;
    objc_msgSend(v15, "setShouldResetRequestAfterHandle:", 0);
    objc_msgSend(v15, "setImageProcessingHandler:", &stru_1011B3648);
    v16 = WeakRetained[1];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10037DD88;
    block[3] = &unk_1011B3398;
    objc_copyWeak(&v24, a1 + 6);
    v20 = v6;
    v23 = a1[5];
    v21 = v15;
    v22 = a1[4];
    v17 = v15;
    dispatch_async(v16, block);

    objc_destroyWeak(&v24);
  }
  else
  {
    v18 = v10;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v26 = "RideBookingApplication.m";
      v27 = 1026;
      LODWORD(v28[0]) = 154;
      WORD2(v28[0]) = 2082;
      *(_QWORD *)((char *)v28 + 6) = "-[RideBookingApplication getRideOptionStatusWithPickupLocation:dropOffLocation:comp"
                                     "letion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_10037DD88(uint64_t a1)
{
  id *v2;
  _QWORD *WeakRetained;
  uint64_t Log;
  NSObject *v5;
  char *v6;
  id v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  _QWORD v18[4];
  id v19;
  id v20;
  id v21;
  uint8_t buf[4];
  char *v23;
  __int16 v24;
  _QWORD v25[3];

  v2 = (id *)(a1 + 64);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    if (*(_QWORD *)(a1 + 32))
    {
      Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
      v5 = objc_claimAutoreleasedReturnValue(Log);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v6 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingApplication/RideBookingApplication.m");
        v7 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%@ had an error handling ListRideOptions: %@"), WeakRetained[6], *(_QWORD *)(a1 + 32));
        *(_DWORD *)buf = 136315394;
        v23 = v6;
        v24 = 2112;
        v25[0] = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{RBError}{%s}: %@", buf, 0x16u);

      }
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[RideBookingRideOptionStatus statusWithApplication:error:](RideBookingRideOptionStatus, "statusWithApplication:error:", WeakRetained, 1));
      (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

    }
    else
    {
      v11 = MapsSuggestionsLoggingSubsystem;
      v12 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingApplication");
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        v14 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "uniqueName"));
        *(_DWORD *)buf = 138412546;
        v23 = v14;
        v24 = 2080;
        v25[0] = "listRideOptions_handleIntentWithCompletionHandler";
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s BEGIN", buf, 0x16u);

      }
      v15 = GEOFindOrCreateLog(v11, "RideBookingApplication");
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (os_signpost_enabled(v16))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "listRideOptions_handleIntentWithCompletionHandler", "", buf, 2u);
      }

      v17 = *(void **)(a1 + 40);
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      v18[2] = sub_10037E114;
      v18[3] = &unk_1011B33C0;
      objc_copyWeak(&v21, v2);
      v20 = *(id *)(a1 + 56);
      v19 = *(id *)(a1 + 48);
      objc_msgSend(v17, "handleIntentWithCompletionHandler:", v18);

      objc_destroyWeak(&v21);
    }
  }
  else
  {
    v9 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingApplication");
    v10 = (id)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v23 = "RideBookingApplication.m";
      v24 = 1026;
      LODWORD(v25[0]) = 161;
      WORD2(v25[0]) = 2082;
      *(_QWORD *)((char *)v25 + 6) = "-[RideBookingApplication getRideOptionStatusWithPickupLocation:dropOffLocation:comp"
                                     "letion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf2 went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_10037E0F8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10037E114(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *WeakRetained;
  uint64_t v8;
  uint64_t Log;
  NSObject *v10;
  NSObject *v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  _QWORD block[4];
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint8_t buf[4];
  char *v24;
  __int16 v25;
  _QWORD v26[3];

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  v8 = MapsSuggestionsLoggingSubsystem;
  Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingApplication");
  v10 = objc_claimAutoreleasedReturnValue(Log);
  v11 = v10;
  if (WeakRetained)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v12 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "uniqueName"));
      *(_DWORD *)buf = 138412546;
      v24 = v12;
      v25 = 2080;
      v26[0] = "listRideOptions_handleIntentWithCompletionHandler";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s END", buf, 0x16u);

    }
    v13 = GEOFindOrCreateLog(v8, "RideBookingApplication");
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_signpost_enabled(v14))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "listRideOptions_handleIntentWithCompletionHandler", "", buf, 2u);
    }

    v15 = WeakRetained[1];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10037E3C4;
    block[3] = &unk_1011B3398;
    objc_copyWeak(&v22, a1 + 6);
    v18 = v6;
    v21 = a1[5];
    v19 = v5;
    v20 = a1[4];
    dispatch_async(v15, block);

    objc_destroyWeak(&v22);
  }
  else
  {
    v16 = v10;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v24 = "RideBookingApplication.m";
      v25 = 1026;
      LODWORD(v26[0]) = 172;
      WORD2(v26[0]) = 2082;
      *(_QWORD *)((char *)v26 + 6) = "-[RideBookingApplication getRideOptionStatusWithPickupLocation:dropOffLocation:comp"
                                     "letion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf3 went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_10037E3C4(uint64_t a1)
{
  _QWORD *WeakRetained;
  uint64_t v3;
  uint64_t Log;
  NSObject *v5;
  NSObject *v6;
  char *v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  char *v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint8_t buf[4];
  char *v18;
  __int16 v19;
  _QWORD v20[3];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    v3 = *(_QWORD *)(a1 + 32);
    Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
    v5 = objc_claimAutoreleasedReturnValue(Log);
    v6 = v5;
    if (v3)
    {
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v7 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingApplication/RideBookingApplication.m");
        v8 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%@ had an error handling ListRideOptions: %@"), WeakRetained[6], *(_QWORD *)(a1 + 32));
        *(_DWORD *)buf = 136315394;
        v18 = v7;
        v19 = 2112;
        v20[0] = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{RBError}{%s}: %@", buf, 0x16u);

      }
      v9 = objc_claimAutoreleasedReturnValue(+[RideBookingRideOptionStatus statusWithApplication:error:](RideBookingRideOptionStatus, "statusWithApplication:error:", WeakRetained, 1));
      v10 = *(_QWORD *)(a1 + 56);
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "underlyingError"));
      (*(void (**)(uint64_t, NSObject *, void *))(v10 + 16))(v10, v9, v11);

    }
    else
    {
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v13 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingApplication/RideBookingApplication.m");
        v14 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%@ successfully handled ListRideOptions: %@"), WeakRetained[6], *(_QWORD *)(a1 + 40));
        *(_DWORD *)buf = 136315394;
        v18 = v13;
        v19 = 2112;
        v20[0] = v14;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

      }
      v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_statusWithListRideOptionsResponse:", *(_QWORD *)(a1 + 40)));
      v15 = *(_QWORD *)(a1 + 56);
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "underlyingError"));
      (*(void (**)(uint64_t, NSObject *, void *))(v15 + 16))(v15, v9, v16);

      objc_msgSend(*(id *)(a1 + 48), "reset");
    }
  }
  else
  {
    v12 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingApplication");
    v9 = (id)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v18 = "RideBookingApplication.m";
      v19 = 1026;
      LODWORD(v20[0]) = 176;
      WORD2(v20[0]) = 2082;
      *(_QWORD *)((char *)v20 + 6) = "-[RideBookingApplication getRideOptionStatusWithPickupLocation:dropOffLocation:comp"
                                     "letion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf4 went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_10037EAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10037EB30(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *WeakRetained;
  uint64_t v8;
  uint64_t Log;
  NSObject *v10;
  NSObject *v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  id v15;
  NSObject *v16;
  id v17;
  NSObject *v18;
  _QWORD v19[4];
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint8_t buf[4];
  char *v29;
  __int16 v30;
  _QWORD v31[3];

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained(a1 + 9);
  v8 = MapsSuggestionsLoggingSubsystem;
  Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingApplication");
  v10 = objc_claimAutoreleasedReturnValue(Log);
  v11 = v10;
  if (WeakRetained)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v12 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "uniqueName"));
      *(_DWORD *)buf = 138412546;
      v29 = v12;
      v30 = 2080;
      v31[0] = "requestRideStatus_resumeWithCompletionHandler";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s END", buf, 0x16u);

    }
    v13 = GEOFindOrCreateLog(v8, "RideBookingApplication");
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_signpost_enabled(v14))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "requestRideStatus_resumeWithCompletionHandler", "", buf, 2u);
    }

    v15 = v5;
    objc_msgSend(v15, "setShouldResetRequestAfterHandle:", 0);
    objc_msgSend(v15, "setImageProcessingHandler:", &stru_1011B3648);
    v16 = WeakRetained[1];
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_10037EE44;
    v19[3] = &unk_1011B3410;
    objc_copyWeak(&v27, a1 + 9);
    v20 = v6;
    v26 = a1[8];
    v21 = v15;
    v22 = a1[4];
    v23 = a1[5];
    v24 = a1[6];
    v25 = a1[7];
    v17 = v15;
    dispatch_async(v16, v19);

    objc_destroyWeak(&v27);
  }
  else
  {
    v18 = v10;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v29 = "RideBookingApplication.m";
      v30 = 1026;
      LODWORD(v31[0]) = 218;
      WORD2(v31[0]) = 2082;
      *(_QWORD *)((char *)v31 + 6) = "-[RideBookingApplication getRequestRideStatusWithPickupLocation:dropOffLocation:rid"
                                     "eOption:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_10037EE44(uint64_t a1)
{
  id *v2;
  _QWORD *WeakRetained;
  void *v4;
  uint64_t Log;
  NSObject *v6;
  char *v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  _QWORD v18[4];
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint8_t buf[4];
  char *v26;
  __int16 v27;
  _QWORD v28[3];

  v2 = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));
  if (WeakRetained)
  {
    if (*(_QWORD *)(a1 + 32))
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[RideBookingRequestRideStatus statusWithApplication:error:](RideBookingRequestRideStatus, "statusWithApplication:error:", WeakRetained, 1));
      Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
      v6 = objc_claimAutoreleasedReturnValue(Log);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        v7 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingApplication/RideBookingApplication.m");
        v8 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%@ had an error confirming RequestRide: %@"), WeakRetained[6], *(_QWORD *)(a1 + 32));
        *(_DWORD *)buf = 136315394;
        v26 = v7;
        v27 = 2112;
        v28[0] = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{RBError}{%s}: %@", buf, 0x16u);

      }
      (*(void (**)(void))(*(_QWORD *)(a1 + 80) + 16))();

    }
    else
    {
      v11 = MapsSuggestionsLoggingSubsystem;
      v12 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingApplication");
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        v14 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "uniqueName"));
        *(_DWORD *)buf = 138412546;
        v26 = v14;
        v27 = 2080;
        v28[0] = "requestRideStatus_confirmIntentWithCompletionHandler";
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s BEGIN", buf, 0x16u);

      }
      v15 = GEOFindOrCreateLog(v11, "RideBookingApplication");
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (os_signpost_enabled(v16))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "requestRideStatus_confirmIntentWithCompletionHandler", "", buf, 2u);
      }

      v17 = *(void **)(a1 + 40);
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      v18[2] = sub_10037F20C;
      v18[3] = &unk_1011B3438;
      objc_copyWeak(&v24, v2);
      v23 = *(id *)(a1 + 80);
      v19 = *(id *)(a1 + 48);
      v20 = *(id *)(a1 + 56);
      v21 = *(id *)(a1 + 64);
      v22 = *(id *)(a1 + 72);
      objc_msgSend(v17, "confirmIntentWithCompletionHandler:", v18);

      objc_destroyWeak(&v24);
    }
  }
  else
  {
    v9 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingApplication");
    v10 = (id)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v26 = "RideBookingApplication.m";
      v27 = 1026;
      LODWORD(v28[0]) = 225;
      WORD2(v28[0]) = 2082;
      *(_QWORD *)((char *)v28 + 6) = "-[RideBookingApplication getRequestRideStatusWithPickupLocation:dropOffLocation:rid"
                                     "eOption:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf2 went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_10037F1F0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10037F20C(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *WeakRetained;
  uint64_t v8;
  uint64_t Log;
  NSObject *v10;
  NSObject *v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint8_t buf[4];
  char *v27;
  __int16 v28;
  _QWORD v29[3];

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained(a1 + 9);
  v8 = MapsSuggestionsLoggingSubsystem;
  Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingApplication");
  v10 = objc_claimAutoreleasedReturnValue(Log);
  v11 = v10;
  if (WeakRetained)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v12 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "uniqueName"));
      *(_DWORD *)buf = 138412546;
      v27 = v12;
      v28 = 2080;
      v29[0] = "requestRideStatus_confirmIntentWithCompletionHandler";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s END", buf, 0x16u);

    }
    v13 = GEOFindOrCreateLog(v8, "RideBookingApplication");
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_signpost_enabled(v14))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "requestRideStatus_confirmIntentWithCompletionHandler", "", buf, 2u);
    }

    v15 = WeakRetained[1];
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_10037F4F8;
    v17[3] = &unk_1011B3410;
    objc_copyWeak(&v25, a1 + 9);
    v18 = v6;
    v24 = a1[8];
    v19 = v5;
    v20 = a1[4];
    v21 = a1[5];
    v22 = a1[6];
    v23 = a1[7];
    dispatch_async(v15, v17);

    objc_destroyWeak(&v25);
  }
  else
  {
    v16 = v10;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v27 = "RideBookingApplication.m";
      v28 = 1026;
      LODWORD(v29[0]) = 236;
      WORD2(v29[0]) = 2082;
      *(_QWORD *)((char *)v29 + 6) = "-[RideBookingApplication getRequestRideStatusWithPickupLocation:dropOffLocation:rid"
                                     "eOption:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf3 went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_10037F4F8(uint64_t a1)
{
  _QWORD *WeakRetained;
  NSObject *v3;
  uint64_t Log;
  NSObject *v5;
  char *v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  char *v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  double latitude;
  double longitude;
  double v23;
  void *v24;
  void *v25;
  double v26;
  double v27;
  double Double;
  void *v29;
  uint64_t v30;
  void *v31;
  uint8_t buf[4];
  char *v33;
  __int16 v34;
  _QWORD v35[3];
  CLLocationCoordinate2D v36;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));
  if (WeakRetained)
  {
    if (*(_QWORD *)(a1 + 32))
    {
      v3 = objc_claimAutoreleasedReturnValue(+[RideBookingRequestRideStatus statusWithApplication:error:](RideBookingRequestRideStatus, "statusWithApplication:error:", WeakRetained, 1));
      Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
      v5 = objc_claimAutoreleasedReturnValue(Log);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v6 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingApplication/RideBookingApplication.m");
        v7 = objc_alloc((Class)NSString);
        v8 = WeakRetained[6];
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "underlyingError"));
        v10 = objc_msgSend(v7, "initWithFormat:", CFSTR("%@ had an error confirming RequestRide: %@"), v8, v9);
        *(_DWORD *)buf = 136315394;
        v33 = v6;
        v34 = 2112;
        v35[0] = v10;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{RBError}{%s}: %@", buf, 0x16u);

      }
      v11 = *(_QWORD *)(a1 + 80);
      v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "underlyingError"));
      (*(void (**)(uint64_t, NSObject *, NSObject *))(v11 + 16))(v11, v3, v12);
    }
    else
    {
      v14 = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        v16 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingApplication/RideBookingApplication.m");
        v17 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%@ successfully confirmed RequestRide: %@"), WeakRetained[6], *(_QWORD *)(a1 + 40));
        *(_DWORD *)buf = 136315394;
        v33 = v16;
        v34 = 2112;
        v35[0] = v17;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

      }
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "rideStatus"));
      v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "pickupLocation"));

      v19 = (id)objc_claimAutoreleasedReturnValue(-[NSObject location](v3, "location"));
      v20 = v19;
      if (!v19)
        goto LABEL_21;
      objc_msgSend(v19, "coordinate");
      latitude = v36.latitude;
      longitude = v36.longitude;
      if (!CLLocationCoordinate2DIsValid(v36))
        goto LABEL_21;
      v23 = -latitude;
      if (latitude >= 0.0)
        v23 = latitude;
      if (v23 > 2.22044605e-16)
      {
        if (longitude < 0.0)
          longitude = -longitude;

        if (longitude > 2.22044605e-16)
        {
          v24 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject location](v3, "location"));
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "location"));
          objc_msgSend(v24, "distanceFromLocation:", v25);
          v27 = v26;
          Double = GEOConfigGetDouble(MapsConfig_RideBookingDistanceTolerance, off_1014B2E98);

          if (v27 >= Double)
            objc_msgSend(*(id *)(a1 + 56), "setPickupLocation:", v3);
        }
      }
      else
      {
LABEL_21:

      }
      v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_statusWithRideOption:requestRideIntent:requestRideEtaResponse:", *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40)));
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "userActivity"));
      -[NSObject setUserActivity:](v12, "setUserActivity:", v29);

      v30 = *(_QWORD *)(a1 + 80);
      v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "underlyingError"));
      (*(void (**)(uint64_t, NSObject *, void *))(v30 + 16))(v30, v12, v31);

      objc_msgSend(*(id *)(a1 + 72), "reset");
    }
  }
  else
  {
    v13 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingApplication");
    v12 = (id)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v33 = "RideBookingApplication.m";
      v34 = 1026;
      LODWORD(v35[0]) = 240;
      WORD2(v35[0]) = 2082;
      *(_QWORD *)((char *)v35 + 6) = "-[RideBookingApplication getRequestRideStatusWithPickupLocation:dropOffLocation:rid"
                                     "eOption:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf4 went away in %{public}s", buf, 0x1Cu);
    }
    v3 = v12;
  }

}

void sub_10037FDA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10037FDD4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *WeakRetained;
  uint64_t v8;
  uint64_t Log;
  NSObject *v10;
  NSObject *v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  id v15;
  NSObject *v16;
  id v17;
  id v18;
  NSObject *v19;
  _QWORD v20[4];
  id v21;
  id v22;
  id v23;
  id v24;
  uint8_t buf[4];
  char *v26;
  __int16 v27;
  _QWORD v28[3];

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = MapsSuggestionsLoggingSubsystem;
  Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingApplication");
  v10 = objc_claimAutoreleasedReturnValue(Log);
  v11 = v10;
  if (WeakRetained)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v12 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "uniqueName"));
      *(_DWORD *)buf = 138412546;
      v26 = v12;
      v27 = 2080;
      v28[0] = "getRideStatus_resumeWithCompletionHandler";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s END", buf, 0x16u);

    }
    v13 = GEOFindOrCreateLog(v8, "RideBookingApplication");
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_signpost_enabled(v14))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "getRideStatus_resumeWithCompletionHandler", "", buf, 2u);
    }

    v15 = v5;
    objc_msgSend(v15, "setImageProcessingHandler:", &stru_1011B3648);
    v16 = WeakRetained[1];
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_100380088;
    v20[3] = &unk_1011B3488;
    objc_copyWeak(&v24, (id *)(a1 + 40));
    v21 = v6;
    v17 = *(id *)(a1 + 32);
    v22 = v15;
    v23 = v17;
    v18 = v15;
    dispatch_async(v16, v20);

    objc_destroyWeak(&v24);
  }
  else
  {
    v19 = v10;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v26 = "RideBookingApplication.m";
      v27 = 1026;
      LODWORD(v28[0]) = 296;
      WORD2(v28[0]) = 2082;
      *(_QWORD *)((char *)v28 + 6) = "-[RideBookingApplication getRideStatusWithPickupLocation:dropOffLocation:rideOption"
                                     ":partySize:paymentMethod:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_100380088(uint64_t a1)
{
  id *v2;
  _QWORD *WeakRetained;
  void *v4;
  uint64_t Log;
  NSObject *v6;
  char *v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  _QWORD v18[4];
  id v19;
  id v20;
  uint8_t buf[4];
  char *v22;
  __int16 v23;
  _QWORD v24[3];

  v2 = (id *)(a1 + 56);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    if (*(_QWORD *)(a1 + 32))
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[RideBookingRideStatus statusWithApplication:error:](RideBookingRideStatus, "statusWithApplication:error:", WeakRetained, 2));
      Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
      v6 = objc_claimAutoreleasedReturnValue(Log);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        v7 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingApplication/RideBookingApplication.m");
        v8 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%@ had an error handling RequestRide: %@"), WeakRetained[6], *(_QWORD *)(a1 + 32));
        *(_DWORD *)buf = 136315394;
        v22 = v7;
        v23 = 2112;
        v24[0] = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{RBError}{%s}: %@", buf, 0x16u);

      }
      (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

    }
    else
    {
      v11 = MapsSuggestionsLoggingSubsystem;
      v12 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingApplication");
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        v14 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "uniqueName"));
        *(_DWORD *)buf = 138412546;
        v22 = v14;
        v23 = 2080;
        v24[0] = "getRideStatus_handleIntentWithCompletionHandler";
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s BEGIN", buf, 0x16u);

      }
      v15 = GEOFindOrCreateLog(v11, "RideBookingApplication");
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (os_signpost_enabled(v16))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "getRideStatus_handleIntentWithCompletionHandler", "", buf, 2u);
      }

      v17 = *(void **)(a1 + 40);
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      v18[2] = sub_100380400;
      v18[3] = &unk_1011B34B0;
      objc_copyWeak(&v20, v2);
      v19 = *(id *)(a1 + 48);
      objc_msgSend(v17, "handleIntentWithCompletionHandler:", v18);

      objc_destroyWeak(&v20);
    }
  }
  else
  {
    v9 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingApplication");
    v10 = (id)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v22 = "RideBookingApplication.m";
      v23 = 1026;
      LODWORD(v24[0]) = 302;
      WORD2(v24[0]) = 2082;
      *(_QWORD *)((char *)v24 + 6) = "-[RideBookingApplication getRideStatusWithPickupLocation:dropOffLocation:rideOption"
                                     ":partySize:paymentMethod:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf2 went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_1003803E4(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100380400(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *WeakRetained;
  uint64_t v8;
  uint64_t Log;
  NSObject *v10;
  NSObject *v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  id v21;
  uint8_t buf[4];
  char *v23;
  __int16 v24;
  _QWORD v25[3];

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = MapsSuggestionsLoggingSubsystem;
  Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingApplication");
  v10 = objc_claimAutoreleasedReturnValue(Log);
  v11 = v10;
  if (WeakRetained)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v12 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "uniqueName"));
      *(_DWORD *)buf = 138412546;
      v23 = v12;
      v24 = 2080;
      v25[0] = "getRideStatus_handleIntentWithCompletionHandler";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s END", buf, 0x16u);

    }
    v13 = GEOFindOrCreateLog(v8, "RideBookingApplication");
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_signpost_enabled(v14))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "getRideStatus_handleIntentWithCompletionHandler", "", buf, 2u);
    }

    v15 = WeakRetained[1];
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_10038069C;
    v17[3] = &unk_1011B3488;
    objc_copyWeak(&v21, (id *)(a1 + 40));
    v18 = v6;
    v20 = *(id *)(a1 + 32);
    v19 = v5;
    dispatch_async(v15, v17);

    objc_destroyWeak(&v21);
  }
  else
  {
    v16 = v10;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v23 = "RideBookingApplication.m";
      v24 = 1026;
      LODWORD(v25[0]) = 313;
      WORD2(v25[0]) = 2082;
      *(_QWORD *)((char *)v25 + 6) = "-[RideBookingApplication getRideStatusWithPickupLocation:dropOffLocation:rideOption"
                                     ":partySize:paymentMethod:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf3 went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_10038069C(uint64_t a1)
{
  _QWORD *WeakRetained;
  NSObject *v3;
  uint64_t Log;
  NSObject *v5;
  char *v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  char *v16;
  id v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  char *v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint8_t buf[4];
  char *v27;
  __int16 v28;
  _QWORD v29[3];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    if (*(_QWORD *)(a1 + 32))
    {
      v3 = objc_claimAutoreleasedReturnValue(+[RideBookingRideStatus statusWithApplication:error:](RideBookingRideStatus, "statusWithApplication:error:", WeakRetained, 2));
      Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
      v5 = objc_claimAutoreleasedReturnValue(Log);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v6 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingApplication/RideBookingApplication.m");
        v7 = objc_alloc((Class)NSString);
        v8 = WeakRetained[6];
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "underlyingError"));
        v10 = objc_msgSend(v7, "initWithFormat:", CFSTR("%@ had an error handling RequestRide: %@"), v8, v9);
        *(_DWORD *)buf = 136315394;
        v27 = v6;
        v28 = 2112;
        v29[0] = v10;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{RBError}{%s}: %@", buf, 0x16u);

      }
    }
    else
    {
      v13 = DefaultLoggingSubsystem;
      v14 = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        v16 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingApplication/RideBookingApplication.m");
        v17 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%@ successfully handled RequestRide: %@"), WeakRetained[6], *(_QWORD *)(a1 + 40));
        *(_DWORD *)buf = 136315394;
        v27 = v16;
        v28 = 2112;
        v29[0] = v17;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

      }
      v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_statusWithRequestRideStatusIntentResponse:", *(_QWORD *)(a1 + 40)));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "userActivity"));
      -[NSObject setUserActivity:](v3, "setUserActivity:", v18);

      if (-[NSObject isActiveRide](v3, "isActiveRide"))
      {
        v19 = GEOFindOrCreateLog(v13, "RideBooking");
        v20 = objc_claimAutoreleasedReturnValue(v19);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          v21 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingApplication/RideBookingApplication.m");
          v22 = objc_alloc((Class)NSString);
          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "identifier"));
          v24 = objc_msgSend(v22, "initWithFormat:", CFSTR("Requesting extensionProxy to startSendingUpdates for the getRideStatusWithPickupLocation request for identifier %@"), v23);
          *(_DWORD *)buf = 136315394;
          v27 = v21;
          v28 = 2112;
          v29[0] = v24;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

        }
        objc_msgSend(WeakRetained, "startUpdates");
      }
    }
    v25 = *(_QWORD *)(a1 + 48);
    v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "underlyingError"));
    (*(void (**)(uint64_t, NSObject *, NSObject *))(v25 + 16))(v25, v3, v12);
  }
  else
  {
    v11 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingApplication");
    v12 = (id)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v27 = "RideBookingApplication.m";
      v28 = 1026;
      LODWORD(v29[0]) = 317;
      WORD2(v29[0]) = 2082;
      *(_QWORD *)((char *)v29 + 6) = "-[RideBookingApplication getRideStatusWithPickupLocation:dropOffLocation:rideOption"
                                     ":partySize:paymentMethod:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf4 went away in %{public}s", buf, 0x1Cu);
    }
    v3 = v12;
  }

}

void sub_100380DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100380E1C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *WeakRetained;
  uint64_t v8;
  uint64_t Log;
  NSObject *v10;
  NSObject *v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  id v15;
  NSObject *v16;
  id v17;
  id v18;
  NSObject *v19;
  _QWORD v20[4];
  id v21;
  id v22;
  id v23;
  id v24;
  uint8_t buf[4];
  char *v26;
  __int16 v27;
  _QWORD v28[3];

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = MapsSuggestionsLoggingSubsystem;
  Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingApplication");
  v10 = objc_claimAutoreleasedReturnValue(Log);
  v11 = v10;
  if (WeakRetained)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v12 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "uniqueName"));
      *(_DWORD *)buf = 138412546;
      v26 = v12;
      v27 = 2080;
      v28[0] = "getRideStatusWithCompletion_resumeWithCompletionHandler";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s END", buf, 0x16u);

    }
    v13 = GEOFindOrCreateLog(v8, "RideBookingApplication");
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_signpost_enabled(v14))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "getRideStatusWithCompletion_resumeWithCompletionHandler", "", buf, 2u);
    }

    v15 = v5;
    objc_msgSend(v15, "setImageProcessingHandler:", &stru_1011B3648);
    v16 = WeakRetained[1];
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_1003810D0;
    v20[3] = &unk_1011B3488;
    objc_copyWeak(&v24, (id *)(a1 + 40));
    v21 = v6;
    v17 = *(id *)(a1 + 32);
    v22 = v15;
    v23 = v17;
    v18 = v15;
    dispatch_async(v16, v20);

    objc_destroyWeak(&v24);
  }
  else
  {
    v19 = v10;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v26 = "RideBookingApplication.m";
      v27 = 1026;
      LODWORD(v28[0]) = 351;
      WORD2(v28[0]) = 2082;
      *(_QWORD *)((char *)v28 + 6) = "-[RideBookingApplication getRideStatusWithCompletion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_1003810D0(uint64_t a1)
{
  id *v2;
  _QWORD *WeakRetained;
  void *v4;
  uint64_t Log;
  NSObject *v6;
  char *v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  _QWORD v18[4];
  id v19;
  id v20;
  uint8_t buf[4];
  char *v22;
  __int16 v23;
  _QWORD v24[3];

  v2 = (id *)(a1 + 56);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    if (*(_QWORD *)(a1 + 32))
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[RideBookingRideStatus statusWithApplication:error:](RideBookingRideStatus, "statusWithApplication:error:", WeakRetained, 2));
      Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
      v6 = objc_claimAutoreleasedReturnValue(Log);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        v7 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingApplication/RideBookingApplication.m");
        v8 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%@ had an error handling GetRideStatus: %@"), WeakRetained[6], *(_QWORD *)(a1 + 32));
        *(_DWORD *)buf = 136315394;
        v22 = v7;
        v23 = 2112;
        v24[0] = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{RBError}{%s}: %@", buf, 0x16u);

      }
      (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

    }
    else
    {
      v11 = MapsSuggestionsLoggingSubsystem;
      v12 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingApplication");
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        v14 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "uniqueName"));
        *(_DWORD *)buf = 138412546;
        v22 = v14;
        v23 = 2080;
        v24[0] = "getRideStatusWithCompletion_handleIntentWithCompletionHandler";
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s BEGIN", buf, 0x16u);

      }
      v15 = GEOFindOrCreateLog(v11, "RideBookingApplication");
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (os_signpost_enabled(v16))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "getRideStatusWithCompletion_handleIntentWithCompletionHandler", "", buf, 2u);
      }

      v17 = *(void **)(a1 + 40);
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      v18[2] = sub_100381448;
      v18[3] = &unk_1011B3500;
      objc_copyWeak(&v20, v2);
      v19 = *(id *)(a1 + 48);
      objc_msgSend(v17, "handleIntentWithCompletionHandler:", v18);

      objc_destroyWeak(&v20);
    }
  }
  else
  {
    v9 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingApplication");
    v10 = (id)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v22 = "RideBookingApplication.m";
      v23 = 1026;
      LODWORD(v24[0]) = 357;
      WORD2(v24[0]) = 2082;
      *(_QWORD *)((char *)v24 + 6) = "-[RideBookingApplication getRideStatusWithCompletion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf2 went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_10038142C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100381448(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *WeakRetained;
  uint64_t v8;
  uint64_t Log;
  NSObject *v10;
  NSObject *v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  id v21;
  uint8_t buf[4];
  char *v23;
  __int16 v24;
  _QWORD v25[3];

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = MapsSuggestionsLoggingSubsystem;
  Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingApplication");
  v10 = objc_claimAutoreleasedReturnValue(Log);
  v11 = v10;
  if (WeakRetained)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v12 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "uniqueName"));
      *(_DWORD *)buf = 138412546;
      v23 = v12;
      v24 = 2080;
      v25[0] = "getRideStatusWithCompletion_handleIntentWithCompletionHandler";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s END", buf, 0x16u);

    }
    v13 = GEOFindOrCreateLog(v8, "RideBookingApplication");
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_signpost_enabled(v14))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "getRideStatusWithCompletion_handleIntentWithCompletionHandler", "", buf, 2u);
    }

    v15 = WeakRetained[1];
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_1003816E4;
    v17[3] = &unk_1011B3488;
    objc_copyWeak(&v21, (id *)(a1 + 40));
    v18 = v6;
    v20 = *(id *)(a1 + 32);
    v19 = v5;
    dispatch_async(v15, v17);

    objc_destroyWeak(&v21);
  }
  else
  {
    v16 = v10;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v23 = "RideBookingApplication.m";
      v24 = 1026;
      LODWORD(v25[0]) = 368;
      WORD2(v25[0]) = 2082;
      *(_QWORD *)((char *)v25 + 6) = "-[RideBookingApplication getRideStatusWithCompletion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf3 went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_1003816E4(uint64_t a1)
{
  _QWORD *WeakRetained;
  NSObject *v3;
  uint64_t Log;
  NSObject *v5;
  char *v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  char *v16;
  id v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  char *v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint8_t buf[4];
  char *v27;
  __int16 v28;
  _QWORD v29[3];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    if (*(_QWORD *)(a1 + 32))
    {
      v3 = objc_claimAutoreleasedReturnValue(+[RideBookingRideStatus statusWithApplication:error:](RideBookingRideStatus, "statusWithApplication:error:", WeakRetained, 2));
      Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
      v5 = objc_claimAutoreleasedReturnValue(Log);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v6 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingApplication/RideBookingApplication.m");
        v7 = objc_alloc((Class)NSString);
        v8 = WeakRetained[6];
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "underlyingError"));
        v10 = objc_msgSend(v7, "initWithFormat:", CFSTR("%@ had an error handling GetRideStatus: %@"), v8, v9);
        *(_DWORD *)buf = 136315394;
        v27 = v6;
        v28 = 2112;
        v29[0] = v10;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{RBError}{%s}: %@", buf, 0x16u);

      }
    }
    else
    {
      v13 = DefaultLoggingSubsystem;
      v14 = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        v16 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingApplication/RideBookingApplication.m");
        v17 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%@ successfully handled GetRideStatus: %@"), WeakRetained[6], *(_QWORD *)(a1 + 40));
        *(_DWORD *)buf = 136315394;
        v27 = v16;
        v28 = 2112;
        v29[0] = v17;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

      }
      v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_statusWithGetRideStatusIntentResponse:", *(_QWORD *)(a1 + 40)));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "userActivity"));
      -[NSObject setUserActivity:](v3, "setUserActivity:", v18);

      if (-[NSObject isActiveRide](v3, "isActiveRide"))
      {
        v19 = GEOFindOrCreateLog(v13, "RideBooking");
        v20 = objc_claimAutoreleasedReturnValue(v19);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          v21 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingApplication/RideBookingApplication.m");
          v22 = objc_alloc((Class)NSString);
          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "identifier"));
          v24 = objc_msgSend(v22, "initWithFormat:", CFSTR("Requesting extensionProxy to startSendingUpdates for the getRideStatus request for identifier %@"), v23);
          *(_DWORD *)buf = 136315394;
          v27 = v21;
          v28 = 2112;
          v29[0] = v24;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

        }
        objc_msgSend(WeakRetained, "startUpdates");
      }
    }
    v25 = *(_QWORD *)(a1 + 48);
    v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "underlyingError"));
    (*(void (**)(uint64_t, NSObject *, NSObject *))(v25 + 16))(v25, v3, v12);
  }
  else
  {
    v11 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingApplication");
    v12 = (id)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v27 = "RideBookingApplication.m";
      v28 = 1026;
      LODWORD(v29[0]) = 371;
      WORD2(v29[0]) = 2082;
      *(_QWORD *)((char *)v29 + 6) = "-[RideBookingApplication getRideStatusWithCompletion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf4 went away in %{public}s", buf, 0x1Cu);
    }
    v3 = v12;
  }

}

void sub_100381DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100381DE8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  uint64_t v8;
  uint64_t Log;
  NSObject *v10;
  NSObject *v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  int v16;
  char *v17;
  __int16 v18;
  _QWORD v19[3];

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v8 = MapsSuggestionsLoggingSubsystem;
  Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingApplication");
  v10 = objc_claimAutoreleasedReturnValue(Log);
  v11 = v10;
  if (WeakRetained)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v12 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "uniqueName"));
      v16 = 138412546;
      v17 = v12;
      v18 = 2080;
      v19[0] = "startGetRideStatusUpdates_resumeWithCompletionHandler";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s END", (uint8_t *)&v16, 0x16u);

    }
    v13 = GEOFindOrCreateLog(v8, "RideBookingApplication");
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_signpost_enabled(v14))
    {
      LOWORD(v16) = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "startGetRideStatusUpdates_resumeWithCompletionHandler", "", (uint8_t *)&v16, 2u);
    }

    v15 = v5;
    -[NSObject setImageProcessingHandler:](v15, "setImageProcessingHandler:", &stru_1011B3648);
    -[NSObject setShouldResetRequestAfterHandle:](v15, "setShouldResetRequestAfterHandle:", 0);
    -[NSObject startSendingUpdatesToObserver:](v15, "startSendingUpdatesToObserver:", WeakRetained);
  }
  else
  {
    v15 = v10;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = 136446722;
      v17 = "RideBookingApplication.m";
      v18 = 1026;
      LODWORD(v19[0]) = 410;
      WORD2(v19[0]) = 2082;
      *(_QWORD *)((char *)v19 + 6) = "-[RideBookingApplication startUpdates]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", (uint8_t *)&v16, 0x1Cu);
    }

  }
}

void sub_100382318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10038233C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id *WeakRetained;
  uint64_t v8;
  uint64_t Log;
  NSObject *v10;
  NSObject *v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  int v16;
  char *v17;
  __int16 v18;
  _QWORD v19[3];

  v5 = a2;
  v6 = a3;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v8 = MapsSuggestionsLoggingSubsystem;
  Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingApplication");
  v10 = objc_claimAutoreleasedReturnValue(Log);
  v11 = v10;
  if (WeakRetained)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v12 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "uniqueName"));
      v16 = 138412546;
      v17 = v12;
      v18 = 2080;
      v19[0] = "stopGetRideStatusUpdates_resumeWithCompletionHandler";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s END", (uint8_t *)&v16, 0x16u);

    }
    v13 = GEOFindOrCreateLog(v8, "RideBookingApplication");
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_signpost_enabled(v14))
    {
      LOWORD(v16) = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "stopGetRideStatusUpdates_resumeWithCompletionHandler", "", (uint8_t *)&v16, 2u);
    }

    objc_msgSend(v5, "stopSendingUpdates");
    objc_msgSend(WeakRetained[2], "reset");
  }
  else
  {
    v15 = v10;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = 136446722;
      v17 = "RideBookingApplication.m";
      v18 = 1026;
      LODWORD(v19[0]) = 434;
      WORD2(v19[0]) = 2082;
      *(_QWORD *)((char *)v19 + 6) = "-[RideBookingApplication stopUpdates]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", (uint8_t *)&v16, 0x1Cu);
    }

  }
}

void sub_100382608(id *a1)
{
  id WeakRetained;
  uint64_t Log;
  NSObject *v4;
  char *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint8_t buf[4];
  char *v18;
  __int16 v19;
  _QWORD v20[3];

  WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
    v4 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingApplication/RideBookingApplication.m");
      v6 = objc_alloc((Class)NSString);
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "identifier"));
      v8 = objc_msgSend(v6, "initWithFormat:", CFSTR("%@ received GetRideStatus live update: %@"), v7, a1[4]);
      *(_DWORD *)buf = 136315394;
      v18 = v5;
      v19 = 2112;
      v20[0] = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

    }
    v9 = a1[4];
    v10 = objc_opt_class(INGetRideStatusIntentResponse);
    if ((objc_opt_isKindOfClass(v9, v10) & 1) != 0)
      v11 = v9;
    else
      v11 = 0;
    v12 = v11;

    v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_statusWithGetRideStatusIntentResponse:", v12));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "userActivity"));
    -[NSObject setUserActivity:](v13, "setUserActivity:", v14);

    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
    objc_msgSend(v15, "rideStatusDidChange:", v13);

    if ((-[NSObject isActiveRide](v13, "isActiveRide") & 1) == 0)
      objc_msgSend(a1[5], "stopUpdates");
  }
  else
  {
    v16 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingApplication");
    v13 = (id)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v18 = "RideBookingApplication.m";
      v19 = 1026;
      LODWORD(v20[0]) = 447;
      WORD2(v20[0]) = 2082;
      *(_QWORD *)((char *)v20 + 6) = "-[RideBookingApplication intentResponseDidUpdate:withSerializedCacheItems:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
    }
    v12 = v13;
  }

}

void sub_100382CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100382D24(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *WeakRetained;
  uint64_t v8;
  uint64_t Log;
  NSObject *v10;
  NSObject *v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  id v15;
  NSObject *v16;
  id v17;
  id v18;
  NSObject *v19;
  _QWORD v20[4];
  id v21;
  id v22;
  id v23;
  id v24;
  uint8_t buf[4];
  char *v26;
  __int16 v27;
  _QWORD v28[3];

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = MapsSuggestionsLoggingSubsystem;
  Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingApplication");
  v10 = objc_claimAutoreleasedReturnValue(Log);
  v11 = v10;
  if (WeakRetained)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v12 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "uniqueName"));
      *(_DWORD *)buf = 138412546;
      v26 = v12;
      v27 = 2080;
      v28[0] = "sendFeedbackForRide_resumeWithCompletionHandler";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s END", buf, 0x16u);

    }
    v13 = GEOFindOrCreateLog(v8, "RideBookingApplication");
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_signpost_enabled(v14))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "sendFeedbackForRide_resumeWithCompletionHandler", "", buf, 2u);
    }

    v15 = v5;
    objc_msgSend(v15, "setShouldResetRequestAfterHandle:", 0);
    objc_msgSend(v15, "setImageProcessingHandler:", &stru_1011B3648);
    v16 = WeakRetained[1];
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_100382FE4;
    v20[3] = &unk_1011B3488;
    objc_copyWeak(&v24, (id *)(a1 + 40));
    v21 = v6;
    v17 = *(id *)(a1 + 32);
    v22 = v15;
    v23 = v17;
    v18 = v15;
    dispatch_async(v16, v20);

    objc_destroyWeak(&v24);
  }
  else
  {
    v19 = v10;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v26 = "RideBookingApplication.m";
      v27 = 1026;
      LODWORD(v28[0]) = 480;
      WORD2(v28[0]) = 2082;
      *(_QWORD *)((char *)v28 + 6) = "-[RideBookingApplication sendFeedbackForRideStatus:feedbackRating:feedbackTip:compl"
                                     "etion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_100382FE4(uint64_t a1)
{
  id *v2;
  _QWORD *WeakRetained;
  uint64_t Log;
  NSObject *v5;
  char *v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  _QWORD v17[4];
  id v18;
  id v19;
  uint8_t buf[4];
  char *v21;
  __int16 v22;
  _QWORD v23[3];

  v2 = (id *)(a1 + 56);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    if (*(_QWORD *)(a1 + 32))
    {
      Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
      v5 = objc_claimAutoreleasedReturnValue(Log);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v6 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingApplication/RideBookingApplication.m");
        v7 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%@ had an error handling SendRideFeeback: %@"), WeakRetained[6], *(_QWORD *)(a1 + 32));
        *(_DWORD *)buf = 136315394;
        v21 = v6;
        v22 = 2112;
        v23[0] = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{RBError}{%s}: %@", buf, 0x16u);

      }
      (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    }
    else
    {
      v10 = MapsSuggestionsLoggingSubsystem;
      v11 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingApplication");
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        v13 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "uniqueName"));
        *(_DWORD *)buf = 138412546;
        v21 = v13;
        v22 = 2080;
        v23[0] = "sendFeedbackForRide_handleIntentWithCompletionHandler";
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s BEGIN", buf, 0x16u);

      }
      v14 = GEOFindOrCreateLog(v10, "RideBookingApplication");
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_signpost_enabled(v15))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "sendFeedbackForRide_handleIntentWithCompletionHandler", "", buf, 2u);
      }

      v16 = *(void **)(a1 + 40);
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_100383338;
      v17[3] = &unk_1011B3578;
      objc_copyWeak(&v19, v2);
      v18 = *(id *)(a1 + 48);
      objc_msgSend(v16, "handleIntentWithCompletionHandler:", v17);

      objc_destroyWeak(&v19);
    }
  }
  else
  {
    v8 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingApplication");
    v9 = (id)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v21 = "RideBookingApplication.m";
      v22 = 1026;
      LODWORD(v23[0]) = 487;
      WORD2(v23[0]) = 2082;
      *(_QWORD *)((char *)v23 + 6) = "-[RideBookingApplication sendFeedbackForRideStatus:feedbackRating:feedbackTip:compl"
                                     "etion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf2 went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_10038331C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100383338(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *WeakRetained;
  uint64_t v8;
  uint64_t Log;
  NSObject *v10;
  NSObject *v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  id v21;
  uint8_t buf[4];
  char *v23;
  __int16 v24;
  _QWORD v25[3];

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = MapsSuggestionsLoggingSubsystem;
  Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingApplication");
  v10 = objc_claimAutoreleasedReturnValue(Log);
  v11 = v10;
  if (WeakRetained)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v12 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "uniqueName"));
      *(_DWORD *)buf = 138412546;
      v23 = v12;
      v24 = 2080;
      v25[0] = "sendFeedbackForRide_handleIntentWithCompletionHandler";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s END", buf, 0x16u);

    }
    v13 = GEOFindOrCreateLog(v8, "RideBookingApplication");
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_signpost_enabled(v14))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "sendFeedbackForRide_handleIntentWithCompletionHandler", "", buf, 2u);
    }

    v15 = WeakRetained[1];
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_1003835D4;
    v17[3] = &unk_1011B3550;
    objc_copyWeak(&v21, (id *)(a1 + 40));
    v18 = v6;
    v19 = v5;
    v20 = *(id *)(a1 + 32);
    dispatch_async(v15, v17);

    objc_destroyWeak(&v21);
  }
  else
  {
    v16 = v10;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v23 = "RideBookingApplication.m";
      v24 = 1026;
      LODWORD(v25[0]) = 496;
      WORD2(v25[0]) = 2082;
      *(_QWORD *)((char *)v25 + 6) = "-[RideBookingApplication sendFeedbackForRideStatus:feedbackRating:feedbackTip:compl"
                                     "etion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf3 went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_1003835D4(uint64_t a1)
{
  _QWORD *WeakRetained;
  uint64_t v3;
  NSObject *v4;
  char *v5;
  id v6;
  void *v7;
  uint64_t Log;
  NSObject *v9;
  char *v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  NSObject *v15;
  uint8_t buf[4];
  char *v17;
  __int16 v18;
  _QWORD v19[3];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    if (*(_QWORD *)(a1 + 32)
      || objc_msgSend(*(id *)(a1 + 40), "code") == (id)3
      || !objc_msgSend(*(id *)(a1 + 40), "code"))
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSError GEOErrorWithCode:reason:](NSError, "GEOErrorWithCode:reason:", -13, CFSTR("Unable to send ride feedback")));
      Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
      v9 = objc_claimAutoreleasedReturnValue(Log);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v10 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingApplication/RideBookingApplication.m");
        v11 = objc_alloc((Class)NSString);
        v12 = *(void **)(a1 + 32);
        if (!v12)
          v12 = v7;
        v13 = objc_msgSend(v11, "initWithFormat:", CFSTR("%@ had an error handling SendRideFeeback: %@"), WeakRetained[6], v12);
        *(_DWORD *)buf = 136315394;
        v17 = v10;
        v18 = 2112;
        v19[0] = v13;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "{RBError}{%s}: %@", buf, 0x16u);

      }
      (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

    }
    else
    {
      v3 = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
      v4 = objc_claimAutoreleasedReturnValue(v3);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v5 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingApplication/RideBookingApplication.m");
        v6 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%@ successfully handled SendRideFeeback"), WeakRetained[6]);
        *(_DWORD *)buf = 136315394;
        v17 = v5;
        v18 = 2112;
        v19[0] = v6;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

      }
      (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    }
  }
  else
  {
    v14 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingApplication");
    v15 = (id)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v17 = "RideBookingApplication.m";
      v18 = 1026;
      LODWORD(v19[0]) = 500;
      WORD2(v19[0]) = 2082;
      *(_QWORD *)((char *)v19 + 6) = "-[RideBookingApplication sendFeedbackForRideStatus:feedbackRating:feedbackTip:compl"
                                     "etion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf4 went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_100383C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100383CA0(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *WeakRetained;
  uint64_t v8;
  uint64_t Log;
  NSObject *v10;
  NSObject *v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  id v15;
  NSObject *v16;
  id v17;
  NSObject *v18;
  _QWORD block[4];
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint8_t buf[4];
  char *v26;
  __int16 v27;
  _QWORD v28[3];

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  v8 = MapsSuggestionsLoggingSubsystem;
  Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingApplication");
  v10 = objc_claimAutoreleasedReturnValue(Log);
  v11 = v10;
  if (WeakRetained)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v12 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "uniqueName"));
      *(_DWORD *)buf = 138412546;
      v26 = v12;
      v27 = 2080;
      v28[0] = "checkIfCanCancelRide_resumeWithCompletionHandler";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s END", buf, 0x16u);

    }
    v13 = GEOFindOrCreateLog(v8, "RideBookingApplication");
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_signpost_enabled(v14))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "checkIfCanCancelRide_resumeWithCompletionHandler", "", buf, 2u);
    }

    v15 = v5;
    objc_msgSend(v15, "setShouldResetRequestAfterHandle:", 0);
    objc_msgSend(v15, "setImageProcessingHandler:", &stru_1011B3648);
    v16 = WeakRetained[1];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100383F78;
    block[3] = &unk_1011B3398;
    objc_copyWeak(&v24, a1 + 6);
    v20 = v6;
    v23 = a1[5];
    v21 = v15;
    v22 = a1[4];
    v17 = v15;
    dispatch_async(v16, block);

    objc_destroyWeak(&v24);
  }
  else
  {
    v18 = v10;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v26 = "RideBookingApplication.m";
      v27 = 1026;
      LODWORD(v28[0]) = 531;
      WORD2(v28[0]) = 2082;
      *(_QWORD *)((char *)v28 + 6) = "-[RideBookingApplication checkIfCanCancelRideWithRideStatus:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_100383F78(uint64_t a1)
{
  id *v2;
  _QWORD *WeakRetained;
  uint64_t Log;
  NSObject *v5;
  char *v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  uint8_t buf[4];
  char *v22;
  __int16 v23;
  _QWORD v24[3];

  v2 = (id *)(a1 + 64);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    if (*(_QWORD *)(a1 + 32))
    {
      Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
      v5 = objc_claimAutoreleasedReturnValue(Log);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v6 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingApplication/RideBookingApplication.m");
        v7 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%@ had an error confirming CancelRide: %@"), WeakRetained[6], *(_QWORD *)(a1 + 32));
        *(_DWORD *)buf = 136315394;
        v22 = v6;
        v23 = 2112;
        v24[0] = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{RBError}{%s}: %@", buf, 0x16u);

      }
      (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
    }
    else
    {
      v10 = MapsSuggestionsLoggingSubsystem;
      v11 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingApplication");
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        v13 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "uniqueName"));
        *(_DWORD *)buf = 138412546;
        v22 = v13;
        v23 = 2080;
        v24[0] = "checkIfCanCancelRide_confirmIntentWithCompletionHandler";
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s BEGIN", buf, 0x16u);

      }
      v14 = GEOFindOrCreateLog(v10, "RideBookingApplication");
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_signpost_enabled(v15))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "checkIfCanCancelRide_confirmIntentWithCompletionHandler", "", buf, 2u);
      }

      v16 = *(void **)(a1 + 40);
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_1003842E8;
      v17[3] = &unk_1011B35A0;
      objc_copyWeak(&v20, v2);
      v19 = *(id *)(a1 + 56);
      v18 = *(id *)(a1 + 48);
      objc_msgSend(v16, "confirmIntentWithCompletionHandler:", v17);

      objc_destroyWeak(&v20);
    }
  }
  else
  {
    v8 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingApplication");
    v9 = (id)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v22 = "RideBookingApplication.m";
      v23 = 1026;
      LODWORD(v24[0]) = 538;
      WORD2(v24[0]) = 2082;
      *(_QWORD *)((char *)v24 + 6) = "-[RideBookingApplication checkIfCanCancelRideWithRideStatus:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf2 went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_1003842CC(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1003842E8(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *WeakRetained;
  uint64_t v8;
  uint64_t Log;
  NSObject *v10;
  NSObject *v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  _QWORD block[4];
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint8_t buf[4];
  char *v24;
  __int16 v25;
  _QWORD v26[3];

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  v8 = MapsSuggestionsLoggingSubsystem;
  Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingApplication");
  v10 = objc_claimAutoreleasedReturnValue(Log);
  v11 = v10;
  if (WeakRetained)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v12 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "uniqueName"));
      *(_DWORD *)buf = 138412546;
      v24 = v12;
      v25 = 2080;
      v26[0] = "checkIfCanCancelRide_confirmIntentWithCompletionHandler";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s END", buf, 0x16u);

    }
    v13 = GEOFindOrCreateLog(v8, "RideBookingApplication");
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_signpost_enabled(v14))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "checkIfCanCancelRide_confirmIntentWithCompletionHandler", "", buf, 2u);
    }

    v15 = WeakRetained[1];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100384598;
    block[3] = &unk_1011B3398;
    objc_copyWeak(&v22, a1 + 6);
    v18 = v6;
    v21 = a1[5];
    v19 = v5;
    v20 = a1[4];
    dispatch_async(v15, block);

    objc_destroyWeak(&v22);
  }
  else
  {
    v16 = v10;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v24 = "RideBookingApplication.m";
      v25 = 1026;
      LODWORD(v26[0]) = 547;
      WORD2(v26[0]) = 2082;
      *(_QWORD *)((char *)v26 + 6) = "-[RideBookingApplication checkIfCanCancelRideWithRideStatus:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf3 went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_100384598(uint64_t a1)
{
  _QWORD *WeakRetained;
  uint64_t Log;
  NSObject *v4;
  char *v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  NSObject *v15;
  char *v16;
  id v17;
  RideBookingCurrencyAmount *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  NSObject *v27;
  char *v28;
  id v29;
  uint8_t buf[4];
  char *v31;
  __int16 v32;
  _QWORD v33[3];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    if (*(_QWORD *)(a1 + 32))
    {
      Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
      v4 = objc_claimAutoreleasedReturnValue(Log);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        v5 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingApplication/RideBookingApplication.m");
        v6 = objc_alloc((Class)NSString);
        v7 = WeakRetained[6];
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "underlyingError"));
        v9 = objc_msgSend(v6, "initWithFormat:", CFSTR("%@ had an error confirming CancelRide: %@"), v7, v8);
        *(_DWORD *)buf = 136315394;
        v31 = v5;
        v32 = 2112;
        v33[0] = v9;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "{RBError}{%s}: %@", buf, 0x16u);

      }
      v10 = *(_QWORD *)(a1 + 56);
      v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "underlyingError"));
      (*(void (**)(uint64_t, _QWORD, _QWORD, NSObject *))(v10 + 16))(v10, 0, 0, v11);
    }
    else
    {
      v13 = objc_msgSend(*(id *)(a1 + 40), "code") != (id)2 && objc_msgSend(*(id *)(a1 + 40), "code") != (id)1;
      if (!*(_QWORD *)(a1 + 40) || v13)
      {
        v11 = objc_claimAutoreleasedReturnValue(+[NSError GEOErrorWithCode:reason:](NSError, "GEOErrorWithCode:reason:", -11, CFSTR("Extension response for INCancelRideIntent invalid")));
        v26 = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
        v27 = objc_claimAutoreleasedReturnValue(v26);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          v28 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingApplication/RideBookingApplication.m");
          v29 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%@ had an error confirming CancelRide: %@"), WeakRetained[6], v11);
          *(_DWORD *)buf = 136315394;
          v31 = v28;
          v32 = 2112;
          v33[0] = v29;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "{RBError}{%s}: %@", buf, 0x16u);

        }
        (*(void (**)(_QWORD, _QWORD, _QWORD, NSObject *))(*(_QWORD *)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), 0, 0, v11);
      }
      else
      {
        v14 = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
        v15 = objc_claimAutoreleasedReturnValue(v14);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          v16 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingApplication/RideBookingApplication.m");
          v17 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%@ successfully confirmed CancelRide"), WeakRetained[6]);
          *(_DWORD *)buf = 136315394;
          v31 = v16;
          v32 = 2112;
          v33[0] = v17;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

        }
        v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "cancellationFee"));

        if (v11)
        {
          v18 = [RideBookingCurrencyAmount alloc];
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "cancellationFee"));
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "amount"));
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "cancellationFee"));
          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "currencyCode"));
          v11 = -[RideBookingCurrencyAmount initWithAmount:currencyCode:](v18, "initWithAmount:currencyCode:", v20, v22);

        }
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "cancellationFeeThreshold"));

        if (v23)
        {
          v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar autoupdatingCurrentCalendar](NSCalendar, "autoupdatingCurrentCalendar"));
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "cancellationFeeThreshold"));
          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "dateFromComponents:", v25));

        }
        (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
        objc_msgSend(*(id *)(a1 + 48), "reset");

      }
    }
  }
  else
  {
    v12 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingApplication");
    v11 = (id)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v31 = "RideBookingApplication.m";
      v32 = 1026;
      LODWORD(v33[0]) = 551;
      WORD2(v33[0]) = 2082;
      *(_QWORD *)((char *)v33 + 6) = "-[RideBookingApplication checkIfCanCancelRideWithRideStatus:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf4 went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_100384E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100384E48(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *WeakRetained;
  uint64_t v8;
  uint64_t Log;
  NSObject *v10;
  NSObject *v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  id v15;
  NSObject *v16;
  id v17;
  NSObject *v18;
  _QWORD block[4];
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint8_t buf[4];
  char *v26;
  __int16 v27;
  _QWORD v28[3];

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  v8 = MapsSuggestionsLoggingSubsystem;
  Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingApplication");
  v10 = objc_claimAutoreleasedReturnValue(Log);
  v11 = v10;
  if (WeakRetained)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v12 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "uniqueName"));
      *(_DWORD *)buf = 138412546;
      v26 = v12;
      v27 = 2080;
      v28[0] = "cancelRide_resumeWithCompletionHandler";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s END", buf, 0x16u);

    }
    v13 = GEOFindOrCreateLog(v8, "RideBookingApplication");
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_signpost_enabled(v14))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "cancelRide_resumeWithCompletionHandler", "", buf, 2u);
    }

    v15 = v5;
    objc_msgSend(v15, "setShouldResetRequestAfterHandle:", 0);
    objc_msgSend(v15, "setImageProcessingHandler:", &stru_1011B3648);
    v16 = WeakRetained[1];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100385120;
    block[3] = &unk_1011B3398;
    objc_copyWeak(&v24, a1 + 6);
    v20 = v6;
    v23 = a1[5];
    v21 = v15;
    v22 = a1[4];
    v17 = v15;
    dispatch_async(v16, block);

    objc_destroyWeak(&v24);
  }
  else
  {
    v18 = v10;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v26 = "RideBookingApplication.m";
      v27 = 1026;
      LODWORD(v28[0]) = 600;
      WORD2(v28[0]) = 2082;
      *(_QWORD *)((char *)v28 + 6) = "-[RideBookingApplication cancelRideWithRideStatus:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_100385120(uint64_t a1)
{
  id *v2;
  _QWORD *WeakRetained;
  uint64_t Log;
  NSObject *v5;
  char *v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  uint8_t buf[4];
  char *v22;
  __int16 v23;
  _QWORD v24[3];

  v2 = (id *)(a1 + 64);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    if (*(_QWORD *)(a1 + 32))
    {
      Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
      v5 = objc_claimAutoreleasedReturnValue(Log);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v6 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingApplication/RideBookingApplication.m");
        v7 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%@ had an error handling CancelRide: %@"), WeakRetained[6], *(_QWORD *)(a1 + 32));
        *(_DWORD *)buf = 136315394;
        v22 = v6;
        v23 = 2112;
        v24[0] = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{RBError}{%s}: %@", buf, 0x16u);

      }
      (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
    }
    else
    {
      v10 = MapsSuggestionsLoggingSubsystem;
      v11 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingApplication");
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        v13 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "uniqueName"));
        *(_DWORD *)buf = 138412546;
        v22 = v13;
        v23 = 2080;
        v24[0] = "cancelRide_handleIntentWithCompletionHandler";
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s BEGIN", buf, 0x16u);

      }
      v14 = GEOFindOrCreateLog(v10, "RideBookingApplication");
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_signpost_enabled(v15))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "cancelRide_handleIntentWithCompletionHandler", "", buf, 2u);
      }

      v16 = *(void **)(a1 + 40);
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_100385488;
      v17[3] = &unk_1011B35A0;
      objc_copyWeak(&v20, v2);
      v19 = *(id *)(a1 + 56);
      v18 = *(id *)(a1 + 48);
      objc_msgSend(v16, "handleIntentWithCompletionHandler:", v17);

      objc_destroyWeak(&v20);
    }
  }
  else
  {
    v8 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingApplication");
    v9 = (id)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v22 = "RideBookingApplication.m";
      v23 = 1026;
      LODWORD(v24[0]) = 607;
      WORD2(v24[0]) = 2082;
      *(_QWORD *)((char *)v24 + 6) = "-[RideBookingApplication cancelRideWithRideStatus:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf2 went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_10038546C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100385488(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *WeakRetained;
  uint64_t v8;
  uint64_t Log;
  NSObject *v10;
  NSObject *v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  _QWORD block[4];
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint8_t buf[4];
  char *v24;
  __int16 v25;
  _QWORD v26[3];

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  v8 = MapsSuggestionsLoggingSubsystem;
  Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingApplication");
  v10 = objc_claimAutoreleasedReturnValue(Log);
  v11 = v10;
  if (WeakRetained)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v12 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "uniqueName"));
      *(_DWORD *)buf = 138412546;
      v24 = v12;
      v25 = 2080;
      v26[0] = "cancelRide_handleIntentWithCompletionHandler";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s END", buf, 0x16u);

    }
    v13 = GEOFindOrCreateLog(v8, "RideBookingApplication");
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_signpost_enabled(v14))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "cancelRide_handleIntentWithCompletionHandler", "", buf, 2u);
    }

    v15 = WeakRetained[1];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100385738;
    block[3] = &unk_1011B3398;
    objc_copyWeak(&v22, a1 + 6);
    v18 = v6;
    v21 = a1[5];
    v19 = v5;
    v20 = a1[4];
    dispatch_async(v15, block);

    objc_destroyWeak(&v22);
  }
  else
  {
    v16 = v10;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v24 = "RideBookingApplication.m";
      v25 = 1026;
      LODWORD(v26[0]) = 616;
      WORD2(v26[0]) = 2082;
      *(_QWORD *)((char *)v26 + 6) = "-[RideBookingApplication cancelRideWithRideStatus:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf3 went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_100385738(uint64_t a1)
{
  _QWORD *WeakRetained;
  uint64_t v3;
  NSObject *v4;
  char *v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t Log;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  char *v16;
  id v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  char *v21;
  id v22;
  uint8_t buf[4];
  char *v24;
  __int16 v25;
  _QWORD v26[3];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (!WeakRetained)
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingApplication");
    v11 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v24 = "RideBookingApplication.m";
      v25 = 1026;
      LODWORD(v26[0]) = 620;
      WORD2(v26[0]) = 2082;
      *(_QWORD *)((char *)v26 + 6) = "-[RideBookingApplication cancelRideWithRideStatus:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf4 went away in %{public}s", buf, 0x1Cu);
    }

    goto LABEL_9;
  }
  if (*(_QWORD *)(a1 + 32))
  {
    v3 = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingApplication/RideBookingApplication.m");
      v6 = objc_alloc((Class)NSString);
      v7 = WeakRetained[6];
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "underlyingError"));
      v9 = objc_msgSend(v6, "initWithFormat:", CFSTR("%@ had an error handling CancelRide: %@"), v7, v8);
      *(_DWORD *)buf = 136315394;
      v24 = v5;
      v25 = 2112;
      v26[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "{RBError}{%s}: %@", buf, 0x16u);

    }
    v10 = *(_QWORD *)(a1 + 56);
    v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "underlyingError"));
    (*(void (**)(uint64_t, NSObject *))(v10 + 16))(v10, v11);
LABEL_9:

    goto LABEL_10;
  }
  v13 = *(void **)(a1 + 40);
  if (v13 && objc_msgSend(v13, "code") == (id)2)
  {
    v14 = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      v16 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingApplication/RideBookingApplication.m");
      v17 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%@ successfully handled CancelRide"), WeakRetained[6]);
      *(_DWORD *)buf = 136315394;
      v24 = v16;
      v25 = 2112;
      v26[0] = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
    objc_msgSend(*(id *)(a1 + 48), "reset");
  }
  else
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSError GEOErrorWithCode:reason:](NSError, "GEOErrorWithCode:reason:", -11, CFSTR("Extension response for INCancelRideIntent invalid")));
    v19 = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
    v20 = objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v21 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingApplication/RideBookingApplication.m");
      v22 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%@ had an error handling CancelRide: %@"), WeakRetained[6], v18);
      *(_DWORD *)buf = 136315394;
      v24 = v21;
      v25 = 2112;
      v26[0] = v22;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "{RBError}{%s}: %@", buf, 0x16u);

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

  }
LABEL_10:

}

void sub_100385BA8(uint64_t a1)
{
  id WeakRetained;
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  uint64_t Log;
  _QWORD v11[4];
  id v12;
  uint8_t buf[4];
  char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (!WeakRetained)
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingApplication");
    v8 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v14 = "RideBookingApplication.m";
      v15 = 1026;
      v16 = 649;
      v17 = 2082;
      v18 = "-[RideBookingApplication openWithActivity:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
    }

    goto LABEL_9;
  }
  if (!*(_QWORD *)(a1 + 32)
    || (v3 = objc_alloc((Class)LSApplicationRecord),
        v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "identifier")),
        v5 = objc_msgSend(v3, "initWithBundleIdentifier:allowPlaceholder:error:", v4, 0, 0),
        v4,
        !v5))
  {
    v8 = objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "identifier"));
    -[NSObject openApplicationWithBundleID:](v8, "openApplicationWithBundleID:", v9);

LABEL_9:
    goto LABEL_10;
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[MKSystemController sharedInstance](MKSystemController, "sharedInstance"));
  v7 = *(void **)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100385DA4;
  v11[3] = &unk_1011ACF90;
  v12 = v7;
  objc_msgSend(v6, "openUserActivity:withApplicationRecord:requireOptionKeyPromptUnlockDevice:completionHandler:", v12, v5, 0, v11);

LABEL_10:
}

void sub_100385DA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Log;
  NSObject *v5;
  char *v6;
  id v7;
  uint8_t buf[4];
  char *v9;
  __int16 v10;
  id v11;

  if (a3)
  {
    Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
    v5 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingApplication/RideBookingApplication.m");
      v7 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Error opening acivity: %@"), *(_QWORD *)(a1 + 32));
      *(_DWORD *)buf = 136315394;
      v9 = v6;
      v10 = 2112;
      v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{RBError}{%s}: %@", buf, 0x16u);

    }
  }
}

RideBookingPassengersChoice *sub_100385F30(uint64_t a1, void *a2)
{
  id v3;
  char *v4;
  uint64_t v5;
  RideBookingPassengersChoice *v6;

  v3 = a2;
  v4 = (char *)objc_msgSend(v3, "partySizeRange");
  objc_msgSend(v3, "partySizeRange");
  v6 = -[RideBookingPassengersChoice initWithNumberOfPassengers:]([RideBookingPassengersChoice alloc], "initWithNumberOfPassengers:", &v4[v5]);
  -[RideBookingPassengersChoice setIntentsPartySizeOption:](v6, "setIntentsPartySizeOption:", v3);

  -[RideBookingPassengersChoice setIntentsPriceRange:](v6, "setIntentsPriceRange:", *(_QWORD *)(a1 + 32));
  return v6;
}

int64_t sub_100386F28(id a1, INRideOption *a2, INRideOption *a3)
{
  INRideOption *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  int64_t v9;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[INRideOption priceRange](a2, "priceRange"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "minimumPrice"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(-[INRideOption priceRange](v4, "priceRange"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "minimumPrice"));
  v9 = objc_msgSend(v6, "compare:", v8) == (id)1;

  return v9;
}

void sub_1003870A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1003870BC(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  uint64_t Log;
  NSObject *v6;
  int v7;
  char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  const char *v12;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[RideBookingRideStatus statusWithApplication:error:](RideBookingRideStatus, "statusWithApplication:error:", WeakRetained, 9));
    v4 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 32));
    objc_msgSend(v4, "rideStatusDidChange:", v3);

  }
  else
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingApplication");
    v6 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = 136446722;
      v8 = "RideBookingApplication.m";
      v9 = 1026;
      v10 = 1033;
      v11 = 2082;
      v12 = "-[RideBookingApplication didChangeProtectionStatusForBundleId:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", (uint8_t *)&v7, 0x1Cu);
    }

  }
}

void sub_10038730C(id a1, INImage *a2, id a3)
{
  INImage *v4;
  id v5;
  _QWORD v6[4];
  INImage *v7;
  id v8;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1003873A4;
  v6[3] = &unk_1011B3670;
  v7 = a2;
  v8 = a3;
  v4 = v7;
  v5 = v8;
  -[INImage _retrieveImageDataWithReply:](v4, "_retrieveImageDataWithReply:", v6);

}

void sub_1003873A4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t Log;
  NSObject *v8;
  char *v9;
  id v10;
  void (*v11)(void);
  void *v12;
  void *v13;
  void *v14;
  uint8_t buf[4];
  char *v16;
  __int16 v17;
  id v18;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
    v8 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingApplication/RideBookingApplication.m");
      v10 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Unable to retrieve image data = %@"), v6);
      *(_DWORD *)buf = 136315394;
      v16 = v9;
      v17 = 2112;
      v18 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{RBError}{%s}: %@", buf, 0x16u);

    }
    v11 = *(void (**)(void))(*(_QWORD *)(a1 + 40) + 16);
  }
  else
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[RideBookingAccessProxy imageCache](RideBookingAccessProxy, "imageCache"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "_imageData"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_identifier"));
    objc_msgSend(v12, "cacheINImageData:withKey:", v13, v14);

    v11 = *(void (**)(void))(*(_QWORD *)(a1 + 40) + 16);
  }
  v11();

}

id sub_100387538(uint64_t a1, char a2)
{
  void *v3;
  const __CFString *v4;
  void *v5;
  void *v6;

  switch(a1)
  {
    case 1:
      v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      if ((a2 & 1) != 0)
        v4 = CFSTR("[Route Creation] Remove Anchor");
      else
        v4 = CFSTR("[Route Creation] Add Anchor");
      goto LABEL_16;
    case 2:
      v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      if ((a2 & 1) != 0)
        v4 = CFSTR("[Route Creation] Redo Anchor");
      else
        v4 = CFSTR("[Route Creation] Undo Delete Anchor");
      goto LABEL_16;
    case 3:
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v3 = v5;
      v4 = CFSTR("[Route Creation] Reverse Anchors");
      goto LABEL_17;
    case 4:
      v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      if ((a2 & 1) != 0)
        v4 = CFSTR("[Route Creation] Out-and-Back");
      else
        v4 = CFSTR("[Route Creation] Undo Out-and-Back");
      goto LABEL_16;
    case 5:
      v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      if ((a2 & 1) != 0)
        v4 = CFSTR("[Route Creation] Close Loop");
      else
        v4 = CFSTR("[Route Creation] Undo Close Loop");
LABEL_16:
      v5 = v3;
LABEL_17:
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "localizedStringForKey:value:table:", v4, CFSTR("localized string not found"), 0));

      break;
    default:
      v6 = 0;
      break;
  }
  return v6;
}

NSString *__cdecl sub_100387D3C(id a1, GEOComposedRouteAnchorPoint *a2)
{
  GEOComposedRouteAnchorPoint *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a2;
  -[GEOComposedRouteAnchorPoint locationCoordinate](v2, "locationCoordinate");
  v4 = v3;
  -[GEOComposedRouteAnchorPoint locationCoordinate](v2, "locationCoordinate");
  v6 = v5;

  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%f, %f"), v4, v6);
}

void sub_100387F08(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v2, "setFrame:", *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64));

}

void sub_100389300(uint64_t a1, void *a2)
{
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "firstObject"));
  objc_msgSend(*(id *)(a1 + 32), "saveMapItem:", v3);

}

void sub_10038AD48(uint64_t a1)
{
  void *v1;
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "window"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "rootViewController"));
  sub_1009C5D44(v2);

}

BOOL sub_10038BA7C(id a1, UIButton *a2, NSDictionary *a3)
{
  UIButton *v3;
  unsigned int v4;

  v3 = a2;
  if (-[UIButton isEnabled](v3, "isEnabled"))
    v4 = -[UIButton isHidden](v3, "isHidden") ^ 1;
  else
    LOBYTE(v4) = 0;

  return v4;
}

int64_t sub_10038D8B0(void *a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;
  _BYTE *v5;
  id v6;
  _BYTE *v7;
  int64_t v9;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "activePhotoList"));
  v3 = objc_msgSend(v2, "count");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "addedPhotosWithMetadata"));
  v5 = objc_msgSend(v4, "count");
  v6 = objc_msgSend(v1, "maximumNumberOfPhotos");
  v7 = objc_msgSend(v1, "maximumNumberOfPhotosPerSubmission");

  if (v7 <= v5 || v3 >= v6)
    v9 = 0;
  else
    v9 = v7 - v5;

  return v9;
}

void sub_10038EA58(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "logicController"));
  objc_msgSend(v1, "displayFilters");

}

id sub_10039064C()
{
  if (qword_1014D2258 != -1)
    dispatch_once(&qword_1014D2258, &stru_1011B3738);
  return (id)qword_1014D2250;
}

void sub_100390E50(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cardPresentationController"));
  objc_msgSend(v1, "updateHeightForCurrentLayout");

}

id sub_100391484(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  double v4;
  double v5;

  v2 = *(unsigned __int8 *)(a1 + 40);
  v3 = *(void **)(a1 + 32);
  if ((_DWORD)v2)
    v4 = 0.300000012;
  else
    v4 = 1.0;
  if ((_DWORD)v2)
    v5 = 1.0;
  else
    v5 = 0.0;
  objc_msgSend(v3, "setOverrideUserInterfaceStyle:", 2 * v2);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "setAlpha:", v4);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 192), "setAlpha:", v5);
}

void sub_100391678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

double sub_10039169C(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  double MinY;
  CGRect v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "_rectOfRowToKeepVisible");
    MinY = CGRectGetMinY(v5);
  }
  else
  {
    MinY = 0.0;
  }

  return MinY;
}

void sub_100391BCC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "TransitNavigationTray");
  v2 = (void *)qword_1014D2250;
  qword_1014D2250 = (uint64_t)v1;

}

void sub_1003920E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100392100(uint64_t a1)
{
  _QWORD *WeakRetained;
  char isKindOfClass;
  void *v4;
  _BYTE *v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v5 = WeakRetained;
    isKindOfClass = objc_opt_isKindOfClass(*(_QWORD *)(a1 + 32), WeakRetained[2]);
    WeakRetained = v5;
    if ((isKindOfClass & 1) != 0)
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[MKLocationManager sharedLocationManager](MKLocationManager, "sharedLocationManager"));
      v5[24] = objc_msgSend(v4, "isAuthorizationNotDetermined");

      objc_msgSend(v5, "updateIndicatorType");
      WeakRetained = v5;
    }
  }

}

id sub_100392BE0()
{
  if (qword_1014D2268 != -1)
    dispatch_once(&qword_1014D2268, &stru_1011B3800);
  return (id)qword_1014D2260;
}

void sub_100393258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100393288(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  id WeakRetained;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  int v18;
  id v19;
  __int16 v20;
  void *v21;

  v7 = a4;
  v8 = a3;
  v9 = a2;
  v10 = sub_100392BE0();
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "groupIdentifier"));
    v18 = 134349314;
    v19 = WeakRetained;
    v20 = 2112;
    v21 = v13;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "[%{public}p] Creating cell for shared trip: %@", (uint8_t *)&v18, 0x16u);

  }
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[TwoLinesTableViewCell identifier](TwoLinesTableViewCell, "identifier"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "dequeueReusableCellWithIdentifier:forIndexPath:", v14, v8));

  v16 = (void *)objc_claimAutoreleasedReturnValue(+[TwoLinesContentViewModelComposer cellModelForSharedTrip:](TwoLinesContentViewModelComposer, "cellModelForSharedTrip:", v7));
  objc_msgSend(v15, "setViewModel:", v16);

  return v15;
}

void sub_1003933F0(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id WeakRetained;
  id v5;
  void *v6;
  void *v7;
  int v8;
  id v9;

  v2 = sub_100392BE0();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v8 = 134349056;
    v9 = WeakRetained;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%{public}p] Reloading tableview", (uint8_t *)&v8, 0xCu);

  }
  v5 = objc_loadWeakRetained((id *)(a1 + 32));
  v6 = v5;
  if (v5)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "cardPresentationController"));
    objc_msgSend(v7, "updateHeightForCurrentLayout");

  }
}

NSString *__cdecl sub_100393638(id a1, GEOSharedNavState *a2, unint64_t a3)
{
  return (NSString *)-[GEOSharedNavState _transportTypeStringForAnalytics](a2, "_transportTypeStringForAnalytics", a3);
}

void sub_100393BAC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "SharedTripListContaineeViewController");
  v2 = (void *)qword_1014D2260;
  qword_1014D2260 = (uint64_t)v1;

}

void sub_100393D94(_QWORD *a1, void *a2, void *a3)
{
  void *v3;
  unsigned __int8 v6;
  _BOOL8 v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a3;
  v6 = objc_msgSend(a2, "isComplete");
  if ((v6 & 1) != 0)
  {
    v7 = 1;
  }
  else
  {
    v8 = *(void **)(a1[4] + 56);
    a1 = (_QWORD *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet whitespaceAndNewlineCharacterSet](NSCharacterSet, "whitespaceAndNewlineCharacterSet"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "stringByTrimmingCharactersInSet:", a1));
    v7 = objc_msgSend(v3, "length") != 0;
  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "navigationItem"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "rightBarButtonItem"));
  objc_msgSend(v10, "setEnabled:", v7);

  if ((v6 & 1) == 0)
  {

  }
}

id sub_100396DEC(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  id v10;
  id v11;
  NSObject *v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  int v18;
  id v19;

  v3 = a2;
  v4 = sub_1004331EC();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v6 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "baseFilePath:", 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v18 = 138412290;
    v19 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Created a table for base path %@", (uint8_t *)&v18, 0xCu);

  }
  if (objc_msgSend(v3, "user_version") != (id)1)
  {
    v8 = sub_1004331EC();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      v10 = objc_msgSend(v3, "user_version");
      v18 = 134217984;
      v19 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "DB user version %llu is outdated. Dropping (Little Bobby) tables.", (uint8_t *)&v18, 0xCu);
    }

    objc_msgSend(v3, "dropAllTables");
  }
  objc_msgSend(v3, "setUser_version:", 1);
  v11 = sub_1004331EC();
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    v13 = objc_msgSend(v3, "user_version");
    v18 = 134217984;
    v19 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Setting schema version to %llu", (uint8_t *)&v18, 0xCu);
  }

  v14 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "log"));
  v16 = sub_100396FC0(v14, 0);

  return v16;
}

id sub_100396FC0(void *a1, int a2)
{
  id v3;
  void *v4;
  const char *v5;
  id v6;

  v3 = a1;
  v4 = v3;
  if (a2)
    v5 = "DROP TABLE reviewedplace";
  else
    v5 = 0;
  if (objc_msgSend(v3, "createTable:withDrop:", "CREATE TABLE IF NOT EXISTS reviewedplace(   muid INT NOT NULL,    recommendstate INT NOT NULL,    photosadded INT NOT NULL,    UNIQUE(muid)   );",
                       v5)
    && objc_msgSend(v4, "prepareStatement:forKey:", "INSERT OR REPLACE INTO reviewedplace    (muid, recommendstate, photosadded)    VALUES (@muid, @recommendstate, @photosadded);",
                       CFSTR("SetReviewedPlace"))
    && objc_msgSend(v4, "prepareStatement:forKey:", "SELECT muid, recommendstate, photosadded    FROM reviewedplace    WHERE muid = @muid    LIMIT 1;",
                       CFSTR("FindReviewedPlace"))
    && objc_msgSend(v4, "prepareStatement:forKey:", "DELETE FROM reviewedplace    WHERE muid = @muid    LIMIT 1;",
                       CFSTR("RemoveReviewedPlace")))
  {
    v6 = objc_msgSend(v4, "prepareStatement:forKey:", "DROP TABLE reviewedplace;", CFSTR("DropReviewedPlaceEntries"));
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_100397428(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100397444(uint64_t a1, char a2, void *a3)
{
  id v5;
  uint64_t v6;
  void (*v7)(void);
  uint64_t v8;
  id WeakRetained;
  uint64_t v10;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14[2];
  char v15;

  v5 = a3;
  if ((a2 & 1) != 0)
  {
    if (*(_QWORD *)(a1 + 48) == *(_QWORD *)(a1 + 56))
    {
      v6 = *(_QWORD *)(a1 + 32);
      if (v6)
      {
        v7 = *(void (**)(void))(v6 + 16);
LABEL_7:
        v7();
      }
    }
    else
    {
      WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
      if (WeakRetained)
      {
        v10 = *(_QWORD *)(a1 + 48);
        v11[0] = _NSConcreteStackBlock;
        v11[1] = 3221225472;
        v11[2] = sub_100397588;
        v11[3] = &unk_1011B38D8;
        objc_copyWeak(v14, (id *)(a1 + 40));
        v14[1] = *(id *)(a1 + 56);
        v12 = v5;
        v13 = *(id *)(a1 + 32);
        v15 = a2;
        objc_msgSend(WeakRetained, "removeReviewedPlaceWithMUID:completion:", v10, v11);

        objc_destroyWeak(v14);
      }

    }
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 32);
    if (v8)
    {
      v7 = *(void (**)(void))(v8 + 16);
      goto LABEL_7;
    }
  }

}

void sub_100397574(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100397588(uint64_t a1)
{
  id WeakRetained;
  UGCReviewedPlace *v3;
  id v4;
  UGCReviewedPlace *v5;
  _QWORD v6[4];
  UGCReviewedPlace *v7;
  id v8;
  char v9;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v3 = -[UGCReviewedPlace initWithMUID:]([UGCReviewedPlace alloc], "initWithMUID:", *(_QWORD *)(a1 + 56));
    -[UGCReviewedPlace setNumberOfPhotosAdded:](v3, "setNumberOfPhotosAdded:", objc_msgSend(*(id *)(a1 + 32), "numberOfPhotosAdded"));
    -[UGCReviewedPlace setRecommendState:](v3, "setRecommendState:", objc_msgSend(*(id *)(a1 + 32), "recommendState"));
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100397674;
    v6[3] = &unk_1011B38B0;
    v4 = *(id *)(a1 + 40);
    v9 = *(_BYTE *)(a1 + 64);
    v7 = v3;
    v8 = v4;
    v5 = v3;
    objc_msgSend(WeakRetained, "addOrEditReviewedPlace:completion:", v5, v6);

  }
}

uint64_t sub_100397674(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 32));
  return result;
}

void sub_100397720(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[6];
  id v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t);
  id v16;
  uint8_t buf[4];
  uint64_t v18;

  v11 = 0;
  v12 = &v11;
  v13 = 0x3032000000;
  v14 = sub_1003978B4;
  v15 = sub_1003978C4;
  v16 = 0;
  v2 = *(void **)(a1[4] + 8);
  v10 = 0;
  v3 = a1[6];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1003979FC;
  v9[3] = &unk_1011B3928;
  v9[4] = &v11;
  v9[5] = v3;
  sub_1003978CC(v2, &v10, v3, v9);
  v4 = v10;
  if (!v12[5])
  {
    v5 = sub_1004331EC();
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = a1[6];
      *(_DWORD *)buf = 134217984;
      v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "We could not find a cached reviewed place with muid %llu ", buf, 0xCu);
    }

  }
  v8 = a1[5];
  if (v8)
    (*(void (**)(uint64_t, BOOL))(v8 + 16))(v8, v12[5] != 0);
  _Block_object_dispose(&v11, 8);

}

void sub_100397894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1003978B4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1003978C4(uint64_t a1)
{

}

void sub_1003978CC(void *a1, _QWORD *a2, uint64_t a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  _QWORD v12[4];
  id v13;
  id v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  void (*v21)(uint64_t);
  id v22;

  v7 = a1;
  v8 = a4;
  v17 = 0;
  v18 = &v17;
  v19 = 0x3032000000;
  v20 = sub_1003978B4;
  v21 = sub_1003978C4;
  v22 = 0;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1003984BC;
  v12[3] = &unk_1011B3978;
  v9 = v7;
  v15 = &v17;
  v16 = a3;
  v13 = v9;
  v10 = v8;
  v14 = v10;
  objc_msgSend(v9, "statementForKey:statementBlock:", CFSTR("FindReviewedPlace"), v12);
  if (a2)
  {
    v11 = (void *)v18[5];
    if (v11)
      *a2 = objc_retainAutorelease(v11);
  }

  _Block_object_dispose(&v17, 8);
}

void sub_1003979E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1003979FC(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  UGCReviewedPlace *v7;
  uint64_t v8;
  void *v9;
  id v10;
  NSObject *v11;
  id v12;
  id v13;
  id v14;
  int v16;
  id v17;
  __int16 v18;
  id v19;
  __int16 v20;
  id v21;

  v7 = -[UGCReviewedPlace initWithMUID:]([UGCReviewedPlace alloc], "initWithMUID:", *(_QWORD *)(a1 + 40));
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setRecommendState:", a3);
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setNumberOfPhotosAdded:", a4);
  v10 = sub_1004331EC();
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    v12 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "muid");
    v13 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "recommendState");
    v14 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "numberOfPhotosAdded");
    v16 = 134218496;
    v17 = v12;
    v18 = 2048;
    v19 = v13;
    v20 = 2048;
    v21 = v14;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "We fetched a cached reviewed place with muid %llu with recommend state %lu, and number of photos added %lu", (uint8_t *)&v16, 0x20u);
  }

  return 0;
}

void sub_100397C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100397C1C(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  _QWORD v9[6];
  id v10;
  uint8_t buf[4];
  uint64_t v12;

  v2 = a1[5];
  v3 = *(void **)(a1[4] + 8);
  v10 = 0;
  v9[0] = _NSConcreteStackBlock;
  v9[2] = sub_100397D34;
  v9[3] = &unk_1011B3928;
  v4 = a1[6];
  v9[1] = 3221225472;
  v9[4] = v2;
  v9[5] = v4;
  sub_1003978CC(v3, &v10, v4, v9);
  v5 = v10;
  if (!*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40))
  {
    v6 = sub_1004331EC();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = a1[6];
      *(_DWORD *)buf = 134217984;
      v12 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "We could not find a cached reviewed place with muid %llu ", buf, 0xCu);
    }

  }
}

uint64_t sub_100397D34(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  UGCReviewedPlace *v7;
  uint64_t v8;
  void *v9;
  id v10;
  NSObject *v11;
  id v12;
  id v13;
  id v14;
  int v16;
  id v17;
  __int16 v18;
  id v19;
  __int16 v20;
  id v21;

  v7 = -[UGCReviewedPlace initWithMUID:]([UGCReviewedPlace alloc], "initWithMUID:", *(_QWORD *)(a1 + 40));
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setRecommendState:", a3);
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setNumberOfPhotosAdded:", a4);
  v10 = sub_1004331EC();
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    v12 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "muid");
    v13 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "recommendState");
    v14 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "numberOfPhotosAdded");
    v16 = 134218496;
    v17 = v12;
    v18 = 2048;
    v19 = v13;
    v20 = 2048;
    v21 = v14;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "We fetched a cached reviewed place with muid %llu with recommend state %lu, and number of photos added %lu", (uint8_t *)&v16, 0x20u);
  }

  return 0;
}

void sub_100397F10(_QWORD *a1)
{
  uint64_t v2;
  id v3;
  id v4;
  unsigned __int8 v5;
  void *v6;
  id v7;
  id v8;
  char v9;
  id v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  const char *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  void (*v22)(uint64_t);
  id v23;
  __int128 buf;
  id (*v25)(_QWORD *, uint64_t);
  void *v26;
  id v27;
  uint64_t *v28;
  uint64_t v29;

  v2 = a1[6];
  v3 = *(id *)(a1[4] + 8);
  v18 = 0;
  v19 = &v18;
  v20 = 0x3032000000;
  v21 = sub_1003978B4;
  v22 = sub_1003978C4;
  v23 = 0;
  *(_QWORD *)&buf = _NSConcreteStackBlock;
  *((_QWORD *)&buf + 1) = 3221225472;
  v25 = sub_1003985F4;
  v26 = &unk_1011B39A0;
  v4 = v3;
  v28 = &v18;
  v29 = v2;
  v27 = v4;
  v5 = objc_msgSend(v4, "executeStatement:statementBlock:", CFSTR("RemoveReviewedPlace"), &buf);
  v6 = (void *)v19[5];
  if (v6)
    v7 = objc_retainAutorelease(v6);

  _Block_object_dispose(&v18, 8);
  v8 = v6;
  v9 = v5 & (v6 == 0);
  v10 = sub_1004331EC();
  v11 = objc_claimAutoreleasedReturnValue(v10);
  v12 = v11;
  if ((v9 & 1) != 0)
  {
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      goto LABEL_9;
    v13 = a1[6];
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = v13;
    v14 = "Removed a cached removed place with muid %llu";
    v15 = v12;
    v16 = OS_LOG_TYPE_INFO;
  }
  else
  {
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_9;
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v8;
    v14 = "Error in deleting place with error %@";
    v15 = v12;
    v16 = OS_LOG_TYPE_ERROR;
  }
  _os_log_impl((void *)&_mh_execute_header, v15, v16, v14, (uint8_t *)&buf, 0xCu);
LABEL_9:

  v17 = a1[5];
  if (v17)
    (*(void (**)(uint64_t, id))(v17 + 16))(v17, v8);

}

void sub_1003980F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_1003981B8(uint64_t a1)
{
  void *v2;
  id v3;
  unsigned int v4;
  unsigned int v5;
  id v6;
  unsigned __int8 v7;
  void *v8;
  id v9;
  id v10;
  char v11;
  id v12;
  NSObject *v13;
  NSObject *v14;
  id v15;
  id v16;
  id v17;
  const char *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint32_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  void (*v27)(uint64_t);
  id v28;
  _BYTE buf[24];
  void *v30;
  id v31;
  uint64_t *v32;
  id v33;
  unsigned int v34;
  unsigned int v35;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v3 = objc_msgSend(*(id *)(a1 + 40), "muid");
  v4 = objc_msgSend(*(id *)(a1 + 40), "recommendState");
  v5 = objc_msgSend(*(id *)(a1 + 40), "numberOfPhotosAdded");
  v23 = 0;
  v24 = &v23;
  v25 = 0x3032000000;
  v26 = sub_1003978B4;
  v27 = sub_1003978C4;
  v28 = 0;
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&buf[8] = 3221225472;
  *(_QWORD *)&buf[16] = sub_100398654;
  v30 = &unk_1011B39C8;
  v6 = v2;
  v32 = &v23;
  v33 = v3;
  v31 = v6;
  v34 = v4;
  v35 = v5;
  v7 = objc_msgSend(v6, "executeStatement:statementBlock:", CFSTR("SetReviewedPlace"), buf);
  v8 = (void *)v24[5];
  if (v8)
    v9 = objc_retainAutorelease(v8);

  _Block_object_dispose(&v23, 8);
  v10 = v8;
  v11 = v7 & (v8 == 0);
  v12 = sub_1004331EC();
  v13 = objc_claimAutoreleasedReturnValue(v12);
  v14 = v13;
  if ((v11 & 1) != 0)
  {
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      goto LABEL_9;
    v15 = objc_msgSend(*(id *)(a1 + 40), "muid");
    v16 = objc_msgSend(*(id *)(a1 + 40), "recommendState");
    v17 = objc_msgSend(*(id *)(a1 + 40), "numberOfPhotosAdded");
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)&buf[4] = v15;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v16;
    *(_WORD *)&buf[22] = 2048;
    v30 = v17;
    v18 = "We added a new reviewed place with muid %llu with recommend state %lu, and number of photos added %lu";
    v19 = v14;
    v20 = OS_LOG_TYPE_INFO;
    v21 = 32;
  }
  else
  {
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      goto LABEL_9;
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v10;
    v18 = "Failed to add reviewed place with error %@";
    v19 = v14;
    v20 = OS_LOG_TYPE_ERROR;
    v21 = 12;
  }
  _os_log_impl((void *)&_mh_execute_header, v19, v20, v18, buf, v21);
LABEL_9:

  v22 = *(_QWORD *)(a1 + 48);
  if (v22)
    (*(void (**)(uint64_t, id))(v22 + 16))(v22, v10);

}

void sub_1003983F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_100398468(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "log"));
  sub_100396FC0(v1, 1);

}

uint64_t sub_1003984BC(uint64_t a1, sqlite3_stmt *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v13;
  id obj;

  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  obj = *(id *)(v6 + 40);
  v7 = objc_msgSend(v4, "bindInt64Parameter:toValue:inStatement:error:", "@muid", v5, a2, &obj);
  objc_storeStrong((id *)(v6 + 40), obj);
  if (!v7)
    return 0;
  v8 = sqlite3_step(a2);
  v9 = 1;
  while ((_DWORD)v8 == 100)
  {
    objc_msgSend(*(id *)(a1 + 32), "int64ForColumn:inStatment:", 0, a2);
    objc_msgSend(*(id *)(a1 + 32), "intForColumn:inStatment:", 1, a2);
    objc_msgSend(*(id *)(a1 + 32), "intForColumn:inStatment:", 2, a2);
    if (!(*(unsigned int (**)(void))(*(_QWORD *)(a1 + 40) + 16))())
      return v9;
    v8 = sqlite3_step(a2);
  }
  if ((_DWORD)v8 != 101)
  {
    v10 = *(void **)(a1 + 32);
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v13 = *(id *)(v11 + 40);
    objc_msgSend(v10, "reportSQLiteErrorCode:method:error:", v8, CFSTR("step"), &v13);
    objc_storeStrong((id *)(v11 + 40), v13);
    return 0;
  }
  return 1;
}

id sub_1003985F4(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  id obj;

  v2 = a1[6];
  v3 = (void *)a1[4];
  v4 = *(_QWORD *)(a1[5] + 8);
  obj = *(id *)(v4 + 40);
  v5 = objc_msgSend(v3, "bindInt64Parameter:toValue:inStatement:error:", "@muid", v2, a2, &obj);
  objc_storeStrong((id *)(v4 + 40), obj);
  return v5;
}

id sub_100398654(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v17;
  id v18;
  id obj;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(void **)(a1 + 32);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  obj = *(id *)(v6 + 40);
  v7 = objc_msgSend(v5, "bindInt64Parameter:toValue:inStatement:error:", "@muid", v4, a2, &obj);
  objc_storeStrong((id *)(v6 + 40), obj);
  if (!v7)
    return 0;
  v8 = *(unsigned int *)(a1 + 56);
  v9 = *(void **)(a1 + 32);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v18 = *(id *)(v10 + 40);
  v11 = objc_msgSend(v9, "bindIntParameter:toValue:inStatement:error:", "@recommendstate", v8, a2, &v18);
  objc_storeStrong((id *)(v10 + 40), v18);
  if (!v11)
    return 0;
  v12 = *(unsigned int *)(a1 + 60);
  v13 = *(void **)(a1 + 32);
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v17 = *(id *)(v14 + 40);
  v15 = objc_msgSend(v13, "bindIntParameter:toValue:inStatement:error:", "@photosadded", v12, a2, &v17);
  objc_storeStrong((id *)(v14 + 40), v17);
  return v15;
}

void sub_100399208(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v7 = a2;
  if (objc_msgSend(v7, "_hasLookAroundStorefront")
    && objc_msgSend(v7, "_isMapItemTypeBusiness"))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "appCoordinator"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[MKLookAroundEntryPoint entryPointWithMapItem:wantsCloseUpView:](MKLookAroundEntryPoint, "entryPointWithMapItem:wantsCloseUpView:", v7, 1));
    objc_msgSend(v3, "enterLookAroundWithEntryPoint:lookAroundView:showsFullScreen:originFrame:", v4, 0, 1, CGRectZero.origin.x, CGRectZero.origin.y, CGRectZero.size.width, CGRectZero.size.height);
  }
  else
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "appCoordinator"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "originalMapItem"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "_muninViewState"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[MKLookAroundEntryPoint entryPointWithMuninViewState:](MKLookAroundEntryPoint, "entryPointWithMuninViewState:", v5));
    objc_msgSend(v3, "enterLookAroundWithEntryPoint:lookAroundView:showsFullScreen:originFrame:", v6, 0, 1, CGRectZero.origin.x, CGRectZero.origin.y, CGRectZero.size.width, CGRectZero.size.height);

  }
}

void sub_10039A2C8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;

  v5 = a2;
  objc_msgSend(v5, "removeFromSuperview");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "insertArrangedSubview:atIndex:", v5, a3);

}

void sub_10039B3FC(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "snapshotDataSource"));
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "snapshot"));

  objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "saveToFilePath:storage:", 0, v3);
}

void sub_10039B55C(id a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v3[5];

  v3[0] = UIContentSizeCategoryAccessibilityMedium;
  v3[1] = UIContentSizeCategoryAccessibilityLarge;
  v3[2] = UIContentSizeCategoryAccessibilityExtraLarge;
  v3[3] = UIContentSizeCategoryAccessibilityExtraExtraLarge;
  v3[4] = UIContentSizeCategoryAccessibilityExtraExtraExtraLarge;
  v1 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v3, 5));
  v2 = (void *)qword_1014D2280;
  qword_1014D2280 = v1;

}

void sub_10039CC88(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[8];

  v1 = (void *)qword_1014D2290;
  qword_1014D2290 = (uint64_t)&off_101273128;

  v4[0] = UIFontTextStyleCaption2;
  v4[1] = UIFontTextStyleCaption1;
  v4[2] = UIFontTextStyleFootnote;
  v4[3] = UIFontTextStyleSubheadline;
  v4[4] = UIFontTextStyleBody;
  v4[5] = UIFontTextStyleTitle3;
  v4[6] = UIFontTextStyleTitle2;
  v4[7] = UIFontTextStyleTitle1;
  v2 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v4, 8));
  v3 = (void *)qword_1014D2298;
  qword_1014D2298 = v2;

}

void sub_10039D210(id a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v3[13];

  v3[0] = UIContentSizeCategoryUnspecified;
  v3[1] = UIContentSizeCategoryExtraSmall;
  v3[2] = UIContentSizeCategorySmall;
  v3[3] = UIContentSizeCategoryMedium;
  v3[4] = UIContentSizeCategoryLarge;
  v3[5] = UIContentSizeCategoryExtraLarge;
  v3[6] = UIContentSizeCategoryExtraExtraLarge;
  v3[7] = UIContentSizeCategoryExtraExtraExtraLarge;
  v3[8] = UIContentSizeCategoryAccessibilityMedium;
  v3[9] = UIContentSizeCategoryAccessibilityLarge;
  v3[10] = UIContentSizeCategoryAccessibilityExtraLarge;
  v3[11] = UIContentSizeCategoryAccessibilityExtraExtraLarge;
  v3[12] = UIContentSizeCategoryAccessibilityExtraExtraExtraLarge;
  v1 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v3, 13));
  v2 = (void *)qword_1014D2270;
  qword_1014D2270 = v1;

}

id sub_10039D334(uint64_t a1, void *a2)
{
  NSString *v3;
  NSString *v4;
  double v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  double v9;
  void *v10;

  v3 = (NSString *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "preferredContentSizeCategory"));
  v4 = v3;
  if (!v3
    || UIContentSizeCategoryCompareToCategory(v3, UIContentSizeCategoryUnspecified) == NSOrderedSame
    || UIContentSizeCategoryCompareToCategory(v4, *(UIContentSizeCategory *)(a1 + 32)) != NSOrderedDescending)
  {
    goto LABEL_13;
  }
  if (UIContentSizeCategoryCompareToCategory(v4, *(UIContentSizeCategory *)(a1 + 40)) != NSOrderedAscending)
  {
    v5 = *(double *)(a1 + 64);
LABEL_14:
    v9 = *(double *)(a1 + 56);
    goto LABEL_15;
  }
  v6 = objc_msgSend((id)qword_1014D2270, "indexOfObject:", *(_QWORD *)(a1 + 32));
  v7 = objc_msgSend((id)qword_1014D2270, "indexOfObject:", *(_QWORD *)(a1 + 40));
  v8 = objc_msgSend((id)qword_1014D2270, "indexOfObject:", v4);
  if (v6 == (_BYTE *)0x7FFFFFFFFFFFFFFFLL
    || v7 == (_BYTE *)0x7FFFFFFFFFFFFFFFLL
    || v8 == (_BYTE *)0x7FFFFFFFFFFFFFFFLL
    || v7 < v6
    || v8 < v6
    || (unint64_t)(v7 - v6) <= 1)
  {
LABEL_13:
    v5 = *(double *)(a1 + 48);
    goto LABEL_14;
  }
  v9 = *(double *)(a1 + 56);
  v5 = round(*(double *)(a1 + 48)+ (*(double *)(a1 + 64) - *(double *)(a1 + 48))/ (double)(unint64_t)(v7 - v6)* (double)(unint64_t)(v8 - v6));
LABEL_15:
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont systemFontOfSize:weight:](UIFont, "systemFontOfSize:weight:", v5, v9));

  return v10;
}

void sub_10039D5C4(uint64_t a1)
{
  id AssociatedObject;
  void *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  AssociatedObject = objc_getAssociatedObject(*(id *)(a1 + 32), off_1014A8118);
  v3 = (void *)objc_claimAutoreleasedReturnValue(AssociatedObject);
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v4 = objc_msgSend(v3, "copy", 0);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v10;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v10 != v7)
          objc_enumerationMutation(v4);
        objc_msgSend(*(id *)(a1 + 32), "performSelector:", NSSelectorFromString(*(NSString **)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v8)));
        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v6);
  }

  objc_setAssociatedObject(*(id *)(a1 + 32), off_1014A8118, 0, (void *)1);
  objc_setAssociatedObject(*(id *)(a1 + 32), off_1014A8110, 0, (void *)3);

}

id sub_10039DBFC(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObject:", a2);
}

void sub_10039DC08(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  id v7;
  void *v8;
  void *v9;
  _QWORD v10[2];

  v6 = *(void **)(a1 + 32);
  v10[0] = a2;
  v7 = a2;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSValue valueWithRange:](NSValue, "valueWithRange:", a3, a4));
  v10[1] = v8;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v10, 2));
  objc_msgSend(v6, "addObject:", v9);

}

id sub_10039DCD4(void *a1, void *a2)
{
  id v3;
  uint64_t (**v4)(id, _QWORD, char *);
  id v5;
  id v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  id v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];

  v3 = a1;
  v4 = a2;
  if (v3)
  {
    v5 = objc_alloc_init((Class)NSMutableArray);
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v6 = v3;
    v7 = (char *)objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    if (v7)
    {
      v8 = v7;
      v9 = 0;
      v10 = *(_QWORD *)v17;
      do
      {
        v11 = 0;
        do
        {
          if (*(_QWORD *)v17 != v10)
            objc_enumerationMutation(v6);
          v12 = v4[2](v4, *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)v11), &v11[v9]);
          v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
          if (v13)
            objc_msgSend(v5, "addObject:", v13, (_QWORD)v16);

          ++v11;
        }
        while (v8 != v11);
        v8 = (char *)objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
        v9 += (uint64_t)v11;
      }
      while (v8);
    }

    v14 = objc_msgSend(v5, "copy");
  }
  else
  {
    v14 = &__NSArray0__struct;
  }

  return v14;
}

id sub_10039DE48(void *a1, void *a2)
{
  id v3;
  uint64_t (**v4)(id, _QWORD, uint64_t);
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  __objc2_prot **v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v23;
  id v24;
  id obj;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  _BYTE v35[128];

  v3 = a1;
  v4 = a2;
  if (v3)
  {
    v5 = objc_alloc_init((Class)NSMutableArray);
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v23 = v3;
    obj = v3;
    v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
    if (v6)
    {
      v7 = v6;
      v8 = 0;
      v9 = *(_QWORD *)v31;
      v10 = &off_101267000;
      do
      {
        v11 = 0;
        v24 = v7;
        do
        {
          if (*(_QWORD *)v31 != v9)
            objc_enumerationMutation(obj);
          v12 = v4[2](v4, *(_QWORD *)(*((_QWORD *)&v30 + 1) + 8 * (_QWORD)v11), v8);
          v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
          v14 = v13;
          if (v13)
          {
            if (objc_msgSend(v13, "conformsToProtocol:", v10[233]))
            {
              v15 = v9;
              v16 = v14;
              v26 = 0u;
              v27 = 0u;
              v28 = 0u;
              v29 = 0u;
              v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
              if (v17)
              {
                v18 = v17;
                v19 = *(_QWORD *)v27;
                do
                {
                  v20 = 0;
                  do
                  {
                    if (*(_QWORD *)v27 != v19)
                      objc_enumerationMutation(v16);
                    objc_msgSend(v5, "addObject:", *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)v20));
                    v20 = (char *)v20 + 1;
                  }
                  while (v18 != v20);
                  v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
                }
                while (v18);
              }

              v9 = v15;
              v7 = v24;
              v10 = &off_101267000;
            }
            else
            {
              objc_msgSend(v5, "addObject:", v14);
            }
          }
          ++v8;

          v11 = (char *)v11 + 1;
        }
        while (v11 != v7);
        v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
      }
      while (v7);
    }

    v21 = objc_msgSend(v5, "copy");
    v3 = v23;
  }
  else
  {
    v21 = &__NSArray0__struct;
  }

  return v21;
}

id sub_10039E080(void *a1, void *a2)
{
  id v3;
  unsigned int (**v4)(id, uint64_t, uint64_t, char *);
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];

  v3 = a1;
  v4 = a2;
  if (v3)
  {
    v5 = objc_alloc_init((Class)NSMutableArray);
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v6 = v3;
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    if (v7)
    {
      v8 = v7;
      v9 = 0;
      v10 = *(_QWORD *)v17;
LABEL_4:
      v11 = 0;
      while (1)
      {
        if (*(_QWORD *)v17 != v10)
          objc_enumerationMutation(v6);
        v12 = *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * v11);
        v15 = 0;
        if (v4[2](v4, v12, v9 + v11, &v15))
          objc_msgSend(v5, "addObject:", v12);
        if (v15)
          break;
        if (v8 == (id)++v11)
        {
          v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
          v9 += v11;
          if (v8)
            goto LABEL_4;
          break;
        }
      }
    }

    v13 = objc_msgSend(v5, "copy");
  }
  else
  {
    v13 = &__NSArray0__struct;
  }

  return v13;
}

id sub_10039E1FC(void *a1, void *a2)
{
  id v3;
  unsigned int (**v4)(id, void *, char *, _BYTE *);
  id v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *i;
  void *v11;
  id v12;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];

  v3 = a1;
  v4 = a2;
  if (v3)
  {
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v5 = v3;
    v6 = (char *)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v6)
    {
      v7 = v6;
      v8 = 0;
      v9 = *(_QWORD *)v16;
      while (2)
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v16 != v9)
            objc_enumerationMutation(v5);
          v11 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)i);
          v14 = 0;
          if (v4[2](v4, v11, &i[v8], &v14))
          {
            v12 = v11;
            goto LABEL_15;
          }
          if (v14)
            goto LABEL_12;
        }
        v7 = (char *)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
        v12 = 0;
        v8 += (uint64_t)i;
        if (v7)
          continue;
        break;
      }
    }
    else
    {
LABEL_12:
      v12 = 0;
    }
LABEL_15:

  }
  else
  {
    v12 = 0;
  }

  return v12;
}

uint64_t sub_10039E360(void *a1, void *a2)
{
  id v3;
  unsigned int (**v4)(id, _QWORD, char *);
  id v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  v3 = a1;
  v4 = a2;
  if (v3)
  {
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v5 = v3;
    v6 = (char *)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v6)
    {
      v7 = v6;
      v8 = 0;
      v9 = *(_QWORD *)v14;
      while (2)
      {
        v10 = 0;
        do
        {
          if (*(_QWORD *)v14 != v9)
            objc_enumerationMutation(v5);
          if (!v4[2](v4, *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)v10), &v10[v8]))
          {
            v11 = 0;
            goto LABEL_12;
          }
          ++v10;
        }
        while (v7 != v10);
        v7 = (char *)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
        v8 += (uint64_t)v10;
        if (v7)
          continue;
        break;
      }
    }
    v11 = 1;
LABEL_12:

  }
  else
  {
    v11 = 0;
  }

  return v11;
}

__CFString *sub_10039E4FC(int a1)
{
  if (a1)
    return CFSTR("YES");
  else
    return CFSTR("NO");
}

uint64_t sub_10039E518(uint64_t result, double a2, double a3, double a4, double a5)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;

  *(double *)result = a2;
  *(double *)(result + 8) = a3;
  *(double *)(result + 16) = a4;
  *(double *)(result + 24) = a5;
  v5 = sqrt(a3 / a2);
  v6 = sqrt(a2 * a3);
  v7 = a4 / (v6 + v6);
  *(double *)(result + 32) = v5;
  *(double *)(result + 40) = v7;
  v8 = v5 * sqrt(1.0 - v7 * v7);
  *(double *)(result + 48) = v8;
  *(_QWORD *)(result + 56) = 0x3FF0000000000000;
  if (v7 >= 1.0)
    v9 = v5 - a5;
  else
    v9 = -(a5 - v7 * v5) / v8;
  *(double *)(result + 64) = v9;
  *(double *)(result + 72) = v8 + v5 * v9 * v7;
  v10.f64[0] = -(v9 * v8);
  *(double *)(result + 80) = v5 * v7 - v9 * v8;
  v11 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v5, 0);
  v11.f64[0] = v5 * v9;
  v12 = vmulq_n_f64(vmulq_n_f64(v11, v5), v7);
  __asm { FMOV            V7.2D, #2.0 }
  _Q7.f64[1] = v9 * -2.0;
  v10.f64[1] = -v8;
  *(float64x2_t *)(result + 88) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(vmulq_n_f64(vmulq_n_f64(_Q7, v8), v5), v7), v12, v7), v10, v8);
  return result;
}

double sub_10039E5CC(double *a1, double a2)
{
  double v4;
  double v5;
  double v6;
  __double2 v7;
  double v8;
  double v9;

  v4 = a1[5];
  if (v4 >= 1.0)
  {
    v9 = a1[4];
    v5 = v9 * a1[7] + a1[8] * v9 * a2 - a1[8];
    v8 = exp(-(a2 * v9));
  }
  else
  {
    v5 = exp(-(a1[4] * v4) * a2);
    v6 = a1[9];
    v7 = __sincos_stret(a1[6] * a2);
    v8 = a1[10] * v7.__cosval + v6 * v7.__sinval;
  }
  return -(v5 * v8);
}

void sub_10039EC8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1003A04D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1003A04EC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1003A04FC(uint64_t a1)
{

}

void sub_1003A0504(uint64_t a1, int a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(void **)(v3 + 40);
  if (a2)
  {
    if (!v4)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[LoadingIndicatorController sharedController](LoadingIndicatorController, "sharedController"));
      v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "beginShowingLoadingIndicator"));
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v7 = *(void **)(v6 + 40);
      *(_QWORD *)(v6 + 40) = v5;

    }
  }
  else if (v4)
  {
    *(_QWORD *)(v3 + 40) = 0;

  }
}

void sub_1003A058C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  GEORPPlaceInfo *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  if (v5 || !objc_msgSend(v8, "count"))
  {
    objc_msgSend(*(id *)(a1 + 40), "setFailedToReverseGeocode:", 1);
  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "firstObject"));
    v7 = objc_opt_new(GEORPPlaceInfo);
    objc_msgSend(*(id *)(a1 + 32), "applyToPlaceInfo:", v7);
    objc_msgSend(*(id *)(a1 + 40), "setPlaceInfo:", v7);
    objc_msgSend(*(id *)(a1 + 40), "updateWithReverseGeocodedMapItem:", v6);

  }
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(*(_QWORD *)(a1 + 48) + 8), *(const void **)(a1 + 40));

}

void sub_1003A3000(id a1)
{
  Recents *v1;
  void *v2;

  v1 = objc_alloc_init(Recents);
  v2 = (void *)qword_1014D22B8;
  qword_1014D22B8 = (uint64_t)v1;

}

void sub_1003A3160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1003A3178(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1003A3188(uint64_t a1)
{

}

void sub_1003A3190(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = *(void **)(a1[4] + 24);
  v6 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", a1[6]));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", v6));
  v4 = *(_QWORD *)(a1[5] + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_1003A3678(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1003A369C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD v3[4];
  id v4;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 17) = 0;
  v1 = *(_QWORD **)(a1 + 32);
  v2 = v1[6];
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1003A3740;
  v3[3] = &unk_1011B07A0;
  objc_copyWeak(&v4, (id *)(a1 + 40));
  objc_msgSend(v1, "loadCoreRecentsOnQueue:withCompletion:", v2, v3);
  objc_destroyWeak(&v4);
}

void sub_1003A372C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1003A3740(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  id v5;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "setSystemRecents:", v5);
    objc_msgSend(v4, "_combineRecents");
  }

}

void sub_1003A39C4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  BOOL v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  NSObject *v28;
  id v29;
  id v30;
  unint64_t v31;
  void *v32;
  id v33;
  id obj;
  _QWORD block[5];
  id v36;
  _QWORD v37[6];
  id v38;
  _QWORD v39[7];
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t);
  void (*v44)(uint64_t);
  id v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[128];

  v5 = a2;
  v30 = a3;
  v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v33 = objc_alloc_init((Class)NSCountedSet);
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  obj = v5;
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v50, 16);
  if (v7)
  {
    v31 = 0;
    v8 = *(_QWORD *)v47;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v47 != v8)
          objc_enumerationMutation(obj);
        v10 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * (_QWORD)i);
        v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(v10, "contactID")));
        objc_msgSend(v6, "addObject:", v11);

        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "originalSource"));
        v13 = v12;
        if (v12
          && objc_msgSend(v12, "length")
          && objc_msgSend(*(id *)(a1 + 32), "indexOfObject:", v13) != (id)0x7FFFFFFFFFFFFFFFLL)
        {
          v14 = (unint64_t)objc_msgSend(v33, "countForObject:", v13) > 2
             || (unint64_t)objc_msgSend(v32, "count") > 4;
          v15 = *(void **)(*(_QWORD *)(a1 + 40) + 40);
          v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(v10, "contactID")));
          v17 = objc_msgSend(v15, "indexOfObject:", v16);

          if (v17 == (id)0x7FFFFFFFFFFFFFFFLL)
          {
            v40 = 0;
            v41 = &v40;
            v42 = 0x3032000000;
            v43 = sub_1003A3178;
            v44 = sub_1003A3188;
            v45 = 0;
            v18 = *(_QWORD *)(a1 + 40);
            v19 = *(_QWORD *)(v18 + 32);
            v39[0] = _NSConcreteStackBlock;
            v39[1] = 3221225472;
            v39[2] = sub_1003A3E78;
            v39[3] = &unk_1011B3B68;
            v39[5] = v10;
            v39[6] = &v40;
            v39[4] = v18;
            geo_isolate_sync(v19, v39);
            v20 = (void *)v41[5];
            if (v20)
            {
              if (!v14)
              {
                v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "_geoAddress"));
                v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "structuredAddress"));

                v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "fullThoroughfare"));
                if (objc_msgSend(v23, "length"))
                {
                  objc_msgSend(v32, "addObject:", v10);
                  objc_msgSend(v33, "addObject:", v13);
                }

LABEL_23:
              }
            }
            else
            {
              if (!v14)
              {
                objc_msgSend(v32, "addObject:", v10);
                objc_msgSend(v33, "addObject:", v13);
              }
              if (v31 <= 0xA && *(_BYTE *)(a1 + 64))
              {
                dispatch_group_enter(*(dispatch_group_t *)(a1 + 48));
                v24 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
                v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "address"));
                v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "ticketForCanonicalLocationSearchQueryString:traits:", v25, 0));

                v37[0] = _NSConcreteStackBlock;
                v37[1] = 3221225472;
                v37[2] = sub_1003A3EF4;
                v37[3] = &unk_1011B3AF8;
                v26 = *(void **)(a1 + 48);
                v37[4] = *(_QWORD *)(a1 + 40);
                v37[5] = v10;
                v38 = v26;
                objc_msgSend(v22, "submitWithHandler:networkActivity:", v37, 0);

                ++v31;
                goto LABEL_23;
              }
            }
            _Block_object_dispose(&v40, 8);

          }
        }

      }
      v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v50, 16);
    }
    while (v7);
  }

  v27 = *(_QWORD *)(a1 + 56);
  if (v27)
    (*(void (**)(uint64_t, void *))(v27 + 16))(v27, v32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003A4070;
  block[3] = &unk_1011AC8B0;
  v28 = *(NSObject **)(a1 + 48);
  block[4] = *(_QWORD *)(a1 + 40);
  v36 = v6;
  v29 = v6;
  dispatch_group_notify(v28, (dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_1003A3E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

void sub_1003A3E78(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
  v6 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(*(id *)(a1 + 40), "contactID")));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", v6));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_1003A3EF4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  __int128 v12;
  id v13;

  v10 = a2;
  v5 = a3;
  if (objc_msgSend(v10, "count"))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectAtIndexedSubscript:", 0));
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1003A4008;
    v11[3] = &unk_1011AD238;
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
    v12 = *(_OWORD *)(a1 + 32);
    v13 = v6;
    v8 = v6;
    geo_isolate_sync(v7, v11);

LABEL_5:
    goto LABEL_6;
  }
  if (objc_msgSend(v5, "code") == (id)-8)
  {
    v9 = *(void **)(*(_QWORD *)(a1 + 32) + 40);
    v8 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(*(id *)(a1 + 40), "contactID")));
    objc_msgSend(v9, "addObject:", v8);
    goto LABEL_5;
  }
LABEL_6:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void sub_1003A4008(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(*(id *)(a1 + 40), "contactID")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v1, v3);

}

void sub_1003A4070(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithArray:](NSMutableSet, "setWithArray:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40)));
  objc_msgSend(v5, "intersectSet:", *(_QWORD *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "allObjects"));
  objc_msgSend(v2, "setObject:forKey:", v3, CFSTR("RecentsNoResultCacheIdsKey"));

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v4, "synchronize");

}

int64_t sub_1003A4264(id a1, RecentsItem *a2, RecentsItem *a3)
{
  RecentsItem *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  int64_t v10;

  v4 = a3;
  -[RecentsItem timestamp](a2, "timestamp");
  v6 = v5;
  -[RecentsItem timestamp](v4, "timestamp");
  v8 = v7;

  v9 = vabdd_f64(v8, v6);
  v10 = -1;
  if (v6 < v8)
    v10 = 1;
  if (v9 >= 2.22044605e-16)
    return v10;
  else
    return 0;
}

void sub_1003A42CC(id *a1)
{
  id v2;
  id v3;
  void *v4;
  _QWORD *WeakRetained;

  WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    v2 = objc_msgSend(a1[4], "copy");
    objc_msgSend(WeakRetained, "setHistoryRecents:", v2);

    v3 = objc_msgSend(a1[5], "copy");
    v4 = (void *)WeakRetained[8];
    WeakRetained[8] = v3;

    objc_msgSend(WeakRetained, "_processRecents");
  }

}

id sub_1003A43EC(id a1, HistoryEntryRecentsItem *a2, unint64_t a3)
{
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = (void *)objc_claimAutoreleasedReturnValue(-[HistoryEntryRecentsItem historyEntry](a2, "historyEntry", a3));
  v4 = objc_opt_class(MSHistoryCuratedCollection);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
    v5 = v3;
  else
    v5 = 0;
  v6 = v5;

  return v6;
}

void sub_1003A458C(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(*(id *)(a1 + 40), "contactID")));
  objc_msgSend(v1, "setObject:forKeyedSubscript:", 0, v2);

}

void sub_1003A45E8(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "systemRecents"));
  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](NSMutableArray, "arrayWithArray:", v2));

  objc_msgSend(v4, "removeObject:", *(_QWORD *)(a1 + 40));
  v3 = objc_msgSend(v4, "copy");
  objc_msgSend(*(id *)(a1 + 32), "setSystemRecents:", v3);

  objc_msgSend(*(id *)(a1 + 32), "_combineRecents");
}

void sub_1003A4BA0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "historyEntry"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "storageIdentifier"));
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_recentPlaceDisplayWithSupersededStorageIdentifier:", v4));

  v5 = v8;
  if (v8)
  {
    v6 = *(void **)(a1 + 48);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "historyEntry"));
    objc_msgSend(v6, "addObject:", v7);

    v5 = v8;
  }

}

void sub_1003A4C34(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "supersededSearchStorageIdentifier"));

  v4 = v10;
  if (v3)
  {
    v5 = *(void **)(a1 + 32);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "supersededSearchStorageIdentifier"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "_recentWithIdentifier:", v6));

    if (v7)
    {
      v8 = *(void **)(a1 + 40);
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "historyEntry"));
      objc_msgSend(v8, "addObject:", v9);

    }
    v4 = v10;
  }

}

uint64_t sub_1003A4E9C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 32));
  return result;
}

void sub_1003A4FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003A4FBC(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v7;
  void *v8;
  void *v9;
  unsigned int v10;
  id v11;

  v11 = a2;
  v7 = objc_opt_class(HistoryEntryRecentsItem);
  if ((objc_opt_isKindOfClass(v11, v7) & 1) != 0)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "historyEntry"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "storageIdentifier"));
    v10 = objc_msgSend(v9, "isEqual:", *(_QWORD *)(a1 + 32));

    if (v10)
    {
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
      *a4 = 1;
    }
  }

}

void sub_1003A515C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003A5174(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  _QWORD v11[4];
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;

  v6 = a2;
  v7 = objc_opt_class(HistoryEntryRecentsItem);
  if ((objc_opt_isKindOfClass(v6, v7) & 1) != 0)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "historyEntry"));
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1003A5254;
    v11[3] = &unk_1011B3CB0;
    v9 = *(id *)(a1 + 32);
    v10 = *(_QWORD *)(a1 + 40);
    v12 = v9;
    v14 = v10;
    v13 = v6;
    v15 = a4;
    objc_msgSend(v8, "ifSearch:ifRoute:ifPlaceDisplay:ifTransitLineItem:", 0, 0, v11, 0);

  }
}

void sub_1003A5254(uint64_t a1, void *a2)
{
  void *v3;
  unsigned int v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "supersededSearchStorageIdentifier"));
  v4 = objc_msgSend(v3, "isEqual:", *(_QWORD *)(a1 + 32));

  if (v4)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), *(id *)(a1 + 40));
    **(_BYTE **)(a1 + 56) = 1;
  }
}

void sub_1003A5370(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1003A5394(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  NSObject *v5;
  id v6;
  _QWORD block[5];
  id v8;

  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 48);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1003A5430;
    block[3] = &unk_1011AC8B0;
    block[4] = WeakRetained;
    v8 = v6;
    dispatch_sync(v5, block);

  }
}

id sub_1003A5430(uint64_t a1)
{
  id v2;

  v2 = objc_msgSend(*(id *)(a1 + 40), "copy");
  objc_msgSend(*(id *)(a1 + 32), "setHistoryQueryContents:", v2);

  objc_msgSend(*(id *)(a1 + 32), "_combineRecents");
  return _objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "recentsUpdated:");
}

HistoryEntryRecentsItem *sub_1003A54D4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  HistoryEntryRecentsItem *v13;
  CuratedCollectionHistoryEntry *v14;

  v3 = a2;
  v4 = objc_opt_class(HistoryEntryRecentsItem);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
    v5 = v3;
  else
    v5 = 0;
  v6 = v5;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "historyEntry"));
  v8 = objc_opt_class(MSHistoryCuratedCollection);
  if ((objc_opt_isKindOfClass(v7, v8) & 1) != 0)
    v9 = v7;
  else
    v9 = 0;
  v10 = v9;

  if (v10)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "resolvedGEOPlaceCollectionForMapsSyncHistoryCuratedCollection:", v10));
    v12 = v11;
    if (v11 && (objc_msgSend(v11, "isBlocked") & 1) == 0)
    {
      v14 = -[CuratedCollectionHistoryEntry initWithMapsSyncHistoryCuratedCollection:placeCollection:]([CuratedCollectionHistoryEntry alloc], "initWithMapsSyncHistoryCuratedCollection:placeCollection:", v10, v12);
      v13 = -[HistoryEntryRecentsItem initWithHistoryEntry:]([HistoryEntryRecentsItem alloc], "initWithHistoryEntry:", v14);

    }
    else
    {
      v13 = 0;
    }

  }
  else
  {
    v13 = (HistoryEntryRecentsItem *)v3;
  }

  return v13;
}

id sub_1003A5608(id a1, id a2, unint64_t a3)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  HistoryEntryRecentsItem *v11;
  void *v12;
  HistoryEntryRecentsItem *v13;

  v3 = a2;
  v4 = objc_opt_class(HistoryEntryRecentsItem);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
    v5 = v3;
  else
    v5 = 0;
  v6 = v5;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "historyEntry"));
  v8 = objc_opt_class(CuratedCollectionHistoryEntry);
  if ((objc_opt_isKindOfClass(v7, v8) & 1) != 0)
    v9 = v7;
  else
    v9 = 0;
  v10 = v9;

  if (v10)
  {
    v11 = [HistoryEntryRecentsItem alloc];
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "curatedCollection"));
    v13 = -[HistoryEntryRecentsItem initWithHistoryEntry:](v11, "initWithHistoryEntry:", v12);

  }
  else
  {
    v13 = (HistoryEntryRecentsItem *)v3;
  }

  return v13;
}

BOOL sub_1003A5954()
{
  if (qword_1014D22C8 != -1)
    dispatch_once(&qword_1014D22C8, &stru_1011B3D10);
  return (byte_1014D22C0 & 1) == 0;
}

void sub_1003A599C(id a1)
{
  id v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  __int16 v9;
  uint8_t buf[2];
  __int16 v11;
  __int16 v12;
  __int16 v13;

  if ((MGGetBoolAnswer(CFSTR("arkit")) & 1) != 0)
  {
    if (MGGetSInt32Answer(CFSTR("DeviceClassNumber"), 0xFFFFFFFFLL) == 1)
    {
      if ((MGGetBoolAnswer(CFSTR("DeviceSupportsMapsOpticalHeading")) & 1) != 0)
      {
        if ((+[ARGeoTrackingConfiguration isSupportedWithOptions:](ARGeoTrackingConfiguration, "isSupportedWithOptions:", 4) & 1) != 0)
        {
          v1 = sub_1003A5B4C();
          v2 = objc_claimAutoreleasedReturnValue(v1);
          if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
          {
            v9 = 0;
            v3 = "VLF is supported on the current device";
            v4 = (uint8_t *)&v9;
LABEL_15:
            _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, v3, v4, 2u);
          }
        }
        else
        {
          byte_1014D22C0 = 1;
          v8 = sub_1003A5B4C();
          v2 = objc_claimAutoreleasedReturnValue(v8);
          if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            v3 = "VLF is not supported because the current device does not support geo tracking";
            v4 = buf;
            goto LABEL_15;
          }
        }
      }
      else
      {
        byte_1014D22C0 = 1;
        v7 = sub_1003A5B4C();
        v2 = objc_claimAutoreleasedReturnValue(v7);
        if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
        {
          v11 = 0;
          v3 = "VLF is not supported because the current device does not support the DeviceSupportsMapsOpticalHeading gestalt key";
          v4 = (uint8_t *)&v11;
          goto LABEL_15;
        }
      }
    }
    else
    {
      byte_1014D22C0 = 1;
      v6 = sub_1003A5B4C();
      v2 = objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        v12 = 0;
        v3 = "VLF is not supported because the current device is not an iPhone";
        v4 = (uint8_t *)&v12;
        goto LABEL_15;
      }
    }
  }
  else
  {
    byte_1014D22C0 = 1;
    v5 = sub_1003A5B4C();
    v2 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v13 = 0;
      v3 = "VLF is not supported because the current device does not support ARKit";
      v4 = (uint8_t *)&v13;
      goto LABEL_15;
    }
  }

}

id sub_1003A5B4C()
{
  if (qword_1014D22D8 != -1)
    dispatch_once(&qword_1014D22D8, &stru_1011B3D30);
  return (id)qword_1014D22D0;
}

void sub_1003A5B8C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFAvailability");
  v2 = (void *)qword_1014D22D0;
  qword_1014D22D0 = (uint64_t)v1;

}

void sub_1003A5C34(id a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_1014D22E8;
  qword_1014D22E8 = (uint64_t)v1;

  objc_msgSend((id)qword_1014D22E8, "setTimeStyle:", 0);
  objc_msgSend((id)qword_1014D22E8, "setDateStyle:", 1);
  objc_msgSend((id)qword_1014D22E8, "setDoesRelativeDateFormatting:", 1);
  v3 = (void *)qword_1014D22E8;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSLocale autoupdatingCurrentLocale](NSLocale, "autoupdatingCurrentLocale"));
  objc_msgSend(v3, "setLocale:", v4);

  objc_msgSend((id)qword_1014D22E8, "setFormattingContext:", 1);
  v5 = objc_alloc_init((Class)NSDateFormatter);
  v6 = (void *)qword_1014D22F0;
  qword_1014D22F0 = (uint64_t)v5;

  objc_msgSend((id)qword_1014D22F0, "setTimeStyle:", 1);
  objc_msgSend((id)qword_1014D22F0, "setDateStyle:", 0);
  v7 = (void *)qword_1014D22F0;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSLocale autoupdatingCurrentLocale](NSLocale, "autoupdatingCurrentLocale"));
  objc_msgSend(v7, "setLocale:", v8);

  objc_msgSend((id)qword_1014D22F0, "setFormattingContext:", 1);
}

void sub_1003A72AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1003A72D4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_dismiss");

}

void sub_1003A7678(id a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = objc_alloc_init((Class)NSRelativeDateTimeFormatter);
  v2 = (void *)qword_1014D2300;
  qword_1014D2300 = (uint64_t)v1;

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSLocale autoupdatingCurrentLocale](NSLocale, "autoupdatingCurrentLocale"));
  objc_msgSend((id)qword_1014D2300, "setLocale:", v3);

  objc_msgSend((id)qword_1014D2300, "setDateTimeStyle:", 1);
}

void sub_1003A790C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1003A7930(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7;
  id WeakRetained;
  void *v9;
  id v10;

  v10 = a2;
  v7 = a5;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v9 = WeakRetained;
  if (WeakRetained)
  {
    if (v10 || !v7)
      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    else
      objc_msgSend(WeakRetained, "_loadCompanyLogoForSize:authorError:completion:", v7, *(_QWORD *)(a1 + 32), *(double *)(a1 + 48), *(double *)(a1 + 56));
  }

}

void sub_1003A7B18(uint64_t a1, void *a2)
{
  id v3;
  _QWORD block[4];
  id v5;
  id v6;
  id v7;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003A7BC0;
  block[3] = &unk_1011B1BB8;
  v5 = a2;
  v7 = *(id *)(a1 + 40);
  v6 = *(id *)(a1 + 32);
  v3 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

uint64_t sub_1003A7BC0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[4];
  v3 = a1[6];
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v3 + 16))(v3, v2, 0);
  else
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v3 + 16))(v3, 0, a1[5]);
}

void sub_1003A8340(id a1)
{
  UGCReviewedPlaceCache *v1;
  UGCReviewedPlaceManager *v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[UGCReviewedPlaceMapsSync sharedInstance](UGCReviewedPlaceMapsSync, "sharedInstance"));
  v1 = objc_alloc_init(UGCReviewedPlaceCache);
  v2 = -[UGCReviewedPlaceManager initWithSyncedCache:localCache:]([UGCReviewedPlaceManager alloc], "initWithSyncedCache:localCache:", v4, v1);
  v3 = (void *)qword_1014D2308;
  qword_1014D2308 = (uint64_t)v2;

}

void sub_1003A8558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1003A8574(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id WeakRetained;
  void *v7;
  uint64_t v8;
  _QWORD v9[4];
  id v10;
  _QWORD block[4];
  id v12;
  id v13;

  v3 = a2;
  if (!v3)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    v5 = WeakRetained;
    if (WeakRetained)
    {
      v7 = (void *)*((_QWORD *)WeakRetained + 1);
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472;
      v9[2] = sub_1003A8694;
      v9[3] = &unk_1011AE218;
      v8 = *(_QWORD *)(a1 + 32);
      v10 = *(id *)(a1 + 40);
      objc_msgSend(v7, "addOrEditReviewedPlace:completion:", v8, v9);

    }
    goto LABEL_6;
  }
  v4 = *(void **)(a1 + 40);
  if (v4)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1003A8684;
    block[3] = &unk_1011ACAD0;
    v13 = v4;
    v12 = v3;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

    v5 = v13;
LABEL_6:

  }
}

uint64_t sub_1003A8684(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_1003A8694(uint64_t a1)
{
  void *v1;
  _QWORD block[4];
  id v3;

  v1 = *(void **)(a1 + 32);
  if (v1)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1003A8700;
    block[3] = &unk_1011ADA00;
    v3 = v1;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  }
}

uint64_t sub_1003A8700(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1003A8808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1003A8824(id a1, GEOMapItemIdentifier *a2, unint64_t a3)
{
  return +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", -[GEOMapItemIdentifier muid](a2, "muid", a3));
}

void sub_1003A8854(uint64_t a1, char a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  _QWORD v12[4];
  id v13;
  id v14;
  char v15;
  _QWORD block[4];
  id v17;
  char v18;

  v5 = a3;
  if ((a2 & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    v7 = WeakRetained;
    if (WeakRetained)
    {
      v8 = (void *)*((_QWORD *)WeakRetained + 1);
      v9 = objc_msgSend(v5, "originallySavedMUID");
      v10 = objc_msgSend(v5, "muid");
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_1003A89AC;
      v12[3] = &unk_1011B3E70;
      v13 = v5;
      v14 = *(id *)(a1 + 32);
      v15 = a2;
      objc_msgSend(v8, "fetchWithMUID:andReplaceIfNeededWithNewMUID:completion:", v9, v10, v12);

    }
    goto LABEL_6;
  }
  v11 = *(void **)(a1 + 32);
  if (v11)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1003A8994;
    block[3] = &unk_1011B06A0;
    v17 = v11;
    v18 = a2;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
    v7 = v17;
LABEL_6:

  }
}

uint64_t sub_1003A8994(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), 0);
}

void sub_1003A89AC(uint64_t a1, int a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  _QWORD block[4];
  id v9;
  id v10;
  char v11;

  v5 = a3;
  v6 = v5;
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "setNumberOfPhotosAdded:", objc_msgSend(v5, "numberOfPhotosAdded"));
    objc_msgSend(*(id *)(a1 + 32), "setRecommendState:", objc_msgSend(v6, "recommendState"));
  }
  v7 = *(void **)(a1 + 40);
  if (v7)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1003A8A84;
    block[3] = &unk_1011B3E48;
    v10 = v7;
    v11 = *(_BYTE *)(a1 + 48);
    v9 = *(id *)(a1 + 32);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  }
}

uint64_t sub_1003A8A84(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 32));
}

void sub_1003A8B64(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1003A8B80(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id WeakRetained;
  void *v7;
  uint64_t v8;
  _QWORD v9[4];
  id v10;
  _QWORD block[4];
  id v12;
  id v13;

  v3 = a2;
  if (!v3)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    v5 = WeakRetained;
    if (WeakRetained)
    {
      v7 = (void *)*((_QWORD *)WeakRetained + 1);
      v8 = *(_QWORD *)(a1 + 48);
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472;
      v9[2] = sub_1003A8CA4;
      v9[3] = &unk_1011AE218;
      v10 = *(id *)(a1 + 32);
      objc_msgSend(v7, "removeReviewedPlaceWithMUID:completion:", v8, v9);

    }
    goto LABEL_6;
  }
  v4 = *(void **)(a1 + 32);
  if (v4)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1003A8C94;
    block[3] = &unk_1011ACAD0;
    v13 = v4;
    v12 = v3;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

    v5 = v13;
LABEL_6:

  }
}

uint64_t sub_1003A8C94(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_1003A8CA4(uint64_t a1)
{
  void *v1;
  _QWORD block[4];
  id v3;

  v1 = *(void **)(a1 + 32);
  if (v1)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1003A8D10;
    block[3] = &unk_1011ADA00;
    v3 = v1;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  }
}

uint64_t sub_1003A8D10(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1003A8DAC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  if (v4)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1003A8E40;
    v5[3] = &unk_1011ACAD0;
    v7 = v4;
    v6 = v3;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v5);

  }
}

uint64_t sub_1003A8E40(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_1003A8F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1003A8F50(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1003A8F60(uint64_t a1)
{

}

void sub_1003A8F68(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *i;
  void *v9;
  unsigned int v10;
  UGCReviewedPlace *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  _QWORD v20[4];
  id v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];

  v3 = a2;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
  if (v4)
  {
    v5 = v4;
    v6 = 0;
    v7 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v24 != v7)
          objc_enumerationMutation(v3);
        v9 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v9, "hasUserReviewed"))
        {
          v10 = objc_msgSend(v9, "uploadedPhotosCount");
          v11 = -[UGCReviewedPlace initWithMUID:]([UGCReviewedPlace alloc], "initWithMUID:", objc_msgSend(v9, "muid"));
          -[UGCReviewedPlace setVersion:](v11, "setVersion:", (int)objc_msgSend(v9, "version"));
          if ((int)objc_msgSend(v9, "version") >= 1)
          {
            v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "modificationTime"));
            -[UGCReviewedPlace setDateOfLastEdit:](v11, "setDateOfLastEdit:", v12);

            v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "rating"));
            -[UGCReviewedPlace setRecommendState:](v11, "setRecommendState:", objc_msgSend(v13, "integerValue"));

            -[UGCReviewedPlace setNumberOfPhotosAdded:](v11, "setNumberOfPhotosAdded:", (int)objc_msgSend(v9, "uploadedPhotosCount"));
            objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "addObject:", v11);
          }
          v6 = v10 + v6;

        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    }
    while (v5);
  }
  else
  {
    v6 = 0;
  }
  v14 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "count");
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[GEOAPSharedStateData sharedData](GEOAPSharedStateData, "sharedData"));
  objc_msgSend(v15, "setMapFeatureSubmittedRatingsCount:", v14);

  v16 = (void *)objc_claimAutoreleasedReturnValue(+[GEOAPSharedStateData sharedData](GEOAPSharedStateData, "sharedData"));
  objc_msgSend(v16, "setMapFeatureSubmittedPhotosCount:", v6);

  v17 = *(void **)(a1 + 32);
  if (v17)
  {
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_1003A91E8;
    v20[3] = &unk_1011AE540;
    v18 = v17;
    v19 = *(_QWORD *)(a1 + 40);
    v21 = v18;
    v22 = v19;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v20);

  }
}

void sub_1003A91E8(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "copy");
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void sub_1003A9318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003A9330(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  UGCReviewedPlace *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  _QWORD v15[4];
  id v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];

  v3 = a2;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v19;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v19 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v8, "hasUserReviewed"))
        {
          v9 = -[UGCReviewedPlace initWithMUID:]([UGCReviewedPlace alloc], "initWithMUID:", objc_msgSend(v8, "muid"));
          -[UGCReviewedPlace setVersion:](v9, "setVersion:", (int)objc_msgSend(v8, "version"));
          if ((int)objc_msgSend(v8, "version") >= 1)
          {
            v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "modificationTime"));
            -[UGCReviewedPlace setDateOfLastEdit:](v9, "setDateOfLastEdit:", v10);

            v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "rating"));
            -[UGCReviewedPlace setRecommendState:](v9, "setRecommendState:", objc_msgSend(v11, "integerValue"));

            -[UGCReviewedPlace setNumberOfPhotosAdded:](v9, "setNumberOfPhotosAdded:", (int)objc_msgSend(v8, "uploadedPhotosCount"));
            if (-[UGCReviewedPlace numberOfPhotosAdded](v9, "numberOfPhotosAdded"))
              objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "addObject:", v9);
          }

        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v5);
  }
  v12 = *(void **)(a1 + 32);
  if (v12)
  {
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_1003A9550;
    v15[3] = &unk_1011AE540;
    v13 = v12;
    v14 = *(_QWORD *)(a1 + 40);
    v16 = v13;
    v17 = v14;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v15);

  }
}

void sub_1003A9550(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "copy");
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void sub_1003A9C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL sub_1003A9C38(id a1, MapsSuggestionsEntry *a2)
{
  MapsSuggestionsEntry *v2;
  MapsSuggestionsOfflineService *v3;
  unsigned __int8 v4;

  v2 = a2;
  v3 = objc_alloc_init(MapsSuggestionsOfflineService);
  v4 = -[MapsSuggestionsOfflineService shouldKeepEntryWhenOffline:](v3, "shouldKeepEntryWhenOffline:", v2);

  return v4;
}

void sub_1003A9C8C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id WeakRetained;
  void *v6;
  id v7;

  v7 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v6 = WeakRetained;
  if (WeakRetained)
    objc_msgSend(WeakRetained, "_fetchSuggestionsWithCompletion:", v7);

}

void sub_1003A9E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1003A9E2C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v7 = WeakRetained;
  if (WeakRetained)
    objc_msgSend(WeakRetained, "_processTopSuggestions:error:wasFromStorageFile:", v8, v5, 1);

}

void sub_1003A9F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1003A9FB0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  uint64_t v8;
  id v9;

  v9 = a2;
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v7 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "_processTopSuggestions:error:wasFromStorageFile:", v9, v5, 0);
    v8 = *(_QWORD *)(a1 + 32);
    if (v8)
      (*(void (**)(void))(v8 + 16))();
  }

}

void sub_1003AA3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1003AA430(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1003AA440(uint64_t a1)
{

}

void sub_1003AA448(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  objc_class *v9;
  NSString *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  id v20;

  v5 = a2;
  v6 = a3;
  v7 = sub_100432EDC();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    v9 = (objc_class *)objc_opt_class(*(_QWORD *)(a1 + 32));
    v10 = NSStringFromClass(v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "strippedData:", v5));
    v15 = 138412802;
    v16 = v11;
    v17 = 2112;
    v18 = v12;
    v19 = 2112;
    v20 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%@ fetchSuggestions [Suggestions]  %@ error %@", (uint8_t *)&v15, 0x20u);

  }
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v14 = *(void **)(v13 + 40);
  *(_QWORD *)(v13 + 40) = v5;

}

void sub_1003AA568(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  objc_class *v9;
  NSString *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  id v20;

  v5 = a2;
  v6 = a3;
  v7 = sub_100432EDC();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    v9 = (objc_class *)objc_opt_class(*(_QWORD *)(a1 + 32));
    v10 = NSStringFromClass(v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "strippedData:", v5));
    v15 = 138412802;
    v16 = v11;
    v17 = 2112;
    v18 = v12;
    v19 = 2112;
    v20 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%@ fetchSuggestions [Shortcuts]  %@ error %@", (uint8_t *)&v15, 0x20u);

  }
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v14 = *(void **)(v13 + 40);
  *(_QWORD *)(v13 + 40) = v5;

}

BOOL sub_1003AA688(id a1, MapsSuggestionsEntry *a2, NSDictionary *a3)
{
  return -[MapsSuggestionsEntry isShortcutForSetup](a2, "isShortcutForSetup", a3) ^ 1;
}

id sub_1003AA6A4(void *a1)
{
  id v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        v8 = objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)v7), "copy", (_QWORD)v11);
        objc_msgSend(v2, "addObject:", v8);

        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = objc_msgSend(v2, "copy");
  return v9;
}

void sub_1003AAEFC(uint64_t a1)
{
  NSObject *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  dispatch_time_t v10;
  id obj;
  _QWORD v12[4];
  NSObject *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  v2 = dispatch_group_create();
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  obj = *(id *)(a1 + 32);
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v15;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v15 != v5)
          objc_enumerationMutation(obj);
        v7 = *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)v6);
        dispatch_group_enter(v2);
        v8 = *(_QWORD *)(a1 + 40);
        v12[0] = _NSConcreteStackBlock;
        v12[1] = 3221225472;
        v12[2] = sub_1003AB098;
        v12[3] = &unk_1011B3FE0;
        v9 = v2;
        v13 = v9;
        if ((GEOMapItemFromMapsSuggestionsEntry(v7, v8, 1, v12) & 1) == 0)
          dispatch_group_leave(v9);

        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v4);
  }

  v10 = dispatch_time(0, 5000000000);
  dispatch_group_wait(v2, v10);

}

void sub_1003AB098(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

id sub_1003ABD3C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_saveMapsSuggestionsEngineStateIfNeeded");
}

id sub_1003ABDE4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "saveStorageToFile:callback:", 0, 0);
}

id sub_1003AC04C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_updateTitlesForEntry:", *(_QWORD *)(a1 + 40));
}

id sub_1003AF5CC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "resignFirstResponder");
}

void sub_1003AF95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1003AF980(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  _QWORD block[4];
  id v9;
  id v10;
  id v11;

  v5 = a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003AFA48;
  block[3] = &unk_1011AFE28;
  v9 = a3;
  v6 = v9;
  objc_copyWeak(&v11, (id *)(a1 + 32));
  v10 = v5;
  v7 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  objc_destroyWeak(&v11);
}

void sub_1003AFA48(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *i;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _CellDataSaverRun *v21;
  void *v22;
  void *v23;
  void *v24;
  _QWORD *v25;
  id obj;
  uint64_t v27;
  void *v28;
  id v29;
  void *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[128];
  _BYTE v43[128];

  if (*(_QWORD *)(a1 + 32))
  {
    NSLog(CFSTR("Can't retrieve CDS diagnostics : %@"), *(_QWORD *)(a1 + 32));
  }
  else
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    v3 = WeakRetained;
    if (WeakRetained)
    {
      v25 = WeakRetained;
      v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
      v38 = 0u;
      v39 = 0u;
      v40 = 0u;
      v41 = 0u;
      obj = *(id *)(a1 + 40);
      v29 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v43, 16);
      if (v29)
      {
        v27 = *(_QWORD *)v39;
        do
        {
          v4 = 0;
          do
          {
            if (*(_QWORD *)v39 != v27)
              objc_enumerationMutation(obj);
            v5 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * v4);
            v34 = 0u;
            v35 = 0u;
            v36 = 0u;
            v37 = 0u;
            v30 = v5;
            v32 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "policies"));
            v6 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v34, v42, 16);
            v31 = v4;
            if (v6)
            {
              v7 = v6;
              v8 = 0;
              v9 = 0;
              v10 = 0;
              v11 = 0;
              v12 = 0;
              v33 = *(_QWORD *)v35;
              do
              {
                for (i = 0; i != v7; i = (char *)i + 1)
                {
                  if (*(_QWORD *)v35 != v33)
                    objc_enumerationMutation(v32);
                  v14 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * (_QWORD)i);
                  v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "startTimestamp"));
                  v16 = (void *)v15;
                  if (v12)
                  {
                    v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "earlierDate:", v15));

                    v12 = (void *)v17;
                  }
                  else
                  {
                    v12 = (void *)v15;
                  }
                  v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "endTimestamp"));
                  v19 = (void *)v18;
                  if (v8)
                  {
                    v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "laterDate:", v18));

                    v8 = (void *)v20;
                  }
                  else
                  {
                    v8 = (void *)v18;
                  }
                  v9 += (uint64_t)objc_msgSend(v14, "tilesConsidered");
                  v10 += (uint64_t)objc_msgSend(v14, "successCount");
                  v11 += (uint64_t)objc_msgSend(v14, "failureCount");
                }
                v7 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v34, v42, 16);
              }
              while (v7);
            }
            else
            {
              v8 = 0;
              v9 = 0;
              v10 = 0;
              v11 = 0;
              v12 = 0;
            }

            v21 = objc_alloc_init(_CellDataSaverRun);
            -[_CellDataSaverRun setStartDate:](v21, "setStartDate:", v12);
            -[_CellDataSaverRun setEndDate:](v21, "setEndDate:", v8);
            -[_CellDataSaverRun setTotalTiles:](v21, "setTotalTiles:", v9);
            -[_CellDataSaverRun setSuccessCount:](v21, "setSuccessCount:", v10);
            -[_CellDataSaverRun setFailureCount:](v21, "setFailureCount:", v11);
            v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "policies"));
            -[_CellDataSaverRun setPolicyStatistics:](v21, "setPolicyStatistics:", v22);

            objc_msgSend(v28, "addObject:", v21);
            v4 = v31 + 1;
          }
          while ((id)(v31 + 1) != v29);
          v29 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v43, 16);
        }
        while (v29);
      }

      objc_msgSend(v28, "sortUsingComparator:", &stru_1011B4020);
      v3 = v25;
      v23 = (void *)v25[1];
      v25[1] = v28;

      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "tableView"));
      objc_msgSend(v24, "reloadData");

    }
  }
}

int64_t sub_1003AFDC4(id a1, _CellDataSaverRun *a2, _CellDataSaverRun *a3)
{
  _CellDataSaverRun *v4;
  void *v5;
  void *v6;
  id v7;

  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[_CellDataSaverRun startDate](a3, "startDate"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[_CellDataSaverRun startDate](v4, "startDate"));

  v7 = objc_msgSend(v5, "compare:", v6);
  return (int64_t)v7;
}

id sub_1003B01CC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  id v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  double v39;
  double v40;

  v7 = objc_alloc_init((Class)UIStackView);
  objc_msgSend(v7, "setAxis:", 0);
  objc_msgSend(v7, "setAlignment:", 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont monospacedDigitSystemFontOfSize:weight:](UIFont, "monospacedDigitSystemFontOfSize:weight:", 12.0, UIFontWeightBold));
  v9 = objc_alloc_init((Class)UILabel);
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%llu"), a1));
  objc_msgSend(v9, "setText:", v10);

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.9, 1.0));
  objc_msgSend(v9, "setBackgroundColor:", v11);

  objc_msgSend(v9, "setFont:", v8);
  v12 = sub_1003B0B80(v9, 1, 0);
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  objc_msgSend(v7, "addArrangedSubview:", v13);

  v14 = objc_alloc_init((Class)UILabel);
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%llu"), a2));
  objc_msgSend(v14, "setText:", v15);

  v16 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemGreenColor](UIColor, "systemGreenColor"));
  objc_msgSend(v14, "setBackgroundColor:", v16);

  objc_msgSend(v14, "setFont:", v8);
  objc_msgSend(v14, "sizeToFit");
  v17 = sub_1003B0B80(v14, 0, 0);
  v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
  objc_msgSend(v7, "addArrangedSubview:", v18);

  v19 = objc_alloc_init((Class)UILabel);
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%llu"), a3));
  objc_msgSend(v19, "setText:", v20);

  v21 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemRedColor](UIColor, "systemRedColor"));
  objc_msgSend(v19, "setBackgroundColor:", v21);

  objc_msgSend(v19, "setFont:", v8);
  objc_msgSend(v19, "sizeToFit");
  v22 = sub_1003B0B80(v19, 0, 1);
  v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
  objc_msgSend(v7, "addArrangedSubview:", v23);

  if (a4)
  {
    v24 = objc_alloc((Class)UIImageView);
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage kitImageNamed:](UIImage, "kitImageNamed:", CFSTR("UITableNext")));
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "imageWithRenderingMode:", 2));
    v27 = objc_msgSend(v24, "initWithImage:", v26);

    objc_msgSend(v27, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v28 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor tertiaryLabelColor](UIColor, "tertiaryLabelColor"));
    objc_msgSend(v27, "setTintColor:", v28);

    v29 = objc_alloc_init((Class)UIView);
    objc_msgSend(v29, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    objc_msgSend(v29, "addSubview:", v27);
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "centerYAnchor"));
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "centerYAnchor"));
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "constraintEqualToAnchor:", v31));
    objc_msgSend(v32, "setActive:", 1);

    v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "leadingAnchor"));
    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "leadingAnchor"));
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "constraintEqualToAnchor:constant:", v34, 4.0));
    objc_msgSend(v35, "setActive:", 1);

    v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "trailingAnchor"));
    v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "trailingAnchor"));
    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "constraintEqualToAnchor:", v37));
    objc_msgSend(v38, "setActive:", 1);

    objc_msgSend(v7, "addArrangedSubview:", v29);
  }
  objc_msgSend(v7, "systemLayoutSizeFittingSize:", UILayoutFittingCompressedSize.width, UILayoutFittingCompressedSize.height);
  objc_msgSend(v7, "setBounds:", 0.0, 0.0, v39, v40);

  return v7;
}

id sub_1003B0B80(void *a1, int a2, int a3)
{
  id v5;
  double v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  void *v23;
  double v24;
  double v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;

  v5 = a1;
  objc_msgSend(v5, "sizeToFit");
  objc_msgSend(v5, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  LODWORD(v6) = 1148829696;
  objc_msgSend(v5, "setContentCompressionResistancePriority:forAxis:", 0, v6);
  v7 = objc_alloc_init((Class)UIView);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "backgroundColor"));
  objc_msgSend(v7, "setBackgroundColor:", v8);

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor clearColor](UIColor, "clearColor"));
  objc_msgSend(v5, "setBackgroundColor:", v9);

  objc_msgSend(v7, "addSubview:", v5);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "topAnchor"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "topAnchor"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "constraintEqualToAnchor:constant:", v11, 8.0));
  objc_msgSend(v12, "setActive:", 1);

  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "bottomAnchor"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "bottomAnchor"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "constraintEqualToAnchor:constant:", v14, -8.0));
  objc_msgSend(v15, "setActive:", 1);

  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "leftAnchor"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "leftAnchor"));
  v18 = 12.0;
  if (!a2)
    v18 = 8.0;
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "constraintEqualToAnchor:constant:", v17, v18));
  objc_msgSend(v19, "setActive:", 1);

  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "rightAnchor"));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "rightAnchor"));
  v22 = -12.0;
  if (!a3)
    v22 = -8.0;
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "constraintEqualToAnchor:constant:", v21, v22));
  objc_msgSend(v23, "setActive:", 1);

  LODWORD(v24) = 1144750080;
  objc_msgSend(v7, "setContentCompressionResistancePriority:forAxis:", 1, v24);
  LODWORD(v25) = 1148829696;
  objc_msgSend(v7, "setContentCompressionResistancePriority:forAxis:", 0, v25);
  if ((a2 & 1) != 0 || a3)
  {
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "layer"));
    objc_msgSend(v26, "setCornerRadius:", 16.0);

    v27 = 5;
    if (!a2)
      v27 = 0;
    if (a3)
      v28 = v27 | 0xA;
    else
      v28 = v27;
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "layer"));
    objc_msgSend(v29, "setMaskedCorners:", v28);

  }
  return v7;
}

void sub_1003B1298(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  unsigned __int8 v5;
  int v6;
  void *v7;
  uint64_t v8;
  id v9;

  objc_msgSend(*(id *)(a1 + 32), "_updateProgressTimerForAlert:", *(_QWORD *)(a1 + 40));
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentedAlert"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "originalRoute"));
  if ((objc_msgSend(v2, "isEVRoute") & 1) == 0)
  {

LABEL_9:
    return;
  }
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentedAlert"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "originalRouteNavigability"));
  v5 = objc_msgSend(v4, "isEvFeasible");

  if ((v5 & 1) == 0)
  {
    v6 = *(unsigned __int8 *)(a1 + 48);
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
    v9 = v7;
    if (v6)
      v8 = 6095;
    else
      v8 = 75;
    objc_msgSend(v7, "captureUserAction:onTarget:eventValue:", v8, 615, 0);
    goto LABEL_9;
  }
}

void sub_1003B2048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1003B217C(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "alertViewController"));
  objc_msgSend(v2, "setRerouteTimerProgress:", 1.0);

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "alertViewController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "view"));
  objc_msgSend(v3, "layoutIfNeeded");

}

void sub_1003B21E4(uint64_t a1, char a2)
{
  double v3;
  double v4;
  id v5;

  v3 = 1.0;
  if ((a2 & 1) == 0)
  {
    v3 = 0.0;
    if (objc_msgSend(*(id *)(a1 + 32), "_hasValidRerouteTimer"))
    {
      objc_msgSend(*(id *)(a1 + 32), "_timeoutTimerProgress");
      v3 = v4;
    }
  }
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "alertViewController"));
  objc_msgSend(v5, "setRerouteTimerProgress:", v3);

}

void sub_1003B28F0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "NavTrafficIncidentCoordinator");
  v2 = (void *)qword_1014D2318;
  qword_1014D2318 = (uint64_t)v1;

}

void sub_1003B2960(id a1)
{
  UserProfileLinkReportsProvider *v1;
  void *v2;

  v1 = objc_alloc_init(UserProfileLinkReportsProvider);
  v2 = (void *)qword_1014D2328;
  qword_1014D2328 = (uint64_t)v1;

}

id sub_1003B3290(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "dealloc");
}

void sub_1003BADCC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  char isKindOfClass;
  id v10;

  v7 = a2;
  v8 = objc_opt_class(NSTextAttachment);
  isKindOfClass = objc_opt_isKindOfClass(v7, v8);

  if ((isKindOfClass & 1) != 0)
  {
    v10 = (id)objc_claimAutoreleasedReturnValue(+[NSAttributedString attributedStringWithAttachment:](NSAttributedString, "attributedStringWithAttachment:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80)));
    objc_msgSend(*(id *)(a1 + 40), "replaceCharactersInRange:withAttributedString:", a3, a4, v10);

  }
}

void sub_1003BB2A4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  CGContext *v5;
  void *v6;
  void *v7;
  id v8;
  CGRect v9;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemFillColor](UIColor, "systemFillColor"));
  objc_msgSend(v4, "setFill");

  v5 = (CGContext *)objc_msgSend(v3, "CGContext");
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "format"));
  objc_msgSend(v6, "bounds");
  CGContextFillEllipseInRect(v5, v9);

  v7 = *(void **)(a1 + 32);
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "format"));

  objc_msgSend(v8, "bounds");
  objc_msgSend(v7, "drawInRect:");

}

void sub_1003BC100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1003BC128(uint64_t a1, void *a2, uint64_t a3)
{
  id *WeakRetained;
  id *v6;
  id v7;

  v7 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v6 = WeakRetained;
  if (WeakRetained && *(_DWORD *)(a1 + 40) == *((_DWORD *)WeakRetained + 24))
  {
    objc_msgSend(WeakRetained[6], "setClipsToBounds:", a3);
    objc_msgSend(v6, "_updateImage:", v7);
  }

}

id sub_1003BCF10(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "setReportedPlace:", *(_QWORD *)(a1 + 32));
}

void sub_1003BCF1C(uint64_t a1, char a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void **v10;
  uint64_t v11;
  id (*v12)(uint64_t);
  void *v13;
  id v14;
  id v15;

  if (*(_BYTE *)(a1 + 64) || (a2 & 1) == 0)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 1));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("OK [Report a Problem push]"), CFSTR("localized string not found"), 0));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v5, 1, 0));
    objc_msgSend(v3, "addAction:", v6);

    if (*(_BYTE *)(a1 + 65))
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "localizedStringForKey:value:table:", CFSTR("Show [Report a Problem push]"), CFSTR("localized string not found"), 0));
      v10 = _NSConcreteStackBlock;
      v11 = 3221225472;
      v12 = sub_1003BD0EC;
      v13 = &unk_1011B0210;
      v14 = *(id *)(a1 + 48);
      v15 = *(id *)(a1 + 56);
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v8, 0, &v10));
      objc_msgSend(v3, "addAction:", v9, v10, v11, v12, v13);

    }
    objc_msgSend(*(id *)(a1 + 56), "presentViewController:animated:completion:", v3, 1, 0);

  }
  else
  {
    _objc_msgSend(*(id *)(a1 + 48), "displayAdditionalUIOnViewController:", *(_QWORD *)(a1 + 56));
  }
}

id sub_1003BD0EC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "displayAdditionalUIOnViewController:", *(_QWORD *)(a1 + 40));
}

void sub_1003BD0F8(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "firstObject"));
  if (v9)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "coordinator"));
    objc_msgSend(v3, "viewController:presentReportDetail:fromEntryPoint:", *(_QWORD *)(a1 + 40), v9, 713);

    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "rapResponse"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[GEORPRapResponse RapStateIconAsString:](GEORPRapResponse, "RapStateIconAsString:", objc_msgSend(v4, "rapStateIcon")));

    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "reportID"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "rapResponse"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "responseId"));
    +[RAPNotificationLogEvent reportUserTappedNotificationWithRapId:responseId:notificationType:completion:](RAPNotificationLogEvent, "reportUserTappedNotificationWithRapId:responseId:notificationType:completion:", v6, v8, v5, &stru_1011B41A8);

  }
}

void sub_1003BD1FC(id a1, NSError *a2)
{
  NSError *v2;
  NSObject *v3;
  int v4;
  NSError *v5;

  v2 = a2;
  if (v2)
  {
    if (qword_1014D2340 != -1)
      dispatch_once(&qword_1014D2340, &stru_1011B41F0);
    v3 = qword_1014D2338;
    if (os_log_type_enabled((os_log_t)qword_1014D2338, OS_LOG_TYPE_ERROR))
    {
      v4 = 138412290;
      v5 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Fail to send user tapped RAP notification logEvent with error: %@", (uint8_t *)&v4, 0xCu);
    }
  }

}

void sub_1003BD2CC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "PresentRAPActionHandler");
  v2 = (void *)qword_1014D2338;
  qword_1014D2338 = (uint64_t)v1;

}

void sub_1003BDD54(uint64_t a1)
{
  double v2;
  double v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 40), "opacity");
  v3 = v2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v4, "setAlpha:", v3);

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v5, "layoutIfNeeded");

}

void sub_1003BE38C(id a1, id a2, NSError *a3)
{
  NSError *v3;
  id v4;
  NSObject *v5;
  int v6;
  NSError *v7;

  v3 = a3;
  if (v3)
  {
    v4 = sub_10043292C();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = 138412290;
      v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Sending Map Coordinate to WebBundle Error: %@", (uint8_t *)&v6, 0xCu);
    }

  }
}

void sub_1003BE818(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

id sub_1003BE834(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  unsigned int v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  id to;

  objc_copyWeak(&to, (id *)(a1 + 32));
  v3 = objc_loadWeakRetained(&to);

  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[_UIBackgroundViewConfiguration defaultPlainListCellConfigurationForState:](_UIBackgroundViewConfiguration, "defaultPlainListCellConfigurationForState:", a2));
    objc_msgSend(v4, "setBackgroundColorMode:", 0);
    v5 = objc_loadWeakRetained(&to);
    if (objc_msgSend(v5, "isSelected"))
    {

    }
    else
    {
      v6 = objc_loadWeakRetained(&to);
      v7 = objc_msgSend(v6, "isHighlighted");

      if (!v7)
      {
        v8 = (id)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.0, 0.0500000007));
        objc_msgSend(v4, "setBackgroundColor:", v8);
        goto LABEL_8;
      }
    }
    v8 = objc_loadWeakRetained(&to);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "theme"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "keyColor"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "colorWithAlphaComponent:", 0.0700000003));
    objc_msgSend(v4, "setBackgroundColor:", v11);

LABEL_8:
    goto LABEL_9;
  }
  v4 = 0;
LABEL_9:
  objc_destroyWeak(&to);
  return v4;
}

void sub_1003BE97C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1003BEA80(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

id sub_1003BEAA8(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;
  unsigned int v6;
  id v7;
  int v8;
  id v9;
  unsigned int v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  int v15;
  id v17;
  unsigned int v18;
  id v19;
  unsigned int v20;
  void *v21;
  id to;

  objc_copyWeak(&to, (id *)(a1 + 32));
  v3 = objc_loadWeakRetained(&to);

  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[_UIBackgroundViewConfiguration defaultPlainListCellConfigurationForState:](_UIBackgroundViewConfiguration, "defaultPlainListCellConfigurationForState:", a2));
    v5 = objc_loadWeakRetained(&to);
    v6 = objc_msgSend(v5, "isSelected");

    v7 = objc_loadWeakRetained(&to);
    if ((objc_msgSend(v7, "isHighlighted") & 1) != 0)
    {
      v8 = 0;
    }
    else
    {
      v9 = objc_loadWeakRetained(&to);
      v10 = objc_msgSend(v9, "isFocused");

      v8 = v10 ^ 1;
    }

    v11 = objc_loadWeakRetained(&to);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "traitCollection"));
    v13 = objc_msgSend(v12, "activeAppearance");

    if (v6 && v13 == (id)1)
    {
      v14 = 1;
    }
    else
    {
      if (v13 == (id)1)
        v15 = v8;
      else
        v15 = 1;
      if (v15 != 1)
      {
        v14 = 7;
        goto LABEL_17;
      }
      if (v13 == (id)1)
      {
        v17 = objc_loadWeakRetained(&to);
        v18 = objc_msgSend(v17, "maps_suppressBackgroundColors");

        if (v18)
          v14 = 3;
        else
          v14 = 8;
        if (((v18 ^ 1 | v6) & 1) != 0)
          goto LABEL_17;
      }
      else if ((v6 & 1) != 0)
      {
        v14 = 3;
        goto LABEL_17;
      }
      v19 = objc_loadWeakRetained(&to);
      v20 = objc_msgSend(v19, "maps_suppressBackgroundColors");

      if (v20)
      {
        objc_msgSend(v4, "setBackgroundColorMode:", 0);
        v21 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor clearColor](UIColor, "clearColor"));
        objc_msgSend(v4, "setBackgroundColor:", v21);

        goto LABEL_18;
      }
      v14 = 9;
    }
LABEL_17:
    objc_msgSend(v4, "setBackgroundColorMode:", v14);
LABEL_18:
    objc_msgSend(v4, "setCornerRadius:", 5.0);
    goto LABEL_19;
  }
  v4 = 0;
LABEL_19:
  objc_destroyWeak(&to);
  return v4;
}

void sub_1003BEC80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1003BECA0(uint64_t a1, unint64_t a2)
{
  void *v4;
  uint64_t v5;
  id *v6;
  id WeakRetained;
  unsigned int v8;
  unint64_t v9;
  id v10;
  id v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[_UIBackgroundViewConfiguration defaultPlainListCellConfigurationForState:](_UIBackgroundViewConfiguration, "defaultPlainListCellConfigurationForState:", a2));
  v5 = a2 & 9;
  v6 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained(v6);
  v8 = objc_msgSend(WeakRetained, "conformsToProtocol:", &OBJC_PROTOCOL___TransitDirectionsCell);

  if (v8)
  {
    v9 = a2 & 4;
    v10 = objc_loadWeakRetained(v6);
    v11 = objc_msgSend(v10, "navigationState");
    v12 = v9 >> 2;
    if (v11 == (id)4)
      LODWORD(v12) = 1;
    LODWORD(v13) = v12 != 0;

    if (v5)
      goto LABEL_9;
  }
  else
  {
    v13 = (a2 >> 2) & 1;
    if ((a2 & 9) != 0)
    {
LABEL_9:
      objc_msgSend(v4, "setBackgroundColorMode:", 9);
      return v4;
    }
  }
  if ((_DWORD)v13)
    goto LABEL_9;
  objc_msgSend(v4, "setBackgroundColorMode:", 0);
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor clearColor](UIColor, "clearColor"));
  objc_msgSend(v4, "setBackgroundColor:", v14);

  return v4;
}

id sub_1003BF910()
{
  if (qword_1014D2358 != -1)
    dispatch_once(&qword_1014D2358, &stru_1011B4340);
  return (id)qword_1014D2350;
}

void sub_1003C11A0(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  uint8_t v7[16];

  v2 = sub_1003BF910();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Collecting UIViewController descriptions attachments", v7, 2u);
  }

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIViewController _allDescriptions](UIViewController, "_allDescriptions"));
  v5 = *(void **)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[MapsRadarTextAttachment attachmentWithFileName:text:](MapsRadarTextAttachment, "attachmentWithFileName:text:", CFSTR("UIViewController._allDescriptions.txt"), v4));
  objc_msgSend(v5, "addObject:", v6);

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1003C1264(uint64_t a1)
{
  id v2;
  NSObject *v3;
  unsigned int v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  NSObject *v18;
  id v19;
  NSObject *v20;
  void *v21;
  id v22;
  char *v23;
  id v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  id v29;
  id v30;
  id v31;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  void *v39;
  _BYTE v40[128];

  v2 = sub_1003BF910();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Collecting tile state attachments", buf, 2u);
  }

  v30 = 0;
  v31 = 0;
  v29 = 0;
  v4 = +[MapsRadarAttachmentProviderTask getCurrentTileStateSnapshotWithDirectoryURL:debugTreeURLs:mapsActivityDataPath:error:](MapsRadarAttachmentProviderTask, "getCurrentTileStateSnapshotWithDirectoryURL:debugTreeURLs:mapsActivityDataPath:error:", 0, &v31, &v30, &v29);
  v5 = v31;
  v6 = v30;
  v7 = v29;
  v8 = v7;
  if (v4)
  {
    v24 = v7;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v9 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v25, v40, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v26;
      do
      {
        for (i = 0; i != v10; i = (char *)i + 1)
        {
          if (*(_QWORD *)v26 != v11)
            objc_enumerationMutation(v5);
          v13 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)i);
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "lastPathComponent"));
          v15 = (void *)objc_claimAutoreleasedReturnValue(+[MapsRadarFileAttachment attachmentWithFileName:fileURL:](MapsRadarFileAttachment, "attachmentWithFileName:fileURL:", v14, v13));

          objc_msgSend(v15, "setDeleteOnAttach:", 1);
          objc_msgSend(*(id *)(a1 + 32), "addObject:", v15);

        }
        v10 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v25, v40, 16);
      }
      while (v10);
    }
    v8 = v24;
    if (v6)
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "lastPathComponent"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", v6));
      v18 = objc_claimAutoreleasedReturnValue(+[MapsRadarFileAttachment attachmentWithFileName:fileURL:](MapsRadarFileAttachment, "attachmentWithFileName:fileURL:", v16, v17));

      -[NSObject setDeleteOnAttach:](v18, "setDeleteOnAttach:", 1);
      objc_msgSend(*(id *)(a1 + 32), "addObject:", v18);
LABEL_18:

    }
  }
  else
  {
    v19 = sub_1004318FC();
    v20 = objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@"), v8));
      *(_DWORD *)buf = 136315906;
      v33 = "-[MapsRadarAttachmentProviderTask generateAttachmentsForRadarDraft:withCompletion:]_block_invoke";
      v34 = 2080;
      v35 = "MapsRadarAttachmentProviderTask.m";
      v36 = 1024;
      v37 = 257;
      v38 = 2112;
      v39 = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "%s [%s:%d] Assertion reached unexpectedly! '%@'", buf, 0x26u);

    }
    if (sub_100A70734())
    {
      v22 = sub_1004318FC();
      v18 = objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        v23 = (char *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
        *(_DWORD *)buf = 138412290;
        v33 = v23;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);

      }
      goto LABEL_18;
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void sub_1003C15D8(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  NSObject *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  _QWORD block[4];
  id v25;
  id v26;
  id v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  id v32;
  uint8_t v33[128];
  uint8_t buf[4];
  id v35;

  v2 = sub_1003BF910();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Collecting MSg attachments", buf, 2u);
  }

  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v4 = objc_claimAutoreleasedReturnValue(+[GEOFilePaths pathFor:](GEOFilePaths, "pathFor:", 22));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v32 = 0;
  v23 = (void *)v4;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "contentsOfDirectoryAtPath:error:", v4, &v32));
  v7 = v32;

  if (v7)
  {
    v8 = sub_1003BF910();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v35 = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Could not fetch contents of Maps Suggestions Cache directory %@", buf, 0xCu);
    }
  }
  else
  {
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v9 = v6;
    v10 = -[NSObject countByEnumeratingWithState:objects:count:](v9, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
    if (v10)
    {
      v11 = v10;
      v19 = v6;
      v20 = 0;
      v21 = a1;
      v12 = *(_QWORD *)v29;
      do
      {
        for (i = 0; i != v11; i = (char *)i + 1)
        {
          if (*(_QWORD *)v29 != v12)
            objc_enumerationMutation(v9);
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "stringByAppendingPathComponent:", *(_QWORD *)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)i), v19, v20, v21));
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "lastPathComponent"));
          v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", v14));
          v17 = (void *)objc_claimAutoreleasedReturnValue(+[MapsRadarFileAttachment attachmentWithFileName:fileURL:](MapsRadarFileAttachment, "attachmentWithFileName:fileURL:", v15, v16));
          objc_msgSend(v22, "addObject:", v17);

        }
        v11 = -[NSObject countByEnumeratingWithState:objects:count:](v9, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
      }
      while (v11);
      v7 = v20;
      a1 = v21;
      v6 = v19;
    }
  }

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003C18DC;
  block[3] = &unk_1011AD238;
  v25 = *(id *)(a1 + 32);
  v26 = v22;
  v27 = *(id *)(a1 + 40);
  v18 = v22;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_1003C18DC(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "addObjectsFromArray:", *(_QWORD *)(a1 + 40));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_1003C1908(uint64_t a1)
{
  id v1;
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  void *i;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  _QWORD block[4];
  id v28;
  id v29;
  id v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint8_t buf[16];
  _QWORD v36[6];
  _BYTE v37[128];

  v1 = sub_1003BF910();
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Collecting MSP attachments", buf, 2u);
  }

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[MSPMapsPaths pathsAtLocation:](MSPMapsPaths, "pathsAtLocation:", 0));
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "geoBookmarksSettingsPath"));
  v36[0] = v24;
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[MSPMapsPaths pathsAtLocation:](MSPMapsPaths, "pathsAtLocation:", 0));
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "failedGeoSearchesSettingsPath"));
  v36[1] = v22;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MSPMapsPaths pathsAtLocation:](MSPMapsPaths, "pathsAtLocation:", 0));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "failedGeoDirectionsSettingsPath"));
  v36[2] = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[MSPMapsPaths pathsAtLocation:](MSPMapsPaths, "pathsAtLocation:", 0));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "directionsCachePath"));
  v36[3] = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[MSPMapsPaths pathsAtLocation:](MSPMapsPaths, "pathsAtLocation:", 0));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "pinsSettingsPath"));
  v36[4] = v9;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[MSPMapsPaths pathsAtLocation:](MSPMapsPaths, "pathsAtLocation:", 0));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "geoHistorySettingsPath"));
  v36[5] = v11;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v36, 6));

  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v31, v37, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v32;
    do
    {
      for (i = 0; i != v14; i = (char *)i + 1)
      {
        if (*(_QWORD *)v32 != v15)
          objc_enumerationMutation(v12);
        v17 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)i);
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "lastPathComponent"));
        v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", v17));
        v20 = (void *)objc_claimAutoreleasedReturnValue(+[MapsRadarFileAttachment attachmentWithFileName:fileURL:](MapsRadarFileAttachment, "attachmentWithFileName:fileURL:", v18, v19));
        objc_msgSend(v3, "addObject:", v20);

      }
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v31, v37, 16);
    }
    while (v14);
  }

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003C1C64;
  block[3] = &unk_1011AD238;
  v28 = *(id *)(a1 + 32);
  v29 = v3;
  v30 = *(id *)(a1 + 40);
  v21 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_1003C1C64(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "addObjectsFromArray:", *(_QWORD *)(a1 + 40));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_1003C1C90(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  _QWORD block[4];
  id v15;
  id v16;
  id v17;
  uint8_t buf[16];

  v2 = sub_1003BF910();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Collecting user defaults attachments", buf, 2u);
  }

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "dictionaryRepresentation"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "description"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[MapsRadarTextAttachment attachmentWithFileName:text:](MapsRadarTextAttachment, "attachmentWithFileName:text:", CFSTR("NSUserDefaults.standardUserDefaults.txt"), v7));

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults __maps_groupUserDefaults](NSUserDefaults, "__maps_groupUserDefaults"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "dictionaryRepresentation"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "description"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[MapsRadarTextAttachment attachmentWithFileName:text:](MapsRadarTextAttachment, "attachmentWithFileName:text:", CFSTR("NSUserDefaults.__maps_groupUserDefaults.txt"), v11));

  objc_msgSend(v4, "addObject:", v8);
  objc_msgSend(v4, "addObject:", v12);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003C1E6C;
  block[3] = &unk_1011AD238;
  v15 = *(id *)(a1 + 32);
  v16 = v4;
  v17 = *(id *)(a1 + 40);
  v13 = v4;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_1003C1E6C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "addObjectsFromArray:", *(_QWORD *)(a1 + 40));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_1003C1E98(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  uint8_t v10[16];

  v2 = sub_1003BF910();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Collecting view hierarchy attachments", v10, 2u);
  }

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "connectedScenes"));
  v6 = sub_10039DE48(v5, &stru_1011B4270);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

  v8 = sub_10039DCD4(v7, &stru_1011B42D8);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  objc_msgSend(*(id *)(a1 + 32), "addObjectsFromArray:", v9);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

id sub_1003C1F78(id a1, UIScene *a2, unint64_t a3)
{
  UIScene *v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  void *v12;
  NSObject *v13;
  id v14;
  void *v15;
  id v16;
  void *v18;
  uint64_t v19;
  char isKindOfClass;
  id v21;
  void *v22;
  _QWORD v23[4];
  NSObject *v24;
  uint8_t buf[4];
  UIScene *v26;
  __int16 v27;
  void *v28;

  v3 = a2;
  v4 = objc_opt_class(UIWindowScene);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    v5 = v3;
    v6 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject delegate](v5, "delegate"));
    v7 = objc_opt_class(MapsSceneDelegate);
    if ((objc_opt_isKindOfClass(v6, v7) & 1) == 0)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject delegate](v5, "delegate"));
      v9 = objc_opt_class(LockScreenSceneDelegate);
      if ((objc_opt_isKindOfClass(v8, v9) & 1) == 0)
      {
        v18 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject delegate](v5, "delegate"));
        v19 = objc_opt_class(CarSceneDelegate);
        isKindOfClass = objc_opt_isKindOfClass(v18, v19);

        if ((isKindOfClass & 1) == 0)
        {
          v21 = sub_1003BF910();
          v13 = objc_claimAutoreleasedReturnValue(v21);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            v22 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject delegate](v5, "delegate"));
            *(_DWORD *)buf = 138412546;
            v26 = (UIScene *)v5;
            v27 = 2112;
            v28 = v22;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Skipping window scene because the delegate is not one of ours: %@:%@", buf, 0x16u);

          }
          v15 = 0;
          goto LABEL_9;
        }
LABEL_6:
        v10 = sub_1003BF910();
        v11 = objc_claimAutoreleasedReturnValue(v10);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          v12 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject windows](v5, "windows"));
          *(_DWORD *)buf = 138412546;
          v26 = (UIScene *)v5;
          v27 = 2112;
          v28 = v12;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Processing window scene's windows: %@:%@", buf, 0x16u);

        }
        v13 = objc_claimAutoreleasedReturnValue(-[NSObject windows](v5, "windows"));
        v23[0] = _NSConcreteStackBlock;
        v23[1] = 3221225472;
        v23[2] = sub_1003C2240;
        v23[3] = &unk_1011B4298;
        v24 = v5;
        v14 = sub_10039DCD4(v13, v23);
        v15 = (void *)objc_claimAutoreleasedReturnValue(v14);

LABEL_9:
        goto LABEL_13;
      }

    }
    goto LABEL_6;
  }
  v16 = sub_1003BF910();
  v5 = objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    v26 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Skipping window scene because it's not a UIWindowScene: %@", buf, 0xCu);
  }
  v15 = 0;
LABEL_13:

  return v15;
}

id sub_1003C2240(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v11;
  int v13;
  uint64_t v14;
  __int16 v15;
  id v16;

  v3 = a2;
  if (objc_msgSend(v3, "isHidden"))
  {
    v4 = sub_1003BF910();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = *(_QWORD *)(a1 + 32);
      v13 = 138412546;
      v14 = v6;
      v15 = 2112;
      v16 = v3;
      v7 = "Skipping window because it's hidden: %@:%@";
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, v7, (uint8_t *)&v13, 0x16u);
    }
  }
  else
  {
    v8 = objc_opt_class(UITextEffectsWindow);
    if ((objc_opt_isKindOfClass(v3, v8) & 1) == 0)
    {
      v11 = v3;
      goto LABEL_10;
    }
    v9 = sub_1003BF910();
    v5 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v10 = *(_QWORD *)(a1 + 32);
      v13 = 138412546;
      v14 = v10;
      v15 = 2112;
      v16 = v3;
      v7 = "Skipping window because it's a text effects window: %@:%@";
      goto LABEL_7;
    }
  }

  v11 = 0;
LABEL_10:

  return v11;
}

id sub_1003C2388(id a1, UIWindow *a2, unint64_t a3)
{
  UIWindow *v3;
  objc_class *v4;
  NSString *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v3 = a2;
  v4 = (objc_class *)objc_opt_class(v3);
  v5 = NSStringFromClass(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("recursiveDescription.%@.%p.txt"), v6, v3));
  v8 = (void *)objc_claimAutoreleasedReturnValue(-[UIWindow recursiveDescription](v3, "recursiveDescription"));

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[MapsRadarTextAttachment attachmentWithFileName:text:](MapsRadarTextAttachment, "attachmentWithFileName:text:", v7, v8));
  return v9;
}

void sub_1003C2438(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  uint8_t v10[16];

  v2 = sub_1003BF910();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Collecting scene state attachments", v10, 2u);
  }

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "connectedScenes"));
  v6 = sub_10039DCD4(v5, &stru_1011B42F8);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "componentsJoinedByString:", CFSTR("\n\n")));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[MapsRadarTextAttachment attachmentWithFileName:text:](MapsRadarTextAttachment, "attachmentWithFileName:text:", CFSTR("connectedScenes.txt"), v8));
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v9);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

id sub_1003C253C(id a1, UIScene *a2, unint64_t a3)
{
  UIScene *v3;
  void *v4;
  void *v5;
  id v6;
  unint64_t v7;
  const __CFString *v8;
  void *v9;
  void *v10;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[UIScene _FBSScene](v3, "_FBSScene"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "uiSettings"));
  v6 = objc_msgSend(v5, "deactivationReasons");

  v7 = -[UIScene activationState](v3, "activationState");
  if (v7 > 2)
    v8 = CFSTR("Unattached");
  else
    v8 = off_1011B4360[v7];
  v9 = (void *)objc_claimAutoreleasedReturnValue(-[UIScene delegate](v3, "delegate"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@\nactivationState:%@\ndeactivationReasons:%lu\ndelegate:%@"), v3, v8, v6, v9));

  return v10;
}

uint64_t sub_1003C2608(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "addAttachments:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "addScreenshots:", *(_QWORD *)(a1 + 48));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

void sub_1003C26AC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "MapsRadarAttachmentProviderTask");
  v2 = (void *)qword_1014D2350;
  qword_1014D2350 = (uint64_t)v1;

}

BOOL sub_1003C33A4(uint64_t a1, void *a2)
{
  id v3;
  double v4;
  double v5;
  _BOOL8 v6;

  v3 = a2;
  objc_msgSend(v3, "coordinate");
  if (v4 == *(double *)(a1 + 32))
  {
    objc_msgSend(v3, "coordinate");
    v6 = v5 == *(double *)(a1 + 40);
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_1003C347C(id a1)
{
  byte_1014A87F0 = GEOConfigGetBOOL(MapsConfig_ClientMapRegionCorrectionForLabels, off_1014B3038);
}

void sub_1003C5140(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  SearchDotPlace *v4;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = -[SearchDotPlace initWithGEODotPlace:]([SearchDotPlace alloc], "initWithGEODotPlace:", v3);

  objc_msgSend(v2, "addObject:", v4);
}

double sub_1003C55D4(void *a1)
{
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  double v5;
  double y;
  double v7;
  double x;
  void *i;
  void *v10;
  double v11;
  double v12;
  MKMapPoint v13;
  double v14;
  double v15;
  double v16;
  double v17;
  void *v18;
  double v19;
  double v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  CLLocationCoordinate2D v27;

  v1 = a1;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v23;
    v5 = 0.0;
    y = 9.22337204e18;
    v7 = 0.0;
    x = 9.22337204e18;
    do
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(_QWORD *)v23 != v4)
          objc_enumerationMutation(v1);
        v10 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)i);
        objc_msgSend(v10, "coordinate");
        if (v12 >= -180.0 && v12 <= 180.0 && v11 >= -90.0 && v11 <= 90.0)
        {
          objc_msgSend(v10, "coordinate");
          v13 = MKMapPointForCoordinate(v27);
          if (x >= v13.x)
            x = v13.x;
          if (y >= v13.y)
            y = v13.y;
          if (v7 <= v13.x)
            v7 = v13.x;
          if (v5 <= v13.y)
            v5 = v13.y;
        }
      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
    }
    while (v3);
  }
  else
  {
    v5 = 0.0;
    y = 9.22337204e18;
    v7 = 0.0;
    x = 9.22337204e18;
  }
  if (x <= v7)
    v14 = v7;
  else
    v14 = x;
  if (x >= v7)
    v15 = v7;
  else
    v15 = x;
  if (v14 - v15 <= 0.0 || (y <= v5 ? (v16 = v5) : (v16 = y), y >= v5 ? (v17 = v5) : (v17 = y), v16 - v17 <= 0.0))
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "firstObject"));
    objc_msgSend(v18, "coordinate");
    x = MKMapRectMakeWithRadialDistance(v19, v20, 100.0);

  }
  return x;
}

uint64_t sub_1003C610C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, double, double, double, double))(result + 16))(result, a2, 0, *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64));
  return result;
}

uint64_t sub_1003C6130(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, double, double, double, double))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2, 0, *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64));
}

uint64_t sub_1003C76E0()
{
  void *v0;
  void *v1;
  uint64_t BOOL;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "countryCode"));
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("CN")) & 1) != 0)
    BOOL = 1;
  else
    BOOL = GEOConfigGetBOOL(MapsConfig_RoutePlanningShowAllPossibleCyclingOptions, off_1014B3908);

  return BOOL;
}

uint64_t sub_1003C7758()
{
  void *v0;
  void *v1;
  uint64_t BOOL;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "countryCode"));
  if (objc_msgSend(v1, "isEqualToString:", CFSTR("CN")))
    BOOL = GEOConfigGetBOOL(MapsConfig_RoutePlanningShowAllPossibleCyclingOptions, off_1014B3908);
  else
    BOOL = 1;

  return BOOL;
}

id sub_1003C8144(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  id v5;
  void *v6;
  id v7;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 64) = 0;
  if (a4 && (a3 & 1) == 0)
  {
    v5 = a4;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "domain"));
    v7 = objc_msgSend(v5, "code");

    NSLog(CFSTR("Printing FAILED! due to error in domain %@ with error code %ld"), v6, v7);
  }
  return _objc_msgSend(*(id *)(a1 + 32), "_endBackgroundTask");
}

id sub_1003C88E0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_endBackgroundTask");
}

void sub_1003C90B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003C90DC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;

  v5 = a2;
  v6 = v5;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  if (!a3)
  {
    v10 = v5;
    v7 = objc_msgSend(v5, "count");
    v6 = v10;
    if (v7)
    {
      v8 = *(void **)(a1 + 32);
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "firstObject"));
      objc_msgSend(v8, "_setTitlesWithMapItem:", v9);

      v6 = v10;
    }
  }

}

RoutePlanningSessionDirectionsPlanBuilder *sub_1003C915C(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  RoutePlanningSessionDirectionsPlanBuilder *v6;
  uint64_t v7;
  uint64_t v8;
  RoutePlanningSessionDirectionsPlanBuilder *v9;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "lastObject"));
  v5 = objc_opt_class(RoutePlanningSession);
  if ((objc_opt_isKindOfClass(v4, v5) & 1) != 0)
  {
    v6 = -[RoutePlanningSessionDirectionsPlanBuilder initWithRoutePlanningSession:fidelity:]([RoutePlanningSessionDirectionsPlanBuilder alloc], "initWithRoutePlanningSession:fidelity:", v4, a2);
  }
  else
  {
    v7 = objc_opt_class(RideBookingPlanningSession);
    if ((objc_opt_isKindOfClass(v4, v7) & 1) != 0)
    {
      v6 = -[RideSharingSessionDirectionsPlanBuilder initWithRideBookingPlanningSession:]([RideSharingSessionDirectionsPlanBuilder alloc], "initWithRideBookingPlanningSession:", v4);
    }
    else
    {
      v8 = objc_opt_class(NavigationSession);
      if ((objc_opt_isKindOfClass(v4, v8) & 1) == 0)
      {
        v9 = 0;
        goto LABEL_8;
      }
      v6 = -[NavigationSessionDirectionsPlanBuilder initWithSessionStack:fidelity:]([NavigationSessionDirectionsPlanBuilder alloc], "initWithSessionStack:fidelity:", v3, a2);
    }
  }
  v9 = v6;
LABEL_8:

  return v9;
}

void sub_1003CA870(id a1, NSError *a2)
{
  NSError *v2;
  id v3;
  NSObject *v4;
  int v5;
  NSError *v6;

  v2 = a2;
  if (v2)
  {
    v3 = sub_10043299C();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Error saving new RAP to Sync with error %@", (uint8_t *)&v5, 0xCu);
    }

  }
}

void sub_1003CABCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1003CABE8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_didFinishJumpingForCapture");

}

void sub_1003CAC88(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  UIImage *v6;
  NSData *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  NSString *v12;
  void *v13;
  void *v14;
  id v15;

  objc_msgSend(*(id *)(a1 + 32), "startedTest");
  v15 = objc_alloc_init((Class)NSDateFormatter);
  objc_msgSend(v15, "setDateFormat:", CFSTR("yyyy-MM-dd-HHmmss"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSTimeZone localTimeZone](NSTimeZone, "localTimeZone"));
  objc_msgSend(v15, "setTimeZone:", v2);

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "stringFromDate:", v3));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainMKMapView"));
  v6 = (UIImage *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "snapshotImage"));
  v7 = UIImagePNGRepresentation(v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "testName"));
  if (v9)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "testName"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@-%@.png"), v10, v4));

  }
  else
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@-%@.png"), CFSTR("capture"), v4));
  }

  v12 = NSTemporaryDirectory();
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "stringByAppendingPathComponent:", v11));

  objc_msgSend(v8, "writeToFile:atomically:", v14, 1);
  NSLog(CFSTR("Capture screenshot taken: %@"), v14);
  objc_msgSend(*(id *)(a1 + 32), "finishedTest");

}

uint64_t sub_1003CB9E0(_OWORD *a1, void *a2, void *a3)
{
  __int128 v5;
  id v6;
  double v7;
  double v8;
  __int128 v9;
  double v10;
  double v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v5 = a1[3];
  v13 = a1[2];
  v14 = v5;
  v15 = a1[4];
  v6 = a3;
  objc_msgSend(a2, "transformedPoint:", &v13);
  v8 = v7;
  v9 = a1[3];
  v13 = a1[2];
  v14 = v9;
  v15 = a1[4];
  objc_msgSend(v6, "transformedPoint:", &v13);
  v11 = v10;

  if (v8 < v11)
    return -1;
  else
    return v8 > v11;
}

id sub_1003CF260(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "hairLineAlpha");
}

id sub_1003CF274(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "setHairLineAlpha:");
}

id sub_1003CFF58()
{
  if (qword_1014D2370 != -1)
    dispatch_once(&qword_1014D2370, &stru_1011B4500);
  return (id)qword_1014D2368;
}

void sub_1003D033C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFVIOSessionAppBackgroundMonitor");
  v2 = (void *)qword_1014D2368;
  qword_1014D2368 = (uint64_t)v1;

}

void sub_1003D03AC(id a1)
{
  CuratedCollectionSyncManager *v1;
  void *v2;

  v1 = objc_alloc_init(CuratedCollectionSyncManager);
  v2 = (void *)qword_1014D2378;
  qword_1014D2378 = (uint64_t)v1;

}

uint64_t sub_1003D0658(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t result;
  uint64_t v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MapsSyncStore sharedStore](_TtC8MapsSync13MapsSyncStore, "sharedStore"));
  v5 = *(_QWORD *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v5, 1));
  objc_msgSend(v2, "saveWithObjects:error:", v3, 0);

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1003D09F4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *j;
  void *v16;
  void *v17;
  id v18;
  id obj;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  _BYTE v29[128];

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)NSMutableSet), "initWithArray:", *(_QWORD *)(a1 + 32));
  v5 = objc_alloc_init((Class)NSMutableSet);
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  obj = v3;
  v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v25;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v25 != v8)
          objc_enumerationMutation(obj);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "createCantorPair:y:", objc_msgSend(*(id *)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)i), "curatedCollectionIdentifier"), objc_msgSend(*(id *)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)i), "resultProviderIdentifier")));
        objc_msgSend(v5, "addObject:", v10);

      }
      v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
    }
    while (v7);
  }

  objc_msgSend(v4, "minusSet:", v5);
  v18 = objc_alloc_init((Class)NSMutableArray);
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v11 = *(id *)(a1 + 48);
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v21;
    do
    {
      for (j = 0; j != v13; j = (char *)j + 1)
      {
        if (*(_QWORD *)v21 != v14)
          objc_enumerationMutation(v11);
        v16 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)j);
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "createCantorPair:y:", objc_msgSend(v16, "curatedCollectionIdentifier", v18), objc_msgSend(v16, "resultProviderIdentifier")));
        if (objc_msgSend(v4, "containsObject:", v17))
          objc_msgSend(v18, "addObject:", v16);

      }
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
    }
    while (v13);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

void sub_1003D0E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1003D0E6C(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  void *v5;
  id WeakRetained;

  v3 = (id *)(a1 + 48);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "firstObject"));

  if (v5)
    objc_msgSend(WeakRetained, "_updateCachedCuratedCollection:withCollection:completion:", v5, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

BOOL sub_1003D1154(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 v4;

  v3 = a2;
  v4 = objc_msgSend(v3, "curatedCollectionIdentifier") == *(id *)(a1 + 32)
    && (!objc_msgSend(v3, "resultProviderIdentifier")
     || objc_msgSend(v3, "resultProviderIdentifier") == *(_DWORD *)(a1 + 40));

  return v4;
}

BOOL sub_1003D11C4(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 v4;

  v3 = a2;
  v4 = objc_msgSend(v3, "curatedCollectionIdentifier") == *(id *)(a1 + 32)
    && (!objc_msgSend(v3, "resultProviderIdentifier")
     || objc_msgSend(v3, "resultProviderIdentifier") == *(_DWORD *)(a1 + 40));

  return v4;
}

void sub_1003D1474(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_1003D147C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

BOOL sub_1003D1928(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  _BOOL8 v6;

  v3 = a2;
  v4 = objc_msgSend(v3, "curatedCollectionIdentifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionIdentifier"));
  v6 = v4 == objc_msgSend(v5, "muid") && objc_msgSend(v3, "resultProviderIdentifier") == 0;

  return v6;
}

void sub_1003D1AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

MKMapItemIdentifier *__cdecl sub_1003D1ACC(id a1, MSCuratedCollection *a2, unint64_t a3)
{
  MSCuratedCollection *v3;
  id v4;
  id v5;
  id v6;

  v3 = a2;
  v4 = objc_alloc((Class)MKMapItemIdentifier);
  v5 = -[MSCuratedCollection curatedCollectionIdentifier](v3, "curatedCollectionIdentifier");
  v6 = -[MSCuratedCollection resultProviderIdentifier](v3, "resultProviderIdentifier");

  return (MKMapItemIdentifier *)objc_msgSend(v4, "initWithMUID:resultProviderID:coordinate:", v5, v6, MKCoordinateInvalid[0], MKCoordinateInvalid[1]);
}

void sub_1003D1B40(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id *v7;
  id WeakRetained;
  _QWORD v9[4];
  id v10;

  v5 = a2;
  v6 = a3;
  if (!v6 && objc_msgSend(v5, "count"))
  {
    v7 = (id *)(a1 + 32);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1003D1C20;
    v9[3] = &unk_1011AD260;
    objc_copyWeak(&v10, v7);
    objc_msgSend(WeakRetained, "_addCachedCuratedCollections:completion:", v5, v9);

    objc_destroyWeak(&v10);
  }

}

void sub_1003D1C0C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1003D1C20(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  id v3;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setIsPopulatingCachedCollections:", 0);

  v3 = objc_loadWeakRetained(v1);
  objc_msgSend(v3, "_updateContent");

}

void sub_1003D1D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1003D1D28(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  unsigned __int8 v8;
  void *v9;
  id v10;

  v10 = a2;
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cachedCuratedCollections"));
  v8 = objc_msgSend(v7, "isEqualToArray:", v10);

  if ((v8 & 1) == 0)
  {
    objc_msgSend(WeakRetained, "setCachedCuratedCollections:", v10);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "observers"));
    objc_msgSend(v9, "curatedCollectionSyncManagerDidUpdateCachedCollections:", WeakRetained);

  }
  if (objc_msgSend(v5, "count"))
    objc_msgSend(WeakRetained, "_cacheSyncedCollections:", v5);

}

void sub_1003D1E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1003D1EB8(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  _QWORD *WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  v4 = objc_msgSend(v3, "copy");
  v5 = (void *)WeakRetained[5];
  WeakRetained[5] = v4;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "observers"));
  objc_msgSend(v6, "curatedCollectionSyncManagerDidUpdateSyncedCollections:", WeakRetained);

  objc_msgSend(WeakRetained, "_updateContent");
  v7 = objc_msgSend(v3, "count");

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[GEOAPSharedStateData sharedData](GEOAPSharedStateData, "sharedData"));
  objc_msgSend(v8, "setMapFeatureSavedCollectionsCount:", v7);

}

void sub_1003D2504(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  unsigned __int8 v5;
  id v6;
  void *v7;
  unsigned __int8 v8;
  id v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  void *v12;
  unsigned __int8 v13;
  uint64_t v14;
  void (*v15)(void);
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;

  objc_msgSend(*(id *)(a1 + 32), "garbageCollectIfNeeded");
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_itemURLForIdentifier:", *(_QWORD *)(a1 + 40)));
  if (!v2)
  {
    v16 = *(_QWORD *)(a1 + 56);
    if (v16)
      (*(void (**)(uint64_t, _QWORD))(v16 + 16))(v16, 0);
    v6 = 0;
    goto LABEL_20;
  }
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v25 = 0;
  v5 = objc_msgSend(v3, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v4, 1, 0, &v25);
  v6 = v25;

  if ((v5 & 1) == 0)
    goto LABEL_13;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSData data](NSData, "data"));
  v24 = v6;
  v8 = objc_msgSend(v7, "writeToURL:options:error:", v2, 0, &v24);
  v9 = v24;

  if ((v8 & 1) == 0)
    goto LABEL_17;
  v23 = v9;
  v10 = objc_msgSend(v2, "setResourceValue:forKey:error:", &__kCFBooleanTrue, NSURLIsExcludedFromBackupKey, &v23);
  v6 = v23;

  if ((v10 & 1) != 0)
  {
    v22 = v6;
    v11 = objc_msgSend(v2, "setResourceValue:forKey:error:", NSURLFileProtectionCompleteUnlessOpen, NSURLFileProtectionKey, &v22);
    v9 = v22;

    if ((v11 & 1) != 0)
    {
      v12 = *(void **)(a1 + 48);
      v21 = v9;
      v13 = objc_msgSend(v12, "writeToURL:options:error:", v2, 0, &v21);
      v6 = v21;

      if ((v13 & 1) != 0)
      {
        v14 = *(_QWORD *)(a1 + 56);
        if (v14)
        {
          v15 = *(void (**)(void))(v14 + 16);
LABEL_15:
          v15();
          goto LABEL_20;
        }
        goto LABEL_20;
      }
      goto LABEL_12;
    }
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
    objc_msgSend(v19, "removeItemAtURL:error:", v2, 0);

LABEL_17:
    v20 = *(_QWORD *)(a1 + 56);
    if (v20)
      (*(void (**)(uint64_t, id))(v20 + 16))(v20, v9);
    v6 = v9;
    goto LABEL_20;
  }
LABEL_12:
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  objc_msgSend(v17, "removeItemAtURL:error:", v2, 0);

LABEL_13:
  v18 = *(_QWORD *)(a1 + 56);
  if (v18)
  {
    v15 = *(void (**)(void))(v18 + 16);
    goto LABEL_15;
  }
LABEL_20:

}

uint64_t sub_1003D28C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1003D2B58(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((*(unsigned int (**)(void))(*(_QWORD *)(a1 + 40) + 16))())
    objc_msgSend(*(id *)(a1 + 32), "removeItemWithIdentifier:error:", v3, 0);

}

BOOL sub_1003D2BD8(id a1, NSUUID *a2)
{
  return 1;
}

void sub_1003D2E04(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  id v8;

  v5 = a2;
  v8 = 0;
  if (objc_msgSend(a3, "getResourceValue:forKey:error:", &v8, NSURLCreationDateKey, 0))
  {
    v6 = *(void **)(a1 + 32);
    v7 = v8;
    objc_msgSend(v6, "addObject:", v5);
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v7, v5);

  }
}

id sub_1003D2E94(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", a2));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v6));

  v9 = objc_msgSend(v7, "compare:", v8);
  return v9;
}

id sub_1003D2F10(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", a2);
}

void sub_1003D2FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1003D2FC8(uint64_t result, uint64_t a2, _BYTE *a3)
{
  *a3 = 1;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

id sub_1003D3498()
{
  if (qword_1014D23A0 != -1)
    dispatch_once(&qword_1014D23A0, &stru_1011B4748);
  return (id)qword_1014D2398;
}

void sub_1003D3614(uint64_t a1)
{
  BOOL v2;
  id v3;
  NSObject *v4;
  _BOOL4 v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v2 = sub_1008315F4();
  v3 = sub_1003D3498();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 32);
      v9 = 134349056;
      v10 = v6;
      v7 = "[%{public}p] Pedestrian AR is supported";
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v9, 0xCu);
    }
  }
  else if (v5)
  {
    v8 = *(_QWORD *)(a1 + 32);
    v9 = 134349056;
    v10 = v8;
    v7 = "[%{public}p] The current hardware does not support Pedestrian AR";
    goto LABEL_6;
  }

  byte_1014D2388 = v2;
}

void sub_1003D389C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "PedestrianARSessionTask");
  v2 = (void *)qword_1014D2398;
  qword_1014D2398 = (uint64_t)v1;

}

void sub_1003D41E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1003D4204(uint64_t a1, void *a2, uint64_t a3)
{
  id WeakRetained;
  void *v6;
  uint64_t v7;
  void (*v8)(void);
  uint64_t v9;
  id v10;

  v10 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v6 = WeakRetained;
  if (WeakRetained)
  {
    if (a3 == 1)
    {
      v9 = *((_QWORD *)WeakRetained + 3);
      if (v9)
      {
        v8 = *(void (**)(void))(v9 + 16);
        goto LABEL_8;
      }
    }
    else if (!a3)
    {
      v7 = *((_QWORD *)WeakRetained + 3);
      if (v7)
      {
        v8 = *(void (**)(void))(v7 + 16);
LABEL_8:
        v8();
      }
    }
  }

}

uint64_t sub_1003D4C94(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "fieldType"));
  v4 = objc_msgSend(v2, "containsObject:", v3) ^ 1;

  return v4;
}

UIColor *__cdecl sub_1003D6390(id a1, MapsTheme *a2)
{
  return -[MapsTheme keyColor](a2, "keyColor");
}

void sub_1003D937C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1003D93D4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1003D93E4(uint64_t a1)
{

}

void sub_1003D93EC(_QWORD *a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v3 = a1[4];
  v4 = (void *)a1[5];
  v5 = a2;
  v6 = objc_claimAutoreleasedReturnValue(+[PlaceSummaryViewModelTemplateFactory viewModelWithHistoryEntrySearch:highlightConfiguration:searchAlongRoute:](_TtC4Maps36PlaceSummaryViewModelTemplateFactory, "viewModelWithHistoryEntrySearch:highlightConfiguration:searchAlongRoute:", v5, v3, objc_msgSend(v4, "searchAlongRoute")));

  v7 = *(_QWORD *)(a1[6] + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

}

void sub_1003D9464(uint64_t a1, void *a2)
{
  double v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;

  v3 = *(double *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  v6 = a2;
  v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "currentLocation"));
  v7 = objc_claimAutoreleasedReturnValue(+[PlaceSummaryViewModelTemplateFactory viewModelWithHistoryEntryPlaceDisplay:highlightConfiguration:availableWidth:currentLocation:searchAlongRoute:](_TtC4Maps36PlaceSummaryViewModelTemplateFactory, "viewModelWithHistoryEntryPlaceDisplay:highlightConfiguration:availableWidth:currentLocation:searchAlongRoute:", v6, v4, v10, objc_msgSend(*(id *)(a1 + 40), "searchAlongRoute"), v3));

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

}

uint64_t sub_1003DC588(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  v3 = a2;
  v4 = objc_opt_class(PersonalizedCompoundItem);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "autocompleteObject"));

    v3 = (id)v5;
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v7 = objc_msgSend(v6, "searchDataSource:shouldFilterItem:", *(_QWORD *)(a1 + 32), v3) ^ 1;

  return v7;
}

id sub_1003DDA94()
{
  id v0;
  void *v1;
  void *v2;
  unsigned int v3;
  id v4;

  v0 = objc_alloc_init((Class)ACAccountStore);
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "aa_primaryAppleAccount"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "aa_primaryEmail"));
  if (objc_msgSend(v2, "length"))
  {
    v3 = objc_msgSend(v1, "aa_isPrimaryEmailVerified");

    if (!v3)
    {
      v4 = 0;
      goto LABEL_7;
    }
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "aa_primaryEmail"));
    v4 = objc_msgSend(v2, "copy");
  }
  else
  {
    v4 = 0;
  }

LABEL_7:
  return v4;
}

id sub_1003DDB30()
{
  void *v0;
  void *v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "localizedStringForKey:value:table:", CFSTR("Reports may include location and contact information."), CFSTR("localized string not found"), 0));

  return v1;
}

uint64_t sub_1003DDB84()
{
  void *v0;
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id BOOL;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD v21[10];
  _QWORD v22[10];

  v1 = MapsConfig_ReportAProblemIsDisabled;
  v0 = off_1014B3138;
  if (_GEOConfigHasValue(MapsConfig_ReportAProblemIsDisabled, off_1014B3138))
    return GEOConfigGetBOOL(v1, v0);
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeCredentials));
  v21[0] = v20;
  v22[0] = &off_101274520;
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeLocations));
  v21[1] = v19;
  v22[1] = &off_101274548;
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizePhotos));
  v21[2] = v18;
  v22[2] = &off_101274570;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeScreenshots));
  v21[3] = v3;
  v22[3] = &off_101274598;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirections));
  v21[4] = v4;
  v22[4] = &off_1012745C0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirectionRequests));
  v21[5] = v5;
  v22[5] = &off_1012745E8;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirectionResponses));
  v21[6] = v6;
  v22[6] = &off_101274610;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeTransit));
  v21[7] = v7;
  v22[7] = &off_101274638;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizePersonalizedLocations));
  v21[8] = v8;
  v22[8] = &off_101274660;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_RAPShouldFailSilentlyOnInvalidRequests));
  v21[9] = v9;
  v22[9] = &off_101274688;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v22, v21, 10));

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v11));

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "countryCode"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", v14));

  if (v15)
    BOOL = objc_msgSend(v15, "BOOLValue");
  else
    BOOL = (id)GEOConfigGetBOOL(v1, v0);
  v17 = BOOL;

  return (uint64_t)v17;
}

uint64_t sub_1003DDEF4(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  _OWORD v5[24];

  v2 = 0;
  v5[0] = *(_OWORD *)&MapsConfig_ReportAProblemIsDisabled;
  v5[1] = *(_OWORD *)&MapsConfig_ReportAProblemInvalidEmailIsVisible;
  v5[2] = *(_OWORD *)&MapsConfig_ReportAProblemSettingsSearchIsVisible;
  v5[3] = *(_OWORD *)&MapsConfig_ReportAProblemDirectionsETAIsVisible;
  v5[4] = *(_OWORD *)&MapsConfig_ReportAProblemRoutePlanningFlowIsVisible;
  v5[5] = MapsConfig_ReportAProblemApplePayIsVisible;
  v5[6] = MapsConfig_ReportAProblemRequirePhotosWhenNearby;
  v5[7] = MapsConfig_ReportAProblemAddStreetFlowIsVisible;
  v5[8] = *(_OWORD *)&MapsConfig_ReportAProblemAddAPlaceStartsWithPrivacy;
  v5[9] = *(_OWORD *)&MapsConfig_ReportAProblemStartsWithPrivacy;
  v5[10] = *(_OWORD *)&MapsConfig_ReportAProblemShouldIncludeHistoricLocationsInDirectionsRequest;
  v5[11] = *(_OWORD *)&MapsConfig_ReportAProblemShouldAnonymizeCredentials;
  v5[12] = *(_OWORD *)&MapsConfig_ReportAProblemShouldAnonymizeLocations;
  v5[13] = *(_OWORD *)&MapsConfig_ReportAProblemShouldAnonymizePhotos;
  v5[14] = *(_OWORD *)&MapsConfig_ReportAProblemShouldAnonymizeScreenshots;
  v5[15] = *(_OWORD *)&MapsConfig_ReportAProblemShouldAnonymizeDirections;
  v5[16] = *(_OWORD *)&MapsConfig_ReportAProblemShouldAnonymizeDirectionRequests;
  v5[17] = *(_OWORD *)&MapsConfig_ReportAProblemShouldAnonymizeDirectionResponses;
  v5[18] = *(_OWORD *)&MapsConfig_ReportAProblemShouldAnonymizeTransit;
  v5[19] = *(_OWORD *)&MapsConfig_ReportAProblemShouldAnonymizePersonalizedLocations;
  v5[20] = MapsConfig_ReportAProblemAddressEditIsProhibited;
  v5[21] = *(_OWORD *)&MapsConfig_RAPShouldFailSilentlyOnInvalidRequests;
  v5[22] = *(_OWORD *)&MapsConfig_RAPEnableAfterNavFeedbackFlow;
  v5[23] = *(_OWORD *)&MapsConfig_ShowRAPFeedbackPortalInternalUI;
  do
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a1 + 16))(a1, *(_QWORD *)&v5[v2], *((_QWORD *)&v5[v2] + 1));
    if (!(_DWORD)result)
      break;
  }
  while (v2++ != 23);
  return result;
}

BOOL sub_1003DE0CC(void *a1)
{
  id v1;
  uint64_t String;
  void *v3;
  _BOOL8 v4;

  v1 = a1;
  if (v1)
  {
    String = GEOConfigGetString(MapsConfig_ReportAProblemInvalidEmailSuffix, off_1014B3148);
    v3 = (void *)objc_claimAutoreleasedReturnValue(String);
    v4 = !objc_msgSend(v3, "length") || (objc_msgSend(v1, "hasSuffix:", v3) & 1) == 0;

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

uint64_t sub_1003DE148()
{
  void *v0;
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id BOOL;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD v21[10];
  _QWORD v22[10];

  v1 = MapsConfig_ReportAProblemInvalidEmailIsVisible;
  v0 = off_1014B31C8;
  if (_GEOConfigHasValue(MapsConfig_ReportAProblemInvalidEmailIsVisible, off_1014B31C8))
    return GEOConfigGetBOOL(v1, v0);
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeCredentials));
  v21[0] = v20;
  v22[0] = &off_101274520;
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeLocations));
  v21[1] = v19;
  v22[1] = &off_101274548;
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizePhotos));
  v21[2] = v18;
  v22[2] = &off_101274570;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeScreenshots));
  v21[3] = v3;
  v22[3] = &off_101274598;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirections));
  v21[4] = v4;
  v22[4] = &off_1012745C0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirectionRequests));
  v21[5] = v5;
  v22[5] = &off_1012745E8;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirectionResponses));
  v21[6] = v6;
  v22[6] = &off_101274610;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeTransit));
  v21[7] = v7;
  v22[7] = &off_101274638;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizePersonalizedLocations));
  v21[8] = v8;
  v22[8] = &off_101274660;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_RAPShouldFailSilentlyOnInvalidRequests));
  v21[9] = v9;
  v22[9] = &off_101274688;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v22, v21, 10));

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v11));

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "countryCode"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", v14));

  if (v15)
    BOOL = objc_msgSend(v15, "BOOLValue");
  else
    BOOL = (id)GEOConfigGetBOOL(v1, v0);
  v17 = BOOL;

  return (uint64_t)v17;
}

uint64_t sub_1003DE4B8(uint64_t a1)
{
  id v1;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id BOOL;
  void *v19;
  void *v20;
  void *v21;
  _QWORD v22[10];
  _QWORD v23[10];

  if (!_MKRAPIsAvailable(a1) || (sub_1003DDB84() & 1) != 0)
    return 0;
  v4 = MapsConfig_ReportAProblemSettingsSearchIsVisible;
  v3 = off_1014B3158;
  if (!_GEOConfigHasValue(MapsConfig_ReportAProblemSettingsSearchIsVisible, off_1014B3158))
  {
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeCredentials));
    v22[0] = v21;
    v23[0] = &off_101274520;
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeLocations));
    v22[1] = v20;
    v23[1] = &off_101274548;
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizePhotos));
    v22[2] = v19;
    v23[2] = &off_101274570;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeScreenshots));
    v22[3] = v5;
    v23[3] = &off_101274598;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirections));
    v22[4] = v6;
    v23[4] = &off_1012745C0;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirectionRequests));
    v22[5] = v7;
    v23[5] = &off_1012745E8;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirectionResponses));
    v22[6] = v8;
    v23[6] = &off_101274610;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeTransit));
    v22[7] = v9;
    v23[7] = &off_101274638;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizePersonalizedLocations));
    v22[8] = v10;
    v23[8] = &off_101274660;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_RAPShouldFailSilentlyOnInvalidRequests));
    v22[9] = v11;
    v23[9] = &off_101274688;
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v23, v22, 10));

    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v4));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", v13));

    v15 = (void *)objc_claimAutoreleasedReturnValue(+[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "countryCode"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKey:", v16));

    if (v17)
      BOOL = objc_msgSend(v17, "BOOLValue");
    else
      BOOL = (id)GEOConfigGetBOOL(v4, v3);
    v1 = BOOL;

    return (uint64_t)v1;
  }
  return GEOConfigGetBOOL(v4, v3);
}

uint64_t sub_1003DE840(uint64_t a1)
{
  id v1;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id BOOL;
  void *v19;
  void *v20;
  void *v21;
  _QWORD v22[10];
  _QWORD v23[10];

  if (!_MKRAPIsAvailable(a1) || (sub_1003DDB84() & 1) != 0)
    return 0;
  v4 = MapsConfig_ReportAProblemDirectionsETAIsVisible;
  v3 = off_1014B3168;
  if (!_GEOConfigHasValue(MapsConfig_ReportAProblemDirectionsETAIsVisible, off_1014B3168))
  {
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeCredentials));
    v22[0] = v21;
    v23[0] = &off_101274520;
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeLocations));
    v22[1] = v20;
    v23[1] = &off_101274548;
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizePhotos));
    v22[2] = v19;
    v23[2] = &off_101274570;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeScreenshots));
    v22[3] = v5;
    v23[3] = &off_101274598;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirections));
    v22[4] = v6;
    v23[4] = &off_1012745C0;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirectionRequests));
    v22[5] = v7;
    v23[5] = &off_1012745E8;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirectionResponses));
    v22[6] = v8;
    v23[6] = &off_101274610;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeTransit));
    v22[7] = v9;
    v23[7] = &off_101274638;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizePersonalizedLocations));
    v22[8] = v10;
    v23[8] = &off_101274660;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_RAPShouldFailSilentlyOnInvalidRequests));
    v22[9] = v11;
    v23[9] = &off_101274688;
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v23, v22, 10));

    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v4));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", v13));

    v15 = (void *)objc_claimAutoreleasedReturnValue(+[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "countryCode"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKey:", v16));

    if (v17)
      BOOL = objc_msgSend(v17, "BOOLValue");
    else
      BOOL = (id)GEOConfigGetBOOL(v4, v3);
    v1 = BOOL;

    return (uint64_t)v1;
  }
  return GEOConfigGetBOOL(v4, v3);
}

uint64_t sub_1003DEBC8(uint64_t a1)
{
  id v1;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id BOOL;
  void *v19;
  void *v20;
  void *v21;
  _QWORD v22[10];
  _QWORD v23[10];

  if (!_MKRAPIsAvailable(a1) || (sub_1003DDB84() & 1) != 0)
    return 0;
  v4 = MapsConfig_ReportAProblemRoutePlanningFlowIsVisible;
  v3 = off_1014B3178;
  if (!_GEOConfigHasValue(MapsConfig_ReportAProblemRoutePlanningFlowIsVisible, off_1014B3178))
  {
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeCredentials));
    v22[0] = v21;
    v23[0] = &off_101274520;
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeLocations));
    v22[1] = v20;
    v23[1] = &off_101274548;
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizePhotos));
    v22[2] = v19;
    v23[2] = &off_101274570;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeScreenshots));
    v22[3] = v5;
    v23[3] = &off_101274598;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirections));
    v22[4] = v6;
    v23[4] = &off_1012745C0;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirectionRequests));
    v22[5] = v7;
    v23[5] = &off_1012745E8;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirectionResponses));
    v22[6] = v8;
    v23[6] = &off_101274610;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeTransit));
    v22[7] = v9;
    v23[7] = &off_101274638;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizePersonalizedLocations));
    v22[8] = v10;
    v23[8] = &off_101274660;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_RAPShouldFailSilentlyOnInvalidRequests));
    v22[9] = v11;
    v23[9] = &off_101274688;
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v23, v22, 10));

    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v4));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", v13));

    v15 = (void *)objc_claimAutoreleasedReturnValue(+[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "countryCode"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKey:", v16));

    if (v17)
      BOOL = objc_msgSend(v17, "BOOLValue");
    else
      BOOL = (id)GEOConfigGetBOOL(v4, v3);
    v1 = BOOL;

    return (uint64_t)v1;
  }
  return GEOConfigGetBOOL(v4, v3);
}

uint64_t sub_1003DEF50()
{
  void *v0;
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id BOOL;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD v21[10];
  _QWORD v22[10];

  v1 = MapsConfig_ReportAProblemAddAPlaceStartsWithPrivacy;
  v0 = off_1014B31B8;
  if (_GEOConfigHasValue(MapsConfig_ReportAProblemAddAPlaceStartsWithPrivacy, off_1014B31B8))
    return GEOConfigGetBOOL(v1, v0);
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeCredentials));
  v21[0] = v20;
  v22[0] = &off_101274520;
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeLocations));
  v21[1] = v19;
  v22[1] = &off_101274548;
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizePhotos));
  v21[2] = v18;
  v22[2] = &off_101274570;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeScreenshots));
  v21[3] = v3;
  v22[3] = &off_101274598;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirections));
  v21[4] = v4;
  v22[4] = &off_1012745C0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirectionRequests));
  v21[5] = v5;
  v22[5] = &off_1012745E8;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirectionResponses));
  v21[6] = v6;
  v22[6] = &off_101274610;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeTransit));
  v21[7] = v7;
  v22[7] = &off_101274638;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizePersonalizedLocations));
  v21[8] = v8;
  v22[8] = &off_101274660;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_RAPShouldFailSilentlyOnInvalidRequests));
  v21[9] = v9;
  v22[9] = &off_101274688;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v22, v21, 10));

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v11));

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "countryCode"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", v14));

  if (v15)
    BOOL = objc_msgSend(v15, "BOOLValue");
  else
    BOOL = (id)GEOConfigGetBOOL(v1, v0);
  v17 = BOOL;

  return (uint64_t)v17;
}

uint64_t sub_1003DF2C0()
{
  void *v0;
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id BOOL;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD v21[10];
  _QWORD v22[10];

  v1 = MapsConfig_ReportAProblemStartsWithPrivacy;
  v0 = off_1014B31D8;
  if (_GEOConfigHasValue(MapsConfig_ReportAProblemStartsWithPrivacy, off_1014B31D8))
    return GEOConfigGetBOOL(v1, v0);
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeCredentials));
  v21[0] = v20;
  v22[0] = &off_101274520;
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeLocations));
  v21[1] = v19;
  v22[1] = &off_101274548;
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizePhotos));
  v21[2] = v18;
  v22[2] = &off_101274570;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeScreenshots));
  v21[3] = v3;
  v22[3] = &off_101274598;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirections));
  v21[4] = v4;
  v22[4] = &off_1012745C0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirectionRequests));
  v21[5] = v5;
  v22[5] = &off_1012745E8;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirectionResponses));
  v21[6] = v6;
  v22[6] = &off_101274610;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeTransit));
  v21[7] = v7;
  v22[7] = &off_101274638;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizePersonalizedLocations));
  v21[8] = v8;
  v22[8] = &off_101274660;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_RAPShouldFailSilentlyOnInvalidRequests));
  v21[9] = v9;
  v22[9] = &off_101274688;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v22, v21, 10));

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v11));

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "countryCode"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", v14));

  if (v15)
    BOOL = objc_msgSend(v15, "BOOLValue");
  else
    BOOL = (id)GEOConfigGetBOOL(v1, v0);
  v17 = BOOL;

  return (uint64_t)v17;
}

uint64_t sub_1003DF630()
{
  void *v0;
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id BOOL;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD v21[10];
  _QWORD v22[10];

  v1 = MapsConfig_ReportAProblemShouldIncludeHistoricLocationsInDirectionsRequest;
  v0 = off_1014B31F8;
  if (_GEOConfigHasValue(MapsConfig_ReportAProblemShouldIncludeHistoricLocationsInDirectionsRequest, off_1014B31F8))return GEOConfigGetBOOL(v1, v0);
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeCredentials));
  v21[0] = v20;
  v22[0] = &off_101274520;
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeLocations));
  v21[1] = v19;
  v22[1] = &off_101274548;
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizePhotos));
  v21[2] = v18;
  v22[2] = &off_101274570;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeScreenshots));
  v21[3] = v3;
  v22[3] = &off_101274598;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirections));
  v21[4] = v4;
  v22[4] = &off_1012745C0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirectionRequests));
  v21[5] = v5;
  v22[5] = &off_1012745E8;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirectionResponses));
  v21[6] = v6;
  v22[6] = &off_101274610;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeTransit));
  v21[7] = v7;
  v22[7] = &off_101274638;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizePersonalizedLocations));
  v21[8] = v8;
  v22[8] = &off_101274660;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_RAPShouldFailSilentlyOnInvalidRequests));
  v21[9] = v9;
  v22[9] = &off_101274688;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v22, v21, 10));

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v11));

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "countryCode"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", v14));

  if (v15)
    BOOL = objc_msgSend(v15, "BOOLValue");
  else
    BOOL = (id)GEOConfigGetBOOL(v1, v0);
  v17 = BOOL;

  return (uint64_t)v17;
}

uint64_t sub_1003DF9A0()
{
  void *v0;
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id BOOL;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD v21[10];
  _QWORD v22[10];

  v1 = MapsConfig_ReportAProblemShouldAnonymizeCredentials;
  v0 = off_1014B3208;
  if (_GEOConfigHasValue(MapsConfig_ReportAProblemShouldAnonymizeCredentials, off_1014B3208))
    return GEOConfigGetBOOL(v1, v0);
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeCredentials));
  v21[0] = v20;
  v22[0] = &off_101274520;
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeLocations));
  v21[1] = v19;
  v22[1] = &off_101274548;
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizePhotos));
  v21[2] = v18;
  v22[2] = &off_101274570;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeScreenshots));
  v21[3] = v3;
  v22[3] = &off_101274598;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirections));
  v21[4] = v4;
  v22[4] = &off_1012745C0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirectionRequests));
  v21[5] = v5;
  v22[5] = &off_1012745E8;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirectionResponses));
  v21[6] = v6;
  v22[6] = &off_101274610;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeTransit));
  v21[7] = v7;
  v22[7] = &off_101274638;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizePersonalizedLocations));
  v21[8] = v8;
  v22[8] = &off_101274660;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_RAPShouldFailSilentlyOnInvalidRequests));
  v21[9] = v9;
  v22[9] = &off_101274688;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v22, v21, 10));

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v11));

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "countryCode"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", v14));

  if (v15)
    BOOL = objc_msgSend(v15, "BOOLValue");
  else
    BOOL = (id)GEOConfigGetBOOL(v1, v0);
  v17 = BOOL;

  return (uint64_t)v17;
}

uint64_t sub_1003DFD08()
{
  void *v0;
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id BOOL;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD v21[10];
  _QWORD v22[10];

  v1 = MapsConfig_ReportAProblemShouldAnonymizeLocations;
  v0 = off_1014B3218;
  if (_GEOConfigHasValue(MapsConfig_ReportAProblemShouldAnonymizeLocations, off_1014B3218))
    return GEOConfigGetBOOL(v1, v0);
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeCredentials));
  v21[0] = v20;
  v22[0] = &off_101274520;
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeLocations));
  v21[1] = v19;
  v22[1] = &off_101274548;
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizePhotos));
  v21[2] = v18;
  v22[2] = &off_101274570;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeScreenshots));
  v21[3] = v3;
  v22[3] = &off_101274598;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirections));
  v21[4] = v4;
  v22[4] = &off_1012745C0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirectionRequests));
  v21[5] = v5;
  v22[5] = &off_1012745E8;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirectionResponses));
  v21[6] = v6;
  v22[6] = &off_101274610;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeTransit));
  v21[7] = v7;
  v22[7] = &off_101274638;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizePersonalizedLocations));
  v21[8] = v8;
  v22[8] = &off_101274660;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_RAPShouldFailSilentlyOnInvalidRequests));
  v21[9] = v9;
  v22[9] = &off_101274688;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v22, v21, 10));

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v11));

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "countryCode"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", v14));

  if (v15)
    BOOL = objc_msgSend(v15, "BOOLValue");
  else
    BOOL = (id)GEOConfigGetBOOL(v1, v0);
  v17 = BOOL;

  return (uint64_t)v17;
}

uint64_t sub_1003E0070()
{
  void *v0;
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id BOOL;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD v21[10];
  _QWORD v22[10];

  v1 = MapsConfig_ReportAProblemShouldAnonymizePhotos;
  v0 = off_1014B3228;
  if (_GEOConfigHasValue(MapsConfig_ReportAProblemShouldAnonymizePhotos, off_1014B3228))
    return GEOConfigGetBOOL(v1, v0);
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeCredentials));
  v21[0] = v20;
  v22[0] = &off_101274520;
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeLocations));
  v21[1] = v19;
  v22[1] = &off_101274548;
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizePhotos));
  v21[2] = v18;
  v22[2] = &off_101274570;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeScreenshots));
  v21[3] = v3;
  v22[3] = &off_101274598;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirections));
  v21[4] = v4;
  v22[4] = &off_1012745C0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirectionRequests));
  v21[5] = v5;
  v22[5] = &off_1012745E8;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirectionResponses));
  v21[6] = v6;
  v22[6] = &off_101274610;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeTransit));
  v21[7] = v7;
  v22[7] = &off_101274638;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizePersonalizedLocations));
  v21[8] = v8;
  v22[8] = &off_101274660;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_RAPShouldFailSilentlyOnInvalidRequests));
  v21[9] = v9;
  v22[9] = &off_101274688;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v22, v21, 10));

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v11));

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "countryCode"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", v14));

  if (v15)
    BOOL = objc_msgSend(v15, "BOOLValue");
  else
    BOOL = (id)GEOConfigGetBOOL(v1, v0);
  v17 = BOOL;

  return (uint64_t)v17;
}

uint64_t sub_1003E03D8()
{
  void *v0;
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id BOOL;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD v21[10];
  _QWORD v22[10];

  v1 = MapsConfig_ReportAProblemShouldAnonymizeScreenshots;
  v0 = off_1014B3238;
  if (_GEOConfigHasValue(MapsConfig_ReportAProblemShouldAnonymizeScreenshots, off_1014B3238))
    return GEOConfigGetBOOL(v1, v0);
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeCredentials));
  v21[0] = v20;
  v22[0] = &off_101274520;
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeLocations));
  v21[1] = v19;
  v22[1] = &off_101274548;
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizePhotos));
  v21[2] = v18;
  v22[2] = &off_101274570;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeScreenshots));
  v21[3] = v3;
  v22[3] = &off_101274598;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirections));
  v21[4] = v4;
  v22[4] = &off_1012745C0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirectionRequests));
  v21[5] = v5;
  v22[5] = &off_1012745E8;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirectionResponses));
  v21[6] = v6;
  v22[6] = &off_101274610;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeTransit));
  v21[7] = v7;
  v22[7] = &off_101274638;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizePersonalizedLocations));
  v21[8] = v8;
  v22[8] = &off_101274660;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_RAPShouldFailSilentlyOnInvalidRequests));
  v21[9] = v9;
  v22[9] = &off_101274688;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v22, v21, 10));

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v11));

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "countryCode"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", v14));

  if (v15)
    BOOL = objc_msgSend(v15, "BOOLValue");
  else
    BOOL = (id)GEOConfigGetBOOL(v1, v0);
  v17 = BOOL;

  return (uint64_t)v17;
}

uint64_t sub_1003E0740()
{
  void *v0;
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id BOOL;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD v21[10];
  _QWORD v22[10];

  v1 = MapsConfig_ReportAProblemShouldAnonymizeDirections;
  v0 = off_1014B3248;
  if (_GEOConfigHasValue(MapsConfig_ReportAProblemShouldAnonymizeDirections, off_1014B3248))
    return GEOConfigGetBOOL(v1, v0);
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeCredentials));
  v21[0] = v20;
  v22[0] = &off_101274520;
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeLocations));
  v21[1] = v19;
  v22[1] = &off_101274548;
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizePhotos));
  v21[2] = v18;
  v22[2] = &off_101274570;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeScreenshots));
  v21[3] = v3;
  v22[3] = &off_101274598;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirections));
  v21[4] = v4;
  v22[4] = &off_1012745C0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirectionRequests));
  v21[5] = v5;
  v22[5] = &off_1012745E8;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirectionResponses));
  v21[6] = v6;
  v22[6] = &off_101274610;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeTransit));
  v21[7] = v7;
  v22[7] = &off_101274638;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizePersonalizedLocations));
  v21[8] = v8;
  v22[8] = &off_101274660;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_RAPShouldFailSilentlyOnInvalidRequests));
  v21[9] = v9;
  v22[9] = &off_101274688;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v22, v21, 10));

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v11));

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "countryCode"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", v14));

  if (v15)
    BOOL = objc_msgSend(v15, "BOOLValue");
  else
    BOOL = (id)GEOConfigGetBOOL(v1, v0);
  v17 = BOOL;

  return (uint64_t)v17;
}

uint64_t sub_1003E0AA8()
{
  void *v0;
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id BOOL;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD v21[10];
  _QWORD v22[10];

  v1 = MapsConfig_ReportAProblemShouldAnonymizeDirectionRequests;
  v0 = off_1014B3258;
  if (_GEOConfigHasValue(MapsConfig_ReportAProblemShouldAnonymizeDirectionRequests, off_1014B3258))
    return GEOConfigGetBOOL(v1, v0);
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeCredentials));
  v21[0] = v20;
  v22[0] = &off_101274520;
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeLocations));
  v21[1] = v19;
  v22[1] = &off_101274548;
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizePhotos));
  v21[2] = v18;
  v22[2] = &off_101274570;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeScreenshots));
  v21[3] = v3;
  v22[3] = &off_101274598;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirections));
  v21[4] = v4;
  v22[4] = &off_1012745C0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirectionRequests));
  v21[5] = v5;
  v22[5] = &off_1012745E8;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirectionResponses));
  v21[6] = v6;
  v22[6] = &off_101274610;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeTransit));
  v21[7] = v7;
  v22[7] = &off_101274638;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizePersonalizedLocations));
  v21[8] = v8;
  v22[8] = &off_101274660;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_RAPShouldFailSilentlyOnInvalidRequests));
  v21[9] = v9;
  v22[9] = &off_101274688;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v22, v21, 10));

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v11));

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "countryCode"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", v14));

  if (v15)
    BOOL = objc_msgSend(v15, "BOOLValue");
  else
    BOOL = (id)GEOConfigGetBOOL(v1, v0);
  v17 = BOOL;

  return (uint64_t)v17;
}

uint64_t sub_1003E0E10()
{
  void *v0;
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id BOOL;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD v21[10];
  _QWORD v22[10];

  v1 = MapsConfig_ReportAProblemShouldAnonymizeDirectionResponses;
  v0 = off_1014B3268;
  if (_GEOConfigHasValue(MapsConfig_ReportAProblemShouldAnonymizeDirectionResponses, off_1014B3268))
    return GEOConfigGetBOOL(v1, v0);
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeCredentials));
  v21[0] = v20;
  v22[0] = &off_101274520;
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeLocations));
  v21[1] = v19;
  v22[1] = &off_101274548;
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizePhotos));
  v21[2] = v18;
  v22[2] = &off_101274570;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeScreenshots));
  v21[3] = v3;
  v22[3] = &off_101274598;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirections));
  v21[4] = v4;
  v22[4] = &off_1012745C0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirectionRequests));
  v21[5] = v5;
  v22[5] = &off_1012745E8;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirectionResponses));
  v21[6] = v6;
  v22[6] = &off_101274610;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeTransit));
  v21[7] = v7;
  v22[7] = &off_101274638;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizePersonalizedLocations));
  v21[8] = v8;
  v22[8] = &off_101274660;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_RAPShouldFailSilentlyOnInvalidRequests));
  v21[9] = v9;
  v22[9] = &off_101274688;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v22, v21, 10));

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v11));

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "countryCode"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", v14));

  if (v15)
    BOOL = objc_msgSend(v15, "BOOLValue");
  else
    BOOL = (id)GEOConfigGetBOOL(v1, v0);
  v17 = BOOL;

  return (uint64_t)v17;
}

uint64_t sub_1003E1178()
{
  void *v0;
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id BOOL;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD v21[10];
  _QWORD v22[10];

  v1 = MapsConfig_ReportAProblemShouldAnonymizeTransit;
  v0 = off_1014B3278;
  if (_GEOConfigHasValue(MapsConfig_ReportAProblemShouldAnonymizeTransit, off_1014B3278))
    return GEOConfigGetBOOL(v1, v0);
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeCredentials));
  v21[0] = v20;
  v22[0] = &off_101274520;
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeLocations));
  v21[1] = v19;
  v22[1] = &off_101274548;
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizePhotos));
  v21[2] = v18;
  v22[2] = &off_101274570;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeScreenshots));
  v21[3] = v3;
  v22[3] = &off_101274598;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirections));
  v21[4] = v4;
  v22[4] = &off_1012745C0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirectionRequests));
  v21[5] = v5;
  v22[5] = &off_1012745E8;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirectionResponses));
  v21[6] = v6;
  v22[6] = &off_101274610;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeTransit));
  v21[7] = v7;
  v22[7] = &off_101274638;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizePersonalizedLocations));
  v21[8] = v8;
  v22[8] = &off_101274660;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_RAPShouldFailSilentlyOnInvalidRequests));
  v21[9] = v9;
  v22[9] = &off_101274688;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v22, v21, 10));

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v11));

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "countryCode"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", v14));

  if (v15)
    BOOL = objc_msgSend(v15, "BOOLValue");
  else
    BOOL = (id)GEOConfigGetBOOL(v1, v0);
  v17 = BOOL;

  return (uint64_t)v17;
}

uint64_t sub_1003E14E0()
{
  void *v0;
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id BOOL;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD v21[10];
  _QWORD v22[10];

  v1 = MapsConfig_ReportAProblemShouldAnonymizePersonalizedLocations;
  v0 = off_1014B3288;
  if (_GEOConfigHasValue(MapsConfig_ReportAProblemShouldAnonymizePersonalizedLocations, off_1014B3288))
    return GEOConfigGetBOOL(v1, v0);
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeCredentials));
  v21[0] = v20;
  v22[0] = &off_101274520;
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeLocations));
  v21[1] = v19;
  v22[1] = &off_101274548;
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizePhotos));
  v21[2] = v18;
  v22[2] = &off_101274570;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeScreenshots));
  v21[3] = v3;
  v22[3] = &off_101274598;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirections));
  v21[4] = v4;
  v22[4] = &off_1012745C0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirectionRequests));
  v21[5] = v5;
  v22[5] = &off_1012745E8;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirectionResponses));
  v21[6] = v6;
  v22[6] = &off_101274610;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeTransit));
  v21[7] = v7;
  v22[7] = &off_101274638;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizePersonalizedLocations));
  v21[8] = v8;
  v22[8] = &off_101274660;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_RAPShouldFailSilentlyOnInvalidRequests));
  v21[9] = v9;
  v22[9] = &off_101274688;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v22, v21, 10));

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v11));

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "countryCode"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", v14));

  if (v15)
    BOOL = objc_msgSend(v15, "BOOLValue");
  else
    BOOL = (id)GEOConfigGetBOOL(v1, v0);
  v17 = BOOL;

  return (uint64_t)v17;
}

uint64_t sub_1003E1848()
{
  void *v0;
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id BOOL;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD v21[10];
  _QWORD v22[10];

  v1 = MapsConfig_RAPShouldFailSilentlyOnInvalidRequests;
  v0 = off_1014B4168;
  if (_GEOConfigHasValue(MapsConfig_RAPShouldFailSilentlyOnInvalidRequests, off_1014B4168))
    return GEOConfigGetBOOL(v1, v0);
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeCredentials));
  v21[0] = v20;
  v22[0] = &off_101274520;
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeLocations));
  v21[1] = v19;
  v22[1] = &off_101274548;
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizePhotos));
  v21[2] = v18;
  v22[2] = &off_101274570;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeScreenshots));
  v21[3] = v3;
  v22[3] = &off_101274598;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirections));
  v21[4] = v4;
  v22[4] = &off_1012745C0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirectionRequests));
  v21[5] = v5;
  v22[5] = &off_1012745E8;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirectionResponses));
  v21[6] = v6;
  v22[6] = &off_101274610;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeTransit));
  v21[7] = v7;
  v22[7] = &off_101274638;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizePersonalizedLocations));
  v21[8] = v8;
  v22[8] = &off_101274660;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_RAPShouldFailSilentlyOnInvalidRequests));
  v21[9] = v9;
  v22[9] = &off_101274688;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v22, v21, 10));

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v11));

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "countryCode"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", v14));

  if (v15)
    BOOL = objc_msgSend(v15, "BOOLValue");
  else
    BOOL = (id)GEOConfigGetBOOL(v1, v0);
  v17 = BOOL;

  return (uint64_t)v17;
}

uint64_t sub_1003E1BB0()
{
  void *v0;
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id BOOL;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD v21[10];
  _QWORD v22[10];

  v1 = MapsConfig_RAPEnableAfterNavFeedbackFlow;
  v0 = off_1014B4218;
  if (_GEOConfigHasValue(MapsConfig_RAPEnableAfterNavFeedbackFlow, off_1014B4218))
    return GEOConfigGetBOOL(v1, v0);
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeCredentials));
  v21[0] = v20;
  v22[0] = &off_101274520;
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeLocations));
  v21[1] = v19;
  v22[1] = &off_101274548;
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizePhotos));
  v21[2] = v18;
  v22[2] = &off_101274570;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeScreenshots));
  v21[3] = v3;
  v22[3] = &off_101274598;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirections));
  v21[4] = v4;
  v22[4] = &off_1012745C0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirectionRequests));
  v21[5] = v5;
  v22[5] = &off_1012745E8;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeDirectionResponses));
  v21[6] = v6;
  v22[6] = &off_101274610;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizeTransit));
  v21[7] = v7;
  v22[7] = &off_101274638;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_ReportAProblemShouldAnonymizePersonalizedLocations));
  v21[8] = v8;
  v22[8] = &off_101274660;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_RAPShouldFailSilentlyOnInvalidRequests));
  v21[9] = v9;
  v22[9] = &off_101274688;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v22, v21, 10));

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v11));

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "countryCode"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", v14));

  if (v15)
    BOOL = objc_msgSend(v15, "BOOLValue");
  else
    BOOL = (id)GEOConfigGetBOOL(v1, v0);
  v17 = BOOL;

  return (uint64_t)v17;
}

void sub_1003E31A8(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  void *v18;

  v2 = sub_100431C0C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
  {
    v4 = *(_QWORD *)(a1 + 48);
    v5 = *(_QWORD *)(a1 + 56);
    v6 = *(_QWORD *)(a1 + 64);
    v7 = *(_QWORD *)(a1 + 40);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "excludedStepIndices"));
    v9 = 134219010;
    v10 = v7;
    v11 = 2048;
    v12 = v4;
    v13 = 2048;
    v14 = v5;
    v15 = 2048;
    v16 = v6;
    v17 = 2112;
    v18 = v8;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Failed to construct a valid itemIndex (%lu) in items (%lu) for stepIndex: %lu firstUsedStepIndex: %lu excludedStepIndices: %@", (uint8_t *)&v9, 0x34u);

  }
}

void sub_1003E4138(uint64_t a1, void *a2)
{
  id v3;
  SearchResult *v4;
  SearchFieldItem *v5;
  void *v6;
  void *v7;
  void *v8;
  SearchResult *v9;

  v3 = a2;
  v4 = -[SearchResult initWithMapItem:]([SearchResult alloc], "initWithMapItem:", v3);

  v5 = objc_alloc_init(SearchFieldItem);
  -[SearchFieldItem setSearchResult:](v5, "setSearchResult:", v4);
  v9 = v4;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v9, 1));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[SearchInfo searchInfoWithResults:](SearchInfo, "searchInfoWithResults:", v6));

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "appCoordinator"));
  objc_msgSend(v8, "openSearch:andResults:", v5, v7);

}

id sub_1003E5054(uint64_t a1, void *a2)
{
  id v3;

  if (objc_msgSend(a2, "userInterfaceStyle") == (id)2)
    v3 = (id)objc_claimAutoreleasedReturnValue(+[UIColor secondarySystemGroupedBackgroundColor](UIColor, "secondarySystemGroupedBackgroundColor"));
  else
    v3 = *(id *)(a1 + 32);
  return v3;
}

void sub_1003E5EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1003E5F10(uint64_t a1, void *a2, void *a3, void *a4)
{
  id *v6;
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  void *v11;

  v6 = (id *)(a1 + 32);
  v7 = a4;
  v8 = a3;
  v9 = a2;
  WeakRetained = objc_loadWeakRetained(v6);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "tableView:indexPath:identifier:", v9, v8, v7));

  return v11;
}

id sub_1003E7040(uint64_t a1)
{
  _BYTE *v2;
  void *v3;
  int v4;
  id v5;
  NSObject *v6;
  void *v7;
  NSString *v8;
  void *v9;
  void *v10;
  id result;
  _QWORD v12[5];
  uint8_t buf[4];
  void *v14;
  NSSize v15;

  v2 = *(_BYTE **)(a1 + 32);
  if (!v2[126])
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[MapsOfflineUIHelper sharedHelper](MapsOfflineUIHelper, "sharedHelper"));
    if ((objc_msgSend(v3, "isUsingOfflineMaps") & 1) != 0)
    {
      v4 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 127);

      v2 = *(_BYTE **)(a1 + 32);
      if (v4)
        return _objc_msgSend(v2, "_applyTableViewSnapshot");
    }
    else
    {

      v2 = *(_BYTE **)(a1 + 32);
    }
  }
  result = objc_msgSend(v2, "needsToApplySnapshot");
  if ((result & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "setNeedsToApplySnapshot:", 1);
    objc_msgSend(*(id *)(a1 + 32), "setNeedsToResetKeyCommands:", 1);
    v5 = sub_10043230C();
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 152), "collectionView"));
      objc_msgSend(v7, "contentSize");
      v8 = NSStringFromSize(v15);
      v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      *(_DWORD *)buf = 138412290;
      v14 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Applying snapshot started. Content Size: %@", buf, 0xCu);

    }
    v10 = *(void **)(a1 + 32);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1003E71F8;
    v12[3] = &unk_1011AC860;
    v12[4] = v10;
    return objc_msgSend(v10, "applySnapshotWithCompletion:", v12);
  }
  return result;
}

id sub_1003E71F8(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  NSString *v5;
  void *v6;
  int v8;
  void *v9;
  NSSize v10;

  v2 = sub_10043230C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 152), "collectionView"));
    objc_msgSend(v4, "contentSize");
    v5 = NSStringFromSize(v10);
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    v8 = 138412290;
    v9 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Applying snapshot completed. Content Size: %@", (uint8_t *)&v8, 0xCu);

  }
  objc_msgSend(*(id *)(a1 + 32), "setNeedsToApplySnapshot:", 0);
  objc_msgSend(*(id *)(a1 + 32), "setNeedsToResetKeyCommands:", 0);
  return objc_msgSend(*(id *)(a1 + 32), "reorderKeyCommands");
}

id sub_1003E7B84()
{
  if (qword_1014D23B8 != -1)
    dispatch_once(&qword_1014D23B8, &stru_1011B49E0);
  return (id)qword_1014D23B0;
}

void sub_1003E8110(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v7 = a2;
  v3 = objc_opt_class(_TtC4Maps31SearchHomeUserGuidesDataFetcher);
  if ((objc_opt_isKindOfClass(v7, v3) & 1) == 0)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "dataProviders"));

    if (v4)
    {
      v5 = *(void **)(a1 + 32);
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "dataProviders"));
      objc_msgSend(v5, "addObjectsFromArray:", v6);

    }
  }

}

void sub_1003E8198(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a2;
  v6 = objc_opt_class(_TtC4Maps31SearchHomeUserGuidesDataFetcher);
  if ((objc_opt_isKindOfClass(v10, v6) & 1) != 0)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "dataProviders"));

    if (v7)
    {
      v8 = *(void **)(a1 + 32);
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "dataProviders"));
      objc_msgSend(v8, "addObjectsFromArray:", v9);

      *a4 = 1;
    }
  }

}

void sub_1003E8878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1003E8890(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1003E88A0(uint64_t a1)
{

}

void sub_1003E88A8(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v7;

  v7 = a2;
  if (objc_msgSend(v7, "type") == *(id *)(a1 + 40))
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
    *a4 = 1;
  }

}

void sub_1003E8B08(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

id sub_1003E8B2C(uint64_t a1, unint64_t a2, void *a3)
{
  id *v5;
  id WeakRetained;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  NSObject *v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  uint64_t v22;
  id v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  id v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  void *v35;
  void *v36;
  uint64_t v37;
  double v38;
  double v39;
  double v40;
  double v41;
  id v42;
  id v43;
  id v44;
  void *v45;
  id v46;
  id v47;
  void *v48;
  void *v49;
  double v50;
  double v51;
  double v52;
  double v53;
  void *v54;
  id v55;
  id v56;
  void *v57;
  void *v58;
  void *v60;
  id v61;
  id v62;
  _QWORD *v63;
  id v64;
  void *v65;
  id v66;
  id v67;
  void *v68;
  _QWORD v69[4];
  _QWORD *v70;
  id v71;
  _QWORD v72[4];
  id v73;
  _QWORD v74[4];
  id v75;
  _QWORD v76[4];
  id v77;
  id v78;
  _QWORD v79[4];
  id v80;
  id v81;
  id v82;
  id v83;
  _BYTE location[12];
  __int16 v85;
  unint64_t v86;
  __int16 v87;
  void *v88;
  __int16 v89;
  void *v90;
  __int16 v91;
  void *v92;

  v66 = a3;
  v5 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "collectionViewDiffableDataSource"));
  v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "snapshot"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "sectionIdentifiers"));
  v9 = objc_msgSend(v8, "count");

  if ((unint64_t)v9 <= a2)
  {
    v14 = sub_10043230C();
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "sectionIdentifiers"));
      v17 = objc_loadWeakRetained((id *)(a1 + 40));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "dataProviders"));
      v19 = objc_loadWeakRetained((id *)(a1 + 40));
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "layoutProviders"));
      *(_DWORD *)location = 138413314;
      *(_QWORD *)&location[4] = v16;
      v85 = 2048;
      v86 = a2;
      v87 = 2112;
      v88 = v68;
      v89 = 2112;
      v90 = v18;
      v91 = 2112;
      v92 = v20;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "The diffable data source is trying to apply a snapshot at index greater than the number of section identifiers so returning a empty layout section here. Current section identifiers: %@ And section index: %ld. The snapshot : %@, Data Providers : %@, Layout providers : %@", location, 0x34u);

    }
    v67 = objc_loadWeakRetained((id *)(a1 + 40));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v67, "_emptySection"));
  }
  else
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "sectionIdentifiers"));
    v67 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectAtIndex:", a2));

    v11 = objc_loadWeakRetained((id *)(a1 + 40));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "dataProviderWithIdentifier:", v67));

    v13 = objc_loadWeakRetained((id *)(a1 + 40));
    v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "layoutProviderForDataProvider:", v12));

    if (objc_msgSend(v12, "conformsToProtocol:", &OBJC_PROTOCOL___SearchHomeDataProviderDeletable))
    {
      objc_initWeak((id *)location, v12);
      v79[0] = _NSConcreteStackBlock;
      v79[1] = 3221225472;
      v79[2] = sub_1003E9270;
      v79[3] = &unk_1011B48A8;
      objc_copyWeak(&v82, (id *)(a1 + 40));
      v80 = v67;
      v81 = v12;
      objc_copyWeak(&v83, (id *)location);
      v63 = objc_retainBlock(v79);
      objc_destroyWeak(&v83);

      objc_destroyWeak(&v82);
      objc_destroyWeak((id *)location);
    }
    else
    {
      v63 = 0;
    }
    v22 = objc_opt_class(SearchHomeBrowseCategoriesLayoutProvider);
    if ((objc_opt_isKindOfClass(v65, v22) & 1) != 0)
    {
      v23 = v65;
      v64 = objc_loadWeakRetained((id *)(a1 + 40));
      objc_msgSend(v64, "heightForHeaderInSection:dataProvider:", a2, v12);
      v25 = v24;
      v61 = objc_loadWeakRetained((id *)(a1 + 40));
      objc_msgSend(v61, "heightForFooterInSection:dataProvider:", a2, v12);
      v27 = v26;
      v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v66, "container"));
      objc_msgSend(v60, "contentSize");
      v29 = v28;
      v30 = objc_msgSend(v12, "wantsOneColumnLayout");
      v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectsTitles"));
      v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objects"));
      v33 = objc_msgSend(v32, "count");
      v34 = objc_loadWeakRetained(v5);
      v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "collectionView"));
      v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "theme"));
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "layoutSectionWithLayoutEnvironment:estimatedHeaderHeight:estimatedFooterHeight:deletionBlock:collectionViewWidth:wantsOneColumnLayout:browseCategoriesTitles:objectsCount:mapsTheme:", v66, v63, v30, v31, v33, v36, v25, v27, v29));

    }
    else
    {
      v37 = objc_opt_class(_TtC4Maps34SearchHomeUserGuidesLayoutProvider);
      if ((objc_opt_isKindOfClass(v65, v37) & 1) != 0)
      {
        v64 = v65;
        objc_msgSend(*(id *)(a1 + 32), "heightForHeaderInSection:dataProvider:", a2, v12);
        v39 = v38;
        objc_msgSend(*(id *)(a1 + 32), "heightForFooterInSection:dataProvider:", a2, v12);
        v41 = v40;
        v76[0] = _NSConcreteStackBlock;
        v76[1] = 3221225472;
        v76[2] = sub_1003E92D8;
        v76[3] = &unk_1011B48F8;
        v42 = v12;
        v77 = v42;
        objc_copyWeak(&v78, (id *)(a1 + 40));
        objc_msgSend(v64, "setShareHandler:", v76);
        v74[0] = _NSConcreteStackBlock;
        v74[1] = 3221225472;
        v74[2] = sub_1003E9630;
        v74[3] = &unk_1011B4920;
        v43 = v42;
        v75 = v43;
        objc_msgSend(v64, "setIsShareable:", v74);
        v72[0] = _NSConcreteStackBlock;
        v72[1] = 3221225472;
        v72[2] = sub_1003E96B8;
        v72[3] = &unk_1011B4920;
        v44 = v43;
        v73 = v44;
        objc_msgSend(v64, "setIsDeletable:", v72);
        v69[0] = _NSConcreteStackBlock;
        v69[1] = 3221225472;
        v69[2] = sub_1003E9740;
        v69[3] = &unk_1011B4948;
        objc_copyWeak(&v71, (id *)(a1 + 40));
        v70 = v63;
        v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "objects"));
        v46 = objc_msgSend(v45, "count");
        v47 = objc_loadWeakRetained((id *)(a1 + 40));
        v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "collectionView"));
        v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "theme"));
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v64, "layoutSectionWithLayoutEnvironment:estimatedHeaderHeight:estimatedFooterHeight:deletionBlock:objectsCount:mapsTheme:", v66, v69, v46, v49, v39, v41));

        objc_destroyWeak(&v71);
        objc_destroyWeak(&v78);

      }
      else
      {
        v64 = objc_loadWeakRetained((id *)(a1 + 40));
        objc_msgSend(v64, "heightForHeaderInSection:dataProvider:", a2, v12);
        v51 = v50;
        v62 = objc_loadWeakRetained((id *)(a1 + 40));
        objc_msgSend(v62, "heightForFooterInSection:dataProvider:", a2, v12);
        v53 = v52;
        v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objects"));
        v55 = objc_msgSend(v54, "count");
        v56 = objc_loadWeakRetained((id *)(a1 + 40));
        v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "collectionView"));
        v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "theme"));
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v65, "layoutSectionWithLayoutEnvironment:estimatedHeaderHeight:estimatedFooterHeight:deletionBlock:objectsCount:mapsTheme:", v66, v63, v55, v58, v51, v53));

      }
    }

  }
  return v21;
}

void sub_1003E9240(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1003E9270(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  id v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "performDeleteAnimationOnSectionWithIdentifier:itemAtIndex:dataProvider:animated:", *(_QWORD *)(a1 + 32), a2, *(_QWORD *)(a1 + 40), 1);

  v5 = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(v5, "deleteEntryAtIndex:", a2);

}

void sub_1003E92D8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id *v6;
  id WeakRetained;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  char isKindOfClass;
  id v15;
  void *v16;
  void *v17;
  _QWORD v18[4];
  id v19;
  id v20;
  id v21;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objects"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectAtIndex:", objc_msgSend(v3, "row")));

  v6 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "collectionView"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v8, "cellForItemAtIndexPath:", v3));

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "collections"));
  v11 = objc_opt_class(CuratedCollectionHandler);
  LOBYTE(v8) = objc_opt_isKindOfClass(v10, v11);

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "collections"));
  if ((v8 & 1) != 0)
  {
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_1003E94C0;
    v18[3] = &unk_1011B48D0;
    objc_copyWeak(&v21, v6);
    v19 = v9;
    v20 = v5;
    objc_msgSend(v12, "retrieveGeoCollectionWithRefinedItems:", v18);

    objc_destroyWeak(&v21);
  }
  else
  {
    v13 = objc_opt_class(UserCollectionHandler);
    isKindOfClass = objc_opt_isKindOfClass(v12, v13);

    if ((isKindOfClass & 1) != 0)
    {
      v15 = objc_loadWeakRetained(v6);
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "searchHomeDataSourceDelegate"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "collections"));
      objc_msgSend(v16, "shareCollection:collection:", v9, v17);

    }
  }

}

void sub_1003E94AC(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1003E94C0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  NSObject *WeakRetained;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  id v21;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (v7 && v8 && (v10 = objc_msgSend(v8, "count"), !v9) && v10)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    v12 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject searchHomeDataSourceDelegate](WeakRetained, "searchHomeDataSourceDelegate"));
    v13 = *(_QWORD *)(a1 + 32);
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "collections"));
    objc_msgSend(v12, "shareCollection:collection:", v13, v14);

  }
  else
  {
    v15 = sub_10043222C();
    WeakRetained = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(WeakRetained, OS_LOG_TYPE_ERROR))
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "collections"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "identifier"));
      v18 = 138412546;
      v19 = v17;
      v20 = 2112;
      v21 = v9;
      _os_log_impl((void *)&_mh_execute_header, WeakRetained, OS_LOG_TYPE_ERROR, "Failed to resolve curated collection with id: %@ error: %@", (uint8_t *)&v18, 0x16u);

    }
  }

}

id sub_1003E9630(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objects"));
  v5 = objc_msgSend(v3, "row");

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectAtIndex:", v5));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "collections"));
  v8 = objc_msgSend(v7, "canShare");

  return v8;
}

id sub_1003E96B8(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objects"));
  v5 = objc_msgSend(v3, "row");

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectAtIndex:", v5));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "collections"));
  v8 = objc_msgSend(v7, "canDelete");

  return v8;
}

uint64_t sub_1003E9740(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "addToCollectionObserver");

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1003EA200(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 160));
  _Block_object_dispose((const void *)(v2 - 208), 8);
  _Unwind_Resume(a1);
}

void sub_1003EA284(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v7[4];
  id v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[SectionFooterCollectionReusableView reuseIdentifier](SectionFooterCollectionReusableView, "reuseIdentifier"));
  objc_msgSend(*(id *)(a1 + 32), "setAccessibilityIdentifier:", v2);

  v3 = *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  if ((objc_opt_respondsToSelector(v3, "deleteAllEntries") & 1) != 0)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("Clear [No Query State]"), CFSTR("localized string not found"), 0));

    v6 = *(void **)(a1 + 32);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1003EA398;
    v7[3] = &unk_1011AC860;
    v8 = v3;
    objc_msgSend(v6, "setActionTitle:completionHandler:", v5, v7);
    objc_msgSend(*(id *)(a1 + 32), "setAccessibilityIdentifiersWithBaseString:", CFSTR("SearchHomeClearRecents"));

  }
}

id sub_1003EA398(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "deleteAllEntries");
}

void sub_1003EA3A0(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "searchHomeDataSourceDelegate"));
  objc_msgSend(v5, "showGuidesHomeFromExploreGuides:", v3);

  v7 = objc_loadWeakRetained(v2);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "analyticsManager"));
  objc_msgSend(v6, "exploreGuidesButtonTapped");

}

void sub_1003EA424(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchHomeDataSourceDelegate"));
  objc_msgSend(v2, "seeAllTappedForCollections");

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "analyticsManager"));
  objc_msgSend(v3, "showAllCollectionsTapped");

}

id sub_1003EA478(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  id WeakRetained;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t isKindOfClass;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  const char *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void **v27;
  const __CFString **v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t IsEnabled_Maps269;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD v64[5];
  _QWORD v65[5];
  _QWORD v66[5];
  _QWORD v67[5];
  const __CFString *v68;
  void *v69;
  const __CFString *v70;
  void *v71;
  const __CFString *v72;
  void *v73;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "title"));
  objc_msgSend(*(id *)(a1 + 32), "setTitle:", v2);

  if (MapsFeature_IsEnabled_Maps269(v3, v4, v5) && sub_1002A8AA0(*(void **)(a1 + 40)) != 5)
    objc_msgSend(*(id *)(a1 + 32), "setShowsBottomHairline:", 0);
  v6 = objc_msgSend(*(id *)(a1 + 48), "section");
  v7 = objc_msgSend(*(id *)(a1 + 40), "_maps_indexOfFirstNonEmptySection");
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "collectionView"));
  v10 = sub_1002A8AA0(v9);

  v11 = *(void **)(a1 + 32);
  if (v10 == 5)
    objc_msgSend(v11, "setFirstNonEmptySection:topMargin:", v6 == v7, 12.0);
  else
    objc_msgSend(v11, "setFirstNonEmptySection:", v6 == v7);
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
  v13 = objc_opt_class(SearchHomeRecentSearchesDataProvider);
  isKindOfClass = objc_opt_isKindOfClass(v12, v13);
  if ((isKindOfClass & 1) != 0)
  {
    if (MapsFeature_IsEnabled_Maps269(isKindOfClass, v15, v16) && sub_1002A8AA0(*(void **)(a1 + 40)) != 5)
      objc_msgSend(*(id *)(a1 + 32), "setShowsBottomHairline:", 1);
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "localizedStringForKey:value:table:", CFSTR("More [No Query State]"), CFSTR("localized string not found"), 0));

    v19 = *(void **)(a1 + 32);
    v67[0] = _NSConcreteStackBlock;
    v67[1] = 3221225472;
    v67[2] = sub_1003EAC00;
    v67[3] = &unk_1011AC860;
    v67[4] = *(_QWORD *)(a1 + 56);
    objc_msgSend(v19, "setActionTitle:completionHandler:", v18, v67);
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "localizedStringForKey:value:table:", CFSTR("More Recents [No Query State]"), CFSTR("localized string not found"), 0));

    v22 = "seeAllTappedForRecents";
    v23 = *(void **)(a1 + 56);
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", (char *)objc_msgSend(*(id *)(a1 + 48), "section") + 1));
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "stringValue"));
    v72 = CFSTR("section");
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(*(id *)(a1 + 48), "section")));
    v73 = v26;
    v27 = &v73;
    v28 = &v72;
    goto LABEL_12;
  }
  v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
  v32 = objc_opt_class(_TtC4Maps32SearchHomeUserGuidesDataProvider);
  v33 = objc_opt_isKindOfClass(v31, v32);
  if ((v33 & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "setShowsBottomHairline:", 0);
    v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "localizedStringForKey:value:table:", CFSTR("More User Guides Offline [No Query State]"), CFSTR("localized string not found"), 0));

    v38 = *(void **)(a1 + 32);
    v66[0] = _NSConcreteStackBlock;
    v66[1] = 3221225472;
    v66[2] = sub_1003EAC30;
    v66[3] = &unk_1011AC860;
    v66[4] = *(_QWORD *)(a1 + 56);
    objc_msgSend(v38, "setActionTitle:completionHandler:", v37, v66);

    goto LABEL_15;
  }
  if ((MapsFeature_IsEnabled_Maps269(v33, v34, v35) & 1) == 0
    && (v42 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40),
        v43 = objc_opt_class(SearchHomeCollectionsDataProvider),
        (objc_opt_isKindOfClass(v42, v43) & 1) != 0)
    || (v44 = sub_1002A8AA0(*(void **)(a1 + 40)), v44 == 5)
    && (v47 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40),
        v48 = objc_opt_class(SearchHomeCollectionsDataProvider),
        v44 = objc_opt_isKindOfClass(v47, v48),
        (v44 & 1) != 0))
  {
    v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "localizedStringForKey:value:table:", CFSTR("See All [No Query State]"), CFSTR("localized string not found"), 0));

    v50 = *(void **)(a1 + 32);
    v65[0] = _NSConcreteStackBlock;
    v65[1] = 3221225472;
    v65[2] = sub_1003EAC60;
    v65[3] = &unk_1011AC860;
    v65[4] = *(_QWORD *)(a1 + 56);
    objc_msgSend(v50, "setActionTitle:completionHandler:", v18, v65);
    objc_msgSend(*(id *)(a1 + 32), "setShowsBottomHairline:", 0);
    v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "localizedStringForKey:value:table:", CFSTR("See All Guides [No Query State]"), CFSTR("localized string not found"), 0));

    v22 = "seeAllTappedForCollections";
    v23 = *(void **)(a1 + 56);
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", (char *)objc_msgSend(*(id *)(a1 + 48), "section") + 1));
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "stringValue"));
    v70 = CFSTR("section");
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(*(id *)(a1 + 48), "section")));
    v71 = v26;
    v27 = &v71;
    v28 = &v70;
LABEL_12:
    v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v27, v28, 1));
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[UIKeyCommand commandWithTitle:image:action:input:modifierFlags:propertyList:](UIKeyCommand, "commandWithTitle:image:action:input:modifierFlags:propertyList:", v21, 0, v22, v25, 1572864, v29));
    objc_msgSend(v23, "addKeyCommand:", v30);

    goto LABEL_15;
  }
  IsEnabled_Maps269 = MapsFeature_IsEnabled_Maps269(v44, v45, v46);
  if ((_DWORD)IsEnabled_Maps269)
  {
    v55 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
    v56 = objc_opt_class(SearchHomeCitiesDataProvider);
    IsEnabled_Maps269 = objc_opt_isKindOfClass(v55, v56);
    if ((IsEnabled_Maps269 & 1) != 0)
    {
      v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "localizedStringForKey:value:table:", CFSTR("More [City Guides Section]"), CFSTR("localized string not found"), 0));

      v58 = *(void **)(a1 + 32);
      v64[0] = _NSConcreteStackBlock;
      v64[1] = 3221225472;
      v64[2] = sub_1003EACB4;
      v64[3] = &unk_1011AC860;
      v64[4] = *(_QWORD *)(a1 + 56);
      objc_msgSend(v58, "setActionTitle:completionHandler:", v18, v64);
      objc_msgSend(*(id *)(a1 + 32), "setShowsBottomHairline:", 0);
      v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "localizedStringForKey:value:table:", CFSTR("See All Cities [No Query State]"), CFSTR("localized string not found"), 0));

      v22 = "showCitySelector";
      v23 = *(void **)(a1 + 56);
      v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", (char *)objc_msgSend(*(id *)(a1 + 48), "section") + 1));
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "stringValue"));
      v68 = CFSTR("section");
      v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(*(id *)(a1 + 48), "section")));
      v69 = v26;
      v27 = &v69;
      v28 = &v68;
      goto LABEL_12;
    }
  }
  if (MapsFeature_IsEnabled_Maps269(IsEnabled_Maps269, v53, v54))
  {
    if (sub_1002A8AA0(*(void **)(a1 + 40)) != 5)
    {
      v60 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
      v61 = objc_opt_class(SearchHomeBrowseCategoriesDataProvider);
      if ((objc_opt_isKindOfClass(v60, v61) & 1) != 0
        || (v62 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40),
            v63 = objc_opt_class(SearchHomePublishersDataProvider),
            (objc_opt_isKindOfClass(v62, v63) & 1) != 0))
      {
        objc_msgSend(*(id *)(a1 + 32), "setShowsBottomHairline:", 1);
      }
    }
  }
LABEL_15:
  v39 = *(void **)(a1 + 32);
  v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "headerAccessibilityIdentifier"));
  objc_msgSend(v39, "setAccessibilityIdentifiersWithBaseString:", v40);

  objc_msgSend(*(id *)(a1 + 32), "setNeedsLayout");
  return objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
}

void sub_1003EAC00(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchHomeDataSourceDelegate"));
  objc_msgSend(v1, "seeAllTappedForRecents");

}

void sub_1003EAC30(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchHomeDataSourceDelegate"));
  objc_msgSend(v1, "seeAllTappedForUserGuides");

}

void sub_1003EAC60(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchHomeDataSourceDelegate"));
  objc_msgSend(v2, "seeAllTappedForCollections");

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "analyticsManager"));
  objc_msgSend(v3, "showAllCollectionsTapped");

}

void sub_1003EACB4(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchHomeDataSourceDelegate"));
  objc_msgSend(v2, "showCitySelector");

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "analyticsManager"));
  objc_msgSend(v3, "cityGuidesMoreButtonTapped");

}

void sub_1003EC2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003EC310(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v7;

  v7 = a2;
  if (objc_msgSend(v7, "type") == (id)2)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
    *a4 = 1;
  }

}

id sub_1003EC8C8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "reloadSectionOfType:", 7);
}

void sub_1003ECC7C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "SearchHomeDataSource");
  v2 = (void *)qword_1014D23B0;
  qword_1014D23B0 = (uint64_t)v1;

}

uint64_t sub_1003ECE84(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1003ECE94(uint64_t a1)
{

}

void sub_1003ECE9C(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
  {
    v6 = a2;
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v3, "removeObserver:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));

    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v5 = *(void **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = 0;

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
}

void sub_1003EDAA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,id location)
{
  id *v49;
  id *v50;

  objc_destroyWeak(v50);
  objc_destroyWeak(v49);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1003EDAD4()
{
  if (qword_1014D23D0 != -1)
    dispatch_once(&qword_1014D23D0, &stru_1011B4AA0);
  return (id)qword_1014D23C8;
}

void sub_1003EDB14(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  v1 = *(void **)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(v1, "addObject:", WeakRetained);

}

void sub_1003EDB54(uint64_t a1, void *a2)
{
  void *v3;
  id *v4;
  id WeakRetained;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;

  v10 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "supersededSearchStorageIdentifier"));

  if (v3)
  {
    v4 = (id *)(a1 + 48);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    v6 = *(void **)(a1 + 32);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "supersededSearchStorageIdentifier"));
    objc_msgSend(v6, "setObject:forKeyedSubscript:", WeakRetained, v7);

    v8 = *(void **)(a1 + 40);
    v9 = objc_loadWeakRetained(v4);
    objc_msgSend(v8, "addObject:", v9);

  }
}

void sub_1003EDC94(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "SearchHomeRecentSearchesDataFetcher");
  v2 = (void *)qword_1014D23C8;
  qword_1014D23C8 = (uint64_t)v1;

}

void sub_1003EDF80(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1003EDFA4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _BYTE *WeakRetained;
  id v8;
  NSObject *v9;
  _BOOL4 v10;
  void *v11;
  uint64_t v12;
  int v13;
  id v14;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v8 = sub_100432A0C();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    v10 = os_log_type_enabled(v9, OS_LOG_TYPE_INFO);
    if (v6)
    {
      if (v10)
      {
        v13 = 138412290;
        v14 = v6;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Failed Sundew call when attempting to fetch with error %@", (uint8_t *)&v13, 0xCu);
      }

      WeakRetained[64] = 0;
      v11 = (void *)*((_QWORD *)WeakRetained + 9);
      *((_QWORD *)WeakRetained + 9) = 0;
    }
    else
    {
      if (v10)
      {
        v13 = 138412290;
        v14 = v5;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Fetched photo credit result: %@", (uint8_t *)&v13, 0xCu);
      }

      WeakRetained[64] = objc_msgSend(v5, "attributePhotos");
      v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "attributionName"));
      v11 = (void *)*((_QWORD *)WeakRetained + 9);
      *((_QWORD *)WeakRetained + 9) = v12;
    }

    objc_msgSend(WeakRetained, "rebuildSections");
  }

}

void sub_1003EE234(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  id v17;
  int v18;
  id v19;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = v9;
  if (!v8)
  {
    v14 = 0;
    if (!v9)
      goto LABEL_10;
    goto LABEL_7;
  }
  v11 = sub_100432A0C();
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v18 = 138412290;
    v19 = v8;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Failed Sundew call when attempting to update photo preferences with error %@", (uint8_t *)&v18, 0xCu);
  }

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "localizedStringForKey:value:table:", CFSTR("[Photo Credit] Photo Credit update error"), CFSTR("localized string not found"), 0));

  if (v10)
  {
LABEL_7:
    v15 = sub_100432A0C();
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v18 = 138412290;
      v19 = v10;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Attribution update error: %@", (uint8_t *)&v18, 0xCu);
    }

    v17 = v10;
    v14 = v17;
  }
LABEL_10:
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_1003EE678(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[5];
  id v6;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1003EE6F8;
  v5[3] = &unk_1011AC8B0;
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v3;
  v4 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v5);

}

id sub_1003EE6F8(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 120), *(id *)(a1 + 40));
  return objc_msgSend(*(id *)(a1 + 32), "rebuildSections");
}

void sub_1003EEBA8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_1003EEBE4(uint64_t a1, void *a2)
{
  id v3;
  _QWORD v4[4];
  id v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1003EEC6C;
  v4[3] = &unk_1011B4B18;
  v5 = *(id *)(a1 + 32);
  v3 = objc_msgSend(a2, "addCheckmarkRowsGroupWithContent:get:set:", v4, &stru_1011B4B58, &stru_1011B4B98);

}

void sub_1003EEC6C(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;

  v19 = a2;
  objc_msgSend(v19, "setAllowMultipleSelection:", 0);
  objc_msgSend(v19, "setMinimumSelectionCount:", 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localizedStringForKey:value:table:", CFSTR("Driving"), CFSTR("localized string not found"), 0));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndex:", 0));
  v6 = objc_msgSend(v19, "addRowWithTitle:value:", v4, v5);

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "localizedStringForKey:value:table:", CFSTR("Walking"), CFSTR("localized string not found"), 0));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndex:", 1));
  v10 = objc_msgSend(v19, "addRowWithTitle:value:", v8, v9);

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "localizedStringForKey:value:table:", CFSTR("Transit"), CFSTR("localized string not found"), 0));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndex:", 2));
  v14 = objc_msgSend(v19, "addRowWithTitle:value:", v12, v13);

  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "localizedStringForKey:value:table:", CFSTR("Cycling"), CFSTR("localized string not found"), 0));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndex:", 3));
  v18 = objc_msgSend(v19, "addRowWithTitle:value:", v16, v17);

}

id sub_1003EEE5C(id a1)
{
  return +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", GEOGetUserTransportTypePreference(a1));
}

void sub_1003EEE88(id a1, id a2)
{
  id v2;
  id v3;

  v2 = a2;
  GEOSetUserTransportTypePreference(objc_msgSend(v2, "integerValue"));
  v3 = objc_msgSend(v2, "integerValue");

  +[UserProfileAnalyticsManager capturePreferredDirectionsForTransportType:](UserProfileAnalyticsManager, "capturePreferredDirectionsForTransportType:", v3);
}

void sub_1003EEED8(id a1, MapsDebugTableSection *a2)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  MapsDebugTableSection *v8;

  v8 = a2;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("Avoid Tolls"), CFSTR("localized string not found"), 0));
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v8, "addSwitchRowWithTitle:get:set:", v3, &stru_1011B4C00, &stru_1011B4C20);

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "localizedStringForKey:value:table:", CFSTR("Avoid Highways"), CFSTR("localized string not found"), 0));
  v7 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v8, "addSwitchRowWithTitle:get:set:", v6, &stru_1011B4C40, &stru_1011B4C60);

}

BOOL sub_1003EEFC8(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = objc_msgSend(v1, "BOOLForKey:", CFSTR("MapsDefaultAvoidTollsKey"));

  return v2;
}

void sub_1003EF00C(id a1, BOOL a2)
{
  _BOOL8 v2;
  void *v3;
  void *v4;
  uint64_t v5;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v3, "setBool:forKey:", v2, CFSTR("MapsDefaultAvoidTollsKey"));

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults __maps_groupUserDefaults](NSUserDefaults, "__maps_groupUserDefaults"));
  objc_msgSend(v4, "setBool:forKey:", v2, CFSTR("MapsDefaultAvoidTollsKey"));

  if (v2)
    v5 = 148;
  else
    v5 = 189;
  +[UserProfileAnalyticsManager captureTravelPreferencesUserAction:](UserProfileAnalyticsManager, "captureTravelPreferencesUserAction:", v5);
}

BOOL sub_1003EF094(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = objc_msgSend(v1, "BOOLForKey:", CFSTR("MapsDefaultAvoidHighwaysKey"));

  return v2;
}

void sub_1003EF0D8(id a1, BOOL a2)
{
  _BOOL8 v2;
  void *v3;
  void *v4;
  uint64_t v5;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v3, "setBool:forKey:", v2, CFSTR("MapsDefaultAvoidHighwaysKey"));

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults __maps_groupUserDefaults](NSUserDefaults, "__maps_groupUserDefaults"));
  objc_msgSend(v4, "setBool:forKey:", v2, CFSTR("MapsDefaultAvoidHighwaysKey"));

  if (v2)
    v5 = 151;
  else
    v5 = 195;
  +[UserProfileAnalyticsManager captureTravelPreferencesUserAction:](UserProfileAnalyticsManager, "captureTravelPreferencesUserAction:", v5);
}

void sub_1003EF160(id a1, MapsDebugTableSection *a2)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  MapsDebugTableSection *v11;

  v11 = a2;
  if (sub_100B968A0())
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("Avoid Hills"), CFSTR("localized string not found"), 0));
    v4 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v11, "addSwitchRowWithTitle:get:set:", v3, &stru_1011B4CA0, &stru_1011B4CC0);

  }
  if (sub_100B968A0())
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "localizedStringForKey:value:table:", CFSTR("Avoid Busy Roads"), CFSTR("localized string not found"), 0));
    v7 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v11, "addSwitchRowWithTitle:get:set:", v6, &stru_1011B4CE0, &stru_1011B4D00);

  }
  if (sub_100B968FC())
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "localizedStringForKey:value:table:", CFSTR("Avoid Stairs"), CFSTR("localized string not found"), 0));
    v10 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v11, "addSwitchRowWithTitle:get:set:", v9, &stru_1011B4D20, &stru_1011B4D40);

  }
}

BOOL sub_1003EF2C4(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = objc_msgSend(v1, "BOOLForKey:", CFSTR("MapsDefaultWalkingAvoidHillsKey"));

  return v2;
}

void sub_1003EF308(id a1, BOOL a2)
{
  _BOOL8 v2;
  void *v3;
  uint64_t v4;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v3, "setBool:forKey:", v2, CFSTR("MapsDefaultWalkingAvoidHillsKey"));

  if (v2)
    v4 = 5035;
  else
    v4 = 5036;
  +[UserProfileAnalyticsManager captureTravelPreferencesUserAction:value:](UserProfileAnalyticsManager, "captureTravelPreferencesUserAction:value:", v4, CFSTR("WALKING"));
}

BOOL sub_1003EF368(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = objc_msgSend(v1, "BOOLForKey:", CFSTR("MapsDefaultWalkingAvoidBusyRoadsKey"));

  return v2;
}

void sub_1003EF3AC(id a1, BOOL a2)
{
  _BOOL8 v2;
  void *v3;
  uint64_t v4;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v3, "setBool:forKey:", v2, CFSTR("MapsDefaultWalkingAvoidBusyRoadsKey"));

  if (v2)
    v4 = 5033;
  else
    v4 = 5034;
  +[UserProfileAnalyticsManager captureTravelPreferencesUserAction:value:](UserProfileAnalyticsManager, "captureTravelPreferencesUserAction:value:", v4, CFSTR("WALKING"));
}

BOOL sub_1003EF40C(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = objc_msgSend(v1, "BOOLForKey:", CFSTR("MapsDefaultWalkingAvoidStairsKey"));

  return v2;
}

void sub_1003EF450(id a1, BOOL a2)
{
  _BOOL8 v2;
  void *v3;
  uint64_t v4;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v3, "setBool:forKey:", v2, CFSTR("MapsDefaultWalkingAvoidStairsKey"));

  if (v2)
    v4 = 5037;
  else
    v4 = 5038;
  +[UserProfileAnalyticsManager captureTravelPreferencesUserAction:value:](UserProfileAnalyticsManager, "captureTravelPreferencesUserAction:value:", v4, CFSTR("WALKING"));
}

void sub_1003EF4B0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "rebuildSections");

}

void sub_1003EF4DC(id a1, MapsDebugTableSection *a2)
{
  void *v2;
  void *v3;
  id v4;
  MapsDebugTableSection *v5;

  v5 = a2;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("E-Bike"), CFSTR("localized string not found"), 0));
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v5, "addSwitchRowWithTitle:get:set:", v3, &stru_1011B4D80, &stru_1011B4DA0);

}

BOOL sub_1003EF568(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = objc_msgSend(v1, "BOOLForKey:", CFSTR("MapsDefaultUseEbikeKey"));

  return v2;
}

void sub_1003EF5AC(id a1, BOOL a2)
{
  _BOOL8 v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v3, "setBool:forKey:", v2, CFSTR("MapsDefaultUseEbikeKey"));

}

void sub_1003EF5F8(id a1, MapsDebugTableSection *a2)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  MapsDebugTableSection *v8;

  v8 = a2;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("Avoid Hills"), CFSTR("localized string not found"), 0));
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v8, "addSwitchRowWithTitle:get:set:", v3, &stru_1011B4DE0, &stru_1011B4E00);

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "localizedStringForKey:value:table:", CFSTR("Avoid Busy Roads"), CFSTR("localized string not found"), 0));
  v7 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v8, "addSwitchRowWithTitle:get:set:", v6, &stru_1011B4E20, &stru_1011B4E40);

}

BOOL sub_1003EF6E8(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = objc_msgSend(v1, "BOOLForKey:", CFSTR("MapsDefaultAvoidHillsKey"));

  return v2;
}

void sub_1003EF72C(id a1, BOOL a2)
{
  _BOOL8 v2;
  void *v3;
  uint64_t v4;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v3, "setBool:forKey:", v2, CFSTR("MapsDefaultAvoidHillsKey"));

  if (v2)
    v4 = 5035;
  else
    v4 = 5036;
  +[UserProfileAnalyticsManager captureTravelPreferencesUserAction:value:](UserProfileAnalyticsManager, "captureTravelPreferencesUserAction:value:", v4, CFSTR("BICYCLE"));
}

BOOL sub_1003EF78C(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = objc_msgSend(v1, "BOOLForKey:", CFSTR("MapsDefaultAvoidBusyRoadsKey"));

  return v2;
}

void sub_1003EF7D0(id a1, BOOL a2)
{
  _BOOL8 v2;
  void *v3;
  uint64_t v4;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v3, "setBool:forKey:", v2, CFSTR("MapsDefaultAvoidBusyRoadsKey"));

  if (v2)
    v4 = 5033;
  else
    v4 = 5034;
  +[UserProfileAnalyticsManager captureTravelPreferencesUserAction:value:](UserProfileAnalyticsManager, "captureTravelPreferencesUserAction:value:", v4, CFSTR("BICYCLE"));
}

void sub_1003EF830(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  _QWORD v7[4];
  id v8;
  _QWORD v9[4];
  id v10;
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a2;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1003EF974;
  v11[3] = &unk_1011B4E68;
  v13 = *(_QWORD *)(a1 + 48);
  v4 = *(id *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 56);
  v12 = v4;
  v14 = v5;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1003EFA64;
  v9[3] = &unk_1011B4E90;
  objc_copyWeak(&v10, (id *)(a1 + 40));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1003EFC10;
  v7[3] = &unk_1011B4EB8;
  objc_copyWeak(&v8, (id *)(a1 + 40));
  v6 = objc_msgSend(v3, "addCheckmarkRowsGroupWithContent:get:set:", v11, v9, v7);
  objc_destroyWeak(&v8);
  objc_destroyWeak(&v10);

}

void sub_1003EF958(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1003EF974(_QWORD *a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  id v11;

  v11 = a2;
  objc_msgSend(v11, "setAllowMultipleSelection:", 1);
  objc_msgSend(v11, "setMinimumSelectionCount:", 1);
  if ((uint64_t)a1[5] >= 1)
  {
    v3 = 0;
    do
    {
      v4 = (void *)a1[4];
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSIndexPath indexPathForRow:inSection:](NSIndexPath, "indexPathForRow:inSection:", v3, a1[6]));
      v6 = objc_msgSend(v4, "_modeForIndexPath:", v5);

      v7 = sub_100A647F4((uint64_t)v6);
      v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v6));
      v10 = objc_msgSend(v11, "addRowWithTitle:value:", v8, v9);

      ++v3;
    }
    while (v3 < a1[5]);
  }

}

id sub_1003EFA64(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  id *v7;
  void *i;
  void *v9;
  id v10;
  id WeakRetained;
  void *v12;
  void *v13;
  id v14;
  id v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];

  if (qword_1014D23F0 != -1)
    dispatch_once(&qword_1014D23F0, &stru_1011B5020);
  v2 = (id)qword_1014D23E8;
  v16 = objc_msgSend(v2, "mutableCopy");
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v3 = v2;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v18;
    v7 = (id *)(a1 + 32);
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v18 != v6)
          objc_enumerationMutation(v3);
        v9 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)i);
        v10 = objc_msgSend(v9, "integerValue");
        WeakRetained = objc_loadWeakRetained(v7);
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "transitDataSource"));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "preferences"));
        LODWORD(v10) = objc_msgSend(v13, "isModeDisabled:", v10);

        if ((_DWORD)v10)
          objc_msgSend(v16, "removeObject:", v9);
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    }
    while (v5);
  }

  v14 = objc_msgSend(v16, "copy");
  return v14;
}

id sub_1003EFC10(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  TransitPreferencesViewControllerDataSource *v9;
  id v10;
  void *v11;
  TransitPreferencesViewControllerDataSource *v12;
  id v13;
  id v14;
  void *v15;

  v3 = objc_msgSend(a2, "integerValue");
  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "transitDataSource"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "preferences"));
  objc_msgSend(v6, "toggleModeEnabled:", v3);

  v7 = objc_loadWeakRetained(a1);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "transitPreferences"));
  objc_msgSend(v8, "synchronize");

  v9 = [TransitPreferencesViewControllerDataSource alloc];
  v10 = objc_loadWeakRetained(a1);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "transitPreferences"));
  v12 = -[TransitPreferencesViewControllerDataSource initWithPreferences:displayHints:](v9, "initWithPreferences:displayHints:", v11, 0);
  v13 = objc_loadWeakRetained(a1);
  objc_msgSend(v13, "setTransitDataSource:", v12);

  v14 = objc_loadWeakRetained(a1);
  objc_msgSend(v14, "rebuildSections");

  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  LODWORD(v14) = +[TransitPreferences isModeDisabled:inUserDefaults:](TransitPreferences, "isModeDisabled:inUserDefaults:", v3, v15);

  if ((_DWORD)v14)
    return +[UserProfileAnalyticsManager captureDisableTransitPreferenceForMode:](UserProfileAnalyticsManager, "captureDisableTransitPreferenceForMode:", v3);
  else
    return +[UserProfileAnalyticsManager captureEnableTransitPreferenceForMode:](UserProfileAnalyticsManager, "captureEnableTransitPreferenceForMode:", v3);
}

void sub_1003EFD74(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  _BYTE *WeakRetained;
  void *v9;
  void *v10;
  void *v11;
  _QWORD v12[5];
  _QWORD v13[5];
  _QWORD v14[5];
  id v15;
  id v16;
  _QWORD v17[4];
  id v18;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("Show Credit"), CFSTR("localized string not found"), 0));
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_1003EFFBC;
  v17[3] = &unk_1011AEE60;
  objc_copyWeak(&v18, (id *)(a1 + 40));
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1003EFFF0;
  v14[3] = &unk_1011B0E90;
  objc_copyWeak(&v16, (id *)(a1 + 40));
  v14[4] = *(_QWORD *)(a1 + 32);
  v6 = v3;
  v15 = v6;
  v7 = objc_msgSend(v6, "addSwitchRowWithTitle:get:set:", v5, v17, v14);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained[64])
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "localizedStringForKey:value:table:", CFSTR("[User Profile] Nickname"), CFSTR("localized string not found"), 0));
    v13[1] = 3221225472;
    v13[2] = sub_1003F0134;
    v13[3] = &unk_1011B4F08;
    v13[4] = WeakRetained;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1003F0148;
    v12[3] = &unk_1011AE420;
    v12[4] = *(_QWORD *)(a1 + 32);
    v13[0] = _NSConcreteStackBlock;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", 0, v10, 0, v13, v12));

    objc_msgSend(v11, "setFilter:", &stru_1011B4F48);
    objc_msgSend(v11, "setMaximumNumberOfCharacters:", 30);

  }
  objc_destroyWeak(&v16);
  objc_destroyWeak(&v18);

}

void sub_1003EFF9C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003EFFBC(uint64_t a1)
{
  unsigned __int8 *WeakRetained;
  uint64_t v2;

  WeakRetained = (unsigned __int8 *)objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained[64];

  return v2;
}

void sub_1003EFFF0(uint64_t a1, int a2)
{
  id *v4;
  _BYTE *WeakRetained;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  int v11;
  void *v12;
  id v13;
  uint64_t v14;
  _BYTE *v15;

  v4 = (id *)(a1 + 48);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (!WeakRetained)
    goto LABEL_17;
  v6 = *(_QWORD *)(a1 + 32);
  if (*(unsigned __int8 *)(v6 + 64) == a2)
    goto LABEL_17;
  v15 = WeakRetained;
  *(_BYTE *)(v6 + 64) = a2;
  v7 = &OBJC_IVAR___TravelPreferencesDataSource__photoCreditName;
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(void **)(v8 + 72);
  *(_QWORD *)(v8 + 72) = 0;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 80) = 1;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(unsigned __int8 *)(v10 + 64);
  if (!*(_BYTE *)(v10 + 64))
    goto LABEL_8;
  v7 = (int *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "rows"));
  if (objc_msgSend(v7, "count") == (id)1)
  {

LABEL_11:
    v7 = (int *)objc_loadWeakRetained(v4);
    objc_msgSend(v7, "rebuildSections");
    goto LABEL_12;
  }
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 32) + 64))
  {
LABEL_8:
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "rows"));
    v13 = objc_msgSend(v12, "count");

    if (v11)
    if (v13 != (id)2)
      goto LABEL_13;
    goto LABEL_11;
  }
LABEL_12:

LABEL_13:
  if (v15[64])
    v14 = 338;
  else
    v14 = 341;
  +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", v14, 602, 0);
  WeakRetained = v15;
LABEL_17:

}

id sub_1003F0134(uint64_t a1)
{
  return *(id *)(*(_QWORD *)(a1 + 32) + 72);
}

void sub_1003F0148(uint64_t a1, void *a2)
{
  id v4;
  id *v5;
  id v6;

  v4 = a2;
  v5 = (id *)(*(_QWORD *)(a1 + 32) + 72);
  if (*v5 != v4)
  {
    v6 = v4;
    objc_storeStrong(v5, a2);
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 80) = 1;
    +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 342, 602, 0);
    v4 = v6;
  }

}

BOOL sub_1003F01D0(id a1, NSString *a2)
{
  uint64_t v2;
  NSString *v3;
  id v4;

  v2 = qword_1014D23E0;
  v3 = a2;
  if (v2 != -1)
    dispatch_once(&qword_1014D23E0, &stru_1011B4F68);
  v4 = -[NSString rangeOfCharacterFromSet:](v3, "rangeOfCharacterFromSet:", qword_1014D23D8);

  return v4 == (id)0x7FFFFFFFFFFFFFFFLL;
}

void sub_1003F023C(id a1)
{
  void *v1;
  void *v2;
  id v3;
  void *v4;
  id v5;

  v5 = objc_alloc_init((Class)NSMutableCharacterSet);
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet alphanumericCharacterSet](NSCharacterSet, "alphanumericCharacterSet"));
  objc_msgSend(v5, "formUnionWithCharacterSet:", v1);

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet punctuationCharacterSet](NSCharacterSet, "punctuationCharacterSet"));
  objc_msgSend(v5, "formUnionWithCharacterSet:", v2);

  objc_msgSend(v5, "invert");
  v3 = objc_msgSend(v5, "copy");
  v4 = (void *)qword_1014D23D8;
  qword_1014D23D8 = (uint64_t)v3;

}

void sub_1003F02D4(id a1)
{
  void *v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", CFSTR("prefs:root=MAPS")));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  objc_msgSend(v1, "_maps_openURL:options:completionHandler:", v2, 0, 0);

  +[UserProfileAnalyticsManager captureSettingsAppTapAction](UserProfileAnalyticsManager, "captureSettingsAppTapAction");
}

void sub_1003F0348(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  _QWORD v6[5];
  _QWORD v7[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "notificationSettings"));
  v3 = objc_msgSend(v2, "authorizationStatus");

  if (v3)
  {
    +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 319, 29, 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", UIApplicationOpenNotificationSettingsURLString));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1003F04FC;
    v6[3] = &unk_1011AE8F8;
    v6[4] = *(_QWORD *)(a1 + 32);
    objc_msgSend(v5, "openURL:options:completionHandler:", v4, &__NSDictionary0__struct, v6);

  }
  else
  {
    +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 320, 29, 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[UNUserNotificationCenter currentNotificationCenter](UNUserNotificationCenter, "currentNotificationCenter"));
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1003F0498;
    v7[3] = &unk_1011ACF90;
    v7[4] = *(_QWORD *)(a1 + 32);
    objc_msgSend(v4, "requestAuthorizationWithOptions:completionHandler:", 14, v7);
  }

}

void sub_1003F0498(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003F04F4;
  block[3] = &unk_1011AC860;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
}

id sub_1003F04F4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "loadPreferences");
}

id sub_1003F04FC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "loadPreferences");
}

id sub_1003F0930(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  id v7;
  objc_class *v8;
  NSString *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  _BOOL8 v14;
  char *v15;

  v5 = *(void **)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = a2;
  v8 = (objc_class *)objc_opt_class(UserProfilePreferencesHeaderView);
  v9 = NSStringFromClass(v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath:", v6, v10, *(_QWORD *)(a1 + 48)));

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "textLabel"));
  objc_msgSend(v12, "setText:", v7);

  objc_msgSend(v11, "setFooter:", a3);
  v13 = objc_msgSend(v7, "length");

  if (v13)
  {
    v14 = 0;
  }
  else
  {
    v15 = (char *)objc_msgSend(*(id *)(a1 + 32), "numberOfSections");
    v14 = v15 != (char *)objc_msgSend(*(id *)(a1 + 48), "section") + 1;
  }
  objc_msgSend(v11, "setHidden:", v14);
  return v11;
}

id sub_1003F0A18(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  objc_class *v5;
  NSString *v6;
  void *v7;
  void *v8;
  UserProfileSectionFooterViewModel *v9;
  id v10;
  _BOOL8 v11;
  char *v12;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (objc_class *)objc_opt_class(UserProfileSectionFooterView);
  v6 = NSStringFromClass(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath:", UICollectionElementKindSectionFooter, v7, *(_QWORD *)(a1 + 40)));

  v9 = -[UserProfileSectionFooterViewModel initWithContentString:]([UserProfileSectionFooterViewModel alloc], "initWithContentString:", v4);
  v10 = objc_msgSend(v4, "length");

  if (v10)
  {
    v11 = 0;
  }
  else
  {
    v12 = (char *)objc_msgSend(*(id *)(a1 + 32), "numberOfSections");
    v11 = v12 != (char *)objc_msgSend(*(id *)(a1 + 40), "section") + 1;
  }
  -[UserProfileSectionFooterViewModel setCollapsed:](v9, "setCollapsed:", v11);
  -[UserProfileSectionFooterViewModel setContainsLink:](v9, "setContainsLink:", 1);
  -[UserProfileSectionFooterViewModel setTarget:](v9, "setTarget:", *(_QWORD *)(a1 + 48));
  -[UserProfileSectionFooterViewModel setAction:](v9, "setAction:", "privacyTextTapped");
  objc_msgSend(v8, "configureWithViewModel:", v9);
  objc_msgSend(v8, "setNeedsLayout");
  objc_msgSend(v8, "layoutIfNeeded");

  return v8;
}

void sub_1003F12DC(id a1)
{
  void *v1;

  v1 = (void *)qword_1014D23E8;
  qword_1014D23E8 = (uint64_t)&off_101273200;

}

uint64_t sub_1003F1C48(uint64_t a1)
{
  uint64_t result;

  +[HomeAnalyticsManager captureRatingRequestDiscoveryAction:](HomeAnalyticsManager, "captureRatingRequestDiscoveryAction:", 98);
  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1003F1C8C(id a1)
{
  +[HomeAnalyticsManager captureFeatureDiscoveryBannerDidAppear](HomeAnalyticsManager, "captureFeatureDiscoveryBannerDidAppear");
}

uint64_t sub_1003F1C98(uint64_t a1)
{
  uint64_t result;

  +[HomeAnalyticsManager captureRatingRequestDiscoveryAction:](HomeAnalyticsManager, "captureRatingRequestDiscoveryAction:", 25);
  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1003F2EF8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1003F2F24(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  id WeakRetained;
  void *v6;
  NSObject *v7;
  id v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;

  if (a2)
  {
    v3 = (id *)(a1 + 40);
    v4 = a2;
    WeakRetained = objc_loadWeakRetained(v3);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_labelMarkerForCustomFeatureAnnotation:", v4));

    if (v6)
    {
      v7 = objc_loadWeakRetained(v3);
      -[NSObject _selectLabelMarker:animated:](v7, "_selectLabelMarker:animated:", v6, 1);
    }
    else
    {
      v8 = sub_10043364C();
      v7 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapItem"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "name"));
        v11 = 138412290;
        v12 = v10;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "SearchResults: _customPOIsController failed to find a labelMarker for focused search result: %@", (uint8_t *)&v11, 0xCu);

      }
    }

  }
}

void sub_1003F3104(uint64_t a1)
{
  _BYTE *WeakRetained;
  void *v2;
  unsigned int v3;
  _BYTE *v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    WeakRetained[40] = 0;
    v4 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "chromeViewController"));
    v3 = objc_msgSend(v2, "isCurrentContext:", v4);

    WeakRetained = v4;
    if (v3)
    {
      objc_msgSend(v4, "_updateVisibleSearchResults");
      WeakRetained = v4;
    }
  }

}

id sub_1003F3308(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  id v5;
  void *v6;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "searchResults"));
  v5 = objc_msgSend(v3, "row");

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectAtIndexedSubscript:", v5));
  return v6;
}

SearchResult *__cdecl sub_1003F3A18(id a1, MKPlaceCollectionMapItem *a2, unint64_t a3)
{
  MKPlaceCollectionMapItem *v3;
  SearchResult *v4;
  void *v5;
  SearchResult *v6;

  v3 = a2;
  v4 = [SearchResult alloc];
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[MKPlaceCollectionMapItem mapItem](v3, "mapItem"));

  v6 = -[SearchResult initWithMapItem:](v4, "initWithMapItem:", v5);
  return v6;
}

void sub_1003F40F8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

id sub_1003F411C()
{
  if (qword_1014D2400 != -1)
    dispatch_once(&qword_1014D2400, &stru_1011B51B0);
  return (id)qword_1014D23F8;
}

void sub_1003F415C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  id v7;
  NSObject *v8;
  NSObject *v9;
  os_signpost_id_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint8_t v14[16];

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v7 = sub_1003F411C();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 48);
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
  {
    *(_WORD *)v14 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_INTERVAL_END, v10, "FetchingSARCategories", "", v14, 2u);
  }

  if (a3 || !objc_msgSend(v5, "count"))
  {
    v11 = &__NSArray0__struct;
    v12 = WeakRetained;
  }
  else
  {
    v12 = WeakRetained;
    v11 = v5;
  }
  objc_msgSend(v12, "setCategories:", v11);
  v13 = *(_QWORD *)(a1 + 32);
  if (v13)
    (*(void (**)(void))(v13 + 16))();

}

void sub_1003F43C4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "NavSARAPIController");
  v2 = (void *)qword_1014D23F8;
  qword_1014D23F8 = (uint64_t)v1;

}

UIFont *__cdecl sub_1003F43F4(id a1)
{
  void *v1;
  void *v2;
  void *v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[MKFontManager sharedManager](MKFontManager, "sharedManager"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "subtitleFont"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont _maps_cappedFont:withMaxPoint:](UIFont, "_maps_cappedFont:withMaxPoint:", v2, 30.0));

  return (UIFont *)v3;
}

void sub_1003F461C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;

  if (objc_msgSend(*(id *)(a1 + 32), "hasEnteredLookAround"))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "locationTitle"));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 152), "setTitle:", v2);

    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "locationSubtitle"));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 152), "setSubtitle:", v3);

    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionDate"));
    if (v4)
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "localizedStringForKey:value:table:", CFSTR("Last Updated [LookAround]"), CFSTR("localized string not found"), 0));

      v7 = *(void **)(*(_QWORD *)(a1 + 40) + 136);
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSLocale currentLocale](NSLocale, "currentLocale"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDateFormatter dateFormatFromTemplate:options:locale:](NSDateFormatter, "dateFormatFromTemplate:options:locale:", CFSTR("MMMMyyyy"), 0, v8));
      objc_msgSend(v7, "setLocalizedDateFormatFromTemplate:", v9);

      v10 = *(void **)(*(_QWORD *)(a1 + 40) + 136);
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionDate"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "stringFromDate:", v11));
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", v6, v12));
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 216), "setText:", v13);

    }
    v14 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 152), "view"));
    objc_msgSend(v14, "layoutIfNeeded");

  }
}

void sub_1003F48FC(uint64_t a1)
{
  _BOOL8 v1;
  id v2;

  v1 = *(_BYTE *)(a1 + 40) == 0;
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cardPresentationController"));
  objc_msgSend(v2, "setHidden:", v1);

}

void sub_1003F8010(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1003F802C(uint64_t a1, uint64_t a2)
{
  double v3;
  id WeakRetained;
  void *v5;
  MKMapPoint v6;
  double v7;
  double v8;
  CLLocationCoordinate2D v9;
  CLLocationCoordinate2D v10;
  id v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  _QWORD v27[5];
  CLLocationCoordinate2D v28;
  MKMapPoint v29;
  MKMapPoint v30;

  v3 = MKZoomScaleForZoomLevelF(a1, a2, 16.0);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "searchResult"));
  objc_msgSend(v5, "_offsetCoordinate:", v3);
  v6 = MKMapPointForCoordinate(v28);

  v29.x = v6.x - 163.0 / v3 * 0.5;
  v29.y = v6.y - 163.0 / v3 * 0.5;
  v7 = 163.0 / v3 + v29.x;
  v8 = 163.0 / v3 + v29.y;
  v9 = MKCoordinateForMapPoint(v29);
  v30.x = v7;
  v30.y = v8;
  v10 = MKCoordinateForMapPoint(v30);
  v11 = objc_loadWeakRetained((id *)(a1 + 40));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "searchResult"));
  objc_msgSend(v12, "_offsetCoordinate:", v3);
  v14 = v13;
  v16 = v15;

  if (v16 < -180.0
    || v16 > 180.0
    || v14 < -90.0
    || v14 > 90.0
    || (v17 = vabdd_f64(v9.latitude, v10.latitude), v17 > 180.0)
    || (v18 = vabdd_f64(v9.longitude, v10.longitude), v18 > 360.0))
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 64) = 1;
  }
  else
  {
    v19 = objc_alloc_init((Class)MKMapSnapshotOptions);
    objc_msgSend(v19, "setRegion:", v14, v16, v17, v18);
    v20 = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(v19, "setMapType:", objc_msgSend(v20, "mapType"));

    objc_msgSend(v19, "setSize:", 163.0, 163.0);
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[UITraitCollection traitCollectionWithDisplayScale:](UITraitCollection, "traitCollectionWithDisplayScale:", 2.0));
    objc_msgSend(v19, "setTraitCollection:", v21);

    v22 = objc_msgSend(objc_alloc((Class)MKMapSnapshotter), "initWithOptions:", v19);
    v23 = *(_QWORD *)(a1 + 32);
    v24 = *(void **)(v23 + 80);
    *(_QWORD *)(v23 + 80) = v22;

    v25 = *(_QWORD *)(a1 + 32);
    v26 = *(void **)(v25 + 80);
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_1003F8298;
    v27[3] = &unk_1011B51F8;
    v27[4] = v25;
    objc_msgSend(v26, "startWithCompletionHandler:", v27);

  }
}

void sub_1003F8298(uint64_t a1, void *a2)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 64) = 1;
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 72), a2);
}

void sub_1003FA5E4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;

  objc_msgSend(*(id *)(a1 + 32), "setState:", 3);
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 32);
  *(_QWORD *)(v2 + 32) = 0;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 8);
  *(_QWORD *)(v4 + 8) = 0;

}

_QWORD *sub_1003FB91C(_QWORD *result)
{
  _QWORD *v1;
  id v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  int v27;
  void *v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;

  if (!*(_BYTE *)(result[4] + 32))
  {
    v1 = result;
    if (result[5])
    {
      v2 = sub_1003FBB38();
      v3 = objc_claimAutoreleasedReturnValue(v2);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        v4 = (void *)v1[4];
        objc_msgSend(v4, "desiredAccuracy");
        v6 = v5;
        objc_msgSend((id)v1[4], "acceptableAccuracy");
        v27 = 134218496;
        v28 = v4;
        v29 = 2048;
        v30 = v6;
        v31 = 2048;
        v32 = v7;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Will request single location update %p (desired: ±%#.2lfm, acceptable: ±%#.2lfm)", (uint8_t *)&v27, 0x20u);
      }

      v8 = v1[4];
      v9 = *(void **)(v8 + 40);
      if (v9)
      {
        objc_msgSend(v9, "invalidate");
        v8 = v1[4];
      }
      *(_BYTE *)(v8 + 32) = 1;
      v10 = objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
      v11 = v1[4];
      v12 = *(void **)(v11 + 48);
      *(_QWORD *)(v11 + 48) = v10;

      v13 = v1[4];
      if (!*(_QWORD *)(v13 + 16))
      {
        v14 = objc_alloc((Class)CLLocationManager);
        v15 = objc_msgSend(v14, "initWithEffectiveBundleIdentifier:delegate:onQueue:", MapsAppBundleId, v1[4], &_dispatch_main_q);
        v16 = v1[4];
        v17 = *(void **)(v16 + 16);
        *(_QWORD *)(v16 + 16) = v15;

        objc_msgSend((id)v1[4], "desiredAccuracy");
        objc_msgSend(*(id *)(v1[4] + 16), "setDesiredAccuracy:");
        v13 = v1[4];
      }
      if (!*(_QWORD *)(v13 + 8))
      {
        v18 = +[CLInUseAssertion newAssertionForBundleIdentifier:withReason:](CLInUseAssertion, "newAssertionForBundleIdentifier:withReason:", MapsAppBundleId, CFSTR("Fetching a single good location fix"));
        v19 = v1[4];
        v20 = *(void **)(v19 + 8);
        *(_QWORD *)(v19 + 8) = v18;

      }
      v21 = objc_msgSend((id)v1[5], "copy");
      v22 = v1[4];
      v23 = *(void **)(v22 + 56);
      *(_QWORD *)(v22 + 56) = v21;

      v24 = objc_claimAutoreleasedReturnValue(+[NSTimer scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:](NSTimer, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", v1[4], "_firstTimeout", 0, 0, 5.0));
      v25 = v1[4];
      v26 = *(void **)(v25 + 40);
      *(_QWORD *)(v25 + 40) = v24;

      return objc_msgSend(*(id *)(v1[4] + 16), "startUpdatingLocation");
    }
  }
  return result;
}

id sub_1003FBB38()
{
  if (qword_1014D2410 != -1)
    dispatch_once(&qword_1014D2410, &stru_1011B5238);
  return (id)qword_1014D2408;
}

_QWORD *sub_1003FBBD0(_QWORD *result)
{
  _QWORD *v1;
  id v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  if (*(_BYTE *)(result[4] + 32))
  {
    v1 = result;
    v2 = sub_1003FBB38();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = v1[4];
      v5 = 134217984;
      v6 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Cancelling single location update %p", (uint8_t *)&v5, 0xCu);
    }

    return objc_msgSend((id)v1[4], "_cleanup");
  }
  return result;
}

id sub_1003FBE48(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_completeWithLocation:error:", *(_QWORD *)(a1 + 40), 0);
}

id sub_1003FBF40(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setDelegate:", 0);
  objc_msgSend(*(id *)(a1 + 32), "stopUpdatingLocation");
  return objc_msgSend(*(id *)(a1 + 40), "invalidate");
}

void sub_1003FC428(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "SingleLocationUpdate");
  v2 = (void *)qword_1014D2408;
  qword_1014D2408 = (uint64_t)v1;

}

void sub_1003FD530(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1003FD554(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _BYTE *WeakRetained;
  id v8;
  NSObject *v9;
  void *v10;
  unsigned int v11;
  id v12;
  NSObject *v13;
  _BOOL4 v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  int v19;
  id v20;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (v6)
    {
      v8 = sub_100432A0C();
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        v19 = 138412290;
        v20 = v6;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Failed Sundew call when attempting to fetch with error %@", (uint8_t *)&v19, 0xCu);
      }

      WeakRetained[48] = 0;
      v10 = (void *)*((_QWORD *)WeakRetained + 7);
      *((_QWORD *)WeakRetained + 7) = 0;
    }
    else
    {
      v11 = objc_msgSend(v5, "wasCleared");
      v12 = sub_100432A0C();
      v13 = objc_claimAutoreleasedReturnValue(v12);
      v14 = os_log_type_enabled(v13, OS_LOG_TYPE_INFO);
      if (v11)
      {
        if (v14)
        {
          v19 = 138412290;
          v20 = v5;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Fetched photo credit result, but the photo credit name has been cleared by the server: %@", (uint8_t *)&v19, 0xCu);
        }

        WeakRetained[48] = 0;
        v15 = (void *)*((_QWORD *)WeakRetained + 7);
        *((_QWORD *)WeakRetained + 7) = 0;

        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "photoCreditChangesDelegate"));
        v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "localizedStringForKey:value:table:", CFSTR("[Photo Credit] Photo Credit name removed error message"), CFSTR("localized string not found"), 0));
        objc_msgSend(v10, "photoCreditNameHasBeenFlaggedWithErrorMessage:", v17);

      }
      else
      {
        if (v14)
        {
          v19 = 138412290;
          v20 = v5;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Fetched photo credit result: %@", (uint8_t *)&v19, 0xCu);
        }

        WeakRetained[48] = objc_msgSend(v5, "attributePhotos");
        v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "attributionName"));
        v10 = (void *)*((_QWORD *)WeakRetained + 7);
        *((_QWORD *)WeakRetained + 7) = v18;
      }
    }

    objc_msgSend(WeakRetained, "rebuildSections");
  }

}

void sub_1003FD8C8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  id v17;
  int v18;
  id v19;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = v9;
  if (!v8)
  {
    v14 = 0;
    if (!v9)
      goto LABEL_10;
    goto LABEL_7;
  }
  v11 = sub_100432A0C();
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v18 = 138412290;
    v19 = v8;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Failed Sundew call when attempting to update photo preferences with error %@", (uint8_t *)&v18, 0xCu);
  }

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "localizedStringForKey:value:table:", CFSTR("[Photo Credit] Photo Credit update error"), CFSTR("localized string not found"), 0));

  if (v10)
  {
LABEL_7:
    v15 = sub_100432A0C();
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v18 = 138412290;
      v19 = v10;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Attribution update error: %@", (uint8_t *)&v18, 0xCu);
    }

    v17 = v10;
    v14 = v17;
  }
LABEL_10:
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_1003FDC78(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1003FDC94(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  _BYTE *WeakRetained;
  void *v9;
  void *v10;
  void *v11;
  _QWORD v12[6];
  _QWORD v13[5];
  _QWORD v14[5];
  id v15;
  id v16;
  _QWORD v17[4];
  id v18;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("Show Credit"), CFSTR("localized string not found"), 0));
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_1003FDEF0;
  v17[3] = &unk_1011AEE60;
  objc_copyWeak(&v18, (id *)(a1 + 40));
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1003FDF24;
  v14[3] = &unk_1011B0E90;
  objc_copyWeak(&v16, (id *)(a1 + 40));
  v14[4] = *(_QWORD *)(a1 + 32);
  v6 = v3;
  v15 = v6;
  v7 = objc_msgSend(v6, "addSwitchRowWithTitle:get:set:", v5, v17, v14);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained[48])
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "localizedStringForKey:value:table:", CFSTR("[Photo Credit] Nickname"), CFSTR("localized string not found"), 0));
    v12[5] = WeakRetained;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1003FE070;
    v13[3] = &unk_1011B4F08;
    v13[4] = WeakRetained;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1003FE084;
    v12[3] = &unk_1011B5288;
    v12[4] = *(_QWORD *)(a1 + 32);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", 0, v10, 0, v13, v12));

    objc_msgSend(v11, "setFilter:", &stru_1011B52A8);
    objc_msgSend(v11, "setDidBeginEditing:", &stru_1011B52E8);
    objc_msgSend(v11, "setMaximumNumberOfCharacters:", 30);

  }
  objc_destroyWeak(&v16);
  objc_destroyWeak(&v18);

}

void sub_1003FDED0(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003FDEF0(uint64_t a1)
{
  unsigned __int8 *WeakRetained;
  uint64_t v2;

  WeakRetained = (unsigned __int8 *)objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained[48];

  return v2;
}

void sub_1003FDF24(uint64_t a1, int a2)
{
  id *v4;
  _BYTE *WeakRetained;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  int v11;
  void *v12;
  id v13;
  uint64_t v14;
  _BYTE *v15;

  v4 = (id *)(a1 + 48);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (!WeakRetained)
    goto LABEL_17;
  v6 = *(_QWORD *)(a1 + 32);
  if (*(unsigned __int8 *)(v6 + 48) == a2)
    goto LABEL_17;
  v15 = WeakRetained;
  *(_BYTE *)(v6 + 48) = a2;
  v7 = &OBJC_IVAR___PhotoCreditDataSource__photoCreditName;
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(void **)(v8 + 56);
  *(_QWORD *)(v8 + 56) = 0;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 64) = 1;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(unsigned __int8 *)(v10 + 48);
  if (!*(_BYTE *)(v10 + 48))
    goto LABEL_8;
  v7 = (int *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "rows"));
  if (objc_msgSend(v7, "count") == (id)1)
  {

LABEL_11:
    v7 = (int *)objc_loadWeakRetained(v4);
    objc_msgSend(v7, "rebuildSections");
    goto LABEL_12;
  }
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 32) + 48))
  {
LABEL_8:
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "rows"));
    v13 = objc_msgSend(v12, "count");

    if (v11)
    if (v13 != (id)2)
      goto LABEL_13;
    goto LABEL_11;
  }
LABEL_12:

LABEL_13:
  if (v15[48])
    v14 = 338;
  else
    v14 = 341;
  +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", v14, 77, 0);
  objc_msgSend(v15, "_photoCreditDidUpdate");
  WeakRetained = v15;
LABEL_17:

}

id sub_1003FE070(uint64_t a1)
{
  return *(id *)(*(_QWORD *)(a1 + 32) + 56);
}

id sub_1003FE084(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  if (*(void **)(*(_QWORD *)(a1 + 32) + 56) != a2)
  {
    v3 = a2;
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet whitespaceCharacterSet](NSCharacterSet, "whitespaceCharacterSet"));
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stringByTrimmingCharactersInSet:", v4));

    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(void **)(v6 + 56);
    *(_QWORD *)(v6 + 56) = v5;

    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 64) = 1;
  }
  return objc_msgSend(*(id *)(a1 + 40), "_photoCreditDidUpdate");
}

BOOL sub_1003FE12C(id a1, NSString *a2)
{
  uint64_t v2;
  NSString *v3;
  id v4;

  v2 = qword_1014D2420;
  v3 = a2;
  if (v2 != -1)
    dispatch_once(&qword_1014D2420, &stru_1011B52C8);
  v4 = -[NSString rangeOfCharacterFromSet:](v3, "rangeOfCharacterFromSet:", qword_1014D2418);

  return v4 == (id)0x7FFFFFFFFFFFFFFFLL;
}

void sub_1003FE198(id a1)
{
  void *v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  id v6;

  v6 = objc_alloc_init((Class)NSMutableCharacterSet);
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet alphanumericCharacterSet](NSCharacterSet, "alphanumericCharacterSet"));
  objc_msgSend(v6, "formUnionWithCharacterSet:", v1);

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet punctuationCharacterSet](NSCharacterSet, "punctuationCharacterSet"));
  objc_msgSend(v6, "formUnionWithCharacterSet:", v2);

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet whitespaceCharacterSet](NSCharacterSet, "whitespaceCharacterSet"));
  objc_msgSend(v6, "formUnionWithCharacterSet:", v3);

  objc_msgSend(v6, "invert");
  v4 = objc_msgSend(v6, "copy");
  v5 = (void *)qword_1014D2418;
  qword_1014D2418 = (uint64_t)v4;

}

void sub_1003FE250(id a1)
{
  +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 342, 77, 0);
}

id sub_1003FE5FC(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  objc_class *v5;
  NSString *v6;
  void *v7;
  void *v8;
  UserProfileSectionFooterViewModel *v9;
  id v10;
  _BOOL8 v11;
  char *v12;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (objc_class *)objc_opt_class(UserProfileSectionFooterView);
  v6 = NSStringFromClass(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath:", UICollectionElementKindSectionFooter, v7, *(_QWORD *)(a1 + 40)));

  v9 = -[UserProfileSectionFooterViewModel initWithContentString:]([UserProfileSectionFooterViewModel alloc], "initWithContentString:", v4);
  v10 = objc_msgSend(v4, "length");

  if (v10)
  {
    v11 = 0;
  }
  else
  {
    v12 = (char *)objc_msgSend(*(id *)(a1 + 32), "numberOfSections");
    v11 = v12 != (char *)objc_msgSend(*(id *)(a1 + 40), "section") + 1;
  }
  -[UserProfileSectionFooterViewModel setCollapsed:](v9, "setCollapsed:", v11);
  -[UserProfileSectionFooterViewModel setContainsLink:](v9, "setContainsLink:", 1);
  -[UserProfileSectionFooterViewModel setTarget:](v9, "setTarget:", *(_QWORD *)(a1 + 48));
  -[UserProfileSectionFooterViewModel setAction:](v9, "setAction:", "privacyTextTapped");
  objc_msgSend(v8, "configureWithViewModel:", v9);
  objc_msgSend(v8, "setNeedsLayout");
  objc_msgSend(v8, "layoutIfNeeded");

  return v8;
}

void sub_1003FED84(uint64_t a1)
{
  double v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "layer"));
  LODWORD(v1) = 0;
  objc_msgSend(v2, "setOpacity:", v1);

}

void sub_1003FF5A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

id sub_1003FF8C0(uint64_t a1)
{
  void *v2;
  CGAffineTransform v4;
  CGAffineTransform v5;

  CGAffineTransformMakeRotation(&v5, *(CGFloat *)(a1 + 40));
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
  v4 = v5;
  objc_msgSend(v2, "setTransform:", &v4);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setCenter:", *(double *)(a1 + 48), *(double *)(a1 + 56));
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "setCenter:", *(double *)(a1 + 64), *(double *)(a1 + 72));
}

void sub_1003FFA20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1003FFA3C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_showInstruction");

}

void sub_1003FFC28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1003FFC44(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_startArrowPulseAnimation");

}

id sub_1003FFD14(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  void *v5;
  void *v6;
  CGAffineTransform v8;
  CGAffineTransform v9;
  CGAffineTransform v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(unsigned __int8 *)(v2 + 57);
  *(_BYTE *)(v2 + 57) = v3 ^ 1;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 16);
  if (v5)
  {
    objc_msgSend(v5, "transform");
    v4 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    memset(&v9, 0, sizeof(v9));
  }
  CGAffineTransformScale(&v10, &v9, dbl_100E37080[v3 == 0], dbl_100E37080[v3 == 0]);
  v6 = *(void **)(v4 + 16);
  v8 = v10;
  return objc_msgSend(v6, "setTransform:", &v8);
}

void sub_100401F18(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100401F34(uint64_t a1, uint64_t a2)
{
  double v3;
  id WeakRetained;
  void *v5;
  MKMapPoint v6;
  double v7;
  double v8;
  CLLocationCoordinate2D v9;
  CLLocationCoordinate2D v10;
  id v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  _QWORD v27[5];
  CLLocationCoordinate2D v28;
  MKMapPoint v29;
  MKMapPoint v30;

  v3 = 163.0 / MKZoomScaleForZoomLevelF(a1, a2, 16.0);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "routeStep"));
  objc_msgSend(v5, "startCoordinate");
  v6 = MKMapPointForCoordinate(v28);

  v29.x = v6.x - v3 * 0.5;
  v29.y = v6.y - v3 * 0.5;
  v7 = v3 + v29.x;
  v8 = v3 + v29.y;
  v9 = MKCoordinateForMapPoint(v29);
  v30.x = v7;
  v30.y = v8;
  v10 = MKCoordinateForMapPoint(v30);
  v11 = objc_loadWeakRetained((id *)(a1 + 40));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "routeStep"));
  objc_msgSend(v12, "startCoordinate");
  v14 = v13;
  v16 = v15;

  if (v16 < -180.0
    || v16 > 180.0
    || v14 < -90.0
    || v14 > 90.0
    || (v17 = vabdd_f64(v9.latitude, v10.latitude), v17 > 180.0)
    || (v18 = vabdd_f64(v9.longitude, v10.longitude), v18 > 360.0))
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 64) = 1;
  }
  else
  {
    v19 = objc_alloc_init((Class)MKMapSnapshotOptions);
    objc_msgSend(v19, "setRegion:", v14, v16, v17, v18);
    v20 = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(v19, "setMapType:", objc_msgSend(v20, "mapType"));

    objc_msgSend(v19, "setSize:", 163.0, 163.0);
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[UITraitCollection traitCollectionWithDisplayScale:](UITraitCollection, "traitCollectionWithDisplayScale:", 2.0));
    objc_msgSend(v19, "setTraitCollection:", v21);

    v22 = objc_msgSend(objc_alloc((Class)MKMapSnapshotter), "initWithOptions:", v19);
    v23 = *(_QWORD *)(a1 + 32);
    v24 = *(void **)(v23 + 80);
    *(_QWORD *)(v23 + 80) = v22;

    v25 = *(_QWORD *)(a1 + 32);
    v26 = *(void **)(v25 + 80);
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_100402194;
    v27[3] = &unk_1011B51F8;
    v27[4] = v25;
    objc_msgSend(v26, "startWithCompletionHandler:", v27);

  }
}

void sub_100402194(uint64_t a1, void *a2)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 64) = 1;
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 72), a2);
}

uint64_t sub_100402C9C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_100402DA4(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "setHidden:", 1);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "removeFromSuperview");
}

id sub_100402F0C(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "setHidden:", 0);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "setObservedProgress:", *(_QWORD *)(a1 + 40));
}

void sub_1004038D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1004038EC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;
  id v12;

  v5 = a2;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1004039D0;
  v8[3] = &unk_1011B5338;
  v9 = a3;
  v6 = v9;
  objc_copyWeak(&v12, (id *)(a1 + 40));
  v10 = v5;
  v11 = *(id *)(a1 + 32);
  v7 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v8);

  objc_destroyWeak(&v12);
}

void sub_1004039D0(uint64_t a1)
{
  id WeakRetained;
  uint64_t v3;
  id v4;

  if (!*(_QWORD *)(a1 + 32))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    objc_msgSend(WeakRetained, "mergeWithServerConfig:", *(_QWORD *)(a1 + 40));

  }
  v3 = *(_QWORD *)(a1 + 48);
  v4 = objc_loadWeakRetained((id *)(a1 + 56));
  (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);

}

void sub_100403E7C(uint64_t a1)
{
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) = *(_QWORD *)(a1 + 64);
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 56), *(id *)(a1 + 40));
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80) = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 120) = 4;
}

id sub_100403FE8(uint64_t a1)
{
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40) = *(_QWORD *)(a1 + 64);
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 64), *(id *)(a1 + 40));
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72) = *(_QWORD *)(a1 + 72);
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 88), *(id *)(a1 + 48));
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 96), *(id *)(a1 + 56));
  return _objc_msgSend(*(id *)(a1 + 32), "_submitAnalytics");
}

void sub_100404110(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  unsigned int v5;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _QWORD v20[2];
  int v21;
  char v22;
  __int16 v23;
  char v24;

  if ((objc_opt_respondsToSelector(*(_QWORD *)(a1 + 32), "analyticsInformationWithSessionStartMonotonicTime:") & 1) != 0)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "analyticsInformationWithSessionStartMonotonicTime:", *(double *)(*(_QWORD *)(a1 + 40) + 24)));
    if (v2)
    {
      v3 = *(void **)(a1 + 48);
      if (v3)
      {
        v4 = v3;
        v5 = objc_msgSend(v4, "positionContextState");
        if (v5 > 2)
        {
          v6 = 0;
          v7 = 3;
        }
        else
        {
          v6 = dword_100E370D8[v5];
          v7 = 7;
        }
        objc_msgSend(v4, "probabilityPositionContextStateIndoor");
        v9 = v8;
        objc_msgSend(v4, "probabilityPositionContextStateOutdoor");
        v11 = v10;

        v20[0] = v9;
        v20[1] = v11;
        v21 = v6;
        v22 = v7;
        v23 = 0;
        v24 = 0;
        objc_msgSend(v2, "setPositionContextClassification:", v20);
      }
      v12 = *(void **)(*(_QWORD *)(a1 + 40) + 48);
      if (!v12)
      {
        v13 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
        v14 = *(_QWORD *)(a1 + 40);
        v15 = *(void **)(v14 + 48);
        *(_QWORD *)(v14 + 48) = v13;

        v12 = *(void **)(*(_QWORD *)(a1 + 40) + 48);
      }
      objc_msgSend(v12, "addObject:", v2);
    }

  }
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "crowdsourcingDetails"));

  if (v16)
  {
    v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "crowdsourcingDetails"));
    v18 = *(_QWORD *)(a1 + 40);
    v19 = *(void **)(v18 + 136);
    *(_QWORD *)(v18 + 136) = v17;

  }
}

void sub_100404360(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;

  if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112))
  {
    v2 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(v3 + 112);
    *(_QWORD *)(v3 + 112) = v2;

  }
  v9 = objc_alloc_init((Class)GEOVLFARState);
  objc_msgSend(v9, "setRelativeTimestampMs:", ((*(double *)(a1 + 48) - *(double *)(*(_QWORD *)(a1 + 32) + 24)) * 1000.0));
  v5 = objc_msgSend(*(id *)(a1 + 40), "state");
  if ((unint64_t)v5 < 4)
    v6 = ((_DWORD)v5 + 1);
  else
    v6 = 0;
  objc_msgSend(v9, "setGeoTrackingState:", v6);
  v7 = objc_msgSend(*(id *)(a1 + 40), "stateReason");
  if ((unint64_t)v7 < 9)
    v8 = ((_DWORD)v7 + 1);
  else
    v8 = 0;
  objc_msgSend(v9, "setGeoTrackingStateReason:", v8);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 112), "addObject:", v9);

}

void sub_1004044A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  id v7;

  if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 128))
  {
    v2 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(v3 + 128);
    *(_QWORD *)(v3 + 128) = v2;

  }
  v7 = objc_alloc_init((Class)GEOVLFDeviceOrientation);
  objc_msgSend(v7, "setRelativeTimestampMs:", ((*(double *)(a1 + 40) - *(double *)(*(_QWORD *)(a1 + 32) + 24)) * 1000.0));
  v5 = *(_QWORD *)(a1 + 48);
  if (v5 < 4)
    v6 = (v5 + 1);
  else
    v6 = 0;
  objc_msgSend(v7, "setOrientation:", v6);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "addObject:", v7);

}

id sub_100404A5C()
{
  if (qword_1014D2430 != -1)
    dispatch_once(&qword_1014D2430, &stru_1011B53D0);
  return (id)qword_1014D2428;
}

void sub_100404B2C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFSessionAnalyticsCapturer");
  v2 = (void *)qword_1014D2428;
  qword_1014D2428 = (uint64_t)v1;

}

id sub_100404DC8()
{
  if (qword_1014D2440 != -1)
    dispatch_once(&qword_1014D2440, &stru_1011B5480);
  return (id)qword_1014D2438;
}

void sub_10040596C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100405990(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "refreshRoutesForced:", *(_BYTE *)(*(_QWORD *)(a1 + 32) + 8) == 0);

}

void sub_1004060E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100406110(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  unsigned int v5;
  id v6;
  NSObject *v7;
  void *v8;
  id WeakRetained;
  uint8_t v10[16];
  uint8_t buf[16];

  v2 = sub_100404DC8();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "route freshness limit reached", buf, 2u);
  }

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MKLocationManager sharedLocationManager](MKLocationManager, "sharedLocationManager"));
  v5 = objc_msgSend(v4, "isLastLocationStale");

  if (v5)
  {
    v6 = sub_100404DC8();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "skipping time based refresh as the current location is stale", v10, 2u);
    }

    v8 = *(void **)(a1 + 32);
    WeakRetained = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 0, 0));
    objc_msgSend(v8, "_preparePeriodicRouteRefreshTimerWithError:", WeakRetained);
  }
  else
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(WeakRetained, "refreshRoutesForced:", 1);
  }

}

void sub_100406720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10040674C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  NSObject *WeakRetained;
  int v10;
  id v11;

  v5 = a2;
  v6 = a3;
  v7 = sub_100404DC8();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  WeakRetained = v8;
  if (v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v10 = 138412290;
      v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, WeakRetained, OS_LOG_TYPE_ERROR, "Error occurred while waiting for a location update: %@", (uint8_t *)&v10, 0xCu);
    }
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v10 = 138477827;
      v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, WeakRetained, OS_LOG_TYPE_INFO, "Got a location update: %{private}@; force refreshing routes now",
        (uint8_t *)&v10,
        0xCu);
    }

    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    -[NSObject refreshRoutesForced:](WeakRetained, "refreshRoutesForced:", 1);
  }

}

void sub_100406E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100406E88(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100406E98(uint64_t a1)
{

}

void sub_100406EA4(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_1004073F4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "RoutePlanningUpdater");
  v2 = (void *)qword_1014D2438;
  qword_1014D2438 = (uint64_t)v1;

}

void sub_100407990(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  unsigned int v14;
  void *v15;
  id v16;
  id v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  NSObject *v25;
  void *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint8_t buf[4];
  id v33;
  __int16 v34;
  void *v35;
  _BYTE v36[128];

  v3 = a2;
  v4 = sub_10043214C();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    v33 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Processing item source item: %@", buf, 0xCu);
  }

  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v6 = *(id *)(a1 + 32);
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v28, v36, 16);
  if (v7)
  {
    v27 = a1;
    v8 = *(_QWORD *)v29;
    while (2)
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v29 != v8)
          objc_enumerationMutation(v6);
        v10 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)i);
        v11 = sub_10043214C();
        v12 = objc_claimAutoreleasedReturnValue(v11);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v33 = v10;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Checking against compound item: %@", buf, 0xCu);
        }

        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "items"));
        v14 = objc_msgSend(v13, "containsObject:", v3);

        if (v14)
        {
          v17 = sub_10043214C();
          v18 = objc_claimAutoreleasedReturnValue(v17);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "items"));
            *(_DWORD *)buf = 138412290;
            v33 = v19;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Found a match in items array: %@", buf, 0xCu);

          }
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "styleAttributes"));
          v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "styleAttributes"));

          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "clientFeatureID"));
          v16 = objc_msgSend(v21, "clientFeatureID");

          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "title"));
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "value"));

          goto LABEL_17;
        }
      }
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v28, v36, 16);
      if (v7)
        continue;
      break;
    }
    v15 = 0;
    v16 = 0;
LABEL_17:
    a1 = v27;
  }
  else
  {
    v15 = 0;
    v16 = 0;
  }

  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKey:", v3));
  v24 = sub_10043214C();
  v25 = objc_claimAutoreleasedReturnValue(v24);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
  {
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "shortDescription"));
    *(_DWORD *)buf = 138412547;
    v33 = v7;
    v34 = 2113;
    v35 = v26;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "Applying custom attributes %@ to waypoint %{private}@", buf, 0x16u);

  }
  objc_msgSend(v23, "setStyleAttributes:", v7);
  if (objc_msgSend(v7, "isCustomPOI"))
  {
    objc_msgSend(v23, "setClientFeatureID:", v16);
    if (objc_msgSend(v15, "length"))
      objc_msgSend(v23, "setUserValuesName:", v15);
  }

}

void sub_100408370(id a1)
{
  AddressBookManager *v1;
  void *v2;

  v1 = objc_alloc_init(AddressBookManager);
  v2 = (void *)qword_1014D2448;
  qword_1014D2448 = (uint64_t)v1;

}

id sub_100408630()
{
  if (qword_1014D24A0 != -1)
    dispatch_once(&qword_1014D24A0, &stru_1011B5610);
  return (id)qword_1014D2498;
}

void sub_100408A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  void *v17;
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  objc_sync_exit(v17);
  _Unwind_Resume(a1);
}

void sub_100408ABC(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "setNeedsAddressCollection");
    WeakRetained = v2;
  }

}

id sub_100409078(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "collectAddresses");
}

void sub_100409470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10040949C(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  id v5;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    if (*((id *)WeakRetained + 5) == v5)
    {
      *((_QWORD *)WeakRetained + 5) = 0;

    }
    objc_msgSend(v4, "collectAddresses");
  }

}

void sub_100409728(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  void *v5;
  objc_class *v6;
  NSString *v7;
  void *v8;
  void *v9;
  void *v10;
  __CFString *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  _QWORD v18[22];
  uint8_t buf[4];
  __CFString *v20;

  v2 = sub_100408630();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(id *)(a1 + 32);
    v5 = v4;
    if (!v4)
    {
      v11 = CFSTR("<nil>");
      goto LABEL_10;
    }
    v6 = (objc_class *)objc_opt_class(v4);
    v7 = NSStringFromClass(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if ((objc_opt_respondsToSelector(v5, "accessibilityIdentifier") & 1) != 0)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "performSelector:", "accessibilityIdentifier"));
      v10 = v9;
      if (v9 && !objc_msgSend(v9, "isEqualToString:", v8))
      {
        v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v8, v5, v10));

        goto LABEL_8;
      }

    }
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v8, v5));
LABEL_8:

LABEL_10:
    *(_DWORD *)buf = 138543362;
    v20 = v11;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%{public}@] initialising CN properties to fetch", buf, 0xCu);

  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[CNContactFormatter descriptorForRequiredKeysForStyle:](CNContactFormatter, "descriptorForRequiredKeysForStyle:", 0));
  v18[0] = v12;
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[CNContactContentViewController descriptorForRequiredKeys](CNContactContentViewController, "descriptorForRequiredKeys"));
  v18[1] = v13;
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[CNMonogrammer descriptorForRequiredKeysIncludingImage:](CNMonogrammer, "descriptorForRequiredKeysIncludingImage:", 1));
  v18[2] = v14;
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[CNContactVCardSerialization descriptorForRequiredKeys](CNContactVCardSerialization, "descriptorForRequiredKeys"));
  v18[3] = v15;
  v18[4] = CNContactNamePrefixKey;
  v18[5] = CNContactGivenNameKey;
  v18[6] = CNContactMiddleNameKey;
  v18[7] = CNContactFamilyNameKey;
  v18[8] = CNContactNameSuffixKey;
  v18[9] = CNContactNicknameKey;
  v18[10] = CNContactPhoneticGivenNameKey;
  v18[11] = CNContactPhoneticMiddleNameKey;
  v18[12] = CNContactPhoneticFamilyNameKey;
  v18[13] = CNContactOrganizationNameKey;
  v18[14] = CNContactTypeKey;
  v18[15] = CNContactPhoneNumbersKey;
  v18[16] = CNContactEmailAddressesKey;
  v18[17] = CNContactPostalAddressesKey;
  v18[18] = CNContactUrlAddressesKey;
  v18[19] = CNContactImageDataAvailableKey;
  v18[20] = CNContactImageDataKey;
  v18[21] = CNContactThumbnailImageDataKey;
  v16 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v18, 22));
  v17 = (void *)qword_1014D2458;
  qword_1014D2458 = v16;

}

void sub_100409B70(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  void *v4;
  id v5;
  unsigned int v6;
  unint64_t v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  os_log_type_t v11;
  id v12;
  void *v13;
  unint64_t v14;
  objc_class *v15;
  NSString *v16;
  void *v17;
  void *v18;
  void *v19;
  __CFString *v20;
  uint64_t v21;
  __CFString *v22;
  id v23;
  void *v24;
  objc_class *v25;
  NSString *v26;
  void *v27;
  void *v28;
  void *v29;
  __CFString *v30;
  void *v31;
  __CFString *v32;
  __CFString *v33;
  uint64_t v34;
  id v35;
  unint64_t v36;
  id v37;
  NSObject *v38;
  NSObject *v39;
  int v40;
  id v41;
  void *v42;
  objc_class *v43;
  NSString *v44;
  void *v45;
  void *v46;
  void *v47;
  __CFString *v48;
  __CFString *v49;
  id v50;
  void *v51;
  objc_class *v52;
  NSString *v53;
  void *v54;
  void *v55;
  void *v56;
  __CFString *v57;
  __CFString *v58;
  __CFString *v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  os_log_type_t type;
  unint64_t typea;
  unsigned int v66;
  unint64_t v67;
  unint64_t v68;
  id v69;
  id v70;
  id *v71;
  id *v72;
  id v73;
  id v74;
  uint8_t buf[4];
  __CFString *v76;
  __int16 v77;
  __CFString *v78;
  __int16 v79;
  __CFString *v80;
  __int16 v81;
  unint64_t v82;

  v2 = (id *)(a1 + 48);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "contactStore"));

  if (v4)
  {
    v5 = objc_alloc_init((Class)CNSaveRequest);
    objc_msgSend(v5, "addContact:toContainerWithIdentifier:", *(_QWORD *)(a1 + 32), 0);
    v74 = 0;
    v6 = objc_msgSend(v4, "executeSaveRequest:error:", v5, &v74);
    v7 = (unint64_t)v74;
    v8 = sub_100408630();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    v10 = v9;
    if (v7)
      v11 = OS_LOG_TYPE_ERROR;
    else
      v11 = OS_LOG_TYPE_INFO;
    if (!os_log_type_enabled(v9, v11))
      goto LABEL_27;
    v66 = v6;
    v12 = objc_loadWeakRetained(v2);
    v13 = v12;
    v71 = v2;
    if (!v12)
    {
      v20 = CFSTR("<nil>");
LABEL_16:

      v22 = v20;
      v23 = *(id *)(a1 + 32);
      v24 = v23;
      v69 = v5;
      type = v11;
      if (!v23)
      {
        v31 = v4;
        v30 = CFSTR("<nil>");
        v2 = v71;
        goto LABEL_24;
      }
      v67 = v7;
      v25 = (objc_class *)objc_opt_class(v23);
      v26 = NSStringFromClass(v25);
      v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
      if ((objc_opt_respondsToSelector(v24, "accessibilityIdentifier") & 1) != 0)
      {
        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "performSelector:", "accessibilityIdentifier"));
        v29 = v28;
        if (v28 && !objc_msgSend(v28, "isEqualToString:", v27))
        {
          v30 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v27, v24, v29));

          goto LABEL_22;
        }

      }
      v30 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v27, v24));
LABEL_22:
      v31 = v4;

      v2 = v71;
      v7 = v67;
LABEL_24:

      v32 = CFSTR("NO");
      *(_DWORD *)buf = 138544130;
      v76 = v22;
      v6 = v66;
      if (v66)
        v32 = CFSTR("YES");
      v77 = 2114;
      v78 = v30;
      v79 = 2114;
      v80 = v32;
      v81 = 2114;
      v82 = v7;
      v33 = v32;
      _os_log_impl((void *)&_mh_execute_header, v10, type, "[%{public}@] addressBookCreateMe addContact with %{public}@ (success: %{public}@, error: %{public}@)", buf, 0x2Au);

      v5 = v69;
      v4 = v31;
LABEL_27:

      if (!v6)
      {
        v35 = 0;
        v36 = 0;
LABEL_53:
        if (!(v7 | v36))
        {
          v60 = objc_loadWeakRetained(v2);
          objc_msgSend(v60, "setNeedsAddressCollection");

        }
        v61 = *(_QWORD *)(a1 + 40);
        if (v61)
        {
          if (v7)
            v62 = v7;
          else
            v62 = v36;
          (*(void (**)(uint64_t, id, unint64_t))(v61 + 16))(v61, v35, v62);
        }

        goto LABEL_61;
      }
      v34 = *(_QWORD *)(a1 + 32);
      v73 = 0;
      v35 = objc_msgSend(v4, "setMeContact:error:", v34, &v73);
      v36 = (unint64_t)v73;
      v37 = sub_100408630();
      v38 = objc_claimAutoreleasedReturnValue(v37);
      v39 = v38;
      if (v36)
        v40 = 16;
      else
        v40 = 1;
      if (!os_log_type_enabled(v38, (os_log_type_t)v40))
      {
LABEL_52:

        goto LABEL_53;
      }
      typea = __PAIR64__(v35, v40);
      v41 = objc_loadWeakRetained(v2);
      v42 = v41;
      v72 = v2;
      v68 = v7;
      if (!v41)
      {
        v48 = CFSTR("<nil>");
LABEL_41:

        v49 = v48;
        v50 = *(id *)(a1 + 32);
        v51 = v50;
        v63 = v42;
        if (!v50)
        {
          v57 = CFSTR("<nil>");
          v2 = v72;
          goto LABEL_49;
        }
        v70 = v5;
        v52 = (objc_class *)objc_opt_class(v50);
        v53 = NSStringFromClass(v52);
        v54 = (void *)objc_claimAutoreleasedReturnValue(v53);
        if ((objc_opt_respondsToSelector(v51, "accessibilityIdentifier") & 1) != 0)
        {
          v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "performSelector:", "accessibilityIdentifier"));
          v56 = v55;
          if (v55 && !objc_msgSend(v55, "isEqualToString:", v54))
          {
            v57 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v54, v51, v56, v42, typea));

            goto LABEL_47;
          }

        }
        v57 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v54, v51));
LABEL_47:
        v2 = v72;

        v5 = v70;
LABEL_49:

        v58 = CFSTR("NO");
        *(_DWORD *)buf = 138544130;
        v76 = v49;
        v35 = (id)HIDWORD(typea);
        if (HIDWORD(typea))
          v58 = CFSTR("YES");
        v77 = 2114;
        v78 = v57;
        v79 = 2114;
        v80 = v58;
        v81 = 2114;
        v82 = v36;
        v59 = v58;
        _os_log_impl((void *)&_mh_execute_header, v39, (os_log_type_t)typea, "[%{public}@] addressBookCreateMe setMeContact with %{public}@ (success: %{public}@, error: %{public}@)", buf, 0x2Au);

        v7 = v68;
        goto LABEL_52;
      }
      v43 = (objc_class *)objc_opt_class(v41);
      v44 = NSStringFromClass(v43);
      v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
      if ((objc_opt_respondsToSelector(v42, "accessibilityIdentifier") & 1) != 0)
      {
        v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "performSelector:", "accessibilityIdentifier"));
        v47 = v46;
        if (v46 && !objc_msgSend(v46, "isEqualToString:", v45))
        {
          v48 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v45, v42, v47));

          goto LABEL_38;
        }

      }
      v48 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v45, v42));
LABEL_38:

      goto LABEL_41;
    }
    v14 = v7;
    v15 = (objc_class *)objc_opt_class(v12);
    v16 = NSStringFromClass(v15);
    v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    if ((objc_opt_respondsToSelector(v13, "accessibilityIdentifier") & 1) != 0)
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "performSelector:", "accessibilityIdentifier"));
      v19 = v18;
      if (v18 && !objc_msgSend(v18, "isEqualToString:", v17))
      {
        v20 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v17, v13, v19));

        goto LABEL_12;
      }

    }
    v20 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v17, v13));
LABEL_12:

    v7 = v14;
    goto LABEL_16;
  }
  v21 = *(_QWORD *)(a1 + 40);
  if (v21)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v21 + 16))(v21, 0, 0);
LABEL_61:

}

void sub_10040A2BC(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  void *v4;
  id v5;
  unint64_t v6;
  id v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  os_log_type_t v11;
  id v12;
  void *v13;
  char **v14;
  objc_class *v15;
  NSString *v16;
  void *v17;
  void *v18;
  void *v19;
  __CFString *v20;
  uint64_t v21;
  __CFString *v22;
  id v23;
  void *v24;
  objc_class *v25;
  NSString *v26;
  void *v27;
  char *v28;
  void *v29;
  void *v30;
  __CFString *v31;
  __CFString *v32;
  __CFString *v33;
  id v34;
  uint64_t v35;
  id *v36;
  os_log_type_t type;
  unsigned int v38;
  id v39;
  id v40;
  uint8_t buf[4];
  __CFString *v42;
  __int16 v43;
  __CFString *v44;
  __int16 v45;
  __CFString *v46;
  __int16 v47;
  id v48;

  v2 = (id *)(a1 + 48);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "contactStore"));

  if (v4)
  {
    v5 = objc_alloc_init((Class)CNSaveRequest);
    objc_msgSend(v5, "updateContact:", *(_QWORD *)(a1 + 32));
    v40 = 0;
    v6 = (unint64_t)objc_msgSend(v4, "executeSaveRequest:error:", v5, &v40);
    v7 = v40;
    v8 = sub_100408630();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    v10 = v9;
    if (v7)
      v11 = OS_LOG_TYPE_ERROR;
    else
      v11 = OS_LOG_TYPE_INFO;
    if (!os_log_type_enabled(v9, v11))
    {
LABEL_27:

      if (!v7)
      {
        v34 = objc_loadWeakRetained(v2);
        objc_msgSend(v34, "setNeedsAddressCollection");

      }
      v35 = *(_QWORD *)(a1 + 40);
      if (v35)
        (*(void (**)(uint64_t, unint64_t, id))(v35 + 16))(v35, v6, v7);

      goto LABEL_32;
    }
    type = v11;
    v39 = v5;
    v12 = objc_loadWeakRetained(v2);
    v13 = v12;
    v14 = &selRef__updateNavigationDisplayConfigurationForDisplayedStep_;
    v38 = v6;
    if (!v12)
    {
      v20 = CFSTR("<nil>");
LABEL_16:

      v22 = v20;
      v23 = *(id *)(a1 + 32);
      v24 = v23;
      v36 = v2;
      if (!v23)
      {
        v31 = CFSTR("<nil>");
        goto LABEL_24;
      }
      v25 = (objc_class *)objc_opt_class(v23);
      v26 = NSStringFromClass(v25);
      v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
      v28 = v14[486];
      if ((objc_opt_respondsToSelector(v24, v28) & 1) != 0)
      {
        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "performSelector:", v28));
        v30 = v29;
        if (v29 && !objc_msgSend(v29, "isEqualToString:", v27))
        {
          v31 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v27, v24, v30));

          goto LABEL_22;
        }

      }
      v31 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v27, v24));
LABEL_22:

LABEL_24:
      v32 = CFSTR("NO");
      *(_DWORD *)buf = 138544130;
      v42 = v22;
      v6 = v38;
      if (v38)
        v32 = CFSTR("YES");
      v43 = 2114;
      v44 = v31;
      v45 = 2114;
      v46 = v32;
      v47 = 2114;
      v48 = v7;
      v33 = v32;
      _os_log_impl((void *)&_mh_execute_header, v10, type, "[%{public}@] addressBookUpdateMe updateMe with %{public}@ (success: %{public}@, error: %{public}@)", buf, 0x2Au);

      v5 = v39;
      v2 = v36;
      goto LABEL_27;
    }
    v15 = (objc_class *)objc_opt_class(v12);
    v16 = NSStringFromClass(v15);
    v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    if ((objc_opt_respondsToSelector(v13, "accessibilityIdentifier") & 1) != 0)
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "performSelector:", "accessibilityIdentifier"));
      v19 = v18;
      if (v18 && !objc_msgSend(v18, "isEqualToString:", v17))
      {
        v20 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v17, v13, v19));

        goto LABEL_12;
      }

    }
    v20 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v17, v13));
LABEL_12:

    v14 = &selRef__updateNavigationDisplayConfigurationForDisplayedStep_;
    goto LABEL_16;
  }
  v21 = *(_QWORD *)(a1 + 40);
  if (v21)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v21 + 16))(v21, 0, 0);
LABEL_32:

}

void sub_10040B854(void *a1)
{
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];

  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "allValues", 0));
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v7;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v1);
        objc_msgSend(*(id *)(*((_QWORD *)&v6 + 1) + 8 * (_QWORD)v5), "_setSuppressStoreUpdateNotifications:", 0);
        v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    }
    while (v3);
  }

}

void sub_10040B940(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  void *v5;
  objc_class *v6;
  NSString *v7;
  void *v8;
  void *v9;
  void *v10;
  __CFString *v11;
  void *v12;
  uint8_t buf[4];
  __CFString *v14;

  v2 = sub_100408630();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(id *)(a1 + 32);
    v5 = v4;
    if (!v4)
    {
      v11 = CFSTR("<nil>");
      goto LABEL_10;
    }
    v6 = (objc_class *)objc_opt_class(v4);
    v7 = NSStringFromClass(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if ((objc_opt_respondsToSelector(v5, "accessibilityIdentifier") & 1) != 0)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "performSelector:", "accessibilityIdentifier"));
      v10 = v9;
      if (v9 && !objc_msgSend(v9, "isEqualToString:", v8))
      {
        v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v8, v5, v10));

        goto LABEL_8;
      }

    }
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v8, v5));
LABEL_8:

LABEL_10:
    *(_DWORD *)buf = 138543362;
    v14 = v11;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%{public}@] collectAddress: posting DidUpdateAddresses notification", buf, 0xCu);

  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v12, "postNotificationName:object:", off_1014A94B8, *(_QWORD *)(a1 + 32));

}

void sub_10040C07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10040C0A4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10040C0B4(uint64_t a1)
{

}

void sub_10040C0BC(uint64_t a1, void *a2, _BYTE *a3)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
  *a3 = 1;
}

void sub_10040D0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10040D0E8(uint64_t a1, void *a2, _BYTE *a3)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
  *a3 = 1;
}

void sub_10040D374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10040D398(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v5 = objc_claimAutoreleasedReturnValue(+[CNContactFormatter stringFromContact:style:](CNContactFormatter, "stringFromContact:style:", a2, 0));
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  *a3 = 1;
}

void sub_10040D644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10040D668(uint64_t a1, void *a2, _BYTE *a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "_maps_spokenNameForNavigation"));
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  *a3 = 1;
}

id sub_10040E5B8()
{
  if (qword_1014D24B0 != -1)
    dispatch_once(&qword_1014D24B0, &stru_1011B5630);
  return (id)qword_1014D24A8;
}

void sub_10040F95C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 120));
  _Unwind_Resume(a1);
}

void sub_10040F994(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "storeUpdated:", *(_QWORD *)(a1 + 32));
    WeakRetained = v3;
  }

}

void sub_10040F9D4(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  id v8;
  objc_class *v9;
  NSString *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];
  id v21;
  uint8_t buf[4];
  void *v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    if (*((id *)WeakRetained + 5) == v3)
    {
      *((_QWORD *)WeakRetained + 5) = 0;

    }
    v6 = sub_10040E5B8();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      goto LABEL_11;
    v8 = v5;
    v9 = (objc_class *)objc_opt_class(v8);
    v10 = NSStringFromClass(v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    if ((objc_opt_respondsToSelector(v8, "accessibilityIdentifier") & 1) != 0)
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "performSelector:", "accessibilityIdentifier"));
      v13 = v12;
      if (v12 && !objc_msgSend(v12, "isEqualToString:", v11))
      {
        v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v11, v8, v13));

        goto LABEL_10;
      }

    }
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v11, v8));
LABEL_10:

    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138543875;
    v23 = v14;
    v24 = 2113;
    v25 = v15;
    v26 = 2113;
    v27 = v16;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[%{public}@] ... will resolve contact %{private}@ address %{private}@ on background queue...", buf, 0x20u);

LABEL_11:
    v17 = objc_loadWeakRetained((id *)(a1 + 48));
    v18 = *(_QWORD *)(a1 + 32);
    v19 = *(_QWORD *)(a1 + 40);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_10040FC2C;
    v20[3] = &unk_1011B5518;
    objc_copyWeak(&v21, (id *)(a1 + 48));
    objc_msgSend(v17, "_resolveContactIdentifier:addressIdentifier:completion:", v18, v19, v20);

    objc_destroyWeak(&v21);
  }

}

void sub_10040FC10(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10040FC2C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  _QWORD block[4];
  id v10;
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10040FCF0;
  block[3] = &unk_1011AFF10;
  objc_copyWeak(&v12, (id *)(a1 + 32));
  v10 = v5;
  v11 = v6;
  v7 = v6;
  v8 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  objc_destroyWeak(&v12);
}

void sub_10040FCF0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "_handleResolvedAddress:geocodedMapItem:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_1004118C8(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSMapTable strongToStrongObjectsMapTable](NSMapTable, "strongToStrongObjectsMapTable"));
  v2 = (void *)qword_1014D2468;
  qword_1014D2468 = v1;

}

void sub_100411934(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v2 = (void *)qword_1014D2478;
  qword_1014D2478 = v1;

}

void sub_1004119A0(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = geo_dispatch_queue_create("com.apple.Maps.AddressBookAddress.fwdgeo");
  v2 = (void *)qword_1014D2488;
  qword_1014D2488 = v1;

}

void sub_100411C6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_100411C8C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_updateMapItemClientAttributes");
  v2 = *(_QWORD *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "geocodedMapItem"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "geocodingError"));
  (*(void (**)(uint64_t, void *, void *))(v2 + 16))(v2, v3, v4);

}

void sub_100411D0C(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  id v29;
  NSObject *v30;
  _BOOL4 v31;
  id v32;
  void *v33;
  objc_class *v34;
  NSString *v35;
  void *v36;
  void *v37;
  __CFString *v38;
  id v39;
  void *v40;
  objc_class *v41;
  NSString *v42;
  void *v43;
  void *v44;
  __CFString *v45;
  id v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  _QWORD v52[5];
  id v53;
  id v54;
  _QWORD v55[4];
  id v56;
  id v57;
  _QWORD v58[4];
  id v59;
  _QWORD block[4];
  id v61;
  uint8_t buf[4];
  __CFString *v63;
  __int16 v64;
  void *v65;

  v2 = (id *)(a1 + 48);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "addressDictionary"));
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "singleLineAddress"));
    v7 = (void *)v6;
    if (v5)
      v8 = v5;
    else
      v8 = (void *)v6;
    v9 = v8;
    if (!v9)
    {
      v14 = *(void **)(a1 + 40);
      if (v14)
      {
        v58[0] = _NSConcreteStackBlock;
        v58[1] = 3221225472;
        v58[2] = sub_1004124A4;
        v58[3] = &unk_1011ADA00;
        v59 = v14;
        dispatch_async((dispatch_queue_t)&_dispatch_main_q, v58);
        v12 = v59;
LABEL_44:

        goto LABEL_45;
      }
    }
    v10 = objc_msgSend((id)objc_opt_class(v4), "_geocodedMapItemsByAddress");
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKey:", v5));
    if (v12)
    {

      goto LABEL_13;
    }
    v15 = objc_msgSend((id)objc_opt_class(v4), "_geocodedMapItemsByAddress");
    v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectForKey:", v7));

    if (v12)
    {
LABEL_13:
      objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 120), v12);
      v17 = *(void **)(*(_QWORD *)(a1 + 32) + 128);
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 128) = 0;

      objc_msgSend(v4, "_updateMapItemClientAttributes");
      if (*(_QWORD *)(a1 + 40))
      {
        v55[0] = _NSConcreteStackBlock;
        v55[1] = 3221225472;
        v55[2] = sub_100412544;
        v55[3] = &unk_1011B0520;
        objc_copyWeak(&v57, v2);
        v56 = *(id *)(a1 + 40);
        dispatch_async((dispatch_queue_t)&_dispatch_main_q, v55);

        objc_destroyWeak(&v57);
      }
      goto LABEL_44;
    }
    v18 = *(void **)(a1 + 40);
    if (v18)
    {
      v19 = objc_msgSend(v18, "copy");
      v20 = objc_msgSend((id)objc_opt_class(v4), "_completionsByAddress");
      v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectForKeyedSubscript:", v9));

      if (v22)
      {
        v23 = objc_retainBlock(v19);
        objc_msgSend(v22, "addObject:", v23);

LABEL_43:
        v12 = 0;
        goto LABEL_44;
      }
      v24 = objc_retainBlock(v19);
      v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithObject:](NSMutableArray, "arrayWithObject:", v24));

      v26 = objc_msgSend((id)objc_opt_class(v4), "_completionsByAddress");
      v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
      objc_msgSend(v27, "setObject:forKeyedSubscript:", v25, v9);

    }
    v28 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
    v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "defaultTraits"));

    v29 = sub_10040E5B8();
    v30 = objc_claimAutoreleasedReturnValue(v29);
    v31 = os_log_type_enabled(v30, OS_LOG_TYPE_INFO);
    if (v5)
    {
      if (!v31)
      {
LABEL_38:

        v46 = objc_msgSend(objc_alloc((Class)GEOAddress), "initWithAddressDictionary:", v5);
        v47 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
        v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "ticketForForwardGeocodeAddress:traits:", v46, v51));

LABEL_42:
        v52[0] = _NSConcreteStackBlock;
        v52[1] = 3221225472;
        v52[2] = sub_1004125BC;
        v52[3] = &unk_1011B55F0;
        objc_copyWeak(&v54, v2);
        v52[4] = *(_QWORD *)(a1 + 32);
        v53 = v9;
        objc_msgSend(v48, "submitWithRefinedHandler:networkActivity:", v52, 0);

        objc_destroyWeak(&v54);
        goto LABEL_43;
      }
      v32 = objc_loadWeakRetained(v2);
      v33 = v32;
      if (!v32)
      {
        v38 = CFSTR("<nil>");
        goto LABEL_37;
      }
      v34 = (objc_class *)objc_opt_class(v32);
      v35 = NSStringFromClass(v34);
      v49 = (void *)objc_claimAutoreleasedReturnValue(v35);
      if ((objc_opt_respondsToSelector(v33, "accessibilityIdentifier") & 1) != 0)
      {
        v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "performSelector:", "accessibilityIdentifier"));
        v37 = v36;
        if (v36 && !objc_msgSend(v36, "isEqualToString:", v49))
        {
          v38 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v49, v33, v37));

          goto LABEL_27;
        }

      }
      v38 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v49, v33));
LABEL_27:

LABEL_37:
      *(_DWORD *)buf = 138543619;
      v63 = v38;
      v64 = 2113;
      v65 = v5;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "[%{public}@] will forward geocode address with dictionary %{private}@...", buf, 0x16u);

      goto LABEL_38;
    }
    if (!v31)
    {
LABEL_41:

      v46 = (id)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
      v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "ticketForForwardGeocodeString:traits:", v7, v51));
      goto LABEL_42;
    }
    v39 = objc_loadWeakRetained(v2);
    v40 = v39;
    if (!v39)
    {
      v45 = CFSTR("<nil>");
      goto LABEL_40;
    }
    v41 = (objc_class *)objc_opt_class(v39);
    v42 = NSStringFromClass(v41);
    v50 = (void *)objc_claimAutoreleasedReturnValue(v42);
    if ((objc_opt_respondsToSelector(v40, "accessibilityIdentifier") & 1) != 0)
    {
      v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "performSelector:", "accessibilityIdentifier"));
      v44 = v43;
      if (v43 && !objc_msgSend(v43, "isEqualToString:", v50))
      {
        v45 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v50, v40, v44));

        goto LABEL_35;
      }

    }
    v45 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v50, v40));
LABEL_35:

LABEL_40:
    *(_DWORD *)buf = 138543619;
    v63 = v45;
    v64 = 2113;
    v65 = v7;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "[%{public}@] will forward geocode address with string \"%{private}@\"...", buf, 0x16u);

    goto LABEL_41;
  }
  v13 = *(void **)(a1 + 40);
  if (v13)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100412404;
    block[3] = &unk_1011ADA00;
    v61 = v13;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
    v5 = v61;
LABEL_45:

  }
}

void sub_1004123E8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100412404(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  uint8_t v5[16];

  v2 = sub_10040E5B8();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "AddressBookAddress was deallocated while geocoding", v5, 2u);
  }

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSError GEOErrorWithCode:reason:](NSError, "GEOErrorWithCode:reason:", -13, CFSTR("No AddressBookAddress object available anymore")));
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_1004124A4(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  uint8_t v5[16];

  v2 = sub_10040E5B8();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "cannot forward geocode without addressDictionary or addressString", v5, 2u);
  }

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSError GEOErrorWithCode:reason:](NSError, "GEOErrorWithCode:reason:", -13, CFSTR("No addressDictionary or addressString available.")));
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_100412544(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = *(_QWORD *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "geocodedMapItem"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "geocodingError"));
  (*(void (**)(uint64_t, void *, void *))(v2 + 16))(v2, v3, v4);

}

void sub_1004125BC(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  id WeakRetained;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  id v13;
  id v14;
  _QWORD block[5];
  id v16;
  id v17;
  id v18;
  id v19;

  v6 = a4;
  v7 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "firstObject"));

  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 120), v9);
  objc_msgSend(WeakRetained, "_updateMapItemClientAttributes");
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 144), *(id *)(*(_QWORD *)(a1 + 32) + 120));
  v10 = objc_msgSend((id)objc_opt_class(WeakRetained), "_completionQueue");
  v11 = objc_claimAutoreleasedReturnValue(v10);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10041271C;
  block[3] = &unk_1011B55C8;
  objc_copyWeak(&v19, (id *)(a1 + 48));
  v12 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v16 = v12;
  v17 = v9;
  v18 = v6;
  v13 = v6;
  v14 = v9;
  dispatch_async(v11, block);

  objc_destroyWeak(&v19);
}

void sub_10041271C(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  id v4;
  NSObject *v5;
  id v6;
  void *v7;
  objc_class *v8;
  NSString *v9;
  void *v10;
  void *v11;
  void *v12;
  __CFString *v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  _QWORD block[4];
  id v24;
  id v25;
  id v26;
  id v27;
  uint8_t buf[4];
  __CFString *v29;
  __int16 v30;
  uint64_t v31;

  v2 = (id *)(a1 + 64);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 120))
  {
    v4 = sub_10040E5B8();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
LABEL_12:

      v15 = objc_msgSend((id)objc_opt_class(WeakRetained), "_geocodedMapItemsByAddress");
      v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      objc_msgSend(v16, "setObject:forKey:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 120), *(_QWORD *)(a1 + 40));

      goto LABEL_13;
    }
    v6 = objc_loadWeakRetained(v2);
    v7 = v6;
    if (!v6)
    {
      v13 = CFSTR("<nil>");
      goto LABEL_11;
    }
    v8 = (objc_class *)objc_opt_class(v6);
    v9 = NSStringFromClass(v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    if ((objc_opt_respondsToSelector(v7, "accessibilityIdentifier") & 1) != 0)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "performSelector:", "accessibilityIdentifier"));
      v12 = v11;
      if (v11 && !objc_msgSend(v11, "isEqualToString:", v10))
      {
        v13 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v10, v7, v12));

        goto LABEL_9;
      }

    }
    v13 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v10, v7));
LABEL_9:

LABEL_11:
    v14 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138543619;
    v29 = v13;
    v30 = 2113;
    v31 = v14;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[%{public}@] caching geocoded map item for key %{private}@", buf, 0x16u);

    goto LABEL_12;
  }
LABEL_13:
  v17 = objc_msgSend((id)objc_opt_class(WeakRetained), "_completionsByAddress");
  v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));

  v20 = objc_msgSend((id)objc_opt_class(WeakRetained), "_completionsByAddress");
  v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
  objc_msgSend(v21, "setObject:forKeyedSubscript:", 0, *(_QWORD *)(a1 + 40));

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1004129F4;
  block[3] = &unk_1011AFEC0;
  objc_copyWeak(&v27, v2);
  v24 = v19;
  v25 = *(id *)(a1 + 48);
  v26 = *(id *)(a1 + 56);
  v22 = v19;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  objc_destroyWeak(&v27);
}

void sub_1004129F4(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  void *v5;
  objc_class *v6;
  NSString *v7;
  void *v8;
  void *v9;
  void *v10;
  __CFString *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  void *i;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint8_t v22[128];
  uint8_t buf[4];
  __CFString *v24;
  __int16 v25;
  id v26;

  v2 = sub_10040E5B8();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = objc_loadWeakRetained((id *)(a1 + 56));
    v5 = v4;
    if (!v4)
    {
      v11 = CFSTR("<nil>");
      goto LABEL_10;
    }
    v6 = (objc_class *)objc_opt_class(v4);
    v7 = NSStringFromClass(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if ((objc_opt_respondsToSelector(v5, "accessibilityIdentifier") & 1) != 0)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "performSelector:", "accessibilityIdentifier"));
      v10 = v9;
      if (v9 && !objc_msgSend(v9, "isEqualToString:", v8))
      {
        v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v8, v5, v10));

        goto LABEL_8;
      }

    }
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v8, v5));
LABEL_8:

LABEL_10:
    v12 = objc_msgSend(*(id *)(a1 + 32), "count");
    *(_DWORD *)buf = 138543618;
    v24 = v11;
    v25 = 2048;
    v26 = v12;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%{public}@] calling back to %lu pending completion handlers", buf, 0x16u);

  }
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v13 = *(id *)(a1 + 32);
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v19;
    do
    {
      for (i = 0; i != v15; i = (char *)i + 1)
      {
        if (*(_QWORD *)v19 != v16)
          objc_enumerationMutation(v13);
        (*(void (**)(void))(*(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i) + 16))();
      }
      v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v15);
  }

}

void sub_100412DEC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "AddressBookManager");
  v2 = (void *)qword_1014D2498;
  qword_1014D2498 = (uint64_t)v1;

}

void sub_100412E1C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "AddressBookAddress");
  v2 = (void *)qword_1014D24A8;
  qword_1014D24A8 = (uint64_t)v1;

}

NSDictionary *__cdecl sub_100413CEC(id a1, NSDictionary *a2)
{
  id v2;
  void *v3;
  id v4;

  v2 = -[NSDictionary mutableCopy](a2, "mutableCopy");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont preferredFontForTextStyle:](UIFont, "preferredFontForTextStyle:", UIFontTextStyleSubheadline));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v3, NSFontAttributeName);

  v4 = objc_msgSend(v2, "copy");
  return (NSDictionary *)v4;
}

id sub_1004143CC(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = (void *)objc_opt_class(*(_QWORD *)(a1 + 32), a2);
  return _objc_msgSend(v2, "initializePairedDeviceRegistry");
}

void sub_100414468(id a1)
{

}

id sub_1004144F0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_createCompanionRoutesConnectionOnIsolationQueue");
}

void sub_1004147A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location,id a22)
{
  id *v22;
  id *v23;
  id *v24;
  id *v25;

  objc_destroyWeak(v25);
  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a22);
  _Unwind_Resume(a1);
}

void sub_1004147F4(uint64_t a1)
{
  _QWORD *WeakRetained;
  id v3;
  id v4;
  NSObject *v5;
  _BOOL4 v6;
  int v7;
  id v8;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = sub_10043380C();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_INFO);
  if (WeakRetained)
  {
    if (v6)
    {
      v7 = 138412290;
      v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "XPC connection invalidated; clearing connection ivar: %@",
        (uint8_t *)&v7,
        0xCu);
    }

    v5 = WeakRetained[2];
    WeakRetained[2] = 0;
  }
  else if (v6)
  {
    v7 = 138412290;
    v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "XPC connection invalidated; NanoCompanionController is gone: %@",
      (uint8_t *)&v7,
      0xCu);
  }

}

void sub_100414908(uint64_t a1)
{
  id *WeakRetained;
  id v3;
  id v4;
  NSObject *v5;
  _BOOL4 v6;
  int v7;
  id v8;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v3 = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = sub_10043380C();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_INFO);
  if (WeakRetained)
  {
    if (v6)
    {
      v7 = 138412290;
      v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "XPC connection interrupted, checkinForRoutePlanning on connection: %@", (uint8_t *)&v7, 0xCu);
    }

    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[2], "remoteObjectProxy"));
    -[NSObject checkinForRoutePlanning](v5, "checkinForRoutePlanning");
  }
  else if (v6)
  {
    v7 = 138412290;
    v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "XPC connection interrupted, NanoCompanionController is gone: %@", (uint8_t *)&v7, 0xCu);
  }

}

void sub_100414D70(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedMapsDelegate](UIApplication, "sharedMapsDelegate"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "appCoordinator"));
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "baseActionCoordinator"));

  objc_msgSend(v4, "viewController:doDirectionItem:withUserInfo:", 0, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

id sub_100415578(id a1, GEOComposedRoute *a2, unint64_t a3)
{
  return -[GEOComposedRoute uniqueRouteID](a2, "uniqueRouteID", a3);
}

void sub_100415884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1004158B0(_QWORD *a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v7;
  void *v8;
  unsigned int v9;
  id v10;
  NSObject *v11;
  id v12;
  void *v13;
  void *v14;
  uint8_t buf[4];
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  uint64_t v20;

  v7 = a2;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "uniqueRouteID"));
  v9 = objc_msgSend(v8, "isEqual:", a1[4]);

  if (v9)
  {
    v10 = sub_10043380C();
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      v12 = objc_msgSend(v7, "transportType");
      if (v12 >= 7)
        v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), v12));
      else
        v13 = *(&off_1011B5938 + (int)v12);
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "uniqueRouteID"));
      *(_DWORD *)buf = 138412802;
      v16 = v13;
      v17 = 2112;
      v18 = v14;
      v19 = 2048;
      v20 = a3;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Selecting %@ route %@ at index %lu", buf, 0x20u);

    }
    *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = a3;
    *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
    *a4 = 1;
  }

}

void sub_100415D54(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 96), "currentSession"));

  if (v2)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 96), "popUntil:", &stru_1011B5740);
}

BOOL sub_100415DA8(id a1, MapsSession *a2)
{
  MapsSession *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v2 = a2;
  v4 = objc_opt_class(RoutePlanningSession, v3);
  if ((objc_opt_isKindOfClass(v2, v4) & 1) != 0)
  {
    v6 = 0;
  }
  else
  {
    v7 = objc_opt_class(NavigationSession, v5);
    v6 = objc_opt_isKindOfClass(v2, v7) ^ 1;
  }

  return v6 & 1;
}

id sub_1004160E8(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 96), "popUntil:", &stru_1011B5760);
}

BOOL sub_1004160FC(id a1, MapsSession *a2)
{
  MapsSession *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v2 = a2;
  v4 = objc_opt_class(RoutePlanningSession, v3);
  if ((objc_opt_isKindOfClass(v2, v4) & 1) != 0)
  {
    v6 = 0;
  }
  else
  {
    v7 = objc_opt_class(NavigationSession, v5);
    v6 = objc_opt_isKindOfClass(v2, v7) ^ 1;
  }

  return v6 & 1;
}

void sub_1004166BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a53, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100416724(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100416734(uint64_t a1)
{

}

void sub_10041673C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "routes"));
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

  v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "currentRoute"));
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "uniqueRouteID"));
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

}

void sub_1004167BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v3 = _geo_NSErrorXPCSafeRepresentationCopy(a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

}

GEOComposedRoute *__cdecl sub_1004167F4(id a1, GEOComposedRoute *a2, unint64_t a3)
{
  GEOComposedRoute *v4;
  GEOComposedRoute *v5;
  GEOComposedRoute *v6;

  v4 = a2;
  v5 = v4;
  if (a3 <= 4)
    v6 = v4;
  else
    v6 = 0;

  return v6;
}

void sub_100416B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

void sub_100416BB4(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

id sub_100416BC8(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "uniqueRouteID"));
  v4 = objc_msgSend(v3, "isEqual:", *(_QWORD *)(a1 + 32));

  return v4;
}

void sub_100416C88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  NSObject *v8;
  id v9;
  NSObject *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  id v15;
  int v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_opt_class(RoutePlanningSession);
  if ((objc_opt_isKindOfClass(v2, v3) & 1) != 0
    || (v4 = *(_QWORD *)(a1 + 32),
        v5 = objc_opt_class(NavigationSession),
        (objc_opt_isKindOfClass(v4, v5) & 1) != 0)
    || (v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "routePlanningSession")),
        v6,
        !v6))
  {
    v9 = sub_10043380C();
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v11 = *(_QWORD *)(a1 + 32);
      v16 = 138412290;
      v17 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Observed session change.  Will not teardown, session is: %@", (uint8_t *)&v16, 0xCu);
    }

  }
  else
  {
    v7 = sub_10043380C();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      LOWORD(v16) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Observed session change.  Will teardown NanoMaps' route planning", (uint8_t *)&v16, 2u);
    }

    objc_msgSend(*(id *)(a1 + 40), "_clearRoutePreviews");
  }
  v12 = *(id *)(a1 + 32);
  v13 = objc_opt_class(RoutePlanningSession);
  if ((objc_opt_isKindOfClass(v12, v13) & 1) != 0)
    v14 = v12;
  else
    v14 = 0;
  v15 = v14;

  objc_msgSend(*(id *)(a1 + 40), "setRoutePlanningSession:", v15);
}

void sub_100416F60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 == 2)
  {
    objc_msgSend(*(id *)(a1 + 32), "setDestinationName:", 0);
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(v3 + 64);
    *(_QWORD *)(v3 + 64) = 0;

  }
  else if (v2 == 1)
  {
    _objc_msgSend(*(id *)(a1 + 32), "_updateDestinationName");
  }
}

id sub_100417040(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "isSuccess");
  if ((_DWORD)result)
    return _objc_msgSend(*(id *)(a1 + 40), "_updateDestinationName");
  return result;
}

void sub_1004170F4(uint64_t a1)
{
  void *v2;
  void *v3;
  char *v4;
  uint64_t v5;
  void *v6;
  id v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "configuration"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "companionContext"));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "setCompanionRouteContext:", v3);

  v4 = (char *)objc_msgSend(*(id *)(a1 + 40), "currentTransportType");
  if ((unint64_t)(v4 - 1) > 4)
    v5 = 4;
  else
    v5 = dword_100E37140[(_QWORD)(v4 - 1)];
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "setTransportType:", v5);
  v6 = *(void **)(a1 + 32);
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "currentRouteCollectionResult"));
  objc_msgSend(v6, "_updateResponseWithRouteCollectionResult:", v7);

}

id sub_100417254(uint64_t a1)
{
  id v2;
  id result;

  v2 = *(id *)(a1 + 56);
  result = objc_msgSend(*(id *)(a1 + 32), "currentTransportType");
  if (v2 == result)
    return objc_msgSend(*(id *)(a1 + 40), "_updateResponseWithRouteCollectionResult:", *(_QWORD *)(a1 + 48));
  return result;
}

id sub_100417340(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_updateResponseWithRoutesResult:routeUpdates:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_1004173CC(uint64_t a1)
{
  void *v2;
  void *v3;
  unsigned __int8 v4;
  id v5;
  NSObject *v6;
  _BOOL4 v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;

  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "containsObject:", *(_QWORD *)(a1 + 40)))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "snapshot"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "deltaFromSnapshot:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72)));
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 72), v2);
    v4 = objc_msgSend(v3, "routeRevisionsChanged");
    v5 = sub_10043380C();
    v6 = objc_claimAutoreleasedReturnValue(v5);
    v7 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
    if ((v4 & 1) != 0)
    {
      if (v7)
      {
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "uniqueRouteID"));
        v10 = 138543362;
        v11 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Route %{public}@ updated clustered ride selections, will trigger response update", (uint8_t *)&v10, 0xCu);

      }
      objc_msgSend(*(id *)(a1 + 32), "_sendUpdatedResponse");
    }
    else
    {
      if (v7)
      {
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "uniqueRouteID"));
        v10 = 138543362;
        v11 = v9;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Route %{public}@ updated clustered ride selections, but revision IDs didn't change from last sent to watch", (uint8_t *)&v10, 0xCu);

      }
    }

  }
}

void sub_10041786C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100417898(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id WeakRetained;
  void *v5;
  void *v6;
  int v7;
  void *v8;

  v2 = sub_10043380C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "sessionContext"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "simpleDescription"));
    v7 = 138412290;
    v8 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "-_sendUpdatedResponse completed (context:%@)", (uint8_t *)&v7, 0xCu);

  }
}

void sub_100417E94(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  id v22;

  v22 = a2;
  v5 = a3;
  v6 = v5;
  if (v5)
  {
    v7 = v5;
  }
  else
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "waypointRequest"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "waypointPlaceholder"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "displayableMarker"));

    if ((objc_msgSend(v8, "isCurrentLocation") & 1) != 0 || !v10)
    {
      objc_msgSend(v8, "coordinate");
      v15 = v14;
      v17 = v16;
      v18 = objc_msgSend(v8, "isCurrentLocation");
      v19 = objc_alloc((Class)GEOLocation);
      GEOLocationCoordinate2DFromCLLocationCoordinate2D(v15, v17);
      v12 = objc_msgSend(v19, "initWithGEOCoordinate:isUserLocation:", v18);
      v7 = objc_msgSend(objc_alloc((Class)GEOComposedWaypoint), "initWithLocation:isCurrentLocation:", v12, v18);
    }
    else
    {
      v11 = objc_alloc((Class)GEOComposedWaypoint);
      v12 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "mapItem"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "_geoMapItem"));
      v7 = objc_msgSend(v11, "initWithMapItem:", v13);

    }
  }
  v20 = objc_msgSend(objc_alloc((Class)GEOCompanionWaypoint), "initWithComposedWaypoint:", v7);
  if ((objc_msgSend(v20, "isCurrentLocation") & 1) == 0)
  {
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[RoutePlanningSession mostAppropriateNameForWaypointWithRequest:composedWaypoint:](RoutePlanningSession, "mostAppropriateNameForWaypointWithRequest:composedWaypoint:", v22, v7));
    objc_msgSend(v20, "setSearchString:", v21);

  }
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v20);

}

void sub_100418310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100418328(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_100418764(uint64_t a1)
{
  void *v2;
  char v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapsActivityDelegate"));
  v3 = objc_opt_respondsToSelector(v2, "mapsActivityViewControllerPrint:");

  if ((v3 & 1) != 0)
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapsActivityDelegate"));
    objc_msgSend(v4, "mapsActivityViewControllerPrint:", *(_QWORD *)(a1 + 32));

  }
}

void sub_100418DA4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "MapsActivityViewController");
  v2 = (void *)qword_1014D24C0;
  qword_1014D24C0 = (uint64_t)v1;

}

id sub_100419530()
{
  if (qword_1014D24D8 != -1)
    dispatch_once(&qword_1014D24D8, &stru_1011B5990);
  return (id)qword_1014D24D0;
}

void sub_100419AB0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFSessionHistoricalLocationAccuracyMonitor");
  v2 = (void *)qword_1014D24D0;
  qword_1014D24D0 = (uint64_t)v1;

}

void sub_10041A008(uint64_t a1)
{
  id v2;

  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 120) = 2;
  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "postNotificationName:object:", CFSTR("PPTTest_GuidesHome_DidDisplaySections"), *(_QWORD *)(a1 + 32));

}

uint64_t sub_10041A128(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 32) + 120) = 2;
  return result;
}

void sub_10041A29C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

id *sub_10041A2C4(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id *v7;
  id WeakRetained;
  void *v9;
  void *v10;
  __objc2_class *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  __int128 v31;
  __int128 v32;

  v5 = a2;
  v6 = a3;
  v7 = a1 + 5;
  WeakRetained = objc_loadWeakRetained(a1 + 5);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "logicController"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "sectionAtIndex:", objc_msgSend(v6, "section")));

  if (v10)
  {
    objc_msgSend(v10, "configuration");

    switch((uint64_t)v32)
    {
      case 0:
        goto LABEL_5;
      case 1:
        v11 = CollectionsFilterCell;
        goto LABEL_11;
      case 2:
        v11 = (__objc2_class *)MKPlaceCompactCollectionCell;
        goto LABEL_11;
      case 3:
        v11 = (__objc2_class *)MKPlaceCollectionCell;
        goto LABEL_11;
      case 4:
      case 6:
        v11 = PlaceCollectionListCell;
LABEL_11:
        v20 = (void *)objc_claimAutoreleasedReturnValue(-[__objc2_class reuseIdentifier](v11, "reuseIdentifier"));
        a1 = (id *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "dequeueReusableCellWithReuseIdentifier:forIndexPath:", v20, v6));

        v21 = objc_loadWeakRetained(v7);
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "logicController"));
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "itemsForSectionAtIndex:", objc_msgSend(v6, "section")));

        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectAtIndex:", objc_msgSend(v6, "item")));
        objc_msgSend(a1, "configureWithModel:", v23);

        goto LABEL_12;
      case 5:
        v25 = (void *)objc_claimAutoreleasedReturnValue(+[TwoLineCollectionViewListCell identifier](TwoLineCollectionViewListCell, "identifier"));
        a1 = (id *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "dequeueReusableCellWithReuseIdentifier:forIndexPath:", v25, v6));

        v26 = objc_loadWeakRetained(v7);
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "logicController"));
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "itemsForSectionAtIndex:", objc_msgSend(v6, "section")));

        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectAtIndex:", objc_msgSend(v6, "item")));
        objc_msgSend(a1, "setViewModel:", v28);

        objc_msgSend(a1, "updateLeadingSpace:", 0.0);
        goto LABEL_12;
      case 7:
        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "logicController"));
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "itemsForSectionAtIndex:", objc_msgSend(v6, "section")));
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "firstObject"));

        a1 = (id *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "dequeueReusableCellWithReuseIdentifier:forIndexPath:", v17, v6));
        objc_msgSend(a1, "startedLoadingBatch");
        goto LABEL_12;
      default:
        goto LABEL_13;
    }
  }
  v31 = 0u;
  v32 = 0u;
LABEL_5:
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[GuidesHomeHeaderCell reuseIdentifier](GuidesHomeHeaderCell, "reuseIdentifier", v31, v32));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "dequeueReusableCellWithReuseIdentifier:forIndexPath:", v12, v6));
  objc_msgSend(a1[4], "setHeaderCell:", v13);

  v14 = objc_loadWeakRetained(a1 + 5);
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "logicController"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "itemsForSectionAtIndex:", objc_msgSend(v6, "section")));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "firstObject"));

  if (v17)
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "headerCell"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "routingDelegate"));
    objc_msgSend(v18, "configureWithGuidesHomeHeaderViewModel:delegate:", v17, v19);

  }
  a1 = (id *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "headerCell"));
LABEL_12:

LABEL_13:
  return a1;
}

void sub_10041A7A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_10041A7CC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id *v10;
  id WeakRetained;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  unsigned int v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  unsigned __int8 v27;
  void *v28;
  void *v29;
  id v31;
  _QWORD v32[4];
  id v33;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "logicController"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "allSections"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectAtIndex:", objc_msgSend(v9, "section")));

  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "sectionTitle"));
  if (v15)
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[GuidesGenericSectionHeader reuseIdentifier](GuidesGenericSectionHeader, "reuseIdentifier"));
    v17 = objc_msgSend(v8, "isEqualToString:", v16);

    if (v17)
    {
      v31 = v7;
      v18 = objc_loadWeakRetained((id *)(a1 + 40));
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "collectionView"));
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[GuidesGenericSectionHeader reuseIdentifier](GuidesGenericSectionHeader, "reuseIdentifier"));
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[GuidesGenericSectionHeader reuseIdentifier](GuidesGenericSectionHeader, "reuseIdentifier"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath:", v20, v21, v9));

      v22 = objc_alloc((Class)NSAttributedString);
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "sectionTitle"));
      v24 = objc_msgSend(v22, "initWithString:attributes:", v23, *(_QWORD *)(a1 + 32));

      if (objc_msgSend(v14, "kind") == (id)2
        && (v25 = objc_loadWeakRetained(v10),
            v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "apiController")),
            v27 = objc_msgSend(v26, "isCuratedGuidesHome"),
            v26,
            v25,
            (v27 & 1) == 0))
      {
        v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "localizedStringForKey:value:table:", CFSTR("More [City Guides Section]"), CFSTR("localized string not found"), 0));
        v32[0] = _NSConcreteStackBlock;
        v32[1] = 3221225472;
        v32[2] = sub_10041AA80;
        v32[3] = &unk_1011AD260;
        objc_copyWeak(&v33, v10);
        objc_msgSend(v15, "configureWithTitle:actionButtonTitle:actionHandler:", v24, v29, v32);

        objc_destroyWeak(&v33);
      }
      else
      {
        objc_msgSend(v15, "configureWithTitle:", v24, v31);
      }

      v7 = v31;
    }
    else
    {
      v15 = 0;
    }
  }

  return v15;
}

void sub_10041AA6C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10041AA80(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  void *v4;
  id v5;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "analyticsManager"));
  objc_msgSend(v3, "guidesHomeCityGuidesMoreButtonTapped");

  v5 = objc_loadWeakRetained(v1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "routingDelegate"));
  objc_msgSend(v4, "routeToCitySelector");

}

void sub_10041ABBC(uint64_t a1, void *a2, uint64_t a3)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;

  v4 = *(void **)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  v6 = a2;
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "logicController"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "itemsForSectionAtIndex:", a3));
  objc_msgSend(v4, "appendItemsWithIdentifiers:intoSectionWithIdentifier:", v7, v6);

}

void sub_10041B0A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10041B0BC(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v7;
  void *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  v7 = a2;
  v8 = v7;
  if (v7)
  {
    objc_msgSend(v7, "configuration");
    v9 = v11;

    if (v9 == 1)
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a3;
      *a4 = 1;
    }
  }
  else
  {
    v10 = 0u;
    v11 = 0u;
  }

}

void sub_10041B654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10041B66C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10041B67C(uint64_t a1)
{

}

void sub_10041B684(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  __int128 v14;
  __int128 v15;

  v7 = a2;
  v8 = v7;
  if (v7)
  {
    objc_msgSend(v7, "configuration");
    v9 = v15;

    if (v9 == 1)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "logicController"));
      v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "itemsForSectionAtIndex:", a3));
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v13 = *(void **)(v12 + 40);
      *(_QWORD *)(v12 + 40) = v11;

      *a4 = 1;
    }
  }
  else
  {
    v14 = 0u;
    v15 = 0u;
  }

}

void sub_10041B9A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10041B9D0(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "filterDataFetchFinished");
    WeakRetained = v2;
  }

}

void sub_10041BE68(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  __int128 v11;
  __int128 v12;

  v5 = a2;
  v6 = v5;
  if (v5)
  {
    objc_msgSend(v5, "configuration");
    v7 = v12;

    if (v7 == 3)
    {
      v8 = *(void **)(a1 + 32);
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "logicController"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "itemsForSectionAtIndex:", a3));
      objc_msgSend(v8, "addObjectsFromArray:", v10);

    }
  }
  else
  {
    v11 = 0u;
    v12 = 0u;
  }

}

void sub_10041C00C(id *a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;

  v7 = a2;
  if (objc_msgSend(v7, "kind") == (id)6)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "itemIdentifiersInSectionWithIdentifier:", v7));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "logicController"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "itemsForSectionAtIndex:", a3));

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "subarrayWithRange:", objc_msgSend(v8, "count"), objc_msgSend(a1[6], "count")));
    objc_msgSend(a1[4], "appendItemsWithIdentifiers:intoSectionWithIdentifier:", v11, v7);
    v12 = a1[4];
    v15 = v7;
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v15, 1));
    objc_msgSend(v12, "reloadSectionsWithIdentifiers:", v13);

    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "dataSource"));
    objc_msgSend(v14, "applySnapshot:animatingDifferences:", a1[4], 0);

    *a4 = 1;
  }

}

void sub_10041CD54(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  objc_class *v10;
  NSString *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;

  v17 = a2;
  v5 = a3;
  if (v5)
  {
    v6 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0
      || (v7 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v5, v7) & 1) != 0))
    {
      v8 = v5;
LABEL_11:
      v15 = *(void **)(a1 + 32);
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: %@"), v17, v8));
      objc_msgSend(v15, "addObject:", v16);

      goto LABEL_12;
    }
    v9 = v5;
    v10 = (objc_class *)objc_opt_class(v9);
    v11 = NSStringFromClass(v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    if ((objc_opt_respondsToSelector(v9, "accessibilityIdentifier") & 1) != 0)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "performSelector:", "accessibilityIdentifier"));
      v14 = v13;
      if (v13 && !objc_msgSend(v13, "isEqualToString:", v12))
      {
        v8 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v12, v9, v14));

        goto LABEL_10;
      }

    }
    v8 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v12, v9));
LABEL_10:

    goto LABEL_11;
  }
LABEL_12:

}

void sub_10041CED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v4;

  if (a3)
  {
    v3 = *(void **)(a1 + 32);
    v4 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: %@"), a2, a3));
    objc_msgSend(v3, "addObject:", v4);

  }
}

void sub_10041D184(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSOrderedSet orderedSetWithObject:](NSOrderedSet, "orderedSetWithObject:", &OBJC_PROTOCOL___ChromeNavigationDisplayDelegate));
  v2 = (void *)qword_1014D24E0;
  qword_1014D24E0 = v1;

}

id sub_10041D334(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

MapsAppTest *__cdecl sub_10041DF74(id a1, NSString *a2, MapsAppTesting *a3, NSDictionary *a4)
{
  NSString *v6;
  MapsAppTesting *v7;
  NSDictionary *v8;
  __objc2_class **v9;
  id v10;

  v6 = a2;
  v7 = a3;
  v8 = a4;
  if (-[NSString rangeOfString:](v6, "rangeOfString:", CFSTR("rpt")))
  {
    if (-[NSString rangeOfString:](v6, "rangeOfString:", CFSTR("lookAround")))
    {
      if (-[NSString rangeOfString:](v6, "rangeOfString:", CFSTR("searchHome")))
      {
        if (-[NSString rangeOfString:](v6, "rangeOfString:", CFSTR("placecard")))
        {
          if (!-[NSString hasPrefix:](v6, "hasPrefix:", CFSTR("search")))
          {
            v10 = 0;
            goto LABEL_12;
          }
          v9 = off_1011977E8;
        }
        else
        {
          v9 = off_101197738;
        }
      }
      else
      {
        v9 = off_1011977F0;
      }
    }
    else
    {
      v9 = off_101197720;
    }
  }
  else
  {
    v9 = off_101197778;
  }
  v10 = objc_msgSend(objc_alloc(*v9), "initWithApplication:testName:options:", v7, v6, v8);
LABEL_12:

  return (MapsAppTest *)v10;
}

void sub_10041E94C(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  id v4;
  NSObject *v5;
  void *v6;
  unsigned int v7;
  id v8;
  NSObject *v9;
  void *v10;
  unsigned int v11;
  id v12;
  NSObject *v13;
  void *v14;
  unsigned int v15;
  void *v16;
  void *v17;
  unsigned int v18;
  void *v19;
  void *v20;
  unsigned int v21;
  void *v22;
  void *v23;
  unsigned int v24;
  void *v25;
  void *v26;
  unsigned int v27;
  uint8_t v28[16];
  uint8_t v29[16];
  uint8_t buf[16];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "testName"));
  v3 = objc_msgSend(v2, "hasPrefix:", CFSTR("lookAroundBrowse"));

  if (v3)
  {
    v4 = sub_100431B9C();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[self runBrowseTest]", buf, 2u);
    }

    objc_msgSend(*(id *)(a1 + 32), "runBrowseTest");
  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "testName"));
    v7 = objc_msgSend(v6, "hasPrefix:", CFSTR("lookAroundEnter"));

    if (v7)
    {
      v8 = sub_100431B9C();
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)v29 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "[self runEnterTest]", v29, 2u);
      }

      objc_msgSend(*(id *)(a1 + 32), "runEnterTest");
    }
    else
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "testName"));
      v11 = objc_msgSend(v10, "hasPrefix:", CFSTR("lookAroundExplore"));

      if (v11)
      {
        v12 = sub_100431B9C();
        v13 = objc_claimAutoreleasedReturnValue(v12);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)v28 = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "[self runExploreTest]", v28, 2u);
        }

        objc_msgSend(*(id *)(a1 + 32), "runExploreTest");
      }
      else
      {
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "testName"));
        v15 = objc_msgSend(v14, "hasPrefix:", CFSTR("lookAroundNav"));

        v16 = *(void **)(a1 + 32);
        if (v15)
        {
          _objc_msgSend(v16, "runNavTest");
        }
        else
        {
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "testName"));
          v18 = objc_msgSend(v17, "hasPrefix:", CFSTR("lookAroundZoom"));

          v19 = *(void **)(a1 + 32);
          if (v18)
          {
            _objc_msgSend(v19, "runZoomTest");
          }
          else
          {
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "testName"));
            v21 = objc_msgSend(v20, "hasPrefix:", CFSTR("lookAroundPan"));

            v22 = *(void **)(a1 + 32);
            if (v21)
            {
              _objc_msgSend(v22, "runPanTest");
            }
            else
            {
              v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "testName"));
              v24 = objc_msgSend(v23, "hasPrefix:", CFSTR("lookAroundExit"));

              v25 = *(void **)(a1 + 32);
              if (v24)
              {
                _objc_msgSend(v25, "runExitTest");
              }
              else
              {
                v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "testName"));
                v27 = objc_msgSend(v26, "hasPrefix:", CFSTR("lookAroundPlacecardEnterNavExit"));

                if (v27)
                  _objc_msgSend(*(id *)(a1 + 32), "runEnterExploreNavExitTest");
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_10041EF78(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t result;
  uint8_t v5[16];

  v2 = sub_100431B9C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Received MKLookAroundViewDidBecomeAdequatelyDrawnNotification", v5, 2u);
  }

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_10041F084(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_10041F154(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  objc_class *v11;
  NSString *v12;
  void *v13;
  objc_class *v14;
  NSString *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  int v19;
  void *v20;
  __int16 v21;
  void *v22;
  __int16 v23;
  void *v24;
  __int16 v25;
  void *v26;
  __int16 v27;
  void *v28;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "userInfo"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("PPTLookAroundChromeOverlayLookAroundViewUserInfoKey")));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "mapItem"));
  v6 = v5;
  if (v4
    && (v7 = *(void **)(a1 + 32),
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "name")),
        LODWORD(v7) = objc_msgSend(v7, "containsString:", v8),
        v8,
        (_DWORD)v7))
  {
    v9 = sub_100431B9C();
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v11 = (objc_class *)objc_opt_class(v4);
      v12 = NSStringFromClass(v11);
      v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      v14 = (objc_class *)objc_opt_class(v6);
      v15 = NSStringFromClass(v14);
      v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "name"));
      v19 = 138413314;
      v20 = v13;
      v21 = 2048;
      v22 = v4;
      v23 = 2112;
      v24 = v16;
      v25 = 2048;
      v26 = v6;
      v27 = 2112;
      v28 = v17;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Received PPTLookAroundChromeOverlayDidShowLookAroundPreviewNotificationName lookAroundView=<%@:%p>, mapItem=<%@:%p> (\"%@\")", (uint8_t *)&v19, 0x34u);

    }
    v18 = *(_QWORD *)(a1 + 48);
    if (v18)
      (*(void (**)(uint64_t, void *, void *))(v18 + 16))(v18, v4, v6);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "addObserverWithSearchString:forDidShowPreviewBlock:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
  }

}

void sub_10041F434(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  void *v15;
  void *v16;
  void *v17;
  unsigned int v18;
  void *v19;
  id v20;
  id v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint8_t buf[16];
  _BYTE v27[128];

  v3 = a2;
  v4 = sub_100431B9C();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Received SearchSessionDidChangeSearchResultsNotification", buf, 2u);
  }

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "object"));
  v7 = v6;
  if (v6)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "searchInfo"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "results"));
    v10 = objc_msgSend(v9, "copy");

    v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "firstObject"));
    if ((unint64_t)objc_msgSend(v10, "count") >= 2)
    {

      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v12 = v10;
      v11 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
      if (v11)
      {
        v20 = v10;
        v21 = v3;
        v13 = *(_QWORD *)v23;
        while (2)
        {
          for (i = 0; i != v11; i = (char *)i + 1)
          {
            if (*(_QWORD *)v23 != v13)
              objc_enumerationMutation(v12);
            v15 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)i);
            v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "mapItem", v20, v21, (_QWORD)v22));
            v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "_shortAddress"));
            v18 = objc_msgSend(v17, "isEqualToString:", *(_QWORD *)(a1 + 40));

            if (v18)
            {
              v11 = v15;

              goto LABEL_16;
            }

          }
          v11 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
          if (v11)
            continue;
          break;
        }
LABEL_16:
        v10 = v20;
        v3 = v21;
      }

    }
    v19 = *(void **)(a1 + 32);
    if (v11)
    {
      objc_msgSend(v19, "selectSearchResult:", v11);
      objc_msgSend(*(id *)(a1 + 32), "addObserverWithSearchString:forDidShowPreviewBlock:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    }
    else
    {
      objc_msgSend(v19, "failedTest");
    }

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "failedTest");
  }

}

void sub_10041F6FC(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  uint8_t v5[16];

  v2 = sub_100431B9C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Received MapsPinsDroppedForSearchResultsNotification", v5, 2u);
  }

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "testCoordinator"));
  objc_msgSend(v4, "pptTestPresentPlaceCardForSearchResult:animated:", *(_QWORD *)(a1 + 40), 1);

}

void sub_10041F83C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  uint8_t buf[16];

  v2 = sub_100431B9C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Received MKLookAroundViewWillMoveToStorefrontNotification", buf, 2u);
  }

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    (*(void (**)(void))(v4 + 16))();
  v5 = MKLookAroundViewDidMoveToStorefrontNotification;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10041F924;
  v6[3] = &unk_1011B5B38;
  v7 = *(id *)(a1 + 40);
  +[PPTNotificationCenter addOnceObserverForName:object:usingBlock:](PPTNotificationCenter, "addOnceObserverForName:object:usingBlock:", v5, 0, v6);

}

uint64_t sub_10041F924(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t result;
  uint8_t v5[16];

  v2 = sub_100431B9C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Received MKLookAroundViewDidMoveToStorefrontNotification", v5, 2u);
  }

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_10041FAC0(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  void *v5;
  _QWORD v6[5];
  id v7;
  id v8;
  uint8_t buf[16];

  v2 = sub_100431B9C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Received LookAroundContainerViewControllerDidAppearNotification", buf, 2u);
  }

  v5 = *(void **)(a1 + 32);
  v4 = *(void **)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10041FB9C;
  v6[3] = &unk_1011AECC0;
  v6[4] = v5;
  v7 = v4;
  v8 = *(id *)(a1 + 48);
  objc_msgSend(v5, "onLookAroundView:didBecomeAdequatelyDrawnCallback:", v7, v6);

}

void sub_10041FB9C(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  _QWORD v3[4];
  id v4;

  v1 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10041FC10;
  v3[3] = &unk_1011ADA00;
  v4 = *(id *)(a1 + 48);
  objc_msgSend(v1, "onLookAroundView:didCompletionPostTransitionAnimation:", v2, v3);

}

uint64_t sub_10041FC10(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_10041FD44(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  uint8_t buf[16];

  v2 = sub_100431B9C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Received PPTLookAroundContainerViewControllerDidTransitionToFullscreenNotification", buf, 2u);
  }

  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10041FE08;
  v6[3] = &unk_1011ADA00;
  v7 = *(id *)(a1 + 48);
  objc_msgSend(v4, "onLookAroundView:didCompletionPostTransitionAnimation:", v5, v6);

}

uint64_t sub_10041FE08(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_10041FF5C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  _QWORD v10[5];
  id v11;
  id v12;
  id v13;
  uint8_t buf[16];

  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = sub_100431B9C();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[self startedSubTest:@\"displayLookAround\"]", buf, 2u);
    }

    objc_msgSend(*(id *)(a1 + 32), "startedSubTest:", CFSTR("displayLookAround"));
    v9 = *(void **)(a1 + 32);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10042008C;
    v10[3] = &unk_1011B45F8;
    v10[4] = v9;
    v11 = v5;
    v13 = *(id *)(a1 + 40);
    v12 = v6;
    objc_msgSend(v9, "onLookAroundView:didBecomeAdequatelyDrawnCallback:", v11, v10);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "failedTest");
  }

}

void sub_10042008C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  _QWORD v5[5];
  id v6;
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  uint8_t buf[16];

  v2 = sub_100431B9C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[self finishedSubTest:@\"displayLookAround\"]", buf, 2u);
  }

  objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("displayLookAround"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1004201A0;
  v9[3] = &unk_1011AC860;
  v4 = *(void **)(a1 + 40);
  v10 = *(id *)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100420218;
  v5[3] = &unk_1011B45F8;
  v5[4] = v10;
  v6 = v4;
  v8 = *(id *)(a1 + 56);
  v7 = *(id *)(a1 + 48);
  objc_msgSend(v10, "storefrontWillMoveBlock:didMoveBlock:", v9, v5);

}

id sub_1004201A0(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint8_t v5[16];

  v2 = sub_100431B9C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[self startedSubTest:@\"moveStorefront\"]", v5, 2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "startedSubTest:", CFSTR("moveStorefront"));
}

void sub_100420218(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  _QWORD v4[5];
  id v5;
  id v6;
  id v7;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1004202C4;
  v4[3] = &unk_1011B5C28;
  v4[4] = v2;
  v7 = *(id *)(a1 + 56);
  v5 = *(id *)(a1 + 40);
  v6 = *(id *)(a1 + 48);
  objc_msgSend(v2, "onLookAroundView:didBecomeAdequatelyDrawnCallback:", v3, v4);

}

id sub_1004202C4(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  id v6;
  NSObject *v7;
  uint8_t v8[16];
  uint8_t buf[16];

  v2 = sub_100431B9C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[self finishedSubTest:@\"moveStorefront\"]", buf, 2u);
  }

  objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("moveStorefront"));
  v4 = *(_QWORD *)(a1 + 56);
  if (v4)
    return (id)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v4 + 16))(v4, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  v6 = sub_100431B9C();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "[self finishedTest]", v8, 2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "finishedTest");
}

void sub_100420420(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  id v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  id v16;
  uint8_t buf[16];

  v5 = a2;
  v6 = a3;
  v7 = sub_100431B9C();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[self startedSubTest:@\"enterLookAround\"]", buf, 2u);
  }

  objc_msgSend(*(id *)(a1 + 32), "startedSubTest:", CFSTR("enterLookAround"));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10042053C;
  v12[3] = &unk_1011B5C28;
  v9 = *(void **)(a1 + 40);
  v13 = *(id *)(a1 + 32);
  v15 = v6;
  v16 = v9;
  v14 = v5;
  v10 = v6;
  v11 = v5;
  objc_msgSend(v13, "enterLookAroundWithLookAroundView:mapItem:showsFullScreen:completionBlock:", v11, v10, 1, v12);

}

id sub_10042053C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  id v6;
  NSObject *v7;
  uint8_t v8[16];
  uint8_t buf[16];

  v2 = sub_100431B9C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[self finishedSubTest:@\"enterLookAround\"]", buf, 2u);
  }

  objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("enterLookAround"));
  v4 = *(_QWORD *)(a1 + 56);
  if (v4)
    return (id)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v4 + 16))(v4, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  v6 = sub_100431B9C();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "[self finishedTest]", v8, 2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "finishedTest");
}

void sub_100420668(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  _QWORD v10[5];
  uint8_t buf[16];

  v5 = a3;
  v6 = a2;
  v7 = sub_100431B9C();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[self startedSubTest:@\"enterLookAroundPIP\"]", buf, 2u);
  }

  objc_msgSend(*(id *)(a1 + 32), "startedSubTest:", CFSTR("enterLookAroundPIP"));
  v9 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10042074C;
  v10[3] = &unk_1011AC860;
  v10[4] = v9;
  objc_msgSend(v9, "expandLookAroundToFullscreen:withLookAroundView:mapItem:completionBlock:", 0, v6, v5, v10);

}

id sub_10042074C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  NSObject *v5;
  uint8_t v7[16];
  uint8_t buf[16];

  v2 = sub_100431B9C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[self finishedSubTest:@\"enterLookAroundPIP\"]", buf, 2u);
  }

  objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("enterLookAroundPIP"));
  v4 = sub_100431B9C();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[self finishedTest]", v7, 2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "finishedTest");
}

void sub_100420860(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  NSObject *v6;
  uint8_t v7[16];

  v4 = a3;
  v5 = sub_100431B9C();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Finished Enter", v7, 2u);
  }

  objc_msgSend(*(id *)(a1 + 32), "runFullScreenNavTestWithMapItem:", v4);
}

void sub_100420B20(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[5];
  id v7;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100420BA0;
  v6[3] = &unk_1011AC8B0;
  v6[4] = v4;
  v7 = v3;
  v5 = v3;
  objc_msgSend(v4, "onLookAroundView:didCompletionPostTransitionAnimation:", 0, v6);

}

void sub_100420BA0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  _QWORD v6[5];
  id v7;

  objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("navFullScreenLookAroundEnter"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "object"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "lookAroundView"));

  objc_msgSend(*(id *)(a1 + 32), "startedSubTest:", CFSTR("navPanLookAroundToFaceStreet"));
  v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100420C64;
  v6[3] = &unk_1011AC8B0;
  v6[4] = v4;
  v7 = v3;
  v5 = v3;
  objc_msgSend(v4, "panLookAroundView:completion:", v5, v6);

}

void sub_100420C64(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  void *v6;
  int v7;
  void *v8;
  int v9;
  void *v10;
  int v11;
  uint64_t v12;
  double v13;
  void *v14;
  id v15;

  objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("navPanLookAroundToFaceStreet"));
  objc_msgSend(*(id *)(a1 + 40), "bounds");
  v3 = v2;
  objc_msgSend(*(id *)(a1 + 40), "bounds");
  v5 = v4;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "options"));
  v7 = objc_msgSend(v6, "_maptest_lookAroundOffsetTapPositionX");

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "options"));
  v9 = objc_msgSend(v8, "_maptest_lookAroundOffsetTapPositionY");

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "options"));
  v11 = objc_msgSend(v10, "_maptest_lookAroundNavigationTaps");

  if (v11 >= 1)
    v12 = v11;
  else
    v12 = 6;
  v13 = (double)v7 + v3 * 0.5;
  v14 = *(void **)(a1 + 32);
  v15 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "lookAroundView"));
  objc_msgSend(v14, "tap:countdown:mapView:totalTimeInMS:firstTap:", v12, v15, 1, v13, (double)v9 + v5 * 0.5, 0.0);

}

void sub_100420F40(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "object"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "lookAroundView"));

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100420FF4;
  v7[3] = &unk_1011AD238;
  v5 = *(void **)(a1 + 40);
  v8 = *(id *)(a1 + 32);
  v9 = v4;
  v10 = v5;
  v6 = v4;
  objc_msgSend(v8, "onLookAroundView:didBecomeAdequatelyDrawnCallback:", v6, v7);

}

void sub_100420FF4(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD v4[5];
  id v5;
  id v6;

  v3 = *(void **)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10042108C;
  v4[3] = &unk_1011AD238;
  v4[4] = v3;
  v5 = v2;
  v6 = *(id *)(a1 + 48);
  objc_msgSend(v3, "onLookAroundView:didCompletionPostTransitionAnimation:", v5, v4);

}

void sub_10042108C(_QWORD *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  _QWORD v4[5];
  id v5;

  v2 = (void *)a1[4];
  v1 = (void *)a1[5];
  v3 = a1[6];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10042110C;
  v4[3] = &unk_1011AC8B0;
  v4[4] = v2;
  v5 = v1;
  objc_msgSend(v2, "expandLookAroundToFullscreen:withLookAroundView:mapItem:completionBlock:", 1, v5, v3, v4);

}

void sub_10042110C(uint64_t a1)
{
  void *v1;
  void *v2;
  _QWORD v3[5];
  id v4;

  v2 = *(void **)(a1 + 32);
  v1 = *(void **)(a1 + 40);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100421180;
  v3[3] = &unk_1011AC8B0;
  v3[4] = v2;
  v4 = v1;
  objc_msgSend(v2, "onLookAroundView:didCompletionPostTransitionAnimation:", v4, v3);

}

void sub_100421180(uint64_t a1)
{
  void *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  void *v7;
  int v8;
  void *v9;
  int v10;
  void *v11;
  int v12;
  double v13;
  double v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id *v19;
  id v20;
  dispatch_time_t v21;
  uint64_t v22;
  id v23;
  _QWORD v24[5];
  _QWORD v25[3];
  int v26;
  _QWORD v27[5];
  _QWORD v28[3];
  int v29;

  objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("navLookAroundEnter"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "lookAroundView"));
  objc_msgSend(*(id *)(a1 + 32), "setupForVKTestWithMapView:", v2);
  objc_msgSend(v2, "enableTestStatistics");
  objc_msgSend(*(id *)(a1 + 40), "bounds");
  v4 = v3;
  objc_msgSend(*(id *)(a1 + 40), "bounds");
  v6 = v5;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "options"));
  v8 = objc_msgSend(v7, "_maptest_lookAroundOffsetTapPositionX");

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "options"));
  v10 = objc_msgSend(v9, "_maptest_lookAroundOffsetTapPositionY");

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "options"));
  v12 = objc_msgSend(v11, "_maptest_lookAroundNavigationTaps");

  if (v12 < 1)
    v12 = 5;
  v13 = (double)v8 + v4 * 0.5;
  v14 = (double)v10 + v6 * 0.5;
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainMKMapView"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "_mapLayer"));
  objc_msgSend(v16, "setHidden:", 1);

  objc_msgSend(*(id *)(a1 + 32), "startedSubTest:", CFSTR("navLookAround"));
  if (objc_msgSend(*(id *)(a1 + 40), "isLoading"))
  {
    v17 = MKLookAroundViewDidBecomeFullyDrawnNotification;
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_1004213B4;
    v27[3] = &unk_1011B5CC8;
    v18 = *(_QWORD *)(a1 + 32);
    *(double *)&v28[1] = v13;
    *(double *)&v28[2] = v14;
    v29 = v12;
    v19 = (id *)v28;
    v27[4] = v18;
    v28[0] = v2;
    v20 = v2;
    +[PPTNotificationCenter addOnceObserverForName:object:usingBlock:](PPTNotificationCenter, "addOnceObserverForName:object:usingBlock:", v17, 0, v27);
  }
  else
  {
    v21 = dispatch_time(0, 1000000000);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_100421470;
    v24[3] = &unk_1011B5CA0;
    v22 = *(_QWORD *)(a1 + 32);
    *(double *)&v25[1] = v13;
    *(double *)&v25[2] = v14;
    v26 = v12;
    v19 = (id *)v25;
    v24[4] = v22;
    v25[0] = v2;
    v23 = v2;
    dispatch_after(v21, (dispatch_queue_t)&_dispatch_main_q, v24);
  }

}

void sub_1004213B4(uint64_t a1)
{
  dispatch_time_t v2;
  void *v3;
  _QWORD block[5];
  id v5;
  __int128 v6;
  int v7;

  v2 = dispatch_time(0, 1000000000);
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_100421454;
  block[3] = &unk_1011B5CA0;
  v3 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  block[1] = 3221225472;
  v6 = *(_OWORD *)(a1 + 48);
  v7 = *(_DWORD *)(a1 + 64);
  v5 = v3;
  dispatch_after(v2, (dispatch_queue_t)&_dispatch_main_q, block);

}

id sub_100421454(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "tap:countdown:mapView:totalTimeInMS:firstTap:", *(unsigned int *)(a1 + 64), *(_QWORD *)(a1 + 40), 1, *(double *)(a1 + 48), *(double *)(a1 + 56), 0.0);
}

id sub_100421470(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "tap:countdown:mapView:totalTimeInMS:firstTap:", *(unsigned int *)(a1 + 64), *(_QWORD *)(a1 + 40), 1, *(double *)(a1 + 48), *(double *)(a1 + 56), 0.0);
}

uint64_t sub_100421564(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100421984(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;
  uint64_t v7;
  id v8;
  __int128 v9;
  uint64_t v10;
  int v11;

  objc_msgSend(*(id *)(a1 + 32), "tapAtPoint:", *(double *)(a1 + 56), *(double *)(a1 + 64));
  v2 = MKLookAroundViewDidBecomeFullyDrawnNotification;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100421A54;
  v5[3] = &unk_1011B5CF0;
  v3 = *(id *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v6 = v3;
  v7 = v4;
  v9 = *(_OWORD *)(a1 + 56);
  v11 = *(_DWORD *)(a1 + 80);
  v8 = *(id *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 72);
  +[PPTNotificationCenter addOnceObserverForName:object:usingBlock:](PPTNotificationCenter, "addOnceObserverForName:object:usingBlock:", v2, 0, v5);

}

id sub_100421A54(uint64_t a1)
{
  double v2;

  objc_msgSend(*(id *)(a1 + 32), "timeIntervalSinceNow");
  return objc_msgSend(*(id *)(a1 + 40), "tap:countdown:mapView:totalTimeInMS:firstTap:", (*(_DWORD *)(a1 + 80) - 1), *(_QWORD *)(a1 + 48), 0, *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72) + v2 * -1000.0);
}

void sub_100421CA0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  id v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  _QWORD v18[4];
  id v19;
  uint64_t v20;
  double v21;
  double v22;
  uint8_t buf[16];

  v3 = a2;
  v4 = sub_100431B9C();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[self finishedSubTest:@\"zoomLookAroundEnter\"]", buf, 2u);
  }

  objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("zoomLookAroundEnter"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "object"));

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "lookAroundView"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "lookAroundView"));
  objc_msgSend(*(id *)(a1 + 32), "setupForVKTestWithMapView:", v8);
  objc_msgSend(v8, "enableTestStatistics");
  objc_msgSend(v7, "bounds");
  v10 = v9;
  objc_msgSend(v7, "bounds");
  v12 = v11;
  v13 = sub_100431B9C();
  v14 = objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "[self startedSubTest:@\"zoomLookAround\"]", buf, 2u);
  }

  objc_msgSend(*(id *)(a1 + 32), "startedSubTest:", CFSTR("zoomLookAround"));
  v15 = MKLookAroundViewDidBecomeFullyDrawnNotification;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_100421E74;
  v18[3] = &unk_1011B5D40;
  v21 = v10 * 0.5;
  v22 = v12 * 0.5;
  v16 = *(_QWORD *)(a1 + 32);
  v19 = v8;
  v20 = v16;
  v17 = v8;
  +[PPTNotificationCenter addOnceObserverForName:object:usingBlock:](PPTNotificationCenter, "addOnceObserverForName:object:usingBlock:", v15, 0, v18);

}

void sub_100421E74(uint64_t a1)
{
  dispatch_time_t v2;
  id v3;
  int8x16_t v4;
  _QWORD block[4];
  int8x16_t v6;
  __int128 v7;

  objc_msgSend(*(id *)(a1 + 32), "startPinchingWithFocusPoint:", *(double *)(a1 + 48), *(double *)(a1 + 56));
  v2 = dispatch_time(0, 1000000000);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100421F20;
  block[3] = &unk_1011B15D8;
  v4 = *(int8x16_t *)(a1 + 32);
  v7 = *(_OWORD *)(a1 + 48);
  v3 = (id)v4.i64[0];
  v6 = vextq_s8(v4, v4, 8uLL);
  dispatch_after(v2, (dispatch_queue_t)&_dispatch_main_q, block);

}

id sub_100421F20(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "zoom:countdown:oldFactor:mapView:", 40, *(_QWORD *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), 1.0);
}

void sub_100422094(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  uint64_t v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint8_t buf[16];
  _BYTE v24[128];

  objc_msgSend(*(id *)(a1 + 32), "stopPinchingWithFocusPoint:", *(double *)(a1 + 48), *(double *)(a1 + 56));
  v2 = sub_100431B9C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[self finishedSubTest:@\"zoomLookAround\"]", buf, 2u);
  }

  objc_msgSend(*(id *)(a1 + 40), "finishedSubTest:", CFSTR("zoomLookAround"));
  objc_msgSend(*(id *)(a1 + 32), "disableTestStatistics");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "testStatistics"));
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v19, v24, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v20 != v7)
          objc_enumerationMutation(v4);
        v9 = *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)i);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", v9));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "results"));
        v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("sub:loadingScene:%@"), v9));
        objc_msgSend(v11, "setObject:forKey:", v10, v12);

      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v19, v24, 16);
    }
    while (v6);
  }
  objc_msgSend(*(id *)(a1 + 32), "resetTestStatistics");
  if (objc_msgSend(*(id *)(a1 + 32), "mapType") == 11)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tileStatistics"));
    if (v13)
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "results"));
      objc_msgSend(v14, "addEntriesFromDictionary:", v13);

    }
  }
  v15 = sub_100431B9C();
  v16 = objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "[self finishedTest]", buf, 2u);
  }

  v17 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 72);
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v18, "setLayoutContinuously:", v17);

  objc_msgSend(*(id *)(a1 + 40), "finishedTest");
}

id sub_100422324(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "zoom:countdown:oldFactor:mapView:", (*(_DWORD *)(a1 + 72) - 1), *(_QWORD *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64));
}

void sub_100422B80(id a1)
{
  void *v1;

  v1 = (void *)qword_1014D24F0;
  qword_1014D24F0 = (uint64_t)&off_101273230;

}

void sub_100422BD8(id a1)
{
  TrafficIncidentLayoutStorage *v1;
  void *v2;

  v1 = objc_alloc_init(TrafficIncidentLayoutStorage);
  v2 = (void *)qword_1014D2508;
  qword_1014D2508 = (uint64_t)v1;

}

void sub_10042390C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100423934(uint64_t a1, void *a2, void *a3, char a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;
  char v15;

  v7 = a2;
  v8 = a3;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100423A08;
  v11[3] = &unk_1011B5DD0;
  objc_copyWeak(&v14, (id *)(a1 + 32));
  v12 = v7;
  v13 = v8;
  v15 = a4;
  v9 = v8;
  v10 = v7;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v11);

  objc_destroyWeak(&v14);
}

void sub_100423A08(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "_setVisitStartDate:visitEndDate:hasNearbyPhotos:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 56));

}

void sub_100423A48(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  void (*v13)(void);
  _QWORD v14[4];
  id v15;
  id v16;
  id v17;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (!v9)
  {
    if (v7)
      v10 = v7;
    else
      v10 = v8;
    v11 = v10;
    if (v11)
    {
      if (*(_BYTE *)(a1 + 48))
      {
        v14[0] = _NSConcreteStackBlock;
        v14[1] = 3221225472;
        v14[2] = sub_100423B9C;
        v14[3] = &unk_1011B5E20;
        v12 = *(_QWORD *)(a1 + 32);
        v17 = *(id *)(a1 + 40);
        v15 = v7;
        v16 = v8;
        +[UGCNearbyPhotosAvailibility numberOfPhotosTakenForMapItem:lastVisitedDate:completion:](UGCNearbyPhotosAvailibility, "numberOfPhotosTakenForMapItem:lastVisitedDate:completion:", v12, v11, v14);

LABEL_12:
        goto LABEL_13;
      }
      v13 = *(void (**)(void))(*(_QWORD *)(a1 + 40) + 16);
    }
    else
    {
      v13 = *(void (**)(void))(*(_QWORD *)(a1 + 40) + 16);
    }
    v13();
    goto LABEL_12;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
LABEL_13:

}

uint64_t sub_100423B9C(_QWORD *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, BOOL))(a1[6] + 16))(a1[6], a1[4], a1[5], a2 != 0);
}

BOOL sub_100424728()
{
  int AppBooleanValue;
  void *v1;
  _BOOL4 v2;

  AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("DebugPanelEnabled"), CFSTR("com.apple.Maps"), 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[GEOPlatform sharedPlatform](GEOPlatform, "sharedPlatform"));
  v2 = (objc_msgSend(v1, "isInternalInstall") & 1) != 0
    || CFPreferencesAppValueIsForced(CFSTR("DebugPanelEnabled"), CFSTR("com.apple.Maps")) != 0;

  return AppBooleanValue && v2;
}

void sub_100424858(id a1)
{
  PersistenceManager *v1;
  PersistenceManager *v2;
  void *v3;
  id v4;

  v1 = [PersistenceManager alloc];
  v4 = (id)objc_claimAutoreleasedReturnValue(+[MSPMapsPaths pathsAtLocation:](MSPMapsPaths, "pathsAtLocation:", 0));
  v2 = -[PersistenceManager initWithPersistenceData:](v1, "initWithPersistenceData:", v4);
  v3 = (void *)qword_1014D2510;
  qword_1014D2510 = (uint64_t)v2;

}

void sub_100425B10(id a1)
{
  UGCPhotoDownloadManager *v1;
  void *v2;

  v1 = objc_alloc_init(UGCPhotoDownloadManager);
  v2 = (void *)qword_1014D2520;
  qword_1014D2520 = (uint64_t)v1;

}

void sub_100425E38(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  UGCPhotoDownloadOperation *v9;
  UGCPhotoDownloadOperation *v10;
  id v11;
  NSObject *v12;
  _BOOL4 v13;
  void *v14;
  void *v15;
  UGCPhotoDownloadOperation *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  NSObject *v23;
  void *v24;
  uint64_t v25;
  id *v26;
  void **v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  _QWORD v36[5];
  id v37;
  id v38;
  id v39;
  UGCPhotoDownloadOperation *v40;
  id v41;
  _QWORD v42[4];
  id v43;
  id v44;
  id location;
  _QWORD block[4];
  id v47;
  UGCPhotoDownloadOperation *v48;
  __int128 buf;
  void *v50;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "downloadIdentifier"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_cachedImageForDownloadIdentifier:", v3));

  if (v4)
  {
    v5 = sub_10043317C();
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "downloadIdentifier"));
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Found cached image for identifier %@", (uint8_t *)&buf, 0xCu);

    }
    v8 = *(NSObject **)(a1 + 48);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1004263BC;
    block[3] = &unk_1011ACAD0;
    v48 = (UGCPhotoDownloadOperation *)*(id *)(a1 + 64);
    v47 = v4;
    dispatch_async(v8, block);

    v9 = v48;
  }
  else
  {
    v10 = (UGCPhotoDownloadOperation *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_currentDownloadOperationForPhotoInfo:", *(_QWORD *)(a1 + 40)));
    v11 = sub_10043317C();
    v12 = objc_claimAutoreleasedReturnValue(v11);
    v13 = os_log_type_enabled(v12, OS_LOG_TYPE_INFO);
    if (v10)
    {
      if (v13)
      {
        v14 = (void *)objc_claimAutoreleasedReturnValue(-[UGCPhotoDownloadOperation name](v10, "name"));
        LODWORD(buf) = 138412290;
        *(_QWORD *)((char *)&buf + 4) = v14;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Attaching to an existing download operation with handle %@", (uint8_t *)&buf, 0xCu);

      }
    }
    else
    {
      if (v13)
      {
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "downloadIdentifier"));
        LODWORD(buf) = 138412290;
        *(_QWORD *)((char *)&buf + 4) = v15;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Creating new download operation for identifier %@", (uint8_t *)&buf, 0xCu);

      }
      objc_initWeak(&location, *(id *)(a1 + 32));
      v16 = [UGCPhotoDownloadOperation alloc];
      v17 = *(_QWORD *)(a1 + 40);
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
      v42[0] = _NSConcreteStackBlock;
      v42[1] = 3221225472;
      v42[2] = sub_1004263D4;
      v42[3] = &unk_1011B5EB0;
      objc_copyWeak(&v44, &location);
      v43 = *(id *)(a1 + 40);
      v10 = -[UGCPhotoDownloadOperation initWithPhotoInfo:completionQueue:completion:](v16, "initWithPhotoInfo:completionQueue:completion:", v17, v18, v42);
      -[UGCPhotoDownloadOperation setQualityOfService:](v10, "setQualityOfService:", 25);
      v19 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "downloadIdentifier"));
      *(_QWORD *)&buf = CFSTR("DOWNLOAD_OPERATION");
      *((_QWORD *)&buf + 1) = v19;
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &buf, 2));
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "componentsJoinedByString:", CFSTR("_")));

      -[UGCPhotoDownloadOperation setName:](v10, "setName:", v21);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "addOperation:", v10);
      v22 = sub_10043317C();
      v23 = objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        v24 = (void *)objc_claimAutoreleasedReturnValue(-[UGCPhotoDownloadOperation name](v10, "name"));
        LODWORD(buf) = 138412290;
        *(_QWORD *)((char *)&buf + 4) = v24;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Added download operation with handle %@", (uint8_t *)&buf, 0xCu);

      }
      objc_destroyWeak(&v44);
      objc_destroyWeak(&location);
    }
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472;
    v36[2] = sub_100426500;
    v36[3] = &unk_1011B5F00;
    v25 = a1 + 32;
    v36[4] = *(_QWORD *)(a1 + 32);
    v26 = (id *)(a1 + 40);
    v37 = *(id *)(a1 + 40);
    v28 = *(void **)(a1 + 56);
    v27 = (void **)(a1 + 56);
    v38 = v28;
    v39 = *(v27 - 1);
    v29 = v27[1];
    v40 = v10;
    v41 = v29;
    v9 = v10;
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation blockOperationWithBlock:](NSBlockOperation, "blockOperationWithBlock:", v36));
    objc_msgSend(v30, "setQualityOfService:", 25);
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v26, "downloadIdentifier"));
    v32 = *v27;
    *(_QWORD *)&buf = CFSTR("DOWNLOAD_COMPLETION");
    *((_QWORD *)&buf + 1) = v32;
    v50 = v31;
    v33 = v32;
    v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &buf, 3));

    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "componentsJoinedByString:", CFSTR("_")));
    objc_msgSend(v30, "setName:", v35);

    objc_msgSend(v30, "addDependency:", v9);
    objc_msgSend(*(id *)(*(_QWORD *)v25 + 32), "addOperation:", v30);

  }
}

void sub_10042637C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location)
{
  id *v26;

  objc_destroyWeak(v26);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_1004263BC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0, 1);
}

void sub_1004263D4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  id v8;
  NSObject *v9;
  id v10;
  void *v11;
  void *v12;
  int v13;
  id v14;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (v6)
    {
      v8 = sub_10043317C();
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v13 = 138412290;
        v14 = v6;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to download photo with error %@", (uint8_t *)&v13, 0xCu);
      }

    }
    if (v5)
    {
      v10 = objc_msgSend(objc_alloc((Class)UIImage), "initWithData:", v5);
      if (v10)
      {
        v11 = v10;
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "downloadIdentifier"));
        objc_msgSend(WeakRetained, "_updateCacheWithImage:forDownloadIdentifier:", v11, v12);

      }
    }
  }

}

void sub_100426500(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  NSObject *v4;
  _QWORD v5[5];
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(a1 + 40);
  v4 = *(NSObject **)(v2 + 16);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1004265C8;
  v5[3] = &unk_1011B5F00;
  v5[4] = v2;
  v6 = v3;
  v7 = *(id *)(a1 + 48);
  v8 = *(id *)(a1 + 56);
  v10 = *(id *)(a1 + 72);
  v9 = *(id *)(a1 + 64);
  dispatch_async(v4, v5);

}

void sub_1004265C8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  NSObject *v12;
  id v13;
  _QWORD block[4];
  id v15;
  id v16;
  id v17;
  __int128 buf;
  void *v19;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "downloadIdentifier"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_cachedImageForDownloadIdentifier:", v3));

  v5 = sub_10043317C();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "downloadIdentifier"));
    v8 = *(void **)(a1 + 48);
    *(_QWORD *)&buf = CFSTR("DOWNLOAD_COMPLETION");
    *((_QWORD *)&buf + 1) = v8;
    v19 = v7;
    v9 = v8;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &buf, 3));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "componentsJoinedByString:", CFSTR("_")));

    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v11;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Completion operation finished %@", (uint8_t *)&buf, 0xCu);

  }
  v12 = *(NSObject **)(a1 + 56);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100426794;
  block[3] = &unk_1011B5ED8;
  v17 = *(id *)(a1 + 72);
  v15 = v4;
  v16 = *(id *)(a1 + 64);
  v13 = v4;
  dispatch_async(v12, block);

}

void sub_100426794(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 48);
  if (v1)
  {
    v2 = *(_QWORD *)(a1 + 32);
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "downloadError"));
    (*(void (**)(uint64_t, uint64_t, id, _QWORD))(v1 + 16))(v1, v2, v3, 0);

  }
}

void sub_1004269A8(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  id v9;
  NSObject *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  id v15;
  void *v16;
  int v17;
  void *v18;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_completionOperationForPhotoInfo:downloadToken:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48)));
  v3 = v2;
  if (v2)
  {
    objc_msgSend(v2, "cancel");
    v4 = sub_10043317C();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "name"));
      v17 = 138412290;
      v18 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Cancelled completion operation %@", (uint8_t *)&v17, 0xCu);

    }
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dependencies"));
    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "firstObject"));

    if (v8)
    {
      v9 = sub_10043317C();
      v10 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        v11 = *(void **)(a1 + 56);
        v17 = 138412290;
        v18 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Found download operation with handle %@", (uint8_t *)&v17, 0xCu);
      }

      objc_msgSend(v3, "removeDependency:", v8);
      if (objc_msgSend(*(id *)(a1 + 32), "_canCancelDownloadOperation:", v8))
      {
        v12 = sub_10043317C();
        v13 = objc_claimAutoreleasedReturnValue(v12);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          v14 = *(void **)(a1 + 56);
          v17 = 138412290;
          v18 = v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Cancelling download operation with handle %@", (uint8_t *)&v17, 0xCu);
        }

        -[NSObject cancel](v8, "cancel");
      }
    }
  }
  else
  {
    v15 = sub_10043317C();
    v8 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v16 = *(void **)(a1 + 56);
      v17 = 138412290;
      v18 = v16;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Did not find completion operation %@", (uint8_t *)&v17, 0xCu);
    }
  }

}

void sub_100428070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location)
{
  uint64_t v10;

  objc_destroyWeak((id *)(v10 - 136));
  _Unwind_Resume(a1);
}

id sub_1004280AC(uint64_t a1, uint64_t a2, void *a3)
{
  id *v4;
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;

  v4 = (id *)(a1 + 32);
  v5 = a3;
  WeakRetained = objc_loadWeakRetained(v4);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "dataSource"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "layoutSectionForSectionIndex:layoutEnvironment:", a2, v5));

  return v8;
}

double sub_1004281EC(uint64_t a1)
{
  void *v1;
  void *v2;
  double v3;
  double v4;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modalHeaderView"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "bottomHairline"));
  objc_msgSend(v2, "alpha");
  v4 = v3;

  return v4;
}

void sub_10042823C(uint64_t a1, double a2)
{
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modalHeaderView"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "bottomHairline"));
  objc_msgSend(v3, "setAlpha:", a2);

}

void sub_10042857C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100428594(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6;
  void *v7;
  id v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  unsigned int v12;
  id v13;
  _QWORD v14[5];
  _QWORD v15[5];

  v13 = a2;
  v6 = objc_msgSend(v13, "type");
  if (v6 == (id)2)
  {
    v8 = v13;
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "openAt"));
    if (objc_msgSend(v10, "isSelected"))
    {

    }
    else
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "openNow"));
      v12 = objc_msgSend(v11, "isSelected");

      if (!v12)
        goto LABEL_11;
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    goto LABEL_11;
  }
  if (v6 == (id)1)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "elements"));
    v8 = v7;
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10042873C;
    v14[3] = &unk_1011B5FA0;
    v14[4] = *(_QWORD *)(a1 + 32);
    v9 = v14;
    goto LABEL_6;
  }
  if (!v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "toggles"));
    v8 = v7;
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_1004286FC;
    v15[3] = &unk_1011B5F78;
    v15[4] = *(_QWORD *)(a1 + 32);
    v9 = v15;
LABEL_6:
    objc_msgSend(v7, "enumerateObjectsUsingBlock:", v9);
LABEL_11:

  }
  *a4 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);

}

id sub_1004286FC(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id result;

  result = objc_msgSend(a2, "isSelected");
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

id sub_10042873C(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id result;

  result = objc_msgSend(a2, "isSelected");
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

void sub_1004287E8(id a1, AllRefinementsViewModelSection *a2, unint64_t a3, BOOL *a4)
{
  AllRefinementsViewModelSection *v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector(v4, "resetToDefault") & 1) != 0)
    -[AllRefinementsViewModelSection resetToDefault](v4, "resetToDefault");

}

void sub_100428AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100428ACC(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v7;
  id v8;
  void *v9;
  id v10;

  v7 = *(void **)(*(_QWORD *)(a1 + 32) + 144);
  v8 = a2;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "sections"));
  v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectAtIndexedSubscript:", a3));

  LOBYTE(a3) = objc_msgSend(v10, "compare:", v8);
  if ((a3 & 1) == 0)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    *a4 = 1;
  }

}

void sub_10042925C(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "application"));
  objc_msgSend(v1, "configureForLoadingStateWithEnabledRideBookingApplication:", v2);

}

id sub_10042929C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "configureForErrorMessageWithRideBookingRideOptionStatus:", *(_QWORD *)(a1 + 40));
}

id sub_1004292A8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "configureWithRideBookingRideOptionStatus:titleType:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_100429998(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_console"));
  objc_msgSend(v1, "setCustomTextEnabled:", 1);
  objc_msgSend(v1, "setPageIndex:", 2);

}

void sub_100429A78(id a1)
{
  void *v1;
  void *v2;
  void *v3;
  id v4;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedMapsDelegate](UIApplication, "sharedMapsDelegate"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "chromeViewController"));
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "mapView"));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "_debugConsole"));
  objc_msgSend(v3, "setCustomTextEnabled:", 0);
  objc_msgSend(v3, "setPageIndex:", 0);

}

void sub_10042A16C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_console"));
  objc_msgSend(v2, "updateCustomText:textColor:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

uint64_t sub_10042A370(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, id))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), objc_msgSend(*(id *)(a1 + 32), "authorizationStatus"));
}

uint64_t sub_10042A450(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, id))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), objc_msgSend(*(id *)(a1 + 32), "accuracyAuthorization"));
}

void sub_10042A7C0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "NavigationHeadingUpdates");
  v2 = (void *)qword_1014D2530;
  qword_1014D2530 = (uint64_t)v1;

}

uint64_t sub_10042C7A8(void *a1)
{
  id v1;
  _BOOL4 v2;
  uint64_t v3;
  uint64_t v4;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    v2 = objc_msgSend(v1, "rangeOfString:", CFSTR("roads")) != (id)0x7FFFFFFFFFFFFFFFLL;
    if (objc_msgSend(v1, "rangeOfString:", CFSTR("labels")) == (id)0x7FFFFFFFFFFFFFFFLL)
      v3 = 2 * v2;
    else
      v3 = (2 * v2) | 4;
    if (objc_msgSend(v1, "rangeOfString:", CFSTR("polygons")) != (id)0x7FFFFFFFFFFFFFFFLL)
      v3 |= 8uLL;
    if (objc_msgSend(v1, "rangeOfString:", CFSTR("buildings")) != (id)0x7FFFFFFFFFFFFFFFLL)
      v3 |= 0x10uLL;
    if (objc_msgSend(v1, "rangeOfString:", CFSTR("rasters")) != (id)0x7FFFFFFFFFFFFFFFLL)
      v3 |= 0x20uLL;
    if (objc_msgSend(v1, "rangeOfString:", CFSTR("grid")) != (id)0x7FFFFFFFFFFFFFFFLL)
      v3 |= 0x40uLL;
    if (objc_msgSend(v1, "rangeOfString:", CFSTR("traffic")) != (id)0x7FFFFFFFFFFFFFFFLL)
      v3 |= 0x80uLL;
    if (objc_msgSend(v1, "rangeOfString:", CFSTR("transitlines")) == (id)0x7FFFFFFFFFFFFFFFLL)
      v4 = v3;
    else
      v4 = v3 | 0x100;
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void sub_10042DA24(uint64_t a1, void *a2, uint64_t a3)
{
  DirectionsPlanWaypoint *v5;
  uint64_t v6;
  id v7;

  v7 = a2;
  v5 = objc_alloc_init(DirectionsPlanWaypoint);
  if (objc_msgSend(v7, "_mapstest_isCurrentLocationString"))
  {
    v6 = *(_QWORD *)(a1 + 32);
  }
  else if (*(_QWORD *)(a1 + 56) != a3 || (v6 = *(_QWORD *)(a1 + 40)) == 0)
  {
    -[DirectionsPlanWaypoint setSearchString:](v5, "setSearchString:", v7);
    goto LABEL_7;
  }
  -[DirectionsPlanWaypoint setWaypoint:](v5, "setWaypoint:", v6);
LABEL_7:
  objc_msgSend(*(id *)(a1 + 48), "addPlanningWaypoint:", v5);

}

void sub_10042EC5C(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "transitListItem"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stepView"));
  objc_msgSend(*(id *)(a1 + 40), "transitDirectionsCell:wantsToExpandOrCollapseItem:", v2, v3);

}

id sub_10042F698(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setShowEVOnboardingBanner:", *(unsigned __int8 *)(a1 + 40));
}

void sub_10042F898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10042F8B0(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id result;

  result = objc_msgSend(a2, "type");
  if (result == (id)21)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

void sub_10042FAE8(id a1, BOOL a2)
{
  _BOOL4 v2;
  id v3;
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  NSObject *v8;
  os_log_type_t v9;
  __int16 v10;
  __int16 v11;

  v2 = a2;
  v3 = sub_100431CEC();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = v4;
  if (v2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v11 = 0;
      v6 = "Succeeded in adding Nearby Transit to Favorites via Feature Discovery";
      v7 = (uint8_t *)&v11;
      v8 = v5;
      v9 = OS_LOG_TYPE_INFO;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v8, v9, v6, v7, 2u);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v10 = 0;
    v6 = "Was unable to add Nearby Transit to Favorites via Feature Discovery";
    v7 = (uint8_t *)&v10;
    v8 = v5;
    v9 = OS_LOG_TYPE_ERROR;
    goto LABEL_6;
  }

}

void sub_10042FE18(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_10042FE3C(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "poiEnrichmentActionDelegate"));
    objc_msgSend(v2, "presentPOIEnrichmentInformedConsentWithPresentationContext:completion:", 2, 0);

    objc_msgSend(v3, "setShowRatingsAndPhotosBanner:", 0);
    WeakRetained = v3;
  }

}

void sub_10042FE98(uint64_t a1)
{
  id WeakRetained;
  id v3;

  +[RatingRequestHomeAvailability setHasShownTipKitAlertOnProactiveTray](RatingRequestHomeAvailability, "setHasShownTipKitAlertOnProactiveTray");
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "setShowRatingsAndPhotosBanner:", 0);
    WeakRetained = v3;
  }

}

void sub_10042FFCC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_10042FFF0(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_addNearbyTransitToFavorites");
    +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 226, 8, CFSTR("NEARBY_TRANSIT"));
    WeakRetained = v2;
  }

}

void sub_10043003C(id a1)
{
  +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 213, 8, CFSTR("NEARBY_TRANSIT"));
}

void sub_100430058(uint64_t a1)
{
  id *WeakRetained;
  id *v2;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained[2], "dismissedTipNotification");
    +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 217, 8, CFSTR("NEARBY_TRANSIT"));
    WeakRetained = v2;
  }

}

void sub_100430158(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1004301FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100431490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1004314BC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1004314CC(uint64_t a1)
{

}

void sub_1004314D4(uint64_t a1, char a2)
{
  id v3;

  if ((a2 & 1) == 0
    && objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "_isValidURLForWebView:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40)))
  {
    v3 = objc_msgSend(objc_alloc((Class)SFSafariViewController), "initWithURL:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
    if (!sub_1002A8AA0(v3))
      objc_msgSend(v3, "setModalPresentationStyle:", 2);
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "_maps_topMostPresentViewController:animated:completion:", v3, 1, 0);

  }
}

id sub_10043157C()
{
  if (qword_1014D5190 != -1)
    dispatch_once(&qword_1014D5190, &stru_1011B6160);
  return (id)qword_1014D5188;
}

void sub_1004315BC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "Camera");
  v2 = (void *)qword_1014D5188;
  qword_1014D5188 = (uint64_t)v1;

}

id sub_1004315EC()
{
  if (qword_1014D51A0 != -1)
    dispatch_once(&qword_1014D51A0, &stru_1011B6180);
  return (id)qword_1014D5198;
}

void sub_10043162C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "Collections");
  v2 = (void *)qword_1014D5198;
  qword_1014D5198 = (uint64_t)v1;

}

id sub_10043165C()
{
  if (qword_1014D51B0 != -1)
    dispatch_once(&qword_1014D51B0, &stru_1011B61A0);
  return (id)qword_1014D51A8;
}

void sub_10043169C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "ContainerVC");
  v2 = (void *)qword_1014D51A8;
  qword_1014D51A8 = (uint64_t)v1;

}

id sub_1004316CC()
{
  if (qword_1014D51C0 != -1)
    dispatch_once(&qword_1014D51C0, &stru_1011B61C0);
  return (id)qword_1014D51B8;
}

void sub_10043170C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CuratedCollections");
  v2 = (void *)qword_1014D51B8;
  qword_1014D51B8 = (uint64_t)v1;

}

id sub_10043173C()
{
  if (qword_1014D51D0 != -1)
    dispatch_once(&qword_1014D51D0, &stru_1011B61E0);
  return (id)qword_1014D51C8;
}

void sub_10043177C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "EVOnboarding");
  v2 = (void *)qword_1014D51C8;
  qword_1014D51C8 = (uint64_t)v1;

}

id sub_1004317AC()
{
  if (qword_1014D51E0 != -1)
    dispatch_once(&qword_1014D51E0, &stru_1011B6200);
  return (id)qword_1014D51D8;
}

void sub_1004317EC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "LightLevelProviding");
  v2 = (void *)qword_1014D51D8;
  qword_1014D51D8 = (uint64_t)v1;

}

id sub_10043181C()
{
  if (qword_1014D51F0 != -1)
    dispatch_once(&qword_1014D51F0, &stru_1011B6220);
  return (id)qword_1014D51E8;
}

void sub_10043185C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "MapMode");
  v2 = (void *)qword_1014D51E8;
  qword_1014D51E8 = (uint64_t)v1;

}

id sub_10043188C()
{
  if (qword_1014D5200 != -1)
    dispatch_once(&qword_1014D5200, &stru_1011B6240);
  return (id)qword_1014D51F8;
}

void sub_1004318CC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "MapsActivity");
  v2 = (void *)qword_1014D51F8;
  qword_1014D51F8 = (uint64_t)v1;

}

id sub_1004318FC()
{
  if (qword_1014D5210 != -1)
    dispatch_once(&qword_1014D5210, &stru_1011B6260);
  return (id)qword_1014D5208;
}

void sub_10043193C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "MapsAssert");
  v2 = (void *)qword_1014D5208;
  qword_1014D5208 = (uint64_t)v1;

}

id sub_10043196C()
{
  if (qword_1014D5220 != -1)
    dispatch_once(&qword_1014D5220, &stru_1011B6280);
  return (id)qword_1014D5218;
}

void sub_1004319AC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "MapsChrome");
  v2 = (void *)qword_1014D5218;
  qword_1014D5218 = (uint64_t)v1;

}

id sub_1004319DC()
{
  if (qword_1014D5230 != -1)
    dispatch_once(&qword_1014D5230, &stru_1011B62A0);
  return (id)qword_1014D5228;
}

void sub_100431A1C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "MapsDefault");
  v2 = (void *)qword_1014D5228;
  qword_1014D5228 = (uint64_t)v1;

}

id sub_100431A4C()
{
  if (qword_1014D5240 != -1)
    dispatch_once(&qword_1014D5240, &stru_1011B62C0);
  return (id)qword_1014D5238;
}

void sub_100431A8C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "MapsLaunch");
  v2 = (void *)qword_1014D5238;
  qword_1014D5238 = (uint64_t)v1;

}

id sub_100431ABC()
{
  if (qword_1014D5250 != -1)
    dispatch_once(&qword_1014D5250, &stru_1011B62E0);
  return (id)qword_1014D5248;
}

void sub_100431AFC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "MapsNotifications");
  v2 = (void *)qword_1014D5248;
  qword_1014D5248 = (uint64_t)v1;

}

id sub_100431B2C()
{
  if (qword_1014D5260 != -1)
    dispatch_once(&qword_1014D5260, &stru_1011B6300);
  return (id)qword_1014D5258;
}

void sub_100431B6C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "MapsPerformance");
  v2 = (void *)qword_1014D5258;
  qword_1014D5258 = (uint64_t)v1;

}

id sub_100431B9C()
{
  if (qword_1014D5270 != -1)
    dispatch_once(&qword_1014D5270, &stru_1011B6320);
  return (id)qword_1014D5268;
}

void sub_100431BDC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "LookAround");
  v2 = (void *)qword_1014D5268;
  qword_1014D5268 = (uint64_t)v1;

}

id sub_100431C0C()
{
  if (qword_1014D5280 != -1)
    dispatch_once(&qword_1014D5280, &stru_1011B6340);
  return (id)qword_1014D5278;
}

void sub_100431C4C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "Navigation");
  v2 = (void *)qword_1014D5278;
  qword_1014D5278 = (uint64_t)v1;

}

id sub_100431C7C()
{
  if (qword_1014D5290 != -1)
    dispatch_once(&qword_1014D5290, &stru_1011B6360);
  return (id)qword_1014D5288;
}

void sub_100431CBC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "NavigationBanners");
  v2 = (void *)qword_1014D5288;
  qword_1014D5288 = (uint64_t)v1;

}

id sub_100431CEC()
{
  if (qword_1014D52A0 != -1)
    dispatch_once(&qword_1014D52A0, &stru_1011B6380);
  return (id)qword_1014D5298;
}

void sub_100431D2C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "NearbyTransit");
  v2 = (void *)qword_1014D5298;
  qword_1014D5298 = (uint64_t)v1;

}

id sub_100431D5C()
{
  if (qword_1014D52B0 != -1)
    dispatch_once(&qword_1014D52B0, &stru_1011B63A0);
  return (id)qword_1014D52A8;
}

void sub_100431D9C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "Offline");
  v2 = (void *)qword_1014D52A8;
  qword_1014D52A8 = (uint64_t)v1;

}

id sub_100431DCC()
{
  if (qword_1014D52C0 != -1)
    dispatch_once(&qword_1014D52C0, &stru_1011B63C0);
  return (id)qword_1014D52B8;
}

void sub_100431E0C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "PlaceCard");
  v2 = (void *)qword_1014D52B8;
  qword_1014D52B8 = (uint64_t)v1;

}

id sub_100431E3C()
{
  if (qword_1014D52D0 != -1)
    dispatch_once(&qword_1014D52D0, &stru_1011B63E0);
  return (id)qword_1014D52C8;
}

void sub_100431E7C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "PPT");
  v2 = (void *)qword_1014D52C8;
  qword_1014D52C8 = (uint64_t)v1;

}

id sub_100431EAC()
{
  if (qword_1014D52E0 != -1)
    dispatch_once(&qword_1014D52E0, &stru_1011B6400);
  return (id)qword_1014D52D8;
}

void sub_100431EEC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "PreferencesSync");
  v2 = (void *)qword_1014D52D8;
  qword_1014D52D8 = (uint64_t)v1;

}

id sub_100431F1C()
{
  if (qword_1014D52F0 != -1)
    dispatch_once(&qword_1014D52F0, &stru_1011B6420);
  return (id)qword_1014D52E8;
}

void sub_100431F5C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "RAPLayout");
  v2 = (void *)qword_1014D52E8;
  qword_1014D52E8 = (uint64_t)v1;

}

id sub_100431F8C()
{
  if (qword_1014D5300 != -1)
    dispatch_once(&qword_1014D5300, &stru_1011B6440);
  return (id)qword_1014D52F8;
}

void sub_100431FCC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "RAPNavigation");
  v2 = (void *)qword_1014D52F8;
  qword_1014D52F8 = (uint64_t)v1;

}

id sub_100431FFC()
{
  if (qword_1014D5310 != -1)
    dispatch_once(&qword_1014D5310, &stru_1011B6460);
  return (id)qword_1014D5308;
}

void sub_10043203C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "RAPSubmission");
  v2 = (void *)qword_1014D5308;
  qword_1014D5308 = (uint64_t)v1;

}

id sub_10043206C()
{
  if (qword_1014D5320 != -1)
    dispatch_once(&qword_1014D5320, &stru_1011B6480);
  return (id)qword_1014D5318;
}

void sub_1004320AC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "Recents");
  v2 = (void *)qword_1014D5318;
  qword_1014D5318 = (uint64_t)v1;

}

id sub_1004320DC()
{
  if (qword_1014D5330 != -1)
    dispatch_once(&qword_1014D5330, &stru_1011B64A0);
  return (id)qword_1014D5328;
}

void sub_10043211C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "RouteCreation");
  v2 = (void *)qword_1014D5328;
  qword_1014D5328 = (uint64_t)v1;

}

id sub_10043214C()
{
  if (qword_1014D5340 != -1)
    dispatch_once(&qword_1014D5340, &stru_1011B64C0);
  return (id)qword_1014D5338;
}

void sub_10043218C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "RoutePlanning");
  v2 = (void *)qword_1014D5338;
  qword_1014D5338 = (uint64_t)v1;

}

id sub_1004321BC()
{
  if (qword_1014D5350 != -1)
    dispatch_once(&qword_1014D5350, &stru_1011B64E0);
  return (id)qword_1014D5348;
}

void sub_1004321FC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "RoutePlanningFeatureDiscovery");
  v2 = (void *)qword_1014D5348;
  qword_1014D5348 = (uint64_t)v1;

}

id sub_10043222C()
{
  if (qword_1014D5360 != -1)
    dispatch_once(&qword_1014D5360, &stru_1011B6500);
  return (id)qword_1014D5358;
}

void sub_10043226C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "SearchAC");
  v2 = (void *)qword_1014D5358;
  qword_1014D5358 = (uint64_t)v1;

}

id sub_10043229C()
{
  if (qword_1014D5370 != -1)
    dispatch_once(&qword_1014D5370, &stru_1011B6520);
  return (id)qword_1014D5368;
}

void sub_1004322DC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "SearchACFindMy");
  v2 = (void *)qword_1014D5368;
  qword_1014D5368 = (uint64_t)v1;

}

id sub_10043230C()
{
  if (qword_1014D5380 != -1)
    dispatch_once(&qword_1014D5380, &stru_1011B6540);
  return (id)qword_1014D5378;
}

void sub_10043234C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "SearchHome");
  v2 = (void *)qword_1014D5378;
  qword_1014D5378 = (uint64_t)v1;

}

id sub_10043237C()
{
  if (qword_1014D5390 != -1)
    dispatch_once(&qword_1014D5390, &stru_1011B6560);
  return (id)qword_1014D5388;
}

void sub_1004323BC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "SharedTrip");
  v2 = (void *)qword_1014D5388;
  qword_1014D5388 = (uint64_t)v1;

}

id sub_1004323EC()
{
  if (qword_1014D53A0 != -1)
    dispatch_once(&qword_1014D53A0, &stru_1011B6580);
  return (id)qword_1014D5398;
}

void sub_10043242C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "Sharing");
  v2 = (void *)qword_1014D5398;
  qword_1014D5398 = (uint64_t)v1;

}

id sub_10043245C()
{
  if (qword_1014D53B0 != -1)
    dispatch_once(&qword_1014D53B0, &stru_1011B65A0);
  return (id)qword_1014D53A8;
}

void sub_10043249C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "Shortcuts");
  v2 = (void *)qword_1014D53A8;
  qword_1014D53A8 = (uint64_t)v1;

}

id sub_1004324CC()
{
  if (qword_1014D53C0 != -1)
    dispatch_once(&qword_1014D53C0, &stru_1011B65C0);
  return (id)qword_1014D53B8;
}

void sub_10043250C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "Transit");
  v2 = (void *)qword_1014D53B8;
  qword_1014D53B8 = (uint64_t)v1;

}

id sub_10043253C()
{
  if (qword_1014D53D0 != -1)
    dispatch_once(&qword_1014D53D0, &stru_1011B65E0);
  return (id)qword_1014D53C8;
}

void sub_10043257C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "TransitPay");
  v2 = (void *)qword_1014D53C8;
  qword_1014D53C8 = (uint64_t)v1;

}

id sub_1004325AC()
{
  if (qword_1014D53E0 != -1)
    dispatch_once(&qword_1014D53E0, &stru_1011B6600);
  return (id)qword_1014D53D8;
}

void sub_1004325EC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "TransitSchedules");
  v2 = (void *)qword_1014D53D8;
  qword_1014D53D8 = (uint64_t)v1;

}

id sub_10043261C()
{
  if (qword_1014D53F0 != -1)
    dispatch_once(&qword_1014D53F0, &stru_1011B6620);
  return (id)qword_1014D53E8;
}

void sub_10043265C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "UserProfile");
  v2 = (void *)qword_1014D53E8;
  qword_1014D53E8 = (uint64_t)v1;

}

id sub_10043268C()
{
  if (qword_1014D5400 != -1)
    dispatch_once(&qword_1014D5400, &stru_1011B6640);
  return (id)qword_1014D53F8;
}

void sub_1004326CC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VehicleDisambiguator");
  v2 = (void *)qword_1014D53F8;
  qword_1014D53F8 = (uint64_t)v1;

}

id sub_1004326FC()
{
  if (qword_1014D5410 != -1)
    dispatch_once(&qword_1014D5410, &stru_1011B6660);
  return (id)qword_1014D5408;
}

void sub_10043273C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VirtualGarage");
  v2 = (void *)qword_1014D5408;
  qword_1014D5408 = (uint64_t)v1;

}

id sub_10043276C()
{
  if (qword_1014D5420 != -1)
    dispatch_once(&qword_1014D5420, &stru_1011B6680);
  return (id)qword_1014D5418;
}

void sub_1004327AC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "Weather");
  v2 = (void *)qword_1014D5418;
  qword_1014D5418 = (uint64_t)v1;

}

id sub_1004327DC()
{
  if (qword_1014D5430 != -1)
    dispatch_once(&qword_1014D5430, &stru_1011B66A0);
  return (id)qword_1014D5428;
}

void sub_10043281C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "IncidentsReporting");
  v2 = (void *)qword_1014D5428;
  qword_1014D5428 = (uint64_t)v1;

}

id sub_10043284C()
{
  if (qword_1014D5440 != -1)
    dispatch_once(&qword_1014D5440, &stru_1011B66C0);
  return (id)qword_1014D5438;
}

void sub_10043288C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "Watermarking");
  v2 = (void *)qword_1014D5438;
  qword_1014D5438 = (uint64_t)v1;

}

id sub_1004328BC()
{
  if (qword_1014D5450 != -1)
    dispatch_once(&qword_1014D5450, &stru_1011B66E0);
  return (id)qword_1014D5448;
}

void sub_1004328FC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "WaypointRequest");
  v2 = (void *)qword_1014D5448;
  qword_1014D5448 = (uint64_t)v1;

}

id sub_10043292C()
{
  if (qword_1014D5460 != -1)
    dispatch_once(&qword_1014D5460, &stru_1011B6700);
  return (id)qword_1014D5458;
}

void sub_10043296C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "WebBundle");
  v2 = (void *)qword_1014D5458;
  qword_1014D5458 = (uint64_t)v1;

}

id sub_10043299C()
{
  if (qword_1014D5470 != -1)
    dispatch_once(&qword_1014D5470, &stru_1011B6720);
  return (id)qword_1014D5468;
}

void sub_1004329DC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "RAPRecordsManager");
  v2 = (void *)qword_1014D5468;
  qword_1014D5468 = (uint64_t)v1;

}

id sub_100432A0C()
{
  if (qword_1014D5480 != -1)
    dispatch_once(&qword_1014D5480, &stru_1011B6740);
  return (id)qword_1014D5478;
}

void sub_100432A4C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "UGCPhotoAttribution");
  v2 = (void *)qword_1014D5478;
  qword_1014D5478 = (uint64_t)v1;

}

id sub_100432A7C()
{
  if (qword_1014D5490 != -1)
    dispatch_once(&qword_1014D5490, &stru_1011B6760);
  return (id)qword_1014D5488;
}

void sub_100432ABC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "SearchResultsImpressions");
  v2 = (void *)qword_1014D5488;
  qword_1014D5488 = (uint64_t)v1;

}

id sub_100432AEC()
{
  if (qword_1014D54A0 != -1)
    dispatch_once(&qword_1014D54A0, &stru_1011B6780);
  return (id)qword_1014D5498;
}

void sub_100432B2C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "SearchRedo");
  v2 = (void *)qword_1014D5498;
  qword_1014D5498 = (uint64_t)v1;

}

id sub_100432B5C()
{
  if (qword_1014D54B0 != -1)
    dispatch_once(&qword_1014D54B0, &stru_1011B67A0);
  return (id)qword_1014D54A8;
}

void sub_100432B9C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "StaleTimeBug_105865770");
  v2 = (void *)qword_1014D54A8;
  qword_1014D54A8 = (uint64_t)v1;

}

id sub_100432BCC()
{
  if (qword_1014D54C0 != -1)
    dispatch_once(&qword_1014D54C0, &stru_1011B67C0);
  return (id)qword_1014D54B8;
}

void sub_100432C0C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CustomPOIsController");
  v2 = (void *)qword_1014D54B8;
  qword_1014D54B8 = (uint64_t)v1;

}

id sub_100432C3C()
{
  if (qword_1014D54D0 != -1)
    dispatch_once(&qword_1014D54D0, &stru_1011B67E0);
  return (id)qword_1014D54C8;
}

void sub_100432C7C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "DeviceConnection");
  v2 = (void *)qword_1014D54C8;
  qword_1014D54C8 = (uint64_t)v1;

}

id sub_100432CAC()
{
  if (qword_1014D54E0 != -1)
    dispatch_once(&qword_1014D54E0, &stru_1011B6800);
  return (id)qword_1014D54D8;
}

void sub_100432CEC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "ElevationGraph");
  v2 = (void *)qword_1014D54D8;
  qword_1014D54D8 = (uint64_t)v1;

}

id sub_100432D1C()
{
  if (qword_1014D54F0 != -1)
    dispatch_once(&qword_1014D54F0, &stru_1011B6820);
  return (id)qword_1014D54E8;
}

void sub_100432D5C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "LightLevel");
  v2 = (void *)qword_1014D54E8;
  qword_1014D54E8 = (uint64_t)v1;

}

id sub_100432D8C()
{
  if (qword_1014D5500 != -1)
    dispatch_once(&qword_1014D5500, &stru_1011B6840);
  return (id)qword_1014D54F8;
}

void sub_100432DCC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "MapRegion");
  v2 = (void *)qword_1014D54F8;
  qword_1014D54F8 = (uint64_t)v1;

}

id sub_100432DFC()
{
  if (qword_1014D5510 != -1)
    dispatch_once(&qword_1014D5510, &stru_1011B6860);
  return (id)qword_1014D5508;
}

void sub_100432E3C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "NavigationSimulationPrompt");
  v2 = (void *)qword_1014D5508;
  qword_1014D5508 = (uint64_t)v1;

}

id sub_100432E6C()
{
  if (qword_1014D5520 != -1)
    dispatch_once(&qword_1014D5520, &stru_1011B6880);
  return (id)qword_1014D5518;
}

void sub_100432EAC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "NavIndicators");
  v2 = (void *)qword_1014D5518;
  qword_1014D5518 = (uint64_t)v1;

}

id sub_100432EDC()
{
  if (qword_1014D5530 != -1)
    dispatch_once(&qword_1014D5530, &stru_1011B68A0);
  return (id)qword_1014D5528;
}

void sub_100432F1C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "ProactiveTray");
  v2 = (void *)qword_1014D5528;
  qword_1014D5528 = (uint64_t)v1;

}

id sub_100432F4C()
{
  if (qword_1014D5540 != -1)
    dispatch_once(&qword_1014D5540, &stru_1011B68C0);
  return (id)qword_1014D5538;
}

void sub_100432F8C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "RAPPresenter");
  v2 = (void *)qword_1014D5538;
  qword_1014D5538 = (uint64_t)v1;

}

id sub_100432FBC()
{
  if (qword_1014D5550 != -1)
    dispatch_once(&qword_1014D5550, &stru_1011B68E0);
  return (id)qword_1014D5548;
}

void sub_100432FFC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "RoutePlanningOutline");
  v2 = (void *)qword_1014D5548;
  qword_1014D5548 = (uint64_t)v1;

}

id sub_10043302C()
{
  if (qword_1014D5560 != -1)
    dispatch_once(&qword_1014D5560, &stru_1011B6900);
  return (id)qword_1014D5558;
}

void sub_10043306C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "StatusIndicator");
  v2 = (void *)qword_1014D5558;
  qword_1014D5558 = (uint64_t)v1;

}

id sub_10043309C()
{
  if (qword_1014D5570 != -1)
    dispatch_once(&qword_1014D5570, &stru_1011B6920);
  return (id)qword_1014D5568;
}

void sub_1004330DC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "TransitNavigation");
  v2 = (void *)qword_1014D5568;
  qword_1014D5568 = (uint64_t)v1;

}

id sub_10043310C()
{
  if (qword_1014D5580 != -1)
    dispatch_once(&qword_1014D5580, &stru_1011B6940);
  return (id)qword_1014D5578;
}

void sub_10043314C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "UGCCallToActionViewProvider");
  v2 = (void *)qword_1014D5578;
  qword_1014D5578 = (uint64_t)v1;

}

id sub_10043317C()
{
  if (qword_1014D5590 != -1)
    dispatch_once(&qword_1014D5590, &stru_1011B6960);
  return (id)qword_1014D5588;
}

void sub_1004331BC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "UGCPhotoDownloadManager");
  v2 = (void *)qword_1014D5588;
  qword_1014D5588 = (uint64_t)v1;

}

id sub_1004331EC()
{
  if (qword_1014D55A0 != -1)
    dispatch_once(&qword_1014D55A0, &stru_1011B6980);
  return (id)qword_1014D5598;
}

void sub_10043322C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "UGCReviewedPlacesManager");
  v2 = (void *)qword_1014D5598;
  qword_1014D5598 = (uint64_t)v1;

}

id sub_10043325C()
{
  if (qword_1014D55B0 != -1)
    dispatch_once(&qword_1014D55B0, &stru_1011B69A0);
  return (id)qword_1014D55A8;
}

void sub_10043329C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "UGCPhotoViewerDataProvider");
  v2 = (void *)qword_1014D55A8;
  qword_1014D55A8 = (uint64_t)v1;

}

id sub_1004332CC()
{
  if (qword_1014D55C0 != -1)
    dispatch_once(&qword_1014D55C0, &stru_1011B69C0);
  return (id)qword_1014D55B8;
}

void sub_10043330C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CarBlurView");
  v2 = (void *)qword_1014D55B8;
  qword_1014D55B8 = (uint64_t)v1;

}

id sub_10043333C()
{
  if (qword_1014D55D0 != -1)
    dispatch_once(&qword_1014D55D0, &stru_1011B69E0);
  return (id)qword_1014D55C8;
}

void sub_10043337C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CarCards");
  v2 = (void *)qword_1014D55C8;
  qword_1014D55C8 = (uint64_t)v1;

}

id sub_1004333AC()
{
  if (qword_1014D55E0 != -1)
    dispatch_once(&qword_1014D55E0, &stru_1011B6A00);
  return (id)qword_1014D55D8;
}

void sub_1004333EC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CarClusterSuggestion");
  v2 = (void *)qword_1014D55D8;
  qword_1014D55D8 = (uint64_t)v1;

}

id sub_10043341C()
{
  if (qword_1014D55F0 != -1)
    dispatch_once(&qword_1014D55F0, &stru_1011B6A20);
  return (id)qword_1014D55E8;
}

void sub_10043345C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CarCompression");
  v2 = (void *)qword_1014D55E8;
  qword_1014D55E8 = (uint64_t)v1;

}

id sub_10043348C()
{
  if (qword_1014D5600 != -1)
    dispatch_once(&qword_1014D5600, &stru_1011B6A40);
  return (id)qword_1014D55F8;
}

void sub_1004334CC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CarFocus");
  v2 = (void *)qword_1014D55F8;
  qword_1014D55F8 = (uint64_t)v1;

}

id sub_1004334FC()
{
  if (qword_1014D5610 != -1)
    dispatch_once(&qword_1014D5610, &stru_1011B6A60);
  return (id)qword_1014D5608;
}

void sub_10043353C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CarInstrumentCluster");
  v2 = (void *)qword_1014D5608;
  qword_1014D5608 = (uint64_t)v1;

}

id sub_10043356C()
{
  if (qword_1014D5620 != -1)
    dispatch_once(&qword_1014D5620, &stru_1011B6A80);
  return (id)qword_1014D5618;
}

void sub_1004335AC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CarGuidance");
  v2 = (void *)qword_1014D5618;
  qword_1014D5618 = (uint64_t)v1;

}

id sub_1004335DC()
{
  if (qword_1014D5630 != -1)
    dispatch_once(&qword_1014D5630, &stru_1011B6AA0);
  return (id)qword_1014D5628;
}

void sub_10043361C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CarMapWidget");
  v2 = (void *)qword_1014D5628;
  qword_1014D5628 = (uint64_t)v1;

}

id sub_10043364C()
{
  if (qword_1014D5640 != -1)
    dispatch_once(&qword_1014D5640, &stru_1011B6AC0);
  return (id)qword_1014D5638;
}

void sub_10043368C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CarPlay");
  v2 = (void *)qword_1014D5638;
  qword_1014D5638 = (uint64_t)v1;

}

id sub_1004336BC()
{
  if (qword_1014D5650 != -1)
    dispatch_once(&qword_1014D5650, &stru_1011B6AE0);
  return (id)qword_1014D5648;
}

void sub_1004336FC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CarRouteGenius");
  v2 = (void *)qword_1014D5648;
  qword_1014D5648 = (uint64_t)v1;

}

id sub_10043372C()
{
  if (qword_1014D5660 != -1)
    dispatch_once(&qword_1014D5660, &stru_1011B6B00);
  return (id)qword_1014D5658;
}

void sub_10043376C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CarSessionController");
  v2 = (void *)qword_1014D5658;
  qword_1014D5658 = (uint64_t)v1;

}

id sub_10043379C()
{
  if (qword_1014D5670 != -1)
    dispatch_once(&qword_1014D5670, &stru_1011B6B20);
  return (id)qword_1014D5668;
}

void sub_1004337DC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CarSmallWidget");
  v2 = (void *)qword_1014D5668;
  qword_1014D5668 = (uint64_t)v1;

}

id sub_10043380C()
{
  if (qword_1014D5680 != -1)
    dispatch_once(&qword_1014D5680, &stru_1011B6B40);
  return (id)qword_1014D5678;
}

void sub_10043384C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CompanionController");
  v2 = (void *)qword_1014D5678;
  qword_1014D5678 = (uint64_t)v1;

}

id sub_10043387C()
{
  if (qword_1014D5690 != -1)
    dispatch_once(&qword_1014D5690, &stru_1011B6B60);
  return (id)qword_1014D5688;
}

void sub_1004338BC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "HydrateGeoMapItem");
  v2 = (void *)qword_1014D5688;
  qword_1014D5688 = (uint64_t)v1;

}

id sub_1004338EC()
{
  if (qword_1014D56A0 != -1)
    dispatch_once(&qword_1014D56A0, &stru_1011B6B80);
  return (id)qword_1014D5698;
}

void sub_10043392C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "IdleTimer");
  v2 = (void *)qword_1014D5698;
  qword_1014D5698 = (uint64_t)v1;

}

id sub_10043395C()
{
  if (qword_1014D56B0 != -1)
    dispatch_once(&qword_1014D56B0, &stru_1011B6BA0);
  return (id)qword_1014D56A8;
}

void sub_10043399C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "PedestrianAR");
  v2 = (void *)qword_1014D56A8;
  qword_1014D56A8 = (uint64_t)v1;

}

id sub_1004339CC()
{
  if (qword_1014D56C0 != -1)
    dispatch_once(&qword_1014D56C0, &stru_1011B6BC0);
  return (id)qword_1014D56B8;
}

void sub_100433A0C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "PuckTracking");
  v2 = (void *)qword_1014D56B8;
  qword_1014D56B8 = (uint64_t)v1;

}

void sub_1004345C4(void *a1, uint64_t a2)
{
  id v3;
  id v4;

  v3 = a1;
  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v4, "setInteger:forKey:", a2, v3);

}

id sub_100434624(void *a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v3 = objc_msgSend(v2, "integerForKey:", v1);

  if ((unint64_t)v3 <= 2)
    return v3;
  else
    return 0;
}

void sub_100435484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1004354B4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "handleDismissAction:", 0);

}

id sub_1004365D4()
{
  if (qword_1014D2548 != -1)
    dispatch_once(&qword_1014D2548, &stru_1011B6D18);
  return (id)qword_1014D2540;
}

MNGuidanceARInfo *__cdecl sub_100436B9C(id a1, PedestrianARVKFeatureMapEntry *a2, unint64_t a3)
{
  return -[PedestrianARVKFeatureMapEntry guidanceInfo](a2, "guidanceInfo", a3);
}

BOOL sub_100436C5C(id a1, MNGuidanceARInfo *a2, unint64_t a3, BOOL *a4)
{
  return -[MNGuidanceARInfo eventType](a2, "eventType", a3, a4) == 1;
}

int64_t sub_100436DBC(id a1, MNGuidanceARInfo *a2, MNGuidanceARInfo *a3)
{
  MNGuidanceARInfo *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", -[MNGuidanceARInfo stepIndex](a2, "stepIndex")));
  v6 = -[MNGuidanceARInfo stepIndex](v4, "stepIndex");

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v6));
  v8 = objc_msgSend(v5, "compare:", v7);

  return (int64_t)v8;
}

BOOL sub_100436E90(id a1, MNGuidanceARInfo *a2, unint64_t a3, BOOL *a4)
{
  return -[MNGuidanceARInfo eventType](a2, "eventType", a3, a4) == 2;
}

int64_t sub_100436FF0(id a1, MNGuidanceARInfo *a2, MNGuidanceARInfo *a3)
{
  MNGuidanceARInfo *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", -[MNGuidanceARInfo stepIndex](a2, "stepIndex")));
  v6 = -[MNGuidanceARInfo stepIndex](v4, "stepIndex");

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v6));
  v8 = objc_msgSend(v5, "compare:", v7);

  return (int64_t)v8;
}

BOOL sub_100437DB0(uint64_t a1, void *a2)
{
  id v3;

  v3 = objc_msgSend(a2, "stepIndex");
  return v3 == objc_msgSend(*(id *)(a1 + 32), "stepIndex");
}

void sub_100439F30(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "PedestrianARInstructionContainerView");
  v2 = (void *)qword_1014D2540;
  qword_1014D2540 = (uint64_t)v1;

}

id sub_10043A514(uint64_t a1, uint64_t a2)
{
  if (!a2)
    GEOConfigSetBOOL(MapsConfig_PreciseLocationDisabledAlertWasDisplayed, off_1014B3D48, 1);
  return objc_msgSend(*(id *)(a1 + 32), "_alertDidFinishProcessing");
}

void sub_10043A64C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10043A6CC;
  v6[3] = &unk_1011AC8B0;
  v4 = *(_QWORD *)(a1 + 32);
  v7 = v3;
  v8 = v4;
  v5 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);

}

id sub_10043A6CC(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  id v6;
  NSObject *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  void *v14;
  int v15;
  void *v16;

  if (+[PushNotificationPrompt shouldPromptForLaunch](PushNotificationPrompt, "shouldPromptForLaunch")
    && !objc_msgSend(*(id *)(a1 + 32), "authorizationStatus"))
  {
    v12 = sub_100431A4C();
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      LOWORD(v15) = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "AppLaunchNotifcationPrewarmAlert: will prompt for first launch.", (uint8_t *)&v15, 2u);
    }

    v14 = *(void **)(a1 + 40);
    v9 = objc_msgSend(*(id *)(a1 + 32), "authorizationStatus");
    v10 = v14;
    v11 = 0;
    return objc_msgSend(v10, "_presentAlertUIWithStatus:repeatPrompt:", v9, v11);
  }
  if (+[PushNotificationPrompt shouldRepeatPromptForLaunch](PushNotificationPrompt, "shouldRepeatPromptForLaunch")&& objc_msgSend(*(id *)(a1 + 32), "authorizationStatus") != (id)2)
  {
    v6 = sub_100431A4C();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      LOWORD(v15) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "AppLaunchNotifcationPrewarmAlert: will prompt for repeat launch.", (uint8_t *)&v15, 2u);
    }

    v8 = *(void **)(a1 + 40);
    v9 = objc_msgSend(*(id *)(a1 + 32), "authorizationStatus");
    v10 = v8;
    v11 = 1;
    return objc_msgSend(v10, "_presentAlertUIWithStatus:repeatPrompt:", v9, v11);
  }
  v2 = sub_100431A4C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(*(id *)(a1 + 32), "authorizationStatus")));
    v15 = 138412290;
    v16 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "AppLaunchNotifcationPrewarmAlert: not displaying with authorization status %@", (uint8_t *)&v15, 0xCu);

  }
  return objc_msgSend(*(id *)(a1 + 40), "_alertDidFinishProcessing");
}

void sub_10043A960(uint64_t a1)
{
  void *v1;
  _QWORD v2[5];

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10043A9D8;
  v2[3] = &unk_1011AC860;
  v2[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend((id)qword_1014D2550, "dismissViewControllerAnimated:completion:", 1, v2);
  v1 = (void *)qword_1014D2550;
  qword_1014D2550 = 0;

}

id sub_10043A9D8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_alertDidFinishProcessing");
}

id sub_10043C870(uint64_t a1, void *a2, uint64_t a3)
{
  id result;

  result = objc_msgSend(a2, "unsignedIntegerValue");
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * a3) = (_DWORD)result;
  return result;
}

double sub_10043C9E4(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  double x;
  MKMapRect v6;
  MKCoordinateRegion v7;

  v1 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "mapRegion"));
  v3 = (void *)v1;
  if (v1)
  {
    v6.origin.x = GEOMapRectForMapRegion(v1, v2);
    v7 = MKCoordinateRegionForMapRect(v6);
    x = MKMapRectForCoordinateRegion((__n128)v7.center, *(__n128 *)&v7.center.longitude, (__n128)v7.span, *(__n128 *)&v7.span.longitudeDelta);
  }
  else
  {
    x = MKMapRectNull.origin.x;
  }

  return x;
}

double sub_10043CA64(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  double x;
  MKMapRect v9;
  MKCoordinateRegion v10;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "mapItem"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "_geoMapItem"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "displayMapRegionOrNil"));

  objc_msgSend(v1, "_coordinate");
  if (v3)
  {
    v9.origin.x = GEOMapRectForMapRegion(v3, v4);
    v10 = MKCoordinateRegionForMapRect(v9);
  }
  else
  {
    v10 = MKCoordinateRegionMakeWithDistance(*(CLLocationCoordinate2D *)&v5, 200.0, 200.0);
  }
  if (v10.center.longitude < -180.0
    || v10.center.longitude > 180.0
    || v10.center.latitude < -90.0
    || v10.center.latitude > 90.0
    || v10.span.latitudeDelta < 0.0
    || v10.span.latitudeDelta > 180.0
    || v10.span.longitudeDelta < 0.0
    || v10.span.longitudeDelta > 360.0)
  {
    x = MKMapRectNull.origin.x;
  }
  else
  {
    x = MKMapRectForCoordinateRegion((__n128)v10.center, *(__n128 *)&v10.center.longitude, (__n128)v10.span, *(__n128 *)&v10.span.longitudeDelta);
  }

  return x;
}

id sub_10043CD54(void *a1)
{
  id v1;
  id v2;
  unsigned int v3;
  uint64_t v4;
  void *v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;

  v1 = a1;
  v2 = objc_alloc_init((Class)GEORPFeatureHandle);
  v3 = objc_msgSend(v1, "featureType") - 1;
  if (v3 > 0xE)
    v4 = 0;
  else
    v4 = dword_100E372D8[v3];
  objc_msgSend(v2, "setType:", v4);
  objc_msgSend(v2, "setFeatureIndex:", objc_msgSend(v1, "featureIndex"));
  objc_msgSend(v2, "setFeatureTileX:", objc_msgSend(v1, "tileX"));
  objc_msgSend(v2, "setFeatureTileY:", objc_msgSend(v1, "tileY"));
  objc_msgSend(v2, "setFeatureTileZ:", objc_msgSend(v1, "tileZ"));
  objc_msgSend(v2, "setStyle:", objc_msgSend(v1, "tileStyle"));
  objc_msgSend(v2, "setIdentifier:", objc_msgSend(v1, "tileVersion"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "styleAttributes"));
  v6 = objc_msgSend(v5, "countAttrs");

  if (v6)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "styleAttributes"));
      v10 = *(unsigned int *)((char *)objc_msgSend(v9, "v") + v7);

      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "styleAttributes"));
      v12 = *(unsigned int *)((char *)objc_msgSend(v11, "v") + v7 + 4);

      objc_msgSend(v2, "addStyleAttribute:", v10 | (v12 << 32));
      ++v8;
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "styleAttributes"));
      LODWORD(v10) = objc_msgSend(v13, "countAttrs");

      v7 += 8;
    }
    while (v8 < v10);
  }

  return v2;
}

uint64_t sub_10043D0AC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, double))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(double *)(a1 + 40));
}

void sub_10043D9BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, os_activity_scope_state_s state)
{
  _Unwind_Resume(exception_object);
}

id sub_10043D9D8()
{
  if (qword_1014D2560 != -1)
    dispatch_once(&qword_1014D2560, &stru_1011B6D80);
  return (id)qword_1014D2558;
}

void sub_10043DB24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  _Unwind_Resume(exception_object);
}

void sub_10043DC74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_10043E0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_10043E310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  _Unwind_Resume(exception_object);
}

void sub_10043E32C(uint64_t a1)
{
  void *v1;
  double v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "instructionLabel"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "layer"));
  LODWORD(v2) = 1.0;
  objc_msgSend(v1, "setOpacity:", v2);

}

void sub_10043E378(uint64_t a1)
{
  void *v1;
  double v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "coachingOverlayView"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "layer"));
  LODWORD(v2) = 1.0;
  objc_msgSend(v1, "setOpacity:", v2);

}

void sub_10043E6B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,os_activity_scope_state_s state)
{
  id *v25;
  uint64_t v26;

  objc_destroyWeak(v25);
  objc_destroyWeak((id *)(v26 - 112));
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_10043E6E8(uint64_t a1)
{
  void *v1;
  double v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "instructionLabel"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "layer"));
  LODWORD(v2) = 0;
  objc_msgSend(v1, "setOpacity:", v2);

}

void sub_10043E734(uint64_t a1)
{
  void *v1;
  double v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "coachingOverlayView"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "layer"));
  LODWORD(v2) = 0;
  objc_msgSend(v1, "setOpacity:", v2);

}

uint64_t sub_10043E780(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  uint64_t result;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "setFadingOut:", 0);

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  return result;
}

void sub_10043ED48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, os_activity_scope_state_s state)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_10043ED7C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id WeakRetained;

  v1 = *(_QWORD *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "instructionLabel"));
  objc_msgSend(v2, "setText:", v1);

}

void sub_10043EF74(uint64_t a1)
{
  id WeakRetained;
  id v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  int v7;
  id v8;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = sub_10043D9D8();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v7 = 134349056;
      v8 = WeakRetained;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%{public}p] Activating coaching overlay", (uint8_t *)&v7, 0xCu);
    }

    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "session"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "coachingOverlayView"));
    objc_msgSend(v5, "setSession:", v4);

    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "coachingOverlayView"));
    objc_msgSend(v6, "setActive:animated:", 1, 0);

  }
}

void sub_10043F268(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "PedestrianARLocalizingView");
  v2 = (void *)qword_1014D2558;
  qword_1014D2558 = (uint64_t)v1;

}

void sub_10043FE20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10043FE4C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10043FEF0;
  v5[3] = &unk_1011AD1E8;
  objc_copyWeak(&v7, (id *)(a1 + 32));
  v6 = v3;
  v4 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v5);

  objc_destroyWeak(&v7);
}

void sub_10043FEF0(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "_virtualGarageDidUpdateUnpairedVehicles:", *(_QWORD *)(a1 + 32));
    WeakRetained = v3;
  }

}

id sub_100440AF4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chromeViewController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "mapView"));
  objc_msgSend(v3, "_setApplicationState:", 1);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chromeViewController"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "searchPinsManager"));
  objc_msgSend(v5, "addPOIShapeLoadingObserver:", *(_QWORD *)(a1 + 32));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chromeViewController"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "mapView"));
  objc_msgSend(v7, "setShowsUserLocation:", 1);

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chromeViewController"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "mapView"));
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 56) = objc_msgSend(v9, "isScrollEnabled");

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chromeViewController"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "mapView"));
  objc_msgSend(v11, "setScrollEnabled:", 0);

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chromeViewController"));
  objc_msgSend(v12, "setHardwareBackButtonBehavior:forContext:", 0, *(_QWORD *)(a1 + 32));

  return objc_msgSend(*(id *)(a1 + 32), "_offerVehicleDisambiguationIfNeeded");
}

id sub_100440C20(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  _QWORD *v4;
  void *v5;
  void *v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "placeCard"));
  objc_msgSend(v2, "reloadData");

  v3 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "shouldStartLoadWhenBecomingCurrent");
  v4 = *(_QWORD **)(a1 + 32);
  if (v3)
  {
    v5 = (void *)v4[5];
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "currentTraits"));
    objc_msgSend(v5, "startLoadWithTraits:", v6);

  }
  else
  {
    objc_msgSend(v4, "_showPinsAnimated:", 0);
  }
  objc_msgSend(*(id *)(a1 + 32), "_showPinsAnimated:", 0);
  objc_msgSend(*(id *)(a1 + 32), "_updateAnnotationsForLoadedRoute");
  objc_msgSend(*(id *)(a1 + 32), "_updateTurnByTurnSupport");
  objc_msgSend(*(id *)(a1 + 32), "_updateLoading");
  objc_msgSend(*(id *)(a1 + 32), "_updateRouteAdvisories");
  return objc_msgSend(*(id *)(a1 + 32), "_updateZoomButtonContent");
}

void sub_100441288(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "_virtualGarageDidUpdateUnpairedVehicles:", *(_QWORD *)(a1 + 32));
    WeakRetained = v3;
  }

}

void sub_10044140C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL sub_100441430(id a1, VGVehicle *a2, unint64_t a3, BOOL *a4)
{
  VGVehicle *v5;
  void *v6;
  unsigned int v7;

  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[VGVehicle iapIdentifier](v5, "iapIdentifier"));
  if (v6)
  {
    v7 = -[VGVehicle isPureElectricVehicle](v5, "isPureElectricVehicle");

    if (v7)
    {
      LOBYTE(v6) = 1;
      *a4 = 1;
    }
    else
    {
      LOBYTE(v6) = 0;
    }
  }

  return (char)v6;
}

void sub_100441498(uint64_t a1)
{
  _QWORD *WeakRetained;
  _QWORD *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && WeakRetained[13])
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_presentEVOnboardingHintForVehicle:");
    WeakRetained = v2;
  }

}

void sub_100441F4C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 160));
  _Unwind_Resume(a1);
}

void sub_100441F78(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint8_t v7[8];
  _QWORD v8[2];
  _QWORD v9[2];

  v2 = sub_10043173C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "User selected ok, will post notification to display onboarding on the phone.", v7, 2u);
  }

  v8[0] = CFSTR("EVOnboardingCarPlayVehicleKey");
  v8[1] = CFSTR("EVOnboardingCarPlayDictionaryKey");
  v4 = *(_QWORD *)(a1 + 40);
  v9[0] = *(_QWORD *)(a1 + 32);
  v9[1] = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v9, v8, 2));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v6, "postNotificationName:object:userInfo:", CFSTR("EVOnboardingCarPlayHintSelectedNotification"), 0, v5);

}

void sub_100442078(uint64_t a1, uint64_t a2)
{
  _QWORD *WeakRetained;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  uint64_t v9;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v5 = sub_10043173C();
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v8 = 134217984;
      v9 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "User dismissed alert with button index: %ld", (uint8_t *)&v8, 0xCu);
    }

    WeakRetained[12] = 2;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[VGVirtualGarageService sharedService](VGVirtualGarageService, "sharedService"));
    objc_msgSend(v7, "unregisterObserver:", *(_QWORD *)(a1 + 32));

    if (qword_1014B79F8 != a2)
      sub_100BA106C(*(void **)(a1 + 40));
  }

}

void sub_100442C18(uint64_t a1, uint64_t a2, int a3)
{
  id v6;
  NSObject *v7;
  _BOOL4 v8;
  __CFString *v9;
  __CFString *v10;
  __CFString *v11;
  uint64_t v12;
  const __CFString *v13;
  const __CFString *v14;
  uint64_t v15;
  __int128 v16;
  _BYTE v17[32];
  __int128 v18;
  uint64_t v19;

  v6 = sub_10043364C();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  v8 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);
  if (a3)
  {
    if (v8)
    {
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "routePlanning _star: simulation popup was dismissed.", v17, 2u);
    }
  }
  else
  {
    if (v8)
    {
      if (*(_BYTE *)a2)
        v9 = CFSTR("YES");
      else
        v9 = CFSTR("NO");
      v10 = v9;
      v11 = v10;
      v12 = *(_QWORD *)(a2 + 16);
      v13 = CFSTR("Full");
      if (v12 == 1)
        v13 = CFSTR("Low");
      if (v12 == 2)
        v14 = CFSTR("RoutePreview");
      else
        v14 = v13;
      *(_DWORD *)v17 = 138412546;
      *(_QWORD *)&v17[4] = v10;
      *(_WORD *)&v17[12] = 2112;
      *(_QWORD *)&v17[14] = v14;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "routePlanning _starting nav, simulates location: %@, guidanceType: %@", v17, 0x16u);

    }
    v7 = objc_claimAutoreleasedReturnValue(+[CarChromeModeCoordinator sharedInstance](CarChromeModeCoordinator, "sharedInstance"));
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v17 = *(_OWORD *)a2;
    *(_OWORD *)&v17[16] = v16;
    v18 = *(_OWORD *)(a2 + 32);
    v19 = *(_QWORD *)(a2 + 48);
    -[NSObject displayNavigationForRouteCollection:options:](v7, "displayNavigationForRouteCollection:options:", v15, v17);
  }

}

void sub_100442EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100442ED0(uint64_t a1)
{
  id *v1;
  void *v2;
  id v3;
  id WeakRetained;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "chromeViewController"));
  v3 = objc_loadWeakRetained(v1);
  objc_msgSend(v2, "setHardwareBackButtonBehavior:forContext:", 0, v3);

}

void sub_1004432BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1004432EC(uint64_t a1, int a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  unsigned __int8 v8;
  void *v9;
  const __CFString *v10;
  void *v11;
  id v12;
  NSObject *v13;
  __CFString *v14;
  __CFString *v15;
  NSObject *v16;
  id v17;
  void *v18;
  id v19;
  NSObject *v20;
  id v21;
  NSObject *v22;
  char *v23;
  id v24;
  const __CFString *v25;
  int v26;
  const char *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  const char *v33;

  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "chromeViewController"));
  v8 = objc_msgSend(v7, "isCurrentContext:", WeakRetained);

  if ((v8 & 1) != 0)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "chromeViewController"));
    v10 = sub_10052CA34(v5);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    objc_msgSend(v9, "captureUserAction:onTarget:eventValue:", 9020, 1007, v11);

    v12 = sub_10043364C();
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v14 = CFSTR("NO");
      if (a2)
        v14 = CFSTR("YES");
      v15 = v14;
      v26 = 138412546;
      v27 = (const char *)v15;
      v28 = 2112;
      v29 = (const char *)v5;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "routePlanning handoff complete with success: %@, error: %@", (uint8_t *)&v26, 0x16u);

    }
    if (a2)
    {
      v16 = objc_claimAutoreleasedReturnValue(+[CarChromeModeCoordinator sharedInstance](CarChromeModeCoordinator, "sharedInstance"));
      -[NSObject displayMapBrowsing](v16, "displayMapBrowsing");
    }
    else
    {
      v16 = objc_claimAutoreleasedReturnValue(+[UIApplication sharedMapsDelegate](UIApplication, "sharedMapsDelegate"));
      v17 = CarInterruptionUserInfoForDestinationHandoffFailure(*(void **)(a1 + 32), v5);
      v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      -[NSObject interruptApplicationWithKind:userInfo:completionHandler:](v16, "interruptApplicationWithKind:userInfo:completionHandler:", 3, v18, 0);

    }
  }
  else
  {
    v19 = sub_1004318FC();
    v20 = objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v26 = 136315906;
      v27 = "-[CarRoutePlanningModeController placeCardDidSelectHandoff:]_block_invoke";
      v28 = 2080;
      v29 = "CarRoutePlanningModeController.m";
      v30 = 1024;
      v31 = 1014;
      v32 = 2080;
      v33 = "isCurrentMode";
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "%s [%s:%d] Assertion: (%s)", (uint8_t *)&v26, 0x26u);
    }

    if (sub_100A70734())
    {
      v21 = sub_1004318FC();
      v22 = objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        v23 = (char *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
        v26 = 138412290;
        v27 = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&v26, 0xCu);

      }
    }
    v24 = sub_10043364C();
    v16 = objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v25 = CFSTR("stopped being currentMode.");
      if (!WeakRetained)
        v25 = CFSTR("deallocated");
      v26 = 138412290;
      v27 = (const char *)v25;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "routePlanning: mode %@ in the middle of destination handoff. Ignoring the handoff completion.", (uint8_t *)&v26, 0xCu);
    }
  }

}

void sub_100444424(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100444448(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  CarRoutePlanningAdvisoryLabel *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  CarRoutePlanningAdvisoryLabel *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  double v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  id v53;
  void *v54;
  _QWORD v55[4];
  CarRoutePlanningAdvisoryLabel *v56;
  _QWORD v57[6];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_preciseLocationOffAdvisory"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_turnByTurnNotAvailableAdvisory"));
  v5 = *(void **)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "currentRoute"));
  v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "_clickableAdvisoryDescriptionForRoute:", v6));

  if (!objc_msgSend(v3, "length") && !objc_msgSend(v4, "length") && !objc_msgSend(v54, "length"))
  {
    objc_msgSend(WeakRetained, "_hideAdvisories");
    goto LABEL_18;
  }
  v7 = (CarRoutePlanningAdvisoryLabel *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "advisoryLabel"));
  if (!v7)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chromeViewController"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "viewport"));

    if (v9)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "chromeViewController"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "chromeViewController"));
      v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "viewport"));

      v12 = -[CarRoutePlanningAdvisoryLabel initWithFrame:]([CarRoutePlanningAdvisoryLabel alloc], "initWithFrame:", CGRectZero.origin.x, CGRectZero.origin.y, CGRectZero.size.width, CGRectZero.size.height);
      -[CarRoutePlanningAdvisoryLabel setTranslatesAutoresizingMaskIntoConstraints:](v12, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
      -[CarRoutePlanningAdvisoryLabel setDelegate:](v12, "setDelegate:", *(_QWORD *)(a1 + 32));
      objc_msgSend(v51, "addSubview:", v12);
      objc_msgSend(WeakRetained, "setAdvisoryLabel:", v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue(-[CarRoutePlanningAdvisoryLabel heightAnchor](v12, "heightAnchor"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "viewportLayoutGuide"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "heightAnchor"));
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "constraintLessThanOrEqualToAnchor:multiplier:", v15, 0.349999994));

      LODWORD(v17) = 1148829696;
      v49 = v16;
      objc_msgSend(v16, "setPriority:", v17);
      v48 = (void *)objc_claimAutoreleasedReturnValue(-[CarRoutePlanningAdvisoryLabel leadingAnchor](v12, "leadingAnchor"));
      v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "viewportLayoutGuide"));
      v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "leadingAnchor"));
      v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "constraintEqualToAnchor:constant:", v47, 8.0));
      v57[0] = v46;
      v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "viewportLayoutGuide"));
      v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "trailingAnchor"));
      v42 = (void *)objc_claimAutoreleasedReturnValue(-[CarRoutePlanningAdvisoryLabel trailingAnchor](v12, "trailingAnchor"));
      v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "constraintGreaterThanOrEqualToAnchor:constant:", v42, 8.0));
      v57[1] = v41;
      v39 = (void *)objc_claimAutoreleasedReturnValue(-[CarRoutePlanningAdvisoryLabel topAnchor](v12, "topAnchor"));
      v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "viewportLayoutGuide"));
      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "topAnchor"));
      v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "constraintEqualToAnchor:constant:", v38, 8.0));
      v57[2] = v37;
      v57[3] = v16;
      v45 = v10;
      v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "viewportLayoutGuide"));
      v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "bottomAnchor"));
      v18 = (void *)objc_claimAutoreleasedReturnValue(-[CarRoutePlanningAdvisoryLabel topAnchor](v12, "topAnchor"));
      v52 = v4;
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "constraintGreaterThanOrEqualToAnchor:constant:", v18, 8.0));
      v57[4] = v19;
      v53 = WeakRetained;
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "mapInsetsLayoutGuide"));
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "topAnchor"));
      v22 = (void *)objc_claimAutoreleasedReturnValue(-[CarRoutePlanningAdvisoryLabel bottomAnchor](v12, "bottomAnchor"));
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "constraintGreaterThanOrEqualToAnchor:", v22));
      v57[5] = v23;
      v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v57, 6));
      +[NSLayoutConstraint activateConstraints:](NSLayoutConstraint, "activateConstraints:", v24);

      WeakRetained = v53;
      v4 = v52;

      -[CarRoutePlanningAdvisoryLabel setAlpha:](v12, "setAlpha:", 0.0);
      -[CarRoutePlanningAdvisoryLabel layoutIfNeeded](v12, "layoutIfNeeded");
      objc_msgSend(v51, "addSubview:", v12);
      v55[0] = _NSConcreteStackBlock;
      v55[1] = 3221225472;
      v55[2] = sub_100444A80;
      v55[3] = &unk_1011AC860;
      v7 = v12;
      v56 = v7;
      +[UIView animateWithDuration:animations:](UIView, "animateWithDuration:animations:", v55, 0.300000012);

    }
    else
    {
      v7 = 0;
    }
  }
  v25 = objc_alloc_init((Class)NSMutableArray);
  v26 = v25;
  if (v3)
  {
    v27 = v3;
LABEL_12:
    objc_msgSend(v25, "addObject:", v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue(-[CarRoutePlanningAdvisoryLabel label](v7, "label"));
    v29 = v28;
    v30 = 0;
    goto LABEL_13;
  }
  if (v4)
  {
    v27 = v4;
    goto LABEL_12;
  }
  v28 = (void *)objc_claimAutoreleasedReturnValue(-[CarRoutePlanningAdvisoryLabel label](v7, "label"));
  v29 = v28;
  v30 = 1;
LABEL_13:
  objc_msgSend(v28, "setNumberOfLines:", v30);

  if (objc_msgSend(v3, "length") || !objc_msgSend(v54, "length"))
  {
    -[CarRoutePlanningAdvisoryLabel setAlwaysClickable:](v7, "setAlwaysClickable:", 0);
  }
  else
  {
    objc_msgSend(v26, "addObject:", v54);
    -[CarRoutePlanningAdvisoryLabel setAlwaysClickable:](v7, "setAlwaysClickable:", 1);
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentRoute"));
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "carAdvisoryListCardViewController"));
    objc_msgSend(v32, "setRoute:", v31);

  }
  v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "componentsJoinedByString:", CFSTR(", ")));
  -[CarRoutePlanningAdvisoryLabel setText:](v7, "setText:", v33);

  v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "chromeViewController"));
  objc_msgSend(v34, "setNeedsUpdateMapInsets");

LABEL_18:
}

id sub_100444A80(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 1.0);
}

void sub_100444F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100444F44(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  id v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v6 = WeakRetained;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "searchPinsManager"));
    objc_msgSend(v4, "clearDroppedPin");

    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "chromeViewController"));
    objc_msgSend(v5, "setNeedsUpdateComponent:animated:", CFSTR("routeAnnotations"), 1);

    objc_msgSend(v6, "_recenterOnRouteAnimated:", a2);
    WeakRetained = v6;
  }

}

void sub_1004450A8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1004450CC(uint64_t a1)
{
  id *v2;
  _DWORD *WeakRetained;
  int v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[4];
  _QWORD *v25;
  _QWORD v26[4];
  _QWORD *v27;
  _QWORD v28[4];
  _QWORD *v29;
  _QWORD v30[4];
  id v31;
  int v32;
  void *v33;

  v2 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained[18] + 1;
  WeakRetained[18] = v4;
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472;
  v30[2] = sub_100445470;
  v30[3] = &unk_1011B6EA8;
  objc_copyWeak(&v31, v2);
  v32 = v4;
  v5 = objc_retainBlock(v30);
  if ((objc_msgSend(*(id *)(a1 + 32), "navigationAidedDrivingEnabled") & 1) != 0)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentRoute"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "drivingRoutes"));
    if (v7)
    {
      v33 = v7;
      v8 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v33, 1));

      v6 = (void *)v8;
    }
  }
  if (objc_msgSend(WeakRetained, "zoomToDestination"))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "destinationSearchResultIfAvailable"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "mapItem"));
    if (v10)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "chromeViewController"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "mapCameraController"));
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472;
      v28[2] = sub_10044559C;
      v28[3] = &unk_1011B1B90;
      v29 = v5;
      objc_msgSend(v12, "frameMapItem:animated:completion:", v10, 1, v28);

      goto LABEL_15;
    }

  }
  if (objc_msgSend(v6, "count"))
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "chromeViewController"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "mapCameraController"));
    v15 = *(unsigned __int8 *)(a1 + 48);
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    v26[2] = sub_1004455A8;
    v26[3] = &unk_1011B1B90;
    v27 = v5;
    objc_msgSend(v14, "frameRoutes:includeCompassInset:waypoints:animated:completion:", v6, 1, 1, v15, v26);

    v9 = v27;
  }
  else
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "chromeViewController"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "searchPinsManager"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "startPOIShapeIfLoaded"));

    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "chromeViewController"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "searchPinsManager"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "endPOIShapesIfLoaded"));

    if (v9 && objc_msgSend(v20, "count"))
    {
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "chromeViewController"));
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "mapCameraController"));
      v23 = *(unsigned __int8 *)(a1 + 48);
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      v24[2] = sub_1004455B4;
      v24[3] = &unk_1011B1B90;
      v25 = v5;
      objc_msgSend(v22, "frameApproximateRouteFromStartPOIShape:toEndPOIShapes:animated:completion:", v9, v20, v23, v24);

    }
  }
LABEL_15:

  objc_destroyWeak(&v31);
}

void sub_100445444(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100445470(uint64_t a1, int a2)
{
  _QWORD v3[4];
  id v4;
  int v5;

  if (a2)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1004454F8;
    v3[3] = &unk_1011B6E80;
    objc_copyWeak(&v4, (id *)(a1 + 32));
    v5 = *(_DWORD *)(a1 + 40);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v3);
    objc_destroyWeak(&v4);
  }
}

void sub_1004454F8(uint64_t a1)
{
  _DWORD *WeakRetained;
  void *v3;
  unsigned int v4;
  void *v5;
  void *v6;
  _DWORD *v7;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v7 = WeakRetained;
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "chromeViewController"));
    v4 = objc_msgSend(v3, "isCurrentContext:", v7);

    WeakRetained = v7;
    if (v4)
    {
      if (v7[18] == *(_DWORD *)(a1 + 40))
      {
        v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "chromeViewController"));
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "mapView"));
        objc_msgSend(v6, "visibleMapRect");
        objc_msgSend(v7, "_updateZoomButtonContentAndVisibilityWithMapRect:");

        WeakRetained = v7;
      }
    }
  }

}

uint64_t sub_10044559C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1004455A8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1004455B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_10044583C(id a1, id a2, unint64_t a3)
{
  return a2;
}

id sub_1004459EC(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_presentInterruptionForError:", a2);
}

void sub_100445AB4(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chromeViewController"));
  objc_msgSend(v1, "dismissCurrentInterruptionOfKind:", 3);

}

id sub_100445AE8(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_presentInterruptionForError:", a2);
}

void sub_100445EC0(uint64_t a1)
{
  void *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  id v7;
  NSObject *v8;
  const __CFString *v9;
  id v10;
  NSObject *v11;
  void *v12;
  id v13;
  NSObject *v14;
  const __CFString *v15;
  id v16;
  NSObject *v17;
  const __CFString *v18;
  _QWORD v19[6];
  uint8_t buf[4];
  unint64_t v21;
  __int16 v22;
  const __CFString *v23;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedMapsDelegate](UIApplication, "sharedMapsDelegate"));
  v3 = (unint64_t)objc_msgSend(v2, "currentInterruptionKind");

  v4 = (unint64_t)objc_msgSend(*(id *)(a1 + 32), "_interruptionKindForCurrentRoute");
  v5 = v4;
  if (v3 > 0xB || ((1 << v3) & 0xB01) == 0)
  {
    v13 = sub_10043364C();
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      if (v5 - 1 > 0x16)
        v15 = CFSTR("kMapsInterruptionNone");
      else
        v15 = *(&off_1011B6F90 + v5 - 1);
      if (v3 - 1 > 0x16)
        v18 = CFSTR("kMapsInterruptionNone");
      else
        v18 = *(&off_1011B7048 + v3 - 1);
      *(_DWORD *)buf = 138543618;
      v21 = (unint64_t)v15;
      v22 = 2114;
      v23 = v18;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "CarRoutePlanning: _updateTurnByTurnSupport, turnByTurn interruption: %{public}@, tried to dismiss current interruption, but it is not an expected kind: %{public}@.", buf, 0x16u);
    }

  }
  else
  {
    if (v3 == v4)
    {
      v7 = sub_10043364C();
      v8 = objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        if (v3 - 1 > 0xA)
          v9 = CFSTR("kMapsInterruptionNone");
        else
          v9 = *(&off_1011B7100 + v3 - 1);
        *(_DWORD *)buf = 138543362;
        v21 = (unint64_t)v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "CarRoutePlanning: _updateTurnByTurnSupport, interruption (%{public}@) did not change", buf, 0xCu);
      }
LABEL_22:

      return;
    }
    if (!v4)
    {
      v16 = sub_10043364C();
      v17 = objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v21 = v3;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "CarRoutePlanning: _updateTurnByTurnSupport, turnByTurn is supported, trying to dismiss interruption of kind %ld", buf, 0xCu);
      }

      v8 = objc_claimAutoreleasedReturnValue(+[UIApplication sharedMapsDelegate](UIApplication, "sharedMapsDelegate"));
      -[NSObject dismissCurrentInterruption](v8, "dismissCurrentInterruption");
      goto LABEL_22;
    }
    if ((v4 & 0xFFFFFFFFFFFFFFFDLL) == 9)
    {
      v10 = sub_10043364C();
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v21 = v5;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "CarRoutePlanning: _updateTurnByTurnSupport, turnByTurn is not supported, presenting interruption of kind: %ld.", buf, 0xCu);
      }

      v12 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedMapsDelegate](UIApplication, "sharedMapsDelegate"));
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472;
      v19[2] = sub_1004461A8;
      v19[3] = &unk_1011B6F58;
      v19[4] = *(_QWORD *)(a1 + 32);
      v19[5] = v5;
      objc_msgSend(v12, "interruptApplicationWithKind:userInfo:completionHandler:", v5, 0, v19);

    }
  }
}

id sub_1004461A8(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 40) == 9 && qword_1014B79F8 != a2)
    objc_msgSend(*(id *)(a1 + 32), "_clearSteppingRouteParameters");
  return objc_msgSend(*(id *)(a1 + 32), "_updateElements");
}

id sub_1004468E0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateAnnotationsForLoadedRoute");
}

double sub_100447598(void *a1)
{
  id v1;
  id v2;
  id v3;
  void *v4;
  double v5;
  uint64_t v6;
  void *v7;
  double v8;
  double v9;
  int v10;
  void *v11;
  double v12;
  int v13;
  void *v14;
  double v15;
  int v16;
  void *v17;
  double v18;
  int v19;
  void *v20;
  int v21;
  void *v22;
  double v23;
  int v24;
  void *v25;
  id v27;
  NSObject *v28;
  id v29;
  NSObject *v30;
  char *v31;
  int v32;
  const char *v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  const char *v39;

  v1 = a1;
  v2 = objc_msgSend(v1, "count");
  if ((unint64_t)v2 > 1)
  {
    v3 = v2;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectAtIndexedSubscript:", 0));
    v5 = 0.0;
    v6 = 1;
    while (1)
    {
      v7 = v4;
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectAtIndexedSubscript:", v6));
      v8 = (double)objc_msgSend(v4, "offsetM");
      v9 = v8 - (double)objc_msgSend(v7, "offsetM");
      if ((objc_msgSend(v4, "elevationCm") & 0x80000000) != 0
        || (objc_msgSend(v7, "elevationCm") & 0x80000000) != 0)
      {
        if ((int)objc_msgSend(v4, "elevationCm") <= 0 && (int)objc_msgSend(v7, "elevationCm") <= 0)
        {
          v21 = objc_msgSend(v4, "elevationCm");
          if (v21 <= (int)objc_msgSend(v7, "elevationCm"))
            v22 = v7;
          else
            v22 = v4;
          v23 = (double)(int)objc_msgSend(v22, "elevationCm");
          v24 = objc_msgSend(v4, "elevationCm");
          if (v24 >= (int)objc_msgSend(v7, "elevationCm"))
            v25 = v7;
          else
            v25 = v4;
          v5 = v5 - (v9 * ((double)(int)objc_msgSend(v25, "elevationCm") * 0.5) + v23 * v9);
          goto LABEL_22;
        }
        v16 = objc_msgSend(v4, "elevationCm");
        if (v16 >= (int)objc_msgSend(v7, "elevationCm"))
          v17 = v7;
        else
          v17 = v4;
        v18 = (double)(int)objc_msgSend(v17, "elevationCm");
        v19 = objc_msgSend(v4, "elevationCm");
        if (v19 <= (int)objc_msgSend(v7, "elevationCm"))
          v20 = v7;
        else
          v20 = v4;
        v15 = v9 * v18 + ((double)(int)objc_msgSend(v20, "elevationCm") - v18) * 0.5 * v9;
      }
      else
      {
        v10 = objc_msgSend(v4, "elevationCm");
        if (v10 >= (int)objc_msgSend(v7, "elevationCm"))
          v11 = v7;
        else
          v11 = v4;
        v12 = (double)(int)objc_msgSend(v11, "elevationCm");
        v13 = objc_msgSend(v4, "elevationCm");
        if (v13 <= (int)objc_msgSend(v7, "elevationCm"))
          v14 = v7;
        else
          v14 = v4;
        v15 = v9 * ((double)(int)objc_msgSend(v14, "elevationCm") * 0.5) + v12 * v9;
      }
      v5 = v5 + v15;
LABEL_22:

      if (v3 == (id)++v6)
      {

        goto LABEL_31;
      }
    }
  }
  v27 = sub_1004318FC();
  v28 = objc_claimAutoreleasedReturnValue(v27);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
  {
    v32 = 136315906;
    v33 = "double _maps_integralForPoints(NSArray<GEOPoint *> *__strong _Nonnull)";
    v34 = 2080;
    v35 = "MapsElevationChartFunctions.m";
    v36 = 1024;
    v37 = 22;
    v38 = 2080;
    v39 = "pointCount >= 2";
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "%s [%s:%d] Invalid parameter not satisfying: %s", (uint8_t *)&v32, 0x26u);
  }

  v5 = 0.0;
  if (sub_100A70734())
  {
    v29 = sub_1004318FC();
    v30 = objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      v31 = (char *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
      v32 = 138412290;
      v33 = v31;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&v32, 0xCu);

    }
  }
LABEL_31:

  return v5;
}

NSMutableArray *sub_1004478D8(void *a1, unint64_t a2)
{
  id v3;
  id v4;
  unint64_t v5;
  id v6;
  void *v7;
  unsigned int v8;
  void *v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  double v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  double v18;
  id v19;
  id v20;
  NSObject *v21;
  id v22;
  NSObject *v23;
  char *v24;
  unint64_t v25;
  void *v26;
  double v27;
  unint64_t v28;
  void *v29;
  double v30;
  _BOOL4 v31;
  id v32;
  void *v33;
  unsigned int v34;
  double v35;
  unsigned int v36;
  double v37;
  double v38;
  void *v39;
  unint64_t v40;
  void *v41;
  unsigned int v42;
  double v43;
  unsigned int v44;
  double v45;
  double v46;
  id v48;
  NSObject *v49;
  id v50;
  NSObject *v51;
  char *v52;
  id v53;
  unint64_t v54;
  NSMutableArray *v55;
  void *v56;
  void *v57;
  unint64_t v58;
  uint8_t buf[4];
  const char *v60;
  __int16 v61;
  const char *v62;
  __int16 v63;
  int v64;
  __int16 v65;
  const char *v66;

  v3 = a1;
  v4 = objc_msgSend(v3, "count");
  if ((unint64_t)v4 <= 1)
  {
    v48 = sub_1004318FC();
    v49 = objc_claimAutoreleasedReturnValue(v48);
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v60 = "NSArray<NSArray<GEOPoint *> *> * _Nonnull _maps_bucketPointsByCount(NSArray<GEOPoint *> *__strong _Nonnull, NSUInteger)";
      v61 = 2080;
      v62 = "MapsElevationChartFunctions.m";
      v63 = 1024;
      v64 = 60;
      v65 = 2080;
      v66 = "pointCount >= 2";
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "%s [%s:%d] Invalid parameter not satisfying: %s", buf, 0x26u);
    }

    if (sub_100A70734())
    {
      v50 = sub_1004318FC();
      v51 = objc_claimAutoreleasedReturnValue(v50);
      if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
      {
        v52 = (char *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
        *(_DWORD *)buf = 138412290;
        v60 = v52;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);

      }
    }
    v55 = (NSMutableArray *)&__NSArray0__struct;
  }
  else
  {
    v5 = (unint64_t)v4;
    v55 = objc_opt_new(NSMutableArray);
    v6 = v3;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "firstObject"));
    v8 = objc_msgSend(v7, "offsetM");
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "lastObject"));

    v10 = objc_msgSend(v9, "offsetM");
    if (a2)
    {
      v53 = v3;
      v11 = 0;
      v12 = 0;
      v13 = vabdd_f64((double)v8, (double)v10) / (double)a2;
      v54 = a2;
      do
      {
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectAtIndexedSubscript:", v11));
        v15 = v11 + 1;
        v57 = v14;
        if (v11 + 1 < v5
          && (v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectAtIndexedSubscript:", v11 + 1))) != 0)
        {
          v17 = (void *)v16;
          v18 = v13 * (double)v12;
          if (vabdd_f64((double)objc_msgSend(v14, "offsetM"), v18) >= 2.22044605e-16)
          {
            if (vabdd_f64((double)objc_msgSend(v17, "offsetM"), v18) >= 2.22044605e-16)
            {
              v42 = objc_msgSend(v17, "elevationCm");
              v43 = (double)(int)(v42 - objc_msgSend(v14, "elevationCm"));
              v56 = v17;
              v44 = objc_msgSend(v17, "offsetM");
              v45 = v43 / (double)(v44 - objc_msgSend(v14, "offsetM"));
              v46 = v18 - (double)objc_msgSend(v14, "offsetM");
              v19 = (id)objc_opt_new(GEOPoint);
              objc_msgSend(v19, "setOffsetM:", v18);
              objc_msgSend(v19, "setElevationCm:", objc_msgSend(v14, "elevationCm") + (int)(v46 * v45));
            }
            else
            {
              v19 = v17;
              v15 = v11 + 2;
              v56 = v19;
            }
          }
          else
          {
            v56 = v17;
            v19 = v14;
          }
        }
        else
        {
          v20 = sub_1004318FC();
          v21 = objc_claimAutoreleasedReturnValue(v20);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            v60 = "NSArray<NSArray<GEOPoint *> *> * _Nonnull _maps_bucketPointsByCount(NSArray<GEOPoint *> *__strong _Non"
                  "null, NSUInteger)";
            v61 = 2080;
            v62 = "MapsElevationChartFunctions.m";
            v63 = 1024;
            v64 = 107;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%s [%s:%d] Assertion reached unexpectedly!", buf, 0x1Cu);
          }

          if (sub_100A70734())
          {
            v22 = sub_1004318FC();
            v23 = objc_claimAutoreleasedReturnValue(v22);
            if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            {
              v24 = (char *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
              *(_DWORD *)buf = 138412290;
              v60 = v24;
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);

            }
          }
          v19 = v14;
          v56 = 0;
        }
        v25 = v12 + 1;
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "lastObject"));
        v58 = v25;
        if (v15 >= v5)
        {
LABEL_20:
          v31 = 0;
          v28 = v5;
        }
        else
        {
          v27 = v13 * (double)v25;
          v28 = v15;
          while (1)
          {
            v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectAtIndexedSubscript:", v28));
            v30 = vabdd_f64((double)objc_msgSend(v29, "offsetM"), v27);
            v31 = v30 >= 2.22044605e-16;
            if (v30 < 2.22044605e-16)
            {
              v32 = v29;
              goto LABEL_23;
            }
            if (v27 < (double)objc_msgSend(v29, "offsetM"))
              break;

            if (v5 == ++v28)
              goto LABEL_20;
          }
          v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectAtIndexedSubscript:", v28 - 1));
          v34 = objc_msgSend(v29, "elevationCm");
          v35 = (double)(int)(v34 - objc_msgSend(v33, "elevationCm"));
          v36 = objc_msgSend(v29, "offsetM");
          v37 = v35 / (double)(v36 - objc_msgSend(v33, "offsetM"));
          v38 = v27 - (double)objc_msgSend(v33, "offsetM");
          v32 = (id)objc_opt_new(GEOPoint);

          objc_msgSend(v32, "setOffsetM:", v27);
          objc_msgSend(v32, "setElevationCm:", objc_msgSend(v33, "elevationCm") + (int)(v38 * v37));
          v26 = v33;
LABEL_23:

          v26 = v32;
        }
        v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithObject:](NSMutableArray, "arrayWithObject:", v19));
        v40 = v28 - 1 - v15;
        if (v28 - 1 > v15)
        {
          v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "subarrayWithRange:", v15, v40));
          objc_msgSend(v39, "addObjectsFromArray:", v41);

        }
        objc_msgSend(v39, "addObject:", v26, v40);
        -[NSMutableArray addObject:](v55, "addObject:", v39);
        if (v31)
          v11 = v28 - 1;
        else
          v11 = v28;

        v12 = v58;
      }
      while (v58 != v54);
      v3 = v53;
    }
  }

  return v55;
}

id sub_100447F20(void *a1, unint64_t a2, double a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  unsigned int v9;
  void *v10;
  unsigned int v11;
  void *v12;
  uint64_t v13;
  id v14;
  void *v15;
  double v16;
  double v17;
  unint64_t v18;
  void *v19;
  void *v20;
  double v21;
  unsigned int v22;
  double v23;
  DirectionsElevationNormalisedPoint *v24;
  double v25;
  double v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  void *v31;
  id v32;

  v5 = a1;
  v6 = objc_msgSend(v5, "count");
  v7 = &__NSArray0__struct;
  if (a2 && v6)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "lastObject"));
    v9 = objc_msgSend(v8, "offsetM");
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
    v11 = objc_msgSend(v10, "offsetM");

    if (objc_msgSend(v5, "count") == (id)1)
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
      v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "arrayByAddingObject:", v12));

      v5 = (id)v13;
    }
    v14 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", a2);
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
    if ((unint64_t)objc_msgSend(v5, "count") < 2)
    {
      v19 = v5;
    }
    else
    {
      v16 = (double)(v9 - v11) / ((double)a2 * a3);
      v17 = v16 * a3;
      v18 = 1;
      v19 = v5;
      do
      {
        v20 = v15;
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectAtIndexedSubscript:", v18));
        while (v16 > (double)objc_msgSend(v20, "offsetM")
             && v16 <= (double)objc_msgSend(v15, "offsetM"))
        {
          v21 = v16 - (double)objc_msgSend(v20, "offsetM");
          v22 = objc_msgSend(v15, "offsetM");
          v23 = v21 / (double)(v22 - objc_msgSend(v20, "offsetM"));
          v24 = objc_opt_new(DirectionsElevationNormalisedPoint);
          v25 = (double)(int)objc_msgSend(v20, "elevationCm");
          v26 = v23 * (double)(int)objc_msgSend(v15, "elevationCm") + v25 * (1.0 - v23);
          v27 = objc_alloc((Class)NSMeasurement);
          v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSUnitLength centimeters](NSUnitLength, "centimeters"));
          v29 = objc_msgSend(v27, "initWithDoubleValue:unit:", v28, v26);
          -[DirectionsElevationNormalisedPoint setElevationMeasurement:](v24, "setElevationMeasurement:", v29);

          v30 = objc_alloc((Class)NSMeasurement);
          v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSUnitLength meters](NSUnitLength, "meters"));
          v32 = objc_msgSend(v30, "initWithDoubleValue:unit:", v31, v16);
          -[DirectionsElevationNormalisedPoint setOffsetMeasurement:](v24, "setOffsetMeasurement:", v32);

          objc_msgSend(v14, "addObject:", v24);
          v16 = v17 + v16;

        }
        ++v18;
        v19 = v5;
      }
      while (v18 < (unint64_t)objc_msgSend(v5, "count"));
    }
    v7 = objc_msgSend(v14, "copy");

    v5 = v19;
  }

  return v7;
}

unint64_t sub_100448204(double a1, double a2, double a3)
{
  unint64_t v3;
  unint64_t result;

  v3 = vcvtmd_u64_f64(a3 / a2);
  result = GEOConfigGetUInteger(MapsConfig_RoutePlanningElevationGraphBarMinimumNumberOfBars, off_1014B3BE8);
  if (result <= v3)
    return v3;
  return result;
}

unint64_t sub_10044823C(double a1, double a2, double a3)
{
  double Double;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  unint64_t v19;
  unint64_t result;

  Double = GEOConfigGetDouble(MapsConfig_RoutePlanningElevationGraphBarCalculationCyclingMinimumDistance, off_1014B3BF8);
  if (Double >= a1)
  {
    v14 = floor(a3 / a2) * 0.0;
  }
  else
  {
    v7 = Double;
    v8 = GEOConfigGetDouble(MapsConfig_RoutePlanningElevationGraphBarCalculationCyclingMaximumDistance, off_1014B3C18);
    if (v8 <= a1)
    {
      v15 = floor(a3 / a2);
      goto LABEL_16;
    }
    v9 = v8;
    if (GEOConfigGetBOOL(MapsConfig_RoutePlanningElevationGraphBarCalculationCyclingForceLinear, off_1014B3C48))
    {
      v10 = GEOConfigGetDouble(MapsConfig_RoutePlanningElevationGraphBarCalculationCyclingAverageDistance, off_1014B3C08);
      v11 = GEOConfigGetDouble(MapsConfig_RoutePlanningElevationGraphBarCalculationCyclingLinearMinAvgRatio, off_1014B3C58);
      if (v10 <= a1)
      {
        v18 = (a1 - v10) / (v9 - v10);
        if (v18 > 1.0)
          v18 = 1.0;
        v13 = v11 + v18 * (1.0 - v11);
      }
      else
      {
        v12 = (a1 - v7) / (v10 - v7);
        if (v12 > 1.0)
          v12 = 1.0;
        v13 = v11 * v12;
      }
    }
    else
    {
      v16 = GEOConfigGetDouble(MapsConfig_RoutePlanningElevationGraphBarCalculationCyclingA, off_1014B3C28);
      v17 = GEOConfigGetDouble(MapsConfig_RoutePlanningElevationGraphBarCalculationCyclingB, off_1014B3C38);
      v13 = fmin(fmax(v16 + v17 * log(a1 / 1000.0), 0.0), 1.0);
    }
    v14 = floor(a3 / a2) * v13;
  }
  v15 = round(v14);
LABEL_16:
  v19 = (unint64_t)v15;
  result = GEOConfigGetUInteger(MapsConfig_RoutePlanningElevationGraphBarMinimumNumberOfBars, off_1014B3BE8);
  if (result <= v19)
    return v19;
  return result;
}

id sub_1004483CC(void *a1, unint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  uint64_t v20;
  id v21;
  const char *v22;
  NSObject *v23;
  uint32_t v24;
  id v25;
  void *v26;
  id v28;
  id v29;
  NSObject *v30;
  _BOOL4 v31;
  int v32;
  unint64_t v33;
  __int16 v34;
  void *v35;

  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "directionsRequests"));
    if ((unint64_t)objc_msgSend(v5, "count") <= a2)
    {

    }
    else
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "directionsResponses"));
      v7 = objc_msgSend(v6, "count");

      if ((unint64_t)v7 > a2)
      {
        v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "directionsRequestsAtIndex:", a2));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "directionsResponsesAtIndex:", a2));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "waypoints"));
        v11 = sub_10039DCD4(v10, &stru_1011B7178);
        v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

        v13 = objc_alloc((Class)GEORouteInitializerData);
        v14 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject routeAttributes](v8, "routeAttributes"));
        v15 = objc_msgSend(v13, "initWithWaypoints:routeAttributes:directionsResponse:", v12, v14, v9);

        LODWORD(v14) = objc_msgSend(v4, "selectedSuggestedRouteIndexInDirectionsResponse");
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "allRoutes"));
        v17 = objc_msgSend(v16, "count");

        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "allRoutes"));
        v19 = v18;
        if ((unint64_t)v17 <= v14)
        {
          v28 = objc_msgSend(v18, "count");

          v29 = sub_100431F8C();
          v30 = objc_claimAutoreleasedReturnValue(v29);
          v31 = os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
          if (!v28)
          {
            if (v31)
            {
              v32 = 138412290;
              v33 = (unint64_t)v4;
              _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "routeInitializerData.allRoutes is empty for a recording: %@", (uint8_t *)&v32, 0xCu);
            }

            v26 = 0;
            goto LABEL_19;
          }
          if (v31)
          {
            v32 = 138412290;
            v33 = (unint64_t)v4;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "routeInitializerData.allRoutes has less routes than indexOfSelectedSuggestedRoute for a recording: %@", (uint8_t *)&v32, 0xCu);
          }

          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "allRoutes"));
          v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "firstObject"));
        }
        else
        {
          v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectAtIndexedSubscript:", objc_msgSend(v4, "selectedSuggestedRouteIndexInDirectionsResponse")));
        }
        v26 = (void *)v20;

LABEL_19:
        goto LABEL_13;
      }
    }
    v25 = sub_100431F8C();
    v8 = objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v32 = 134218242;
      v33 = a2;
      v34 = 2112;
      v35 = v4;
      v22 = "Can't find a route with index %lu in a recording: %@";
      v23 = v8;
      v24 = 22;
      goto LABEL_11;
    }
  }
  else
  {
    v21 = sub_100431F8C();
    v8 = objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v32) = 0;
      v22 = "Can't create a route from a nil recording";
      v23 = v8;
      v24 = 2;
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, v22, (uint8_t *)&v32, v24);
    }
  }
  v26 = 0;
LABEL_13:

  return v26;
}

GEOComposedWaypoint *__cdecl sub_1004486F0(id a1, RAPUserSearchInput *a2, unint64_t a3)
{
  RAPUserSearchInput *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[RAPUserSearchInput placeMapItemStorage](v3, "placeMapItemStorage"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[RAPUserSearchInput findMyHandleID](v3, "findMyHandleID"));

  if (v5)
  {
    v6 = objc_alloc((Class)GEOLocation);
    objc_msgSend(v4, "coordinate");
    v7 = objc_msgSend(v6, "initWithGEOCoordinate:");
    v8 = objc_msgSend(objc_alloc((Class)GEOComposedWaypoint), "initWithLocation:findMyHandleID:", v7, v5);

  }
  else
  {
    v8 = objc_msgSend(objc_alloc((Class)GEOComposedWaypoint), "initWithMapItem:", v4);
  }

  return (GEOComposedWaypoint *)v8;
}

void sub_100448EDC(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;

  if (objc_msgSend(*(id *)(a1 + 32), "hasButtonOneAppURI"))
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100448F5C;
    v3[3] = &unk_1011AC860;
    v2 = *(void **)(a1 + 40);
    v4 = *(id *)(a1 + 32);
    objc_msgSend(v2, "dismissAllModalViewsIfPresentAnimated:completion:", 0, v3);

  }
}

void sub_100448F5C(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "buttonOneAppURI"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", v2));
  objc_msgSend(v4, "openURL:options:completionHandler:", v3, &__NSDictionary0__struct, 0);

}

void sub_100448FE4(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;

  if (objc_msgSend(*(id *)(a1 + 32), "hasButtonTwoAppURI"))
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100449064;
    v3[3] = &unk_1011AC860;
    v2 = *(void **)(a1 + 40);
    v4 = *(id *)(a1 + 32);
    objc_msgSend(v2, "dismissAllModalViewsIfPresentAnimated:completion:", 0, v3);

  }
}

void sub_100449064(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "buttonTwoAppURI"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", v2));
  objc_msgSend(v4, "openURL:options:completionHandler:", v3, &__NSDictionary0__struct, 0);

}

void sub_10044A868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10044A884(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "panLoadFinished");

}

void sub_10044AB98(uint64_t a1)
{
  _QWORD v1[5];
  int v2;

  v1[0] = _NSConcreteStackBlock;
  v1[1] = 3221225472;
  v1[2] = sub_10044ABFC;
  v1[3] = &unk_1011B71A0;
  v1[4] = *(_QWORD *)(a1 + 32);
  v2 = *(_DWORD *)(a1 + 40);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v1);
}

id sub_10044ABFC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "panToTestPoint:", (*(_DWORD *)(a1 + 40) + 1));
}

void sub_10044AC10(uint64_t a1)
{
  _QWORD v1[5];
  int v2;

  v1[0] = _NSConcreteStackBlock;
  v1[1] = 3221225472;
  v1[2] = sub_10044AC74;
  v1[3] = &unk_1011B71A0;
  v1[4] = *(_QWORD *)(a1 + 32);
  v2 = *(_DWORD *)(a1 + 40);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v1);
}

id sub_10044AC74(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "panToTestPoint:", (*(_DWORD *)(a1 + 40) + 1));
}

void sub_10044ACFC(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainVKMapView"));
  objc_msgSend(v2, "enableTestStatistics");
  objc_msgSend(v2, "enableTileStatistics");
  objc_msgSend(*(id *)(a1 + 32), "startedTest");
  objc_msgSend(*(id *)(a1 + 32), "panToTestPoint:", 1);

}

id sub_10044AFEC(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  void *v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainVKMapView"));
  v3 = objc_msgSend(v2, "isFullyDrawn");

  v4 = *(void **)(a1 + 32);
  if (v3)
    return _objc_msgSend(v4, "onFullyDrawn:", 0);
  else
    return objc_msgSend(v4, "setupFullyDrawnNotification:", "onFullyDrawn:");
}

void sub_10044B8B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10044B8D0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "circlePanLoadFinished");

}

void sub_10044B950(uint64_t a1)
{
  dispatch_time_t v2;
  _QWORD block[5];

  v2 = dispatch_time(0, 500000000);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10044B9C8;
  block[3] = &unk_1011AC860;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_after(v2, (dispatch_queue_t)&_dispatch_main_q, block);
}

void sub_10044B9C8(uint64_t a1)
{
  _BYTE *v2;
  void *v3;
  void *v4;
  void *v5;
  double MidX;
  double MidY;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  _QWORD v12[4];
  id v13;
  uint64_t v14;
  double v15;
  double v16;
  _QWORD v17[5];
  id v18;
  CGRect v19;
  CGRect v20;

  v2 = *(_BYTE **)(a1 + 32);
  if (v2[160])
  {
    if (objc_msgSend(v2, "useTestNameInResults"))
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "testName"));
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@:circlePan"), v3));

      objc_msgSend(*(id *)(a1 + 32), "startedSubTest:", v4);
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 32), "startedSubTest:", CFSTR("circlePan"));
    }
  }
  else
  {
    objc_msgSend(v2, "startedTest");
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainVKMapView"));
  objc_msgSend(v5, "bounds");
  MidX = CGRectGetMidX(v19);
  objc_msgSend(v5, "bounds");
  MidY = CGRectGetMidY(v20);
  objc_msgSend(v5, "enableTestStatistics");
  objc_msgSend(v5, "enableTileStatistics");
  objc_msgSend(v5, "startPanningAtPoint:", MidX, MidY);
  v8 = objc_msgSend(objc_alloc((Class)VKTimedAnimation), "initWithDuration:", 3.0);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_10044BB94;
  v17[3] = &unk_1011B71F0;
  v17[4] = *(_QWORD *)(a1 + 32);
  v9 = v5;
  v18 = v9;
  objc_msgSend(v8, "setStepHandler:", v17);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10044BBE8;
  v12[3] = &unk_1011B7218;
  v15 = MidX;
  v16 = MidY;
  v10 = *(_QWORD *)(a1 + 32);
  v13 = v9;
  v14 = v10;
  v11 = v9;
  objc_msgSend(v8, "setCompletionHandler:", v12);
  objc_msgSend(v11, "runAnimation:", v8);

}

id sub_10044BB94(uint64_t a1, float a2)
{
  __double2 v3;

  v3 = __sincos_stret(a2 * 18.8495559);
  return _objc_msgSend(*(id *)(a1 + 40), "updatePanWithTranslation:", v3.__sinval * *(double *)(*(_QWORD *)(a1 + 32) + 200) * 0.5, v3.__cosval * *(double *)(*(_QWORD *)(a1 + 32) + 200) * 0.5);
}

void sub_10044BBE8(uint64_t a1)
{
  _BYTE *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  uint64_t v10;
  void *v11;
  unsigned int v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];

  objc_msgSend(*(id *)(a1 + 32), "stopPanningAtPoint:", *(double *)(a1 + 48), *(double *)(a1 + 56));
  v2 = *(_BYTE **)(a1 + 40);
  if (v2[160])
  {
    if (objc_msgSend(v2, "useTestNameInResults"))
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "testName"));
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@:circlePan"), v3));

      objc_msgSend(*(id *)(a1 + 40), "finishedSubTest:", v4);
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 40), "finishedSubTest:", CFSTR("circlePan"));
    }
  }
  objc_msgSend(*(id *)(a1 + 32), "disableTestStatistics");
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "testStatistics"));
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v19;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v19 != v8)
          objc_enumerationMutation(v5);
        v10 = *(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKey:", v10));
        v12 = objc_msgSend(*(id *)(a1 + 40), "useTestNameInResults");
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "results"));
        if (v12)
        {
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "testName"));
          v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@:circlePan:%@"), v14, v10));
          objc_msgSend(v13, "setObject:forKey:", v11, v15);

        }
        else
        {
          v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("sub:circlePan:%@"), v10));
          objc_msgSend(v13, "setObject:forKey:", v11, v14);
        }

      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v7);
  }
  objc_msgSend(*(id *)(a1 + 32), "resetTestStatistics");
  v16 = *(_QWORD *)(a1 + 40);
  if (!*(_BYTE *)(v16 + 160) || !*(_BYTE *)(v16 + 161))
  {
    objc_msgSend((id)v16, "finishedTest");
    v16 = *(_QWORD *)(a1 + 40);
  }
  v17 = *(_QWORD *)(v16 + 208);
  if (v17)
    (*(void (**)(void))(v17 + 16))();

}

void sub_10044C0C8(_QWORD *a1)
{
  uint64_t v1;
  void *v2;
  _QWORD block[5];
  id v4;
  uint64_t v5;

  v1 = a1[6];
  if (v1 < 1)
  {
    (*(void (**)(void))(a1[5] + 16))();
  }
  else
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10044C158;
    block[3] = &unk_1011B2188;
    v2 = (void *)a1[5];
    block[4] = a1[4];
    v5 = v1;
    v4 = v2;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  }
}

id sub_10044C158(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "animateCircle:completion:", *(_QWORD *)(a1 + 48) - 1, *(_QWORD *)(a1 + 40));
}

void sub_10044C16C(_QWORD *a1)
{
  uint64_t v1;
  void *v2;
  _QWORD block[5];
  id v4;
  uint64_t v5;

  v1 = a1[6];
  if (v1 < 1)
  {
    (*(void (**)(void))(a1[5] + 16))();
  }
  else
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10044C1FC;
    block[3] = &unk_1011B2188;
    v2 = (void *)a1[5];
    block[4] = a1[4];
    v5 = v1;
    v4 = v2;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  }
}

id sub_10044C1FC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "animateCircle:completion:", *(_QWORD *)(a1 + 48) - 1, *(_QWORD *)(a1 + 40));
}

id sub_10044C2D8(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  void *v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainVKMapView"));
  v3 = objc_msgSend(v2, "isFullyDrawn");

  v4 = *(void **)(a1 + 32);
  if (v3)
    return _objc_msgSend(v4, "onFullyDrawn:", 0);
  else
    return objc_msgSend(v4, "setupFullyDrawnNotification:", "onFullyDrawn:");
}

id sub_10044CE08()
{
  if (qword_1014D2570 != -1)
    dispatch_once(&qword_1014D2570, &stru_1011B7260);
  return (id)qword_1014D2568;
}

void sub_10044D6B0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "PedestrianARSessionRoutePlanningConfigurationMonitor");
  v2 = (void *)qword_1014D2568;
  qword_1014D2568 = (uint64_t)v1;

}

void sub_10044E6C4(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 128));
  _Unwind_Resume(a1);
}

void sub_10044E700(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_performDTMActionWithPreference:", *(_QWORD *)(a1 + 40));

}

void sub_10044E73C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_didDisplayModelForPreference:", *(_QWORD *)(a1 + 40));

}

void sub_10044E778(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_dismiss");

}

id sub_10044F2F8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a1[1]));
  objc_msgSend(v2, "setObject:forKey:", v3, CFSTR("low"));

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *a1));
  objc_msgSend(v2, "setObject:forKey:", v4, CFSTR("high"));

  return v2;
}

uint64_t sub_10044F390(_QWORD *a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  char v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t result;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    if ((v6 >> 3) == 1)
    {
      v17 = 0;
      v18 = 0;
      v19 = 0;
      while (1)
      {
        v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v20 == -1 || v20 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v21 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
        v19 |= (unint64_t)(v21 & 0x7F) << v17;
        if ((v21 & 0x80) == 0)
          goto LABEL_40;
        v17 += 7;
        v9 = v18++ >= 9;
        if (v9)
        {
          v19 = 0;
          goto LABEL_42;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_40:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v19 = 0;
LABEL_42:
      a1[1] = v19;
    }
    else if ((v6 >> 3) == 2)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      while (1)
      {
        v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0)
          goto LABEL_36;
        v12 += 7;
        v9 = v13++ >= 9;
        if (v9)
        {
          v14 = 0;
          goto LABEL_38;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_36:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v14 = 0;
LABEL_38:
      *a1 = v14;
    }
    else
    {
      result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result)
        return result;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10044F60C(_QWORD *a1, void *a2)
{
  id v3;

  v3 = a2;
  ((void (*)(void))PBDataWriterWriteUint64Field)();
  PBDataWriterWriteUint64Field(v3, *a1, 2);

}

void sub_100450220(uint64_t a1)
{
  void *v2;
  double Height;
  id v4;
  id v5;
  id v6;
  double v7;
  uint64_t v8;
  void *v9;
  void *v10;
  __int128 v11;
  void *v12;
  void *v13;
  void *v14;
  CGAffineTransform v15;
  CGAffineTransform v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  CGRect v22;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "containerView"));
  objc_msgSend(v2, "frame");
  Height = CGRectGetHeight(v22);

  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v4 = *(id *)(a1 + 40);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v5)
  {
    v6 = v5;
    v7 = Height + 30.0;
    v8 = *(_QWORD *)v18;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v18 != v8)
          objc_enumerationMutation(v4);
        v10 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)v9);
        if (objc_msgSend(*(id *)(a1 + 32), "chromeHidden"))
        {
          CGAffineTransformMakeTranslation(&v16, 0.0, v7);
        }
        else
        {
          v11 = *(_OWORD *)&CGAffineTransformIdentity.c;
          *(_OWORD *)&v16.a = *(_OWORD *)&CGAffineTransformIdentity.a;
          *(_OWORD *)&v16.c = v11;
          *(_OWORD *)&v16.tx = *(_OWORD *)&CGAffineTransformIdentity.tx;
        }
        v15 = v16;
        objc_msgSend(v10, "setTransform:", &v15);
        v9 = (char *)v9 + 1;
      }
      while (v6 != v9);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    }
    while (v6);
  }

  objc_msgSend(*(id *)(a1 + 32), "setNeedsUpdateOfHomeIndicatorAutoHidden");
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "iosBasedChromeViewController"));
  objc_msgSend(v12, "setNeedsUpdateComponent:animated:", CFSTR("statusBarStyle"), 0);

  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v13, "setNeedsLayout");

  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v14, "layoutIfNeeded");

}

void sub_1004503F4(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v1, "setUserInteractionEnabled:", 1);

}

id sub_1004504EC(uint64_t a1)
{
  objc_super v2;

  v2.receiver = *(id *)(a1 + 32);
  v2.super_class = (Class)FlyoverContainerViewController;
  return objc_msgSendSuper2(&v2, "updateMapEdgeInsets");
}

void sub_100450940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100450968(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "flyoverIntroTimer"));
  objc_msgSend(v1, "invalidate");

  objc_msgSend(WeakRetained, "setFlyoverIntroTimer:", 0);
  objc_msgSend(WeakRetained, "hideChrome:animated:", 1, 1);
  objc_msgSend(WeakRetained, "setFlyoverIntroCompleted:", 1);

}

id sub_100451258(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 1.0);
}

id sub_100451264(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 0.0);
}

id sub_100451270(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setText:", *(_QWORD *)(a1 + 40));
}

void sub_1004513FC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_100451420(uint64_t a1)
{
  _QWORD *WeakRetained;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v11 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "chromeViewController"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "view"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "window"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "windowScene"));
    v11[53] = objc_msgSend(v5, "interfaceOrientation");

    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "chromeViewController"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "mapView"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "_mapLayer"));
    v9 = v11[53] - 1;
    if (v9 > 3)
      v10 = 0;
    else
      v10 = qword_100E37378[v9];
    objc_msgSend(v8, "setARInterfaceOrientation:", v10);

    WeakRetained = v11;
  }

}

void sub_10045151C(uint64_t a1)
{
  _QWORD *WeakRetained;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v11 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "chromeViewController"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "view"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "window"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "windowScene"));
    v11[53] = objc_msgSend(v5, "interfaceOrientation");

    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "chromeViewController"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "mapView"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "_mapLayer"));
    v9 = v11[53] - 1;
    if (v9 > 3)
      v10 = 0;
    else
      v10 = qword_100E37378[v9];
    objc_msgSend(v8, "setARInterfaceOrientation:", v10);

    WeakRetained = v11;
  }

}

void sub_1004518EC(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "flyoverBannerView"));
  objc_msgSend(v1, "setAlpha:", 1.0);

}

id sub_100451A80(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 0.0);
}

void sub_100451A8C(uint64_t a1)
{
  void *v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "flyoverActionCoordinator"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "appCoordinator"));
  objc_msgSend(v1, "exitFlyover");

}

id sub_100452354()
{
  if (qword_1014D2588 != -1)
    dispatch_once(&qword_1014D2588, &stru_1011B73F8);
  return (id)qword_1014D2580;
}

void sub_100453A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,id location)
{
  id *v42;

  objc_destroyWeak(v42);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100453AC0(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  void *v5;
  objc_class *v6;
  NSString *v7;
  void *v8;
  void *v9;
  void *v10;
  __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t buf[4];
  __CFString *v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;

  v2 = sub_100452354();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    v4 = *(id *)(a1 + 32);
    v5 = v4;
    if (!v4)
    {
      v11 = CFSTR("<nil>");
      goto LABEL_10;
    }
    v6 = (objc_class *)objc_opt_class(v4);
    v7 = NSStringFromClass(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if ((objc_opt_respondsToSelector(v5, "accessibilityIdentifier") & 1) != 0)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "performSelector:", "accessibilityIdentifier"));
      v10 = v9;
      if (v9 && !objc_msgSend(v9, "isEqualToString:", v8))
      {
        v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v8, v5, v10));

        goto LABEL_8;
      }

    }
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v8, v5));
LABEL_8:

LABEL_10:
    v12 = *(_QWORD *)(a1 + 40);
    v13 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 138543875;
    v15 = v11;
    v16 = 2114;
    v17 = v12;
    v18 = 2113;
    v19 = v13;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[%{public}@] callstack: %{public}@ %{private}@", buf, 0x20u);

  }
}

id sub_100453C58(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  void *v5;
  objc_class *v6;
  NSString *v7;
  void *v8;
  void *v9;
  void *v10;
  __CFString *v11;
  uint64_t v12;
  uint8_t buf[4];
  __CFString *v15;
  __int16 v16;
  uint64_t v17;

  v2 = sub_100452354();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(id *)(a1 + 32);
    v5 = v4;
    if (!v4)
    {
      v11 = CFSTR("<nil>");
      goto LABEL_10;
    }
    v6 = (objc_class *)objc_opt_class(v4);
    v7 = NSStringFromClass(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if ((objc_opt_respondsToSelector(v5, "accessibilityIdentifier") & 1) != 0)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "performSelector:", "accessibilityIdentifier"));
      v10 = v9;
      if (v9 && !objc_msgSend(v9, "isEqualToString:", v8))
      {
        v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v8, v5, v10));

        goto LABEL_8;
      }

    }
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v8, v5));
LABEL_8:

LABEL_10:
    v12 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138543618;
    v15 = v11;
    v16 = 2114;
    v17 = v12;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%{public}@] Applying %{public}@", buf, 0x16u);

  }
  return objc_msgSend(*(id *)(a1 + 48), "setCamera:", *(_QWORD *)(a1 + 56));
}

void sub_100453DEC(uint64_t a1, int a2)
{
  id *v4;
  id WeakRetained;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  _BOOL4 v12;
  void *v13;
  void *v14;
  _BOOL4 v15;
  unsigned int v16;
  int v17;
  _QWORD *v18;
  void *v19;
  id v20;
  NSObject *v21;
  id v22;
  void *v23;
  objc_class *v24;
  NSString *v25;
  void *v26;
  void *v27;
  void *v28;
  id *v29;
  __CFString *v30;
  uint64_t v31;
  __CFString *v32;
  __CFString *v33;
  __CFString *v34;
  __CFString *v35;
  id v36;
  __CFString *v37;
  __CFString *v38;
  void *v39;
  char v40;
  void *v41;
  void *v42;
  id v43;
  id v44;
  uint64_t v45;
  void *i;
  _QWORD *v47;
  int v48;
  void *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _QWORD v54[4];
  _QWORD *v55;
  id v56;
  char v57;
  uint8_t v58[128];
  uint8_t buf[4];
  __CFString *v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  __CFString *v64;
  __int16 v65;
  __CFString *v66;
  __int16 v67;
  __CFString *v68;
  __int16 v69;
  void *v70;

  v4 = (id *)(a1 + 48);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v6 = WeakRetained;
  if (WeakRetained)
  {
    v7 = *(_QWORD *)(a1 + 56);
    v8 = *((id *)WeakRetained + 7);
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v7));
    v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", v9));

    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 56)));
    objc_msgSend(v8, "removeObjectForKey:", v10);

    if (a2)
    {
LABEL_3:
      v11 = objc_loadWeakRetained(v4);
      v12 = v11 != 0;

      goto LABEL_6;
    }
  }
  else
  {
    v49 = 0;
    if (a2)
      goto LABEL_3;
  }
  v12 = 0;
LABEL_6:
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "mapView"));
  v14 = v13;
  if (v13)
    v15 = v12;
  else
    v15 = 0;
  if (v15)
  {
    if (objc_msgSend(v13, "userTrackingMode") != *(id *)(a1 + 64))
      objc_msgSend(v14, "setUserTrackingMode:animated:");
    v16 = objc_msgSend(v14, "_isPitched");
    v17 = *(unsigned __int8 *)(a1 + 73);
    if (v17 != v16)
    {
      v54[0] = _NSConcreteStackBlock;
      v54[1] = 3221225472;
      v54[2] = sub_1004542BC;
      v54[3] = &unk_1011AC838;
      v57 = v17;
      v55 = v6;
      v56 = v14;
      v18 = objc_retainBlock(v54);
      v19 = v18;
      if (*(_BYTE *)(a1 + 72))
        ((void (*)(_QWORD *))v18[2])(v18);
      else
        +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v18);

    }
  }
  v20 = sub_100452354();
  v21 = objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
  {
    v48 = a2;
    v22 = *(id *)(a1 + 32);
    v23 = v22;
    v47 = v6;
    if (!v22)
    {
      v30 = CFSTR("<nil>");
      goto LABEL_26;
    }
    v24 = (objc_class *)objc_opt_class(v22);
    v25 = NSStringFromClass(v24);
    v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
    if ((objc_opt_respondsToSelector(v23, "accessibilityIdentifier") & 1) != 0)
    {
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "performSelector:", "accessibilityIdentifier"));
      v28 = v27;
      if (v27 && !objc_msgSend(v27, "isEqualToString:", v26))
      {
        v29 = v4;
        v30 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v26, v23, v28));

        goto LABEL_24;
      }

    }
    v29 = v4;
    v30 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v26, v23));
LABEL_24:

    v4 = v29;
LABEL_26:

    v31 = *(_QWORD *)(a1 + 40);
    if (v15)
      v32 = CFSTR("YES");
    else
      v32 = CFSTR("NO");
    v33 = v32;
    if (v48)
      v34 = CFSTR("YES");
    else
      v34 = CFSTR("NO");
    v35 = v34;
    v36 = objc_loadWeakRetained(v4);
    if (v36)
      v37 = CFSTR("YES");
    else
      v37 = CFSTR("NO");
    v38 = v37;
    *(_DWORD *)buf = 138544642;
    v60 = v30;
    v61 = 2114;
    v62 = v31;
    v63 = 2114;
    v64 = v33;
    v65 = 2114;
    v66 = v35;
    v67 = 2114;
    v68 = v38;
    v69 = 2112;
    v70 = v14;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "[%{public}@] Completed applying %{public}@, did apply tracking: %{public}@, completion block finished: %{public}@, weakSelf exists: %{public}@, completionMapView: %@", buf, 0x3Eu);

    v6 = v47;
  }

  if (v6)
    --v6[6];
  if (v15)
  {
    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "delegate"));
    v40 = objc_opt_respondsToSelector(v39, "mapSettings:didApplyAnimated:");

    if ((v40 & 1) != 0)
    {
      v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "delegate"));
      objc_msgSend(v41, "mapSettings:didApplyAnimated:", v6, *(unsigned __int8 *)(a1 + 72));

    }
  }
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "completionHandlers"));
  v43 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v50, v58, 16);
  if (v43)
  {
    v44 = v43;
    v45 = *(_QWORD *)v51;
    do
    {
      for (i = 0; i != v44; i = (char *)i + 1)
      {
        if (*(_QWORD *)v51 != v45)
          objc_enumerationMutation(v42);
        (*(void (**)(void))(*(_QWORD *)(*((_QWORD *)&v50 + 1) + 8 * (_QWORD)i) + 16))();
      }
      v44 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v50, v58, 16);
    }
    while (v44);
  }

}

id sub_1004542BC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48) && *(_QWORD *)(a1 + 32))
    return objc_msgSend(*(id *)(a1 + 40), "_enter3DMode");
  else
    return objc_msgSend(*(id *)(a1 + 40), "_exit3DMode");
}

void sub_1004543E0(id a1)
{
  void *v1;
  void *v2;
  void *v3;
  _QWORD v4[3];
  _QWORD v5[3];

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v1, "registerDefaults:", &off_101274700);

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v4[0] = CFSTR("map.browse.trackingMode");
  v4[1] = CFSTR("map.browse.pitched");
  v5[0] = &off_10126D498;
  v5[1] = &__kCFBooleanFalse;
  v4[2] = CFSTR("map.browse.zoomLevel");
  v5[2] = &off_101274B78;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 3));
  objc_msgSend(v2, "registerDefaults:", v3);

}

void sub_100454918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100454934(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  id v4;
  id v5;
  id v6;
  id v7;

  v2 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));

  if (WeakRetained)
  {
    v4 = objc_loadWeakRetained(v2);
    v5 = objc_msgSend(v4, "type");
    v6 = *(id *)(a1 + 48);

    if (v5 == v6)
    {
      v7 = objc_loadWeakRetained(v2);
      objc_msgSend(v7, "setSaveTimer:", 0);
      objc_msgSend(v7, "_writeToUserDefaultsWithKeys:", *(_QWORD *)(a1 + 32));

    }
  }
}

void sub_1004554F4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "ChromeMapSettings");
  v2 = (void *)qword_1014D2580;
  qword_1014D2580 = (uint64_t)v1;

}

id sub_10045561C()
{
  if (qword_1014D2598 != -1)
    dispatch_once(&qword_1014D2598, &stru_1011B7430);
  return (id)qword_1014D2590;
}

void sub_100455DE4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CurrentLocationWaypointRequest");
  v2 = (void *)qword_1014D2590;
  qword_1014D2590 = (uint64_t)v1;

}

void sub_100455E14(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  objc_class *v10;
  NSString *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;

  v17 = a2;
  v5 = a3;
  if (v5)
  {
    v6 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0
      || (v7 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v5, v7) & 1) != 0))
    {
      v8 = v5;
LABEL_11:
      v15 = *(void **)(a1 + 32);
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: %@"), v17, v8));
      objc_msgSend(v15, "addObject:", v16);

      goto LABEL_12;
    }
    v9 = v5;
    v10 = (objc_class *)objc_opt_class(v9);
    v11 = NSStringFromClass(v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    if ((objc_opt_respondsToSelector(v9, "accessibilityIdentifier") & 1) != 0)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "performSelector:", "accessibilityIdentifier"));
      v14 = v13;
      if (v13 && !objc_msgSend(v13, "isEqualToString:", v12))
      {
        v8 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v12, v9, v14));

        goto LABEL_10;
      }

    }
    v8 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v12, v9));
LABEL_10:

    goto LABEL_11;
  }
LABEL_12:

}

void sub_100455F94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v4;

  if (a3)
  {
    v3 = *(void **)(a1 + 32);
    v4 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: %@"), a2, a3));
    objc_msgSend(v3, "addObject:", v4);

  }
}

void sub_100456D68(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  objc_msgSend(*(id *)(a1 + 32), "setUpdatingVenueAsync:", 0);
  +[NSDate timeIntervalSinceReferenceDate](NSDate, "timeIntervalSinceReferenceDate");
  objc_msgSend(*(id *)(a1 + 32), "setLastVenueUpdateTimestamp:");
  v2 = *(void **)(a1 + 32);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "delegate"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "venueWithFocus"));
  objc_msgSend(v2, "immediatelyHandleVenueWithFocusDidChange:", v3);

}

void sub_100459778(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  SearchResult *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  SearchFieldItem *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint8_t buf[4];
  id v34;
  _BYTE v35[128];

  v5 = a2;
  v6 = a3;
  if (!v6 && objc_msgSend(v5, "count"))
  {
    v28 = a1;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(v5, "count")));
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v11 = v5;
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v29, v35, 16);
    if (!v12)
    {
      v14 = 0;
      goto LABEL_22;
    }
    v13 = v12;
    v14 = 0;
    v15 = *(_QWORD *)v30;
    while (1)
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v30 != v15)
          objc_enumerationMutation(v11);
        v17 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)v16);
        v18 = -[SearchResult initWithMapItem:]([SearchResult alloc], "initWithMapItem:", v17);
        v19 = objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "_displayMapRegion"));
        v20 = (void *)v19;
        if (v14)
        {
          v21 = GEOMapRegionUnion(v14, v19);
          v22 = objc_claimAutoreleasedReturnValue(v21);

          v14 = (void *)v22;
          if (!v18)
            goto LABEL_15;
LABEL_14:
          objc_msgSend(v10, "addObject:", v18);
          goto LABEL_15;
        }
        v14 = (void *)v19;
        if (v18)
          goto LABEL_14;
LABEL_15:

        v16 = (char *)v16 + 1;
      }
      while (v13 != v16);
      v23 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v29, v35, 16);
      v13 = v23;
      if (!v23)
      {
LABEL_22:

        v24 = (void *)objc_claimAutoreleasedReturnValue(+[SearchInfo searchInfoWithResults:boundingMapRegion:](SearchInfo, "searchInfoWithResults:boundingMapRegion:", v10, v14));
        v25 = objc_alloc_init(SearchFieldItem);
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v28 + 32), "brandName"));
        -[SearchFieldItem setSearchString:](v25, "setSearchString:", v26);

        v27 = *(_QWORD *)(v28 + 40);
        if (v27)
          (*(void (**)(uint64_t, SearchFieldItem *, void *))(v27 + 16))(v27, v25, v24);

        v6 = 0;
        goto LABEL_25;
      }
    }
  }
  v7 = sub_100431A4C();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    v34 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "BrandAction resolveBrand:%@", buf, 0xCu);
  }

  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v9 + 16))(v9, 0, 0);
LABEL_25:

}

id sub_100459AD8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "startedSubTest:withMetrics:", CFSTR("msgInsights:mapItems"), &off_1012732C0);
}

id sub_100459B48(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("msgInsights:mapItems"));
}

id sub_100459BB0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "startedSubTest:withMetrics:", CFSTR("msgInsights:contacts"), &off_1012732D8);
}

id sub_100459C20(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("msgInsights:contacts"));
}

id sub_100459C88(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "startedSubTest:withMetrics:", CFSTR("msgInsights:isTouristHere"), &off_1012732F0);
}

id sub_100459CF8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("msgInsights:isTouristHere"));
}

id sub_100459D60(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "startedSubTest:withMetrics:", CFSTR("msgInsights:PortraitCall"), &off_101273308);
}

id sub_100459DD0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("msgInsights:PortraitCall"));
}

id sub_100459E38(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "startedSubTest:withMetrics:", CFSTR("msgInsights:RoutineCall"), &off_101273320);
}

id sub_100459EA8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("msgInsights:RoutineCall"));
}

id sub_100459F10(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "startedSubTest:withMetrics:", CFSTR("msgInsights:preload"), &off_101273338);
}

id sub_100459F80(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("msgInsights:preload"));
}

id sub_10045A008(uint64_t a1)
{
  uint64_t v1;
  objc_super v3;

  v1 = *(_QWORD *)(a1 + 32);
  v3.receiver = *(id *)(a1 + 40);
  v3.super_class = (Class)MapsAppTestSearch;
  return objc_msgSendSuper2(&v3, "startedSubTest:", v1);
}

id sub_10045A0B8(uint64_t a1)
{
  uint64_t v1;
  objc_super v3;

  v1 = *(_QWORD *)(a1 + 32);
  v3.receiver = *(id *)(a1 + 40);
  v3.super_class = (Class)MapsAppTestSearch;
  return objc_msgSendSuper2(&v3, "finishedSubTest:", v1);
}

id sub_10045A194(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  objc_super v4;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 32);
  v4.receiver = *(id *)(a1 + 48);
  v4.super_class = (Class)MapsAppTestSearch;
  return objc_msgSendSuper2(&v4, "startedSubTest:withMetrics:", v2, v1);
}

uint64_t sub_10045A264(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10045A45C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_10045A478(uint64_t a1)
{
  dispatch_time_t v2;
  _QWORD block[4];
  id v4;

  v2 = dispatch_time(0, 1000000000);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10045A514;
  block[3] = &unk_1011AD260;
  objc_copyWeak(&v4, (id *)(a1 + 32));
  dispatch_after(v2, (dispatch_queue_t)&_dispatch_main_q, block);
  objc_destroyWeak(&v4);
}

void sub_10045A514(uint64_t a1)
{
  void *v1;
  void *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v1, "addObserver:selector:name:object:", WeakRetained, "didDisplayCarplayBrowseCategories", CFSTR("PPTTest_CarSearchCategoriesModeController_DidDisplayCategories"), 0);

    objc_msgSend(WeakRetained, "startedSubTest:", CFSTR("enterSearchMode"));
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "testCoordinator"));
    objc_msgSend(v2, "pptTestEnterSearchMode");

  }
}

void sub_10045AACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10045AAE8(uint64_t a1)
{
  dispatch_time_t v2;
  _QWORD block[4];
  id v4;

  v2 = dispatch_time(0, 4000000000);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10045AB84;
  block[3] = &unk_1011AD260;
  objc_copyWeak(&v4, (id *)(a1 + 32));
  dispatch_after(v2, (dispatch_queue_t)&_dispatch_main_q, block);
  objc_destroyWeak(&v4);
}

void sub_10045AB84(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v6 = WeakRetained;
    objc_msgSend(WeakRetained, "startedTest");
    objc_msgSend(v6, "startedSubTest:", CFSTR("enterSearchMode"));
    objc_msgSend(v6, "startedSubTest:", CFSTR("presentSearchUI"));
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v2, "addObserver:selector:name:object:", v6, "searchUILayoutDone", CFSTR("PPTTestTrayLayoutDidUpdateNotification"), 0);

    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "testCoordinator"));
    objc_msgSend(v3, "pptTestEnterSearchMode");

    v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIDevice currentDevice](UIDevice, "currentDevice"));
    v5 = objc_msgSend(v4, "userInterfaceIdiom");

    WeakRetained = v6;
    if (v5 == (id)5)
    {
      objc_msgSend(v6, "finishedSubTest:", CFSTR("enterSearchMode"));
      objc_msgSend(v6, "startAutocompleteOrNearbySearchTest");
      WeakRetained = v6;
    }
  }

}

void sub_10045AF70(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_10045AF98(id *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  double v6;
  uint64_t v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "testCoordinator"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "pptTestScrollView"));

  objc_msgSend(a1[4], "startedSubTest:", a1[5]);
  objc_msgSend(a1[6], "contentSize");
  v7 = (int)v6;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10045B0A4;
  v8[3] = &unk_1011B7458;
  objc_copyWeak(&v10, a1 + 7);
  v9 = a1[5];
  objc_msgSend(v5, "_performScrollTest:iterations:delta:length:scrollAxis:extraResultsBlock:completionBlock:", 0, 10, 20, v7, 2, 0, v8);

  objc_destroyWeak(&v10);
}

void sub_10045B090(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10045B0A4(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  id v4;

  v2 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "finishedSubTest:", *(_QWORD *)(a1 + 32));

  v4 = objc_loadWeakRetained(v2);
  objc_msgSend(v4, "finishedTest");

}

void sub_10045B100(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  id v3;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "finishedSubTest:", CFSTR("displayCarPlayKeyboard"));

  v3 = objc_loadWeakRetained(v1);
  objc_msgSend(v3, "_runTestNow");

}

id sub_10045B154(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", *(_QWORD *)(a1 + 40));
  return objc_msgSend(*(id *)(a1 + 32), "finishedTest");
}

void sub_10045B5E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10045B630(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("nearby"));
    objc_msgSend(*(id *)(a1 + 32), "finishedTest");
    WeakRetained = v3;
  }

}

id sub_10045BB0C(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "removeObjectAtIndex:", 0);
  return _objc_msgSend(*(id *)(a1 + 32), "searchAutoCompleteTestSendQuery");
}

id sub_10045BDC0(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "removeObjectAtIndex:", 0);
  return _objc_msgSend(*(id *)(a1 + 32), "searchAutoCompleteTestSendQuery");
}

id sub_10045C044(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("displayPlacecard"));
}

id sub_10045C054(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("fetchPlaceEnrichment"));
}

id sub_10045C064(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "startedSubTest:", CFSTR("displayPlaceEnrichment"));
}

id sub_10045C074(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("displayPlaceEnrichment"));
  return objc_msgSend(*(id *)(a1 + 32), "finishedTest");
}

id sub_10045C0A4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "addObserver:selector:name:object:", *(_QWORD *)(a1 + 32), "willBeginGEOPPTTest_PlaceRequestTicket_PlaceDataRequest:", CFSTR("GEOPPTTest_PlaceRequestTicket_PlaceDataRequestBEGIN"), 0);

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v3, "addObserver:selector:name:object:", *(_QWORD *)(a1 + 32), "didEndGEOPPTTest_PlaceRequestTicket_PlaceDataRequest:", CFSTR("GEOPPTTest_PlaceRequestTicket_PlaceDataRequestEND"), 0);

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GEONotificationPreferenceManager sharedManager](GEONotificationPreferenceManager, "sharedManager"));
  objc_msgSend(v4, "setEnabled:forSubTestWithName:", 1, CFSTR("GEOPPTTest_PlaceRequestTicket_PlaceDataRequest"));

  return objc_msgSend(*(id *)(a1 + 32), "sendSearchRequest");
}

void sub_10045C880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10045C89C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "finishSearchTest:", 0);

}

void sub_10045C9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10045C9D4(uint64_t a1)
{
  _BYTE *WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained[96])
  {
    objc_msgSend(WeakRetained, "finishedSubTest:", CFSTR("mapViewFullyDrawn"));
    objc_msgSend(v2, "continueToNearbyScrollTests");
  }
  else
  {
    objc_msgSend(WeakRetained, "finishSearchTest:", 0);
  }

}

id sub_10045CAE8(uint64_t a1)
{
  unsigned int v2;
  void *v3;
  unsigned int v4;
  void *v5;
  _QWORD v7[5];

  v2 = objc_msgSend(*(id *)(a1 + 32), "containsString:", CFSTR("Scroll_"));
  v3 = *(void **)(a1 + 40);
  if (v2)
  {
    v4 = objc_msgSend(v3, "canUpdateTrayLayout");
    v5 = *(void **)(a1 + 40);
    if (v4)
    {
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_10045CBA8;
      v7[3] = &unk_1011AC860;
      v7[4] = v5;
      return objc_msgSend(v5, "updateTrayLayout:animated:completion:", 2, 1, v7);
    }
    else
    {
      return _objc_msgSend(v5, "startScrollNearbyTestCategory");
    }
  }
  else
  {
    objc_msgSend(v3, "finishedSubTest:", CFSTR("nearby"));
    return _objc_msgSend(*(id *)(a1 + 40), "startRefreshSearchTestIfNeeded");
  }
}

id sub_10045CBA8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "startScrollNearbyTestCategory");
}

id sub_10045CC54(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "startRefreshSearchTestIfNeeded");
}

void sub_10045CE6C(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "addObserver:selector:name:object:", *(_QWORD *)(a1 + 32), "refreshSearchRequestSent:", CFSTR("SearchManagerSearchForStringRequestSentNotification"), 0);

  objc_msgSend(*(id *)(a1 + 32), "startedSubTest:", CFSTR("refreshSearch - searchRequestSent"));
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "testCoordinator"));
  objc_msgSend(v3, "pptTestRefreshSearch");

}

void sub_10045D1CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10045D1E8(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  id v3;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "finishedSubTest:", CFSTR("refreshSearch - mapViewFullyDrawn"));

  v3 = objc_loadWeakRetained(v1);
  objc_msgSend(v3, "finishedTest");

}

id sub_10045D310(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("RouteSuggestions - show edit directions UI"));
  return objc_msgSend(*(id *)(a1 + 32), "finishedTest");
}

id sub_10045D340(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("RouteSuggestions - show Route Planning"));
  return objc_msgSend(*(id *)(a1 + 32), "finishedTest");
}

void sub_10045D528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10045D544(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "searchForSearchString");

}

void sub_10045D720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10045D744(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10045D754(uint64_t a1)
{

}

void sub_10045D75C(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  id v10;

  v10 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "object"));

  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "object"));
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "searchInfo"));

    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "results"));
    v9 = objc_msgSend(v8, "count");

    if (!v9)
    {
      objc_msgSend(*(id *)(a1 + 32), "startedTest");
      objc_msgSend(*(id *)(a1 + 32), "failedTest");
    }
  }

}

void sub_10045D814(uint64_t a1)
{
  void *v2;
  id v3;
  dispatch_time_t v4;
  _QWORD block[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "results"));
  v3 = objc_msgSend(v2, "count");

  if (v3)
  {
    v4 = dispatch_time(0, 5000000000);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10045D8E0;
    block[3] = &unk_1011AC860;
    block[4] = *(_QWORD *)(a1 + 32);
    dispatch_after(v4, (dispatch_queue_t)&_dispatch_main_q, block);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "startedTest");
    objc_msgSend(*(id *)(a1 + 32), "failedTest");
  }
}

id sub_10045D8E0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "searchResultsDidAppear");
}

id sub_10045D96C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_scrollingTest");
}

id sub_10045DB2C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finishedTest");
}

void sub_10045DC0C(uint64_t a1)
{
  void *v2;
  unsigned int v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainVKMapView"));
  v3 = objc_msgSend(v2, "isFullyDrawn");

  if (v3)
    _objc_msgSend(*(id *)(a1 + 32), "onFullyDrawn:", 0);
}

void sub_10045DE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10045DEAC(uint64_t a1)
{
  dispatch_time_t v2;
  _QWORD v3[4];
  id v4;
  id v5;

  v2 = dispatch_time(0, 4000000000);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10045DF5C;
  v3[3] = &unk_1011AD1E8;
  objc_copyWeak(&v5, (id *)(a1 + 40));
  v4 = *(id *)(a1 + 32);
  dispatch_after(v2, (dispatch_queue_t)&_dispatch_main_q, v3);

  objc_destroyWeak(&v5);
}

void sub_10045DF5C(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    objc_msgSend(WeakRetained, "startedTest");
    objc_msgSend(*(id *)(a1 + 32), "addObserver:selector:name:object:", v4, "startAutoCompleteOrSearchTest", UIKeyboardDidShowNotification, 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "testCoordinator"));
    objc_msgSend(v3, "pptTestEnterSearchMode");

    WeakRetained = v4;
  }

}

id sub_10045E708(uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(a1 + 32);
  if (v1[9] == -1)
    return _objc_msgSend(v1, "returnToSearchResults");
  else
    return _objc_msgSend(v1, "returnToRetainedAutoComplete");
}

void sub_10045E8A8(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("returnToAutoComplete - suggestions received"));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_10045E8D8(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

id sub_10045E8E0(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("returnToAutoComplete"));
  return objc_msgSend(*(id *)(a1 + 32), "finishedTest");
}

id sub_10045E9B0(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("returnToSearchResults"));
  return objc_msgSend(*(id *)(a1 + 32), "finishedTest");
}

id sub_100460268(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = objc_msgSend(a2, "mutableCopy");
  objc_msgSend(v3, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 32), NSFontAttributeName);
  v4 = objc_msgSend(v3, "copy");

  return v4;
}

id sub_100461A08(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  objc_class *v5;
  NSString *v6;
  void *v7;
  void *v8;
  UserProfileSectionFooterViewModel *v9;
  id v10;
  _BOOL8 v11;
  char *v12;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (objc_class *)objc_opt_class(UserProfileSectionFooterView);
  v6 = NSStringFromClass(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath:", UICollectionElementKindSectionFooter, v7, *(_QWORD *)(a1 + 40)));

  v9 = -[UserProfileSectionFooterViewModel initWithContentString:]([UserProfileSectionFooterViewModel alloc], "initWithContentString:", v4);
  v10 = objc_msgSend(v4, "length");

  if (v10)
  {
    v11 = 0;
  }
  else
  {
    v12 = (char *)objc_msgSend(*(id *)(a1 + 32), "numberOfSections");
    v11 = v12 != (char *)objc_msgSend(*(id *)(a1 + 40), "section") + 1;
  }
  -[UserProfileSectionFooterViewModel setCollapsed:](v9, "setCollapsed:", v11);
  if (objc_msgSend(*(id *)(a1 + 48), "isEqual:", *(_QWORD *)(a1 + 56)))
  {
    -[UserProfileSectionFooterViewModel setContainsLink:](v9, "setContainsLink:", 1);
    -[UserProfileSectionFooterViewModel setTarget:](v9, "setTarget:", *(_QWORD *)(a1 + 64));
    -[UserProfileSectionFooterViewModel setAction:](v9, "setAction:", "privacyTextTapped");
  }
  objc_msgSend(v8, "configureWithViewModel:", v9);
  objc_msgSend(v8, "setNeedsLayout");
  objc_msgSend(v8, "layoutIfNeeded");

  return v8;
}

void sub_100461D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100461D70(uint64_t a1, void *a2)
{
  id v3;
  id *v4;
  id WeakRetained;
  _QWORD v6[4];
  id v7;

  v3 = a2;
  v4 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100461E2C;
    v6[3] = &unk_1011B07A0;
    objc_copyWeak(&v7, v4);
    objc_msgSend(WeakRetained, "_fetchMapItemsForReviewedPlaces:completion:", v3, v6);
    objc_destroyWeak(&v7);
  }

}

void sub_100461E18(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100461E2C(uint64_t a1, void *a2)
{
  id *WeakRetained;
  id *v5;
  id v6;

  v6 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    objc_storeStrong(WeakRetained + 15, a2);
    objc_msgSend(v5, "_loadContent");
  }

}

void sub_1004621F4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  NSObject *v9;
  unsigned int v10;
  unsigned int v11;
  id v12;
  void *v13;
  _QWORD v14[4];
  id v15;
  uint8_t buf[4];
  unsigned int v17;
  __int16 v18;
  unsigned int v19;
  __int16 v20;
  id v21;

  v5 = a2;
  v6 = a3;
  if (v6 || (v7 = objc_msgSend(v5, "count"), v7 != objc_msgSend(*(id *)(a1 + 32), "count")))
  {
    v8 = sub_10043261C();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = objc_msgSend(v5, "count");
      v11 = objc_msgSend(*(id *)(a1 + 32), "count");
      *(_DWORD *)buf = 67109634;
      v17 = v10;
      v18 = 1024;
      v19 = v11;
      v20 = 2112;
      v21 = v6;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Only refined %d map items of %d reviewed places. Error: %@", buf, 0x18u);
    }

  }
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100462374;
  v14[3] = &unk_1011B7558;
  v15 = *(id *)(a1 + 40);
  v12 = sub_10039DCD4(v5, v14);
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

UGCRefinedReviewedPlace *sub_100462374(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  UGCRefinedReviewedPlace *v5;
  void *v6;
  void *v7;
  void *v8;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "_identifier"));
  v5 = (UGCRefinedReviewedPlace *)objc_msgSend(v4, "muid");

  if (v5)
  {
    v6 = *(void **)(a1 + 32);
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v5));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", v7));

    if (v8)
      v5 = -[UGCRefinedReviewedPlace initWithMapItem:reviewedPlace:]([UGCRefinedReviewedPlace alloc], "initWithMapItem:reviewedPlace:", v3, v8);
    else
      v5 = 0;

  }
  return v5;
}

void sub_10046314C(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSOrderedSet orderedSetWithObject:](NSOrderedSet, "orderedSetWithObject:", &OBJC_PROTOCOL___FloatingControlsOverlayDelegate));
  v2 = (void *)qword_1014D25A0;
  qword_1014D25A0 = v1;

}

UIColor *__cdecl sub_1004637C4(id a1, UITraitCollection *a2)
{
  void *v2;

  if ((id)-[UITraitCollection userInterfaceStyle](a2, "userInterfaceStyle") == (id)2)
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemWhiteColor](UIColor, "systemWhiteColor"));
  else
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemBlueColor](UIColor, "systemBlueColor"));
  return (UIColor *)v2;
}

void sub_100463E9C(uint64_t a1, void *a2, void *a3)
{
  unint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;

  v9 = a2;
  v5 = a3;
  if (v9 | v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedMapsDelegate](UIApplication, "sharedMapsDelegate"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "storageID"));
    objc_msgSend(v6, "interruptConvertToNavigableSavedRouteID:routeName:error:directionsError:", v7, *(_QWORD *)(a1 + 40), v9, v5);

  }
  v8 = *(_QWORD *)(a1 + 48);
  if (v8)
    (*(void (**)(void))(v8 + 16))();

}

BOOL sub_100463F44(id a1, ChromeContext *a2, unint64_t a3, BOOL *a4)
{
  ChromeContext *v4;
  uint64_t v5;
  uint64_t v6;
  char isKindOfClass;

  v4 = a2;
  v6 = objc_opt_class(BaseModeController, v5);
  isKindOfClass = objc_opt_isKindOfClass(v4, v6);

  return isKindOfClass & 1;
}

void sub_100463F8C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  SearchResult *v6;
  SearchFieldItem *v7;
  void *v8;
  SearchFieldItem *v9;
  id v10;
  void *v11;
  DirectionItem *v12;
  void *v13;
  DirectionItem *v14;
  uint64_t v15;
  _QWORD v16[2];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "actionCoordinator"));
  v3 = objc_opt_class(ActionCoordinator);
  if ((objc_opt_isKindOfClass(v2, v3) & 1) != 0)
    v4 = v2;
  else
    v4 = 0;
  v5 = v4;

  v6 = objc_opt_new(SearchResult);
  -[SearchResult setRouteData:](v6, "setRouteData:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 32));
  v7 = objc_opt_new(SearchFieldItem);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[SearchResult currentLocationSearchResult](SearchResult, "currentLocationSearchResult"));
  -[SearchFieldItem setSearchResult:](v7, "setSearchResult:", v8);

  v9 = objc_opt_new(SearchFieldItem);
  -[SearchFieldItem setSearchResult:](v9, "setSearchResult:", v6);
  v10 = objc_alloc_init((Class)NSMutableDictionary);
  objc_msgSend(v10, "setObject:forKeyedSubscript:", &off_10126D4C8, CFSTR("DirectionsSessionInitiatorKey"));
  objc_msgSend(v10, "setObject:forKeyedSubscript:", &off_10126D4E0, CFSTR("DirectionsRoutePlanningSessionSourceKey"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "historyUUID"));
  objc_msgSend(v10, "setObject:forKeyedSubscript:", v11, CFSTR("DirectionsRouteUUIDKey"));

  v12 = [DirectionItem alloc];
  v16[0] = v7;
  v16[1] = v9;
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v16, 2));
  v14 = -[DirectionItem initWithItems:transportType:](v12, "initWithItems:transportType:", v13, 0);

  objc_msgSend(v5, "viewController:doDirectionItem:withUserInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), v14, v10);
  v15 = *(_QWORD *)(a1 + 48);
  if (v15)
    (*(void (**)(void))(v15 + 16))();

}

id sub_100464CF8(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "setAlpha:", 1.0);
}

void sub_100464FC0(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 72));
  _Unwind_Resume(a1);
}

void sub_100464FEC(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v9 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "chromeViewController"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "mapView"));

    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "iosBasedChromeViewController"));
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "acquireExploreMapHikingMapToken"));
    v6 = (void *)*((_QWORD *)v9 + 7);
    *((_QWORD *)v9 + 7) = v5;

    *((_DWORD *)v9 + 12) = objc_msgSend(v3, "_applicationState");
    objc_msgSend(v3, "_setApplicationState:", 1);
    objc_msgSend(v9, "_resetUserInteractionState");
    objc_msgSend(v9, "_insertRecenterButton");
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "chromeViewController"));
    v8 = sub_1002A8AA0(v7);

    if (v8 == 5)
    {
      objc_msgSend(v3, "_setScaleVisibility:", 1);
    }
    else
    {
      objc_msgSend(v3, "setShowsScale:", 1);
      objc_msgSend(v3, "setShowsCompass:", 1);
      objc_msgSend(v3, "_compassInsets");
      objc_msgSend(v3, "_setCompassInsets:", 0.0);
    }

    WeakRetained = v9;
  }

}

void sub_1004650FC(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "_frameRouteAnimated:", *(unsigned __int8 *)(a1 + 40));
    WeakRetained = v3;
  }

}

void sub_10046513C(uint64_t a1)
{
  id WeakRetained;
  id v3;
  void *v4;
  id v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v5 = WeakRetained;
    v3 = objc_msgSend(WeakRetained, "_analyticsTarget");
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "_analyticsValue"));
    +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 21, v3, v4);

    objc_msgSend(v5, "_frameRouteAnimated:", *(unsigned __int8 *)(a1 + 40));
    WeakRetained = v5;
  }

}

void sub_10046532C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

void sub_100465360(uint64_t a1)
{
  id *WeakRetained;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id *v7;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v7 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "chromeViewController"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "mapView"));

    objc_msgSend(v3, "_setApplicationState:", *((unsigned int *)v7 + 12));
    objc_msgSend(v7[10], "removeFromSuperview");
    objc_msgSend(v7[9], "removeFromSuperview");
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "chromeViewController"));
    v5 = sub_1002A8AA0(v4);

    if (v5 == 5)
    {
      if (+[MapsSettings alwaysShowScale](MapsSettings, "alwaysShowScale"))
        v6 = 2;
      else
        v6 = 0;
      objc_msgSend(v3, "_setScaleVisibility:", v6);
    }

    WeakRetained = v7;
  }

}

void sub_100465428(uint64_t a1)
{
  _QWORD *WeakRetained;
  void *v2;
  _QWORD *v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = (void *)WeakRetained[7];
    WeakRetained[7] = 0;
    v3 = WeakRetained;

    WeakRetained = v3;
  }

}

void sub_100465460(uint64_t a1)
{
  _QWORD *WeakRetained;
  void *v2;
  _QWORD *v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = (void *)WeakRetained[7];
    WeakRetained[7] = 0;
    v3 = WeakRetained;

    WeakRetained = v3;
  }

}

id sub_100465C6C(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "setAlpha:", 0.0);
}

void sub_1004664EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_100466744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_100466BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100466C0C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100466C1C(uint64_t a1)
{

}

void sub_100466C24(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_100466CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100466D14(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

id sub_10046708C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  RideBookingRideOptionStateObserverProxy *v12;
  void *v13;

  v3 = a2;
  v4 = objc_alloc((Class)MKMapItem);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "origin"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "mapItemStorage"));
  v7 = objc_msgSend(v4, "initWithGeoMapItem:isPlaceHolderPlace:", v6, 0);

  v8 = objc_alloc((Class)MKMapItem);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "destination"));

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "mapItemStorage"));
  v11 = objc_msgSend(v8, "initWithGeoMapItem:isPlaceHolderPlace:", v10, 0);

  v12 = -[RideBookingRideOptionStateObserverProxy initWithDelegate:]([RideBookingRideOptionStateObserverProxy alloc], "initWithDelegate:", *(_QWORD *)(a1 + 32));
  -[RideBookingRideOptionStateObserverProxy updateRideOptionStateForOrigin:destination:](v12, "updateRideOptionStateForOrigin:destination:", v7, v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[Result resultWithValue:](Result, "resultWithValue:", v12));

  return v13;
}

void sub_1004671A4(uint64_t a1)
{
  void *v1;
  id WeakRetained;
  _QWORD v3[5];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "rideOptionStateObserverResult"));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10046722C;
  v3[3] = &unk_1011B76E8;
  v3[4] = WeakRetained;
  objc_msgSend(v1, "withValue:orError:", v3, &stru_1011B7708);

}

void sub_10046722C(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "rideOptionState"));
  objc_msgSend(v2, "rideOptionStateDidChange:", v3);

}

void sub_100467390(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observers"));
  objc_msgSend(v2, "RideBookingPlanningSession:didFinishResolvingWaypointSet:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_100467768(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  id WeakRetained;
  _QWORD v17[4];
  id v18;
  id v19;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 8));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "chromeViewController"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "mapView"));
  v4 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 8));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "chromeViewController"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "currentTraits"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[SearchSession currentSearchSession](SearchSession, "currentSearchSession"));
  v8 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 8));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "appCoordinator"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "platformController"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "directionsDataSource"));
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_100467900;
  v17[3] = &unk_1011B7730;
  v12 = *(id *)(a1 + 40);
  v18 = v3;
  v19 = v12;
  v13 = v3;
  +[RAPAppStateFactory createAppStateWithMapView:traits:place:searchDataSource:directionsDataSource:completion:](RAPAppStateFactory, "createAppStateWithMapView:traits:place:searchDataSource:directionsDataSource:completion:", v14, v6, 0, v7, v11, v17);

}

uint64_t sub_100467900(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(result + 16))(result, a2, *(_QWORD *)(a1 + 32));
  return result;
}

uint64_t sub_100467A40(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(result + 16))(result, a2, 0);
  return result;
}

void sub_100467AD0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  id WeakRetained;
  _QWORD v17[4];
  id v18;
  id v19;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 8));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "chromeViewController"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "mapView"));
  v4 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 8));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "chromeViewController"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "currentTraits"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[SearchSession currentSearchSession](SearchSession, "currentSearchSession"));
  v8 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 8));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "appCoordinator"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "platformController"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "directionsDataSource"));
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_100467C70;
  v17[3] = &unk_1011B7730;
  v12 = *(id *)(a1 + 40);
  v18 = v3;
  v19 = v12;
  v13 = v3;
  +[RAPAppStateFactory createAppStateWithMapView:traits:place:searchDataSource:directionsDataSource:shouldLoadHomeWorkShortcuts:completion:](RAPAppStateFactory, "createAppStateWithMapView:traits:place:searchDataSource:directionsDataSource:shouldLoadHomeWorkShortcuts:completion:", v14, v6, 0, v7, v11, 1, v17);

}

uint64_t sub_100467C70(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(result + 16))(result, a2, *(_QWORD *)(a1 + 32));
  return result;
}

uint64_t sub_100467E4C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(result + 16))(result, a2, 0);
  return result;
}

void sub_10046803C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v4 = a3;
  v5 = *(void **)(a1 + 32);
  if (v5)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1004680D0;
    v6[3] = &unk_1011ACAD0;
    v8 = v5;
    v7 = v4;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);

  }
}

uint64_t sub_1004680D0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_100469508(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  _QWORD v8[5];
  id v9;
  id v10;
  uint64_t v11;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MSPSharedTripService sharedInstance](MSPSharedTripService, "sharedInstance"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1004695C4;
  v8[3] = &unk_1011B77D0;
  v5 = (void *)a1[5];
  v6 = a1[4];
  v11 = a1[6];
  v8[4] = v6;
  v9 = v5;
  v10 = v3;
  v7 = v3;
  objc_msgSend(v4, "startSharingWithContact:completion:", v7, v8);

}

void sub_1004695C4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  unsigned int v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  id v12;
  id v13;
  NSObject *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  int v19;
  uint64_t v20;
  __int16 v21;
  id v22;
  __int16 v23;
  id v24;

  v4 = a3;
  if ((objc_msgSend(v4, "code") == (id)7 || objc_msgSend(v4, "code") == (id)9 || objc_msgSend(v4, "code") == (id)8)
    && (v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "domain")),
        v6 = objc_msgSend(v5, "isEqualToString:", MSPSharedTripErrorDomain),
        v5,
        v6))
  {
    v7 = *(_QWORD *)(a1 + 56);
    v8 = sub_100431C0C();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    v10 = v9;
    if (v7)
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        v11 = *(_QWORD *)(a1 + 32);
        v12 = objc_msgSend(*(id *)(a1 + 40), "count");
        v19 = 138412546;
        v20 = v11;
        v21 = 2048;
        v22 = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%@ - will retry automatic sharing with %lu contacts after delay, server does not have navigation state yet", (uint8_t *)&v19, 0x16u);
      }

      objc_msgSend(*(id *)(a1 + 32), "_scheduleAutomaticSharingRetry:", *(_QWORD *)(a1 + 56) - 1);
    }
    else
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v17 = *(_QWORD *)(a1 + 32);
        v18 = objc_msgSend(*(id *)(a1 + 40), "count");
        v19 = 138412546;
        v20 = v17;
        v21 = 2048;
        v22 = v18;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%@ - will not retry automatic sharing with %lu contacts after delay, server does not have navigation state yet but retried too many times", (uint8_t *)&v19, 0x16u);
      }

    }
  }
  else
  {
    +[MapsSharedTripAnalyticsHelper sendSuccessAnalyticFor:](_TtC4Maps29MapsSharedTripAnalyticsHelper, "sendSuccessAnalyticFor:", *(_QWORD *)(a1 + 48));
    v13 = sub_100431C0C();
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      v15 = *(_QWORD *)(a1 + 32);
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "stringValue"));
      v19 = 138412803;
      v20 = v15;
      v21 = 2113;
      v22 = v16;
      v23 = 2112;
      v24 = v4;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "%@ - automatic sharing with %{private}@ completed with error: %@", (uint8_t *)&v19, 0x20u);

    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "removeObject:", *(_QWORD *)(a1 + 48));
  }

}

void sub_10046A770(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_10046A78C(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  double v4;
  CGFloat v5;
  double v6;
  CGFloat v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  CGFloat v15;
  CGFloat v16;
  MKMapPoint v17;
  double v18;
  double v19;
  CLLocationCoordinate2D v20;
  CLLocationCoordinate2D v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  id v27;
  id v28;
  void *v29;
  void *v30;
  id v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  _QWORD v36[5];
  MKMapPoint v37;
  MKMapPoint v38;
  CGRect v39;
  CGRect v40;

  v2 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "overviewRect");
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;

  v14 = MKZoomScaleForZoomLevelF(v12, v13, *(double *)(*(_QWORD *)(a1 + 32) + 80));
  v39.origin.x = v5;
  v39.origin.y = v7;
  v39.size.width = v9;
  v39.size.height = v11;
  v15 = CGRectGetWidth(v39) / v14;
  v40.origin.x = v5;
  v40.origin.y = v7;
  v40.size.width = v9;
  v40.size.height = v11;
  v16 = CGRectGetHeight(v40) / v14;
  v17 = MKMapPointForCoordinate(*(CLLocationCoordinate2D *)(*(_QWORD *)(a1 + 32) + 88));
  v37.x = v17.x - v15 * 0.5;
  v37.y = v17.y - v16 * 0.5;
  v18 = v15 + v37.x;
  v19 = v16 + v37.y;
  v20 = MKCoordinateForMapPoint(v37);
  v38.x = v18;
  v38.y = v19;
  v21 = MKCoordinateForMapPoint(v38);
  v22 = *(_QWORD *)(a1 + 32);
  v23 = *(double *)(v22 + 96);
  if (v23 < -180.0
    || v23 > 180.0
    || (v24 = *(double *)(v22 + 88), v24 < -90.0)
    || v24 > 90.0
    || (v25 = vabdd_f64(v20.latitude, v21.latitude), v25 > 180.0)
    || (v26 = vabdd_f64(v20.longitude, v21.longitude), v26 > 360.0))
  {
    *(_BYTE *)(v22 + 56) = 1;
  }
  else
  {
    v27 = objc_alloc_init((Class)MKMapSnapshotOptions);
    objc_msgSend(v27, "setRegion:", v24, v23, v25, v26);
    v28 = objc_loadWeakRetained(v2);
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "mapView"));
    objc_msgSend(v27, "setMapType:", objc_msgSend(v29, "mapType"));

    objc_msgSend(v27, "setSize:", v9, v11);
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[UITraitCollection traitCollectionWithDisplayScale:](UITraitCollection, "traitCollectionWithDisplayScale:", 2.0));
    objc_msgSend(v27, "setTraitCollection:", v30);

    v31 = objc_msgSend(objc_alloc((Class)MKMapSnapshotter), "initWithOptions:", v27);
    v32 = *(_QWORD *)(a1 + 32);
    v33 = *(void **)(v32 + 72);
    *(_QWORD *)(v32 + 72) = v31;

    v34 = *(_QWORD *)(a1 + 32);
    v35 = *(void **)(v34 + 72);
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472;
    v36[2] = sub_10046AA24;
    v36[3] = &unk_1011B51F8;
    v36[4] = v34;
    objc_msgSend(v35, "startWithCompletionHandler:", v36);

  }
}

void sub_10046AA24(uint64_t a1, void *a2)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 56) = 1;
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 64), a2);
}

UIColor *__cdecl sub_10046B3CC(id a1, MapsTheme *a2)
{
  return -[MapsTheme keyColor](a2, "keyColor");
}

_QWORD *sub_10046D908(id val)
{
  _QWORD *v1;
  _QWORD v3[4];
  id v4;
  id location;

  objc_initWeak(&location, val);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10046D994;
  v3[3] = &unk_1011B4A08;
  objc_copyWeak(&v4, &location);
  v1 = objc_retainBlock(v3);
  objc_destroyWeak(&v4);
  objc_destroyWeak(&location);
  return v1;
}

id sub_10046D994(uint64_t a1, void *a2, void *a3, void *a4)
{
  id *v6;
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  id v11;

  v6 = (id *)(a1 + 32);
  v7 = a4;
  v8 = a3;
  v9 = a2;
  WeakRetained = objc_loadWeakRetained(v6);
  v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "tableView:cellForRowAtIndexPath:itemIdentifier:", v9, v8, v7));

  if (!v11)
    v11 = objc_msgSend(objc_alloc((Class)UITableViewCell), "initWithStyle:reuseIdentifier:", 0, 0);
  return v11;
}

_QWORD *sub_10046DA38(id val)
{
  _QWORD *v1;
  _QWORD v3[4];
  id v4;
  id location;

  objc_initWeak(&location, val);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10046DAC4;
  v3[3] = &unk_1011B2078;
  objc_copyWeak(&v4, &location);
  v1 = objc_retainBlock(v3);
  objc_destroyWeak(&v4);
  objc_destroyWeak(&location);
  return v1;
}

id sub_10046DAC4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  void *v11;
  UICollectionViewCellRegistration *v12;
  uint64_t v13;
  void *v14;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "collectionView:cellForItemAtIndexPath:itemIdentifier:", v7, v8, v9));

  if (!v11)
  {
    if (!qword_1014D25B0)
    {
      v12 = +[UICollectionViewCellRegistration registrationWithCellClass:configurationHandler:](UICollectionViewCellRegistration, "registrationWithCellClass:configurationHandler:", objc_opt_class(UICollectionViewCell), &stru_1011B78C0);
      v13 = objc_claimAutoreleasedReturnValue(v12);
      v14 = (void *)qword_1014D25B0;
      qword_1014D25B0 = v13;

    }
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "dequeueConfiguredReusableCellWithRegistration:forIndexPath:item:"));
  }

  return v11;
}

_QWORD *sub_10046DBB0(id val)
{
  _QWORD *v1;
  _QWORD v3[4];
  id v4;
  id location;

  objc_initWeak(&location, val);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10046DC3C;
  v3[3] = &unk_1011B78E8;
  objc_copyWeak(&v4, &location);
  v1 = objc_retainBlock(v3);
  objc_destroyWeak(&v4);
  objc_destroyWeak(&location);
  return v1;
}

id sub_10046DC3C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id *v6;
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  void *v11;

  v6 = (id *)(a1 + 32);
  v7 = a4;
  v8 = a3;
  v9 = a2;
  WeakRetained = objc_loadWeakRetained(v6);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "collectionView:viewForSupplementaryElementOfKind:atIndexPath:", v9, v8, v7));

  return v11;
}

id sub_10046DCCC(void *a1)
{
  id v1;
  void *v2;
  objc_class *v3;
  NSString *v4;
  void *v5;
  void *v6;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "_maps_diffableDataSourceIdentifier"));
  if (objc_msgSend(v2, "length"))
  {
    v3 = (objc_class *)objc_opt_class(v1);
    v4 = NSStringFromClass(v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.%@"), v5, v2));

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_10046ECE8(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "identifierPath"));
  if ((unint64_t)objc_msgSend(v11, "length") >= *(_QWORD *)(a1 + 40))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "identifiers"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectAtIndexedSubscript:", *(_QWORD *)(a1 + 40)));

    if (v8
      && (v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v8)),
          v9,
          !v9))
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a3));
      objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v10, v8);

    }
    else
    {
      *a4 = 1;
    }

  }
  else
  {
    *a4 = 1;
  }

}

id sub_1004701FC(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifierPath"));
  if (objc_msgSend(v2, "containsItem:", v4))
    v5 = v3;
  else
    v5 = 0;
  v6 = v5;

  return v6;
}

id sub_10047025C(id a1, MapsUIDiffableDataSourceOutlineNodeSnapshot *a2, unint64_t a3)
{
  return -[MapsUIDiffableDataSourceOutlineNodeSnapshot identifierPath](a2, "identifierPath", a3);
}

id sub_100470264(id a1, MapsUIDiffableDataSourceOutlineNodeSnapshot *a2, unint64_t a3)
{
  return -[MapsUIDiffableDataSourceOutlineNodeSnapshot identifierPath](a2, "identifierPath", a3);
}

void sub_100470B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100470B28()
{
  if (qword_1014D25C0 != -1)
    dispatch_once(&qword_1014D25C0, &stru_1011B7AE8);
  return (id)qword_1014D25B8;
}

void sub_100470B68(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  NSObject *v9;
  os_signpost_id_t v10;
  id *WeakRetained;
  id v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint8_t v17[16];

  v5 = a2;
  v6 = a3;
  v7 = sub_100470B28();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 40);
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
  {
    *(_WORD *)v17 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_INTERVAL_END, v10, "ResolvingCollection", "", v17, 2u);
  }

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (!v6)
    {
      if (objc_msgSend(v5, "count"))
      {
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
        objc_msgSend(WeakRetained, "setCuratedCollection:", v14);

        objc_msgSend(WeakRetained, "_resolveCollectionDetails");
        v6 = 0;
        goto LABEL_9;
      }
      v15 = GEOErrorDomain(0);
      v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      v6 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v16, -6, 0));

    }
    v12 = objc_loadWeakRetained(WeakRetained + 3);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "curatedCollection"));
    objc_msgSend(v12, "didFailToResolveCollectionWithError:withFetchedCollection:", v6, v13);

  }
LABEL_9:

}

void sub_1004711E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location,char a25)
{
  id *v25;

  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10047120C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10047121C(uint64_t a1)
{

}

void sub_100471224(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  id WeakRetained;
  void *v11;
  id v12;

  v12 = a3;
  v6 = a4;
  v7 = v6;
  if (v6)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v9 = v6;
    WeakRetained = *(id *)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v9;
  }
  else
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "placeCollectionItems"));
    objc_msgSend(v11, "addObjectsFromArray:", v12);

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_1004712B8(uint64_t a1)
{
  id v2;
  NSObject *v3;
  NSObject *v4;
  os_signpost_id_t v5;
  void *v6;
  id v7;
  id *v8;
  unsigned int v9;
  void *v10;
  id WeakRetained;
  void *v12;
  uint64_t v13;
  void *v14;
  uint8_t v15[16];

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
  {
    v2 = sub_100470B28();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    v4 = v3;
    v5 = *(_QWORD *)(a1 + 48);
    if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v3))
    {
      *(_WORD *)v15 = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_INTERVAL_END, v5, "ResolvingCollectionItems", "", v15, 2u);
    }

  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "placeCollectionItems"));
  v7 = objc_msgSend(v6, "count");

  v8 = *(id **)(a1 + 32);
  if (v7)
  {
    v9 = objc_msgSend(v8, "shouldResolveAppClips");
    v10 = *(void **)(a1 + 32);
    if (v9)
      objc_msgSend(v10, "_resolveAppClips");
    else
      objc_msgSend(v10, "_finishedResolvingItems");
  }
  else
  {
    WeakRetained = objc_loadWeakRetained(v8 + 3);
    v12 = *(void **)(a1 + 32);
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "curatedCollection"));
    objc_msgSend(WeakRetained, "didFailToResolveCollectionWithError:withFetchedCollection:", v13, v14);

  }
}

void sub_1004715FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100471628(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id WeakRetained;
  id v9;
  id v10;
  NSObject *v11;
  NSObject *v12;
  os_signpost_id_t v13;
  int v14;
  id v15;

  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(WeakRetained, "setMediaIntegration:", v7);

  }
  else
  {
    v9 = sub_100470B28();
    v7 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v14 = 138412290;
      v15 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "AMS did not return results, ignoring media integration. Error: %@", (uint8_t *)&v14, 0xCu);
    }
  }

  v10 = sub_100470B28();
  v11 = objc_claimAutoreleasedReturnValue(v10);
  v12 = v11;
  v13 = *(_QWORD *)(a1 + 48);
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    LOWORD(v14) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_INTERVAL_END, v13, "ResolvingMediaLink", "", (uint8_t *)&v14, 2u);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100471988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1004719AC(id a1, GEOThirdPartyLink *a2)
{
  return -[GEOThirdPartyLink adamID](a2, "adamID");
}

void sub_1004719B4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id WeakRetained;
  NSObject *v9;
  id v10;
  id v11;
  NSObject *v12;
  NSObject *v13;
  os_signpost_id_t v14;
  _QWORD v15[4];
  NSObject *v16;
  uint8_t buf[4];
  id v18;

  v5 = a2;
  v6 = a3;
  if (objc_msgSend(v5, "count"))
  {
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100471B64;
    v15[3] = &unk_1011B7A78;
    v16 = *(id *)(a1 + 32);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "_maps_compactMap:", v15));
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    objc_msgSend(WeakRetained, "setThirdPartyLinks:", v7);

    v9 = v16;
  }
  else
  {
    v10 = sub_100470B28();
    v9 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v18 = v6;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "AMS did not return results, ignoring third party links. Error: %@", buf, 0xCu);
    }
  }

  v11 = sub_100470B28();
  v12 = objc_claimAutoreleasedReturnValue(v11);
  v13 = v12;
  v14 = *(_QWORD *)(a1 + 56);
  if (v14 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v12))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_INTERVAL_END, v14, "ResolvingThirdPartyMediaLink", "", buf, 2u);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

CuratedCollectionResolvedThirdPartyLink *sub_100471B64(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  CuratedCollectionResolvedThirdPartyLink *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  CuratedCollectionResolvedThirdPartyLink *v13;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v5));

  if (v6)
  {
    v7 = [CuratedCollectionResolvedThirdPartyLink alloc];
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "adamID"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "shortName"));
    v10 = v9;
    if (!v9)
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "displayName"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "artworkURL"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "url"));
    v13 = -[CuratedCollectionResolvedThirdPartyLink initWithAdamID:appName:appIconURL:url:](v7, "initWithAdamID:appName:appIconURL:url:", v8, v10, v11, v12);

    if (!v9)
  }
  else
  {
    v13 = 0;
  }

  return v13;
}

void sub_100471F14(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;

  v3 = a2;
  dispatch_assert_queue_V2((dispatch_queue_t)&_dispatch_main_q);
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "placeCollectionItem"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "itemIdentifier"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v3, v6);

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

id sub_100471F90(uint64_t a1)
{
  id v2;
  NSObject *v3;
  NSObject *v4;
  os_signpost_id_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint8_t v10[16];

  v2 = sub_100470B28();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 48);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v3))
  {
    *(_WORD *)v10 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_INTERVAL_END, v5, "ResolvingAppClips", "", v10, 2u);
  }

  v6 = objc_msgSend(*(id *)(a1 + 40), "copy");
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(void **)(v7 + 16);
  *(_QWORD *)(v7 + 16) = v6;

  return objc_msgSend(*(id *)(a1 + 32), "_finishedResolvingItems");
}

void sub_1004723D8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CuratedCollectionResolver");
  v2 = (void *)qword_1014D25B8;
  qword_1014D25B8 = (uint64_t)v1;

}

void sub_10047468C(uint64_t a1)
{
  double v2;
  double v3;
  void *v4;
  id v5;
  int v6;
  id v7;
  void *v8;
  float v9;
  void *v10;
  double v11;
  void *v12;
  void *v13;
  double v14;
  id v15;
  double height;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const __CFString *v21;
  void *v22;
  id v23;
  int v24;
  id v25;
  void *v26;
  float v27;
  void *v28;
  double v29;
  void *v30;
  void *v31;
  double v32;
  id v33;
  id v34;

  v2 = 10.0;
  if (!*(_BYTE *)(a1 + 48))
    v2 = 0.0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "setConstant:", v2);
  v3 = -10.0;
  if (!*(_BYTE *)(a1 + 48))
    v3 = 0.0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 96), "setConstant:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_labelFont"));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "setFont:", v4);

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "layer"));
  objc_msgSend(v5, "setMasksToBounds:", 0);

  v6 = *(unsigned __int8 *)(a1 + 48);
  if (*(_BYTE *)(a1 + 48))
  {
    v7 = 0;
  }
  else
  {
    v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[UIColor blackColor](UIColor, "blackColor")));
    v7 = objc_msgSend(v5, "CGColor");
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "layer"));
  objc_msgSend(v8, "setShadowColor:", v7);

  if (!v6)
  if (*(_BYTE *)(a1 + 48))
    v9 = 0.0;
  else
    v9 = 0.1;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "layer"));
  *(float *)&v11 = v9;
  objc_msgSend(v10, "setShadowOpacity:", v11);

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "layer"));
  objc_msgSend(v12, "setShadowOffset:", 0.0, 1.0);

  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "layer"));
  objc_msgSend(v13, "setShadowRadius:", 5.0);

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "setMasksToBounds:", 0);
  if (*(_BYTE *)(a1 + 48))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "setShadowColor:", 0);
  }
  else
  {
    v15 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[UIColor blackColor](UIColor, "blackColor")));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "setShadowColor:", objc_msgSend(v15, "CGColor"));

  }
  LODWORD(v14) = 0;
  if (!*(_BYTE *)(a1 + 48))
    *(float *)&v14 = 0.1;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "setShadowOpacity:", v14);
  height = CGSizeZero.height;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "setShadowOffset:", CGSizeZero.width, height);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "setShadowRadius:", 10.0);
  objc_msgSend(*(id *)(a1 + 32), "updateTheme");
  if (objc_msgSend(*(id *)(a1 + 40), "length"))
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "setText:", *(_QWORD *)(a1 + 40));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "font"));
  if (*(_BYTE *)(a1 + 48))
    v18 = 3;
  else
    v18 = 2;
  if (*(_BYTE *)(a1 + 48))
    v19 = 7;
  else
    v19 = 6;
  v34 = v17;
  objc_msgSend(v17, "pointSize");
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[UIImageSymbolConfiguration configurationWithPointSize:weight:scale:](UIImageSymbolConfiguration, "configurationWithPointSize:weight:scale:", v19, v18));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "setPreferredSymbolConfiguration:", v20);

  if (*(_BYTE *)(a1 + 48))
    v21 = CFSTR("chevron.forward.circle.fill");
  else
    v21 = CFSTR("chevron.forward");
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage systemImageNamed:](UIImage, "systemImageNamed:", v21));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "setImage:", v22);

  v23 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "layer"));
  objc_msgSend(v23, "setMasksToBounds:", 0);

  v24 = *(unsigned __int8 *)(a1 + 48);
  if (*(_BYTE *)(a1 + 48))
  {
    v25 = 0;
  }
  else
  {
    v23 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[UIColor blackColor](UIColor, "blackColor")));
    v25 = objc_msgSend(v23, "CGColor");
  }
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "layer"));
  objc_msgSend(v26, "setShadowColor:", v25);

  if (!v24)
  if (*(_BYTE *)(a1 + 48))
    v27 = 0.0;
  else
    v27 = 0.1;
  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "layer"));
  *(float *)&v29 = v27;
  objc_msgSend(v28, "setShadowOpacity:", v29);

  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "layer"));
  objc_msgSend(v30, "setShadowOffset:", 0.0, 1.0);

  v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "layer"));
  objc_msgSend(v31, "setShadowRadius:", 5.0);

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "setMasksToBounds:", 0);
  if (*(_BYTE *)(a1 + 48))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "setShadowColor:", 0);
  }
  else
  {
    v33 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[UIColor blackColor](UIColor, "blackColor")));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "setShadowColor:", objc_msgSend(v33, "CGColor"));

  }
  LODWORD(v32) = 0;
  if (!*(_BYTE *)(a1 + 48))
    *(float *)&v32 = 0.1;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "setShadowOpacity:", v32);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "setShadowOffset:", CGSizeZero.width, height);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "setShadowRadius:", 10.0);

}

id sub_100474B4C(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "setText:", *(_QWORD *)(a1 + 40));
}

id sub_100474CB4(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "setActive:", *(_BYTE *)(a1 + 40) == 0);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "setActive:", *(unsigned __int8 *)(a1 + 40));
}

id sub_1004755E8()
{
  if (qword_1014D25D8 != -1)
    dispatch_once(&qword_1014D25D8, &stru_1011B7B08);
  return (id)qword_1014D25D0;
}

void sub_100475F34(uint64_t a1)
{
  id WeakRetained;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v6 = WeakRetained;
    v3 = *(_QWORD *)(a1 + 40);
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[MKLocationManager sharedLocationManager](MKLocationManager, "sharedLocationManager"));
    v5 = v4;
    if (v3 == 1)
      objc_msgSend(v4, "startLocationUpdateWithObserver:", v6);
    else
      objc_msgSend(v4, "stopLocationUpdateWithObserver:", v6);

    WeakRetained = v6;
  }

}

void sub_100476114(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFVIOSessionDistanceMonitor");
  v2 = (void *)qword_1014D25D0;
  qword_1014D25D0 = (uint64_t)v1;

}

void sub_100476DFC(uint64_t a1, void *a2)
{
  id v3;

  if (objc_msgSend(a2, "count"))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 168), "addObject:", &off_10126D558);
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView"));
    objc_msgSend(v3, "reloadData");

  }
}

void sub_100478474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id location,char a33)
{
  id *v33;

  objc_destroyWeak(v33);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1004784A4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1004784B4(uint64_t a1)
{

}

void sub_1004784BC(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[6];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (WeakRetained)
  {
    v3 = *(void **)(a1 + 32);
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[SectionHeaderCollectionReusableView reuseIdentifier](SectionHeaderCollectionReusableView, "reuseIdentifier"));
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath:", UICollectionElementKindSectionHeader, v4, *(_QWORD *)(a1 + 40)));
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

    v8 = (void *)objc_claimAutoreleasedReturnValue(+[SectionHeaderCollectionReusableView reuseIdentifier](SectionHeaderCollectionReusableView, "reuseIdentifier"));
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "setAccessibilityIdentifier:", v8);

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "string"));
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "setTitle:", v9);

    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "setShowsBottomHairline:", 0);
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "setFirstNonEmptySection:", *(_QWORD *)(a1 + 48) != 0);
    if (*(_QWORD *)(a1 + 48))
    {
      v10 = *(_QWORD *)(a1 + 80) - 2;
      if (v10 <= 2)
      {
        if (*(_BYTE *)(*(_QWORD *)(a1 + 56) + *(&off_1011B7BC8)[v10]))
        {
          v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "localizedStringForKey:value:table:", CFSTR("More [RAP In Review Section]"), CFSTR("localized string not found"), 0));

          v13 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
          v15[0] = _NSConcreteStackBlock;
          v15[1] = 3221225472;
          v15[2] = sub_1004786B4;
          v15[3] = &unk_1011AD518;
          v14 = *(_QWORD *)(a1 + 80);
          v15[4] = WeakRetained;
          v15[5] = v14;
          objc_msgSend(v13, "setActionTitle:completionHandler:", v12, v15);

        }
      }
    }
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "setNeedsLayout");
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "layoutIfNeeded");
  }

}

id sub_1004786B4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "seeAllTappedForReportForSection:", *(_QWORD *)(a1 + 40));
}

id sub_1004786C0(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  objc_class *v5;
  NSString *v6;
  void *v7;
  void *v8;
  UserProfileSectionFooterViewModel *v9;
  id v10;
  _BOOL8 v11;
  char *v12;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (objc_class *)objc_opt_class(UserProfileSectionFooterView);
  v6 = NSStringFromClass(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath:", UICollectionElementKindSectionFooter, v7, *(_QWORD *)(a1 + 40)));

  v9 = -[UserProfileSectionFooterViewModel initWithContentString:]([UserProfileSectionFooterViewModel alloc], "initWithContentString:", v4);
  v10 = objc_msgSend(v4, "length");

  if (v10)
  {
    v11 = 0;
  }
  else
  {
    v12 = (char *)objc_msgSend(*(id *)(a1 + 32), "numberOfSections");
    v11 = v12 != (char *)objc_msgSend(*(id *)(a1 + 40), "section") + 1;
  }
  -[UserProfileSectionFooterViewModel setCollapsed:](v9, "setCollapsed:", v11);
  if (!*(_QWORD *)(a1 + 56))
  {
    -[UserProfileSectionFooterViewModel setContainsLink:](v9, "setContainsLink:", 1);
    -[UserProfileSectionFooterViewModel setTarget:](v9, "setTarget:", *(_QWORD *)(a1 + 48));
    -[UserProfileSectionFooterViewModel setAction:](v9, "setAction:", "privacyTextTapped");
  }
  objc_msgSend(v8, "configureWithViewModel:", v9);
  objc_msgSend(v8, "setNeedsLayout");
  objc_msgSend(v8, "layoutIfNeeded");

  return v8;
}

id sub_10047904C(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v9[4];
  id v10;

  v2 = objc_alloc_init((Class)NSMutableArray);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "reportID"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("'%@'"), v3));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage systemImageNamed:](UIImage, "systemImageNamed:", CFSTR("doc.on.doc")));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100479184;
  v9[3] = &unk_1011B2810;
  v10 = *(id *)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIAction actionWithTitle:image:identifier:handler:](UIAction, "actionWithTitle:image:identifier:handler:", v4, v5, 0, v9));
  objc_msgSend(v2, "addObject:", v6);

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[UIMenu menuWithChildren:](UIMenu, "menuWithChildren:", v2));
  return v7;
}

void sub_100479184(uint64_t a1)
{
  void *v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "reportID"));
  if (objc_msgSend(v2, "length"))
  {
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIPasteboard generalPasteboard](UIPasteboard, "generalPasteboard"));
    objc_msgSend(v1, "setString:", v2);

  }
}

id sub_1004799E8()
{
  if (qword_1014D25E8 != -1)
    dispatch_once(&qword_1014D25E8, &stru_1011B7D08);
  return (id)qword_1014D25E0;
}

NSString *__cdecl sub_100479A28(id a1, GEOComposedRoute *a2, unint64_t a3)
{
  void *v3;
  void *v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(-[GEOComposedRoute uniqueRouteID](a2, "uniqueRouteID", a3));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "UUIDString"));

  return (NSString *)v4;
}

GEOComposedRoute *__cdecl sub_100479A64(id a1, NSArray *a2, GEOComposedRoute *a3)
{
  NSArray *v4;
  id v5;
  void *v6;
  void *v7;

  v4 = a2;
  v5 = sub_100479D78((uint64_t)v4, v4, a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (!v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray sortedArrayUsingComparator:](v4, "sortedArrayUsingComparator:", &stru_1011B7C98));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "firstObject"));

  }
  return (GEOComposedRoute *)v6;
}

int64_t sub_100479AD8(id a1, GEOComposedRoute *a2, GEOComposedRoute *a3)
{
  GEOComposedRoute *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", -[GEOComposedRoute expectedTime](a2, "expectedTime")));
  v6 = -[GEOComposedRoute expectedTime](v4, "expectedTime");

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v6));
  v8 = objc_msgSend(v5, "compare:", v7);

  return (int64_t)v8;
}

_QWORD *sub_100479B6C(void *a1)
{
  id v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD v5[4];
  id v6;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100479BF8;
  v5[3] = &unk_1011B7CE8;
  v6 = a1;
  v1 = v6;
  v2 = objc_retainBlock(v5);
  v3 = objc_retainBlock(v2);

  return v3;
}

id sub_100479BF8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  _QWORD v10[4];
  id v11;

  v5 = a2;
  v6 = sub_100479D78((uint64_t)v5, v5, a3);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  if (!v7)
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100479CB4;
    v10[3] = &unk_1011B7CC0;
    v11 = *(id *)(a1 + 32);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "sortedArrayUsingComparator:", v10));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "firstObject"));

  }
  return v7;
}

id sub_100479CB4(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "displayETAInfoForRoute:", a2));
  v8 = objc_msgSend(v7, "displayRemainingMinutesToEndOfRoute");

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "displayETAInfoForRoute:", v6));
  v10 = objc_msgSend(v9, "displayRemainingMinutesToEndOfRoute");

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v8));
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v10));
  v13 = objc_msgSend(v11, "compare:", v12);

  return v13;
}

id sub_100479D78(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  id v6;
  void *v7;

  v4 = a2;
  v5 = a3;
  if (v5 && (v6 = objc_msgSend(v4, "indexOfObject:", v5), v6 != (id)0x7FFFFFFFFFFFFFFFLL))
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectAtIndexedSubscript:", ((unint64_t)v6 + 1) % (unint64_t)objc_msgSend(v4, "count")));
  else
    v7 = 0;

  return v7;
}

void sub_100479E00(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "RouteAnnotationsResponder");
  v2 = (void *)qword_1014D25E0;
  qword_1014D25E0 = (uint64_t)v1;

}

void sub_10047A6C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *a9, uint64_t a10, id *location)
{
  uint64_t v11;

  objc_destroyWeak(location);
  objc_destroyWeak(a9);
  objc_destroyWeak((id *)(v11 - 216));
  _Unwind_Resume(a1);
}

void sub_10047A6F0(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_invokeSelectionWithSourceType:", 1);
    WeakRetained = v2;
  }

}

void sub_10047A724(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_invokeSelectionWithSourceType:", 2);
    WeakRetained = v2;
  }

}

id sub_10047B314(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "isEqualivantToKey:", *(_QWORD *)(a1 + 32));
}

void sub_10047CD7C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 112));
  objc_msgSend(WeakRetained, "popContainee");

}

void sub_10047CDB4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 112));
  objc_msgSend(WeakRetained, "pushContainee");

}

void sub_10047CDEC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 112));
  objc_msgSend(WeakRetained, "popContext");

}

void sub_10047CE24(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 112));
  objc_msgSend(WeakRetained, "pushContext");

}

void sub_10047CE5C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 112));
  objc_msgSend(WeakRetained, "pushContextWithFloatingControls:", 0);

}

void sub_10047CE98(id a1, UIButton *a2, unint64_t a3, BOOL *a4)
{
  UIButton *v4;
  void *v5;
  id v6;

  v4 = a2;
  -[UIButton _setContinuousCornerRadius:](v4, "_setContinuousCornerRadius:", 8.0);
  -[UIButton setClipsToBounds:](v4, "setClipsToBounds:", 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor whiteColor](UIColor, "whiteColor"));
  -[UIButton setBackgroundColor:](v4, "setBackgroundColor:", v5);

  v6 = (id)objc_claimAutoreleasedReturnValue(-[UIButton titleLabel](v4, "titleLabel"));
  objc_msgSend(v6, "setNumberOfLines:", 2);

}

id sub_10047CF1C(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;

  v2 = objc_msgSend(objc_alloc((Class)UILabel), "initWithFrame:", CGRectZero.origin.x, CGRectZero.origin.y, CGRectZero.size.width, CGRectZero.size.height);
  objc_msgSend(v2, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor whiteColor](UIColor, "whiteColor"));
  objc_msgSend(v2, "setTextColor:", v3);

  objc_msgSend(v2, "setTextAlignment:", 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont boldSystemFontOfSize:](UIFont, "boldSystemFontOfSize:", 17.0));
  objc_msgSend(v2, "setFont:", v4);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "title"));
  objc_msgSend(v2, "setText:", v5);

  LODWORD(v6) = 1148846080;
  objc_msgSend(v2, "setContentHuggingPriority:forAxis:", 1, v6);
  LODWORD(v7) = 1148846080;
  objc_msgSend(v2, "setContentCompressionResistancePriority:forAxis:", 1, v7);
  return v2;
}

void sub_10047D018(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "heightAnchor"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "constraintGreaterThanOrEqualToConstant:", 40.0));
  objc_msgSend(v2, "addObject:", v3);

}

void sub_10047D074(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "heightAnchor"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "constraintGreaterThanOrEqualToConstant:", 40.0));
  objc_msgSend(v2, "addObject:", v3);

}

void sub_10047E11C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10047E13C(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "presentingViewController"));
  objc_msgSend(v1, "dismissViewControllerAnimated:completion:", 1, 0);

}

void sub_10047E32C(id a1, MapsDebugTableSection *a2)
{
  id v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  MapsDebugTableSection *v8;

  v8 = a2;
  v2 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v8, "addButtonRowWithTitle:action:", CFSTR("Refresh Experiments Config"), &stru_1011B7DD8);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[GEOExperimentConfiguration sharedConfiguration](GEOExperimentConfiguration, "sharedConfiguration"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "_debug_configurationDate"));

  if (v4)
  {
    v5 = objc_alloc_init((Class)NSDateFormatter);
    objc_msgSend(v5, "setDateStyle:", 1);
    objc_msgSend(v5, "setTimeStyle:", 2);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "stringFromDate:", v4));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Last updated: %@"), v6));
    -[MapsDebugTableSection setFooter:](v8, "setFooter:", v7);

  }
}

void sub_10047E418(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[GEOExperimentConfiguration sharedConfiguration](GEOExperimentConfiguration, "sharedConfiguration"));
  objc_msgSend(v1, "_debug_forceUpdate");

}

void sub_10047E44C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  _QWORD v10[4];
  id v11;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_debug_datasetId"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Dataset Id: %@"), v4));
  v6 = objc_msgSend(v3, "addEmptySectionBannerRowWithTitle:", v5);

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10047E574;
  v10[3] = &unk_1011B4F08;
  v11 = *(id *)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10047E5B0;
  v8[3] = &unk_1011AE420;
  v9 = *(id *)(a1 + 32);
  v7 = objc_msgSend(v3, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Bucket Id:"), 0, 1, v10, v8);

}

id sub_10047E574(uint64_t a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_debug_bucketId"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "stringValue"));

  return v2;
}

void sub_10047E5B0(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  const __CFString *v7;
  void *v8;

  if (a2)
  {
    v2 = *(void **)(a1 + 32);
    v7 = CFSTR("bucketId");
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(a2, "integerValue")));
    v8 = v3;
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v8, &v7, 1));
    objc_msgSend(v2, "_debug_setBucketIdDictionaryRepresentation:", v4);

    v5 = (void *)objc_claimAutoreleasedReturnValue(+[GEOMapService sharedService](GEOMapService, "sharedService"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ticketForDatasetCheckWithTraits:", 0));

    objc_msgSend(v6, "submitWithHandler:networkActivity:", &stru_1011B7DF8, &stru_1011B7E18);
  }
}

void sub_10047E6C0(id a1, MapsDebugTableSection *a2)
{
  id v2;
  MapsDebugTableSection *v3;

  v3 = a2;
  v2 = -[MapsDebugTableSection addNavigationRowForViewControllerClass:](v3, "addNavigationRowForViewControllerClass:", objc_opt_class(_AvailableExperimentsDebugController));

}

id sub_10047E704(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  void *v4;
  _QWORD v6[5];
  int v7;

  v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10047E76C;
  v6[3] = &unk_1011B7E98;
  v6[4] = a2;
  v7 = a3;
  return objc_msgSend(v4, "addSectionWithTitle:content:", a4, v6);
}

id sub_10047E76C(uint64_t a1, void *a2)
{
  _QWORD v3[5];
  int v4;
  _QWORD v5[4];
  uint64_t v6;
  int v7;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10047E808;
  v5[3] = &unk_1011B7E58;
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_DWORD *)(a1 + 40);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10047E854;
  v3[3] = &unk_1011B7E78;
  v3[4] = v6;
  v4 = v7;
  return objc_msgSend(a2, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", 0, 0, 0, v5, v3);
}

id sub_10047E808(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[GEOExperimentConfiguration sharedConfiguration](GEOExperimentConfiguration, "sharedConfiguration"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_debug_customQuerySubstringForType:dispatcherRequestType:", *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40)));

  return v3;
}

void sub_10047E854(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  v4 = (id)objc_claimAutoreleasedReturnValue(+[GEOExperimentConfiguration sharedConfiguration](GEOExperimentConfiguration, "sharedConfiguration"));
  objc_msgSend(v4, "_debug_setCustomQuerySubstring:forExperimentType:dispatcherRequestType:", v3, *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));

}

void sub_10047E988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10047E9AC(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10047EA50;
  v5[3] = &unk_1011AD1E8;
  objc_copyWeak(&v7, (id *)(a1 + 32));
  v6 = v3;
  v4 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v5);

  objc_destroyWeak(&v7);
}

void sub_10047EA50(uint64_t a1)
{
  id *WeakRetained;
  id *v3;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_storeStrong(WeakRetained + 11, *(id *)(a1 + 32));
    objc_msgSend(v3, "rebuildSections");
    WeakRetained = v3;
  }

}

void sub_10047EB34(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  void *j;
  id v16;
  id obj;
  id v18;
  _QWORD v19[5];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  _BYTE v29[128];

  v18 = a2;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  obj = *(id *)(a1 + 32);
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v25;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v25 != v5)
          objc_enumerationMutation(obj);
        v7 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)i);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "name"));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "identifier"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ (%@)"), v8, v9));

        v22 = 0u;
        v23 = 0u;
        v20 = 0u;
        v21 = 0u;
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "branches"));
        v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
        if (v12)
        {
          v13 = v12;
          v14 = *(_QWORD *)v21;
          while (2)
          {
            for (j = 0; j != v13; j = (char *)j + 1)
            {
              if (*(_QWORD *)v21 != v14)
                objc_enumerationMutation(v11);
              if ((objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)j), "isActive") & 1) != 0)
              {

                v11 = v10;
                v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("🔵 %@"), v10));
                goto LABEL_16;
              }
            }
            v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
            if (v13)
              continue;
            break;
          }
        }
LABEL_16:

        v19[0] = _NSConcreteStackBlock;
        v19[1] = 3221225472;
        v19[2] = sub_10047EDA0;
        v19[3] = &unk_1011B7F10;
        v19[4] = v7;
        v16 = objc_msgSend(v18, "addNavigationRowWithTitle:viewControllerContent:", v10, v19);

      }
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
    }
    while (v4);
  }

}

id sub_10047EDA0(uint64_t a1, void *a2)
{
  _QWORD v3[5];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10047EE08;
  v3[3] = &unk_1011B4BC0;
  v3[4] = *(_QWORD *)(a1 + 32);
  return objc_msgSend(a2, "addSectionWithTitle:content:", CFSTR("Branches"), v3);
}

void sub_10047EE08(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  id obj;
  _QWORD v15[5];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];

  v3 = a2;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "branches"));
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v17;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v17 != v6)
          objc_enumerationMutation(obj);
        v8 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)i);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "name"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "label"));
        v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ (%@)"), v9, v10));

        if (objc_msgSend(v8, "isActive"))
        {
          v12 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("🔵 %@"), v11));

          v11 = (void *)v12;
        }
        v15[0] = _NSConcreteStackBlock;
        v15[1] = 3221225472;
        v15[2] = sub_10047EFE4;
        v15[3] = &unk_1011B7F10;
        v15[4] = v8;
        v13 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", v11, v15);

      }
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v5);
  }

}

void sub_10047EFE4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  _QWORD v9[4];
  id v10;
  _QWORD v11[5];
  id v12;
  _QWORD v13[5];

  v3 = a2;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10047F12C;
  v13[3] = &unk_1011B4BC0;
  v13[4] = *(_QWORD *)(a1 + 32);
  v4 = objc_msgSend(v3, "addSectionWithTitle:content:", 0, v13);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[GEOExperimentConfiguration sharedConfiguration](GEOExperimentConfiguration, "sharedConfiguration"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10047F214;
  v11[3] = &unk_1011B7EE8;
  v11[4] = *(_QWORD *)(a1 + 32);
  v6 = v3;
  v12 = v6;
  objc_msgSend(v5, "_debug_forEachExperimentType:", v11);

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientConfigValues"));
  if (objc_msgSend(v7, "count"))
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10047F2F4;
    v9[3] = &unk_1011B4BC0;
    v10 = v7;
    v8 = objc_msgSend(v6, "addSectionWithTitle:content:", CFSTR("Client Keys"), v9);

  }
}

id sub_10047F12C(uint64_t a1, void *a2)
{
  _QWORD v3[5];
  _QWORD v4[4];
  uint64_t v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10047F1B8;
  v4[3] = &unk_1011AEB50;
  v5 = *(_QWORD *)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10047F1C0;
  v3[3] = &unk_1011AE8F8;
  v3[4] = v5;
  return objc_msgSend(a2, "addSwitchRowWithTitle:get:set:", CFSTR("Active"), v4, v3);
}

id sub_10047F1B8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "isActive");
}

void sub_10047F1C0(uint64_t a1, int a2)
{
  void *v4;
  uint64_t v5;
  id v6;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GEOExperimentConfiguration sharedConfiguration](GEOExperimentConfiguration, "sharedConfiguration"));
  if (a2)
    v5 = *(_QWORD *)(a1 + 32);
  else
    v5 = 0;
  v6 = v4;
  objc_msgSend(v4, "_debug_setActiveExperimentBranch:", v5);

}

void sub_10047F214(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;

  v7 = a4;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "querySubstringForType:dispatcherRequestType:", a2, a3));
  if (objc_msgSend(v8, "length"))
  {
    v9 = *(void **)(a1 + 40);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10047F2D0;
    v11[3] = &unk_1011B4BC0;
    v12 = v8;
    v10 = objc_msgSend(v9, "addSectionWithTitle:content:", v7, v11);

  }
}

id sub_10047F2D0(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "addEmptySectionBannerRowWithTitle:", *(_QWORD *)(a1 + 32));
}

void sub_10047F2F4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  id obj;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  v3 = a2;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  obj = *(id *)(a1 + 32);
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v14 != v6)
          objc_enumerationMutation(obj);
        v8 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v8));
        v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ = %@"), v8, v9));

        v11 = objc_msgSend(v3, "addEmptySectionBannerRowWithTitle:", v10);
      }
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v5);
  }

}

void sub_10047F634(uint64_t a1, void *a2, _BYTE *a3)
{
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "values", 0));
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v11;
LABEL_3:
    v9 = 0;
    while (1)
    {
      if (*(_QWORD *)v11 != v8)
        objc_enumerationMutation(v5);
      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
      if (*a3)
        break;
      if (v7 == (id)++v9)
      {
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
        if (v7)
          goto LABEL_3;
        break;
      }
    }
  }

}

void sub_10047F93C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10047F954(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10047F964(uint64_t a1)
{

}

id sub_10047F96C(uint64_t a1, void *a2, uint64_t a3)
{
  _QWORD v4[6];

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10047F9C8;
  v4[3] = &unk_1011B7F60;
  v4[4] = *(_QWORD *)(a1 + 32);
  v4[5] = a3;
  return objc_msgSend(a2, "enumerateValidComponentValuesOfType:usingBlock:", 7, v4);
}

void sub_10047F9C8(uint64_t a1, void *a2, BOOL *a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  BOOL *v8;

  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "photoAttributionPreferences"));
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  v8 = *(BOOL **)(a1 + 40);
  *a3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) != 0;
  *v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) != 0;
}

void sub_10047FAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10047FB08(uint64_t a1, void *a2, uint64_t a3)
{
  _QWORD v4[6];

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10047FB64;
  v4[3] = &unk_1011B7F60;
  v4[4] = *(_QWORD *)(a1 + 32);
  v4[5] = a3;
  return objc_msgSend(a2, "enumerateValidComponentValuesOfType:usingBlock:", 6, v4);
}

void sub_10047FB64(uint64_t a1, void *a2, BOOL *a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  BOOL *v8;

  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "thirdPartyPhotoSharingPreferences"));
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  v8 = *(BOOL **)(a1 + 40);
  *a3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) != 0;
  *v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) != 0;
}

void sub_100482158(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "window"));
  objc_msgSend(v2, "setRootViewController:", 0);

  v3 = *(_QWORD *)(a1 + 48);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "lockScreenWindow"));
  objc_msgSend(v4, "setRootViewController:", v3);

}

void sub_1004824B0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lockScreenWindow"));
  objc_msgSend(v2, "setRootViewController:", 0);

  objc_msgSend(*(id *)(a1 + 32), "setLockScreenWindow:", 0);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "window"));
  objc_msgSend(v4, "setRootViewController:", v3);

}

void sub_1004827CC(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lockScreenWindow"));
  objc_msgSend(v2, "setRootViewController:", v1);

}

BOOL sub_10048286C()
{
  void *v0;
  id v1;
  uint64_t BOOL;
  uint64_t Log;
  NSObject *v4;
  char *v5;
  id v6;
  void *v7;
  id v8;
  uint8_t buf[4];
  char *v12;
  __int16 v13;
  id v14;

  if (qword_1014D25F0 != -1)
    dispatch_once(&qword_1014D25F0, &stru_1011B7FA8);
  if (!byte_1014AAAE8)
    return 0;
  v0 = (void *)objc_claimAutoreleasedReturnValue(+[UIDevice currentDevice](UIDevice, "currentDevice"));
  v1 = objc_msgSend(v0, "userInterfaceIdiom");

  if (v1 == (id)1)
  {
    BOOL = GEOConfigGetBOOL(MapsConfig_EnableRideSharingiPad, off_1014B2EF8);
    Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
    v4 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/Utils/RideBookingUtils.m");
      v6 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("isRidebookingOverridenOniPad: %d"), BOOL);
      *(_DWORD *)buf = 136315394;
      v12 = v5;
      v13 = 2112;
      v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

    }
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[UIDevice currentDevice](UIDevice, "currentDevice"));
    v8 = objc_msgSend(v7, "userInterfaceIdiom");

    return v8 != (id)5 && byte_1014AAAE8 != 0;
  }
  return BOOL;
}

void sub_100482A14(id a1)
{
  byte_1014AAAE8 = GEOConfigGetBOOL(MapsConfig_RideBookingIsEnabled, off_1014B3128);
}

NSUUID *__cdecl sub_100482D28(id a1, GEOComposedRoute *a2, unint64_t a3)
{
  return (NSUUID *)-[GEOComposedRoute uniqueRouteID](a2, "uniqueRouteID", a3);
}

GEOTransitRouteUpdateRequest *__cdecl sub_100482D30(id a1, GEOComposedRoute *a2, unint64_t a3)
{
  return (GEOTransitRouteUpdateRequest *)-[GEOComposedRoute transitRouteUpdateRequest](a2, "transitRouteUpdateRequest", a3);
}

void sub_100482E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100482EB4(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) != 0;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
  {
    v2 = objc_msgSend(*(id *)(a1 + 40), "copy");
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(v3 + 8);
    *(_QWORD *)(v3 + 8) = v2;

  }
}

void sub_100482FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100482FF8(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) == 0;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
  {
    v1 = *(_QWORD *)(a1 + 32);
    v2 = *(void **)(v1 + 8);
    *(_QWORD *)(v1 + 8) = 0;

  }
}

void sub_100483094(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  int v11;
  uint64_t v12;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40))
  {
    v2 = sub_10043214C();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
      v11 = 138412290;
      v12 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Pausing realtime updates in private route updater for routes: %@", (uint8_t *)&v11, 0xCu);
    }

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "setActive:", 0);
  }
  else
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[MNNavigationService sharedService](MNNavigationService, "sharedService"));
    v6 = objc_msgSend(v5, "state");

    if (v6 == (id)2)
    {
      v7 = sub_10043214C();
      v8 = objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
        v11 = 138412290;
        v12 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Pausing realtime updates in navd for routes: %@", (uint8_t *)&v11, 0xCu);
      }

      v10 = (void *)objc_claimAutoreleasedReturnValue(+[MNNavigationService sharedService](MNNavigationService, "sharedService"));
      objc_msgSend(v10, "pauseRealtimeUpdates");

    }
  }
}

void sub_100483254(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  int v11;
  uint64_t v12;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40))
  {
    v2 = sub_10043214C();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
      v11 = 138412290;
      v12 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Resuming realtime updates in private route updater for routes: %@", (uint8_t *)&v11, 0xCu);
    }

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "setActive:", 1);
  }
  else
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[MNNavigationService sharedService](MNNavigationService, "sharedService"));
    v6 = objc_msgSend(v5, "state");

    if (v6 == (id)2)
    {
      v7 = sub_10043214C();
      v8 = objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
        v11 = 138412290;
        v12 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Resuming realtime updates in navd for routes: %@", (uint8_t *)&v11, 0xCu);
      }

      v10 = (void *)objc_claimAutoreleasedReturnValue(+[MNNavigationService sharedService](MNNavigationService, "sharedService"));
      objc_msgSend(v10, "resumeRealtimeUpdates");

    }
  }
}

void sub_100483614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

NSUUID *__cdecl sub_100483634(id a1, GEOComposedRoute *a2, unint64_t a3)
{
  return (NSUUID *)-[GEOComposedRoute uniqueRouteID](a2, "uniqueRouteID", a3);
}

uint64_t sub_10048363C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10048364C(uint64_t a1)
{

}

void sub_100483654(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "copy");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_100483760(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  int v7;
  uint64_t v8;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40))
  {
    v2 = sub_10043214C();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
      v7 = 138412290;
      v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Destroying private route updater to observe navd for routes: %@", (uint8_t *)&v7, 0xCu);
    }

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "setActive:", 0);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = 0;

  }
}

void sub_10048389C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  int v10;
  uint64_t v11;

  if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40))
  {
    v2 = sub_10043214C();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
      v10 = 138412290;
      v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Creating private route updater for routes: %@", (uint8_t *)&v10, 0xCu);
    }

    v5 = objc_msgSend(objc_alloc((Class)GEOTransitRouteUpdater), "initWithDelegate:andInitialTTL:", *(_QWORD *)(a1 + 32), 15.0);
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "setRequests:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24));
    v8 = *(_QWORD *)(a1 + 32);
    if (*(_QWORD *)(v8 + 8))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[MKApplicationStateMonitor sharedInstance](MKApplicationStateMonitor, "sharedInstance"));
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "setActive:", objc_msgSend(v9, "isInBackground") ^ 1);

    }
    else
    {
      objc_msgSend(*(id *)(v8 + 40), "setActive:", 0);
    }
  }
}

void sub_100483D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

id sub_100483DA8(uint64_t a1, uint64_t a2)
{
  id result;

  result = objc_retainBlock(*(id *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_100483DD0(uint64_t a1)
{

}

void sub_100483DD8(_QWORD *a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;

  v2 = objc_msgSend(*(id *)(a1[4] + 16), "copy");
  v3 = *(_QWORD *)(a1[5] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  v5 = objc_retainBlock(*(id *)(a1[4] + 8));
  v6 = *(_QWORD *)(a1[6] + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

}

void sub_10048418C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

void sub_1004841CC(_QWORD *a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;

  v2 = objc_msgSend(*(id *)(a1[4] + 16), "copy");
  v3 = *(_QWORD *)(a1[5] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  v5 = objc_retainBlock(*(id *)(a1[4] + 8));
  v6 = *(_QWORD *)(a1[6] + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

}

void sub_10048431C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  _QWORD v12[4];
  id v13;
  id v14;

  v5 = a2;
  v6 = a3;
  v7 = objc_opt_class(RAPSearchRecording);
  if ((objc_opt_isKindOfClass(v5, v7) & 1) != 0)
    v8 = v5;
  else
    v8 = 0;
  v9 = v8;
  if (v9)
  {
    v10 = objc_alloc_init((Class)GEORPCorrectedSearch);
    objc_msgSend(*(id *)(a1 + 32), "applyToCorrectedSearch:", v10);
    objc_msgSend(v9, "setCorrectedSearchTemplate:", v10);
    v11 = *(_QWORD *)(a1 + 40);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100484430;
    v12[3] = &unk_1011B80A0;
    v13 = v9;
    v14 = v6;
    +[RAPAuxiliaryControlsRecorder fetchCurrentlyConnectedControlsRecordingOrigin:completion:](RAPAuxiliaryControlsRecorder, "fetchCurrentlyConnectedControlsRecordingOrigin:completion:", v11, v12);

  }
}

void sub_100484430(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  id v5;

  v5 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "auxiliaryControls"));
  v4 = objc_msgSend(v3, "mutableCopy");
  objc_msgSend(*(id *)(a1 + 32), "setAuxiliaryControls:", v4);

  if (objc_msgSend(v5, "hasOriginatingAuxiliaryControlIndex"))
    objc_msgSend(*(id *)(a1 + 32), "setOriginatingAuxiliaryControlIndex:", objc_msgSend(v5, "originatingAuxiliaryControlIndex"));
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_10048477C(id a1)
{
  MacPlacePhotoViewerScene *v1;
  void *v2;

  v1 = objc_alloc_init(MacPlacePhotoViewerScene);
  v2 = (void *)qword_1014D2600;
  qword_1014D2600 = (uint64_t)v1;

}

id sub_100485870(void *a1)
{
  id v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  _QWORD v27[4];

  v1 = a1;
  v2 = objc_msgSend(objc_alloc((Class)UIView), "initWithFrame:", CGRectZero.origin.x, CGRectZero.origin.y, CGRectZero.size.width, CGRectZero.size.height);
  objc_msgSend(v2, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemBackgroundColor](UIColor, "systemBackgroundColor"));
  objc_msgSend(v2, "setBackgroundColor:", v3);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "traitCollection"));
  +[UISegmentedControl _cornerRadiusForTraitCollection:size:](UISegmentedControl, "_cornerRadiusForTraitCollection:size:", v4, 0);
  objc_msgSend(v2, "_setContinuousCornerRadius:");

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  objc_msgSend(v5, "nativeScale");
  v7 = 1.0 / v6;

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "layer"));
  objc_msgSend(v8, "setBorderWidth:", v7);

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "theme"));
  v10 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "hairlineColor")));
  v11 = objc_msgSend(v10, "CGColor");
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "layer"));
  objc_msgSend(v12, "setBorderColor:", v11);

  objc_msgSend(v1, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v2, "addSubview:", v1);
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "leadingAnchor"));
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "leadingAnchor"));
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "constraintEqualToAnchor:constant:", v25, 9.0));
  v27[0] = v24;
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "trailingAnchor"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "trailingAnchor"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "constraintEqualToAnchor:constant:", v13, -9.0));
  v27[1] = v14;
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "topAnchor"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "topAnchor"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "constraintEqualToAnchor:constant:", v16, 9.0));
  v27[2] = v17;
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "bottomAnchor"));

  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "bottomAnchor"));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "constraintEqualToAnchor:constant:", v19, -9.0));
  v27[3] = v20;
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v27, 4));
  +[NSLayoutConstraint activateConstraints:](NSLayoutConstraint, "activateConstraints:", v21);

  return v2;
}

BOOL sub_1004872F8(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  id v12;
  uint64_t String;
  uint64_t v14;
  _QWORD v16[2];

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      v4 = 0;
      v5 = 0;
      v6 = 0;
      while (1)
      {
        v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0)
          goto LABEL_11;
        v4 += 7;
        if (v5++ >= 9)
        {
          v6 = 0;
          v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v6 = 0;
LABEL_13:
      if (v10 || (v6 & 7) == 4)
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      if ((v6 >> 3) == 2)
        break;
      if ((v6 >> 3) == 1)
      {
        v12 = objc_alloc_init((Class)GEOComposedWaypoint);
        objc_storeStrong((id *)(a1 + 16), v12);
        v16[0] = 0;
        v16[1] = 0;
        if (!PBReaderPlaceMark(a2, v16) || (objc_msgSend(v12, "readFrom:", a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark(a2, v16);
        goto LABEL_23;
      }
      if ((PBReaderSkipValueWithTag(a2) & 1) == 0)
        return 0;
LABEL_25:
      if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    String = PBReaderReadString(a2);
    v14 = objc_claimAutoreleasedReturnValue(String);
    v12 = *(id *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v14;
LABEL_23:

    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100488918(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_100488A2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100488A78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100488B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_100488CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_10048906C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100489084(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100489094(uint64_t a1)
{

}

void sub_10048909C(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "copy");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1004893A8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  _QWORD block[4];
  id v9;
  id v10;
  id v11;

  v5 = a2;
  v6 = a3;
  v7 = *(void **)(a1 + 32);
  if (v7)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100489464;
    block[3] = &unk_1011B5ED8;
    v11 = v7;
    v9 = v5;
    v10 = v6;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  }
}

uint64_t sub_100489464(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_100489478(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  objc_msgSend(*(id *)(a1 + 32), "_immediatelyUpdateRecording:withAuxiliaryControlsRecording:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "_optimizeRecordingData");
  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "copy");
  v3 = *(void **)(a1 + 48);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "historyItemIdentifier"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10048954C;
  v7[3] = &unk_1011B8118;
  v5 = *(id *)(a1 + 56);
  v8 = v2;
  v9 = v5;
  v6 = v2;
  objc_msgSend(v3, "saveRecording:forHistoryEntryWithStorageIdentifier:completion:", v6, v4, v7);

}

uint64_t sub_10048954C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 40);
  if (a2)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v3 + 16))(v3, 0, a2);
  else
    return (*(uint64_t (**)(uint64_t, _QWORD))(v3 + 16))(v3, *(_QWORD *)(a1 + 32));
}

void sub_10048A018(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned __int8 v10;
  id v11;
  id v12;
  id v13;

  v2 = *(void **)(a1 + 32);
  if (!v2)
    goto LABEL_10;
  if (*(_BYTE *)(a1 + 56))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "originalSuggestedRoute"));

    if (v3)
    {
      v2 = *(void **)(a1 + 32);
      goto LABEL_5;
    }
LABEL_10:
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 24), "setHasSelectedDirectionsResponseIndex:", 0);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 24), "setHasSelectedSuggestedRouteIndexInDirectionsResponse:", 0);
    return;
  }
LABEL_5:
  v13 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "directionsResponseID"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 24), "directionsResponses"));
  v5 = objc_msgSend(v4, "count");

  if (v5)
  {
    v6 = 0;
    while (1)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 24), "directionsResponses"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectAtIndexedSubscript:", v6));

      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "directionsResponseID"));
      v10 = objc_msgSend(v9, "isEqual:", v13);

      if ((v10 & 1) != 0)
        break;
      if (v5 == (id)++v6)
        goto LABEL_12;
    }
    if (v6 != 0x7FFFFFFFFFFFFFFFLL)
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 24), "setSelectedDirectionsResponseIndex:", v6);
      if (*(_BYTE *)(a1 + 56))
      {
        v11 = objc_msgSend(*(id *)(a1 + 32), "indexOfSuggestedRoute");
      }
      else
      {
        v12 = objc_msgSend(*(id *)(a1 + 48), "indexOfObject:", *(_QWORD *)(a1 + 32));
        if (v12 == (id)0x7FFFFFFFFFFFFFFFLL)
          v11 = 0;
        else
          v11 = v12;
      }
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 24), "setSelectedSuggestedRouteIndexInDirectionsResponse:", v11);
      goto LABEL_20;
    }
  }
LABEL_12:
  if (*(_BYTE *)(a1 + 56))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 24), "setHasSelectedDirectionsResponseIndex:", 0);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 24), "setHasSelectedSuggestedRouteIndexInDirectionsResponse:", 0);
LABEL_20:
    if (*(_BYTE *)(a1 + 56))
      objc_msgSend(*(id *)(a1 + 40), "_updateRideSelectionsWithComposedRoute:", *(_QWORD *)(a1 + 32));
  }

}

id sub_10048A2C4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateRideSelectionsWithComposedRoute:", *(_QWORD *)(a1 + 40));
}

id sub_10048A5DC(uint64_t a1, void *a2)
{
  id v3;
  DirectionsWaypoint *v4;
  void *v5;

  v3 = a2;
  v4 = objc_opt_new(DirectionsWaypoint);
  -[DirectionsWaypoint updateFromGEOComposedWaypoint:](v4, "updateFromGEOComposedWaypoint:", v3);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_userSearchInputForWaypoint:", v4));
  return v5;
}

void sub_10048A644(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;

  v2 = objc_msgSend(*(id *)(a1 + 40), "copy");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "setWaypoints:", v2);

  v6 = objc_alloc_init((Class)GEORPCorrectedSearch);
  objc_msgSend(*(id *)(a1 + 48), "applyToCorrectedSearch:", v6);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "setStartWaypointCorrectedSearchTemplate:", v6);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "firstObject"));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "setStartWaypoint:", v3);

  v4 = objc_alloc_init((Class)GEORPCorrectedSearch);
  objc_msgSend(*(id *)(a1 + 56), "applyToCorrectedSearch:", v4);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "setEndWaypointCorrectedSearchTemplate:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "lastObject"));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "setEndWaypoint:", v5);

}

void sub_10048A7B4(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "addDirectionsRequests:", *(_QWORD *)(a1 + 40));
  v2 = sub_100431F8C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    v4 = *(_QWORD *)(a1 + 40);
    v5 = 134217984;
    v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "recordNewRequest: %p", (uint8_t *)&v5, 0xCu);
  }

}

void sub_10048A8E4(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "addDirectionsResponses:", *(_QWORD *)(a1 + 40));
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "directionsResponsesCount");
  v2 = sub_100431F8C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
    v6 = 134218240;
    v7 = v4;
    v8 = 2048;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "recordNewResponse: %p _numRecordedRoutes: %lu", (uint8_t *)&v6, 0x16u);
  }

}

void sub_10048AA5C(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  void *v7;
  unint64_t i;
  void *v9;
  id v10;
  int v11;
  void *v12;
  __int16 v13;
  uint64_t v14;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "geoWaypointRoute"));
  objc_msgSend(v2, "addRoute:", v3);

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) - 1;
  v5 = sub_100431F8C();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "uniqueRouteID"));
    v11 = 138412546;
    v12 = v7;
    v13 = 2048;
    v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Recorded new Route with ID: %@ routeIndex: %lu", (uint8_t *)&v11, 0x16u);

  }
  for (i = *(_QWORD *)(a1 + 48); ; ++i)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "steps"));
    v10 = objc_msgSend(v9, "count");

    if (i >= (unint64_t)v10)
      break;
    objc_msgSend(*(id *)(a1 + 32), "_storeUserPathWithRouteIndex:stepIndex:", v4, i);
  }
}

void sub_10048ABEC(uint64_t a1)
{
  RAPDirectionsRecording *v2;
  uint64_t v3;
  void *v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v2 = objc_alloc_init(RAPDirectionsRecording);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 24);
  *(_QWORD *)(v3 + 24) = v2;

  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "directionsResponsesCount");
  v5 = sub_100431F8C();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
    v8 = 134217984;
    v9 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "clearAll: num recorded routes = %lu", (uint8_t *)&v8, 0xCu);
  }

}

id sub_10048AD18(_QWORD *a1)
{
  return _objc_msgSend(*(id *)(a1[4] + 24), "setNavigationSessionID:", a1[5], a1[6]);
}

void sub_10048ADA8(uint64_t a1)
{
  void *v2;

  v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  objc_autoreleasePoolPop(v2);
}

void sub_10048AFE4(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "routeMatch"));
  objc_msgSend(*(id *)(a1 + 32), "setLastGoodLocation:", v2);

}

_QWORD *sub_10048B168(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;

  v1 = *(_QWORD *)(result[4] + 32);
  if (v1)
  {
    v2 = result;
    if (result[5] <= 0x7FFFFFFFFFFFFFFEuLL)
    {
      v3 = v1 - 1;
      v4 = sub_100431F8C();
      v5 = objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v6 = v2[5];
        v7 = v2[6];
        v9 = 134218496;
        v10 = v3;
        v11 = 2048;
        v12 = v6;
        v13 = 2048;
        v14 = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Route %lu did update step: %lu, segment: %lu", (uint8_t *)&v9, 0x20u);
      }

      v8 = 0;
      do
        result = objc_msgSend((id)v2[4], "_replaceUserPathWithRouteIndex:stepIndex:traversal:", v3, v8++, 1);
      while (v8 <= v2[5]);
    }
  }
  return result;
}

id sub_10048B2C0(uint64_t a1)
{
  uint64_t v2;
  id v3;
  NSObject *v4;
  int v6;
  uint64_t v7;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) - 1;
  v3 = sub_100431F8C();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v6 = 134217984;
    v7 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Will reroute, routeIndex: %lu", (uint8_t *)&v6, 0xCu);
  }

  return objc_msgSend(*(id *)(a1 + 32), "_replaceUserPathWithRouteIndex:stepIndex:traversal:", v2, objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "stepIndex"), 2);
}

void sub_10048D6D8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10048D6F4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_becomeTopContextInChromeViewController:", *(_QWORD *)(a1 + 32));

}

void sub_10048DA68(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10048DA84(uint64_t a1)
{
  void *v2;
  id WeakRetained;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "actionCoordinator"));
  objc_msgSend(v2, "dismissPedestrianARTeachableMomentCardIfNecessary");

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "_resignTopContextInChromeViewController:", *(_QWORD *)(a1 + 40));

}

void sub_10048E1F0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  if (a2)
  {
    v3 = a2;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "contactForSharingToMessages"));
    v6 = (id)objc_claimAutoreleasedReturnValue(+[ShareItem shareItemWithSearchResult:contact:includePrintActivity:](ShareItem, "shareItemWithSearchResult:contact:includePrintActivity:", v3, v4, 0));

    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "actionCoordinator"));
    objc_msgSend(v5, "viewController:doShareSheetForShareItem:completion:", 0, v6, 0);

    objc_msgSend(*(id *)(a1 + 32), "_addRecentPlaceForSearchResult:", v3);
  }
}

void sub_10048E298(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v7;
  unsigned int v8;
  void *v9;
  void *v10;
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (!a2)
  {
    v13 = v5;
    v14 = v4;
    v15 = v2;
    v16 = v3;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[MKLocationManager sharedLocationManager](MKLocationManager, "sharedLocationManager"));
    v8 = objc_msgSend(v7, "isAuthorizedForPreciseLocation");

    if (v8)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[MKLocationManager sharedLocationManager](MKLocationManager, "sharedLocationManager"));
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_10048E37C;
      v11[3] = &unk_1011B81D0;
      v12 = *(id *)(a1 + 32);
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "singleLocationUpdateWithDesiredAccuracy:handler:", v11, kCLLocationAccuracyBest));

      objc_msgSend(v10, "start");
    }
  }
}

void sub_10048E37C(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[SearchResult currentLocationSearchResult](SearchResult, "currentLocationSearchResult"));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10048E410;
  v5[3] = &unk_1011B81A8;
  v3 = *(id *)(a1 + 32);
  v6 = v2;
  v7 = v3;
  v4 = v2;
  objc_msgSend(v4, "tryUpdatingCurrentLocationSearchResultWithCompletion:", v5);

}

uint64_t sub_10048E410(uint64_t result, int a2)
{
  if (a2)
    return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(result + 40) + 16))(*(_QWORD *)(result + 40), *(_QWORD *)(result + 32));
  return result;
}

UIColor *__cdecl sub_100490088(id a1, MapsTheme *a2)
{
  return -[MapsTheme keyColor](a2, "keyColor");
}

void sub_100490474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100490490(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1004904A0(uint64_t a1)
{

}

void sub_1004904A8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD v14[4];
  id v15[2];
  id location;

  v5 = a2;
  objc_initWeak(&location, *(id *)(a1 + 32));
  if (objc_msgSend(v5, "isSelected"))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "localizedStringForKey:value:table:", CFSTR("[Collection Filter Menu] Selected Filter Title"), CFSTR("localized string not found"), 0));

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "filterTitle"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", v7, v8, *(_QWORD *)(a1 + 48)));

    v10 = objc_loadWeakRetained(&location);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "menuButton"));
    objc_msgSend(v11, "setTitle:forState:", v9, 0);

  }
  else
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "filterTitle"));
  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "filterTitle"));
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1004906B0;
  v14[3] = &unk_1011B8278;
  objc_copyWeak(v15, &location);
  v15[1] = a3;
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[UIAction actionWithTitle:image:identifier:handler:](UIAction, "actionWithTitle:image:identifier:handler:", v9, 0, v12, v14));

  objc_msgSend(v13, "setState:", objc_msgSend(v5, "isSelected"));
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "addObject:", v13);

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);

}

void sub_100490680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1004906B0(uint64_t a1)
{
  void *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSIndexPath indexPathForItem:inSection:](NSIndexPath, "indexPathForItem:inSection:", *(_QWORD *)(a1 + 40), 0));
  objc_msgSend(WeakRetained, "filterSelectedAtIndexPath:", v2);

}

void sub_100490FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100491018(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  id WeakRetained;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  NSObject *v24;
  uint64_t v25;
  void *v26;
  UGCSubmissionLookupResult *v27;
  id v28;
  NSObject *v29;
  void *v30;
  void *v31;
  id *v32;
  id *v33;
  void *v34;
  _QWORD v35[4];
  UGCSubmissionLookupResult *v36;
  id v37;
  _QWORD block[4];
  UGCSubmissionLookupResult *v39;
  id v40;
  id v41;
  uint8_t buf[4];
  id v43;
  __int16 v44;
  void *v45;

  v6 = a2;
  v7 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "feedbackResult"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "queryResult"));

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "feedbackInfos"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "firstObject"));

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "feedbackComponents"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "firstObject"));

    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "values"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "firstObject"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "poiEnrichment"));

    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "feedbackResult"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "queryResult"));

    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "feedbackInfos"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "firstObject"));

    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "feedbackId"));
    if (v7)
    {
      v23 = sub_1004913B0();
      v24 = objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        v25 = GEOStringForError(objc_msgSend(v7, "code"));
        v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
        *(_DWORD *)buf = 138412546;
        v43 = v7;
        v44 = 2112;
        v45 = v26;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "Received error %@ error with reason %@", buf, 0x16u);

      }
      v27 = -[UGCSubmissionLookupResult initWithError:]([UGCSubmissionLookupResult alloc], "initWithError:", v7);
      if ((id)-[UGCSubmissionLookupResult status](v27, "status") == (id)3)
      {
        v28 = sub_1004913B0();
        v29 = objc_claimAutoreleasedReturnValue(v28);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
        {
          v30 = *(void **)(a1 + 48);
          *(_DWORD *)buf = 134217984;
          v43 = v30;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "We received a no result error, so delete entry %llu from MapsSync", buf, 0xCu);
        }

      }
      v31 = *(void **)(a1 + 32);
      if (!v31)
        goto LABEL_14;
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1004913F0;
      block[3] = &unk_1011B5ED8;
      v32 = &v41;
      v41 = v31;
      v33 = (id *)&v39;
      v27 = v27;
      v39 = v27;
      v40 = v7;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

    }
    else
    {
      v27 = -[UGCSubmissionLookupResult initWithSubmissionIdentifier:previousSubmission:]([UGCSubmissionLookupResult alloc], "initWithSubmissionIdentifier:previousSubmission:", v22, v17);
      v34 = *(void **)(a1 + 32);
      if (!v34)
      {
LABEL_14:

        goto LABEL_15;
      }
      v35[0] = _NSConcreteStackBlock;
      v35[1] = 3221225472;
      v35[2] = sub_100491404;
      v35[3] = &unk_1011ACAD0;
      v32 = &v37;
      v37 = v34;
      v33 = (id *)&v36;
      v27 = v27;
      v36 = v27;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, v35);
    }

    goto LABEL_14;
  }
LABEL_15:

}

id sub_1004913B0()
{
  if (qword_1014D2618 != -1)
    dispatch_once(&qword_1014D2618, &stru_1011B82E8);
  return (id)qword_1014D2610;
}

uint64_t sub_1004913F0(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_100491404(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

void sub_10049142C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "UGCSubmissionLookupTicket");
  v2 = (void *)qword_1014D2610;
  qword_1014D2610 = (uint64_t)v1;

}

void sub_100491908(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100491920(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100491930(uint64_t a1)
{

}

void sub_100491938(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v3 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v7 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR(" %@>"), a2));
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stringByReplacingOccurrencesOfString:withString:", CFSTR(">"), v7));
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

}

void sub_1004919B8(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v3 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v7 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR(" %@>"), a2));
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stringByReplacingOccurrencesOfString:withString:", CFSTR(">"), v7));
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

}

void sub_100491BDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

id sub_100491BF4(uint64_t a1, void *a2)
{
  id result;

  result = objc_msgSend(a2, "isEqual:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

id sub_100491C2C(uint64_t a1, void *a2)
{
  id result;

  result = objc_msgSend(a2, "isEqual:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

UIFont *__cdecl sub_100491DA4(id a1)
{
  void *v1;
  void *v2;
  void *v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[MKFontManager sharedManager](MKFontManager, "sharedManager"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "subtitleFont"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont _maps_cappedFont:withMaxPoint:](UIFont, "_maps_cappedFont:withMaxPoint:", v2, 30.0));

  return (UIFont *)v3;
}

UIFont *__cdecl sub_100491E10(id a1)
{
  void *v1;
  void *v2;
  void *v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[MKFontManager sharedManager](MKFontManager, "sharedManager"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "largeTitleFont"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont _maps_cappedFont:withMaxPoint:](UIFont, "_maps_cappedFont:withMaxPoint:", v2, 40.0));

  return (UIFont *)v3;
}

void sub_100494DD4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10049520C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *location)
{
  id *v12;
  id *v13;
  uint64_t v14;

  objc_destroyWeak(v13);
  objc_destroyWeak(v12);
  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v14 - 112));
  _Unwind_Resume(a1);
}

void sub_100495240(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id *WeakRetained;
  id v5;
  id v6;
  void *v7;
  void *v8;
  unsigned int v9;
  const __CFString *v10;
  id v11;
  NSObject *v12;
  uint8_t v13[16];
  uint8_t buf[16];

  v2 = sub_100431D5C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Offline Tip Action Button Tapped in Maps Home", buf, 2u);
  }

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v5 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 64));

    if (v5)
    {
      v6 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 64));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "mapRegion"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "regionName"));
      objc_msgSend(v6, "presentOfflineMapsSelectorFromTipWithRegion:name:", v7, v8);

      objc_msgSend(WeakRetained[4], "dismissedTipWithType:", objc_msgSend(*(id *)(a1 + 40), "suggestionType"));
      objc_msgSend(WeakRetained, "setShowFeature:", 0);
      objc_msgSend(WeakRetained, "_notifyObservers");
      objc_msgSend(WeakRetained, "updateFeatureEligibility");
      v9 = objc_msgSend(*(id *)(a1 + 40), "suggestionType") - 1;
      if (v9 > 2)
        v10 = CFSTR("unknown");
      else
        v10 = *(&off_1011B83E0 + (int)v9);
      +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 371, 8, v10);
    }
    else
    {
      v11 = sub_100431D5C();
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Offline Tip Action Delegate is nil", v13, 2u);
      }

    }
  }

}

void sub_1004953F0(uint64_t a1)
{
  id *WeakRetained;
  id v3;
  NSObject *v4;
  void *v5;
  unsigned int v6;
  const __CFString *v7;
  int v8;
  void *v9;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = sub_100431D5C();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tipTitle"));
      v8 = 138412290;
      v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Offline Tip \"%@\" Displayed in Maps Home", (uint8_t *)&v8, 0xCu);

    }
    objc_msgSend(WeakRetained[4], "displayedTipWithType:", objc_msgSend(*(id *)(a1 + 32), "suggestionType"));
    v6 = objc_msgSend(*(id *)(a1 + 32), "suggestionType") - 1;
    if (v6 > 2)
      v7 = CFSTR("unknown");
    else
      v7 = *(&off_1011B83E0 + (int)v6);
    +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 392, 8, v7);
  }

}

void sub_10049551C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  id *WeakRetained;
  id *v6;
  int v7;
  void *v8;

  v2 = sub_100431D5C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tipTitle"));
    v7 = 138412290;
    v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Offline Tip \"%@\" Dismissed in Maps Home", (uint8_t *)&v7, 0xCu);

  }
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  v6 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained[4], "dismissedTipWithType:", objc_msgSend(*(id *)(a1 + 32), "suggestionType"));
    objc_msgSend(v6, "setShowFeature:", 0);
    objc_msgSend(v6, "_notifyObservers");
    objc_msgSend(v6, "updateFeatureEligibility");
  }

}

void sub_100495620(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "setShowFeature:", 1);
    objc_msgSend(v2, "_notifyObservers");
    WeakRetained = v2;
  }

}

void sub_1004957E8(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[4];
  id v8;

  v2 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = (void *)*((_QWORD *)WeakRetained + 4);
    v6 = *(_QWORD *)(a1 + 32);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1004958A8;
    v7[3] = &unk_1011B07A0;
    objc_copyWeak(&v8, v2);
    objc_msgSend(v5, "offlineSuggestionsForLocation:completion:", v6, v7);
    objc_destroyWeak(&v8);
  }

}

void sub_100495894(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1004958A8(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  id v6;
  NSObject *v7;
  _BOOL4 v8;
  uint8_t v9[16];
  uint8_t buf[16];

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v5 = objc_msgSend(v3, "count");
    v6 = sub_100431D5C();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    v8 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);
    if (v5)
    {
      if (v8)
      {
        *(_WORD *)v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Called back in OfflineMapsFeatureDiscoverySource with suggestions, showing the first one.", v9, 2u);
      }

      v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectAtIndexedSubscript:", 0));
      objc_msgSend(WeakRetained, "_showTipFromModelData:", v7);
    }
    else if (v8)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Called back in OfflineMapsFeatureDiscoverySource with 0 suggestions, showing nothing", buf, 2u);
    }

  }
}

void sub_100499788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1004997C0(id a1, id a2, unint64_t a3, BOOL *a4)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  char isKindOfClass;

  v4 = a2;
  v6 = objc_opt_class(GEOComposedWaypointToRoute, v5);
  isKindOfClass = objc_opt_isKindOfClass(v4, v6);

  return isKindOfClass & 1;
}

void sub_100499808(uint64_t a1, void *a2, unint64_t a3)
{
  uint64_t v5;
  id v6;
  _TtC4Maps16MapsFindMyHandle *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;

  v16 = a2;
  v5 = objc_opt_class(GEOComposedWaypointToRoute);
  if ((objc_opt_isKindOfClass(v16, v5) & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v16);
  }
  else
  {
    if (objc_msgSend(v16, "isCurrentLocation"))
    {
      v6 = objc_msgSend(objc_alloc((Class)GEOComposedWaypoint), "initWithLocation:isCurrentLocation:", 0, 1);
      objc_msgSend(*(id *)(a1 + 32), "addObject:", v6);
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
    }
    else
    {
      if ((unint64_t)objc_msgSend(*(id *)(a1 + 40), "count") <= a3)
      {
        v6 = 0;
      }
      else
      {
        v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectAtIndex:", a3));
        if ((MapsFeature_IsEnabled_MapsWally(v6) & 1) == 0)
        {
          v7 = -[MapsFindMyHandle initWithIdentifier:]([_TtC4Maps16MapsFindMyHandle alloc], "initWithIdentifier:", v6);
          v8 = (void *)objc_claimAutoreleasedReturnValue(-[MapsFindMyHandle prettyName](v7, "prettyName"));

          if (v8)
          {
            v9 = (void *)objc_claimAutoreleasedReturnValue(-[MapsFindMyHandle prettyName](v7, "prettyName"));
            objc_msgSend(v16, "setName:", v9);

          }
        }
      }
      v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "_geoMapItemStorageForPersistence"));
      v11 = (void *)v10;
      if (v10)
      {
        if (v6 && MapsFeature_IsEnabled_MapsWally(v10))
        {
          v12 = objc_alloc((Class)GEOLocation);
          objc_msgSend(v11, "coordinate");
          v13 = objc_msgSend(v12, "initWithGEOCoordinate:");
          v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
          objc_msgSend(v14, "timeIntervalSinceReferenceDate");
          objc_msgSend(v13, "setTimestamp:");

          v15 = objc_msgSend(objc_alloc((Class)GEOComposedWaypoint), "initWithLocation:findMyHandleID:", v13, v6);
        }
        else
        {
          v15 = objc_msgSend(objc_alloc((Class)GEOComposedWaypoint), "initWithMapItem:", v11);
        }
        objc_msgSend(*(id *)(a1 + 32), "addObject:", v15);

      }
    }

  }
}

void sub_10049BC7C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint8_t buf[4];
  id v15;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = sub_100431A4C();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v15 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "URLHandlingTask showDirectionsFrom mapItemsRefined error: %@", buf, 0xCu);
    }
    v9 = 0;
  }
  else
  {
    if (!objc_msgSend(v5, "count"))
    {
      v9 = 0;
      goto LABEL_8;
    }
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
    v10 = *(void **)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    v13 = v9;
    v8 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v13, 1));
    v12 = objc_alloc_init((Class)NSDictionary);
    objc_msgSend(v10, "URLHandler:launchIntoSearchWithMapItems:options:context:", v11, v8, v12, 0);

  }
LABEL_8:
  objc_msgSend(*(id *)(a1 + 32), "URLHandler:didFinishAsynchronousHandlingWithError:", *(_QWORD *)(a1 + 40), v6);

}

void sub_10049DB08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10049DB28(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  void *v4;
  void (**v5)(_QWORD, _QWORD);
  _QWORD *v6;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));

  if (WeakRetained)
  {
    v6 = objc_loadWeakRetained(v1);
    v3 = (void *)v6[1];
    v6[1] = 0;

    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "updateBlock"));
    if (v4)
    {
      v5 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "updateBlock"));
      ((void (**)(_QWORD, _QWORD *))v5)[2](v5, v6);

    }
  }
}

void sub_10049E114(uint64_t a1, void *a2)
{
  void *v3;
  unsigned __int8 v4;
  id v5;

  v5 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapItem"));
  v4 = objc_msgSend(v3, "isEqual:", v5);

  if ((v4 & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "setMapItem:", v5);
    objc_msgSend(*(id *)(a1 + 32), "markAsUpdated");
  }

}

void sub_10049E814(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10049E82C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10049E83C(uint64_t a1)
{

}

void sub_10049E844(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;

  v8 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "query"));
  objc_msgSend(*(id *)(a1 + 32), "setFirstLine:", v3);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "locationDisplayString"));
  if (objc_msgSend(v4, "length"))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "locationDisplayString"));
    objc_msgSend(*(id *)(a1 + 32), "setSecondLine:", v5);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setSecondLine:", 0);
  }

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = CFSTR("Search");

}

void sub_10049E900(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  char *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;

  v3 = a2;
  v15 = 0;
  +[SearchResult newStartWaypointSearchResult:endWaypointSearchResult:forRouteHistoryEntry:](SearchResult, "newStartWaypointSearchResult:endWaypointSearchResult:forRouteHistoryEntry:", 0, &v15, v3);
  v4 = v15;
  objc_msgSend(v4, "updateModel:", *(_QWORD *)(a1 + 32));
  v5 = objc_opt_class(MSHistoryMultiPointRoute);
  if ((objc_opt_isKindOfClass(v3, v5) & 1) != 0)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "waypoints"));
    v7 = objc_msgSend(v6, "count");

    if ((unint64_t)v7 >= 3)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "waypoints"));
      v9 = (char *)objc_msgSend(v8, "count") - 2;

      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "localizedStringForKey:value:table:", CFSTR("[CarPlay] Recent cell stop count"), CFSTR("localized string not found"), 0));
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", v11, v9));

      objc_msgSend(*(id *)(a1 + 32), "setChargerNumberString:", v12);
      objc_msgSend(*(id *)(a1 + 32), "setIsShowingStops:", 1);

    }
  }
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v14 = *(void **)(v13 + 40);
  *(_QWORD *)(v13 + 40) = CFSTR("Route");

}

void sub_10049EA6C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "geoMapItem"));
  v3 = objc_msgSend(objc_alloc((Class)MKMapItem), "initWithGeoMapItem:isPlaceHolderPlace:", v6, 0);
  objc_msgSend(v3, "updateModel:", *(_QWORD *)(a1 + 32));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = CFSTR("Place");

}

void sub_10049EAE8(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = CFSTR("Transit Line");

}

void sub_10049EC90(uint64_t a1, void *a2)
{
  void *v3;
  unsigned __int8 v4;
  id v5;

  v5 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapItem"));
  v4 = objc_msgSend(v3, "isEqual:", v5);

  if ((v4 & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "setMapItem:", v5);
    objc_msgSend(*(id *)(a1 + 32), "markAsUpdated");
  }

}

void sub_10049EE8C(uint64_t a1, void *a2)
{
  void *v3;
  unsigned __int8 v4;
  id v5;

  v5 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapItem"));
  v4 = objc_msgSend(v3, "isEqual:", v5);

  if ((v4 & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "setMapItem:", v5);
    objc_msgSend(*(id *)(a1 + 32), "markAsUpdated");
  }

}

void sub_10049F5B0(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)MKDistanceFormatter);
  v2 = (void *)qword_1014D2620;
  qword_1014D2620 = (uint64_t)v1;

  objc_msgSend((id)qword_1014D2620, "setUnitStyle:", 1);
}

void sub_1004A1254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1004A1270(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_refreshRouteETAIfCalculating");

}

void sub_1004A2B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;
  uint64_t v72;

  _Block_object_dispose(&a72, 8);
  _Block_object_dispose((const void *)(v72 - 232), 8);
  _Block_object_dispose((const void *)(v72 - 200), 8);
  _Block_object_dispose((const void *)(v72 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1004A2B48(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1004A2B58(uint64_t a1)
{

}

void sub_1004A2B60(uint64_t a1, void *a2)
{
  void *v3;
  MapsAnalyticsHelper *v4;
  uint64_t v5;
  void *v6;
  id v7;

  v7 = a2;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend(*(id *)(a1 + 32), "handleMapItems:");
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "firstObject"));
    v4 = -[MapsAnalyticsHelper initWithMapItem:]([MapsAnalyticsHelper alloc], "initWithMapItem:", v3);
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v6 = *(void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;

    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), MKMapItemTypeIdentifier);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void sub_1004A2C20(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD block[5];
  id v7;
  id v8;
  id v9;
  __int128 v10;
  uint64_t v11;

  v3 = a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1004A2CE8;
  block[3] = &unk_1011B8528;
  v4 = *(NSObject **)(a1 + 32);
  block[4] = *(_QWORD *)(a1 + 40);
  v7 = v3;
  v10 = *(_OWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a1 + 80);
  v8 = *(id *)(a1 + 48);
  v9 = *(id *)(a1 + 56);
  v5 = v3;
  dispatch_group_notify(v4, (dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_1004A2CE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = objc_msgSend(*(id *)(a1 + 32), "handleVCards:", *(_QWORD *)(a1 + 40));
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
    {
      v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(UTTypeVCard, "identifier"));
      v3 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
      v4 = *(void **)(v3 + 40);
      *(_QWORD *)(v3 + 40) = v2;
LABEL_6:

      goto LABEL_7;
    }
    if (objc_msgSend(*(id *)(a1 + 40), "count"))
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("No address for contact"), CFSTR("localized string not found"), 0));
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
      v7 = *(void **)(v6 + 40);
      *(_QWORD *)(v6 + 40) = v5;

      goto LABEL_6;
    }
  }
LABEL_7:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_1004A2DC0(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD block[5];
  id v7;
  id v8;
  id v9;
  __int128 v10;
  uint64_t v11;

  v3 = a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1004A2E88;
  block[3] = &unk_1011B8528;
  v4 = *(NSObject **)(a1 + 32);
  block[4] = *(_QWORD *)(a1 + 40);
  v7 = v3;
  v10 = *(_OWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a1 + 80);
  v8 = *(id *)(a1 + 48);
  v9 = *(id *)(a1 + 56);
  v5 = v3;
  dispatch_group_notify(v4, (dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_1004A2E88(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = objc_msgSend(*(id *)(a1 + 32), "handleCalendarEvents:", *(_QWORD *)(a1 + 40));
    v2 = *(void **)(a1 + 40);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "firstObject"));
      v4 = v3;
      if (!v3)
      {
LABEL_8:

        goto LABEL_9;
      }
      v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "typeIdentifier"));
      v6 = *(_QWORD *)(a1 + 72);
LABEL_7:
      v7 = *(_QWORD *)(v6 + 8);
      v8 = *(void **)(v7 + 40);
      *(_QWORD *)(v7 + 40) = v5;

      goto LABEL_8;
    }
    if (objc_msgSend(v2, "count"))
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("No address for event"), CFSTR("localized string not found"), 0));
      v6 = *(_QWORD *)(a1 + 80);
      goto LABEL_7;
    }
  }
LABEL_9:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_1004A2F5C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD block[5];
  id v7;
  id v8;
  id v9;
  __int128 v10;
  uint64_t v11;

  v3 = a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1004A3024;
  block[3] = &unk_1011B8528;
  v4 = *(NSObject **)(a1 + 32);
  block[4] = *(_QWORD *)(a1 + 40);
  v7 = v3;
  v10 = *(_OWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a1 + 80);
  v8 = *(id *)(a1 + 48);
  v9 = *(id *)(a1 + 56);
  v5 = v3;
  dispatch_group_notify(v4, (dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_1004A3024(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = objc_msgSend(*(id *)(a1 + 32), "handleURLs:", *(_QWORD *)(a1 + 40));
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
    {
      v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(UTTypeURL, "identifier"));
      v3 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
      v4 = *(void **)(v3 + 40);
      *(_QWORD *)(v3 + 40) = v2;
LABEL_6:

      goto LABEL_7;
    }
    if (objc_msgSend(*(id *)(a1 + 40), "count"))
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("No address for URL"), CFSTR("localized string not found"), 0));
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
      v7 = *(void **)(v6 + 40);
      *(_QWORD *)(v6 + 40) = v5;

      goto LABEL_6;
    }
  }
LABEL_7:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_1004A30FC(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  id v6;
  __int128 v7;
  _QWORD block[5];
  id v9;
  __int128 v10;
  __int128 v11;

  v3 = a2;
  block[1] = 3221225472;
  v7 = *(_OWORD *)(a1 + 48);
  v11 = *(_OWORD *)(a1 + 64);
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_1004A31B0;
  block[3] = &unk_1011B8578;
  v4 = *(NSObject **)(a1 + 32);
  block[4] = *(_QWORD *)(a1 + 40);
  v9 = v3;
  v5 = (id)v7;
  v10 = v7;
  v6 = v3;
  dispatch_group_notify(v4, (dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_1004A31B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24)
    && !*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend(*(id *)(a1 + 32), "handleStrings:", *(_QWORD *)(a1 + 40));
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
    {
      v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(UTTypeText, "identifier"));
      v3 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
      v4 = *(void **)(v3 + 40);
      *(_QWORD *)(v3 + 40) = v2;

    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_1004A323C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;

  if (objc_msgSend(*(id *)(*(_QWORD *)(a1[4] + 8) + 40), "length"))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedMapsDelegate](UIApplication, "sharedMapsDelegate"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "appCoordinator"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "chromeViewController"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "interruptionManager"));
    objc_msgSend(v5, "displayAlertWithTitle:message:postAlertSearchType:", *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 40), 0, 0);

  }
  if (!*(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24))
  {
    v6 = *(_QWORD *)(a1[6] + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = CFSTR("not handled");

  }
  v11 = (id)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
  v8 = a1[7];
  v9 = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(v8 + 8) + 40), "actionDetails"));
  objc_msgSend(v11, "captureUserAction:onTarget:eventValue:placeActionDetails:", 17006, 0, v9, v10);

}

void sub_1004A33E0(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
  objc_msgSend(v1, "captureUserAction:onTarget:eventValue:placeActionDetails:", 17005, 0, 0, 0);

}

uint64_t sub_1004A3B14(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  double latitude;
  double longitude;
  void *v16;
  unsigned int v17;
  void *v18;
  void *v19;
  void *v20;
  double v21;
  void *v22;
  double v23;
  void *v24;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "mapKitHandle"));
  v5 = objc_msgSend(v4, "length");

  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    v7 = *(_QWORD *)(a1 + 32);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "mapKitHandle"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "title"));
    objc_msgSend(v6, "mapsDragDestinationHandler:didReceiveMapKitHandle:title:", v7, v8, v9);

    v10 = 1;
  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "value"));
    v11 = objc_opt_class(NSURL);
    if ((objc_opt_isKindOfClass(v6, v11) & 1) == 0)
    {
      v10 = 0;
      goto LABEL_12;
    }
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "title"));
    v13 = objc_msgSend(v12, "length");

    if (!v13)
    {
      v10 = 0;
      goto LABEL_13;
    }
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "value"));
    latitude = kCLLocationCoordinate2DInvalid.latitude;
    longitude = kCLLocationCoordinate2DInvalid.longitude;
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "scheme"));
    v17 = objc_msgSend(v16, "isEqualToString:", CFSTR("geo"));

    if (v17)
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "resourceSpecifier"));
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "componentsSeparatedByString:", CFSTR(",")));
      if ((unint64_t)objc_msgSend(v19, "count") >= 2)
      {
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectAtIndexedSubscript:", 0));
        objc_msgSend(v20, "doubleValue");
        latitude = v21;

        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectAtIndexedSubscript:", 1));
        objc_msgSend(v22, "doubleValue");
        longitude = v23;

      }
    }
    v24 = *(void **)(a1 + 32);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "title"));
    v10 = (uint64_t)objc_msgSend(v24, "_handleString:nearCoordinate:", v8, latitude, longitude);
  }

LABEL_12:
LABEL_13:

  return v10;
}

void sub_1004A4ED8(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  id v5;

  v4 = *(void **)(a1 + 32);
  v5 = a3;
  objc_msgSend(v5, "setVisible:", objc_msgSend(v4, "containsIndex:", objc_msgSend(a2, "unsignedIntegerValue")));

}

void sub_1004A52F4(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = objc_alloc_init((Class)MKLocationManager);
  objc_msgSend(v2, "setEffectiveBundleIdentifier:", CFSTR("com.apple.Maps"));
  objc_msgSend(v2, "setDistanceFilter:", 100.0);
  objc_msgSend(v2, "setDesiredAccuracy:", kCLLocationAccuracyHundredMeters);
  objc_msgSend(v2, "startLocationUpdateWithObserver:", *(_QWORD *)(a1 + 32));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 56);
  *(_QWORD *)(v3 + 56) = v2;

}

void sub_1004A5D28(id a1, int a2, double a3, int a4, NSArray *a5)
{
  uint64_t v5;
  uint64_t v7;
  NSArray *v8;
  void *v9;
  id v10;

  v5 = *(_QWORD *)&a4;
  v7 = *(_QWORD *)&a2;
  v8 = a5;
  v10 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v7));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a3 * 1000.0));
  +[GEOAPPortal captureProactiveSuggestionWithListType:interactedItemIndex:duration:proactiveItems:](GEOAPPortal, "captureProactiveSuggestionWithListType:interactedItemIndex:duration:proactiveItems:", v5, v10, v9, v8);

}

void sub_1004A5FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1004A6008(uint64_t a1, void *a2)
{
  GEOPlaceActionDetails *v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;

  v11 = a2;
  if (v11)
  {
    v3 = +[GEOPlaceActionDetails actionDetailsWithMapItem:timestamp:resultIndex:](GEOPlaceActionDetails, "actionDetailsWithMapItem:timestamp:resultIndex:", v11, objc_msgSend(*(id *)(a1 + 32), "row"), CFAbsoluteTimeGetCurrent());
    v4 = (id)objc_claimAutoreleasedReturnValue(v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
    v6 = *(unsigned int *)(a1 + 56);
    v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "delegate"));
    if (objc_msgSend(v7, "conformsToProtocol:", &OBJC_PROTOCOL___GEOLogContextDelegate))
      v8 = objc_msgSend(v7, "currentUITargetForAnalytics");
    else
      v8 = 0;

    objc_msgSend(v5, "captureUserAction:onTarget:eventValue:placeActionDetails:", v6, v8, *(_QWORD *)(a1 + 48), v4);
  }
  else
  {
    v9 = *(unsigned int *)(a1 + 56);
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "delegate"));
    if (objc_msgSend(v4, "conformsToProtocol:", &OBJC_PROTOCOL___GEOLogContextDelegate))
      v10 = objc_msgSend(v4, "currentUITargetForAnalytics");
    else
      v10 = 0;

    +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", v9, v10, *(_QWORD *)(a1 + 48));
  }

}

uint64_t sub_1004A6160(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1004A6170(uint64_t a1)
{

}

uint64_t sub_1004A6178(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
}

uint64_t sub_1004A6190(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "geoMapItem"));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_1004A665C(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_1004A7074(uint64_t a1)
{
  id *v2;
  _BYTE *WeakRetained;
  uint64_t v4;
  uint64_t v5;
  char isKindOfClass;
  uint64_t v7;
  uint64_t v8;
  char v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  _QWORD v16[4];
  id v17;
  char v18;
  char v19;

  v2 = (id *)(a1 + 48);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = objc_opt_class(NavigationSession);
    isKindOfClass = objc_opt_isKindOfClass(v4, v5);
    v7 = *(_QWORD *)(a1 + 40);
    v8 = objc_opt_class(NavigationSession);
    v9 = objc_opt_isKindOfClass(v7, v8) & 1;
    WeakRetained[8] = isKindOfClass & 1;
    v10 = *(id *)(a1 + 32);
    v11 = objc_opt_class(RoutePlanningSession);
    if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
      v12 = v10;
    else
      v12 = 0;
    v13 = v12;

    objc_msgSend(WeakRetained, "setRoutePlanningSession:", v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[VGVirtualGarageService sharedService](VGVirtualGarageService, "sharedService"));
    v15 = v14;
    if ((isKindOfClass & 1) != 0)
      objc_msgSend(v14, "registerObserver:", WeakRetained);
    else
      objc_msgSend(v14, "unregisterObserver:", WeakRetained);

    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_1004A71F4;
    v16[3] = &unk_1011B8778;
    objc_copyWeak(&v17, v2);
    v18 = isKindOfClass & 1;
    v19 = v9;
    objc_msgSend(WeakRetained, "_loadGarageWithCompletion:", v16);
    objc_destroyWeak(&v17);
  }

}

void sub_1004A71E0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1004A71F4(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  id v5;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    if (*(_BYTE *)(a1 + 40) && (objc_msgSend(WeakRetained, "_checkBatteryStateWithGarage:", v5), *(_BYTE *)(a1 + 40))
      || *(_BYTE *)(a1 + 41))
    {
      objc_msgSend(v4, "_syncSelectedVehicleStateWithGarage:", v5);
    }
  }

}

void sub_1004A7424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1004A745C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1004A746C(uint64_t a1)
{

}

void sub_1004A7474(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_1004A7488(uint64_t a1, void *a2)
{
  _BYTE *WeakRetained;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  _QWORD v12[4];
  id v13;

  v11 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "vehicles"));
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1004A75E0;
    v12[3] = &unk_1011B87C0;
    v13 = *(id *)(a1 + 32);
    v5 = sub_10039E080(v4, v12);
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "firstObject"));
    if (objc_msgSend(v7, "isPureElectricVehicle"))
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "manufacturer"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "model"));
      objc_msgSend(v7, "batteryPercentageBasedOfCapacity");
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
      +[GEOAPPortal captureEvRoutingVehicleDetailsWithMake:model:towingNotSupported:batteryCapacity:](GEOAPPortal, "captureEvRoutingVehicleDetailsWithMake:model:towingNotSupported:batteryCapacity:", v8, v9, 0, v10);

    }
    WeakRetained[10] = 1;

  }
}

id sub_1004A75E0(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v6;
  id v7;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "identifier"));
  v7 = objc_msgSend(v6, "isEqualToString:", *(_QWORD *)(a1 + 32));

  if ((_DWORD)v7)
    *a4 = 1;
  return v7;
}

void sub_1004A7704(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1004A7728(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject **WeakRetained;
  NSObject **v8;
  NSObject *v9;
  NSObject *v10;
  id v11;
  _QWORD v12[4];
  id v13;
  NSObject *v14;
  uint8_t buf[4];
  id v16;

  v5 = a2;
  v6 = a3;
  WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 40));
  v8 = WeakRetained;
  if (WeakRetained)
  {
    if (!v5 || v6)
    {
      v11 = sub_1004326FC();
      v10 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v16 = v6;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed to get virtual garage with error: %@", buf, 0xCu);
      }
    }
    else
    {
      v9 = WeakRetained[2];
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_1004A7870;
      v12[3] = &unk_1011ACAD0;
      v14 = *(id *)(a1 + 32);
      v13 = v5;
      dispatch_async(v9, v12);

      v10 = v14;
    }

  }
}

uint64_t sub_1004A7870(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_1004A7938(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "_checkBatteryStateWithGarage:", *(_QWORD *)(a1 + 32));
    WeakRetained = v3;
  }

}

void sub_1004A7A04(id a1, VGVehicle *a2)
{
  VGVehicle *v2;
  void *v3;
  id v4;

  if (a2)
  {
    v2 = a2;
    v4 = (id)objc_claimAutoreleasedReturnValue(+[VGVirtualGarageService sharedService](VGVirtualGarageService, "sharedService"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(-[VGVehicle identifier](v2, "identifier"));

    objc_msgSend(v4, "virtualGarageGetLatestStateOfVehicleWithIdentifier:syncAcrossDevices:withReply:", v3, 1, &stru_1011B8890);
  }
}

void sub_1004A7A80(id a1, VGVehicle *a2, NSError *a3)
{
  NSError *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint32_t v11;
  int v12;
  NSError *v13;

  v4 = a3;
  v5 = sub_1004326FC();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = v6;
  if (!a2 || v4)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v12 = 138412290;
      v13 = v4;
      v8 = "Failed to get state of selected vehicle with error: %@";
      v9 = v7;
      v10 = OS_LOG_TYPE_ERROR;
      v11 = 12;
      goto LABEL_7;
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    LOWORD(v12) = 0;
    v8 = "Successfully saved the state of selected vehicle.";
    v9 = v7;
    v10 = OS_LOG_TYPE_INFO;
    v11 = 2;
LABEL_7:
    _os_log_impl((void *)&_mh_execute_header, v9, v10, v8, (uint8_t *)&v12, v11);
  }

}

void sub_1004A7B78(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "selectedVehicle"));
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);

}

void sub_1004A8EBC(uint64_t a1, int a2)
{
  id v2;

  if (a2)
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "_mapLayer"));
    objc_msgSend(v2, "setDisplayRate:", 0);

  }
}

id sub_1004A9A1C(void *a1)
{
  id v1;
  void *v2;
  unsigned __int8 v3;
  void *v4;
  unsigned int v5;
  id v6;
  void *v7;
  NSObject *v8;
  void *v9;
  unsigned __int8 v10;
  id v11;
  id v12;
  NSObject *v13;
  id v14;
  char *v15;
  id v17;
  id v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  const char *v26;

  v1 = a1;
  if (!v1)
  {
    v12 = sub_1004318FC();
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v20 = "NSError * _Nullable CopyARTraceToCrashReporterDirectory(NSString * _Nonnull __strong)";
      v21 = 2080;
      v22 = "PedestrianARTraceHelpers.m";
      v23 = 1024;
      v24 = 67;
      v25 = 2080;
      v26 = "ARTracePath != nil";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%s [%s:%d] Invalid parameter not satisfying: %s", buf, 0x26u);
    }

    if (sub_100A70734())
    {
      v14 = sub_1004318FC();
      v8 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        v15 = (char *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
        *(_DWORD *)buf = 138412290;
        v20 = v15;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);

      }
      v6 = 0;
      goto LABEL_9;
    }
LABEL_16:
    v6 = 0;
    goto LABEL_17;
  }
  if (!DiagnosticLogSubmissionEnabled())
    goto LABEL_16;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v3 = objc_msgSend(v2, "fileExistsAtPath:", CFSTR("/var/mobile/Library/Logs/CrashReporter/DiagnosticLogs/Maps/ARTraces/"));

  if ((v3 & 1) != 0)
  {
LABEL_6:
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "lastPathComponent"));
    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("/var/mobile/Library/Logs/CrashReporter/DiagnosticLogs/Maps/ARTraces/"), "stringByAppendingPathComponent:", v7));

    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
    v17 = 0;
    v10 = objc_msgSend(v9, "copyItemAtPath:toPath:error:", v1, v8, &v17);
    v11 = v17;

    v6 = 0;
    if ((v10 & 1) == 0)
      v6 = v11;

LABEL_9:
    goto LABEL_17;
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v18 = 0;
  v5 = objc_msgSend(v4, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", CFSTR("/var/mobile/Library/Logs/CrashReporter/DiagnosticLogs/Maps/ARTraces/"), 1, 0, &v18);
  v6 = v18;

  if (v5)
  {

    goto LABEL_6;
  }
LABEL_17:

  return v6;
}

RoutePlanningWaypointRequest *RoutePlanningWaypointRequestFromSearchFieldItem(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;
  RoutePlanningWaypointRequest *v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  unsigned int v11;
  SavedRouteWaypointRequest *v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  uint64_t v18;
  _TtC4Maps16MapsFindMyHandle *v19;
  id v20;
  NSObject *v21;
  SavedRouteWaypointRequest *v22;
  NSObject *v23;
  SavedRouteWaypointRequest *v24;
  uint64_t v25;
  id v26;
  NSObject *v27;
  void *v28;
  void *v29;
  void *v30;
  unsigned int v31;
  id v32;
  double v33;
  CLLocationDegrees v34;
  void *v35;
  void *v36;
  void *v37;
  CLLocationDegrees v38;
  CLLocationCoordinate2D v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  id v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  SavedRouteWaypointRequest *v48;
  void *v49;
  void *v50;
  unsigned int v51;
  id v52;
  _BOOL4 v53;
  const char *v54;
  id v55;
  NSObject *v56;
  NSObject *v57;
  const char *v58;
  id v59;
  void *v60;
  void *v61;
  void *v62;
  id v63;
  NSObject *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  uint64_t v71;
  void *v72;
  id v73;
  NSObject *v74;
  AddressBookAddressWaypointRequest *v75;
  void *v76;
  id v77;
  NSObject *v78;
  void *v79;
  void *v80;
  void *v81;
  unsigned __int8 v82;
  void *v83;
  _TtC4Maps16MapsFindMyHandle *v84;
  void *v85;
  double v86;
  double v87;
  CorrectedLocationMapItemWaypointRequest *v88;
  id v89;
  NSObject *v90;
  NSObject *v91;
  void *v92;
  AddressBookAddressWaypointRequest *v93;
  void *v94;
  id v95;
  NSObject *v96;
  id v97;
  NSObject *v98;
  const char *v99;
  NSObject *v100;
  uint32_t v101;
  id v102;
  GEOComposedWaypointRequest *v103;
  void *v104;
  void *v105;
  id v106;
  NSObject *v107;
  SearchStringWaypointRequest *v108;
  void *v109;
  void *v110;
  void *v111;
  uint64_t v112;
  SearchStringWaypointRequest *v113;
  void *v114;
  void *v115;
  NSObject *v116;
  id v117;
  NSObject *v118;
  NSObject *v119;
  id v120;
  NSObject *v121;
  NSObject *v122;
  id v123;
  NSObject *v124;
  id v125;
  NSObject *v126;
  void *v127;
  _BOOL8 v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  id v134;
  void *v135;
  WaypointPlaceholder *v136;
  void *v138;
  id v139;
  NSObject *v140;
  GEOComposedWaypointRequest *v141;
  id v142;
  NSObject *v143;
  void *v144;
  NSObject *v145;
  void *v146;
  URLQueryWaypointRequest *v147;
  void *v148;
  void *v149;
  id v150;
  NSObject *v151;
  id v152;
  NSObject *v153;
  void *v154;
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  void *v159;
  _TtC4Maps16MapsFindMyHandle *v160;
  void *v161;
  void *v162;
  uint8_t buf[4];
  uint64_t v164;
  __int16 v165;
  SavedRouteWaypointRequest *v166;

  v2 = a1;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "routePlanningWaypointRequest"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "waypointRequest"));

  if (v4)
  {
    v5 = (RoutePlanningWaypointRequest *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "routePlanningWaypointRequest"));
    goto LABEL_134;
  }
  v6 = v2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "searchResult"));
  if (!v7
    || (v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "searchResult")),
        !objc_msgSend(v1, "isDynamicCurrentLocation")))
  {
    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "composedWaypoint"));
    if (v8)
    {
      v9 = (void *)v8;
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "composedWaypoint"));
      v11 = objc_msgSend(v10, "isCurrentLocation");

      if (v7)
      {

        if ((v11 & 1) != 0)
          goto LABEL_13;
      }
      else if (v11)
      {
        goto LABEL_13;
      }
    }
    else if (v7)
    {

    }
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "searchResult"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "routeData"));

    if (v14)
    {
      v15 = sub_1004328BC();
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138477827;
        v164 = (uint64_t)v14;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Using saved route as waypoint: %{private}@", buf, 0xCu);
      }

      v12 = -[SavedRouteWaypointRequest initWithSavedRouteData:]([SavedRouteWaypointRequest alloc], "initWithSavedRouteData:", v14);
      goto LABEL_124;
    }
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "composedWaypoint"));
    v18 = objc_opt_class(GEOComposedWaypointToRoute);
    if ((objc_opt_isKindOfClass(v17, v18) & 1) != 0)
    {
      v19 = v17;
      v20 = sub_1004328BC();
      v21 = objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138477827;
        v164 = (uint64_t)v19;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Using waypoint-to-route as waypoint: %{private}@", buf, 0xCu);
      }

      v22 = [SavedRouteWaypointRequest alloc];
      v23 = objc_claimAutoreleasedReturnValue(-[MapsFindMyHandle route](v19, "route"));
      v24 = -[SavedRouteWaypointRequest initWithSavedRoute:](v22, "initWithSavedRoute:", v23);
LABEL_22:
      v12 = v24;
LABEL_123:

LABEL_124:
      goto LABEL_125;
    }
    v25 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_maps_findMyHandle"));
    if (v25)
    {
      v19 = (_TtC4Maps16MapsFindMyHandle *)v25;
      v26 = sub_1004328BC();
      v27 = objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "Using MapsFindMyHandle", buf, 2u);
      }

LABEL_27:
      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "searchResult"));
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "composedWaypoint"));
      v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "location"));
      v31 = objc_msgSend(v30, "hasTimestamp");

      if (v31)
      {
        v161 = v17;
        v160 = v19;
        v32 = objc_alloc((Class)CLLocation);
        v159 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "searchResult"));
        v158 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v159, "composedWaypoint"));
        v157 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v158, "location"));
        v156 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v157, "latLng"));
        objc_msgSend(v156, "lat");
        v34 = v33;
        v155 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "searchResult"));
        v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v155, "composedWaypoint"));
        v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "location"));
        v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "latLng"));
        objc_msgSend(v37, "lng");
        v39 = CLLocationCoordinate2DMake(v34, v38);
        v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "searchResult"));
        v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "composedWaypoint"));
        v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "location"));
        objc_msgSend(v42, "timestamp");
        v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:"));
        v23 = objc_msgSend(v32, "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:", v43, v39.latitude, v39.longitude, 0.0, 0.0, 0.0);

        v44 = sub_1004328BC();
        v45 = objc_claimAutoreleasedReturnValue(v44);
        if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
        {
          -[NSObject coordinate](v23, "coordinate");
          v47 = v46;
          -[NSObject coordinate](v23, "coordinate");
          *(_DWORD *)buf = 134283777;
          v164 = v47;
          v165 = 2049;
          v166 = v48;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_INFO, "Create CLLocation from search result coordinate {%{private}f, %{private}f}", buf, 0x16u);
        }

        v19 = v160;
        v17 = v161;
        v14 = 0;
      }
      else
      {
        v23 = 0;
      }
      v12 = -[FindMyHandleWaypointRequest initWithHandle:location:]([_TtC4Maps27FindMyHandleWaypointRequest alloc], "initWithHandle:location:", v19, v23);
      v55 = sub_1004328BC();
      v56 = objc_claimAutoreleasedReturnValue(v55);
      v57 = v56;
      if (v12)
      {
        if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          v58 = "Using find my handle for waypoint request";
LABEL_63:
          _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_INFO, v58, buf, 2u);
          goto LABEL_64;
        }
        goto LABEL_64;
      }
      if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v164 = (uint64_t)v19;
        _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, "Failed to construct a find my handle request for handle: %@", buf, 0xCu);
      }

      goto LABEL_53;
    }
    v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "searchResult"));

    if (v49)
    {
      v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "searchResult"));
      v51 = objc_msgSend(v50, "locationType");

      v52 = sub_1004328BC();
      v23 = objc_claimAutoreleasedReturnValue(v52);
      v53 = os_log_type_enabled(v23, OS_LOG_TYPE_INFO);
      if (v51 != 4)
      {
        if (v53)
        {
          v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "searchResult"));
          *(_DWORD *)buf = 67109120;
          LODWORD(v164) = objc_msgSend(v65, "locationType");
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Not using AutoCompletePerson handle because the locationType is wrong: %u", buf, 8u);

        }
        v19 = 0;
LABEL_53:

        goto LABEL_54;
      }
      if (!v53)
      {
LABEL_45:

        v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_maps_autoCompletePerson"));
        v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "handle"));
        v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v61, "handle"));

        if (v62)
        {
          v63 = sub_1004328BC();
          v64 = objc_claimAutoreleasedReturnValue(v63);
          if (os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_INFO, "Create MapsFindMyHandle from search handle", buf, 2u);
          }

          v19 = -[MapsFindMyHandle initWithSearchFindMyHandle:]([_TtC4Maps16MapsFindMyHandle alloc], "initWithSearchFindMyHandle:", v62);
          if (v19)
            goto LABEL_27;
        }
        else
        {
          v19 = 0;
        }
LABEL_54:
        v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_maps_autoCompletePerson"));
        v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v66, "contact"));

        if (v67)
        {
          v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "searchResult"));
          v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "address"));
          if (v69)
          {
            v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "searchResult"));
            v71 = objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "address"));
          }
          else
          {
            v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_maps_autoCompletePerson"));
            v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "contact"));
            v71 = objc_claimAutoreleasedReturnValue(+[AddressBookAddress singleAddressForContact:](AddressBookAddress, "singleAddressForContact:", v72));

          }
          v73 = sub_1004328BC();
          v74 = objc_claimAutoreleasedReturnValue(v73);
          v23 = v71;
          if (os_log_type_enabled(v74, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v164 = v71;
            _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_INFO, "Found AddressBookAddress: %@", buf, 0xCu);
          }

          v75 = [AddressBookAddressWaypointRequest alloc];
          v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "mapItemIfGeocoded"));
          v12 = -[AddressBookAddressWaypointRequest initWithAddress:mapItem:](v75, "initWithAddress:mapItem:", v71, v76);

          v77 = sub_1004328BC();
          v78 = objc_claimAutoreleasedReturnValue(v77);
          v57 = v78;
          if (v12)
          {
            if (os_log_type_enabled(v78, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              v58 = "Using auto complete person contact for waypoint request";
              goto LABEL_63;
            }
LABEL_64:

            goto LABEL_123;
          }
          if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
          {
            v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_maps_autoCompletePerson"));
            *(_DWORD *)buf = 138412546;
            v164 = (uint64_t)v79;
            v165 = 2112;
            v166 = (SavedRouteWaypointRequest *)v23;
            _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, "Failed to construct an address book request for autocompletePerson: %@ address: %@", buf, 0x16u);

          }
        }
        v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "searchResult"));

        if (!v80)
        {
          v92 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "address"));

          if (v92)
          {
            v93 = [AddressBookAddressWaypointRequest alloc];
            v94 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "address"));
            v12 = -[AddressBookAddressWaypointRequest initWithAddress:](v93, "initWithAddress:", v94);

            v95 = sub_1004328BC();
            v96 = objc_claimAutoreleasedReturnValue(v95);
            v23 = v96;
            if (v12)
            {
              if (os_log_type_enabled(v96, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Using search field item address book address for waypoint request", buf, 2u);
              }
              goto LABEL_123;
            }
            if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
            {
              v104 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "address"));
              *(_DWORD *)buf = 138412290;
              v164 = (uint64_t)v104;
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "Failed to construct an address book request for address: %@", buf, 0xCu);

            }
          }
          v105 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "coreRecentContact"));

          if (v105)
          {
            v106 = sub_1004328BC();
            v107 = objc_claimAutoreleasedReturnValue(v106);
            if (os_log_type_enabled(v107, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_INFO, "Using search field item core recent contact for waypoint request", buf, 2u);
            }

            v108 = [SearchStringWaypointRequest alloc];
            v23 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "coreRecentContact"));
            v109 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject address](v23, "address"));
            v12 = -[SearchStringWaypointRequest initWithSearchString:completionItem:](v108, "initWithSearchString:completionItem:", v109, 0);

            goto LABEL_123;
          }
          v110 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "completion"));

          if (v110)
          {
            v162 = v14;
            v111 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "completion"));
            v112 = objc_claimAutoreleasedReturnValue(objc_msgSend(v111, "queryLine"));

            v113 = [SearchStringWaypointRequest alloc];
            v114 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "completion"));
            v115 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v114, "geoCompletionItem"));
            v116 = v112;
            v12 = -[SearchStringWaypointRequest initWithSearchString:completionItem:](v113, "initWithSearchString:completionItem:", v112, v115);

            v117 = sub_1004328BC();
            v118 = objc_claimAutoreleasedReturnValue(v117);
            v119 = v118;
            if (v12)
            {
              v14 = v162;
              if (os_log_type_enabled(v118, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_INFO, "Using search field item search string for waypoint request", buf, 2u);
              }

              v23 = v116;
              goto LABEL_123;
            }
            v14 = v162;
            if (os_log_type_enabled(v118, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412546;
              v164 = (uint64_t)v6;
              v165 = 2112;
              v166 = (SavedRouteWaypointRequest *)v116;
              _os_log_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_ERROR, "(completion) Failed to construct a request for search field item: %@ string: %@", buf, 0x16u);
            }

          }
          v138 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "composedWaypoint"));

          if (v138)
          {
            v139 = sub_1004328BC();
            v140 = objc_claimAutoreleasedReturnValue(v139);
            if (os_log_type_enabled(v140, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v140, OS_LOG_TYPE_INFO, "Using search field composed waypoint for waypoint request", buf, 2u);
            }

            v141 = [GEOComposedWaypointRequest alloc];
            v23 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "composedWaypoint"));
            v24 = -[GEOComposedWaypointRequest initWithComposedWaypoint:](v141, "initWithComposedWaypoint:", v23);
            goto LABEL_22;
          }
          v23 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "searchString"));
          if (v23)
          {
            v12 = -[SearchStringWaypointRequest initWithSearchString:completionItem:]([SearchStringWaypointRequest alloc], "initWithSearchString:completionItem:", v23, 0);
            v142 = sub_1004328BC();
            v143 = objc_claimAutoreleasedReturnValue(v142);
            v57 = v143;
            if (v12)
            {
              if (!os_log_type_enabled(v143, OS_LOG_TYPE_INFO))
                goto LABEL_64;
              *(_WORD *)buf = 0;
              v58 = "Using search field item search string for waypoint request";
              goto LABEL_63;
            }
            if (os_log_type_enabled(v143, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412546;
              v164 = (uint64_t)v6;
              v165 = 2112;
              v166 = (SavedRouteWaypointRequest *)v23;
              _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, "(searchString) Failed to construct a request for search field item: %@ string: %@", buf, 0x16u);
            }

          }
          v144 = v14;
          v145 = v23;
          v146 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "externalURLQuery"));

          if (v146
            && (v147 = [URLQueryWaypointRequest alloc],
                v148 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "externalURLQuery")),
                v149 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "externalQueryName")),
                v12 = -[URLQueryWaypointRequest initWithURLQuery:title:](v147, "initWithURLQuery:title:", v148, v149),
                v149,
                v148,
                v12))
          {
            v150 = sub_1004328BC();
            v151 = objc_claimAutoreleasedReturnValue(v150);
            if (os_log_type_enabled(v151, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v151, OS_LOG_TYPE_INFO, "Using search field item url query for waypoint request", buf, 2u);
            }

          }
          else
          {
            v152 = sub_1004328BC();
            v153 = objc_claimAutoreleasedReturnValue(v152);
            if (os_log_type_enabled(v153, OS_LOG_TYPE_ERROR))
            {
              v154 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "searchString"));
              *(_DWORD *)buf = 138412290;
              v164 = (uint64_t)v154;
              _os_log_impl((void *)&_mh_execute_header, v153, OS_LOG_TYPE_ERROR, "Failed to construct a request for search string: %@", buf, 0xCu);

            }
            +[NSException raise:format:](NSException, "raise:format:", NSGenericException, CFSTR("Failed to construct a WaypointRequest for %@"), v6);
            v12 = 0;
          }
          v23 = v145;
          v14 = v144;
          goto LABEL_123;
        }
        v23 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "searchResult"));
        if (-[NSObject hasExplicitlyProvidedComposedWaypoint](v23, "hasExplicitlyProvidedComposedWaypoint")&& (v81 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject composedWaypoint](v23, "composedWaypoint")), v82 = objc_msgSend(v81, "needsAdditionalNavData"), v81, (v82 & 1) == 0))
        {
          v102 = sub_1004328BC();
          v98 = objc_claimAutoreleasedReturnValue(v102);
          if (os_log_type_enabled(v98, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            v99 = "Using search result explicitly provided waypoint for waypoint request";
            v100 = v98;
            v101 = 2;
            goto LABEL_93;
          }
        }
        else
        {
          v83 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject mapItem](v23, "mapItem"));

          if (v83)
          {
            v84 = v19;
            v85 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject mapItem](v23, "mapItem"));
            if ((objc_msgSend(v85, "_hasCorrectedHomeWorkCoordinate") & 1) != 0
              || -[NSObject type](v23, "type") == 3
              || -[NSObject originalType](v23, "originalType") == 3
              || -[NSObject type](v23, "type") == 12
              || -[NSObject originalType](v23, "originalType") == 12)
            {
              -[NSObject coordinate](v23, "coordinate");
              if (v87 >= -180.0 && v87 <= 180.0 && v86 >= -90.0 && v86 <= 90.0)
              {
                v88 = [CorrectedLocationMapItemWaypointRequest alloc];
                -[NSObject coordinate](v23, "coordinate");
                v12 = -[CorrectedLocationMapItemWaypointRequest initWithCorrectedCoordinate:mapItem:](v88, "initWithCorrectedCoordinate:mapItem:", v85);
                v89 = sub_1004328BC();
                v90 = objc_claimAutoreleasedReturnValue(v89);
                v91 = v90;
                if (v12)
                {
                  if (os_log_type_enabled(v90, OS_LOG_TYPE_INFO))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_INFO, "Using search result corrected location map item for waypoint request", buf, 2u);
                  }
LABEL_121:

                  v19 = v84;
                  goto LABEL_122;
                }
                if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_ERROR, "Corrected coordinate for request was invalid, falling back to mapItem", buf, 2u);
                }

              }
            }
            v91 = objc_claimAutoreleasedReturnValue(-[NSObject address](v23, "address"));
            if (v91)
            {
              v12 = -[AddressBookAddressWaypointRequest initWithAddress:mapItem:]([AddressBookAddressWaypointRequest alloc], "initWithAddress:mapItem:", v91, v85);
              v120 = sub_1004328BC();
              v121 = objc_claimAutoreleasedReturnValue(v120);
              v122 = v121;
              if (v12)
              {
                if (os_log_type_enabled(v121, OS_LOG_TYPE_INFO))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v122, OS_LOG_TYPE_INFO, "Using search result address book address for waypoint request", buf, 2u);
                }

                goto LABEL_121;
              }
              if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412290;
                v164 = (uint64_t)v91;
                _os_log_impl((void *)&_mh_execute_header, v122, OS_LOG_TYPE_ERROR, "Failed to construct an address book request for address: %@", buf, 0xCu);
              }

            }
            v123 = sub_1004328BC();
            v124 = objc_claimAutoreleasedReturnValue(v123);
            if (os_log_type_enabled(v124, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v124, OS_LOG_TYPE_INFO, "Using search result map item for waypoint request", buf, 2u);
            }

            v12 = -[MapItemWaypointRequest initWithMapItem:]([MapItemWaypointRequest alloc], "initWithMapItem:", v85);
            goto LABEL_121;
          }
          v97 = sub_1004328BC();
          v98 = objc_claimAutoreleasedReturnValue(v97);
          if (os_log_type_enabled(v98, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v164 = (uint64_t)v23;
            v99 = "Falling back to composedWaypoint for searchResult: %@";
            v100 = v98;
            v101 = 12;
LABEL_93:
            _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_INFO, v99, buf, v101);
          }
        }

        v103 = [GEOComposedWaypointRequest alloc];
        v85 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject composedWaypoint](v23, "composedWaypoint"));
        v12 = -[GEOComposedWaypointRequest initWithComposedWaypoint:](v103, "initWithComposedWaypoint:", v85);
LABEL_122:

        goto LABEL_123;
      }
      *(_WORD *)buf = 0;
      v54 = "Using AutoCompletePerson handle";
    }
    else
    {
      v59 = sub_1004328BC();
      v23 = objc_claimAutoreleasedReturnValue(v59);
      if (!os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        goto LABEL_45;
      *(_WORD *)buf = 0;
      v54 = "No search result; trying AutoCompletePerson handle";
    }
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, v54, buf, 2u);
    goto LABEL_45;
  }

LABEL_13:
  v12 = objc_alloc_init(CurrentLocationWaypointRequest);
LABEL_125:

  v125 = sub_1004328BC();
  v126 = objc_claimAutoreleasedReturnValue(v125);
  if (os_log_type_enabled(v126, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412546;
    v164 = (uint64_t)v6;
    v165 = 2112;
    v166 = v12;
    _os_log_impl((void *)&_mh_execute_header, v126, OS_LOG_TYPE_INFO, "Converted %@\ninto %@", buf, 0x16u);
  }

  v127 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "personalizedDirectionsWaypoint"));
  v128 = 0;
  if ((objc_msgSend(v6, "isFindMyPerson") & 1) == 0 && !v127)
  {
    v129 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "waypoint"));
    v130 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v129, "requestSearchString"));
    v128 = objc_msgSend(v130, "length") != 0;

  }
  v131 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "personalizedAddressName"));
  v132 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v127, "responseSearch"));
  v133 = v132;
  if (v132)
    v134 = v132;
  else
    v134 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v127, "requestSearch"));
  v135 = v134;

  v136 = -[WaypointPlaceholder initWithName:displayableMarker:]([WaypointPlaceholder alloc], "initWithName:displayableMarker:", v131, v135);
  v5 = -[RoutePlanningWaypointRequest initWithWaypointPlaceholder:request:preferredNameSource:]([RoutePlanningWaypointRequest alloc], "initWithWaypointPlaceholder:request:preferredNameSource:", v136, v12, v128);

LABEL_134:
  return v5;
}

id sub_1004AE5E8(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "shouldRecordExtendedLaunchTime");
  if ((_DWORD)result)
    return objc_msgSend(*(id *)(a1 + 32), "finishedTest:extraResults:", CFSTR("launch"), 0);
  return result;
}

uint64_t sub_1004AE62C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1004AE800()
{
  objc_end_catch();
  JUMPOUT(0x1004AE808);
}

void sub_1004AEE78(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4;
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  id v12;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    v7 = a4;
    v8 = a3;
    v9 = a2;
    v12 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "mapSelectionState"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "searchFieldItem"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "searchInfo"));

    (*(void (**)(uint64_t, id, id, id, void *, void *))(v4 + 16))(v4, v9, v8, v12, v10, v11);
  }
}

id sub_1004AF8F0()
{
  if (qword_1014D2650 != -1)
    dispatch_once(&qword_1014D2650, &stru_1011B8A50);
  return (id)qword_1014D2648;
}

void sub_1004B04D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double sub_1004B04F0(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, double a5, double a6)
{
  double v11;
  uint64_t v12;
  double result;

  if (GEOPolylineCoordinateIsABeforeOrEqualToB(objc_msgSend(*(id *)(a1 + 32), "endValidRouteCoordinate"), a3))
  {
    objc_msgSend(*(id *)(a1 + 40), "distanceBetweenRouteCoordinate:andRouteCoordinate:", a2, objc_msgSend(*(id *)(a1 + 32), "endValidRouteCoordinate"));
    a6 = v11 / a5 * a6;
    *a4 = 1;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  result = a6 + *(double *)(v12 + 24);
  *(double *)(v12 + 24) = result;
  return result;
}

id sub_1004B0648(uint64_t a1, void *a2)
{
  void *v4;
  id v5;
  void *v6;
  void *v7;
  _QWORD v9[5];
  id v10;
  id v11;

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1004B0708;
  v9[3] = &unk_1011B8930;
  v4 = *(void **)(a1 + 40);
  v9[4] = *(_QWORD *)(a1 + 32);
  v10 = v4;
  v11 = *(id *)(a1 + 48);
  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "optionsWithArgumentHandler:", v9));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "stringWithOptions:", v6));

  return v7;
}

id sub_1004B0708(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_updateStringArgument:route:guidanceEvent:", a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

id sub_1004B07E4(uint64_t a1, void *a2)
{
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void **v12;
  uint64_t v13;
  id (*v14)(uint64_t, uint64_t);
  void *v15;
  uint64_t v16;
  id v17;
  id v18;
  NSAttributedStringKey v19;
  void *v20;

  v12 = _NSConcreteStackBlock;
  v14 = sub_1004B0948;
  v15 = &unk_1011B8930;
  v4 = *(void **)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 32);
  v13 = 3221225472;
  v17 = v4;
  v18 = *(id *)(a1 + 48);
  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "optionsWithArgumentHandler:", &v12));
  objc_msgSend(v6, "setShouldUpdateFormatStrings:", 0, v12, v13, v14, v15, v16);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "composedStringWithOptions:", v6));

  v19 = NSFontAttributeName;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont system12](UIFont, "system12"));
  v20 = v8;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v20, &v19, 1));

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSAttributedString _mapkit_attributedStringForComposedString:defaultAttributes:](NSAttributedString, "_mapkit_attributedStringForComposedString:defaultAttributes:", v7, v9));
  return v10;
}

id sub_1004B0948(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_updateStringArgument:route:guidanceEvent:", a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

id sub_1004B0B78(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  _QWORD v10[5];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "directions"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1004B0CAC;
  v10[3] = &unk_1011B89A8;
  v10[4] = *(_QWORD *)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "_geo_map:", v10));

  if ((objc_msgSend(v3, "isPreferredLaneForManeuver") & 1) != 0
    || objc_msgSend(v3, "isLaneForManeuver"))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "subarrayWithRange:", 1, (char *)objc_msgSend(v5, "count") - 1));
    v8 = objc_msgSend(objc_alloc((Class)CPLane), "initWithAngles:highlightedAngle:isPreferred:", v7, v6, objc_msgSend(v3, "isPreferredLaneForManeuver"));

  }
  else
  {
    v8 = objc_msgSend(objc_alloc((Class)CPLane), "initWithAngles:", v5);
  }

  return v8;
}

id sub_1004B0CAC(uint64_t a1, void *a2)
{
  double v2;
  double v3;
  id v4;
  void *v5;
  id v6;

  objc_msgSend(*(id *)(a1 + 32), "_angleForGeoLaneDirection:", objc_msgSend(a2, "direction"));
  v3 = v2;
  v4 = objc_alloc((Class)NSMeasurement);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSUnitAngle degrees](NSUnitAngle, "degrees"));
  v6 = objc_msgSend(v4, "initWithDoubleValue:unit:", v5, v3);

  return v6;
}

void sub_1004B105C(id a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  _QWORD v6[3];
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  _QWORD v10[3];
  _QWORD v11[3];
  _QWORD v12[3];
  _QWORD v13[3];

  v12[0] = NSLocaleMeasurementSystemUS;
  v10[0] = &off_10126D780;
  v10[1] = &off_10126D810;
  v11[0] = &off_101273428;
  v11[1] = &off_101273488;
  v10[2] = &off_10126D7E0;
  v11[2] = &off_1012734E8;
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v11, v10, 3));
  v13[0] = v1;
  v12[1] = NSLocaleMeasurementSystemMetric;
  v8[0] = &off_10126D780;
  v8[1] = &off_10126D810;
  v9[0] = &off_101273548;
  v9[1] = &off_1012735A8;
  v8[2] = &off_10126D7E0;
  v9[2] = &off_101273608;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v9, v8, 3));
  v12[2] = NSLocaleMeasurementSystemUK;
  v13[1] = v2;
  v6[0] = &off_10126D780;
  v6[1] = &off_10126D810;
  v7[0] = &off_101273668;
  v7[1] = &off_1012736C8;
  v6[2] = &off_10126D7E0;
  v7[2] = &off_101273728;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v7, v6, 3));
  v13[2] = v3;
  v4 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v13, v12, 3));
  v5 = (void *)qword_1014D2638;
  qword_1014D2638 = v4;

}

NSNumber *__cdecl sub_1004B1944(id a1, _CarMetadataGuidanceEventPair *a2)
{
  return -[_CarMetadataGuidanceEventPair cpIndex](a2, "cpIndex");
}

void sub_1004B1C90(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CarMetadataNavigationListener");
  v2 = (void *)qword_1014D2648;
  qword_1014D2648 = (uint64_t)v1;

}

double sub_1004B31F0()
{
  void *v0;
  void *v1;
  double v2;
  double v3;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[CarDisplayController sharedInstance](CarDisplayController, "sharedInstance"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "screenTraitCollection"));
  objc_msgSend(v1, "displayScale");
  v3 = 1.0 / v2;

  return v3;
}

uint64_t sub_1004B34D8(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = a2;
  v5 = objc_opt_class(v2, v4);
  LOBYTE(v2) = objc_opt_isKindOfClass(v3, v5);

  return v2 & 1;
}

CGFloat sub_1004B3958(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  void *v16;
  void *v17;
  id v18;

  v16 = (void *)objc_claimAutoreleasedReturnValue(+[CarDisplayController sharedInstance](CarDisplayController, "sharedInstance"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "screenTraitCollection"));
  v18 = objc_msgSend(v17, "layoutDirection");

  if (v18 == (id)1)
    return sub_1004C5E00(a1, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

OverlayContainerDimmingController *sub_1004B484C()
{
  void *v0;
  DimmingBehaviour *v1;
  void *v2;
  DimmingBehaviour *v3;
  void *v4;
  DimmingBehaviour *v5;
  void *v6;
  OverlayContainerDimmingController *v7;
  DimmingBehaviour *v8;
  void *v9;
  OverlayContainerDimmingController *v10;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSMapTable strongToStrongObjectsMapTable](NSMapTable, "strongToStrongObjectsMapTable"));
  v1 = sub_10075C31C(&stru_1011B8A90);
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  objc_msgSend(v0, "setObject:forKey:", v2, objc_opt_class(NavTrayViewController));
  objc_msgSend(v0, "setObject:forKey:", v2, objc_opt_class(NavShareETAViewController));
  objc_msgSend(v0, "setObject:forKey:", v2, objc_opt_class(NavTrafficIncidentContaineeViewController));
  objc_msgSend(v0, "setObject:forKey:", v2, objc_opt_class(NavCategoryListViewController));
  objc_msgSend(v0, "setObject:forKey:", v2, objc_opt_class(NavTrafficIncidentReportingContaineeViewController));
  v3 = sub_10075C7D4();
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  objc_msgSend(v0, "setObject:forKey:", v4, objc_opt_class(TrafficIncidentOptionalRerouteContaineeViewController));

  v5 = sub_10075C7D4();
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  objc_msgSend(v0, "setObject:forKey:", v6, objc_opt_class(NavTrafficIncidentReportSubmissionContaineeViewController));

  v7 = [OverlayContainerDimmingController alloc];
  v8 = sub_10075C31C(&stru_1011C5AA0);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = -[OverlayContainerDimmingController initWithDimmingBehaviour:customBehaviours:](v7, "initWithDimmingBehaviour:customBehaviours:", v9, v0);

  return v10;
}

unint64_t sub_1004B49C0(id a1, OverlayContainerViewController *a2)
{
  return 1;
}

void sub_1004B5C78(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "updateViewForCurrentState");
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v2, "layoutIfNeeded");

}

id sub_1004B6D40(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "detach");
}

id sub_1004B70D0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;

  v3 = a2;
  if (objc_msgSend(v3, "containsString:", CFSTR("%[origin]")))
  {
    v4 = *(void **)(a1 + 32);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localSearchCompletion"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "directionIntent"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "origin"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "localSearchCompletion"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "directionIntentOrigin"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "_titleOfResolvedItem:withSearchCompletion:", v7, v9));

    if (v10)
    {
      v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stringByReplacingOccurrencesOfString:withString:", CFSTR("%[origin]"), v10));

      v3 = (id)v11;
    }

  }
  if (objc_msgSend(v3, "containsString:", CFSTR("%[destination]")))
  {
    v12 = *(void **)(a1 + 32);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "localSearchCompletion"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "directionIntent"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "destination"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "localSearchCompletion"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "directionIntentDestination"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "_titleOfResolvedItem:withSearchCompletion:", v15, v17));

    if (v18)
    {
      v19 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stringByReplacingOccurrencesOfString:withString:", CFSTR("%[destination]"), v18));

      v3 = (id)v19;
    }

  }
  return v3;
}

void sub_1004B7884(id a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v1 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localizedStringForKey:value:table:", CFSTR(" · [List view details separator]"), CFSTR("localized string not found"), 0));
  v2 = (void *)qword_1014D2660;
  qword_1014D2660 = v1;

}

void sub_1004B8B8C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1004B8BA8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[5];
  _QWORD v6[5];
  id v7;
  _QWORD v8[4];
  id v9;

  v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1004B8CD8;
  v8[3] = &unk_1011B8B20;
  objc_copyWeak(&v9, (id *)(a1 + 40));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1004B8E40;
  v6[3] = &unk_1011B8B48;
  v6[4] = *(_QWORD *)(a1 + 32);
  objc_copyWeak(&v7, (id *)(a1 + 40));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1004B8EDC;
  v5[3] = &unk_1011AE420;
  v5[4] = *(_QWORD *)(a1 + 32);
  v4 = objc_msgSend(v3, "addCheckmarkRowsGroupWithContent:get:set:", v8, v6, v5);
  objc_destroyWeak(&v7);
  objc_destroyWeak(&v9);

}

void sub_1004B8CBC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1004B8CD8(uint64_t a1, void *a2)
{
  id v3;
  id *v4;
  id WeakRetained;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];

  v3 = a2;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v4 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "environmentURLs", 0));

  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v17;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v17 != v9)
          objc_enumerationMutation(v6);
        v11 = *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)v10);
        v12 = objc_loadWeakRetained(v4);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "environmentURLs"));
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", v11));
        v15 = objc_msgSend(v3, "addRowWithTitle:value:", v11, v14);

        v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v8);
  }

}

id sub_1004B8E40(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id WeakRetained;
  void *v13;

  v2 = objc_msgSend(*(id *)(a1 + 32), "submissionURL");
  v4 = GEOGetURL(v2, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "absoluteString"));

  v7 = objc_msgSend(*(id *)(a1 + 32), "lookupURL");
  v9 = GEOGetURL(v7, v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "absoluteString"));

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "selectedEnvironmentURLWithSubmissionURL:lookupURL:", v6, v11));

  return v13;
}

void sub_1004B8EDC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v3 = a2;
  v10 = v3;
  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stringByAppendingString:", CFSTR("v1/feedback/submission.arpc")));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "stringByAppendingString:", CFSTR("v1/feedback/layout.arpc")));
    if (v4)
    {
      v6 = GEOURLConfigKey(objc_msgSend(*(id *)(a1 + 32), "submissionURL"));
      GEOConfigSetString(v6, v7, v4);
    }
    if (v5)
    {
      v8 = GEOURLConfigKey(objc_msgSend(*(id *)(a1 + 32), "lookupURL"));
      GEOConfigSetString(v8, v9, v5);

    }
  }
  else
  {
    v4 = 0;
  }

}

void sub_1004B9864(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_1014D2670;
  qword_1014D2670 = (uint64_t)v1;

}

void sub_1004B9AE4(id a1)
{
  void *v1;
  void *v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[GEOAPSharedStateData sharedData](GEOAPSharedStateData, "sharedData"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[MKLocationManager sharedLocationManager](MKLocationManager, "sharedLocationManager"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "currentLocation"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "latLng"));
  objc_msgSend(v4, "setCurrentMetro:", v3);

}

void sub_1004B9C04(id a1)
{
  void *v1;
  void *v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[GEOAPSharedStateData sharedData](GEOAPSharedStateData, "sharedData"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[MKLocationManager sharedLocationManager](MKLocationManager, "sharedLocationManager"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "currentLocation"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "latLng"));
  objc_msgSend(v4, "setCurrentMetro:", v3);

}

void sub_1004B9DB4(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  id v5;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = objc_alloc((Class)GEOLatLng);
    objc_msgSend(*(id *)(a1 + 32), "coordinate");
    v5 = objc_msgSend(v2, "initWithCoordinate:");
  }
  else
  {
    v5 = 0;
  }
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[GEOAPSharedStateData sharedData](GEOAPSharedStateData, "sharedData"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_bestAvailableCountryCode"));
  objc_msgSend(v3, "setMeCardHomeCountry:andHomeLocation:", v4, v5);

}

void sub_1004BAEC8(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  id v4;
  __int128 v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  _BOOL4 v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  __int128 v16;
  id obj;
  _QWORD v19[5];
  id v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint8_t buf[4];
  void *v28;
  _BYTE v29[128];

  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "viewModel"));
  obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "childViewModels"));

  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v29, 16);
  if (v4)
  {
    v6 = *(_QWORD *)v24;
    *(_QWORD *)&v5 = 138412290;
    v16 = v5;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v24 != v6)
          objc_enumerationMutation(obj);
        v8 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "artworkURL", v16));
        v10 = v9 == 0;

        if (v10)
        {
          v11 = sub_1004BB140();
          v12 = objc_claimAutoreleasedReturnValue(v11);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "title"));
            *(_DWORD *)buf = v16;
            v28 = v13;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "View model for %@ had no artwork URL", buf, 0xCu);

          }
        }
        v14 = (void *)objc_claimAutoreleasedReturnValue(+[MKAppImageManager sharedImageManager](MKAppImageManager, "sharedImageManager"));
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "artworkURL"));
        v19[0] = _NSConcreteStackBlock;
        v19[1] = 3221225472;
        v19[2] = sub_1004BB180;
        v19[3] = &unk_1011B8BB0;
        v19[4] = v8;
        objc_copyWeak(&v20, v1);
        v21 = *(_OWORD *)(a1 + 40);
        v22 = *(_QWORD *)(a1 + 56);
        objc_msgSend(v14, "loadAppImageAtURL:completionHandler:", v15, v19);

        objc_destroyWeak(&v20);
      }
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v29, 16);
    }
    while (v4);
  }

}

void sub_1004BB124(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

id sub_1004BB140()
{
  if (qword_1014D2688 != -1)
    dispatch_once(&qword_1014D2688, &stru_1011B8C68);
  return (id)qword_1014D2680;
}

void sub_1004BB180(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7;
  id v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  _QWORD *WeakRetained;
  id v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  void *v28;

  v7 = a2;
  v8 = a5;
  v9 = v8;
  if (v7 && v8)
  {
    v10 = sub_1004BB140();
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "title"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "artworkURL"));
      *(_DWORD *)buf = 138412546;
      v26 = v12;
      v27 = 2112;
      v28 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to fetch app icon for %@ at url %@", buf, 0x16u);

    }
  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v15 = objc_msgSend(objc_alloc((Class)ISImageDescriptor), "initWithSize:scale:", *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64));
    objc_msgSend(v15, "setShape:", 1);
    v16 = objc_msgSend(objc_alloc((Class)IFImage), "initWithCGImage:scale:", objc_msgSend(objc_retainAutorelease(v7), "CGImage"), *(double *)(a1 + 64));
    v17 = objc_alloc((Class)ISIcon);
    v24 = v16;
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v24, 1));
    v19 = objc_msgSend(v17, "initWithImages:", v18);

    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "prepareImageForDescriptor:", v15));
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage imageWithCGImage:](UIImage, "imageWithCGImage:", objc_msgSend(v20, "CGImage")));
    v22 = (void *)WeakRetained[13];
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
    objc_msgSend(v22, "setObject:forKeyedSubscript:", v21, v23);

  }
}

void sub_1004BB51C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1004BB540(uint64_t a1, void *a2, void *a3, int a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  id *v11;
  id WeakRetained;
  void *v13;
  void *v14;
  double v15;
  id v16;
  void *v17;
  _QWORD v18[4];
  id v19;
  id v20;
  uint8_t buf[4];
  id v22;

  v7 = a2;
  v8 = a3;
  if (v8)
  {
    v9 = sub_1004BB140();
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v22 = v8;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed to load integration artwork: %@", buf, 0xCu);
    }

  }
  else
  {
    v11 = (id *)(a1 + 40);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "viewModel"));
    v14 = *(void **)(a1 + 32);

    if (v13 == v14)
    {
      if (a4)
        v15 = 0.0;
      else
        v15 = 0.300000012;
      v16 = objc_loadWeakRetained(v11);
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "artworkImageView"));
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      v18[2] = sub_1004BB72C;
      v18[3] = &unk_1011AD1E8;
      objc_copyWeak(&v20, v11);
      v19 = v7;
      +[UIView transitionWithView:duration:options:animations:completion:](UIView, "transitionWithView:duration:options:animations:completion:", v17, 5242882, v18, &stru_1011B8BF8, v15);

      objc_destroyWeak(&v20);
    }
  }

}

void sub_1004BB710(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1004BB72C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id WeakRetained;

  v1 = *(_QWORD *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "artworkImageView"));
  objc_msgSend(v2, "setImage:", v1);

}

void sub_1004BB778(id a1, BOOL a2)
{
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = sub_1004BB140();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Successfully displayed artwork.", v4, 2u);
  }

}

void sub_1004BCEF4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1004BCF10(id *a1, void *a2)
{
  void *v3;
  id WeakRetained;
  void *v5;
  void (**v6)(id, void *);

  v6 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "childViewModels"));

  if (v3)
  {
    WeakRetained = objc_loadWeakRetained(a1 + 6);
    if (WeakRetained)
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "_allMenuElementsForMediaIntegration:", a1[4]));
      v6[2](v6, v5);

    }
  }
  else
  {
    v6[2](v6, &__NSArray0__struct);
  }

}

void sub_1004BD2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1004BD2E4(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
    objc_msgSend(v3, "mediaIntegrationCell:didSelectChildLink:", v4, *(_QWORD *)(a1 + 32));

    WeakRetained = v4;
  }

}

id sub_1004BD3BC(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v7;

  v1 = *(void **)(a1 + 32);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "viewModel"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "_buildDeferredMenuElementForMediaIntegration:", v2));

  if (v3)
  {
    v7 = v3;
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v7, 1));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIMenu menuWithChildren:](UIMenu, "menuWithChildren:", v4));

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_1004BDAEC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CuratedCollectionMediaIntegrationTableViewCell");
  v2 = (void *)qword_1014D2680;
  qword_1014D2680 = (uint64_t)v1;

}

id sub_1004BDD24()
{
  if (qword_1014D2698 != -1)
    dispatch_once(&qword_1014D2698, &stru_1011B8CD8);
  return (id)qword_1014D2690;
}

void sub_1004BE438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  char a67;

  _Block_object_dispose(&a53, 8);
  _Block_object_dispose(&a57, 8);
  _Block_object_dispose(&a61, 8);
  _Block_object_dispose(&a67, 8);
  _Block_object_dispose(&STACK[0x200], 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1004BE4E0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1004BE4F0(uint64_t a1)
{

}

void sub_1004BE4F8(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v7;
  id v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  id v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD v22[4];
  id v23;
  id v24;
  id v25;

  v7 = a2;
  v8 = objc_msgSend(v7, "localizedStandardRangeOfString:", *(_QWORD *)(a1 + 32));
  v10 = v9;
  if (*(_BYTE *)(a1 + 120))
    v11 = v8 == 0;
  else
    v11 = 0;
  if (v11 || (!*(_BYTE *)(a1 + 120) ? (v12 = v8 == (id)0x7FFFFFFFFFFFFFFFLL) : (v12 = 1), !v12))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) += v9;
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v7);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = a3;
    *a4 = 1;
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), *(id *)(a1 + 32));
    v13 = objc_msgSend(v7, "length");
    if (v13)
      *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24) = (double)v10 / (double)(unint64_t)v13
                                                                  + *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8)
                                                                              + 24);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_1004BE6BC;
    v22[3] = &unk_1011B8C90;
    v23 = v7;
    v24 = *(id *)(a1 + 48);
    v25 = *(id *)(a1 + 56);
    v14 = objc_retainBlock(v22);
    v15 = v14;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40))
    {
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 40))
      {
LABEL_16:

        goto LABEL_17;
      }
      v16 = ((uint64_t (*)(_QWORD *))v14[2])(v14);
      v17 = objc_claimAutoreleasedReturnValue(v16);
      v18 = *(_QWORD *)(a1 + 112);
    }
    else
    {
      v19 = ((uint64_t (*)(_QWORD *))v14[2])(v14);
      v17 = objc_claimAutoreleasedReturnValue(v19);
      v18 = *(_QWORD *)(a1 + 104);
    }
    v20 = *(_QWORD *)(v18 + 8);
    v21 = *(void **)(v20 + 40);
    *(_QWORD *)(v20 + 40) = v17;

    goto LABEL_16;
  }
LABEL_17:

}

_TtC4Maps22AutocompleteQueryToken *sub_1004BE6BC(id *a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  _TtC4Maps22AutocompleteQueryToken *v5;

  v2 = objc_msgSend(a1[4], "length");
  v3 = (uint64_t)objc_msgSend(a1[5], "rangeOfString:", a1[4]);
  if (qword_1014D26A8 != -1)
    dispatch_once(&qword_1014D26A8, &stru_1011B8CF8);
  if (v3 == 0x7FFFFFFFFFFFFFFFLL)
    v3 = -1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1014D26A0, "numberFromString:", a1[4]));
  v5 = -[AutocompleteQueryToken initWithMatchLength:matchPosition:isNumber:matchLocation:]([_TtC4Maps22AutocompleteQueryToken alloc], "initWithMatchLength:matchPosition:isNumber:matchLocation:", v2, v3, v4 != 0, objc_msgSend(a1[6], "indexOfObject:", a1[4]));

  return v5;
}

void sub_1004BEA70(id a1)
{
  void *v1;
  void *v2;
  id v3;
  void *v4;
  id v5;

  v5 = objc_alloc_init((Class)NSMutableCharacterSet);
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet whitespaceAndNewlineCharacterSet](NSCharacterSet, "whitespaceAndNewlineCharacterSet"));
  objc_msgSend(v5, "formUnionWithCharacterSet:", v1);

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet punctuationCharacterSet](NSCharacterSet, "punctuationCharacterSet"));
  objc_msgSend(v5, "formUnionWithCharacterSet:", v2);

  v3 = objc_msgSend(v5, "copy");
  v4 = (void *)qword_1014D2690;
  qword_1014D2690 = (uint64_t)v3;

}

void sub_1004BEB00(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSNumberFormatter);
  v2 = (void *)qword_1014D26A0;
  qword_1014D26A0 = (uint64_t)v1;

  objc_msgSend((id)qword_1014D26A0, "setNumberStyle:", 1);
}

NavTrayStackedLabel *sub_1004C04F8(uint64_t a1, float a2)
{
  NavTrayStackedLabel *v4;
  void *v5;
  void *v6;
  void *v7;
  double v8;
  void *v9;
  void *v10;
  void *v11;
  double v12;

  v4 = objc_opt_new(NavTrayStackedLabel);
  -[NavTrayStackedLabel setTranslatesAutoresizingMaskIntoConstraints:](v4, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "minimizedValueToTitlePadding");
  -[NavTrayStackedLabel setInterLabelPadding:](v4, "setInterLabelPadding:");
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "minimizedValueTextColor"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[NavTrayStackedLabel topLabel](v4, "topLabel"));
  objc_msgSend(v6, "setTextColor:", v5);

  v7 = (void *)objc_claimAutoreleasedReturnValue(-[NavTrayStackedLabel topLabel](v4, "topLabel"));
  LODWORD(v8) = 1148829696;
  objc_msgSend(v7, "setContentCompressionResistancePriority:forAxis:", 0, v8);

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "minimizedTitleTextColor"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(-[NavTrayStackedLabel bottomLabel](v4, "bottomLabel"));
  objc_msgSend(v10, "setTextColor:", v9);

  v11 = (void *)objc_claimAutoreleasedReturnValue(-[NavTrayStackedLabel bottomLabel](v4, "bottomLabel"));
  *(float *)&v12 = a2;
  objc_msgSend(v11, "setContentCompressionResistancePriority:forAxis:", 0, v12);

  return v4;
}

id sub_1004C07D8(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_updateLayout");
  objc_msgSend(*(id *)(a1 + 32), "_updateContentAndReloadStackView:", 0);
  return objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
}

void sub_1004C080C(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v1, "updatedHeight");

}

id sub_1004C09DC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateLayout");
}

id sub_1004C1BD4()
{
  if (qword_1014D26B8 != -1)
    dispatch_once(&qword_1014D26B8, &stru_1011B8D40);
  return (id)qword_1014D26B0;
}

void sub_1004C2CBC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "NavTrayHeaderView");
  v2 = (void *)qword_1014D26B0;
  qword_1014D26B0 = (uint64_t)v1;

}

id sub_1004C5118()
{
  if (qword_1014D26C8 != -1)
    dispatch_once(&qword_1014D26C8, &stru_1011B8D60);
  return (id)qword_1014D26C0;
}

void sub_1004C5DD0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "ChromeMapSelection");
  v2 = (void *)qword_1014D26C0;
  qword_1014D26C0 = (uint64_t)v1;

}

CGFloat sub_1004C5E00(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double MinX;
  double Width;
  CGRect v19;
  CGRect v20;

  MinX = CGRectGetMinX(*(CGRect *)&a1);
  v19.origin.x = a1;
  v19.origin.y = a2;
  v19.size.width = a3;
  v19.size.height = a4;
  Width = CGRectGetWidth(v19);
  v20.origin.x = a5;
  v20.origin.y = a6;
  v20.size.width = a7;
  v20.size.height = a8;
  return CGRectGetMaxX(v20) - MinX - Width;
}

void sub_1004C7030(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1004C7054(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  _QWORD v11[5];
  id v12;
  uint8_t buf[4];
  id v14;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v8 = WeakRetained;
  if (WeakRetained)
  {
    if (!v5 || v6)
    {
      v9 = sub_1004326FC();
      v10 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v14 = v6;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed to get virtual garage with error: %@", buf, 0xCu);
      }

    }
    else
    {
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_1004C7188;
      v11[3] = &unk_1011AC8B0;
      v11[4] = WeakRetained;
      v12 = v5;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, v11);

    }
  }

}

id sub_1004C7188(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 120), *(id *)(a1 + 40));
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 128), *(id *)(a1 + 40));
  return objc_msgSend(*(id *)(a1 + 32), "_refreshSelectedVehicleDisplay");
}

void sub_1004C9098(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSIndexSet indexSetWithIndex:](NSIndexSet, "indexSetWithIndex:", *(_QWORD *)(a1 + 40)));
  objc_msgSend(v3, "reloadSections:", v2);

}

id sub_1004C90F8(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "isDisplayingSingleTrip");
  if ((_DWORD)result)
    return objc_msgSend(*(id *)(a1 + 32), "_scrollToCellToShowAtMediumLayoutAnimated:", 0);
  return result;
}

void sub_1004C93A8(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView"));
  objc_msgSend(v2, "reloadSections:", *(_QWORD *)(a1 + 40));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView"));
  objc_msgSend(v3, "deleteSections:", *(_QWORD *)(a1 + 48));

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView"));
  objc_msgSend(v4, "insertSections:", *(_QWORD *)(a1 + 56));

}

id sub_1004C97CC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "suspend");
}

void sub_1004C9F7C(uint64_t a1, int a2, uint64_t a3)
{
  PushNotificationPrompt *v5;
  uint64_t v6;
  void *v7;
  PushNotificationPrompt *v8;
  void *v9;
  _QWORD v10[5];
  id v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  id v18;

  if (a2)
  {
    v13 = 0;
    v14 = &v13;
    v15 = 0x3032000000;
    v16 = sub_1004CA0B4;
    v17 = sub_1004CA0C4;
    v18 = 0;
    v5 = [PushNotificationPrompt alloc];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1004CA0CC;
    v10[3] = &unk_1011B3B68;
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(void **)(a1 + 40);
    v12 = &v13;
    v10[4] = v6;
    v11 = v7;
    v8 = -[PushNotificationPrompt initWithReason:authorizationStatus:completion:](v5, "initWithReason:authorizationStatus:completion:", 4, a3, v10);
    v9 = (void *)v14[5];
    v14[5] = (uint64_t)v8;

    objc_msgSend(*(id *)(a1 + 32), "_maps_topMostPresentViewController:animated:completion:", v14[5], 1, 0);
    _Block_object_dispose(&v13, 8);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "_promptForSimulationAndStartNavigationForRouteCollection:", *(_QWORD *)(a1 + 40));
  }
}

void sub_1004CA09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1004CA0B4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1004CA0C4(uint64_t a1)
{

}

void sub_1004CA0CC(_QWORD *a1)
{
  void *v2;
  void *v3;
  _QWORD v4[5];
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[6] + 8) + 40), "presentingViewController"));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1004CA160;
  v4[3] = &unk_1011AC8B0;
  v3 = (void *)a1[5];
  v4[4] = a1[4];
  v5 = v3;
  objc_msgSend(v2, "dismissViewControllerAnimated:completion:", 1, v4);

}

id sub_1004CA160(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_promptForSimulationAndStartNavigationForRouteCollection:", *(_QWORD *)(a1 + 40));
}

void sub_1004CA5F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1004CA624(uint64_t a1, uint64_t a2, int a3)
{
  id v3;
  NSObject *WeakRetained;
  uint64_t v7;
  __int128 v8;
  _OWORD v9[3];
  uint64_t v10;

  if (a3)
  {
    v3 = sub_10043214C();
    WeakRetained = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(WeakRetained, OS_LOG_TYPE_INFO))
    {
      LOWORD(v9[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, WeakRetained, OS_LOG_TYPE_INFO, "Navigation simulation popup was dismissed.", (uint8_t *)v9, 2u);
    }
  }
  else
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(_OWORD *)(a2 + 16);
    v9[0] = *(_OWORD *)a2;
    v9[1] = v8;
    v9[2] = *(_OWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 48);
    -[NSObject _startNavigationForRouteCollection:navigationDetailsOptions:](WeakRetained, "_startNavigationForRouteCollection:navigationDetailsOptions:", v7, v9);
  }

}

void sub_1004CBD40(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1004CBD5C(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  id v12;
  uint8_t v13[16];

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "genericAdvisorys"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));

    if (v6)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "dataCoordinator"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "advisoriesInfo"));
      objc_msgSend(v7, "setRoutePlanningAdvisoriesInfo:", v9);

      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
      objc_msgSend(v10, "setRoutePlanningIncidentsSourceView:", v3);

      v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
      -[NSObject presentRoutePlanningViewType:](v11, "presentRoutePlanningViewType:", 5);
    }
    else
    {
      v12 = sub_10043214C();
      v11 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v13 = 0;
      }
    }

  }
}

void sub_1004CCA08(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1004CCA44(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  objc_msgSend(v1, "presentRoutePlanningViewType:", 6);

}

void sub_1004CCA8C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  objc_msgSend(v2, "openURL:options:completionHandler:", *(_QWORD *)(a1 + 32), &__NSDictionary0__struct, 0);

}

void sub_1004CCADC(id a1, id a2)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[VGVirtualGarageService sharedService](VGVirtualGarageService, "sharedService"));
  objc_msgSend(v2, "virtualGarageSelectVehicle:", 0);

}

void sub_1004CCB14(id a1, id a2)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[VGVirtualGarageService sharedService](VGVirtualGarageService, "sharedService"));
  objc_msgSend(v2, "virtualGarageSelectVehicle:", 0);

}

void sub_1004CCB4C(uint64_t a1)
{
  void *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  objc_msgSend(v2, "viewController:openTransitIncidents:fromView:withUserInfo:", WeakRetained, *(_QWORD *)(a1 + 32), 0, 0);

}

void sub_1004CCBA4(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_maps_mapsSceneDelegate"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "appCoordinator"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "baseActionCoordinator"));

  objc_msgSend(v3, "viewControllerShowOfflineMaps:", WeakRetained);
}

id sub_1004CD150()
{
  if (qword_1014D26E8 != -1)
    dispatch_once(&qword_1014D26E8, &stru_1011B8F10);
  return (id)qword_1014D26E0;
}

void sub_1004CD380(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cardPresentationController"));
  objc_msgSend(v1, "updateHeightForCurrentLayout");

}

id *sub_1004CD3B0(id *result, int a2)
{
  if (a2)
    return (id *)objc_msgSend(result[4], "setIsAnimatingHeightForMediumLayout:", 0);
  return result;
}

void sub_1004CDF84(uint64_t a1)
{
  id *WeakRetained;
  id *v3;
  unsigned int v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  uint8_t v12[16];

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v4 = objc_msgSend(WeakRetained, "shouldRefreshRoutePlanningWithCurrentGarage:previousGarage:", *(_QWORD *)(a1 + 32), WeakRetained[16]);
    objc_storeStrong(v3 + 15, *(id *)(a1 + 32));
    objc_msgSend(v3, "_refreshSelectedVehicleDisplay");
    if (v4)
    {
      v5 = sub_10043214C();
      v6 = objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Garage did change significantly, updating route planning", v12, 2u);
      }

      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dataCoordinator"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "platformController"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "auxiliaryTasksManager"));
      v10 = objc_msgSend(v9, "auxilaryTaskForClass:", objc_opt_class(NavigationStateMonitoringTask));
      v11 = (void *)objc_claimAutoreleasedReturnValue(v10);

      objc_msgSend(v11, "cancelNavigationAutoLaunchIfNeccessary");
      objc_storeStrong(v3 + 16, *(id *)(a1 + 32));
      objc_msgSend(v3, "_refreshRoutePlanning");

    }
  }

}

void sub_1004CF6C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1004CF6EC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_updateTransitionScrollPosition");

}

id sub_1004D0864(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_scrollToCellToShowAtMediumLayoutAnimated:", 1);
}

void sub_1004D18E4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_showPedestrianARFeatureIntroTeachableMomentCardIfNecessary");

}

void sub_1004D2E90(_QWORD *a1, uint64_t a2)
{
  void *v2;
  RoutePlanningDisplayHintsRefinementModel *v3;

  v2 = (void *)a1[4];
  v3 = -[RoutePlanningDisplayHintsRefinementModel initWithDelegate:transitPreferences:displayHints:refinementField:]([RoutePlanningDisplayHintsRefinementModel alloc], "initWithDelegate:transitPreferences:displayHints:refinementField:", a1[5], a1[6], a1[7], a2);
  objc_msgSend(v2, "addObject:", v3);

}

void sub_1004D3580(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_showPedestrianARFeatureIntroTeachableMomentCardIfNecessary");

}

void sub_1004D3688(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  id v3;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_showPedestrianARFeatureIntroTeachableMomentCardIfNecessary");

  v3 = objc_loadWeakRetained(v1);
  objc_msgSend(v3, "_showPedestrianARRaiseToEnterTeachableMomentCardIfNecessary");

}

void sub_1004D4570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1004D4594(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  unsigned int v3;
  id v4;
  NSObject *v5;
  _BOOL4 v6;
  void *v7;
  uint8_t v8[16];
  uint8_t buf[16];

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = objc_msgSend(WeakRetained, "_shouldShowPedestrianARTeachableMomentCard");

  v4 = sub_10043214C();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_INFO);
  if (v3)
  {
    if (v6)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Showing feature intro teachable moment card", buf, 2u);
    }

    v5 = objc_loadWeakRetained(v1);
    v7 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject delegate](v5, "delegate"));
    objc_msgSend(v7, "showPedestrianARFeatureIntroTeachableMomentCard");

  }
  else if (v6)
  {
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "No longer eligible to show teachable moment card", v8, 2u);
  }

}

void sub_1004D5514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  id *v24;
  id *v25;
  id *v26;

  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1004D5570(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  char *v3;
  void *v4;
  id v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v5 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cardPresentationController"));
    v3 = (char *)objc_msgSend(v2, "containeeLayout");

    WeakRetained = v5;
    if ((unint64_t)(v3 - 1) <= 1)
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "cardPresentationController"));
      objc_msgSend(v4, "updateHeightForCurrentLayout");

      WeakRetained = v5;
    }
  }

}

void sub_1004D55E4(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "dataCoordinator"));
    objc_msgSend(v5, "updateTiming:", v6);

  }
}

void sub_1004D5644(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cardPresentationController"));
    objc_msgSend(v2, "updateHeightForCurrentLayout");

    WeakRetained = v3;
  }

}

void sub_1004D636C(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "dismissRoutePlanningPlaceCardIfNeeded");

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataCoordinator"));
  objc_msgSend(v3, "updateCurrentRouteDisplayedMapRect:", *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64));

}

void sub_1004D7848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1004D7870(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_displayRouteOptions");

}

void sub_1004D8568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1004D85A0(uint64_t a1, int a2)
{
  uint64_t v2;
  id WeakRetained;

  v2 = a2 ^ 1u;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setRouteSearchSuggestionsTableViewHidden:", v2);

}

void sub_1004D85DC(uint64_t a1)
{
  id *v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  id WeakRetained;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cardPresentationController"));
  if ((unint64_t)objc_msgSend(v2, "containeeLayout") <= 2)
  {
    v3 = objc_loadWeakRetained(v1);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "cardPresentationController"));
    v5 = objc_msgSend(v4, "containeeLayout");

    if ((unint64_t)v5 > 3)
      return;
    WeakRetained = objc_loadWeakRetained(v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cardPresentationController"));
    objc_msgSend(v2, "updateHeightForCurrentLayout");
  }

}

void sub_1004D8F68(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "RoutePlanningTray");
  v2 = (void *)qword_1014D26E0;
  qword_1014D26E0 = (uint64_t)v1;

}

void sub_1004D99DC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  int v7;
  char v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  v5 = a3;
  v6 = v10;
  if (v10)
  {
    v7 = 0;
LABEL_5:
    objc_msgSend(v6, "timeIntervalSinceReferenceDate");
    v8 = *(_BYTE *)(a1 + 20);
    *(_QWORD *)(a1 + 8) = v9;
    *(_BYTE *)(a1 + 20) = v8 | 6;
    *(_DWORD *)(a1 + 16) = v7;
    goto LABEL_6;
  }
  if (v5)
  {
    v7 = 1;
    v6 = v5;
    goto LABEL_5;
  }
LABEL_6:

}

void sub_1004DA0BC(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "labelViewModel"));
  objc_msgSend(v2, "setString:", *(_QWORD *)(a1 + 40));

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "distanceLabel"));
  objc_msgSend(v3, "setNeedsLayout");

}

id sub_1004DB2EC()
{
  if (qword_1014D26F8 != -1)
    dispatch_once(&qword_1014D26F8, &stru_1011B9070);
  return (id)qword_1014D26F0;
}

void sub_1004DB3A0(uint64_t a1)
{
  _BYTE *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  _QWORD v26[4];

  v2 = *(_BYTE **)(a1 + 32);
  if (!v2[145])
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "contentView"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "loadingView"));
    objc_msgSend(v3, "addSubview:", v4);

    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "loadingView"));
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "topAnchor"));
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "topAnchor"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "constraintEqualToAnchor:", v22));
    v26[0] = v21;
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "loadingView"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "leadingAnchor"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contentView"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "leadingAnchor"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "constraintEqualToAnchor:", v17));
    v26[1] = v16;
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "loadingView"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "trailingAnchor"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contentView"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "trailingAnchor"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "constraintEqualToAnchor:", v7));
    v26[2] = v8;
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "loadingView"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "bottomAnchor"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contentView"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "bottomAnchor"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "constraintEqualToAnchor:", v12));
    v26[3] = v13;
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v26, 4));
    +[NSLayoutConstraint activateConstraints:](NSLayoutConstraint, "activateConstraints:", v14);

  }
}

id sub_1004DB9A4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateHeaderTransition");
}

void sub_1004DC258(id a1, NSError *a2)
{
  NSError *v2;
  id v3;
  NSObject *v4;
  int v5;
  NSError *v6;

  v2 = a2;
  if (v2)
  {
    v3 = sub_1004316CC();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Error saving curated collection to history: %@", (uint8_t *)&v5, 0xCu);
    }

  }
}

void sub_1004DC928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, id *a11)
{
  id *v11;
  id *v12;
  uint64_t v13;

  objc_destroyWeak(v12);
  objc_destroyWeak(v11);
  objc_destroyWeak(location);
  objc_destroyWeak(a11);
  objc_destroyWeak((id *)(v13 - 160));
  _Unwind_Resume(a1);
}

void sub_1004DC9F0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "addToMyGuidesMenuButtonTapped");

}

void sub_1004DCA1C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "headerViewPublisherLogoTapped");

}

void sub_1004DCA48(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "seeAllGuidesMenuButtonTapped");

}

void sub_1004DCA74(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "websiteMenuButtonTapped");

}

void sub_1004DCAA0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "reportAnIssueMenuButtonTapped");

}

id sub_1004DD834(uint64_t a1)
{
  double v2;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "contentInset");
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "setContentOffset:", 0.0, -v2);
}

id sub_1004DD874(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fakeHeaderView"));
  objc_msgSend(v2, "setAlpha:", 0.0);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cardHeaderView"));
  objc_msgSend(v3, "setAlpha:", 1.0);

  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "setAlpha:", 1.0);
}

void sub_1004DDBD4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  int v9;
  id v10;

  v5 = a3;
  if (v5)
  {
    v6 = sub_1004316CC();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v9 = 138412290;
      v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Error when refining mapItem prior to adding to Library: %@", (uint8_t *)&v9, 0xCu);
    }

  }
  else
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "firstObject"));
    if (v8)
      objc_msgSend(*(id *)(a1 + 32), "addPlaceToLibraryWithRefinedMapItem:", v8);

  }
}

void sub_1004DDE88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1004DDEA4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  _BOOL4 v10;
  CollectionAddOrRemoveSession *v11;
  void *v12;
  id WeakRetained;
  void *v14;
  void *v15;
  void *v16;
  _QWORD v17[4];
  CollectionAddOrRemoveSession *v18;
  id v19;
  _QWORD v20[4];
  id v21;
  id v22;
  uint8_t buf[4];
  id v24;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = sub_1004316CC();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v24 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Error when refining mapItem prior to adding to user collection: %@", buf, 0xCu);
    }

  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
  if (v9)
    v10 = v6 == 0;
  else
    v10 = 0;
  if (v10)
  {
    v11 = -[CollectionEditSession initWithCollection:]([CollectionAddOrRemoveSession alloc], "initWithCollection:", *(_QWORD *)(a1 + 32));
    -[CollectionEditSession setSuppressAnalytics:](v11, "setSuppressAnalytics:", 1);
    -[CollectionEditSession addSelectedObject:](v11, "addSelectedObject:", v9);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_1004DE134;
    v20[3] = &unk_1011B7758;
    v21 = *(id *)(a1 + 32);
    v22 = *(id *)(a1 + 56);
    -[CollectionEditSession setResultBlock:](v11, "setResultBlock:", v20);
    if (*(_QWORD *)(a1 + 32))
    {
      objc_storeStrong((id *)(*(_QWORD *)(a1 + 40) + 128), v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue(-[CollectionEditSession collection](v11, "collection"));
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_1004DE220;
      v17[3] = &unk_1011B2260;
      objc_copyWeak(&v19, (id *)(a1 + 64));
      v18 = v11;
      -[CollectionAddOrRemoveSession applyToCollection:completion:](v18, "applyToCollection:completion:", v12, v17);

      objc_destroyWeak(&v19);
    }
    else
    {
      WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
      v14 = WeakRetained;
      if (WeakRetained)
      {
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
        v16 = *(void **)(a1 + 48);
        objc_msgSend(v16, "bounds");
        objc_msgSend(v15, "viewController:pickCollectionWithSession:sourceView:sourceRect:", v14, v11, v16);

      }
    }

  }
}

void sub_1004DE118(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1004DE134(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;

  v3 = a2;
  if (v3)
  {
    v4 = sub_1004316CC();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
      v8 = 138412546;
      v9 = v6;
      v10 = 2112;
      v11 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Error adding place to collection '%@': %@", (uint8_t *)&v8, 0x16u);

    }
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 40);
    if (v7)
      (*(void (**)(void))(v7 + 16))();
  }

}

void sub_1004DE220(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  id WeakRetained;
  void *v7;
  void *v8;
  int v9;
  id v10;

  v3 = a2;
  if (v3)
  {
    v4 = sub_1004315EC();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v9 = 138412290;
      v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Error saving collection session: %@", (uint8_t *)&v9, 0xCu);
    }

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v7 = WeakRetained;
  if (WeakRetained)
  {
    v8 = (void *)*((_QWORD *)WeakRetained + 16);
    if (v8 == *(void **)(a1 + 32))
    {
      *((_QWORD *)WeakRetained + 16) = 0;

    }
  }

}

void sub_1004DEA0C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 144));
  _Unwind_Resume(a1);
}

void sub_1004DEA38(uint64_t a1)
{
  _BYTE *WeakRetained;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    WeakRetained[145] = 0;
    v6 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "errorView"));
    objc_msgSend(v2, "removeFromSuperview");

    objc_msgSend(v6, "_attachLoadingView");
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "collectionProvider"));
    objc_msgSend(v3, "refresh");

    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "errorView"));
    objc_msgSend(v4, "setButtonTitle:handler:", 0, 0);

    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "analyticsController"));
    objc_msgSend(v5, "logTryAgain");

    WeakRetained = v6;
  }

}

void sub_1004DEBE0(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_updateHeaderAndTableViewValues");
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v2, "layoutIfNeeded");

}

void sub_1004DEE4C(uint64_t a1, char a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  _BOOL4 v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  void *v16;

  v5 = a3;
  if ((a2 & 1) == 0)
  {
    v6 = sub_1004316CC();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    v8 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    if (v5)
    {
      if (v8)
      {
        v9 = *(_QWORD *)(a1 + 32);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "description"));
        v13 = 138412546;
        v14 = v9;
        v15 = 2112;
        v16 = v10;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "AppClip request for URL: %@ failed with error: %@", (uint8_t *)&v13, 0x16u);

      }
    }
    else if (v8)
    {
      v11 = *(_QWORD *)(a1 + 32);
      v13 = 138412290;
      v14 = v11;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "AppClip request for URL: %@ failed", (uint8_t *)&v13, 0xCu);
    }

    v12 = (void *)objc_claimAutoreleasedReturnValue(+[MKSystemController sharedInstance](MKSystemController, "sharedInstance"));
    objc_msgSend(v12, "openURL:completionHandler:", *(_QWORD *)(a1 + 32), 0);

  }
}

void sub_1004DF594(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CuratedCollectionViewController");
  v2 = (void *)qword_1014D26F0;
  qword_1014D26F0 = (uint64_t)v1;

}

id sub_1004E11A8()
{
  if (qword_1014D2708 != -1)
    dispatch_once(&qword_1014D2708, &stru_1011B9090);
  return (id)qword_1014D2700;
}

void sub_1004E24A0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CardFramingTransitionController");
  v2 = (void *)qword_1014D2700;
  qword_1014D2700 = (uint64_t)v1;

}

void sub_1004E45AC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_1004E4628(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_pressedDownload");

}

void sub_1004E4654(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_pressedDirections");

}

void sub_1004E4680(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_pressedEdit");

}

void sub_1004E46AC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_pressedDelete");

}

void sub_1004E517C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = a3;
  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "isEqual:", *(_QWORD *)(a1 + 40)))
    objc_msgSend(*(id *)(a1 + 32), "_setImageForSnapshot:", v4);

}

void sub_1004E5B6C(uint64_t a1)
{
  id *WeakRetained;
  id *v2;
  NSObject *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  uint64_t v8;
  void *v9;
  NSMutableDictionary *v10;
  uint64_t Log;
  NSObject *v12;
  char *v13;
  id v14;
  NSMutableDictionary *v15;
  uint64_t v16;
  NSObject *v17;
  char *v18;
  id v19;
  NSObject *v20;
  uint64_t v21;
  NSObject *obj;
  uint64_t v23;
  _QWORD v24[4];
  NSMutableDictionary *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint8_t v30[128];
  uint8_t buf[4];
  char *v32;
  __int16 v33;
  _BYTE v34[14];

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[24], "allKeys"));
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v4 = -[NSObject countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
    if (v4)
    {
      v5 = v4;
      v23 = *(_QWORD *)v27;
      v6 = DefaultLoggingSubsystem;
      obj = v3;
      do
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          if (*(_QWORD *)v27 != v23)
            objc_enumerationMutation(obj);
          v8 = *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)i);
          v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2[24], "objectForKey:", v8));
          v10 = objc_opt_new(NSMutableDictionary);
          Log = GEOFindOrCreateLog(v6, "RideBooking");
          v12 = objc_claimAutoreleasedReturnValue(Log);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            v13 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
            v14 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("completedRideIdentifiersAndDates: %@"), v9);
            *(_DWORD *)buf = 136315394;
            v32 = v13;
            v33 = 2112;
            *(_QWORD *)v34 = v14;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

          }
          v24[0] = _NSConcreteStackBlock;
          v24[1] = 3221225472;
          v24[2] = sub_1004E5F3C;
          v24[3] = &unk_1011B90E8;
          v15 = v10;
          v25 = v15;
          objc_msgSend(v9, "enumerateKeysAndObjectsUsingBlock:", v24);
          v16 = GEOFindOrCreateLog(v6, "RideBooking");
          v17 = objc_claimAutoreleasedReturnValue(v16);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
          {
            v18 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
            v19 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("flushedCompletedRideIdentifiersAndDates: %@"), v15);
            *(_DWORD *)buf = 136315394;
            v32 = v18;
            v33 = 2112;
            *(_QWORD *)v34 = v19;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

          }
          objc_msgSend(v2[24], "setObject:forKey:", v15, v8);

        }
        v3 = obj;
        v5 = -[NSObject countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
      }
      while (v5);
    }
    v20 = objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    -[NSObject setObject:forKey:](v20, "setObject:forKey:", v2[24], CFSTR("RideBookingCompletedRideIdentifiersAndDates"));
  }
  else
  {
    v21 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingDataCoordinator");
    v20 = (id)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v32 = "RideBookingDataCoordinator.m";
      v33 = 1026;
      *(_DWORD *)v34 = 140;
      *(_WORD *)&v34[4] = 2082;
      *(_QWORD *)&v34[6] = "-[RideBookingDataCoordinator _flushCompletedRideIdentifiersAndDatesMap]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
    }
    v3 = v20;
  }

}

void sub_1004E5F3C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  double v6;
  id v7;

  v7 = a2;
  v5 = a3;
  objc_msgSend(v5, "timeIntervalSinceNow");
  if (v6 >= -GEOConfigGetDouble(MapsConfig_RideBookingRidesharingMaximumFinishedRideInformationRetainingTimeInterval, off_1014B2E88))objc_msgSend(*(id *)(a1 + 32), "setObject:forKey:", v5, v7);

}

void sub_1004E6168(uint64_t a1)
{
  id WeakRetained;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *i;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  char *v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  int v21;
  uint64_t v22;
  NSObject *v23;
  char *v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  uint64_t v30;
  NSObject *v31;
  char *v32;
  id v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  NSObject *v39;
  char *v40;
  id v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  void *j;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  char *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  id obj;
  id obja;
  NSObject *log;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _QWORD v63[5];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _BYTE v68[128];
  uint8_t v69[128];
  uint8_t buf[4];
  char *v71;
  __int16 v72;
  _BYTE v73[14];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v54 = a1;
    obj = *(id *)(a1 + 32);
    v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v64, v69, 16);
    if (!v3)
      goto LABEL_26;
    v4 = v3;
    v5 = *(_QWORD *)v65;
    v6 = DefaultLoggingSubsystem;
    while (1)
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v65 != v5)
          objc_enumerationMutation(obj);
        v8 = *(void **)(*((_QWORD *)&v64 + 1) + 8 * (_QWORD)i);
        v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
        if (!v9)
          goto LABEL_15;
        v10 = (void *)v9;
        v11 = (void *)*((_QWORD *)WeakRetained + 4);
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", v12));

        if (!v13)
          goto LABEL_15;
        v14 = GEOFindOrCreateLog(v6, "RideBooking");
        v15 = objc_claimAutoreleasedReturnValue(v14);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          v16 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
          v17 = objc_alloc((Class)NSString);
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
          v19 = objc_msgSend(v17, "initWithFormat:", CFSTR("Already have application %@. Skipping it."), v18);
          *(_DWORD *)buf = 136315394;
          v71 = v16;
          v72 = 2112;
          *(_QWORD *)v73 = v19;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

        }
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
        v21 = isExtensionHidden();

        if (v21)
        {
          v22 = GEOFindOrCreateLog(v6, "RideBooking");
          v23 = objc_claimAutoreleasedReturnValue(v22);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
          {
            v24 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
            v25 = objc_alloc((Class)NSString);
            v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
            v27 = objc_msgSend(v25, "initWithFormat:", CFSTR("Application %@ is hidden. Skipping it."), v26);
            *(_DWORD *)buf = 136315394;
            v71 = v24;
            v72 = 2112;
            *(_QWORD *)v73 = v27;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

          }
LABEL_15:
          objc_msgSend(v8, "setDelegate:", WeakRetained);
          v28 = (void *)*((_QWORD *)WeakRetained + 4);
          v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
          objc_msgSend(v28, "setObject:forKey:", v8, v29);

          v30 = GEOFindOrCreateLog(v6, "RideBooking");
          v31 = objc_claimAutoreleasedReturnValue(v30);
          if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
          {
            v32 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
            v33 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Origin is %@"), *((_QWORD *)WeakRetained + 5));
            *(_DWORD *)buf = 136315394;
            v71 = v32;
            v72 = 2112;
            *(_QWORD *)v73 = v33;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

          }
          v34 = *((_QWORD *)WeakRetained + 5);
          if (v34)
            objc_msgSend(WeakRetained, "_updateRideOptionStatusMapForOrigin:destination:application:", v34, *((_QWORD *)WeakRetained + 6), v8);
          v35 = (void *)*((_QWORD *)WeakRetained + 9);
          v63[0] = _NSConcreteStackBlock;
          v63[1] = 3221225472;
          v63[2] = sub_1004E68E0;
          v63[3] = &unk_1011B9110;
          v63[4] = v8;
          v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithBlock:](NSPredicate, "predicateWithBlock:", v63));
          v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "filteredArrayUsingPredicate:", v36));

          if (objc_msgSend(v37, "count"))
          {
            v38 = GEOFindOrCreateLog(v6, "RideBooking");
            v39 = objc_claimAutoreleasedReturnValue(v38);
            if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
            {
              v40 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
              v41 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("There are some old suggestions %@"), v37);
              *(_DWORD *)buf = 136315394;
              v71 = v40;
              v72 = 2112;
              *(_QWORD *)v73 = v41;
              _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

            }
            objc_msgSend(*((id *)WeakRetained + 9), "removeObjectsInArray:", v37);
          }

          continue;
        }
      }
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v64, v69, 16);
      if (!v4)
      {
LABEL_26:

        v42 = sub_10039DCD4(*(void **)(v54 + 32), &stru_1011B9150);
        log = objc_claimAutoreleasedReturnValue(v42);
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        obja = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)WeakRetained + 4), "allKeys"));
        v43 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v59, v68, 16);
        if (v43)
        {
          v44 = v43;
          v45 = *(_QWORD *)v60;
          v46 = DefaultLoggingSubsystem;
          v55 = WeakRetained;
          do
          {
            for (j = 0; j != v44; j = (char *)j + 1)
            {
              if (*(_QWORD *)v60 != v45)
                objc_enumerationMutation(obja);
              v48 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * (_QWORD)j);
              if ((-[NSObject containsObject:](log, "containsObject:", v48) & 1) == 0)
              {
                v49 = GEOFindOrCreateLog(v46, "RideBooking");
                v50 = objc_claimAutoreleasedReturnValue(v49);
                if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
                {
                  v51 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
                  v52 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("App Uninstalled: %@"), v48);
                  *(_DWORD *)buf = 136315394;
                  v71 = v51;
                  WeakRetained = v55;
                  v72 = 2112;
                  *(_QWORD *)v73 = v52;
                  _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

                }
                objc_msgSend(*((id *)WeakRetained + 4), "removeObjectForKey:", v48);
                objc_msgSend(*((id *)WeakRetained + 11), "removeObjectForKey:", v48);
              }
            }
            v44 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v59, v68, 16);
          }
          while (v44);
        }

        objc_msgSend(WeakRetained, "_broadcastRideOptionStateDidChange");
        goto LABEL_41;
      }
    }
  }
  v53 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingDataCoordinator");
  log = (id)objc_claimAutoreleasedReturnValue(v53);
  if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446722;
    v71 = "RideBookingDataCoordinator.m";
    v72 = 1026;
    *(_DWORD *)v73 = 174;
    *(_WORD *)&v73[4] = 2082;
    *(_QWORD *)&v73[6] = "-[RideBookingDataCoordinator rideBookingApplicationsDidChange:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
  }

LABEL_41:
}

id sub_1004E68E0(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "iOSBundleIdentifier"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
  v5 = objc_msgSend(v3, "isEqualToString:", v4);

  return v5;
}

id sub_1004E6940(id a1, RideBookingApplication *a2, unint64_t a3)
{
  return -[RideBookingApplication identifier](a2, "identifier", a3);
}

void sub_1004E6AF8(uint64_t a1)
{
  id *WeakRetained;
  id *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  char *v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t Log;
  id v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  char *v16;
  id v17;
  uint64_t v18;
  NSObject *v19;
  char *v20;
  id v21;
  uint8_t buf[4];
  char *v23;
  __int16 v24;
  _QWORD v25[3];

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (!WeakRetained)
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingDataCoordinator");
    v10 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v23 = "RideBookingDataCoordinator.m";
      v24 = 1026;
      LODWORD(v25[0]) = 231;
      WORD2(v25[0]) = 2082;
      *(_QWORD *)((char *)v25 + 6) = "-[RideBookingDataCoordinator addRideBookingDataCoordinatorRideOptionStateObserver:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
    }
    v9 = v10;
    goto LABEL_18;
  }
  objc_msgSend(WeakRetained[8], "addObject:", *(_QWORD *)(a1 + 32));
  v4 = DefaultLoggingSubsystem;
  v5 = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v7 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
    v8 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Added RideOption observer: %@"), *(_QWORD *)(a1 + 32));
    *(_DWORD *)buf = 136315394;
    v23 = v7;
    v24 = 2112;
    v25[0] = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

  }
  if (objc_msgSend(v3[3], "readyToLoadApps")
    && (objc_opt_respondsToSelector(*(_QWORD *)(a1 + 32), "rideOptionStateDidChange:") & 1) != 0)
  {
    v9 = objc_msgSend(v3[11], "copy");
    if (*((_BYTE *)v3 + 8))
    {
      v10 = 0;
    }
    else
    {
      v10 = objc_msgSend(v3[9], "copy");
      if (!*((_BYTE *)v3 + 8))
      {
        v12 = objc_msgSend(v3[10], "copy");
        goto LABEL_13;
      }
    }
    v12 = 0;
LABEL_13:
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[RideBookingRideOptionState stateWithRideOptionStatusMap:appStoreSuggestions:installedSuggestions:](RideBookingRideOptionState, "stateWithRideOptionStatusMap:appStoreSuggestions:installedSuggestions:", v9, v10, v12));
    v14 = GEOFindOrCreateLog(v4, "RideBooking");
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      v16 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
      v17 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("appStoreSuggestions:%@ installedSuggestions:%@"), v10, v12);
      *(_DWORD *)buf = 136315394;
      v23 = v16;
      v24 = 2112;
      v25[0] = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

    }
    v18 = GEOFindOrCreateLog(v4, "RideBooking");
    v19 = objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      v20 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
      v21 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Notifying observer %@ of ride option state change %@"), *(_QWORD *)(a1 + 32), v13);
      *(_DWORD *)buf = 136315394;
      v23 = v20;
      v24 = 2112;
      v25[0] = v21;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

    }
    objc_msgSend(*(id *)(a1 + 32), "rideOptionStateDidChange:", v13);

LABEL_18:
  }

}

void sub_1004E7058(uint64_t a1)
{
  id *WeakRetained;
  id *v3;
  uint64_t v4;
  uint64_t Log;
  NSObject *v6;
  char *v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  char *v11;
  id v12;
  uint64_t v13;
  NSObject *v14;
  uint8_t buf[4];
  char *v16;
  __int16 v17;
  _QWORD v18[3];

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained[8], "removeObject:", *(_QWORD *)(a1 + 32));
    v4 = DefaultLoggingSubsystem;
    Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
    v6 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
      v8 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Removed observer: %@"), *(_QWORD *)(a1 + 32));
      *(_DWORD *)buf = 136315394;
      v16 = v7;
      v17 = 2112;
      v18[0] = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

    }
    if (!objc_msgSend(v3[8], "count"))
    {
      v9 = GEOFindOrCreateLog(v4, "RideBooking");
      v10 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        v11 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
        v12 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Stopping ride options timer because the observers count is now zero"));
        *(_DWORD *)buf = 136315394;
        v16 = v11;
        v17 = 2112;
        v18[0] = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

      }
      objc_msgSend(v3, "_stopRefreshRideOptionsTimer");
    }
  }
  else
  {
    v13 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingDataCoordinator");
    v14 = (id)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v16 = "RideBookingDataCoordinator.m";
      v17 = 1026;
      LODWORD(v18[0]) = 256;
      WORD2(v18[0]) = 2082;
      *(_QWORD *)((char *)v18 + 6) = "-[RideBookingDataCoordinator removeRideBookingDataCoordinatorRideOptionStateObserve"
                                     "r:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_1004E79C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  id *v23;
  id *v24;

  objc_destroyWeak(v23);
  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1004E7A00(id *a1)
{
  id WeakRetained;
  uint64_t v3;
  uint64_t Log;
  NSObject *v5;
  char *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  NSObject *v14;
  char *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  NSMutableDictionary *v22;
  void *v23;
  NSObject *v24;
  id v25;
  id v26;
  uint64_t v27;
  void *i;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint8_t v34[128];
  uint8_t buf[4];
  char *v36;
  __int16 v37;
  _BYTE v38[14];

  WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    v3 = DefaultLoggingSubsystem;
    Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
    v5 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
      v7 = objc_alloc((Class)NSString);
      objc_msgSend(a1[4], "coordinate");
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%+.8f, %+.8f"), v8, v9));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "addressDictionary"));
      v12 = objc_msgSend(v7, "initWithFormat:", CFSTR("Origin: Coordinates = %@ \n Address = %@"), v10, v11);
      *(_DWORD *)buf = 136315394;
      v36 = v6;
      v37 = 2112;
      *(_QWORD *)v38 = v12;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

    }
    v13 = GEOFindOrCreateLog(v3, "RideBooking");
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      v15 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
      v16 = objc_alloc((Class)NSString);
      objc_msgSend(a1[5], "coordinate");
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%+.8f, %+.8f"), v17, v18));
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "addressDictionary"));
      v21 = objc_msgSend(v16, "initWithFormat:", CFSTR("Destination: Coordinates = %@ \n Address = %@"), v19, v20);
      *(_DWORD *)buf = 136315394;
      v36 = v15;
      v37 = 2112;
      *(_QWORD *)v38 = v21;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

    }
    v22 = objc_opt_new(NSMutableDictionary);
    v23 = (void *)*((_QWORD *)WeakRetained + 11);
    *((_QWORD *)WeakRetained + 11) = v22;

    objc_msgSend(WeakRetained, "_startRefreshRideOptionsTimer");
    *((_BYTE *)WeakRetained + 8) = 1;
    objc_storeStrong((id *)WeakRetained + 5, a1[4]);
    objc_storeStrong((id *)WeakRetained + 6, a1[5]);
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v24 = objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)WeakRetained + 4), "allValues"));
    v25 = -[NSObject countByEnumeratingWithState:objects:count:](v24, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
    if (v25)
    {
      v26 = v25;
      v27 = *(_QWORD *)v31;
      do
      {
        for (i = 0; i != v26; i = (char *)i + 1)
        {
          if (*(_QWORD *)v31 != v27)
            objc_enumerationMutation(v24);
          objc_msgSend(WeakRetained, "_updateRideOptionStatusMapForOrigin:destination:application:", a1[4], a1[5], *(_QWORD *)(*((_QWORD *)&v30 + 1) + 8 * (_QWORD)i));
        }
        v26 = -[NSObject countByEnumeratingWithState:objects:count:](v24, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
      }
      while (v26);
    }
  }
  else
  {
    v29 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingDataCoordinator");
    v24 = (id)objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v36 = "RideBookingDataCoordinator.m";
      v37 = 1026;
      *(_DWORD *)v38 = 298;
      *(_WORD *)&v38[4] = 2082;
      *(_QWORD *)&v38[6] = "-[RideBookingDataCoordinator updateRideOptionStateForOrigin:destination:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_1004E7DC0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  _QWORD block[4];
  id v11;
  id v12;
  id v13;

  v5 = a2;
  v6 = a3;
  v7 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1004E7E90;
  block[3] = &unk_1011AFF10;
  objc_copyWeak(&v13, (id *)(a1 + 40));
  v11 = v6;
  v12 = v5;
  v8 = v5;
  v9 = v6;
  dispatch_async(v7, block);

  objc_destroyWeak(&v13);
}

void sub_1004E7E90(id *a1)
{
  _BYTE *WeakRetained;
  uint64_t v3;
  uint64_t Log;
  NSObject *v5;
  char *v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  NSObject *v11;
  char *v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint8_t buf[4];
  char *v27;
  __int16 v28;
  _QWORD v29[3];

  WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    v3 = DefaultLoggingSubsystem;
    if (a1[4])
    {
      Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
      v5 = objc_claimAutoreleasedReturnValue(Log);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v6 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
        v7 = objc_alloc((Class)NSString);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "localizedDescription"));
        v9 = objc_msgSend(v7, "initWithFormat:", CFSTR("Received an error trying to fetch app store suggestions:, %@"), v8);
        *(_DWORD *)buf = 136315394;
        v27 = v6;
        v28 = 2112;
        v29[0] = v9;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{RBError}{%s}: %@", buf, 0x16u);

      }
    }
    v10 = GEOFindOrCreateLog(v3, "RideBooking");
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      v12 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
      v13 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("App Store suggestions: %@"), a1[5]);
      *(_DWORD *)buf = 136315394;
      v27 = v12;
      v28 = 2112;
      v29[0] = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

    }
    WeakRetained[8] = 0;
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "notInstalledSuggestions"));
    if (v14)
    {
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "notInstalledSuggestions"));
      v16 = objc_msgSend(v15, "mutableCopy");
      v17 = (void *)*((_QWORD *)WeakRetained + 9);
      *((_QWORD *)WeakRetained + 9) = v16;

    }
    else
    {
      v20 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
      v15 = (void *)*((_QWORD *)WeakRetained + 9);
      *((_QWORD *)WeakRetained + 9) = v20;
    }

    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "installedSuggestions"));
    if (v21)
    {
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "installedSuggestions"));
      v23 = objc_msgSend(v22, "mutableCopy");
      v24 = (void *)*((_QWORD *)WeakRetained + 10);
      *((_QWORD *)WeakRetained + 10) = v23;

    }
    else
    {
      v25 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
      v22 = (void *)*((_QWORD *)WeakRetained + 10);
      *((_QWORD *)WeakRetained + 10) = v25;
    }

    objc_msgSend(WeakRetained, "_broadcastRideOptionStateDidChange");
  }
  else
  {
    v18 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingDataCoordinator");
    v19 = (id)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v27 = "RideBookingDataCoordinator.m";
      v28 = 1026;
      LODWORD(v29[0]) = 322;
      WORD2(v29[0]) = 2082;
      *(_QWORD *)((char *)v29 + 6) = "-[RideBookingDataCoordinator updateRideOptionStateForOrigin:destination:]_block_invoke_2";
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_1004E8630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  id *v25;

  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1004E867C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1004E868C(uint64_t a1)
{

}

void sub_1004E8694(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  uint64_t Log;
  NSObject *v9;
  char *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  unsigned int v18;
  uint64_t v19;
  NSObject *v20;
  _BOOL4 v21;
  char *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  char *v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[4];
  id v33;
  uint64_t v34;
  id v35;
  uint8_t buf[4];
  char *v37;
  __int16 v38;
  _QWORD v39[3];

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    if (objc_msgSend(v5, "rideStatusError") == (id)2)
    {
      Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
      v9 = objc_claimAutoreleasedReturnValue(Log);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        v10 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
        v11 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Returning from getRideStatus request. rideStatus timed out"));
        *(_DWORD *)buf = 136315394;
        v37 = v10;
        v38 = 2112;
        v39[0] = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

      }
      v12 = objc_claimAutoreleasedReturnValue(+[RideBookingRideOptionStatus statusWithApplication:error:](RideBookingRideOptionStatus, "statusWithApplication:error:", *(_QWORD *)(a1 + 32), 1));
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v14 = *(void **)(v13 + 40);
      *(_QWORD *)(v13 + 40) = v12;

      objc_msgSend(WeakRetained, "_updateRideOptionStatusMapWithApplication:status:", *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
    }
    else
    {
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "application"));
      objc_msgSend(WeakRetained, "_updateRideStatusMapWithApplication:status:", v17, v5);

      v18 = objc_msgSend(v5, "isActiveRide");
      v19 = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
      v20 = objc_claimAutoreleasedReturnValue(v19);
      v21 = os_log_type_enabled(v20, OS_LOG_TYPE_INFO);
      if (v18)
      {
        if (v21)
        {
          v22 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
          v23 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("rideOptionStatusMap updated with the latest status"));
          *(_DWORD *)buf = 136315394;
          v37 = v22;
          v38 = 2112;
          v39[0] = v23;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

        }
        v24 = objc_claimAutoreleasedReturnValue(+[RideBookingRideOptionStatus statusWithApplication:error:](RideBookingRideOptionStatus, "statusWithApplication:error:", *(_QWORD *)(a1 + 32), 2));
        v25 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        v26 = *(void **)(v25 + 40);
        *(_QWORD *)(v25 + 40) = v24;

        objc_msgSend(WeakRetained, "_updateRideOptionStatusMapWithApplication:status:", *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
      }
      else
      {
        if (v21)
        {
          v27 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
          v28 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Sending a -[id<RideBookingApplication> getRideOptionStatusWithPickupLocation:dropOffLocation:completion:] request."));
          *(_DWORD *)buf = 136315394;
          v37 = v27;
          v38 = 2112;
          v39[0] = v28;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

        }
        v29 = *(void **)(a1 + 32);
        v30 = *(_QWORD *)(a1 + 40);
        v31 = *(_QWORD *)(a1 + 48);
        v32[0] = _NSConcreteStackBlock;
        v32[1] = 3221225472;
        v32[2] = sub_1004E8B08;
        v32[3] = &unk_1011B91A0;
        objc_copyWeak(&v35, (id *)(a1 + 64));
        v34 = *(_QWORD *)(a1 + 56);
        v33 = *(id *)(a1 + 32);
        objc_msgSend(v29, "getRideOptionStatusWithPickupLocation:dropOffLocation:completion:", v30, v31, v32);

        objc_destroyWeak(&v35);
      }
    }
  }
  else
  {
    v15 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingDataCoordinator");
    v16 = (id)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v37 = "RideBookingDataCoordinator.m";
      v38 = 1026;
      LODWORD(v39[0]) = 365;
      WORD2(v39[0]) = 2082;
      *(_QWORD *)((char *)v39 + 6) = "-[RideBookingDataCoordinator _updateRideOptionStatusMapForOrigin:destination:applic"
                                     "ation:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_1004E8AEC(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1004E8B08(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  id WeakRetained;
  uint64_t Log;
  NSObject *v10;
  int v11;
  char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  const char *v16;

  v6 = a2;
  v7 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
    objc_msgSend(WeakRetained, "_updateRideOptionStatusMapWithApplication:status:", *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  }
  else
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingDataCoordinator");
    v10 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = 136446722;
      v12 = "RideBookingDataCoordinator.m";
      v13 = 1026;
      v14 = 386;
      v15 = 2082;
      v16 = "-[RideBookingDataCoordinator _updateRideOptionStatusMapForOrigin:destination:application:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: anotherStrongSelf went away in %{public}s", (uint8_t *)&v11, 0x1Cu);
    }

  }
}

void sub_1004E8F10(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t Log;
  NSObject *v8;
  int v9;
  char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  const char *v14;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v4 = (void *)*((_QWORD *)WeakRetained + 11);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "identifier"));
    objc_msgSend(v4, "setObject:forKey:", v5, v6);

    objc_msgSend(v3, "_broadcastRideOptionStateDidChange");
  }
  else
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingDataCoordinator");
    v8 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = 136446722;
      v10 = "RideBookingDataCoordinator.m";
      v11 = 1026;
      v12 = 400;
      v13 = 2082;
      v14 = "-[RideBookingDataCoordinator _updateRideOptionStatusMapWithApplication:status:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", (uint8_t *)&v9, 0x1Cu);
    }

  }
}

void sub_1004E91D8(uint64_t a1)
{
  id *v1;
  char *WeakRetained;
  double Double;
  uint64_t Log;
  NSObject *v5;
  _QWORD v6[4];
  id v7;
  uint8_t buf[4];
  char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  const char *v13;

  v1 = (id *)(a1 + 32);
  WeakRetained = (char *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    Double = GEOConfigGetDouble(GEOConfigRideBookingRideOptionRefreshInterval[0], GEOConfigRideBookingRideOptionRefreshInterval[1]);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1004E9378;
    v6[3] = &unk_1011AD260;
    objc_copyWeak(&v7, v1);
    objc_msgSend(WeakRetained, "_startTimer:withInterval:repeats:block:", WeakRetained + 56, 1, v6, Double);
    objc_destroyWeak(&v7);
  }
  else
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingDataCoordinator");
    v5 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v9 = "RideBookingDataCoordinator.m";
      v10 = 1026;
      v11 = 412;
      v12 = 2082;
      v13 = "-[RideBookingDataCoordinator _startRefreshRideOptionsTimer]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_1004E935C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1004E9378(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  uint64_t Log;
  NSObject *v4;
  int v5;
  char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "_refreshRideOptions");
  }
  else
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingDataCoordinator");
    v4 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = 136446722;
      v6 = "RideBookingDataCoordinator.m";
      v7 = 1026;
      v8 = 417;
      v9 = 2082;
      v10 = "-[RideBookingDataCoordinator _startRefreshRideOptionsTimer]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: anotherStrongSelf went away in %{public}s", (uint8_t *)&v5, 0x1Cu);
    }

  }
}

void sub_1004E960C(uint64_t a1)
{
  id WeakRetained;
  _QWORD *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  void *i;
  void *v7;
  void *v8;
  NSDate *v9;
  void *v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t Log;
  NSObject *v15;
  id v16;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  char *v22;
  id v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint8_t v28[128];
  uint8_t buf[4];
  char *v30;
  __int16 v31;
  _BYTE v32[14];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)WeakRetained + 11), "allValues"));
    v23 = -[NSObject countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
    if (v23)
    {
      v4 = *(_QWORD *)v25;
      v5 = DefaultLoggingSubsystem;
      do
      {
        for (i = 0; i != v23; i = (char *)i + 1)
        {
          if (*(_QWORD *)v25 != v4)
            objc_enumerationMutation(v3);
          v7 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)i);
          v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "expirationDate"));

          if (v8)
          {
            v9 = objc_opt_new(NSDate);
            v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "expirationDate"));
            -[NSDate timeIntervalSinceDate:](v9, "timeIntervalSinceDate:", v10);
            v12 = v11;

            v13 = v2[5];
            Log = GEOFindOrCreateLog(v5, "RideBooking");
            v15 = objc_claimAutoreleasedReturnValue(Log);
            if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
            {
              v22 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
              v16 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("RideOptionStatus expired: %d, hasOrigin: %d, status: %@"), v12 > 0.0, v13 != 0, v7);
              *(_DWORD *)buf = 136315394;
              v30 = v22;
              v31 = 2112;
              *(_QWORD *)v32 = v16;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

            }
            if (v12 > 0.0 && v13 != 0)
            {
              v18 = v2[5];
              v19 = v2[6];
              v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "application"));
              objc_msgSend(v2, "_updateRideOptionStatusMapForOrigin:destination:application:", v18, v19, v20);

            }
          }
        }
        v23 = -[NSObject countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
      }
      while (v23);
    }
  }
  else
  {
    v21 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingDataCoordinator");
    v3 = (id)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v30 = "RideBookingDataCoordinator.m";
      v31 = 1026;
      *(_DWORD *)v32 = 429;
      *(_WORD *)&v32[4] = 2082;
      *(_QWORD *)&v32[6] = "-[RideBookingDataCoordinator _refreshRideOptions]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_1004E9AC8(uint64_t a1)
{
  char *WeakRetained;
  void *v2;
  uint64_t Log;
  NSObject *v4;
  int v5;
  char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  WeakRetained = (char *)objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "_stopTimer:", WeakRetained + 56);
  }
  else
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingDataCoordinator");
    v4 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = 136446722;
      v6 = "RideBookingDataCoordinator.m";
      v7 = 1026;
      v8 = 453;
      v9 = 2082;
      v10 = "-[RideBookingDataCoordinator _stopRefreshRideOptionsTimer]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", (uint8_t *)&v5, 0x1Cu);
    }

  }
}

void sub_1004E9E24(uint64_t a1)
{
  id WeakRetained;
  _QWORD *v3;
  uint64_t v4;
  uint64_t Log;
  NSObject *v6;
  char *v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  char *v11;
  id v12;
  uint64_t v13;
  NSObject *v14;
  uint8_t buf[4];
  char *v16;
  __int16 v17;
  _QWORD v18[3];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(*((id *)WeakRetained + 12), "addObject:", *(_QWORD *)(a1 + 32));
    v4 = DefaultLoggingSubsystem;
    Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
    v6 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
      v8 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Added RequestRide observer: %@"), *(_QWORD *)(a1 + 32));
      *(_DWORD *)buf = 136315394;
      v16 = v7;
      v17 = 2112;
      v18[0] = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

    }
    if ((objc_opt_respondsToSelector(*(_QWORD *)(a1 + 32), "requestRideStatusDidChange:") & 1) != 0)
    {
      v9 = GEOFindOrCreateLog(v4, "RideBooking");
      v10 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        v11 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
        v12 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Notifying observer %@ of request ride status change %@"), *(_QWORD *)(a1 + 32), v3[21]);
        *(_DWORD *)buf = 136315394;
        v16 = v11;
        v17 = 2112;
        v18[0] = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

      }
      objc_msgSend(*(id *)(a1 + 32), "requestRideStatusDidChange:", v3[21]);
    }
  }
  else
  {
    v13 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingDataCoordinator");
    v14 = (id)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v16 = "RideBookingDataCoordinator.m";
      v17 = 1026;
      LODWORD(v18[0]) = 467;
      WORD2(v18[0]) = 2082;
      *(_QWORD *)((char *)v18 + 6) = "-[RideBookingDataCoordinator addRideBookingDataCoordinatorRequestRideObserver:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_1004EA304(uint64_t a1)
{
  id *WeakRetained;
  id *v3;
  uint64_t Log;
  NSObject *v5;
  char *v6;
  id v7;
  uint64_t v8;
  uint8_t buf[4];
  char *v10;
  __int16 v11;
  _QWORD v12[3];

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained[12], "removeObject:", *(_QWORD *)(a1 + 32));
    Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
    v5 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
      v7 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Removed RequestRide observer: %@"), *(_QWORD *)(a1 + 32));
      *(_DWORD *)buf = 136315394;
      v10 = v6;
      v11 = 2112;
      v12[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

    }
  }
  else
  {
    v8 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingDataCoordinator");
    v5 = (id)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v10 = "RideBookingDataCoordinator.m";
      v11 = 1026;
      LODWORD(v12[0]) = 485;
      WORD2(v12[0]) = 2082;
      *(_QWORD *)((char *)v12 + 6) = "-[RideBookingDataCoordinator removeRideBookingDataCoordinatorRequestRideObserver:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_1004EAB68(uint64_t a1)
{
  id *WeakRetained;
  id *v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t Log;
  NSObject *v13;
  int v14;
  char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  const char *v19;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "_stopRefreshRideOptionsTimer");
    objc_msgSend(v3, "_resetRequestRide");
    objc_storeStrong(v3 + 13, *(id *)(a1 + 32));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "paymentMethods"));
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "firstObject"));
    v6 = v3[19];
    v3[19] = (id)v5;

    v7 = v3[4];
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", v9));
    v11 = v3[14];
    v3[14] = (id)v10;

    objc_msgSend(v3, "_updateRequestRidePickupAndDropoffLocations");
  }
  else
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingDataCoordinator");
    v13 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = 136446722;
      v15 = "RideBookingDataCoordinator.m";
      v16 = 1026;
      v17 = 528;
      v18 = 2082;
      v19 = "-[RideBookingDataCoordinator startRequestRideForRideOption:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", (uint8_t *)&v14, 0x1Cu);
    }

  }
}

void sub_1004EAE90(uint64_t a1)
{
  id WeakRetained;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t Log;
  NSObject *v7;
  char *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  uint8_t buf[4];
  char *v17;
  __int16 v18;
  _QWORD v19[3];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = objc_claimAutoreleasedReturnValue(+[CLPlacemark placemarkWithGEOMapItem:](CLPlacemark, "placemarkWithGEOMapItem:", *((_QWORD *)WeakRetained + 5)));
    v3 = (void *)*((_QWORD *)WeakRetained + 15);
    *((_QWORD *)WeakRetained + 15) = v2;

    v4 = objc_claimAutoreleasedReturnValue(+[CLPlacemark placemarkWithGEOMapItem:](CLPlacemark, "placemarkWithGEOMapItem:", *((_QWORD *)WeakRetained + 6)));
    v5 = (void *)*((_QWORD *)WeakRetained + 16);
    *((_QWORD *)WeakRetained + 16) = v4;

    Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
    v7 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
      v9 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Updated Pickup: %@, Dropoff: %@"), *((_QWORD *)WeakRetained + 5), *((_QWORD *)WeakRetained + 6));
      *(_DWORD *)buf = 136315394;
      v17 = v8;
      v18 = 2112;
      v19[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

    }
    v10 = (void *)*((_QWORD *)WeakRetained + 11);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)WeakRetained + 13), "application"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "identifier"));
    v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKey:", v12));

    v14 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject expirationDate](v13, "expirationDate"));
    objc_msgSend(WeakRetained, "_startRequestRideExpireTimerWithExpirationDate:", v14);

    objc_msgSend(WeakRetained, "_cleanRequestLocationNames");
  }
  else
  {
    v15 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingDataCoordinator");
    v13 = (id)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v17 = "RideBookingDataCoordinator.m";
      v18 = 1026;
      LODWORD(v19[0]) = 544;
      WORD2(v19[0]) = 2082;
      *(_QWORD *)((char *)v19 + 6) = "-[RideBookingDataCoordinator _updateRequestRidePickupAndDropoffLocations]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_1004EB28C(uint64_t a1)
{
  id *v2;
  id *WeakRetained;
  uint64_t Log;
  NSObject *v5;
  char *v6;
  id v7;
  void *v8;
  id v9;
  double v10;
  double v11;
  uint64_t v12;
  NSObject *v13;
  _QWORD v14[4];
  id v15;
  uint8_t buf[4];
  char *v17;
  __int16 v18;
  _QWORD v19[3];

  v2 = (id *)(a1 + 40);
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
    v5 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
      v7 = objc_alloc((Class)NSString);
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[14], "identifier"));
      v9 = objc_msgSend(v7, "initWithFormat:", CFSTR("%@ _startRequestRideExpireTimerWithExpirationDate: %@"), v8, *(_QWORD *)(a1 + 32));
      *(_DWORD *)buf = 136315394;
      v17 = v6;
      v18 = 2112;
      v19[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

    }
    objc_msgSend(*(id *)(a1 + 32), "timeIntervalSinceNow");
    v11 = v10;
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1004EB4FC;
    v14[3] = &unk_1011AD260;
    objc_copyWeak(&v15, v2);
    objc_msgSend(WeakRetained, "_startTimer:withInterval:repeats:block:", WeakRetained + 17, 0, v14, v11);
    objc_destroyWeak(&v15);
  }
  else
  {
    v12 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingDataCoordinator");
    v13 = (id)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v17 = "RideBookingDataCoordinator.m";
      v18 = 1026;
      LODWORD(v19[0]) = 564;
      WORD2(v19[0]) = 2082;
      *(_QWORD *)((char *)v19 + 6) = "-[RideBookingDataCoordinator _startRequestRideExpireTimerWithExpirationDate:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_1004EB4E0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1004EB4FC(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  uint64_t Log;
  NSObject *v4;
  int v5;
  char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "_expireRequestRideStatus");
  }
  else
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingDataCoordinator");
    v4 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = 136446722;
      v6 = "RideBookingDataCoordinator.m";
      v7 = 1026;
      v8 = 570;
      v9 = 2082;
      v10 = "-[RideBookingDataCoordinator _startRequestRideExpireTimerWithExpirationDate:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: anotherStrongSelf went away in %{public}s", (uint8_t *)&v5, 0x1Cu);
    }

  }
}

void sub_1004EB790(uint64_t a1)
{
  id *WeakRetained;
  uint64_t Log;
  NSObject *v3;
  char *v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  uint8_t buf[4];
  char *v11;
  __int16 v12;
  _QWORD v13[3];

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
    v3 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
      v5 = objc_alloc((Class)NSString);
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[14], "identifier"));
      v7 = objc_msgSend(v5, "initWithFormat:", CFSTR("%@ _expireRequestRideStatus"), v6);
      *(_DWORD *)buf = 136315394;
      v11 = v4;
      v12 = 2112;
      v13[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

    }
    objc_msgSend(WeakRetained[21], "setRequestExpired:", 1);
    objc_msgSend(WeakRetained, "_updateRequestRideStatus:", WeakRetained[21]);
  }
  else
  {
    v8 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingDataCoordinator");
    v9 = (id)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v11 = "RideBookingDataCoordinator.m";
      v12 = 1026;
      LODWORD(v13[0]) = 583;
      WORD2(v13[0]) = 2082;
      *(_QWORD *)((char *)v13 + 6) = "-[RideBookingDataCoordinator _expireRequestRideStatus]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_1004EBB04(uint64_t a1)
{
  id *WeakRetained;
  uint64_t Log;
  NSObject *v3;
  char *v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  uint8_t buf[4];
  char *v11;
  __int16 v12;
  _QWORD v13[3];

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
    v3 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
      v5 = objc_alloc((Class)NSString);
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[14], "identifier"));
      v7 = objc_msgSend(v5, "initWithFormat:", CFSTR("%@ _stopRequestRideExpireTimer"), v6);
      *(_DWORD *)buf = 136315394;
      v11 = v4;
      v12 = 2112;
      v13[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

    }
    objc_msgSend(WeakRetained, "_stopTimer:", WeakRetained + 17);
  }
  else
  {
    v8 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingDataCoordinator");
    v9 = (id)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v11 = "RideBookingDataCoordinator.m";
      v12 = 1026;
      LODWORD(v13[0]) = 596;
      WORD2(v13[0]) = 2082;
      *(_QWORD *)((char *)v13 + 6) = "-[RideBookingDataCoordinator _stopRequestRideExpireTimer]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_1004EBE70(uint64_t a1)
{
  _QWORD *WeakRetained;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t Log;
  NSObject *v10;
  _QWORD block[7];
  _QWORD v12[4];
  NSObject *v13;
  _QWORD *v14;
  _QWORD v15[4];
  NSObject *v16;
  _BYTE *v17;
  _QWORD v18[5];
  id v19;
  _BYTE buf[32];
  void (*v21)(uint64_t);
  id v22;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    *(_QWORD *)&buf[24] = sub_1004E867C;
    v21 = sub_1004E868C;
    v22 = 0;
    v18[0] = 0;
    v18[1] = v18;
    v18[2] = 0x3032000000;
    v18[3] = sub_1004E867C;
    v18[4] = sub_1004E868C;
    v19 = 0;
    v3 = dispatch_group_create();
    dispatch_group_enter(v3);
    dispatch_group_enter(v3);
    v4 = WeakRetained[5];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_1004EC11C;
    v15[3] = &unk_1011B91F0;
    v17 = buf;
    v5 = v3;
    v16 = v5;
    objc_msgSend(WeakRetained, "cleanMapItemName:completion:", v4, v15);
    v6 = WeakRetained[6];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1004EC168;
    v12[3] = &unk_1011B91F0;
    v14 = v18;
    v7 = v5;
    v13 = v7;
    objc_msgSend(WeakRetained, "cleanMapItemName:completion:", v6, v12);
    v8 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1004EC1B4;
    block[3] = &unk_1011B8078;
    block[4] = WeakRetained;
    block[5] = buf;
    block[6] = v18;
    dispatch_group_notify(v7, v8, block);

    _Block_object_dispose(v18, 8);
    _Block_object_dispose(buf, 8);

  }
  else
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingDataCoordinator");
    v10 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "RideBookingDataCoordinator.m";
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = 608;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "-[RideBookingDataCoordinator _cleanRequestLocationNames]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_1004EC0F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1004EC11C(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_1004EC168(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_1004EC1B4(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  id v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CLPlacemark placemarkWithGEOMapItem:](CLPlacemark, "placemarkWithGEOMapItem:", *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40)));
  v3 = a1[4];
  v4 = *(void **)(v3 + 120);
  *(_QWORD *)(v3 + 120) = v2;
  v5 = v2;

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[CLPlacemark placemarkWithGEOMapItem:](CLPlacemark, "placemarkWithGEOMapItem:", *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40)));
  v7 = a1[4];
  v8 = *(void **)(v7 + 128);
  *(_QWORD *)(v7 + 128) = v6;
  v9 = v6;

  v10 = (void *)a1[4];
  v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "location"));
  objc_msgSend(v11, "coordinate");
  objc_msgSend(v10, "updateRequestRideStartingWaypointCoordinate:");

}

void sub_1004EC420(uint64_t a1)
{
  id *WeakRetained;
  id *v3;
  uint64_t v4;
  id v5;
  uint64_t Log;
  NSObject *v7;
  int v8;
  char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  const char *v13;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    objc_storeStrong(WeakRetained + 21, *(id *)(a1 + 32));
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "rideOption"));
    v5 = v3[13];
    v3[13] = (id)v4;

    if (v3[19])
      objc_msgSend(v3[21], "setPaymentMethod:");
    objc_msgSend(v3, "_broadcastRequestRideStatusDidChange");
  }
  else
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingDataCoordinator");
    v7 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = 136446722;
      v9 = "RideBookingDataCoordinator.m";
      v10 = 1026;
      v11 = 649;
      v12 = 2082;
      v13 = "-[RideBookingDataCoordinator _updateRequestRideStatus:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", (uint8_t *)&v8, 0x1Cu);
    }

  }
}

void sub_1004EC70C(uint64_t a1)
{
  id *v2;
  id *WeakRetained;
  uint64_t Log;
  NSObject *v5;
  char *v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  double v14;
  double v15;
  void *v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  _QWORD v20[6];
  id v21;
  _BYTE buf[32];
  void (*v23)(uint64_t);
  id v24;

  v2 = (id *)(a1 + 32);
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
    v5 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
      v7 = objc_alloc((Class)NSString);
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[14], "identifier"));
      v9 = objc_msgSend(v7, "initWithFormat:", CFSTR("%@ updateRequestRideStartingWaypointCoordinate: (%f, %f)"), v8, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v6;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    *(_QWORD *)&buf[24] = sub_1004E867C;
    v23 = sub_1004E868C;
    v24 = 0;
    v10 = objc_claimAutoreleasedReturnValue(+[RideBookingRequestRideStatus statusWithApplication:rideOption:startingWaypointCoordinate:origin:destination:loadingRequestRideStatus:etaMinutesAtStartWaypoint:](RideBookingRequestRideStatus, "statusWithApplication:rideOption:startingWaypointCoordinate:origin:destination:loadingRequestRideStatus:etaMinutesAtStartWaypoint:", WeakRetained[14], WeakRetained[13], WeakRetained[15], WeakRetained[16], 1, 0, *(double *)(a1 + 40), *(double *)(a1 + 48)));
    v11 = *(void **)(*(_QWORD *)&buf[8] + 40);
    *(_QWORD *)(*(_QWORD *)&buf[8] + 40) = v10;

    objc_msgSend(WeakRetained, "_updateRequestRideStatus:", *(_QWORD *)(*(_QWORD *)&buf[8] + 40));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[GEOMapService sharedService](GEOMapService, "sharedService"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "defaultTraits"));

    v14 = *(double *)(a1 + 40);
    v15 = *(double *)(a1 + 48);
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[GEOMapService sharedService](GEOMapService, "sharedService"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "ticketForReverseGeocodeCoordinate:includeEntryPoints:shiftLocationsIfNeeded:preserveOriginalLocation:traits:", 0, 0, 1, v13, v14, v15));

    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_1004ECA80;
    v20[3] = &unk_1011B9240;
    objc_copyWeak(&v21, v2);
    v20[4] = WeakRetained;
    v20[5] = buf;
    objc_msgSend(v17, "submitWithHandler:networkActivity:", v20, 0);
    objc_destroyWeak(&v21);

    _Block_object_dispose(buf, 8);
  }
  else
  {
    v18 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingDataCoordinator");
    v19 = (id)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "RideBookingDataCoordinator.m";
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = 667;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "-[RideBookingDataCoordinator updateRequestRideStartingWaypointCoordinate:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_1004ECA48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  id *v19;

  objc_destroyWeak(v19);
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1004ECA80(uint64_t a1, void *a2, void *a3)
{
  uint64_t Log;
  NSObject *v6;
  char *v7;
  id v8;
  void *v9;
  id v10;
  id *WeakRetained;
  void *v12;
  void *v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  char *v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  char *v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  NSObject *v44;
  id v45;
  _QWORD v46[4];
  id v47;
  uint64_t v48;
  id v49;
  uint8_t buf[4];
  char *v51;
  __int16 v52;
  _QWORD v53[2];

  v45 = a2;
  v43 = a3;
  if (v43)
  {
    Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
    v6 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
      v8 = objc_alloc((Class)NSString);
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "localizedDescription"));
      v10 = objc_msgSend(v8, "initWithFormat:", CFSTR("Received an error inside the completion handler of -[MKMapServiceTicket submitWithHandler:networkActivity:]:, %@"), v9);
      *(_DWORD *)buf = 136315394;
      v51 = v7;
      v52 = 2112;
      v53[0] = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{RBError}{%s}: %@", buf, 0x16u);

    }
  }
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "firstObject"));
    if (objc_msgSend(v12, "conformsToProtocol:", &OBJC_PROTOCOL___GEOMapItem))
      v13 = v12;
    else
      v13 = 0;
    v44 = v13;

    v14 = objc_claimAutoreleasedReturnValue(+[GEOMapItemStorage mapItemStorageForGEOMapItem:](GEOMapItemStorage, "mapItemStorageForGEOMapItem:", v44));
    if (v14)
    {
      v15 = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        v17 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
        v18 = objc_alloc((Class)NSString);
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[14], "identifier"));
        -[NSObject coordinate](v14, "coordinate");
        v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%+.8f, %+.8f"), v20, v21));
        v23 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject addressDictionary](v14, "addressDictionary"));
        v24 = objc_msgSend(v18, "initWithFormat:", CFSTR("%@ Sucessfully rev-geo'd pickup coordinate. Pickup Coordinates: %@, Address: %@"), v19, v22, v23);
        *(_DWORD *)buf = 136315394;
        v51 = v17;
        v52 = 2112;
        v53[0] = v24;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

      }
      v25 = objc_claimAutoreleasedReturnValue(+[CLPlacemark placemarkWithGEOMapItem:](CLPlacemark, "placemarkWithGEOMapItem:", v14));
      v26 = WeakRetained[15];
      WeakRetained[15] = (id)v25;

      v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
      v28 = objc_msgSend(v27, "copy");
      v29 = WeakRetained[18];
      WeakRetained[18] = v28;

      v30 = WeakRetained[15];
      v31 = WeakRetained[16];
      v33 = WeakRetained[13];
      v32 = WeakRetained[14];
      v46[0] = _NSConcreteStackBlock;
      v46[1] = 3221225472;
      v46[2] = sub_1004ECFAC;
      v46[3] = &unk_1011B9218;
      objc_copyWeak(&v49, (id *)(a1 + 48));
      v34 = v27;
      v35 = *(_QWORD *)(a1 + 40);
      v47 = v34;
      v48 = v35;
      objc_msgSend(v32, "getRequestRideStatusWithPickupLocation:dropOffLocation:rideOption:completion:", v30, v31, v33, v46);

      objc_destroyWeak(&v49);
    }
    else
    {
      v34 = (id)objc_claimAutoreleasedReturnValue(+[RideBookingRequestRideStatus statusWithApplication:error:](RideBookingRequestRideStatus, "statusWithApplication:error:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 112), 2));
      objc_msgSend(WeakRetained, "_updateRequestRideStatus:", v34);
      v37 = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
      v38 = objc_claimAutoreleasedReturnValue(v37);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        v39 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
        v40 = objc_alloc((Class)NSString);
        v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[14], "identifier"));
        v42 = objc_msgSend(v40, "initWithFormat:", CFSTR("%@ Rev-geo of pickup coordinate failed. Returning."), v41);
        *(_DWORD *)buf = 136315394;
        v51 = v39;
        v52 = 2112;
        v53[0] = v42;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "{RBError}{%s}: %@", buf, 0x16u);

      }
    }

  }
  else
  {
    v36 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingDataCoordinator");
    v14 = (id)objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v51 = "RideBookingDataCoordinator.m";
      v52 = 1026;
      LODWORD(v53[0]) = 698;
      WORD2(v53[0]) = 2082;
      *(_QWORD *)((char *)v53 + 6) = "-[RideBookingDataCoordinator updateRequestRideStartingWaypointCoordinate:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: anotherStrongSelf went away in %{public}s", buf, 0x1Cu);
    }
    v44 = v14;
  }

}

void sub_1004ECF90(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1004ECFAC(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  _QWORD *WeakRetained;
  uint64_t v9;
  uint64_t Log;
  NSObject *v11;
  char *v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  NSObject *v17;
  char *v18;
  id v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  NSObject *v23;
  uint8_t buf[4];
  char *v25;
  __int16 v26;
  _QWORD v27[3];

  v6 = a2;
  v7 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v9 = DefaultLoggingSubsystem;
    if (v7)
    {
      Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
      v11 = objc_claimAutoreleasedReturnValue(Log);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v12 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
        v13 = objc_alloc((Class)NSString);
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "localizedDescription"));
        v15 = objc_msgSend(v13, "initWithFormat:", CFSTR("Received an error inside the completion block of -[RideBookingApplication getRequestRideStatusWithPickupLocation:dropOffLocation:rideOption:completion:], %@"), v14);
        *(_DWORD *)buf = 136315394;
        v25 = v12;
        v26 = 2112;
        v27[0] = v15;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "{RBError}{%s}: %@", buf, 0x16u);

      }
    }
    v16 = GEOFindOrCreateLog(v9, "RideBooking");
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      v18 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
      v19 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Got request ride status %@"), v6);
      *(_DWORD *)buf = 136315394;
      v25 = v18;
      v26 = 2112;
      v27[0] = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

    }
    if (objc_msgSend(*(id *)(a1 + 32), "isEqual:", WeakRetained[18]))
    {
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
      if (!objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "requestRideStatusError"))
      {
        v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "origin"));
        v21 = (void *)WeakRetained[15];
        WeakRetained[15] = v20;

      }
      objc_msgSend(WeakRetained, "_updateRequestRideStatus:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
    }
  }
  else
  {
    v22 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingDataCoordinator");
    v23 = (id)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v25 = "RideBookingDataCoordinator.m";
      v26 = 1026;
      LODWORD(v27[0]) = 723;
      WORD2(v27[0]) = 2082;
      *(_QWORD *)((char *)v27 + 6) = "-[RideBookingDataCoordinator updateRequestRideStartingWaypointCoordinate:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: yetAnotherStrongSelf went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_1004ED46C(uint64_t a1)
{
  id WeakRetained;
  _QWORD *v3;
  uint64_t Log;
  NSObject *v5;
  int v6;
  char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    objc_storeStrong((id *)WeakRetained + 19, *(id *)(a1 + 32));
    objc_msgSend(v3, "_updateRequestRideStatus:", v3[21]);
  }
  else
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingDataCoordinator");
    v5 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = 136446722;
      v7 = "RideBookingDataCoordinator.m";
      v8 = 1026;
      v9 = 749;
      v10 = 2082;
      v11 = "-[RideBookingDataCoordinator updateRequestRidePaymentMethod:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", (uint8_t *)&v6, 0x1Cu);
    }

  }
}

void sub_1004ED7E4(uint64_t a1)
{
  id *WeakRetained;
  uint64_t Log;
  NSObject *v4;
  char *v5;
  id v6;
  NSString *v7;
  void *v8;
  id v9;
  id v10;
  NSObject *v11;
  uint64_t v12;
  uint8_t buf[4];
  char *v14;
  __int16 v15;
  _QWORD v16[3];

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
    v4 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
      v6 = objc_alloc((Class)NSString);
      v7 = NSStringFromSelector(*(SEL *)(a1 + 48));
      v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      v9 = objc_msgSend(v6, "initWithFormat:", CFSTR("%@, updated passengers from %lu to %lu"), v8, objc_msgSend(WeakRetained[20], "numberOfPassengers"), objc_msgSend(*(id *)(a1 + 32), "numberOfPassengers"));
      *(_DWORD *)buf = 136315394;
      v14 = v5;
      v15 = 2112;
      v16[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

    }
    v10 = *(id *)(a1 + 32);
    v11 = WeakRetained[20];
    WeakRetained[20] = v10;
  }
  else
  {
    v12 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingDataCoordinator");
    v11 = (id)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v14 = "RideBookingDataCoordinator.m";
      v15 = 1026;
      LODWORD(v16[0]) = 762;
      WORD2(v16[0]) = 2082;
      *(_QWORD *)((char *)v16 + 6) = "-[RideBookingDataCoordinator updateRequestRidePassengers:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_1004EDC48(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  id v4;
  uint64_t Log;
  NSObject *v6;
  char *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  _QWORD v17[4];
  id v18;
  _BYTE *v19;
  id v20[2];
  uint8_t buf[4];
  char *v22;
  __int16 v23;
  id v24;
  _BYTE v25[32];
  void (*v26)(uint64_t);
  id v27;

  v2 = (id *)(a1 + 48);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    *(_QWORD *)v25 = 0;
    *(_QWORD *)&v25[8] = v25;
    *(_QWORD *)&v25[16] = 0x3032000000;
    *(_QWORD *)&v25[24] = sub_1004E867C;
    v26 = sub_1004E868C;
    v27 = 0;
    objc_msgSend(WeakRetained, "_stopRequestRideExpireTimer");
    Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
    v6 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
      v8 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Requested ride with ride option %@"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 104));
      *(_DWORD *)buf = 136315394;
      v22 = v7;
      v23 = 2112;
      v24 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

    }
    v9 = *((_QWORD *)v4 + 15);
    v10 = *((_QWORD *)v4 + 16);
    v11 = *((_QWORD *)v4 + 13);
    v12 = (void *)*((_QWORD *)v4 + 14);
    v13 = objc_msgSend(*((id *)v4 + 20), "numberOfPassengers");
    v14 = *((_QWORD *)v4 + 19);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_1004EDF44;
    v17[3] = &unk_1011B9290;
    objc_copyWeak(v20, v2);
    v20[1] = *(id *)(a1 + 56);
    v19 = v25;
    v18 = *(id *)(a1 + 40);
    objc_msgSend(v12, "getRideStatusWithPickupLocation:dropOffLocation:rideOption:partySize:paymentMethod:completion:", v9, v10, v11, v13, v14, v17);

    objc_destroyWeak(v20);
    _Block_object_dispose(v25, 8);

  }
  else
  {
    v15 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingDataCoordinator");
    v16 = (id)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v25 = 136446722;
      *(_QWORD *)&v25[4] = "RideBookingDataCoordinator.m";
      *(_WORD *)&v25[12] = 1026;
      *(_DWORD *)&v25[14] = 775;
      *(_WORD *)&v25[18] = 2082;
      *(_QWORD *)&v25[20] = "-[RideBookingDataCoordinator requestRideWithCompletion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", v25, 0x1Cu);
    }

  }
}

void sub_1004EDF0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  id *v23;

  objc_destroyWeak(v23);
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_1004EDF44(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  _QWORD *WeakRetained;
  uint64_t v9;
  uint64_t Log;
  NSObject *v11;
  char *v12;
  id v13;
  NSString *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  NSObject *v19;
  char *v20;
  id v21;
  uint64_t v22;
  NSObject *v23;
  id v24;
  uint8_t buf[4];
  char *v26;
  __int16 v27;
  _QWORD v28[3];

  v6 = a2;
  v7 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v9 = DefaultLoggingSubsystem;
    if (v7)
    {
      Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
      v11 = objc_claimAutoreleasedReturnValue(Log);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v24 = v6;
        v12 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
        v13 = objc_alloc((Class)NSString);
        v14 = NSStringFromSelector(*(SEL *)(a1 + 56));
        v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "localizedDescription"));
        v17 = objc_msgSend(v13, "initWithFormat:", CFSTR("Received an error in %@:, %@"), v15, v16);
        *(_DWORD *)buf = 136315394;
        v26 = v12;
        v6 = v24;
        v27 = 2112;
        v28[0] = v17;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "{RBError}{%s}: %@", buf, 0x16u);

      }
    }
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
    v18 = GEOFindOrCreateLog(v9, "RideBooking");
    v19 = objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      v20 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
      v21 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Received ride status: %@"), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
      *(_DWORD *)buf = 136315394;
      v26 = v20;
      v27 = 2112;
      v28[0] = v21;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

    }
    objc_msgSend(WeakRetained, "_updateRideStatusMapWithApplication:status:", WeakRetained[14], *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v22 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingDataCoordinator");
    v23 = (id)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v26 = "RideBookingDataCoordinator.m";
      v27 = 1026;
      LODWORD(v28[0]) = 785;
      WORD2(v28[0]) = 2082;
      *(_QWORD *)((char *)v28 + 6) = "-[RideBookingDataCoordinator requestRideWithCompletion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: anotherStrongSelf went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_1004EE4A4(uint64_t a1)
{
  id *WeakRetained;
  id *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  char *v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  char *v12;
  id v13;
  uint64_t Log;
  uint8_t buf[4];
  char *v16;
  __int16 v17;
  _QWORD v18[3];

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (!WeakRetained)
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingDataCoordinator");
    v9 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v16 = "RideBookingDataCoordinator.m";
      v17 = 1026;
      LODWORD(v18[0]) = 810;
      WORD2(v18[0]) = 2082;
      *(_QWORD *)((char *)v18 + 6) = "-[RideBookingDataCoordinator addRideBookingDataCoordinatorRideStatusObserver:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
    }

    goto LABEL_11;
  }
  objc_msgSend(WeakRetained[22], "addObject:", *(_QWORD *)(a1 + 32));
  v4 = DefaultLoggingSubsystem;
  v5 = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v7 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
    v8 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Added RideStatus observer: %@"), *(_QWORD *)(a1 + 32));
    *(_DWORD *)buf = 136315394;
    v16 = v7;
    v17 = 2112;
    v18[0] = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

  }
  if ((objc_opt_respondsToSelector(*(_QWORD *)(a1 + 32), "rideStatusMapDidChange:") & 1) != 0)
  {
    v9 = objc_msgSend(v3[23], "copy");
    v10 = GEOFindOrCreateLog(v4, "RideBooking");
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      v12 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
      v13 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Notifying observer %@ of ride status change %@"), *(_QWORD *)(a1 + 32), v9);
      *(_DWORD *)buf = 136315394;
      v16 = v12;
      v17 = 2112;
      v18[0] = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

    }
    objc_msgSend(*(id *)(a1 + 32), "rideStatusMapDidChange:", v9);
LABEL_11:

  }
}

void sub_1004EE98C(uint64_t a1)
{
  id *WeakRetained;
  id *v3;
  uint64_t Log;
  NSObject *v5;
  char *v6;
  id v7;
  uint64_t v8;
  uint8_t buf[4];
  char *v10;
  __int16 v11;
  _QWORD v12[3];

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained[22], "removeObject:", *(_QWORD *)(a1 + 32));
    Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
    v5 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
      v7 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Removed RideStatus observer: %@"), *(_QWORD *)(a1 + 32));
      *(_DWORD *)buf = 136315394;
      v10 = v6;
      v11 = 2112;
      v12[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

    }
  }
  else
  {
    v8 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingDataCoordinator");
    v5 = (id)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v10 = "RideBookingDataCoordinator.m";
      v11 = 1026;
      LODWORD(v12[0]) = 829;
      WORD2(v12[0]) = 2082;
      *(_QWORD *)((char *)v12 + 6) = "-[RideBookingDataCoordinator removeRideBookingDataCoordinatorRideStatusObserver:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_1004EECD8(uint64_t a1)
{
  id *WeakRetained;
  id *v2;
  NSObject *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  id *v14;
  char *v15;
  id v16;
  NSString *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t Log;
  uint64_t v23;
  NSObject *v24;
  char *v25;
  id v26;
  id v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint8_t v33[128];
  uint8_t buf[4];
  char *v35;
  __int16 v36;
  _BYTE v37[14];

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (!WeakRetained)
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingDataCoordinator");
    v3 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v35 = "RideBookingDataCoordinator.m";
      v36 = 1026;
      *(_DWORD *)v37 = 841;
      *(_WORD *)&v37[4] = 2082;
      *(_QWORD *)&v37[6] = "-[RideBookingDataCoordinator updateRideStatusMap]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
    }

    goto LABEL_19;
  }
  if (objc_msgSend(WeakRetained[4], "count"))
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2[4], "allValues"));
    v4 = -[NSObject countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v30;
      v7 = DefaultLoggingSubsystem;
      do
      {
        v8 = 0;
        v28 = v5;
        do
        {
          if (*(_QWORD *)v30 != v6)
            objc_enumerationMutation(v3);
          v9 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)v8);
          if ((objc_msgSend(v9, "enabled") & 1) != 0)
          {
            objc_msgSend(v2, "_updateRideStatusMapForApplication:", v9);
          }
          else
          {
            v10 = GEOFindOrCreateLog(v7, "RideBooking");
            v11 = objc_claimAutoreleasedReturnValue(v10);
            if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
            {
              v12 = v6;
              v13 = v7;
              v14 = v2;
              v15 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
              v16 = objc_alloc((Class)NSString);
              v17 = NSStringFromSelector(*(SEL *)(a1 + 40));
              v18 = v3;
              v19 = (void *)objc_claimAutoreleasedReturnValue(v17);
              v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "identifier"));
              v21 = objc_msgSend(v16, "initWithFormat:", CFSTR("%@, Application %@ is not enabled"), v19, v20);
              *(_DWORD *)buf = 136315394;
              v35 = v15;
              v2 = v14;
              v7 = v13;
              v6 = v12;
              v36 = 2112;
              *(_QWORD *)v37 = v21;
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

              v3 = v18;
              v5 = v28;

            }
          }
          v8 = (char *)v8 + 1;
        }
        while (v5 != v8);
        v5 = -[NSObject countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
      }
      while (v5);
    }
LABEL_19:

    goto LABEL_23;
  }
  v23 = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
  v24 = objc_claimAutoreleasedReturnValue(v23);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
  {
    v25 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
    v26 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("No Ridebooking applications exist on this device. Broadcasting so and returning."));
    *(_DWORD *)buf = 136315394;
    v35 = v25;
    v36 = 2112;
    *(_QWORD *)v37 = v26;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

  }
  objc_msgSend(v2, "_broadcastRideStatusDidChange");
LABEL_23:

}

void sub_1004EF234(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4[2];

  v2 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1004EF2D4;
  v3[3] = &unk_1011B92E0;
  objc_copyWeak(v4, (id *)(a1 + 40));
  v4[1] = *(id *)(a1 + 48);
  objc_msgSend(v2, "getRideStatusWithCompletion:", v3);
  objc_destroyWeak(v4);
}

void sub_1004EF2C0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1004EF2D4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  NSObject *v8;
  uint64_t Log;
  NSObject *v10;
  char *v11;
  id v12;
  NSString *v13;
  void *v14;
  id v15;
  NSObject *v16;
  uint64_t v17;
  uint8_t buf[4];
  char *v19;
  __int16 v20;
  _QWORD v21[3];

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v8 = v5;
    Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
    v10 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v11 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
      v12 = objc_alloc((Class)NSString);
      v13 = NSStringFromSelector(*(SEL *)(a1 + 40));
      v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      v15 = objc_msgSend(v12, "initWithFormat:", CFSTR("%@, Got ride status: %@"), v14, v8);
      *(_DWORD *)buf = 136315394;
      v19 = v11;
      v20 = 2112;
      v21[0] = v15;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

    }
    v16 = objc_claimAutoreleasedReturnValue(-[NSObject application](v8, "application"));
    objc_msgSend(WeakRetained, "_updateRideStatusMapWithApplication:status:", v16, v8);
  }
  else
  {
    v17 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingDataCoordinator");
    v16 = (id)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v19 = "RideBookingDataCoordinator.m";
      v20 = 1026;
      LODWORD(v21[0]) = 865;
      WORD2(v21[0]) = 2082;
      *(_QWORD *)((char *)v21 + 6) = "-[RideBookingDataCoordinator _updateRideStatusMapForApplication:]_block_invoke_2";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
    }
    v8 = v16;
  }

}

void sub_1004EF6D0(uint64_t a1)
{
  _QWORD *WeakRetained;
  uint64_t v3;
  uint64_t Log;
  NSObject *v5;
  char *v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  NSMutableDictionary *v16;
  uint64_t v17;
  NSObject *p_super;
  void *v19;
  void *v20;
  uint64_t v21;
  char *v22;
  id v23;
  NSString *v24;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  char *v31;
  id v32;
  NSString *v33;
  void *v34;
  id v35;
  void *v36;
  double v37;
  void *v38;
  void *v39;
  uint64_t v40;
  NSObject *v41;
  char *v42;
  id v43;
  void *v44;
  id v45;
  id v46;
  void *v47;
  uint64_t v48;
  char *v49;
  id v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  NSObject *v55;
  char *v56;
  id v57;
  uint8_t buf[4];
  char *v59;
  __int16 v60;
  _QWORD v61[3];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    if ((objc_msgSend(*(id *)(a1 + 32), "isValidRide") & 1) != 0)
    {
      if (objc_msgSend(*(id *)(a1 + 32), "phase") == (id)4)
      {
        v3 = DefaultLoggingSubsystem;
        Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
        v5 = objc_claimAutoreleasedReturnValue(Log);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        {
          v6 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
          v7 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Handling completed rides"));
          *(_DWORD *)buf = 136315394;
          v59 = v6;
          v60 = 2112;
          v61[0] = v7;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

        }
        v8 = (void *)WeakRetained[23];
        v9 = *(_QWORD *)(a1 + 32);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "identifier"));
        objc_msgSend(v8, "setObject:forKey:", v9, v10);

        v11 = (void *)WeakRetained[24];
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "identifier"));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKey:", v12));
        v14 = objc_msgSend(v13, "mutableCopy");
        v15 = v14;
        if (v14)
          v16 = (NSMutableDictionary *)v14;
        else
          v16 = objc_opt_new(NSMutableDictionary);
        p_super = &v16->super.super;

        v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
        v26 = (id)objc_claimAutoreleasedReturnValue(-[NSObject objectForKey:](p_super, "objectForKey:", v36));

        if (v26)
        {
          objc_msgSend(v26, "timeIntervalSinceNow");
          if (v37 >= -GEOConfigGetDouble(MapsConfig_RideBookingMaximumCompletedRideDisplayTimeInterval, off_1014B2E78))
          {
LABEL_24:
            v51 = (void *)WeakRetained[24];
            v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "identifier"));
            objc_msgSend(v51, "setObject:forKey:", p_super, v52);

            v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
            objc_msgSend(v53, "setObject:forKey:", WeakRetained[24], CFSTR("RideBookingCompletedRideIdentifiersAndDates"));

            v54 = GEOFindOrCreateLog(v3, "RideBooking");
            v55 = objc_claimAutoreleasedReturnValue(v54);
            if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
            {
              v56 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
              v57 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Completed rides: %@"), WeakRetained[24]);
              *(_DWORD *)buf = 136315394;
              v59 = v56;
              v60 = 2112;
              v61[0] = v57;
              _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

            }
            objc_msgSend(WeakRetained, "_broadcastRideStatusDidChange");
            goto LABEL_27;
          }
          v38 = (void *)WeakRetained[23];
          v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "identifier"));
          objc_msgSend(v38, "removeObjectForKey:", v39);

          v40 = GEOFindOrCreateLog(v3, "RideBooking");
          v41 = objc_claimAutoreleasedReturnValue(v40);
          if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
          {
            v42 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
            v43 = objc_alloc((Class)NSString);
            v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "identifier"));
            v45 = objc_msgSend(v43, "initWithFormat:", CFSTR("Ride is too old, removing application from the status map: %@"), v44);
            *(_DWORD *)buf = 136315394;
            v59 = v42;
            v60 = 2112;
            v61[0] = v45;
LABEL_22:
            _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

          }
        }
        else
        {
          v46 = objc_alloc_init((Class)NSDate);
          v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
          -[NSObject setObject:forKey:](p_super, "setObject:forKey:", v46, v47);

          v48 = GEOFindOrCreateLog(v3, "RideBooking");
          v41 = objc_claimAutoreleasedReturnValue(v48);
          if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
          {
            v49 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
            v50 = objc_alloc((Class)NSString);
            v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "identifier"));
            v45 = objc_msgSend(v50, "initWithFormat:", CFSTR("Saving the ride identifier %@ with a time stamp"), v44);
            *(_DWORD *)buf = 136315394;
            v59 = v49;
            v60 = 2112;
            v61[0] = v45;
            goto LABEL_22;
          }
        }

        goto LABEL_24;
      }
      v27 = (void *)WeakRetained[23];
      v28 = *(_QWORD *)(a1 + 32);
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "identifier"));
      objc_msgSend(v27, "setObject:forKey:", v28, v29);

      objc_msgSend(WeakRetained, "_broadcastRideStatusDidChange");
      v30 = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
      p_super = objc_claimAutoreleasedReturnValue(v30);
      if (os_log_type_enabled(p_super, OS_LOG_TYPE_INFO))
      {
        v31 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
        v32 = objc_alloc((Class)NSString);
        v33 = NSStringFromSelector(*(SEL *)(a1 + 56));
        v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
        v35 = objc_msgSend(v32, "initWithFormat:", CFSTR("Returning from %@ because status.phase != RideBookingRideStatusPhaseCompleted. status.phase is %lu"), v34, objc_msgSend(*(id *)(a1 + 32), "phase"));
        *(_DWORD *)buf = 136315394;
        v59 = v31;
        v60 = 2112;
        v61[0] = v35;
        _os_log_impl((void *)&_mh_execute_header, p_super, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

      }
    }
    else
    {
      v19 = (void *)WeakRetained[23];
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "identifier"));
      objc_msgSend(v19, "removeObjectForKey:", v20);

      objc_msgSend(WeakRetained, "_broadcastRideStatusDidChange");
      v21 = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
      p_super = objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(p_super, OS_LOG_TYPE_INFO))
      {
        v22 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
        v23 = objc_alloc((Class)NSString);
        v24 = NSStringFromSelector(*(SEL *)(a1 + 56));
        v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
        v26 = objc_msgSend(v23, "initWithFormat:", CFSTR("Returning from %@ because ride it's not a valid ride"), v25);
        *(_DWORD *)buf = 136315394;
        v59 = v22;
        v60 = 2112;
        v61[0] = v26;
        _os_log_impl((void *)&_mh_execute_header, p_super, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

LABEL_27:
      }
    }
  }
  else
  {
    v17 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingDataCoordinator");
    p_super = (id)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(p_super, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v59 = "RideBookingDataCoordinator.m";
      v60 = 1026;
      LODWORD(v61[0]) = 881;
      WORD2(v61[0]) = 2082;
      *(_QWORD *)((char *)v61 + 6) = "-[RideBookingDataCoordinator _updateRideStatusMapWithApplication:status:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, p_super, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_1004F02B8(uint64_t a1)
{
  id WeakRetained;
  uint64_t Log;
  NSObject *v4;
  char *v5;
  id v6;
  NSString *v7;
  void *v8;
  id v9;
  NSObject *v10;
  uint64_t v11;
  uint8_t buf[4];
  char *v13;
  __int16 v14;
  _QWORD v15[3];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
    v4 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
      v6 = objc_alloc((Class)NSString);
      v7 = NSStringFromSelector(*(SEL *)(a1 + 48));
      v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      v9 = objc_msgSend(v6, "initWithFormat:", CFSTR("%@, %@"), v8, *(_QWORD *)(a1 + 32));
      *(_DWORD *)buf = 136315394;
      v13 = v5;
      v14 = 2112;
      v15[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

    }
    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
    objc_msgSend(WeakRetained, "_updateRideStatusMapWithApplication:status:", v10, *(_QWORD *)(a1 + 32));
  }
  else
  {
    v11 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingDataCoordinator");
    v10 = (id)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v13 = "RideBookingDataCoordinator.m";
      v14 = 1026;
      LODWORD(v15[0]) = 958;
      WORD2(v15[0]) = 2082;
      *(_QWORD *)((char *)v15 + 6) = "-[RideBookingDataCoordinator rideStatusDidChange:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_1004F0774(uint64_t a1)
{
  _QWORD *WeakRetained;
  uint64_t Log;
  NSObject *v4;
  char *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  _QWORD v16[4];
  NSObject *v17;
  uint64_t v18;
  uint8_t buf[4];
  char *v20;
  __int16 v21;
  _QWORD v22[3];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
    v4 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
      v6 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Sending feedback for ride status: %@"), *(_QWORD *)(a1 + 32));
      *(_DWORD *)buf = 136315394;
      v20 = v5;
      v21 = 2112;
      v22[0] = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

    }
    v7 = (void *)WeakRetained[4];
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKey:", v9));

    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_1004F09CC;
    v16[3] = &unk_1011B3270;
    v18 = *(_QWORD *)(a1 + 72);
    v13 = *(_QWORD *)(a1 + 48);
    v17 = *(id *)(a1 + 56);
    -[NSObject sendFeedbackForRideStatus:feedbackRating:feedbackTip:completion:](v10, "sendFeedbackForRideStatus:feedbackRating:feedbackTip:completion:", v11, v12, v13, v16);
    v14 = v17;
  }
  else
  {
    v15 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingDataCoordinator");
    v14 = (id)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v20 = "RideBookingDataCoordinator.m";
      v21 = 1026;
      LODWORD(v22[0]) = 976;
      WORD2(v22[0]) = 2082;
      *(_QWORD *)((char *)v22 + 6) = "-[RideBookingDataCoordinator sendFeedbackForRideStatus:feedbackRating:feedbackTip:c"
                                     "ompletion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
    }
    v10 = v14;
  }

}

void sub_1004F09CC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t Log;
  NSObject *v5;
  char *v6;
  id v7;
  NSString *v8;
  void *v9;
  void *v10;
  id v11;
  uint8_t buf[4];
  char *v13;
  __int16 v14;
  id v15;

  v3 = a2;
  if (v3)
  {
    Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
    v5 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
      v7 = objc_alloc((Class)NSString);
      v8 = NSStringFromSelector(*(SEL *)(a1 + 40));
      v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localizedDescription"));
      v11 = objc_msgSend(v7, "initWithFormat:", CFSTR("Received an error in %@:, %@"), v9, v10);
      *(_DWORD *)buf = 136315394;
      v13 = v6;
      v14 = 2112;
      v15 = v11;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{RBError}{%s}: %@", buf, 0x16u);

    }
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_1004F0DA8(uint64_t a1)
{
  _QWORD *WeakRetained;
  uint64_t Log;
  NSObject *v4;
  char *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  _QWORD v14[4];
  NSObject *v15;
  uint64_t v16;
  uint8_t buf[4];
  char *v18;
  __int16 v19;
  _QWORD v20[3];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
    v4 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
      v6 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Checking if ride can be cancelled for ride %@"), *(_QWORD *)(a1 + 32));
      *(_DWORD *)buf = 136315394;
      v18 = v5;
      v19 = 2112;
      v20[0] = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

    }
    v7 = (void *)WeakRetained[4];
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKey:", v9));

    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1004F0FF4;
    v14[3] = &unk_1011B9330;
    v16 = *(_QWORD *)(a1 + 56);
    v11 = *(_QWORD *)(a1 + 32);
    v15 = *(id *)(a1 + 40);
    -[NSObject checkIfCanCancelRideWithRideStatus:completion:](v10, "checkIfCanCancelRideWithRideStatus:completion:", v11, v14);
    v12 = v15;
  }
  else
  {
    v13 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingDataCoordinator");
    v12 = (id)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v18 = "RideBookingDataCoordinator.m";
      v19 = 1026;
      LODWORD(v20[0]) = 1001;
      WORD2(v20[0]) = 2082;
      *(_QWORD *)((char *)v20 + 6) = "-[RideBookingDataCoordinator checkIfCanCancelRideWithRideStatus:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
    }
    v10 = v12;
  }

}

void sub_1004F0FF4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t Log;
  NSObject *v11;
  char *v12;
  id v13;
  NSString *v14;
  void *v15;
  void *v16;
  id v17;
  uint8_t buf[4];
  char *v19;
  __int16 v20;
  id v21;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (v9)
  {
    Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
    v11 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
      v13 = objc_alloc((Class)NSString);
      v14 = NSStringFromSelector(*(SEL *)(a1 + 40));
      v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "localizedDescription"));
      v17 = objc_msgSend(v13, "initWithFormat:", CFSTR("Received an error in %@:, %@"), v15, v16);
      *(_DWORD *)buf = 136315394;
      v19 = v12;
      v20 = 2112;
      v21 = v17;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "{RBError}{%s}: %@", buf, 0x16u);

    }
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_1004F1400(uint64_t a1)
{
  _QWORD *WeakRetained;
  uint64_t Log;
  NSObject *v4;
  char *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  _QWORD v16[5];
  NSObject *v17;
  uint64_t v18;
  uint8_t buf[4];
  char *v20;
  __int16 v21;
  _QWORD v22[3];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
    v4 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
      v6 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Sending a request to cancel the ride %@"), *(_QWORD *)(a1 + 32));
      *(_DWORD *)buf = 136315394;
      v20 = v5;
      v21 = 2112;
      v22[0] = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

    }
    v7 = (void *)WeakRetained[4];
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKey:", v9));

    v11 = *(_QWORD *)(a1 + 32);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_1004F1654;
    v16[3] = &unk_1011B9378;
    v12 = *(id *)(a1 + 48);
    v13 = *(_QWORD *)(a1 + 64);
    v17 = v12;
    v18 = v13;
    v16[4] = *(_QWORD *)(a1 + 40);
    -[NSObject cancelRideWithRideStatus:completion:](v10, "cancelRideWithRideStatus:completion:", v11, v16);
    v14 = v17;
  }
  else
  {
    v15 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingDataCoordinator");
    v14 = (id)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v20 = "RideBookingDataCoordinator.m";
      v21 = 1026;
      LODWORD(v22[0]) = 1023;
      WORD2(v22[0]) = 2082;
      *(_QWORD *)((char *)v22 + 6) = "-[RideBookingDataCoordinator cancelRideWithRideStatus:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
    }
    v10 = v14;
  }

}

void sub_1004F1654(uint64_t a1, void *a2)
{
  id v3;
  uint64_t Log;
  NSObject *v5;
  char *v6;
  id v7;
  NSString *v8;
  void *v9;
  void *v10;
  id v11;
  double Double;
  dispatch_time_t v13;
  uint8_t buf[4];
  char *v15;
  __int16 v16;
  id v17;

  v3 = a2;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  if (v3)
  {
    Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
    v5 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
      v7 = objc_alloc((Class)NSString);
      v8 = NSStringFromSelector(*(SEL *)(a1 + 48));
      v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localizedDescription"));
      v11 = objc_msgSend(v7, "initWithFormat:", CFSTR("Received an error in %@:, %@"), v9, v10);
      *(_DWORD *)buf = 136315394;
      v15 = v6;
      v16 = 2112;
      v17 = v11;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{RBError}{%s}: %@", buf, 0x16u);

    }
  }
  else
  {
    Double = GEOConfigGetDouble(GEOConfigMapsSuggestionsRidesharingSourceRefreshDelay[0], GEOConfigMapsSuggestionsRidesharingSourceRefreshDelay[1]);
    v13 = dispatch_time(0, (uint64_t)(Double * 1000000000.0));
    dispatch_after(v13, *(dispatch_queue_t *)(*(_QWORD *)(a1 + 32) + 16), &stru_1011B9350);
  }

}

void sub_1004F17E8(id a1)
{
  uint64_t Log;
  NSObject *v2;
  char *v3;
  id v4;
  int v5;
  char *v6;
  __int16 v7;
  id v8;

  Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
  v2 = objc_claimAutoreleasedReturnValue(Log);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
    v4 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Sending a MapsSuggestionsRidesharingSourceShouldRefresh notify. Triggered by a successful cancellation."));
    v5 = 136315394;
    v6 = v3;
    v7 = 2112;
    v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", (uint8_t *)&v5, 0x16u);

  }
  notify_post("MapsSuggestionsRidesharingSourceShouldRefresh");
}

void sub_1004F1A98(uint64_t a1)
{
  uint64_t Log;
  NSObject *v3;
  char *v4;
  id v5;
  _QWORD *WeakRetained;
  NSObject *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint8_t v18[128];
  uint8_t buf[4];
  char *v20;
  __int16 v21;
  _BYTE v22[14];

  Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
  v3 = objc_claimAutoreleasedReturnValue(Log);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
    v5 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Enabling applications: %@"), *(_QWORD *)(a1 + 32));
    *(_DWORD *)buf = 136315394;
    v20 = v4;
    v21 = 2112;
    *(_QWORD *)v22 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v7 = *(id *)(a1 + 32);
    v8 = -[NSObject countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v15;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(_QWORD *)v15 != v10)
            objc_enumerationMutation(v7);
          v12 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)i);
          objc_msgSend(v12, "enableForUse");
          objc_msgSend(WeakRetained, "_updateRideOptionStatusMapForOrigin:destination:application:", WeakRetained[5], WeakRetained[6], v12);
        }
        v9 = -[NSObject countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      }
      while (v9);
    }
  }
  else
  {
    v13 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingDataCoordinator");
    v7 = (id)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v20 = "RideBookingDataCoordinator.m";
      v21 = 1026;
      *(_DWORD *)v22 = 1054;
      *(_WORD *)&v22[4] = 2082;
      *(_QWORD *)&v22[6] = "-[RideBookingDataCoordinator enableRideBookingApplications:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_1004F21E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1004F2220(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t Log;
  NSObject *v8;
  char *v9;
  id v10;
  uint8_t buf[4];
  char *v12;
  __int16 v13;
  id v14;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "firstObject"));
  if (objc_msgSend(v3, "conformsToProtocol:", &OBJC_PROTOCOL___GEOMapItem))
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GEOMapItemStorage mapItemStorageForGEOMapItem:](GEOMapItemStorage, "mapItemStorageForGEOMapItem:", v5));
  if (v6)
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v6);
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
  v8 = objc_claimAutoreleasedReturnValue(Log);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    v9 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingDataCoordinator.m");
    v10 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Finished looking up the name after issuing a Ticket. MapItem has been cleaned.  %llu"), objc_msgSend(v5, "_muid"));
    *(_DWORD *)buf = 136315394;
    v12 = v9;
    v13 = 2112;
    v14 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

  }
}

void sub_1004F3478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  id *v24;
  id *v25;

  objc_destroyWeak(v25);
  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1004F34C8(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v7 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "updateIdentifier"));
    if (!objc_msgSend(v5, "isEqual:", *(_QWORD *)(a1 + 32)))
    {
LABEL_6:

      goto LABEL_7;
    }
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "collectionItem"));

    if (v7 && v6)
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "publisherLogoImageView"));
      objc_msgSend(v5, "setImage:", v7);
      goto LABEL_6;
    }
  }
LABEL_7:

}

void sub_1004F3570(uint64_t a1, void *a2, uint64_t a3, int a4, char a5)
{
  id v9;
  id WeakRetained;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  NSObject *v20;
  _BOOL4 v21;
  double v22;
  const char *v23;
  id v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  NSObject *v30;
  void *v31;
  _QWORD v32[5];
  id v33;
  _QWORD v34[5];
  id v35;
  uint8_t buf[4];
  void *v37;

  v9 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v11 = WeakRetained;
  if ((a5 & 1) == 0)
  {
    v24 = sub_1004316CC();
    v25 = objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionItem"));
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "collectionTitle"));
      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "string"));
      *(_DWORD *)buf = 138412290;
      v37 = v28;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "Cancelled image download for collection: %@", buf, 0xCu);

    }
    goto LABEL_19;
  }
  if (!WeakRetained)
    goto LABEL_16;
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "updateIdentifier"));
  if ((objc_msgSend(v12, "isEqual:", *(_QWORD *)(a1 + 40)) & 1) == 0)
  {

    goto LABEL_16;
  }
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionItem"));

  if (!v13)
  {
LABEL_16:
    v29 = sub_1004316CC();
    v30 = objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "Cell doesn't exist OR identifier mistach", buf, 2u);
    }

    goto LABEL_19;
  }
  v14 = sub_1004316CC();
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "collectionItem"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "collectionTitle"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "string"));
    *(_DWORD *)buf = 138412290;
    v37 = v18;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "[⌛]Received image for : %@", buf, 0xCu);

  }
  if (v9 && !a3)
  {
    v19 = sub_1004316CC();
    v20 = objc_claimAutoreleasedReturnValue(v19);
    v21 = os_log_type_enabled(v20, OS_LOG_TYPE_INFO);
    if (a4)
    {
      v22 = 0.0;
      if (v21)
      {
        *(_WORD *)buf = 0;
        v23 = "Received cached image. Displaying without animation.";
LABEL_22:
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, v23, buf, 2u);
      }
    }
    else
    {
      v22 = 0.100000001;
      if (v21)
      {
        *(_WORD *)buf = 0;
        v23 = "Received non-cached image. Displaying with animation.";
        goto LABEL_22;
      }
    }

    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "collectionImageView"));
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472;
    v34[2] = sub_1004F38D0;
    v34[3] = &unk_1011AC8B0;
    v34[4] = v11;
    v35 = v9;
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    v32[2] = sub_1004F390C;
    v32[3] = &unk_1011ACCB8;
    v32[4] = v11;
    v33 = *(id *)(a1 + 48);
    +[UIView transitionWithView:duration:options:animations:completion:](UIView, "transitionWithView:duration:options:animations:completion:", v31, 5242882, v34, v32, v22);

  }
LABEL_19:

}

void sub_1004F38D0(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionImageView"));
  objc_msgSend(v2, "setImage:", v1);

}

void sub_1004F390C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  int v9;
  void *v10;
  __int16 v11;
  uint64_t v12;

  v2 = sub_1004316CC();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionItem"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "collectionTitle"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "string"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    objc_msgSend(v7, "timeIntervalSinceDate:", *(_QWORD *)(a1 + 40));
    v9 = 138412546;
    v10 = v6;
    v11 = 2048;
    v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[⌛]Finished showing image for : %@ in %f", (uint8_t *)&v9, 0x16u);

  }
}

uint64_t sub_1004F60E8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD v11[4];
  id v12;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v3));

  if (v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v3));
    v6 = (uint64_t)objc_msgSend(v5, "unsignedIntegerValue");
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationProxy applicationProxyForIdentifier:](LSApplicationProxy, "applicationProxyForIdentifier:", v3));
    v5 = v7;
    if (v7 && (v8 = *(void **)(a1 + 40)) != 0)
    {
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_1004F6210;
      v11[3] = &unk_1011B9440;
      v12 = v7;
      v6 = (uint64_t)objc_msgSend(v8, "indexOfObjectPassingTest:", v11);

    }
    else
    {
      v6 = 0x7FFFFFFFFFFFFFFFLL;
    }
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v6));
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v9, v3);

  }
  return v6;
}

id sub_1004F6210(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "identifier"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "itemID"));
  v5 = objc_msgSend(v3, "isEqual:", v4);

  return v5;
}

uint64_t sub_1004F6270(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  void *v18;
  void *v19;
  void *v20;
  void *v22;

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "application"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "identifier"));

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "application"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "identifier"));

  if (v8 && v10)
  {
    v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v8));
    v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v10));
    v13 = (void *)v12;
    if (v11 && v12)
    {
      v14 = (uint64_t)objc_msgSend((id)v12, "compare:", v11);
    }
    else
    {
      if (v11)
        v14 = -1;
      else
        v14 = 1;
      if (!(v11 | v12))
      {
        v15 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
        v16 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
        if (v15 == 0x7FFFFFFFFFFFFFFFLL || v16 == 0x7FFFFFFFFFFFFFFFLL)
        {
          v17 = v15 == 0x7FFFFFFFFFFFFFFFLL;
          if (v15 == 0x7FFFFFFFFFFFFFFFLL)
            v14 = 1;
          else
            v14 = -1;
          if (v17 && v16 == 0x7FFFFFFFFFFFFFFFLL)
          {
            v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "application"));
            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "name"));
            v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "application"));
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "name"));
            v14 = (uint64_t)objc_msgSend(v18, "compare:", v20);

          }
        }
        else if (v15 >= v16)
        {
          v14 = v15 > v16;
        }
        else
        {
          v14 = -1;
        }
      }
    }

  }
  else if (v8)
  {
    v14 = -1;
  }
  else
  {
    v14 = v10 != 0;
  }

  return v14;
}

id sub_1004F6860(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v5 = *(void **)(a1 + 32);
  v6 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", a3));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v6));

  v9 = objc_msgSend(v7, "compare:", v8);
  return v9;
}

void sub_1004F7340(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v2 = (void *)qword_1014D2710;
  qword_1014D2710 = v1;

}

void sub_1004F74BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1004F74D4(uint64_t a1)
{
  _BOOL8 result;

  result = +[UIApplication _maps_isAnySceneForegroundForRole:](UIApplication, "_maps_isAnySceneForegroundForRole:", UIWindowSceneSessionRoleApplication);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1004F7644(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_setDesiredIdleTimerState:forReason:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_1004F7880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1004F7898(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1004F78A8(uint64_t a1)
{

}

void sub_1004F78B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_summaryString"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1004F7C84(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_msgSend(*(id *)(a1 + 32), "_idleTimerReasonPermittedInBackground:", objc_msgSend(v3, "unsignedIntegerValue")) & 1) == 0)objc_msgSend(*(id *)(a1 + 40), "removeObjectForKey:", v3);

}

void sub_1004F7E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1004F7EA8(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id result;

  result = objc_msgSend(a3, "unsignedIntegerValue");
  if (result == (id)2)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

void sub_1004F7FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 48), 8);
  _Unwind_Resume(a1);
}

id sub_1004F7FF4(uint64_t a1, uint64_t a2, void *a3)
{
  id result;
  uint64_t v5;

  result = objc_msgSend(a3, "unsignedIntegerValue");
  if (result == (id)2)
  {
    v5 = *(_QWORD *)(a1 + 40);
  }
  else
  {
    if (result != (id)1)
      return result;
    v5 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(*(_QWORD *)(v5 + 8) + 24) = 1;
  return result;
}

void sub_1004F843C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1004F8460(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id WeakRetained;

  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "object"));
  LOBYTE(v3) = objc_msgSend(v3, "_shouldIgnoreScene:", v4);

  if ((v3 & 1) == 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(WeakRetained, "_asyncUpdateForApplicationState:", 1);

  }
}

void sub_1004F84E4(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id WeakRetained;

  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "object"));
  LOBYTE(v3) = objc_msgSend(v3, "_shouldIgnoreScene:", v4);

  if ((v3 & 1) == 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(WeakRetained, "_syncUpdateForApplicationState:", +[UIApplication _maps_isAnySceneForegroundForRole:](UIApplication, "_maps_isAnySceneForegroundForRole:", UIWindowSceneSessionRoleApplication));

  }
}

id sub_1004F8710(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_updateForApplicationState:", *(unsigned __int8 *)(a1 + 40));
}

id sub_1004F882C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_updateForApplicationState:", *(unsigned __int8 *)(a1 + 40));
}

id sub_1004F8B5C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateIdleTimer");
}

void sub_1004F8C14(id a1)
{
  MapsInternalAlertPresentationController *v1;
  void *v2;

  v1 = objc_alloc_init(MapsInternalAlertPresentationController);
  v2 = (void *)qword_1014D2720;
  qword_1014D2720 = (uint64_t)v1;

}

void sub_1004F9718(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "rootViewController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "presentedViewController"));

  if (!v3)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 8), "removeObjectForKey:", *(_QWORD *)(a1 + 48));
}

void sub_1004FA278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1004FA290(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v7;
  unsigned __int8 v8;

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "waypoint"));
  v8 = objc_msgSend(v7, "isValid");

  if ((v8 & 1) == 0)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a3;
    *a4 = 1;
  }
}

void sub_1004FA478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1004FA490(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  unsigned int v6;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "searchResult"));
  v6 = objc_msgSend(v5, "isDynamicCurrentLocation");

  if (v6)
  {
    objc_msgSend(*(id *)(a1 + 32), "addIndex:", a3);
    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  }
}

BOOL sub_1004FA54C(id a1, SearchFieldItem *a2, unint64_t a3, BOOL *a4)
{
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  unsigned __int8 v8;

  v4 = (void *)objc_claimAutoreleasedReturnValue(-[SearchFieldItem composedWaypoint](a2, "composedWaypoint", a3, a4));
  v5 = objc_opt_class(GEOComposedWaypoint);
  if ((objc_opt_isKindOfClass(v4, v5) & 1) != 0)
    v6 = v4;
  else
    v6 = 0;
  v7 = v6;

  v8 = objc_msgSend(v7, "isServerProvidedWaypoint");
  return v8 ^ 1;
}

id sub_1004FB138(id a1, MapsRadarImageAttachment *a2, unint64_t a3)
{
  void *v3;
  void *v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(-[MapsRadarImageAttachment temporaryFileURL](a2, "temporaryFileURL", a3));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "path"));

  return v4;
}

id sub_1004FB174(id a1, MapsRadarAttachment *a2, unint64_t a3)
{
  void *v3;
  void *v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(-[MapsRadarAttachment temporaryFileURL](a2, "temporaryFileURL", a3));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "path"));

  return v4;
}

id sub_1004FB1B0(id a1, MapsRadarKeyword *a2, unint64_t a3)
{
  return +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", -[MapsRadarKeyword number](a2, "number", a3));
}

void sub_1004FB1E0(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_1014D2730;
  qword_1014D2730 = (uint64_t)v1;

  objc_msgSend((id)qword_1014D2730, "setDateFormat:", CFSTR("yyyy.MM.dd_HH-mm-ss"));
}

void sub_1004FBC54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1004FBC78(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_updateSharingFooterWithIdentity:", v3);

}

void sub_1004FC238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1004FC25C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_dismiss");

}

void sub_1004FC5E0(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "superview"));
  objc_msgSend(v3, "layoutIfNeeded");

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cardPresentationController"));
  objc_msgSend(v4, "updateHeightForCurrentLayout");

}

void sub_1004FD6E0(uint64_t a1)
{
  id *WeakRetained;
  id *v3;
  void *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *i;
  void *v15;
  void *v16;
  unsigned int v17;
  void *v18;
  void *v19;
  uint64_t Log;
  NSObject *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint8_t v27[128];
  uint8_t buf[4];
  char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  const char *v33;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v22 = a1;
    objc_storeStrong(WeakRetained + 2, *(id *)(a1 + 32));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3[2], "rideOptionStatusMap"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "allValues"));
    objc_msgSend(v3[1], "setNumberOfInstalledExtensions:", objc_msgSend(v5, "count"));

    v6 = (void *)objc_claimAutoreleasedReturnValue(+[RidesharingAppPreferenceManager mostRecentSelectedAppIdentifers](RidesharingAppPreferenceManager, "mostRecentSelectedAppIdentifers"));
    v7 = objc_msgSend(v6, "mutableCopy");

    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3[2], "rideOptionStatusMap"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "allValues"));

    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    if (v10)
    {
      v11 = v10;
      v12 = 0;
      v13 = *(_QWORD *)v24;
      do
      {
        for (i = 0; i != v11; i = (char *)i + 1)
        {
          if (*(_QWORD *)v24 != v13)
            objc_enumerationMutation(v9);
          v15 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i);
          objc_msgSend(v3, "_updateAnalyticsWithRideOptionStatus:", v15);
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "application"));
          v17 = objc_msgSend(v16, "enabled");

          if (v17)
          {
            ++v12;
            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "application"));
            v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "identifier"));
            -[NSObject removeObject:](v7, "removeObject:", v19);

          }
        }
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
      }
      while (v11);
    }
    else
    {
      v12 = 0;
    }

    +[RidesharingAppPreferenceManager removeRecordedAppSelectionForAppIdentifiers:](RidesharingAppPreferenceManager, "removeRecordedAppSelectionForAppIdentifiers:", v7);
    objc_msgSend(v3[1], "setNumberOfEnabledExtensions:", v12);
    v21 = objc_loadWeakRetained(v3 + 3);
    -[NSObject rideOptionStateDidChange:](v21, "rideOptionStateDidChange:", *(_QWORD *)(v22 + 32));
  }
  else
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingRideOptionStateObserverProxy");
    v21 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v29 = "RideBookingRideOptionStateObserverProxy.m";
      v30 = 1026;
      v31 = 69;
      v32 = 2082;
      v33 = "-[RideBookingRideOptionStateObserverProxy rideOptionStateDidChange:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
    }
    v7 = v21;
  }

}

void sub_1004FDCF4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_1004FDD18(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  _QWORD block[4];
  id v11;
  id v12;
  id v13;

  v5 = a2;
  v6 = a3;
  v7 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1004FDDE8;
  block[3] = &unk_1011AFF10;
  objc_copyWeak(&v13, (id *)(a1 + 40));
  v11 = v6;
  v12 = v5;
  v8 = v5;
  v9 = v6;
  dispatch_async(v7, block);

  objc_destroyWeak(&v13);
}

void sub_1004FDDE8(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    if (*(_QWORD *)(a1 + 32) || !*(_QWORD *)(a1 + 40))
    {
      v4 = sub_1004FDEC4();
      v5 = objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v7 = 138412290;
        v8 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Failed to get virtual garage with error: %@", (uint8_t *)&v7, 0xCu);
      }

    }
    else
    {
      objc_msgSend(WeakRetained, "_consumeUpdatedGarage:");
    }
  }

}

id sub_1004FDEC4()
{
  if (qword_1014D2750 != -1)
    dispatch_once(&qword_1014D2750, &stru_1011B9820);
  return (id)qword_1014D2748;
}

id sub_1004FDF04(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_reloadAvailability");
}

uint64_t sub_1004FDF9C(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 32) + 33);
  return result;
}

void sub_1004FE4E4(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 160));
  _Unwind_Resume(a1);
}

void sub_1004FE520(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_didSelectModelWithVehicle:", *(_QWORD *)(a1 + 32));

}

void sub_1004FE55C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_didViewModelWithVehicle:", *(_QWORD *)(a1 + 32));

}

void sub_1004FE598(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_dismiss");

}

uint64_t sub_1004FE678(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1004FE688(uint64_t a1)
{

}

void sub_1004FE690(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "copy");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1004FE92C(uint64_t a1)
{
  _BYTE *WeakRetained;
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = sub_1004FDEC4();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "User dismissed preferred networks suggestion.", v4, 2u);
    }

    WeakRetained[32] = 1;
    objc_msgSend(WeakRetained, "_reloadAvailability");
  }

}

void sub_1004FEA9C(uint64_t a1)
{
  _QWORD v2[4];
  id v3;
  id v4;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1004FEB40;
  v2[3] = &unk_1011AD1E8;
  objc_copyWeak(&v4, (id *)(a1 + 40));
  v3 = *(id *)(a1 + 32);
  if (qword_1014D2740 != -1)
    dispatch_once(&qword_1014D2740, v2);

  objc_destroyWeak(&v4);
}

void sub_1004FEB40(uint64_t a1)
{
  id WeakRetained;
  id v3;
  NSObject *v4;
  id v5;
  NSObject *v6;
  id v7;
  NSObject *v8;
  char *v9;
  id v10;
  NSObject *v11;
  int v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  const char *v19;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (*(_QWORD *)(a1 + 32))
      goto LABEL_3;
    v5 = sub_1004318FC();
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v12 = 136315906;
      v13 = "-[PreferredNetworksFeatureDiscoverySource _didViewModelWithVehicle:]_block_invoke_2";
      v14 = 2080;
      v15 = "PreferredNetworksFeatureDiscoverySource.m";
      v16 = 1024;
      v17 = 202;
      v18 = 2080;
      v19 = "vehicle";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%s [%s:%d] Assertion: (%s)", (uint8_t *)&v12, 0x26u);
    }

    if (sub_100A70734())
    {
      v7 = sub_1004318FC();
      v8 = objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        v9 = (char *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
        v12 = 138412290;
        v13 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&v12, 0xCu);

      }
    }
    if (*(_QWORD *)(a1 + 32))
    {
LABEL_3:
      v3 = sub_1004FDEC4();
      v4 = objc_claimAutoreleasedReturnValue(v3);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        LOWORD(v12) = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "User viewed preferred networks onboarding suggestion.", (uint8_t *)&v12, 2u);
      }

      objc_msgSend(WeakRetained, "_markVehicleAsViewed:", *(_QWORD *)(a1 + 32));
    }
    else
    {
      v10 = sub_1004FDEC4();
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v12) = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "User selected preferred networks source, but there were no candidate vehicle.", (uint8_t *)&v12, 2u);
      }

    }
  }

}

void sub_1004FEE30(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  NSObject *v5;
  id v6;
  NSObject *v7;
  id v8;
  NSObject *v9;
  char *v10;
  id v11;
  int v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  const char *v19;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (*(_QWORD *)(a1 + 32))
      goto LABEL_3;
    v6 = sub_1004318FC();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v12 = 136315906;
      v13 = "-[PreferredNetworksFeatureDiscoverySource _didSelectModelWithVehicle:]_block_invoke";
      v14 = 2080;
      v15 = "PreferredNetworksFeatureDiscoverySource.m";
      v16 = 1024;
      v17 = 220;
      v18 = 2080;
      v19 = "vehicle";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s [%s:%d] Assertion: (%s)", (uint8_t *)&v12, 0x26u);
    }

    if (sub_100A70734())
    {
      v8 = sub_1004318FC();
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v10 = (char *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
        v12 = 138412290;
        v13 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&v12, 0xCu);

      }
    }
    if (*(_QWORD *)(a1 + 32))
    {
LABEL_3:
      v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedMapsDelegate](UIApplication, "sharedMapsDelegate"));
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "appCoordinator"));
      v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "baseActionCoordinator"));

      -[NSObject presentPreferredNetworksOnboardingForVehicle:](v5, "presentPreferredNetworksOnboardingForVehicle:", *(_QWORD *)(a1 + 32));
    }
    else
    {
      v11 = sub_1004FDEC4();
      v5 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      {
        LOWORD(v12) = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "User selected preferred networks source, but there were no candidate vehicle.", (uint8_t *)&v12, 2u);
      }
    }

  }
}

id sub_1004FF2C4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_consumeUpdatedGarage:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_1004FF4AC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  void *v9;
  int v11;
  void *v12;

  v3 = a2;
  if (!objc_msgSend(v3, "isPureElectricVehicle")
    || (v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "preferredChargingNetworks")),
        v5 = objc_msgSend(v4, "count"),
        v4,
        v5))
  {
LABEL_8:
    v6 = 0;
    goto LABEL_9;
  }
  if ((objc_msgSend(*(id *)(a1 + 32), "_shouldShowForVehicle:", v3) & 1) == 0)
  {
    v7 = sub_1004FDEC4();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "displayName"));
      v11 = 138412290;
      v12 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "will not offer preferred networks onboarding for %@, because it was shown many times already.", (uint8_t *)&v11, 0xCu);

    }
    goto LABEL_8;
  }
  v6 = 1;
LABEL_9:

  return v6;
}

void sub_1004FF624(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "PreferredNetworksFeatureDiscoverySource");
  v2 = (void *)qword_1014D2748;
  qword_1014D2748 = (uint64_t)v1;

}

id sub_1005014F4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateShieldView");
}

void sub_100502084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1005020AC(uint64_t a1, double a2, double a3, double a4, double a5)
{
  MKMapRect v6;

  v6.size.height = a5;
  v6.size.width = a4;
  v6.origin.y = a3;
  v6.origin.x = a2;
  *(MKMapRect *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 32) = MKMapRectUnion(*(MKMapRect *)(*(_QWORD *)(*(_QWORD *)(a1 + 40)+ 8)+ 32), v6);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100502100(uint64_t a1, double a2, double a3, double a4, double a5)
{
  MKMapRect v6;

  v6.size.height = a5;
  v6.size.width = a4;
  v6.origin.y = a3;
  v6.origin.x = a2;
  *(MKMapRect *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 32) = MKMapRectUnion(*(MKMapRect *)(*(_QWORD *)(*(_QWORD *)(a1 + 40)+ 8)+ 32), v6);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_100502154(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, double, double, double, double))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 32), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 56));
}

void sub_100502634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100502660(uint64_t a1, int a2)
{
  id WeakRetained;
  id v4;
  NSObject *v5;
  id v6;
  objc_class *v7;
  NSString *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  NSObject *v18;
  _BOOL4 v19;
  id v20;
  objc_class *v21;
  NSString *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  objc_class *v28;
  NSString *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint8_t buf[4];
  void *v35;
  __int16 v36;
  int v37;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = sub_100431C0C();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      goto LABEL_9;
    v6 = WeakRetained;
    v7 = (objc_class *)objc_opt_class(v6);
    v8 = NSStringFromClass(v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    if ((objc_opt_respondsToSelector(v6, "accessibilityIdentifier") & 1) != 0)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "performSelector:", "accessibilityIdentifier"));
      v11 = v10;
      if (v10 && !objc_msgSend(v10, "isEqualToString:", v9))
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v9, v6, v11));

        goto LABEL_8;
      }

    }
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v9, v6));
LABEL_8:

    *(_DWORD *)buf = 138543618;
    v35 = v12;
    v36 = 1024;
    v37 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[%{public}@] User exited VLF Crowdsourcing permission card with answer: %d", buf, 0x12u);

LABEL_9:
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "containerViewController"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "chromeViewController"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "userLocationView"));
    v16 = objc_msgSend(v15, "vlfMode");

    v17 = sub_100431C0C();
    v18 = objc_claimAutoreleasedReturnValue(v17);
    v19 = os_log_type_enabled(v18, OS_LOG_TYPE_INFO);
    if (v16)
    {
      if (!v19)
      {
LABEL_17:

        objc_msgSend(WeakRetained, "showVLF");
        goto LABEL_26;
      }
      v20 = WeakRetained;
      v21 = (objc_class *)objc_opt_class(v20);
      v22 = NSStringFromClass(v21);
      v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
      if ((objc_opt_respondsToSelector(v20, "accessibilityIdentifier") & 1) != 0)
      {
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "performSelector:", "accessibilityIdentifier"));
        v25 = v24;
        if (v24 && !objc_msgSend(v24, "isEqualToString:", v23))
        {
          v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v23, v20, v25));

          goto LABEL_16;
        }

      }
      v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v23, v20));
LABEL_16:

      *(_DWORD *)buf = 138543362;
      v35 = v26;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "[%{public}@] VLF is still eligible to be shown; showing now",
        buf,
        0xCu);

      goto LABEL_17;
    }
    if (!v19)
    {
LABEL_25:

      goto LABEL_26;
    }
    v27 = WeakRetained;
    v28 = (objc_class *)objc_opt_class(v27);
    v29 = NSStringFromClass(v28);
    v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
    if ((objc_opt_respondsToSelector(v27, "accessibilityIdentifier") & 1) != 0)
    {
      v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "performSelector:", "accessibilityIdentifier"));
      v32 = v31;
      if (v31 && !objc_msgSend(v31, "isEqualToString:", v30))
      {
        v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v30, v27, v32));

        goto LABEL_24;
      }

    }
    v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v30, v27));
LABEL_24:

    *(_DWORD *)buf = 138543362;
    v35 = v33;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "[%{public}@] VLF is no longer eligible to be shown", buf, 0xCu);

    goto LABEL_25;
  }
LABEL_26:

}

void sub_100504A10(id a1, NSError *a2)
{
  NSError *v2;
  id v3;
  NSObject *v4;
  int v5;
  NSError *v6;

  v2 = a2;
  v3 = sub_1004315EC();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v5 = 138412290;
    v6 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "update collection error %@", (uint8_t *)&v5, 0xCu);
  }

}

void sub_100504D64(uint64_t a1)
{
  uint64_t v1;
  id WeakRetained;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  _UNKNOWN **v7;
  void *i;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;
  void *v25;
  id v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];

  v1 = a1;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (WeakRetained)
  {
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v3 = *(id *)(v1 + 32);
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v28;
      v7 = CPLaneGuidance_ptr;
      v26 = WeakRetained;
      do
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          if (*(_QWORD *)v28 != v6)
            objc_enumerationMutation(v3);
          v9 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)i);
          v10 = objc_opt_class(v7[491]);
          if ((objc_opt_isKindOfClass(v9, v10) & 1) != 0)
          {
            v11 = v9;
            if (v11)
            {
              v12 = v11;
              v13 = objc_msgSend((id)objc_opt_class(WeakRetained), "existingCollectionItemForMapItem:error:", v11, *(_QWORD *)(v1 + 40));
              v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
              if (v14)
              {
                objc_msgSend(*(id *)(v1 + 48), "addPlace:", v14);
              }
              else
              {
                v15 = objc_msgSend(objc_alloc((Class)MSCollectionPlaceItem), "initWithCollection:", *(_QWORD *)(v1 + 48));
                v16 = v3;
                v17 = v1;
                v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "_geoMapItem"));
                v19 = (void *)objc_claimAutoreleasedReturnValue(+[GEOMapItemStorage mapItemStorageForGEOMapItem:](GEOMapItemStorage, "mapItemStorageForGEOMapItem:", v18));
                objc_msgSend(v15, "setMapItemStorage:", v19);

                v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "name"));
                objc_msgSend(v15, "setCustomName:", v20);

                v1 = v17;
                v3 = v16;
                v7 = CPLaneGuidance_ptr;
                objc_msgSend(*(id *)(v1 + 56), "addObject:", v15);

                WeakRetained = v26;
              }

            }
          }
        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
      }
      while (v5);
    }

    objc_msgSend(*(id *)(v1 + 56), "addObject:", *(_QWORD *)(v1 + 48));
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[MapsSyncStore sharedStore](_TtC8MapsSync13MapsSyncStore, "sharedStore"));
    objc_msgSend(v21, "saveWithObjects:error:", *(_QWORD *)(v1 + 56), 0);

    v22 = objc_msgSend(*(id *)(v1 + 32), "count");
    objc_msgSend(WeakRetained, "endModification");
    if (v22)
    {
      objc_msgSend(WeakRetained, "rebuildContent");
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "collectionOperation"));
      objc_msgSend(v23, "touchCollection:", *(_QWORD *)(v1 + 48));

      v24 = *(_QWORD *)(v1 + 64);
      if (v24)
        (*(void (**)(uint64_t, _QWORD))(v24 + 16))(v24, 0);
    }
    else if (*(_QWORD *)(v1 + 64))
    {
      v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSError GEOErrorWithCode:reason:](NSError, "GEOErrorWithCode:reason:", 0, CFSTR("No object to add")));
      (*(void (**)(void))(*(_QWORD *)(v1 + 64) + 16))();

    }
  }

}

void sub_1005054E0(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  id *location;
  id v25;
  void *v26;
  id obj;
  id v28;
  id v29;
  id v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[128];

  v2 = (id *)(a1 + 56);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    location = v2;
    v25 = WeakRetained;
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    obj = *(id *)(a1 + 32);
    v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v37, 16);
    if (v4)
    {
      v5 = v4;
      v6 = 0;
      v7 = *(_QWORD *)v32;
      do
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          v9 = v6;
          if (*(_QWORD *)v32 != v7)
            objc_enumerationMutation(obj);
          v10 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)i);
          objc_msgSend(*(id *)(a1 + 40), "removePlace:", v10);
          v11 = (void *)objc_claimAutoreleasedReturnValue(+[MapsSyncStore sharedStore](_TtC8MapsSync13MapsSyncStore, "sharedStore"));
          v36 = *(_QWORD *)(a1 + 40);
          v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v36, 1));
          v30 = v6;
          objc_msgSend(v11, "saveWithObjects:error:", v12, &v30);
          v6 = v30;

          if (!+[LibraryUIUtilities isMyPlacesEnabled](_TtC4Maps18LibraryUIUtilities, "isMyPlacesEnabled"))
          {
            v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "fetchCollections"));
            v14 = objc_msgSend(v13, "count");

            if (!v14)
              objc_msgSend(v26, "addObject:", v10);
          }
        }
        v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v37, 16);
      }
      while (v5);
    }
    else
    {
      v6 = 0;
    }

    v15 = (void *)objc_claimAutoreleasedReturnValue(+[MapsSyncStore sharedStore](_TtC8MapsSync13MapsSyncStore, "sharedStore"));
    v29 = v6;
    objc_msgSend(v15, "deleteWithObjects:error:", v26, &v29);
    v16 = v29;

    v17 = (void *)objc_claimAutoreleasedReturnValue(+[MapsSyncStore sharedStore](_TtC8MapsSync13MapsSyncStore, "sharedStore"));
    v35 = *(_QWORD *)(a1 + 40);
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v35, 1));
    v28 = v16;
    objc_msgSend(v17, "saveWithObjects:error:", v18, &v28);
    v19 = v28;

    v20 = objc_loadWeakRetained(location);
    objc_msgSend(v20, "endModification");

    v21 = objc_loadWeakRetained(location);
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "collectionOperation"));
    objc_msgSend(v22, "touchCollection:", *(_QWORD *)(a1 + 40));

    v23 = *(_QWORD *)(a1 + 48);
    if (v23)
      (*(void (**)(uint64_t, id))(v23 + 16))(v23, v19);

    WeakRetained = v25;
  }

}

void sub_100505860(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  _QWORD v6[5];
  id v7;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "collection"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "fetchPlaces"));

    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100505910;
    v6[3] = &unk_1011AC8B0;
    v6[4] = v2;
    v7 = v4;
    v5 = v4;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);

  }
}

id sub_100505910(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "rebuildContent:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_100505AA0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 32));
  return result;
}

void sub_100505BD4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100505BF0(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  _QWORD *WeakRetained;
  _QWORD *v6;
  void *v7;
  id v8;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v8 = v3;
  if (v4)
  {
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v3);
    v3 = v8;
  }
  if (!v3)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    v6 = WeakRetained;
    if (WeakRetained)
    {
      objc_msgSend(WeakRetained, "setNeedsToBePersisted:", 0);
      objc_msgSend(v6, "setStagedImage:", 0);
      v7 = (void *)v6[12];
      v6[12] = 0;

    }
    v3 = v8;
  }

}

void sub_10050674C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 72));
  _Unwind_Resume(a1);
}

void sub_100506798(uint64_t a1, void *a2)
{
  _BYTE *WeakRetained;
  _BYTE *v4;
  id v5;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "setSubscriptionInfos:", v5);
    v4[120] = 1;
    objc_msgSend(v4, "_updateUpdateAllModels");
    objc_msgSend(v4, "_updateContentAnimated:", 0);
  }

}

void sub_10050680C(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  id v5;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "setSuggestedRegions:", v5);
    objc_msgSend(v4, "_updateContentAnimated:", 0);
  }

}

void sub_100506868(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_updateAutoUpdateRowSubtitle");
    objc_msgSend(v2, "_updateContentAnimated:", 0);
    WeakRetained = v2;
  }

}

void sub_100506BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100506C20(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void **v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, void *);
  void *v16;
  id v17;
  id v18;
  uint64_t v19;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "diffableDataSource"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "snapshot"));

    v19 = *(_QWORD *)(a1 + 32);
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v19, 1));
    objc_msgSend(v7, "deleteItemsWithIdentifiers:", v8);

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "diffableDataSource"));
    objc_msgSend(v9, "applySnapshot:animatingDifferences:", v7, 1);

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "subscriptionManager"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "subscription"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "identifier"));
    v13 = _NSConcreteStackBlock;
    v14 = 3221225472;
    v15 = sub_100506DD8;
    v16 = &unk_1011B9908;
    v17 = *(id *)(a1 + 32);
    v18 = v3;
    objc_msgSend(v10, "removeSubscriptionWithIdentifier:callbackQueue:completionHandler:", v12, &_dispatch_main_q, &v13);

    +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 383, 88, 0, v13, v14, v15, v16);
  }

}

void sub_100506DD8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  id v11;

  v4 = a3;
  if (v4)
  {
    v5 = sub_100431D5C();
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = *(_QWORD *)(a1 + 32);
      v8 = 138412546;
      v9 = v7;
      v10 = 2112;
      v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Error removing subscriptionInfo: %@, error: %@", (uint8_t *)&v8, 0x16u);
    }

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100506EB4(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  void (**v6)(id, uint64_t);

  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "offlineDelegate"));
    objc_msgSend(v5, "didSelectRenameSubscriptionInfo:completionHandler:", *(_QWORD *)(a1 + 32), &stru_1011B9950);

    +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 385, 88, 0);
    v6[2](v6, 1);
  }

}

void sub_100506F4C(id a1, BOOL a2)
{
  if (a2)
    +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 378, 88, 0);
}

BOOL sub_10050794C(id a1, OfflineMapsSuggestionModelData *a2)
{
  OfflineMapsSuggestionModelData *v2;
  void *v3;
  void *v4;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MapsOfflineUIHelper sharedHelper](MapsOfflineUIHelper, "sharedHelper"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[OfflineMapsSuggestionModelData mapRegion](v2, "mapRegion"));

  LOBYTE(v2) = objc_msgSend(v3, "isRegionDownloaded:requireFullyDownloaded:coverageRequirement:", v4, 0, GEOConfigGetDouble(MapsConfig_OfflineRegionSuggestionDownloadedAreaCoverageRequirement, off_1014B4FD8)) ^ 1;
  return (char)v2;
}

void sub_100507A9C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100507AC0(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  id *WeakRetained;
  id v9;
  NSObject *v10;
  int v11;
  id v12;

  v6 = a2;
  v7 = a3;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (v7)
    {
      v9 = sub_100431D5C();
      v10 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        v11 = 138412290;
        v12 = v7;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Error fetching last updated date: %@", (uint8_t *)&v11, 0xCu);
      }

    }
    objc_storeStrong(WeakRetained + 16, a2);
    objc_msgSend(WeakRetained, "_updateUpdateAllModels");
    objc_msgSend(WeakRetained, "_updateContentAnimated:", *(unsigned __int8 *)(a1 + 40));
  }

}

void sub_100507D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100507D54(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  id *WeakRetained;
  id v9;
  NSObject *v10;
  int v11;
  id v12;

  v6 = a2;
  v7 = a3;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (!v6 && v7)
    {
      v9 = sub_100431D5C();
      v10 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        v11 = 138412290;
        v12 = v7;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Error fetching expired subscriptions: %@", (uint8_t *)&v11, 0xCu);
      }

    }
    objc_storeStrong(WeakRetained + 17, a2);
    objc_msgSend(WeakRetained, "_updateContentAnimated:", *(unsigned __int8 *)(a1 + 40));
  }

}

void sub_100508298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1005082C4(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id WeakRetained;
  id v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  int v12;
  id v13;
  __int16 v14;
  uint64_t v15;

  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v7 = sub_100431D5C();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    v9 = v8;
    if (v5)
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        v12 = 138543362;
        v13 = v5;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Error fetching disk space from paired device: %{public}@", (uint8_t *)&v12, 0xCu);
      }
      goto LABEL_9;
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v10 = *(void **)(a1 + 40);
      v12 = 134218240;
      v13 = v10;
      v14 = 2048;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Paired device space needed (%lld), paired device space available (%lld)", (uint8_t *)&v12, 0x16u);
    }

    v11 = *(_QWORD *)(a1 + 40) - a2;
    if (v11 >= 1)
    {
      v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "offlineDelegate"));
      -[NSObject showPairedDeviceDiskSpaceDialogWithRequiredDiskSpace:](v9, "showPairedDeviceDiskSpaceDialogWithRequiredDiskSpace:", v11);
LABEL_9:

    }
  }

}

void sub_100508D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location)
{
  uint64_t v11;

  objc_destroyWeak((id *)(v11 - 136));
  _Unwind_Resume(a1);
}

void sub_100508D78(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[MapsOfflineUIHelper sharedHelper](MapsOfflineUIHelper, "sharedHelper"));
  objc_msgSend(v2, "pauseDownloadForSubscriptionInfo:", *(_QWORD *)(a1 + 32));

}

void sub_100508DBC(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "offlineDelegate"));
    objc_msgSend(v3, "didSelectResumeSubscriptionInfo:", *(_QWORD *)(a1 + 32));

    WeakRetained = v4;
  }

}

void sub_100508E0C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(*(id *)(a1 + 32), "row")));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "stringValue"));
    +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 381, 90, v3);

    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "offlineDelegate"));
    objc_msgSend(v4, "didSelectSuggestion:", *(_QWORD *)(a1 + 40));

  }
}

void sub_100508EBC(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "offlineDelegate"));
    objc_msgSend(v2, "didSelectDownloadNewMap");

    +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 381, 86, 0);
    WeakRetained = v3;
  }

}

void sub_10050945C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100509484(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "offlineDelegate"));
    objc_msgSend(v2, "didSelectExpiredMaps");

    WeakRetained = v3;
  }

}

void sub_1005094CC(id a1, UICollectionViewCell *a2, UIListContentConfiguration *a3)
{
  UIListContentConfiguration *v3;
  void *v4;
  id v5;

  v3 = a3;
  v5 = (id)objc_claimAutoreleasedReturnValue(+[UIColor secondaryLabelColor](UIColor, "secondaryLabelColor"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[UIListContentConfiguration secondaryTextProperties](v3, "secondaryTextProperties"));

  objc_msgSend(v4, "setColor:", v5);
}

void sub_1005096A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1005096CC(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "offlineDelegate"));
    objc_msgSend(v2, "didSelectDownloadNewMap");

    +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 381, 86, 0);
    WeakRetained = v3;
  }

}

void sub_10050972C(id a1, UICollectionViewCell *a2, UIListContentConfiguration *a3)
{
  double v3;
  double v4;
  UIListContentConfiguration *v5;

  v5 = a3;
  -[UIListContentConfiguration directionalLayoutMargins](v5, "directionalLayoutMargins");
  v4 = v3;
  -[UIListContentConfiguration directionalLayoutMargins](v5, "directionalLayoutMargins");
  -[UIListContentConfiguration setDirectionalLayoutMargins:](v5, "setDirectionalLayoutMargins:", 16.0, v4, 16.0);

}

void sub_1005098D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1005098FC(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "offlineDelegate"));
    objc_msgSend(v2, "didSelectUpdateAll");

    +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 374, 88, 0);
    WeakRetained = v3;
  }

}

void sub_10050995C(id a1, UICollectionViewCell *a2, UIListContentConfiguration *a3)
{
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  UIListContentConfiguration *v9;

  v9 = a3;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor secondaryLabelColor](UIColor, "secondaryLabelColor"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[UIListContentConfiguration secondaryTextProperties](v9, "secondaryTextProperties"));
  objc_msgSend(v4, "setColor:", v3);

  -[UIListContentConfiguration setTextToSecondaryTextVerticalPadding:](v9, "setTextToSecondaryTextVerticalPadding:", 2.0);
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[UIListContentConfiguration secondaryText](v9, "secondaryText"));

  -[UIListContentConfiguration directionalLayoutMargins](v9, "directionalLayoutMargins");
  v7 = v6;
  -[UIListContentConfiguration directionalLayoutMargins](v9, "directionalLayoutMargins");
  v8 = 8.0;
  if (!v5)
    v8 = 16.0;
  -[UIListContentConfiguration setDirectionalLayoutMargins:](v9, "setDirectionalLayoutMargins:", v8, v7, v8);

}

void sub_100509B0C(id a1, UICollectionViewCell *a2, UIListContentConfiguration *a3)
{
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  UIListContentConfiguration *v9;

  v9 = a3;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor secondaryLabelColor](UIColor, "secondaryLabelColor"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[UIListContentConfiguration secondaryTextProperties](v9, "secondaryTextProperties"));
  objc_msgSend(v4, "setColor:", v3);

  -[UIListContentConfiguration setTextToSecondaryTextVerticalPadding:](v9, "setTextToSecondaryTextVerticalPadding:", 2.0);
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[UIListContentConfiguration secondaryText](v9, "secondaryText"));

  -[UIListContentConfiguration directionalLayoutMargins](v9, "directionalLayoutMargins");
  v7 = v6;
  -[UIListContentConfiguration directionalLayoutMargins](v9, "directionalLayoutMargins");
  v8 = 8.0;
  if (!v5)
    v8 = 16.0;
  -[UIListContentConfiguration setDirectionalLayoutMargins:](v9, "setDirectionalLayoutMargins:", v8, v7, v8);

}

void sub_10050A438(id a1, UIAction *a2)
{
  GEOConfigSetBOOL(MapsConfig_OfflineMapDownloadsAllowCellular, off_1014B4F48, 0);
}

void sub_10050A44C(id a1, UIAction *a2)
{
  GEOConfigSetBOOL(MapsConfig_OfflineMapDownloadsAllowCellular, off_1014B4F48, 1);
}

void sub_10050A460(id a1, UICollectionViewCell *a2, UIListContentConfiguration *a3)
{
  UIListContentConfiguration *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v3 = a3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemBlueColor](UIColor, "systemBlueColor"));
  v8 = (id)objc_claimAutoreleasedReturnValue(+[ImageIconWithBackgroundConfiguration offlineIconConfigurationWithBackgroundColor:](ImageIconWithBackgroundConfiguration, "offlineIconConfigurationWithBackgroundColor:", v4));

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIImageSymbolConfiguration configurationWithWeight:](UIImageSymbolConfiguration, "configurationWithWeight:", 4));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage systemImageNamed:withConfiguration:](UIImage, "systemImageNamed:withConfiguration:", CFSTR("arrow.down"), v5));

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_maps_imageIconWithBackgroundConfiguration:", v8));
  -[UIListContentConfiguration setImage:](v3, "setImage:", v7);

  -[UIListContentConfiguration setImageToTextPadding:](v3, "setImageToTextPadding:", 10.0);
}

uint64_t sub_10050A708(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32))
    return GEOConfigGetBOOL(GeoOfflineConfig_AutomaticUpdatesEnabled[0], GeoOfflineConfig_AutomaticUpdatesEnabled[1]);
  else
    return 0;
}

uint64_t sub_10050A728(uint64_t result, uint64_t a2)
{
  if (*(_BYTE *)(result + 32))
    return GEOConfigSetBOOL(GeoOfflineConfig_AutomaticUpdatesEnabled[0], GeoOfflineConfig_AutomaticUpdatesEnabled[1], a2);
  return result;
}

void sub_10050A748(id a1, UICollectionViewCell *a2, UIListContentConfiguration *a3)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  UIListContentConfiguration *v13;

  v13 = a3;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemGreenColor](UIColor, "systemGreenColor"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[ImageIconWithBackgroundConfiguration offlineIconConfigurationWithBackgroundColor:](ImageIconWithBackgroundConfiguration, "offlineIconConfigurationWithBackgroundColor:", v3));

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIImageSymbolConfiguration configurationWithWeight:](UIImageSymbolConfiguration, "configurationWithWeight:", 5));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage systemImageNamed:withConfiguration:](UIImage, "systemImageNamed:withConfiguration:", CFSTR("arrow.triangle.2.circlepath"), v5));

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_maps_imageIconWithBackgroundConfiguration:", v4));
  -[UIListContentConfiguration setImage:](v13, "setImage:", v7);

  -[UIListContentConfiguration setImageToTextPadding:](v13, "setImageToTextPadding:", 10.0);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor secondaryLabelColor](UIColor, "secondaryLabelColor"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(-[UIListContentConfiguration secondaryTextProperties](v13, "secondaryTextProperties"));
  objc_msgSend(v9, "setColor:", v8);

  -[UIListContentConfiguration setTextToSecondaryTextVerticalPadding:](v13, "setTextToSecondaryTextVerticalPadding:", 2.0);
  v10 = (void *)objc_claimAutoreleasedReturnValue(-[UIListContentConfiguration secondaryText](v13, "secondaryText"));

  if (v10)
  {
    -[UIListContentConfiguration directionalLayoutMargins](v13, "directionalLayoutMargins");
    v12 = v11;
    -[UIListContentConfiguration directionalLayoutMargins](v13, "directionalLayoutMargins");
    -[UIListContentConfiguration setDirectionalLayoutMargins:](v13, "setDirectionalLayoutMargins:", 10.0, v12, 10.0);
  }

}

BOOL sub_10050ABD4(id a1)
{
  return GEOConfigGetBOOL(GeoOfflineConfig_OptimizeStorageEnabled[0], GeoOfflineConfig_OptimizeStorageEnabled[1]);
}

void sub_10050ABE4(id a1, BOOL a2)
{
  GEOConfigSetBOOL(GeoOfflineConfig_OptimizeStorageEnabled[0], GeoOfflineConfig_OptimizeStorageEnabled[1], a2);
}

void sub_10050ABF8(id a1, UICollectionViewCell *a2, UIListContentConfiguration *a3)
{
  UIListContentConfiguration *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  double v10;
  double v11;
  id v12;

  v3 = a3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemOrangeColor](UIColor, "systemOrangeColor"));
  v12 = (id)objc_claimAutoreleasedReturnValue(+[ImageIconWithBackgroundConfiguration offlineIconConfigurationWithBackgroundColor:](ImageIconWithBackgroundConfiguration, "offlineIconConfigurationWithBackgroundColor:", v4));

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIImageSymbolConfiguration configurationWithWeight:](UIImageSymbolConfiguration, "configurationWithWeight:", 4));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage systemImageNamed:withConfiguration:](UIImage, "systemImageNamed:withConfiguration:", CFSTR("internaldrive.fill"), v5));

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_maps_imageIconWithBackgroundConfiguration:", v12));
  -[UIListContentConfiguration setImage:](v3, "setImage:", v7);

  -[UIListContentConfiguration setImageToTextPadding:](v3, "setImageToTextPadding:", 10.0);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor secondaryLabelColor](UIColor, "secondaryLabelColor"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(-[UIListContentConfiguration secondaryTextProperties](v3, "secondaryTextProperties"));
  objc_msgSend(v9, "setColor:", v8);

  -[UIListContentConfiguration setTextToSecondaryTextVerticalPadding:](v3, "setTextToSecondaryTextVerticalPadding:", 2.0);
  -[UIListContentConfiguration directionalLayoutMargins](v3, "directionalLayoutMargins");
  v11 = v10;
  -[UIListContentConfiguration directionalLayoutMargins](v3, "directionalLayoutMargins");
  -[UIListContentConfiguration setDirectionalLayoutMargins:](v3, "setDirectionalLayoutMargins:", 10.0, v11, 10.0);

}

void sub_10050AF28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, id a17)
{
  id *v17;
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_10050AF58(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32))
    return GEOConfigGetBOOL(GeoOfflineConfig_SyncToWatchEnabled[0], GeoOfflineConfig_SyncToWatchEnabled[1]);
  else
    return 0;
}

void sub_10050AF78(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  void *v5;
  void *v6;
  _QWORD v7[5];
  id v8;

  if (*(_BYTE *)(a1 + 48))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v5 = WeakRetained;
    if (WeakRetained)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "offlineDelegate"));
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_10050B050;
      v7[3] = &unk_1011AC888;
      objc_copyWeak(&v8, (id *)(a1 + 40));
      v7[4] = v5;
      objc_msgSend(v6, "didSetSyncToWatch:completionHandler:", a2, v7);

      objc_destroyWeak(&v8);
    }

  }
}

void sub_10050B03C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10050B050(uint64_t a1, char a2)
{
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = WeakRetained;
  if ((a2 & 1) == 0 && WeakRetained)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "diffableDataSource"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "snapshot"));

    v10 = v5;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v10, 1));
    objc_msgSend(v7, "reconfigureItemsWithIdentifiers:", v8);

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "diffableDataSource"));
    objc_msgSend(v9, "applySnapshot:animatingDifferences:", v7, 0);

  }
}

void sub_10050B138(id a1, UICollectionViewCell *a2, UIListContentConfiguration *a3)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  UIListContentConfiguration *v13;

  v13 = a3;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor blackColor](UIColor, "blackColor"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[ImageIconWithBackgroundConfiguration offlineIconConfigurationWithBackgroundColor:](ImageIconWithBackgroundConfiguration, "offlineIconConfigurationWithBackgroundColor:", v3));

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIImageSymbolConfiguration configurationWithWeight:](UIImageSymbolConfiguration, "configurationWithWeight:", 4));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage systemImageNamed:withConfiguration:](UIImage, "systemImageNamed:withConfiguration:", CFSTR("applewatch"), v5));

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_maps_imageIconWithBackgroundConfiguration:", v4));
  -[UIListContentConfiguration setImage:](v13, "setImage:", v7);

  -[UIListContentConfiguration setImageToTextPadding:](v13, "setImageToTextPadding:", 10.0);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor secondaryLabelColor](UIColor, "secondaryLabelColor"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(-[UIListContentConfiguration secondaryTextProperties](v13, "secondaryTextProperties"));
  objc_msgSend(v9, "setColor:", v8);

  -[UIListContentConfiguration setTextToSecondaryTextVerticalPadding:](v13, "setTextToSecondaryTextVerticalPadding:", 2.0);
  v10 = (void *)objc_claimAutoreleasedReturnValue(-[UIListContentConfiguration secondaryText](v13, "secondaryText"));

  if (v10)
  {
    -[UIListContentConfiguration directionalLayoutMargins](v13, "directionalLayoutMargins");
    v12 = v11;
    -[UIListContentConfiguration directionalLayoutMargins](v13, "directionalLayoutMargins");
    -[UIListContentConfiguration setDirectionalLayoutMargins:](v13, "setDirectionalLayoutMargins:", 10.0, v12, 10.0);
  }

}

uint64_t sub_10050B638(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32))
    return GEOConfigGetBOOL(MapsConfig_OfflineOnlyData, off_1014B4C08);
  else
    return 0;
}

uint64_t sub_10050B658(uint64_t result, uint64_t a2)
{
  if (*(_BYTE *)(result + 32))
    return GEOConfigSetBOOL(MapsConfig_OfflineOnlyData, off_1014B4C08, a2);
  return result;
}

void sub_10050B678(id a1, UICollectionViewCell *a2, UIListContentConfiguration *a3)
{
  UIListContentConfiguration *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  double v10;
  double v11;
  id v12;

  v3 = a3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemGrayColor](UIColor, "systemGrayColor"));
  v12 = (id)objc_claimAutoreleasedReturnValue(+[ImageIconWithBackgroundConfiguration offlineIconConfigurationWithBackgroundColor:](ImageIconWithBackgroundConfiguration, "offlineIconConfigurationWithBackgroundColor:", v4));

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIImageSymbolConfiguration configurationWithWeight:](UIImageSymbolConfiguration, "configurationWithWeight:", 4));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage systemImageNamed:withConfiguration:](UIImage, "systemImageNamed:withConfiguration:", CFSTR("icloud.slash.fill"), v5));

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_maps_imageIconWithBackgroundConfiguration:", v12));
  -[UIListContentConfiguration setImage:](v3, "setImage:", v7);

  -[UIListContentConfiguration setImageToTextPadding:](v3, "setImageToTextPadding:", 10.0);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor secondaryLabelColor](UIColor, "secondaryLabelColor"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(-[UIListContentConfiguration secondaryTextProperties](v3, "secondaryTextProperties"));
  objc_msgSend(v9, "setColor:", v8);

  -[UIListContentConfiguration setTextToSecondaryTextVerticalPadding:](v3, "setTextToSecondaryTextVerticalPadding:", 2.0);
  -[UIListContentConfiguration directionalLayoutMargins](v3, "directionalLayoutMargins");
  v11 = v10;
  -[UIListContentConfiguration directionalLayoutMargins](v3, "directionalLayoutMargins");
  -[UIListContentConfiguration setDirectionalLayoutMargins:](v3, "setDirectionalLayoutMargins:", 10.0, v11, 10.0);

}

void sub_10050C190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10050C1B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained;

  if (a2 != a3)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    objc_msgSend(WeakRetained, "onTransitionFromState:toState:", a2, a3);

  }
}

id sub_10050C2C4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "resetCollectionViewLayout");
}

id sub_10050C5E8()
{
  if (qword_1014D2760 != -1)
    dispatch_once(&qword_1014D2760, &stru_1011B9D00);
  return (id)qword_1014D2758;
}

void sub_10050C74C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  CitySelectorSection *v7;
  void *v8;
  double v9;
  double v10;
  void *v11;
  void *v12;
  void *v13;
  CitySelectorSection *v14;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "apiController"));
  v6 = objc_msgSend(v5, "isWorldwideSection:", v4);

  v7 = [CitySelectorSection alloc];
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView"));
  objc_msgSend(v8, "frame");
  v10 = v9;
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView"));
  v14 = -[CitySelectorSection initWithSectionKind:usingMaxWidth:usingTraitEnvironment:](v7, "initWithSectionKind:usingMaxWidth:usingTraitEnvironment:", v6, v11, v10);

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "apiController"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "titleForSection:", v4));

  -[CitySelectorSection setSectionTitle:](v14, "setSectionTitle:", v13);
  objc_msgSend(*(id *)(a1 + 40), "addObject:", v14);

}

id sub_10050D16C(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sections"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectAtIndex:", a2));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "layoutForSectionUsingTraitsEnvironment:usingWidth:", *(_QWORD *)(a1 + 32), *(double *)(a1 + 40)));
  return v6;
}

void sub_10050D540(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  id v4;
  LoadingModeView *v5;
  void *v6;
  void *v7;
  LoadingModeView *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v12 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "loadingView"));
    if (v2)
    {
LABEL_5:

      WeakRetained = v12;
      goto LABEL_6;
    }
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "apiController"));
    v4 = objc_msgSend(v3, "currentState");

    WeakRetained = v12;
    if (v4 == (id)1)
    {
      v5 = [LoadingModeView alloc];
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "localizedStringForKey:value:table:", CFSTR("Loading ..."), CFSTR("localized string not found"), 0));
      v8 = -[LoadingModeView initWithTitle:](v5, "initWithTitle:", v7);
      objc_msgSend(v12, "setLoadingView:", v8);

      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "loadingView"));
      objc_msgSend(v9, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "contentView"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "loadingView"));
      objc_msgSend(v10, "addSubview:", v11);

      v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "loadingView"));
      objc_msgSend(v12, "activateConstraintsForViewPinnedBelowHeader:", v2);
      goto LABEL_5;
    }
  }
LABEL_6:

}

void sub_10050D968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10050D98C(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "dataSource"));

    WeakRetained = v4;
    if (!v2)
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "apiController"));
      objc_msgSend(v3, "fetchCitySelectorView:", &stru_1011B9CE0);

      WeakRetained = v4;
    }
  }

}

id sub_10050DB30(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "hairLineAlpha");
}

id sub_10050DB44(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "setHairLineAlpha:");
}

void sub_10050DDC4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CitySelectorViewController");
  v2 = (void *)qword_1014D2758;
  qword_1014D2758 = (uint64_t)v1;

}

id sub_10050DEB8(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;

  switch(a1)
  {
    case 5:
      v1 = objc_claimAutoreleasedReturnValue(+[GEOFeatureStyleAttributes schoolStyleAttributes](GEOFeatureStyleAttributes, "schoolStyleAttributes"));
      break;
    case 3:
      v1 = objc_claimAutoreleasedReturnValue(+[GEOFeatureStyleAttributes workStyleAttributes](GEOFeatureStyleAttributes, "workStyleAttributes"));
      break;
    case 2:
      v1 = objc_claimAutoreleasedReturnValue(+[GEOFeatureStyleAttributes homeStyleAttributes](GEOFeatureStyleAttributes, "homeStyleAttributes"));
      break;
    default:
      v2 = 0;
      goto LABEL_9;
  }
  v2 = (void *)v1;
LABEL_9:
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  objc_msgSend(v3, "scale");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MKIconManager imageForStyle:size:forScale:format:](MKIconManager, "imageForStyle:size:forScale:format:", v2, 3, 0));

  return v4;
}

void sub_10050E408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10050E424(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id v9[2];

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10050E4E4;
  v6[3] = &unk_1011B9D48;
  v4 = *(void **)(a1 + 48);
  v7 = v3;
  v9[1] = v4;
  v5 = v3;
  objc_copyWeak(v9, (id *)(a1 + 40));
  v8 = *(id *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);

  objc_destroyWeak(v9);
}

void sub_10050E4E4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id WeakRetained;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  uint64_t v12;
  RAPPersonalPlaceSelectionQuestion *v13;
  void *v14;
  RAPPersonalPlaceSelectionQuestion *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _QWORD v24[5];
  _BYTE v25[128];

  v2 = *(void **)(a1 + 32);
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_10050E700;
  v24[3] = &unk_1011B9D20;
  v24[4] = *(_QWORD *)(a1 + 56);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithBlock:](NSPredicate, "predicateWithBlock:", v24));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "filteredArrayUsingPredicate:", v3));

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v19 = a1;
    v6 = objc_alloc_init((Class)NSMutableArray);
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v7 = v4;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v20, v25, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v21;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(_QWORD *)v21 != v10)
            objc_enumerationMutation(v7);
          v12 = *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)i);
          v13 = [RAPPersonalPlaceSelectionQuestion alloc];
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "report"));
          v15 = -[RAPPersonalPlaceSelectionQuestion initWithReport:parentQuestion:shortcut:](v13, "initWithReport:parentQuestion:shortcut:", v14, WeakRetained, v12);

          objc_msgSend(v6, "addObject:", v15);
        }
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v20, v25, 16);
      }
      while (v9);
    }

    v16 = objc_msgSend(v6, "copy");
    v17 = (void *)*((_QWORD *)WeakRetained + 7);
    *((_QWORD *)WeakRetained + 7) = v16;

    *((_BYTE *)WeakRetained + 112) = 0;
    v18 = *(_QWORD *)(v19 + 40);
    if (v18)
      (*(void (**)(void))(v18 + 16))();

  }
}

BOOL sub_10050E700(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "type") == *(id *)(a1 + 32);
}

id sub_1005111D0()
{
  if (qword_1014D2778 != -1)
    dispatch_once(&qword_1014D2778, &stru_1011B9E88);
  return (id)qword_1014D2770;
}

id sub_1005123AC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "layoutBelowIfNeeded");
}

void sub_100512454(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  id v5;

  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 32);
  v4 = a2;
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", v4));
  objc_msgSend(*(id *)(a1 + 32), "_requestSeparatorForStepView:atIndexPath:", v4, v5);

}

TransitDirectionsStepView *__cdecl sub_100513014(id a1, _TransitDirectionsListViewInfo *a2, unint64_t a3)
{
  return -[_TransitDirectionsListViewInfo stepView](a2, "stepView", a3);
}

void sub_10051301C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;

  v3 = a2;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100513154;
  v11[3] = &unk_1011AC860;
  v12 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stepView"));
  v10 = v12;
  +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v11);
  v4 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "indexPath"));
  objc_msgSend(v4, "setObject:forKey:", v10, v5);

  v6 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "reuseIdentifier"));
  objc_msgSend(v6, "setObject:forKey:", v10, v7);

  v8 = *(void **)(*(_QWORD *)(a1 + 32) + 32);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "indexPath"));

  objc_msgSend(v8, "setObject:forKey:", v9, v10);
}

id sub_100513154(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateForParentExpansionOrCollapse");
}

GEOComposedRouteAdvisory *__cdecl sub_1005147D4(id a1, TransitDirectionsStepView *a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[TransitDirectionsStepView transitListItem](a2, "transitListItem"));
  v3 = objc_opt_class(TransitDirectionsListItemIncident);
  if ((objc_opt_isKindOfClass(v2, v3) & 1) != 0)
    v4 = v2;
  else
    v4 = 0;
  v5 = v4;

  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "incidentMessage"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "advisory"));

  }
  else
  {
    v7 = 0;
  }

  return (GEOComposedRouteAdvisory *)v7;
}

BOOL sub_100514864(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  _BOOL8 v3;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = v2 != 0;

  return v3;
}

uint64_t sub_100514BF8(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;

  v5 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v6 = a3;
  v7 = a2;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "arrangedSubviews"));
  v9 = objc_msgSend(v8, "indexOfObject:", v7);

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "arrangedSubviews"));
  v11 = objc_msgSend(v10, "indexOfObject:", v6);

  if (v9 >= v11)
    v12 = 0;
  else
    v12 = -1;
  if (v9 > v11)
    return 1;
  else
    return v12;
}

void sub_100515090(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "TransitListView");
  v2 = (void *)qword_1014D2770;
  qword_1014D2770 = (uint64_t)v1;

}

void sub_100516CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;

  _Block_object_dispose(&a72, 8);
  _Block_object_dispose(&STACK[0x228], 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100516D78(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100516D88(uint64_t a1)
{

}

void sub_100516D90(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  RAPWebBundleTransitSystemContext *v7;
  void *v8;
  void *v9;
  RAPWebBundleTransitSystemContext *v10;

  v5 = a2;
  v6 = a3;
  if (objc_msgSend(v5, "count"))
  {
    v7 = objc_alloc_init(RAPWebBundleTransitSystemContext);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "systemName"));
    -[RAPWebBundleTransitSystemContext setSystem:](v7, "setSystem:", v8);

    -[RAPWebBundleTransitSystemContext setLines:](v7, "setLines:", v5);
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "addObjectsFromArray:", v6);
    v10 = v7;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v10, 1));
    objc_msgSend(*(id *)(a1 + 40), "setTransitInfos:", v9);

    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), *(id *)(a1 + 40));
  }

}

RAPWebBundleHoursContext *sub_100516EB0(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  RAPWebBundleHoursContext *v5;
  void *v6;
  void *v7;

  v4 = HIDWORD(a2);
  v5 = objc_alloc_init(RAPWebBundleHoursContext);
  -[RAPWebBundleHoursContext setDays:](v5, "setDays:", *(_QWORD *)(a1 + 32));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v4));
  -[RAPWebBundleHoursContext setTo:](v5, "setTo:", v6);

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2));
  -[RAPWebBundleHoursContext setFrom:](v5, "setFrom:", v7);

  return v5;
}

void sub_100516F4C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  RAPWebBundleTransitSystemContext *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  RAPWebBundleTransitSystemContext *v12;

  v5 = a2;
  v6 = a3;
  if (objc_msgSend(v5, "count"))
  {
    v7 = objc_alloc_init(RAPWebBundleTransitSystemContext);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "reportedPlace"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "mapItem"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "name"));
    -[RAPWebBundleTransitSystemContext setSystem:](v7, "setSystem:", v10);

    -[RAPWebBundleTransitSystemContext setLines:](v7, "setLines:", v5);
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "addObjectsFromArray:", v6);
    v12 = v7;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v12, 1));
    objc_msgSend(*(id *)(a1 + 40), "setTransitInfos:", v11);

    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), *(id *)(a1 + 40));
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void sub_10051709C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;

  v6 = a2;
  v5 = a3;
  if (objc_msgSend(v6, "count"))
  {
    objc_msgSend(*(id *)(a1 + 32), "setContainsPlaces:", v6);
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "addObjectsFromArray:", v5);
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), *(id *)(a1 + 32));
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void sub_100517124(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;

  v6 = a2;
  v5 = a3;
  if (objc_msgSend(v6, "count"))
  {
    objc_msgSend(*(id *)(a1 + 32), "setContainedInPlaces:", v6);
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "addObjectsFromArray:", v5);
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), *(id *)(a1 + 32));
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void sub_1005171AC(_QWORD *a1)
{
  uint64_t v1;
  id v3;

  v1 = a1[4];
  if (v1)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "context"));
    (*(void (**)(uint64_t, id, _QWORD))(v1 + 16))(v1, v3, *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40));

  }
}

void sub_100517490(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];
  id v9;
  id v10;
  uint64_t v11;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  objc_msgSend(v4, "scale");
  v6 = v5;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100517568;
  v8[3] = &unk_1011B9FB8;
  v11 = v6;
  v9 = *(id *)(a1 + 32);
  v10 = *(id *)(a1 + 40);
  objc_msgSend(v3, "enumerateObjectsUsingBlock:", v8);

  v7 = *(_QWORD *)(a1 + 48);
  if (v7)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v7 + 16))(v7, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));

}

void sub_100517568(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  RAPWebBundleImageContext *v6;
  NSData *v7;
  void *v8;
  RAPWebBundleTransitLineContext *v9;
  void *v10;
  UIImage *image;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "artwork"));
  image = (UIImage *)objc_claimAutoreleasedReturnValue(+[UIImage _mapkit_transitArtworkImageWithDataSource:size:scale:](UIImage, "_mapkit_transitArtworkImageWithDataSource:size:scale:", v4, 6, *(double *)(a1 + 48)));

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%llu"), objc_msgSend(v3, "muid")));
  v6 = objc_alloc_init(RAPWebBundleImageContext);
  v7 = UIImagePNGRepresentation(image);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  -[RAPWebBundleImageContext setImage:](v6, "setImage:", v8);

  -[RAPWebBundleImageContext setIdentifier:](v6, "setIdentifier:", v5);
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v6);
  v9 = objc_alloc_init(RAPWebBundleTransitLineContext);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "name"));

  -[RAPWebBundleTransitLineContext setName:](v9, "setName:", v10);
  -[RAPWebBundleTransitLineContext setIdentifier:](v9, "setIdentifier:", v5);
  -[RAPWebBundleTransitLineContext setImageContext:](v9, "setImageContext:", v6);
  objc_msgSend(*(id *)(a1 + 40), "addObject:", v9);

}

void sub_100517E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100517E38(uint64_t a1, void *a2, uint64_t a3)
{
  id WeakRetained;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;

  v9 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    if (a3 || !objc_msgSend(v9, "count"))
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    }
    else
    {
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_100517F4C;
      v10[3] = &unk_1011AE3A8;
      v11 = *(id *)(a1 + 32);
      v12 = *(id *)(a1 + 40);
      objc_msgSend(v9, "enumerateObjectsUsingBlock:", v10);
      v6 = *(_QWORD *)(a1 + 48);
      if (v6)
      {
        v7 = objc_msgSend(*(id *)(a1 + 40), "copy");
        v8 = objc_msgSend(*(id *)(a1 + 32), "copy");
        (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v7, v8);

      }
    }
  }

}

void sub_100517F4C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  RAPWebBundleImageContext *v6;
  void *v7;
  void *v8;
  UIImage *v9;
  NSData *v10;
  void *v11;
  RAPWebBundlePlaceSummaryContext *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;

  v3 = a2;
  v18 = objc_msgSend(objc_alloc((Class)MKMapItem), "initWithGeoMapItem:isPlaceHolderPlace:", v3, 0);
  v4 = objc_msgSend(v3, "_muid");

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%llu"), v4));
  v6 = objc_alloc_init(RAPWebBundleImageContext);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "_styleAttributes"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  objc_msgSend(v8, "scale");
  v9 = (UIImage *)objc_claimAutoreleasedReturnValue(+[MKIconManager imageForStyle:size:forScale:format:](MKIconManager, "imageForStyle:size:forScale:format:", v7, 3, 0));
  v10 = UIImagePNGRepresentation(v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  -[RAPWebBundleImageContext setImage:](v6, "setImage:", v11);

  -[RAPWebBundleImageContext setIdentifier:](v6, "setIdentifier:", v5);
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v6);
  v12 = objc_alloc_init(RAPWebBundlePlaceSummaryContext);
  -[RAPWebBundlePlaceSummaryContext setIdentifier:](v12, "setIdentifier:", v5);
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "name"));
  -[RAPWebBundlePlaceSummaryContext setTitle:](v12, "setTitle:", v13);

  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "_addressFormattedAsShortenedAddress"));
  -[RAPWebBundlePlaceSummaryContext setSubtitle:](v12, "setSubtitle:", v14);

  v15 = -[RAPPlaceCorrectableAddress _initWithMapItem:]([RAPPlaceCorrectableAddress alloc], "_initWithMapItem:", v18);
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "freeformAddress"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "value"));
  -[RAPWebBundlePlaceSummaryContext setAddress:](v12, "setAddress:", v17);

  -[RAPWebBundlePlaceSummaryContext setImageContext:](v12, "setImageContext:", v6);
  objc_msgSend(*(id *)(a1 + 40), "addObject:", v12);

}

void sub_100518314(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  uint64_t v14;

  v6 = a2;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1005183D8;
  v10[3] = &unk_1011BA0F8;
  v11 = a4;
  v7 = *(id *)(a1 + 32);
  v12 = v6;
  v13 = v7;
  v14 = *(_QWORD *)(a1 + 40);
  v8 = v6;
  v9 = v11;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v10);

}

void sub_1005183D8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  void *v15;
  void *v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  id v25;
  _BYTE v26[128];

  if (*(_QWORD *)(a1 + 32))
  {
    NSLog(CFSTR("Error fetching categories: %@"), *(_QWORD *)(a1 + 32));
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), 0);
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 40);
    v25 = 0;
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", v2, 0, 0, &v25));
    v4 = v25;
    v5 = v4;
    if (v3)
    {
      v20 = v4;
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("com.apple.GEO")));

      v19 = v6;
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("BusinessLocalizedCategories")));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "adjustedPreferredLanguages"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(v7, "count")));
      v21 = 0u;
      v22 = 0u;
      v23 = 0u;
      v24 = 0u;
      v10 = v7;
      v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
      if (v11)
      {
        v12 = v11;
        v13 = *(_QWORD *)v22;
        do
        {
          for (i = 0; i != v12; i = (char *)i + 1)
          {
            if (*(_QWORD *)v22 != v13)
              objc_enumerationMutation(v10);
            v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)i), "objectForKeyedSubscript:", CFSTR("titles")));
            v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "preferredTranslationInTitles:givenPreferredLanguagesList:", v15, v8));
            if (v16)
              objc_msgSend(v9, "addObject:", v16);

          }
          v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
        }
        while (v12);
      }

      v17 = *(_QWORD *)(a1 + 48);
      v18 = objc_msgSend(v9, "copy");
      (*(void (**)(uint64_t, id))(v17 + 16))(v17, v18);

      v5 = v20;
    }
    else
    {
      NSLog(CFSTR("Error unpacking categories plist: %@"), v4);
      (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    }

  }
}

void sub_100518C34(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_performRTTest");

}

void sub_100518F84(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  id *v5;
  uint64_t v6;

  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v6 - 128));
  _Unwind_Resume(a1);
}

void sub_100518FE0(uint64_t a1)
{
  _BYTE *WeakRetained;
  _BYTE *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && !WeakRetained[104])
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "startedSubTest:", CFSTR("transitRouteUpdate:route"));
    WeakRetained = v2;
  }

}

void sub_100519028(uint64_t a1)
{
  _BYTE *WeakRetained;
  _BYTE *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && !WeakRetained[104])
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "finishedSubTest:", CFSTR("transitRouteUpdate:route"));
    WeakRetained = v2;
  }

}

void sub_100519070(uint64_t a1)
{
  _BYTE *WeakRetained;
  _BYTE *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && !WeakRetained[104])
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "startedSubTest:", CFSTR("transitRouteUpdate:sign"));
    WeakRetained = v2;
  }

}

void sub_1005190B8(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  _QWORD *v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && !*((_BYTE *)WeakRetained + 104))
  {
    v3 = WeakRetained;
    objc_msgSend(*((id *)WeakRetained + 12), "invalidate");
    v2 = (void *)v3[12];
    v3[12] = 0;

    objc_msgSend(v3, "finishedSubTest:", CFSTR("transitRouteUpdate:sign"));
    objc_msgSend(v3, "_handleSuperDoAfterSubTestForShowingSign");
    WeakRetained = v3;
  }

}

void sub_100519138(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_handleSuperDoAfterSubTestForShowingSign");

}

void sub_100519164(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "testCoordinator"));
  objc_msgSend(v1, "pptTestResumeRealtimeTransitUpdates");

}

id sub_100519348()
{
  if (qword_1014D2788 != -1)
    dispatch_once(&qword_1014D2788, &stru_1011BA1B8);
  return (id)qword_1014D2780;
}

void sub_1005199BC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_1005199E4(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "mapSelectionManager"));
    objc_msgSend(v3, "selectSearchResult:animated:", *(_QWORD *)(a1 + 32), 1);

    WeakRetained = v4;
  }

}

uint64_t sub_100519A38(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_100519A6C(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

id sub_100519C7C(uint64_t a1)
{
  void *v2;
  void *v3;

  objc_msgSend(*(id *)(a1 + 32), "viewControllerPresentSearchEndEditingAnimated:", 0);
  objc_msgSend(*(id *)(a1 + 32), "viewControllerClosed:animated:", 0, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchPinsManager"));
  objc_msgSend(v2, "clearSearchPins");

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchPinsManager"));
  objc_msgSend(v3, "clearDirectionsPins");

  return objc_msgSend(*(id *)(a1 + 32), "clearMapSelection");
}

void sub_10051A618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10051A644(uint64_t a1, int a2)
{
  id v4;
  NSObject *v5;
  id WeakRetained;
  id v7;
  void *v8;
  void *v9;
  _DWORD v10[2];

  v4 = sub_100519348();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v10[0] = 67109120;
    v10[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "PlaceCard dropped pin inside of hiking region: %d.", (uint8_t *)v10, 8u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v7 = WeakRetained;
  if ((a2 & 1) != 0)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_hikingToken"));

    if (v8)
      return;
    v7 = objc_loadWeakRetained((id *)(a1 + 40));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "acquireHikingMapToken"));
    objc_msgSend(v7, "_setHikingToken:", v9);

  }
  else
  {
    objc_msgSend(WeakRetained, "_setHikingToken:", 0);
  }

}

void sub_10051A758(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "ActionCoordinatorPlaceCardVC");
  v2 = (void *)qword_1014D2780;
  qword_1014D2780 = (uint64_t)v1;

}

void sub_10051A8D8(uint64_t a1)
{
  id v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;

  if (+[TUCallCapabilities supportsTelephonyCalls](TUCallCapabilities, "supportsTelephonyCalls"))
  {
    v2 = objc_alloc_init((Class)TUCallProviderManager);
    v3 = objc_alloc((Class)TUDialRequest);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "defaultProvider"));
    v5 = objc_msgSend(v3, "initWithProvider:", v4);

    v6 = objc_msgSend(objc_alloc((Class)TUHandle), "initWithType:value:", 2, *(_QWORD *)(a1 + 32));
    objc_msgSend(v5, "setHandle:", v6);
    objc_msgSend(v5, "setShowUIPrompt:", 0);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10051AA04;
    v8[3] = &unk_1011AE240;
    v9 = v5;
    v10 = *(id *)(a1 + 40);
    v7 = v5;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v8);

  }
}

void sub_10051AA04(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  id v4;

  v2 = objc_msgSend(*(id *)(a1 + 32), "isValid");
  v3 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "URL"));
    (*(void (**)(uint64_t, uint64_t, id))(v3 + 16))(v3, 1, v4);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v3 + 16))(*(_QWORD *)(a1 + 40), 0, 0);
  }
}

uint64_t sub_10051ABC0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, BOOL))(result + 16))(result, a2 == 0);
  return result;
}

void sub_10051B7FC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  objc_class *v10;
  NSString *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;

  v17 = a2;
  v5 = a3;
  if (v5)
  {
    v6 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0
      || (v7 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v5, v7) & 1) != 0))
    {
      v8 = v5;
LABEL_11:
      v15 = *(void **)(a1 + 32);
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: %@"), v17, v8));
      objc_msgSend(v15, "addObject:", v16);

      goto LABEL_12;
    }
    v9 = v5;
    v10 = (objc_class *)objc_opt_class(v9);
    v11 = NSStringFromClass(v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    if ((objc_opt_respondsToSelector(v9, "accessibilityIdentifier") & 1) != 0)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "performSelector:", "accessibilityIdentifier"));
      v14 = v13;
      if (v13 && !objc_msgSend(v13, "isEqualToString:", v12))
      {
        v8 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v12, v9, v14));

        goto LABEL_10;
      }

    }
    v8 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v12, v9));
LABEL_10:

    goto LABEL_11;
  }
LABEL_12:

}

void sub_10051B97C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v4;

  if (a3)
  {
    v3 = *(void **)(a1 + 32);
    v4 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: %@"), a2, a3));
    objc_msgSend(v3, "addObject:", v4);

  }
}

void sub_10051BCB4(id a1)
{
  void *v1;

  v1 = (void *)qword_1014D2790;
  qword_1014D2790 = (uint64_t)&off_101274728;

}

void sub_10051E500(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 32));
  _Unwind_Resume(a1);
}

id sub_10051E51C()
{
  if (qword_1014D27A8 != -1)
    dispatch_once(&qword_1014D27A8, &stru_1011BA1F8);
  return (id)qword_1014D27A0;
}

void sub_10051E55C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  NSObject *v8;
  NSObject *v9;
  id v10;
  _QWORD v11[5];
  id v12;
  uint8_t buf[4];
  id v14;

  v5 = a2;
  v6 = a3;
  if (v5)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v8 = WeakRetained;
    if (WeakRetained)
    {
      v9 = *((_QWORD *)WeakRetained + 5);
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_10051E688;
      v11[3] = &unk_1011AC8B0;
      v11[4] = WeakRetained;
      v12 = v5;
      dispatch_async(v9, v11);

    }
  }
  else
  {
    v10 = sub_10051E51C();
    v8 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "failed to fetch garage with error: %@", buf, 0xCu);
    }
  }

}

void sub_10051E688(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "selectedVehicle"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "currentVehicleState"));
  objc_msgSend(*(id *)(a1 + 32), "setCurrentVehicleState:", v2);

}

void sub_10051E734(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  unsigned __int8 v5;
  void *v6;
  id v7;
  NSObject *v8;
  uint8_t v9[16];
  uint8_t buf[16];

  v2 = sub_10051E51C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Will reset and start recording", buf, 2u);
  }

  objc_msgSend(*(id *)(a1 + 32), "_reset");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "route"));
  v5 = objc_msgSend(v4, "isEVRoute");

  if ((v5 & 1) != 0)
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 8) = 1;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "route"));
    objc_msgSend(*(id *)(a1 + 32), "setObservedRoute:", v6);

  }
  else
  {
    v7 = sub_10051E51C();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "We are not navigating on an EV route, will stop recording", v9, 2u);
    }

    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 8) = 0;
  }
}

id sub_10051E8A8(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id result;
  uint8_t v5[16];

  v2 = sub_10051E51C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Will reset and stop recording", v5, 2u);
  }

  result = objc_msgSend(*(id *)(a1 + 32), "_reset");
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 8) = 0;
  return result;
}

id sub_10051E9B0(uint64_t a1)
{
  id result;
  id v3;
  NSObject *v4;
  void *v5;
  id v6;
  NSObject *v7;
  char *v8;
  int v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  void *v18;

  if (!*(_BYTE *)(*(_QWORD *)(a1 + 32) + 8))
  {
    v3 = sub_1004318FC();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("This class expects that bad trip state will be checked while recording is in process")));
      v9 = 136316162;
      v10 = "-[NavigationEVBadTripFeedbackCollector isBadTrip]_block_invoke";
      v11 = 2080;
      v12 = "NavigationEVBadTripFeedbackCollector.m";
      v13 = 1024;
      v14 = 167;
      v15 = 2080;
      v16 = "_isRecording";
      v17 = 2112;
      v18 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s [%s:%d] Assertion: (%s) '%@'", (uint8_t *)&v9, 0x30u);

    }
    if (sub_100A70734())
    {
      v6 = sub_1004318FC();
      v7 = objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        v8 = (char *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
        v9 = 138412290;
        v10 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&v9, 0xCu);

      }
    }
  }
  result = objc_msgSend(*(id *)(a1 + 32), "_checkForBadTrip");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

id sub_10051F6EC(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint8_t v5[16];

  v2 = sub_10051E51C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Did reroute", v5, 2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "setObservedRoute:", *(_QWORD *)(a1 + 40));
}

void sub_10051F7EC(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  _BYTE *v8;
  void *v9;
  unsigned int v10;
  unint64_t v11;
  void *v12;
  id v13;
  EVBadTripRouteInfo *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  NSObject *v24;
  const char *v25;
  unsigned int v26;
  void *v27;
  id v28;
  const char *v29;
  void *v30;
  id v31;
  NSObject *v32;
  id v33;
  NSObject *v34;
  char *v35;
  id v36;
  NSObject *v37;
  EVBadTripRouteInfo *v38;
  void *v39;
  void *v40;
  int v41;
  const char *v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  _BYTE v46[18];

  v2 = sub_10051E51C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observedRoute"));
    v5 = (const char *)objc_msgSend(v4, "serverIdentifier");
    v6 = *(const char **)(a1 + 48);
    v7 = *(_QWORD *)(a1 + 56);
    v41 = 134218496;
    v42 = v5;
    v43 = 2048;
    v44 = v6;
    v45 = 2048;
    *(_QWORD *)v46 = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Route %lu did update step: %lu, segment: %lu", (uint8_t *)&v41, 0x20u);

  }
  v8 = *(_BYTE **)(a1 + 32);
  if (v8[8])
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "observedRoute"));
    v10 = objc_msgSend(v9, "isEVRoute");

    if (v10)
    {
      v11 = *(_QWORD *)(a1 + 48) - 1;
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "route"));
      v13 = objc_msgSend(v12, "stepsCount");

      if (v11 < (unint64_t)v13)
      {
        v14 = (EVBadTripRouteInfo *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "lastObject"));
        if (!v14)
        {
          v31 = sub_1004318FC();
          v32 = objc_claimAutoreleasedReturnValue(v31);
          if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          {
            v41 = 136315906;
            v42 = "-[NavigationEVBadTripFeedbackCollector navigationService:didUpdateStepIndex:segmentIndex:]_block_invoke";
            v43 = 2080;
            v44 = "NavigationEVBadTripFeedbackCollector.m";
            v45 = 1024;
            *(_DWORD *)v46 = 304;
            *(_WORD *)&v46[4] = 2080;
            *(_QWORD *)&v46[6] = "routeInfo";
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%s [%s:%d] Assertion: (%s)", (uint8_t *)&v41, 0x26u);
          }

          if (sub_100A70734())
          {
            v33 = sub_1004318FC();
            v34 = objc_claimAutoreleasedReturnValue(v33);
            if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
            {
              v35 = (char *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
              v41 = 138412290;
              v42 = v35;
              _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&v41, 0xCu);

            }
          }
          v36 = sub_10051E51C();
          v37 = objc_claimAutoreleasedReturnValue(v36);
          if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
          {
            LOWORD(v41) = 0;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "routeInfo should exist by the time we get a stepIndex update.", (uint8_t *)&v41, 2u);
          }

          v38 = [EVBadTripRouteInfo alloc];
          v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observedRoute"));
          v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentVehicleState"));
          v14 = -[EVBadTripRouteInfo initWithRoute:currentVehicleState:](v38, "initWithRoute:currentVehicleState:", v39, v40);

          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "addObject:", v14);
        }
        v15 = *(void **)(*(_QWORD *)(a1 + 32) + 64);
        v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v11));
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectForKeyedSubscript:", v16));

        if (v17)
        {
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "route"));
          v19 = objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "stepAtIndex:", v11));

          v20 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject evInfo](v19, "evInfo"));
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentVehicleState"));
          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "currentBatteryCharge"));

          v23 = sub_10051E51C();
          v24 = objc_claimAutoreleasedReturnValue(v23);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
          {
            v25 = (const char *)objc_msgSend(v17, "remainingBatteryCharge");
            v26 = objc_msgSend(v20, "remainingBatteryCharge");
            v41 = 134218752;
            v42 = (const char *)v11;
            v43 = 2048;
            v44 = v25;
            v45 = 2048;
            *(_QWORD *)v46 = v26;
            *(_WORD *)&v46[8] = 2048;
            *(_QWORD *)&v46[10] = v22;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "Will save state for step: %lu, expected charge: %lu, charge from last reroute: %lu, real charge: %lu", (uint8_t *)&v41, 0x2Au);
          }

          -[EVBadTripRouteInfo setLastTraversedStep:](v14, "setLastTraversedStep:", v19);
          v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v17, "remainingBatteryCharge")));
          -[EVBadTripRouteInfo setExpectedArrivalBatteryCharge:](v14, "setExpectedArrivalBatteryCharge:", v27);

          -[EVBadTripRouteInfo setRealArrivalBatteryCharge:](v14, "setRealArrivalBatteryCharge:", v22);
        }
        else
        {
          v28 = sub_10051E51C();
          v19 = objc_claimAutoreleasedReturnValue(v28);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
          {
            v29 = *(const char **)(a1 + 56);
            v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stepIDToExpectedEVInfos"));
            v41 = 134218498;
            v42 = (const char *)v11;
            v43 = 2048;
            v44 = v29;
            v45 = 2112;
            *(_QWORD *)v46 = v30;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Did not find ev info for step: %lu, segment: %lu, in dictionary: %@", (uint8_t *)&v41, 0x20u);

          }
        }

      }
    }
  }
}

void sub_10051FD50(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "selectedVehicle"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "currentVehicleState"));
  objc_msgSend(*(id *)(a1 + 32), "setCurrentVehicleState:", v2);

}

void sub_10051FE94(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "NavigationFeedbackEVBadTripCollector");
  v2 = (void *)qword_1014D27A0;
  qword_1014D27A0 = (uint64_t)v1;

}

void sub_1005206C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1005206E4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_didTapAutomaticSharingButton");

}

void sub_100520B7C(id a1)
{
  TraceManager *v1;
  void *v2;

  if (!qword_1014D27B0)
  {
    v1 = objc_alloc_init(TraceManager);
    v2 = (void *)qword_1014D27B0;
    qword_1014D27B0 = (uint64_t)v1;

  }
}

void sub_1005218A0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  double v26;
  double v27;
  double v28;
  void *v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  void *v39;
  float v40;
  float v41;
  float v42;
  float v43;
  double v44;
  double v45;
  void *v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  void *v56;
  double v57;
  double v58;
  double v59;
  double *v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double *v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double *v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  uint64_t v113;
  double v114;
  double v115;
  uint64_t v116;
  double v117;
  double v118;
  double *v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  uint64_t v128;
  double v129;
  double v130;
  uint64_t v131;
  double v132;
  double v133;
  double *v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  id v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  uint64_t v151;
  double v152;
  uint64_t v153;
  _BYTE v154[128];

  v3 = a2;
  v142 = 0u;
  v143 = 0u;
  v144 = 0u;
  v145 = 0u;
  v4 = *(id *)(*(_QWORD *)(a1 + 32) + 56);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v142, v154, 16);
  if (!v5)
  {
    v7 = 0;
    goto LABEL_78;
  }
  v6 = v5;
  v7 = 0;
  v8 = *(_QWORD *)v143;
  do
  {
    v9 = 0;
    do
    {
      if (*(_QWORD *)v143 != v8)
        objc_enumerationMutation(v4);
      v10 = *(void **)(*((_QWORD *)&v142 + 1) + 8 * (_QWORD)v9);
      v11 = objc_opt_class(NSString);
      if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
      {
        v12 = v10;
        goto LABEL_20;
      }
      v13 = objc_opt_class(NSNumber);
      if ((objc_opt_isKindOfClass(v10, v13) & 1) != 0)
      {
        if (v7)
        {
          v14 = (uint64_t)objc_msgSend(v10, "integerValue");
          if (v14 >= 1)
          {
            v15 = v14;
            if (objc_msgSend(v7, "isEqualToString:", CFSTR("WaitContinuously")))
            {
              v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
              do
              {
                --v15;
                objc_msgSend(v16, "setDebugLayoutContinuously:", 1);
                objc_msgSend(*(id *)(a1 + 32), "center");
                objc_msgSend(v3, "hoverAtLocation:withDuration:");
              }
              while (v15);
              goto LABEL_18;
            }
            if (objc_msgSend(v7, "isEqualToString:", CFSTR("Wait")))
            {
              v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
              do
              {
                --v15;
                objc_msgSend(v16, "setDebugLayoutContinuously:", 0);
                objc_msgSend(*(id *)(a1 + 32), "center");
                objc_msgSend(v3, "hoverAtLocation:withDuration:");
              }
              while (v15);
LABEL_18:

LABEL_19:
              v12 = 0;
              goto LABEL_20;
            }
            if (objc_msgSend(v7, "isEqualToString:", CFSTR("Tap")))
            {
              do
              {
                --v15;
                v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
                objc_msgSend(v17, "edgeInsets");
                v19 = v18;
                v21 = v20;
                v23 = v22;
                v25 = v24;

                objc_msgSend(*(id *)(a1 + 32), "center");
                v27 = v26 + (float)((float)(v21 + v25) * 0.5);
                objc_msgSend(*(id *)(a1 + 32), "center");
                objc_msgSend(v3, "tap:", v27, v28 - (float)((float)(v19 + v23) * 0.5));
                objc_msgSend(*(id *)(a1 + 32), "center");
                objc_msgSend(v3, "hoverAtLocation:withDuration:");
                v12 = 0;
              }
              while (v15);
              goto LABEL_20;
            }
            if (objc_msgSend(v7, "isEqualToString:", CFSTR("TapLookAroundPreview")))
            {
              v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
              objc_msgSend(v29, "bounds");
              v31 = v30;
              v33 = v32;
              v35 = v34;
              v37 = v36;

              v38 = v37 / v35;
              v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
              objc_msgSend(v39, "edgeInsets");
              v41 = v40;
              v43 = v42;

              if (v38 <= 2.0)
              {
                v44 = v31 + v41 + 60.0;
                v45 = v33 + v37;
              }
              else
              {
                v44 = v31 + 60.0;
                v45 = v33 + v37 - v43;
              }
              v59 = v45 + -60.0;
              objc_msgSend(v3, "tap:", v44, v45 + -60.0);
              v55 = *(double *)(*(_QWORD *)(a1 + 32) + 64);
              v56 = v3;
              v57 = v44;
              v58 = v59;
            }
            else
            {
              if (!objc_msgSend(v7, "isEqualToString:", CFSTR("TapLookAroundDone")))
              {
                if (objc_msgSend(v7, "isEqualToString:", CFSTR("DoubleTap")))
                {
                  do
                  {
                    --v15;
                    objc_msgSend(*(id *)(a1 + 32), "center");
                    objc_msgSend(v3, "doubleTap:");
                    objc_msgSend(*(id *)(a1 + 32), "center");
                    objc_msgSend(v3, "hoverAtLocation:withDuration:");
                    v12 = 0;
                  }
                  while (v15);
                }
                else if (objc_msgSend(v7, "isEqualToString:", CFSTR("PanLeft")))
                {
                  objc_msgSend(*(id *)(a1 + 32), "center");
                  v60 = *(double **)(a1 + 32);
                  v62 = v61 - v60[4];
                  objc_msgSend(v60, "center");
                  v64 = v63;
                  objc_msgSend(*(id *)(a1 + 32), "center");
                  v66 = v65;
                  objc_msgSend(*(id *)(a1 + 32), "center");
                  v68 = v67;
                  do
                  {
                    --v15;
                    objc_msgSend(v3, "dragWithStartPoint:endPoint:duration:", v62, v64, v66, v68, *(double *)(*(_QWORD *)(a1 + 32) + 64));
                    v12 = 0;
                  }
                  while (v15);
                }
                else if (objc_msgSend(v7, "isEqualToString:", CFSTR("PanRight")))
                {
                  objc_msgSend(*(id *)(a1 + 32), "center");
                  v70 = v69;
                  objc_msgSend(*(id *)(a1 + 32), "center");
                  v72 = v71;
                  objc_msgSend(*(id *)(a1 + 32), "center");
                  v73 = *(double **)(a1 + 32);
                  v75 = v74 - v73[4];
                  objc_msgSend(v73, "center");
                  v77 = v76;
                  do
                  {
                    --v15;
                    objc_msgSend(v3, "dragWithStartPoint:endPoint:duration:", v70, v72, v75, v77, *(double *)(*(_QWORD *)(a1 + 32) + 64));
                    v12 = 0;
                  }
                  while (v15);
                }
                else if (objc_msgSend(v7, "isEqualToString:", CFSTR("PanUp")))
                {
                  objc_msgSend(*(id *)(a1 + 32), "center");
                  v79 = v78;
                  objc_msgSend(*(id *)(a1 + 32), "center");
                  v80 = *(double **)(a1 + 32);
                  v82 = v81 - v80[4];
                  objc_msgSend(v80, "center");
                  v84 = v83;
                  objc_msgSend(*(id *)(a1 + 32), "center");
                  v86 = v85;
                  do
                  {
                    --v15;
                    objc_msgSend(v3, "dragWithStartPoint:endPoint:duration:", v79, v82, v84, v86, *(double *)(*(_QWORD *)(a1 + 32) + 64));
                    v12 = 0;
                  }
                  while (v15);
                }
                else if (objc_msgSend(v7, "isEqualToString:", CFSTR("PanDown")))
                {
                  objc_msgSend(*(id *)(a1 + 32), "center");
                  v88 = v87;
                  objc_msgSend(*(id *)(a1 + 32), "center");
                  v90 = v89;
                  objc_msgSend(*(id *)(a1 + 32), "center");
                  v92 = v91;
                  objc_msgSend(*(id *)(a1 + 32), "center");
                  v94 = v93 - *(double *)(*(_QWORD *)(a1 + 32) + 32);
                  do
                  {
                    --v15;
                    objc_msgSend(v3, "dragWithStartPoint:endPoint:duration:", v88, v90, v92, v94, *(double *)(*(_QWORD *)(a1 + 32) + 64));
                    v12 = 0;
                  }
                  while (v15);
                }
                else if (objc_msgSend(v7, "isEqualToString:", CFSTR("ZoomIn")))
                {
                  objc_msgSend(*(id *)(a1 + 32), "center");
                  v96 = v95;
                  objc_msgSend(*(id *)(a1 + 32), "center");
                  v98 = v97 + -10.0;
                  objc_msgSend(*(id *)(a1 + 32), "center");
                  v100 = v99;
                  objc_msgSend(*(id *)(a1 + 32), "center");
                  v102 = v101 + 10.0;
                  do
                  {
                    --v15;
                    objc_msgSend(v3, "pinchOpenWithStartPoint:endPoint:duration:", v96, v98, v100, v102, 3.0);
                    v12 = 0;
                  }
                  while (v15);
                }
                else if (objc_msgSend(v7, "isEqualToString:", CFSTR("ZoomOut")))
                {
                  objc_msgSend(*(id *)(a1 + 32), "center");
                  v104 = v103;
                  objc_msgSend(*(id *)(a1 + 32), "center");
                  v106 = v105 + -10.0;
                  objc_msgSend(*(id *)(a1 + 32), "center");
                  v108 = v107;
                  objc_msgSend(*(id *)(a1 + 32), "center");
                  v110 = v109 + 10.0;
                  do
                  {
                    --v15;
                    objc_msgSend(v3, "pinchCloseWithStartPoint:endPoint:duration:", v104, v106, v108, v110, 3.0);
                    v12 = 0;
                  }
                  while (v15);
                }
                else if (objc_msgSend(v7, "isEqualToString:", CFSTR("CirclePan")))
                {
                  do
                  {
                    --v15;
                    objc_msgSend(v3, "rotate:withRadius:rotation:duration:touchCount:", 1, *(double *)(*(_QWORD *)(a1 + 32) + 72), *(double *)(*(_QWORD *)(a1 + 32) + 80), 32.0, 6.28318, *(double *)(*(_QWORD *)(a1 + 32) + 64));
                    v12 = 0;
                  }
                  while (v15);
                }
                else
                {
                  if (!objc_msgSend(v7, "isEqualToString:", CFSTR("Rotate")))
                  {
                    if (objc_msgSend(v7, "isEqualToString:", CFSTR("PitchDown")))
                    {
                      objc_msgSend(*(id *)(a1 + 32), "center");
                      v112 = v111 + -65.0;
                      objc_msgSend(*(id *)(a1 + 32), "center");
                      v150 = v112;
                      v151 = v113;
                      objc_msgSend(*(id *)(a1 + 32), "center");
                      v115 = v114 + 65.0;
                      objc_msgSend(*(id *)(a1 + 32), "center");
                      v152 = v115;
                      v153 = v116;
                      objc_msgSend(*(id *)(a1 + 32), "center");
                      v118 = v117 + -65.0;
                      objc_msgSend(*(id *)(a1 + 32), "center");
                      v119 = *(double **)(a1 + 32);
                      v121 = v120 - v119[4];
                      v146 = v118;
                      v147 = v121;
                      objc_msgSend(v119, "center");
                      v123 = v122 + 65.0;
                      objc_msgSend(*(id *)(a1 + 32), "center");
                      v125 = v124 - *(double *)(*(_QWORD *)(a1 + 32) + 32);
                      v148 = v123;
                      v149 = v125;
                      do
                      {
                        --v15;
                        objc_msgSend(v3, "touchDownAtPoints:touchCount:", &v150, 2);
                        objc_msgSend(v3, "moveToPoints:touchCount:duration:", &v146, 2, *(double *)(*(_QWORD *)(a1 + 32) + 64));
                        objc_msgSend(v3, "liftUpAtAllActivePoints");
                        objc_msgSend(v3, "hoverAtLocation:withDuration:", v146, v147, *(double *)(*(_QWORD *)(a1 + 32) + 64));
                      }
                      while (v15);
                    }
                    else if (objc_msgSend(v7, "isEqualToString:", CFSTR("PitchUp")))
                    {
                      objc_msgSend(*(id *)(a1 + 32), "center");
                      v127 = v126 + -65.0;
                      objc_msgSend(*(id *)(a1 + 32), "center");
                      v150 = v127;
                      v151 = v128;
                      objc_msgSend(*(id *)(a1 + 32), "center");
                      v130 = v129 + 65.0;
                      objc_msgSend(*(id *)(a1 + 32), "center");
                      v152 = v130;
                      v153 = v131;
                      objc_msgSend(*(id *)(a1 + 32), "center");
                      v133 = v132 + -65.0;
                      objc_msgSend(*(id *)(a1 + 32), "center");
                      v134 = *(double **)(a1 + 32);
                      v136 = v135 + v134[4];
                      v146 = v133;
                      v147 = v136;
                      objc_msgSend(v134, "center");
                      v138 = v137 + 65.0;
                      objc_msgSend(*(id *)(a1 + 32), "center");
                      v140 = v139 + *(double *)(*(_QWORD *)(a1 + 32) + 32);
                      v148 = v138;
                      v149 = v140;
                      do
                      {
                        --v15;
                        objc_msgSend(v3, "touchDownAtPoints:touchCount:", &v150, 2);
                        objc_msgSend(v3, "moveToPoints:touchCount:duration:", &v146, 2, *(double *)(*(_QWORD *)(a1 + 32) + 64));
                        objc_msgSend(v3, "liftUpAtAllActivePoints");
                        objc_msgSend(v3, "hoverAtLocation:withDuration:", v146, v147, *(double *)(*(_QWORD *)(a1 + 32) + 64));
                      }
                      while (v15);
                    }
                    goto LABEL_19;
                  }
                  do
                  {
                    --v15;
                    objc_msgSend(v3, "rotate:withRadius:rotation:duration:touchCount:", 2, *(double *)(*(_QWORD *)(a1 + 32) + 72), *(double *)(*(_QWORD *)(a1 + 32) + 80), 32.0, 6.28318, *(double *)(*(_QWORD *)(a1 + 32) + 64));
                    v12 = 0;
                  }
                  while (v15);
                }
LABEL_20:

                v7 = v12;
                goto LABEL_21;
              }
              v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
              objc_msgSend(v46, "bounds");
              v48 = v47;
              v50 = v49;
              v52 = v51;

              v53 = v48 + v52 + -50.0;
              v54 = v50 + 50.0;
              objc_msgSend(v3, "tap:", v53, v54);
              v55 = *(double *)(*(_QWORD *)(a1 + 32) + 64);
              v56 = v3;
              v57 = v53;
              v58 = v54;
            }
            objc_msgSend(v56, "hoverAtLocation:withDuration:", v57, v58, v55);
            goto LABEL_19;
          }
        }
      }
LABEL_21:
      v9 = (char *)v9 + 1;
    }
    while (v9 != v6);
    v141 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v142, v154, 16);
    v6 = v141;
  }
  while (v141);
LABEL_78:

}

id sub_1005222CC(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  void *v5;
  _QWORD v7[6];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  void (*v12)(uint64_t);
  id v13;

  v3 = a1;
  if ((objc_opt_isKindOfClass(v3, a2) & 1) != 0)
  {
    v4 = v3;
  }
  else
  {
    v8 = 0;
    v9 = &v8;
    v10 = 0x3032000000;
    v11 = sub_100523900;
    v12 = sub_100523910;
    v13 = 0;
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "subviews"));
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100523918;
    v7[3] = &unk_1011BA268;
    v7[4] = &v8;
    v7[5] = a2;
    objc_msgSend(v5, "enumerateObjectsUsingBlock:", v7);

    v4 = (id)v9[5];
    _Block_object_dispose(&v8, 8);

  }
  return v4;
}

void sub_1005223BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100522718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100522734(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "initialLoadComplete");

}

void sub_1005227D4(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  MapsRPTParameters *v5;
  MapsRPTParameters *v6;
  void *v7;
  _QWORD v8[5];
  MapsRPTParameters *v9;
  _QWORD v10[4];
  uint64_t v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainVKMapView"));
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v4 + 88))
  {
    if (*(_BYTE *)(v4 + 65))
    {
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_100522928;
      v8[3] = &unk_1011AC8B0;
      v8[4] = v4;
      v9 = v2;
      objc_msgSend((id)v4, "enterLookAroundForTest:", v8);
      v5 = v9;
    }
    else
    {
      v6 = [MapsRPTParameters alloc];
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "testName"));
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_100522920;
      v10[3] = &unk_1011AC860;
      v11 = *(_QWORD *)(a1 + 32);
      v5 = -[MapsRPTParameters initWithTestName:view:completionHandler:testActions:actionDuration:](v6, "initWithTestName:view:completionHandler:testActions:actionDuration:", v7, v3, v10, *(_QWORD *)(v11 + 88), *(double *)(v11 + 96));

      +[RPTTestRunner runTestWithParameters:](RPTTestRunner, "runTestWithParameters:", v5);
    }

  }
}

id sub_100522920(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "rptTestCompleted");
}

void sub_100522928(uint64_t a1)
{
  MapsRPTParameters *v2;
  void *v3;
  uint64_t v4;
  MapsRPTParameters *v5;
  _QWORD v6[4];
  uint64_t v7;

  v2 = [MapsRPTParameters alloc];
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "testName"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1005229E8;
  v6[3] = &unk_1011AC860;
  v4 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 32);
  v5 = -[MapsRPTParameters initWithTestName:view:completionHandler:testActions:actionDuration:](v2, "initWithTestName:view:completionHandler:testActions:actionDuration:", v3, v4, v6, *(_QWORD *)(v7 + 88), *(double *)(v7 + 96));

  +[RPTTestRunner runTestWithParameters:](RPTTestRunner, "runTestWithParameters:", v5);
}

id sub_1005229E8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "rptTestCompleted");
}

id sub_100522CC8(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  void *v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainVKMapView"));
  v3 = objc_msgSend(v2, "isFullyDrawn");

  v4 = *(void **)(a1 + 32);
  if (v3)
    return _objc_msgSend(v4, "onFullyDrawn:", 0);
  else
    return objc_msgSend(v4, "setupFullyDrawnNotification:", "onFullyDrawn:");
}

uint64_t sub_100523028(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t result;
  uint8_t v5[16];

  v2 = sub_100431B9C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Received MKLookAroundViewDidBecomeAdequatelyDrawnNotification", v5, 2u);
  }

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_100523134(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_100523268(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  uint8_t buf[16];

  v2 = sub_100431B9C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Received PPTLookAroundContainerViewControllerDidTransitionToFullscreenNotification", buf, 2u);
  }

  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10052332C;
  v6[3] = &unk_1011ADA00;
  v7 = *(id *)(a1 + 48);
  objc_msgSend(v4, "onLookAroundView:didCompletionPostTransitionAnimation:", v5, v6);

}

uint64_t sub_10052332C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1005234F0(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;
  id v11;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "object"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "lookAroundView"));

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1005235B8;
  v7[3] = &unk_1011B4320;
  v5 = *(void **)(a1 + 40);
  v8 = *(id *)(a1 + 32);
  v9 = v4;
  v10 = v5;
  v11 = *(id *)(a1 + 48);
  v6 = v4;
  objc_msgSend(v8, "onLookAroundView:didBecomeAdequatelyDrawnCallback:", v6, v7);

}

void sub_1005235B8(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD v4[5];
  id v5;
  id v6;
  id v7;

  v3 = *(void **)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100523664;
  v4[3] = &unk_1011B4320;
  v4[4] = v3;
  v5 = v2;
  v6 = *(id *)(a1 + 48);
  v7 = *(id *)(a1 + 56);
  objc_msgSend(v3, "onLookAroundView:didCompletionPostTransitionAnimation:", v5, v4);

}

void sub_100523664(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  _QWORD v5[5];
  id v6;
  id v7;

  v3 = *(void **)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100523708;
  v5[3] = &unk_1011AECC0;
  v5[4] = v3;
  v6 = v2;
  v7 = *(id *)(a1 + 56);
  objc_msgSend(v3, "expandLookAroundToFullscreen:withLookAroundView:mapItem:completionBlock:", 1, v6, v4, v5);

}

void sub_100523708(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD v4[5];
  id v5;
  id v6;

  v3 = *(void **)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1005237A0;
  v4[3] = &unk_1011AECC0;
  v4[4] = v3;
  v5 = v2;
  v6 = *(id *)(a1 + 48);
  objc_msgSend(v3, "onLookAroundView:didCompletionPostTransitionAnimation:", v5, v4);

}

void sub_1005237A0(uint64_t a1)
{
  uint64_t v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("lookAroundEnter"));
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "lookAroundView"));
  objc_msgSend(*(id *)(a1 + 32), "setupForVKTestWithMapView:", v3);
  objc_msgSend(v3, "enableTestStatistics");
  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
    (*(void (**)(void))(v2 + 16))();

}

uint64_t sub_100523900(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100523910(uint64_t a1)
{

}

void sub_100523918(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v6 = sub_1005222CC(a2, *(_QWORD *)(a1 + 40));
  v7 = objc_claimAutoreleasedReturnValue(v6);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    *a4 = 1;
}

id sub_100523CB0(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "addEvChargingPort:", a2);
}

void sub_100523CBC(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(a2, "globalBrandID")));
  objc_msgSend(v2, "addObject:", v3);

}

id sub_100523D14(uint64_t a1, void *a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "addPreferredBrand:", objc_msgSend(a2, "unsignedLongLongValue"));
}

id sub_100524D88()
{
  if (qword_1014D27C8 != -1)
    dispatch_once(&qword_1014D27C8, &stru_1011BA458);
  return (id)qword_1014D27C0;
}

NSString *__cdecl sub_100524F1C(id a1, TransitDirectionsListItem *a2, unint64_t a3, unint64_t a4)
{
  TransitDirectionsListItem *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  id v21;
  __CFString *v22;
  void *v23;
  unint64_t v24;
  __CFString *v25;
  void *v26;
  void *v27;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];

  v6 = a2;
  v7 = objc_alloc((Class)NSMutableArray);
  v8 = (void *)objc_claimAutoreleasedReturnValue(-[TransitDirectionsListItem composedRouteSteps](v6, "composedRouteSteps"));
  v9 = objc_msgSend(v7, "initWithCapacity:", objc_msgSend(v8, "count"));

  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v10 = (void *)objc_claimAutoreleasedReturnValue(-[TransitDirectionsListItem composedRouteSteps](v6, "composedRouteSteps"));
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v30;
    do
    {
      for (i = 0; i != v12; i = (char *)i + 1)
      {
        if (*(_QWORD *)v30 != v13)
          objc_enumerationMutation(v10);
        v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)i), "stepIndex")));
        objc_msgSend(v9, "addObject:", v15);

      }
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
    }
    while (v12);
  }

  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "componentsJoinedByString:", CFSTR(", ")));
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("[%@]"), v16));

  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a4));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "stringValue"));

  if (a3)
  {
    v20 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%lu.%@"), a3, v19));

    v19 = (void *)v20;
  }
  v21 = -[TransitDirectionsListItem matchingRouteStepIndex](v6, "matchingRouteStepIndex");
  if (v21 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    v22 = CFSTR("-");
  }
  else
  {
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v21));
    v22 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "stringValue"));

  }
  v24 = -[TransitDirectionsListItem type](v6, "type");
  if (v24 >= 0x12)
    v25 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Unknown (%ld)"), v24));
  else
    v25 = off_1011BA478[v24];
  v26 = (void *)objc_claimAutoreleasedReturnValue(-[TransitDirectionsListItem composedRouteSteps](v6, "composedRouteSteps"));
  v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ | %@ (matchingStepIndex: %@, steps: %@, count: %lu)"), v19, v25, v22, v17, objc_msgSend(v26, "count")));

  return (NSString *)v27;
}

void sub_1005251F8(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  uint64_t v14;

  v10 = a2;
  v5 = objc_autoreleasePoolPush();
  v6 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v7);
  if (objc_msgSend(v10, "conformsToProtocol:", &OBJC_PROTOCOL___TransitDirectionsListExpandableItem))
    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "subItemsWithForceExpand:", 1));
  else
    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "subItems"));
  v9 = (void *)v8;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100525318;
  v11[3] = &unk_1011BA348;
  v13 = *(id *)(a1 + 40);
  v14 = a3;
  v12 = *(id *)(a1 + 32);
  objc_msgSend(v9, "enumerateObjectsUsingBlock:", v11);

  objc_autoreleasePoolPop(v5);
}

void sub_100525318(uint64_t a1)
{
  uint64_t v2;
  id v3;

  v2 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);

}

BOOL sub_10052745C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  _BOOL8 v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  NSObject *v18;
  uint8_t v20[16];
  uint8_t buf[16];

  v3 = a2;
  if (objc_msgSend(v3, "maneuver") == 9)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "startingStop"));
    if (objc_msgSend(v4, "hasMuid"))
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "endingStop"));
      if (objc_msgSend(v5, "hasMuid"))
      {
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "startingStop"));
        v7 = objc_msgSend(v6, "muid");
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "endingStop"));
        v9 = v7 != objc_msgSend(v8, "muid");

      }
      else
      {
        v9 = 0;
      }

    }
    else
    {
      v9 = 0;
    }

    v10 = sub_100524D88();
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "- creating block transfer step", buf, 2u);
    }

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_blockTransferItemFromStep:withBoardItem:", v3, *(_QWORD *)(a1 + 40)));
    objc_msgSend(v12, "setParentItem:", *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 32), "_appendItem:toArray:", v12, *(_QWORD *)(a1 + 48));
    v13 = *(void **)(a1 + 32);
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "toLineColor"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "alternateToLineColor"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "_fareAndOperatingHoursItemForBlockTransferStep:lineColor:alternateLineColor:parentItem:", v3, v14, v15, *(_QWORD *)(a1 + 40)));

    if (v16)
    {
      v17 = sub_100524D88();
      v18 = objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "- adding fare/operating hours item for block transfer", v20, 2u);
      }

      objc_msgSend(*(id *)(a1 + 32), "_appendItem:toArray:", v16, *(_QWORD *)(a1 + 48));
    }

  }
  else
  {
    v9 = 0;
  }

  return v9;
}

GEOComposedString *__cdecl sub_100528724(id a1, GEOFormattedString *a2)
{
  GEOFormattedString *v2;
  id v3;

  v2 = a2;
  v3 = objc_msgSend(objc_alloc((Class)GEOComposedString), "initWithGeoFormattedString:", v2);

  return (GEOComposedString *)v3;
}

id sub_100529728(id a1, GEOComposedTransitRouteStep *a2, unint64_t a3)
{
  void *v3;
  void *v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(-[GEOComposedTransitRouteStep routeDetailsPrimaryArtwork](a2, "routeDetailsPrimaryArtwork", a3));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "firstObject"));

  return v4;
}

id sub_1005298F0(id a1, GEOComposedTransitRouteStep *a2, unint64_t a3)
{
  return -[GEOComposedTransitRouteStep routeDetailsSecondaryArtwork](a2, "routeDetailsSecondaryArtwork", a3);
}

void sub_1005299B8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "TransitListBuilder");
  v2 = (void *)qword_1014D27C0;
  qword_1014D27C0 = (uint64_t)v1;

}

void sub_100529C78(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  double y;
  void *v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  v3 = a2;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v4 = *(id *)(a1 + 32);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v12;
    y = CGPointZero.y;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v12 != v7)
          objc_enumerationMutation(v4);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_generateUIImageFromView:withWatermark:size:", *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)v9), *(_QWORD *)(a1 + 48), *(double *)(a1 + 72), *(double *)(a1 + 80), (_QWORD)v11));
        objc_msgSend(v3, "beginPage");
        objc_msgSend(v10, "drawAtPoint:", CGPointZero.x, y);

        v9 = (char *)v9 + 1;
      }
      while (v6 != v9);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v6);
  }

}

id sub_100529F28(uint64_t a1)
{
  id result;

  objc_msgSend(*(id *)(a1 + 32), "drawViewHierarchyInRect:afterScreenUpdates:", 1, 0.0, 0.0, *(double *)(a1 + 48), *(double *)(a1 + 56));
  result = *(id *)(a1 + 40);
  if (result)
    return objc_msgSend(result, "drawViewHierarchyInRect:afterScreenUpdates:", 1, 0.0, 0.0, *(double *)(a1 + 48), *(double *)(a1 + 56));
  return result;
}

id sub_10052A334(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_start");
}

void sub_10052A37C(id a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager _maps_globalCachesURL](NSFileManager, "_maps_globalCachesURL"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "URLByAppendingPathComponent:", CFSTR("ARTraces")));
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "path"));

  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "stringByAppendingPathComponent:", CFSTR("ppt_recording.mov")));
  v4 = (void *)qword_1014D27D0;
  qword_1014D27D0 = v3;

}

id sub_10052A48C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_start");
}

id sub_10052A6CC(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("showVLFUI"));
  return _objc_msgSend(*(id *)(a1 + 32), "_runVLF");
}

void sub_10052A778(uint64_t a1, void *a2)
{
  unsigned int v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "object"));
  v3 = objc_msgSend(v5, "wasLastLocalizationSuccessful");
  v4 = *(void **)(a1 + 32);
  if (v3)
  {
    objc_msgSend(v4, "finishedSubTest:", CFSTR("runVLF"));
    objc_msgSend(*(id *)(a1 + 32), "_dismissVLFUI");
  }
  else
  {
    objc_msgSend(v4, "failedTestWithReason:", CFSTR("VLF localization failed"));
  }

}

id sub_10052A860(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("dismissVLFUI"));
  return objc_msgSend(*(id *)(a1 + 32), "finishedTest");
}

void sub_10052B640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10052B664(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  uint64_t v4;
  id v5;
  id v6;

  v2 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_didDismiss");

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    (*(void (**)(void))(v4 + 16))();
  v6 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  v5 = objc_loadWeakRetained(v2);
  objc_msgSend(v6, "postNotificationName:object:", CFSTR("MacPopoverPresentationControllerDidDismissPopover"), v5);

}

void sub_10052C468(id a1)
{
  *(double *)&qword_1014D27E0 = (double)GEOConfigGetInteger(MapsConfig_BannerSharpRightTurnAdditionalLeadingInset, off_1014B4B28);
}

void sub_10052C4D4(id a1)
{
  *(double *)&qword_1014D27F0 = (double)GEOConfigGetInteger(MapsConfig_BannerRightTurnAdditionalLeadingInset, off_1014B4B18);
}

const __CFString *sub_10052CA34(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  unsigned int v4;
  void *v5;
  void *v6;
  unint64_t v7;
  const __CFString *v8;

  v1 = a1;
  v2 = v1;
  if (!v1)
    goto LABEL_7;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "domain"));
  v4 = objc_msgSend(v3, "isEqualToString:", CFSTR("com.apple.Maps.externaldevice"));

  if (!v4)
  {
    v8 = 0;
    goto LABEL_11;
  }
  if (objc_msgSend(v2, "code") == (id)1)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "userInfo"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("__handoff_error_key")));

    if (v6 && (v7 = (unint64_t)objc_msgSend(v6, "integerValue"), v7 <= 4))
      v8 = off_1011BA7B0[v7];
    else
      v8 = 0;

  }
  else
  {
LABEL_7:
    v8 = CFSTR("success");
  }
LABEL_11:

  return v8;
}

void sub_10052CB48(id a1)
{
  void *v1;

  v1 = (void *)qword_1014D2800;
  qword_1014D2800 = (uint64_t)&off_1012737B8;

}

id sub_10052CF28()
{
  if (qword_1014D2828 != -1)
    dispatch_once(&qword_1014D2828, &stru_1011BA790);
  return (id)qword_1014D2820;
}

void sub_10052D0A4(id a1)
{
  MapsExternalDevice *v1;
  void *v2;

  v1 = objc_alloc_init(MapsExternalDevice);
  v2 = (void *)qword_1014D2810;
  qword_1014D2810 = (uint64_t)v1;

}

void sub_10052D408(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  void *v5;
  uint8_t v6[16];

  if (objc_msgSend(*(id *)(a1 + 32), "_isCarPlaySessionActive"))
  {
    v2 = sub_10052CF28();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "CarPlay session did connect, connecting AV device", v6, 2u);
    }

    v4 = (void *)objc_claimAutoreleasedReturnValue(+[MapsCarPlayExternalDeviceMonitor sharedInstance](MapsCarPlayExternalDeviceMonitor, "sharedInstance"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "carPlayExternalDevice"));
    objc_msgSend(*(id *)(a1 + 32), "setExternalDevice:", v5);

  }
}

id sub_10052D5B8(uint64_t a1)
{
  id result;
  id v3;
  NSObject *v4;
  uint8_t v5[16];

  result = objc_msgSend(*(id *)(a1 + 32), "_isCarPlaySessionActive");
  if ((result & 1) == 0)
  {
    v3 = sub_10052CF28();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "CarPlay session did disconnect, disconnecting AV device", v5, 2u);
    }

    return objc_msgSend(*(id *)(a1 + 32), "setExternalDevice:", 0);
  }
  return result;
}

void sub_10052D9B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29)
{
  id *v29;

  objc_destroyWeak(v29);
  objc_destroyWeak(location);
  objc_destroyWeak(&a29);
  _Unwind_Resume(a1);
}

void sub_10052D9E4(uint64_t a1, void *a2)
{
  id v3;
  id *WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  unsigned __int8 v21;
  id v22;
  NSObject *v23;
  id v24;
  NSObject *v25;
  id v26;
  _UNKNOWN **v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint8_t buf[4];
  id v44;
  __int16 v45;
  void *v46;
  __int16 v47;
  void *v48;

  v3 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "object"));
  v6 = sub_10052CF28();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    v8 = v5;
    v9 = objc_opt_class(AVExternalDevice);
    if ((objc_opt_isKindOfClass(v8, v9) & 1) != 0)
    {
      v10 = objc_opt_class(v8);
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "ID"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "name"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p> (ID: %@, name: %@, transportType: %ld)"), v10, v8, v11, v12, objc_msgSend(v8, "transportType")));

    }
    else
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "description"));
    }

    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "name"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "userInfo"));
    *(_DWORD *)buf = 138412802;
    v44 = v13;
    v45 = 2112;
    v46 = v14;
    v47 = 2112;
    v48 = v15;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "notified of update for device: %@ (%@, userInfo: %@", buf, 0x20u);

  }
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ID"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[8], "ID"));
  v18 = v16;
  v19 = v17;
  if (v18 | v19
    && (v20 = (void *)v19,
        v21 = objc_msgSend((id)v18, "isEqual:", v19),
        v20,
        (id)v18,
        v20,
        (id)v18,
        (v21 & 1) == 0))
  {
    v24 = sub_10052CF28();
    v25 = objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      v26 = *(id *)(*(_QWORD *)(a1 + 32) + 64);
      v27 = &MKTilePointForCoordinate_ptr;
      v28 = objc_opt_class(AVExternalDevice);
      if ((objc_opt_isKindOfClass(v26, v28) & 1) != 0)
      {
        v29 = objc_opt_class(v26);
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "ID"));
        v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "name"));
        v42 = v29;
        v27 = &MKTilePointForCoordinate_ptr;
        v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p> (ID: %@, name: %@, transportType: %ld)"), v42, v26, v30, v31, objc_msgSend(v26, "transportType")));

      }
      else
      {
        v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "description"));
      }

      v33 = v32;
      v34 = v5;
      v35 = objc_opt_class(v27[444]);
      if ((objc_opt_isKindOfClass(v34, v35) & 1) != 0)
      {
        v36 = objc_opt_class(v34);
        v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "ID"));
        v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "name"));
        v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p> (ID: %@, name: %@, transportType: %ld)"), v36, v34, v37, v38, objc_msgSend(v34, "transportType")));

      }
      else
      {
        v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "description"));
      }

      *(_DWORD *)buf = 138412546;
      v44 = v33;
      v45 = 2112;
      v46 = v39;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "external device changed since we registered for notifications (current: %@, incoming: %@)", buf, 0x16u);

    }
    v40 = (void *)objc_claimAutoreleasedReturnValue(+[MapsCarPlayExternalDeviceMonitor sharedInstance](MapsCarPlayExternalDeviceMonitor, "sharedInstance"));
    v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "carPlayExternalDevice"));
    objc_msgSend(*(id *)(a1 + 32), "setExternalDevice:", v41);

  }
  else if (objc_msgSend(WeakRetained, "_checkScreenOwnershipIfNeeded:", 0))
  {
    v22 = sub_10052CF28();
    v23 = objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "forced screen ownership check, state updated as a result", buf, 2u);
    }

  }
  else
  {
    objc_msgSend(WeakRetained, "_updateStateForRecievedNotification:", v3);
  }

}

void sub_10052DE74(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id WeakRetained;
  id v6;
  NSObject *v7;
  int v8;
  void *v9;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "object"));
  if (objc_msgSend(v4, "isCarScene"))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v6 = sub_10052CF28();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = 138412290;
      v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "notified a CarPlay scene will enter foreground: %@", (uint8_t *)&v8, 0xCu);
    }

    objc_msgSend(WeakRetained, "_updateStateForRecievedNotification:", v3);
  }

}

void sub_10052EBB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10052EBD4(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_checkScreenOwnershipIfNeeded:", v3);

}

void sub_10052F2C8(uint64_t a1)
{
  unsigned int v2;
  id v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  void *v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  id v18;
  id v19;
  uint8_t buf[4];
  NSObject *v21;
  __int16 v22;
  void *v23;

  v2 = objc_msgSend(*(id *)(a1 + 32), "_isCurrentStateEqualLastPostedState");
  v3 = sub_10052CF28();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = v4;
  if (!v2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lastPostedState"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentState"));
      *(_DWORD *)buf = 138412546;
      v21 = v6;
      v22 = 2112;
      v23 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "posting notification\n lastPostedState=%@\n currentState=%@", buf, 0x16u);

    }
    v8 = sub_10052CF28();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lastPostedState"));
      if (v10)
      {
        v11 = (void *)v10;
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentState"));

        if (!v12)
        {
LABEL_13:
          v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
          objc_msgSend(v17, "postNotificationName:object:userInfo:", CFSTR("MapsExternalDeviceUpdated"), *(_QWORD *)(a1 + 32), 0);

          v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentState"));
          v18 = -[NSObject copy](v5, "copy");
          objc_msgSend(*(id *)(a1 + 32), "setLastPostedState:", v18);

          goto LABEL_14;
        }
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentState"));
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lastPostedState"));
        v19 = 0;
        objc_msgSend(v13, "isEqualToState:changedKeys:", v14, &v19);
        v9 = v19;

        v15 = sub_10052CF28();
        v16 = objc_claimAutoreleasedReturnValue(v15);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          v21 = v9;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "changedKeys=%@", buf, 0xCu);
        }

      }
    }

    goto LABEL_13;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "no need to post notification (no change)", buf, 2u);
  }
LABEL_14:

}

void sub_10052F7AC(uint64_t a1)
{
  id v1;

  if (*(_QWORD *)(a1 + 32) == 2)
  {
    v1 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v1, "postNotificationName:object:userInfo:", CFSTR("MapsExternalNavigationOwnershipUpdatedNotification"), 0, 0);

  }
}

void sub_10052FE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v30 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_10052FEBC(uint64_t a1, char a2, void *a3)
{
  id v5;
  void *v6;
  _QWORD block[4];
  id v8;
  id v9;
  char v10;

  v5 = a3;
  v6 = *(void **)(a1 + 32);
  if (v6)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10052FF60;
    block[3] = &unk_1011B3E48;
    v9 = v6;
    v10 = a2;
    v8 = v5;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  }
}

uint64_t sub_10052FF60(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 32));
}

uint64_t sub_10052FF74(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10052FF84(uint64_t a1)
{

}

void sub_10052FF8C(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  void *v23;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "userInfo"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", EAAccessoryDestinationStatusIdentifierKey));

  if (v5 && objc_msgSend(v5, "isEqualToString:", a1[4]))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1[7] + 8) + 40), "invalidate");
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v6, "removeObserver:", *(_QWORD *)(*(_QWORD *)(a1[8] + 8) + 40));

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "userInfo"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", EAAccessoryDestinationStatusDidSucceedKey));
    v9 = objc_msgSend(v8, "BOOLValue");

    v10 = sub_10043364C();
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      v12 = a1[4];
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v9));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "userInfo"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", EAAccessoryDestinationStatusParametersUsedKey));
      v18 = 138412802;
      v19 = v12;
      v20 = 2112;
      v21 = v13;
      v22 = 2112;
      v23 = v15;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Destination sharing status notification (destination:%@, status:%@, used:%@)", (uint8_t *)&v18, 0x20u);

    }
    if ((v9 & 1) != 0)
    {
      v16 = 0;
    }
    else
    {
      v17 = objc_msgSend((id)objc_opt_class(a1[5]), "_destinationHandoffErrorWithReason:", 3);
      v16 = (void *)objc_claimAutoreleasedReturnValue(v17);
    }
    (*(void (**)(void))(a1[6] + 16))();

  }
}

void sub_1005301A8(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  void *v13;

  v2 = sub_10043364C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 64)));
    v10 = 138412546;
    v11 = v4;
    v12 = 2112;
    v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Forcibly removing destination sharing notification observer, took too long (destination:%@, timeout:%@s)", (uint8_t *)&v10, 0x16u);

  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v6, "removeObserver:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));

  v7 = *(_QWORD *)(a1 + 48);
  v8 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 40)), "_destinationHandoffErrorWithReason:", 4);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  (*(void (**)(uint64_t, _QWORD, void *))(v7 + 16))(v7, 0, v9);

}

id sub_1005304AC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 48), "_presentActivityControllerForDestination:completion:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

id sub_1005309E4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 64), "_presentActivityControllerForDestination:searchResult:dictionary:completion:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

uint64_t sub_1005309F8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, 0, *(_QWORD *)(a1 + 32));
  return result;
}

uint64_t sub_100530A18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 16))(result, a3, a5);
  return result;
}

void sub_100530CF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v4;

  v3 = *(void **)(a1 + 32);
  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@:%@"), a2, a3));
  objc_msgSend(v3, "addObject:", v4);

}

void sub_100530D4C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t IntegerValue;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v8 = a1;
  if (IOHIDEventGetType(a4) == 3)
  {
    IntegerValue = IOHIDEventGetIntegerValue(a4, 196608);
    v6 = IOHIDEventGetIntegerValue(a4, 196609);
    v7 = IOHIDEventGetIntegerValue(a4, 196610);
    if (IntegerValue == 12 && v6 == 670 && !v7)
      objc_msgSend(v8, "_handleIOHIDEvent:", a4);
  }

}

void sub_100530F0C(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v1, "postNotificationName:object:userInfo:", CFSTR("MapsExternalDeviceRepeatNavigationInstructionNotification"), WeakRetained, 0);

}

void sub_100531A38(uint64_t a1, void *a2)
{
  id v3;
  _QWORD v4[4];
  id v5;
  id v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100531ACC;
  v4[3] = &unk_1011AC8B0;
  v5 = a2;
  v6 = *(id *)(a1 + 32);
  v3 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v4);

}

id sub_100531ACC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 32);
  v3 = *(void **)(a1 + 40);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "route"));
  objc_msgSend(v2, "navigationService:didReroute:rerouteReason:", v3, v4, 0);

  return _objc_msgSend(*(id *)(a1 + 32), "navigationService:didChangeNavigationState:", *(_QWORD *)(a1 + 40), objc_msgSend(*(id *)(a1 + 40), "navigationState"));
}

void sub_10053202C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CarExternalDevice");
  v2 = (void *)qword_1014D2820;
  qword_1014D2820 = (uint64_t)v1;

}

id sub_100532754(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 48) = 0;
  objc_msgSend(*(id *)(a1 + 32), "setUserIsActiveStateChangeQueued:", 0);
  return objc_msgSend(*(id *)(a1 + 32), "continueQuickRouteETAs");
}

void sub_100533064(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  unsigned int v5;
  void *v6;
  void *v7;
  void *v8;
  double v9;
  double v10;
  void *v11;
  void *v12;
  double v13;
  void *v14;
  void *v15;
  id v16;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "userInfo"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", MKErrorGEOErrorKey));
    v5 = objc_msgSend(v4, "intValue");

    if (v5 == -4)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userInfo"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", MKErrorGEOErrorUserInfoKey));

      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", GEOErrorThrottlingTimeUntilResetKey));
      objc_msgSend(v8, "doubleValue");
      v10 = v9;

      +[CarQuickRouteRefreshOperation engageFullThrottleForInterval:](CarQuickRouteRefreshOperation, "engageFullThrottleForInterval:", v10);
      objc_msgSend(*(id *)(a1 + 40), "_Car_queueUpdateETA");

    }
  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 8), "allKeysForObject:", *(_QWORD *)(a1 + 40)));
  v16 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "firstObject"));

  if (v16)
  {
    v12 = *(void **)(a1 + 56);
    if (v12)
    {
      objc_msgSend(v12, "travelTime");
      if (v13 >= 0.0)
      {
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "itemAtIndexPath:", v16));
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 16), "setObject:forKey:", *(_QWORD *)(a1 + 56), v14);

      }
    }
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 56), "cellForRowAtIndexPath:", v16));
    if (v15 && *(_QWORD *)(a1 + 32) | *(_QWORD *)(a1 + 56))
      objc_msgSend(*(id *)(a1 + 48), "_applyRouteETA:toCell:animated:");

  }
}

void sub_1005336E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, id a18)
{
  id *v18;
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a18);
  _Unwind_Resume(a1);
}

void sub_10053370C(id *a1, void *a2)
{
  id WeakRetained;
  void *v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;

  v9 = a2;
  WeakRetained = objc_loadWeakRetained(a1 + 5);
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v5 = objc_loadWeakRetained(a1 + 6);

    if (v5)
    {
      v6 = objc_loadWeakRetained(a1 + 5);
      v7 = objc_loadWeakRetained(a1 + 6);
      objc_msgSend(v7, "setupWithModel:cellStyle:", v9, objc_msgSend(a1[4], "cellStyle"));

      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "tableView"));
      objc_msgSend(v8, "reloadData");

    }
  }

}

void sub_1005342D8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  double v15;
  double v16;
  id v17;
  NSAttributedStringKey v18;
  void *v19;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "amount"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "formattedStringIncludeSymbol:", 0));
  if (v5)
  {
    objc_msgSend(v3, "setPlaceholder:", v5);
  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "localizedStringForKey:value:table:", CFSTR("ridesharing.feedback.tip.customTip.placeholderAmount"), CFSTR("localized string not found"), 0));
    objc_msgSend(v3, "setPlaceholder:", v7);

  }
  objc_msgSend(v3, "setKeyboardType:", 8);
  objc_msgSend(v3, "setLeftViewMode:", 3);
  v8 = objc_alloc_init((Class)UILabel);
  v9 = objc_alloc((Class)NSAttributedString);
  v10 = *(_QWORD *)(a1 + 40);
  v18 = NSForegroundColorAttributeName;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor lightGrayColor](UIColor, "lightGrayColor"));
  v19 = v11;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v19, &v18, 1));
  v13 = objc_msgSend(v9, "initWithString:attributes:", v10, v12);
  objc_msgSend(v8, "setAttributedText:", v13);

  objc_msgSend(v8, "sizeToFit");
  v14 = objc_alloc((Class)UIView);
  objc_msgSend(v8, "frame");
  v16 = v15 + 5.0;
  objc_msgSend(v8, "frame");
  v17 = objc_msgSend(v14, "initWithFrame:", 0.0, 0.0, v16);
  objc_msgSend(v17, "addSubview:", v8);
  objc_msgSend(v3, "setLeftView:", v17);

}

void sub_1005344E4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  RideBookingCurrencyAmount *v7;
  void *v8;
  RideBookingCurrencyAmount *v9;
  id v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "textFields"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "lastObject"));
  v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "text"));

  if (!objc_msgSend(v10, "length"))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "textFields"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "lastObject"));
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "placeholder"));

    v10 = (id)v6;
  }
  v7 = [RideBookingCurrencyAmount alloc];
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDecimalNumber decimalNumberWithString:](NSDecimalNumber, "decimalNumberWithString:", v10));
  v9 = -[RideBookingCurrencyAmount initWithAmount:currencyCode:](v7, "initWithAmount:currencyCode:", v8, *(_QWORD *)(a1 + 48));
  objc_msgSend(*(id *)(a1 + 40), "setAmount:", v9);

  objc_msgSend(*(id *)(a1 + 56), "_selectedOption:fromOptions:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64));
}

int64_t sub_100534A10(id a1, RideBookingCurrencyAmount *a2, RideBookingCurrencyAmount *a3)
{
  RideBookingCurrencyAmount *v4;
  void *v5;
  void *v6;
  id v7;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[RideBookingCurrencyAmount amount](a2, "amount"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[RideBookingCurrencyAmount amount](v4, "amount"));

  v7 = objc_msgSend(v5, "compare:", v6);
  return (int64_t)v7;
}

void sub_100535360(id a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_1014D2830;
  qword_1014D2830 = (uint64_t)v1;

  objc_msgSend((id)qword_1014D2830, "setTimeStyle:", 1);
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSLocale autoupdatingCurrentLocale](NSLocale, "autoupdatingCurrentLocale"));
  objc_msgSend((id)qword_1014D2830, "setLocale:", v3);

}

void sub_100535458(id a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_1014D2840;
  qword_1014D2840 = (uint64_t)v1;

  objc_msgSend((id)qword_1014D2840, "setTimeStyle:", 1);
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSLocale autoupdatingCurrentLocale](NSLocale, "autoupdatingCurrentLocale"));
  objc_msgSend((id)qword_1014D2840, "setLocale:", v3);

}

void sub_10053553C(id a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_1014D2850;
  qword_1014D2850 = (uint64_t)v1;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSLocale autoupdatingCurrentLocale](NSLocale, "autoupdatingCurrentLocale"));
  objc_msgSend((id)qword_1014D2850, "setLocale:", v3);

}

void sub_100535614(id a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_1014D2860;
  qword_1014D2860 = (uint64_t)v1;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSLocale autoupdatingCurrentLocale](NSLocale, "autoupdatingCurrentLocale"));
  objc_msgSend((id)qword_1014D2860, "setLocale:", v3);

}

void sub_1005356EC(id a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_1014D2870;
  qword_1014D2870 = (uint64_t)v1;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSLocale autoupdatingCurrentLocale](NSLocale, "autoupdatingCurrentLocale"));
  objc_msgSend((id)qword_1014D2870, "setLocale:", v3);

}

void sub_1005357C4(id a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_1014D2880;
  qword_1014D2880 = (uint64_t)v1;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSLocale autoupdatingCurrentLocale](NSLocale, "autoupdatingCurrentLocale"));
  objc_msgSend((id)qword_1014D2880, "setLocale:", v3);

}

void sub_10053589C(id a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_1014D2890;
  qword_1014D2890 = (uint64_t)v1;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSLocale autoupdatingCurrentLocale](NSLocale, "autoupdatingCurrentLocale"));
  objc_msgSend((id)qword_1014D2890, "setLocale:", v3);

}

void sub_10053594C(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSDateComponentsFormatter);
  v2 = (void *)qword_1014D28A0;
  qword_1014D28A0 = (uint64_t)v1;

  objc_msgSend((id)qword_1014D28A0, "setUnitsStyle:", 2);
  objc_msgSend((id)qword_1014D28A0, "setAllowedUnits:", 112);
  objc_msgSend((id)qword_1014D28A0, "setMaximumUnitCount:", 2);
  _objc_msgSend((id)qword_1014D28A0, "setCollapsesLargestUnit:", 1);
}

void sub_1005359FC(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSDateComponentsFormatter);
  v2 = (void *)qword_1014D28B0;
  qword_1014D28B0 = (uint64_t)v1;

  objc_msgSend((id)qword_1014D28B0, "setUnitsStyle:", 3);
  objc_msgSend((id)qword_1014D28B0, "setAllowedUnits:", 112);
  objc_msgSend((id)qword_1014D28B0, "setMaximumUnitCount:", 2);
  _objc_msgSend((id)qword_1014D28B0, "setCollapsesLargestUnit:", 1);
}

id sub_100535E24()
{
  if (qword_1014D28C8 != -1)
    dispatch_once(&qword_1014D28C8, &stru_1011BA9D8);
  return (id)qword_1014D28C0;
}

void sub_100536748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100536774(uint64_t a1, int a2, void *a3)
{
  id v5;
  id WeakRetained;
  id v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  _BOOL4 v11;
  void *v12;
  uint64_t v13;
  int v14;
  id v15;
  __int16 v16;
  id v17;

  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v7 = sub_100535E24();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    v9 = v8;
    if (v5)
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        v14 = 134349314;
        v15 = WeakRetained;
        v16 = 2112;
        v17 = v5;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "[%{public}p] Got error when trying to determine VLF tile availability: %@", (uint8_t *)&v14, 0x16u);
      }

      objc_msgSend(WeakRetained, "setAreTilesAvailable:", 0);
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
      objc_msgSend(WeakRetained, "setLastErrorDate:", v10);

    }
    else
    {
      v11 = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
      if (a2)
      {
        if (v11)
        {
          v14 = 134349056;
          v15 = WeakRetained;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "[%{public}p] VLF tiles are available", (uint8_t *)&v14, 0xCu);
        }

        v12 = WeakRetained;
        v13 = 1;
      }
      else
      {
        if (v11)
        {
          v14 = 134349056;
          v15 = WeakRetained;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "[%{public}p] VLF tiles are not available", (uint8_t *)&v14, 0xCu);
        }

        v12 = WeakRetained;
        v13 = 0;
      }
      objc_msgSend(v12, "setAreTilesAvailable:", v13);
      objc_msgSend(WeakRetained, "setPreviouslyCheckedCoordinate:", *(double *)(a1 + 40), *(double *)(a1 + 48));
    }
    objc_msgSend(WeakRetained, "setAvailabilityCheckInFlight:", 0);
  }

}

void sub_100536D40(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFTileObserver");
  v2 = (void *)qword_1014D28C0;
  qword_1014D28C0 = (uint64_t)v1;

}

void sub_100536F90(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100536FAC(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  _QWORD block[4];
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;

  v5 = a2;
  v6 = a3;
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "workerQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1005370B0;
  block[3] = &unk_1011BAA00;
  objc_copyWeak(&v15, a1 + 7);
  v11 = a1[5];
  v12 = v5;
  v13 = v6;
  v14 = a1[6];
  v8 = v6;
  v9 = v5;
  dispatch_async(v7, block);

  objc_destroyWeak(&v15);
}

void sub_1005370B0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  objc_msgSend(WeakRetained, "_handleResponseForTicket:mapItems:error:completion:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));

}

uint64_t sub_100537224(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

id sub_10053755C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_submitTicket:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

id sub_100537920()
{
  if (qword_1014D28D8 != -1)
    dispatch_once(&qword_1014D28D8, &stru_1011BAA48);
  return (id)qword_1014D28D0;
}

void sub_100538840(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "MapsVideoPlayerView");
  v2 = (void *)qword_1014D28D0;
  qword_1014D28D0 = (uint64_t)v1;

}

id sub_10053949C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "setImage:", a2);
}

id sub_10053A528()
{
  if (qword_1014D28E8 != -1)
    dispatch_once(&qword_1014D28E8, &stru_1011BAA90);
  return (id)qword_1014D28E0;
}

void sub_10053AF88(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "ARSessionDebugLogger");
  v2 = (void *)qword_1014D28E0;
  qword_1014D28E0 = (uint64_t)v1;

}

void sub_10053C100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10053C11C(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_didStopDownload");
    WeakRetained = v2;
  }

}

void sub_10053CB38(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_10053CB84(id *a1)
{
  void *v2;
  id v3;
  void *v4;
  id WeakRetained;

  +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 486, 112, 0);
  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "actionDelegate"));
  v3 = objc_loadWeakRetained(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "subscriptionInfo"));
  objc_msgSend(v2, "offlineMapDetailsActionSectionControllerDidSelectDownloadNowOnPairedDevice:", v4);

}

void sub_10053CC18(uint64_t a1)
{
  id *v1;
  void *v2;
  id v3;
  void *v4;
  id WeakRetained;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "actionDelegate"));
  v3 = objc_loadWeakRetained(v1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "subscriptionInfo"));
  objc_msgSend(v2, "offlineMapDetailsActionSectionControllerDidSelectRemoveFromPairedDevice:", v4);

}

void sub_10053CC90(id *a1)
{
  void *v2;
  id v3;
  void *v4;
  id WeakRetained;

  +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 484, 112, 0);
  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "actionDelegate"));
  v3 = objc_loadWeakRetained(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "subscriptionInfo"));
  objc_msgSend(v2, "offlineMapDetailsActionSectionControllerDidSelectAddToPairedDevice:", v4);

}

void sub_10053D650(id a1)
{
  MapsLightLevelController *v1;
  void *v2;

  v1 = -[MapsLightLevelController initWithWindowScene:]([MapsLightLevelController alloc], "initWithWindowScene:", 0);
  v2 = (void *)qword_1014D28F0;
  qword_1014D28F0 = (uint64_t)v1;

}

id sub_10053DB38(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint8_t v5[16];

  v2 = sub_1004317AC();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Thermal pressure updated", v5, 2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "setCurrentLightLevel:", objc_msgSend(*(id *)(a1 + 32), "_computedLightLevel"));
}

void sub_10053FAA0(id a1)
{
  UserProfileLinkOfflineMapsProvider *v1;
  void *v2;

  v1 = objc_alloc_init(UserProfileLinkOfflineMapsProvider);
  v2 = (void *)qword_1014D2900;
  qword_1014D2900 = (uint64_t)v1;

}

id sub_100541060(uint64_t a1)
{
  double v2;
  void *v3;

  v2 = *(double *)(a1 + 48);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v3, "setAlpha:", v2);

  return objc_msgSend(*(id *)(a1 + 40), "setFrame:", *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80));
}

id sub_1005410B0(uint64_t a1)
{
  void *v2;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setAlpha:", 1.0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "contentView"));
  objc_msgSend(v2, "setAlpha:", 1.0);

  objc_msgSend(*(id *)(a1 + 48), "removeFromSuperview");
  return objc_msgSend(*(id *)(a1 + 56), "completeTransition:", 1);
}

void sub_1005418A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1005418C4(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 32) + 136) ^ 1;
  return result;
}

void sub_1005418E4(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  char isKindOfClass;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "endWaypoint"));
  v4 = objc_opt_class(GEOComposedWaypointToRoute);
  isKindOfClass = objc_opt_isKindOfClass(v3, v4);

  if ((isKindOfClass & 1) != 0)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "endWaypoint"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "route"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "persistentData"));

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend(v8, "isAvailableForCurrentCountry") ^ 1;
  }

}

void sub_100541D2C(id a1, NSError *a2)
{
  NSError *v2;
  id v3;
  NSObject *v4;
  int v5;
  NSError *v6;

  v2 = a2;
  if (v2)
  {
    v3 = sub_100432EDC();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Error deleting recent: %@", (uint8_t *)&v5, 0xCu);
    }

  }
}

void sub_100541E48(id a1, NSError *a2)
{
  NSError *v2;
  id v3;
  NSObject *v4;
  int v5;
  NSError *v6;

  v2 = a2;
  if (v2)
  {
    v3 = sub_100432EDC();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Error deleting recents: %@", (uint8_t *)&v5, 0xCu);
    }

  }
}

void sub_1005424C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1005424E8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "clearSectionAtIndex:", *(_QWORD *)(a1 + 40));

}

void sub_100542A44(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100542A60(uint64_t a1, void *a2)
{
  id *v3;
  id WeakRetained;
  void (**v5)(id, uint64_t);

  v3 = (id *)(a1 + 40);
  v5 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  objc_msgSend(WeakRetained, "removeItemAtIndexPath:", *(_QWORD *)(a1 + 32));

  v5[2](v5, 1);
}

void sub_100542B78(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100542B94(uint64_t a1, uint64_t a2)
{
  id WeakRetained;

  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a2, 1);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "shareRowAtIndexPath:completion:", *(_QWORD *)(a1 + 32), &stru_1011BAC60);

}

void sub_100543540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100543564(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  NSObject *v9;
  id v10;
  _QWORD v11[4];
  NSObject *v12;
  id v13;
  uint8_t buf[4];
  id v15;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v8 = WeakRetained;
  if (WeakRetained)
  {
    if (!v5 || v6)
    {
      v10 = sub_1004326FC();
      v9 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v15 = v6;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "VehicleListVC - failed to get virtual garage with error: %@", buf, 0xCu);
      }
    }
    else
    {
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_1005436A0;
      v11[3] = &unk_1011AC8B0;
      v12 = WeakRetained;
      v13 = v5;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, v11);

      v9 = v12;
    }

  }
}

id sub_1005436A0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_consumeUpdatedGarage:", *(_QWORD *)(a1 + 40));
}

void sub_1005473AC(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "_consumeUpdatedGarage:", *(_QWORD *)(a1 + 32));
    WeakRetained = v3;
  }

}

void sub_100548120(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_10054813C(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
    objc_msgSend(v2, "unpinSelectedTransitLine");

    WeakRetained = v3;
  }

}

void sub_100548184(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
    objc_msgSend(v2, "pinSelectedTransitLine");

    WeakRetained = v3;
  }

}

void sub_1005481CC(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
    objc_msgSend(v2, "viewLineOnMap");

    WeakRetained = v3;
  }

}

void sub_100548214(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
    objc_msgSend(v2, "showDirectionsToSelectedTransitStop");

    WeakRetained = v3;
  }

}

void sub_10054825C(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
    objc_msgSend(v2, "showLineInfo");

    WeakRetained = v3;
  }

}

void sub_1005494F0(uint64_t a1, char a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  int v6;
  void *v7;

  if ((a2 & 1) == 0)
  {
    v3 = sub_100432EDC();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 288), "shortcut"));
      v6 = 138412290;
      v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to save shortcut: %@", (uint8_t *)&v6, 0xCu);

    }
  }
}

void sub_100549E40(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_100549E70(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_openContact");
    WeakRetained = v2;
  }

}

void sub_100549EA0(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_refineAction");
    WeakRetained = v2;
  }

}

void sub_100549ED0(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_removeAction");
    WeakRetained = v2;
  }

}

void sub_10054A4D0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_10054A4FC(uint64_t a1, char a2)
{
  id *v3;
  id WeakRetained;
  void *v5;
  id v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  char v10;

  v3 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "sessionController"));
  v6 = objc_loadWeakRetained(v3);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "shortcut"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10054A5E4;
  v8[3] = &unk_1011AD388;
  v10 = a2;
  objc_copyWeak(&v9, v3);
  objc_msgSend(v5, "createOrUpdateMeCardWithFavorite:completion:", v7, v8);

  objc_destroyWeak(&v9);
}

void sub_10054A5D0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10054A5E4(uint64_t a1)
{
  _QWORD block[4];
  id v2;

  if (*(_BYTE *)(a1 + 40))
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10054A664;
    block[3] = &unk_1011AD260;
    objc_copyWeak(&v2, (id *)(a1 + 32));
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
    objc_destroyWeak(&v2);
  }
}

void sub_10054A664(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_close");

}

void sub_10054A690(uint64_t a1, int a2)
{
  id WeakRetained;

  if (a2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    objc_msgSend(WeakRetained, "_close");

  }
}

void sub_10054B788(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_10054B7A4(id *a1, char a2)
{
  _QWORD v3[4];
  id v4;
  id v5;
  id v6;
  char v7;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10054B84C;
  v3[3] = &unk_1011B5DD0;
  v7 = a2;
  objc_copyWeak(&v6, a1 + 6);
  v4 = a1[4];
  v5 = a1[5];
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v3);

  objc_destroyWeak(&v6);
}

void sub_10054B84C(uint64_t a1)
{
  int v2;
  void *v3;
  id WeakRetained;

  v2 = *(unsigned __int8 *)(a1 + 56);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (v2)
  {
    objc_msgSend(WeakRetained, "_updateWithType:", objc_msgSend(*(id *)(a1 + 32), "type"));
  }
  else
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "actionsTableView"));
    objc_msgSend(v3, "deselectRowAtIndexPath:animated:", *(_QWORD *)(a1 + 40), 1);

  }
}

void sub_10054BB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10054BBB8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "_removeContact:fromSection:", *(_QWORD *)(a1 + 32), objc_msgSend(*(id *)(a1 + 40), "section"));

}

void sub_10054C00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10054C028(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_openContact");

}

id sub_10054C3AC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_save");
}

void sub_10054CCB4(uint64_t a1)
{
  double v2;
  id v3;
  id v4;
  double v5;
  void *v6;
  id v7;

  if (*(_BYTE *)(a1 + 40))
  {
    objc_msgSend(*(id *)(a1 + 32), "layoutProgress");
    if (v2 > 0.0)
      v3 = sub_1006E68C4();
    else
      v3 = sub_1006E6850();
    v7 = (id)objc_claimAutoreleasedReturnValue(v3);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "setOverlayColor:", v7);
  }
  else
  {
    v4 = sub_1006E66E4();
    v7 = (id)objc_claimAutoreleasedReturnValue(v4);
    objc_msgSend(*(id *)(a1 + 32), "layoutProgress");
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "colorWithAlphaComponent:", v5 * 0.239999995));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "setOverlayColor:", v6);

  }
}

void sub_10054CF34(uint64_t a1)
{
  void *v2;
  void *v3;
  double v4;
  void *v5;
  void *v6;
  id v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "updatedLaneGuidanceHeight:", *(double *)(a1 + 40));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "laneGuidanceInfo"));
  if (v3)
    v4 = 1.0;
  else
    v4 = 0.0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "laneGuidanceView"));
  objc_msgSend(v5, "setAlpha:", v4);

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "superview"));
  objc_msgSend(v6, "layoutIfNeeded");

}

void sub_10054D2B8(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[RideBookingAccessProxy coordinator](RideBookingAccessProxy, "coordinator"));
  objc_msgSend(v1, "updateRideStatusMap");

}

void sub_10054D4E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10054D514(id *a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id v7;
  id v8;
  id v9;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10054D5DC;
  v5[3] = &unk_1011B3550;
  objc_copyWeak(&v9, a1 + 6);
  v6 = a1[4];
  v7 = v3;
  v8 = a1[5];
  v4 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v5);

  objc_destroyWeak(&v9);
}

void sub_10054D5DC(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  uint64_t Log;
  NSObject *v5;
  int v6;
  char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "_updateAnalyticsWithRideStatus:feedbackError:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  else
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingRideStatusObserverProxy");
    v5 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = 136446722;
      v7 = "RideBookingRideStatusObserverProxy.m";
      v8 = 1026;
      v9 = 54;
      v10 = 2082;
      v11 = "-[RideBookingRideStatusObserverProxy sendFeedbackForRideStatus:feedbackRating:feedbackTip:completion:]_block_invoke_2";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", (uint8_t *)&v6, 0x1Cu);
    }

  }
}

void sub_10054D8C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10054D8EC(id *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10054DA00;
  v14[3] = &unk_1011BAD10;
  objc_copyWeak(&v20, a1 + 6);
  v15 = a1[4];
  v16 = v9;
  v10 = a1[5];
  v18 = v8;
  v19 = v10;
  v17 = v7;
  v11 = v8;
  v12 = v7;
  v13 = v9;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v14);

  objc_destroyWeak(&v20);
}

void sub_10054DA00(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  uint64_t Log;
  NSObject *v5;
  int v6;
  char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "_updateAnalyticsWithRideStatus:cancelError:handling:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 0);
    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
  }
  else
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingRideStatusObserverProxy");
    v5 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = 136446722;
      v7 = "RideBookingRideStatusObserverProxy.m";
      v8 = 1026;
      v9 = 68;
      v10 = 2082;
      v11 = "-[RideBookingRideStatusObserverProxy checkIfCanCancelRideWithRideStatus:completion:]_block_invoke_2";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", (uint8_t *)&v6, 0x1Cu);
    }

  }
}

void sub_10054DCEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10054DD18(id *a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id v7;
  id v8;
  id v9;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10054DDE0;
  v5[3] = &unk_1011B3550;
  objc_copyWeak(&v9, a1 + 6);
  v6 = a1[4];
  v7 = v3;
  v8 = a1[5];
  v4 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v5);

  objc_destroyWeak(&v9);
}

void sub_10054DDE0(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  uint64_t Log;
  NSObject *v5;
  int v6;
  char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "_updateAnalyticsWithRideStatus:cancelError:handling:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 1);
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  else
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingRideStatusObserverProxy");
    v5 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = 136446722;
      v7 = "RideBookingRideStatusObserverProxy.m";
      v8 = 1026;
      v9 = 82;
      v10 = 2082;
      v11 = "-[RideBookingRideStatusObserverProxy cancelRideWithRideStatus:completion:]_block_invoke_2";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", (uint8_t *)&v6, 0x1Cu);
    }

  }
}

void sub_10054DFAC(uint64_t a1)
{
  id *WeakRetained;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  NSObject *v8;
  uint64_t Log;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint8_t v14[128];
  uint8_t buf[4];
  char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  const char *v20;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allValues", 0));
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v11;
      do
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          if (*(_QWORD *)v11 != v6)
            objc_enumerationMutation(v3);
          objc_msgSend(WeakRetained, "_updateAnalyticsWithRideStatus:", *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)i));
        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      }
      while (v5);
    }

    v8 = objc_loadWeakRetained(WeakRetained + 1);
    -[NSObject rideStatusMapDidChange:](v8, "rideStatusMapDidChange:", *(_QWORD *)(a1 + 32));
  }
  else
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingRideStatusObserverProxy");
    v8 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v16 = "RideBookingRideStatusObserverProxy.m";
      v17 = 1026;
      v18 = 95;
      v19 = 2082;
      v20 = "-[RideBookingRideStatusObserverProxy rideStatusMapDidChange:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_10054E918(uint64_t a1)
{
  void *v2;
  unsigned __int8 v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MNNavigationService sharedService](MNNavigationService, "sharedService"));
  v3 = objc_msgSend(v2, "isInNavigatingState");

  if ((v3 & 1) == 0)
    objc_msgSend(*(id *)(a1 + 32), "setHidden:", 1);
}

void sub_10054F264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10054F27C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10054F28C(uint64_t a1)
{

}

void sub_10054F294(uint64_t a1, int a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(void **)(v3 + 40);
  if (a2)
  {
    if (!v4)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[LoadingIndicatorController sharedController](LoadingIndicatorController, "sharedController"));
      v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "beginShowingLoadingIndicator"));
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v7 = *(void **)(v6 + 40);
      *(_QWORD *)(v6 + 40) = v5;

    }
  }
  else if (v4)
  {
    *(_QWORD *)(v3 + 40) = 0;

  }
}

void sub_10054F390(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  _QWORD block[5];

  v2 = a2 == 2;
  v3 = *(_QWORD *)(a1 + 32);
  if (*(unsigned __int8 *)(v3 + 128) != v2)
  {
    *(_BYTE *)(v3 + 128) = v2;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10054F410;
    block[3] = &unk_1011AC860;
    block[4] = *(_QWORD *)(a1 + 32);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  }
}

void sub_10054F410(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "postNotificationName:object:", CFSTR("MapsApplicationCoreRoutineEnabledStateChangedNotification"), *(_QWORD *)(a1 + 32));

}

id sub_10054F5DC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_performPostExtendedLaunchInitialization");
}

void sub_10054F798(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 32));
  _Unwind_Resume(a1);
}

void sub_10054F7B8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "createSubmissionManagerIfNeeded");

}

void sub_100551ECC(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_updateSecureAppAssertion");
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "appCoordinator"));
  objc_msgSend(v2, "hideFullscreenDirectionsList");

}

void sub_100551F10(uint64_t a1)
{
  dispatch_time_t v2;
  _QWORD block[4];
  id v4;

  v2 = dispatch_time(0, 250000000);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100551F9C;
  block[3] = &unk_1011ADA00;
  v4 = *(id *)(a1 + 32);
  dispatch_after(v2, (dispatch_queue_t)&_dispatch_main_q, block);

}

uint64_t sub_100551F9C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100552110(id a1, BOOL a2)
{
  _BOOL4 v2;
  uint64_t Log;
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  NSObject *v8;
  os_log_type_t v9;
  __int16 v10;
  __int16 v11;

  v2 = a2;
  Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "MapsAppDelegate");
  v4 = objc_claimAutoreleasedReturnValue(Log);
  v5 = v4;
  if (v2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v11 = 0;
      v6 = "Acquired navigation status bar assertion";
      v7 = (uint8_t *)&v11;
      v8 = v5;
      v9 = OS_LOG_TYPE_INFO;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v8, v9, v6, v7, 2u);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v10 = 0;
    v6 = "Failed acquire to navigation status bar assertion";
    v7 = (uint8_t *)&v10;
    v8 = v5;
    v9 = OS_LOG_TYPE_ERROR;
    goto LABEL_6;
  }

}

void sub_1005521C0(id a1)
{
  uint64_t Log;
  NSObject *v2;
  uint8_t v3[16];

  Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "MapsAppDelegate");
  v2 = objc_claimAutoreleasedReturnValue(Log);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Navigation status bar assertion invalidated", v3, 2u);
  }

}

void sub_10055242C(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "idleTimerController"));
  objc_msgSend(v1, "setDesiredIdleTimerState:forReason:", 0, 1);

}

void sub_100552D5C(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  id v4;
  uint64_t Log;
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint32_t v11;
  int v12;
  NSError *v13;

  v2 = a2;
  v3 = v2;
  if (v2)
  {
    v4 = -[NSError code](v2, "code");
    Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "MapsAppDelegate");
    v6 = objc_claimAutoreleasedReturnValue(Log);
    v7 = v6;
    if (v4 == (id)5)
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        LOWORD(v12) = 0;
        v8 = "Invalidated secure app assertion for Maps navigation";
        v9 = v7;
        v10 = OS_LOG_TYPE_INFO;
        v11 = 2;
LABEL_7:
        _os_log_impl((void *)&_mh_execute_header, v9, v10, v8, (uint8_t *)&v12, v11);
      }
    }
    else if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v12 = 138412290;
      v13 = v3;
      v8 = "Failed to acquire secure app assertion for Maps navigation: %@";
      v9 = v7;
      v10 = OS_LOG_TYPE_ERROR;
      v11 = 12;
      goto LABEL_7;
    }

  }
}

void sub_100552FA8(id a1)
{
  id v1;
  NSObject *v2;
  uint8_t v3[16];

  if (!+[UIApplication _maps_isAnySceneConnectedForRole:](UIApplication, "_maps_isAnySceneConnectedForRole:", _UIWindowSceneSessionRoleCarPlay))
  {
    v1 = sub_1004338EC();
    v2 = objc_claimAutoreleasedReturnValue(v1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Undimming the screen (Transit)", v3, 2u);
    }

    SBSUndimScreen();
  }
}

void sub_100553310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  objc_destroyWeak(v20);
  objc_destroyWeak(&a20);
  _Unwind_Resume(a1);
}

void sub_100553360(uint64_t a1, int a2)
{
  void *v3;
  unsigned int v4;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[CarDisplayController sharedInstance](CarDisplayController, "sharedInstance"));
  v4 = objc_msgSend(v3, "isCurrentlyConnectedToAnyCarScene");

  objc_msgSend(WeakRetained, "setDesiredIdleTimerState:forReason:", a2 & (v4 ^ 1), 2);
}

void sub_1005533D0(id a1)
{
  id v1;
  NSObject *v2;
  uint8_t v3[16];

  if (!+[UIApplication _maps_isAnySceneConnectedForRole:](UIApplication, "_maps_isAnySceneConnectedForRole:", _UIWindowSceneSessionRoleCarPlay))
  {
    v1 = sub_1004338EC();
    v2 = objc_claimAutoreleasedReturnValue(v1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Undimming the screen", v3, 2u);
    }

    SBSUndimScreen();
  }
}

void sub_100553454(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_updateSecureAppAssertion");

}

id sub_100553A80(uint64_t a1)
{
  uint64_t Log;
  NSObject *v3;
  void *v4;
  int v6;
  void *v7;

  Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "MapsAppDelegate");
  v3 = objc_claimAutoreleasedReturnValue(Log);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "name"));
    v6 = 138412290;
    v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Removing priority assertion %@", (uint8_t *)&v6, 0xCu);

  }
  return objc_msgSend(*(id *)(a1 + 32), "invalidate");
}

void sub_1005540D8(id *a1)
{
  void *v2;
  void *v3;
  double Double;
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *i;
  double v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  void *j;
  void *v18;
  MapsRadarDraft *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  NSObject *v25;
  id v26;
  void *v27;
  objc_class *v28;
  NSString *v29;
  void *v30;
  void *v31;
  void *v32;
  __CFString *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint8_t buf[4];
  __CFString *v47;
  _BYTE v48[128];
  _BYTE v49[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "userInfo"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", MNErrorInterruptionDatesKey));

  Double = GEOConfigGetDouble(MapsConfig_NavigationNotifyInterruptionThreshold, off_1014B39D8);
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v42, v49, 16);
  v7 = v5;
  if (!v6)
    goto LABEL_28;
  v8 = v6;
  v9 = *(_QWORD *)v43;
  while (2)
  {
    for (i = 0; i != v8; i = (char *)i + 1)
    {
      if (*(_QWORD *)v43 != v9)
        objc_enumerationMutation(v5);
      objc_msgSend(*(id *)(*((_QWORD *)&v42 + 1) + 8 * (_QWORD)i), "timeIntervalSinceNow");
      if (Double > -v11)
      {

        v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString stringWithString:](NSMutableString, "stringWithString:", CFSTR("navd crashed while navigating:\n")));
        v12 = objc_alloc_init((Class)NSDateFormatter);
        objc_msgSend(v12, "setDateFormat:", CFSTR("YYYY-MM-dd HH:mm:ssZ"));
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v13 = v5;
        v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v38, v48, 16);
        if (v14)
        {
          v15 = v14;
          v16 = *(_QWORD *)v39;
          do
          {
            for (j = 0; j != v15; j = (char *)j + 1)
            {
              if (*(_QWORD *)v39 != v16)
                objc_enumerationMutation(v13);
              v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "stringFromDate:", *(_QWORD *)(*((_QWORD *)&v38 + 1) + 8 * (_QWORD)j)));
              objc_msgSend(v7, "appendFormat:", CFSTR("• %@\n"), v18);

            }
            v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v38, v48, 16);
          }
          while (v15);
        }

        v19 = objc_opt_new(MapsRadarDraft);
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "hardwareModel"));
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "buildVersion"));
        v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("navd interruptions detected (%@/%@)"), v20, v21));
        -[MapsRadarDraft setTitle:](v19, "setTitle:", v22);

        -[MapsRadarDraft setDescriptionText:](v19, "setDescriptionText:", v7);
        -[MapsRadarDraft setClassification:](v19, "setClassification:", 2);
        -[MapsRadarDraft setReproducibility:](v19, "setReproducibility:", 5);
        v23 = (void *)objc_claimAutoreleasedReturnValue(+[MapsRadarComponent mapsNavFrameworkComponent](MapsRadarComponent, "mapsNavFrameworkComponent"));
        -[MapsRadarDraft setComponent:](v19, "setComponent:", v23);

        v24 = sub_100431C0C();
        v25 = objc_claimAutoreleasedReturnValue(v24);
        if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          goto LABEL_27;
        v26 = a1[5];
        v27 = v26;
        if (!v26)
        {
          v33 = CFSTR("<nil>");
          goto LABEL_26;
        }
        v28 = (objc_class *)objc_opt_class(v26);
        v29 = NSStringFromClass(v28);
        v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
        if ((objc_opt_respondsToSelector(v27, "accessibilityIdentifier") & 1) != 0)
        {
          v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "performSelector:", "accessibilityIdentifier"));
          v32 = v31;
          if (v31 && !objc_msgSend(v31, "isEqualToString:", v30))
          {
            v33 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v30, v27, v32));

            goto LABEL_24;
          }

        }
        v33 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v30, v27));
LABEL_24:

LABEL_26:
        *(_DWORD *)buf = 138543362;
        v47 = v33;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "[%{public}@] Launching TTR for nav service failure", buf, 0xCu);

LABEL_27:
        v34 = (void *)objc_claimAutoreleasedReturnValue(+[MapsRadarController sharedInstance](MapsRadarController, "sharedInstance"));
        v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "userInfo"));
        v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "objectForKey:", MNErrorInternalDescriptionKey));
        v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "chromeViewController"));
        objc_msgSend(v34, "launchTTRWithRadar:promptTitle:fromViewController:", v19, v36, v37);

        goto LABEL_28;
      }
    }
    v8 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v42, v49, 16);
    if (v8)
      continue;
    break;
  }
  v7 = v5;
LABEL_28:

}

id sub_1005548E4()
{
  if (qword_1014D2920 != -1)
    dispatch_once(&qword_1014D2920, &stru_1011BAEF8);
  return (id)qword_1014D2918;
}

void sub_100554F48(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  unsigned __int8 v7;
  void *v8;
  _OWORD v9[3];
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 72);
  *(_QWORD *)(v4 + 72) = 0;

  v14 = 0;
  v12 = 0u;
  v13 = 0u;
  v11 = 0u;
  +[StartNavigationDetailsBuilder defaultNavigationDetailsOptions](StartNavigationDetailsBuilder, "defaultNavigationDetailsOptions");
  if (objc_msgSend(*(id *)(a1 + 40), "originIsWatch"))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[CarDisplayController sharedInstance](CarDisplayController, "sharedInstance"));
    v7 = objc_msgSend(v6, "isCurrentlyConnectedToAnyCarScene");

    if ((v7 & 1) == 0)
      *((_QWORD *)&v13 + 1) = 0;
  }
  v8 = *(void **)(a1 + 48);
  v9[0] = v11;
  v9[1] = v12;
  v9[2] = v13;
  v10 = v14;
  objc_msgSend(v8, "startNavigationWithRouteCollection:navigationDetailsOptions:", v3, v9);

}

void sub_100555014(id a1, NSError *a2, GEODirectionsError *a3)
{
  NSError *v4;
  GEODirectionsError *v5;
  id v6;
  NSObject *v7;
  void *v8;
  int v9;
  NSError *v10;
  __int16 v11;
  GEODirectionsError *v12;

  v4 = a2;
  v5 = a3;
  v6 = sub_1005548E4();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    v9 = 138412546;
    v10 = v4;
    v11 = 2112;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to convert provided persistent data to navigable route: %@ %@", (uint8_t *)&v9, 0x16u);
  }

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[IPCServer sharedServer](IPCServer, "sharedServer"));
  objc_msgSend(v8, "navigationStateDidChangeTo:reason:", 2, CFSTR("Unable to create navigable route from provided persistent data"));

}

void sub_100555108(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  RouteCollection *v5;
  void *v6;
  RouteCollection *v7;
  uint8_t v8[16];
  uint64_t v9;

  v2 = sub_1005548E4();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Starting navigation with recreated navigable route", v8, 2u);
  }

  v4 = *(_QWORD *)(a1 + 40);
  v5 = [RouteCollection alloc];
  v9 = *(_QWORD *)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v9, 1));
  v7 = -[RouteCollection initWithRoutes:currentRouteIndex:](v5, "initWithRoutes:currentRouteIndex:", v6, 0);
  (*(void (**)(uint64_t, RouteCollection *))(v4 + 16))(v4, v7);

}

id sub_100555208(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "uniqueRouteID"));
  v4 = objc_msgSend(v3, "isEqual:", *(_QWORD *)(a1 + 32));

  return v4;
}

void sub_100555B9C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100555C2C;
  v6[3] = &unk_1011ACAD0;
  v4 = *(id *)(a1 + 32);
  v7 = v3;
  v8 = v4;
  v5 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);

}

uint64_t sub_100555C2C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, BOOL))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), objc_msgSend(*(id *)(a1 + 32), "authorizationStatus") == 0);
}

void sub_100555CEC(uint64_t a1, void *a2)
{
  id v3;
  _QWORD v4[4];
  id v5;
  id v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100555D80;
  v4[3] = &unk_1011AE240;
  v5 = a2;
  v6 = *(id *)(a1 + 32);
  v3 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v4);

}

void sub_100555D80(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v5[4];
  id v6;
  _QWORD v7[4];
  id v8;

  if (objc_msgSend(*(id *)(a1 + 32), "authorizationStatus"))
  {
    +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 319, 29, 0);
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", UIApplicationOpenNotificationSettingsURLString));
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100555F54;
    v5[3] = &unk_1011B1B90;
    v6 = *(id *)(a1 + 40);
    objc_msgSend(v3, "openURL:options:completionHandler:", v2, &__NSDictionary0__struct, v5);

  }
  else
  {
    +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 320, 29, 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[UNUserNotificationCenter currentNotificationCenter](UNUserNotificationCenter, "currentNotificationCenter"));
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100555EE0;
    v7[3] = &unk_1011BA670;
    v8 = *(id *)(a1 + 40);
    objc_msgSend(v4, "requestAuthorizationWithOptions:completionHandler:", 14, v7);

    v2 = v8;
  }

}

void sub_100555EE0(uint64_t a1)
{
  _QWORD block[4];
  id v2;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100555F48;
  block[3] = &unk_1011ADA00;
  v2 = *(id *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

uint64_t sub_100555F48(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100555F54(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100556328(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "MapsAppDelegate");
  v2 = (void *)qword_1014D2918;
  qword_1014D2918 = (uint64_t)v1;

}

void sub_100557B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *a10, id *location)
{
  uint64_t v11;

  objc_destroyWeak((id *)(v11 - 168));
  objc_destroyWeak((id *)(v11 - 160));
  _Unwind_Resume(a1);
}

void sub_100557B54(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  id v11;

  v3 = a2;
  v4 = sub_10043268C();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v8 = 138412546;
    v9 = v6;
    v10 = 2112;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "User selected to pair accessory (%@) to vehicle: %@", (uint8_t *)&v8, 0x16u);
  }

  +[VehicleDisambiguator pairAccessory:withVehicle:](VehicleDisambiguator, "pairAccessory:withVehicle:", *(_QWORD *)(a1 + 32), v3);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[VGVirtualGarageService sharedService](VGVirtualGarageService, "sharedService"));
  objc_msgSend(v7, "virtualGarageSelectVehicle:", v3);

}

NSString *__cdecl sub_100557C4C(id a1, NSArray *a2)
{
  NSArray *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = a2;
  if (-[NSArray count](v2, "count"))
  {
    v3 = sub_10039DCD4(v2, &stru_1011BAFA0);
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "sortedArrayUsingComparator:", &stru_1011BAFE0));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "componentsJoinedByString:", CFSTR("_")));

  }
  else
  {
    v6 = 0;
  }

  return (NSString *)v6;
}

NSString *__cdecl sub_100557CD4(id a1, VGVehicle *a2, unint64_t a3)
{
  VGVehicle *v3;
  id v4;
  uint64_t v5;
  void *v6;
  const __CFString *v7;
  uint64_t v8;
  void *v9;
  const __CFString *v10;
  uint64_t v11;
  void *v12;
  const __CFString *v13;
  uint64_t v14;
  void *v15;
  const __CFString *v16;
  __CFString *v17;
  const __CFString *v18;
  id v19;

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)NSMutableString), "initWithString:", CFSTR("_disambiguation_"));
  v5 = objc_claimAutoreleasedReturnValue(-[VGVehicle pairedAppIdentifier](v3, "pairedAppIdentifier"));
  v6 = (void *)v5;
  if (v5)
    v7 = (const __CFString *)v5;
  else
    v7 = &stru_1011EB268;
  objc_msgSend(v4, "appendString:", v7);

  v8 = objc_claimAutoreleasedReturnValue(-[VGVehicle displayName](v3, "displayName"));
  v9 = (void *)v8;
  if (v8)
    v10 = (const __CFString *)v8;
  else
    v10 = &stru_1011EB268;
  objc_msgSend(v4, "appendString:", v10);

  v11 = objc_claimAutoreleasedReturnValue(-[VGVehicle year](v3, "year"));
  v12 = (void *)v11;
  if (v11)
    v13 = (const __CFString *)v11;
  else
    v13 = &stru_1011EB268;
  objc_msgSend(v4, "appendString:", v13);

  v14 = objc_claimAutoreleasedReturnValue(-[VGVehicle model](v3, "model"));
  v15 = (void *)v14;
  if (v14)
    v16 = (const __CFString *)v14;
  else
    v16 = &stru_1011EB268;
  objc_msgSend(v4, "appendString:", v16);

  v17 = (__CFString *)objc_claimAutoreleasedReturnValue(-[VGVehicle manufacturer](v3, "manufacturer"));
  if (v17)
    v18 = v17;
  else
    v18 = &stru_1011EB268;
  objc_msgSend(v4, "appendString:", v18);

  v19 = objc_msgSend(v4, "copy");
  return (NSString *)v19;
}

int64_t sub_100557DF0(id a1, NSString *a2, NSString *a3)
{
  return -[NSString compare:](a2, "compare:", a3);
}

void sub_100557DF8(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  NSObject *v9;
  int v10;
  void *v11;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    *((_BYTE *)WeakRetained + 8) = 1;
    v6 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v8 = sub_10043268C();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      v10 = 138412290;
      v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Marking vehicle combination as viewed: %@", (uint8_t *)&v10, 0xCu);
    }

    sub_100BA106C(v7);
  }

}

void sub_100557EEC(id *a1, void *a2)
{
  id v3;
  id v4;
  _QWORD block[4];
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;

  v3 = a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100557FCC;
  block[3] = &unk_1011BB110;
  objc_copyWeak(&v10, a1 + 7);
  v8 = a1[5];
  v6 = v3;
  v7 = a1[4];
  v9 = a1[6];
  v4 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  objc_destroyWeak(&v10);
}

void sub_100557FCC(id *a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  _QWORD v13[4];
  id v14;
  id v15;

  WeakRetained = objc_loadWeakRetained(a1 + 8);
  if (WeakRetained)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localizedStringForKey:value:table:", CFSTR("Yes (Pair) [CarPlay]"), CFSTR("localized string not found"), 0));
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100558164;
    v13[3] = &unk_1011ACAD0;
    v15 = a1[6];
    v14 = a1[4];
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[MapsInterruptionAction actionWithTitle:cancels:handler:](MapsInterruptionAction, "actionWithTitle:cancels:handler:", v4, 0, v13));

    v6 = (void *)objc_claimAutoreleasedReturnValue(+[CarDisplayController sharedInstance](CarDisplayController, "sharedInstance"));
    v7 = sub_100B3AA00(a1[5], a1[4], v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100558174;
    v10[3] = &unk_1011BB030;
    v12 = a1[7];
    v11 = a1[4];
    v9 = objc_msgSend(v6, "presentInterruptionOfKind:userInfo:completionHandler:", 19, v8, v10);

  }
}

uint64_t sub_100558164(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_100558174(uint64_t a1, uint64_t a2)
{
  id v3;
  NSObject *v4;
  const char *v5;
  NSObject *v6;
  os_log_type_t v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t *v11;
  id v12;
  NSObject *v13;
  id v14;
  uint8_t v15[8];
  uint64_t v16;
  uint64_t v17;

  switch(a2)
  {
    case 1:
      v8 = sub_10043268C();
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v15 = 0;
      }

      v10 = *(_QWORD *)(a1 + 40);
      v16 = *(_QWORD *)(a1 + 32);
      v11 = &v16;
      goto LABEL_12;
    case 0:
      v12 = sub_10043268C();
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v15 = 0;
      }

      v10 = *(_QWORD *)(a1 + 40);
      v17 = *(_QWORD *)(a1 + 32);
      v11 = &v17;
LABEL_12:
      v4 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v11, 1));
      (*(void (**)(uint64_t, NSObject *))(v10 + 16))(v10, v4);
      break;
    case -1:
      v3 = sub_10043268C();
      v4 = objc_claimAutoreleasedReturnValue(v3);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v15 = 0;
        v5 = "Popup was dismissed.";
        v6 = v4;
        v7 = OS_LOG_TYPE_INFO;
LABEL_15:
        _os_log_impl((void *)&_mh_execute_header, v6, v7, v5, v15, 2u);
      }
      break;
    default:
      v14 = sub_10043268C();
      v4 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v15 = 0;
        v5 = "Received an unsupported button index.";
        v6 = v4;
        v7 = OS_LOG_TYPE_ERROR;
        goto LABEL_15;
      }
      break;
  }

}

void sub_100558330(id *a1, void *a2)
{
  id v3;
  id v4;
  _QWORD block[4];
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;

  v3 = a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10055840C;
  block[3] = &unk_1011BB110;
  objc_copyWeak(&v10, a1 + 7);
  v6 = a1[4];
  v7 = v3;
  v8 = a1[5];
  v9 = a1[6];
  v4 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  objc_destroyWeak(&v10);
}

void sub_10055840C(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;
  id v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[CarDisplayController sharedInstance](CarDisplayController, "sharedInstance"));
    v4 = sub_100B3AD78(*(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10055850C;
    v7[3] = &unk_1011BB0E8;
    v10 = *(id *)(a1 + 48);
    v8 = *(id *)(a1 + 40);
    v11 = *(id *)(a1 + 56);
    v9 = WeakRetained;
    v6 = objc_msgSend(v3, "presentInterruptionOfKind:userInfo:completionHandler:", 20, v5, v7);

  }
}

void sub_10055850C(uint64_t a1, uint64_t a2)
{
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  void *j;
  NSObject *v26;
  _QWORD *v27;
  void *v28;
  id v29;
  void *v30;
  uint64_t v31;
  _QWORD v32[4];
  id v33;
  NSObject *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _QWORD v39[5];
  id v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint8_t buf[16];
  _BYTE v46[128];
  _BYTE v47[128];

  if (a2 == -1 || ((*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))(), a2))
  {
    v4 = sub_10043268C();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "User chose to pick from multiple vehicles. Will show options.", buf, 2u);
    }

    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "localizedStringForKey:value:table:", CFSTR("[VirtualGarage] My Vehicles"), CFSTR("localized string not found"), 0));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", v7, 0, 0));

    v30 = v8;
    objc_msgSend(v8, "setModalPresentationStyle:", 5);
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", (char *)objc_msgSend(*(id *)(a1 + 32), "count") + 1));
    v41 = 0u;
    v42 = 0u;
    v43 = 0u;
    v44 = 0u;
    v31 = a1;
    v10 = *(id *)(a1 + 32);
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v41, v47, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v42;
      do
      {
        for (i = 0; i != v12; i = (char *)i + 1)
        {
          if (*(_QWORD *)v42 != v13)
            objc_enumerationMutation(v10);
          v15 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * (_QWORD)i);
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "displayName"));
          v39[0] = _NSConcreteStackBlock;
          v39[1] = 3221225472;
          v39[2] = sub_100558988;
          v39[3] = &unk_1011BB080;
          v39[4] = v15;
          v40 = *(id *)(a1 + 56);
          v17 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v16, 0, v39));

          objc_msgSend(v9, "addObject:", v17);
        }
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v41, v47, 16);
      }
      while (v12);
    }

    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "localizedStringForKey:value:table:", CFSTR("Dismiss [CarPlay]"), CFSTR("localized string not found"), 0));
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v19, 1, &stru_1011BB0A0));

    objc_msgSend(v9, "addObject:", v20);
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v21 = v9;
    v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v35, v46, 16);
    if (v22)
    {
      v23 = v22;
      v24 = *(_QWORD *)v36;
      do
      {
        for (j = 0; j != v23; j = (char *)j + 1)
        {
          if (*(_QWORD *)v36 != v24)
            objc_enumerationMutation(v21);
          objc_msgSend(v30, "addAction:", *(_QWORD *)(*((_QWORD *)&v35 + 1) + 8 * (_QWORD)j));
        }
        v23 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v35, v46, 16);
      }
      while (v23);
    }

    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    v32[2] = sub_100558A9C;
    v32[3] = &unk_1011AC8B0;
    v33 = *(id *)(v31 + 40);
    v26 = v30;
    v34 = v26;
    v27 = objc_retainBlock(v32);
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v31 + 40), "presentedViewController"));

    if (v28)
      objc_msgSend(*(id *)(v31 + 40), "dismissViewControllerAnimated:completion:", 1, v27);
    else
      ((void (*)(_QWORD *))v27[2])(v27);

  }
  else
  {
    v29 = sub_10043268C();
    v26 = objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "User dismissed multiple vehicle disambiguation popup.", buf, 2u);
    }
  }

}

uint64_t sub_100558988(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  int v6;
  uint64_t v7;

  v2 = sub_10043268C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v6 = 138412290;
    v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "User selected to pair the CarPlay accessory with vehicle: %@", (uint8_t *)&v6, 0xCu);
  }

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100558A38(id a1, UIAlertAction *a2)
{
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = sub_10043268C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "User dismissed vehicle picker.", v4, 2u);
  }

}

void sub_100558A9C(uint64_t a1)
{
  _QWORD v2[4];
  id v3;
  id v4;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100558B24;
  v2[3] = &unk_1011AC8B0;
  v3 = *(id *)(a1 + 32);
  v4 = *(id *)(a1 + 40);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v2);

}

id sub_100558B24(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "presentViewController:animated:completion:", *(_QWORD *)(a1 + 40), 1, &stru_1011BB0C0);
}

void sub_100558B3C(id a1)
{
  id v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = sub_10043268C();
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Presented vehicle picker to user to select a vehicle to pair with.", v3, 2u);
  }

}

void sub_100558BA0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint32_t v12;
  void *v13;
  id v14;
  id v15;
  NSObject *v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  BOOL v21;
  id v22;
  _BOOL4 v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  NSObject *v28;
  void *v29;
  float v30;
  float v31;
  id v32;
  NSObject *v33;
  _BOOL4 v34;
  uint64_t *v35;
  id v36;
  void *v37;
  void *v38;
  id v39;
  id v40;
  NSObject *v41;
  NSObject *v42;
  NSObject *v43;
  void *v44;
  __CFString *v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint8_t buf[4];
  id v50;
  __int16 v51;
  void *v52;

  v5 = a2;
  v6 = a3;
  if (!v6)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "vehicles"));
    v14 = objc_msgSend(v13, "count");

    if (!v14)
    {
      v17 = sub_10043268C();
      v8 = objc_claimAutoreleasedReturnValue(v17);
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        goto LABEL_44;
      *(_WORD *)buf = 0;
      v9 = "Garage doesn't have any vehicles to pair, aborting.";
      v10 = v8;
      v11 = OS_LOG_TYPE_INFO;
      v12 = 2;
      goto LABEL_4;
    }
    if (+[VehicleDisambiguator isAccessory:alreadyPairedWithVehicleInGarage:](VehicleDisambiguator, "isAccessory:alreadyPairedWithVehicleInGarage:", *(_QWORD *)(a1 + 32), v5))
    {
      v15 = sub_10043268C();
      v8 = objc_claimAutoreleasedReturnValue(v15);
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        goto LABEL_44;
      v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
      *(_DWORD *)buf = 138412290;
      v50 = v16;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "The current accessory (%@) is already paired with a vehicle in the garage.", buf, 0xCu);
LABEL_43:

      goto LABEL_44;
    }
    v18 = *(_QWORD *)(a1 + 40);
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "vehicles"));
    v20 = (*(uint64_t (**)(uint64_t, void *))(v18 + 16))(v18, v19);
    v8 = objc_claimAutoreleasedReturnValue(v20);

    v21 = sub_100BA0DCC(v8);
    v22 = sub_10043268C();
    v16 = objc_claimAutoreleasedReturnValue(v22);
    v23 = os_log_type_enabled(v16, OS_LOG_TYPE_INFO);
    if (v21)
    {
      if (v23)
      {
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
        *(_DWORD *)buf = 138412290;
        v50 = v24;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "There are vehicles to pair, will try to find a match for accessory: %@.", buf, 0xCu);

      }
      v25 = *(_QWORD *)(a1 + 32);
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "vehicles"));
      v16 = objc_claimAutoreleasedReturnValue(+[VehicleDisambiguator findPossibleMatchesForAccessory:inVehicles:](VehicleDisambiguator, "findPossibleMatchesForAccessory:inVehicles:", v25, v26));

      if (-[NSObject count](v16, "count"))
      {
        if (-[NSObject count](v16, "count") == (id)1)
        {
          v27 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject allKeys](v16, "allKeys"));
          v28 = objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "firstObject"));

          v29 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject objectForKeyedSubscript:](v16, "objectForKeyedSubscript:", v28));
          objc_msgSend(v29, "floatValue");
          v31 = v30;

          v32 = sub_10043268C();
          v33 = objc_claimAutoreleasedReturnValue(v32);
          v34 = os_log_type_enabled(v33, OS_LOG_TYPE_INFO);
          if (v31 == 1.0)
          {
            if (v34)
            {
              *(_DWORD *)buf = 138412290;
              v50 = v28;
              _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "Found a perfect match in vehicle: %@., will pair it with accessory.", buf, 0xCu);
            }

            v35 = (uint64_t *)(a1 + 48);
          }
          else
          {
            if (v34)
            {
              v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
              *(_DWORD *)buf = 138412546;
              v50 = v28;
              v51 = 2112;
              v52 = v46;
              _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "Disambiguator found a probable match in single vehicle: %@. Will present popup to pair with accessory: %@.", buf, 0x16u);

            }
            v35 = (uint64_t *)(a1 + 56);
          }
          v47 = *v35;
        }
        else
        {
          v28 = objc_claimAutoreleasedReturnValue(-[NSObject keysSortedByValueUsingComparator:](v16, "keysSortedByValueUsingComparator:", &stru_1011BB158));
          v40 = sub_10043268C();
          v41 = objc_claimAutoreleasedReturnValue(v40);
          if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
          {
            v42 = v28;
            v43 = v42;
            if (v42)
            {
              if (-[NSObject count](v42, "count"))
              {
                v44 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject componentsJoinedByString:](v43, "componentsJoinedByString:", CFSTR(", ")));
                v45 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<%p> [%@]"), v43, v44));

              }
              else
              {
                v45 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<%p> (empty)"), v43));
              }
            }
            else
            {
              v45 = CFSTR("<nil>");
            }

            v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
            *(_DWORD *)buf = 138412546;
            v50 = v45;
            v51 = 2112;
            v52 = v48;
            _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "Disambiguator found multiple possible vehicles to pair: %@. Will present user with options to pair with accessory: %@.", buf, 0x16u);

          }
          v47 = *(_QWORD *)(a1 + 64);
        }
        (*(void (**)(uint64_t, NSObject *))(v47 + 16))(v47, v28);
      }
      else
      {
        v39 = sub_10043268C();
        v28 = objc_claimAutoreleasedReturnValue(v39);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "Disambiguator didn't find any vehicles to pair with, aborting.", buf, 2u);
        }
      }
    }
    else
    {
      if (!v23)
        goto LABEL_43;
      v36 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "vehicles"));
      v37 = v36;
      if (v36)
      {
        if (objc_msgSend(v36, "count"))
        {
          v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "componentsJoinedByString:", CFSTR(", ")));
          v28 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<%p> [%@]"), v37, v38));

        }
        else
        {
          v28 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<%p> (empty)"), v37));
        }
      }
      else
      {
        v28 = CFSTR("<nil>");
      }

      *(_DWORD *)buf = 138412290;
      v50 = v28;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Won't present disambiguation for vehicles: %@, because it was already presented many times.", buf, 0xCu);

    }
    goto LABEL_43;
  }
  v7 = sub_10043268C();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    v50 = v6;
    v9 = "Failed to get info about vehicles in the garage, aborting. error: %@";
    v10 = v8;
    v11 = OS_LOG_TYPE_ERROR;
    v12 = 12;
LABEL_4:
    _os_log_impl((void *)&_mh_execute_header, v10, v11, v9, buf, v12);
  }
LABEL_44:

}

int64_t sub_1005591A8(id a1, NSNumber *a2, NSNumber *a3)
{
  return -[NSNumber compare:](a3, "compare:", a2);
}

void sub_100559938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_100559950(uint64_t a1, _DWORD *a2, int *a3, _QWORD *a4, _DWORD *a5)
{
  unint64_t v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  int v16;
  void *v17;
  void *v18;

  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  v11 = objc_msgSend(*(id *)(a1 + 32), "count");
  if (v10 < (unint64_t)v11)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objects"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectAtIndexedSubscript:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24)));

    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "searchSection"));
    v15 = objc_msgSend(v14, "sectionType");

    if (v15 == (id)2)
      v16 = 3;
    else
      v16 = 2;
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "mapItem"));
    *a2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    *a3 = v16;
    *a4 = objc_msgSend(v17, "_muid");
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "place"));
    *a5 = objc_msgSend(v18, "localSearchProviderID");

    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  }
  return v10 < (unint64_t)v11;
}

uint64_t sub_100559A78(uint64_t a1, _QWORD *a2, _DWORD *a3, _QWORD *a4, unsigned int *a5, _QWORD *a6)
{
  unint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  unsigned int v18;
  id v19;

  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  if (v12 >= (unint64_t)objc_msgSend(*(id *)(a1 + 32), "count"))
    return 0;
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  if (v13 >= (unint64_t)objc_msgSend(*(id *)(a1 + 40), "count"))
    return 0;
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objects"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectAtIndexedSubscript:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24)));

  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectAtIndexedSubscript:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24)));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "mapItem"));
  *a2 = objc_msgSend(v17, "_muid");

  *a3 = objc_msgSend(v16, "trailingEntityType");
  *a4 = 0;
  v18 = objc_msgSend(v16, "hyperlinkType");
  *a5 = v18;
  if (v18)
    v19 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "hyperlinkString"));
  else
    v19 = 0;
  *a6 = v19;
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);

  return 1;
}

MapsAppTest *__cdecl sub_10055A234(id a1, NSString *a2, MapsAppTesting *a3, NSDictionary *a4)
{
  NSString *v6;
  MapsAppTesting *v7;
  NSDictionary *v8;
  __objc2_class **v9;
  void *v10;
  unsigned int v11;
  id v12;

  v6 = a2;
  v7 = a3;
  v8 = a4;
  if (-[NSString hasPrefix:](v6, "hasPrefix:", CFSTR("LaunchMapsWith")))
  {
    v9 = off_101197688;
  }
  else if (-[NSString isEqualToString:](v6, "isEqualToString:", CFSTR("RotatingMaps")))
  {
    v9 = off_101197690;
  }
  else if (-[NSString isEqualToString:](v6, "isEqualToString:", CFSTR("TimeToPresentPlaceCard")))
  {
    v9 = off_101197748;
  }
  else if (-[NSString isEqualToString:](v6, "isEqualToString:", CFSTR("PresentAndDismissPlaceCard")))
  {
    v9 = off_101197740;
  }
  else if (-[NSString isEqualToString:](v6, "isEqualToString:", CFSTR("RealtimeTransitPlaceCard")))
  {
    v9 = off_101197840;
  }
  else if (-[NSString isEqualToString:](v6, "isEqualToString:", CFSTR("ScrollProactiveTray")))
  {
    v9 = off_101197760;
  }
  else if (-[NSString isEqualToString:](v6, "isEqualToString:", CFSTR("ResizingProactiveTray")))
  {
    v9 = off_101197790;
  }
  else if (-[NSString isEqualToString:](v6, "isEqualToString:", CFSTR("RotatingProactiveTray")))
  {
    v9 = off_1011977A8;
  }
  else if (-[NSString isEqualToString:](v6, "isEqualToString:", CFSTR("ScrollRecents")))
  {
    v9 = off_1011977C8;
  }
  else if (-[NSString hasPrefix:](v6, "hasPrefix:", CFSTR("ScrollDirectionsDetails")))
  {
    v9 = off_1011977E0;
  }
  else if (-[NSString hasPrefix:](v6, "hasPrefix:", CFSTR("ResizingDirectionsPreview")))
  {
    v9 = off_101197798;
  }
  else if (-[NSString hasPrefix:](v6, "hasPrefix:", CFSTR("RotatingDirectionsPreview")))
  {
    v9 = off_1011977B0;
  }
  else if (-[NSString hasPrefix:](v6, "hasPrefix:", CFSTR("RotatingDirectionsDetails")))
  {
    v9 = off_1011977B8;
  }
  else if (-[NSString hasPrefix:](v6, "hasPrefix:", CFSTR("PresentDirectionsDetails")))
  {
    v9 = off_101197758;
  }
  else if (-[NSString hasPrefix:](v6, "hasPrefix:", CFSTR("ScrollPlacecard")))
  {
    v9 = off_1011977D8;
  }
  else if (-[NSString hasPrefix:](v6, "hasPrefix:", CFSTR("ResizingPlacecard")))
  {
    v9 = off_101197788;
  }
  else if (-[NSString hasPrefix:](v6, "hasPrefix:", CFSTR("ScrollSearchResults")))
  {
    v9 = off_1011977D0;
  }
  else if (-[NSString hasPrefix:](v6, "hasPrefix:", CFSTR("RetainedSearch")))
  {
    v9 = off_1011977A0;
  }
  else if (-[NSString hasPrefix:](v6, "hasPrefix:", CFSTR("generateETAPin")))
  {
    v9 = off_1011976F0;
  }
  else if (-[NSString hasPrefix:](v6, "hasPrefix:", CFSTR("generateETA")))
  {
    v9 = off_1011976E8;
  }
  else if (-[NSString hasPrefix:](v6, "hasPrefix:", CFSTR("guidanceStepping")))
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v8, "objectForKeyedSubscript:", CFSTR("mapType")));
    v11 = objc_msgSend(v10, "isEqualToString:", CFSTR("transit"));

    v9 = off_101197708;
    if (v11)
      v9 = off_101197820;
  }
  else if (-[NSString hasPrefix:](v6, "hasPrefix:", CFSTR("guidance")))
  {
    v9 = off_101197708;
  }
  else if (-[NSString rangeOfString:](v6, "rangeOfString:", CFSTR("pounce")))
  {
    if (-[NSString isEqualToString:](v6, "isEqualToString:", CFSTR("RAPcontrollerLaunch")))
    {
      v9 = off_101197768;
    }
    else if (-[NSString isEqualToString:](v6, "isEqualToString:", CFSTR("RAPPOI")))
    {
      v9 = off_101197770;
    }
    else if (-[NSString hasPrefix:](v6, "hasPrefix:", CFSTR("Venues")))
    {
      v9 = off_101197838;
    }
    else if (-[NSString hasPrefix:](v6, "hasPrefix:", CFSTR("dropPin")))
    {
      v9 = off_1011976E0;
    }
    else if (-[NSString hasPrefix:](v6, "hasPrefix:", CFSTR("tapPOI")))
    {
      v9 = off_101197810;
    }
    else if (-[NSString isEqualToString:](v6, "isEqualToString:", CFSTR("ScrollCollections")))
    {
      v9 = off_1011976B0;
    }
    else if (-[NSString isEqualToString:](v6, "isEqualToString:", CFSTR("scrollCollectionNatural")))
    {
      v9 = off_1011976B8;
    }
    else if (-[NSString isEqualToString:](v6, "isEqualToString:", CFSTR("ScrollCuratedCollectionsList")))
    {
      v9 = off_1011976C8;
    }
    else if (-[NSString isEqualToString:](v6, "isEqualToString:", CFSTR("ScrollCuratedCollectionsDetail")))
    {
      v9 = off_1011976C0;
    }
    else if (-[NSString isEqualToString:](v6, "isEqualToString:", CFSTR("ScrollCuratedCollectionsPublisher")))
    {
      v9 = off_1011976D0;
    }
    else if (-[NSString isEqualToString:](v6, "isEqualToString:", CFSTR("guidesHomeScroll")))
    {
      v9 = off_101197710;
    }
    else if (-[NSString isEqualToString:](v6, "isEqualToString:", CFSTR("citySelectorScroll")))
    {
      v9 = off_1011976A8;
    }
    else if (-[NSString isEqualToString:](v6, "isEqualToString:", CFSTR("ResizeWindow")))
    {
      v9 = off_101197780;
    }
    else
    {
      if (!-[NSString isEqualToString:](v6, "isEqualToString:", CFSTR("MultitaskResizeWindow")))
      {
        v12 = 0;
        goto LABEL_78;
      }
      v9 = off_101197728;
    }
  }
  else
  {
    v9 = off_101197750;
  }
  v12 = objc_msgSend(objc_alloc(*v9), "initWithApplication:testName:options:", v7, v6, v8);
LABEL_78:

  return (MapsAppTest *)v12;
}

NSArray *__cdecl sub_10055BD80(id a1, NSArray *a2)
{
  void *v2;
  void *v3;
  void *v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MapsMenuBuilder preferencesMenuCommand](MapsMenuBuilder, "preferencesMenuCommand"));
  v5 = v2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v5, 1));

  return (NSArray *)v3;
}

void sub_10055D73C(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[UIApplication sharedMapsDelegate](UIApplication, "sharedMapsDelegate"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  objc_msgSend(v3, "application:runTest:options:", v2, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

BOOL sub_10055F33C(id a1, RAPUserDirectionRequest *a2, unint64_t a3, BOOL *a4)
{
  RAPUserDirectionRequest *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  unsigned int v10;
  BOOL v11;
  id v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  const __CFString *v16;
  int v18;
  RAPUserDirectionRequest *v19;
  __int16 v20;
  const __CFString *v21;

  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[RAPUserDirectionRequest recording](v4, "recording"));
  v6 = v5;
  if (!v5)
  {
    v12 = sub_100431F8C();
    v9 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v18 = 138412290;
      v19 = v4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "RAPRouteListViewController will need to skip request: %@ because it doesn't have a recording.", (uint8_t *)&v18, 0xCu);
    }
    goto LABEL_13;
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "directionsRequests"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "firstObject"));
  v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "routeAttributes"));

  v10 = -[NSObject mainTransportType](v9, "mainTransportType") - 1;
  if (v10 <= 5 && ((0x39u >> v10) & 1) != 0)
  {
    v13 = qword_100E37948[v10];
    v14 = sub_100431F8C();
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      if ((unint64_t)(v13 - 1) > 3)
        v16 = CFSTR("Undefined");
      else
        v16 = *(&off_1011BB318 + v13 - 1);
      v18 = 138412546;
      v19 = v4;
      v20 = 2112;
      v21 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "RAPRouteListViewController will skip request: %@ due to unsupported transport type: %@", (uint8_t *)&v18, 0x16u);
    }

LABEL_13:
    v11 = 0;
    goto LABEL_14;
  }
  v11 = 1;
LABEL_14:

  return v11;
}

void sub_10055FE2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10055FE54(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  int v11;
  id v12;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v8 = WeakRetained;
  if (WeakRetained)
  {
    if (!v5 || v6)
    {
      v9 = sub_1004326FC();
      v10 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        v11 = 138412290;
        v12 = v6;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "AutomaticVehicleSelectionTask: failed to fetch garage with error: %@", (uint8_t *)&v11, 0xCu);
      }

    }
    else
    {
      objc_msgSend(WeakRetained, "_updateGarage:", v5);
    }
  }

}

void sub_10055FFFC(uint64_t a1)
{
  id *WeakRetained;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  id *v8;
  void *v9;
  id v10;
  NSObject *v11;
  int v12;
  void *v13;
  __int16 v14;
  id v15;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = sub_1004326FC();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectedVehicle"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "combinedDisplayName"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "vehicles"));
      v12 = 138412546;
      v13 = v6;
      v14 = 2048;
      v15 = objc_msgSend(v7, "count");
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "AutomaticVehicleSelectionTask: _updateGarage. selectedVehicle: %@, vehicleCount: %lu", (uint8_t *)&v12, 0x16u);

    }
    v8 = WeakRetained + 2;
    v9 = *(void **)(a1 + 32);
    if (WeakRetained[2])
    {
      objc_storeStrong(v8, v9);
    }
    else
    {
      objc_storeStrong(v8, v9);
      if (v9)
      {
        v10 = sub_1004326FC();
        v11 = objc_claimAutoreleasedReturnValue(v10);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          LOWORD(v12) = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "AutomaticVehicleSelectionTask: _updateGarage. Received first garage update -> will update vehicle selection", (uint8_t *)&v12, 2u);
        }

        objc_msgSend(WeakRetained, "_updateVehicleSelectionIfNeeded");
      }
    }
  }

}

void sub_1005608EC(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_updateVehicleSelectionIfNeeded");
    WeakRetained = v2;
  }

}

void sub_100560A3C(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_updateVehicleSelectionIfNeeded");
    WeakRetained = v2;
  }

}

void sub_100560C48(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:isDirectory:](NSURL, "fileURLWithPath:isDirectory:", CFSTR("/var/mobile/Library/Caches/VisualLocalization/Traces"), 1));
  v2 = (void *)qword_1014D2930;
  qword_1014D2930 = v1;

}

id sub_100560D58(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_beginTraceIfNecessary");
}

void sub_100560DB8(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD block[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100560E10;
  block[3] = &unk_1011AC860;
  block[4] = v1;
  dispatch_async(v2, block);
}

id sub_100560E10(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_finishOnIsolationQueue");
}

void sub_100560E70(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  NSString *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  unsigned int v13;
  id v14;
  id v15;
  NSObject *v16;
  NSObject *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  unsigned __int8 v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  unsigned __int8 v37;
  id v38;
  const char *v39;
  const char *v40;
  id v41;
  id v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  id v51;
  id v52;
  id v53;
  id v54;
  uint8_t buf[4];
  id v56;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSTimeZone localTimeZone](NSTimeZone, "localTimeZone"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSISO8601DateFormatter stringFromDate:timeZone:formatOptions:](NSISO8601DateFormatter, "stringFromDate:timeZone:formatOptions:", v2, v3, 371));

  v5 = NSTemporaryDirectory();
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", v6));
  v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "URLByAppendingPathComponent:", v4));
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(void **)(v9 + 32);
  *(_QWORD *)(v9 + 32) = v8;

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
  v54 = 0;
  v13 = objc_msgSend(v11, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v12, 1, 0, &v54);
  v14 = v54;

  v15 = sub_1005612C4();
  v16 = objc_claimAutoreleasedReturnValue(v15);
  v17 = v16;
  if (!v13)
  {
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
LABEL_18:

      v43 = *(_QWORD *)(a1 + 32);
      v44 = *(void **)(v43 + 32);
      *(_QWORD *)(v43 + 32) = 0;

      v45 = *(_QWORD *)(a1 + 32);
      v46 = *(void **)(v45 + 40);
      *(_QWORD *)(v45 + 40) = 0;

      v47 = *(_QWORD *)(a1 + 32);
      v48 = *(void **)(v47 + 48);
      *(_QWORD *)(v47 + 48) = 0;

      v49 = *(_QWORD *)(a1 + 32);
      v50 = *(void **)(v49 + 56);
      *(_QWORD *)(v49 + 56) = 0;

      v25 = v14;
      goto LABEL_19;
    }
    *(_DWORD *)buf = 138543362;
    v56 = v14;
    v40 = "Failed to create trace directory: %{public}@";
LABEL_17:
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, v40, buf, 0xCu);
    goto LABEL_18;
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    v18 = *(void **)(*(_QWORD *)(a1 + 32) + 32);
    *(_DWORD *)buf = 138543362;
    v56 = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "Created temporary trace directory: %{public}@", buf, 0xCu);
  }

  v19 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "URLByAppendingPathComponent:", CFSTR("images")));
  v20 = *(_QWORD *)(a1 + 32);
  v21 = *(void **)(v20 + 40);
  *(_QWORD *)(v20 + 40) = v19;

  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v23 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40);
  v53 = v14;
  v24 = objc_msgSend(v22, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v23, 1, 0, &v53);
  v25 = v53;

  if ((v24 & 1) == 0)
  {
    v41 = sub_1005612C4();
    v17 = objc_claimAutoreleasedReturnValue(v41);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v56 = v25;
      v39 = "Failed to create images directory: %{public}@";
      goto LABEL_13;
    }
LABEL_14:
    v14 = v25;
    goto LABEL_18;
  }
  v26 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "URLByAppendingPathComponent:", CFSTR("parameters")));
  v27 = *(_QWORD *)(a1 + 32);
  v28 = *(void **)(v27 + 48);
  *(_QWORD *)(v27 + 48) = v26;

  v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v30 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48);
  v52 = v25;
  v31 = objc_msgSend(v29, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v30, 1, 0, &v52);
  v14 = v52;

  if ((v31 & 1) == 0)
  {
    v42 = sub_1005612C4();
    v17 = objc_claimAutoreleasedReturnValue(v42);
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 138543362;
    v56 = v14;
    v40 = "Failed to create parameters directory: %{public}@";
    goto LABEL_17;
  }
  v32 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "URLByAppendingPathComponent:", CFSTR("results")));
  v33 = *(_QWORD *)(a1 + 32);
  v34 = *(void **)(v33 + 56);
  *(_QWORD *)(v33 + 56) = v32;

  v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v36 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56);
  v51 = v14;
  v37 = objc_msgSend(v35, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v36, 1, 0, &v51);
  v25 = v51;

  if ((v37 & 1) == 0)
  {
    v38 = sub_1005612C4();
    v17 = objc_claimAutoreleasedReturnValue(v38);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v56 = v25;
      v39 = "Failed to create results directory: %{public}@";
LABEL_13:
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, v39, buf, 0xCu);
      goto LABEL_14;
    }
    goto LABEL_14;
  }
LABEL_19:

}

id sub_1005612C4()
{
  if (qword_1014D2940 != -1)
    dispatch_once(&qword_1014D2940, &stru_1011BB358);
  return (id)qword_1014D2938;
}

id sub_100561380(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_recordAttemptOnIsolationQueue:", *(_QWORD *)(a1 + 40));
}

void sub_100561FD0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VisualLocalizationTrace");
  v2 = (void *)qword_1014D2938;
  qword_1014D2938 = (uint64_t)v1;

}

void sub_100562858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100562874(uint64_t a1)
{
  id v2;
  id WeakRetained;
  void *v4;
  id v5;

  v2 = objc_alloc((Class)WUWeatherPlatterViewController);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "location"));
  v5 = objc_msgSend(v2, "initWithLocation:", v4);

  return v5;
}

UIMenu *__cdecl sub_1005628DC(id a1, NSArray *a2)
{
  return +[UIMenu menuWithTitle:children:](UIMenu, "menuWithTitle:children:", &stru_1011EB268, &__NSArray0__struct);
}

void sub_100562B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100562B40(uint64_t a1)
{
  id WeakRetained;

  +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 15002, 640, 0);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_openWeatherPunchOutURL");

}

void sub_100563208(uint64_t a1)
{
  uint64_t *WeakRetained;
  int v3;
  uint64_t *v4;

  WeakRetained = (uint64_t *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = *(unsigned __int8 *)(a1 + 40);
    v4 = WeakRetained;
    if (WeakRetained[13] < 1)
      objc_msgSend(WeakRetained, "_updateVisibilityAnimated:", v3 != 0);
    else
      objc_msgSend(WeakRetained, "_requestVisibilityUpdateAnimated:", v3 != 0);
    WeakRetained = v4;
  }

}

void sub_10056369C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 192));
  _Unwind_Resume(a1);
}

id *sub_1005636C4(id *result)
{
  id *v1;

  v1 = result;
  ++*((_QWORD *)result[4] + 13);
  if (*((_BYTE *)result + 64))
    result = (id *)objc_msgSend(result[5], "setHidden:", 0);
  if (*((_BYTE *)v1 + 65))
    result = (id *)objc_msgSend(v1[6], "setHidden:", 0);
  if (*((_BYTE *)v1 + 66))
    return (id *)objc_msgSend(v1[7], "setHidden:", 0);
  return result;
}

void sub_10056373C(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  id v6;

  if (*(_BYTE *)(a1 + 56))
    v2 = 1.0;
  else
    v2 = 0.0;
  objc_msgSend(*(id *)(a1 + 32), "setAlpha:", v2);
  if (*(_BYTE *)(a1 + 57))
    v3 = 1.0;
  else
    v3 = 0.0;
  objc_msgSend(*(id *)(a1 + 40), "setAlpha:", v3);
  objc_msgSend(*(id *)(a1 + 48), "_viewAlpha");
  v5 = v4;
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "view"));
  objc_msgSend(v6, "setAlpha:", v5);

}

void sub_1005637C0(id *a1)
{
  id WeakRetained;
  unsigned __int8 *v3;
  uint64_t v4;
  BOOL v5;
  BOOL v6;
  uint64_t v7;
  unsigned __int8 *v8;

  WeakRetained = objc_loadWeakRetained(a1 + 7);
  v3 = (unsigned __int8 *)WeakRetained;
  if (WeakRetained)
  {
    v4 = *((_QWORD *)WeakRetained + 13);
    v5 = v4 == 1;
    v6 = v4 < 1;
    v7 = v4 - 1;
    if (!v6)
    {
      *((_QWORD *)WeakRetained + 13) = v7;
      v8 = (unsigned __int8 *)WeakRetained;
      if (v5)
      {
        if (!*((_BYTE *)WeakRetained + 25))
        {
          objc_msgSend(a1[4], "setHidden:", 1);
          v3 = v8;
        }
        if (!v3[26])
        {
          objc_msgSend(a1[5], "setHidden:", 1);
          v3 = v8;
        }
        if ((objc_msgSend(v3, "_viewShown") & 1) == 0)
          objc_msgSend(a1[6], "setHidden:", 1);
        v3 = v8;
      }
      +[MapsAnalyticStateProvider updateButtonsInformationAQI:weather:](MapsAnalyticStateProvider, "updateButtonsInformationAQI:weather:", v3[25], v3[26]);
      v3 = v8;
    }
  }

}

id sub_100564A04(uint64_t a1)
{
  double v1;

  v1 = 1.0;
  if (*(double *)(a1 + 40) > 0.05)
    v1 = 0.0;
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "setAlpha:", v1);
}

void sub_100565084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1005650C0(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  void *v14;
  double v15;
  void *v16;
  void *v17;
  id v18;

  v18 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (v18 && WeakRetained)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "publisherLogoImageView"));
    objc_msgSend(v4, "setImage:", v18);

    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "publisherLogoImageView"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "widthAnchor"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "publisherLogoImageView"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "heightAnchor"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "publisherLogoImageView"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "image"));
    objc_msgSend(v10, "size");
    v12 = v11;
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "publisherLogoImageView"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "image"));
    objc_msgSend(v14, "size");
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "constraintEqualToAnchor:multiplier:", v8, v12 / v15));
    objc_msgSend(WeakRetained, "setLogoWidthConstraint:", v16);

    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "logoWidthConstraint"));
    objc_msgSend(v17, "setActive:", 1);

  }
}

void sub_100565230(uint64_t a1, void *a2, uint64_t a3, int a4, char a5)
{
  id v9;
  id WeakRetained;
  id v11;
  NSObject *v12;
  _BOOL4 v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  NSObject *v18;
  _BOOL4 v19;
  double v20;
  const char *v21;
  id v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  _QWORD v28[5];
  id v29;
  _QWORD v30[5];
  id v31;
  uint8_t buf[4];
  void *v33;

  v9 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if ((a5 & 1) != 0)
  {
    v11 = sub_1004316CC();
    v12 = objc_claimAutoreleasedReturnValue(v11);
    v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG);
    if (WeakRetained)
    {
      if (v13)
      {
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "viewModel"));
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "collectionTitle"));
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "string"));
        *(_DWORD *)buf = 138412290;
        v33 = v16;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "[⌛]Received header image for : %@", buf, 0xCu);

      }
      if (v9 && !a3)
      {
        v17 = sub_1004316CC();
        v18 = objc_claimAutoreleasedReturnValue(v17);
        v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG);
        if (a4)
        {
          v20 = 0.0;
          if (v19)
          {
            *(_WORD *)buf = 0;
            v21 = "Received cached header image. Displaying without animation.";
LABEL_18:
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, v21, buf, 2u);
          }
        }
        else
        {
          v20 = 0.100000001;
          if (v19)
          {
            *(_WORD *)buf = 0;
            v21 = "Received non-cached header image. Displaying with animation.";
            goto LABEL_18;
          }
        }

        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "collectionImageView"));
        v30[0] = _NSConcreteStackBlock;
        v30[1] = 3221225472;
        v30[2] = sub_100565540;
        v30[3] = &unk_1011AC8B0;
        v30[4] = WeakRetained;
        v31 = v9;
        v28[0] = _NSConcreteStackBlock;
        v28[1] = 3221225472;
        v28[2] = sub_10056557C;
        v28[3] = &unk_1011ACCB8;
        v28[4] = WeakRetained;
        v29 = *(id *)(a1 + 32);
        +[UIView transitionWithView:duration:options:animations:completion:](UIView, "transitionWithView:duration:options:animations:completion:", v27, 5242882, v30, v28, v20);

      }
    }
    else
    {
      if (v13)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Header doesn't exists.", buf, 2u);
      }

    }
  }
  else
  {
    v22 = sub_1004316CC();
    v23 = objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "viewModel"));
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "collectionTitle"));
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "string"));
      *(_DWORD *)buf = 138412290;
      v33 = v26;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "Cancelled image download for collection: %@", buf, 0xCu);

    }
  }

}

void sub_100565540(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionImageView"));
  objc_msgSend(v2, "setImage:", v1);

}

void sub_10056557C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  int v9;
  void *v10;
  __int16 v11;
  uint64_t v12;

  v2 = sub_1004316CC();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewModel"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "collectionTitle"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "string"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    objc_msgSend(v7, "timeIntervalSinceDate:", *(_QWORD *)(a1 + 40));
    v9 = 138412546;
    v10 = v6;
    v11 = 2048;
    v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[⌛]Finished showing header image for : %@ in %f", (uint8_t *)&v9, 0x16u);

  }
}

void sub_100567DEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

id sub_100567E04(uint64_t a1, void *a2)
{
  id result;
  uint64_t v4;

  result = objc_msgSend(a2, "BOOLValue");
  v4 = 1;
  if (!(_DWORD)result)
    v4 = 2;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v4;
  return result;
}

uint64_t sub_100567E40(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 0;
  return result;
}

void sub_100568148(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;

  v7 = a2;
  v5 = a3;
  if ((objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "containsObject:", v7) & 1) == 0)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "valueForKey:", v7));

    if (!v6)
      objc_msgSend(*(id *)(a1 + 32), "_startLookupForEntry:", v5);
  }

}

void sub_1005684AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1005684D4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD block[4];
  id v6;
  id v7;
  id v8;

  v3 = a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10056858C;
  block[3] = &unk_1011AFF10;
  objc_copyWeak(&v8, (id *)(a1 + 40));
  v6 = v3;
  v7 = *(id *)(a1 + 32);
  v4 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  objc_destroyWeak(&v8);
}

void sub_10056858C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "_setResult:forEntry:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_1005685C8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD v16[4];
  id v17;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + 40);
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[Result resultWithError:](Result, "resultWithError:", v9));
    (*(void (**)(uint64_t, void *))(v10 + 16))(v10, v11);
  }
  else
  {
    if (v7)
      v12 = v7;
    else
      v12 = v8;
    if (v12)
    {
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_100568728;
      v16[3] = &unk_1011BB4D8;
      v13 = *(_QWORD *)(a1 + 32);
      v17 = *(id *)(a1 + 40);
      +[UGCNearbyPhotosAvailibility numberOfPhotosTakenForMapItem:lastVisitedDate:completion:](UGCNearbyPhotosAvailibility, "numberOfPhotosTakenForMapItem:lastVisitedDate:completion:", v13, v12, v16);

      goto LABEL_9;
    }
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("HomePhotoLookupDataProviderErrorDomain"), 2, 0));
    v14 = *(_QWORD *)(a1 + 40);
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[Result resultWithError:](Result, "resultWithError:", v11));
    (*(void (**)(uint64_t, void *))(v14 + 16))(v14, v15);

  }
LABEL_9:

}

void sub_100568728(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 32);
  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a2 != 0));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[Result resultWithValue:](Result, "resultWithValue:", v4));
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);

}

void sub_10056936C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100569394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained;

  if (a2 != a3)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    objc_msgSend(WeakRetained, "onTransitionFromState:toState:", a2, a3);

  }
}

void sub_100569544(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_100569568(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  void *v4;
  id v5;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "collectionView"));
  objc_msgSend(v3, "setAlpha:", 0.0);

  v5 = objc_loadWeakRetained(v1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "citySelectionView"));
  objc_msgSend(v4, "setAlpha:", 0.0);

}

void sub_1005695E4(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "apiController"));
  objc_msgSend(v1, "fetchGuidesHomeViewFilteredBy:onCompletion:", 0, &stru_1011BB560);

}

id sub_1005699DC()
{
  if (qword_1014D2950 != -1)
    dispatch_once(&qword_1014D2950, &stru_1011BB5A8);
  return (id)qword_1014D2948;
}

id sub_10056B0E8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;

  v3 = objc_msgSend(a2, "mutableCopy");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont system28Bold](UIFont, "system28Bold"));
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v4, NSFontAttributeName);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "apiController"));
  if ((objc_msgSend(v5, "isCuratedGuidesHome") & 1) != 0)
    v6 = objc_claimAutoreleasedReturnValue(+[UIColor whiteColor](UIColor, "whiteColor"));
  else
    v6 = objc_claimAutoreleasedReturnValue(+[UIColor labelColor](UIColor, "labelColor"));
  v7 = (void *)v6;
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v6, NSForegroundColorAttributeName);

  v8 = objc_msgSend(v3, "copy");
  return v8;
}

void sub_10056C70C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10056C728(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "collectionView"));
  objc_msgSend(v1, "setAlpha:", 1.0);

}

void sub_10056C930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_10056C958(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id *v6;
  id WeakRetained;
  void *v8;
  void *v9;
  void *v10;
  _BOOL8 v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  uint64_t v19;
  double v20;
  void *v21;
  void *v22;
  _BOOL8 v23;
  id v24;
  void *v25;
  uint64_t v26;
  _BOOL8 v27;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;

  v5 = a3;
  v6 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "dataSource"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "sectionAtIndex:", a2));

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "sectionTitle"));
  if (v9 && (objc_msgSend(v9, "configuration"), v35, v36))
  {
    objc_msgSend(v9, "configuration");

    if (v34 == 1)
    {
      v11 = v10 != 0;
      v12 = objc_loadWeakRetained((id *)(a1 + 40));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "dataSource"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "filterViewModels"));

      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "layoutForFilterSectionUsingViewModels:traitsEnvironment:width:shouldAddSupplementaryHeaderView:", v14, *(_QWORD *)(a1 + 32), v11, *(double *)(a1 + 48)));
    }
    else
    {
      objc_msgSend(v9, "configuration");

      if (v32 == 4)
      {
        v23 = v10 != 0;
        v24 = objc_loadWeakRetained(v6);
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "dataSource"));
        v26 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "layoutForCollectionsListSectionUsingLayoutEnvironment:shouldAddSupplementaryHeaderView:objectsCount:", v5, v23, objc_msgSend(v25, "guidesListCountAtIndex:", a2)));
      }
      else
      {
        objc_msgSend(v9, "configuration");

        if (v30 != 5)
        {
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "layoutForSectionUsingTraitsEnvironment:usingWidth:shouldAddSupplementaryHeaderView:", *(_QWORD *)(a1 + 32), v10 != 0, *(double *)(a1 + 48)));
          goto LABEL_15;
        }
        v27 = v10 != 0;
        v24 = objc_loadWeakRetained(v6);
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "dataSource"));
        v26 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "layoutForPublishersListSectionUsingLayoutEnvironment:shouldAddSupplementaryHeaderView:objectsCount:", v5, v27, objc_msgSend(v25, "publishersListCountAtIndex:", a2)));
      }
      v15 = (void *)v26;

    }
  }
  else
  {
    v16 = objc_loadWeakRetained((id *)(a1 + 40));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "dataSource"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "featuredGuideViewModel"));

    v19 = *(_QWORD *)(a1 + 32);
    v20 = *(double *)(a1 + 48);
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "collectionLongTitle"));
    if (v21)
    {
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "layoutSectionForFeaturedGuideUsingTraitsEnvironment:usingWidth:featuredGuideTitle:", v19, v21, v20));
    }
    else
    {
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "collectionTitle"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "layoutSectionForFeaturedGuideUsingTraitsEnvironment:usingWidth:featuredGuideTitle:", v19, v22, v20));

    }
  }
LABEL_15:

  return v15;
}

void sub_10056D268(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  id v5;
  LoadingModeView *v6;
  void *v7;
  void *v8;
  LoadingModeView *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v14 = WeakRetained;
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "loadingView"));
    if (v3)
    {
LABEL_5:

      WeakRetained = v14;
      goto LABEL_6;
    }
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "apiController"));
    v5 = objc_msgSend(v4, "currentState");

    WeakRetained = v14;
    if (v5 == (id)1)
    {
      v6 = [LoadingModeView alloc];
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "localizedStringForKey:value:table:", CFSTR("Loading ..."), CFSTR("localized string not found"), 0));
      v9 = -[LoadingModeView initWithTitle:](v6, "initWithTitle:", v8);
      objc_msgSend(v14, "setLoadingView:", v9);

      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "loadingView"));
      objc_msgSend(v10, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "contentView"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "loadingView"));
      objc_msgSend(v11, "addSubview:", v12);

      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "loadingView"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "titleHeaderView"));
      objc_msgSend(v14, "activateConstraintsForViewPinnedBelowHeader:headerView:", v3, v13);

      goto LABEL_5;
    }
  }
LABEL_6:

}

id sub_10056D500(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "resetCollectionViewLayout");
}

void sub_10056D508(uint64_t a1)
{
  uint64_t v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cardPresentationController"));
  objc_msgSend(v3, "cardHeight");
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 136) = v2;

}

void sub_10056DBC0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "GuidesHomeViewController");
  v2 = (void *)qword_1014D2948;
  qword_1014D2948 = (uint64_t)v1;

}

void sub_10056E628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10056E650(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_descriptionLabelDidExpand");

}

void sub_10056EDC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10056EDEC(uint64_t a1, void *a2, uint64_t a3)
{
  id WeakRetained;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v6 = WeakRetained;
  if (!a3
    && (v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "model")),
        v8 = *(void **)(a1 + 32),
        v7,
        v7 == v8))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "authorImageView"));
    objc_msgSend(v9, "setImage:", v10);
  }
  else
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "authorImageView"));
    objc_msgSend(v9, "setHidden:", 1);
  }

}

id sub_10056F14C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 32))
    return +[UIView transitionWithView:duration:options:animations:completion:](UIView, "transitionWithView:duration:options:animations:completion:", a2, 5242880, a3, 0, 0.2);
  else
    return (id)(*(uint64_t (**)(uint64_t))(a3 + 16))(a3);
}

void sub_10056F184(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 16))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor whiteColor](UIColor, "whiteColor"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "descriptionLabel"));
    objc_msgSend(v3, "setTextColor:", v2);

    v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor whiteColor](UIColor, "whiteColor"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "descriptionLabel"));
    objc_msgSend(v5, "setShowMoreTextColor:", v4);

    v6 = objc_claimAutoreleasedReturnValue(+[UIColor whiteColor](UIColor, "whiteColor"));
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor labelColor](UIColor, "labelColor"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "descriptionLabel"));
    objc_msgSend(v8, "setTextColor:", v7);

    v9 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor labelColor](UIColor, "labelColor"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "descriptionLabel"));
    objc_msgSend(v10, "setShowMoreTextColor:", v9);

    v6 = objc_claimAutoreleasedReturnValue(+[UIColor labelColor](UIColor, "labelColor"));
  }
  v12 = (id)v6;
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "descriptionLabel"));
  objc_msgSend(v11, "setShowLessTextColor:", v12);

}

void sub_10056F2C4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 16))
    v2 = objc_claimAutoreleasedReturnValue(+[UIColor whiteColor](UIColor, "whiteColor"));
  else
    v2 = objc_claimAutoreleasedReturnValue(+[UIColor labelColor](UIColor, "labelColor"));
  v4 = (id)v2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "authorLabel"));
  objc_msgSend(v3, "setTextColor:", v4);

}

void sub_10056F33C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 16))
    v2 = objc_claimAutoreleasedReturnValue(+[UIColor lightTextColor](UIColor, "lightTextColor"));
  else
    v2 = objc_claimAutoreleasedReturnValue(+[UIColor secondaryLabelColor](UIColor, "secondaryLabelColor"));
  v4 = (id)v2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "metadataLabel"));
  objc_msgSend(v3, "setTextColor:", v4);

}

SearchFieldItem *__cdecl sub_10056F7AC(id a1, NanoDirectionWaypoint *a2, unint64_t a3)
{
  void *v3;
  void *v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[DirectionsWaypoint directionsWaypointWithNanoDirectionWaypoint:](DirectionsWaypoint, "directionsWaypointWithNanoDirectionWaypoint:", a2));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[SearchFieldItem searchFieldItemWithObject:](SearchFieldItem, "searchFieldItemWithObject:", v3));

  return (SearchFieldItem *)v4;
}

void sub_10056FE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a45, 8);
  _Unwind_Resume(a1);
}

void sub_10056FE9C(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  BOOL v11;
  id v12;
  id v13;

  v13 = a2;
  v7 = objc_msgSend(v13, "rangeOfString:options:", *(_QWORD *)(a1 + 32), 129);
  v9 = v8;
  if (*(_BYTE *)(a1 + 72))
    v10 = v7 == 0;
  else
    v10 = 0;
  if (v10 || (!*(_BYTE *)(a1 + 72) ? (v11 = v7 == (id)0x7FFFFFFFFFFFFFFFLL) : (v11 = 1), !v11))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) += v8;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = a3;
    *a4 = 1;
    v12 = objc_msgSend(v13, "length");
    if (v12)
      *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = (double)v9 / (double)(unint64_t)v12
                                                                  + *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8)
                                                                              + 24);
  }

}

id sub_1005704E4()
{
  if (qword_1014D2960 != -1)
    dispatch_once(&qword_1014D2960, &stru_1011BB6A0);
  return (id)qword_1014D2958;
}

void sub_100570524(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  NSMutableArray *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  void *i;
  void *v20;
  id v21;
  NSObject *v22;
  unsigned int v23;
  id v24;
  id v25;
  uint64_t v26;
  void *j;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  RAPBatchSubmissionStatusResult *v32;
  void *v33;
  RAPBatchSubmissionStatusResult *v34;
  id v35;
  void *v37;
  id obj;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint8_t v55[128];
  uint8_t v56[4];
  unsigned int v57;
  uint8_t v58[128];
  uint8_t buf[4];
  id v60;
  __int16 v61;
  id v62;

  v5 = a2;
  v6 = a4;
  v7 = sub_1005704E4();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412546;
    v60 = v5;
    v61 = 2112;
    v62 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Fetched response %@ with error %@", buf, 0x16u);
  }
  v37 = v6;

  v34 = [RAPBatchSubmissionStatusResult alloc];
  v35 = v5;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "feedbackResult"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "queryResult"));

  v33 = v10;
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "feedbackInfos"));
  v12 = objc_opt_new(NSMutableArray);
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  obj = v11;
  v40 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v51, buf, 16);
  if (v40)
  {
    v39 = *(_QWORD *)v52;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v52 != v39)
          objc_enumerationMutation(obj);
        v41 = v13;
        v14 = *(void **)(*((_QWORD *)&v51 + 1) + 8 * v13);
        v47 = 0u;
        v48 = 0u;
        v49 = 0u;
        v50 = 0u;
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "feedbackComponents"));
        v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v47, v58, 16);
        if (v16)
        {
          v17 = v16;
          v18 = *(_QWORD *)v48;
          v42 = *(_QWORD *)v48;
          do
          {
            for (i = 0; i != v17; i = (char *)i + 1)
            {
              if (*(_QWORD *)v48 != v18)
                objc_enumerationMutation(v15);
              v20 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * (_QWORD)i);
              if (objc_msgSend(v20, "status"))
              {
                v21 = sub_1005704E4();
                v22 = objc_claimAutoreleasedReturnValue(v21);
                if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
                {
                  v23 = objc_msgSend(v20, "status");
                  *(_DWORD *)v56 = 67109120;
                  v57 = v23;
                  _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Error: GEOFeedbackResponse includes a feedback_component with a GEOStatusCode of %d:", v56, 8u);
                }
              }
              else
              {
                v45 = 0u;
                v46 = 0u;
                v43 = 0u;
                v44 = 0u;
                v22 = objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "values"));
                v24 = -[NSObject countByEnumeratingWithState:objects:count:](v22, "countByEnumeratingWithState:objects:count:", &v43, v55, 16);
                if (v24)
                {
                  v25 = v24;
                  v26 = *(_QWORD *)v44;
                  do
                  {
                    for (j = 0; j != v25; j = (char *)j + 1)
                    {
                      if (*(_QWORD *)v44 != v26)
                        objc_enumerationMutation(v22);
                      v28 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * (_QWORD)j);
                      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "rapInfo"));

                      if (v29)
                      {
                        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "rapInfo"));
                        -[NSMutableArray addObject:](v12, "addObject:", v30);

                      }
                    }
                    v25 = -[NSObject countByEnumeratingWithState:objects:count:](v22, "countByEnumeratingWithState:objects:count:", &v43, v55, 16);
                  }
                  while (v25);
                  v18 = v42;
                }
              }

            }
            v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v47, v58, 16);
          }
          while (v17);
        }

        v13 = v41 + 1;
      }
      while ((id)(v41 + 1) != v40);
      v40 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v51, buf, 16);
    }
    while (v40);
  }

  v31 = -[NSMutableArray copy](v12, "copy");
  v32 = -[RAPBatchSubmissionStatusResult initWithRAPInfos:](v34, "initWithRAPInfos:", v31);

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100570918(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "RAPBatchSubmissionStatusTicket");
  v2 = (void *)qword_1014D2958;
  qword_1014D2958 = (uint64_t)v1;

}

void sub_100571454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location)
{
  id *v26;

  objc_destroyWeak(v26);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100571480(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id *v4;
  id WeakRetained;
  void (**v6)(void);

  v4 = (id *)(a1 + 32);
  v6 = a4;
  WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend(WeakRetained, "_updateButtonsForLocationUpdate");

  v6[2]();
}

void sub_100571D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, id *a12)
{
  id *v12;
  id *v13;
  uint64_t v14;

  objc_destroyWeak(v13);
  objc_destroyWeak(location);
  objc_destroyWeak(v12);
  objc_destroyWeak(a12);
  objc_destroyWeak((id *)(v14 - 136));
  _Unwind_Resume(a1);
}

void sub_100571E50(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "blockTrip");
    WeakRetained = v2;
  }

}

void sub_100571E80(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "blockSender");
    WeakRetained = v2;
  }

}

void sub_100571EB0(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_addContact");
    WeakRetained = v2;
  }

}

void sub_100571EE0(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_addToContact");
    WeakRetained = v2;
  }

}

void sub_100571F10(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "tapToRadarButtonTapped");
    WeakRetained = v2;
  }

}

id sub_10057342C(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setImage:", a2);
  return objc_msgSend(*(id *)(a1 + 40), "setContentConfiguration:", *(_QWORD *)(a1 + 32));
}

void sub_100573FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100573FE8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "blockSenderAction");

}

void sub_100574C70(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  id v14;
  id v15;
  id v16;
  void (*v17)(void);
  _QWORD v18[4];
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint8_t buf[16];

  v5 = a2;
  v6 = a3;
  v7 = sub_10043222C();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "AutocompleteItemManager - superclass did collect results", buf, 2u);
  }

  *((_BYTE *)a1[4] + 98) = 0;
  if (((*((uint64_t (**)(void))a1[5] + 2))() & 1) != 0
    || (v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "autocompleteContext")), v9, !v9))
  {
    v17 = (void (*)(void))*((_QWORD *)a1[6] + 2);
LABEL_10:
    v17();
    goto LABEL_11;
  }
  if (!objc_msgSend(v5, "count"))
  {
    v17 = (void (*)(void))*((_QWORD *)a1[6] + 2);
    goto LABEL_10;
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "filterDuplicateContactsFromServerResultUsingItems:", v5));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "wrappedItems:", v10));
  v12 = sub_10043222C();
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "AutocompleteItemManager - compute client ranking score", buf, 2u);
  }

  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_100574E74;
  v18[3] = &unk_1011BB710;
  v14 = a1[4];
  v22 = a1[5];
  v23 = a1[6];
  v15 = a1[4];
  v19 = v11;
  v20 = v15;
  v21 = v5;
  v16 = v11;
  objc_msgSend(v14, "computeClientRankingScoresForResolvedItemsIfNeeded:completion:", v16, v18);

LABEL_11:
}

void sub_100574E74(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  void *i;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  NSObject *v22;
  id v23;
  id v24;
  uint64_t v25;
  id v26;
  id v27;
  void *v28;
  uint64_t v29;
  id obj;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint8_t buf[4];
  id v36;
  __int16 v37;
  id v38;
  _BYTE v39[128];

  v2 = sub_10043222C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "AutocompleteItemManager - did compute client ranking score", buf, 2u);
  }

  if ((*(unsigned int (**)(void))(*(_QWORD *)(a1 + 56) + 16))())
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
  }
  else
  {
    v4 = objc_msgSend(*(id *)(a1 + 32), "copy");
    objc_msgSend(*(id *)(a1 + 40), "sortWrappedItems:", *(_QWORD *)(a1 + 32));
    if (objc_msgSend(*(id *)(a1 + 40), "useClientRankingScore") && objc_msgSend(v4, "count"))
    {
      v5 = 0;
      while (1)
      {
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectAtIndexedSubscript:", v5));
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", v5));

        if (v6 != v7)
          break;
        if (++v5 >= (unint64_t)objc_msgSend(v4, "count"))
          goto LABEL_12;
      }
      *(_BYTE *)(*(_QWORD *)(a1 + 40) + 98) = 1;
    }
LABEL_12:
    v28 = v4;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "sectionsWithWrappedItems:", *(_QWORD *)(a1 + 32)));
    v9 = objc_msgSend(v8, "mutableCopy");

    objc_msgSend(*(id *)(a1 + 40), "logSortedItemsWithSections:", v9);
    v29 = a1;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(*(id *)(a1 + 48), "count")));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(v9, "count")));
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    obj = v9;
    v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
    if (v12)
    {
      v13 = v12;
      v14 = *(_QWORD *)v32;
      do
      {
        for (i = 0; i != v13; i = (char *)i + 1)
        {
          if (*(_QWORD *)v32 != v14)
            objc_enumerationMutation(obj);
          v16 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)i);
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "items"));
          v18 = objc_msgSend(v17, "copy");

          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "title"));
          v20 = (void *)objc_claimAutoreleasedReturnValue(+[AutocompleteSection sectionWithTitle:items:isQuerySuggestionsSection:](AutocompleteSection, "sectionWithTitle:items:isQuerySuggestionsSection:", v19, v18, objc_msgSend(v16, "isQuerySuggestionsSection")));
          objc_msgSend(v11, "addObject:", v20);

          objc_msgSend(v10, "addObjectsFromArray:", v18);
        }
        v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
      }
      while (v13);
    }

    v21 = sub_10043222C();
    v22 = objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      v23 = objc_msgSend(*(id *)(v29 + 48), "count");
      v24 = objc_msgSend(v11, "count");
      *(_DWORD *)buf = 134218240;
      v36 = v23;
      v37 = 2048;
      v38 = v24;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "AutocompleteItemManager - collected %lu compoundItems and %lu compoundItemGroups", buf, 0x16u);
    }

    v25 = *(_QWORD *)(v29 + 64);
    v26 = objc_msgSend(v10, "copy");
    v27 = objc_msgSend(v11, "copy");
    (*(void (**)(uint64_t, id, id))(v25 + 16))(v25, v26, v27);

  }
}

BOOL sub_1005758E4(id a1, AutocompleteMutableSection *a2, NSDictionary *a3)
{
  void *v3;
  BOOL v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(-[AutocompleteMutableSection items](a2, "items", a3));
  v4 = objc_msgSend(v3, "count") != 0;

  return v4;
}

uint64_t sub_1005772D0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  unsigned int v8;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  BOOL v15;
  _BOOL8 v16;
  id v17;
  id v18;

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "item"));
  v8 = objc_msgSend(v7, "hidden");

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "item"));
  v10 = objc_msgSend(v9, "hidden");

  if (!v8 || v10)
  {
    if ((v8 | v10 ^ 1) == 1)
    {
      if (*(_BYTE *)(a1 + 32))
      {
        objc_msgSend(v5, "clientRankingScore");
        v13 = v12;
        objc_msgSend(v6, "clientRankingScore");
        v15 = v13 <= v14;
        v16 = v13 < v14;
      }
      else
      {
        v17 = objc_msgSend(v5, "priority");
        v18 = objc_msgSend(v6, "priority");
        v15 = (uint64_t)v17 <= (uint64_t)v18;
        v16 = (uint64_t)v17 < (uint64_t)v18;
      }
      if (v15)
        v11 = v16;
      else
        v11 = -1;
    }
    else
    {
      v11 = -1;
    }
  }
  else
  {
    v11 = 1;
  }

  return v11;
}

void sub_100577784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10057779C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1005777AC(uint64_t a1)
{

}

void sub_1005777B4(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;

  if (objc_msgSend(a2, "shouldInterleaveClientResults"))
  {
    v7 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a3));
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v9 = *(void **)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v7;

    *a4 = 1;
  }
}

void sub_100577E44(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ruleWithClientOnlyAutocompleteType:", objc_msgSend(a2, "integerValue")));
  if (v3)
  {
    v4 = v3;
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v3);
    v3 = v4;
  }

}

void sub_100577F5C(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "excludingRuleWithClientOnlyAutocompleteType:", objc_msgSend(a2, "integerValue")));
  if (v3)
  {
    v4 = v3;
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v3);
    v3 = v4;
  }

}

UIImageSymbolConfiguration *sub_100578348(uint64_t a1)
{
  return +[UIImageSymbolConfiguration configurationWithPointSize:weight:](UIImageSymbolConfiguration, "configurationWithPointSize:weight:", a1);
}

id sub_100578B00(uint64_t a1)
{
  uint64_t v2;
  double v3;
  void *v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v2 + 27))
    v3 = *(double *)(v2 + 64);
  else
    v3 = 0.0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v2, "view"));
  objc_msgSend(v4, "setAlpha:", v3);

  return objc_msgSend(*(id *)(a1 + 32), "updateCompassInsets");
}

void sub_1005798A8(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "buttonsContainerViewControllerIfLoaded"));
  objc_msgSend(v2, "showVisibleControls:", *(_QWORD *)(a1 + 40));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "buttonsContainerViewController"));
  objc_msgSend(v3, "setVisibleControls:", *(_QWORD *)(a1 + 40));

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "controlsStackView"));
  objc_msgSend(v4, "layoutIfNeeded");

}

void sub_10057991C(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "controlsStackView"));
  objc_msgSend(v1, "layoutIfNeeded");

}

void sub_100579CF0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "buttonsContainerViewControllerIfLoaded"));
  objc_msgSend(v2, "setVisibleControls:", *(_QWORD *)(a1 + 40));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "buttonsContainerViewControllerIfLoaded"));
  objc_msgSend(v3, "hideNonVisibleControls:", *(_QWORD *)(a1 + 40));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "buttonsContainerViewControllerIfLoaded"));
  objc_msgSend(v4, "refreshControls");

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "controlsStackView"));
  objc_msgSend(v5, "layoutIfNeeded");

}

void sub_100579D7C(uint64_t a1)
{
  void *v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "buttonsContainerViewController"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "view"));
  objc_msgSend(v1, "setAlpha:", 0.0);

}

uint64_t sub_100579DC8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100579DD4(uint64_t a1)
{
  void *v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "buttonsContainerViewController"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "view"));
  objc_msgSend(v1, "setAlpha:", 1.0);

}

void sub_100579E20(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "controlsStackView"));
  objc_msgSend(v1, "layoutIfNeeded");

}

void sub_10057AAC4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "controlsStackView"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "venueFloorViewController"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "closedPlaceholderView"));
  objc_msgSend(v2, "addArrangedSubview:", v4);

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "venueFloorViewController"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "view"));
  objc_msgSend(v7, "addSubview:", v6);

}

void sub_10057AC68(uint64_t a1)
{
  double v2;
  void *v3;
  double v4;
  void *v5;
  id v6;

  v2 = *(double *)(a1 + 40);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "controlsStackViewIfLoaded"));
  objc_msgSend(v3, "setAlpha:", v2);

  v4 = *(double *)(a1 + 40);
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "localSearchViewControllerIfLoaded"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "view"));
  objc_msgSend(v5, "setAlpha:", v4);

}

void sub_10057B770(uint64_t a1, double a2)
{
  double v2;
  void *v3;
  id v4;

  LOBYTE(a2) = *(_BYTE *)(a1 + 40);
  v2 = (double)*(unint64_t *)&a2;
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "localSearchViewController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "view"));
  objc_msgSend(v3, "setAlpha:", v2);

}

id sub_10057C534()
{
  if (qword_1014D2970 != -1)
    dispatch_once(&qword_1014D2970, &stru_1011BBB50);
  return (id)qword_1014D2968;
}

void sub_10057C678(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10057C694(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "settingsTipView"));
  objc_msgSend(v1, "setAlpha:", 0.0);

}

void sub_10057C6C8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_unloadSettingsTipView");

}

void sub_10057D3A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  objc_destroyWeak(location);
  objc_destroyWeak(a9);
  objc_destroyWeak(&a22);
  _Unwind_Resume(a1);
}

void sub_10057D3E0(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id WeakRetained;
  MapsRadarDraft *v5;
  void *v6;
  int v7;
  id v8;

  v2 = sub_10057C534();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v7 = 134349056;
    v8 = WeakRetained;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[%{public}p] Launching TTR from floating control with full archive", (uint8_t *)&v7, 0xCu);

  }
  v5 = objc_opt_new(MapsRadarDraft);
  -[MapsRadarDraft setCollectFullLogArchive:](v5, "setCollectFullLogArchive:", 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[MapsRadarController sharedInstance](MapsRadarController, "sharedInstance"));
  objc_msgSend(v6, "launchTTRWithRadar:", v5);

}

void sub_10057D4CC(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id WeakRetained;
  MapsRadarDraft *v5;
  void *v6;
  int v7;
  id v8;

  v2 = sub_10057C534();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v7 = 134349056;
    v8 = WeakRetained;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[%{public}p] Launching TTR from floating control with regular archive", (uint8_t *)&v7, 0xCu);

  }
  v5 = objc_opt_new(MapsRadarDraft);
  -[MapsRadarDraft setCollectFullLogArchive:](v5, "setCollectFullLogArchive:", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[MapsRadarController sharedInstance](MapsRadarController, "sharedInstance"));
  objc_msgSend(v6, "launchTTRWithRadar:", v5);

}

void sub_10057EDE4(uint64_t a1, double a2)
{
  double v2;
  void *v3;
  id v4;

  LOBYTE(a2) = *(_BYTE *)(a1 + 40);
  v2 = (double)*(unint64_t *)&a2;
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "localSearchViewController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "view"));
  objc_msgSend(v3, "setAlpha:", v2);

}

void sub_1005800BC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "FloatingControlsViewController");
  v2 = (void *)qword_1014D2968;
  qword_1014D2968 = (uint64_t)v1;

}

id sub_1005801E4()
{
  if (qword_1014D2980 != -1)
    dispatch_once(&qword_1014D2980, &stru_1011BBB70);
  return (id)qword_1014D2978;
}

id sub_100580330(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  void *v6;
  uint64_t v7;

  v2 = *(float *)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 32), "cameraPitchThreshold");
  if (v3 <= v2)
  {
    v6 = *(void **)(a1 + 32);
    v7 = 5;
  }
  else
  {
    v4 = *(float *)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 32), "cameraPitchThreshold");
    v6 = *(void **)(a1 + 32);
    if (v4 <= -v5)
      v7 = 4;
    else
      v7 = 2;
  }
  return objc_msgSend(v6, "setCurrentState:", v7);
}

void sub_1005803C4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFScanningStateCameraPitchMonitor");
  v2 = (void *)qword_1014D2978;
  qword_1014D2978 = (uint64_t)v1;

}

id sub_1005808F8()
{
  if (qword_1014D29B0 != -1)
    dispatch_once(&qword_1014D29B0, &stru_1011BBBD0);
  return (id)qword_1014D29A8;
}

void sub_100580D28(id a1)
{
  TrafficIncidentsDateFormatter *v1;
  void *v2;

  v1 = objc_alloc_init(TrafficIncidentsDateFormatter);
  v2 = (void *)qword_1014D2988;
  qword_1014D2988 = (uint64_t)v1;

}

void sub_100580E5C(id a1)
{
  TrafficIncidentsDateFormatter *v1;
  void *v2;

  v1 = objc_alloc_init(TrafficIncidentsDateFormatter);
  v2 = (void *)qword_1014D2998;
  qword_1014D2998 = (uint64_t)v1;

}

void sub_100580FC0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "NavTrafficIncidentViewComposer");
  v2 = (void *)qword_1014D29A8;
  qword_1014D29A8 = (uint64_t)v1;

}

void sub_100582848(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v2, "setAlpha:", 0.0);

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "view"));
  objc_msgSend(v3, "setAlpha:", 1.0);

}

void sub_1005828A4(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "completeTransition:", 1);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "view"));
  objc_msgSend(v2, "setAlpha:", 1.0);

}

void sub_1005830EC(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_updateIfNeeded");
    WeakRetained = v2;
  }

}

id sub_100583560()
{
  if (qword_1014D29C0 != -1)
    dispatch_once(&qword_1014D29C0, &stru_1011BBCA8);
  return (id)qword_1014D29B8;
}

uint64_t sub_100584920(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_100585198(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapView"));
  objc_msgSend(v2, "setCamera:animated:", *(_QWORD *)(a1 + 40), 1);

}

id sub_100585B74(uint64_t a1, void *a2)
{
  id v3;
  char *v4;
  void *v5;
  void *v6;

  v3 = a2;
  if ((objc_msgSend(v3, "isServerProvidedWaypoint") & 1) != 0
    || (v4 = (char *)objc_msgSend(v3, "anchorPointType"), (unint64_t)(v4 - 1) >= 2)
    && (v4 != (char *)3 || (objc_msgSend(v3, "isCoordinate") & 1) != 0))
  {
    v5 = 0;
  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapView"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[POIShapeFactory composedWaypointPOIShapeWithMapView:composedWaypoint:](POIShapeFactory, "composedWaypointPOIShapeWithMapView:composedWaypoint:", v6, v3));

  }
  return v5;
}

id sub_100585C90(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;

  v3 = a2;
  if ((objc_msgSend(v3, "isServerProvidedWaypoint") & 1) != 0)
  {
    v4 = 0;
  }
  else
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapView"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[POIShapeFactory composedWaypointPOIShapeWithMapView:composedWaypoint:](POIShapeFactory, "composedWaypointPOIShapeWithMapView:composedWaypoint:", v5, v3));

  }
  return v4;
}

void sub_100586A3C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "MapCameraController");
  v2 = (void *)qword_1014D29B8;
  qword_1014D29B8 = (uint64_t)v1;

}

void sub_100587BE4(id a1, UIViewControllerTransitionCoordinatorContext *a2)
{
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = sub_100431B2C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "ControlContainer viewWillTransitionToSize animation block", v4, 2u);
  }

}

void sub_100587C48(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  _QWORD v5[4];
  id v6;
  __int128 v7;
  _QWORD block[5];
  uint8_t buf[16];

  v2 = sub_100431B2C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "ControlContainer viewWillTransitionToSize animation end", buf, 2u);
  }

  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 424), "isRoutePlanningPresented"))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chromeViewController"));
    objc_msgSend(v4, "setNeedsUpdateComponent:animated:", CFSTR("mapInsets"), 0);

    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100587D8C;
    block[3] = &unk_1011AC860;
    block[4] = *(_QWORD *)(a1 + 32);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  }
  else
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100587DA0;
    v5[3] = &unk_1011AED30;
    v7 = *(_OWORD *)(a1 + 48);
    v6 = *(id *)(a1 + 40);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v5);

  }
}

id sub_100587D8C(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 424), "ensureRoutePlanningContentIsVisible");
}

id sub_100587DA0(uint64_t a1)
{
  id result;

  result = (id)CLLocationCoordinate2DIsValid(*(CLLocationCoordinate2D *)(a1 + 40));
  if ((_DWORD)result)
    return objc_msgSend(*(id *)(a1 + 32), "setCenterCoordinate:animated:", 0, *(double *)(a1 + 40), *(double *)(a1 + 48));
  return result;
}

void sub_1005887BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1005887DC(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;
  id v5;
  id v6;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "currentViewController"));

  if (v5 == v3)
  {
    v6 = objc_loadWeakRetained(v2);
    objc_msgSend(v6, "updateContentInjection");

  }
}

void sub_10058A290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_10058A2B0(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  void *v4;
  void *v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[_UIBackgroundViewConfiguration defaultPlainListCellConfigurationForState:](_UIBackgroundViewConfiguration, "defaultPlainListCellConfigurationForState:", a2));
    objc_msgSend(v4, "setBackgroundColorMode:", 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor clearColor](UIColor, "clearColor"));
    objc_msgSend(v4, "setBackgroundColor:", v5);

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

id sub_10058BB28()
{
  if (qword_1014D29E0 != -1)
    dispatch_once(&qword_1014D29E0, &stru_1011BBDC0);
  return (id)qword_1014D29D8;
}

void sub_10058CA5C(id a1, UIAction *a2)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[PedestrianARFloatingDebugViewController sharedInstance](PedestrianARFloatingDebugViewController, "sharedInstance"));
  objc_msgSend(v2, "composeTTR");

}

BOOL sub_10058D270(id a1, PedestrianARCustomFeatureAnnotation *a2, unint64_t a3, BOOL *a4)
{
  return -[PedestrianARCustomFeatureAnnotation isActive](a2, "isActive", a3, a4);
}

uint64_t sub_10058D8E4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  unsigned int v9;
  uint64_t v10;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "labelMarker"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "arWalkingFeature"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "arWalkingFeature"));
  if (objc_msgSend(v5, "isEqual:", v6))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "labelMarker"));
    v8 = objc_msgSend(v7, "featureLabelIdentifier");
    if (v8 == objc_msgSend(*(id *)(a1 + 32), "featureLabelIdentifier")
      && *(unsigned __int8 *)(a1 + 40) == objc_msgSend(v3, "isActive"))
    {
      v9 = objc_msgSend(v3, "isOccluded");
      v10 = v9 ^ objc_msgSend(*(id *)(a1 + 32), "isOccluded") ^ 1;
    }
    else
    {
      v10 = 0;
    }

  }
  else
  {
    v10 = 0;
  }

  return v10;
}

void sub_10058E2A8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  const __CFString *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapView"));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "detailedDescription"));
  v4 = (void *)v3;
  if (v3)
    v5 = (const __CFString *)v3;
  else
    v5 = &stru_1011EB268;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[MapsRadarTextAttachment attachmentWithFileName:text:](MapsRadarTextAttachment, "attachmentWithFileName:text:", CFSTR("PedestrianARVKMapViewDiagnostics-debug.txt"), v5));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[MapsRadarKeyword keywordWithName:number:](MapsRadarKeyword, "keywordWithName:number:", CFSTR("MAPS377"), 1281664));
  v8 = *(void **)(a1 + 40);
  v13 = v6;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v13, 1));
  objc_msgSend(v8, "addAttachments:", v9);

  v10 = *(void **)(a1 + 40);
  v12 = v7;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v12, 1));
  objc_msgSend(v10, "addKeywords:", v11);

  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_10058E52C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "PedestrianARDebugMapAnnotationsTask");
  v2 = (void *)qword_1014D29D8;
  qword_1014D29D8 = (uint64_t)v1;

}

UIColor *__cdecl sub_10058EB30(id a1, MapsTheme *a2)
{
  return -[MapsTheme keyColor](a2, "keyColor");
}

void sub_10058F4C4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_10058F4E0(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v9[4];
  id v10;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "subscriptionManager"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "subscription"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "identifier"));
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10058F5C0;
    v9[3] = &unk_1011ACF90;
    v10 = v3;
    objc_msgSend(v6, "removeSubscriptionWithIdentifier:callbackQueue:completionHandler:", v8, &_dispatch_main_q, v9);

  }
}

void sub_10058F5C0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  id v12;

  v4 = a3;
  if (v4)
  {
    v5 = sub_100431D5C();
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "subscription"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "identifier"));
      v9 = 138412546;
      v10 = v8;
      v11 = 2112;
      v12 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Error removing expired subscription: %@, error: %@", (uint8_t *)&v9, 0x16u);

    }
  }

}

void sub_10058F8F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10058F920(uint64_t a1, int a2)
{
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v9 = WeakRetained;
    if (a2)
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "diffableDataSource"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "snapshot"));

      objc_msgSend(v6, "deleteItemsWithIdentifiers:", *(_QWORD *)(a1 + 32));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "diffableDataSource"));
      objc_msgSend(v7, "applySnapshot:animatingDifferences:", v6, 1);

    }
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "offlineDelegate"));
    objc_msgSend(v8, "dismissExpiredViewControllerIfNecessary");

    WeakRetained = v9;
  }

}

BOOL sub_10058FAEC(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  unsigned int v4;
  void *v5;
  void *v6;
  void *v7;
  _BOOL8 v8;

  v1 = a1;
  if (GEOSupportsOfflineMaps(v1, v2))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "regulatoryRegionID"));
    v4 = objc_msgSend(v3, "unsignedIntValue");
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[GEOResourceManifestManager modernManager](GEOResourceManifestManager, "modernManager"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "activeTileGroup"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "offlineMetadata"));
    v8 = v4 == objc_msgSend(v7, "regulatoryRegionId");

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

void sub_10059022C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10059026C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18;
  id v19;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v11 = WeakRetained;
  if (WeakRetained)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "subscriptionManager"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "subscription"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "identifier"));
    v15 = &_dispatch_main_q;
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_1005903F4;
    v16[3] = &unk_1011BBE30;
    v17 = *(id *)(a1 + 32);
    objc_copyWeak(&v19, (id *)(a1 + 40));
    v18 = v9;
    objc_msgSend(v12, "removeSubscriptionWithIdentifier:callbackQueue:completionHandler:", v14, &_dispatch_main_q, v16);

    +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 384, 85, 0);
    objc_destroyWeak(&v19);

  }
}

void sub_1005903DC(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1005903F4(uint64_t a1, int a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  id WeakRetained;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  id v21;

  v5 = a3;
  if (v5)
  {
    v6 = sub_100431D5C();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "subscription"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
      *(_DWORD *)buf = 138412546;
      v19 = v9;
      v20 = 2112;
      v21 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Error removing expired subscription: %@, error: %@", buf, 0x16u);

    }
  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v11 = WeakRetained;
  if (WeakRetained)
  {
    if (a2)
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "diffableDataSource"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "snapshot"));

      v17 = *(_QWORD *)(a1 + 32);
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v17, 1));
      objc_msgSend(v13, "deleteItemsWithIdentifiers:", v14);

      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "diffableDataSource"));
      objc_msgSend(v15, "applySnapshot:animatingDifferences:", v13, 1);

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "offlineDelegate"));
    objc_msgSend(v16, "dismissExpiredViewControllerIfNecessary");

  }
}

void sub_1005905A0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id WeakRetained;
  void *v6;
  id v7;

  v7 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v6 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "_restoreSubscription:completionHandler:", *(_QWORD *)(a1 + 32), v7);
    +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 398, 85, 0);
  }

}

void sub_100590768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100590794(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    if ((_DWORD)a2)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "diffableDataSource"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "snapshot"));

      v12 = *(_QWORD *)(a1 + 32);
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v12, 1));
      objc_msgSend(v7, "deleteItemsWithIdentifiers:", v8);

      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "diffableDataSource"));
      objc_msgSend(v9, "applySnapshot:animatingDifferences:", v7, 1);

    }
    v10 = *(_QWORD *)(a1 + 40);
    if (v10)
      (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v10, a2);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "offlineDelegate"));
    objc_msgSend(v11, "dismissExpiredViewControllerIfNecessary");

  }
}

void sub_100590AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100590AE4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *WeakRetained;
  id v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  int v12;
  id v13;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (!v5 && v6)
    {
      v8 = sub_100431D5C();
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v12 = 138412290;
        v13 = v6;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Error fetching expired subscriptions: %@", (uint8_t *)&v12, 0xCu);
      }

    }
    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "_geo_map:", &stru_1011BBEC0));
    v11 = (void *)WeakRetained[15];
    WeakRetained[15] = v10;

    objc_msgSend(WeakRetained, "_updateContentAnimated:", *(unsigned __int8 *)(a1 + 40));
  }

}

id sub_100590C00(id a1, GEOMapDataSubscription *a2)
{
  GEOMapDataSubscription *v2;
  _OfflineMapsExpiredSubscription *v3;

  v2 = a2;
  v3 = -[_OfflineMapsExpiredSubscription initWithSubscription:]([_OfflineMapsExpiredSubscription alloc], "initWithSubscription:", v2);

  return v3;
}

void sub_100591054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a16);
  _Unwind_Resume(a1);
}

void sub_100591080(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "_restoreSubscription:completionHandler:", *(_QWORD *)(a1 + 32), 0);
    WeakRetained = v3;
  }

}

void sub_10059175C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100591778(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  _QWORD v6[4];
  id v7;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "startedTest");
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10059188C;
    v6[3] = &unk_1011AD288;
    objc_copyWeak(&v7, v1);
    +[PPTNotificationCenter addOnceObserverForName:object:usingBlock:](PPTNotificationCenter, "addOnceObserverForName:object:usingBlock:", CFSTR("PPTTest_SearchHome_DidSetActive"), 0, v6);
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v4, "addObserver:selector:name:object:", v3, "didUpdateDataFetcher:", CFSTR("PPTTest_SearchHome_DidUpdateDataFetcher"), 0);

    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "testCoordinator"));
    objc_msgSend(v5, "pptTestEnterSearchMode");

    objc_destroyWeak(&v7);
  }

}

void sub_100591874(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10059188C(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "object"));
    objc_msgSend(WeakRetained, "setSearchHomeDataSource:", v4);

    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "searchHomeDataSource"));
    objc_msgSend(WeakRetained, "setNumberOfDataFetchers:", objc_msgSend(v5, "_ppt_numberOfDataFetchers"));

    objc_msgSend(WeakRetained, "startedSubTest:", CFSTR("searchHomeCollectData"));
  }

}

id sub_100591A3C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "continueAfterCollectingDataFromDataFetchers");
}

void sub_100591B20(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_100591B40(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  _QWORD v3[5];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "finishedSubTest:", CFSTR("guidesHomeCollectData"));
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100591BC0;
    v3[3] = &unk_1011AC860;
    v3[4] = v2;
    objc_msgSend(v2, "_dispatchAfterShortDelay:", v3);
  }

}

id sub_100591BC0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "runScrollTest");
}

id sub_100591BC8(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchHomeDataSource"));
  objc_msgSend(v2, "_ppt_selectExploreGuides");

  return objc_msgSend(*(id *)(a1 + 32), "startedSubTest:", CFSTR("guidesHomeCollectData"));
}

void sub_100591DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100591E2C(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "finishedSubTest:", *(_QWORD *)(a1 + 32));
    objc_msgSend(v3, "finishedTest");
    WeakRetained = v3;
  }

}

uint64_t sub_100591F08(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1005925FC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD v21[4];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chromeViewController"));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "setChromeViewController:", v2);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_recenterButton"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "overlayView"));
  objc_msgSend(v4, "addSubview:", v3);

  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "widthAnchor"));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "constraintEqualToConstant:", 60.0));
  v21[0] = v19;
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "heightAnchor"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "widthAnchor"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "constraintEqualToAnchor:", v17));
  v21[1] = v16;
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "leadingAnchor"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "innerLayoutGuide"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "leadingAnchor"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "constraintEqualToAnchor:", v6));
  v21[2] = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "innerLayoutGuide"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "bottomAnchor"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "bottomAnchor"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "constraintEqualToAnchor:", v10));
  v21[3] = v11;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v21, 4));
  +[NSLayoutConstraint activateConstraints:](NSLayoutConstraint, "activateConstraints:", v12);

  objc_msgSend(*(id *)(a1 + 32), "_updateRecenterButtonVisibility");
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 96), "displayedItemIndexForAnalytics"));
  objc_msgSend(v13, "captureUserAction:onTarget:eventValue:transitStep:", 3065, 610, 0, v14);

}

void sub_1005928A8(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "iosBasedChromeViewController"));
  objc_msgSend(v2, "updateViewMode:animated:", 3, *(unsigned __int8 *)(a1 + 40));

}

void sub_100592998(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 112);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 88), "overlayView"));
  objc_msgSend(v3, "removeDebugViewsFromView:", v4);

  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(v5 + 96);
  if (v6)
  {
    objc_msgSend(*(id *)(v5 + 88), "popLastViewControllerFromViewController:animated:useDefaultContaineeLayout:", v6, *(unsigned __int8 *)(a1 + 40), 1);
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(void **)(v7 + 96);
    *(_QWORD *)(v7 + 96) = 0;

  }
}

void sub_100593564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100593584(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id WeakRetained;
  void *v9;
  void *v10;
  id v11;

  v11 = a2;
  v7 = a3;
  if (*(_QWORD *)(a1 + 40) != a4)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    if (WeakRetained)
    {
      v9 = WeakRetained;
      v10 = (void *)*((_QWORD *)WeakRetained + 12);
      if (v10)
        objc_msgSend(v10, "updateForClusteredLegSelectedRideIndexChange");

    }
  }

}

id sub_100593704(uint64_t a1)
{
  uint64_t v1;
  __CFString **v2;

  if (*(_QWORD *)(a1 + 32))
  {
    v1 = 0;
    v2 = off_1011AD128;
  }
  else
  {
    v1 = *(_QWORD *)(a1 + 40);
    v2 = off_1011AD120;
  }
  return +[PPTNotificationCenter postNotificationIfNeededWithName:object:userInfo:](PPTNotificationCenter, "postNotificationIfNeededWithName:object:userInfo:", *v2, v1, 0);
}

void sub_1005946BC(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
  objc_msgSend(v2, "captureUserAction:onTarget:forAdvisory:", 41, 46, *(_QWORD *)(a1 + 32));

}

void sub_1005949A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1005949D4(uint64_t a1, int a2)
{
  id WeakRetained;
  id v4;
  NSObject *v5;
  id v6;
  objc_class *v7;
  NSString *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  NSObject *v17;
  _BOOL4 v18;
  id v19;
  objc_class *v20;
  NSString *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  objc_class *v27;
  NSString *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  int v36;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = sub_100431C0C();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      goto LABEL_9;
    v6 = WeakRetained;
    v7 = (objc_class *)objc_opt_class(v6);
    v8 = NSStringFromClass(v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    if ((objc_opt_respondsToSelector(v6, "accessibilityIdentifier") & 1) != 0)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "performSelector:", "accessibilityIdentifier"));
      v11 = v10;
      if (v10 && !objc_msgSend(v10, "isEqualToString:", v9))
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v9, v6, v11));

        goto LABEL_8;
      }

    }
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v9, v6));
LABEL_8:

    *(_DWORD *)buf = 138543618;
    v34 = v12;
    v35 = 1024;
    v36 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[%{public}@] User exited VLF Crowdsourcing permission card with answer: %d", buf, 0x12u);

LABEL_9:
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "iosBasedChromeViewController"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "userLocationView"));
    v15 = objc_msgSend(v14, "vlfMode");

    v16 = sub_100431C0C();
    v17 = objc_claimAutoreleasedReturnValue(v16);
    v18 = os_log_type_enabled(v17, OS_LOG_TYPE_INFO);
    if (v15)
    {
      if (!v18)
      {
LABEL_17:

        objc_msgSend(WeakRetained, "showVLF");
        goto LABEL_26;
      }
      v19 = WeakRetained;
      v20 = (objc_class *)objc_opt_class(v19);
      v21 = NSStringFromClass(v20);
      v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
      if ((objc_opt_respondsToSelector(v19, "accessibilityIdentifier") & 1) != 0)
      {
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "performSelector:", "accessibilityIdentifier"));
        v24 = v23;
        if (v23 && !objc_msgSend(v23, "isEqualToString:", v22))
        {
          v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v22, v19, v24));

          goto LABEL_16;
        }

      }
      v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v22, v19));
LABEL_16:

      *(_DWORD *)buf = 138543362;
      v34 = v25;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "[%{public}@] VLF is still eligible to be shown; showing now",
        buf,
        0xCu);

      goto LABEL_17;
    }
    if (!v18)
    {
LABEL_25:

      goto LABEL_26;
    }
    v26 = WeakRetained;
    v27 = (objc_class *)objc_opt_class(v26);
    v28 = NSStringFromClass(v27);
    v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
    if ((objc_opt_respondsToSelector(v26, "accessibilityIdentifier") & 1) != 0)
    {
      v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "performSelector:", "accessibilityIdentifier"));
      v31 = v30;
      if (v30 && !objc_msgSend(v30, "isEqualToString:", v29))
      {
        v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v29, v26, v31));

        goto LABEL_24;
      }

    }
    v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v29, v26));
LABEL_24:

    *(_DWORD *)buf = 138543362;
    v34 = v32;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "[%{public}@] VLF is no longer eligible to be shown", buf, 0xCu);

    goto LABEL_25;
  }
LABEL_26:

}

void sub_100595748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100595760(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;

  v7 = a3;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  if (*(_BYTE *)(v8 + 24))
  {
    v13 = v7;
    v9 = *(void **)(a1 + 32);
    v10 = a2;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectAtIndexedSubscript:", a4));
    LODWORD(v9) = objc_msgSend(v10, "isEqual:", v11);

    if ((_DWORD)v9)
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectAtIndexedSubscript:", a4));
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v13, "isEqual:", v12);

    }
    else
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
    }

    v7 = v13;
  }
  else
  {
    *(_BYTE *)(v8 + 24) = 0;
  }

}

void sub_10059597C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v4;

  v3 = *(void **)(a1 + 32);
  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: %@"), a2, a3));
  objc_msgSend(v3, "addObject:", v4);

}

void sub_100595B08(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a3;
  v5 = a2;
  v6 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "defaults"));
  v8 = v7;
  if (v6 == v9)
    objc_msgSend(v7, "removeObjectForKey:", v5);
  else
    objc_msgSend(v7, "setObject:forKey:", v9, v5);

}

id sub_1005965A0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "loadSubCategories");
}

id sub_100596FC4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "initCurrentListSession");
}

void sub_100599784(uint64_t a1, uint64_t a2)
{
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[ShareItem shareItemForCurrentLocationIncludingPrintActivity:withBackingMapItem:](ShareItem, "shareItemForCurrentLocationIncludingPrintActivity:withBackingMapItem:", 0, a2));
  objc_msgSend(*(id *)(a1 + 32), "shareItem:sourceView:completion:", v3, *(_QWORD *)(a1 + 40), 0);

}

void sub_1005997D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v7;
  unsigned int v8;
  void *v9;
  void *v10;
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (!a2)
  {
    v13 = v5;
    v14 = v4;
    v15 = v2;
    v16 = v3;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[MKLocationManager sharedLocationManager](MKLocationManager, "sharedLocationManager"));
    v8 = objc_msgSend(v7, "isAuthorizedForPreciseLocation");

    if (v8)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[MKLocationManager sharedLocationManager](MKLocationManager, "sharedLocationManager"));
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_1005998BC;
      v11[3] = &unk_1011B81D0;
      v12 = *(id *)(a1 + 32);
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "singleLocationUpdateWithDesiredAccuracy:handler:", v11, kCLLocationAccuracyBest));

      objc_msgSend(v10, "start");
    }
  }
}

void sub_1005998BC(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[SearchResult currentLocationSearchResult](SearchResult, "currentLocationSearchResult"));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100599950;
  v5[3] = &unk_1011B81A8;
  v3 = *(id *)(a1 + 32);
  v6 = v2;
  v7 = v3;
  v4 = v2;
  objc_msgSend(v4, "tryUpdatingCurrentLocationSearchResultWithCompletion:", v5);

}

void sub_100599950(uint64_t a1, int a2)
{
  uint64_t v2;
  id v3;

  if (a2)
  {
    v2 = *(_QWORD *)(a1 + 40);
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapItem"));
    (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);

  }
}

void sub_100599EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100599ED4(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id *WeakRetained;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;

  v11 = a4;
  v6 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_extractLayoutFormFromResponse:", v6));

  if (v8)
  {
    v9 = v11;
  }
  else
  {
    v10 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("Layout config not included"), -1, 0));

    v9 = (id)v10;
  }
  v12 = v9;
  if (!v9 && *(_BYTE *)(a1 + 48))
    +[RAPLayoutCache setConfig:forLayoutType:](RAPLayoutCache, "setConfig:forLayoutType:", v8, objc_msgSend(WeakRetained[3], "layoutType"));
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

id sub_10059A3D4(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = objc_msgSend(a2, "mutableCopy");
  objc_msgSend(v3, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 32), NSFontAttributeName);
  v4 = objc_msgSend(v3, "copy");

  return v4;
}

id sub_10059A598(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;

  v3 = objc_msgSend(a2, "mutableCopy");
  if (*(_BYTE *)(a1 + 32))
    v4 = objc_claimAutoreleasedReturnValue(+[UIFont _maps_fontWithTextStyle:weight:compatibleWithTraitCollection:](UIFont, "_maps_fontWithTextStyle:weight:compatibleWithTraitCollection:", UIFontTextStyleBody, 0, UIFontWeightSemibold));
  else
    v4 = objc_claimAutoreleasedReturnValue(+[UIFont systemFontOfSize:weight:](UIFont, "systemFontOfSize:weight:", 17.0, UIFontWeightSemibold));
  v5 = (void *)v4;
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v4, NSFontAttributeName);

  return v3;
}

void sub_10059AD40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

_QWORD *sub_10059AD64(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  void *v3;
  void *v4;

  ++*(_QWORD *)(result[4] + 48);
  if (*((_BYTE *)result + 56))
  {
    v1 = result;
    v2 = (_QWORD *)result[4];
    v3 = (void *)v2[3];
    if (!v3)
    {
      objc_msgSend(v2, "_loadLookAroundContainerView");
      objc_msgSend((id)v1[4], "_updateConstraints");
      objc_msgSend((id)v1[4], "_applyViewPropertiesForState:", v1[6]);
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v1[4], "view"));
      objc_msgSend(v4, "layoutIfNeeded");

      v3 = *(void **)(v1[4] + 24);
    }
    return _objc_msgSend(v3, "setMapItem:wantsCloseUpView:", v1[5], 0);
  }
  return result;
}

void sub_10059AE10(uint64_t a1)
{
  int v1;
  uint64_t v2;
  void *v4;
  id v5;

  v1 = *(unsigned __int8 *)(a1 + 48);
  v2 = *(_QWORD *)(a1 + 32);
  if (v1 != *(unsigned __int8 *)(v2 + 32))
  {
    *(_BYTE *)(v2 + 32) = v1;
    objc_msgSend(*(id *)(a1 + 32), "_invalidateConstraints");
    objc_msgSend(*(id *)(a1 + 32), "_updateConstraints");
    objc_msgSend(*(id *)(a1 + 32), "_applyViewPropertiesForState:", *(_QWORD *)(a1 + 40));
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "superview"));
    objc_msgSend(v4, "layoutIfNeeded");

  }
}

void sub_10059AEA4(uint64_t a1)
{
  id WeakRetained;
  uint64_t v2;
  BOOL v3;
  BOOL v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  id *v9;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = *((_QWORD *)WeakRetained + 6);
    v3 = v2 == 1;
    v4 = v2 < 1;
    v5 = v2 - 1;
    if (!v4)
    {
      *((_QWORD *)WeakRetained + 6) = v5;
      if (v3)
      {
        v9 = (id *)WeakRetained;
        v6 = *((id *)WeakRetained + 8);
        if (objc_msgSend(v6, "_hasLookAroundStorefront"))
          v7 = 3;
        else
          v7 = 0;
        objc_msgSend(v9, "_applyViewPropertiesForState:", v7);
        if (objc_msgSend(v6, "_hasLookAroundStorefront"))
        {
          v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9[3], "lookAroundViewIfPresent"));

          objc_msgSend(v8, "moveToCloseUpView");
          v6 = v8;
        }
        else
        {
          objc_msgSend(v9, "_unloadLookAroundContainerView");
        }

        WeakRetained = v9;
      }
    }
  }

}

void sub_10059CD4C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;

  v23 = a2;
  v5 = a3;
  if (!v5 && objc_msgSend(v23, "count"))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "firstObject"));
    v7 = objc_msgSend(objc_alloc((Class)MKPlacemark), "initWithPlacemark:", v6);
    v8 = objc_msgSend(objc_alloc((Class)MKMapItem), "initWithPlacemark:", v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "_addressFormattedAsTitlesForMapRect:", *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72)));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "firstObject"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[UIDevice currentDevice](UIDevice, "currentDevice"));
    v12 = objc_msgSend(v11, "userInterfaceIdiom");

    if (v12 != (id)5)
    {
      v16 = *(_QWORD *)(a1 + 32);
      if (v16 && v10)
      {
        v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "localizedStringForKey:value:table:", CFSTR(" — "), CFSTR("localized string not found"), 0));
        v19 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@%@%@"), v16, v18, v10));

      }
      else
      {
        if (v16)
          v20 = *(void **)(a1 + 32);
        else
          v20 = v10;
        v19 = v20;
      }
      goto LABEL_20;
    }
    if ((unint64_t)objc_msgSend(v9, "count") >= 2
      && (v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectAtIndexedSubscript:", 1))) != 0)
    {
      v14 = (void *)v13;
      v15 = v10;
      if (v10 != (void *)v13)
      {
        if ((objc_msgSend(v10, "isEqual:", v13) & 1) == 0)
        {
          v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "localizedStringForKey:value:table:", CFSTR(" — "), CFSTR("localized string not found"), 0));
          v19 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@%@%@"), v10, v21, v14));

          goto LABEL_15;
        }
        v15 = v14;
      }
    }
    else
    {
      v15 = 0;
    }
    v19 = v10;
    v14 = v15;
LABEL_15:

LABEL_20:
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

    goto LABEL_21;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
LABEL_21:

}

void sub_10059D390(id a1, BOOL a2)
{
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, &stru_1011BC050);
}

void sub_10059D3A4(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v1, "postNotificationName:object:userInfo:", CFSTR("UserProfileDidOpenProfilePageNotification"), 0, 0);

}

void sub_10059DC94(uint64_t a1)
{
  void *v2;
  id WeakRetained;
  id v4;
  void *v5;
  void *v6;
  id v7;

  objc_msgSend(*(id *)(a1 + 32), "setCompassEnabled:", 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
  objc_msgSend(v2, "captureUserAction:onTarget:eventValue:", 4, 601, 0);

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 40) + 456));
  objc_msgSend(WeakRetained, "setUseBackdropFullScreen:", 0);

  v4 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 40) + 456));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "view"));
  objc_msgSend(v5, "setNeedsLayout");

  v7 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 40) + 456));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "view"));
  objc_msgSend(v6, "layoutIfNeeded");

}

id sub_10059E5B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 32), "closeRoutePlanningViewController:withSender:", a2, a3);
}

void sub_10059E844(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_10059E860(uint64_t a1)
{
  void *v1;
  void *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "mapSelectionManager"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "mapView"));
  objc_msgSend(v2, "_deselectLabelMarkerAnimated:", 1);

}

void sub_10059E974(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_10059E990(uint64_t a1)
{
  void *v1;
  void *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "mapSelectionManager"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "mapView"));
  objc_msgSend(v2, "_deselectLabelMarkerAnimated:", 1);

}

void sub_10059F490(uint64_t a1, void *a2, uint64_t a3)
{
  void *v3;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  id v12;

  v12 = a2;
  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 424), "isActive"))
  {
    v6 = *(_QWORD *)(a1 + 40);
    if (v6)
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "lineItem"));
      v7 = objc_msgSend(v3, "muid");
      if (v7 == objc_msgSend(*(id *)(a1 + 40), "muid"))
      {

LABEL_11:
        v11 = *(void **)(a1 + 48);
        if (v12)
        {
          objc_msgSend(v11, "setLineItem:labelMarker:loading:preferredLayout:", v12, 0, 0, 0);
          goto LABEL_15;
        }
        v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "lineItem"));
        objc_msgSend(v11, "setLineItem:labelMarker:loading:preferredLayout:", v3, 0, 0, 0);
LABEL_14:

        goto LABEL_15;
      }
      if (!a3)
        goto LABEL_14;
    }
    else if (!a3)
    {
      goto LABEL_15;
    }
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "lineItem"));
    v9 = objc_msgSend(v8, "muid");
    v10 = objc_msgSend(*(id *)(a1 + 40), "muid");

    if (v6)
    if (v9 == v10)
      goto LABEL_11;
  }
LABEL_15:

}

void sub_10059FF18(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchModeViewController"));
  objc_msgSend(v2, "showSearchResults:", *(_QWORD *)(a1 + 40));

}

void sub_1005A031C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1005A0354(uint64_t a1, void *a2)
{
  id *WeakRetained;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;

  v10 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "userInfo"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("ContainerContainee")));

  if (WeakRetained)
  {
    v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "object"));
    v7 = objc_loadWeakRetained(WeakRetained + 57);

    if (v6 == v7)
    {
      if (v5)
      {
        v8 = objc_loadWeakRetained(WeakRetained + 57);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "currentViewController"));
        objc_msgSend(WeakRetained, "containerViewControllerWillPresentContainee:overContainee:", v5, v9);

      }
    }
  }

}

void sub_1005A0438(uint64_t a1, void *a2)
{
  id *WeakRetained;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;

  v10 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "userInfo"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("ContainerContainee")));

  if (WeakRetained)
  {
    v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "object"));
    v7 = objc_loadWeakRetained(WeakRetained + 57);

    if (v6 == v7)
    {
      if (v5)
      {
        v8 = objc_loadWeakRetained(WeakRetained + 57);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "currentViewController"));
        objc_msgSend(WeakRetained, "containerViewControllerDidResignContainee:toContainee:", v5, v9);

      }
    }
  }

}

void sub_1005A0AE4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  id v6;
  void *v7;
  objc_class *v8;
  NSString *v9;
  void *v10;
  void *v11;
  void *v12;
  __CFString *v13;
  void *v14;
  void *v15;
  uint8_t buf[4];
  __CFString *v17;
  __int16 v18;
  id v19;

  v3 = a2;
  v4 = sub_10043245C();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v6 = *(id *)(a1 + 32);
    v7 = v6;
    if (!v6)
    {
      v13 = CFSTR("<nil>");
      goto LABEL_10;
    }
    v8 = (objc_class *)objc_opt_class(v6);
    v9 = NSStringFromClass(v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    if ((objc_opt_respondsToSelector(v7, "accessibilityIdentifier") & 1) != 0)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "performSelector:", "accessibilityIdentifier"));
      v12 = v11;
      if (v11 && !objc_msgSend(v11, "isEqualToString:", v10))
      {
        v13 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v10, v7, v12));

        goto LABEL_8;
      }

    }
    v13 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v10, v7));
LABEL_8:

LABEL_10:
    *(_DWORD *)buf = 138543618;
    v17 = v13;
    v18 = 2112;
    v19 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[%{public}@] Launching placecard for shortcut entry: %@", buf, 0x16u);

  }
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_searchResultFromMapsFavoriteItem:", v3));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapSelectionManager"));
  objc_msgSend(v15, "injectAndSelectSearchResult:", v14);

}

void sub_1005A0CB4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  id v6;
  void *v7;
  objc_class *v8;
  NSString *v9;
  void *v10;
  void *v11;
  void *v12;
  __CFString *v13;
  void *v14;
  SearchFieldItem *v15;
  void *v16;
  SearchFieldItem *v17;
  DirectionItem *v18;
  void *v19;
  char *v20;
  uint64_t v21;
  DirectionItem *v22;
  _QWORD v23[2];
  uint8_t buf[4];
  __CFString *v25;
  __int16 v26;
  id v27;

  v3 = a2;
  v4 = sub_10043245C();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    goto LABEL_11;
  v6 = *(id *)(a1 + 32);
  v7 = v6;
  if (!v6)
  {
    v13 = CFSTR("<nil>");
    goto LABEL_10;
  }
  v8 = (objc_class *)objc_opt_class(v6);
  v9 = NSStringFromClass(v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  if ((objc_opt_respondsToSelector(v7, "accessibilityIdentifier") & 1) != 0)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "performSelector:", "accessibilityIdentifier"));
    v12 = v11;
    if (v11 && !objc_msgSend(v11, "isEqualToString:", v10))
    {
      v13 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v10, v7, v12));

      goto LABEL_8;
    }

  }
  v13 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v10, v7));
LABEL_8:

LABEL_10:
  *(_DWORD *)buf = 138543618;
  v25 = v13;
  v26 = 2112;
  v27 = v3;
  _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[%{public}@] Launching route planning for shortcut entry: %@", buf, 0x16u);

LABEL_11:
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_searchResultFromMapsFavoriteItem:", v3));
  v15 = objc_alloc_init(SearchFieldItem);
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[SearchResult currentLocationSearchResult](SearchResult, "currentLocationSearchResult"));
  -[SearchFieldItem setSearchResult:](v15, "setSearchResult:", v16);

  v17 = objc_alloc_init(SearchFieldItem);
  -[SearchFieldItem setSearchResult:](v17, "setSearchResult:", v14);
  v18 = [DirectionItem alloc];
  v23[0] = v15;
  v23[1] = v17;
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v23, 2));
  v20 = (char *)objc_msgSend(*(id *)(a1 + 40), "transportType");
  if ((unint64_t)(v20 - 1) < 4)
    v21 = (uint64_t)(v20 + 1);
  else
    v21 = 1;
  v22 = -[DirectionItem initWithItems:transportType:](v18, "initWithItems:transportType:", v19, v21);

  objc_msgSend(*(id *)(a1 + 32), "viewController:doDirectionItem:withUserInfo:", *(_QWORD *)(a1 + 48), v22, *(_QWORD *)(a1 + 56));
}

uint64_t sub_1005A0F28(uint64_t a1)
{
  __CFString *v2;
  id v3;
  NSObject *v4;
  id v5;
  void *v6;
  objc_class *v7;
  NSString *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  __CFString *v13;
  __CFString *v14;
  __CFString *v15;
  __CFString *v16;
  __CFString *v17;
  __CFString *v18;
  __CFString *v19;
  __CFString *v20;
  __CFString *v21;
  char v22;
  __CFString *v23;
  __CFString *v24;
  uint64_t v25;
  char v27;
  __CFString *v28;
  uint8_t buf[4];
  __CFString *v30;
  __int16 v31;
  __CFString *v32;
  __int16 v33;
  __CFString *v34;
  __int16 v35;
  __CFString *v36;
  __int16 v37;
  __CFString *v38;
  __int16 v39;
  __CFString *v40;
  __int16 v41;
  __CFString *v42;

  LODWORD(v2) = objc_msgSend(*(id *)(a1 + 32), "_isMapItemTypeTransit");
  v3 = sub_10043245C();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (!os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    goto LABEL_29;
  v5 = *(id *)(a1 + 40);
  v6 = v5;
  if (!v5)
  {
    v28 = CFSTR("<nil>");
    goto LABEL_10;
  }
  v7 = (objc_class *)objc_opt_class(v5);
  v8 = NSStringFromClass(v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  if ((objc_opt_respondsToSelector(v6, "accessibilityIdentifier") & 1) != 0)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "performSelector:", "accessibilityIdentifier"));
    v11 = v10;
    if (v10 && !objc_msgSend(v10, "isEqualToString:", v9))
    {
      v12 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v9, v6, v11));

      goto LABEL_8;
    }

  }
  v12 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v9, v6));
LABEL_8:
  v28 = (__CFString *)v12;

LABEL_10:
  if (*(_BYTE *)(a1 + 72))
    v13 = CFSTR("YES");
  else
    v13 = CFSTR("NO");
  v14 = v13;
  if (*(_BYTE *)(a1 + 73))
    v15 = CFSTR("YES");
  else
    v15 = CFSTR("NO");
  v16 = v15;
  if (*(_BYTE *)(a1 + 74))
    v17 = CFSTR("YES");
  else
    v17 = CFSTR("NO");
  v18 = v17;
  if (*(_BYTE *)(a1 + 75))
    v19 = CFSTR("YES");
  else
    v19 = CFSTR("NO");
  v20 = v19;
  if ((_DWORD)v2)
    v21 = CFSTR("YES");
  else
    v21 = CFSTR("NO");
  v22 = (char)v2;
  v2 = v21;
  if (*(_BYTE *)(a1 + 76))
    v23 = CFSTR("YES");
  else
    v23 = CFSTR("NO");
  v24 = v23;
  *(_DWORD *)buf = 138544898;
  v30 = v28;
  v31 = 2112;
  v32 = v14;
  v33 = 2112;
  v34 = v16;
  v35 = 2112;
  v36 = v18;
  v37 = 2112;
  v38 = v20;
  v39 = 2112;
  v40 = v2;
  v41 = 2112;
  v42 = v24;
  _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[%{public}@] Will open entry with checks: routingAvailable: %@, alreadyThere: %@, isAuthorizedForPreciseLocation: %@, isIpad: %@, isTransit: %@, forceShowPlacecard: %@", buf, 0x48u);

  LOBYTE(v2) = v22;
LABEL_29:

  if (!*(_BYTE *)(a1 + 72)
    || *(_BYTE *)(a1 + 73)
    || !*(_BYTE *)(a1 + 74)
    || (*(_BYTE *)(a1 + 75) ? (v27 = 1) : (v27 = (char)v2), (v27 & 1) != 0 || *(_BYTE *)(a1 + 76)))
  {
    v25 = a1 + 56;
  }
  else
  {
    v25 = a1 + 64;
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)v25 + 16))();
}

void sub_1005A2248(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 144));
  _Unwind_Resume(a1);
}

void sub_1005A228C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  id v6;
  void *v7;
  objc_class *v8;
  NSString *v9;
  void *v10;
  void *v11;
  void *v12;
  __CFString *v13;
  void *v14;
  SearchFieldItem *v15;
  void *v16;
  uint8_t buf[4];
  __CFString *v18;
  __int16 v19;
  id v20;

  v3 = a2;
  v4 = sub_10043245C();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v6 = *(id *)(a1 + 32);
    v7 = v6;
    if (!v6)
    {
      v13 = CFSTR("<nil>");
      goto LABEL_10;
    }
    v8 = (objc_class *)objc_opt_class(v6);
    v9 = NSStringFromClass(v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    if ((objc_opt_respondsToSelector(v7, "accessibilityIdentifier") & 1) != 0)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "performSelector:", "accessibilityIdentifier"));
      v12 = v11;
      if (v11 && !objc_msgSend(v11, "isEqualToString:", v10))
      {
        v13 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v10, v7, v12));

        goto LABEL_8;
      }

    }
    v13 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v10, v7));
LABEL_8:

LABEL_10:
    *(_DWORD *)buf = 138543618;
    v18 = v13;
    v19 = 2112;
    v20 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[%{public}@] Launching placecard for shortcut entry: %@", buf, 0x16u);

  }
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_searchResultFromMapsSuggestionsEntry:", v3));
  v15 = objc_alloc_init(SearchFieldItem);
  -[SearchFieldItem setSearchResult:](v15, "setSearchResult:", v14);
  v16 = (void *)objc_claimAutoreleasedReturnValue(-[SearchFieldItem searchResult](v15, "searchResult"));
  objc_msgSend(v16, "setHasIncompleteMetadata:", 1);

  objc_msgSend(*(id *)(a1 + 32), "viewController:doSearchItem:withUserInfo:", *(_QWORD *)(a1 + 40), v15, *(_QWORD *)(a1 + 48));
}

void sub_1005A2488(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  id v6;
  void *v7;
  objc_class *v8;
  NSString *v9;
  void *v10;
  void *v11;
  void *v12;
  __CFString *v13;
  void *v14;
  SearchFieldItem *v15;
  void *v16;
  SearchFieldItem *v17;
  DirectionItem *v18;
  void *v19;
  unsigned int v20;
  uint64_t v21;
  DirectionItem *v22;
  _QWORD v23[2];
  uint8_t buf[4];
  __CFString *v25;
  __int16 v26;
  id v27;

  v3 = a2;
  v4 = sub_10043245C();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    goto LABEL_11;
  v6 = *(id *)(a1 + 32);
  v7 = v6;
  if (!v6)
  {
    v13 = CFSTR("<nil>");
    goto LABEL_10;
  }
  v8 = (objc_class *)objc_opt_class(v6);
  v9 = NSStringFromClass(v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  if ((objc_opt_respondsToSelector(v7, "accessibilityIdentifier") & 1) != 0)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "performSelector:", "accessibilityIdentifier"));
    v12 = v11;
    if (v11 && !objc_msgSend(v11, "isEqualToString:", v10))
    {
      v13 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v10, v7, v12));

      goto LABEL_8;
    }

  }
  v13 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v10, v7));
LABEL_8:

LABEL_10:
  *(_DWORD *)buf = 138543618;
  v25 = v13;
  v26 = 2112;
  v27 = v3;
  _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[%{public}@] Launching route planning for shortcut entry: %@", buf, 0x16u);

LABEL_11:
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_searchResultFromMapsSuggestionsEntry:", v3));
  v15 = objc_alloc_init(SearchFieldItem);
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[SearchResult currentLocationSearchResult](SearchResult, "currentLocationSearchResult"));
  -[SearchFieldItem setSearchResult:](v15, "setSearchResult:", v16);

  v17 = objc_alloc_init(SearchFieldItem);
  -[SearchFieldItem setSearchResult:](v17, "setSearchResult:", v14);
  v18 = [DirectionItem alloc];
  v23[0] = v15;
  v23[1] = v17;
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v23, 2));
  v20 = objc_msgSend(*(id *)(a1 + 40), "transportType") - 1;
  if (v20 > 5)
    v21 = 1;
  else
    v21 = qword_100E392E8[v20];
  v22 = -[DirectionItem initWithItems:transportType:](v18, "initWithItems:transportType:", v19, v21);

  objc_msgSend(*(id *)(a1 + 32), "viewController:doDirectionItem:withUserInfo:", *(_QWORD *)(a1 + 48), v22, *(_QWORD *)(a1 + 56));
}

uint64_t sub_1005A270C(uint64_t a1)
{
  __CFString *v2;
  id v3;
  NSObject *v4;
  id v5;
  void *v6;
  objc_class *v7;
  NSString *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  __CFString *v13;
  __CFString *v14;
  __CFString *v15;
  __CFString *v16;
  __CFString *v17;
  __CFString *v18;
  __CFString *v19;
  __CFString *v20;
  __CFString *v21;
  char v22;
  __CFString *v23;
  __CFString *v24;
  uint64_t v25;
  char v27;
  __CFString *v28;
  uint8_t buf[4];
  __CFString *v30;
  __int16 v31;
  __CFString *v32;
  __int16 v33;
  __CFString *v34;
  __int16 v35;
  __CFString *v36;
  __int16 v37;
  __CFString *v38;
  __int16 v39;
  __CFString *v40;
  __int16 v41;
  __CFString *v42;

  LODWORD(v2) = objc_msgSend(*(id *)(a1 + 32), "_isMapItemTypeTransit");
  v3 = sub_10043245C();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (!os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    goto LABEL_29;
  v5 = *(id *)(a1 + 40);
  v6 = v5;
  if (!v5)
  {
    v28 = CFSTR("<nil>");
    goto LABEL_10;
  }
  v7 = (objc_class *)objc_opt_class(v5);
  v8 = NSStringFromClass(v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  if ((objc_opt_respondsToSelector(v6, "accessibilityIdentifier") & 1) != 0)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "performSelector:", "accessibilityIdentifier"));
    v11 = v10;
    if (v10 && !objc_msgSend(v10, "isEqualToString:", v9))
    {
      v12 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v9, v6, v11));

      goto LABEL_8;
    }

  }
  v12 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v9, v6));
LABEL_8:
  v28 = (__CFString *)v12;

LABEL_10:
  if (*(_BYTE *)(a1 + 72))
    v13 = CFSTR("YES");
  else
    v13 = CFSTR("NO");
  v14 = v13;
  if (*(_BYTE *)(a1 + 73))
    v15 = CFSTR("YES");
  else
    v15 = CFSTR("NO");
  v16 = v15;
  if (*(_BYTE *)(a1 + 74))
    v17 = CFSTR("YES");
  else
    v17 = CFSTR("NO");
  v18 = v17;
  if (*(_BYTE *)(a1 + 75))
    v19 = CFSTR("YES");
  else
    v19 = CFSTR("NO");
  v20 = v19;
  if ((_DWORD)v2)
    v21 = CFSTR("YES");
  else
    v21 = CFSTR("NO");
  v22 = (char)v2;
  v2 = v21;
  if (*(_BYTE *)(a1 + 76))
    v23 = CFSTR("YES");
  else
    v23 = CFSTR("NO");
  v24 = v23;
  *(_DWORD *)buf = 138544898;
  v30 = v28;
  v31 = 2112;
  v32 = v14;
  v33 = 2112;
  v34 = v16;
  v35 = 2112;
  v36 = v18;
  v37 = 2112;
  v38 = v20;
  v39 = 2112;
  v40 = v2;
  v41 = 2112;
  v42 = v24;
  _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[%{public}@] Will open entry with checks: routingUnavailable: %@, alreadyThere: %@, isAuthorizedForPreciseLocation: %@, isIpad: %@, isTransit: %@, forceShowPlacecard: %@", buf, 0x48u);

  LOBYTE(v2) = v22;
LABEL_29:

  if (*(_BYTE *)(a1 + 72)
    || *(_BYTE *)(a1 + 73)
    || !*(_BYTE *)(a1 + 74)
    || (*(_BYTE *)(a1 + 75) ? (v27 = 1) : (v27 = (char)v2), (v27 & 1) != 0 || *(_BYTE *)(a1 + 76)))
  {
    v25 = a1 + 56;
  }
  else
  {
    v25 = a1 + 64;
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)v25 + 16))();
}

id *sub_1005A29D4(id *result, uint64_t a2)
{
  if (a2)
    return (id *)objc_msgSend(result[4], "viewController:selectParkedCar:andPerformAction:selectPOIOnMap:", result[5], a2, 0, 1);
  return result;
}

void sub_1005A29F4(uint64_t a1, void *a2)
{
  id v3;
  SearchFieldItem *v4;
  SearchFieldItem *v5;
  _QWORD block[4];
  id v7;
  SearchFieldItem *v8;
  id v9;

  v3 = a2;
  v4 = objc_alloc_init(SearchFieldItem);
  -[SearchFieldItem setAutocompletePerson:](v4, "setAutocompletePerson:", v3);

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1005A2AC8;
  block[3] = &unk_1011AFF10;
  objc_copyWeak(&v9, (id *)(a1 + 40));
  v7 = *(id *)(a1 + 32);
  v8 = v4;
  v5 = v4;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  objc_destroyWeak(&v9);
}

void sub_1005A2AC8(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  uint64_t Log;
  NSObject *v5;
  int v6;
  char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "viewController:doSearchItem:withUserInfo:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 0);
  }
  else
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "ActionCoordinator");
    v5 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = 136446722;
      v7 = "ActionCoordinator.m";
      v8 = 1026;
      v9 = 1749;
      v10 = 2082;
      v11 = "-[ActionCoordinator viewController:openMapsSuggestionEntry:withUserInfo:]_block_invoke_3";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", (uint8_t *)&v6, 0x1Cu);
    }

  }
}

void sub_1005A2BD8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  void *v10;
  void *v11;
  __CFString *v12;
  _QWORD block[4];
  id v14;
  id v15;
  uint8_t buf[4];
  id v17;
  __int16 v18;
  __CFString *v19;

  v5 = a2;
  v6 = a3;
  if (v6 || !objc_msgSend(v5, "count"))
  {
    v7 = sub_1004326FC();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = v5;
      v10 = v9;
      if (v9)
      {
        if (objc_msgSend(v9, "count"))
        {
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "componentsJoinedByString:", CFSTR(", ")));
          v12 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<%p> [%@]"), v10, v11));

        }
        else
        {
          v12 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<%p> (empty)"), v10));
        }
      }
      else
      {
        v12 = CFSTR("<nil>");
      }

      *(_DWORD *)buf = 138412546;
      v17 = v6;
      v18 = 2112;
      v19 = v12;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to get unpairedVehicles to onboard. error: %@. vehicles: %@", buf, 0x16u);

    }
  }
  else
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1005A2DB8;
    block[3] = &unk_1011AD1E8;
    objc_copyWeak(&v15, (id *)(a1 + 32));
    v14 = v5;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

    objc_destroyWeak(&v15);
  }

}

void sub_1005A2DB8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "presentVehicleOnboardingWithVehicles:completion:", *(_QWORD *)(a1 + 32), 0);

}

void sub_1005A36B0(id *a1, uint64_t a2)
{
  void *v3;
  id v4;

  if (a2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "_labelMarkerForCustomFeatureAnnotation:", a2));
    if (v3)
    {
      v4 = v3;
      objc_msgSend(a1[5], "setIgnoreSelectionChanges:", 1);
      objc_msgSend(a1[4], "_selectLabelMarker:animated:", v4, 1);
      objc_msgSend(a1[5], "setIgnoreSelectionChanges:", 0);
      objc_msgSend(a1[6], "ensureMapSelectionVisible");
      v3 = v4;
    }

  }
}

void sub_1005A3D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1005A3D3C(uint64_t a1)
{
  id *WeakRetained;
  id *v3;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && *(_QWORD *)(a1 + 40) == 2)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained[8], "cleanSearch");
    WeakRetained = v3;
  }

}

BOOL sub_1005A40A4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _BOOL8 v7;
  void *v8;
  uint64_t v9;
  char isKindOfClass;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  id v19;

  v5 = a2;
  v6 = a3;
  if ((PlaceCardItemsAreEqual(v5, v6) & 1) != 0)
  {
    v7 = 1;
  }
  else
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentViewController"));
    v9 = objc_opt_class(SearchViewController);
    isKindOfClass = objc_opt_isKindOfClass(v8, v9);

    if ((isKindOfClass & 1) != 0)
    {
      v7 = 0;
    }
    else
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "mapItem"));
      v12 = v11;
      if (v11)
      {
        v13 = v11;
      }
      else
      {
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "searchResult"));
        v13 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "mapItem"));

      }
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "mapItem"));
      v16 = v15;
      if (v15)
      {
        v17 = v15;
      }
      else
      {
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "searchResult"));
        v17 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "mapItem"));

      }
      if (objc_msgSend(v13, "_hasMUID") && objc_msgSend(v17, "_hasMUID"))
      {
        v19 = objc_msgSend(v13, "_muid");
        v7 = v19 == objc_msgSend(v17, "_muid");
      }
      else
      {
        v7 = 0;
      }

    }
  }

  return v7;
}

void sub_1005A4210(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  unsigned __int8 v11;
  void *v12;
  id v13;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 48);
  v13 = v3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "placeCardItem"));
  LOBYTE(v4) = (*(uint64_t (**)(uint64_t, void *, _QWORD))(v4 + 16))(v4, v5, *(_QWORD *)(a1 + 32));

  if ((v4 & 1) != 0)
  {
    objc_msgSend(v13, "prepareForPresentationWithExistingPlaceCardItem");
  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[MUPlaceEnrichmentAPIController sharedPlaceEnrichmentAPIController](MUPlaceEnrichmentAPIController, "sharedPlaceEnrichmentAPIController"));
    objc_msgSend(v13, "resetState");
    objc_msgSend(v13, "setIsAdditionalStop:", objc_msgSend(*(id *)(a1 + 40), "shouldAddStopInRoutePlanning"));
    objc_msgSend(v13, "setExcludedContent:", objc_msgSend(*(id *)(a1 + 40), "_excludedContentForPlaceCardItem:", *(_QWORD *)(a1 + 32)));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "mapItem"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "_identifier"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapItem"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_identifier"));
    v11 = objc_msgSend(v8, "isEqual:", v10);

    if ((v11 & 1) == 0)
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[MUPlaceEnrichmentAPIController sharedPlaceEnrichmentAPIController](MUPlaceEnrichmentAPIController, "sharedPlaceEnrichmentAPIController"));
      objc_msgSend(v12, "resetConfiguration");

    }
    objc_msgSend(v13, "setPlaceCardItem:withHistory:", *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 56));

  }
}

void sub_1005A4864(uint64_t a1, void *a2, uint64_t a3)
{
  void *v3;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  id v13;

  v13 = a2;
  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 424), "isActive"))
  {
    v6 = *(_QWORD *)(a1 + 40);
    if (v6)
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "lineItem"));
      v7 = objc_msgSend(v3, "muid");
      if (v7 == objc_msgSend(*(id *)(a1 + 40), "muid"))
      {

LABEL_11:
        v11 = *(void **)(a1 + 48);
        if (v13)
        {
          objc_msgSend(*(id *)(a1 + 48), "setLineItem:labelMarker:loading:preferredLayout:", v13, *(_QWORD *)(a1 + 56), 0, *(_QWORD *)(a1 + 64));
        }
        else
        {
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "lineItem"));
          objc_msgSend(v11, "setLineItem:labelMarker:loading:preferredLayout:", v12, *(_QWORD *)(a1 + 56), 0, *(_QWORD *)(a1 + 64));

        }
        goto LABEL_15;
      }
      if (!a3)
      {

        goto LABEL_15;
      }
    }
    else if (!a3)
    {
      goto LABEL_15;
    }
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "lineItem"));
    v9 = objc_msgSend(v8, "muid");
    v10 = objc_msgSend(*(id *)(a1 + 40), "muid");

    if (v6)
    if (v9 == v10)
      goto LABEL_11;
  }
LABEL_15:

}

void sub_1005A583C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1005A5860(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  id v5;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained;
  if (WeakRetained)
    objc_msgSend(WeakRetained, "viewController:presentCollectionPickerContaineeViewController:", *(_QWORD *)(a1 + 32), v5);

}

void sub_1005A58B4(uint64_t a1, void *a2)
{
  id *WeakRetained;
  id *v4;
  id v5;
  id v6;

  v6 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = objc_loadWeakRetained(WeakRetained + 57);
    objc_msgSend(v5, "_maps_topMostPresentViewController:animated:completion:", v6, 1, 0);

  }
}

void sub_1005A5BC4(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "mapSelectionManager"));
    objc_msgSend(v3, "selectMapItem:animated:", *(_QWORD *)(a1 + 32), 1);

    WeakRetained = v4;
  }

}

void sub_1005A5E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1005A5E98(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v4 = (void *)*((_QWORD *)WeakRetained + 32);
    *((_QWORD *)WeakRetained + 32) = 0;
    v6 = WeakRetained;

    v3 = v6;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      (*(void (**)(uint64_t, id))(v5 + 16))(v5, v6);
      v3 = v6;
    }
  }

}

uint64_t sub_1005A62CC(uint64_t result, int a2)
{
  if (a2)
  {
    result = *(_QWORD *)(result + 32);
    if (result)
      return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1005A6464(uint64_t result, int a2)
{
  uint64_t v2;

  if (a2)
  {
    v2 = result;
    objc_msgSend(*(id *)(result + 32), "displayCollections");
    result = *(_QWORD *)(v2 + 40);
    if (result)
      return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1005A69D0(id a1, OfflineMapsManagementContext *a2)
{
  if (a2)
    -[OfflineMapsManagementContext presentExpiredMapsManagement](a2, "presentExpiredMapsManagement");
}

uint64_t sub_1005A6BB8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 32));
  return result;
}

void sub_1005A6D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1005A6D74(uint64_t a1, void *a2)
{
  uint64_t v3;
  id WeakRetained;
  uint64_t v5;
  void (*v6)(void);
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  id v25;

  v25 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    if (v25)
    {
      if (*(_BYTE *)(a1 + 64))
        goto LABEL_4;
      if (*(_BYTE *)(a1 + 65))
      {
        v8 = GEOMapRectForMapRegion(*(_QWORD *)(a1 + 32), v3);
        v10 = v9;
        v12 = v11;
        v14 = v13;
        v16 = GEOMapRectForMapRegion(v25, v15);
        v20 = GEOMapRectIntersection(v8, v10, v12, v14, v16, v17, v18, v19);
        v22 = v21;
        v24 = v23;
        if ((GEOMapRectIsNull(v20) & 1) != 0
          || v22 * v24 / (v12 * v14) < GEOConfigGetDouble(MapsConfig_OfflineRegionDownloadedAreaCoverageRequirement, off_1014B4F38))
        {
LABEL_4:
          objc_msgSend(WeakRetained, "viewControllerShowOfflineMaps:", *(_QWORD *)(a1 + 40));
        }
      }
      v5 = *(_QWORD *)(a1 + 48);
      if (v5)
      {
        v6 = *(void (**)(void))(v5 + 16);
LABEL_9:
        v6();
      }
    }
    else
    {
      v7 = *(_QWORD *)(a1 + 48);
      if (v7)
      {
        v6 = *(void (**)(void))(v7 + 16);
        goto LABEL_9;
      }
    }
  }

}

uint64_t sub_1005A7120(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    (*(void (**)(uint64_t, _QWORD))(v2 + 16))(v2, 0);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1005A7C04(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "mapView"));
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "_labelMarkerForCustomFeatureAnnotation:", v4));

  if (v7)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapSelectionManager"));
    objc_msgSend(v6, "selectLabelMarker:animated:", v7, 1);

  }
}

void sub_1005A80FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1005A8120(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t Log;
  NSObject *v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  _QWORD v12[4];
  id v13;
  id v14;
  uint64_t v15;
  char v16;
  uint8_t buf[16];

  Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "ActionCoordinator");
  v7 = objc_claimAutoreleasedReturnValue(Log);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "removeEntryBlock", buf, 2u);
  }

  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
    (*(void (**)(void))(v8 + 16))();
  v9 = sub_100B3A5D4();
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v11 = *(void **)(a1 + 32);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1005A823C;
  v12[3] = &unk_1011BC3F0;
  v16 = a3;
  v13 = v11;
  v14 = *(id *)(a1 + 48);
  v15 = a2;
  objc_msgSend(v10, "removeEntry:behavior:handler:", v13, a2, v12);

}

void sub_1005A823C(uint64_t a1, char a2)
{
  id v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  id v8;
  uint64_t v9;
  char v10;
  char v11;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1005A82D8;
  v6[3] = &unk_1011BC3C8;
  v10 = *(_BYTE *)(a1 + 56);
  v7 = *(id *)(a1 + 32);
  v4 = *(id *)(a1 + 40);
  v11 = a2;
  v5 = *(_QWORD *)(a1 + 48);
  v8 = v4;
  v9 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);

}

uint64_t sub_1005A82D8(uint64_t a1)
{
  uint64_t Log;
  NSObject *v3;
  void *v4;
  uint64_t result;
  uint8_t v6[16];

  Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "ActionCoordinator");
  v3 = objc_claimAutoreleasedReturnValue(Log);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "removeEntryBlock handler", v6, 2u);
  }

  if (*(_BYTE *)(a1 + 56) && objc_msgSend(*(id *)(a1 + 32), "type") == (id)7)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[ParkedCarManager sharedManager](ParkedCarManager, "sharedManager"));
    objc_msgSend(v4, "updateParkedCar");

  }
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, *(unsigned __int8 *)(a1 + 57), *(_QWORD *)(a1 + 48));
  return result;
}

uint64_t sub_1005A83A0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1005A83B0(uint64_t a1)
{

}

uint64_t sub_1005A83B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v5;
  void *v6;
  uint64_t Log;
  NSObject *v8;
  const __CFString *v9;
  void *v10;
  void *v11;
  const __CFString *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void **v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  void *v25;
  id v26;
  uint64_t v27;
  uint8_t buf[4];
  uint64_t v29;

  if ((*(_QWORD *)(a1 + 64) & a2) != 0)
  {
    v5 = *(id *)(a1 + 32);
    v6 = v5;
    switch(a2)
    {
      case 0:
        Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "ActionCoordinator");
        v8 = objc_claimAutoreleasedReturnValue(Log);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Warning: MSg Removal String for RemovalBehaviorNone was requested!", buf, 2u);
        }

        v2 = 0;
        goto LABEL_20;
      case 1:
        if (objc_msgSend(v5, "containsKey:", CFSTR("MapsSuggestionsRemovalBehaviorStringForSnooze")))
        {
          v9 = CFSTR("MapsSuggestionsRemovalBehaviorStringForSnooze");
          goto LABEL_14;
        }
        v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
        v11 = v10;
        v12 = CFSTR("Snooze Entry [MapsSuggestions Delete Action Sheet]");
        goto LABEL_19;
      case 2:
        if (objc_msgSend(v5, "containsKey:", CFSTR("MapsSuggestionsRemovalBehaviorStringForHide")))
        {
          v9 = CFSTR("MapsSuggestionsRemovalBehaviorStringForHide");
          goto LABEL_14;
        }
        v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
        v11 = v10;
        v12 = CFSTR("Hide Entry [MapsSuggestions Delete Action Sheet]");
        goto LABEL_19;
      case 4:
        if (objc_msgSend(v5, "containsKey:", CFSTR("MapsSuggestionsRemovalBehaviorStringForForget")))
        {
          v9 = CFSTR("MapsSuggestionsRemovalBehaviorStringForForget");
          goto LABEL_14;
        }
        v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
        v11 = v10;
        v12 = CFSTR("Forget Entry [MapsSuggestions Delete Action Sheet]");
        goto LABEL_19;
      case 8:
        if (objc_msgSend(v5, "containsKey:", CFSTR("MapsSuggestionsRemovalBehaviorStringForDelete")))
        {
          v9 = CFSTR("MapsSuggestionsRemovalBehaviorStringForDelete");
LABEL_14:
          v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "stringForKey:", v9));
        }
        else
        {
          v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
          v11 = v10;
          v12 = CFSTR("Delete Entry [MapsSuggestions Delete Action Sheet]");
LABEL_19:
          v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "localizedStringForKey:value:table:", v12, CFSTR("localized string not found"), 0));

        }
LABEL_20:

        v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        v14 = *(void **)(v13 + 40);
        *(_QWORD *)(v13 + 40) = v2;

        v15 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "ActionCoordinator");
        v16 = objc_claimAutoreleasedReturnValue(v15);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
          *(_DWORD *)buf = 138412290;
          v29 = v17;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Removal Action String: %@", buf, 0xCu);
        }

        v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
        if (v18)
        {
          v22 = _NSConcreteStackBlock;
          v23 = 3221225472;
          v24 = sub_1005A86E4;
          v25 = &unk_1011BC440;
          v19 = *(void **)(a1 + 40);
          v26 = *(id *)(a1 + 48);
          v27 = a2;
          v20 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v18, 2, &v22));
          objc_msgSend(v19, "addAction:", v20, v22, v23, v24, v25);

        }
        break;
      default:
        goto LABEL_20;
    }
  }
  return 1;
}

uint64_t sub_1005A86E4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 1);
}

uint64_t sub_1005A86F8(uint64_t a1)
{
  uint64_t Log;
  NSObject *v3;
  uint64_t result;
  uint8_t v5[16];

  Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "ActionCoordinator");
  v3 = objc_claimAutoreleasedReturnValue(Log);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "User pressed Cancel on Delete Action Sheet", v5, 2u);
  }

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, 0, 0);
  return result;
}

id sub_1005A8D38(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "resetState");
}

void sub_1005A9438(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  SearchResult *v8;
  void *v9;
  SearchResult *v10;
  id v11;

  v11 = a2;
  v5 = a3;
  v6 = v5;
  if (v11)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[SearchFieldItem searchFieldItemWithObject:](SearchFieldItem, "searchFieldItemWithObject:"));
    if (!v7)
      goto LABEL_7;
    goto LABEL_6;
  }
  if (v5)
  {
    v8 = [SearchResult alloc];
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "mapItem"));
    v10 = -[SearchResult initWithMapItem:](v8, "initWithMapItem:", v9);

    v7 = (void *)objc_claimAutoreleasedReturnValue(+[SearchFieldItem searchFieldItemWithObject:](SearchFieldItem, "searchFieldItemWithObject:", v10));
    if (v7)
    {
LABEL_6:
      objc_msgSend(*(id *)(a1 + 32), "viewController:doSearchItem:withUserInfo:", 0, v7, *(_QWORD *)(a1 + 40));

    }
  }
LABEL_7:

}

id *sub_1005A9518(id *result, uint64_t a2)
{
  if (a2)
    return (id *)objc_msgSend(result[4], "viewController:selectParkedCar:andPerformAction:selectPOIOnMap:", result[5], a2, 0, 1);
  return result;
}

uint64_t sub_1005A95F8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

id sub_1005A99F0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "makeAFieldFirstResponderIfNeeded");
}

void sub_1005A9C84(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  const __CFString *v5;
  _UNKNOWN **v6;

  if (a2)
  {
    v5 = CFSTR("DirectionsSessionInitiatorKey");
    v6 = &off_10126DE28;
    v3 = a2;
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v6, &v5, 1));
    objc_msgSend(*(id *)(a1 + 32), "viewController:doDirectionItem:allowToPromptEditing:withUserInfo:", *(_QWORD *)(a1 + 40), v3, 1, v4);

  }
}

void sub_1005A9DEC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  const __CFString *v6;
  _UNKNOWN **v7;

  if (a2)
  {
    v3 = a2;
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[DirectionsHistoryRecordingHelper destinationGEOMapItemToRecordWithDirectionItem:](DirectionsHistoryRecordingHelper, "destinationGEOMapItemToRecordWithDirectionItem:", v3));
    +[HistoryEntryRecentsItem saveGeoMapItem:](HistoryEntryRecentsItem, "saveGeoMapItem:", v4);
    v6 = CFSTR("DirectionsSessionInitiatorKey");
    v7 = &off_10126DE28;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v7, &v6, 1));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "setMaintainSearchStateWhenDisappearing:", 1);
    objc_msgSend(*(id *)(a1 + 32), "viewController:doDirectionItem:allowToPromptEditing:withUserInfo:", *(_QWORD *)(a1 + 40), v3, 1, v5);

  }
}

void sub_1005AAB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1005AAB48(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v6;
  uint64_t v7;
  id v8;
  id v9;

  if (a3)
  {
    v6 = *(void **)(a1 + 32);
    v7 = a3 - 1;
    v8 = a2;
    v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectAtIndexedSubscript:", v7));
    LOBYTE(v6) = objc_msgSend(v8, "isEquivalentAsWaypointToSearchFieldItem:");

    if ((v6 & 1) == 0)
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
      *a4 = 1;
    }

  }
}

void sub_1005AAF04(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;

  v6 = objc_msgSend(*(id *)(a1 + 32), "mutableCopy");
  objc_msgSend(v6, "setObject:forKey:", &__kCFBooleanTrue, CFSTR("AllowApproximateCurrentLocation"));
  v2 = *(void **)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = objc_msgSend(v6, "copy");
  objc_msgSend(v2, "viewController:doDirectionItem:allowToPromptEditing:withUserInfo:", v3, v4, 1, v5);

}

void sub_1005AAF84(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;

  v6 = objc_msgSend(*(id *)(a1 + 32), "mutableCopy");
  objc_msgSend(v6, "setObject:forKey:", &__kCFBooleanFalse, CFSTR("AllowApproximateCurrentLocation"));
  v2 = *(void **)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = objc_msgSend(v6, "copy");
  objc_msgSend(v2, "viewController:doDirectionItem:allowToPromptEditing:withUserInfo:", v3, v4, 1, v5);

}

void sub_1005AB354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1005AB36C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;

  v10 = a2;
  if (v10)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "items"));
    v4 = objc_msgSend(v3, "mutableCopy");

    switch(*(_QWORD *)(a1 + 64))
    {
      case 0:
        goto LABEL_11;
      case 1:
        objc_msgSend(v4, "insertObject:atIndex:", v10, 0);
        goto LABEL_10;
      case 2:
      case 3:
        v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "items"));
        v11[0] = _NSConcreteStackBlock;
        v11[1] = 3221225472;
        v11[2] = sub_1005AB510;
        v11[3] = &unk_1011BC508;
        v12 = v4;
        v13 = v10;
        objc_msgSend(v5, "enumerateObjectsUsingBlock:", v11);

        goto LABEL_10;
      case 4:
        if (objc_msgSend(v4, "count") && (v6 = *(_QWORD *)(a1 + 72), v6 < (unint64_t)objc_msgSend(v4, "count")))
          objc_msgSend(v4, "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 72), v10);
        else
          objc_msgSend(v4, "addObject:", v10);
        goto LABEL_10;
      default:
LABEL_10:
        v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
        v8 = *(void **)(a1 + 32);
        v9 = objc_msgSend(*(id *)(a1 + 40), "copyWithItems:", v4);
        objc_msgSend(v8, "viewController:doDirectionItem:allowToPromptEditing:withUserInfo:", v7, v9, 1, *(_QWORD *)(a1 + 48));

LABEL_11:
        break;
    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "viewControllerClosed:animated:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), 1);
  }

}

void sub_1005AB510(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  unsigned int v6;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "searchResult"));
  v6 = objc_msgSend(v5, "isDynamicCurrentLocation");

  if (v6)
    objc_msgSend(*(id *)(a1 + 32), "replaceObjectAtIndex:withObject:", a3, *(_QWORD *)(a1 + 40));
}

id sub_1005AB570(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "selectFieldIndex:", *(_QWORD *)(a1 + 40));
}

void sub_1005AB744(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1005AB768(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  v7 = a2;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "userProvidedName"));
  v9 = objc_msgSend(v8, "length");
  v10 = *(void **)(a1 + 32);
  if (v9)
    v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "userProvidedName"));
  else
    v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "name"));
  v14 = (id)v11;

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedMapsDelegate](UIApplication, "sharedMapsDelegate"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "storageID"));
  objc_msgSend(v12, "interruptConvertToNavigableSavedRouteID:routeName:error:directionsError:", v13, v14, v7, v6);

}

void sub_1005AB838(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  void *v5;
  id WeakRetained;

  v3 = (id *)(a1 + 40);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "appCoordinator"));
  objc_msgSend(v5, "enterRouteCreationWithRoute:originMapItem:destinationMapItem:userInfo:completion:", v4, 0, 0, *(_QWORD *)(a1 + 32), 0);

}

void sub_1005ABD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1005ABD6C(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[2];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  if (!*(_BYTE *)(v1 + 24))
  {
    *(_BYTE *)(v1 + 24) = 1;
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lastLocation"));
    if (v3)
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[SearchResult currentLocationSearchResult](SearchResult, "currentLocationSearchResult"));
      v5 = *(_QWORD *)(a1 + 40);
      v18[0] = v4;
      v18[1] = v5;
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v18, 2));

    }
    else
    {
      v17 = *(_QWORD *)(a1 + 40);
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v17, 1));
    }

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "mapView"));
    objc_msgSend(v7, "mapRectContainingSearchResults:", v6);
    v9 = v8;
    v11 = v10;
    v13 = v12;
    v15 = v14;

    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "mapView"));
    objc_msgSend(v16, "_setVisibleMapRect:duration:completionHandler:", 0, v9, v11, v13, v15, 2.5);

  }
}

uint64_t sub_1005ABEC8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_1005AC10C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dismissCustomPresentationContainee");
}

void sub_1005ACA28(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "containerViewController"));
  objc_msgSend(v2, "_maps_topMostPresentViewController:animated:completion:", *(_QWORD *)(a1 + 40), 1, 0);

}

void sub_1005ACEBC(id a1, NSString *a2)
{
  NSString *v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  objc_msgSend(v3, "callPhoneNumber:completion:", v2, 0);

}

void sub_1005ACF10(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  _QWORD v15[4];
  id v16;
  id v17;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "value"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "stringValue"));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "label"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[CNLabeledValue localizedStringForLabel:](CNLabeledValue, "localizedStringForLabel:", v6));

  v8 = *(void **)(a1 + 32);
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "localizedStringForKey:value:table:", CFSTR("%1$@: %2$@ (Quick action menu, select phone number)"), CFSTR("localized string not found"), 0));
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", v10, v7, v5));
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1005AD094;
  v15[3] = &unk_1011AF938;
  v12 = *(id *)(a1 + 40);
  v16 = v5;
  v17 = v12;
  v13 = v5;
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v11, 0, v15));
  objc_msgSend(v8, "addAction:", v14);

}

uint64_t sub_1005AD094(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

id sub_1005AD3A0(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "viewController:openURL:", *(_QWORD *)(a1 + 40), a2);
}

void sub_1005AD3B0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  _QWORD v13[4];
  id v14;
  id v15;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "value"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "label"));

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[CNLabeledValue localizedStringForLabel:](CNLabeledValue, "localizedStringForLabel:", v5));
  v7 = *(void **)(a1 + 32);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "localizedStringForKey:value:table:", CFSTR("%1$@: %2$@ (Quick action menu, select URL)"), CFSTR("localized string not found"), 0));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", v9, v6, v4));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1005AD528;
  v13[3] = &unk_1011BB080;
  v14 = v4;
  v15 = *(id *)(a1 + 40);
  v11 = v4;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v10, 0, v13));
  objc_msgSend(v7, "addAction:", v12);

}

void sub_1005AD528(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", *(_QWORD *)(a1 + 32)));
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_1005ADA84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1005ADAB0(uint64_t a1, int a2)
{
  id WeakRetained;
  id v4;
  NSObject *v5;
  id v6;
  objc_class *v7;
  NSString *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  NSObject *v18;
  _BOOL4 v19;
  id v20;
  objc_class *v21;
  NSString *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  objc_class *v28;
  NSString *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint8_t buf[4];
  void *v35;
  __int16 v36;
  int v37;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = sub_10043214C();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      goto LABEL_9;
    v6 = WeakRetained;
    v7 = (objc_class *)objc_opt_class(v6);
    v8 = NSStringFromClass(v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    if ((objc_opt_respondsToSelector(v6, "accessibilityIdentifier") & 1) != 0)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "performSelector:", "accessibilityIdentifier"));
      v11 = v10;
      if (v10 && !objc_msgSend(v10, "isEqualToString:", v9))
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v9, v6, v11));

        goto LABEL_8;
      }

    }
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v9, v6));
LABEL_8:

    *(_DWORD *)buf = 138543618;
    v35 = v12;
    v36 = 1024;
    v37 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[%{public}@] User exited VLF Crowdsourcing permission card with answer: %d", buf, 0x12u);

LABEL_9:
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "containerViewController"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "chromeViewController"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "userLocationView"));
    v16 = objc_msgSend(v15, "vlfMode");

    v17 = sub_10043214C();
    v18 = objc_claimAutoreleasedReturnValue(v17);
    v19 = os_log_type_enabled(v18, OS_LOG_TYPE_INFO);
    if (v16)
    {
      if (!v19)
      {
LABEL_17:

        objc_msgSend(WeakRetained, "showVLF");
        goto LABEL_26;
      }
      v20 = WeakRetained;
      v21 = (objc_class *)objc_opt_class(v20);
      v22 = NSStringFromClass(v21);
      v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
      if ((objc_opt_respondsToSelector(v20, "accessibilityIdentifier") & 1) != 0)
      {
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "performSelector:", "accessibilityIdentifier"));
        v25 = v24;
        if (v24 && !objc_msgSend(v24, "isEqualToString:", v23))
        {
          v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v23, v20, v25));

          goto LABEL_16;
        }

      }
      v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v23, v20));
LABEL_16:

      *(_DWORD *)buf = 138543362;
      v35 = v26;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "[%{public}@] VLF is still eligible to be shown; showing now",
        buf,
        0xCu);

      goto LABEL_17;
    }
    if (!v19)
    {
LABEL_25:

      goto LABEL_26;
    }
    v27 = WeakRetained;
    v28 = (objc_class *)objc_opt_class(v27);
    v29 = NSStringFromClass(v28);
    v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
    if ((objc_opt_respondsToSelector(v27, "accessibilityIdentifier") & 1) != 0)
    {
      v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "performSelector:", "accessibilityIdentifier"));
      v32 = v31;
      if (v31 && !objc_msgSend(v31, "isEqualToString:", v30))
      {
        v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v30, v27, v32));

        goto LABEL_24;
      }

    }
    v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v30, v27));
LABEL_24:

    *(_DWORD *)buf = 138543362;
    v35 = v33;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "[%{public}@] VLF is no longer eligible to be shown", buf, 0xCu);

    goto LABEL_25;
  }
LABEL_26:

}

void sub_1005AECC8(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "viewController:selectSearchResult:addToHistory:source:saveSelectionState:", 0, *(_QWORD *)(a1 + 40), 1, 6, 0);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapSelectionManager"));
  objc_msgSend(v2, "selectSearchResult:animated:", *(_QWORD *)(a1 + 40), 1);

}

void sub_1005AEE54(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  unsigned int v16;
  id v17;
  NSObject *v18;
  uint64_t v19;
  void *v20;
  unsigned int v21;
  void *v22;
  unsigned int v23;
  void *v24;
  int v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  unsigned __int8 v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  int v35;
  void *v36;
  id v37;
  id v38;
  unsigned int v39;
  uint8_t buf[16];
  void *v41;

  v11 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = objc_msgSend(*(id *)(a1 + 32), "_isBuildingMultipointRoute");
  if ((objc_msgSend(v11, "conformsToProtocol:", &OBJC_PROTOCOL___VenueRoutePlanningCardItem) & 1) != 0
    || !v16)
  {
    objc_msgSend(*(id *)(a1 + 32), "_cleanupRoutePlanningIfNeededAnimated:", 1);
    v17 = sub_10043214C();
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "closeVenueViewController, deleting selection state", buf, 2u);
    }

    v19 = *(_QWORD *)(a1 + 32);
    v20 = *(void **)(v19 + 8);
    *(_QWORD *)(v19 + 8) = 0;

  }
  v39 = v16;
  if (v15)
    v21 = objc_msgSend(v15, "singleResultMode") ^ 1;
  else
    v21 = 0;
  if ((objc_msgSend(v11, "conformsToProtocol:", &OBJC_PROTOCOL___VenueCategoryCardItem) & 1) != 0 || !v21)
    objc_msgSend(*(id *)(a1 + 32), "clearSearch");
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "containerViewController"));
  v23 = 1;
  objc_msgSend(v22, "popLastViewControllerFromViewController:animated:useDefaultContaineeLayout:", *(_QWORD *)(a1 + 40), 1, 0);

  if (!v12)
    v23 = objc_msgSend(v11, "conformsToProtocol:", &OBJC_PROTOCOL___VenuePlaceCardItem) ^ 1 | v21;
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[VenueCardCoordinator searchResultForPlaceCardItem:](VenueCardCoordinator, "searchResultForPlaceCardItem:", v12));
  if (objc_msgSend(v15, "shouldInjectSearchResults"))
  {
    if (v12)
      v25 = 1;
    else
      v25 = v23;
    if (v25 == 1)
    {
      v38 = v13;
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchPinsManager"));
      v37 = v11;
      v27 = v14;
      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "allSearchResults"));
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "results"));
      v30 = objc_msgSend(v28, "isEqualToArray:", v29);

      v14 = v27;
      v11 = v37;

      v13 = v38;
      if ((v30 & 1) == 0)
        objc_msgSend(*(id *)(a1 + 32), "restoreSearchForItem:withResults:", v14, v15);
    }
  }
  else if (v12 && v24)
  {
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchPinsManager"));
    v41 = v24;
    v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v41, 1));
    objc_msgSend(v31, "setSearchPins:selectedPin:animated:", v32, 0, 1);

  }
  v33 = objc_opt_class(PlaceCardItem);
  if ((objc_opt_isKindOfClass(v12, v33) & 1) != 0)
  {
    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchPinsManager"));
    objc_msgSend(v34, "showLinkedPlacesAndPolygonForPlaceCardItem:", v12);

  }
  if (v13)
    v35 = v21;
  else
    v35 = 1;
  if (((v35 | v39) & 1) == 0)
  {
    v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapSelectionManager"));
    objc_msgSend(v36, "restoreSelectionState:animated:", v13, 1);

  }
}

void sub_1005AF8AC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  _QWORD v4[5];
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapCameraController"));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1005AF948;
  v4[3] = &unk_1011ACCB8;
  v3 = *(_QWORD *)(a1 + 40);
  v4[4] = *(_QWORD *)(a1 + 32);
  v5 = *(id *)(a1 + 48);
  objc_msgSend(v2, "frameMapItem:animated:completion:", v3, 1, v4);

}

id sub_1005AF948(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "presentPlaceCardForItem:addToHistory:source:saveSelectionState:", *(_QWORD *)(a1 + 40), 0, 0, 1);
}

id sub_1005AFE74(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "resetState");
}

void sub_1005B070C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1005B0730(uint64_t a1, uint64_t a2)
{
  id *WeakRetained;
  unint64_t v5;
  id v6;
  NSObject *v7;
  const __CFString *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  const __CFString *v13;
  int v14;
  const __CFString *v15;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (!a2)
      goto LABEL_6;
    v5 = *(_QWORD *)(a1 + 48);
    if (v5 > 7)
      goto LABEL_6;
    if (((1 << v5) & 0x67) != 0)
    {
      if (a2 == 3)
      {
LABEL_6:
        v6 = sub_10043181C();
        v7 = objc_claimAutoreleasedReturnValue(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          if ((unint64_t)(a2 - 1) > 4)
            v8 = CFSTR("Undefined");
          else
            v8 = *(&off_1011BC900 + a2 - 1);
          v14 = 138543362;
          v15 = v8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "default transport type %{public}@ isn't compatible", (uint8_t *)&v14, 0xCu);
        }

        v9 = *(_QWORD *)(a1 + 48);
        if (v9 == 3)
          v10 = 3;
        else
          v10 = 1;
        if (v9 == -1)
          a2 = 0;
        else
          a2 = v10;
LABEL_29:
        objc_msgSend(WeakRetained[51], "setTransportType:", a2);
        objc_msgSend(*(id *)(a1 + 32), "updateTransportType:", a2);
        goto LABEL_30;
      }
    }
    else if (v5 == 3)
    {
      if (a2 != 3)
        goto LABEL_6;
    }
    else if (v5 != 7 || a2 != 1 && a2 != 4)
    {
      goto LABEL_6;
    }
    v11 = sub_10043181C();
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      if ((unint64_t)(a2 - 2) > 3)
        v13 = CFSTR("Drive");
      else
        v13 = *(&off_1011BC8E0 + a2 - 2);
      v14 = 138543362;
      v15 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "default transport type is %{public}@", (uint8_t *)&v14, 0xCu);
    }

    goto LABEL_29;
  }
LABEL_30:

}

void sub_1005B13CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1005B1408(uint64_t a1, void *a2)
{
  id *WeakRetained;
  id *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  id v9;

  v9 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = objc_loadWeakRetained(WeakRetained + 52);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "userInfo"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "mapItem"));
    objc_msgSend(v5, "enterFlyoverForMapItem:", v7);

    v8 = objc_loadWeakRetained(v4 + 57);
    objc_msgSend(v8, "updateTopBannerViewWithTopBannerItems:", 0);

  }
}

void sub_1005B271C(uint64_t a1)
{
  void *v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "containerViewController"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "topMostPresentedViewController"));
  objc_msgSend(v1, "dismissViewControllerAnimated:completion:", 0, 0);

}

id sub_1005B3100(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setPauseSelectionUpdates:", 0);
  return _objc_msgSend(*(id *)(a1 + 32), "makeAFieldFirstResponderIfNeeded");
}

id sub_1005B312C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 32), "closeRoutePlanningViewController:withSender:", a2, a3);
}

void sub_1005B3540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1005B356C(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    sub_100BA106C(*(void **)(a1 + 32));
    WeakRetained = v3;
  }

}

void sub_1005B36F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1005B3718(uint64_t a1, int a2, void *a3)
{
  _QWORD *WeakRetained;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;

  v13 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    if (a2)
    {
      v6 = *(void **)(a1 + 32);
      if (v6)
        objc_msgSend(v6, "updatePlaceNote:", v13);
      if (WeakRetained[47])
        (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 376) + 16))();
      v7 = *(_QWORD *)(a1 + 40);
      v8 = *(void **)(v7 + 376);
      *(_QWORD *)(v7 + 376) = 0;

      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "containerViewController"));
      objc_msgSend(v9, "popLastViewControllerAnimated:", 1);

      +[LibraryAnalytics captureAddOrEditNoteActionForPlaceMUID:isNewNote:](_TtC4Maps16LibraryAnalytics, "captureAddOrEditNoteActionForPlaceMUID:isNewNote:", *(_QWORD *)(a1 + 64), objc_msgSend(*(id *)(a1 + 48), "length") == 0);
    }
    else
    {
      v10 = *(_QWORD *)(a1 + 40);
      v11 = *(void **)(v10 + 376);
      *(_QWORD *)(v10 + 376) = 0;

      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "containerViewController"));
      objc_msgSend(v12, "popLastViewControllerAnimated:", 1);

    }
  }

}

uint64_t sub_1005B448C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1005B5440(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "originalPresenterViewController"));
  objc_msgSend(v2, "viewController:removeDroppedPin:", v3, *(_QWORD *)(a1 + 48));

}

void sub_1005B647C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1005B64B0(uint64_t a1, int a2)
{
  id WeakRetained;
  id v4;
  NSObject *v5;
  id v6;
  objc_class *v7;
  NSString *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  unsigned int v13;
  id v14;
  NSObject *v15;
  _BOOL4 v16;
  id v17;
  objc_class *v18;
  NSString *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  objc_class *v25;
  NSString *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  int v34;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = sub_10043214C();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      goto LABEL_9;
    v6 = WeakRetained;
    v7 = (objc_class *)objc_opt_class(v6);
    v8 = NSStringFromClass(v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    if ((objc_opt_respondsToSelector(v6, "accessibilityIdentifier") & 1) != 0)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "performSelector:", "accessibilityIdentifier"));
      v11 = v10;
      if (v10 && !objc_msgSend(v10, "isEqualToString:", v9))
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v9, v6, v11));

        goto LABEL_8;
      }

    }
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v9, v6));
LABEL_8:

    *(_DWORD *)buf = 138543618;
    v32 = v12;
    v33 = 1024;
    v34 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[%{public}@] User exited VLF Crowdsourcing permission card with answer: %d", buf, 0x12u);

LABEL_9:
    v13 = objc_msgSend(WeakRetained, "canEnterPedestrianAR");
    v14 = sub_10043214C();
    v15 = objc_claimAutoreleasedReturnValue(v14);
    v16 = os_log_type_enabled(v15, OS_LOG_TYPE_INFO);
    if (v13)
    {
      if (!v16)
      {
LABEL_17:

        objc_msgSend(WeakRetained, "enterPedestrianAR");
        goto LABEL_26;
      }
      v17 = WeakRetained;
      v18 = (objc_class *)objc_opt_class(v17);
      v19 = NSStringFromClass(v18);
      v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
      if ((objc_opt_respondsToSelector(v17, "accessibilityIdentifier") & 1) != 0)
      {
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "performSelector:", "accessibilityIdentifier"));
        v22 = v21;
        if (v21 && !objc_msgSend(v21, "isEqualToString:", v20))
        {
          v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v20, v17, v22));

          goto LABEL_16;
        }

      }
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v20, v17));
LABEL_16:

      *(_DWORD *)buf = 138543362;
      v32 = v23;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "[%{public}@] Still eligible to enter Pedestrian AR; will enter now",
        buf,
        0xCu);

      goto LABEL_17;
    }
    if (!v16)
    {
LABEL_25:

      goto LABEL_26;
    }
    v24 = WeakRetained;
    v25 = (objc_class *)objc_opt_class(v24);
    v26 = NSStringFromClass(v25);
    v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
    if ((objc_opt_respondsToSelector(v24, "accessibilityIdentifier") & 1) != 0)
    {
      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "performSelector:", "accessibilityIdentifier"));
      v29 = v28;
      if (v28 && !objc_msgSend(v28, "isEqualToString:", v27))
      {
        v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v27, v24, v29));

        goto LABEL_24;
      }

    }
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v27, v24));
LABEL_24:

    *(_DWORD *)buf = 138543362;
    v32 = v30;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "[%{public}@] No longer eligible to enter Pedestrian AR", buf, 0xCu);

    goto LABEL_25;
  }
LABEL_26:

}

void sub_1005B75B8(id *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13[2];
  id location;

  v3 = a2;
  objc_initWeak(&location, a1[4]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1005B76B4;
  v7[3] = &unk_1011BC7A0;
  objc_copyWeak(v13, &location);
  v8 = a1[5];
  v9 = v3;
  v10 = a1[6];
  v4 = a1[7];
  v13[1] = a1[8];
  v5 = a1[4];
  v11 = v4;
  v12 = v5;
  v6 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v7);

  objc_destroyWeak(v13);
  objc_destroyWeak(&location);
}

void sub_1005B76B4(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  const char *v10;
  id v11;
  NSString *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_filteredFeaturesFromTransitSystems:allFeatures:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)));
    v5 = objc_alloc_init((Class)PKPaymentSetupRequest);
    objc_msgSend(v5, "setConfiguration:", *(_QWORD *)(a1 + 48));
    objc_msgSend(v5, "setPaymentSetupFeatures:", v4);
    v6 = objc_msgSend(objc_alloc((Class)PKPaymentSetupViewController), "initWithPaymentSetupRequest:", v5);
    objc_msgSend(v6, "setPresentationStyle:", 2);
    objc_msgSend(v6, "setDelegate:", *(_QWORD *)(a1 + 56));
    v7 = sub_10043253C();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v9 = (void *)objc_opt_class(v3);
      v10 = *(const char **)(a1 + 80);
      v11 = v9;
      v12 = NSStringFromSelector(v10);
      v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      v15 = 138412546;
      v16 = v9;
      v17 = 2112;
      v18 = v13;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%@ %@: showing Wallet DCI View Controller", (uint8_t *)&v15, 0x16u);

    }
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "containerViewController"));
    objc_msgSend(v14, "_maps_topMostPresentViewController:animated:completion:", v6, 1, 0);

  }
}

void sub_1005B7B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;
  id *v18;
  uint64_t v19;

  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v19 - 56));
  _Unwind_Resume(a1);
}

void sub_1005B7B90(id *a1, void *a2, void *a3)
{
  id v5;
  __CFString *v6;
  id WeakRetained;
  id v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  void *v18;
  SearchResult *v19;
  SearchFieldItem *v20;
  void *v21;
  SearchFieldItem *v22;
  DirectionItem *v23;
  void *v24;
  DirectionItem *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  __CFString *v31;
  _QWORD v32[4];
  SearchResult *v33;
  id v34;
  const __CFString *v35;
  _UNKNOWN **v36;
  _QWORD v37[2];
  uint8_t buf[4];
  const __CFString *v39;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained(a1 + 5);
  if (WeakRetained)
  {
    v8 = objc_loadWeakRetained(a1 + 6);
    if (v8)
    {
      if (!v5)
      {
        v9 = sub_1004320DC();
        v10 = objc_claimAutoreleasedReturnValue(v9);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v39 = v6;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Error getting single location update: %@", buf, 0xCu);
        }

        v11 = (void *)objc_claimAutoreleasedReturnValue(+[MKLocationManager sharedLocationManager](MKLocationManager, "sharedLocationManager"));
        v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "lastLocation"));

      }
      v30 = objc_msgSend(objc_alloc((Class)GEORouteBuilder_PersistentData), "initWithPersistentData:", a1[4]);
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "buildRoute"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "userProvidedName"));
      if (objc_msgSend(v13, "length"))
        v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "userProvidedName"));
      else
        v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "name"));
      v29 = (void *)v14;

      v15 = (uint64_t)objc_msgSend(v12, "suggestedNavigationModeForLocation:context:", v5, 1);
      if (!v15)
      {
        v16 = sub_1004320DC();
        v17 = objc_claimAutoreleasedReturnValue(v16);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          v39 = CFSTR("None");
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Coercing navigation mode to route planning from %{public}@", buf, 0xCu);
        }

        v15 = 4;
      }
      if (objc_msgSend(a1[4], "tourMuid"))
        v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%llu"), objc_msgSend(a1[4], "tourMuid")));
      else
        v18 = 0;
      v31 = v6;
      if (v15 == 4)
      {
        +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 6003, 137, v18);
        v19 = objc_opt_new(SearchResult);
        -[SearchResult setRouteData:](v19, "setRouteData:", a1[4]);
        v20 = objc_opt_new(SearchFieldItem);
        v21 = (void *)objc_claimAutoreleasedReturnValue(+[SearchResult currentLocationSearchResult](SearchResult, "currentLocationSearchResult"));
        -[SearchFieldItem setSearchResult:](v20, "setSearchResult:", v21);

        v22 = objc_opt_new(SearchFieldItem);
        -[SearchFieldItem setSearchResult:](v22, "setSearchResult:", v19);
        v23 = [DirectionItem alloc];
        v37[0] = v20;
        v37[1] = v22;
        v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v37, 2));
        v25 = -[DirectionItem initWithItems:transportType:](v23, "initWithItems:transportType:", v24, 0);

        v35 = CFSTR("DirectionsSessionInitiatorKey");
        v36 = &off_10126DE28;
        v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v36, &v35, 1));
        objc_msgSend(WeakRetained, "viewController:doDirectionItem:withUserInfo:", v8, v25, v26);

        v27 = v29;
      }
      else
      {
        +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 3001, 137, v18);
        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "_maps_platformController"));
        v32[0] = _NSConcreteStackBlock;
        v32[1] = 3221225472;
        v32[2] = sub_1005B7F9C;
        v32[3] = &unk_1011B04D0;
        v33 = v12;
        v27 = v29;
        v34 = v29;
        objc_msgSend(v28, "pushNavigationWithRoute:navigationMode:shouldCheckNavSafetyAlert:completion:", v33, v15, 1, v32);

        v19 = v33;
      }

      v6 = v31;
    }

  }
}

void sub_1005B7F9C(uint64_t a1, unint64_t a2, unint64_t a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;

  if (a2 | a3)
  {
    v5 = (id)a3;
    v6 = (id)a2;
    v8 = (id)objc_claimAutoreleasedReturnValue(+[UIApplication sharedMapsDelegate](UIApplication, "sharedMapsDelegate"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "storageID"));
    objc_msgSend(v8, "interruptConvertToNavigableSavedRouteID:routeName:error:directionsError:", v7, *(_QWORD *)(a1 + 40), v6, v5);

  }
}

void sub_1005B833C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location,char a21)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void sub_1005B836C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id WeakRetained;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v3 = *(void **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v5 = *(unsigned __int8 *)(a1 + 48);
    v9 = WeakRetained;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "iosChromeViewController"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "mapView"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "_mapLayer"));
    objc_msgSend(v8, "setApplicationSubState:", v5);

    WeakRetained = v9;
  }

}

void sub_1005B9730(uint64_t a1)
{
  void *v2;
  void *v3;
  double v4;
  void *v5;
  double v6;
  id v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "runningGradientView"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "layer"));
  LODWORD(v4) = 0;
  objc_msgSend(v3, "setOpacity:", v4);

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "localizingGradientView"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "layer"));
  LODWORD(v6) = 1.0;
  objc_msgSend(v5, "setOpacity:", v6);

}

void sub_1005B97B4(uint64_t a1)
{
  void *v2;
  void *v3;
  double v4;
  void *v5;
  double v6;
  id v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "runningGradientView"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "layer"));
  LODWORD(v4) = 1.0;
  objc_msgSend(v3, "setOpacity:", v4);

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "localizingGradientView"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "layer"));
  LODWORD(v6) = 0;
  objc_msgSend(v5, "setOpacity:", v6);

}

void sub_1005B9D8C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "PedestrianARGradientOverlay");
  v2 = (void *)qword_1014D29E8;
  qword_1014D29E8 = (uint64_t)v1;

}

id sub_1005BAF2C()
{
  if (qword_1014D2A00 != -1)
    dispatch_once(&qword_1014D2A00, &stru_1011BC948);
  return (id)qword_1014D29F8;
}

void sub_1005BB370(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "updateState");

}

void sub_1005BB3D4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "PedestrianARSessionThermalStateMonitor");
  v2 = (void *)qword_1014D29F8;
  qword_1014D29F8 = (uint64_t)v1;

}

UIFont *__cdecl sub_1005BC0EC(id a1)
{
  return +[UIFont preferredFontForTextStyle:](UIFont, "preferredFontForTextStyle:", UIFontTextStyleBody);
}

UIFont *__cdecl sub_1005BC104(id a1)
{
  return +[UIFont preferredFontForTextStyle:](UIFont, "preferredFontForTextStyle:", UIFontTextStyleSubheadline);
}

UIFont *__cdecl sub_1005BC11C(id a1)
{
  return (UIFont *)+[UIFont _preferredFontForTextStyle:maximumContentSizeCategory:](UIFont, "_preferredFontForTextStyle:maximumContentSizeCategory:", UIFontTextStyleCaption2, UIContentSizeCategoryAccessibilityLarge);
}

UIFont *__cdecl sub_1005BC318(id a1)
{
  return (UIFont *)+[UIFont _preferredFontForTextStyle:maximumContentSizeCategory:](UIFont, "_preferredFontForTextStyle:maximumContentSizeCategory:", UIFontTextStyleCaption2, UIContentSizeCategoryAccessibilityLarge);
}

id sub_1005BC814(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateMinimumMaximumHeights");
}

void sub_1005BD330(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1005BD34C(uint64_t a1, uint64_t a2)
{
  id WeakRetained;

  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a2, 1);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "shareRowAtIndexPath:completion:", *(_QWORD *)(a1 + 32), &stru_1011BC9E8);

}

void sub_1005BDA14(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  unsigned int v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;

  v14 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexPath:"));
  v4 = v3;
  if (v3)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "mapItem"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "_geoMapItem"));
    v7 = objc_msgSend(v6, "_hasEVCharger");

    if (v7)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "placeSummaryTemplateForSearchResult:indexPath:", v4, v14));
      if (v8)
      {
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "mapItem"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_identifier"));

        if (v10)
        {
          v11 = *(void **)(*(_QWORD *)(a1 + 32) + 264);
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "mapItem"));
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "_identifier"));
          objc_msgSend(v11, "setObject:forKeyedSubscript:", v8, v13);

        }
      }

    }
  }

}

void sub_1005BFA20(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _TtC4Maps21CuratedGuideViewModel *v8;
  void *v9;
  uint64_t v10;
  _TtC4Maps21CuratedGuideViewModel *v11;
  void *v12;
  id v13;

  v13 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "curatedGuideViewModels"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", v13));

  v5 = v13;
  if (!v4)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexPath:", v13));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "placeCollection"));

    if (v7)
    {
      v8 = [_TtC4Maps21CuratedGuideViewModel alloc];
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "placeCollection"));
      if ((objc_msgSend(*(id *)(a1 + 32), "guideSummaryUsesRichLayout") & 1) != 0)
        v10 = 1;
      else
        v10 = (uint64_t)objc_msgSend(*(id *)(a1 + 32), "placeSummaryUsesRichLayout");
      v11 = -[CuratedGuideViewModel initWithPlaceCollection:useRichLayout:](v8, "initWithPlaceCollection:useRichLayout:", v9, v10);

      objc_msgSend(*(id *)(a1 + 32), "addMetricsForGuideSummaryViewModel:atIndexPath:", v11, v13);
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "curatedGuideViewModels"));
      objc_msgSend(v12, "setObject:forKey:", v11, v13);

    }
    v5 = v13;
  }

}

void sub_1005C04AC(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;

  v13 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "placeSummaryTemplateViewModels"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", v13));

  v5 = v13;
  if (!v4)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexPath:", v13));
    objc_msgSend(v6, "setRepresentsIntermediateStop:", objc_msgSend(*(id *)(a1 + 32), "isPresentingAddStopResultsFromWaypointEditor"));
    if (objc_msgSend(*(id *)(a1 + 32), "usePlaceSummaryForSearchResult:", v6))
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "placeSummaryMetadata"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentLocation"));
      if (objc_msgSend(*(id *)(a1 + 32), "isShowingClusterResults"))
      {
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "approxLocation"));

        if (v9)
        {
          v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "approxLocation"));

          v8 = (void *)v10;
        }
      }
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[PlaceSummaryViewModelTemplateFactory viewModelWithSearchResult:metadata:currentLocation:searchAlongRoute:openAt:](_TtC4Maps36PlaceSummaryViewModelTemplateFactory, "viewModelWithSearchResult:metadata:currentLocation:searchAlongRoute:openAt:", v6, v7, v8, objc_msgSend(*(id *)(a1 + 32), "isPresentingSearchAlongTheRouteResults"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 120)));
      objc_msgSend(*(id *)(a1 + 32), "addMetricsForPlaceSummaryTemplate:indexPath:", v11, v13);
      if (v11)
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "placeSummaryTemplateViewModels"));
        objc_msgSend(v12, "setObject:forKey:", v11, v13);

      }
    }

    v5 = v13;
  }

}

void sub_1005C06FC(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v1, "didCachePlaceSummaryTemplates");

}

void sub_1005C08DC(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  _QWORD block[5];
  id v8;
  id v9;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectAtIndexPath:", v4));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "placeSummaryTemplateForSearchResult:indexPath:", v5, v4));

  if (v6)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1005C09B4;
    block[3] = &unk_1011AD238;
    block[4] = *(_QWORD *)(a1 + 32);
    v8 = v5;
    v9 = v6;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  }
}

void sub_1005C09B4(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentLocation"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "mapItem"));
  +[PlaceSummaryViewModelTemplateFactory updateDistanceViewModelWithCurrentLocation:mapItem:template:searchAlongTheRoute:](_TtC4Maps36PlaceSummaryViewModelTemplateFactory, "updateDistanceViewModelWithCurrentLocation:mapItem:template:searchAlongTheRoute:", v3, v2, *(_QWORD *)(a1 + 48), objc_msgSend(*(id *)(a1 + 32), "isPresentingSearchAlongTheRouteResults"));

}

void sub_1005C0D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1005C0D8C(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  objc_msgSend(v1, "didTapOnAddAPlace");

}

void sub_1005C1C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1005C1C94(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v7 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "firstObject"));

    if (v4)
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "firstObject"));
      objc_msgSend(v5, "didTapOnTappableEntry:", v6);

      objc_msgSend(WeakRetained, "setMapServiceTicket:", 0);
    }
  }

}

int64_t sub_1005C3440(id a1, GEOLPRRegion *a2, GEOLPRRegion *a3)
{
  GEOLPRRegion *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[GEOLPRRegion displayNames](a2, "displayNames"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "stringValue"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(-[GEOLPRRegion displayNames](v4, "displayNames"));

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "firstObject"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "stringValue"));
  v11 = objc_msgSend(v7, "compare:", v10);

  return (int64_t)v11;
}

void sub_1005C417C(uint64_t a1)
{
  dispatch_time_t v2;
  _QWORD block[4];
  id v4;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = dispatch_time(0, 250000000);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1005C4210;
    block[3] = &unk_1011ADA00;
    v4 = *(id *)(a1 + 32);
    dispatch_after(v2, (dispatch_queue_t)&_dispatch_main_q, block);

  }
}

uint64_t sub_1005C4210(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint8_t v5[16];

  v2 = sub_100431A4C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "openMapsCarPlayApplicationWithCompletion completionBlock", v5, 2u);
  }

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1005C4360(id a1, BSProcessHandle *a2, NSError *a3)
{
  NSError *v3;
  id v4;
  NSObject *v5;
  int v6;
  NSError *v7;

  v3 = a3;
  v4 = sub_100431A4C();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v6 = 138412290;
    v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "openMapsCarPlayApplicationSuspended error %@", (uint8_t *)&v6, 0xCu);
  }

}

id sub_1005C4914()
{
  if (qword_1014D2A10 != -1)
    dispatch_once(&qword_1014D2A10, &stru_1011BCAD8);
  return (id)qword_1014D2A08;
}

void sub_1005C4EA8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "reportStateToStateManager");

}

void sub_1005C4F7C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VIOSessionThermalStateMonitor");
  v2 = (void *)qword_1014D2A08;
  qword_1014D2A08 = (uint64_t)v1;

}

void sub_1005C5178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1005C51A0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;

  v5 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v7 = WeakRetained;
  if (WeakRetained)
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_configuredCellForSubscriptionIdentifier:", v5));
  else
    v8 = 0;

  return v8;
}

void sub_1005C5324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1005C5344(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_reloadSubscriptions");
    WeakRetained = v2;
  }

}

void sub_1005C5840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  id *v24;

  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1005C58A0(uint64_t a1)
{
  _QWORD *WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = (void *)WeakRetained[1];
    v6 = WeakRetained;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "subscription"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));
    objc_msgSend(v3, "cancelDownloadForSubscriptionIdentifier:", v5);

    WeakRetained = v6;
  }

}

void sub_1005C591C(uint64_t a1)
{
  _QWORD *WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = (void *)WeakRetained[1];
    v6 = WeakRetained;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "subscription"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));
    objc_msgSend(v3, "startDownloadForSubscriptionIdentifier:mode:", v5, 1);

    WeakRetained = v6;
  }

}

void sub_1005C5A5C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1005C5A78(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  NSObject *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id obj;
  _QWORD block[4];
  id v22;
  id v23;
  id v24;
  _QWORD v25[4];
  id v26;
  void *v27;
  NSObject *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v7 = WeakRetained;
  if (!a3 && WeakRetained)
  {
    v18 = WeakRetained;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    v9 = dispatch_group_create();
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v19 = v5;
    obj = v5;
    v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v30;
      do
      {
        v13 = 0;
        do
        {
          if (*(_QWORD *)v30 != v12)
            objc_enumerationMutation(obj);
          v14 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)v13);
          dispatch_group_enter(v9);
          v15 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "identifier"));
          v25[0] = _NSConcreteStackBlock;
          v25[1] = 3221225472;
          v25[2] = sub_1005C5CCC;
          v25[3] = &unk_1011BCB50;
          v26 = v8;
          v27 = v14;
          v28 = v9;
          objc_msgSend(v15, "fetchStateForSubscriptionWithIdentifier:callbackQueue:completionHandler:", v16, &_dispatch_main_q, v25);

          v13 = (char *)v13 + 1;
        }
        while (v11 != v13);
        v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
      }
      while (v11);
    }

    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1005C5D30;
    block[3] = &unk_1011AD238;
    v22 = v8;
    v7 = v18;
    v23 = obj;
    v24 = v18;
    v17 = v8;
    dispatch_group_notify(v9, (dispatch_queue_t)&_dispatch_main_q, block);

    v5 = v19;
  }

}

void sub_1005C5CCC(uint64_t a1, void *a2, uint64_t a3)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;

  if (!a3)
  {
    v4 = *(void **)(a1 + 32);
    v5 = *(void **)(a1 + 40);
    v6 = a2;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v6, v7);

    dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
  }
}

void sub_1005C5D30(uint64_t a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *i;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  void *j;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  void *k;
  uint64_t v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  void *m;
  id v38;
  id v39;
  void *v40;
  id obj;
  uint64_t v42;
  void *v43;
  id v44;
  void *v45;
  _QWORD v46[4];
  id v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _BYTE v64[128];
  _QWORD v65[16];

  v2 = objc_msgSend(*(id *)(a1 + 32), "count");
  if (v2 == objc_msgSend(*(id *)(a1 + 40), "count"))
  {
    v46[0] = _NSConcreteStackBlock;
    v46[1] = 3221225472;
    v46[2] = sub_1005C6248;
    v46[3] = &unk_1011BCB78;
    v3 = *(void **)(a1 + 40);
    v47 = *(id *)(a1 + 32);
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "_geo_map:", v46));
    v5 = *(_QWORD *)(a1 + 48);
    v6 = *(void **)(v5 + 16);
    *(_QWORD *)(v5 + 16) = v4;

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_geo_map:", &stru_1011BCBB8));
    v8 = objc_alloc_init((Class)NSDiffableDataSourceSnapshot);
    objc_msgSend(v8, "appendSectionsWithIdentifiers:", &off_101273878);
    if (objc_msgSend(v7, "count"))
      objc_msgSend(v8, "appendItemsWithIdentifiers:", v7);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 32), "applySnapshot:animatingDifferences:", v8, 1);
    v9 = *(_QWORD *)(a1 + 48);
    v10 = *(_QWORD *)(v9 + 24);
    v11 = *(id *)(v9 + 16);
    if (v10)
    {
      v39 = v8;
      v40 = v7;
      dispatch_assert_queue_V2((dispatch_queue_t)&_dispatch_main_q);
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
      v56 = 0u;
      v57 = 0u;
      v58 = 0u;
      v59 = 0u;
      v38 = v11;
      obj = v11;
      v44 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v56, v64, 16);
      if (v44)
      {
        v42 = *(_QWORD *)v57;
        v43 = v12;
        do
        {
          for (i = 0; i != v44; i = (char *)i + 1)
          {
            if (*(_QWORD *)v57 != v42)
              objc_enumerationMutation(obj);
            v14 = *(void **)(*((_QWORD *)&v56 + 1) + 8 * (_QWORD)i);
            v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "state"));
            v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "subscription"));
            v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "identifier"));
            v17 = v15;
            v18 = v16;
            sub_1005C716C(v10, v18);
            objc_msgSend(*(id *)(v10 + 8), "setObject:forKey:", v17, v18);
            v62 = 0u;
            v63 = 0u;
            v60 = 0u;
            v61 = 0u;
            v65[0] = CFSTR("loadState");
            v65[1] = CFSTR("downloadedDataSize");
            v65[2] = CFSTR("progress");
            v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v65, 3));
            v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v60, v65, 16);
            if (v20)
            {
              v21 = v20;
              v22 = *(_QWORD *)v61;
              do
              {
                for (j = 0; j != v21; j = (char *)j + 1)
                {
                  if (*(_QWORD *)v61 != v22)
                    objc_enumerationMutation(v19);
                  objc_msgSend(v17, "addObserver:forKeyPath:options:context:", v10, *(_QWORD *)(*((_QWORD *)&v60 + 1) + 8 * (_QWORD)j), 0, off_1014AE350);
                }
                v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v60, v65, 16);
              }
              while (v21);
            }

            v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "subscription"));
            v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "identifier"));
            v12 = v43;
            objc_msgSend(v43, "addObject:", v25);

          }
          v44 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v56, v64, 16);
        }
        while (v44);
      }

      v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
      v52 = 0u;
      v53 = 0u;
      v54 = 0u;
      v55 = 0u;
      v27 = *(id *)(v10 + 8);
      v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v52, v65, 16);
      if (v28)
      {
        v29 = v28;
        v30 = *(_QWORD *)v53;
        do
        {
          for (k = 0; k != v29; k = (char *)k + 1)
          {
            if (*(_QWORD *)v53 != v30)
              objc_enumerationMutation(v27);
            v32 = *(_QWORD *)(*((_QWORD *)&v52 + 1) + 8 * (_QWORD)k);
            if ((objc_msgSend(v12, "containsObject:", v32) & 1) == 0)
              objc_msgSend(v26, "addObject:", v32);
          }
          v29 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v52, v65, 16);
        }
        while (v29);
      }

      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v33 = v26;
      v34 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v48, &v60, 16);
      v8 = v39;
      v7 = v40;
      if (v34)
      {
        v35 = v34;
        v36 = *(_QWORD *)v49;
        do
        {
          for (m = 0; m != v35; m = (char *)m + 1)
          {
            if (*(_QWORD *)v49 != v36)
              objc_enumerationMutation(v33);
            sub_1005C716C(v10, *(void **)(*((_QWORD *)&v48 + 1) + 8 * (_QWORD)m));
          }
          v35 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v48, &v60, 16);
        }
        while (v35);
      }

      v11 = v38;
    }

  }
}

MapDataSubscriptionInfo *sub_1005C6248(uint64_t a1, void *a2)
{
  id v3;
  MapDataSubscriptionInfo *v4;
  void *v5;
  void *v6;
  void *v7;
  MapDataSubscriptionInfo *v8;

  v3 = a2;
  v4 = [MapDataSubscriptionInfo alloc];
  v5 = *(void **)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", v6));
  v8 = -[MapDataSubscriptionInfo initWithSubscription:state:](v4, "initWithSubscription:state:", v3, v7);

  return v8;
}

NSString *__cdecl sub_1005C62D4(id a1, GEOMapDataSubscription *a2)
{
  return (NSString *)-[GEOMapDataSubscription identifier](a2, "identifier");
}

void sub_1005C6E6C(uint64_t a1, void *a2, uint64_t a3)
{
  _QWORD *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * a3);
  v4 = a2;
  objc_msgSend(v4, "lat");
  v6 = v5;
  objc_msgSend(v4, "lng");
  v8 = v7;

  *v3 = v6;
  v3[1] = v8;
}

void sub_1005C716C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  _QWORD v15[3];

  v3 = a2;
  if (a1)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 8), "objectForKeyedSubscript:", v3));
    if (v4)
    {
      v12 = 0u;
      v13 = 0u;
      v10 = 0u;
      v11 = 0u;
      v15[0] = CFSTR("loadState");
      v15[1] = CFSTR("downloadedDataSize");
      v15[2] = CFSTR("progress");
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v15, 3, 0));
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v6)
      {
        v7 = v6;
        v8 = *(_QWORD *)v11;
        do
        {
          v9 = 0;
          do
          {
            if (*(_QWORD *)v11 != v8)
              objc_enumerationMutation(v5);
            objc_msgSend(v4, "removeObserver:forKeyPath:context:", a1, *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)v9), off_1014AE350);
            v9 = (char *)v9 + 1;
          }
          while (v7 != v9);
          v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
        }
        while (v7);
      }

      objc_msgSend(*(id *)(a1 + 8), "removeObjectForKey:", v3);
    }

  }
}

void sub_1005C73BC(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v2 = *(void **)(a1 + 40);
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1005C7430;
  v6[3] = &unk_1011BCC00;
  v4 = v2;
  v5 = *(_QWORD *)(a1 + 32);
  v7 = v4;
  v8 = v5;
  objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", v6);

}

void sub_1005C7430(uint64_t a1, void *a2, uint64_t a3)
{
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;

  if (*(_QWORD *)(a1 + 32) == a3)
  {
    v4 = *(void **)(*(_QWORD *)(a1 + 40) + 16);
    v5 = a2;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "snapshot"));
    v7 = objc_msgSend(v6, "copy");

    v9 = v5;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v9, 1));
    objc_msgSend(v7, "reconfigureItemsWithIdentifiers:", v8);

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "applySnapshot:animatingDifferences:", v7, 1);
  }
}

void sub_1005C7A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1005C7A90(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "actionDelegate"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "subscriptionInfo"));
    objc_msgSend(v2, "offlineMapDetailsActionSectionControllerDidSelectRenameMap:completionHandler:", v3, &stru_1011BCC20);

    +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 385, 112, 0);
    WeakRetained = v4;
  }

}

void sub_1005C7B14(id a1, BOOL a2)
{
  if (a2)
    +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 378, 112, 0);
}

void sub_1005C7EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1005C7F24(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "actionDelegate"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "subscriptionInfo"));
    objc_msgSend(v2, "offlineMapDetailsActionSectionControllerDidSelectResizeMap:", v3);

    +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 407, 112, 0);
    WeakRetained = v4;
  }

}

void sub_1005C81CC(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSByteCountFormatter);
  v2 = (void *)qword_1014D2A18;
  qword_1014D2A18 = (uint64_t)v1;

}

void sub_1005C9720(id a1)
{
  id v1;
  double v2;
  uint64_t v3;
  void *v4;
  NSAttributedStringKey v5;
  id v6;

  v1 = objc_alloc_init((Class)NSMutableParagraphStyle);
  LODWORD(v2) = 1036831949;
  objc_msgSend(v1, "setHyphenationFactor:", v2);
  objc_msgSend(v1, "setLineBreakMode:", 4);
  v5 = NSParagraphStyleAttributeName;
  v6 = v1;
  v3 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v6, &v5, 1));
  v4 = (void *)qword_1014D2A30;
  qword_1014D2A30 = v3;

}

id sub_1005C9D40(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "resolveLabelMarker:", *(_QWORD *)(a1 + 32));
}

id sub_1005C9DE0(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "resolveAddress:", *(_QWORD *)(a1 + 32));
}

id sub_1005C9E80(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "resolveAddressString:", *(_QWORD *)(a1 + 32));
}

id sub_1005C9F20(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "resolveMapItem:", *(_QWORD *)(a1 + 32));
}

uint64_t sub_1005CA068(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_1005CA1A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1005CA254(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1005CA52C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;

  v6 = a4;
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "mapItem"));
  objc_msgSend(*(id *)(a1 + 32), "setResolvedMapItem:", v7);
  objc_msgSend(*(id *)(a1 + 32), "setError:", v6);

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1005CA900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;

  _Block_object_dispose(&a34, 8);
  _Block_object_dispose((const void *)(v34 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1005CA92C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1005CA93C(uint64_t a1)
{

}

void sub_1005CA944(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  unsigned int *v9;
  id v11;

  v11 = a2;
  v5 = a3;
  if ((objc_msgSend(*(id *)(a1 + 32), "isCanceled") & 1) == 0)
  {
    if (v5
      && (v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_geoMapItemStorageForPersistence")),
          v6,
          v6))
    {
      objc_msgSend(*(id *)(a1 + 32), "setError:", 0);
      v7 = *(id *)(a1 + 40);
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 32), "setError:", v5);
      v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "firstObject"));
    }
    v8 = v7;
    if (*(_QWORD *)(a1 + 48))
      objc_msgSend(v7, "setName:");
    if (*(_QWORD *)(a1 + 56))
      objc_msgSend(v8, "setUrl:");
    if (*(_QWORD *)(a1 + 64))
      objc_msgSend(v8, "setPhoneNumber:");
    objc_msgSend(*(id *)(a1 + 32), "setResolvedMapItem:", v8);
    v9 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24);
    while (!__ldxr(v9))
    {
      if (!__stxr(1u, v9))
      {
        dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
        goto LABEL_17;
      }
    }
    __clrex();
LABEL_17:

  }
}

void sub_1005CAA58(uint64_t a1, int a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(void **)(v3 + 40);
  if (a2)
  {
    if (!v4)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[LoadingIndicatorController sharedController](LoadingIndicatorController, "sharedController"));
      v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "beginShowingLoadingIndicator"));
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v7 = *(void **)(v6 + 40);
      *(_QWORD *)(v6 + 40) = v5;

    }
  }
  else if (v4)
  {
    *(_QWORD *)(v3 + 40) = 0;

  }
}

void sub_1005CAAE0(uint64_t a1)
{
  void *v2;
  unsigned int *v3;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    objc_msgSend(v2, "cancel");
    v3 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    while (!__ldxr(v3))
    {
      if (!__stxr(1u, v3))
      {
        dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
        return;
      }
    }
    __clrex();
  }
}

void sub_1005CAD04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1005CAD28(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  unsigned int *v20;
  _QWORD v22[4];
  id v23;
  id v24;
  uint64_t v25;
  _QWORD v26[5];
  _QWORD v27[5];
  id v28;
  uint64_t v29;
  _QWORD v30[5];
  id v31;

  v5 = a2;
  v6 = a3;
  if ((objc_msgSend(*(id *)(a1 + 32), "isCanceled") & 1) == 0)
  {
    v30[0] = 0;
    v30[1] = v30;
    v30[2] = 0x3032000000;
    v30[3] = sub_1005CA92C;
    v30[4] = sub_1005CA93C;
    v31 = 0;
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 40));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
    v8 = *(_QWORD *)(a1 + 48);
    objc_msgSend(v5, "coordinate");
    v10 = v9;
    v12 = v11;
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "traits"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "ticketForNearestTransitStation:coordinate:traits:", v8, v13, v10, v12));

    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_1005CAF64;
    v27[3] = &unk_1011BCD00;
    v15 = *(_QWORD *)(a1 + 56);
    v16 = *(void **)(a1 + 40);
    v27[4] = *(_QWORD *)(a1 + 32);
    v29 = v15;
    v28 = v16;
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    v26[2] = sub_1005CB030;
    v26[3] = &unk_1011AEF80;
    v26[4] = v30;
    objc_msgSend(v14, "submitWithHandler:networkActivity:", v27, v26);
    v17 = *(void **)(a1 + 32);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_1005CB0B8;
    v22[3] = &unk_1011AE630;
    v18 = v14;
    v19 = *(_QWORD *)(a1 + 56);
    v23 = v18;
    v25 = v19;
    v24 = *(id *)(a1 + 40);
    objc_msgSend(v17, "_addCancelationHandler:", v22);
    v20 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
    while (!__ldxr(v20))
    {
      if (!__stxr(1u, v20))
      {
        dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
        goto LABEL_7;
      }
    }
    __clrex();
LABEL_7:

    _Block_object_dispose(v30, 8);
  }

}

void sub_1005CAF4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1005CAF64(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  unsigned int *v7;
  id v9;

  v9 = a2;
  v5 = a3;
  if ((objc_msgSend(*(id *)(a1 + 32), "isCanceled") & 1) == 0)
  {
    if (v5 || !objc_msgSend(v9, "count"))
      objc_msgSend(*(id *)(a1 + 32), "setError:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "firstObject"));
    objc_msgSend(*(id *)(a1 + 32), "setResolvedMapItem:", v6);

    objc_msgSend(*(id *)(a1 + 32), "setHasNearestStation:", 1);
    v7 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    while (!__ldxr(v7))
    {
      if (!__stxr(1u, v7))
      {
        dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
        goto LABEL_10;
      }
    }
    __clrex();
  }
LABEL_10:

}

void sub_1005CB030(uint64_t a1, int a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(void **)(v3 + 40);
  if (a2)
  {
    if (!v4)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[LoadingIndicatorController sharedController](LoadingIndicatorController, "sharedController"));
      v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "beginShowingLoadingIndicator"));
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v7 = *(void **)(v6 + 40);
      *(_QWORD *)(v6 + 40) = v5;

    }
  }
  else if (v4)
  {
    *(_QWORD *)(v3 + 40) = 0;

  }
}

void sub_1005CB0B8(uint64_t a1)
{
  unsigned int *v2;

  objc_msgSend(*(id *)(a1 + 32), "cancel");
  v2 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  while (!__ldxr(v2))
  {
    if (!__stxr(1u, v2))
    {
      dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
      return;
    }
  }
  __clrex();
}

void sub_1005CB110(uint64_t a1)
{
  unsigned int *v2;

  objc_msgSend(*(id *)(a1 + 32), "cancel");
  v2 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  while (!__ldxr(v2))
  {
    if (!__stxr(1u, v2))
    {
      dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
      return;
    }
  }
  __clrex();
}

void sub_1005CB1E8(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  objc_msgSend(v5, "setResolvedMapItem:", a2);
  objc_msgSend(*(id *)(a1 + 32), "setError:", v6);

  dispatch_group_leave(*(dispatch_group_t *)(*(_QWORD *)(a1 + 32) + 8));
}

void sub_1005CB44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 176), 8);
  _Block_object_dispose((const void *)(v29 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1005CB484(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unsigned int *v12;
  id v14;

  v14 = a2;
  v6 = objc_msgSend(*(id *)(a1 + 32), "isCanceled");
  v7 = v14;
  if ((v6 & 1) == 0)
  {
    v8 = objc_msgSend(v14, "count");
    if (!a4 && v8 == (id)1)
    {
      v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "firstObject"));
      v10 = *(_QWORD *)(a1 + 32);
      v11 = *(void **)(v10 + 72);
      *(_QWORD *)(v10 + 72) = v9;

    }
    v12 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    while (!__ldxr(v12))
    {
      if (!__stxr(1u, v12))
      {
        dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
        goto LABEL_10;
      }
    }
    __clrex();
LABEL_10:
    v7 = v14;
  }

}

void sub_1005CB528(uint64_t a1, int a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(void **)(v3 + 40);
  if (a2)
  {
    if (!v4)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[LoadingIndicatorController sharedController](LoadingIndicatorController, "sharedController"));
      v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "beginShowingLoadingIndicator"));
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v7 = *(void **)(v6 + 40);
      *(_QWORD *)(v6 + 40) = v5;

    }
  }
  else if (v4)
  {
    *(_QWORD *)(v3 + 40) = 0;

  }
}

void sub_1005CB5B0(uint64_t a1)
{
  unsigned int *v2;

  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "cancel");
  v2 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  while (!__ldxr(v2))
  {
    if (!__stxr(1u, v2))
    {
      dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
      return;
    }
  }
  __clrex();
}

void sub_1005CBD8C(id a1)
{
  uint64_t Log;
  NSObject *v2;
  CarRouteGeniusService *v3;
  void *v4;
  uint8_t v5[16];

  Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "CarRouteGeniusService");
  v2 = objc_claimAutoreleasedReturnValue(Log);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "building RouteGenius Service", v5, 2u);
  }

  v3 = objc_alloc_init(CarRouteGeniusService);
  v4 = (void *)qword_1014D2A38;
  qword_1014D2A38 = (uint64_t)v3;

}

void sub_1005CBF50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1005CC004(NSObject **a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t Log;
  _QWORD v11[4];
  NSObject *v12;
  id v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;

  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = v5;
    v8 = *a1;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1005CCEBC;
    v11[3] = &unk_1011BCF88;
    v12 = v7;
    v13 = v6;
    dispatch_async(v8, v11);

    v9 = v12;
  }
  else
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "MSg::Queue");
    v9 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446978;
      v15 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsQueue.hpp";
      v16 = 1024;
      v17 = 208;
      v18 = 2082;
      v19 = "void MSg::Queue::async(S *, void (^__strong)(S *)) const [S = CarRouteGeniusService]";
      v20 = 2082;
      v21 = "nil == (callerSelf)";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires self", buf, 0x26u);
    }
  }

}

void sub_1005CC180(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1005CC198(id a1, CarRouteGeniusService *a2)
{
  CarRouteGeniusService *v2;
  uint64_t Log;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t v7[16];
  uint8_t buf[16];

  v2 = a2;
  if (-[CarRouteGeniusService isActive](v2, "isActive"))
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "CarRouteGeniusService");
    v4 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "RouteGeniusService was already active", buf, 2u);
    }

  }
  else
  {
    v5 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "CarRouteGeniusService");
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Starting RouteGeniusService", v7, 2u);
    }

    -[CarRouteGeniusService _isActive:](v2, "_isActive:", 1);
    -[MNRouteGeniusRemoteService start](v2->_config.remote, "start");
  }

}

void sub_1005CC28C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1005CC334(id a1, CarRouteGeniusService *a2)
{
  CarRouteGeniusService *v2;
  uint64_t Log;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t v7[16];
  uint8_t buf[16];

  v2 = a2;
  if (-[CarRouteGeniusService isActive](v2, "isActive"))
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "CarRouteGeniusService");
    v4 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Force RouteGenius reroute", v7, 2u);
    }

    -[MNRouteGeniusRemoteService forceReroute](v2->_config.remote, "forceReroute");
  }
  else
  {
    v5 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "CarRouteGeniusService");
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "RouteGenius is not active", buf, 2u);
    }

  }
}

void sub_1005CC41C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1005CC4C4(id a1, CarRouteGeniusService *a2)
{
  CarRouteGeniusService *v2;
  uint64_t Log;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t v7[16];
  uint8_t buf[16];

  v2 = a2;
  if (-[CarRouteGeniusService isActive](v2, "isActive"))
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "CarRouteGeniusService");
    v4 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Stopping RouteGeniusService", v7, 2u);
    }

    -[CarRouteGeniusService _isActive:](v2, "_isActive:", 0);
    -[MNRouteGeniusRemoteService stop](v2->_config.remote, "stop");
  }
  else
  {
    v5 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "CarRouteGeniusService");
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "RouteGeniusService was not active", buf, 2u);
    }

  }
}

void sub_1005CC5B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1005CC724(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1005CC820(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1005CC8F8(uint64_t a1)
{
  id *WeakRetained;
  id *v3;
  id v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  char *v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t Log;
  uint64_t v13;
  NSObject *v14;
  _QWORD v15[4];
  NSObject *v16;
  uint8_t buf[4];
  char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  const char *v22;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (!WeakRetained)
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "CarRouteGeniusService");
    v11 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v18 = "CarRouteGeniusService.mm";
      v19 = 1026;
      v20 = 151;
      v21 = 2082;
      v22 = "-[CarRouteGeniusService didUpdateRouteGenius:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
    }
    v10 = v11;
    goto LABEL_9;
  }
  v4 = WeakRetained[3];
  WeakRetained[3] = 0;

  if (*(_QWORD *)(a1 + 32))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[MapsSuggestionsRouteGeniusEntry entryWithData:](MapsSuggestionsRouteGeniusEntry, "entryWithData:"));
    objc_storeStrong(v3 + 3, v5);
    v6 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "CarRouteGeniusService");
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = *(char **)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v18 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "received entry: %@", buf, 0xCu);
    }

    v9 = v3[4];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_1005CCBA4;
    v15[3] = &unk_1011BCEA8;
    v10 = v5;
    v16 = v10;
    objc_msgSend(v9, "callBlock:", v15);
    v11 = v16;
LABEL_9:

    goto LABEL_13;
  }
  objc_msgSend(v3, "stop");
  v13 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "CarRouteGeniusService");
  v14 = objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "will notify about nil entry", buf, 2u);
  }

  objc_msgSend(v3[4], "callBlock:", &stru_1011BCEE8);
LABEL_13:

}

void sub_1005CCB64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1005CCBA4(uint64_t a1, void *a2)
{
  id v3;
  _QWORD v4[4];
  id v5;
  id v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1005CCC38;
  v4[3] = &unk_1011BCE80;
  v5 = a2;
  v6 = *(id *)(a1 + 32);
  v3 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v4);

}

id sub_1005CCC38(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "didUpdateRouteGenius:", *(_QWORD *)(a1 + 40));
}

void sub_1005CCC44(id a1, MapsSuggestionsRouteGeniusObserver *a2)
{
  MapsSuggestionsRouteGeniusObserver *v2;
  _QWORD block[4];
  MapsSuggestionsRouteGeniusObserver *v4;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1005CCCBC;
  block[3] = &unk_1011BCF10;
  v4 = a2;
  v2 = v4;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

id sub_1005CCCBC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "didUpdateRouteGenius:", 0);
}

void sub_1005CCE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;

  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

id sub_1005CCE4C(uint64_t a1)
{
  return *(id *)(*(_QWORD *)(a1 + 32) + 24);
}

void sub_1005CCEAC(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_1005CCEBC(uint64_t a1)
{
  id v2;
  uint64_t Log;
  NSObject *v4;
  uint8_t v5[16];

  v2 = *(id *)(a1 + 32);
  if (v2)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "MSg::Queue");
    v4 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "self went away in MSg::Queue::async()", v5, 2u);
    }

  }
}

void sub_1005CCF60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1005CCF74(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1005CCF84(uint64_t a1)
{

}

void sub_1005CCF8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_1005CDE18(uint64_t a1, void *a2, void *a3, void *a4)
{
  TrafficIncidentLayout *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *i;
  void *v17;
  unsigned int v18;
  void *v19;
  void *v20;
  unsigned int v21;
  id v22;
  TrafficIncidentLayout *v23;
  int v24;
  void *v25;
  id v26;
  NSObject *v27;
  uint64_t v28;
  id v29;
  NSObject *v30;
  uint64_t v31;
  id v32;
  id v33;
  TrafficIncidentLayout *v34;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint8_t buf[4];
  TrafficIncidentLayout *v41;
  __int16 v42;
  id v43;
  _BYTE v44[128];

  v6 = a2;
  v7 = a3;
  v8 = a4;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v9 = (void *)objc_claimAutoreleasedReturnValue(-[TrafficIncidentLayout feedbackResult](v6, "feedbackResult"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "layoutConfigResult"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "forms"));

  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v36, v44, 16);
  if (v12)
  {
    v13 = v12;
    v32 = v8;
    v33 = v7;
    v34 = v6;
    v14 = 0;
    v15 = *(_QWORD *)v37;
    do
    {
      for (i = 0; i != v13; i = (char *)i + 1)
      {
        if (*(_QWORD *)v37 != v15)
          objc_enumerationMutation(v11);
        v17 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * (_QWORD)i);
        v18 = objc_msgSend(v17, "formType", v32, v33, v34);
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "feedbackRequestParameters"));
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "layoutConfigParameters"));
        v21 = objc_msgSend(v20, "formType");

        if (v18 == v21)
        {
          v22 = v17;

          v14 = v22;
        }
      }
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v36, v44, 16);
    }
    while (v13);

    v7 = v33;
    v6 = v34;
    v8 = v32;
    if (v14)
    {
      v23 = -[TrafficIncidentLayout initWithLayoutFormConfig:location:]([TrafficIncidentLayout alloc], "initWithLayoutFormConfig:location:", v14, *(_QWORD *)(a1 + 40));
      v24 = *(_DWORD *)(a1 + 56);
      if (v24 == 7)
      {
        v25 = (void *)objc_claimAutoreleasedReturnValue(+[TrafficIncidentLayoutStorage sharedInstance](TrafficIncidentLayoutStorage, "sharedInstance"));
        objc_msgSend(v25, "saveIncidentLayout:", v23);
      }
      else
      {
        if (v24 != 9)
        {
LABEL_21:
          v29 = sub_1004327DC();
          v30 = objc_claimAutoreleasedReturnValue(v29);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v41 = v23;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "LayoutItem %@", buf, 0xCu);
          }

          v31 = *(_QWORD *)(a1 + 48);
          if (v31)
            (*(void (**)(uint64_t, TrafficIncidentLayout *))(v31 + 16))(v31, v23);

          goto LABEL_26;
        }
        v25 = (void *)objc_claimAutoreleasedReturnValue(+[TrafficIncidentLayoutStorage sharedInstance](TrafficIncidentLayoutStorage, "sharedInstance"));
        objc_msgSend(v25, "saveIncidentVotingLayout:", v23);
      }

      goto LABEL_21;
    }
  }
  else
  {

  }
  v26 = sub_1004327DC();
  v27 = objc_claimAutoreleasedReturnValue(v26);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412546;
    v41 = v6;
    v42 = 2112;
    v43 = v8;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "Error: Layout config not included in response: %@ error: %@", buf, 0x16u);
  }

  v28 = *(_QWORD *)(a1 + 48);
  if (v28)
    (*(void (**)(uint64_t, _QWORD))(v28 + 16))(v28, 0);
LABEL_26:

}

void sub_1005CE41C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1005CE440(uint64_t a1)
{
  int v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  _QWORD v14[4];
  id v15;
  id v16;
  _QWORD v17[4];
  id v18;
  id v19;
  _QWORD v20[4];
  id v21;
  id v22;
  id from;
  id to;

  objc_copyWeak(&to, (id *)(a1 + 48));
  v2 = *(_DWORD *)(a1 + 56);
  switch(v2)
  {
    case 6:
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cachedObjectWithType:", 6));
      if (v3)
        goto LABEL_9;
      objc_copyWeak(&from, &to);
      v8 = objc_loadWeakRetained(&to);
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "locationOfInterestManager"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", &off_1012738F0));
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_1005CE8A0;
      v14[3] = &unk_1011B1D58;
      v15 = *(id *)(a1 + 40);
      objc_copyWeak(&v16, &from);
      objc_msgSend(v9, "afterInitialRetrievalOfLOIsOfTypes:perform:", v10, v14);

      objc_destroyWeak(&v16);
      v7 = v15;
      goto LABEL_13;
    case 2:
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cachedObjectWithType:", 2));
      if (v3)
      {
LABEL_9:
        (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
LABEL_14:

        break;
      }
      objc_copyWeak(&from, &to);
      v11 = objc_loadWeakRetained(&to);
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "locationOfInterestManager"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", &off_1012738D8));
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_1005CE824;
      v17[3] = &unk_1011B1D58;
      v18 = *(id *)(a1 + 40);
      objc_copyWeak(&v19, &from);
      objc_msgSend(v12, "afterInitialRetrievalOfLOIsOfTypes:perform:", v13, v17);

      objc_destroyWeak(&v19);
      v7 = v18;
LABEL_13:

      objc_destroyWeak(&from);
      v3 = 0;
      goto LABEL_14;
    case 1:
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cachedObjectWithType:", 1));
      if (v3)
        goto LABEL_9;
      objc_copyWeak(&from, &to);
      v4 = objc_loadWeakRetained(&to);
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "locationOfInterestManager"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", &off_1012738C0));
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_1005CE7A8;
      v20[3] = &unk_1011B1D58;
      v21 = *(id *)(a1 + 40);
      objc_copyWeak(&v22, &from);
      objc_msgSend(v5, "afterInitialRetrievalOfLOIsOfTypes:perform:", v6, v20);

      objc_destroyWeak(&v22);
      v7 = v21;
      goto LABEL_13;
  }
  objc_destroyWeak(&to);
}

void sub_1005CE758(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;
  id *v3;

  v3 = v1;
  objc_destroyWeak(v3);
  objc_destroyWeak((id *)(v2 - 48));
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1005CE7A8(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  id WeakRetained;

  v1 = *(_QWORD *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "locationOfInterestManager"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "homeLOIs"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "firstObject"));
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v4);

}

void sub_1005CE824(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  id WeakRetained;

  v1 = *(_QWORD *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "locationOfInterestManager"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "workLOIs"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "firstObject"));
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v4);

}

void sub_1005CE8A0(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  id WeakRetained;

  v1 = *(_QWORD *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "locationOfInterestManager"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "schoolLOIs"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "firstObject"));
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v4);

}

void sub_1005CEBB8(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void (*v5)(void);
  uint64_t v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;

  v3 = a2;
  v4 = objc_opt_class(AddressBookAddress);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    v5 = *(void (**)(void))(*(_QWORD *)(a1 + 32) + 16);
LABEL_6:
    v5();
    goto LABEL_7;
  }
  v6 = objc_opt_class(RTLocationOfInterest);
  if ((objc_opt_isKindOfClass(v3, v6) & 1) == 0)
  {
    v5 = *(void (**)(void))(*(_QWORD *)(a1 + 32) + 16);
    goto LABEL_6;
  }
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1005CECBC;
  v7[3] = &unk_1011BD050;
  v8 = v3;
  v9 = v8;
  v10 = *(id *)(a1 + 32);
  objc_msgSend(v8, "_maps_hydrateGeoMapItem:", v7);

LABEL_7:
}

void sub_1005CECBC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t Log;
  NSObject *v8;
  void *v9;
  MapsLocationOfInterest *v10;
  id v11;
  MapsLocationOfInterest *v12;
  _QWORD v13[4];
  MapsLocationOfInterest *v14;
  id v15;
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  id v19;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "MapsLocationOfInterest");
    v8 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
      *(_DWORD *)buf = 138412547;
      v17 = v9;
      v18 = 2113;
      v19 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed hydrating the geoMapItem for LOI w/ identifier %@. Error: %{private}@", buf, 0x16u);

    }
  }
  else if (v5)
  {
    v10 = -[MapsLocationOfInterest initWithLocationOfInterest:geoMapItem:]([MapsLocationOfInterest alloc], "initWithLocationOfInterest:geoMapItem:", *(_QWORD *)(a1 + 40), v5);
    goto LABEL_8;
  }
  v10 = 0;
LABEL_8:
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1005CEE4C;
  v13[3] = &unk_1011ACAD0;
  v11 = *(id *)(a1 + 48);
  v14 = v10;
  v15 = v11;
  v12 = v10;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v13);

}

