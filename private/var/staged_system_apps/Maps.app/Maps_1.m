uint64_t sub_10008F248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008F254);
}

uint64_t sub_10008F254(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for AttributedString(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_10008F2D0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for AttributedString(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

_QWORD *sub_10008F354(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v8);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t sub_10008F3E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10008F440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10008F4A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008F4AC);
}

uint64_t sub_10008F4AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 2)
    return v9 - 1;
  else
    return 0;
}

uint64_t sub_10008F524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008F530);
}

uint64_t sub_10008F530(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  return result;
}

uint64_t sub_10008F5A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000925F4(a1, a2, a3, (uint64_t)&unk_100E27D60);
}

_QWORD *sub_10008F5B4(_QWORD *a1, char *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(_QWORD *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t, __n128);
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  _QWORD *v38;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v31 = *(_QWORD *)a2;
    *a1 = *(_QWORD *)a2;
    a1 = (_QWORD *)(v31 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    v8 = *(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v37 = a3;
    v38 = a2;
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = &a2[v9];
    v8((_QWORD *)((char *)a1 + v9), v11, v7);
    v12 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.Label(0);
    v13 = v12[5];
    v14 = &v10[v13];
    v15 = &v11[v13];
    v16 = type metadata accessor for AttributedString(0);
    v17 = *(_QWORD *)(v16 - 8);
    v36 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
    v36(v14, v15, v16);
    v18 = v12[6];
    v19 = &v10[v18];
    v20 = &v11[v18];
    v21 = *((_QWORD *)v20 + 1);
    *(_QWORD *)v19 = *(_QWORD *)v20;
    *((_QWORD *)v19 + 1) = v21;
    *(_QWORD *)&v10[v12[7]] = *(_QWORD *)&v11[v12[7]];
    *(_QWORD *)&v10[v12[8]] = *(_QWORD *)&v11[v12[8]];
    *(_QWORD *)&v10[v12[9]] = *(_QWORD *)&v11[v12[9]];
    *(_QWORD *)&v10[v12[10]] = *(_QWORD *)&v11[v12[10]];
    v22 = v12[11];
    v23 = &v10[v22];
    v24 = &v11[v22];
    *(_QWORD *)v23 = *(_QWORD *)v24;
    v23[8] = v24[8];
    v25 = v12[12];
    v26 = &v10[v25];
    v27 = &v11[v25];
    v28 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v17 + 48);
    swift_bridgeObjectRetain(v21);
    swift_retain();
    swift_retain();
    swift_retain();
    v29 = swift_retain();
    if (v28(v27, 1, v16, v29))
    {
      v30 = sub_100008B04(&qword_101494BF0);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      v36(v26, v27, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v26, 0, 1, v16);
    }
    v32 = *(int *)(v37 + 24);
    v33 = *(void **)((char *)v38 + v32);
    *(_QWORD *)((char *)a1 + v32) = v33;
    v34 = v33;
  }
  return a1;
}

void sub_10008F7C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;

  v4 = type metadata accessor for UUID(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + *(int *)(a2 + 20);
  v5(v6, v4);
  v7 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.Label(0);
  v8 = v6 + v7[5];
  v9 = type metadata accessor for AttributedString(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v11(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[6] + 8));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v12 = v6 + v7[12];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v12, 1, v9))
    v11(v12, v9);

}

uint64_t sub_10008F8DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  unsigned int (*v27)(const void *, uint64_t, uint64_t, __n128);
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  void (*v34)(void *, const void *, uint64_t);
  uint64_t v35;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v35 = a3;
  v8 = *(int *)(a3 + 20);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  v11 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.Label(0);
  v12 = v11[5];
  v13 = (void *)(v9 + v12);
  v14 = (const void *)(v10 + v12);
  v15 = type metadata accessor for AttributedString(0);
  v16 = *(_QWORD *)(v15 - 8);
  v34 = *(void (**)(void *, const void *, uint64_t))(v16 + 16);
  v34(v13, v14, v15);
  v17 = v11[6];
  v18 = (_QWORD *)(v9 + v17);
  v19 = (_QWORD *)(v10 + v17);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  *(_QWORD *)(v9 + v11[7]) = *(_QWORD *)(v10 + v11[7]);
  *(_QWORD *)(v9 + v11[8]) = *(_QWORD *)(v10 + v11[8]);
  *(_QWORD *)(v9 + v11[9]) = *(_QWORD *)(v10 + v11[9]);
  *(_QWORD *)(v9 + v11[10]) = *(_QWORD *)(v10 + v11[10]);
  v21 = v11[11];
  v22 = v9 + v21;
  v23 = v10 + v21;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  v24 = v11[12];
  v25 = (void *)(v9 + v24);
  v26 = (const void *)(v10 + v24);
  v27 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v16 + 48);
  swift_bridgeObjectRetain(v20);
  swift_retain();
  swift_retain();
  swift_retain();
  v28 = swift_retain();
  if (v27(v26, 1, v15, v28))
  {
    v29 = sub_100008B04(&qword_101494BF0);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    v34(v25, v26, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v25, 0, 1, v15);
  }
  v30 = *(int *)(v35 + 24);
  v31 = *(void **)(a2 + v30);
  *(_QWORD *)(a1 + v30) = v31;
  v32 = v31;
  return a1;
}

uint64_t sub_10008FABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t (*v30)(void *, uint64_t, uint64_t);
  int v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  id v36;
  uint64_t v38;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v38 = a3;
  v8 = *(int *)(a3 + 20);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  v11 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.Label(0);
  v12 = v11[5];
  v13 = v9 + v12;
  v14 = v10 + v12;
  v15 = type metadata accessor for AttributedString(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 24);
  v17(v13, v14, v15);
  v18 = v11[6];
  v19 = (_QWORD *)(v9 + v18);
  v20 = (_QWORD *)(v10 + v18);
  *v19 = *v20;
  v21 = v20[1];
  v22 = v19[1];
  v19[1] = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  *(_QWORD *)(v9 + v11[7]) = *(_QWORD *)(v10 + v11[7]);
  swift_retain();
  swift_release();
  *(_QWORD *)(v9 + v11[8]) = *(_QWORD *)(v10 + v11[8]);
  swift_retain();
  swift_release();
  *(_QWORD *)(v9 + v11[9]) = *(_QWORD *)(v10 + v11[9]);
  swift_retain();
  swift_release();
  *(_QWORD *)(v9 + v11[10]) = *(_QWORD *)(v10 + v11[10]);
  swift_retain();
  swift_release();
  v23 = v11[11];
  v24 = v9 + v23;
  v25 = (uint64_t *)(v10 + v23);
  v26 = *v25;
  *(_BYTE *)(v24 + 8) = *((_BYTE *)v25 + 8);
  *(_QWORD *)v24 = v26;
  v27 = v11[12];
  v28 = (void *)(v9 + v27);
  v29 = (void *)(v10 + v27);
  v30 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v11) = v30(v28, 1, v15);
  v31 = v30(v29, 1, v15);
  if (!(_DWORD)v11)
  {
    if (!v31)
    {
      v17((uint64_t)v28, (uint64_t)v29, v15);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v16 + 8))(v28, v15);
    goto LABEL_6;
  }
  if (v31)
  {
LABEL_6:
    v32 = sub_100008B04(&qword_101494BF0);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v28, v29, v15);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v28, 0, 1, v15);
LABEL_7:
  v33 = *(int *)(v38 + 24);
  v34 = *(void **)(a2 + v33);
  v35 = *(void **)(a1 + v33);
  *(_QWORD *)(a1 + v33) = v34;
  v36 = v34;

  return a1;
}

uint64_t sub_10008FD14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(void *, const void *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v26;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v26 = a3;
  v8 = *(int *)(a3 + 20);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  v11 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.Label(0);
  v12 = v11[5];
  v13 = (void *)(v9 + v12);
  v14 = (const void *)(v10 + v12);
  v15 = type metadata accessor for AttributedString(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(void (**)(void *, const void *, uint64_t))(v16 + 32);
  v17(v13, v14, v15);
  *(_OWORD *)(v9 + v11[6]) = *(_OWORD *)(v10 + v11[6]);
  *(_QWORD *)(v9 + v11[7]) = *(_QWORD *)(v10 + v11[7]);
  *(_QWORD *)(v9 + v11[8]) = *(_QWORD *)(v10 + v11[8]);
  *(_QWORD *)(v9 + v11[9]) = *(_QWORD *)(v10 + v11[9]);
  *(_QWORD *)(v9 + v11[10]) = *(_QWORD *)(v10 + v11[10]);
  v18 = v11[11];
  v19 = v9 + v18;
  v20 = v10 + v18;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  v21 = v11[12];
  v22 = (void *)(v9 + v21);
  v23 = (const void *)(v10 + v21);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v23, 1, v15))
  {
    v24 = sub_100008B04(&qword_101494BF0);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    v17(v22, v23, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v22, 0, 1, v15);
  }
  *(_QWORD *)(a1 + *(int *)(v26 + 24)) = *(_QWORD *)(a2 + *(int *)(v26 + 24));
  return a1;
}

uint64_t sub_10008FEBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t (*v30)(void *, uint64_t, uint64_t);
  int v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v36;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v36 = a3;
  v8 = *(int *)(a3 + 20);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  v11 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.Label(0);
  v12 = v11[5];
  v13 = v9 + v12;
  v14 = v10 + v12;
  v15 = type metadata accessor for AttributedString(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 40);
  v17(v13, v14, v15);
  v18 = v11[6];
  v19 = (_QWORD *)(v9 + v18);
  v20 = (uint64_t *)(v10 + v18);
  v22 = *v20;
  v21 = v20[1];
  v23 = v19[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease(v23);
  *(_QWORD *)(v9 + v11[7]) = *(_QWORD *)(v10 + v11[7]);
  swift_release();
  *(_QWORD *)(v9 + v11[8]) = *(_QWORD *)(v10 + v11[8]);
  swift_release();
  *(_QWORD *)(v9 + v11[9]) = *(_QWORD *)(v10 + v11[9]);
  swift_release();
  *(_QWORD *)(v9 + v11[10]) = *(_QWORD *)(v10 + v11[10]);
  swift_release();
  v24 = v11[11];
  v25 = v9 + v24;
  v26 = v10 + v24;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  v27 = v11[12];
  v28 = (void *)(v9 + v27);
  v29 = (void *)(v10 + v27);
  v30 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v11) = v30(v28, 1, v15);
  v31 = v30(v29, 1, v15);
  if (!(_DWORD)v11)
  {
    if (!v31)
    {
      v17((uint64_t)v28, (uint64_t)v29, v15);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v16 + 8))(v28, v15);
    goto LABEL_6;
  }
  if (v31)
  {
LABEL_6:
    v32 = sub_100008B04(&qword_101494BF0);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v28, v29, v15);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v28, 0, 1, v15);
LABEL_7:
  v33 = *(int *)(v36 + 24);
  v34 = *(void **)(a1 + v33);
  *(_QWORD *)(a1 + v33) = *(_QWORD *)(a2 + v33);

  return a1;
}

uint64_t sub_1000900E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000900EC);
}

uint64_t sub_1000900EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for PlaceSummaryViewModelUnit.Label(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_100090194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000901A0);
}

uint64_t sub_1000901A0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for PlaceSummaryViewModelUnit.Label(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t sub_100090244(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for PlaceSummaryViewModelUnit.Label(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
      swift_initStructMetadata(a1, 256, 3, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1000902D4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v9;
    v10 = v9;
  }
  return a1;
}

void sub_100090360(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);

}

uint64_t sub_1000903A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v9 = v8;
  return a1;
}

uint64_t sub_100090404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a2 + v7);
  v9 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v10 = v8;

  return a1;
}

uint64_t sub_10009046C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1000904C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);

  return a1;
}

uint64_t sub_10009052C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100090538);
}

uint64_t sub_10009053C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100090548);
}

uint64_t sub_10009054C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000925F4(a1, a2, a3, (uint64_t)&value witness table for Builtin.UnknownObject + 64);
}

uint64_t sub_10009055C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_100090590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1000905EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100090648(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100090654);
}

uint64_t sub_100090654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_1000906E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000906EC);
}

uint64_t sub_1000906EC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  return result;
}

_QWORD *sub_100090764(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *(_DWORD *)((char *)a1 + a3[5]) = *(_DWORD *)((char *)a2 + a3[5]);
    v9 = *(void **)((char *)a2 + v8);
    *(_QWORD *)((char *)a1 + v8) = v9;
    v10 = a3[8];
    *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
    v11 = (_QWORD *)((char *)a1 + v10);
    v12 = (_QWORD *)((char *)a2 + v10);
    v13 = v12[1];
    *v11 = *v12;
    v11[1] = v13;
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    v14 = v9;
    swift_bridgeObjectRetain(v13);
  }
  return a1;
}

uint64_t sub_100090828(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);

  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 32) + 8));
}

uint64_t sub_10009087C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  id v13;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_DWORD *)(a1 + a3[5]) = *(_DWORD *)(a2 + a3[5]);
  v8 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v9 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v10 = (_QWORD *)(a1 + v9);
  v11 = (_QWORD *)(a2 + v9);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v13 = v8;
  swift_bridgeObjectRetain(v12);
  return a1;
}

uint64_t sub_100090914(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_DWORD *)(a1 + a3[5]) = *(_DWORD *)(a2 + a3[5]);
  v7 = a3[6];
  v8 = *(void **)(a2 + v7);
  v9 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v10 = v8;

  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v11 = a3[8];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  *v12 = *v13;
  v14 = v13[1];
  v15 = v12[1];
  v12[1] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1000909CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_DWORD *)(a1 + a3[5]) = *(_DWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100090A50(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_DWORD *)(a1 + a3[5]) = *(_DWORD *)(a2 + a3[5]);
  v8 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);

  v9 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v10 = (_QWORD *)(a1 + v9);
  v11 = (uint64_t *)(a2 + v9);
  v13 = *v11;
  v12 = v11[1];
  v14 = v10[1];
  *v10 = v13;
  v10[1] = v12;
  swift_bridgeObjectRelease(v14);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100090AEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100090AF8);
}

uint64_t sub_100090AFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100090B08);
}

uint64_t sub_100090B0C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int32 + 64;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[4] = &unk_100E27D78;
    v4[5] = &unk_100E27D60;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_100090BB0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    v9 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v9;
    v10 = v9;
  }
  return a1;
}

void sub_100090C44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);

}

uint64_t sub_100090C88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v8 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v9 = v8;
  return a1;
}

uint64_t sub_100090CF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v7 = *(int *)(a3 + 24);
  v8 = *(void **)(a2 + v7);
  v9 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v10 = v8;

  return a1;
}

uint64_t sub_100090D64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_100090DC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v8 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);

  return a1;
}

uint64_t sub_100090E34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100090E40);
}

uint64_t sub_100090E44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100090EC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100090ECC);
}

uint64_t sub_100090ED0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t sub_100090F48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100091200(a1, a2, a3, (uint64_t)&value witness table for Builtin.Int64 + 64);
}

uint64_t *sub_100090F58(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = *(void **)((char *)a2 + v9);
    *(uint64_t *)((char *)a1 + v9) = (uint64_t)v13;
    swift_bridgeObjectRetain(v12);
    v14 = v13;
  }
  return a1;
}

void sub_100090FF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));

}

uint64_t sub_10009104C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  id v13;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = *(void **)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v12;
  swift_bridgeObjectRetain(v11);
  v13 = v12;
  return a1;
}

uint64_t sub_1000910C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(int *)(a3 + 24);
  v13 = *(void **)(a2 + v12);
  v14 = *(void **)(a1 + v12);
  *(_QWORD *)(a1 + v12) = v13;
  v15 = v13;

  return a1;
}

uint64_t sub_100091154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = *(int *)(a3 + 24);
  v14 = *(void **)(a1 + v13);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);

  return a1;
}

uint64_t sub_1000911D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000911E0);
}

uint64_t sub_1000911E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000911F0);
}

uint64_t sub_1000911F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100091200(a1, a2, a3, (uint64_t)&unk_100E27DF0);
}

uint64_t sub_100091200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v7;
  _QWORD v8[3];

  result = type metadata accessor for UUID(319);
  if (v7 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(result - 8) + 64;
    v8[1] = a4;
    v8[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_10009127C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v22);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v10;
    v11 = (uint64_t *)((char *)a1 + v9);
    v12 = (uint64_t *)((char *)a2 + v9);
    v13 = v12[1];
    *v11 = *v12;
    v11[1] = v13;
    v14 = a3[7];
    v15 = a3[8];
    v16 = (uint64_t *)((char *)a1 + v14);
    v17 = (uint64_t *)((char *)a2 + v14);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v19 = *(void **)((char *)a2 + v15);
    *(uint64_t *)((char *)a1 + v15) = (uint64_t)v19;
    v20 = v10;
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v18);
    v21 = v19;
  }
  return a1;
}

void sub_100091348(uint64_t a1, int *a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));

}

uint64_t sub_1000913B8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  v10 = (_QWORD *)(a1 + v8);
  v11 = (_QWORD *)(a2 + v8);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  v13 = a3[7];
  v14 = a3[8];
  v15 = (_QWORD *)(a1 + v13);
  v16 = (_QWORD *)(a2 + v13);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v18 = *(void **)(a2 + v14);
  *(_QWORD *)(a1 + v14) = v18;
  v19 = v9;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v17);
  v20 = v18;
  return a1;
}

uint64_t sub_100091458(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(void **)(a2 + v7);
  v9 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v10 = v8;

  v11 = a3[6];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  *v12 = *v13;
  v14 = v13[1];
  v15 = v12[1];
  v12[1] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = a3[7];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  *v17 = *v18;
  v19 = v18[1];
  v20 = v17[1];
  v17[1] = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  v21 = a3[8];
  v22 = *(void **)(a2 + v21);
  v23 = *(void **)(a1 + v21);
  *(_QWORD *)(a1 + v21) = v22;
  v24 = v22;

  return a1;
}

uint64_t sub_100091530(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  return a1;
}

uint64_t sub_1000915A8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);

  v9 = a3[6];
  v10 = (_QWORD *)(a1 + v9);
  v11 = (uint64_t *)(a2 + v9);
  v13 = *v11;
  v12 = v11[1];
  v14 = v10[1];
  *v10 = v13;
  v10[1] = v12;
  swift_bridgeObjectRelease(v14);
  v15 = a3[7];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  v20 = v16[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease(v20);
  v21 = a3[8];
  v22 = *(void **)(a1 + v21);
  *(_QWORD *)(a1 + v21) = *(_QWORD *)(a2 + v21);

  return a1;
}

uint64_t sub_100091658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100091664);
}

uint64_t sub_100091668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000916E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000916F0);
}

uint64_t sub_1000916F4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_10009176C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[2] = &unk_100E27DF0;
    v4[3] = &unk_100E27DF0;
    v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_1000917F0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, int *);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void (*v31)(char *, _QWORD, uint64_t, int *);
  id v32;
  id v33;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    v10 = *(uint64_t *)((char *)a2 + v9);
    *(uint64_t *)((char *)a1 + v9) = v10;
    v11 = a3[7];
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(0);
    v15 = *((_QWORD *)v14 - 1);
    v16 = *(unsigned int (**)(char *, uint64_t, int *))(v15 + 48);
    swift_bridgeObjectRetain(v10);
    if (v16(v13, 1, v14))
    {
      v17 = sub_100008B04(&qword_101495308);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v12, (uint64_t *)v13, v7);
      v19 = v14[5];
      v20 = *(void **)&v13[v19];
      *(_QWORD *)&v12[v19] = v20;
      v21 = v14[6];
      v22 = &v12[v21];
      v23 = &v13[v21];
      v24 = *((_QWORD *)v23 + 1);
      *(_QWORD *)v22 = *(_QWORD *)v23;
      *((_QWORD *)v22 + 1) = v24;
      v25 = v14[7];
      v26 = &v12[v25];
      v27 = &v13[v25];
      v28 = *((_QWORD *)v27 + 1);
      *(_QWORD *)v26 = *(_QWORD *)v27;
      *((_QWORD *)v26 + 1) = v28;
      v29 = v14[8];
      v30 = *(void **)&v13[v29];
      *(_QWORD *)&v12[v29] = v30;
      v31 = *(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56);
      v32 = v20;
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v28);
      v33 = v30;
      v31(v12, 0, 1, v14);
    }
  }
  return a1;
}

void sub_10009197C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  int *v7;

  v4 = type metadata accessor for UUID(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 24)));
  v6 = a1 + *(int *)(a2 + 28);
  v7 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v6, 1, v7))
  {
    v5(v6, v4);

    swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[6] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[7] + 8));

  }
}

uint64_t sub_100091A50(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int *v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, int *);
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void (*v29)(char *, _QWORD, uint64_t, int *);
  id v30;
  id v31;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v9 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  v10 = a3[7];
  v11 = (char *)(a1 + v10);
  v12 = (char *)(a2 + v10);
  v13 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(0);
  v14 = *((_QWORD *)v13 - 1);
  v15 = *(unsigned int (**)(char *, uint64_t, int *))(v14 + 48);
  swift_bridgeObjectRetain(v9);
  if (v15(v12, 1, v13))
  {
    v16 = sub_100008B04(&qword_101495308);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v11, (uint64_t)v12, v6);
    v17 = v13[5];
    v18 = *(void **)&v12[v17];
    *(_QWORD *)&v11[v17] = v18;
    v19 = v13[6];
    v20 = &v11[v19];
    v21 = &v12[v19];
    v22 = *((_QWORD *)v21 + 1);
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *((_QWORD *)v20 + 1) = v22;
    v23 = v13[7];
    v24 = &v11[v23];
    v25 = &v12[v23];
    v26 = *((_QWORD *)v25 + 1);
    *(_QWORD *)v24 = *(_QWORD *)v25;
    *((_QWORD *)v24 + 1) = v26;
    v27 = v13[8];
    v28 = *(void **)&v12[v27];
    *(_QWORD *)&v11[v27] = v28;
    v29 = *(void (**)(char *, _QWORD, uint64_t, int *))(v14 + 56);
    v30 = v18;
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v26);
    v31 = v28;
    v29(v11, 0, 1, v13);
  }
  return a1;
}

uint64_t sub_100091BB0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, int *);
  int v18;
  int v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void (*v32)(char *, _QWORD, uint64_t, int *);
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v37;
  void *v38;
  void *v39;
  id v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  id v54;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v9 = a3[6];
  v10 = *(_QWORD *)(a2 + v9);
  v11 = *(_QWORD *)(a1 + v9);
  *(_QWORD *)(a1 + v9) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a3[7];
  v13 = (char *)(a1 + v12);
  v14 = (char *)(a2 + v12);
  v15 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(0);
  v16 = *((_QWORD *)v15 - 1);
  v17 = *(uint64_t (**)(char *, uint64_t, int *))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      v8((uint64_t)v13, (uint64_t)v14, v6);
      v37 = v15[5];
      v38 = *(void **)&v14[v37];
      v39 = *(void **)&v13[v37];
      *(_QWORD *)&v13[v37] = v38;
      v40 = v38;

      v41 = v15[6];
      v42 = &v13[v41];
      v43 = &v14[v41];
      *(_QWORD *)v42 = *(_QWORD *)v43;
      v44 = *((_QWORD *)v43 + 1);
      v45 = *((_QWORD *)v42 + 1);
      *((_QWORD *)v42 + 1) = v44;
      swift_bridgeObjectRetain(v44);
      swift_bridgeObjectRelease(v45);
      v46 = v15[7];
      v47 = &v13[v46];
      v48 = &v14[v46];
      *(_QWORD *)v47 = *(_QWORD *)v48;
      v49 = *((_QWORD *)v48 + 1);
      v50 = *((_QWORD *)v47 + 1);
      *((_QWORD *)v47 + 1) = v49;
      swift_bridgeObjectRetain(v49);
      swift_bridgeObjectRelease(v50);
      v51 = v15[8];
      v52 = *(void **)&v14[v51];
      v53 = *(void **)&v13[v51];
      *(_QWORD *)&v13[v51] = v52;
      v54 = v52;

      return a1;
    }
    sub_1000202F0((uint64_t)v13, type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v35 = sub_100008B04(&qword_101495308);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v14, v6);
  v20 = v15[5];
  v21 = *(void **)&v14[v20];
  *(_QWORD *)&v13[v20] = v21;
  v22 = v15[6];
  v23 = &v13[v22];
  v24 = &v14[v22];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v25 = *((_QWORD *)v24 + 1);
  *((_QWORD *)v23 + 1) = v25;
  v26 = v15[7];
  v27 = &v13[v26];
  v28 = &v14[v26];
  *(_QWORD *)v27 = *(_QWORD *)v28;
  v29 = *((_QWORD *)v28 + 1);
  *((_QWORD *)v27 + 1) = v29;
  v30 = v15[8];
  v31 = *(void **)&v14[v30];
  *(_QWORD *)&v13[v30] = v31;
  v32 = *(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56);
  v33 = v21;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v29);
  v34 = v31;
  v32(v13, 0, 1, v15);
  return a1;
}

uint64_t sub_100091DF8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v9 = a3[7];
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(0);
  v13 = *((_QWORD *)v12 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
  {
    v14 = sub_100008B04(&qword_101495308);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v10, (uint64_t)v11, v6);
    *(_QWORD *)&v10[v12[5]] = *(_QWORD *)&v11[v12[5]];
    *(_OWORD *)&v10[v12[6]] = *(_OWORD *)&v11[v12[6]];
    *(_OWORD *)&v10[v12[7]] = *(_OWORD *)&v11[v12[7]];
    *(_QWORD *)&v10[v12[8]] = *(_QWORD *)&v11[v12[8]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
  }
  return a1;
}

uint64_t sub_100091F20(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, int *);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v10 = *(_QWORD *)(a1 + v9);
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  swift_bridgeObjectRelease(v10);
  v11 = a3[7];
  v12 = (char *)(a1 + v11);
  v13 = (char *)(a2 + v11);
  v14 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(0);
  v15 = *((_QWORD *)v14 - 1);
  v16 = *(uint64_t (**)(char *, uint64_t, int *))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      v8((uint64_t)v12, (uint64_t)v13, v6);
      v21 = v14[5];
      v22 = *(void **)&v12[v21];
      *(_QWORD *)&v12[v21] = *(_QWORD *)&v13[v21];

      v23 = v14[6];
      v24 = &v12[v23];
      v25 = &v13[v23];
      v27 = *(_QWORD *)v25;
      v26 = *((_QWORD *)v25 + 1);
      v28 = *((_QWORD *)v24 + 1);
      *(_QWORD *)v24 = v27;
      *((_QWORD *)v24 + 1) = v26;
      swift_bridgeObjectRelease(v28);
      v29 = v14[7];
      v30 = &v12[v29];
      v31 = &v13[v29];
      v33 = *(_QWORD *)v31;
      v32 = *((_QWORD *)v31 + 1);
      v34 = *((_QWORD *)v30 + 1);
      *(_QWORD *)v30 = v33;
      *((_QWORD *)v30 + 1) = v32;
      swift_bridgeObjectRelease(v34);
      v35 = v14[8];
      v36 = *(void **)&v12[v35];
      *(_QWORD *)&v12[v35] = *(_QWORD *)&v13[v35];

      return a1;
    }
    sub_1000202F0((uint64_t)v12, type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = sub_100008B04(&qword_101495308);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v13, v6);
  *(_QWORD *)&v12[v14[5]] = *(_QWORD *)&v13[v14[5]];
  *(_OWORD *)&v12[v14[6]] = *(_OWORD *)&v13[v14[6]];
  *(_OWORD *)&v12[v14[7]] = *(_OWORD *)&v13[v14[7]];
  *(_QWORD *)&v12[v14[8]] = *(_QWORD *)&v13[v14[8]];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  return a1;
}

uint64_t sub_1000920FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100092108);
}

uint64_t sub_100092108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_100008B04(&qword_101495308);
    v10 = a1 + *(int *)(a3 + 28);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_1000921B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000921C0);
}

uint64_t sub_1000921C0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
      return result;
    }
    v10 = sub_100008B04(&qword_101495308);
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_100092268(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v2 = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    sub_100069DB8(319, (unint64_t *)&unk_101497FB8, type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

uint64_t *sub_100092320(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain(v11);
  }
  return a1;
}

uint64_t sub_1000923B4(uint64_t a1, uint64_t a2)
{
  return sub_1000923C0(a1, a2, (uint64_t (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_1000923C0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a3(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t sub_100092418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t sub_100092480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t sub_1000924FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100092558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100092564(a1, a2, a3, (void (*)(uint64_t))&_swift_bridgeObjectRelease);
}

uint64_t sub_100092564(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 40))(a1, a2, v8);
  v9 = *(int *)(a3 + 20);
  v10 = (_QWORD *)(a1 + v9);
  v11 = (uint64_t *)(a2 + v9);
  v13 = *v11;
  v12 = v11[1];
  v14 = v10[1];
  *v10 = v13;
  v10[1] = v12;
  a4(v14);
  return a1;
}

uint64_t sub_1000925D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000925E0);
}

uint64_t sub_1000925E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000925F0);
}

uint64_t sub_1000925F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v7;
  _QWORD v8[2];

  result = type metadata accessor for UUID(319);
  if (v7 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(result - 8) + 64;
    v8[1] = a4;
    swift_initStructMetadata(a1, 256, 2, v8, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_100092660(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t, __n128);
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  void (*v30)(char *, char *, uint64_t);

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v28 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v28 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for AttributedString(0);
    v12 = *(_QWORD *)(v11 - 8);
    v30 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    v30(v9, v10, v11);
    v13 = a3[6];
    v14 = a3[7];
    v15 = (uint64_t *)((char *)a1 + v13);
    v16 = (uint64_t *)((char *)a2 + v13);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    *(uint64_t *)((char *)a1 + v14) = *(uint64_t *)((char *)a2 + v14);
    v18 = a3[9];
    *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    *(uint64_t *)((char *)a1 + v18) = *(uint64_t *)((char *)a2 + v18);
    v19 = a3[11];
    *(uint64_t *)((char *)a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    *(_QWORD *)v20 = *(_QWORD *)v21;
    v20[8] = v21[8];
    v22 = a3[12];
    v23 = (char *)a1 + v22;
    v24 = (char *)a2 + v22;
    v25 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v12 + 48);
    swift_bridgeObjectRetain(v17);
    swift_retain();
    swift_retain();
    swift_retain();
    v26 = swift_retain();
    if (v25(v24, 1, v11, v26))
    {
      v27 = sub_100008B04(&qword_101494BF0);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      v30(v23, v24, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v23, 0, 1, v11);
    }
  }
  return a1;
}

uint64_t sub_10009281C(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void (*v10)(uint64_t, uint64_t);

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = type metadata accessor for AttributedString(0);
  v7 = *(_QWORD *)(v6 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v10(v5, v6);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  swift_release(*(_QWORD *)(a1 + a2[7]));
  swift_release(*(_QWORD *)(a1 + a2[8]));
  swift_release(*(_QWORD *)(a1 + a2[9]));
  swift_release(*(_QWORD *)(a1 + a2[10]));
  v8 = a1 + a2[12];
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1, v6);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v8, v6);
  return result;
}

uint64_t sub_100092920(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  unsigned int (*v24)(const void *, uint64_t, uint64_t, __n128);
  __n128 v25;
  uint64_t v26;
  void (*v28)(void *, const void *, uint64_t);

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for AttributedString(0);
  v11 = *(_QWORD *)(v10 - 8);
  v28 = *(void (**)(void *, const void *, uint64_t))(v11 + 16);
  v28(v8, v9, v10);
  v12 = a3[6];
  v13 = a3[7];
  v14 = (_QWORD *)(a1 + v12);
  v15 = (_QWORD *)(a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  v17 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_QWORD *)(a1 + v17) = *(_QWORD *)(a2 + v17);
  v18 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  v19 = a1 + v18;
  v20 = a2 + v18;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  v21 = a3[12];
  v22 = (void *)(a1 + v21);
  v23 = (const void *)(a2 + v21);
  v24 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v11 + 48);
  swift_bridgeObjectRetain(v16);
  swift_retain();
  swift_retain();
  swift_retain();
  v25 = swift_retain();
  if (v24(v23, 1, v10, v25))
  {
    v26 = sub_100008B04(&qword_101494BF0);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v28(v22, v23, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v22, 0, 1, v10);
  }
  return a1;
}

uint64_t sub_100092AB0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void *, const void *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t (*v25)(const void *, uint64_t, uint64_t);
  int v26;
  uint64_t v27;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for AttributedString(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(void *, const void *, uint64_t))(v11 + 24);
  v12(v8, v9, v10);
  v13 = a3[6];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  *v14 = *v15;
  v16 = v15[1];
  v17 = v14[1];
  v14[1] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  swift_retain();
  swift_release();
  v18 = a3[11];
  v19 = a1 + v18;
  v20 = (uint64_t *)(a2 + v18);
  v21 = *v20;
  *(_BYTE *)(v19 + 8) = *((_BYTE *)v20 + 8);
  *(_QWORD *)v19 = v21;
  v22 = a3[12];
  v23 = (void *)(a1 + v22);
  v24 = (const void *)(a2 + v22);
  v25 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  LODWORD(v17) = v25((const void *)(a1 + v22), 1, v10);
  v26 = v25(v24, 1, v10);
  if (!(_DWORD)v17)
  {
    if (!v26)
    {
      v12(v23, v24, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v23, v10);
    goto LABEL_6;
  }
  if (v26)
  {
LABEL_6:
    v27 = sub_100008B04(&qword_101494BF0);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v23, v24, v10);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v23, 0, 1, v10);
  return a1;
}

uint64_t sub_100092CAC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void *, const void *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for AttributedString(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(void *, const void *, uint64_t))(v11 + 32);
  v12(v8, v9, v10);
  v13 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  v14 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  v15 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  v16 = a1 + v15;
  v17 = a2 + v15;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  v18 = a3[12];
  v19 = (void *)(a1 + v18);
  v20 = (const void *)(a2 + v18);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v20, 1, v10))
  {
    v21 = sub_100008B04(&qword_101494BF0);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v12(v19, v20, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v19, 0, 1, v10);
  }
  return a1;
}

uint64_t sub_100092DF8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void *, const void *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t (*v25)(const void *, uint64_t, uint64_t);
  int v26;
  uint64_t v27;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for AttributedString(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(void *, const void *, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  v13 = a3[6];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  v18 = v14[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_release();
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_release();
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  swift_release();
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  swift_release();
  v19 = a3[11];
  v20 = a3[12];
  v21 = a1 + v19;
  v22 = a2 + v19;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  v23 = (void *)(a1 + v20);
  v24 = (const void *)(a2 + v20);
  v25 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  LODWORD(v8) = v25((const void *)(a1 + v20), 1, v10);
  v26 = v25(v24, 1, v10);
  if (!(_DWORD)v8)
  {
    if (!v26)
    {
      v12(v23, v24, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v23, v10);
    goto LABEL_6;
  }
  if (v26)
  {
LABEL_6:
    v27 = sub_100008B04(&qword_101494BF0);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v23, v24, v10);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v23, 0, 1, v10);
  return a1;
}

uint64_t sub_100092FC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100092FCC);
}

uint64_t sub_100092FCC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = type metadata accessor for AttributedString(0);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v9;
    v12 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  if ((_DWORD)a2 != 2147483646)
  {
    v11 = sub_100008B04(&qword_101494BF0);
    v10 = *(_QWORD *)(v11 - 8);
    v12 = a3[12];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  v13 = *(_QWORD *)(a1 + a3[6] + 8);
  if (v13 >= 0xFFFFFFFF)
    LODWORD(v13) = -1;
  v14 = v13 - 1;
  if (v14 < 0)
    v14 = -1;
  return (v14 + 1);
}

uint64_t sub_1000930AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000930B8);
}

uint64_t sub_1000930B8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = type metadata accessor for AttributedString(0);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 2147483646)
      {
        *(_QWORD *)(a1 + a4[6] + 8) = a2;
        return result;
      }
      v10 = sub_100008B04(&qword_101494BF0);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[12];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_100093188(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[9];

  v2 = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for AttributedString(319);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v8[2] = &unk_100E27D78;
      v8[3] = &unk_100E27D48;
      v8[4] = &unk_100E27D48;
      v8[5] = &unk_100E27D48;
      v8[6] = &unk_100E27D48;
      v8[7] = "\t";
      sub_100069DB8(319, (unint64_t *)&unk_1014954E0, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      if (v7 <= 0x3F)
      {
        v8[8] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 9, v8, a1 + 16);
      }
    }
  }
}

_QWORD *sub_100093264(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (_QWORD *)((char *)a1 + v8);
    v11 = (_QWORD *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = *(_QWORD *)((char *)a2 + v9);
    *(_QWORD *)((char *)a1 + v9) = v13;
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    swift_bridgeObjectRetain(v12);
    swift_unknownObjectRetain(v13);
  }
  return a1;
}

uint64_t sub_100093318(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v12;
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  swift_bridgeObjectRetain(v11);
  swift_unknownObjectRetain(v12);
  return a1;
}

uint64_t sub_10009339C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a3[6];
  v13 = *(_QWORD *)(a2 + v12);
  v14 = *(_QWORD *)(a1 + v12);
  *(_QWORD *)(a1 + v12) = v13;
  swift_unknownObjectRetain(v13);
  swift_unknownObjectRelease(v14);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100093440(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1000934B0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = a3[6];
  v14 = *(_QWORD *)(a1 + v13);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  swift_unknownObjectRelease(v14);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10009353C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100093548);
}

uint64_t sub_10009354C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100093558);
}

uint64_t type metadata accessor for PlaceSummaryViewModelRefinementButtons.Button(uint64_t a1)
{
  return sub_100021D9C(a1, qword_101498188, (uint64_t)&nominal type descriptor for PlaceSummaryViewModelRefinementButtons.Button);
}

uint64_t sub_100093570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000939B8(a1, a2, a3, (uint64_t)&unk_100E27DF0, (uint64_t)&value witness table for Builtin.UnknownObject + 64, (uint64_t)&unk_100E27D60);
}

uint64_t *sub_100093590(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = *(uint64_t *)((char *)a2 + v9);
    *(uint64_t *)((char *)a1 + v9) = v13;
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    swift_bridgeObjectRetain(v12);
    swift_unknownObjectRetain(v13);
  }
  return a1;
}

uint64_t sub_100093640(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v12;
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRetain(v11);
  swift_unknownObjectRetain(v12);
  return a1;
}

uint64_t sub_1000936C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a3[6];
  v13 = *(_QWORD *)(a2 + v12);
  v14 = *(_QWORD *)(a1 + v12);
  *(_QWORD *)(a1 + v12) = v13;
  swift_unknownObjectRetain(v13);
  swift_unknownObjectRelease(v14);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100093768(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1000937D8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = a3[6];
  v14 = *(_QWORD *)(a1 + v13);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  swift_unknownObjectRelease(v14);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100093864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100093870);
}

uint64_t sub_100093874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000938F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100093900);
}

uint64_t sub_100093904(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for PlaceSummaryViewModelActionButtons.Button(uint64_t a1)
{
  return sub_100021D9C(a1, qword_101498220, (uint64_t)&nominal type descriptor for PlaceSummaryViewModelActionButtons.Button);
}

uint64_t sub_100093994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000939B8(a1, a2, a3, (uint64_t)&unk_100E27DF0, (uint64_t)&value witness table for Builtin.UnknownObject + 64, (uint64_t)&value witness table for Builtin.Int64 + 64);
}

uint64_t sub_1000939B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  unint64_t v11;
  _QWORD v12[4];

  result = type metadata accessor for UUID(319);
  if (v11 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(result - 8) + 64;
    v12[1] = a4;
    v12[2] = a5;
    v12[3] = a6;
    swift_initStructMetadata(a1, 256, 4, v12, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100093A38(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_100093A98 + 4 * word_100E27C1A[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

void sub_100094344(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  int *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);

  v2 = a1;
  switch(swift_getEnumCaseMultiPayload(a1, a2))
  {
    case 0u:
      v4 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v2, v4);
      v5 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.Label(0);
      v6 = v2 + v5[5];
      v7 = type metadata accessor for AttributedString(0);
      v8 = *(_QWORD *)(v7 - 8);
      v39 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
      v39(v6, v7);
      swift_bridgeObjectRelease(*(_QWORD *)(v2 + v5[6] + 8));
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v9 = v2 + v5[12];
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v9, 1, v7))
      {
        v10 = v9;
        v11 = v7;
        v12 = v39;
        goto LABEL_21;
      }
      return;
    case 1u:
      v13 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v2, v13);
      v14 = *(int *)(type metadata accessor for PlaceSummaryViewModelUnit.Distance(0) + 20);
      goto LABEL_13;
    case 2u:
      v15 = type metadata accessor for UUID(0);
      v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8);
      v16(v2, v15);
      v17 = type metadata accessor for PlaceSummaryViewModelUnit.MultipleCuratedGuides(0);
      swift_bridgeObjectRelease(*(_QWORD *)(v2 + *(int *)(v17 + 24)));
      v2 += *(int *)(v17 + 28);
      v18 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v18 - 1) + 48))(v2, 1, v18))
        return;
      v16(v2, v15);

      swift_bridgeObjectRelease(*(_QWORD *)(v2 + v18[6] + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v2 + v18[7] + 8));
      v21 = v18[8];
      goto LABEL_18;
    case 3u:
      v19 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v2, v19);
      v20 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(0);

      swift_bridgeObjectRelease(*(_QWORD *)(v2 + v20[6] + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v2 + v20[7] + 8));
      v21 = v20[8];
      goto LABEL_18;
    case 4u:
      v22 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v2, v22);
      v23 = type metadata accessor for PlaceSummaryViewModelUnit.UserGeneratedGuide(0);
      swift_bridgeObjectRelease(*(_QWORD *)(v2 + *(int *)(v23 + 20) + 8));
      goto LABEL_17;
    case 5u:
      v24 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v2, v24);
      v21 = *(int *)(type metadata accessor for PlaceSummaryViewModelUnit.FirstPartyRatings(0) + 24);
      goto LABEL_18;
    case 6u:
      v25 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v2, v25);
      v26 = type metadata accessor for PlaceSummaryViewModelUnit.ThirdPartyRatings(0);

      v14 = *(int *)(v26 + 32);
LABEL_13:
      swift_bridgeObjectRelease(*(_QWORD *)(v2 + v14 + 8));
      return;
    case 7u:
    case 0xBu:
      v3 = type metadata accessor for UUID(0);
      goto LABEL_20;
    case 8u:
      v27 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v2, v27);
      v21 = *(int *)(type metadata accessor for PlaceSummaryViewModelUnit.TransitShields(0) + 20);
      goto LABEL_18;
    case 9u:
    case 0xDu:
    case 0xFu:
    case 0x10u:
      goto LABEL_2;
    case 0xAu:
      v28 = type metadata accessor for UUID(0);
      v29 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8);
      v29(v2, v28);
      v23 = type metadata accessor for PlaceSummaryViewModelUnit.TappableEntry(0);
      v30 = v2 + *(int *)(v23 + 20);
      v29(v30, v28);
      v31 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.Label(0);
      v32 = v30 + v31[5];
      v33 = type metadata accessor for AttributedString(0);
      v34 = *(_QWORD *)(v33 - 8);
      v35 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
      v35(v32, v33);
      swift_bridgeObjectRelease(*(_QWORD *)(v30 + v31[6] + 8));
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v36 = v30 + v31[12];
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v36, 1, v33))
        v35(v36, v33);
LABEL_17:
      v21 = *(int *)(v23 + 24);
LABEL_18:

      break;
    case 0xCu:
      v37 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(v2, v37);
      v2 += *(int *)(type metadata accessor for PlaceSummaryViewModelUnit.Hours(0) + 20);
      v3 = type metadata accessor for AttributedString(0);
LABEL_20:
      v11 = v3;
      v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
      v10 = v2;
LABEL_21:
      v12(v10, v11);
      break;
    case 0xEu:
      v38 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 8))(v2, v38);
      type metadata accessor for PlaceSummaryViewModelUnit.PhotoCarousel(0);
LABEL_2:
      swift_release();
      break;
    default:
      return;
  }
}

void sub_100094850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;

  v3 = (char *)sub_1000948A4 + 4 * word_100E27C5E[swift_getEnumCaseMultiPayload(a2, a3)];
  __asm { BR              X10 }
}

uint64_t sub_1000948A4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__dst, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  void *v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const void *v44;
  unsigned int (*v45)(const void *, uint64_t, uint64_t, __n128);
  __n128 v46;
  uint64_t v47;
  void (*v49)(void *, const void *, uint64_t);
  void *v50;

  v29 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v26, v28, v29);
  v30 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.Label(0);
  v31 = v30[5];
  v32 = (void *)(v26 + v31);
  v33 = (const void *)(v28 + v31);
  v34 = type metadata accessor for AttributedString(0);
  v35 = *(_QWORD *)(v34 - 8);
  v49 = *(void (**)(void *, const void *, uint64_t))(v35 + 16);
  v49(v32, v33, v34);
  v36 = v30[6];
  v37 = (_QWORD *)(v26 + v36);
  v38 = (_QWORD *)(v28 + v36);
  v39 = v38[1];
  *v37 = *v38;
  v37[1] = v39;
  *(_QWORD *)(v26 + v30[7]) = *(_QWORD *)(v28 + v30[7]);
  *(_QWORD *)(v26 + v30[8]) = *(_QWORD *)(v28 + v30[8]);
  *(_QWORD *)(v26 + v30[9]) = *(_QWORD *)(v28 + v30[9]);
  *(_QWORD *)(v26 + v30[10]) = *(_QWORD *)(v28 + v30[10]);
  v40 = v30[11];
  v41 = v26 + v40;
  v42 = v28 + v40;
  *(_QWORD *)v41 = *(_QWORD *)v42;
  *(_BYTE *)(v41 + 8) = *(_BYTE *)(v42 + 8);
  v43 = v30[12];
  v50 = (void *)(v26 + v43);
  v44 = (const void *)(v28 + v43);
  v45 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v35 + 48);
  swift_bridgeObjectRetain(v39);
  swift_retain();
  swift_retain();
  swift_retain();
  v46 = swift_retain();
  if (v45(v44, 1, v34, v46))
  {
    v47 = sub_100008B04(&qword_101494BF0);
    memcpy(v50, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    v49(v50, v44, v34);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v50, 0, 1, v34);
  }
  swift_storeEnumTagMultiPayload(v26, v27, 0);
  return v26;
}

uint64_t sub_100095130(uint64_t result, uint64_t a2, uint64_t a3)
{
  char *v5;

  if (result != a2)
  {
    sub_1000202F0(result, type metadata accessor for PlaceSummaryViewModelUnit);
    v5 = (char *)&loc_10009519C + 4 * word_100E27C80[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }
  return result;
}

_BYTE *sub_100095A78(_BYTE *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  int *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t PartyRatings;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(_BYTE *, char *, uint64_t);
  uint64_t v49;
  char *v50;
  char *v51;
  int *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v6 = type metadata accessor for UUID(0);
      (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.Label(0);
      v8 = v7[5];
      v9 = &a1[v8];
      v10 = &a2[v8];
      v11 = type metadata accessor for AttributedString(0);
      v12 = *(_QWORD *)(v11 - 8);
      v13 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
      v13(v9, v10, v11);
      *(_OWORD *)&a1[v7[6]] = *(_OWORD *)&a2[v7[6]];
      *(_QWORD *)&a1[v7[7]] = *(_QWORD *)&a2[v7[7]];
      *(_QWORD *)&a1[v7[8]] = *(_QWORD *)&a2[v7[8]];
      *(_QWORD *)&a1[v7[9]] = *(_QWORD *)&a2[v7[9]];
      *(_QWORD *)&a1[v7[10]] = *(_QWORD *)&a2[v7[10]];
      v14 = v7[11];
      v15 = &a1[v14];
      v16 = &a2[v14];
      *(_QWORD *)v15 = *(_QWORD *)v16;
      v15[8] = v16[8];
      v17 = v7[12];
      v18 = &a1[v17];
      v19 = &a2[v17];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v19, 1, v11))
      {
        v20 = sub_100008B04(&qword_101494BF0);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        v13(v18, v19, v11);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v18, 0, 1, v11);
      }
      v23 = a1;
      v24 = a3;
      v25 = 0;
      goto LABEL_25;
    case 1u:
      v21 = type metadata accessor for UUID(0);
      (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(a1, a2, v21);
      v22 = type metadata accessor for PlaceSummaryViewModelUnit.Distance(0);
      *(_OWORD *)&a1[*(int *)(v22 + 20)] = *(_OWORD *)&a2[*(int *)(v22 + 20)];
      v23 = a1;
      v24 = a3;
      v25 = 1;
      goto LABEL_25;
    case 2u:
      v26 = type metadata accessor for UUID(0);
      v27 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32);
      v27(a1, a2, v26);
      v28 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.MultipleCuratedGuides(0);
      *(_QWORD *)&a1[v28[5]] = *(_QWORD *)&a2[v28[5]];
      *(_QWORD *)&a1[v28[6]] = *(_QWORD *)&a2[v28[6]];
      v29 = v28[7];
      v30 = &a1[v29];
      v31 = &a2[v29];
      v32 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(0);
      v33 = *((_QWORD *)v32 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v33 + 48))(v31, 1, v32))
      {
        v34 = sub_100008B04(&qword_101495308);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      }
      else
      {
        v27(v30, v31, v26);
        *(_QWORD *)&v30[v32[5]] = *(_QWORD *)&v31[v32[5]];
        *(_OWORD *)&v30[v32[6]] = *(_OWORD *)&v31[v32[6]];
        *(_OWORD *)&v30[v32[7]] = *(_OWORD *)&v31[v32[7]];
        *(_QWORD *)&v30[v32[8]] = *(_QWORD *)&v31[v32[8]];
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v33 + 56))(v30, 0, 1, v32);
      }
      v23 = a1;
      v24 = a3;
      v25 = 2;
      goto LABEL_25;
    case 3u:
      v35 = type metadata accessor for UUID(0);
      (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(a1, a2, v35);
      v36 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(0);
      *(_QWORD *)&a1[v36[5]] = *(_QWORD *)&a2[v36[5]];
      *(_OWORD *)&a1[v36[6]] = *(_OWORD *)&a2[v36[6]];
      *(_OWORD *)&a1[v36[7]] = *(_OWORD *)&a2[v36[7]];
      *(_QWORD *)&a1[v36[8]] = *(_QWORD *)&a2[v36[8]];
      v23 = a1;
      v24 = a3;
      v25 = 3;
      goto LABEL_25;
    case 4u:
      v37 = type metadata accessor for UUID(0);
      (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(a1, a2, v37);
      v38 = type metadata accessor for PlaceSummaryViewModelUnit.UserGeneratedGuide(0);
      *(_OWORD *)&a1[*(int *)(v38 + 20)] = *(_OWORD *)&a2[*(int *)(v38 + 20)];
      *(_QWORD *)&a1[*(int *)(v38 + 24)] = *(_QWORD *)&a2[*(int *)(v38 + 24)];
      v23 = a1;
      v24 = a3;
      v25 = 4;
      goto LABEL_25;
    case 5u:
      v39 = type metadata accessor for UUID(0);
      (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(a1, a2, v39);
      PartyRatings = type metadata accessor for PlaceSummaryViewModelUnit.FirstPartyRatings(0);
      *(_QWORD *)&a1[*(int *)(PartyRatings + 20)] = *(_QWORD *)&a2[*(int *)(PartyRatings + 20)];
      *(_QWORD *)&a1[*(int *)(PartyRatings + 24)] = *(_QWORD *)&a2[*(int *)(PartyRatings + 24)];
      v23 = a1;
      v24 = a3;
      v25 = 5;
      goto LABEL_25;
    case 6u:
      v41 = type metadata accessor for UUID(0);
      (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(a1, a2, v41);
      v42 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.ThirdPartyRatings(0);
      *(_DWORD *)&a1[v42[5]] = *(_DWORD *)&a2[v42[5]];
      *(_QWORD *)&a1[v42[6]] = *(_QWORD *)&a2[v42[6]];
      *(_QWORD *)&a1[v42[7]] = *(_QWORD *)&a2[v42[7]];
      *(_OWORD *)&a1[v42[8]] = *(_OWORD *)&a2[v42[8]];
      a1[v42[9]] = a2[v42[9]];
      v23 = a1;
      v24 = a3;
      v25 = 6;
      goto LABEL_25;
    case 7u:
      v43 = type metadata accessor for UUID(0);
      (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(a1, a2, v43);
      v44 = type metadata accessor for PlaceSummaryViewModelUnit.UGCUserRecommendations(0);
      a1[*(int *)(v44 + 20)] = a2[*(int *)(v44 + 20)];
      v23 = a1;
      v24 = a3;
      v25 = 7;
      goto LABEL_25;
    case 8u:
      v45 = type metadata accessor for UUID(0);
      (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 32))(a1, a2, v45);
      v46 = type metadata accessor for PlaceSummaryViewModelUnit.TransitShields(0);
      *(_QWORD *)&a1[*(int *)(v46 + 20)] = *(_QWORD *)&a2[*(int *)(v46 + 20)];
      v23 = a1;
      v24 = a3;
      v25 = 8;
      goto LABEL_25;
    case 0xAu:
      v47 = type metadata accessor for UUID(0);
      v48 = *(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 32);
      v48(a1, a2, v47);
      v77 = type metadata accessor for PlaceSummaryViewModelUnit.TappableEntry(0);
      v49 = *(int *)(v77 + 20);
      v50 = &a1[v49];
      v51 = &a2[v49];
      v48(&a1[v49], &a2[v49], v47);
      v52 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.Label(0);
      v53 = v52[5];
      v54 = &v50[v53];
      v55 = &v51[v53];
      v56 = type metadata accessor for AttributedString(0);
      v57 = *(_QWORD *)(v56 - 8);
      v58 = v54;
      v59 = *(void (**)(char *, char *, uint64_t))(v57 + 32);
      v59(v58, v55, v56);
      *(_OWORD *)&v50[v52[6]] = *(_OWORD *)&v51[v52[6]];
      *(_QWORD *)&v50[v52[7]] = *(_QWORD *)&v51[v52[7]];
      *(_QWORD *)&v50[v52[8]] = *(_QWORD *)&v51[v52[8]];
      *(_QWORD *)&v50[v52[9]] = *(_QWORD *)&v51[v52[9]];
      *(_QWORD *)&v50[v52[10]] = *(_QWORD *)&v51[v52[10]];
      v60 = v52[11];
      v61 = &v50[v60];
      v62 = &v51[v60];
      *(_QWORD *)v61 = *(_QWORD *)v62;
      v61[8] = v62[8];
      v63 = v52[12];
      v64 = &v50[v63];
      v65 = &v51[v63];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v65, 1, v56))
      {
        v66 = sub_100008B04(&qword_101494BF0);
        memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
      }
      else
      {
        v59(v64, v65, v56);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v64, 0, 1, v56);
      }
      *(_QWORD *)&a1[*(int *)(v77 + 24)] = *(_QWORD *)&a2[*(int *)(v77 + 24)];
      v23 = a1;
      v24 = a3;
      v25 = 10;
      goto LABEL_25;
    case 0xBu:
      v67 = type metadata accessor for UUID(0);
      (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 32))(a1, a2, v67);
      v68 = type metadata accessor for PlaceSummaryViewModelUnit.Delimiter(0);
      a1[*(int *)(v68 + 20)] = a2[*(int *)(v68 + 20)];
      v23 = a1;
      v24 = a3;
      v25 = 11;
      goto LABEL_25;
    case 0xCu:
      v69 = type metadata accessor for UUID(0);
      (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 32))(a1, a2, v69);
      v70 = *(int *)(type metadata accessor for PlaceSummaryViewModelUnit.Hours(0) + 20);
      v71 = &a1[v70];
      v72 = &a2[v70];
      v73 = type metadata accessor for AttributedString(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 32))(v71, v72, v73);
      v23 = a1;
      v24 = a3;
      v25 = 12;
      goto LABEL_25;
    case 0xEu:
      v74 = type metadata accessor for UUID(0);
      (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 32))(a1, a2, v74);
      v75 = type metadata accessor for PlaceSummaryViewModelUnit.PhotoCarousel(0);
      *(_OWORD *)&a1[*(int *)(v75 + 20)] = *(_OWORD *)&a2[*(int *)(v75 + 20)];
      v23 = a1;
      v24 = a3;
      v25 = 14;
LABEL_25:
      swift_storeEnumTagMultiPayload(v23, v24, v25);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *sub_1000961F0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  int *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t PartyRatings;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  char *v50;
  char *v51;
  int *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;

  if (a1 != a2)
  {
    sub_1000202F0((uint64_t)a1, type metadata accessor for PlaceSummaryViewModelUnit);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v6 = type metadata accessor for UUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
        v7 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.Label(0);
        v8 = v7[5];
        v9 = &a1[v8];
        v10 = &a2[v8];
        v11 = type metadata accessor for AttributedString(0);
        v12 = *(_QWORD *)(v11 - 8);
        v13 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
        v13(v9, v10, v11);
        *(_OWORD *)&a1[v7[6]] = *(_OWORD *)&a2[v7[6]];
        *(_QWORD *)&a1[v7[7]] = *(_QWORD *)&a2[v7[7]];
        *(_QWORD *)&a1[v7[8]] = *(_QWORD *)&a2[v7[8]];
        *(_QWORD *)&a1[v7[9]] = *(_QWORD *)&a2[v7[9]];
        *(_QWORD *)&a1[v7[10]] = *(_QWORD *)&a2[v7[10]];
        v14 = v7[11];
        v15 = &a1[v14];
        v16 = &a2[v14];
        *(_QWORD *)v15 = *(_QWORD *)v16;
        v15[8] = v16[8];
        v17 = v7[12];
        v18 = &a1[v17];
        v19 = &a2[v17];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v19, 1, v11))
        {
          v20 = sub_100008B04(&qword_101494BF0);
          memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
        }
        else
        {
          v13(v18, v19, v11);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v18, 0, 1, v11);
        }
        v23 = a1;
        v24 = a3;
        v25 = 0;
        goto LABEL_26;
      case 1u:
        v21 = type metadata accessor for UUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(a1, a2, v21);
        v22 = type metadata accessor for PlaceSummaryViewModelUnit.Distance(0);
        *(_OWORD *)&a1[*(int *)(v22 + 20)] = *(_OWORD *)&a2[*(int *)(v22 + 20)];
        v23 = a1;
        v24 = a3;
        v25 = 1;
        goto LABEL_26;
      case 2u:
        v26 = type metadata accessor for UUID(0);
        v27 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32);
        v27(a1, a2, v26);
        v28 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.MultipleCuratedGuides(0);
        *(_QWORD *)&a1[v28[5]] = *(_QWORD *)&a2[v28[5]];
        *(_QWORD *)&a1[v28[6]] = *(_QWORD *)&a2[v28[6]];
        v29 = v28[7];
        v30 = &a1[v29];
        v31 = &a2[v29];
        v32 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(0);
        v33 = *((_QWORD *)v32 - 1);
        if ((*(unsigned int (**)(char *, uint64_t, int *))(v33 + 48))(v31, 1, v32))
        {
          v34 = sub_100008B04(&qword_101495308);
          memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
        }
        else
        {
          v27(v30, v31, v26);
          *(_QWORD *)&v30[v32[5]] = *(_QWORD *)&v31[v32[5]];
          *(_OWORD *)&v30[v32[6]] = *(_OWORD *)&v31[v32[6]];
          *(_OWORD *)&v30[v32[7]] = *(_OWORD *)&v31[v32[7]];
          *(_QWORD *)&v30[v32[8]] = *(_QWORD *)&v31[v32[8]];
          (*(void (**)(char *, _QWORD, uint64_t, int *))(v33 + 56))(v30, 0, 1, v32);
        }
        v23 = a1;
        v24 = a3;
        v25 = 2;
        goto LABEL_26;
      case 3u:
        v35 = type metadata accessor for UUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(a1, a2, v35);
        v36 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(0);
        *(_QWORD *)&a1[v36[5]] = *(_QWORD *)&a2[v36[5]];
        *(_OWORD *)&a1[v36[6]] = *(_OWORD *)&a2[v36[6]];
        *(_OWORD *)&a1[v36[7]] = *(_OWORD *)&a2[v36[7]];
        *(_QWORD *)&a1[v36[8]] = *(_QWORD *)&a2[v36[8]];
        v23 = a1;
        v24 = a3;
        v25 = 3;
        goto LABEL_26;
      case 4u:
        v37 = type metadata accessor for UUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(a1, a2, v37);
        v38 = type metadata accessor for PlaceSummaryViewModelUnit.UserGeneratedGuide(0);
        *(_OWORD *)&a1[*(int *)(v38 + 20)] = *(_OWORD *)&a2[*(int *)(v38 + 20)];
        *(_QWORD *)&a1[*(int *)(v38 + 24)] = *(_QWORD *)&a2[*(int *)(v38 + 24)];
        v23 = a1;
        v24 = a3;
        v25 = 4;
        goto LABEL_26;
      case 5u:
        v39 = type metadata accessor for UUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(a1, a2, v39);
        PartyRatings = type metadata accessor for PlaceSummaryViewModelUnit.FirstPartyRatings(0);
        *(_QWORD *)&a1[*(int *)(PartyRatings + 20)] = *(_QWORD *)&a2[*(int *)(PartyRatings + 20)];
        *(_QWORD *)&a1[*(int *)(PartyRatings + 24)] = *(_QWORD *)&a2[*(int *)(PartyRatings + 24)];
        v23 = a1;
        v24 = a3;
        v25 = 5;
        goto LABEL_26;
      case 6u:
        v41 = type metadata accessor for UUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(a1, a2, v41);
        v42 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.ThirdPartyRatings(0);
        *(_DWORD *)&a1[v42[5]] = *(_DWORD *)&a2[v42[5]];
        *(_QWORD *)&a1[v42[6]] = *(_QWORD *)&a2[v42[6]];
        *(_QWORD *)&a1[v42[7]] = *(_QWORD *)&a2[v42[7]];
        *(_OWORD *)&a1[v42[8]] = *(_OWORD *)&a2[v42[8]];
        a1[v42[9]] = a2[v42[9]];
        v23 = a1;
        v24 = a3;
        v25 = 6;
        goto LABEL_26;
      case 7u:
        v43 = type metadata accessor for UUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(a1, a2, v43);
        v44 = type metadata accessor for PlaceSummaryViewModelUnit.UGCUserRecommendations(0);
        a1[*(int *)(v44 + 20)] = a2[*(int *)(v44 + 20)];
        v23 = a1;
        v24 = a3;
        v25 = 7;
        goto LABEL_26;
      case 8u:
        v45 = type metadata accessor for UUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 32))(a1, a2, v45);
        v46 = type metadata accessor for PlaceSummaryViewModelUnit.TransitShields(0);
        *(_QWORD *)&a1[*(int *)(v46 + 20)] = *(_QWORD *)&a2[*(int *)(v46 + 20)];
        v23 = a1;
        v24 = a3;
        v25 = 8;
        goto LABEL_26;
      case 0xAu:
        v47 = type metadata accessor for UUID(0);
        v48 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 32);
        v48(a1, a2, v47);
        v77 = type metadata accessor for PlaceSummaryViewModelUnit.TappableEntry(0);
        v49 = *(int *)(v77 + 20);
        v50 = &a1[v49];
        v51 = &a2[v49];
        v48(&a1[v49], &a2[v49], v47);
        v52 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.Label(0);
        v53 = v52[5];
        v54 = &v50[v53];
        v55 = &v51[v53];
        v56 = type metadata accessor for AttributedString(0);
        v57 = *(_QWORD *)(v56 - 8);
        v58 = v54;
        v59 = *(void (**)(char *, char *, uint64_t))(v57 + 32);
        v59(v58, v55, v56);
        *(_OWORD *)&v50[v52[6]] = *(_OWORD *)&v51[v52[6]];
        *(_QWORD *)&v50[v52[7]] = *(_QWORD *)&v51[v52[7]];
        *(_QWORD *)&v50[v52[8]] = *(_QWORD *)&v51[v52[8]];
        *(_QWORD *)&v50[v52[9]] = *(_QWORD *)&v51[v52[9]];
        *(_QWORD *)&v50[v52[10]] = *(_QWORD *)&v51[v52[10]];
        v60 = v52[11];
        v61 = &v50[v60];
        v62 = &v51[v60];
        *(_QWORD *)v61 = *(_QWORD *)v62;
        v61[8] = v62[8];
        v63 = v52[12];
        v64 = &v50[v63];
        v65 = &v51[v63];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v65, 1, v56))
        {
          v66 = sub_100008B04(&qword_101494BF0);
          memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
        }
        else
        {
          v59(v64, v65, v56);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v64, 0, 1, v56);
        }
        *(_QWORD *)&a1[*(int *)(v77 + 24)] = *(_QWORD *)&a2[*(int *)(v77 + 24)];
        v23 = a1;
        v24 = a3;
        v25 = 10;
        goto LABEL_26;
      case 0xBu:
        v67 = type metadata accessor for UUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 32))(a1, a2, v67);
        v68 = type metadata accessor for PlaceSummaryViewModelUnit.Delimiter(0);
        a1[*(int *)(v68 + 20)] = a2[*(int *)(v68 + 20)];
        v23 = a1;
        v24 = a3;
        v25 = 11;
        goto LABEL_26;
      case 0xCu:
        v69 = type metadata accessor for UUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 32))(a1, a2, v69);
        v70 = *(int *)(type metadata accessor for PlaceSummaryViewModelUnit.Hours(0) + 20);
        v71 = &a1[v70];
        v72 = &a2[v70];
        v73 = type metadata accessor for AttributedString(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 32))(v71, v72, v73);
        v23 = a1;
        v24 = a3;
        v25 = 12;
        goto LABEL_26;
      case 0xEu:
        v74 = type metadata accessor for UUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 32))(a1, a2, v74);
        v75 = type metadata accessor for PlaceSummaryViewModelUnit.PhotoCarousel(0);
        *(_OWORD *)&a1[*(int *)(v75 + 20)] = *(_OWORD *)&a2[*(int *)(v75 + 20)];
        v23 = a1;
        v24 = a3;
        v25 = 14;
LABEL_26:
        swift_storeEnumTagMultiPayload(v23, v24, v25);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_100096980(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t sub_10009698C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_100096998(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD v16[17];

  result = type metadata accessor for PlaceSummaryViewModelUnit.Label(319);
  if (v3 <= 0x3F)
  {
    v16[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for PlaceSummaryViewModelUnit.Distance(319);
    if (v4 <= 0x3F)
    {
      v16[1] = *(_QWORD *)(result - 8) + 64;
      result = type metadata accessor for PlaceSummaryViewModelUnit.MultipleCuratedGuides(319);
      if (v5 <= 0x3F)
      {
        v16[2] = *(_QWORD *)(result - 8) + 64;
        result = type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(319);
        if (v6 <= 0x3F)
        {
          v16[3] = *(_QWORD *)(result - 8) + 64;
          result = type metadata accessor for PlaceSummaryViewModelUnit.UserGeneratedGuide(319);
          if (v7 <= 0x3F)
          {
            v16[4] = *(_QWORD *)(result - 8) + 64;
            result = type metadata accessor for PlaceSummaryViewModelUnit.FirstPartyRatings(319);
            if (v8 <= 0x3F)
            {
              v16[5] = *(_QWORD *)(result - 8) + 64;
              result = type metadata accessor for PlaceSummaryViewModelUnit.ThirdPartyRatings(319);
              if (v9 <= 0x3F)
              {
                v16[6] = *(_QWORD *)(result - 8) + 64;
                result = type metadata accessor for PlaceSummaryViewModelUnit.UGCUserRecommendations(319);
                if (v10 <= 0x3F)
                {
                  v16[7] = *(_QWORD *)(result - 8) + 64;
                  result = type metadata accessor for PlaceSummaryViewModelUnit.TransitShields(319);
                  if (v11 <= 0x3F)
                  {
                    v16[8] = *(_QWORD *)(result - 8) + 64;
                    v16[9] = (char *)&value witness table for Builtin.NativeObject + 64;
                    result = type metadata accessor for PlaceSummaryViewModelUnit.TappableEntry(319);
                    if (v12 <= 0x3F)
                    {
                      v16[10] = *(_QWORD *)(result - 8) + 64;
                      result = type metadata accessor for PlaceSummaryViewModelUnit.Delimiter(319);
                      if (v13 <= 0x3F)
                      {
                        v16[11] = *(_QWORD *)(result - 8) + 64;
                        result = type metadata accessor for PlaceSummaryViewModelUnit.Hours(319);
                        if (v14 <= 0x3F)
                        {
                          v16[12] = *(_QWORD *)(result - 8) + 64;
                          v16[13] = (char *)&value witness table for Builtin.NativeObject + 64;
                          result = type metadata accessor for PlaceSummaryViewModelUnit.PhotoCarousel(319);
                          if (v15 <= 0x3F)
                          {
                            v16[14] = *(_QWORD *)(result - 8) + 64;
                            v16[15] = (char *)&value witness table for Builtin.NativeObject + 64;
                            v16[16] = (char *)&value witness table for Builtin.NativeObject + 64;
                            swift_initEnumMetadataMultiPayload(a1, 256, 17, v16);
                            return 0;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PlaceSummaryViewModelUnit.Delimiter.DelimiterType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100096BAC + 4 * byte_100E27CE3[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100096BE0 + 4 * byte_100E27CDE[v4]))();
}

uint64_t sub_100096BE0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100096BE8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100096BF0);
  return result;
}

uint64_t sub_100096BFC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100096C04);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100096C08(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100096C10(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PlaceSummaryViewModelUnit.Delimiter.DelimiterType()
{
  return &type metadata for PlaceSummaryViewModelUnit.Delimiter.DelimiterType;
}

unint64_t sub_100096C30()
{
  unint64_t result;

  result = qword_101498308;
  if (!qword_101498308)
  {
    result = swift_getWitnessTable("]i7", &type metadata for PlaceSummaryViewModelUnit.Delimiter.DelimiterType);
    atomic_store(result, (unint64_t *)&qword_101498308);
  }
  return result;
}

ValueMetadata *type metadata accessor for PlaceSummaryUnitPublisherDescription()
{
  return &type metadata for PlaceSummaryUnitPublisherDescription;
}

id sub_100096D64(void *a1)
{
  char *v1;
  objc_class *ObjectType;
  uint64_t v4;
  id v5;
  char *v6;
  char *v7;
  id v8;
  void *v9;
  id v10;
  objc_super v12;

  ObjectType = (objc_class *)swift_getObjectType(v1);
  v4 = OBJC_IVAR____TtC4Maps33HomeListLibraryCountsDataProvider_observers;
  v5 = objc_allocWithZone((Class)GEOObserverHashTable);
  v6 = v1;
  *(_QWORD *)&v1[v4] = objc_msgSend(v5, "initWithProtocol:queue:", &OBJC_PROTOCOL___HomeDataProvidingObserver, 0);
  v6[OBJC_IVAR____TtC4Maps33HomeListLibraryCountsDataProvider_hasInitialData] = 1;
  v6[OBJC_IVAR____TtC4Maps33HomeListLibraryCountsDataProvider_active] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC4Maps33HomeListLibraryCountsDataProvider_countsManager] = a1;
  v7 = a1;

  v12.receiver = v6;
  v12.super_class = ObjectType;
  v8 = objc_msgSendSuper2(&v12, "init");
  v9 = *(void **)&v7[OBJC_IVAR____TtC4Maps24LibraryItemsCountManager_observers];
  v10 = v8;
  objc_msgSend(v9, "registerObserver:", v10);

  return v10;
}

uint64_t sub_100096E90()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD aBlock[6];

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009729C();
  v9 = (void *)static OS_dispatch_queue.main.getter();
  v10 = swift_allocObject(&unk_10119F688, 24, 7);
  *(_QWORD *)(v10 + 16) = v0;
  aBlock[4] = sub_1000972FC;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BB8D4;
  aBlock[3] = &unk_10119F6A0;
  v11 = _Block_copy(aBlock);
  v12 = v0;
  v13 = swift_release();
  static DispatchQoS.unspecified.getter(v13);
  aBlock[0] = _swiftEmptyArrayStorage;
  v14 = sub_10000E540();
  v15 = sub_100008B04((uint64_t *)&unk_101492FB0);
  v16 = sub_10000E588();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v15, v16, v1, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v11);
  _Block_release(v11);

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100097058(uint64_t result)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  _BYTE v9[32];

  if (*(_BYTE *)(result + OBJC_IVAR____TtC4Maps33HomeListLibraryCountsDataProvider_active) == 1)
  {
    v1 = result;
    v2 = objc_msgSend(*(id *)(result + OBJC_IVAR____TtC4Maps33HomeListLibraryCountsDataProvider_observers), "allObservers");
    v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, (char *)&type metadata for Any + 8);

    v4 = *(_QWORD *)(v3 + 16);
    if (v4)
    {
      v5 = v3 + 32;
      do
      {
        sub_100011E20(v5, (uint64_t)v9);
        v6 = sub_100008B04(&qword_101498358);
        if ((swift_dynamicCast(&v8, v9, (char *)&type metadata for Any + 8, v6, 6) & 1) != 0)
        {
          v7 = v8;
          if ((objc_msgSend(v8, "respondsToSelector:", "homeDataProvidingObjectDidUpdate:") & 1) != 0)
            objc_msgSend(v7, "homeDataProvidingObjectDidUpdate:", v1);
          swift_unknownObjectRelease(v7);
        }
        v5 += 32;
        --v4;
      }
      while (v4);
    }
    return swift_bridgeObjectRelease(v3);
  }
  return result;
}

uint64_t type metadata accessor for HomeListLibraryCountsDataProvider()
{
  return objc_opt_self(_TtC4Maps33HomeListLibraryCountsDataProvider);
}

unint64_t sub_10009729C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101492FA0;
  if (!qword_101492FA0)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_101492FA0);
  }
  return result;
}

uint64_t sub_1000972D8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000972FC()
{
  uint64_t v0;

  return sub_100097058(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100097304(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100097314(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10009747C(void *a1)
{
  char *v1;
  uint64_t v3;
  id v4;
  char *v5;
  id v6;
  uint64_t v7;
  char *v8;
  void *v9;
  char *v10;
  uint64_t result;
  char v12;
  objc_super v13;

  *(_QWORD *)&v1[OBJC_IVAR____TtC4Maps28NavigationWaypointController_displayedWaypoints] = _swiftEmptyArrayStorage;
  v3 = OBJC_IVAR____TtC4Maps28NavigationWaypointController_observers;
  v4 = objc_allocWithZone((Class)GEOObserverHashTable);
  v5 = v1;
  *(_QWORD *)&v1[v3] = objc_msgSend(v4, "initWithProtocol:queue:", &OBJC_PROTOCOL____TtP4Maps36NavigationWaypointControllerObserver_, 0);
  *(_QWORD *)&v5[OBJC_IVAR____TtC4Maps28NavigationWaypointController_originWaypoint] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC4Maps28NavigationWaypointController_service] = a1;
  v6 = a1;
  v7 = NSNotFound.getter();
  if (v7 < 0)
  {
    v12 = 2;
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, v12, 3451, 0);
    __break(1u);
  }
  else
  {
    *(_QWORD *)&v5[OBJC_IVAR____TtC4Maps28NavigationWaypointController_targetLegIndex] = v7;

    v13.receiver = v5;
    v13.super_class = (Class)type metadata accessor for NavigationWaypointController();
    v8 = (char *)objc_msgSendSuper2(&v13, "init");
    v9 = *(void **)&v8[OBJC_IVAR____TtC4Maps28NavigationWaypointController_service];
    v10 = v8;
    objc_msgSend(v9, "registerObserver:", v10);
    sub_100098418(v6, 0, 1);

    return (uint64_t)v10;
  }
  return result;
}

void sub_100097638(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23[3];

  v2 = v1;
  if (qword_101490D18 != -1)
    swift_once(&qword_101490D18, sub_100099990);
  v4 = type metadata accessor for Logger(0);
  sub_10000E918(v4, (uint64_t)qword_101498360);
  v5 = a1;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v21 = v2;
    v9 = swift_slowAlloc(32, -1);
    v23[0] = v9;
    *(_DWORD *)v8 = 136315138;
    v10 = objc_msgSend(v5, "shortDescription");
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v13 = v12;

    v22 = sub_1000C28FC(v11, v13, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, v23, v8 + 4, v8 + 12);

    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Will insert waypoint: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    v14 = v9;
    v2 = v21;
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

  }
  v15 = (uint64_t *)(v2 + OBJC_IVAR____TtC4Maps28NavigationWaypointController_displayedWaypoints);
  swift_beginAccess(v2 + OBJC_IVAR____TtC4Maps28NavigationWaypointController_displayedWaypoints, v23, 33, 0);
  v16 = *v15;
  if (!((unint64_t)*v15 >> 62))
  {
    v17 = v5;
LABEL_8:
    sub_10020D988(0, 0, (uint64_t)v5);
    swift_endAccess(v23);
    sub_100098014(1);
    return;
  }
  if (v16 < 0)
    v18 = *v15;
  else
    v18 = v16 & 0xFFFFFFFFFFFFFF8;
  v19 = v5;
  swift_bridgeObjectRetain(v16);
  v20 = _CocoaArrayWrapper.endIndex.getter(v18);
  swift_bridgeObjectRelease(v16);
  if ((v20 & 0x8000000000000000) == 0)
    goto LABEL_8;
  __break(1u);
}

void sub_1000978E8(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[16];
  uint64_t v38[3];

  v3 = v2;
  if (qword_101490D18 != -1)
    swift_once(&qword_101490D18, sub_100099990);
  v6 = type metadata accessor for Logger(0);
  sub_10000E918(v6, (uint64_t)qword_101498360);
  v7 = a1;
  v8 = a2;
  v9 = v7;
  v10 = v8;
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc(22, -1);
    v34 = swift_slowAlloc(64, -1);
    v38[0] = v34;
    *(_DWORD *)v13 = 136315394;
    v35 = v3;
    v14 = objc_msgSend(v9, "shortDescription");
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

    v36 = sub_1000C28FC(v15, v17, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, v37, v13 + 4, v13 + 12);

    swift_bridgeObjectRelease(v17);
    *(_WORD *)(v13 + 12) = 2080;
    v18 = objc_msgSend(v10, "shortDescription");
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v21 = v20;

    v36 = sub_1000C28FC(v19, v21, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, v37, v13 + 14, v13 + 22);

    v22 = v21;
    v3 = v35;
    swift_bridgeObjectRelease(v22);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Will replace waypoint: %s with: %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {

  }
  v23 = (uint64_t *)(v3 + OBJC_IVAR____TtC4Maps28NavigationWaypointController_displayedWaypoints);
  swift_beginAccess(v3 + OBJC_IVAR____TtC4Maps28NavigationWaypointController_displayedWaypoints, v38, 0, 0);
  v24 = *v23;
  swift_bridgeObjectRetain(*v23);
  v25 = sub_100180CDC((uint64_t)v9, v24);
  v27 = v26;
  swift_bridgeObjectRelease(v24);
  if ((v27 & 1) == 0)
  {
    swift_beginAccess(v23, &v36, 33, 0);
    v28 = (void *)sub_100184898(v25);
    swift_endAccess(&v36);

  }
  swift_beginAccess(v23, &v36, 33, 0);
  v29 = *v23;
  if (!((unint64_t)*v23 >> 62))
  {
    v30 = v10;
LABEL_10:
    sub_10020D988(0, 0, (uint64_t)v10);
    swift_endAccess(&v36);
    sub_100098014(1);
    return;
  }
  if (v29 < 0)
    v31 = *v23;
  else
    v31 = v29 & 0xFFFFFFFFFFFFFF8;
  v32 = v10;
  swift_bridgeObjectRetain(v29);
  v33 = _CocoaArrayWrapper.endIndex.getter(v31);
  swift_bridgeObjectRelease(v29);
  if ((v33 & 0x8000000000000000) == 0)
    goto LABEL_10;
  __break(1u);
}

void sub_100097CA4(int64_t a1)
{
  char *v1;
  void *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  _BYTE v25[16];
  char v26[24];

  v2 = v1;
  if ((a1 & 0x8000000000000000) == 0)
  {
    v4 = (uint64_t *)&v1[OBJC_IVAR____TtC4Maps28NavigationWaypointController_displayedWaypoints];
    swift_beginAccess(&v1[OBJC_IVAR____TtC4Maps28NavigationWaypointController_displayedWaypoints], v26, 0, 0);
    v5 = *v4;
    if ((unint64_t)*v4 >> 62)
    {
      if (v5 < 0)
        v12 = *v4;
      else
        v12 = v5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*v4);
      v13 = _CocoaArrayWrapper.endIndex.getter(v12);
      swift_bridgeObjectRelease(v5);
      if (v13 > a1)
        goto LABEL_4;
    }
    else if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10) > a1)
    {
LABEL_4:
      if (qword_101490D18 != -1)
        swift_once(&qword_101490D18, sub_100099990);
      v6 = type metadata accessor for Logger(0);
      v7 = sub_10000E918(v6, (uint64_t)qword_101498360);
      v8 = Logger.logObject.getter(v7);
      v9 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v8, v9))
      {
        v10 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v10 = 134217984;
        v24 = a1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, v25, v10 + 4, v10 + 12);
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "Will remove waypoint at index: %ld", v10, 0xCu);
        swift_slowDealloc(v10, -1, -1);
      }

      swift_beginAccess(v4, &v24, 33, 0);
      v11 = (void *)sub_100184898(a1);
      swift_endAccess(&v24);

      sub_100098014(1);
      return;
    }
  }
  if (qword_101490D18 != -1)
    swift_once(&qword_101490D18, sub_100099990);
  v14 = type metadata accessor for Logger(0);
  sub_10000E918(v14, (uint64_t)qword_101498360);
  v15 = v2;
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc(22, -1);
    *(_DWORD *)v18 = 134218240;
    v24 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, v25, v18 + 4, v18 + 12);
    *(_WORD *)(v18 + 12) = 2048;
    v19 = (uint64_t *)&v15[OBJC_IVAR____TtC4Maps28NavigationWaypointController_displayedWaypoints];
    swift_beginAccess(&v15[OBJC_IVAR____TtC4Maps28NavigationWaypointController_displayedWaypoints], &v24, 0, 0);
    v20 = *v19;
    if ((unint64_t)v20 >> 62)
    {
      if (v20 < 0)
        v22 = v20;
      else
        v22 = v20 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v20);
      v21 = _CocoaArrayWrapper.endIndex.getter(v22);
      swift_bridgeObjectRelease(v20);
    }
    else
    {
      v21 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v23 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v18 + 14, v18 + 22);

    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Tried to remove at index: %ld which was out of bounds of displayedWaypoints.count: %ld", (uint8_t *)v18, 0x16u);
    swift_slowDealloc(v18, -1, -1);

  }
  else
  {

  }
}

void sub_100098014(char a1)
{
  void *v1;
  uint64_t v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Class isa;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  Class v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  char *v31;
  uint64_t v32;
  Class v33;
  uint64_t v34;
  char v35;
  char *v36;
  char v37[24];
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41[4];

  if (qword_101490D18 != -1)
    swift_once(&qword_101490D18, sub_100099990);
  v3 = type metadata accessor for Logger(0);
  sub_10000E918(v3, (uint64_t)qword_101498360);
  v4 = v1;
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.info.getter();
  v36 = v4;
  v35 = a1;
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc(18, -1);
    v8 = swift_slowAlloc(32, -1);
    v41[0] = v8;
    *(_DWORD *)v7 = 67109378;
    LODWORD(v39) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, (char *)&v39 + 4, v7 + 4, v7 + 8);
    *(_WORD *)(v7 + 8) = 2080;
    v9 = &v4[OBJC_IVAR____TtC4Maps28NavigationWaypointController_displayedWaypoints];
    swift_beginAccess(&v4[OBJC_IVAR____TtC4Maps28NavigationWaypointController_displayedWaypoints], v37, 0, 0);
    v10 = *(_QWORD *)v9;
    v11 = swift_bridgeObjectRetain(v10);
    v12 = sub_10012D0B4(v11);
    swift_bridgeObjectRelease(v10);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v12);
    v14 = sub_1006289DC(isa);

    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

    v18 = v15;
    v4 = v36;
    v39 = sub_1000C28FC(v18, v17, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v7 + 10, v7 + 18);

    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "notifyObserversAndUpdateService:%{BOOL}d with currently displayed waypoints: %s", (uint8_t *)v7, 0x12u);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

  }
  v19 = objc_msgSend(*(id *)&v4[OBJC_IVAR____TtC4Maps28NavigationWaypointController_observers], "allObservers");
  v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v19, (char *)&type metadata for Any + 8);

  v21 = *(_QWORD *)(v20 + 16);
  if (v21)
  {
    v22 = &v4[OBJC_IVAR____TtC4Maps28NavigationWaypointController_displayedWaypoints];
    v34 = v20;
    v23 = v20 + 32;
    swift_beginAccess(&v4[OBJC_IVAR____TtC4Maps28NavigationWaypointController_displayedWaypoints], &v39, 0, 0);
    do
    {
      sub_100011E20(v23, (uint64_t)v41);
      v24 = sub_100008B04((uint64_t *)&unk_1014983F0);
      if ((swift_dynamicCast(&v38, v41, (char *)&type metadata for Any + 8, v24, 6) & 1) != 0)
      {
        v25 = v38;
        v26 = *(_QWORD *)v22;
        sub_10000E4BC(0, (unint64_t *)&qword_101491C90, GEOComposedWaypoint_ptr);
        swift_bridgeObjectRetain(v26);
        v27 = Array._bridgeToObjectiveC()().super.isa;
        v28 = v26;
        v4 = v36;
        swift_bridgeObjectRelease(v28);
        objc_msgSend(v25, "navigationWaypointController:didUpdateDisplayedWaypoints:", v36, v27);
        swift_unknownObjectRelease(v25);

      }
      v23 += 32;
      --v21;
    }
    while (v21);
    v29 = v34;
  }
  else
  {
    v29 = v20;
  }
  swift_bridgeObjectRelease(v29);
  if ((v35 & 1) != 0)
  {
    v30 = *(void **)&v4[OBJC_IVAR____TtC4Maps28NavigationWaypointController_service];
    v31 = &v4[OBJC_IVAR____TtC4Maps28NavigationWaypointController_displayedWaypoints];
    swift_beginAccess(&v4[OBJC_IVAR____TtC4Maps28NavigationWaypointController_displayedWaypoints], v41, 0, 0);
    v32 = *(_QWORD *)v31;
    sub_10000E4BC(0, (unint64_t *)&qword_101491C90, GEOComposedWaypoint_ptr);
    swift_bridgeObjectRetain(v32);
    v33 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v32);
    objc_msgSend(v30, "rerouteWithWaypoints:", v33);

  }
}

void sub_100098418(void *a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  void (**v10)(char *, uint64_t, uint64_t);
  uint64_t v11;
  char **v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  unsigned int v16;
  id v17;
  void *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  id i;
  void *v31;
  id v32;
  uint64_t v33;
  BOOL v34;
  id v35;
  id v36;
  void *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  id v41;
  id v42;
  unint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned __int8 v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  void (**v55)(char *, uint64_t, uint64_t);
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  Class isa;
  id v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char **v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  Class v76;
  id v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint8_t *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  id v91;
  char **v92;
  uint64_t v93;
  uint64_t v94[3];
  char v95[24];
  _QWORD *v96;

  v5 = v3;
  v9 = type metadata accessor for Logger(0);
  v10 = *(void (***)(char *, uint64_t, uint64_t))(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char **)((char *)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(_QWORD *)&v14 = __chkstk_darwin(v13).n128_u64[0];
  v90 = (char *)&v87 - v15;
  v16 = objc_msgSend(a1, "isInNavigatingState", v14);
  v92 = v12;
  if (!v16)
    goto LABEL_27;
  v17 = objc_msgSend(a1, "route");
  if (!v17)
    goto LABEL_27;
  v18 = v17;
  v19 = v9;
  v20 = objc_msgSend(v17, "steps");
  if (!v20)
  {

LABEL_27:
    v29 = 0;
    a2 = (uint64_t)_swiftEmptyArrayStorage;
    v96 = _swiftEmptyArrayStorage;
    goto LABEL_28;
  }
  v21 = (uint64_t)v20;
  v89 = v5;
  v22 = sub_10000E4BC(0, (unint64_t *)&unk_1014983D8, GEOComposedRouteStep_ptr);
  v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, v22);

  if ((a3 & 1) != 0)
  {
LABEL_15:
    v32 = objc_msgSend(a1, "stepIndex");
    goto LABEL_16;
  }
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v12 = &selRef_legalDisclaimerLabel;
    v24 = objc_msgSend(v18, "legs");
    if (!v24)
    {
LABEL_76:
      __break(1u);
      goto LABEL_77;
    }
    v25 = v24;
    v4 = sub_10000E4BC(0, &qword_1014983E8, GEOComposedRouteLeg_ptr);
    v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v25, v4);

    if (!((unint64_t)v21 >> 62))
    {
      v26 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_9;
    }
  }
  if (v21 < 0)
    v86 = v21;
  else
    v86 = v21 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v21);
  v26 = _CocoaArrayWrapper.endIndex.getter(v86);
  swift_bridgeObjectRelease(v21);
LABEL_9:
  swift_bridgeObjectRelease(v21);
  if (v26 <= a2)
    goto LABEL_15;
  v27 = objc_msgSend(v18, v12[2]);
  if (v27)
  {
    v28 = v27;
    v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v27, v4);

    if ((v29 & 0xC000000000000001) != 0)
      goto LABEL_71;
    if (*(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10) <= (unint64_t)a2)
    {
      __break(1u);
      goto LABEL_73;
    }
    for (i = *(id *)(v29 + 8 * a2 + 32); ; i = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, v29))
    {
      v31 = i;
      swift_bridgeObjectRelease(v29);
      v32 = objc_msgSend(v31, "startStepIndex");

LABEL_16:
      v9 = v19;
      if ((unint64_t)v23 >> 62)
      {
        v84 = v23 < 0 ? v23 : v23 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v23);
        v33 = _CocoaArrayWrapper.endIndex.getter(v84);
        swift_bridgeObjectRelease(v23);
      }
      else
      {
        v33 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease(v23);
      v34 = (unint64_t)v32 >= v33 || v33 <= 0;
      v35 = v34 ? 0 : v32;
      v36 = objc_msgSend(v18, "waypointsAfterStepIndex:legIndex:", v35, 0);
      if (v36)
      {
        v37 = v36;
        v38 = sub_10000E4BC(0, (unint64_t *)&qword_101491C90, GEOComposedWaypoint_ptr);
        a2 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v37, v38);

      }
      else
      {
        a2 = 0;
      }
      v5 = v89;
      v96 = (_QWORD *)a2;
      v29 = (uint64_t)objc_msgSend(v18, "waypoints");
      if (!v29)
        break;
      v82 = sub_10000E4BC(0, (unint64_t *)&qword_101491C90, GEOComposedWaypoint_ptr);
      v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v29, v82);

      if ((unint64_t)v23 >> 62)
      {
        if (v23 < 0)
          v85 = v23;
        else
          v85 = v23 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v23);
        v29 = _CocoaArrayWrapper.endIndex.getter(v85);
        swift_bridgeObjectRelease(v23);
        if (!v29)
          goto LABEL_53;
      }
      else
      {
        v29 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (!v29)
          goto LABEL_53;
      }
      if ((v23 & 0xC000000000000001) != 0)
      {
        v83 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v23);
        goto LABEL_52;
      }
      if (*(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v83 = *(id *)(v23 + 32);
LABEL_52:
        v29 = (uint64_t)v83;
LABEL_53:
        swift_bridgeObjectRelease(v23);

        v5 = v89;
        goto LABEL_28;
      }
      __break(1u);
LABEL_71:
      ;
    }

LABEL_28:
    v39 = *(void **)(v5 + OBJC_IVAR____TtC4Maps28NavigationWaypointController_originWaypoint);
    *(_QWORD *)(v5 + OBJC_IVAR____TtC4Maps28NavigationWaypointController_originWaypoint) = v29;
    v91 = (id)v29;

    v40 = OBJC_IVAR____TtC4Maps28NavigationWaypointController_targetLegIndex;
    v41 = *(id *)(v5 + OBJC_IVAR____TtC4Maps28NavigationWaypointController_targetLegIndex);
    v42 = objc_msgSend(a1, "targetLegIndex");
    *(_QWORD *)(v5 + v40) = objc_msgSend(a1, "targetLegIndex");
    v43 = (unint64_t *)(v5 + OBJC_IVAR____TtC4Maps28NavigationWaypointController_displayedWaypoints);
    swift_beginAccess(v5 + OBJC_IVAR____TtC4Maps28NavigationWaypointController_displayedWaypoints, v95, 1, 0);
    if (a2)
    {
      v44 = v5;
      v45 = *v43;
      swift_bridgeObjectRetain(*v43);
      v46 = swift_bridgeObjectRetain(a2);
      v47 = sub_100084398(v46, v45);
      swift_bridgeObjectRelease(a2);
      v48 = v45;
      v5 = v44;
      swift_bridgeObjectRelease(v48);
      if ((v47 & 1) != 0 && v41 == v42)
      {
        if (qword_101490D18 != -1)
          swift_once(&qword_101490D18, sub_100099990);
        v49 = sub_10000E918(v9, (uint64_t)qword_101498360);
        v50 = v90;
        v10[2](v90, v49, v9);
        v51 = (uint64_t)v96;
        v52 = swift_bridgeObjectRetain(v96);
        v53 = Logger.logObject.getter(v52);
        v54 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v53, v54))
        {

          swift_bridgeObjectRelease_n(v51, 2);
          ((void (*)(char *, uint64_t))v10[1])(v50, v9);
          return;
        }
        v55 = v10;
        v88 = v9;
        v56 = (uint8_t *)swift_slowAlloc(12, -1);
        v57 = swift_slowAlloc(32, -1);
        v94[0] = v57;
        *(_DWORD *)v56 = 136315138;
        if (v51)
        {
          v58 = v57;
          v92 = (char **)(v56 + 4);
          v59 = sub_10012D0B4(v51);
          isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v59);
          v61 = sub_1006289DC(isa);

          v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
          v64 = v63;

          v93 = sub_1000C28FC(v62, v64, v94);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, v94, v92, v56 + 12);
          swift_bridgeObjectRelease_n(v51, 2);
          swift_bridgeObjectRelease(v64);
          _os_log_impl((void *)&_mh_execute_header, v53, v54, "updateFromLatestServiceState, new upcoming waypoints are same as displayed waypoints: %s", v56, 0xCu);
          swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v58, -1, -1);
          swift_slowDealloc(v56, -1, -1);

          ((void (*)(char *, uint64_t))v55[1])(v90, v88);
          return;
        }
        goto LABEL_75;
      }
    }
    if (qword_101490D18 != -1)
      swift_once(&qword_101490D18, sub_100099990);
    v65 = sub_10000E918(v9, (uint64_t)qword_101498360);
    v66 = v92;
    v10[2]((char *)v92, v65, v9);
    v67 = (uint64_t)v96;
    v68 = swift_bridgeObjectRetain_n(v96, 2);
    v69 = (char *)v10;
    v70 = Logger.logObject.getter(v68);
    v71 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v70, v71))
    {
      v89 = v5;
      v90 = v69;
      v88 = v9;
      v72 = (uint8_t *)swift_slowAlloc(12, -1);
      v73 = swift_slowAlloc(32, -1);
      v94[0] = v73;
      *(_DWORD *)v72 = 136315138;
      if (!v67)
      {
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
        goto LABEL_76;
      }
      v74 = v73;
      v87 = v72 + 4;
      v75 = sub_10012D0B4(v67);
      v76 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v75);
      v77 = sub_1006289DC(v76);

      v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
      v80 = v79;

      v93 = sub_1000C28FC(v78, v80, v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, v94, v87, v72 + 12);
      swift_bridgeObjectRelease_n(v67, 2);
      swift_bridgeObjectRelease(v80);
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "updateFromLatestServiceState, new upcoming waypoints: %s", v72, 0xCu);
      swift_arrayDestroy(v74, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v74, -1, -1);
      swift_slowDealloc(v72, -1, -1);

      (*((void (**)(char **, uint64_t))v90 + 1))(v92, v88);
    }
    else
    {

      swift_bridgeObjectRelease_n(v67, 2);
      (*((void (**)(char **, uint64_t))v69 + 1))(v66, v9);
    }
    swift_beginAccess(&v96, v94, 0, 0);
    if (v96)
    {
      v81 = *v43;
      *v43 = (unint64_t)v96;
      swift_bridgeObjectRelease(v81);
      sub_100098014(0);

      return;
    }
LABEL_73:

    __break(1u);
    goto LABEL_74;
  }
LABEL_77:
  __break(1u);
}

id sub_100098D60()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NavigationWaypointController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for NavigationWaypointController()
{
  return objc_opt_self(_TtC4Maps28NavigationWaypointController);
}

void sub_100098F88(void *a1, void *a2, unint64_t a3)
{
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  os_log_type_t v15;
  _QWORD *v16;
  uint64_t v17;
  id v18;
  __CFString *v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  NSObject *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;

  if (qword_101490D18 != -1)
    swift_once(&qword_101490D18, sub_100099990);
  v6 = type metadata accessor for Logger(0);
  sub_10000E918(v6, (uint64_t)qword_101498360);
  v7 = a2;
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v26 = a1;
    v10 = swift_slowAlloc(22, -1);
    v11 = (_QWORD *)swift_slowAlloc(8, -1);
    v12 = swift_slowAlloc(32, -1);
    v13 = v12;
    v28 = v12;
    *(_DWORD *)v10 = 138412546;
    v14 = (void *)(v10 + 4);
    if (a2)
    {
      v27 = (uint64_t)v7;
      v25 = v8;
      v15 = v9;
      v16 = v11;
      v17 = v12;
      v18 = v7;
      v13 = v17;
      v11 = v16;
      v9 = v15;
      v8 = v25;
    }
    else
    {
      v27 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v10 + 4, v10 + 12);
    *v11 = a2;

    *(_WORD *)(v10 + 12) = 2080;
    if (a3 <= 0xF)
    {
      v14 = *(&off_10119F748 + a3);
      v19 = *(&off_10119F6C8 + a3);
    }
    v20 = v14;
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v27 = sub_1000C28FC(v21, v23, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "navigationService:didReroute: %@ forReason: %s", (uint8_t *)v10, 0x16u);
    v24 = sub_100008B04((uint64_t *)&unk_101494470);
    swift_arrayDestroy(v11, 1, v24);
    swift_slowDealloc(v11, -1, -1);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    a1 = v26;
  }
  else
  {

  }
  if (!a1)
    __break(1u);
  sub_100098418(a1, 0, 1);
}

void sub_1000992F4(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;

  if (qword_101490D18 != -1)
    swift_once(&qword_101490D18, sub_100099990);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10000E918(v4, (uint64_t)qword_101498360);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v8 = 134217984;
    v9 = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v8 + 4, v8 + 12);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "navigationService:failedRerouteWithErrorCode: %ld", v8, 0xCu);
    swift_slowDealloc(v8, -1, -1);
  }

  if (a1)
    sub_100098418(a1, 0, 1);
  else
    __break(1u);
}

void sub_100099488(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;

  if (MNNavigationServiceStateChangedToNavigating(a2, a3, a3))
  {
    if (qword_101490D18 != -1)
      swift_once(&qword_101490D18, sub_100099990);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10000E918(v4, (uint64_t)qword_101498360);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "navigationService state changed to navigating", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    if (a1)
      sub_100098418(a1, 0, 1);
    else
      __break(1u);
  }
}

void sub_100099688(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = v3;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101490D18 != -1)
    swift_once(&qword_101490D18, sub_100099990);
  v12 = sub_10000E918(v8, (uint64_t)qword_101498360);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  v13 = a2;
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v25 = a3;
    v26 = a1;
    v27 = v4;
    v16 = swift_slowAlloc(22, -1);
    v24 = swift_slowAlloc(32, -1);
    v29 = v24;
    *(_DWORD *)v16 = 136315394;
    if (!a2)
      goto LABEL_10;
    v23 = v16 + 4;
    v17 = objc_msgSend(v13, "shortDescription");
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v20 = v19;

    v28 = sub_1000C28FC(v18, v20, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v23, v16 + 12);

    swift_bridgeObjectRelease(v20);
    *(_WORD *)(v16 + 12) = 2048;
    v28 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v16 + 14, v16 + 22);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "navigationService:didArriveAt:%s:endOfLegIndex:%lu", (uint8_t *)v16, 0x16u);
    v21 = v24;
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    a1 = v26;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  if (a1)
  {
    sub_100098418(a1, 0, 1);
    return;
  }
  __break(1u);
LABEL_10:
  __break(1u);
}

uint64_t sub_100099990()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v0 = type metadata accessor for Logger(0);
  sub_10000E930(v0, qword_101498360);
  sub_10000E918(v0, (uint64_t)qword_101498360);
  v5 = type metadata accessor for NavigationWaypointController();
  v1 = sub_100008B04((uint64_t *)&unk_1014983C8);
  v2 = String.init<A>(describing:)(&v5, v1);
  return Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xEE007370614D2E65, v2, v3);
}

void sub_100099A2C(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  __CFString *v16;
  __CFString *v17;
  __CFString *v18;
  __CFString *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = v2;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101490D18 != -1)
    swift_once(&qword_101490D18, sub_100099990);
  v10 = sub_10000E918(v6, (uint64_t)qword_101498360);
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v29 = v15;
    *(_DWORD *)v14 = 136315138;
    v25 = v15;
    switch((int)a2)
    {
      case 0:
        v16 = CFSTR("AUTOMOBILE");
        goto LABEL_14;
      case 1:
        v16 = CFSTR("TRANSIT");
        goto LABEL_14;
      case 2:
        v16 = CFSTR("WALKING");
        goto LABEL_14;
      case 3:
        v16 = CFSTR("BICYCLE");
        goto LABEL_14;
      case 4:
        v16 = CFSTR("UNKNOWN_TRANSPORT_TYPE");
        goto LABEL_14;
      case 5:
        v16 = CFSTR("FERRY");
        goto LABEL_14;
      case 6:
        v16 = CFSTR("RIDESHARE");
LABEL_14:
        v17 = v16;
        break;
      default:
        v16 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), a2));
        break;
    }
    v26 = a1;
    v27 = v3;
    v18 = v16;
    if (!v18)
    {
LABEL_20:
      __break(1u);
      JUMPOUT(0x100099D00);
    }
    v19 = v18;
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v22 = v21;

    v28 = sub_1000C28FC(v20, v22, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease(v22);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "navigationService:didSwitchToNewTransportType: %s", v14, 0xCu);
    v23 = v25;
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    a1 = v26;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  if (!a1)
  {
    __break(1u);
    goto LABEL_20;
  }
  sub_100098418(a1, 0, 1);
}

void sub_100099D1C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = v3;
  v27 = a3;
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101490D18 != -1)
    swift_once(&qword_101490D18, sub_100099990);
  v11 = sub_10000E918(v7, (uint64_t)qword_101498360);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
  v12 = a2;
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v25 = a1;
    v26 = v4;
    v15 = swift_slowAlloc(22, -1);
    v24 = swift_slowAlloc(32, -1);
    v29 = v24;
    *(_DWORD *)v15 = 136315394;
    if (!a2)
      goto LABEL_12;
    v23 = v15 + 4;
    v16 = objc_msgSend(v12, "shortDescription");
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v19 = v18;

    v28 = sub_1000C28FC(v17, v19, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v23, v15 + 12);

    swift_bridgeObjectRelease(v19);
    *(_WORD *)(v15 + 12) = 2048;
    v20 = v27;
    v28 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v15 + 14, v15 + 22);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "navigationService:didResumeNavigatingFrom:%s:endOfLegIndex:%lu", (uint8_t *)v15, 0x16u);
    v21 = v24;
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    a1 = v25;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v20 = v27;
  }
  if (a1)
  {
    if (v20 != -1)
    {
      sub_100098418(a1, v20 + 1, 0);
      return;
    }
    __break(1u);
  }
  __break(1u);
LABEL_12:
  __break(1u);
}

uint64_t sub_100099FB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  Swift::String v9;
  void *object;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC4Maps25PlaceSummaryTemplateEntry_lines);
  v17 = *(_QWORD *)(v1 + 16);
  if (!v17)
    return 0;
  swift_bridgeObjectRetain(v1);
  v2 = 0;
  v3 = 0;
  v4 = 0xE000000000000000;
  do
  {
    if (v3 >= *(_QWORD *)(v1 + 16))
      goto LABEL_21;
    v18 = v4;
    v19 = v2;
    v8 = *(_QWORD *)(v1 + 32 + 16 * v3);
    v20 = v3;
    swift_bridgeObjectRetain(v8);
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v9._object;
    String.append(_:)(v9);
    swift_bridgeObjectRelease(object);
    v11._countAndFlagsBits = 2108704;
    v11._object = (void *)0xE300000000000000;
    String.append(_:)(v11);
    if ((unint64_t)v8 >> 62)
    {
      if (v8 < 0)
        v14 = v8;
      else
        v14 = v8 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v8);
      if (_CocoaArrayWrapper.endIndex.getter(v14))
      {
LABEL_7:
        if ((v8 & 0xC000000000000001) != 0)
        {
          v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v8);
        }
        else
        {
          if (!*(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_21:
            __break(1u);
            JUMPOUT(0x10009BC78);
          }
          v13 = *(_QWORD *)(v8 + 32);
          swift_retain();
        }
        swift_bridgeObjectRelease(0xE000000000000000);
        __asm { BR              X11 }
      }
    }
    else
    {
      v12 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v8);
      if (v12)
        goto LABEL_7;
    }
    swift_bridgeObjectRelease_n(v8, 2);
    v15 = 0;
    v5 = 0xE000000000000000;
    String.append(_:)(*(Swift::String *)&v15);
    swift_bridgeObjectRelease(0xE000000000000000);
    v6._countAndFlagsBits = 93;
    v6._object = (void *)0xE100000000000000;
    String.append(_:)(v6);
    swift_bridgeObjectRetain(v18);
    v7._countAndFlagsBits = 0x656E694C5BLL;
    v7._object = (void *)0xE500000000000000;
    String.append(_:)(v7);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(0xE500000000000000);
    v3 = v20 + 1;
    v2 = v19;
    v4 = v18;
  }
  while (v20 + 1 != v17);
  swift_bridgeObjectRelease(v1);
  return v2;
}

id sub_10009BD28()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PlaceSummaryTemplateEntry();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for PlaceSummaryTemplateEntry()
{
  return objc_opt_self(_TtC4Maps25PlaceSummaryTemplateEntry);
}

void sub_10009BDC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC4Maps25PlaceSummaryTemplateEntry_lines);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return;
  v13 = v1 + 32;
  swift_bridgeObjectRetain(v1);
  v3 = 0;
  while (v3 < *(_QWORD *)(v1 + 16))
  {
    v4 = *(_QWORD *)(v13 + 16 * v3);
    if ((unint64_t)v4 >> 62)
    {
      if (v4 < 0)
        v12 = *(_QWORD *)(v13 + 16 * v3);
      else
        v12 = v4 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(*(_QWORD *)(v13 + 16 * v3), 2);
      v5 = _CocoaArrayWrapper.endIndex.getter(v12);
      swift_bridgeObjectRelease(v4);
      if (!v5)
        goto LABEL_3;
    }
    else
    {
      v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(*(_QWORD *)(v13 + 16 * v3));
      if (!v5)
        goto LABEL_3;
    }
    v6 = v4 & 0xC000000000000001;
    if ((v4 & 0xC000000000000001) != 0)
    {
      specialized _ArrayBuffer._getElementSlowPath(_:)(0, v4);
    }
    else
    {
      if (!*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_40;
      swift_retain();
    }
    v7 = sub_100142F18(10);
    swift_release();
    if ((v7 & 1) != 0)
      goto LABEL_33;
    if (v5 != 1)
    {
      if (v6)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)(1, v4);
      }
      else
      {
        if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
          goto LABEL_41;
        swift_retain();
      }
      v8 = sub_100142F18(10);
      swift_release();
      if ((v8 & 1) != 0)
      {
LABEL_33:
        swift_bridgeObjectRelease(v1);
        v1 = v4;
LABEL_34:
        swift_bridgeObjectRelease(v1);
        return;
      }
      v9 = 0;
      while (v5 - 2 != v9)
      {
        v10 = v9 + 2;
        if (v6)
        {
          specialized _ArrayBuffer._getElementSlowPath(_:)(v9 + 2, v4);
          if (__OFADD__(v10, 1))
            goto LABEL_37;
        }
        else
        {
          if (v10 >= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_38;
          swift_retain();
          if (__OFADD__(v10, 1))
          {
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            goto LABEL_39;
          }
        }
        v11 = sub_100142F18(10);
        swift_release();
        ++v9;
        if ((v11 & 1) != 0)
          goto LABEL_33;
      }
    }
LABEL_3:
    ++v3;
    swift_bridgeObjectRelease(v4);
    if (v3 == v2)
      goto LABEL_34;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
}

void sub_10009C038()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC4Maps25PlaceSummaryTemplateEntry_lines);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return;
  v13 = v1 + 32;
  swift_bridgeObjectRetain(v1);
  v3 = 0;
  while (v3 < *(_QWORD *)(v1 + 16))
  {
    v4 = *(_QWORD *)(v13 + 16 * v3);
    if ((unint64_t)v4 >> 62)
    {
      if (v4 < 0)
        v12 = *(_QWORD *)(v13 + 16 * v3);
      else
        v12 = v4 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(*(_QWORD *)(v13 + 16 * v3), 2);
      v5 = _CocoaArrayWrapper.endIndex.getter(v12);
      swift_bridgeObjectRelease(v4);
      if (!v5)
        goto LABEL_3;
    }
    else
    {
      v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(*(_QWORD *)(v13 + 16 * v3));
      if (!v5)
        goto LABEL_3;
    }
    v6 = v4 & 0xC000000000000001;
    if ((v4 & 0xC000000000000001) != 0)
    {
      specialized _ArrayBuffer._getElementSlowPath(_:)(0, v4);
    }
    else
    {
      if (!*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_40;
      swift_retain();
    }
    v7 = sub_100142F18(9);
    swift_release();
    if ((v7 & 1) != 0)
      goto LABEL_33;
    if (v5 != 1)
    {
      if (v6)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)(1, v4);
      }
      else
      {
        if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
          goto LABEL_41;
        swift_retain();
      }
      v8 = sub_100142F18(9);
      swift_release();
      if ((v8 & 1) != 0)
      {
LABEL_33:
        swift_bridgeObjectRelease(v1);
        v1 = v4;
LABEL_34:
        swift_bridgeObjectRelease(v1);
        return;
      }
      v9 = 0;
      while (v5 - 2 != v9)
      {
        v10 = v9 + 2;
        if (v6)
        {
          specialized _ArrayBuffer._getElementSlowPath(_:)(v9 + 2, v4);
          if (__OFADD__(v10, 1))
            goto LABEL_37;
        }
        else
        {
          if (v10 >= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_38;
          swift_retain();
          if (__OFADD__(v10, 1))
          {
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            goto LABEL_39;
          }
        }
        v11 = sub_100142F18(9);
        swift_release();
        ++v9;
        if ((v11 & 1) != 0)
          goto LABEL_33;
      }
    }
LABEL_3:
    ++v3;
    swift_bridgeObjectRelease(v4);
    if (v3 == v2)
      goto LABEL_34;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
}

void sub_10009C2B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC4Maps25PlaceSummaryTemplateEntry_lines);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return;
  v13 = v1 + 32;
  swift_bridgeObjectRetain(v1);
  v3 = 0;
  while (v3 < *(_QWORD *)(v1 + 16))
  {
    v4 = *(_QWORD *)(v13 + 16 * v3);
    if ((unint64_t)v4 >> 62)
    {
      if (v4 < 0)
        v12 = *(_QWORD *)(v13 + 16 * v3);
      else
        v12 = v4 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(*(_QWORD *)(v13 + 16 * v3), 2);
      v5 = _CocoaArrayWrapper.endIndex.getter(v12);
      swift_bridgeObjectRelease(v4);
      if (!v5)
        goto LABEL_3;
    }
    else
    {
      v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(*(_QWORD *)(v13 + 16 * v3));
      if (!v5)
        goto LABEL_3;
    }
    v6 = v4 & 0xC000000000000001;
    if ((v4 & 0xC000000000000001) != 0)
    {
      specialized _ArrayBuffer._getElementSlowPath(_:)(0, v4);
    }
    else
    {
      if (!*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_40;
      swift_retain();
    }
    v7 = sub_100142F18(16);
    swift_release();
    if ((v7 & 1) != 0)
      goto LABEL_33;
    if (v5 != 1)
    {
      if (v6)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)(1, v4);
      }
      else
      {
        if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
          goto LABEL_41;
        swift_retain();
      }
      v8 = sub_100142F18(16);
      swift_release();
      if ((v8 & 1) != 0)
      {
LABEL_33:
        swift_bridgeObjectRelease(v1);
        v1 = v4;
LABEL_34:
        swift_bridgeObjectRelease(v1);
        return;
      }
      v9 = 0;
      while (v5 - 2 != v9)
      {
        v10 = v9 + 2;
        if (v6)
        {
          specialized _ArrayBuffer._getElementSlowPath(_:)(v9 + 2, v4);
          if (__OFADD__(v10, 1))
            goto LABEL_37;
        }
        else
        {
          if (v10 >= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_38;
          swift_retain();
          if (__OFADD__(v10, 1))
          {
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            goto LABEL_39;
          }
        }
        v11 = sub_100142F18(16);
        swift_release();
        ++v9;
        if ((v11 & 1) != 0)
          goto LABEL_33;
      }
    }
LABEL_3:
    ++v3;
    swift_bridgeObjectRelease(v4);
    if (v3 == v2)
      goto LABEL_34;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
}

void sub_10009C528()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC4Maps25PlaceSummaryTemplateEntry_lines);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return;
  v13 = v1 + 32;
  swift_bridgeObjectRetain(v1);
  v3 = 0;
  while (v3 < *(_QWORD *)(v1 + 16))
  {
    v4 = *(_QWORD *)(v13 + 16 * v3);
    if ((unint64_t)v4 >> 62)
    {
      if (v4 < 0)
        v12 = *(_QWORD *)(v13 + 16 * v3);
      else
        v12 = v4 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(*(_QWORD *)(v13 + 16 * v3), 2);
      v5 = _CocoaArrayWrapper.endIndex.getter(v12);
      swift_bridgeObjectRelease(v4);
      if (!v5)
        goto LABEL_3;
    }
    else
    {
      v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(*(_QWORD *)(v13 + 16 * v3));
      if (!v5)
        goto LABEL_3;
    }
    v6 = v4 & 0xC000000000000001;
    if ((v4 & 0xC000000000000001) != 0)
    {
      specialized _ArrayBuffer._getElementSlowPath(_:)(0, v4);
    }
    else
    {
      if (!*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_40;
      swift_retain();
    }
    v7 = sub_100142F18(8);
    swift_release();
    if ((v7 & 1) != 0)
      goto LABEL_33;
    if (v5 != 1)
    {
      if (v6)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)(1, v4);
      }
      else
      {
        if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
          goto LABEL_41;
        swift_retain();
      }
      v8 = sub_100142F18(8);
      swift_release();
      if ((v8 & 1) != 0)
      {
LABEL_33:
        swift_bridgeObjectRelease(v1);
        v1 = v4;
LABEL_34:
        swift_bridgeObjectRelease(v1);
        return;
      }
      v9 = 0;
      while (v5 - 2 != v9)
      {
        v10 = v9 + 2;
        if (v6)
        {
          specialized _ArrayBuffer._getElementSlowPath(_:)(v9 + 2, v4);
          if (__OFADD__(v10, 1))
            goto LABEL_37;
        }
        else
        {
          if (v10 >= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_38;
          swift_retain();
          if (__OFADD__(v10, 1))
          {
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            goto LABEL_39;
          }
        }
        v11 = sub_100142F18(8);
        swift_release();
        ++v9;
        if ((v11 & 1) != 0)
          goto LABEL_33;
      }
    }
LABEL_3:
    ++v3;
    swift_bridgeObjectRelease(v4);
    if (v3 == v2)
      goto LABEL_34;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
}

void sub_10009C7A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC4Maps25PlaceSummaryTemplateEntry_lines);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return;
  v13 = v1 + 32;
  swift_bridgeObjectRetain(v1);
  v3 = 0;
  while (v3 < *(_QWORD *)(v1 + 16))
  {
    v4 = *(_QWORD *)(v13 + 16 * v3);
    if ((unint64_t)v4 >> 62)
    {
      if (v4 < 0)
        v12 = *(_QWORD *)(v13 + 16 * v3);
      else
        v12 = v4 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(*(_QWORD *)(v13 + 16 * v3), 2);
      v5 = _CocoaArrayWrapper.endIndex.getter(v12);
      swift_bridgeObjectRelease(v4);
      if (!v5)
        goto LABEL_3;
    }
    else
    {
      v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(*(_QWORD *)(v13 + 16 * v3));
      if (!v5)
        goto LABEL_3;
    }
    v6 = v4 & 0xC000000000000001;
    if ((v4 & 0xC000000000000001) != 0)
    {
      specialized _ArrayBuffer._getElementSlowPath(_:)(0, v4);
    }
    else
    {
      if (!*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_40;
      swift_retain();
    }
    v7 = sub_100142F18(37);
    swift_release();
    if ((v7 & 1) != 0)
      goto LABEL_33;
    if (v5 != 1)
    {
      if (v6)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)(1, v4);
      }
      else
      {
        if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
          goto LABEL_41;
        swift_retain();
      }
      v8 = sub_100142F18(37);
      swift_release();
      if ((v8 & 1) != 0)
      {
LABEL_33:
        swift_bridgeObjectRelease(v1);
        v1 = v4;
LABEL_34:
        swift_bridgeObjectRelease(v1);
        return;
      }
      v9 = 0;
      while (v5 - 2 != v9)
      {
        v10 = v9 + 2;
        if (v6)
        {
          specialized _ArrayBuffer._getElementSlowPath(_:)(v9 + 2, v4);
          if (__OFADD__(v10, 1))
            goto LABEL_37;
        }
        else
        {
          if (v10 >= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_38;
          swift_retain();
          if (__OFADD__(v10, 1))
          {
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            goto LABEL_39;
          }
        }
        v11 = sub_100142F18(37);
        swift_release();
        ++v9;
        if ((v11 & 1) != 0)
          goto LABEL_33;
      }
    }
LABEL_3:
    ++v3;
    swift_bridgeObjectRelease(v4);
    if (v3 == v2)
      goto LABEL_34;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
}

void sub_10009CA18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[13];
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC4Maps25PlaceSummaryTemplateEntry_lines);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return;
  v11 = v1 + 32;
  swift_bridgeObjectRetain(v1);
  v3 = 0;
  while (1)
  {
    if (v3 >= *(_QWORD *)(v1 + 16))
      goto LABEL_25;
    v4 = *(_QWORD *)(v11 + 16 * v3);
    if ((unint64_t)v4 >> 62)
      break;
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(*(_QWORD *)(v11 + 16 * v3));
    if (v5)
      goto LABEL_7;
LABEL_3:
    ++v3;
    swift_bridgeObjectRelease(v4);
    if (v3 == v2)
    {
      swift_bridgeObjectRelease(v1);
      return;
    }
  }
  if (v4 < 0)
    v10 = *(_QWORD *)(v11 + 16 * v3);
  else
    v10 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain_n(*(_QWORD *)(v11 + 16 * v3), 2);
  v5 = _CocoaArrayWrapper.endIndex.getter(v10);
  swift_bridgeObjectRelease(v4);
  if (!v5)
    goto LABEL_3;
LABEL_7:
  v6 = 4;
  while (1)
  {
    v7 = v6 - 4;
    if ((v4 & 0xC000000000000001) == 0)
      break;
    specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, v4);
    v8 = v6 - 3;
    if (__OFADD__(v7, 1))
      goto LABEL_24;
LABEL_13:
    sub_100142DB0(v12);
    swift_release();
    sub_10009D9D8((uint64_t)v12, (uint64_t)&v13);
    v9 = v14;
    if (v14)
    {
      swift_bridgeObjectRelease(v1);
      swift_bridgeObjectRelease(v4);
      swift_bridgeObjectRetain(v9);
      sub_10009DA20((uint64_t)v12);
      return;
    }
    ++v6;
    if (v8 == v5)
      goto LABEL_3;
  }
  swift_retain();
  v8 = v6 - 3;
  if (!__OFADD__(v7, 1))
    goto LABEL_13;
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
}

void sub_10009CC24(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  id v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;

  v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC4Maps25PlaceSummaryTemplateEntry_lines);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v7 = OBJC_IVAR____TtC4Maps20PlaceSummaryMetadata_serverOverrides;
    v8 = v3 + 32;
    swift_bridgeObjectRetain(*(_QWORD *)(v2 + OBJC_IVAR____TtC4Maps25PlaceSummaryTemplateEntry_lines));
    v9 = 0;
    v32 = a2;
    v33 = v3;
    v30 = v4;
    v31 = a1;
    v28 = v3 + 32;
    v29 = v7;
    while (v9 < *(_QWORD *)(v3 + 16))
    {
      v10 = *(_QWORD *)(v8 + 16 * v9);
      v34 = v9;
      if ((unint64_t)v10 >> 62)
      {
        if (v10 < 0)
          v27 = *(_QWORD *)(v8 + 16 * v9);
        else
          v27 = v10 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain_n(v10, 2);
        v11 = _CocoaArrayWrapper.endIndex.getter(v27);
        swift_bridgeObjectRelease(v10);
        if (v11)
        {
LABEL_6:
          v12 = 0;
          v42 = v10 & 0xC000000000000001;
          v40 = v10 & 0xFFFFFFFFFFFFFF8;
          while (1)
          {
LABEL_7:
            if (v42)
            {
              specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v10);
              v13 = __OFADD__(v12++, 1);
              if (v13)
                goto LABEL_49;
            }
            else
            {
              if (v12 >= *(_QWORD *)(v40 + 16))
                goto LABEL_50;
              swift_retain();
              v13 = __OFADD__(v12++, 1);
              if (v13)
              {
LABEL_49:
                __break(1u);
LABEL_50:
                __break(1u);
                goto LABEL_51;
              }
            }
            if ((sub_100142F18(15) & 1) != 0)
            {
              v14 = *(_QWORD *)(a2 + v7);
              if (v14)
              {
                if (a1)
                {
                  v36 = *(_QWORD *)(v14 + 16);
                  if (v36)
                    break;
                }
              }
            }
            swift_release();
            if (v12 == v11)
              goto LABEL_39;
          }
          v39 = v14 + 32;
          swift_bridgeObjectRetain(v14);
          v15 = a1;
          v16 = 0;
          v37 = v14;
          v38 = v10;
          v35 = v11;
          while (v16 < *(_QWORD *)(v14 + 16))
          {
            v17 = (uint64_t *)(v39 + 16 * v16);
            v19 = *v17;
            v18 = v17[1];
            v41 = v18;
            if ((unint64_t)*v17 >> 62)
            {
              if (v19 < 0)
                v26 = *v17;
              else
                v26 = v19 & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain_n(v19, 3);
              swift_bridgeObjectRetain(v18);
              v20 = _CocoaArrayWrapper.endIndex.getter(v26);
              swift_bridgeObjectRelease(v19);
              if (v20)
              {
LABEL_23:
                v21 = 4;
                while (1)
                {
                  v22 = (v19 & 0xC000000000000001) != 0
                      ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v21 - 4, v19)
                      : *(id *)(v19 + 8 * v21);
                  v23 = v22;
                  v24 = v21 - 3;
                  if (__OFADD__(v21 - 4, 1))
                    break;
                  v25 = objc_msgSend(v22, "isEqualToGEOMapItemIdentifier:", v15);

                  if ((v25 & 1) != 0)
                  {
                    swift_bridgeObjectRelease(v33);
                    swift_bridgeObjectRelease(v38);
                    swift_release();
                    swift_bridgeObjectRelease(v41);
                    swift_bridgeObjectRelease(v37);
                    swift_bridgeObjectRelease_n(v19, 2);

                    return;
                  }
                  ++v21;
                  if (v24 == v20)
                    goto LABEL_19;
                }
                __break(1u);
                goto LABEL_49;
              }
            }
            else
            {
              v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain_n(v19, 2);
              swift_bridgeObjectRetain(v18);
              if (v20)
                goto LABEL_23;
            }
LABEL_19:
            ++v16;
            swift_bridgeObjectRelease_n(v19, 2);
            swift_bridgeObjectRelease(v41);
            v11 = v35;
            v14 = v37;
            v10 = v38;
            if (v16 == v36)
            {
              swift_release();

              swift_bridgeObjectRelease(v37);
              a2 = v32;
              v3 = v33;
              v4 = v30;
              a1 = v31;
              v8 = v28;
              v7 = v29;
              if (v12 != v35)
                goto LABEL_7;
              goto LABEL_39;
            }
          }
LABEL_51:
          __break(1u);
          break;
        }
      }
      else
      {
        v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v10);
        if (v11)
          goto LABEL_6;
      }
LABEL_39:
      v9 = v34 + 1;
      swift_bridgeObjectRelease(v10);
      if (v34 + 1 == v4)
      {
        swift_bridgeObjectRelease(v3);
        return;
      }
    }
    __break(1u);
  }
}

uint64_t getEnumTagSinglePayload for PlaceSummaryTemplateEntry.AccessoryEntity(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t result;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
  {
    v6 = *a1;
    if (v6 >= 2)
    {
      v7 = (v6 + 2147483646) & 0x7FFFFFFF;
      result = v7 - 7;
      if (v7 > 7)
        return result;
    }
    return 0;
  }
  v2 = a2 + 9;
  if (a2 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if (v2 >> 8 < 0xFF)
    v3 = 1;
  if (v2 >= 0x100)
    v4 = v3;
  else
    v4 = 0;
  return ((uint64_t (*)(void))((char *)&loc_10009D04C + 4 * byte_100E28D80[v4]))();
}

uint64_t storeEnumTagSinglePayload for PlaceSummaryTemplateEntry.AccessoryEntity(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 9;
  if (a3 + 9 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xF7)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_10009D0F8 + 4 * byte_100E28D8A[v5]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_10009D12C + 4 * byte_100E28D85[v5]))();
}

uint64_t sub_10009D12C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009D134(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10009D13CLL);
  return result;
}

uint64_t sub_10009D148(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10009D150);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_10009D154(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009D15C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009D168(unsigned __int8 *a1)
{
  unsigned int v1;
  BOOL v2;
  int v3;

  v1 = *a1;
  v2 = v1 >= 2;
  v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2)
    return (v3 + 1);
  else
    return 0;
}

_BYTE *sub_10009D184(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 1;
  return result;
}

ValueMetadata *type metadata accessor for PlaceSummaryTemplateEntry.AccessoryEntity()
{
  return &type metadata for PlaceSummaryTemplateEntry.AccessoryEntity;
}

uint64_t getEnumTagSinglePayload for PlaceSummaryTemplateEntry.PlatformType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PlaceSummaryTemplateEntry.PlatformType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10009D288 + 4 * byte_100E28D94[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10009D2BC + 4 * byte_100E28D8F[v4]))();
}

uint64_t sub_10009D2BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009D2C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10009D2CCLL);
  return result;
}

uint64_t sub_10009D2D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10009D2E0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10009D2E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009D2EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PlaceSummaryTemplateEntry.PlatformType()
{
  return &type metadata for PlaceSummaryTemplateEntry.PlatformType;
}

unint64_t sub_10009D30C()
{
  unint64_t result;

  result = qword_101498448;
  if (!qword_101498448)
  {
    result = swift_getWitnessTable(byte_100E28E18, &type metadata for PlaceSummaryTemplateEntry.PlatformType);
    atomic_store(result, (unint64_t *)&qword_101498448);
  }
  return result;
}

id sub_10009D350(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  objc_class *v9;
  _BYTE *v10;
  _BYTE *v11;
  objc_super v13;

  v8 = a1;
  v9 = (objc_class *)type metadata accessor for PlaceSummaryTemplateEntry();
  v10 = objc_allocWithZone(v9);
  v11 = v10;
  if (v8 && *(_QWORD *)(a2 + 16))
  {
    v10[OBJC_IVAR____TtC4Maps25PlaceSummaryTemplateEntry_platformType] = a1;
    *(_QWORD *)&v10[OBJC_IVAR____TtC4Maps25PlaceSummaryTemplateEntry_lines] = a2;
    *(_QWORD *)&v10[OBJC_IVAR____TtC4Maps25PlaceSummaryTemplateEntry_trailingEntities] = a3;
    *(_QWORD *)&v10[OBJC_IVAR____TtC4Maps25PlaceSummaryTemplateEntry_leadingEntities] = a4;
    v13.receiver = v10;
    v13.super_class = v9;
    return objc_msgSendSuper2(&v13, "init");
  }
  else
  {
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a2);
    swift_deallocPartialClassInstance(v11, v9, 40, 7);
    return 0;
  }
}

id sub_10009D430(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  unsigned int v10;
  _BOOL4 v11;
  id result;
  id v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  unsigned __int8 v25;
  unsigned __int8 v26;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  char *v32;
  void (*v33)(char *, uint64_t);
  char *v34;
  char *v35;
  char *v36;
  _QWORD *v37;
  unsigned int v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  id v44;
  _QWORD *v45;
  id v46;
  void *v47;
  unsigned int v48;
  _BOOL4 v49;
  void (*v50)(char *, uint64_t);
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  id v55;
  _QWORD *v56;
  void *v57;
  _BYTE v58[32];
  _OWORD v59[2];
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  id v63;
  _BYTE v64[32];
  __int128 v65;
  __int128 v66;
  uint64_t v67;

  v2 = type metadata accessor for NSFastEnumerationIterator(0);
  v53 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v6 = __chkstk_darwin(v5).n128_u64[0];
  v8 = (char *)&v46 - v7;
  v9 = objc_msgSend(a1, "platformType", v6);
  if (v9 <= 3)
    v10 = v9;
  else
    v10 = 0;
  v11 = (v9 & 0xF) == 0 || v9 > 3;
  result = objc_msgSend(a1, "lines");
  if (result)
  {
    v49 = v11;
    v48 = v10;
    v13 = result;
    NSArray.makeIterator()();

    v14 = sub_1000125FC();
    dispatch thunk of IteratorProtocol.next()(&v66, v2, v14);
    if (v67)
    {
      v46 = v13;
      v47 = a1;
      v52 = (char *)&type metadata for Any + 8;
      v56 = _swiftEmptyArrayStorage;
      v51 = v8;
      while (1)
      {
        sub_10000BE60(&v66, &v65);
        sub_100011E20((uint64_t)&v65, (uint64_t)v64);
        v15 = sub_10000E4BC(0, &qword_101498450, GEOPDPlaceSummaryLayoutLine_ptr);
        swift_dynamicCast(&v63, v64, v52, v15, 7);
        v16 = v63;
        result = objc_msgSend(v63, "units");
        if (!result)
          break;
        v62 = (unint64_t)_swiftEmptyArrayStorage;
        v17 = result;
        NSArray.makeIterator()();
        v55 = v17;

        while (1)
        {
          dispatch thunk of IteratorProtocol.next()(&v60, v2, v14);
          if (!v61)
            break;
          sub_10000BE60(&v60, v59);
          type metadata accessor for PlaceSummaryUnit();
          sub_100011E20((uint64_t)v59, (uint64_t)v58);
          v18 = sub_10000E4BC(0, &qword_101498458, GEOPDPlaceSummaryLayoutUnit_ptr);
          swift_dynamicCast(&v57, v58, (char *)&type metadata for Any + 8, v18, 7);
          v19 = sub_100142F7C(v57);
          v20 = sub_10000BEAC(v59);
          if (v19)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v20);
            v22 = *(_QWORD *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v21 = *(_QWORD *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v22 >= v21 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
            v23 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v19);
            specialized Array._endMutation()(v23);
          }
        }
        v24 = *(void (**)(char *, uint64_t))(v53 + 8);
        v24(v4, v2);
        v54 = v62;

        v25 = objc_msgSend(v16, "isDynamicContextLine");
        v26 = objc_msgSend(v16, "shouldOmitSpacingDelimiter");

        sub_10000BEAC(&v65);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v56);
        v50 = v24;
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          v28 = v56;
        else
          v28 = sub_1000A718C(0, v56[2] + 1, 1, v56);
        v30 = v28[2];
        v29 = v28[3];
        if (v30 >= v29 >> 1)
          v28 = sub_1000A718C((_QWORD *)(v29 > 1), v30 + 1, 1, v28);
        v28[2] = v30 + 1;
        v56 = v28;
        v31 = &v28[2 * v30];
        v31[4] = v54;
        *((_BYTE *)v31 + 40) = v25;
        *((_BYTE *)v31 + 41) = v26;
        v32 = v51;
        dispatch thunk of IteratorProtocol.next()(&v66, v2, v14);
        if (!v67)
        {
          a1 = v47;
          v13 = v46;
          v50(v32, v2);
          goto LABEL_25;
        }
      }
      __break(1u);
      goto LABEL_46;
    }
    v33 = *(void (**)(char *, uint64_t))(v53 + 8);
    v56 = _swiftEmptyArrayStorage;
    v33(v8, v2);
LABEL_25:

    v34 = (char *)objc_msgSend(a1, "trailingEntityTypeOrdersCount");
    if (v34)
    {
      v35 = v34;
      v36 = 0;
      v37 = _swiftEmptyArrayStorage;
      do
      {
        v38 = objc_msgSend(a1, "trailingEntityTypeOrderAtIndex:", v36, v46, v47) - 1;
        if (v38 < 0xB && ((0x7BFu >> v38) & 1) != 0)
        {
          v39 = byte_100E28E42[v38];
          if ((swift_isUniquelyReferenced_nonNull_native(v37) & 1) == 0)
            v37 = sub_1000A7094(0, v37[2] + 1, 1, v37);
          v41 = v37[2];
          v40 = v37[3];
          if (v41 >= v40 >> 1)
            v37 = sub_1000A7094((_QWORD *)(v40 > 1), v41 + 1, 1, v37);
          v37[2] = v41 + 1;
          *((_BYTE *)v37 + v41 + 32) = v39;
        }
        ++v36;
      }
      while (v35 != v36);
    }
    else
    {
      v37 = _swiftEmptyArrayStorage;
    }
    if (v49)
    {

      v42 = v56;
    }
    else
    {
      v43 = v56;
      if (v56[2])
      {
        if (!v37[2])
        {
          swift_bridgeObjectRelease(v37);
          v43 = v56;
          v37 = 0;
        }
        v44 = sub_10009D350(v48, (uint64_t)v43, (uint64_t)v37, 0);

        return v44;
      }
      v45 = v56;

      v42 = v45;
    }
    swift_bridgeObjectRelease(v42);
    swift_bridgeObjectRelease(v37);
    return 0;
  }
LABEL_46:
  __break(1u);
  return result;
}

uint64_t sub_10009D9D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008B04(&qword_101498460);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10009DA20(uint64_t a1)
{
  sub_10009DA70(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(void **)(a1 + 96));
  return a1;
}

void sub_10009DA70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a8);
    swift_bridgeObjectRelease(a11);

  }
}

BOOL InfoCardButtonVisibility.init(rawValue:)(uint64_t a1)
{
  return a1 && a1 == 1;
}

uint64_t InfoCardButtonConfiguration.type.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC4Maps27InfoCardButtonConfiguration_type);
}

uint64_t InfoCardButtonConfiguration.shouldBlur.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC4Maps27InfoCardButtonConfiguration_shouldBlur);
}

void *InfoCardButtonConfiguration.tintColor.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC4Maps27InfoCardButtonConfiguration_tintColor);
  v2 = v1;
  return v1;
}

uint64_t InfoCardButtonConfiguration.visibility.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC4Maps27InfoCardButtonConfiguration_visibility);
}

uint64_t InfoCardButtonConfiguration.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t ObjectType;
  id v4;
  char v5;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  char *v13;
  _BYTE v14[24];
  uint64_t v15;

  ObjectType = swift_getObjectType(v1);
  sub_1000110D4(a1, (uint64_t)v14);
  if (v15)
  {
    if ((swift_dynamicCast(&v13, v14, (char *)&type metadata for Any + 8, ObjectType, 6) & 1) != 0)
    {
      v4 = v13;
      if (*(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps27InfoCardButtonConfiguration_type) == *(_QWORD *)&v13[OBJC_IVAR____TtC4Maps27InfoCardButtonConfiguration_type]
        && *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC4Maps27InfoCardButtonConfiguration_shouldBlur) == v13[OBJC_IVAR____TtC4Maps27InfoCardButtonConfiguration_shouldBlur])
      {
        v7 = *(void **)(v1 + OBJC_IVAR____TtC4Maps27InfoCardButtonConfiguration_tintColor);
        v8 = *(void **)&v13[OBJC_IVAR____TtC4Maps27InfoCardButtonConfiguration_tintColor];
        if (!v7)
        {
          v12 = v8;

          if (!v8)
          {
            v5 = 1;
            return v5 & 1;
          }

          goto LABEL_7;
        }
        if (v8)
        {
          sub_10009DE50();
          v9 = v7;
          v10 = v8;
          v11 = v9;
          v5 = static NSObject.== infix(_:_:)(v11, v10);

          return v5 & 1;
        }
      }

    }
  }
  else
  {
    sub_10000C180((uint64_t)v14);
  }
LABEL_7:
  v5 = 0;
  return v5 & 1;
}

void InfoCardButtonConfiguration.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("Maps.InfoCardButtonConfiguration", 32, "init()", 6, 0);
  __break(1u);
}

unint64_t sub_10009DE50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101493C20;
  if (!qword_101493C20)
  {
    v1 = objc_opt_self(UIColor);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_101493C20);
  }
  return result;
}

unint64_t sub_10009DE90()
{
  unint64_t result;

  result = qword_101498488;
  if (!qword_101498488)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for InfoCardButtonVisibility, &type metadata for InfoCardButtonVisibility);
    atomic_store(result, (unint64_t *)&qword_101498488);
  }
  return result;
}

ValueMetadata *type metadata accessor for InfoCardButtonVisibility()
{
  return &type metadata for InfoCardButtonVisibility;
}

uint64_t type metadata accessor for InfoCardButtonConfiguration()
{
  return objc_opt_self(_TtC4Maps27InfoCardButtonConfiguration);
}

unint64_t sub_10009DF08()
{
  unint64_t result;

  result = qword_1014984B8;
  if (!qword_1014984B8)
  {
    result = swift_getWitnessTable("\tk7", &type metadata for AvoidHillsInWalkingEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_1014984B8);
  }
  return result;
}

uint64_t sub_10009DF4C()
{
  return sub_100010D70(&qword_1014984C0, &qword_1014984C8, (const char *)&protocol conformance descriptor for _IntentUpdatableEntityProperty<A, B, C>);
}

uint64_t sub_10009DF78()
{
  uint64_t v0;
  __n128 v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[2];

  v0 = sub_100008B04(&qword_101494370);
  v1 = __chkstk_darwin(v0);
  v3 = (char *)v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0, v1);
  v4 = *(_QWORD *)(v23[0] - 8);
  __chkstk_darwin(v23[0]);
  v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for String.LocalizationValue(0, v8);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for LocalizedStringResource(0, v12);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for TypeDisplayRepresentation(0, v17);
  sub_10000E930(v20, qword_1014D4800);
  sub_10000E918(v20, (uint64_t)qword_1014D4800);
  v21 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000016, 0x8000000100E45B90);
  static Locale.current.getter(v21);
  (*(void (**)(char *, _QWORD, _QWORD))(v4 + 104))(v6, enum case for LocalizedStringResource.BundleDescription.main(_:), v23[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v10, v6, "A setting to avoid hills when walking", 37, 2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v3, 1, 1, v15);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v19, v3);
}

uint64_t sub_10009E18C(__n128 a1)
{
  uint64_t v1;

  v1 = type metadata accessor for LocalizedStringResource(0, a1);
  sub_10000E930(v1, qword_1014D4818);
  sub_10000E918(v1, (uint64_t)qword_1014D4818);
  return LocalizedStringResource.init(stringLiteral:)(0xD00000000000001DLL, 0x8000000100E45CD0);
}

uint64_t sub_10009E1EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_100008B04(&qword_1014964F0);
  sub_10000E930(v0, qword_1014D4830);
  v1 = sub_10000E918(v0, (uint64_t)qword_1014D4830);
  IntentDescription.init(stringLiteral:)(0xD000000000000041, 0x8000000100E45C80);
  v2 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 0, 1, v2);
}

uint64_t sub_10009E274()
{
  uint64_t result;

  result = swift_getKeyPath(&unk_100E29480);
  qword_1014D4848 = result;
  return result;
}

uint64_t sub_10009E298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  return swift_task_switch(sub_10009E2B4, 0, 0);
}

uint64_t sub_10009E2B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v0 + 24) = v1;
  *(_QWORD *)(v0 + 72) = v1;
  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 146));
  *(_BYTE *)(v0 + 145) = *(_BYTE *)(v0 + 146);
  if (qword_101490D38 != -1)
    swift_once(&qword_101490D38, sub_10009E274);
  v2 = qword_1014D4848;
  *(_QWORD *)(v0 + 80) = qword_1014D4848;
  v3 = async function pointer to AppEntity._setValue<A, B, C>(_:for:)[1];
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  *(_QWORD *)(v0 + 88) = v4;
  v5 = sub_100010D70(&qword_1014985C8, &qword_1014985D0, (const char *)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  *(_QWORD *)(v0 + 96) = v5;
  *v4 = v0;
  v4[1] = sub_10009E3B4;
  return AppEntity._setValue<A, B, C>(_:for:)(v0 + 145, v2, &type metadata for Bool, v5);
}

uint64_t sub_10009E3B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  swift_release();
  swift_release();
  if (v0)
    v3 = sub_100072D78;
  else
    v3 = sub_10009E434;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10009E434()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  IntentParameter.wrappedValue.getter(v0 + 5);
  v1 = v0[5];
  v0[4] = v1;
  v2 = qword_1014D4848;
  v0[14] = v1;
  v0[15] = v2;
  v3 = async function pointer to AppEntity._value<A, B>(for:)[1];
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  v0[16] = v4;
  *v4 = v0;
  v4[1] = sub_100072CA0;
  return AppEntity._value<A, B>(for:)(v0 + 18, v2, v0[12]);
}

double sub_10009E4C8()
{
  double result;

  if (qword_101490D38 != -1)
    swift_once(&qword_101490D38, sub_10009E274);
  *(_QWORD *)&result = swift_retain().n128_u64[0];
  return result;
}

unint64_t sub_10009E50C()
{
  unint64_t result;

  result = qword_1014984D0;
  if (!qword_1014984D0)
  {
    result = swift_getWitnessTable(byte_100E29040, &type metadata for AvoidHillsInWalkingEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_1014984D0);
  }
  return result;
}

unint64_t sub_10009E554()
{
  unint64_t result;

  result = qword_1014984D8;
  if (!qword_1014984D8)
  {
    result = swift_getWitnessTable(byte_100E29068, &type metadata for AvoidHillsInWalkingEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_1014984D8);
  }
  return result;
}

uint64_t sub_10009E598(uint64_t a1)
{
  return *(_QWORD *)(swift_getOpaqueTypeConformance2(a1, &unk_101067484, 1) + 8);
}

uint64_t sub_10009E5BC(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_10009DF08();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t sub_10009E5FC@<X0>(uint64_t a1@<X8>)
{
  return sub_100073694(&qword_101490D28, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1014D4818, (uint64_t)sub_10009E18C, a1);
}

uint64_t sub_10009E620@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_101490D30 != -1)
    swift_once(&qword_101490D30, sub_10009E1EC);
  v2 = sub_100008B04(&qword_1014964F0);
  v3 = sub_10000E918(v2, (uint64_t)qword_1014D4830);
  return sub_1000742A4(v3, a1);
}

uint64_t sub_10009E680(uint64_t a1)
{
  _OWORD *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = swift_task_alloc(dword_1014985E4);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_10000DD08;
  *(_OWORD *)(v4 + 56) = *v1;
  *(_QWORD *)(v4 + 48) = a1;
  return swift_task_switch(sub_10009E2B4, 0, 0);
}

uint64_t sub_10009E6E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_10009F1D0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_10009E70C()
{
  return 0xD00000000000002ALL;
}

unint64_t sub_10009E72C()
{
  unint64_t result;

  result = qword_1014984E8;
  if (!qword_1014984E8)
  {
    result = swift_getWitnessTable(byte_100E290B4, &type metadata for AvoidHillsInWalkingEntity);
    atomic_store(result, (unint64_t *)&qword_1014984E8);
  }
  return result;
}

unint64_t sub_10009E774()
{
  unint64_t result;

  result = qword_1014984F0;
  if (!qword_1014984F0)
  {
    result = swift_getWitnessTable(byte_100E292AC, &type metadata for AvoidHillsInWalkingQuery);
    atomic_store(result, (unint64_t *)&qword_1014984F0);
  }
  return result;
}

unint64_t sub_10009E7BC()
{
  unint64_t result;

  result = qword_1014984F8;
  if (!qword_1014984F8)
  {
    result = swift_getWitnessTable(byte_100E2910C, &type metadata for AvoidHillsInWalkingEntity);
    atomic_store(result, (unint64_t *)&qword_1014984F8);
  }
  return result;
}

unint64_t sub_10009E804()
{
  unint64_t result;

  result = qword_101498500;
  if (!qword_101498500)
  {
    result = swift_getWitnessTable("}j7", &type metadata for AvoidHillsInWalkingEntity);
    atomic_store(result, (unint64_t *)&qword_101498500);
  }
  return result;
}

unint64_t sub_10009E84C()
{
  unint64_t result;

  result = qword_101498508;
  if (!qword_101498508)
  {
    result = swift_getWitnessTable("ej7", &type metadata for AvoidHillsInWalkingEntity);
    atomic_store(result, (unint64_t *)&qword_101498508);
  }
  return result;
}

unint64_t sub_10009E894()
{
  unint64_t result;

  result = qword_101498510;
  if (!qword_101498510)
  {
    result = swift_getWitnessTable(byte_100E29324, &type metadata for AvoidHillsInWalkingQuery);
    atomic_store(result, (unint64_t *)&qword_101498510);
  }
  return result;
}

uint64_t sub_10009E8D8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_10009E8F0, 0, 0);
}

uint64_t sub_10009E8F0()
{
  uint64_t v0;
  _BYTE *v1;
  id v2;
  id v3;

  v1 = *(_BYTE **)(v0 + 16);
  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v3 = objc_msgSend(objc_allocWithZone((Class)WalkPreferences), "initWithDefaults:", v2);

  LOBYTE(v2) = objc_msgSend(v3, "avoidHills");
  *v1 = (_BYTE)v2;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009E98C(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 16) = *a2;
  return swift_task_switch(sub_10009E9A8, 0, 0);
}

uint64_t sub_10009E9A8()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  int BOOL;

  v1 = *(unsigned __int8 *)(v0 + 16);
  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v3 = objc_msgSend(objc_allocWithZone((Class)WalkPreferences), "initWithDefaults:", v2);

  objc_msgSend(v3, "setAvoidHills:", v1);
  objc_msgSend(v3, "synchronize");
  BOOL = GEOConfigGetBOOL(MapsConfig_PreferencesUniqueEntityDidUpdate, off_1014B5518);
  GEOConfigSetBOOL(MapsConfig_PreferencesUniqueEntityDidUpdate, off_1014B5518, BOOL ^ 1u);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_10009EA7C()
{
  unint64_t result;

  result = qword_101498518;
  if (!qword_101498518)
  {
    result = swift_getWitnessTable(byte_100E291AC, &type metadata for AvoidHillsInWalkingEntity);
    atomic_store(result, (unint64_t *)&qword_101498518);
  }
  return result;
}

unint64_t sub_10009EAC4()
{
  unint64_t result;

  result = qword_101498520;
  if (!qword_101498520)
  {
    result = swift_getWitnessTable("%j7", &type metadata for AvoidHillsInWalkingEntity);
    atomic_store(result, (unint64_t *)&qword_101498520);
  }
  return result;
}

unint64_t sub_10009EB0C()
{
  unint64_t result;

  result = qword_101498528;
  if (!qword_101498528)
  {
    result = swift_getWitnessTable("\rj7", &type metadata for AvoidHillsInWalkingEntity);
    atomic_store(result, (unint64_t *)&qword_101498528);
  }
  return result;
}

unint64_t sub_10009EB54()
{
  unint64_t result;

  result = qword_101498530;
  if (!qword_101498530)
  {
    result = swift_getWitnessTable(byte_100E29254, &type metadata for AvoidHillsInWalkingEntity);
    atomic_store(result, (unint64_t *)&qword_101498530);
  }
  return result;
}

uint64_t sub_10009EB98@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = sub_10009ED60();
  result = UniqueAppEntity<>.id.getter(a1, v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_10009EBD4@<X0>(uint64_t a1@<X8>)
{
  return sub_100073694(&qword_101490D20, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_1014D4800, (uint64_t)sub_10009DF78, a1);
}

uint64_t sub_10009EBF8()
{
  return sub_100010D70(&qword_101498538, &qword_101498540, (const char *)&protocol conformance descriptor for EmptyResolverSpecification<A>);
}

uint64_t sub_10009EC24(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10009E72C();
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_10009EC60()
{
  unint64_t result;

  result = qword_101498548;
  if (!qword_101498548)
  {
    result = swift_getWitnessTable(byte_100E29284, &type metadata for AvoidHillsInWalkingEntity);
    atomic_store(result, (unint64_t *)&qword_101498548);
  }
  return result;
}

uint64_t sub_10009ECA4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10009ED60();
  return UniqueAppEntity.displayRepresentation.getter(a1, v2);
}

uint64_t sub_10009ECDC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10009EB54();
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_10009ED18()
{
  unint64_t result;

  result = qword_101498550;
  if (!qword_101498550)
  {
    result = swift_getWitnessTable(byte_100E292EC, &type metadata for AvoidHillsInWalkingQuery);
    atomic_store(result, (unint64_t *)&qword_101498550);
  }
  return result;
}

unint64_t sub_10009ED60()
{
  unint64_t result;

  result = qword_101498558[0];
  if (!qword_101498558[0])
  {
    result = swift_getWitnessTable(byte_100E29084, &type metadata for AvoidHillsInWalkingEntity);
    atomic_store(result, qword_101498558);
  }
  return result;
}

uint64_t sub_10009EDA4(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 16) = a1;
  v3 = type metadata accessor for LocalizedStringResource(0, a2);
  *(_QWORD *)(v2 + 24) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10009EDFC, 0, 0);
}

uint64_t sub_10009EDFC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  sub_100008B04(&qword_1014984C8);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000016, 0x8000000100E45B90);
  v3 = sub_100010D70(&qword_1014985C8, &qword_1014985D0, (const char *)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  *v2 = _IntentUpdatableEntityProperty<>.init(title:get:set:intent:)(v1, &unk_1014985B8, 0, &unk_1014985C0, 0, &type metadata for AvoidHillsInWalkingEntity.UpdateIntent_value, v3);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009EEB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to UniqueAppEntityQuery.allEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_10009E774();
  *v4 = v2;
  v4[1] = sub_100073A34;
  return UniqueAppEntityQuery.allEntities()(a2, v5);
}

unint64_t sub_10009EF24()
{
  unint64_t result;

  result = qword_101498570;
  if (!qword_101498570)
  {
    result = swift_getWitnessTable("}i7", &type metadata for AvoidHillsInWalkingQuery);
    atomic_store(result, (unint64_t *)&qword_101498570);
  }
  return result;
}

unint64_t sub_10009EF6C()
{
  unint64_t result;

  result = qword_101498578[0];
  if (!qword_101498578[0])
  {
    result = swift_getWitnessTable("Ug7", &type metadata for AvoidHillsInWalkingQuery);
    atomic_store(result, qword_101498578);
  }
  return result;
}

uint64_t sub_10009EFB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to UniqueAppEntityQuery.entities(for:)[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_10009E774();
  *v5 = v2;
  v5[1] = sub_100073B94;
  return UniqueAppEntityQuery.entities(for:)(a1, a2, v6);
}

uint64_t sub_10009F01C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to UniqueAppEntityQuery.suggestedEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_10009E774();
  *v4 = v2;
  v4[1] = sub_1000742EC;
  return UniqueAppEntityQuery.suggestedEntities()(a2, v5);
}

unint64_t sub_10009F088()
{
  unint64_t result;

  result = qword_101498590;
  if (!qword_101498590)
  {
    result = swift_getWitnessTable("=g7", &type metadata for AvoidHillsInWalkingQuery);
    atomic_store(result, (unint64_t *)&qword_101498590);
  }
  return result;
}

unint64_t sub_10009F0D0()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_101498598;
  if (!qword_101498598)
  {
    v1 = sub_10000E5D4(qword_1014985A0);
    v2 = sub_10009EB0C();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_101498598);
  }
  return result;
}

uint64_t sub_10009F134(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_10009E894();
  *v5 = v2;
  v5[1] = sub_10000C0E0;
  return EntityQuery.results()(a1, a2, v6);
}

ValueMetadata *type metadata accessor for AvoidHillsInWalkingQuery()
{
  return &type metadata for AvoidHillsInWalkingQuery;
}

ValueMetadata *type metadata accessor for AvoidHillsInWalkingEntity.UpdateIntent_value()
{
  return &type metadata for AvoidHillsInWalkingEntity.UpdateIntent_value;
}

ValueMetadata *type metadata accessor for AvoidHillsInWalkingEntity()
{
  return &type metadata for AvoidHillsInWalkingEntity;
}

uint64_t sub_10009F1D0()
{
  uint64_t v0;
  __n128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  char *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v27;
  void (*v28)(char *);
  unsigned int v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  char *v31;
  char *v32;
  char v33;
  uint64_t v34;

  v0 = sub_100008B04(&qword_1014964C0);
  v1 = __chkstk_darwin(v0);
  v32 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for InputConnectionBehavior(0, v1);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v31 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100008B04(&qword_1014964C8);
  __chkstk_darwin(v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v27 - v10;
  v12 = sub_100008B04(&qword_101494370);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for LocalizedStringResource(0, v13);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100008B04(&qword_1014985D8);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000020, 0x8000000100E45C10);
  v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
  v30(v15, 1, 1, v16);
  v34 = 0;
  v20 = type metadata accessor for IntentDialog(0);
  v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56);
  v21(v11, 1, 1, v20);
  v21(v8, 1, 1, v20);
  v29 = enum case for InputConnectionBehavior.default(_:);
  v28 = *(void (**)(char *))(v4 + 104);
  v22 = v31;
  v28(v31);
  v23 = sub_10009E72C();
  v27 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v19, v15, &v34, v11, v8, v22, v23);
  sub_100008B04(&qword_1014964D8);
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000003ALL, 0x8000000100E45C40);
  v30(v15, 1, 1, v16);
  v33 = 2;
  v24 = type metadata accessor for Bool.IntentDisplayName(0);
  v25 = v32;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v32, 1, 1, v24);
  v21(v11, 1, 1, v20);
  ((void (*)(char *, _QWORD, uint64_t))v28)(v22, v29, v3);
  IntentParameter<>.init(title:description:default:displayName:requestValueDialog:inputConnectionBehavior:)(v19, v15, &v33, v25, v11, v22);
  return v27;
}

uint64_t sub_10009F4F8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  *a2 = v2;
  return swift_retain(v2);
}

id sub_10009F538(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  NSString v5;

  v3 = a1 + *a3;
  v4 = *(_QWORD *)(v3 + 8);
  if (v4)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v3 + 8));
    v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    v5 = 0;
  }
  return v5;
}

id sub_10009F5BC()
{
  return sub_1000227F8(type metadata accessor for RAPNotificationDetailsViewModel.DescriptionInfo);
}

unint64_t sub_10009F62C@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;

  result = sub_1000A0748(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

id sub_10009F7FC()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  id result;
  void *v6;
  id v7;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC4Maps31RAPNotificationDetailsViewModel_rapRecord);
  if (!v1)
    return 0;
  v2 = objc_msgSend(v1, "rapResponse");
  v3 = v2;
  if (!v2)
    return v3;
  v4 = objc_msgSend(v2, "displayDetails");

  if (!v4)
    return 0;
  if (!objc_msgSend(v4, "hasOutreachLink"))
  {
LABEL_8:

    return 0;
  }
  result = objc_msgSend(v4, "outreachLink");
  if (result)
  {
    v6 = result;
    v7 = objc_msgSend(result, "url");

    if (v7)
    {
      v3 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v7);

      return v3;
    }
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

id sub_10009F900(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;

  v4 = a1;
  a3();
  v6 = v5;

  if (v6)
  {
    v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    v7 = 0;
  }
  return v7;
}

void sub_10009F968()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;

  v1 = OBJC_IVAR____TtC4Maps31RAPNotificationDetailsViewModel_rapRecord;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC4Maps31RAPNotificationDetailsViewModel_rapRecord);
  if (v2)
  {
    v3 = objc_msgSend(v2, "rapResponse");
    v4 = v3;
    if (v3)
    {
      v5 = objc_msgSend(v3, "displayDetails");

      if (v5)
      {
        if (!objc_msgSend(v5, "hasOutreachLink") || (v6 = *(void **)(v0 + v1)) == 0)
        {
LABEL_13:

          return;
        }
        v7 = objc_msgSend(v6, "rapResponse");
        v8 = v7;
        if (!v7)
        {

          return;
        }
        v9 = objc_msgSend(v7, "displayDetails");

        if (v9)
        {
          v10 = objc_msgSend(v9, "outreachLink");

          if (v10)
          {
            v11 = objc_msgSend(v10, "text");

            if (v11)
            {
              v12 = objc_msgSend(v11, "stringValue");

              if (v12)
              {
                static String._unconditionallyBridgeFromObjectiveC(_:)(v12);

                return;
              }
              goto LABEL_13;
            }
LABEL_18:
            __break(1u);
            return;
          }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
        goto LABEL_18;
      }
    }
  }
}

id sub_10009FAF0(void *a1, uint64_t a2, int a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, char a9, void *a10, void *a11)
{
  objc_class *v11;
  id v18;
  id v19;

  v18 = objc_allocWithZone(v11);
  v19 = sub_1000A0758(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);

  return v19;
}

id sub_10009FCEC()
{
  return sub_1000227F8(type metadata accessor for RAPNotificationDetailsViewModel);
}

uint64_t type metadata accessor for RAPNotificationDetailsViewModel()
{
  return objc_opt_self(_TtC4Maps31RAPNotificationDetailsViewModel);
}

uint64_t type metadata accessor for RAPNotificationDetailsViewModel.DescriptionInfo()
{
  return objc_opt_self(RAPNotificationDetailsViewModelDescriptionInfo);
}

id sub_10009FDC4(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  char v16;
  id result;
  void *v18;
  unint64_t *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  unint64_t *v25;
  id v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  NSObject *v32;
  os_log_type_t v33;
  void *v34;
  uint8_t *v35;
  _QWORD *v36;
  id v37;
  uint64_t v38;
  uint64_t ObjectType;
  id v40;
  id v41;
  void *v42;
  void *v43;
  unint64_t v44;
  NSArray v45;
  NSString v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  void *v55;
  id v56;
  void *v57;
  _OWORD v58[2];
  __int128 v59;
  uint64_t v60;
  unint64_t v61;

  v2 = v1;
  v4 = type metadata accessor for NSFastEnumerationIterator(0);
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)&v6 = __chkstk_darwin(v4).n128_u64[0];
  v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend(a1, "rapResponse", v6);
  if (!v9)
    goto LABEL_19;
  v10 = v9;
  v11 = objc_msgSend(v9, "displayDetails");
  if (!v11)
  {
LABEL_18:

LABEL_19:
    if (qword_101490D40 != -1)
      swift_once(&qword_101490D40, sub_1000A06AC);
    v30 = type metadata accessor for Logger(0);
    sub_10000E918(v30, (uint64_t)qword_1014985E8);
    v31 = a1;
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = v2;
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v36 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v35 = 138412290;
      *(_QWORD *)&v59 = v31;
      v37 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, (char *)&v59 + 8, v35 + 4, v35 + 12);
      *v36 = v31;

      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Failed to build RAPNotificationDetailsViewModel from rapRecord:%@", v35, 0xCu);
      v38 = sub_100008B04((uint64_t *)&unk_101494470);
      swift_arrayDestroy(v36, 1, v38);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v35, -1, -1);

      v2 = v34;
    }
    else
    {

    }
    ObjectType = swift_getObjectType(v2);
    swift_deallocPartialClassInstance(v2, ObjectType, 96, 7);
    return 0;
  }
  v12 = v11;
  v13 = sub_1000A0E18(a1);
  if (!v13)
  {
LABEL_17:

    v10 = v12;
    goto LABEL_18;
  }
  v14 = v13;
  v15 = sub_1000A10E4(a1);
  if ((v16 & 1) != 0)
  {

    v10 = v12;
    v12 = v14;
    goto LABEL_17;
  }
  v54 = v15;
  v55 = v14;
  v56 = v2;
  v61 = (unint64_t)_swiftEmptyArrayStorage;
  if (objc_msgSend(v12, "placesCount"))
  {
    v51 = v5;
    v52 = v4;
    v53 = v12;
    result = objc_msgSend(v12, "places");
    if (!result)
      goto LABEL_32;
    v18 = result;
    NSArray.makeIterator()();

    NSFastEnumerationIterator.next()(&v59);
    if (v60)
    {
      v19 = (unint64_t *)&unk_1014986C8;
      do
      {
        sub_10000BE60(&v59, v58);
        v20 = sub_10000E4BC(0, v19, GEOPDPlace_ptr);
        if ((swift_dynamicCast(&v57, v58, (char *)&type metadata for Any + 8, v20, 6) & 1) != 0)
        {
          v21 = v57;
          v22 = (void *)objc_opt_self(MKMapItem);
          v23 = objc_msgSend(v21, "geoMapItem");
          v24 = objc_msgSend(v22, "_itemWithGeoMapItem:", v23);
          swift_unknownObjectRelease(v23);
          if (v24)
          {
            v25 = v19;
            v26 = v24;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v26);
            v28 = *(_QWORD *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v27 = *(_QWORD *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v28 >= v27 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
            v29 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v26);
            specialized Array._endMutation()(v29);

            v19 = v25;
          }
          else
          {

          }
        }
        NSFastEnumerationIterator.next()(&v59);
      }
      while (v60);
    }
    (*(void (**)(char *, uint64_t))(v51 + 8))(v8, v52);
    v12 = v53;
  }
  v41 = objc_msgSend(v12, "mapType");
  v42 = v12;
  result = objc_msgSend(v12, "displayRegion");
  if (result)
  {
    v43 = result;
    v44 = v61;
    sub_10000E4BC(0, &qword_101493E78, MKMapItem_ptr);
    v45.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v44);
    v46 = objc_msgSend(a1, "reportID");
    if (!v46)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v48 = v47;
      v46 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v48);
    }
    LOBYTE(v50) = 0;
    v49 = v55;
    v40 = objc_msgSend(v56, "initWithDescriptionInfo:displayStyle:mapType:mapRegion:mapItems:reportId:updatedLabel:hasButton:button:rapRecord:", v55, v54, v41, v43, v45.super.isa, v46, 0, v50, 0, a1);

    return v40;
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

void sub_1000A0314(void *a1)
{
  void *v1;
  Class isa;
  id v4;
  id v5;
  void *v6;
  unsigned int v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  unsigned int v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  void *v29;
  unsigned __int8 v30;
  id v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;

  v4 = sub_1000A11E8(a1);
  v5 = objc_msgSend(a1, "details");
  if (!v5)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v6 = v5;
  v7 = objc_msgSend(v5, "displayStyle");

  if (v7 - 1 > 5)
    v8 = 0;
  else
    v8 = qword_100E295A8[v7 - 1];
  v9 = objc_msgSend((id)objc_opt_self(MKMapService), "sharedService");
  if (!v9)
    goto LABEL_18;
  v10 = v9;
  v11 = objc_msgSend(a1, "details");
  if (!v11)
  {
LABEL_19:
    __break(1u);
LABEL_20:

    __break(1u);
    goto LABEL_21;
  }
  v12 = v11;
  isa = (Class)objc_msgSend(v10, "mapItemsForPlacesInDetails:", v11);

  if (!isa)
  {
    v13 = sub_10000E4BC(0, &qword_101493E78, MKMapItem_ptr);
    v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(0, v13);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v14);
  }
  v15 = objc_msgSend(a1, "details");
  if (!v15)
    goto LABEL_20;
  v16 = v15;
  v17 = objc_msgSend(v15, "mapType");

  v18 = objc_msgSend(a1, "details");
  if (!v18)
  {
LABEL_21:

    __break(1u);
    goto LABEL_22;
  }
  v19 = v18;
  v20 = objc_msgSend(v18, "displayRegion");

  if (!v20)
  {
LABEL_22:

    __break(1u);
    goto LABEL_23;
  }
  v21 = objc_msgSend(a1, "problemId");
  if (!v21)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v22 = v21;
  v36 = v17;
  v23 = objc_msgSend(a1, "details");
  if (!v23)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v24 = v23;
  v35 = v8;
  v25 = v1;
  v26 = v4;
  v27 = objc_msgSend(v23, "label");

  v28 = objc_msgSend(a1, "details");
  if (!v28)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v29 = v28;
  v30 = objc_msgSend(v28, "hasButton");

  v31 = objc_msgSend(a1, "details");
  if (v31)
  {
    v32 = v31;
    v33 = objc_msgSend(v31, "button");

    LOBYTE(v34) = v30;
    objc_msgSend(v25, "initWithDescriptionInfo:displayStyle:mapType:mapRegion:mapItems:reportId:updatedLabel:hasButton:button:rapRecord:", v26, v35, v36, v20, isa, v22, v27, v34, v33, 0);

    return;
  }
LABEL_26:
  __break(1u);
}

ValueMetadata *type metadata accessor for RAPNotificationDetailsViewModel.DisplayStyle()
{
  return &type metadata for RAPNotificationDetailsViewModel.DisplayStyle;
}

unint64_t sub_1000A0668()
{
  unint64_t result;

  result = qword_1014986C0;
  if (!qword_1014986C0)
  {
    result = swift_getWitnessTable("9h7", &type metadata for RAPNotificationDetailsViewModel.DisplayStyle);
    atomic_store(result, (unint64_t *)&qword_1014986C0);
  }
  return result;
}

uint64_t sub_1000A06AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v0 = type metadata accessor for Logger(0);
  sub_10000E930(v0, qword_1014985E8);
  sub_10000E918(v0, (uint64_t)qword_1014985E8);
  v5 = type metadata accessor for RAPNotificationDetailsViewModel();
  v1 = sub_100008B04(&qword_1014986D0);
  v2 = String.init<A>(describing:)(&v5, v1);
  return Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xEE007370614D2E65, v2, v3);
}

unint64_t sub_1000A0748(unint64_t result)
{
  if (result > 6)
    return 0;
  return result;
}

id sub_1000A0758(void *a1, uint64_t a2, int a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, char a9, void *a10, void *a11)
{
  _BYTE *v11;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  objc_super v23;

  v14 = OBJC_IVAR____TtC4Maps31RAPNotificationDetailsViewModel_rapRecord;
  *(_QWORD *)&v11[OBJC_IVAR____TtC4Maps31RAPNotificationDetailsViewModel_rapRecord] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC4Maps31RAPNotificationDetailsViewModel_descriptionInfo] = a1;
  *(_QWORD *)&v11[OBJC_IVAR____TtC4Maps31RAPNotificationDetailsViewModel_displayStyle] = a2;
  *(_DWORD *)&v11[OBJC_IVAR____TtC4Maps31RAPNotificationDetailsViewModel_mapType] = a3;
  *(_QWORD *)&v11[OBJC_IVAR____TtC4Maps31RAPNotificationDetailsViewModel_mapRegion] = a4;
  *(_QWORD *)&v11[OBJC_IVAR____TtC4Maps31RAPNotificationDetailsViewModel_mapItems] = a5;
  v15 = &v11[OBJC_IVAR____TtC4Maps31RAPNotificationDetailsViewModel_reportId];
  *v15 = a6;
  v15[1] = a7;
  *(_QWORD *)&v11[OBJC_IVAR____TtC4Maps31RAPNotificationDetailsViewModel_updatedLabel] = a8;
  v11[OBJC_IVAR____TtC4Maps31RAPNotificationDetailsViewModel_hasButton] = a9;
  *(_QWORD *)&v11[OBJC_IVAR____TtC4Maps31RAPNotificationDetailsViewModel_button] = a10;
  v16 = *(void **)&v11[v14];
  *(_QWORD *)&v11[v14] = a11;
  v17 = a1;
  v18 = a4;
  v19 = a8;
  v20 = a10;
  v21 = a11;

  v23.receiver = v11;
  v23.super_class = (Class)type metadata accessor for RAPNotificationDetailsViewModel();
  return objc_msgSendSuper2(&v23, "init");
}

unint64_t sub_1000A084C(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  unint64_t v12;
  unsigned int v14;
  uint64_t v15;

  v1 = objc_msgSend(a1, "rapResponse");
  if (v1)
  {
    v2 = v1;
    switch(objc_msgSend(v1, "rapStateIcon"))
    {
      case 1u:
      case 4u:
      case 5u:
        v12 = 0xD00000000000001BLL;

        break;
      case 2u:

        v12 = 0x72616D6B63656863;
        break;
      case 3u:

        v12 = 0xD000000000000018;
        break;
      default:
        if (qword_101490D40 != -1)
          swift_once(&qword_101490D40, sub_1000A06AC);
        v8 = type metadata accessor for Logger(0);
        sub_10000E918(v8, (uint64_t)qword_1014985E8);
        v5 = v2;
        v9 = Logger.logObject.getter(v5);
        v10 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v9, v10))
        {
          v11 = (uint8_t *)swift_slowAlloc(8, -1);
          *(_DWORD *)v11 = 67109120;
          v14 = -[NSObject rapStateIcon](v5, "rapStateIcon");
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v11 + 4, v11 + 8);

          _os_log_impl((void *)&_mh_execute_header, v9, v10, "Failed to get SymbolImageName with rapStateIcon: %d", v11, 8u);
          swift_slowDealloc(v11, -1, -1);

          return 0;
        }

        goto LABEL_16;
    }
  }
  else
  {
    if (qword_101490D40 != -1)
      swift_once(&qword_101490D40, sub_1000A06AC);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_10000E918(v3, (uint64_t)qword_1014985E8);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to get SymbolImageName", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }
LABEL_16:

    return 0;
  }
  return v12;
}

id sub_1000A0B18(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  id v13;
  unsigned int v15;
  uint64_t v16;

  v1 = objc_msgSend(a1, "rapResponse");
  if (v1)
  {
    v2 = v1;
    switch(objc_msgSend(v1, "rapStateIcon"))
    {
      case 1u:
      case 3u:
      case 4u:
        v3 = objc_msgSend((id)objc_opt_self(UIColor), "systemGrayColor");
        goto LABEL_14;
      case 2u:
        v3 = objc_msgSend((id)objc_opt_self(UIColor), "systemGreenColor");
        goto LABEL_14;
      case 5u:
        v3 = objc_msgSend((id)objc_opt_self(UIColor), "systemYellowColor");
LABEL_14:
        v13 = v3;

        return v13;
      default:
        if (qword_101490D40 != -1)
          swift_once(&qword_101490D40, sub_1000A06AC);
        v9 = type metadata accessor for Logger(0);
        sub_10000E918(v9, (uint64_t)qword_1014985E8);
        v6 = v2;
        v10 = Logger.logObject.getter(v6);
        v11 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v10, v11))
        {
          v12 = (uint8_t *)swift_slowAlloc(8, -1);
          *(_DWORD *)v12 = 67109120;
          v15 = -[NSObject rapStateIcon](v6, "rapStateIcon");
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v12 + 4, v12 + 8);

          _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failed to get SymbolImageBackgroundColor with rapStateIcon: %d", v12, 8u);
          swift_slowDealloc(v12, -1, -1);

          return 0;
        }

        break;
    }
  }
  else
  {
    if (qword_101490D40 != -1)
      swift_once(&qword_101490D40, sub_1000A06AC);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10000E918(v4, (uint64_t)qword_1014985E8);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to get SymbolImageBackgroundColor", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }
  }

  return 0;
}

id sub_1000A0E18(void *a1)
{
  id v2;
  void *v3;
  id v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  id v8;
  id result;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  objc_class *v20;
  char *v21;
  unint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  objc_super v31;

  v2 = objc_msgSend(a1, "rapResponse");
  if (!v2)
    goto LABEL_17;
  v3 = v2;
  v4 = objc_msgSend(v2, "displayDetails");

  if (!v4)
    goto LABEL_17;
  if ((objc_msgSend(v4, "hasTitle") & 1) == 0 && !objc_msgSend(v4, "hasBody"))
  {

LABEL_17:
    if (qword_101490D40 != -1)
      swift_once(&qword_101490D40, sub_1000A06AC);
    v26 = type metadata accessor for Logger(0);
    v27 = sub_10000E918(v26, (uint64_t)qword_1014985E8);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Failed to get DescriptionInfo", v30, 2u);
      swift_slowDealloc(v30, -1, -1);
    }

    return 0;
  }
  v5 = sub_1000A084C(a1);
  v7 = v6;
  v8 = sub_1000A0B18(a1);
  if (!objc_msgSend(v4, "hasTitle"))
    goto LABEL_9;
  result = objc_msgSend(v4, "title");
  if (!result)
  {
    __break(1u);
    goto LABEL_24;
  }
  v10 = result;
  v11 = objc_msgSend(result, "stringValue");

  if (v11)
  {
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

  }
  else
  {
LABEL_9:
    v12 = 0;
    v14 = 0;
  }
  if (!objc_msgSend(v4, "hasBody"))
    goto LABEL_14;
  result = objc_msgSend(v4, "body");
  if (result)
  {
    v15 = result;
    v16 = objc_msgSend(result, "stringValue");

    if (v16)
    {
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v19 = v18;

LABEL_15:
      v20 = (objc_class *)type metadata accessor for RAPNotificationDetailsViewModel.DescriptionInfo();
      v21 = (char *)objc_allocWithZone(v20);
      v22 = (unint64_t *)&v21[OBJC_IVAR___RAPNotificationDetailsViewModelDescriptionInfo_imageName];
      *v22 = v5;
      v22[1] = v7;
      *(_QWORD *)&v21[OBJC_IVAR___RAPNotificationDetailsViewModelDescriptionInfo_imageBackgroundColor] = v8;
      v23 = (uint64_t *)&v21[OBJC_IVAR___RAPNotificationDetailsViewModelDescriptionInfo_titleText];
      *v23 = v12;
      v23[1] = v14;
      v24 = (uint64_t *)&v21[OBJC_IVAR___RAPNotificationDetailsViewModelDescriptionInfo_descriptionText];
      *v24 = v17;
      v24[1] = v19;
      v31.receiver = v21;
      v31.super_class = v20;
      v25 = objc_msgSendSuper2(&v31, "init");

      return v25;
    }
LABEL_14:
    v17 = 0;
    v19 = 0;
    goto LABEL_15;
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_1000A10E4(void *a1)
{
  uint64_t result;
  void *v2;
  id v3;
  unsigned int v4;

  result = (uint64_t)objc_msgSend(a1, "rapResponse");
  if (result)
  {
    v2 = (void *)result;
    v3 = objc_msgSend((id)result, "displayDetails");

    if (v3)
    {
      v4 = objc_msgSend(v3, "displayStyle");

      if (v4 == 1)
        return 1;
      if (v4 == 2)
        return 2;
    }
    return 0;
  }
  return result;
}

id sub_1000A1180(void *a1)
{
  unsigned int v1;
  void *v2;
  SEL *v3;
  char **v4;

  v1 = objc_msgSend(a1, "problemState");
  v2 = (void *)objc_opt_self(UIColor);
  v3 = (SEL *)&selRef_systemYellowColor;
  v4 = &selRef_systemGreenColor;
  if (v1 != 2)
    v4 = &selRef_systemGrayColor;
  if (v1 != 5)
    v3 = (SEL *)v4;
  return objc_msgSend(v2, *v3);
}

id sub_1000A11E8(void *a1)
{
  unint64_t v2;
  unint64_t v3;
  const char *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  objc_class *v18;
  char *v19;
  unint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  objc_super v24;

  v2 = 0xD00000000000001BLL;
  v3 = 0x8000000100E45FF0;
  switch(objc_msgSend(a1, "problemState"))
  {
    case 1u:
    case 4u:
      break;
    case 2u:
      v3 = 0xE90000000000006BLL;
      v2 = 0x72616D6B63656863;
      break;
    case 3u:
      v2 = 0xD000000000000018;
      v4 = "doc.text.magnifyingglass";
      goto LABEL_6;
    case 5u:
      v4 = "hourglass.bottomhalf.filled";
LABEL_6:
      v3 = (unint64_t)(v4 - 32) | 0x8000000000000000;
      break;
    default:
      v2 = 0;
      v3 = 0xE000000000000000;
      break;
  }
  v5 = sub_1000A1180(a1);
  v6 = objc_msgSend(a1, "details");
  if (!v6)
  {
    __break(1u);
    goto LABEL_17;
  }
  v7 = v6;
  v8 = objc_msgSend(v6, "localizedTitle");

  if (v8)
  {
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

  }
  else
  {
    v9 = 0;
    v11 = 0;
  }
  v12 = objc_msgSend(a1, "details");
  if (!v12)
  {
LABEL_17:
    __break(1u);
    JUMPOUT(0x1000A13E0);
  }
  v13 = v12;
  v14 = objc_msgSend(v12, "localizedDescription");

  if (v14)
  {
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

  }
  else
  {
    v15 = 0;
    v17 = 0;
  }
  v18 = (objc_class *)type metadata accessor for RAPNotificationDetailsViewModel.DescriptionInfo();
  v19 = (char *)objc_allocWithZone(v18);
  v20 = (unint64_t *)&v19[OBJC_IVAR___RAPNotificationDetailsViewModelDescriptionInfo_imageName];
  *v20 = v2;
  v20[1] = v3;
  *(_QWORD *)&v19[OBJC_IVAR___RAPNotificationDetailsViewModelDescriptionInfo_imageBackgroundColor] = v5;
  v21 = (uint64_t *)&v19[OBJC_IVAR___RAPNotificationDetailsViewModelDescriptionInfo_titleText];
  *v21 = v9;
  v21[1] = v11;
  v22 = (uint64_t *)&v19[OBJC_IVAR___RAPNotificationDetailsViewModelDescriptionInfo_descriptionText];
  *v22 = v15;
  v22[1] = v17;
  v24.receiver = v19;
  v24.super_class = v18;
  return objc_msgSendSuper2(&v24, "init");
}

ValueMetadata *type metadata accessor for PlaceSummaryUnitHighlightMain()
{
  return &type metadata for PlaceSummaryUnitHighlightMain;
}

uint64_t sub_1000A1404()
{
  uint64_t v0;
  __n128 v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v0 = sub_100008B04(&qword_101494370);
  v1 = __chkstk_darwin(v0);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for LocalizedStringResource(0, v1);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TypeDisplayRepresentation(0, v6);
  sub_10000E930(v9, qword_1014D4850);
  sub_10000E918(v9, (uint64_t)qword_1014D4850);
  LocalizedStringResource.init(stringLiteral:)(0x6F56206563696F56, 0xEC000000656D756CLL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v8, v3);
}

unint64_t sub_1000A1518()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _BYTE *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  _BYTE *v39;
  uint64_t v40;
  unint64_t result;
  char *v42;
  char *v43;
  __int128 v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  void (*v52)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t, uint64_t);

  v0 = sub_100008B04(&qword_101494368);
  __chkstk_darwin(v0);
  v2 = (char *)&v42 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = v2;
  v3 = sub_100008B04(&qword_101494370);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LocalizedStringResource(0, v4);
  v8 = *(_QWORD *)(v7 - 8);
  v53 = v7;
  __chkstk_darwin(v7);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008B04(&qword_101498890);
  v12 = sub_100008B04(&qword_101491CA8);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = v12;
  v15 = *(_QWORD *)(v13 + 72);
  v54 = v12;
  v55 = v15;
  v16 = *(unsigned __int8 *)(v13 + 80);
  v17 = (v16 + 32) & ~v16;
  v56 = 2 * v15;
  v18 = swift_allocObject(v11, v17 + 3 * v15, v16 | 7);
  v44 = xmmword_100E22F50;
  v57 = v18;
  *(_OWORD *)(v18 + 16) = xmmword_100E22F50;
  v19 = (_BYTE *)(v18 + v17);
  *(_QWORD *)&v51 = v18 + v17 + *(int *)(v14 + 48);
  *v19 = 0;
  v20 = v18 + v17;
  v48 = v19;
  LocalizedStringResource.init(stringLiteral:)(0x5620726574666F53, 0xED0000656D756C6FLL);
  v52 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
  v52(v6, 1, 1, v7);
  v50 = type metadata accessor for DisplayRepresentation.Image(0);
  v58 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56);
  v58(v2, 1, 1, v50);
  v21 = sub_100008B04((uint64_t *)&unk_101494380);
  v22 = *(_QWORD *)(v8 + 72);
  v23 = *(unsigned __int8 *)(v8 + 80);
  v24 = (v23 + 32) & ~v23;
  v25 = 2 * v22;
  v49 = v22;
  v26 = v23 | 7;
  v27 = v21;
  v46 = v23 | 7;
  v47 = v21;
  v28 = swift_allocObject(v21, v24 + 3 * v22, v23 | 7);
  *(_OWORD *)(v28 + 16) = v44;
  LocalizedStringResource.init(stringLiteral:)(0x756C6F5620776F4CLL, 0xEA0000000000656DLL);
  LocalizedStringResource.init(stringLiteral:)(0x206D756D696E694DLL, 0xEE00656D756C6F56);
  LocalizedStringResource.init(stringLiteral:)(0x6C6F56207373654CLL, 0xEB00000000656D75);
  v42 = v6;
  v43 = v10;
  v29 = v45;
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v10, v6, v45, v28);
  v30 = (_BYTE *)(v20 + v55);
  v31 = v54;
  *(_QWORD *)&v44 = &v30[*(int *)(v54 + 48)];
  *v30 = 1;
  LocalizedStringResource.init(stringLiteral:)(0x56206C616D726F4ELL, 0xED0000656D756C6FLL);
  v32 = v6;
  v34 = v52;
  v33 = v53;
  v52(v32, 1, 1, v53);
  v35 = v50;
  v58(v29, 1, 1, v50);
  v55 = v24 + v25;
  v36 = swift_allocObject(v27, v24 + v25, v26);
  v51 = xmmword_100E22F70;
  *(_OWORD *)(v36 + 16) = xmmword_100E22F70;
  LocalizedStringResource.init(stringLiteral:)(0x56206D756964654DLL, 0xED0000656D756C6FLL);
  LocalizedStringResource.init(stringLiteral:)(0x5620656C6464694DLL, 0xED0000656D756C6FLL);
  v37 = v43;
  v38 = v42;
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v43, v42, v29, v36);
  v39 = &v48[v56];
  v56 += (uint64_t)&v48[*(int *)(v31 + 48)];
  *v39 = 2;
  LocalizedStringResource.init(stringLiteral:)(0x5620726564756F4CLL, 0xED0000656D756C6FLL);
  v34(v38, 1, 1, v33);
  v58(v29, 1, 1, v35);
  v40 = swift_allocObject(v47, v55, v46);
  *(_OWORD *)(v40 + 16) = v51;
  LocalizedStringResource.init(stringLiteral:)(0x206D756D6978614DLL, 0xEE00656D756C6F56);
  LocalizedStringResource.init(stringLiteral:)(0x6C6F562068676948, 0xEB00000000656D75);
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v37, v38, v29, v40);
  result = sub_100009B5C(v57);
  qword_1014D4868 = result;
  return result;
}

uint64_t sub_1000A19F8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1001D64FC(*a1, *a2);
}

unint64_t sub_1000A1A08()
{
  unint64_t result;

  result = qword_1014986D8;
  if (!qword_1014986D8)
  {
    result = swift_getWitnessTable("mi7", &type metadata for VoiceVolumeLevel);
    atomic_store(result, (unint64_t *)&qword_1014986D8);
  }
  return result;
}

Swift::Int sub_1000A1A4C()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xEC0000006C616D72;
  v3 = 0x6F4E656D756C6F76;
  if (v1 != 1)
  {
    v3 = 0x6F4C656D756C6F76;
    v2 = 0xEA00000000006475;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x6F53656D756C6F76;
  if (v1)
    v5 = v2;
  else
    v5 = 0xEA00000000007466;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_1000A1AF8(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xEA00000000006475;
  v3 = 0x6F4E656D756C6F76;
  if (*v1 == 1)
    v2 = 0xEC0000006C616D72;
  else
    v3 = 0x6F4C656D756C6F76;
  if (*v1)
    v4 = v3;
  else
    v4 = 0x6F53656D756C6F76;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xEA00000000007466;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1000A1B80(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xEC0000006C616D72;
  v4 = 0x6F4E656D756C6F76;
  if (v2 != 1)
  {
    v4 = 0x6F4C656D756C6F76;
    v3 = 0xEA00000000006475;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x6F53656D756C6F76;
  if (v2)
    v6 = v3;
  else
    v6 = 0xEA00000000007466;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

unint64_t sub_1000A1C28@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000A384C(*a1);
  *a2 = result;
  return result;
}

void sub_1000A1C54(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xEC0000006C616D72;
  v3 = 0x6F4E656D756C6F76;
  if (*v1 != 1)
  {
    v3 = 0x6F4C656D756C6F76;
    v2 = 0xEA00000000006475;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x6F53656D756C6F76;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xEA00000000007466;
  *a1 = v4;
  a1[1] = v5;
}

unint64_t sub_1000A1CC4()
{
  unint64_t result;

  result = qword_1014986E0;
  if (!qword_1014986E0)
  {
    result = swift_getWitnessTable("\ri7", &type metadata for VoiceVolumeLevel);
    atomic_store(result, (unint64_t *)&qword_1014986E0);
  }
  return result;
}

unint64_t sub_1000A1D0C()
{
  unint64_t result;

  result = qword_1014986E8;
  if (!qword_1014986E8)
  {
    result = swift_getWitnessTable(byte_100E29724, &type metadata for VoiceVolumeLevel);
    atomic_store(result, (unint64_t *)&qword_1014986E8);
  }
  return result;
}

unint64_t sub_1000A1D54()
{
  unint64_t result;

  result = qword_1014986F0;
  if (!qword_1014986F0)
  {
    result = swift_getWitnessTable("=i7", &type metadata for VoiceVolumeLevel);
    atomic_store(result, (unint64_t *)&qword_1014986F0);
  }
  return result;
}

unint64_t sub_1000A1D9C()
{
  unint64_t result;

  result = qword_1014986F8;
  if (!qword_1014986F8)
  {
    result = swift_getWitnessTable(byte_100E29754, &type metadata for VoiceVolumeLevel);
    atomic_store(result, (unint64_t *)&qword_1014986F8);
  }
  return result;
}

unint64_t sub_1000A1DE4()
{
  unint64_t result;

  result = qword_101498700;
  if (!qword_101498700)
  {
    result = swift_getWitnessTable(byte_100E2977C, &type metadata for VoiceVolumeLevel);
    atomic_store(result, (unint64_t *)&qword_101498700);
  }
  return result;
}

unint64_t sub_1000A1E2C()
{
  unint64_t result;

  result = qword_101498708;
  if (!qword_101498708)
  {
    result = swift_getWitnessTable(byte_100E297A4, &type metadata for VoiceVolumeLevel);
    atomic_store(result, (unint64_t *)&qword_101498708);
  }
  return result;
}

unint64_t sub_1000A1E74()
{
  unint64_t result;

  result = qword_101498710;
  if (!qword_101498710)
  {
    result = swift_getWitnessTable(byte_100E297FC, &type metadata for VoiceVolumeLevel);
    atomic_store(result, (unint64_t *)&qword_101498710);
  }
  return result;
}

uint64_t sub_1000A1EB8@<X0>(uint64_t a1@<X8>)
{
  return sub_100073694(&qword_101490D48, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_1014D4850, (uint64_t)sub_1000A1404, a1);
}

uint64_t sub_1000A1EDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A2898(a1, a2, a3, (uint64_t (*)(void))sub_1000A1EF0, (uint64_t)&opaque type descriptor for <<opaque return type of static AppEnum.defaultResolverSpecification>>);
}

unint64_t sub_1000A1EF0()
{
  unint64_t result;

  result = qword_101498718;
  if (!qword_101498718)
  {
    result = swift_getWitnessTable("%i7", &type metadata for VoiceVolumeLevel);
    atomic_store(result, (unint64_t *)&qword_101498718);
  }
  return result;
}

uint64_t sub_1000A1F34(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A1EF0();
  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_1000A1F70()
{
  unint64_t result;

  result = qword_101498720;
  if (!qword_101498720)
  {
    result = swift_getWitnessTable("}h7", &type metadata for VoiceVolumeLevel);
    atomic_store(result, (unint64_t *)&qword_101498720);
  }
  return result;
}

unint64_t sub_1000A1FB8()
{
  unint64_t result;

  result = qword_101498728;
  if (!qword_101498728)
  {
    result = swift_getWitnessTable("eh7", &type metadata for VoiceVolumeLevel);
    atomic_store(result, (unint64_t *)&qword_101498728);
  }
  return result;
}

unint64_t sub_1000A2000()
{
  unint64_t result;

  result = qword_101498730;
  if (!qword_101498730)
  {
    result = swift_getWitnessTable("Ui7", &type metadata for VoiceVolumeLevel);
    atomic_store(result, (unint64_t *)&qword_101498730);
  }
  return result;
}

uint64_t sub_1000A2044()
{
  if (qword_101490D50 != -1)
    swift_once(&qword_101490D50, sub_1000A1518);
  return swift_bridgeObjectRetain(qword_1014D4868);
}

uint64_t sub_1000A2084(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A1E74();
  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

uint64_t sub_1000A20BC()
{
  return sub_100010D70(&qword_101498738, &qword_101498740, (const char *)&protocol conformance descriptor for [A]);
}

void sub_1000A20E8(_QWORD *a1@<X8>)
{
  *a1 = &off_10119A2A0;
}

unint64_t sub_1000A20FC()
{
  unint64_t result;

  result = qword_101498748;
  if (!qword_101498748)
  {
    result = swift_getWitnessTable("5h7", &type metadata for NavigationVolumeEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_101498748);
  }
  return result;
}

uint64_t sub_1000A2140()
{
  return sub_100010D70(&qword_101498750, &qword_101498758, (const char *)&protocol conformance descriptor for _IntentUpdatableEntityProperty<A, B, C>);
}

uint64_t sub_1000A216C()
{
  uint64_t v0;
  __n128 v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[2];

  v0 = sub_100008B04(&qword_101494370);
  v1 = __chkstk_darwin(v0);
  v3 = (char *)v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0, v1);
  v4 = *(_QWORD *)(v23[0] - 8);
  __chkstk_darwin(v23[0]);
  v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for String.LocalizationValue(0, v8);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for LocalizedStringResource(0, v12);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for TypeDisplayRepresentation(0, v17);
  sub_10000E930(v20, qword_1014D4870);
  sub_10000E918(v20, (uint64_t)qword_1014D4870);
  v21 = String.LocalizationValue.init(stringLiteral:)(0x4C20656D756C6F56, 0xEC0000006C657665);
  static Locale.current.getter(v21);
  (*(void (**)(char *, _QWORD, _QWORD))(v4 + 104))(v6, enum case for LocalizedStringResource.BundleDescription.main(_:), v23[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v10, v6, "An intent that lets a user change navigation voice volume in Maps", 65, 2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v3, 1, 1, v15);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v19, v3);
}

uint64_t sub_1000A2384(__n128 a1)
{
  uint64_t v1;

  v1 = type metadata accessor for LocalizedStringResource(0, a1);
  sub_10000E930(v1, qword_1014D4888);
  sub_10000E918(v1, (uint64_t)qword_1014D4888);
  return LocalizedStringResource.init(stringLiteral:)(0xD000000000000013, 0x8000000100E46180);
}

uint64_t sub_1000A23E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_100008B04(&qword_1014964F0);
  sub_10000E930(v0, qword_1014D48A0);
  v1 = sub_10000E918(v0, (uint64_t)qword_1014D48A0);
  IntentDescription.init(stringLiteral:)(0xD00000000000002DLL, 0x8000000100E46150);
  v2 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 0, 1, v2);
}

uint64_t sub_1000A246C()
{
  uint64_t result;

  result = swift_getKeyPath(&unk_100E29DF8);
  qword_1014D48B8 = result;
  return result;
}

uint64_t sub_1000A2490(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  return swift_task_switch(sub_1000A24AC, 0, 0);
}

uint64_t sub_1000A24AC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  IntentParameter.wrappedValue.getter(v0 + 2);
  v1 = v0[2];
  v0[3] = v1;
  v0[9] = v1;
  IntentParameter.wrappedValue.getter((_QWORD *)((char *)v0 + 145));
  if (qword_101490D70 != -1)
    swift_once(&qword_101490D70, sub_1000A246C);
  v2 = qword_1014D48B8;
  v0[10] = qword_1014D48B8;
  v3 = async function pointer to AppEntity._setValue<A, B, C>(_:for:)[1];
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  v0[11] = v4;
  v5 = sub_100010D70(&qword_101498868, &qword_101498870, (const char *)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  v0[12] = v5;
  *v4 = v0;
  v4[1] = sub_1000A25A4;
  return AppEntity._setValue<A, B, C>(_:for:)((char *)v0 + 145, v2, &type metadata for VoiceVolumeLevel, v5);
}

uint64_t sub_1000A25A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  swift_release();
  swift_release();
  if (v0)
    v3 = sub_100072D78;
  else
    v3 = sub_1000A2624;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000A2624()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  IntentParameter.wrappedValue.getter(v0 + 5);
  v1 = v0[5];
  v0[4] = v1;
  v2 = qword_1014D48B8;
  v0[14] = v1;
  v0[15] = v2;
  v3 = async function pointer to AppEntity._value<A, B>(for:)[1];
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  v0[16] = v4;
  *v4 = v0;
  v4[1] = sub_1000A26B8;
  return AppEntity._value<A, B>(for:)(v0 + 18, v2, v0[12]);
}

uint64_t sub_1000A26B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc(v2);
  swift_release();
  swift_release();
  if (v0)
    v3 = sub_100072D84;
  else
    v3 = sub_1000A2738;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000A2738()
{
  uint64_t v0;
  unint64_t v1;

  *(_BYTE *)(v0 + 146) = *(_BYTE *)(v0 + 144);
  v1 = sub_1000A1E2C();
  static IntentResult.result<A>(value:)(v0 + 146, &type metadata for VoiceVolumeLevel, v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_1000A2790()
{
  double result;

  if (qword_101490D70 != -1)
    swift_once(&qword_101490D70, sub_1000A246C);
  *(_QWORD *)&result = swift_retain().n128_u64[0];
  return result;
}

unint64_t sub_1000A27D4()
{
  unint64_t result;

  result = qword_101498760;
  if (!qword_101498760)
  {
    result = swift_getWitnessTable(byte_100E2999C, &type metadata for NavigationVolumeEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_101498760);
  }
  return result;
}

unint64_t sub_1000A281C()
{
  unint64_t result;

  result = qword_101498768;
  if (!qword_101498768)
  {
    result = swift_getWitnessTable(byte_100E299C4, &type metadata for NavigationVolumeEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_101498768);
  }
  return result;
}

uint64_t sub_1000A2860(uint64_t a1)
{
  return *(_QWORD *)(swift_getOpaqueTypeConformance2(a1, &unk_101067608, 1) + 8);
}

uint64_t sub_1000A2884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A2898(a1, a2, a3, (uint64_t (*)(void))sub_1000A20FC, (uint64_t)&opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>);
}

uint64_t sub_1000A2898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t a5)
{
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a4();
  return swift_getOpaqueTypeConformance2(v7, a5, 1);
}

uint64_t sub_1000A28D8@<X0>(uint64_t a1@<X8>)
{
  return sub_100073694(&qword_101490D60, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1014D4888, (uint64_t)sub_1000A2384, a1);
}

uint64_t sub_1000A28FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_101490D68 != -1)
    swift_once(&qword_101490D68, sub_1000A23E4);
  v2 = sub_100008B04(&qword_1014964F0);
  v3 = sub_10000E918(v2, (uint64_t)qword_1014D48A0);
  return sub_1000742A4(v3, a1);
}

uint64_t sub_1000A295C(uint64_t a1)
{
  _OWORD *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = swift_task_alloc(dword_10149888C);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_10000DD08;
  *(_OWORD *)(v4 + 56) = *v1;
  *(_QWORD *)(v4 + 48) = a1;
  return swift_task_switch(sub_1000A24AC, 0, 0);
}

uint64_t sub_1000A29C4@<X0>(uint64_t *a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_1000A3894(a2);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1000A29E8()
{
  return 0xD000000000000027;
}

unint64_t sub_1000A2A08()
{
  unint64_t result;

  result = qword_101498778;
  if (!qword_101498778)
  {
    result = swift_getWitnessTable(byte_100E29A10, &type metadata for NavigationVolumeEntity);
    atomic_store(result, (unint64_t *)&qword_101498778);
  }
  return result;
}

unint64_t sub_1000A2A50()
{
  unint64_t result;

  result = qword_101498780;
  if (!qword_101498780)
  {
    result = swift_getWitnessTable("af7", &type metadata for NavigationVolumeQuery);
    atomic_store(result, (unint64_t *)&qword_101498780);
  }
  return result;
}

unint64_t sub_1000A2A98()
{
  unint64_t result;

  result = qword_101498788;
  if (!qword_101498788)
  {
    result = swift_getWitnessTable(byte_100E29A68, &type metadata for NavigationVolumeEntity);
    atomic_store(result, (unint64_t *)&qword_101498788);
  }
  return result;
}

unint64_t sub_1000A2AE0()
{
  unint64_t result;

  result = qword_101498790;
  if (!qword_101498790)
  {
    result = swift_getWitnessTable("yg7", &type metadata for NavigationVolumeEntity);
    atomic_store(result, (unint64_t *)&qword_101498790);
  }
  return result;
}

unint64_t sub_1000A2B28()
{
  unint64_t result;

  result = qword_101498798;
  if (!qword_101498798)
  {
    result = swift_getWitnessTable("ag7", &type metadata for NavigationVolumeEntity);
    atomic_store(result, (unint64_t *)&qword_101498798);
  }
  return result;
}

unint64_t sub_1000A2B70()
{
  unint64_t result;

  result = qword_1014987A0;
  if (!qword_1014987A0)
  {
    result = swift_getWitnessTable("1f7", &type metadata for NavigationVolumeQuery);
    atomic_store(result, (unint64_t *)&qword_1014987A0);
  }
  return result;
}

uint64_t sub_1000A2BB4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_1000A2BCC, 0, 0);
}

uint64_t sub_1000A2BCC()
{
  uint64_t v0;
  char *v1;
  uint64_t Integer;
  char v3;

  v1 = *(char **)(v0 + 16);
  Integer = GEOConfigGetInteger(NavigationConfig_SpokenGuidanceVolumeUserChoice, *((_QWORD *)&NavigationConfig_SpokenGuidanceVolumeUserChoice + 1));
  if (Integer == 2)
    v3 = 2;
  else
    v3 = 1;
  if (!Integer)
    v3 = 0;
  *v1 = v3;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A2C28(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 16) = *a2;
  return swift_task_switch(sub_1000A2C44, 0, 0);
}

uint64_t sub_1000A2C44()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  NSString v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  id v8;
  Block_layout *v9;
  id v10;
  __CFString *v11;
  __CFString *v12;
  id v13;
  void *v14;
  uint64_t v15;
  Block_layout *v16;
  void *v17;
  id v18;
  NSNumber *v19;
  void *v20;
  void *v21;
  int BOOL;
  uint64_t v24;

  v1 = 0xED0000656D756C6FLL;
  if (*(_BYTE *)(v0 + 16) != 1)
    v1 = 0xEB00000000656D75;
  if (*(_BYTE *)(v0 + 16))
    v2 = v1;
  else
    v2 = 0xEA0000000000656DLL;
  v3 = String._bridgeToObjectiveC()();
  v4 = swift_bridgeObjectRelease(v2);
  v5 = GEOGetUserTransportTypePreference(v4);
  v6 = GEOTransportTypeFromGEOTransportTypePreference(v5);
  v7 = qword_1014C4E40[0];
  v8 = v3;
  v9 = &stru_10119FF58;
  if (v7 != -1)
    dispatch_once(qword_1014C4E40, &stru_10119FF58);

  v10 = (id)qword_1014C4E38;
  if (v6 == 2)
  {
    if (MNHeadphonesAreInUse())
      v11 = CFSTR("VoiceVolumeForWalkingWithHeadphonesContext");
    else
      v11 = CFSTR("VoiceVolumeForWalkingWithoutHeadphonesContext");
  }
  else
  {
    v11 = CFSTR("VoiceVolumeForDrivingContext");
  }
  v12 = v11;
  v13 = objc_msgSend(v8, "isEqualToString:", CFSTR("Off Volume"));
  if ((v13 & 1) == 0)
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "path"));
    _CFPreferencesSetAppValueWithContainer(v12, v8, CFSTR("com.apple.Maps"), v14);

  }
  v15 = qword_1014C4E40[0];
  v16 = &stru_10119FF58;
  if (v15 == -1)
  {
    v17 = v10;
  }
  else
  {
    v17 = v10;
    dispatch_once(qword_1014C4E40, &stru_10119FF58);
  }
  v24 = *(unsigned __int8 *)(v0 + 16);

  v18 = (id)qword_1014C4E38;
  v19 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v13);
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "path"));
  _CFPreferencesSetAppValueWithContainer(CFSTR("VoiceIsMute"), v19, CFSTR("com.apple.Maps"), v20);

  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "path"));
  _CFPreferencesSynchronizeWithContainer(CFSTR("com.apple.Maps"), kCFPreferencesCurrentUser, kCFPreferencesAnyHost, v21);

  GSSendAppPreferencesChanged(CFSTR("com.apple.Maps"), CFSTR("VoiceIsMute"));
  GSSendAppPreferencesChanged(CFSTR("com.apple.Maps"), v12);

  GEOConfigSetSyncInteger(LODWORD(NavigationConfig_SpokenGuidanceVolumeUserChoice[0]), NavigationConfig_SpokenGuidanceVolumeUserChoice[1], v24);
  BOOL = GEOConfigGetBOOL(MapsConfig_PreferencesUniqueEntityDidUpdate, off_1014B5518);
  GEOConfigSetBOOL(MapsConfig_PreferencesUniqueEntityDidUpdate, off_1014B5518, BOOL ^ 1u);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_1000A2F60()
{
  unint64_t result;

  result = qword_1014987A8;
  if (!qword_1014987A8)
  {
    result = swift_getWitnessTable(")e7", &type metadata for NavigationVolumeEntity);
    atomic_store(result, (unint64_t *)&qword_1014987A8);
  }
  return result;
}

unint64_t sub_1000A2FA8()
{
  unint64_t result;

  result = qword_1014987B0;
  if (!qword_1014987B0)
  {
    result = swift_getWitnessTable(byte_100E29B30, &type metadata for NavigationVolumeEntity);
    atomic_store(result, (unint64_t *)&qword_1014987B0);
  }
  return result;
}

unint64_t sub_1000A2FF0()
{
  unint64_t result;

  result = qword_1014987B8;
  if (!qword_1014987B8)
  {
    result = swift_getWitnessTable(byte_100E29B58, &type metadata for NavigationVolumeEntity);
    atomic_store(result, (unint64_t *)&qword_1014987B8);
  }
  return result;
}

unint64_t sub_1000A3038()
{
  unint64_t result;

  result = qword_1014987C0;
  if (!qword_1014987C0)
  {
    result = swift_getWitnessTable(byte_100E29BB0, &type metadata for NavigationVolumeEntity);
    atomic_store(result, (unint64_t *)&qword_1014987C0);
  }
  return result;
}

uint64_t sub_1000A307C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = sub_1000A3244();
  result = UniqueAppEntity<>.id.getter(a1, v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_1000A30B8@<X0>(uint64_t a1@<X8>)
{
  return sub_100073694(&qword_101490D58, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_1014D4870, (uint64_t)sub_1000A216C, a1);
}

uint64_t sub_1000A30DC()
{
  return sub_100010D70(&qword_1014987C8, &qword_1014987D0, (const char *)&protocol conformance descriptor for EmptyResolverSpecification<A>);
}

uint64_t sub_1000A3108(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A2A08();
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_1000A3144()
{
  unint64_t result;

  result = qword_1014987D8;
  if (!qword_1014987D8)
  {
    result = swift_getWitnessTable(byte_100E29BE0, &type metadata for NavigationVolumeEntity);
    atomic_store(result, (unint64_t *)&qword_1014987D8);
  }
  return result;
}

uint64_t sub_1000A3188(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A3244();
  return UniqueAppEntity.displayRepresentation.getter(a1, v2);
}

uint64_t sub_1000A31C0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A3038();
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_1000A31FC()
{
  unint64_t result;

  result = qword_1014987E0;
  if (!qword_1014987E0)
  {
    result = swift_getWitnessTable("If7", &type metadata for NavigationVolumeQuery);
    atomic_store(result, (unint64_t *)&qword_1014987E0);
  }
  return result;
}

unint64_t sub_1000A3244()
{
  unint64_t result;

  result = qword_1014987E8[0];
  if (!qword_1014987E8[0])
  {
    result = swift_getWitnessTable(byte_100E299E0, &type metadata for NavigationVolumeEntity);
    atomic_store(result, qword_1014987E8);
  }
  return result;
}

uint64_t sub_1000A3288(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 16) = a1;
  v3 = type metadata accessor for LocalizedStringResource(0, a2);
  *(_QWORD *)(v2 + 24) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000A32E0, 0, 0);
}

uint64_t sub_1000A32E0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;

  v2 = *(_QWORD **)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  sub_100008B04(&qword_101498758);
  LocalizedStringResource.init(stringLiteral:)(0x4C20656D756C6F56, 0xEC0000006C657665);
  v3 = sub_100010D70(&qword_101498868, &qword_101498870, (const char *)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  v4 = sub_1000A1EF0();
  *v2 = _IntentUpdatableEntityProperty<>.init(title:get:set:intent:)(v1, &unk_101498858, 0, &unk_101498860, 0, &type metadata for NavigationVolumeEntity.UpdateIntent_value, v3, v4);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A33AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to UniqueAppEntityQuery.allEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_1000A2A50();
  *v4 = v2;
  v4[1] = sub_100073A34;
  return UniqueAppEntityQuery.allEntities()(a2, v5);
}

unint64_t sub_1000A3418()
{
  unint64_t result;

  result = qword_101498800;
  if (!qword_101498800)
  {
    result = swift_getWitnessTable(byte_100E29CD8, &type metadata for NavigationVolumeQuery);
    atomic_store(result, (unint64_t *)&qword_101498800);
  }
  return result;
}

unint64_t sub_1000A3460()
{
  unint64_t result;

  result = qword_101498808[0];
  if (!qword_101498808[0])
  {
    result = swift_getWitnessTable(byte_100E29D38, &type metadata for NavigationVolumeQuery);
    atomic_store(result, qword_101498808);
  }
  return result;
}

uint64_t sub_1000A34A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to UniqueAppEntityQuery.entities(for:)[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_1000A2A50();
  *v5 = v2;
  v5[1] = sub_100073B94;
  return UniqueAppEntityQuery.entities(for:)(a1, a2, v6);
}

uint64_t sub_1000A3510(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to UniqueAppEntityQuery.suggestedEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_1000A2A50();
  *v4 = v2;
  v4[1] = sub_1000742EC;
  return UniqueAppEntityQuery.suggestedEntities()(a2, v5);
}

unint64_t sub_1000A357C()
{
  unint64_t result;

  result = qword_101498820;
  if (!qword_101498820)
  {
    result = swift_getWitnessTable("Yd7", &type metadata for NavigationVolumeQuery);
    atomic_store(result, (unint64_t *)&qword_101498820);
  }
  return result;
}

unint64_t sub_1000A35C4()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_101498828;
  if (!qword_101498828)
  {
    v1 = sub_10000E5D4(qword_101498830);
    v2 = sub_1000A2FF0();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_101498828);
  }
  return result;
}

uint64_t sub_1000A3628(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_1000A2B70();
  *v5 = v2;
  v5[1] = sub_10000C0E0;
  return EntityQuery.results()(a1, a2, v6);
}

ValueMetadata *type metadata accessor for NavigationVolumeQuery()
{
  return &type metadata for NavigationVolumeQuery;
}

ValueMetadata *type metadata accessor for NavigationVolumeEntity()
{
  return &type metadata for NavigationVolumeEntity;
}

ValueMetadata *type metadata accessor for NavigationVolumeEntity.UpdateIntent_value()
{
  return &type metadata for NavigationVolumeEntity.UpdateIntent_value;
}

uint64_t getEnumTagSinglePayload for PlaceSummaryMetadata.UseCase(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for VoiceVolumeLevel(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000A37A0 + 4 * byte_100E29605[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000A37D4 + 4 * asc_100E29600[v4]))();
}

uint64_t sub_1000A37D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A37DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000A37E4);
  return result;
}

uint64_t sub_1000A37F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000A37F8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000A37FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A3804(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VoiceVolumeLevel()
{
  return &type metadata for VoiceVolumeLevel;
}

uint64_t sub_1000A3820()
{
  return sub_100010D70(&qword_101498848, &qword_101498850, (const char *)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

unint64_t sub_1000A384C(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10119A238, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t sub_1000A3894(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD v27[2];
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;

  v1 = type metadata accessor for InputConnectionBehavior(0, a1);
  v30 = *(_QWORD *)(v1 - 8);
  v31 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100008B04(&qword_1014964C8);
  __chkstk_darwin(v4);
  v6 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)v27 - v8;
  v10 = sub_100008B04(&qword_101494370);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for LocalizedStringResource(0, v11);
  v15 = *(_QWORD *)(v14 - 8);
  v29 = v14;
  __chkstk_darwin(v14);
  v17 = (char *)v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27[1] = sub_100008B04(&qword_101498878);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000016, 0x8000000100E46100);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  v28(v13, 1, 1, v14);
  v33 = 0;
  v18 = type metadata accessor for IntentDialog(0);
  v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
  v20 = v9;
  v19(v9, 1, 1, v18);
  v21 = v6;
  v19(v6, 1, 1, v18);
  v22 = enum case for InputConnectionBehavior.default(_:);
  v23 = v31;
  v27[0] = *(_QWORD *)(v30 + 104);
  ((void (*)(char *, _QWORD, uint64_t))v27[0])(v3, enum case for InputConnectionBehavior.default(_:), v31);
  v24 = sub_1000A2A08();
  v30 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v17, v13, &v33, v20, v21, v3, v24);
  sub_100008B04(&qword_101498880);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000026, 0x8000000100E46120);
  v28(v13, 1, 1, v29);
  v32 = 3;
  v19(v20, 1, 1, v18);
  v19(v21, 1, 1, v18);
  ((void (*)(char *, uint64_t, uint64_t))v27[0])(v3, v22, v23);
  v25 = sub_1000A1EF0();
  IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v17, v13, &v32, v20, v21, v3, &off_10119A2C8, v25);
  return v30;
}

uint64_t sub_1000A3B84@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  *a2 = v2;
  return swift_retain(v2);
}

void sub_1000A3B90(id a1)
{
  id v1;
  uint64_t v2;
  id v3;

  v1 = objc_msgSend(objc_alloc((Class)LSApplicationRecord), "initWithBundleIdentifier:allowPlaceholder:error:", CFSTR("com.apple.Maps"), 0, 0);
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "dataContainerURL"));
  v3 = (id)qword_1014C4E38;
  qword_1014C4E38 = v2;

}

void *sub_1000A3BF4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t *v2;
  void *v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;

  sub_1000A4274(v0 + 80, (uint64_t)&v6);
  sub_1000A4274((uint64_t)&v6, (uint64_t)&v7);
  if (!v7)
    return 0;
  v1 = *(_QWORD *)(v7 + 16);
  if (!v1)
    return 0;
  v2 = (unint64_t *)(v7 + 32);
  while (1)
  {
    v4 = *v2;
    v2 += 3;
    v3 = (void *)v4;
    if (v4 >= 3)
      break;
    if (!--v1)
      return 0;
  }
  sub_1000A42BC(v3);
  return v3;
}

void sub_1000A3C68(id a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  id v9;
  id v10;
  id v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t *v59;
  id v60;
  id v61;
  _BYTE v62[32];
  _OWORD v63[2];
  __int128 v64;
  uint64_t v65;

  v4 = type metadata accessor for NSFastEnumerationIterator(0);
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)&v6 = __chkstk_darwin(v4).n128_u64[0];
  v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend(a1, "value", v6);
  v59 = a2;
  if (!v9)
    goto LABEL_48;

  v58 = objc_msgSend(a1, "hasServerOverrideIdentifier");
  if (v58)
    v57 = objc_msgSend(a1, "serverOverrideIdentifier");
  else
    v57 = 0;
  v10 = objc_msgSend(a1, "formats");
  if (v10)
  {
    v56 = v5;
    v60 = a1;
    v11 = v10;
    NSArray.makeIterator()();
    v55 = v11;

    v12 = sub_1000125FC();
    dispatch thunk of IteratorProtocol.next()(&v64, v4, v12);
    if (v65)
    {
      v13 = _swiftEmptyArrayStorage;
      do
      {
        sub_10000BE60(&v64, v63);
        sub_100011E20((uint64_t)v63, (uint64_t)v62);
        v14 = sub_10000E4BC(0, &qword_1014988A0, GEOPDPlaceSummaryFormat_ptr);
        swift_dynamicCast(&v61, v62, (char *)&type metadata for Any + 8, v14, 7);
        v15 = v61;
        v16 = 0;
        switch(objc_msgSend(v61, "formatType"))
        {
          case 1u:
            goto LABEL_15;
          case 2u:
            v16 = 1;
            goto LABEL_15;
          case 3u:
            v16 = 2;
            goto LABEL_15;
          case 4u:
            v17 = objc_msgSend(v15, "tappableEntryIdentifier");
            if (!v17)
              goto LABEL_8;
            v16 = (uint64_t)v17;
LABEL_15:
            v18 = objc_msgSend(v15, "startIndex");
            v19 = objc_msgSend(v15, "endIndex");

            sub_10000BEAC(v63);
            if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
              v13 = sub_1000A81E0(0, v13[2] + 1, 1, v13);
            v21 = v13[2];
            v20 = v13[3];
            if (v21 >= v20 >> 1)
              v13 = sub_1000A81E0((_QWORD *)(v20 > 1), v21 + 1, 1, v13);
            v13[2] = v21 + 1;
            v22 = &v13[3 * v21];
            v22[4] = v16;
            v22[5] = v18;
            v22[6] = v19;
            break;
          default:
LABEL_8:

            sub_10000BEAC(v63);
            break;
        }
        dispatch thunk of IteratorProtocol.next()(&v64, v4, v12);
      }
      while (v65);
    }
    else
    {
      v13 = _swiftEmptyArrayStorage;
    }
    (*(void (**)(char *, uint64_t))(v56 + 8))(v8, v4);

    a1 = v60;
  }
  else
  {
    v13 = 0;
  }
  if (objc_msgSend(a1, "hasSupportMultiLineWrapping"))
    v56 = objc_msgSend(a1, "supportMultiLineWrapping");
  else
    v56 = 0;
  v23 = objc_msgSend(a1, "styleAttributes");
  if (!v23
    || (v24 = v23,
        *(_QWORD *)&v64 = 0,
        v25 = sub_10000E4BC(0, &qword_101498898, GEOStyleAttributes_ptr),
        static Array._conditionallyBridgeFromObjectiveC(_:result:)(v24, &v64, v25),
        v24,
        (v26 = v64) == 0))
  {
    v60 = 0;
    goto LABEL_35;
  }
  if ((unint64_t)v64 >> 62)
  {
    if ((uint64_t)v64 >= 0)
      v53 = v64 & 0xFFFFFFFFFFFFFF8;
    else
      v53 = v64;
    swift_bridgeObjectRetain(v64);
    v54 = _CocoaArrayWrapper.endIndex.getter(v53);
    swift_bridgeObjectRelease(v26);
    if (v54)
      goto LABEL_30;
LABEL_54:
    swift_bridgeObjectRelease(v26);
    v60 = 0;
    goto LABEL_35;
  }
  if (!*(_QWORD *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_54;
LABEL_30:
  if ((v26 & 0xC000000000000001) != 0)
  {
    v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v26);
  }
  else
  {
    if (!*(_QWORD *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_57;
    }
    v27 = *(id *)(v26 + 32);
  }
  v28 = v27;
  swift_bridgeObjectRelease(v26);
  v60 = objc_msgSend(objc_allocWithZone((Class)GEOFeatureStyleAttributes), "initWithGEOStyleAttributes:", v28);

LABEL_35:
  v29 = objc_msgSend(a1, "value");
  if (!v29)
  {
LABEL_57:

    swift_bridgeObjectRelease(v13);
    __break(1u);
    JUMPOUT(0x1000A4264);
  }
  v30 = v29;
  v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  v33 = v32;

  v34 = objc_msgSend(a1, "textColor");
  if (v34)
  {
    v35 = v34;
    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
    v38 = v37;

  }
  else
  {
    v36 = 0;
    v38 = 0;
  }
  v39 = objc_msgSend(a1, "symbolName");
  if (v39)
  {
    v40 = v39;
    v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
    v43 = v42;

  }
  else
  {
    v41 = 0;
    v43 = 0;
  }
  v44 = objc_msgSend(a1, "symbolColor");
  if (v44)
  {
    v45 = v44;
    v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
    v48 = v47;

  }
  else
  {
    v46 = 0;
    v48 = 0;
  }
  if (String.count.getter(v31, v33) < 1)
  {
    swift_bridgeObjectRelease(v33);

    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v48);
    swift_bridgeObjectRelease(v43);
    swift_bridgeObjectRelease(v38);
LABEL_48:
    v31 = 0;
    v33 = 0;
    v36 = 0;
    v38 = 0;
    v41 = 0;
    v43 = 0;
    v46 = 0;
    v48 = 0;
    v50 = 0;
    v49 = 0;
    v13 = 0;
    v51 = 0;
    v60 = 0;
    goto LABEL_49;
  }
  v49 = v58 ^ 1;
  v51 = v56;
  v50 = v57;
LABEL_49:
  v52 = v59;
  *v59 = v31;
  v52[1] = v33;
  v52[2] = v36;
  v52[3] = v38;
  v52[4] = v41;
  v52[5] = v43;
  v52[6] = v46;
  v52[7] = v48;
  v52[8] = v50;
  v52[9] = v49;
  v52[10] = (uint64_t)v13;
  v52[11] = v51;
  v52[12] = (uint64_t)v60;
}

uint64_t sub_1000A4274(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008B04(&qword_1014988A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id sub_1000A42BC(id result)
{
  if ((unint64_t)result >= 3)
    return result;
  return result;
}

void destroy for PlaceSummaryUnitString(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 80));

}

uint64_t initializeWithCopy for PlaceSummaryUnitString(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v7;
  v8 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v8;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v9 = *(void **)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v9;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  v10 = v9;
  return a1;
}

uint64_t assignWithCopy for PlaceSummaryUnitString(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v12;
  v13 = *(_QWORD *)(a1 + 80);
  v14 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v15 = *(void **)(a1 + 96);
  v16 = *(void **)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v16;
  v17 = v16;

  return a1;
}

uint64_t assignWithTake for PlaceSummaryUnitString(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v12 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease(v12);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v13 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);

  return a1;
}

uint64_t getEnumTagSinglePayload for PlaceSummaryUnitString(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlaceSummaryUnitString(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlaceSummaryUnitString()
{
  return &type metadata for PlaceSummaryUnitString;
}

ValueMetadata *type metadata accessor for PlaceSummaryUnitHikingTrailLength()
{
  return &type metadata for PlaceSummaryUnitHikingTrailLength;
}

uint64_t sub_1000A4634(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  id v37;
  void *v38;
  uint64_t v39;
  void *v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  char **v45;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v47;
  void *Strong;
  void *v49;
  id v50;
  void *v51;
  void *v52;
  void *v53;
  id v54;
  void *v55;
  uint64_t v56;
  void *v57;
  void *v58;
  uint64_t v59;
  id v60;
  void *v61;
  void *v62;
  void *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  char v77;
  uint64_t v78;
  void *v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD v87[4];

  v84 = a2;
  v6 = sub_100008B04((uint64_t *)&unk_10149AA90);
  __chkstk_darwin(v6);
  v8 = (char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v11 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for RefinementsBarButtonViewModel(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v86 = (uint64_t)&v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_100E29E98);
  v16 = swift_getKeyPath(&unk_100E29EC0);
  static Published.subscript.getter(v87, a3, KeyPath, v16);
  swift_release();
  swift_release();
  v17 = (_QWORD *)v87[0];
  v18 = *(_QWORD *)(v87[0] + 16);
  if (!v18)
    return swift_bridgeObjectRelease(v17);
  v82 = v3;
  v83 = a3;
  v19 = 0;
  v20 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v21 = *(_QWORD *)(v13 + 72);
  v22 = -v18;
  while ((static UUID.== infix(_:_:)((char *)v17 + v20, a1) & 1) == 0)
  {
    --v19;
    v20 += v21;
    if (v22 == v19)
      return swift_bridgeObjectRelease(v17);
  }
  swift_bridgeObjectRelease(v17);
  v24 = swift_getKeyPath(&unk_100E29E98);
  v25 = swift_getKeyPath(&unk_100E29EC0);
  static Published.subscript.getter(v87, v83, v24, v25);
  swift_release();
  swift_release();
  v26 = (void *)v87[0];
  v27 = -v19;
  if ((unint64_t)-v19 >= *(_QWORD *)(v87[0] + 16))
  {
    __break(1u);
LABEL_54:
    v8 = (char *)sub_10020D8BC((unint64_t)v8);
    *(_QWORD *)v19 = v8;
LABEL_15:
    if (v27 < *((_QWORD *)v8 + 2))
    {
      sub_1000A5048(v86, (uint64_t)&v8[v20]);
      ((void (*)(_QWORD *, _QWORD))v12)(v87, 0);
      swift_release();
      swift_release();
      v47 = v85;
      Strong = (void *)swift_unknownObjectWeakLoadStrong(v85);
      if (Strong)
      {
        v49 = Strong;
        objc_msgSend(Strong, "resultRefinementsBarDidUpdateViewModel:", v83);
        swift_unknownObjectRelease(v49);
      }
      v50 = objc_msgSend(v17, "toggle");
      if (!v50)
      {
LABEL_40:
        swift_unknownObjectRelease(v26);
        v28 = v86;
        goto LABEL_45;
      }
      v51 = v50;
      v52 = (void *)swift_unknownObjectWeakLoadStrong(v47);
      v28 = v86;
      if (!v52)
      {
        swift_unknownObjectRelease(v26);

        goto LABEL_45;
      }
      v53 = v52;
      objc_msgSend(v52, "resultRefinementsBarDidTapOnToggle:isSelected:", v51, *(unsigned __int8 *)(v86 + v9));
      swift_unknownObjectRelease(v26);

      v34 = v53;
      goto LABEL_44;
    }
    __break(1u);
LABEL_56:
    v17 = (_QWORD *)sub_10020D8BC((unint64_t)v17);
    *(_QWORD *)v19 = v17;
  }
  else
  {
    v28 = v86;
    sub_100021908(v87[0] + v20, v86);
    swift_bridgeObjectRelease(v26);
    v26 = *(void **)(v28 + *(int *)(v12 + 36));
    swift_unknownObjectRetain(v26);
    v29 = objc_opt_self(AllRefinementsViewModel);
    v30 = swift_dynamicCastObjCClass(v26, v29);
    if (v30)
    {
      v31 = v30;
      v32 = (void *)swift_unknownObjectWeakLoadStrong(v82 + OBJC_IVAR____TtC4Maps27ResultRefinementsController_delegate);
      if (v32)
      {
        v33 = v32;
        objc_msgSend(v32, "resultRefinementsBarDidTapOnSeeAllRefinements:", v31);
        swift_unknownObjectRelease(v26);
        v34 = v33;
LABEL_44:
        swift_unknownObjectRelease(v34);
        goto LABEL_45;
      }
LABEL_43:
      v34 = v26;
      goto LABEL_44;
    }
    v35 = objc_opt_self(GEOResultRefinement);
    v36 = (_QWORD *)swift_dynamicCastObjCClass(v26, v35);
    if (!v36)
      goto LABEL_43;
    v17 = v36;
    v37 = objc_msgSend(v36, "type");
    switch((unint64_t)v37)
    {
      case 1uLL:
        v85 = v82 + OBJC_IVAR____TtC4Maps27ResultRefinementsController_delegate;
        v38 = (void *)swift_unknownObjectWeakLoadStrong(v82 + OBJC_IVAR____TtC4Maps27ResultRefinementsController_delegate);
        v39 = v28;
        if (v38)
        {
          v40 = v38;
          objc_msgSend(v38, "increasResultRefinementsSelectionSequenceNumber");
          v41 = objc_msgSend(v40, "refinementsSelectionSequenceNumber");
          v42 = objc_msgSend(v41, "integerValue");
          swift_unknownObjectRelease(v40);

          v43 = v39 + *(int *)(v12 + 40);
          *(_QWORD *)v43 = v42;
          *(_BYTE *)(v43 + 8) = 0;
        }
        v9 = *(int *)(v12 + 24);
        *(_BYTE *)(v39 + v9) = (*(_BYTE *)(v39 + v9) & 1) == 0;
        v44 = swift_getKeyPath(&unk_100E29E98);
        v11 = (char *)swift_getKeyPath(&unk_100E29EC0);
        v12 = static Published.subscript.modify(v87, v83, v44, v11);
        v19 = (uint64_t)v45;
        v8 = *v45;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v45);
        *(_QWORD *)v19 = v8;
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          goto LABEL_15;
        goto LABEL_54;
      case 2uLL:
        v54 = objc_msgSend(v17, "multiSelect");
        if (!v54)
        {
          swift_unknownObjectRelease(v26);
          v71 = v86;
          return sub_10002194C(v71);
        }
        v55 = v54;
        v56 = sub_100020BFC();
        v57 = (void *)swift_unknownObjectWeakLoadStrong(v82 + OBJC_IVAR____TtC4Maps27ResultRefinementsController_delegate);
        if (v57)
        {
          v58 = v57;
          objc_msgSend(v57, "resultRefinementsBarDidTapOnMultiSelect:tappedAtIndex:", v55, (v56 << 63 >> 63) - v19);

          swift_unknownObjectRelease(v58);
        }
        else
        {

        }
        goto LABEL_40;
      case 3uLL:
        sub_1000A4FC0((uint64_t)v84, (uint64_t)v8);
        v59 = v85;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v85) == 1)
        {
          sub_1000A5008((uint64_t)v8);
          goto LABEL_43;
        }
        (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v8, v59);
        v64 = (_QWORD *)(v28 + *(int *)(v12 + 32));
        v65 = *v64;
        if (!*v64)
          goto LABEL_36;
        v66 = *(_QWORD *)(v65 + 16);
        if (!v66)
          goto LABEL_36;
        v84 = v64;
        v81 = v64[3];
        v67 = *(_QWORD *)(type metadata accessor for RefinementsBarButtonViewModel.Submenu.Element(0) - 8);
        v68 = v65 + ((*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80));
        v69 = *(_QWORD *)(v67 + 72);
        swift_bridgeObjectRetain(v65);
        v70 = 0;
        break;
      case 4uLL:
        if (MapsFeature_IsEnabled_SearchAndDiscovery(v37))
        {
          v60 = objc_msgSend(v17, "openOptions");
          if (v60)
          {
            v61 = v60;
            v62 = (void *)swift_unknownObjectWeakLoadStrong(v82 + OBJC_IVAR____TtC4Maps27ResultRefinementsController_delegate);
            if (v62)
            {
              v63 = v62;
              objc_msgSend(v62, "resultRefinementsBarDidTapOnOpenOptions:tappedAtIndex:", v61, 0);

              swift_unknownObjectRelease(v63);
            }
            else
            {

            }
          }
        }
        goto LABEL_43;
      default:
        goto LABEL_43;
    }
    while ((static UUID.== infix(_:_:)(v68, v11) & 1) == 0)
    {
      ++v70;
      v68 += v69;
      if (v66 == v70)
      {
        swift_bridgeObjectRelease(v65);
        v59 = v85;
        v28 = v86;
LABEL_36:
        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v59);
        goto LABEL_43;
      }
    }
    swift_bridgeObjectRelease(v65);
    v72 = v84;
    *v84 = v65;
    v72[1] = v70;
    v73 = v81;
    v72[2] = 0;
    v72[3] = v73;
    v74 = swift_getKeyPath(&unk_100E29E98);
    v75 = swift_getKeyPath(&unk_100E29EC0);
    v84 = (_QWORD *)static Published.subscript.modify(v87, v83, v74, v75);
    v19 = (uint64_t)v76;
    v17 = (_QWORD *)*v76;
    v77 = swift_isUniquelyReferenced_nonNull_native(*v76);
    *(_QWORD *)v19 = v17;
    if ((v77 & 1) == 0)
      goto LABEL_56;
  }
  v28 = v86;
  v78 = v82;
  if (v27 >= v17[2])
  {
    __break(1u);
    JUMPOUT(0x1000A4DC8);
  }
  sub_1000A5048(v86, (uint64_t)v17 + v20);
  ((void (*)(_QWORD *, _QWORD))v84)(v87, 0);
  swift_release();
  swift_release();
  v79 = (void *)swift_unknownObjectWeakLoadStrong(v78 + OBJC_IVAR____TtC4Maps27ResultRefinementsController_delegate);
  if (!v79)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v85);
    goto LABEL_43;
  }
  v80 = v79;
  objc_msgSend(v79, "resultRefinementsBarDidUpdateViewModel:", v83);
  swift_unknownObjectRelease(v80);
  swift_unknownObjectRelease(v26);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v85);
LABEL_45:
  v71 = v28;
  return sub_10002194C(v71);
}

id sub_1000A4F58()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ResultRefinementsController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ResultRefinementsController()
{
  return objc_opt_self(_TtC4Maps27ResultRefinementsController);
}

uint64_t sub_1000A4FC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008B04((uint64_t *)&unk_10149AA90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A5008(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008B04((uint64_t *)&unk_10149AA90);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000A5048(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RefinementsBarButtonViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t destroy for PlaceSummaryDynamicContextServerOverride(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return swift_bridgeObjectRelease(a1[1]);
}

uint64_t *_s4Maps40PlaceSummaryDynamicContextServerOverrideVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t *assignWithCopy for PlaceSummaryDynamicContextServerOverride(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for PlaceSummaryDynamicContextServerOverride(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for PlaceSummaryDynamicContextServerOverride()
{
  return &type metadata for PlaceSummaryDynamicContextServerOverride;
}

id sub_1000A5194(void *a1)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  char *v5;
  id result;
  id v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  id v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  id v44;
  _BYTE v45[32];
  _OWORD v46[2];
  __int128 v47;
  uint64_t v48;
  uint64_t v49[13];
  char v50[8];
  uint64_t v51;

  v2 = type metadata accessor for NSFastEnumerationIterator(0);
  v31 = *(_QWORD *)(v2 - 8);
  *(_QWORD *)&v3 = __chkstk_darwin(v2).n128_u64[0];
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = a1;
  result = objc_msgSend(a1, "serverDynamicContexts", v3);
  if (result)
  {
    v7 = result;
    NSArray.makeIterator()();
    v30 = v7;

    v8 = sub_1000125FC();
    dispatch thunk of IteratorProtocol.next()(&v47, v2, v8);
    if (v48)
    {
      v43 = _swiftEmptyArrayStorage;
      v9 = (char *)&type metadata for Any + 8;
      v33 = v2;
      v34 = (char *)&type metadata for Any + 8;
      v35 = v8;
      v36 = v5;
      do
      {
        sub_10000BE60(&v47, v46);
        sub_100011E20((uint64_t)v46, (uint64_t)v45);
        v10 = sub_10000E4BC(0, &qword_1014988E0, GEOPDPlaceSummaryLayoutUnitString_ptr);
        if (swift_dynamicCast(&v44, v45, v9, v10, 6))
        {
          v11 = v44;
          sub_1000A3C68(v44, v49);
          v12 = v49[0];
          v13 = v49[1];
          v14 = v49[3];
          v15 = v49[4];
          v16 = v49[5];
          v18 = v49[6];
          v17 = v49[7];
          v37 = v49[8];
          v38 = v49[2];
          v39 = v49[9];
          v40 = v49[10];
          v41 = v49[11];
          v42 = v49[12];

          sub_10000BEAC(v46);
          sub_10009D9D8((uint64_t)v49, (uint64_t)v50);
          if (v51)
          {
            if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) != 0)
              v19 = v43;
            else
              v19 = sub_1000A8318(0, v43[2] + 1, 1, v43);
            v21 = v19[2];
            v20 = v19[3];
            if (v21 >= v20 >> 1)
              v19 = sub_1000A8318((_QWORD *)(v20 > 1), v21 + 1, 1, v19);
            v19[2] = v21 + 1;
            v43 = v19;
            v22 = &v19[13 * v21];
            v22[4] = v12;
            v22[5] = v13;
            v22[6] = v38;
            v22[7] = v14;
            v22[8] = v15;
            v22[9] = v16;
            v22[10] = v18;
            v22[11] = v17;
            v22[12] = v37;
            *((_BYTE *)v22 + 104) = v39 & 1;
            v22[14] = v40;
            *((_BYTE *)v22 + 120) = v41 & 1;
            v22[16] = v42;
            v2 = v33;
          }
          v8 = v35;
          v5 = v36;
          v9 = v34;
        }
        else
        {
          sub_10000BEAC(v46);
        }
        dispatch thunk of IteratorProtocol.next()(&v47, v2, v8);
      }
      while (v48);
    }
    else
    {
      v43 = _swiftEmptyArrayStorage;
    }
    (*(void (**)(char *, uint64_t))(v31 + 8))(v5, v2);

    v23 = v32;
    v24 = objc_msgSend(v32, "mapItemIdentifiers");
    if (v24)
    {
      v25 = v24;
      v26 = sub_10000E4BC(0, (unint64_t *)&qword_10149AA00, GEOMapItemIdentifier_ptr);
      v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v25, v26);

      if ((unint64_t)v27 >> 62)
      {
        if (v27 < 0)
          v29 = v27;
        else
          v29 = v27 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v27);
        v28 = _CocoaArrayWrapper.endIndex.getter(v29);
        swift_bridgeObjectRelease(v27);
      }
      else
      {
        v28 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
      }

      if (v28 > 0)
        return (id)v27;
      swift_bridgeObjectRelease(v27);
      swift_bridgeObjectRelease(v43);
    }
    else
    {
      swift_bridgeObjectRelease(v43);

    }
    return 0;
  }
  __break(1u);
  return result;
}

id sub_1000A556C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  NSString v5;
  void *v6;
  id v7;

  v1 = OBJC_IVAR____TtC4Maps28CarSearchResultEVChargerView____lazy_storage___leadingIcon;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC4Maps28CarSearchResultEVChargerView____lazy_storage___leadingIcon);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC4Maps28CarSearchResultEVChargerView____lazy_storage___leadingIcon);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "init");
    objc_msgSend(v4, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    objc_msgSend(v4, "setContentMode:", 0);
    v3 = v4;
    v5 = String._bridgeToObjectiveC()();
    objc_msgSend(v3, "setAccessibilityIdentifier:", v5);

    v6 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v3;

    v2 = 0;
  }
  v7 = v2;
  return v3;
}

id sub_1000A5674()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  NSString v5;
  void *v6;
  id v7;

  v1 = OBJC_IVAR____TtC4Maps28CarSearchResultEVChargerView____lazy_storage___trailingIcon;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC4Maps28CarSearchResultEVChargerView____lazy_storage___trailingIcon);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC4Maps28CarSearchResultEVChargerView____lazy_storage___trailingIcon);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "init");
    objc_msgSend(v4, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v3 = v4;
    v5 = String._bridgeToObjectiveC()();
    objc_msgSend(v3, "setAccessibilityIdentifier:", v5);

    v6 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v3;

    v2 = 0;
  }
  v7 = v2;
  return v3;
}

id sub_1000A5734()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  NSString v5;
  void *v6;
  id v7;

  v1 = OBJC_IVAR____TtC4Maps28CarSearchResultEVChargerView____lazy_storage___chargerInfoLabel;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC4Maps28CarSearchResultEVChargerView____lazy_storage___chargerInfoLabel);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC4Maps28CarSearchResultEVChargerView____lazy_storage___chargerInfoLabel);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
    objc_msgSend(v4, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    objc_msgSend(v4, "setFont:", *(_QWORD *)(v0 + OBJC_IVAR____TtC4Maps28CarSearchResultEVChargerView_font));
    v3 = v4;
    v5 = String._bridgeToObjectiveC()();
    objc_msgSend(v3, "setAccessibilityIdentifier:", v5);

    v6 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v3;

    v2 = 0;
  }
  v7 = v2;
  return v3;
}

id sub_1000A580C()
{
  uint64_t v0;
  uint64_t v1;
  NSString v2;
  id v3;
  id v4;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC4Maps28CarSearchResultEVChargerView_leadingIconString + 8);
  swift_bridgeObjectRetain(v1);
  v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1);
  v3 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v2);

  if (v3)
  {
    v4 = objc_msgSend(v3, "CGImage");

    if (v4)
    {
      v3 = objc_msgSend(objc_allocWithZone((Class)UIImage), "initWithCGImage:scale:orientation:", v4, 2, 1.0);

    }
    else
    {
      return 0;
    }
  }
  return v3;
}

id sub_1000A58E4(double a1, double a2, double a3, double a4)
{
  char *v4;
  char *v9;
  char *v10;
  uint64_t v11;
  id v12;
  char *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  NSString v18;
  objc_super v20;

  v9 = &v4[OBJC_IVAR____TtC4Maps28CarSearchResultEVChargerView_leadingIconString];
  strcpy(&v4[OBJC_IVAR____TtC4Maps28CarSearchResultEVChargerView_leadingIconString], "powerplug.fill");
  v9[15] = -18;
  v10 = &v4[OBJC_IVAR____TtC4Maps28CarSearchResultEVChargerView_trailingIconString];
  *(_QWORD *)v10 = 0xD000000000000019;
  *((_QWORD *)v10 + 1) = 0x8000000100E43B20;
  v11 = OBJC_IVAR____TtC4Maps28CarSearchResultEVChargerView_horizontal;
  v12 = objc_allocWithZone((Class)UIStackView);
  v13 = v4;
  *(_QWORD *)&v4[v11] = objc_msgSend(v12, "init");
  v14 = (void *)objc_opt_self(UIFont);
  v15 = objc_msgSend(v14, "_mapsCar_fontForTextStyle:weight:", UIFontTextStyleCaption2, UIFontWeightRegular);
  if (!v15)
    v15 = objc_msgSend(v14, "preferredFontForTextStyle:", UIFontTextStyleCaption2);
  *(_QWORD *)&v13[OBJC_IVAR____TtC4Maps28CarSearchResultEVChargerView_font] = v15;
  *(_QWORD *)&v13[OBJC_IVAR____TtC4Maps28CarSearchResultEVChargerView____lazy_storage___leadingIcon] = 0;
  *(_QWORD *)&v13[OBJC_IVAR____TtC4Maps28CarSearchResultEVChargerView____lazy_storage___trailingIcon] = 0;
  *(_QWORD *)&v13[OBJC_IVAR____TtC4Maps28CarSearchResultEVChargerView____lazy_storage___chargerInfoLabel] = 0;

  v20.receiver = v13;
  v20.super_class = (Class)type metadata accessor for CarSearchResultEVChargerView();
  v16 = objc_msgSendSuper2(&v20, "initWithFrame:", a1, a2, a3, a4);
  sub_1000A5AD0();
  v17 = v16;
  v18 = String._bridgeToObjectiveC()();
  objc_msgSend(v17, "setAccessibilityIdentifier:", v18);

  return v17;
}

void sub_1000A5AD0()
{
  char *v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  Class isa;

  objc_msgSend(v0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v1 = *(void **)&v0[OBJC_IVAR____TtC4Maps28CarSearchResultEVChargerView_horizontal];
  objc_msgSend(v1, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v1, "setAxis:", 0);
  objc_msgSend(v1, "setSpacing:", 2.0);
  objc_msgSend(v0, "addSubview:", v1);
  v2 = sub_1000A556C();
  objc_msgSend(v1, "addArrangedSubview:", v2);

  v3 = sub_1000A5734();
  objc_msgSend(v1, "addArrangedSubview:", v3);

  v4 = sub_1000A5674();
  objc_msgSend(v1, "addArrangedSubview:", v4);

  v5 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithFont:", *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps28CarSearchResultEVChargerView_font]);
  v6 = sub_1000A5674();
  objc_msgSend(v6, "setPreferredSymbolConfiguration:", v5);

  v7 = sub_1000A556C();
  objc_msgSend(v7, "setPreferredSymbolConfiguration:", v5);

  v8 = (void *)objc_opt_self(NSLayoutConstraint);
  v9 = sub_100008B04((uint64_t *)&unk_101493B10);
  v10 = swift_allocObject(v9, 80, 7);
  *(_OWORD *)(v10 + 16) = xmmword_100E29F10;
  v11 = objc_msgSend(v1, "leadingAnchor");
  v12 = objc_msgSend(v0, "leadingAnchor");
  v13 = objc_msgSend(v11, "constraintEqualToAnchor:", v12);

  *(_QWORD *)(v10 + 32) = v13;
  v14 = objc_msgSend(v1, "trailingAnchor");
  v15 = objc_msgSend(v0, "trailingAnchor");
  v16 = objc_msgSend(v14, "constraintEqualToAnchor:", v15);

  *(_QWORD *)(v10 + 40) = v16;
  v17 = objc_msgSend(v1, "topAnchor");
  v18 = objc_msgSend(v0, "topAnchor");
  v19 = objc_msgSend(v17, "constraintEqualToAnchor:", v18);

  *(_QWORD *)(v10 + 48) = v19;
  v20 = objc_msgSend(v1, "bottomAnchor");
  v21 = objc_msgSend(v0, "bottomAnchor");
  v22 = objc_msgSend(v20, "constraintEqualToAnchor:constant:", v21, 4.0);

  *(_QWORD *)(v10 + 56) = v22;
  v23 = sub_1000A556C();
  v24 = objc_msgSend(v23, "widthAnchor");

  v25 = objc_msgSend(v24, "constraintEqualToConstant:", 8.0);
  *(_QWORD *)(v10 + 64) = v25;
  v26 = sub_1000A556C();
  v27 = objc_msgSend(v26, "heightAnchor");

  v28 = objc_msgSend(v27, "constraintEqualToConstant:", 12.0);
  *(_QWORD *)(v10 + 72) = v28;
  specialized Array._endMutation()(v29);
  sub_1000174D4();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v10);
  objc_msgSend(v8, "activateConstraints:", isa);

}

void sub_1000A5FB0(uint64_t a1, int a2)
{
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  id v16;

  v4 = sub_1000A5734();
  objc_msgSend(v4, "setTextColor:", a1);

  v5 = sub_1000A5674();
  v6 = objc_msgSend(v5, "image");
  if (v6)
  {
    v7 = v6;
    v8 = objc_msgSend(v6, "imageWithRenderingMode:", 2);

  }
  else
  {
    v8 = 0;
  }
  objc_msgSend(v5, "setImage:", v8);
  objc_msgSend(v5, "setTintColor:", a1);

  if (a2 == 1)
  {
    v9 = sub_1000A5734();
    v10 = (void *)objc_opt_self(UIColor);
    v11 = objc_msgSend(v10, "systemGreenColor");
    objc_msgSend(v9, "setTextColor:", v11);

    v12 = sub_1000A5674();
    v13 = objc_msgSend(v10, "systemGreenColor");
    v14 = objc_msgSend(v12, "image");
    if (v14)
    {
      v15 = v14;
      v16 = objc_msgSend(v14, "imageWithRenderingMode:", 2);

    }
    else
    {
      v16 = 0;
    }
    objc_msgSend(v12, "setImage:", v16);
    objc_msgSend(v12, "setTintColor:", v13);

  }
}

void sub_1000A61EC(int a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  id v7;
  NSString v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  NSString v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  id v22;

  v7 = sub_1000A5734();
  v8 = String._bridgeToObjectiveC()();
  objc_msgSend(v7, "setText:", v8);

  v9 = sub_1000A5674();
  objc_msgSend(v9, "setHidden:", 1);

  v10 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v10 = a2 & 0xFFFFFFFFFFFFLL;
  if (v10)
  {
    if (a1)
    {
      if (a1 != 1)
      {
LABEL_10:
        v16 = sub_1000A556C();
        v17 = sub_1000A580C();
        objc_msgSend(v16, "setImage:", v17);

        v18 = sub_1000A556C();
        v19 = objc_msgSend((id)objc_opt_self(UIColor), "tertiaryLabelColor");
        v20 = objc_msgSend(v18, "image");
        if (v20)
        {
          v21 = v20;
          v22 = objc_msgSend(v20, "imageWithRenderingMode:", 2);

        }
        else
        {
          v22 = 0;
        }
        objc_msgSend(v18, "setImage:", v22);
        objc_msgSend(v18, "setTintColor:", v19);

        return;
      }
      v11 = sub_1000A5674();
      objc_msgSend(v11, "setHidden:", 0);

      v12 = sub_1000A5674();
      v13 = *(_QWORD *)(v3 + OBJC_IVAR____TtC4Maps28CarSearchResultEVChargerView_trailingIconString + 8);
      swift_bridgeObjectRetain(v13);
      v14 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v13);
      v15 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v14);

    }
    else
    {
      v12 = sub_1000A556C();
      v15 = sub_1000A580C();
    }
    objc_msgSend(v12, "setImage:", v15);

    goto LABEL_10;
  }
}

id sub_1000A64EC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CarSearchResultEVChargerView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CarSearchResultEVChargerView()
{
  return objc_opt_self(_TtC4Maps28CarSearchResultEVChargerView);
}

void sub_1000A65CC()
{
  char *v0;
  char *v1;
  char *v2;
  uint64_t v3;
  void *v4;
  id v5;

  v1 = &v0[OBJC_IVAR____TtC4Maps28CarSearchResultEVChargerView_leadingIconString];
  strcpy(&v0[OBJC_IVAR____TtC4Maps28CarSearchResultEVChargerView_leadingIconString], "powerplug.fill");
  v1[15] = -18;
  v2 = &v0[OBJC_IVAR____TtC4Maps28CarSearchResultEVChargerView_trailingIconString];
  *(_QWORD *)v2 = 0xD000000000000019;
  *((_QWORD *)v2 + 1) = 0x8000000100E43B20;
  v3 = OBJC_IVAR____TtC4Maps28CarSearchResultEVChargerView_horizontal;
  *(_QWORD *)&v0[v3] = objc_msgSend(objc_allocWithZone((Class)UIStackView), "init");
  v4 = (void *)objc_opt_self(UIFont);
  v5 = objc_msgSend(v4, "_mapsCar_fontForTextStyle:weight:", UIFontTextStyleCaption2, UIFontWeightRegular);
  if (!v5)
    v5 = objc_msgSend(v4, "preferredFontForTextStyle:", UIFontTextStyleCaption2);
  *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps28CarSearchResultEVChargerView_font] = v5;
  *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps28CarSearchResultEVChargerView____lazy_storage___leadingIcon] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps28CarSearchResultEVChargerView____lazy_storage___trailingIcon] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps28CarSearchResultEVChargerView____lazy_storage___chargerInfoLabel] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100E41970, "Maps/CarSearchResultEVChargerView.swift", 39, 2, 59, 0);
  __break(1u);
}

ValueMetadata *type metadata accessor for MapsAXContainerViewModifier()
{
  return &type metadata for MapsAXContainerViewModifier;
}

uint64_t sub_1000A675C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1010677C0, 1);
}

uint64_t sub_1000A6774@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000A67D4(a1, &qword_101498948, (void (*)(__n128))&static AccessibilityChildBehavior.contain.getter, &qword_101498950, &qword_101498958, a2);
}

uint64_t sub_1000A6798()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t sub_1000A67B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000A67D4(a1, &qword_101498970, (void (*)(__n128))&static AccessibilityChildBehavior.combine.getter, &qword_101498978, &qword_101498980, a2);
}

uint64_t sub_1000A67D4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X3>, void (*a3)(__n128)@<X4>, uint64_t *a4@<X5>, unint64_t *a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t OpaqueTypeConformance2;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];

  v30 = a5;
  v31 = a1;
  v33 = a6;
  v10 = type metadata accessor for AccessibilityChildBehavior(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100008B04(a2);
  v32 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(v6 + 8);
  v29 = *(_QWORD *)v6;
  v19 = *(_BYTE *)(v6 + 16);
  a3(v15);
  v20 = sub_100008B04(a4);
  v21 = sub_1000A6B74(v30, a4);
  View.accessibilityElement(children:)(v13, v20, v21);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  sub_1000D175C(v29, v18, v19);
  v23 = v22;
  v25 = v24;
  v34[0] = v20;
  v34[1] = v21;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v34, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  View.accessibilityIdentifier(_:)(v23, v25, v14, OpaqueTypeConformance2);
  swift_bridgeObjectRelease(v25);
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v17, v14);
}

uint64_t destroy for MapsAccessibilityString(uint64_t a1)
{
  return sub_10006E27C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s4Maps23MapsAccessibilityStringOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100080AC4(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for MapsAccessibilityString(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100080AC4(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_10006E27C(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for MapsAccessibilityString(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_10006E27C(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for MapsAccessibilityString(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF3 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 243);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 0xD)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MapsAccessibilityString(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF2)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 243;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xF3)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xF3)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MapsAXCombinedViewModifier()
{
  return &type metadata for MapsAXCombinedViewModifier;
}

uint64_t sub_1000A6AE8()
{
  return sub_1000A6BE8(&qword_101498960, &qword_101498968, &qword_101498950, &qword_101498958);
}

unint64_t sub_1000A6B1C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10149CE30;
  if (!qword_10149CE30)
  {
    v1 = type metadata accessor for AccessibilityAttachmentModifier(255);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for AccessibilityAttachmentModifier, v1);
    atomic_store(result, (unint64_t *)&qword_10149CE30);
  }
  return result;
}

uint64_t sub_1000A6B64(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1010677E8, 1);
}

uint64_t sub_1000A6B74(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_10000E5D4(a2);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for _ViewModifier_Content<A>, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000A6BB4()
{
  return sub_1000A6BE8(&qword_101498988, &qword_101498990, &qword_101498978, &qword_101498980);
}

uint64_t sub_1000A6BE8(unint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    v8 = sub_10000E5D4(a2);
    v10[0] = sub_10000E5D4(a3);
    v10[1] = sub_1000A6B74(a4, a3);
    v9[0] = swift_getOpaqueTypeConformance2(v10, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    v9[1] = sub_1000A6B1C();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for PlaceSummaryUnitEVChargersNumber()
{
  return &type metadata for PlaceSummaryUnitEVChargersNumber;
}

id sub_1000A6CA4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC4Maps41HomeListFeatureDiscoverySectionController____lazy_storage___featureDiscoveryDataProvider;
  v2 = *(void **)(v0
                + OBJC_IVAR____TtC4Maps41HomeListFeatureDiscoverySectionController____lazy_storage___featureDiscoveryDataProvider);
  if (v2)
  {
    v3 = *(id *)(v0
               + OBJC_IVAR____TtC4Maps41HomeListFeatureDiscoverySectionController____lazy_storage___featureDiscoveryDataProvider);
  }
  else
  {
    v4 = sub_1000A6D04(v0);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_1000A6D04(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *Strong;
  id v5;
  void *v6;
  id v7;
  _QWORD v9[5];
  _BYTE v10[32];

  v2 = objc_msgSend(objc_allocWithZone((Class)FeatureDiscoveryDataProvider), "init");
  v3 = a1 + OBJC_IVAR____TtC4Maps25HomeListSectionController_configuration;
  sub_1000AB280(v3, v9);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v10);
  sub_1000AB2BC((uint64_t)v9);
  if (Strong)
  {
    v5 = objc_msgSend(Strong, "homeTransitPayActionDelegate");
    swift_unknownObjectRelease(Strong);
  }
  else
  {
    v5 = 0;
  }
  objc_msgSend(v2, "setTransitPayActionDelegate:", v5);
  swift_unknownObjectRelease(v5);
  sub_1000AB280(v3, v9);
  v6 = (void *)swift_unknownObjectWeakLoadStrong(v10);
  sub_1000AB2BC((uint64_t)v9);
  if (v6)
  {
    v7 = objc_msgSend(v6, "homeOfflineMapsDiscoveryActionDelegate");
    swift_unknownObjectRelease(v6);
  }
  else
  {
    v7 = 0;
  }
  objc_msgSend(v2, "setOfflineMapsDiscoveryActionDelegate:", v7);
  swift_unknownObjectRelease(v7);
  return v2;
}

void sub_1000A6E48()
{
  uint64_t v0;

  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC4Maps41HomeListFeatureDiscoverySectionController____lazy_storage___featureDiscoveryDataProvider));
}

id sub_1000A6E58()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HomeListFeatureDiscoverySectionController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for HomeListFeatureDiscoverySectionController()
{
  return objc_opt_self(_TtC4Maps41HomeListFeatureDiscoverySectionController);
}

uint64_t sub_1000A6EB8()
{
  uint64_t v0;
  uint64_t v1;
  id v2;

  v0 = sub_100008B04((uint64_t *)&unk_101493B10);
  v1 = swift_allocObject(v0, 40, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100E23F50;
  v2 = sub_1000A6CA4();
  *(_QWORD *)(v1 + 32) = v2;
  specialized Array._endMutation()(v2);
  return v1;
}

double sub_1000A6F18@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

_QWORD *sub_1000A6F28()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  id v5;
  _QWORD *v6;

  v1 = sub_1000A6CA4();
  v2 = objc_msgSend(v1, "features");

  v3 = sub_10000E4BC(0, &qword_1014989C8, &off_1011961B0);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  v5 = v0;
  v6 = sub_1000A965C(v4);
  swift_bridgeObjectRelease(v4);

  return v6;
}

_QWORD *sub_1000A7094(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100008B04(&qword_101498A30);
      v11 = (_QWORD *)swift_allocObject(v10, v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * v12 - 64;
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= (_QWORD *)((char *)a4 + v8 + 32))
          memmove(v13, a4 + 4, v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1000A9484(0, v8, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000A718C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100008B04(&qword_101498A28);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000A9394(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000A7298(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1000A9198(a1, a2, a3, a4, &qword_101498A18);
}

_QWORD *sub_1000A72A4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100008B04((uint64_t *)&unk_101499120);
      v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4])
          memmove(v14, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000A9BA8(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000A73B0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1000A73BC(a1, a2, a3, a4, &qword_101498AA0);
}

_QWORD *sub_1000A73BC(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      v11 = sub_100008B04(a5);
      v12 = (_QWORD *)swift_allocObject(v11, 16 * v10 + 32, 7);
      v13 = j__malloc_size(v12);
      v14 = v13 - 32;
      if (v13 < 32)
        v14 = v13 - 17;
      v12[2] = v9;
      v12[3] = 2 * (v14 >> 4);
      v15 = v12 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v12 = _swiftEmptyArrayStorage;
      v15 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v12 != a4 || v15 >= &a4[2 * v9 + 4])
          memmove(v15, a4 + 4, 16 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000AA54C(0, v9, (char *)v15, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v12;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000A74C4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000A7EA8(a1, a2, a3, a4, &qword_101498A68, (uint64_t (*)(_QWORD))&type metadata accessor for Date);
}

_QWORD *sub_1000A74D8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100008B04(&qword_101498A58);
      v11 = (_QWORD *)swift_allocObject(v10, (v9 << 6) | 0x20, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 + 31;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 6);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[8 * v8 + 4])
          memmove(v14, a4 + 4, v8 << 6);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000A9F68(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000A75E4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100008B04((uint64_t *)&unk_10149BBF0);
      v11 = (_QWORD *)swift_allocObject(v10, 80 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 80);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[10 * v8 + 4])
          memmove(v13, a4 + 4, 80 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1000A9D8C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000A7700(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100008B04(&qword_10149BB40);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000A9E80(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000A780C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100008B04(&qword_101498A60);
      v11 = (_QWORD *)swift_allocObject(v10, 88 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 88);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[11 * v8 + 4])
          memmove(v13, a4 + 4, 88 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1000A9C9C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000A7934(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100008B04(&qword_101498A50);
      v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4])
          memmove(v14, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000AA058(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000A7A40(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1000A7D8C(a1, a2, a3, a4, &qword_101498A10);
}

uint64_t sub_1000A7A4C(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100008B04(&qword_101498AB8);
  v11 = *(_QWORD *)(sub_100008B04(&qword_101494828) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
    goto LABEL_29;
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = sub_100008B04(&qword_101494828);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v15 + v20;
  if ((a1 & 1) != 0)
  {
    v22 = a4 + v20;
    if ((unint64_t)v15 < a4 || v21 >= v22 + *(_QWORD *)(v19 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v20, v22, v8, v18);
    }
    else if (v15 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v20);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000AA33C(0, v8, v21, a4);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v15;
}

_QWORD *sub_1000A7C5C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100008B04(&qword_101498AB0);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1000AA458(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000A7D80(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1000A7D8C(a1, a2, a3, a4, &qword_101498AA8);
}

_QWORD *sub_1000A7D8C(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      v11 = sub_100008B04(a5);
      v12 = (_QWORD *)swift_allocObject(v11, 4 * v10 + 32, 7);
      v13 = j__malloc_size(v12);
      v14 = v13 - 32;
      if (v13 < 32)
        v14 = v13 - 29;
      v12[2] = v9;
      v12[3] = 2 * (v14 >> 2);
      v15 = v12 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v12 = _swiftEmptyArrayStorage;
      v15 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v12 != a4 || v15 >= (_QWORD *)((char *)a4 + 4 * v9 + 32))
          memmove(v15, a4 + 4, 4 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000AA254(0, v9, (char *)v15, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v12;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000A7E94(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000A7EA8(a1, a2, a3, a4, &qword_1014989D8, type metadata accessor for PlaceSummaryViewModelUnit);
}

uint64_t sub_1000A7EA8(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100008B04(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(_QWORD *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000AAD74(0, v11, v24, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

uint64_t sub_1000A80B4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000A7EA8(a1, a2, a3, a4, &qword_101498AC8, (uint64_t (*)(_QWORD))&type metadata accessor for GridItem);
}

_QWORD *sub_1000A80C8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100008B04(&qword_101496A30);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000A9E80(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000A81D4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1000A73BC(a1, a2, a3, a4, &qword_10149BBE0);
}

_QWORD *sub_1000A81E0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100008B04(&qword_101498A20);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1000A92A0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000A8304(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000A7EA8(a1, a2, a3, a4, &qword_101498A80, type metadata accessor for RefinementsBarButtonViewModel);
}

_QWORD *sub_1000A8318(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100008B04(&qword_101498A40);
      v11 = (_QWORD *)swift_allocObject(v10, 104 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 104);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[13 * v8 + 4])
          memmove(v13, a4 + 4, 104 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1000AA634(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000A8440(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100008B04((uint64_t *)&unk_10149A2E0);
      v11 = (_QWORD *)swift_allocObject(v10, 48 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[6 * v8 + 4])
          memmove(v13, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1000A9568(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000A8564(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100008B04(&qword_10149C0A0);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000AA724(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000A8670(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100008B04(&qword_101498A70);
      v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4])
          memmove(v14, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000AA82C(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000A877C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100008B04(&qword_10149BAD0);
      v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v8 + 4])
          memmove(v13, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1000AA148(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000A889C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100008B04((uint64_t *)&unk_10149C0F0);
      v11 = (_QWORD *)swift_allocObject(v10, (v9 << 6) | 0x20, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 + 31;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 6);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[8 * v8 + 4])
          memmove(v14, a4 + 4, v8 << 6);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000AA91C(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000A89A8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100008B04(&qword_101492BF0);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000A98A4(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000A8AB4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000A7EA8(a1, a2, a3, a4, &qword_1014989E0, type metadata accessor for MapsElevationChartViewModel.ElevationDatum);
}

uint64_t sub_1000A8AC8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000A7EA8(a1, a2, a3, a4, &qword_101498A88, type metadata accessor for PlaceSummaryViewModelLine);
}

uint64_t sub_1000A8ADC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000A7EA8(a1, a2, a3, a4, &qword_101498A90, type metadata accessor for PlaceSummaryViewModelActionButtons.Button);
}

uint64_t sub_1000A8AF0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000A7EA8(a1, a2, a3, a4, &qword_101498A98, type metadata accessor for PlaceSummaryViewModelRefinementButtons.Button);
}

uint64_t sub_1000A8B04(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000A7EA8(a1, a2, a3, a4, &qword_101498A78, type metadata accessor for RefinementsBarButtonViewModel.Submenu.Element);
}

_QWORD *sub_1000A8B18(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100008B04(&qword_101498AC0);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000AAE8C(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000A8C24(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100008B04(&qword_101498A48);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000AAF94(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000A8D30(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100008B04(&qword_101498A38);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000AB190(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000A8E3C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100008B04(&qword_101498A08);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1000AB09C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000A8F60(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100008B04(&qword_1014989E8);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000A9994(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000A906C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100008B04(&qword_1014989F8);
      v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v8 + 4])
          memmove(v13, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1000A9A9C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000A918C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1000A9198(a1, a2, a3, a4, &qword_101498A00);
}

_QWORD *sub_1000A9198(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      v11 = sub_100008B04(a5);
      v12 = (_QWORD *)swift_allocObject(v11, v10 + 32, 7);
      v13 = j__malloc_size(v12);
      v12[2] = v9;
      v12[3] = 2 * v13 - 64;
      v14 = v12 + 4;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v12 != a4 || v14 >= (_QWORD *)((char *)a4 + v9 + 32))
          memmove(v14, a4 + 4, v9);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v12 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1000A9484(0, v9, (char *)v14, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v12;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000A928C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000A7EA8(a1, a2, a3, a4, (uint64_t *)&unk_10149BBC0, type metadata accessor for PlaceEntity);
}

uint64_t sub_1000A92A0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 24 * a1 + 32;
  v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000A9394(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_1000A9484(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if ((v4 & 0x8000000000000000) != 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000A9568(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 48 * a1 + 32;
  v6 = a3 + 48 * v4;
  if (v5 >= v6 || v5 + 48 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

_QWORD *sub_1000A965C(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t i;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  unint64_t v15;
  unint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_20;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v2)
  {
    v26 = v1 & 0xC000000000000001;
    v3 = _swiftEmptyArrayStorage;
    for (i = 4; ; ++i)
    {
      v5 = v26 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v1) : *(id *)(v1 + 8 * i);
      v6 = v5;
      v7 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v8 = objc_msgSend(v5, "_maps_diffableDataSourceIdentifier");
      if (v8)
      {
        v9 = v8;
        v10 = v3;
        v11 = v1;
        v12 = v2;
        v13 = sub_1001FD8EC();
        v14 = objc_msgSend(v13, "identifierPathByAppendingIdentifier:", v9);

        v2 = v12;
        v1 = v11;
        v3 = v10;
        v7 = i - 3;

        *(_QWORD *)&v25 = &type metadata for HomeListFeatureDiscoveryCellModel;
        *((_QWORD *)&v25 + 1) = sub_1000AAC20();
        *(_QWORD *)&v23 = v14;
        *((_QWORD *)&v23 + 1) = v6;
LABEL_13:
        v20 = v23;
        v21 = v24;
        v22 = v25;
        if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
          v3 = sub_1000A8440(0, v3[2] + 1, 1, v3);
        v16 = v3[2];
        v15 = v3[3];
        if (v16 >= v15 >> 1)
          v3 = sub_1000A8440((_QWORD *)(v15 > 1), v16 + 1, 1, v3);
        v3[2] = v16 + 1;
        v17 = &v3[6 * v16];
        v17[3] = v21;
        v17[4] = v22;
        v17[2] = v20;
        goto LABEL_5;
      }
      v24 = 0u;
      v25 = 0u;
      v23 = 0u;

      if ((_QWORD)v23)
        goto LABEL_13;
      sub_1000AABE0((uint64_t)&v23);
LABEL_5:
      if (v7 == v2)
      {
        swift_bridgeObjectRelease(v1);
        return v3;
      }
    }
    __break(1u);
LABEL_20:
    if (v1 < 0)
      v18 = v1;
    else
      v18 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v18);
  }
  swift_bridgeObjectRelease(v1);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000A98A4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000A9994(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 16 * a1 + 32;
    v7 = a3 + 16 * v4;
    if (v6 >= v7 || v6 + 16 * v4 <= a3)
    {
      sub_100008B04(&qword_1014989F0);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000A9A9C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 40 * a1 + 32;
  v7 = a3 + 40 * v4;
  if (v6 >= v7 || v6 + 40 * v4 <= a3)
  {
    sub_100008B04(&qword_10149BB20);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000A9BA8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000A9C9C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 88 * a1 + 32;
  v6 = a3 + 88 * v4;
  if (v5 >= v6 || v5 + 88 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000A9D8C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 80 * a1 + 32;
  v6 = a3 + 80 * v4;
  if (v5 >= v6 || v5 + 80 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_1000A9E80(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000A9F68(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + (a1 << 6) + 32;
    v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000AA058(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000AA148(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 40 * a1 + 32;
  v7 = a3 + 40 * v4;
  if (v6 >= v7 || v6 + 40 * v4 <= a3)
  {
    sub_100008B04(&qword_101497910);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_1000AA254(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 4 * a1 + 32);
    v6 = 4 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000AA33C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(sub_100008B04(&qword_101494828) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 72);
  v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  v12 = v10 * v4;
  v13 = a3 + v12;
  v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000AA458(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 24 * a1 + 32;
  v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_1000AA54C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = 16 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000AA634(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 104 * a1 + 32;
  v6 = a3 + 104 * v4;
  if (v5 >= v6 || v5 + 104 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000AA724(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 16 * a1 + 32;
    v7 = a3 + 16 * v4;
    if (v6 >= v7 || v6 + 16 * v4 <= a3)
    {
      sub_100008B04(&qword_101494000);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000AA82C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000AA91C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + (a1 << 6) + 32;
    v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

id sub_1000AAA0C()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  Class isa;
  id v10;
  id v11;
  uint64_t v13;

  v0 = (void *)objc_opt_self(NSCollectionLayoutDimension);
  v1 = objc_msgSend(v0, "fractionalWidthDimension:", 1.0);
  objc_msgSend((id)objc_opt_self(FeatureDiscoveryCollectionViewCell), "estimatedHeightForContext:", 0);
  v2 = objc_msgSend(v0, "estimatedDimension:");
  v3 = objc_msgSend((id)objc_opt_self(NSCollectionLayoutSize), "sizeWithWidthDimension:heightDimension:", v1, v2);

  v4 = objc_msgSend((id)objc_opt_self(NSCollectionLayoutItem), "itemWithLayoutSize:", v3);
  v5 = (void *)objc_opt_self(NSCollectionLayoutGroup);
  v6 = sub_100008B04((uint64_t *)&unk_101493B10);
  v7 = swift_allocObject(v6, 40, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100E23F50;
  *(_QWORD *)(v7 + 32) = v4;
  v13 = v7;
  specialized Array._endMutation()(v7);
  sub_10000E4BC(0, (unint64_t *)&qword_101498C50, NSCollectionLayoutItem_ptr);
  v8 = v4;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v13);
  v10 = objc_msgSend(v5, "verticalGroupWithLayoutSize:subitems:", v3, isa);

  v11 = objc_msgSend((id)objc_opt_self(NSCollectionLayoutSection), "sectionWithGroup:", v10);
  return v11;
}

uint64_t sub_1000AABE0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008B04(&qword_10149B500);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000AAC20()
{
  unint64_t result;

  result = qword_1014989D0;
  if (!qword_1014989D0)
  {
    result = swift_getWitnessTable(byte_100E32A68, &type metadata for HomeListFeatureDiscoveryCellModel);
    atomic_store(result, (unint64_t *)&qword_1014989D0);
  }
  return result;
}

id *sub_1000AAC64(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v4;
  id v5;
  id v7[5];
  __int128 v8;
  _OWORD v9[4];
  __int128 v10;
  __int128 v11;
  __int128 v12;

  sub_1000AB280(v1 + OBJC_IVAR____TtC4Maps25HomeListSectionController_configuration, &v8);
  Strong = swift_unknownObjectWeakLoadStrong((char *)v9 + 8);
  sub_1000AB2BC((uint64_t)&v8);
  if (!Strong)
  {
    v11 = 0u;
    v12 = 0u;
    v10 = 0u;
    return (id *)sub_1000AABE0((uint64_t)&v10);
  }
  sub_100139A44(a1, &v10);
  swift_unknownObjectRelease(Strong);
  if (!(_QWORD)v10)
    return (id *)sub_1000AABE0((uint64_t)&v10);
  v8 = v10;
  v9[0] = v11;
  v9[1] = v12;
  sub_1000AB2F0((uint64_t)&v8 + 8, (uint64_t)v7);
  sub_10000BE48((__int128 *)v7, (uint64_t)&v10);
  v4 = sub_100008B04(&qword_101496AB0);
  if ((swift_dynamicCast(v7, &v10, v4, &type metadata for HomeListFeatureDiscoveryCellModel, 6) & 1) != 0)
  {
    v5 = v7[0];
    objc_msgSend(v7[0], "markAsDisplayed");

  }
  return sub_100084C10((id *)&v8);
}

uint64_t sub_1000AAD74(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000AAE8C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 8 * a1 + 32;
    v7 = a3 + 8 * v4;
    if (v6 >= v7 || v6 + 8 * v4 <= a3)
    {
      sub_100008B04((uint64_t *)&unk_10149CF10);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000AAF94(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 16 * a1 + 32;
    v7 = a3 + 16 * v4;
    if (v6 >= v7 || v6 + 16 * v4 <= a3)
    {
      sub_100008B04((uint64_t *)&unk_10149E5E0);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000AB09C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 24 * a1 + 32;
  v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000AB190(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

_QWORD *sub_1000AB280(uint64_t a1, _QWORD *a2)
{
  initializeWithCopy for HomeListSectionController.Configuration(a2, a1);
  return a2;
}

uint64_t sub_1000AB2BC(uint64_t a1)
{
  destroy for HomeListSectionController.Configuration(a1);
  return a1;
}

uint64_t sub_1000AB2F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008B04((uint64_t *)&unk_10149B590);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for PlaceSummaryUnitHikeRouteElevationGainLoss()
{
  return &type metadata for PlaceSummaryUnitHikeRouteElevationGainLoss;
}

ValueMetadata *type metadata accessor for PlaceSummaryUnitNumPlacesInGuide()
{
  return &type metadata for PlaceSummaryUnitNumPlacesInGuide;
}

id MapsHomeQuickActionMenuPresenter.__allocating_init(collectionView:)(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  objc_super v5;

  v3 = (char *)objc_allocWithZone(v1);
  *(_QWORD *)&v3[OBJC_IVAR____TtC4Maps32MapsHomeQuickActionMenuPresenter_collectionView] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, "initWithView:", a1);
}

id MapsHomeQuickActionMenuPresenter.init(collectionView:)(uint64_t a1)
{
  char *v1;
  objc_super v4;

  *(_QWORD *)&v1[OBJC_IVAR____TtC4Maps32MapsHomeQuickActionMenuPresenter_collectionView] = a1;
  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for MapsHomeQuickActionMenuPresenter();
  return objc_msgSendSuper2(&v4, "initWithView:", a1);
}

uint64_t type metadata accessor for MapsHomeQuickActionMenuPresenter()
{
  return objc_opt_self(_TtC4Maps32MapsHomeQuickActionMenuPresenter);
}

uint64_t MapsHomeQuickActionMenuPresenter.shouldBeginOrbGesture(atLocation:in:)(void *a1, double a2, double a3)
{
  char *v3;
  char *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t result;
  id v21;
  void *v22;
  void (*v23)(char *, char *, uint64_t);
  id v24;
  Class isa;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  __objc2_prot *v34;

  v4 = v3;
  v8 = sub_100008B04(&qword_101499510);
  __chkstk_darwin(v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for IndexPath(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v16 = __chkstk_darwin(v15).n128_u64[0];
  v18 = (char *)&v33 - v17;
  v19 = OBJC_IVAR____TtC4Maps32MapsHomeQuickActionMenuPresenter_collectionView;
  result = (uint64_t)objc_msgSend(a1, "isDescendantOfView:", *(_QWORD *)&v4[OBJC_IVAR____TtC4Maps32MapsHomeQuickActionMenuPresenter_collectionView], v16);
  if (!(_DWORD)result)
    return result;
  objc_msgSend(*(id *)&v4[v19], "convertPoint:fromCoordinateSpace:", a1, a2, a3);
  v21 = objc_msgSend(*(id *)&v4[v19], "indexPathForItemAtPoint:");
  if (!v21)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
    goto LABEL_11;
  }
  v22 = v21;
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(v21);

  v23 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v23(v10, v14, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
LABEL_11:
    sub_1000ABCD4((uint64_t)v10);
    return 0;
  }
  v23(v18, v10, v11);
  v24 = *(id *)&v4[v19];
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v26 = objc_msgSend(v24, "cellForItemAtIndexPath:", isa);

  if (!v26)
  {
LABEL_13:
    (*(void (**)(char *, uint64_t))(v12 + 8))(v18, v11);
    return 0;
  }
  v34 = &OBJC_PROTOCOL____TtP4Maps31MapsHomeQuickActionMenuProvider_;
  v27 = (void *)swift_dynamicCastObjCProtocolConditional(v26, 1, &v34);
  if (!v27)
  {

    goto LABEL_13;
  }
  v28 = objc_msgSend(v27, "personalizedItemForQuickActionMenu");
  if (!v28)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v18, v11);

    return 0;
  }
  v29 = v28;
  objc_msgSend(v4, "setPlace:", v28);
  v30 = objc_msgSend(v4, "delegate");
  if (v30)
  {
    v31 = v30;
    v32 = objc_msgSend(v30, "uiTargetForQuickActionMenu");
    swift_unknownObjectRelease(v31);
    objc_msgSend(v4, "setUiTarget:", v32);
  }
  swift_unknownObjectRelease(v29);

  (*(void (**)(char *, uint64_t))(v12 + 8))(v18, v11);
  return 1;
}

id MapsHomeQuickActionMenuPresenter.__allocating_init(view:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), "initWithView:", a1);

  return v3;
}

void MapsHomeQuickActionMenuPresenter.init(view:)()
{
  _swift_stdlib_reportUnimplementedInitializer("Maps.MapsHomeQuickActionMenuPresenter", 37, "init(view:)", 11, 0);
  __break(1u);
}

id MapsHomeQuickActionMenuPresenter.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MapsHomeQuickActionMenuPresenter();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id TwoLineCollectionViewListCell.personalizedItemForQuickActionMenu.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t (**v3)(_QWORD);

  v1 = objc_msgSend(v0, "viewModel");
  v2 = v1;
  if (v1)
  {
    v3 = (uint64_t (**)(_QWORD))objc_msgSend(v1, "personalizedItemForQuickActionMenuCreator");
    swift_unknownObjectRelease(v2);
    if (v3)
    {
      v2 = (id)v3[2](v3);
      _Block_release(v3);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

id _s4Maps0A28HomeQuickActionMenuPresenterC07contextE11Interaction_13configuration37highlightPreviewForItemWithIdentifierSo010UITargetedK0CSgSo09UIContexteH0C_So0qE13ConfigurationCSo9NSCopying_ptF_0()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  void (*v15)(char *, char *, uint64_t);
  id v16;
  Class isa;
  id v18;
  id v19;
  id v20;
  uint64_t v22;

  v1 = sub_100008B04(&qword_101499510);
  __chkstk_darwin(v1);
  v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for IndexPath(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - v9;
  v11 = OBJC_IVAR____TtC4Maps32MapsHomeQuickActionMenuPresenter_collectionView;
  v12 = 0;
  if (!-[PlaceSummaryTableViewCell canBecomeFirstResponder]_0(*(void **)&v0[OBJC_IVAR____TtC4Maps32MapsHomeQuickActionMenuPresenter_collectionView]))
  {
    v13 = *(id *)&v0[v11];
    objc_msgSend(v0, "location");
    v14 = objc_msgSend(v13, "indexPathForItemAtPoint:");

    if (v14)
    {
      static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(v14);

      v15 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
      v15(v3, v7, v4);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v3, 0, 1, v4);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) != 1)
      {
        v15(v10, v3, v4);
        v16 = *(id *)&v0[v11];
        isa = IndexPath._bridgeToObjectiveC()().super.isa;
        v18 = objc_msgSend(v16, "cellForItemAtIndexPath:", isa);

        if (v18)
        {
          v12 = objc_msgSend(objc_allocWithZone((Class)UITargetedPreview), "initWithView:", v18);
          v19 = objc_msgSend(v12, "parameters");
          v20 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
          objc_msgSend(v19, "setBackgroundColor:", v20);

          (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
          return v12;
        }
        (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
        return 0;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
    }
    sub_1000ABCD4((uint64_t)v3);
    return 0;
  }
  return v12;
}

uint64_t sub_1000ABCD4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008B04(&qword_101499510);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for PlaceSummaryUnitRealTimeEVCharger()
{
  return &type metadata for PlaceSummaryUnitRealTimeEVCharger;
}

uint64_t sub_1000ABD7C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8, double a9)
{
  uint64_t v9;
  uint64_t v18;
  void (*v19)(char);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void (**v24)(char);
  char v27;
  _BYTE v28[24];

  v18 = swift_allocObject(&unk_1011A06B0, 24, 7);
  swift_unknownObjectWeakInit(v18 + 16, v9);
  v19 = (void (*)(char))swift_allocObject(&unk_1011A06D8, 40, 7);
  *((_QWORD *)v19 + 2) = v18;
  *((_QWORD *)v19 + 3) = a6;
  *((_QWORD *)v19 + 4) = a7;
  v20 = type metadata accessor for RefinementsMultiSelectCellViewModel(0);
  v21 = swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  *(_QWORD *)(v21 + 16) = a1;
  *(_QWORD *)(v21 + 24) = a2;
  swift_beginAccess(v21 + OBJC_IVAR____TtC4Maps35RefinementsMultiSelectCellViewModel__isSelected, v28, 33, 0);
  v27 = a3;
  swift_bridgeObjectRetain(a2);
  swift_retain();
  swift_retain();
  sub_10000C128(a6, a7);
  Published.init(initialValue:)(&v27, &type metadata for Bool);
  swift_endAccess(v28);
  v22 = v21 + OBJC_IVAR____TtC4Maps35RefinementsMultiSelectCellViewModel_labelWidth;
  *(double *)v22 = a8;
  *(_BYTE *)(v22 + 8) = 0;
  *(double *)(v21 + OBJC_IVAR____TtC4Maps35RefinementsMultiSelectCellViewModel_maxWidth) = a9;
  v23 = (_QWORD *)(v21 + OBJC_IVAR____TtC4Maps35RefinementsMultiSelectCellViewModel_allowsSelection);
  *v23 = a4;
  v23[1] = a5;
  v24 = (void (**)(char))(v21 + OBJC_IVAR____TtC4Maps35RefinementsMultiSelectCellViewModel_tapHandler);
  *v24 = sub_1000AC4F0;
  v24[1] = v19;
  swift_release();
  *(_QWORD *)(v9 + OBJC_IVAR____TtC4Maps36AllRefinementsMultiSelectElementCell_viewModel) = v21;
  return swift_release();
}

void sub_1000ABF24(char a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5;
  uint64_t Strong;
  void *v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  char v11;
  _BYTE v12[24];

  v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v12, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    v7 = (void *)Strong;
    v8 = *(_QWORD *)(Strong + OBJC_IVAR____TtC4Maps36AllRefinementsMultiSelectElementCell_viewModel);
    if (v8)
    {
      KeyPath = swift_getKeyPath(&unk_100E2A1A8);
      v10 = swift_getKeyPath(&unk_100E2A1D0);
      v11 = a1 & 1;
      swift_retain(v8);
      Strong = static Published.subscript.setter(&v11, v8, KeyPath, v10);
    }
    if (a3)
      a3(Strong);

  }
}

void sub_1000AC108()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  __n128 v10;
  uint64_t v11;
  _QWORD v13[5];

  v1 = v0;
  v2 = sub_100008B04(&qword_101498B30);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v13[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps36AllRefinementsMultiSelectElementCell_viewModel);
  if (v6)
  {
    v7 = type metadata accessor for RefinementMultiSelectButton(0);
    v8 = sub_10000BC84(&qword_101498B38, type metadata accessor for RefinementMultiSelectButton, (uint64_t)&unk_100E2A870);
    v9 = swift_retain();
    v10.n128_f64[0] = UIHostingConfiguration<>.init(content:)(sub_1000AC5F0, v6, v7, v8, v9);
    v11 = static Edge.Set.all.getter(v10);
    v13[3] = v2;
    v13[4] = sub_1000AC5F8();
    sub_100011DCC(v13);
    UIHostingConfiguration.margins(_:_:)(v11, v2, 0.0);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    UICollectionViewCell.contentConfiguration.setter(v13);
    swift_release();
  }
}

uint64_t sub_1000AC234@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = type metadata accessor for RefinementsMultiSelectCellViewModel(0);
  v3 = sub_10000BC84(&qword_101498B48, type metadata accessor for RefinementsMultiSelectCellViewModel, (uint64_t)&unk_100E24EA8);
  swift_retain();
  *a1 = ObservedObject.init(wrappedValue:)(v4, v2, v3);
  a1[1] = v5;
  v6 = (char *)a1 + *(int *)(type metadata accessor for RefinementMultiSelectButton(0) + 20);
  v7 = enum case for RoundedCornerStyle.continuous(_:);
  v8 = type metadata accessor for RoundedCornerStyle(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
}

id sub_1000AC438()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AllRefinementsMultiSelectElementCell();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AllRefinementsMultiSelectElementCell()
{
  return objc_opt_self(_TtC4Maps36AllRefinementsMultiSelectElementCell);
}

uint64_t sub_1000AC498()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000AC4BC()
{
  _QWORD *v0;

  swift_release(v0[2]);
  if (v0[3])
    swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

void sub_1000AC4F0(char a1)
{
  uint64_t v1;

  sub_1000ABF24(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24));
}

uint64_t sub_1000AC4FC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100E2A1A8);
  v5 = swift_getKeyPath(&unk_100E2A1D0);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_1000AC57C(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100E2A1A8);
  v5 = swift_getKeyPath(&unk_100E2A1D0);
  v7 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_1000AC5F0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1000AC234(a1);
}

unint64_t sub_1000AC5F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101498B40;
  if (!qword_101498B40)
  {
    v1 = sub_10000E5D4(&qword_101498B30);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for UIHostingConfiguration<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_101498B40);
  }
  return result;
}

uint64_t sub_1000AC644()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_1000AC660()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

ValueMetadata *type metadata accessor for PlaceSummaryUnitPrice()
{
  return &type metadata for PlaceSummaryUnitPrice;
}

uint64_t sub_1000AC698()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC4Maps25HomeListSectionController_isActive);
}

void sub_1000AC6AC(unsigned __int8 a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v3;
  int v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;

  v2 = v1;
  v3 = OBJC_IVAR____TtC4Maps25HomeListSectionController_isActive;
  v4 = v1[OBJC_IVAR____TtC4Maps25HomeListSectionController_isActive];
  v1[OBJC_IVAR____TtC4Maps25HomeListSectionController_isActive] = a1;
  if (v4 == (a1 & 1))
    goto LABEL_56;
  ObjectType = swift_getObjectType(v1);
  v6 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for HomeListSectionControllerSubclassing);
  if (v6)
    v7 = v6;
  else
    v7 = 0;
  if (!v6)
    v1 = 0;
  if (!v1)
    goto LABEL_61;
  v8 = swift_getObjectType(v1);
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  v10 = v2;
  v11 = v9(v8, v7);

  if ((unint64_t)v11 >> 62)
  {
    if (v11 < 0)
      v15 = v11;
    else
      v15 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v11);
    v12 = _CocoaArrayWrapper.endIndex.getter(v15);
    swift_bridgeObjectRelease(v11);
    if (!v12)
      goto LABEL_20;
  }
  else
  {
    v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v12)
      goto LABEL_20;
  }
  if (v12 < 1)
  {
    __break(1u);
LABEL_46:
    if (v11 < 0)
      v34 = v11;
    else
      v34 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v11);
    v23 = _CocoaArrayWrapper.endIndex.getter(v34);
    swift_bridgeObjectRelease(v11);
    if (v23)
      goto LABEL_30;
    goto LABEL_55;
  }
  for (i = 0; i != v12; ++i)
  {
    if ((v11 & 0xC000000000000001) != 0)
    {
      v14 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v11);
    }
    else
    {
      v14 = *(void **)(v11 + 8 * i + 32);
      swift_unknownObjectRetain(v14);
    }
    objc_msgSend(v14, "setActive:", v2[v3]);
    swift_unknownObjectRelease(v14);
  }
LABEL_20:
  swift_bridgeObjectRelease(v11);
  v16 = v2[v3];
  v17 = swift_getObjectType(v10);
  v18 = swift_conformsToProtocol2(v17, &protocol descriptor for HomeListSectionControllerSubclassing);
  if (v18)
    v19 = v18;
  else
    v19 = 0;
  if (v18)
    v20 = v2;
  else
    v20 = 0;
  if (v16 != 1)
  {
    if (v20)
    {
      v27 = swift_getObjectType(v20);
      v28 = *(uint64_t (**)(uint64_t, uint64_t))(v19 + 8);
      v29 = v10;
      v11 = v28(v27, v19);

      if ((unint64_t)v11 >> 62)
      {
        if (v11 < 0)
          v35 = v11;
        else
          v35 = v11 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v11);
        v30 = _CocoaArrayWrapper.endIndex.getter(v35);
        swift_bridgeObjectRelease(v11);
        if (!v30)
          goto LABEL_55;
      }
      else
      {
        v30 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (!v30)
          goto LABEL_55;
      }
      if (v30 >= 1)
      {
        v31 = 0;
        do
        {
          if ((v11 & 0xC000000000000001) != 0)
          {
            v32 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v31, v11);
          }
          else
          {
            v32 = *(void **)(v11 + 8 * v31 + 32);
            swift_unknownObjectRetain(v32);
          }
          ++v31;
          v33 = objc_msgSend(v32, "observers");
          objc_msgSend(v33, "unregisterObserver:", v29);
          swift_unknownObjectRelease(v32);

        }
        while (v30 != v31);
        goto LABEL_55;
      }
LABEL_60:
      __break(1u);
    }
LABEL_61:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000032, 0x8000000100E468F0, "Maps/HomeListSectionController.swift", 36, 2, 339, 0);
    __break(1u);
    return;
  }
  if (!v20)
    goto LABEL_61;
  v21 = swift_getObjectType(v20);
  v22 = *(uint64_t (**)(uint64_t, uint64_t))(v19 + 8);
  v10 = v10;
  v11 = v22(v21, v19);

  if ((unint64_t)v11 >> 62)
    goto LABEL_46;
  v23 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v23)
  {
LABEL_30:
    if (v23 >= 1)
    {
      v24 = 0;
      do
      {
        if ((v11 & 0xC000000000000001) != 0)
        {
          v25 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v24, v11);
        }
        else
        {
          v25 = *(void **)(v11 + 8 * v24 + 32);
          swift_unknownObjectRetain(v25);
        }
        ++v24;
        v26 = objc_msgSend(v25, "observers");
        objc_msgSend(v26, "registerObserver:", v10);
        swift_unknownObjectRelease(v25);

      }
      while (v23 != v24);
      goto LABEL_55;
    }
    __break(1u);
    goto LABEL_60;
  }
LABEL_55:
  swift_bridgeObjectRelease(v11);
LABEL_56:
  if ((v2[v3] & 1) != 0)
    sub_1000ACAE4();
}

id sub_1000ACAA4@<X0>(_QWORD *a1@<X8>)
{
  id v3;

  a1[3] = type metadata accessor for HomeListFavoritesSectionController();
  a1[4] = &off_1011A0768;
  *a1 = v3;
  return v3;
}

void sub_1000ACAE4()
{
  char *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t Strong;
  id v17;
  id v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  void (*v20)(char *, char *, uint64_t);
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t ObjectType;
  void *v25;
  uint64_t v26;
  id v27;
  id v28;
  void *v29;
  Class isa;
  id v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  void *v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _OWORD v40[3];
  _QWORD v41[3];
  _BYTE v42[56];

  v1 = v0;
  v2 = sub_100008B04(&qword_101499510);
  __chkstk_darwin(v2);
  v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v35 - v6;
  v8 = type metadata accessor for IndexPath(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v35 - v13;
  if (v0[OBJC_IVAR____TtC4Maps25HomeListSectionController_isActive] == 1)
  {
    v15 = &v0[OBJC_IVAR____TtC4Maps25HomeListSectionController_configuration];
    sub_1000AB280((uint64_t)&v0[OBJC_IVAR____TtC4Maps25HomeListSectionController_configuration], v41);
    Strong = swift_unknownObjectWeakLoadStrong(v42);
    sub_1000AB2BC((uint64_t)v41);
    if (Strong)
    {
      v36 = v15;
      v17 = sub_1000ACF30();
      v18 = sub_1001385F0();
      v41[0] = v17;
      dispatch thunk of UICollectionViewDiffableDataSource.indexPath(for:)(v41);
      swift_unknownObjectRelease(Strong);

      v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
      if (v19(v7, 1, v8) != 1)
      {
        v20 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
        v20(v14, v7, v8);
        v21 = v36;
        sub_1000AB280((uint64_t)v36, v41);
        v22 = swift_unknownObjectWeakLoadStrong(v42);
        sub_1000AB2BC((uint64_t)v41);
        if (v22)
        {
          sub_100139A44((uint64_t)v14, &v37);
          swift_unknownObjectRelease(v22);
          if ((_QWORD)v37)
          {
            v40[0] = v37;
            v40[1] = v38;
            v40[2] = v39;
            sub_1000AB280((uint64_t)v21, v41);
            v23 = swift_unknownObjectWeakLoadStrong(v42);
            sub_1000AB2BC((uint64_t)v41);
            if (v23)
            {
              v35 = v20;
              ObjectType = swift_getObjectType(v1);
              if (swift_conformsToProtocol2(ObjectType, &protocol descriptor for HomeListSectionControllerSubclassing))
                v25 = v1;
              else
                v25 = 0;
              if (!v25)
              {
                _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000032, 0x8000000100E468F0, "Maps/HomeListSectionController.swift", 36, 2, 339, 0);
                __break(1u);
                return;
              }
              v26 = *(_QWORD *)&v40[0];
              v27 = v1;
              v28 = sub_1001385F0();
              v41[0] = v26;
              dispatch thunk of UICollectionViewDiffableDataSource.indexPath(for:)(v41);
              swift_unknownObjectRelease(v23);

              if (v19(v4, 1, v8) != 1)
              {
                v35(v11, v4, v8);
                v29 = *(void **)v36;
                isa = IndexPath._bridgeToObjectiveC()().super.isa;
                v31 = objc_msgSend(v29, "cellForItemAtIndexPath:", isa);

                v32 = *(void (**)(char *, uint64_t))(v9 + 8);
                v32(v11, v8);
                if (v31)
                {
                  v33 = objc_opt_self(ShortcutsRowCollectionViewListCell);
                  v34 = (void *)swift_dynamicCastObjCClass(v31, v33);
                  if (v34)
                  {
                    objc_msgSend(v34, "fetchMissingImages");

                    sub_100084C10((id *)v40);
                    v32(v14, v8);
                    return;
                  }

                }
                goto LABEL_21;
              }
            }
            else
            {
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v4, 1, 1, v8);
            }
            sub_100010CC4((uint64_t)v4, &qword_101499510);
LABEL_21:
            sub_100084C10((id *)v40);
            (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
            return;
          }
        }
        else
        {
          v38 = 0u;
          v39 = 0u;
          v37 = 0u;
        }
        (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
        sub_100010CC4((uint64_t)&v37, &qword_10149B500);
        return;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
    }
    sub_100010CC4((uint64_t)v7, &qword_101499510);
  }
}

id sub_1000ACF30()
{
  return sub_1000ACF80(&OBJC_IVAR____TtC4Maps34HomeListFavoritesSectionController____lazy_storage___favoritesIdentifierPath);
}

id sub_1000ACF5C()
{
  return sub_1000ACF80(&OBJC_IVAR____TtC4Maps34HomeListFavoritesSectionController____lazy_storage___placeLibraryIdentifierPath);
}

id sub_1000ACF80(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  NSString v6;
  id v7;
  void *v8;
  id v9;

  v2 = *a1;
  v3 = *(void **)(v1 + *a1);
  if (v3)
  {
    v4 = *(id *)(v1 + *a1);
  }
  else
  {
    v5 = sub_1001FD8EC();
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "identifierPathByAppendingIdentifier:", v6);

    v8 = *(void **)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v7;
    v4 = v7;

    v3 = 0;
  }
  v9 = v3;
  return v4;
}

uint64_t sub_1000AD024@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  __int128 v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  _BYTE v10[24];
  _OWORD v11[3];
  _BYTE v12[24];

  v3 = v1 + OBJC_IVAR____TtC4Maps34HomeListFavoritesSectionController____lazy_storage___favoritesCellSnapshot;
  swift_beginAccess(v1 + OBJC_IVAR____TtC4Maps34HomeListFavoritesSectionController____lazy_storage___favoritesCellSnapshot, v12, 0, 0);
  result = sub_10000C1FC(v3, (uint64_t)v11, &qword_10149B500);
  if (*(_QWORD *)&v11[0])
  {
    v5 = v11[1];
    *(_OWORD *)a1 = v11[0];
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 32) = v11[2];
  }
  else
  {
    sub_100010CC4((uint64_t)v11, &qword_10149B500);
    *(_QWORD *)&v11[0] = *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps25HomeListSectionController_configuration + 56);
    v6 = *(void **)&v11[0];
    swift_unknownObjectWeakInit(v10, 0);
    swift_unknownObjectWeakAssign(v10, v1);
    sub_1000AE64C((uint64_t)v10, (uint64_t)v11 + 8);
    v7 = v6;
    v8 = sub_1000ACF30();
    *(_QWORD *)(a1 + 32) = &type metadata for HomeListFavoritesCellModel;
    *(_QWORD *)(a1 + 40) = sub_1000AE760();
    v9 = swift_allocObject(&unk_1011A0818, 32, 7);
    *(_QWORD *)(a1 + 8) = v9;
    sub_1000AE7D4(v11, (_QWORD *)(v9 + 16));
    *(_QWORD *)a1 = v8;
    sub_100084BD4(a1, (uint64_t)v11);
    swift_beginAccess(v3, v10, 33, 0);
    sub_1000AE718((uint64_t)v11, v3);
    return swift_endAccess(v10);
  }
  return result;
}

uint64_t sub_1000AD17C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  __int128 v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  _BYTE v10[24];
  _OWORD v11[3];
  _BYTE v12[24];

  v3 = v1 + OBJC_IVAR____TtC4Maps34HomeListFavoritesSectionController____lazy_storage___favoritesCellSnapshotLegacy;
  swift_beginAccess(v1 + OBJC_IVAR____TtC4Maps34HomeListFavoritesSectionController____lazy_storage___favoritesCellSnapshotLegacy, v12, 0, 0);
  result = sub_10000C1FC(v3, (uint64_t)v11, &qword_10149B500);
  if (*(_QWORD *)&v11[0])
  {
    v5 = v11[1];
    *(_OWORD *)a1 = v11[0];
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 32) = v11[2];
  }
  else
  {
    sub_100010CC4((uint64_t)v11, &qword_10149B500);
    *(_QWORD *)&v11[0] = *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps25HomeListSectionController_configuration + 48);
    v6 = *(void **)&v11[0];
    swift_unknownObjectWeakInit(v10, 0);
    swift_unknownObjectWeakAssign(v10, v1);
    sub_1000AE64C((uint64_t)v10, (uint64_t)v11 + 8);
    v7 = v6;
    v8 = sub_1000ACF30();
    *(_QWORD *)(a1 + 32) = &type metadata for HomeListFavoritesCellModelLegacy;
    *(_QWORD *)(a1 + 40) = sub_1000AE694();
    v9 = swift_allocObject(&unk_1011A07F0, 32, 7);
    *(_QWORD *)(a1 + 8) = v9;
    sub_1000AE6DC(v11, (_QWORD *)(v9 + 16));
    *(_QWORD *)a1 = v8;
    sub_100084BD4(a1, (uint64_t)v11);
    swift_beginAccess(v3, v10, 33, 0);
    sub_1000AE718((uint64_t)v11, v3);
    return swift_endAccess(v10);
  }
  return result;
}

id sub_1000AD2D4(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  id v17;
  objc_super v19;
  _QWORD v20[9];

  v1[OBJC_IVAR____TtC4Maps34HomeListFavoritesSectionController_needsResetScrollOffset] = 0;
  v3 = OBJC_IVAR____TtC4Maps34HomeListFavoritesSectionController_favoritesDataProvider;
  v4 = qword_101490E30;
  v5 = v1;
  if (v4 != -1)
    swift_once(&qword_101490E30, sub_1000F999C);
  v6 = (void *)qword_1014D49B0;
  *(_QWORD *)&v1[v3] = qword_1014D49B0;
  v7 = OBJC_IVAR____TtC4Maps34HomeListFavoritesSectionController_libraryCountsDataProvider;
  v8 = qword_1014910E0;
  v9 = v6;
  if (v8 != -1)
    swift_once(&qword_1014910E0, sub_1001CBA20);
  v10 = (void *)static LibraryItemsCountManager.shared;
  v11 = objc_allocWithZone((Class)type metadata accessor for HomeListLibraryCountsDataProvider());
  *(_QWORD *)&v5[v7] = sub_100096D64(v10);
  *(_QWORD *)&v5[OBJC_IVAR____TtC4Maps34HomeListFavoritesSectionController____lazy_storage___favoritesIdentifierPath] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC4Maps34HomeListFavoritesSectionController____lazy_storage___placeLibraryIdentifierPath] = 0;
  v12 = &v5[OBJC_IVAR____TtC4Maps34HomeListFavoritesSectionController____lazy_storage___favoritesCellSnapshot];
  *(_OWORD *)v12 = 0u;
  *((_OWORD *)v12 + 1) = 0u;
  *((_OWORD *)v12 + 2) = 0u;
  v13 = &v5[OBJC_IVAR____TtC4Maps34HomeListFavoritesSectionController____lazy_storage___favoritesCellSnapshotLegacy];
  *(_OWORD *)v13 = 0u;
  *((_OWORD *)v13 + 1) = 0u;
  *((_OWORD *)v13 + 2) = 0u;

  sub_1000AB280(a1, v20);
  v14 = &v5[OBJC_IVAR____TtC4Maps25HomeListSectionController_cachedSectionSnapshot];
  *(_OWORD *)v14 = 0u;
  *((_OWORD *)v14 + 1) = 0u;
  v15 = OBJC_IVAR____TtC4Maps25HomeListSectionController_mutableDeletions;
  v16 = v5;
  *(_QWORD *)&v5[v15] = sub_100009B78((uint64_t)_swiftEmptyArrayStorage);
  v16[OBJC_IVAR____TtC4Maps25HomeListSectionController_isActive] = 0;
  *(_QWORD *)&v16[OBJC_IVAR____TtC4Maps25HomeListSectionController____lazy_storage___sectionIdentifierPath] = 0;
  *(_QWORD *)&v16[OBJC_IVAR____TtC4Maps25HomeListSectionController____lazy_storage___sectionHeaderIdentifierPath] = 0;
  sub_1000AB280((uint64_t)v20, &v16[OBJC_IVAR____TtC4Maps25HomeListSectionController_configuration]);

  v19.receiver = v16;
  v19.super_class = (Class)type metadata accessor for HomeListSectionController();
  v17 = objc_msgSendSuper2(&v19, "init");
  sub_1000AB2BC((uint64_t)v20);
  sub_1000AB2BC(a1);
  return v17;
}

uint64_t sub_1000AD4B4()
{
  uint64_t v0;

  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC4Maps34HomeListFavoritesSectionController____lazy_storage___favoritesIdentifierPath));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC4Maps34HomeListFavoritesSectionController____lazy_storage___placeLibraryIdentifierPath));
  sub_100010CC4(v0 + OBJC_IVAR____TtC4Maps34HomeListFavoritesSectionController____lazy_storage___favoritesCellSnapshot, &qword_10149B500);
  return sub_100010CC4(v0 + OBJC_IVAR____TtC4Maps34HomeListFavoritesSectionController____lazy_storage___favoritesCellSnapshotLegacy, &qword_10149B500);
}

id sub_1000AD53C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HomeListFavoritesSectionController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000AD5F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v8;

  v1 = sub_100008B04((uint64_t *)&unk_101493B10);
  v2 = swift_allocObject(v1, 48, 7);
  *(_OWORD *)(v2 + 16) = xmmword_100E250A0;
  v3 = *(void **)(v0 + OBJC_IVAR____TtC4Maps34HomeListFavoritesSectionController_favoritesDataProvider);
  v4 = *(void **)(v0 + OBJC_IVAR____TtC4Maps34HomeListFavoritesSectionController_libraryCountsDataProvider);
  *(_QWORD *)(v2 + 32) = v3;
  *(_QWORD *)(v2 + 40) = v4;
  v8 = v2;
  specialized Array._endMutation()(v2);
  v5 = v3;
  v6 = v4;
  return v8;
}

uint64_t sub_1000AD67C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v3;
  NSBundle v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::String v10;
  unint64_t v12;

  if (qword_101490F30 != -1)
    swift_once(&qword_101490F30, sub_10012902C);
  v3 = byte_1014D4C10;
  if (byte_1014D4C10 == 1)
  {
    if (qword_101490ED0 != -1)
      swift_once(&qword_101490ED0, sub_10011833C);
    v4.super.isa = (Class)qword_1014D4B80;
    v5 = 0xD000000000000036;
    v12 = 0x8000000100E469D0;
    v6 = 0x8000000100E469A0;
    v7 = 0xD000000000000020;
    v8 = 0x7972617262694CLL;
    v9 = 0xE700000000000000;
  }
  else
  {
    if (qword_101490ED0 != -1)
      swift_once(&qword_101490ED0, sub_10011833C);
    v4.super.isa = (Class)qword_1014D4B80;
    v7 = 0xD000000000000022;
    v5 = 0xD000000000000034;
    v12 = 0x8000000100E46960;
    v6 = 0x8000000100E46930;
    v8 = 0x657469726F766146;
    v9 = 0xE900000000000073;
  }
  v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v7, (Swift::String_optional)0, v4, *(Swift::String *)&v8, *(Swift::String *)&v5);
  swift_unknownObjectRetain(v1);
  return sub_100117734(v10._countAndFlagsBits, (uint64_t)v10._object, 0, v3 ^ 1u, v1, (uint64_t)&off_1011A0788, 0x726F6853656D6F48, 0xED00007374756374, a1);
}

uint64_t sub_1000AD83C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;

  if (qword_101490F30 != -1)
    swift_once(&qword_101490F30, sub_10012902C);
  v1 = byte_1014D4C10;
  v2 = sub_100008B04((uint64_t *)&unk_10149A2E0);
  if (v1 == 1)
  {
    v3 = swift_allocObject(v2, 128, 7);
    *(_OWORD *)(v3 + 16) = xmmword_100E22F70;
    sub_1000AD024(v3 + 32);
    v4 = *(void **)(*(_QWORD *)(*(_QWORD *)(v0
                                          + OBJC_IVAR____TtC4Maps34HomeListFavoritesSectionController_libraryCountsDataProvider)
                              + OBJC_IVAR____TtC4Maps33HomeListLibraryCountsDataProvider_countsManager)
                  + OBJC_IVAR____TtC4Maps24LibraryItemsCountManager_lastFetchedCounts);
    v5 = v4;
    v6 = sub_1000ACF5C();
    *(_QWORD *)(v3 + 112) = &type metadata for HomeListOneLineCellModel;
    *(_QWORD *)(v3 + 120) = sub_1000AE524();
    *(_QWORD *)(v3 + 80) = v6;
    *(_QWORD *)(v3 + 88) = v4;
  }
  else
  {
    v3 = swift_allocObject(v2, 80, 7);
    *(_OWORD *)(v3 + 16) = xmmword_100E22F40;
    sub_1000AD17C(v3 + 32);
  }
  return v3;
}

uint64_t sub_1000AD93C(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t result;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  Class isa;
  id v15;
  id v16;
  uint64_t Strong;
  uint64_t v18;
  uint64_t ObjectType;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  NSString v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  Class v40;
  void *v41;
  void *v42;
  id v43;
  void *v44;
  id v45;
  _OWORD v46[5];

  v2 = v1;
  if (qword_101490F30 != -1)
    swift_once(&qword_101490F30, sub_10012902C);
  if (byte_1014D4C10 == 1)
    return sub_1001FDFC8(a1, 0, 0);
  v5 = (void *)objc_opt_self(NSCollectionLayoutDimension);
  v6 = objc_msgSend(v5, "fractionalWidthDimension:", 1.0);
  objc_msgSend((id)objc_opt_self(ShortcutsRowCollectionViewListCell), "estimatedCellHeight");
  v7 = objc_msgSend(v5, "estimatedDimension:");
  v45 = (id)objc_opt_self(NSCollectionLayoutSize);
  v8 = objc_msgSend(v45, "sizeWithWidthDimension:heightDimension:", v6, v7);

  v9 = objc_msgSend((id)objc_opt_self(NSCollectionLayoutItem), "itemWithLayoutSize:", v8);
  v10 = (void *)objc_opt_self(NSCollectionLayoutGroup);
  v11 = sub_100008B04((uint64_t *)&unk_101493B10);
  v12 = swift_allocObject(v11, 40, 7);
  *(_OWORD *)(v12 + 16) = xmmword_100E23F50;
  *(_QWORD *)(v12 + 32) = v9;
  *(_QWORD *)&v46[0] = v12;
  specialized Array._endMutation()(v12);
  sub_10000E4BC(0, (unint64_t *)&qword_101498C50, NSCollectionLayoutItem_ptr);
  v13 = v9;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(*(_QWORD *)&v46[0]);
  v15 = objc_msgSend(v10, "verticalGroupWithLayoutSize:subitems:", v8, isa);

  v16 = objc_msgSend((id)objc_opt_self(NSCollectionLayoutSection), "sectionWithGroup:", v15);
  sub_1000AB280((uint64_t)v2 + OBJC_IVAR____TtC4Maps25HomeListSectionController_configuration, v46);
  Strong = swift_unknownObjectWeakLoadStrong((char *)&v46[1] + 8);
  sub_1000AB2BC((uint64_t)v46);
  if (!Strong)
  {

    return (uint64_t)v16;
  }
  v41 = v8;
  v18 = v11;
  v44 = v13;
  ObjectType = swift_getObjectType(v2);
  if (swift_conformsToProtocol2(ObjectType, &protocol descriptor for HomeListSectionControllerSubclassing))
    v20 = v2;
  else
    v20 = 0;
  if (v20)
  {
    v42 = v15;
    v43 = v16;
    v21 = v2;
    v22 = sub_1001FDD20();
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(UICollectionElementKindSectionHeader);
    v25 = v24;
    v26 = *(_QWORD *)(Strong + OBJC_IVAR____TtC4Maps22HomeListRootController_rootSnapshot);
    if (v26)
    {
      v27 = v23;
      v28 = *(_QWORD *)(Strong + OBJC_IVAR____TtC4Maps22HomeListRootController_rootSnapshot + 8);
      sub_1000AE4F8(*(_QWORD *)(Strong + OBJC_IVAR____TtC4Maps22HomeListRootController_rootSnapshot), v28);
      sub_1000AE4F8(v26, v28);
      v29 = v22;
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRelease(v28);
      swift_bridgeObjectRelease(v26);
      sub_10012F24C(v29, v27, v25, 0, v28, v46);
      swift_bridgeObjectRelease(v28);
      swift_bridgeObjectRelease(v26);
      swift_bridgeObjectRelease_n(v25, 2);

    }
    else
    {
      memset(v46, 0, 64);

      swift_bridgeObjectRelease(v25);
    }

    if (*(_QWORD *)&v46[0])
    {
      sub_100010CC4((uint64_t)v46, (uint64_t *)&unk_10149FDC0);
      v30 = objc_msgSend(v5, "fractionalWidthDimension:", 1.0);
      objc_msgSend((id)objc_opt_self(SectionHeaderCollectionReusableView), "estimatedHeight");
      v31 = objc_msgSend(v5, "estimatedDimension:");
      v32 = objc_msgSend(v45, "sizeWithWidthDimension:heightDimension:", v30, v31);

      static String._unconditionallyBridgeFromObjectiveC(_:)(UICollectionElementKindSectionHeader);
      v34 = v33;
      v35 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v34);
      v36 = objc_msgSend((id)objc_opt_self(NSCollectionLayoutBoundarySupplementaryItem), "boundarySupplementaryItemWithLayoutSize:elementKind:alignment:", v32, v35, 1);
      swift_unknownObjectRelease(Strong);

      v37 = swift_allocObject(v18, 40, 7);
      *(_OWORD *)(v37 + 16) = xmmword_100E23F50;
      *(_QWORD *)(v37 + 32) = v36;
      *(_QWORD *)&v46[0] = v37;
      specialized Array._endMutation()(v37);
      v38 = *(_QWORD *)&v46[0];
      sub_10000E4BC(0, (unint64_t *)&unk_101496360, NSCollectionLayoutBoundarySupplementaryItem_ptr);
      v39 = v36;
      v40 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v38);
      v16 = v43;
      objc_msgSend(v43, "setBoundarySupplementaryItems:", v40);

    }
    else
    {
      swift_unknownObjectRelease(Strong);
      sub_100010CC4((uint64_t)v46, (uint64_t *)&unk_10149FDC0);
    }

    return (uint64_t)v16;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000032, 0x8000000100E468F0, "Maps/HomeListSectionController.swift", 36, 2, 339, 0);
  __break(1u);
  return result;
}

id sub_1000ADFD0()
{
  uint64_t v0;
  void *v1;
  _QWORD v3[5];
  uint64_t v4;

  sub_1000AB280(v0 + OBJC_IVAR____TtC4Maps25HomeListSectionController_configuration, v3);
  v1 = (void *)swift_unknownObjectWeakLoadStrong(&v4);
  sub_1000AB2BC((uint64_t)v3);
  if (v1)
  {
    objc_msgSend(v1, "homeSectionHeaderButtonTapped:", 2);
    swift_unknownObjectRelease(v1);
  }
  return objc_msgSend((id)objc_opt_self(GEOAPPortal), "captureUserAction:target:value:", 2045, 8, 0);
}

void sub_1000AE080(void *a1, uint64_t a2, void *a3, SEL *a4)
{
  void *v7;
  id v8;
  id v9;
  _QWORD v10[5];
  uint64_t v11;

  sub_1000AB280((uint64_t)a1 + OBJC_IVAR____TtC4Maps25HomeListSectionController_configuration, v10);
  v7 = (void *)swift_unknownObjectWeakLoadStrong(&v11);
  v8 = a3;
  v9 = a1;
  sub_1000AB2BC((uint64_t)v10);
  if (v7)
  {
    objc_msgSend(v7, *a4, v8);

    swift_unknownObjectRelease(v7);
  }
  else
  {

  }
}

uint64_t sub_1000AE2B8()
{
  uint64_t Strong;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t *v8;
  char *v9;
  char v10[8];
  char v11[8];
  uint64_t v12;
  uint64_t v13;

  sub_1000AD67C((uint64_t)v11);
  if (!v12)
  {
    v8 = &qword_1014A09B0;
    v9 = v11;
    return sub_100010CC4((uint64_t)v9, v8);
  }
  sub_10000C1FC((uint64_t)&v13, (uint64_t)v10, (uint64_t *)&unk_101498C70);
  sub_1000AE568((uint64_t)v11);
  Strong = swift_unknownObjectWeakLoadStrong(v10);
  if (!Strong)
  {
    v8 = (uint64_t *)&unk_101498C70;
    v9 = v10;
    return sub_100010CC4((uint64_t)v9, v8);
  }
  v1 = Strong;
  ObjectType = swift_getObjectType(Strong);
  v3 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for HomeListSectionHeaderDelegate);
  if (v3)
    v4 = v3;
  else
    v4 = 0;
  if (v3)
    v5 = v1;
  else
    v5 = 0;
  if (v5)
  {
    sub_100010CC4((uint64_t)v10, (uint64_t *)&unk_101498C70);
    v6 = swift_getObjectType(v5);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v6, v4);
    return swift_unknownObjectRelease(v1);
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Maps/HashableWrappers.swift", 27, 2, 83, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000AE3CC()
{
  uint64_t v0;
  _QWORD v2[2];
  unsigned __int8 v3;

  sub_1000AD67C((uint64_t)v2);
  if (v2[1])
  {
    v0 = v3;
    sub_1000AE568((uint64_t)v2);
  }
  else
  {
    sub_100010CC4((uint64_t)v2, &qword_1014A09B0);
    return 0;
  }
  return v0;
}

uint64_t sub_1000AE428()
{
  return sub_1000AE2B8();
}

id PlaceLibraryHomeAction.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for HomeListFavoritesSectionController()
{
  return objc_opt_self(_TtC4Maps34HomeListFavoritesSectionController);
}

uint64_t type metadata accessor for PlaceLibraryHomeAction()
{
  return objc_opt_self(_TtC4Maps22PlaceLibraryHomeAction);
}

uint64_t sub_1000AE4F8(uint64_t result, uint64_t a2)
{
  if (result)
  {
    swift_bridgeObjectRetain(result);
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

unint64_t sub_1000AE524()
{
  unint64_t result;

  result = qword_101498C60;
  if (!qword_101498C60)
  {
    result = swift_getWitnessTable(aQ_2, &type metadata for HomeListOneLineCellModel);
    atomic_store(result, (unint64_t *)&qword_101498C60);
  }
  return result;
}

uint64_t sub_1000AE568(uint64_t a1)
{
  destroy for HomeListSectionHeaderViewModel(a1);
  return a1;
}

void sub_1000AE59C(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  int v7;
  id v8;

  v3 = objc_opt_self(ShortcutsRowCollectionViewListCell);
  v4 = swift_dynamicCastObjCClass(a1, v3);
  if (v4)
  {
    v5 = (void *)v4;
    v6 = OBJC_IVAR____TtC4Maps34HomeListFavoritesSectionController_needsResetScrollOffset;
    v7 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC4Maps34HomeListFavoritesSectionController_needsResetScrollOffset);
    v8 = a1;
    if (v7 == 1)
    {
      objc_msgSend(v5, "resetScrollOffset");
      *(_BYTE *)(v1 + v6) = 0;
    }
    objc_msgSend(v5, "fetchMissingImages");

  }
}

uint64_t sub_1000AE64C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008B04(&qword_101498C80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000AE694()
{
  unint64_t result;

  result = qword_101498C88;
  if (!qword_101498C88)
  {
    result = swift_getWitnessTable(")k7", &type metadata for HomeListFavoritesCellModelLegacy);
    atomic_store(result, (unint64_t *)&qword_101498C88);
  }
  return result;
}

_QWORD *sub_1000AE6DC(_QWORD *a1, _QWORD *a2)
{
  initializeWithTake for HomeListFavoritesCellModelLegacy(a2, a1);
  return a2;
}

uint64_t sub_1000AE718(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008B04(&qword_10149B500);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000AE760()
{
  unint64_t result;

  result = qword_101498C90;
  if (!qword_101498C90)
  {
    result = swift_getWitnessTable(byte_100E3111C, &type metadata for HomeListFavoritesCellModel);
    atomic_store(result, (unint64_t *)&qword_101498C90);
  }
  return result;
}

uint64_t sub_1000AE7A8()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 24);
  return swift_deallocObject(v0, 32, 7);
}

_QWORD *sub_1000AE7D4(_QWORD *a1, _QWORD *a2)
{
  initializeWithTake for HomeListCuratedCollectionsCellModel(a2, a1);
  return a2;
}

ValueMetadata *type metadata accessor for PlaceSummaryUnitSecondaryName()
{
  return &type metadata for PlaceSummaryUnitSecondaryName;
}

id sub_1000AE8A8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC4Maps29RoutingAdvisoryInfoFooterView____lazy_storage___descriptionLabel;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC4Maps29RoutingAdvisoryInfoFooterView____lazy_storage___descriptionLabel);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC4Maps29RoutingAdvisoryInfoFooterView____lazy_storage___descriptionLabel);
  }
  else
  {
    v4 = sub_1000AE938();
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_1000AE938()
{
  id v0;
  id v1;
  id v2;
  id v3;
  NSString v4;

  v0 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  objc_msgSend(v0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v1 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
  objc_msgSend(v0, "setTextColor:", v1);

  v2 = objc_msgSend((id)objc_opt_self(UIFont), "preferredFontForTextStyle:", UIFontTextStyleCaption1);
  objc_msgSend(v0, "setFont:", v2);

  v3 = v0;
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "setAccessibilityIdentifier:", v4);

  objc_msgSend(v3, "setNumberOfLines:", 0);
  return v3;
}

id sub_1000AEA5C(double a1, double a2, double a3, double a4)
{
  char *v4;
  uint64_t v9;
  void *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  id v14;
  objc_super v16;

  v9 = OBJC_IVAR____TtC4Maps29RoutingAdvisoryInfoFooterView_horizontalMargin;
  v10 = (void *)objc_opt_self(RouteOverviewCell);
  v11 = v4;
  objc_msgSend(v10, "horizontalContentInset");
  *(_QWORD *)&v4[v9] = v12;
  *(_QWORD *)&v11[OBJC_IVAR____TtC4Maps29RoutingAdvisoryInfoFooterView_verticalMargin] = 0x4020000000000000;
  *(_QWORD *)&v11[OBJC_IVAR____TtC4Maps29RoutingAdvisoryInfoFooterView____lazy_storage___descriptionLabel] = 0;
  v13 = &v11[OBJC_IVAR____TtC4Maps29RoutingAdvisoryInfoFooterView_tapActionHandler];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;

  v16.receiver = v11;
  v16.super_class = (Class)type metadata accessor for RoutingAdvisoryInfoFooterView();
  v14 = objc_msgSendSuper2(&v16, "initWithFrame:", a1, a2, a3, a4);
  sub_1000AEDDC();

  return v14;
}

id sub_1000AEB64(void *a1)
{
  char *v1;
  uint64_t v3;
  void *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  id v8;
  objc_super v10;

  v3 = OBJC_IVAR____TtC4Maps29RoutingAdvisoryInfoFooterView_horizontalMargin;
  v4 = (void *)objc_opt_self(RouteOverviewCell);
  v5 = v1;
  objc_msgSend(v4, "horizontalContentInset");
  *(_QWORD *)&v1[v3] = v6;
  *(_QWORD *)&v5[OBJC_IVAR____TtC4Maps29RoutingAdvisoryInfoFooterView_verticalMargin] = 0x4020000000000000;
  *(_QWORD *)&v5[OBJC_IVAR____TtC4Maps29RoutingAdvisoryInfoFooterView____lazy_storage___descriptionLabel] = 0;
  v7 = &v5[OBJC_IVAR____TtC4Maps29RoutingAdvisoryInfoFooterView_tapActionHandler];
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;

  v10.receiver = v5;
  v10.super_class = (Class)type metadata accessor for RoutingAdvisoryInfoFooterView();
  v8 = objc_msgSendSuper2(&v10, "initWithCoder:", a1);

  return v8;
}

void sub_1000AEDDC()
{
  char *v0;
  char *v1;
  NSString v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  double v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  Class isa;
  id v26;
  id v27;
  id v28;

  v1 = v0;
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setAccessibilityIdentifier:", v2);

  objc_msgSend(v1, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v3 = sub_1000AE8A8();
  objc_msgSend(v1, "addSubview:", v3);

  v4 = (void *)objc_opt_self(NSLayoutConstraint);
  v5 = sub_100008B04((uint64_t *)&unk_101493B10);
  v6 = swift_allocObject(v5, 64, 7);
  *(_OWORD *)(v6 + 16) = xmmword_100E2A2C0;
  v7 = sub_1000AE8A8();
  v8 = objc_msgSend(v7, "leadingAnchor");

  v9 = objc_msgSend(v1, "leadingAnchor");
  v10 = *(double *)&v1[OBJC_IVAR____TtC4Maps29RoutingAdvisoryInfoFooterView_horizontalMargin];
  v11 = objc_msgSend(v8, "constraintEqualToAnchor:constant:", v9, v10);

  *(_QWORD *)(v6 + 32) = v11;
  v12 = sub_1000AE8A8();
  v13 = objc_msgSend(v12, "topAnchor");

  v14 = objc_msgSend(v1, "topAnchor");
  v15 = objc_msgSend(v13, "constraintEqualToAnchor:constant:", v14, 8.0);

  *(_QWORD *)(v6 + 40) = v15;
  v16 = sub_1000AE8A8();
  v17 = objc_msgSend(v16, "trailingAnchor");

  v18 = objc_msgSend(v1, "trailingAnchor");
  v19 = objc_msgSend(v17, "constraintEqualToAnchor:constant:", v18, -v10);

  *(_QWORD *)(v6 + 48) = v19;
  v20 = sub_1000AE8A8();
  v21 = objc_msgSend(v20, "bottomAnchor");

  v22 = objc_msgSend(v1, "bottomAnchor");
  v23 = objc_msgSend(v21, "constraintEqualToAnchor:constant:", v22, -8.0);

  *(_QWORD *)(v6 + 56) = v23;
  specialized Array._endMutation()(v24);
  sub_10000E4BC(0, (unint64_t *)&qword_101493070, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v6);
  objc_msgSend(v4, "activateConstraints:", isa);

  v26 = sub_1000AE8A8();
  objc_msgSend(v26, "setUserInteractionEnabled:", 1);

  v27 = objc_msgSend(objc_allocWithZone((Class)UITapGestureRecognizer), "initWithTarget:action:", v1, "advisoryInfoTapped:");
  v28 = sub_1000AE8A8();
  objc_msgSend(v28, "addGestureRecognizer:", v27);

}

void sub_1000AF150(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t inited;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  Class isa;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  NSString *v24;
  NSString *v25;
  id v26;
  unint64_t v27;
  Swift::String v28;
  Swift::String v29;
  void *object;
  id v31;
  NSString v32;
  Class v33;
  id v34;
  id v35;
  id v36;
  NSString v37;
  id v38;
  id v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  NSString *v43;
  NSString *v44;
  uint64_t v45;
  _BYTE v48[112];
  _BYTE v49[120];
  Swift::String v50;

  v4 = sub_100008B04(&qword_10149B740);
  inited = swift_initStackObject(v4, v49);
  *(_OWORD *)(inited + 16) = xmmword_100E22F70;
  *(_QWORD *)(inited + 32) = NSForegroundColorAttributeName;
  v6 = (void *)objc_opt_self(UIColor);
  v44 = NSForegroundColorAttributeName;
  v7 = objc_msgSend(v6, "systemGrayColor");
  v8 = sub_10000E4BC(0, (unint64_t *)&qword_101493C20, UIColor_ptr);
  *(_QWORD *)(inited + 40) = v7;
  *(_QWORD *)(inited + 64) = v8;
  *(_QWORD *)(inited + 72) = NSFontAttributeName;
  v9 = (void *)objc_opt_self(UIFont);
  v43 = NSFontAttributeName;
  v10 = objc_msgSend(v9, "system15");
  v11 = sub_100008B04(&qword_101498CE0);
  *(_QWORD *)(inited + 104) = v11;
  *(_QWORD *)(inited + 80) = v10;
  v12 = sub_100009A30(inited);
  v13 = objc_msgSend(a1, "noticeText");
  if (v13)
  {
    v14 = v13;
    v15 = objc_msgSend(objc_allocWithZone((Class)GEOComposedString), "initWithGeoFormattedString:", v13);

    v16 = objc_msgSend(objc_allocWithZone((Class)MKServerFormattedString), "initWithComposedString:", v15);
    sub_1000AF604(v12);
    v18 = v17;
    swift_bridgeObjectRelease(v12);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v18);
    v20 = objc_msgSend(v16, "multiPartAttributedStringWithAttributes:", isa);

    if (v20)
    {
      v21 = objc_msgSend(v20, "attributedString");

      if (v21)
      {
        v22 = v21;
        v23 = swift_initStackObject(v4, v48);
        *(_OWORD *)(v23 + 16) = xmmword_100E22F70;
        *(_QWORD *)(v23 + 32) = v44;
        v24 = v44;
        *(_QWORD *)(v23 + 40) = objc_msgSend(v6, "systemBlueColor");
        *(_QWORD *)(v23 + 64) = v8;
        *(_QWORD *)(v23 + 72) = v43;
        v25 = v43;
        v26 = objc_msgSend(v9, "system15");
        *(_QWORD *)(v23 + 104) = v11;
        *(_QWORD *)(v23 + 80) = v26;
        v27 = sub_100009A30(v23);
        if (qword_101490ED0 != -1)
          swift_once(&qword_101490ED0, sub_10011833C);
        v50._countAndFlagsBits = 0xD000000000000045;
        v50._object = (void *)0x8000000100E46B60;
        v28._object = (void *)0x8000000100E46B30;
        v28._countAndFlagsBits = 0xD000000000000021;
        v29._countAndFlagsBits = 0x6F4D206E7261654CLL;
        v29._object = (void *)0xEA00000000006572;
        object = NSLocalizedString(_:tableName:bundle:value:comment:)(v28, (Swift::String_optional)0, (NSBundle)qword_1014D4B80, v29, v50)._object;
        v31 = objc_allocWithZone((Class)NSAttributedString);
        v32 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(object);
        type metadata accessor for Key(0);
        sub_1000AFC58();
        v33 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v27);
        v34 = objc_msgSend(v31, "initWithString:attributes:", v32, v33);

        v35 = objc_msgSend(objc_allocWithZone((Class)NSMutableAttributedString), "initWithAttributedString:", v22);
        v36 = objc_allocWithZone((Class)NSAttributedString);
        v37 = String._bridgeToObjectiveC()();
        v38 = objc_msgSend(v36, "initWithString:", v37);

        objc_msgSend(v35, "appendAttributedString:", v38);
        objc_msgSend(v35, "appendAttributedString:", v34);
        v39 = sub_1000AE8A8();
        objc_msgSend(v39, "setAttributedText:", v35);

        v40 = (uint64_t *)(v45 + OBJC_IVAR____TtC4Maps29RoutingAdvisoryInfoFooterView_tapActionHandler);
        v41 = *(_QWORD *)(v45 + OBJC_IVAR____TtC4Maps29RoutingAdvisoryInfoFooterView_tapActionHandler);
        v42 = *(_QWORD *)(v45 + OBJC_IVAR____TtC4Maps29RoutingAdvisoryInfoFooterView_tapActionHandler + 8);
        *v40 = a2;
        v40[1] = a3;
        sub_10000C128(a2, a3);
        sub_10000BF74(v41, v42);

        v15 = v34;
        v16 = v35;
      }
    }

  }
  else
  {
    __break(1u);
  }
}

void sub_1000AF604(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _OWORD v34[2];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  _OWORD v38[2];
  _OWORD v39[2];
  _OWORD v40[2];
  uint64_t v41;
  _OWORD v42[2];
  uint64_t v43;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100008B04((uint64_t *)&unk_10149E920);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v30 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v29 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  swift_retain();
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v11 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v29)
      goto LABEL_37;
    v14 = *(_QWORD *)(v30 + 8 * v13);
    v15 = v8 + 1;
    if (!v14)
    {
      v15 = v8 + 2;
      if (v8 + 2 >= v29)
        goto LABEL_37;
      v14 = *(_QWORD *)(v30 + 8 * v15);
      if (!v14)
      {
        v15 = v8 + 3;
        if (v8 + 3 >= v29)
          goto LABEL_37;
        v14 = *(_QWORD *)(v30 + 8 * v15);
        if (!v14)
        {
          v15 = v8 + 4;
          if (v8 + 4 >= v29)
            goto LABEL_37;
          v14 = *(_QWORD *)(v30 + 8 * v15);
          if (!v14)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
    v8 = v15;
LABEL_28:
    v17 = *(void **)(*(_QWORD *)(a1 + 48) + 8 * v12);
    sub_100011E20(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)v42 + 8);
    *(_QWORD *)&v42[0] = v17;
    v40[0] = v42[0];
    v40[1] = v42[1];
    v41 = v43;
    *(_QWORD *)&v39[0] = v17;
    type metadata accessor for Key(0);
    v19 = v18;
    v20 = v17;
    swift_dynamicCast(&v31, v39, v19, &type metadata for AnyHashable, 7);
    sub_10000BE60((_OWORD *)((char *)v40 + 8), v34);
    v35 = v31;
    v36 = v32;
    v37 = v33;
    sub_10000BE60(v34, v38);
    v31 = v35;
    v32 = v36;
    v33 = v37;
    sub_10000BE60(v38, v39);
    sub_10000BE60(v39, &v35);
    v21 = AnyHashable._rawHashValue(seed:)(v3[5]);
    v22 = -1 << *((_BYTE *)v3 + 32);
    v23 = v21 & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)&v7[8 * (v23 >> 6)]) != 0)
    {
      v9 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)&v7[8 * (v23 >> 6)])) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)&v7[8 * v24];
      }
      while (v28 == -1);
      v9 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)&v7[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    v10 = v3[6] + 40 * v9;
    *(_OWORD *)v10 = v31;
    *(_OWORD *)(v10 + 16) = v32;
    *(_QWORD *)(v10 + 32) = v33;
    sub_10000BE60(&v35, (_OWORD *)(v3[7] + 32 * v9));
    ++v3[2];
  }
  v16 = v8 + 5;
  if (v8 + 5 >= v29)
  {
LABEL_37:
    swift_release();
    sub_100035E28(a1);
    return;
  }
  v14 = *(_QWORD *)(v30 + 8 * v16);
  if (v14)
  {
    v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v29)
      goto LABEL_37;
    v14 = *(_QWORD *)(v30 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
}

id sub_1000AFBCC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RoutingAdvisoryInfoFooterView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RoutingAdvisoryInfoFooterView()
{
  return objc_opt_self(_TtC4Maps29RoutingAdvisoryInfoFooterView);
}

unint64_t sub_1000AFC58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101491E10;
  if (!qword_101491E10)
  {
    type metadata accessor for Key(255);
    result = swift_getWitnessTable(byte_100E23D50, v1);
    atomic_store(result, (unint64_t *)&qword_101491E10);
  }
  return result;
}

uint64_t sub_1000AFCA0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000AFCC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000AFCD4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

id sub_1000AFD88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  NSString v6;
  id v7;
  id v8;
  NSString v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  objc_super v16;

  swift_unknownObjectWeakInit(&v3[OBJC_IVAR____TtC4Maps25CuratedGuideTableViewCell_delegate], 0);
  *(_QWORD *)&v3[OBJC_IVAR____TtC4Maps25CuratedGuideTableViewCell_viewModel] = 0;
  if (a3)
  {
    swift_bridgeObjectRetain(a3);
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a3);
  }
  else
  {
    v6 = 0;
  }
  v16.receiver = v3;
  v16.super_class = (Class)type metadata accessor for CuratedGuideTableViewCell();
  v7 = objc_msgSendSuper2(&v16, "initWithStyle:reuseIdentifier:", a1, v6);

  v8 = v7;
  if (a3)
  {
    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a3);
  }
  else
  {
    v9 = 0;
  }
  objc_msgSend(v7, "setAccessibilityIdentifier:", v9);

  v10 = objc_msgSend(v7, "contentView");
  v11 = (void *)objc_opt_self(UIColor);
  v12 = objc_msgSend(v11, "clearColor");
  objc_msgSend(v10, "setBackgroundColor:", v12);

  v13 = v7;
  v14 = objc_msgSend(v11, "clearColor");
  objc_msgSend(v13, "setBackgroundColor:", v14);

  return v13;
}

void sub_1000B01A0(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  char v9;
  void *v10;
  char *v11;

  v3 = v2;
  swift_unknownObjectWeakAssign(v2 + OBJC_IVAR____TtC4Maps25CuratedGuideTableViewCell_delegate, a2);
  v5 = OBJC_IVAR____TtC4Maps25CuratedGuideTableViewCell_viewModel;
  v6 = *(void **)(v2 + OBJC_IVAR____TtC4Maps25CuratedGuideTableViewCell_viewModel);
  if (v6)
  {
    type metadata accessor for CuratedGuideViewModel(0);
    v7 = a1;
    v8 = v6;
    v9 = static NSObject.== infix(_:_:)(v8, v7);

    if ((v9 & 1) != 0)
      return;
    v10 = *(void **)(v3 + v5);
  }
  else
  {
    v10 = 0;
  }
  *(_QWORD *)(v3 + v5) = a1;
  v11 = a1;

  sub_1001AC984(v11);
}

void sub_1000B02D8()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  Class isa;
  objc_class *v16;
  void *v17;
  uint64_t Strong;
  uint64_t v19;
  char *v20;
  void *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  __n128 v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  uint64_t (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  double v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  _QWORD v50[5];
  objc_super v51;

  v1 = v0;
  v2 = sub_100008B04(&qword_101498D28);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v47 - v7;
  __chkstk_darwin(v9);
  v11 = (char *)&v47 - v10;
  __chkstk_darwin(v12);
  v14 = (char *)&v47 - v13;
  isa = UICellConfigurationState._bridgeToObjectiveC()().super.super.isa;
  v16 = (objc_class *)type metadata accessor for CuratedGuideTableViewCell();
  v51.receiver = v0;
  v51.super_class = v16;
  objc_msgSendSuper2(&v51, "_bridgedUpdateConfigurationUsingState:", isa);

  v17 = *(void **)&v0[OBJC_IVAR____TtC4Maps25CuratedGuideTableViewCell_viewModel];
  if (v17)
  {
    Strong = swift_unknownObjectWeakLoadStrong(&v0[OBJC_IVAR____TtC4Maps25CuratedGuideTableViewCell_delegate]);
    if (Strong)
    {
      v47 = v3;
      v48 = v14;
      v19 = Strong;
      v20 = v17;
      v21 = (void *)UICellConfigurationState.traitCollection.getter();
      objc_msgSend(v21, "userInterfaceStyle");

      __chkstk_darwin(v22);
      *(&v47 - 4) = (uint64_t)v20;
      *(&v47 - 3) = (uint64_t)v1;
      v49 = v19;
      *(&v47 - 2) = v19;
      *((_BYTE *)&v47 - 8) = v23;
      v24 = sub_100008B04(&qword_101498D30);
      v25 = sub_1000B0E74();
      UIHostingConfiguration<>.init(content:)(sub_1000B0E64, &v47 - 6, v24, v25, v26);
      v27 = v20;
      v29 = static Edge.Set.leading.getter(v28);
      v30 = OBJC_IVAR____TtC4Maps21CuratedGuideViewModel_metrics;
      v31 = *(_QWORD *)&v20[OBJC_IVAR____TtC4Maps21CuratedGuideViewModel_metrics];
      v32 = 16.0;
      v33 = 16.0;
      if (v31)
        v33 = *(double *)(v31 + OBJC_IVAR____TtC4Maps19GuideSummaryMetrics_leadingMargin);
      UIHostingConfiguration.margins(_:_:)(v29, v2, v33);
      v34 = *(uint64_t (**)(char *, uint64_t))(v47 + 8);
      v35 = v34(v5, v2);
      v36 = static Edge.Set.trailing.getter(v35);
      v37 = *(_QWORD *)&v27[v30];
      if (v37)
        v32 = *(double *)(v37 + OBJC_IVAR____TtC4Maps19GuideSummaryMetrics_trailingMargin);
      UIHostingConfiguration.margins(_:_:)(v36, v2, v32);
      v38 = v34(v8, v2);
      v39 = static Edge.Set.top.getter(v38);
      v40 = *(_QWORD *)&v27[v30];
      v41 = 16.0;
      v42 = 16.0;
      v43 = v48;
      if (v40)
        v42 = *(double *)(v40 + OBJC_IVAR____TtC4Maps19GuideSummaryMetrics_topMargin);
      UIHostingConfiguration.margins(_:_:)(v39, v2, v42);
      v44 = v34(v11, v2);
      v45 = static Edge.Set.bottom.getter(v44);
      v46 = *(_QWORD *)&v27[v30];
      if (v46)
        v41 = *(double *)(v46 + OBJC_IVAR____TtC4Maps19GuideSummaryMetrics_bottomMargin);
      v50[3] = v2;
      v50[4] = sub_100010D70(&qword_101498DA8, &qword_101498D28, (const char *)&protocol conformance descriptor for UIHostingConfiguration<A, B>);
      sub_100011DCC(v50);
      UIHostingConfiguration.margins(_:_:)(v45, v2, v41);
      v34(v43, v2);
      UITableViewCell.contentConfiguration.setter(v50);

      swift_unknownObjectRelease(v49);
    }
  }
}

uint64_t sub_1000B05FC@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v50 = a4;
  v55 = a3;
  v53 = a2;
  v49 = sub_100008B04(&qword_101498DA0);
  __chkstk_darwin(v49);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_100008B04(&qword_101498D78);
  __chkstk_darwin(v56);
  v10 = (uint64_t *)((char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  v13 = (char *)&v47 - v12;
  v54 = sub_100008B04(&qword_101498DB0);
  __chkstk_darwin(v54);
  v15 = (uint64_t *)((char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = a1[OBJC_IVAR____TtC4Maps21CuratedGuideViewModel_useRichLayout];
  v17 = type metadata accessor for CuratedGuideViewModel(0);
  v18 = sub_1000B11A8();
  v51 = EnvironmentObject.init()(v17, v18);
  v52 = v19;
  v20 = static ObservableObject.environmentStore.getter(v17, v18);
  KeyPath = swift_getKeyPath(&unk_100E2A318);
  v22 = swift_allocObject(&unk_1011A0980, 24, 7);
  swift_unknownObjectWeakInit(v22 + 16, v53);
  if (v16 == 1)
  {
    v23 = swift_allocObject(&unk_1011A09D0, 32, 7);
    v24 = v54;
    v25 = v55;
    *(_QWORD *)(v23 + 16) = v22;
    *(_QWORD *)(v23 + 24) = v25;
    v26 = v52;
    *v15 = v51;
    v15[1] = v26;
    v15[2] = v20;
    v15[3] = (uint64_t)a1;
    v15[4] = KeyPath;
    v15[5] = (uint64_t)sub_1000B12F0;
    v15[6] = v23;
    swift_storeEnumTagMultiPayload(v15, v24, 0);
    v27 = a1;
    swift_unknownObjectRetain(v25);
    v28 = sub_100008B04(&qword_101498D48);
    v29 = sub_1000B0EE0();
    v30 = sub_1000B1044();
    return _ConditionalContent<>.init(storage:)(v15, v28, v56, v29, v30);
  }
  else
  {
    v32 = swift_allocObject(&unk_1011A09A8, 32, 7);
    v53 = a5;
    v33 = v32;
    v48 = KeyPath;
    v34 = v20;
    v35 = v55;
    *(_QWORD *)(v32 + 16) = v22;
    *(_QWORD *)(v32 + 24) = v35;
    v36 = a1;
    v37 = swift_unknownObjectRetain(v35);
    v38 = static Alignment.center.getter(v37);
    v40 = v39;
    sub_1000B0ABC(v50 & 1, (uint64_t)v36, (uint64_t)v8);
    v41 = (uint64_t *)&v8[*(int *)(v49 + 36)];
    *v41 = v38;
    v41[1] = v40;
    v42 = v56;
    sub_10000C1FC((uint64_t)v8, (uint64_t)v10 + *(int *)(v56 + 36), &qword_101498DA0);
    v43 = v52;
    *v10 = v51;
    v10[1] = v43;
    v10[2] = v34;
    v10[3] = (uint64_t)a1;
    v10[4] = v48;
    v10[5] = (uint64_t)sub_1000B1220;
    v10[6] = v33;
    sub_100010CC4((uint64_t)v8, &qword_101498DA0);
    sub_1000207BC((uint64_t)v10, (uint64_t)v13, &qword_101498D78);
    sub_10000C1FC((uint64_t)v13, (uint64_t)v15, &qword_101498D78);
    swift_storeEnumTagMultiPayload(v15, v54, 1);
    v44 = sub_100008B04(&qword_101498D48);
    v45 = sub_1000B0EE0();
    v46 = sub_1000B1044();
    _ConditionalContent<>.init(storage:)(v15, v44, v42, v45, v46);
    return sub_100010CC4((uint64_t)v13, &qword_101498D78);
  }
}

void sub_1000B0968(uint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t Strong;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];

  v4 = *a1;
  v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v14, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (!Strong)
    return;
  v7 = (void *)Strong;
  if ((unint64_t)v4 >> 62)
  {
    if (v4 < 0)
      v13 = v4;
    else
      v13 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    if (_CocoaArrayWrapper.endIndex.getter(v13))
      goto LABEL_4;
LABEL_20:

    swift_bridgeObjectRelease(v4);
    return;
  }
  v8 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v4);
  if (!v8)
    goto LABEL_20;
LABEL_4:
  if ((v4 & 0xC000000000000001) != 0)
  {
    v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v4);
LABEL_7:
    v10 = v9;
    swift_bridgeObjectRelease(v4);
    if ((unint64_t)v4 >> 62)
    {
      if (v4 < 0)
        v11 = v4;
      else
        v11 = v4 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v4);
      v12 = _CocoaArrayWrapper.endIndex.getter(v11);
      swift_bridgeObjectRelease(v4);
      if (v12 != 1)
        goto LABEL_15;
    }
    else if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10) != 1)
    {
      goto LABEL_15;
    }
    objc_msgSend(a3, "didTapOnCuratedGuide:withCell:", v10, v7);
LABEL_15:

    return;
  }
  if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v9 = *(id *)(v4 + 32);
    goto LABEL_7;
  }
  __break(1u);
}

uint64_t sub_1000B0ABC@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;

  v6 = sub_100008B04(&qword_101498DC0);
  __chkstk_darwin(v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UnevenRoundedRectangle(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100008B04(&qword_101498DC8);
  __chkstk_darwin(v12);
  v15 = (uint64_t *)((char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((a1 & 1) != 0)
  {
    v16 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemGroupedBackgroundColor");
    v17 = Color.init(_:)(v16);
  }
  else
  {
    v17 = static Color.white.getter(v13);
  }
  v18 = v17;
  KeyPath = swift_getKeyPath(&unk_100E2A340);
  v20 = *(_QWORD *)(a2 + OBJC_IVAR____TtC4Maps21CuratedGuideViewModel_metrics);
  if (v20)
  {
    v21 = *(double *)(v20 + OBJC_IVAR____TtC4Maps19GuideSummaryMetrics_topLeadingCornerRadius);
    v22 = *(double *)(v20 + OBJC_IVAR____TtC4Maps19GuideSummaryMetrics_bottomLeadingCornerRadius);
    v23 = *(double *)(v20 + OBJC_IVAR____TtC4Maps19GuideSummaryMetrics_bottomTrailingCornerRadius);
    v24 = *(double *)(v20 + OBJC_IVAR____TtC4Maps19GuideSummaryMetrics_topTrailingCornerRadius);
  }
  else
  {
    v24 = 0.0;
    v21 = 0.0;
    v22 = 0.0;
    v23 = 0.0;
  }
  v25 = &v11[*(int *)(v9 + 20)];
  v26 = enum case for RoundedCornerStyle.continuous(_:);
  v27 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v25, v26, v27);
  *(double *)v11 = RectangleCornerRadii.init(topLeft:topRight:bottomRight:bottomLeft:)(v21, v24, v23, v22);
  *((_QWORD *)v11 + 1) = v28;
  *((_QWORD *)v11 + 2) = v29;
  *((_QWORD *)v11 + 3) = v30;
  sub_1000B1270((uint64_t)v11, (uint64_t)v8);
  *(_WORD *)&v8[*(int *)(v6 + 36)] = 256;
  sub_10000C1FC((uint64_t)v8, (uint64_t)v15 + *(int *)(v12 + 36), &qword_101498DC0);
  *v15 = KeyPath;
  v15[1] = v18;
  swift_retain();
  swift_retain();
  sub_100010CC4((uint64_t)v8, &qword_101498DC0);
  sub_1000B12B4((uint64_t)v11);
  swift_release();
  swift_release();
  return sub_1000207BC((uint64_t)v15, a3, &qword_101498DC8);
}

id sub_1000B0DDC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CuratedGuideTableViewCell();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CuratedGuideTableViewCell()
{
  return objc_opt_self(_TtC4Maps25CuratedGuideTableViewCell);
}

uint64_t sub_1000B0E64@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000B05FC(*(unsigned __int8 **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), a1);
}

unint64_t sub_1000B0E74()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101498D38;
  if (!qword_101498D38)
  {
    v1 = sub_10000E5D4(&qword_101498D30);
    v2[0] = sub_1000B0EE0();
    v2[1] = sub_1000B1044();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101498D38);
  }
  return result;
}

unint64_t sub_1000B0EE0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101498D40;
  if (!qword_101498D40)
  {
    v1 = sub_10000E5D4(&qword_101498D48);
    v2[0] = sub_1000B0F7C((unint64_t *)&qword_101498D50, (uint64_t *)&unk_101499F20, (uint64_t (*)(void))sub_1000B1000);
    v2[1] = sub_100010D70((unint64_t *)&unk_101499FF0, &qword_101498D68, (const char *)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101498D40);
  }
  return result;
}

uint64_t sub_1000B0F7C(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v6 = sub_10000E5D4(a2);
    v7[0] = a3();
    v7[1] = sub_100010D70((unint64_t *)&unk_101499F30, &qword_101498D60, (const char *)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v6, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000B1000()
{
  unint64_t result;

  result = qword_101498D58;
  if (!qword_101498D58)
  {
    result = swift_getWitnessTable("mo7", &type metadata for CuratedGuideView);
    atomic_store(result, (unint64_t *)&qword_101498D58);
  }
  return result;
}

unint64_t sub_1000B1044()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101498D70;
  if (!qword_101498D70)
  {
    v1 = sub_10000E5D4(&qword_101498D78);
    v2[0] = sub_1000B10C8();
    v2[1] = sub_100010D70(&qword_101498D98, &qword_101498DA0, (const char *)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101498D70);
  }
  return result;
}

unint64_t sub_1000B10C8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101498D80;
  if (!qword_101498D80)
  {
    v1 = sub_10000E5D4(&qword_101498D88);
    v2[0] = sub_1000B0F7C((unint64_t *)&qword_101499F40, &qword_101498D90, (uint64_t (*)(void))sub_1000B1164);
    v2[1] = sub_100010D70((unint64_t *)&unk_101499FF0, &qword_101498D68, (const char *)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101498D80);
  }
  return result;
}

unint64_t sub_1000B1164()
{
  unint64_t result;

  result = qword_101499F50;
  if (!qword_101499F50)
  {
    result = swift_getWitnessTable(byte_100E2F224, &type metadata for CuratedGuideListView);
    atomic_store(result, (unint64_t *)&qword_101499F50);
  }
  return result;
}

unint64_t sub_1000B11A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101498DB8;
  if (!qword_101498DB8)
  {
    v1 = type metadata accessor for CuratedGuideViewModel(255);
    result = swift_getWitnessTable("ml7", v1);
    atomic_store(result, (unint64_t *)&qword_101498DB8);
  }
  return result;
}

uint64_t sub_1000B11F8()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000B1220(uint64_t *a1)
{
  uint64_t v1;

  sub_1000B0968(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1000B123C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000B1270(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnevenRoundedRectangle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B12B4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UnevenRoundedRectangle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000B1314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v8[6] = a8;
  v8[7] = v19;
  v8[4] = a6;
  v8[5] = a7;
  v8[2] = a4;
  v8[3] = a5;
  v9 = type metadata accessor for Date(0);
  v8[8] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[9] = v10;
  v8[10] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Location(0);
  v8[11] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v8[12] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[13] = swift_task_alloc(v13);
  v8[14] = swift_task_alloc(v13);
  v8[15] = swift_task_alloc(v13);
  v8[16] = swift_task_alloc(v13);
  v14 = (*(_QWORD *)(*(_QWORD *)(sub_100008B04(&qword_10149E650) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[17] = swift_task_alloc(v14);
  v8[18] = swift_task_alloc(v14);
  v8[19] = swift_task_alloc(v14);
  v8[20] = swift_task_alloc(v14);
  v8[21] = swift_task_alloc(v14);
  v15 = ((uint64_t (*)(_QWORD))type metadata accessor for ClientOrigin)(0);
  v8[22] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v8[23] = v16;
  v8[24] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = ((uint64_t (*)(_QWORD))type metadata accessor for RequestOrigin)(0);
  v8[25] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000B1470, 0, 0);
}

uint64_t sub_1000B1470()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[24];
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[23] + 104))(v1, enum case for ClientOrigin.other(_:), v0[22]);
  RequestOrigin.init(_:)(v1);
  v2 = type metadata accessor for Session(0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v3 = (_QWORD *)swift_task_alloc(async function pointer to Session.init(_:)[1]);
  v0[26] = v3;
  *v3 = v0;
  v3[1] = sub_1000B1504;
  return Session.init(_:)(v0[25]);
}

uint64_t sub_1000B1504(uint64_t a1)
{
  uint64_t **v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;

  v3 = *v1;
  v4 = (*v1)[26];
  v5 = (*v1)[2];
  v6 = *v1;
  (*v1)[27] = a1;
  swift_task_dealloc(v4);
  v7 = OBJC_IVAR____TtC4Maps28FindMyHandleMapServiceTicket_handle;
  v3[28] = OBJC_IVAR____TtC4Maps28FindMyHandleMapServiceTicket_handle;
  v8 = v5 + v7;
  v9 = (uint64_t **)swift_task_alloc(dword_10149922C);
  v3[29] = (uint64_t)v9;
  *v9 = v6;
  v9[1] = (uint64_t *)sub_1000B15A0;
  return Session._maps_location(for:reverseGeocode:maxAge:)(v3[21], v8, 0, 1.79769313e308);
}

uint64_t sub_1000B15A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 232));
  if (v0)
  {
    swift_errorRelease(v0);
    v2 = sub_1000B21B8;
  }
  else
  {
    v2 = sub_1000B160C;
  }
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000B160C()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  double Double;
  _QWORD *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(void *, uint64_t);
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(void *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  uint64_t v74;
  double v75;
  double v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(uint64_t, uint64_t);
  uint64_t v98;

  v1 = *(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC4Maps28FindMyHandleMapServiceTicket_coordinate;
  if ((*(_BYTE *)(v1 + 16) & 1) != 0
    || (v3 = *(double *)v1, v2 = *(double *)(v1 + 8), !sub_1000B36E4(*(double *)v1, v2)))
  {
    v19 = *(_QWORD *)(v0 + 152);
    v20 = *(_QWORD *)(v0 + 88);
    v21 = *(_QWORD *)(v0 + 96);
    sub_1000B365C(*(_QWORD *)(v0 + 168), v19);
    v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
    *(_QWORD *)(v0 + 240) = v22;
    if (v22(v19, 1, v20) == 1)
    {
      sub_1000B36A4(*(_QWORD *)(v0 + 152));
    }
    else
    {
      v23 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 32))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 88));
      v24 = Location.latitude.getter(v23);
      v25 = ((double (*)(void))Location.longitude.getter)();
      if (sub_1000B36E4(v24, v25))
      {
        v27 = *(_QWORD *)(v0 + 72);
        v26 = *(_QWORD *)(v0 + 80);
        v28 = *(_QWORD *)(v0 + 64);
        v29 = ((uint64_t (*)(void))Date.init())();
        v30 = Date.timeIntervalSince1970.getter(v29);
        v31 = *(uint64_t (**)(uint64_t, uint64_t))(v27 + 8);
        v32 = v31(v26, v28);
        v33 = v30 - Location.timestamp.getter(v32);
        if (v33 <= GEOConfigGetDouble(MapsConfig_GTCachedLocationMaxAge, off_1014B4F78))
        {
          if (qword_101490EA0 != -1)
            swift_once(&qword_101490EA0, sub_10011478C);
          v97 = (void (*)(uint64_t, uint64_t))v31;
          v59 = type metadata accessor for Logger(0);
          v60 = sub_10000E918(v59, (uint64_t)qword_1014D4AF0);
          v61 = Logger.logObject.getter(v60);
          v62 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v61, v62))
          {
            v63 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v63 = 0;
            _os_log_impl((void *)&_mh_execute_header, v61, v62, "Using fresh cached handle location to resolve find my waypoint", v63, 2u);
            swift_slowDealloc(v63, -1, -1);
          }
          v64 = *(_QWORD *)(v0 + 120);
          v92 = *(_QWORD *)(v0 + 96);
          v93 = *(_QWORD *)(v0 + 216);
          v65 = *(_QWORD *)(v0 + 80);
          v94 = *(_QWORD *)(v0 + 88);
          v95 = *(_QWORD *)(v0 + 168);
          v66 = *(_QWORD *)(v0 + 64);
          v91 = *(_QWORD **)(v0 + 56);
          v68 = *(_QWORD *)(v0 + 40);
          v67 = *(void (**)(void *, uint64_t))(v0 + 48);
          v70 = *(_QWORD *)(v0 + 24);
          v69 = *(_QWORD *)(v0 + 32);
          v71 = *(_QWORD *)(v0 + 16);

          v73 = Location.latitude.getter(v72);
          v74 = Location.longitude.getter();
          v76 = v75;
          v77 = Location.timestamp.getter(v74);
          v79 = Date.init(timeIntervalSince1970:)(v78, v77);
          v80 = Date.timeIntervalSinceReferenceDate.getter(v79);
          v97(v65, v66);
          v81 = sub_1000B2BF0(v70, v69, v68, v67, v91, v73, v76, v80);
          swift_release(v93);
          (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v64, v94);
          sub_1000B36A4(v95);
          v58 = *(_QWORD *)(v71 + OBJC_IVAR____TtC4Maps28FindMyHandleMapServiceTicket_ticket);
          *(_QWORD *)(v71 + OBJC_IVAR____TtC4Maps28FindMyHandleMapServiceTicket_ticket) = v81;
          goto LABEL_22;
        }
      }
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 88));
    }
    v34 = *(_QWORD *)(v0 + 224);
    v35 = *(_QWORD *)(v0 + 16);
    Double = GEOConfigGetDouble(MapsConfig_GTLiveLocationFetchTimeout, off_1014B5048);
    v37 = (_QWORD *)swift_task_alloc(dword_101499244);
    *(_QWORD *)(v0 + 248) = v37;
    *v37 = v0;
    v37[1] = sub_1000B1BC8;
    return Session._maps_latestLocation(for:includeAddress:timeout:)(*(_QWORD *)(v0 + 144), v35 + v34, 0, Double);
  }
  if (qword_101490EA0 != -1)
    swift_once(&qword_101490EA0, sub_10011478C);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10000E918(v4, (uint64_t)qword_1014D4AF0);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Using provided coordinate to resolve find my waypoint", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }
  v9 = (uint64_t *)(v0 + 96);
  v10 = *(_QWORD *)(v0 + 96);
  v12 = *(_QWORD *)(v0 + 160);
  v11 = *(_QWORD *)(v0 + 168);
  v14 = (uint64_t *)(v0 + 88);
  v13 = *(_QWORD *)(v0 + 88);

  sub_1000B365C(v11, v12);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v12, 1, v13) == 1)
  {
    v15 = (uint64_t *)(v0 + 80);
    v16 = sub_1000B36A4(*(_QWORD *)(v0 + 160));
    v17 = Date.init()(v16);
    v18 = Date.timeIntervalSinceReferenceDate.getter(v17);
    v9 = (uint64_t *)(v0 + 72);
    v14 = (uint64_t *)(v0 + 64);
  }
  else
  {
    v15 = (uint64_t *)(v0 + 128);
    v40 = *(_QWORD *)(v0 + 72);
    v39 = *(_QWORD *)(v0 + 80);
    v41 = *(_QWORD *)(v0 + 64);
    v42 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 32))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 88));
    v43 = Location.timestamp.getter(v42);
    v45 = Date.init(timeIntervalSince1970:)(v44, v43);
    v18 = Date.timeIntervalSinceReferenceDate.getter(v45);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v41);
  }
  v46 = *v15;
  v47 = *v14;
  v48 = *v9;
  v49 = *(_QWORD *)(v0 + 216);
  v50 = *(_QWORD *)(v0 + 168);
  v51 = *(void (**)(void *, uint64_t))(v0 + 48);
  v52 = *(_QWORD **)(v0 + 56);
  v54 = *(_QWORD *)(v0 + 32);
  v53 = *(_QWORD *)(v0 + 40);
  v55 = *(_QWORD *)(v0 + 16);
  v56 = *(_QWORD *)(v0 + 24);
  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v46, v47);
  v57 = sub_1000B2BF0(v56, v54, v53, v51, v52, v3, v2, v18);
  swift_release(v49);
  sub_1000B36A4(v50);
  v58 = *(_QWORD *)(v55 + OBJC_IVAR____TtC4Maps28FindMyHandleMapServiceTicket_ticket);
  *(_QWORD *)(v55 + OBJC_IVAR____TtC4Maps28FindMyHandleMapServiceTicket_ticket) = v57;
LABEL_22:
  swift_unknownObjectRelease(v58);
  v82 = *(_QWORD *)(v0 + 192);
  v84 = *(_QWORD *)(v0 + 160);
  v83 = *(_QWORD *)(v0 + 168);
  v86 = *(_QWORD *)(v0 + 144);
  v85 = *(_QWORD *)(v0 + 152);
  v88 = *(_QWORD *)(v0 + 128);
  v87 = *(_QWORD *)(v0 + 136);
  v90 = *(_QWORD *)(v0 + 112);
  v89 = *(_QWORD *)(v0 + 120);
  v96 = *(_QWORD *)(v0 + 104);
  v98 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v82);
  swift_task_dealloc(v83);
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  swift_task_dealloc(v86);
  swift_task_dealloc(v87);
  swift_task_dealloc(v88);
  swift_task_dealloc(v89);
  swift_task_dealloc(v90);
  swift_task_dealloc(v96);
  swift_task_dealloc(v98);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B1BC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 248));
  if (v0)
  {
    swift_errorRelease(v0);
    v2 = sub_1000B2790;
  }
  else
  {
    v2 = sub_1000B1C34;
  }
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000B1C34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(id);
  void *v48;
  id v49;
  NSString v50;
  id v51;
  void *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v64)(void *, uint64_t);
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 88);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 240))(v1, 1, v2) == 1)
  {
    sub_1000B36A4(v1);
  }
  else
  {
    v3 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v0 + 96) + 32))(*(_QWORD *)(v0 + 112), v1, v2);
    v4 = Location.latitude.getter(v3);
    v5 = ((double (*)(void))Location.longitude.getter)();
    if (sub_1000B36E4(v4, v5))
    {
      if (qword_101490EA0 != -1)
        swift_once(&qword_101490EA0, sub_10011478C);
      v6 = type metadata accessor for Logger(0);
      v7 = sub_10000E918(v6, (uint64_t)qword_1014D4AF0);
      v8 = Logger.logObject.getter(v7);
      v9 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v8, v9))
      {
        v10 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "Using live handle location to resolve find my waypoint", v10, 2u);
        swift_slowDealloc(v10, -1, -1);
      }
      v67 = *(_QWORD *)(v0 + 216);
      v70 = *(_QWORD *)(v0 + 168);
      v11 = *(_QWORD *)(v0 + 112);
      goto LABEL_18;
    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 88));
  }
  v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 240);
  v13 = *(_QWORD *)(v0 + 136);
  v14 = *(_QWORD *)(v0 + 88);
  sub_1000B365C(*(_QWORD *)(v0 + 168), v13);
  if (v12(v13, 1, v14) != 1)
  {
    v15 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 32))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 88));
    v16 = Location.latitude.getter(v15);
    v17 = ((double (*)(void))Location.longitude.getter)();
    if (!sub_1000B36E4(v16, v17))
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 88));
      goto LABEL_20;
    }
    if (qword_101490EA0 != -1)
      swift_once(&qword_101490EA0, sub_10011478C);
    v18 = type metadata accessor for Logger(0);
    v19 = sub_10000E918(v18, (uint64_t)qword_1014D4AF0);
    v8 = Logger.logObject.getter(v19);
    v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v8, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v20, "Using old cached handle location to resolve find my waypoint", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }
    v67 = *(_QWORD *)(v0 + 216);
    v70 = *(_QWORD *)(v0 + 168);
    v11 = *(_QWORD *)(v0 + 104);
LABEL_18:
    v22 = *(_QWORD *)(v0 + 80);
    v68 = *(_QWORD *)(v0 + 88);
    v24 = *(_QWORD *)(v0 + 64);
    v23 = *(_QWORD *)(v0 + 72);
    v65 = *(_QWORD **)(v0 + 56);
    v66 = *(_QWORD *)(v0 + 96);
    v25 = *(_QWORD *)(v0 + 40);
    v64 = *(void (**)(void *, uint64_t))(v0 + 48);
    v27 = *(_QWORD *)(v0 + 24);
    v26 = *(_QWORD *)(v0 + 32);
    v28 = *(_QWORD *)(v0 + 16);

    v30 = Location.latitude.getter(v29);
    v31 = Location.longitude.getter();
    v33 = v32;
    v34 = Location.timestamp.getter(v31);
    v36 = Date.init(timeIntervalSince1970:)(v35, v34);
    v37 = Date.timeIntervalSinceReferenceDate.getter(v36);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
    v38 = sub_1000B2BF0(v27, v26, v25, v64, v65, v30, v33, v37);
    swift_release(v67);
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v11, v68);
    sub_1000B36A4(v70);
    v39 = *(_QWORD *)(v28 + OBJC_IVAR____TtC4Maps28FindMyHandleMapServiceTicket_ticket);
    *(_QWORD *)(v28 + OBJC_IVAR____TtC4Maps28FindMyHandleMapServiceTicket_ticket) = v38;
    swift_unknownObjectRelease(v39);
    goto LABEL_25;
  }
  sub_1000B36A4(*(_QWORD *)(v0 + 136));
LABEL_20:
  if (qword_101490EA0 != -1)
    swift_once(&qword_101490EA0, sub_10011478C);
  v40 = type metadata accessor for Logger(0);
  v41 = sub_10000E918(v40, (uint64_t)qword_1014D4AF0);
  v42 = Logger.logObject.getter(v41);
  v43 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v42, v43))
  {
    v44 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v44 = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Did not have a provided coordinate nor was able to fetch handle location", v44, 2u);
    swift_slowDealloc(v44, -1, -1);
  }
  v45 = *(_QWORD *)(v0 + 216);
  v46 = *(_QWORD *)(v0 + 168);
  v47 = *(void (**)(id))(v0 + 32);

  v48 = off_101498DD8;
  v49 = objc_allocWithZone((Class)NSError);
  swift_bridgeObjectRetain(v48);
  v50 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v48);
  v51 = objc_msgSend(v49, "initWithDomain:code:userInfo:", v50, 0, 0);

  v52 = (void *)_convertErrorToNSError(_:)(v51);
  v53 = objc_msgSend((id)objc_opt_self(Result), "resultWithError:", v52);

  v47(v53);
  swift_release(v45);

  sub_1000B36A4(v46);
LABEL_25:
  v54 = *(_QWORD *)(v0 + 192);
  v56 = *(_QWORD *)(v0 + 160);
  v55 = *(_QWORD *)(v0 + 168);
  v58 = *(_QWORD *)(v0 + 144);
  v57 = *(_QWORD *)(v0 + 152);
  v60 = *(_QWORD *)(v0 + 128);
  v59 = *(_QWORD *)(v0 + 136);
  v62 = *(_QWORD *)(v0 + 112);
  v61 = *(_QWORD *)(v0 + 120);
  v69 = *(_QWORD *)(v0 + 104);
  v71 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v69);
  swift_task_dealloc(v71);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B21B8()
{
  uint64_t v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  double v24;
  double v25;
  _BOOL8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  double Double;
  _QWORD *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(void *, uint64_t);
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(void *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  double v76;
  double v77;
  double v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(uint64_t, uint64_t);
  uint64_t v99;

  v1 = (uint64_t *)(v0 + 96);
  v2 = (_QWORD *)(v0 + 88);
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 96) + 56))(*(_QWORD *)(v0 + 168), 1, 1, *(_QWORD *)(v0 + 88));
  v3 = *(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC4Maps28FindMyHandleMapServiceTicket_coordinate;
  if ((*(_BYTE *)(v3 + 16) & 1) != 0
    || (v5 = *(double *)v3, v4 = *(double *)(v3 + 8), !sub_1000B36E4(*(double *)v3, v4)))
  {
    v19 = *(_QWORD *)(v0 + 152);
    v20 = *(_QWORD *)(v0 + 88);
    v21 = *(_QWORD *)(v0 + 96);
    sub_1000B365C(*(_QWORD *)(v0 + 168), v19);
    v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
    *(_QWORD *)(v0 + 240) = v22;
    if (v22(v19, 1, v20) == 1)
    {
      sub_1000B36A4(*(_QWORD *)(v0 + 152));
    }
    else
    {
      v23 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 32))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 88));
      v24 = Location.latitude.getter(v23);
      v25 = ((double (*)(void))Location.longitude.getter)();
      v26 = sub_1000B36E4(v24, v25);
      if (v26)
      {
        v28 = *(_QWORD *)(v0 + 72);
        v27 = *(_QWORD *)(v0 + 80);
        v29 = *(_QWORD *)(v0 + 64);
        v30 = Date.init()(v26);
        v31 = Date.timeIntervalSince1970.getter(v30);
        v32 = *(uint64_t (**)(uint64_t, uint64_t))(v28 + 8);
        v33 = v32(v27, v29);
        v34 = v31 - Location.timestamp.getter(v33);
        if (v34 <= GEOConfigGetDouble(MapsConfig_GTCachedLocationMaxAge, off_1014B4F78))
        {
          if (qword_101490EA0 != -1)
            swift_once(&qword_101490EA0, sub_10011478C);
          v98 = (void (*)(uint64_t, uint64_t))v32;
          v60 = type metadata accessor for Logger(0);
          v61 = sub_10000E918(v60, (uint64_t)qword_1014D4AF0);
          v62 = Logger.logObject.getter(v61);
          v63 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v62, v63))
          {
            v64 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v64 = 0;
            _os_log_impl((void *)&_mh_execute_header, v62, v63, "Using fresh cached handle location to resolve find my waypoint", v64, 2u);
            swift_slowDealloc(v64, -1, -1);
          }
          v65 = *(_QWORD *)(v0 + 120);
          v93 = *(_QWORD *)(v0 + 96);
          v94 = *(_QWORD *)(v0 + 216);
          v66 = *(_QWORD *)(v0 + 80);
          v95 = *(_QWORD *)(v0 + 88);
          v96 = *(_QWORD *)(v0 + 168);
          v67 = *(_QWORD *)(v0 + 64);
          v92 = *(_QWORD **)(v0 + 56);
          v69 = *(_QWORD *)(v0 + 40);
          v68 = *(void (**)(void *, uint64_t))(v0 + 48);
          v71 = *(_QWORD *)(v0 + 24);
          v70 = *(_QWORD *)(v0 + 32);
          v72 = *(_QWORD *)(v0 + 16);

          v74 = Location.latitude.getter(v73);
          v75 = Location.longitude.getter();
          v77 = v76;
          v78 = Location.timestamp.getter(v75);
          v80 = Date.init(timeIntervalSince1970:)(v79, v78);
          v81 = Date.timeIntervalSinceReferenceDate.getter(v80);
          v98(v66, v67);
          v82 = sub_1000B2BF0(v71, v70, v69, v68, v92, v74, v77, v81);
          swift_release(v94);
          (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v65, v95);
          sub_1000B36A4(v96);
          v59 = *(_QWORD *)(v72 + OBJC_IVAR____TtC4Maps28FindMyHandleMapServiceTicket_ticket);
          *(_QWORD *)(v72 + OBJC_IVAR____TtC4Maps28FindMyHandleMapServiceTicket_ticket) = v82;
          goto LABEL_23;
        }
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 88));
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD))(*v1 + 8))(*(_QWORD *)(v0 + 120), *v2);
      }
    }
    v35 = *(_QWORD *)(v0 + 224);
    v36 = *(_QWORD *)(v0 + 16);
    Double = GEOConfigGetDouble(MapsConfig_GTLiveLocationFetchTimeout, off_1014B5048);
    v38 = (_QWORD *)swift_task_alloc(dword_101499244);
    *(_QWORD *)(v0 + 248) = v38;
    *v38 = v0;
    v38[1] = sub_1000B1BC8;
    return Session._maps_latestLocation(for:includeAddress:timeout:)(*(_QWORD *)(v0 + 144), v36 + v35, 0, Double);
  }
  if (qword_101490EA0 != -1)
    swift_once(&qword_101490EA0, sub_10011478C);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10000E918(v6, (uint64_t)qword_1014D4AF0);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Using provided coordinate to resolve find my waypoint", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }
  v12 = *(_QWORD *)(v0 + 160);
  v11 = *(_QWORD *)(v0 + 168);
  v13 = *(_QWORD *)(v0 + 88);
  v14 = *(_QWORD *)(v0 + 96);

  sub_1000B365C(v11, v12);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    v15 = (uint64_t *)(v0 + 80);
    v16 = sub_1000B36A4(*(_QWORD *)(v0 + 160));
    v17 = Date.init()(v16);
    v18 = Date.timeIntervalSinceReferenceDate.getter(v17);
    v1 = (uint64_t *)(v0 + 72);
    v2 = (_QWORD *)(v0 + 64);
  }
  else
  {
    v15 = (uint64_t *)(v0 + 128);
    v41 = *(_QWORD *)(v0 + 72);
    v40 = *(_QWORD *)(v0 + 80);
    v42 = *(_QWORD *)(v0 + 64);
    v43 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 32))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 88));
    v44 = Location.timestamp.getter(v43);
    v46 = Date.init(timeIntervalSince1970:)(v45, v44);
    v18 = Date.timeIntervalSinceReferenceDate.getter(v46);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
  }
  v47 = *v15;
  v48 = *v2;
  v49 = *v1;
  v50 = *(_QWORD *)(v0 + 216);
  v51 = *(_QWORD *)(v0 + 168);
  v52 = *(void (**)(void *, uint64_t))(v0 + 48);
  v53 = *(_QWORD **)(v0 + 56);
  v55 = *(_QWORD *)(v0 + 32);
  v54 = *(_QWORD *)(v0 + 40);
  v56 = *(_QWORD *)(v0 + 16);
  v57 = *(_QWORD *)(v0 + 24);
  (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v47, v48);
  v58 = sub_1000B2BF0(v57, v55, v54, v52, v53, v5, v4, v18);
  swift_release(v50);
  sub_1000B36A4(v51);
  v59 = *(_QWORD *)(v56 + OBJC_IVAR____TtC4Maps28FindMyHandleMapServiceTicket_ticket);
  *(_QWORD *)(v56 + OBJC_IVAR____TtC4Maps28FindMyHandleMapServiceTicket_ticket) = v58;
LABEL_23:
  swift_unknownObjectRelease(v59);
  v83 = *(_QWORD *)(v0 + 192);
  v85 = *(_QWORD *)(v0 + 160);
  v84 = *(_QWORD *)(v0 + 168);
  v87 = *(_QWORD *)(v0 + 144);
  v86 = *(_QWORD *)(v0 + 152);
  v89 = *(_QWORD *)(v0 + 128);
  v88 = *(_QWORD *)(v0 + 136);
  v91 = *(_QWORD *)(v0 + 112);
  v90 = *(_QWORD *)(v0 + 120);
  v97 = *(_QWORD *)(v0 + 104);
  v99 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v83);
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  swift_task_dealloc(v86);
  swift_task_dealloc(v87);
  swift_task_dealloc(v88);
  swift_task_dealloc(v89);
  swift_task_dealloc(v90);
  swift_task_dealloc(v91);
  swift_task_dealloc(v97);
  swift_task_dealloc(v99);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B2790()
{
  uint64_t v0;
  unsigned int (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(id);
  void *v39;
  id v40;
  NSString v41;
  id v42;
  void *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v55)(void *, uint64_t);
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 96) + 56))(*(_QWORD *)(v0 + 144), 1, 1, *(_QWORD *)(v0 + 88));
  sub_1000B36A4(*(_QWORD *)(v0 + 144));
  v1 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 240);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 88);
  sub_1000B365C(*(_QWORD *)(v0 + 168), v2);
  if (v1(v2, 1, v3) == 1)
  {
    sub_1000B36A4(*(_QWORD *)(v0 + 136));
LABEL_10:
    if (qword_101490EA0 != -1)
      swift_once(&qword_101490EA0, sub_10011478C);
    v31 = type metadata accessor for Logger(0);
    v32 = sub_10000E918(v31, (uint64_t)qword_1014D4AF0);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Did not have a provided coordinate nor was able to fetch handle location", v35, 2u);
      swift_slowDealloc(v35, -1, -1);
    }
    v36 = *(_QWORD *)(v0 + 216);
    v37 = *(_QWORD *)(v0 + 168);
    v38 = *(void (**)(id))(v0 + 32);

    v39 = off_101498DD8;
    v40 = objc_allocWithZone((Class)NSError);
    swift_bridgeObjectRetain(v39);
    v41 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v39);
    v42 = objc_msgSend(v40, "initWithDomain:code:userInfo:", v41, 0, 0);

    v43 = (void *)_convertErrorToNSError(_:)(v42);
    v44 = objc_msgSend((id)objc_opt_self(Result), "resultWithError:", v43);

    v38(v44);
    swift_release(v36);

    sub_1000B36A4(v37);
    goto LABEL_15;
  }
  v4 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 32))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 88));
  v5 = Location.latitude.getter(v4);
  v6 = ((double (*)(void))Location.longitude.getter)();
  if (!sub_1000B36E4(v5, v6))
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 88));
    goto LABEL_10;
  }
  if (qword_101490EA0 != -1)
    swift_once(&qword_101490EA0, sub_10011478C);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_10000E918(v7, (uint64_t)qword_1014D4AF0);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Using old cached handle location to resolve find my waypoint", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }
  v12 = *(_QWORD *)(v0 + 104);
  v57 = *(_QWORD *)(v0 + 96);
  v58 = *(_QWORD *)(v0 + 216);
  v13 = *(_QWORD *)(v0 + 80);
  v59 = *(_QWORD *)(v0 + 88);
  v61 = *(_QWORD *)(v0 + 168);
  v15 = *(_QWORD *)(v0 + 64);
  v14 = *(_QWORD *)(v0 + 72);
  v16 = *(_QWORD *)(v0 + 40);
  v55 = *(void (**)(void *, uint64_t))(v0 + 48);
  v56 = *(_QWORD **)(v0 + 56);
  v18 = *(_QWORD *)(v0 + 24);
  v17 = *(_QWORD *)(v0 + 32);
  v19 = *(_QWORD *)(v0 + 16);

  v21 = Location.latitude.getter(v20);
  v22 = Location.longitude.getter();
  v24 = v23;
  v25 = Location.timestamp.getter(v22);
  v27 = Date.init(timeIntervalSince1970:)(v26, v25);
  v28 = Date.timeIntervalSinceReferenceDate.getter(v27);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  v29 = sub_1000B2BF0(v18, v17, v16, v55, v56, v21, v24, v28);
  swift_release(v58);
  (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v12, v59);
  sub_1000B36A4(v61);
  v30 = *(_QWORD *)(v19 + OBJC_IVAR____TtC4Maps28FindMyHandleMapServiceTicket_ticket);
  *(_QWORD *)(v19 + OBJC_IVAR____TtC4Maps28FindMyHandleMapServiceTicket_ticket) = v29;
  swift_unknownObjectRelease(v30);
LABEL_15:
  v45 = *(_QWORD *)(v0 + 192);
  v47 = *(_QWORD *)(v0 + 160);
  v46 = *(_QWORD *)(v0 + 168);
  v49 = *(_QWORD *)(v0 + 144);
  v48 = *(_QWORD *)(v0 + 152);
  v51 = *(_QWORD *)(v0 + 128);
  v50 = *(_QWORD *)(v0 + 136);
  v53 = *(_QWORD *)(v0 + 112);
  v52 = *(_QWORD *)(v0 + 120);
  v60 = *(_QWORD *)(v0 + 104);
  v62 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v60);
  swift_task_dealloc(v62);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_1000B2BF0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *a1, uint64_t a2), _QWORD *a5, double a6, double a7, double a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id result;
  void *v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  id v24;
  _QWORD *v25;
  id v26;
  void **v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void (*v31)(void *, uint64_t);
  _QWORD *v32;

  v16 = Handle.identifier.getter(a1);
  v18 = v17;
  result = objc_msgSend(objc_allocWithZone((Class)GEOLocation), "initWithGEOCoordinate:", a6, a7);
  if (result)
  {
    v20 = result;
    objc_msgSend(result, "setTimestamp:", a8);
    v21 = (_QWORD *)swift_allocObject(&unk_1011A0A00, 48, 7);
    v21[2] = v16;
    v21[3] = v18;
    v21[4] = a2;
    v21[5] = a3;
    v31 = sub_1000B3754;
    v32 = v21;
    v27 = _NSConcreteStackBlock;
    v28 = 1107296256;
    v29 = sub_1000142F0;
    v30 = &unk_1011A0A18;
    v22 = _Block_copy(&v27);
    v23 = v32;
    swift_retain(a3);
    v24 = v20;
    swift_release(v23);
    if (a4)
    {
      v31 = a4;
      v32 = a5;
      v27 = _NSConcreteStackBlock;
      v28 = 1107296256;
      v29 = sub_1001E2858;
      v30 = &unk_1011A0A40;
      a4 = (void (*)(void *, uint64_t))_Block_copy(&v27);
      v25 = v32;
      swift_retain(a5);
      swift_release(v25);
    }
    v26 = objc_msgSend((id)objc_opt_self(GEOComposedWaypoint), "composedWaypointForLocation:mapItem:traits:completionHandler:networkActivityHandler:", v24, 0, a1, v22, a4);

    _Block_release(a4);
    _Block_release(v22);

    return v26;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000B2DC0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  *(_BYTE *)(v0 + OBJC_IVAR____TtC4Maps28FindMyHandleMapServiceTicket_isCancelled) = 1;
  v1 = OBJC_IVAR____TtC4Maps28FindMyHandleMapServiceTicket_ticket;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC4Maps28FindMyHandleMapServiceTicket_ticket);
  if (v2)
  {
    objc_msgSend(v2, "cancel");
    v2 = *(void **)(v0 + v1);
  }
  *(_QWORD *)(v0 + v1) = 0;
  return swift_unknownObjectRelease(v2);
}

void sub_1000B2E44(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(id))
{
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  NSString v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  NSString v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  NSString v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  NSString v29;
  id v30;
  id v31;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  NSString v43;
  id v44;
  uint64_t v45;
  id v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  id v50;
  uint64_t v51;
  void *v52;
  id v53;
  void *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;

  if (a1)
  {
    v6 = qword_101490EA0;
    v7 = a1;
    if (v6 != -1)
      swift_once(&qword_101490EA0, sub_10011478C);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_10000E918(v8, (uint64_t)qword_1014D4AF0);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Waypoint resolution succeeded", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    v13 = String._bridgeToObjectiveC()();
    objc_msgSend(v7, "setFindMyHandleID:", v13);

    v14 = objc_msgSend(v7, "mapItemStorage");
    if (v14)
    {
      v15 = objc_msgSend(v7, "findMyHandle");
      if (v15)
      {
        v16 = v15;
        sub_100113D90();
        v18 = v17;

        v19 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v18);
        objc_msgSend(v7, "setUserValuesName:", v19);

      }
      v20 = objc_msgSend(v7, "findMyHandle");
      if (v20)
      {
        v21 = v20;
        sub_100113D30();
        v23 = v22;

        if (v23)
        {
          v24 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v23);
          objc_msgSend(v7, "setAddressBookContactName:", v24);

        }
      }
      v25 = objc_msgSend(v7, "findMyHandle");
      if (v25)
      {
        v26 = v25;
        sub_100113F60();
        v28 = v27;

        if (v28)
        {
          v29 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v28);
          objc_msgSend(v7, "setAddressBookContactSpokenName:", v29);

        }
      }
    }
    v30 = objc_msgSend((id)objc_opt_self(GEOFeatureStyleAttributes), "sharedLocationStyleAttributes");
    objc_msgSend(v7, "setStyleAttributes:", v30);

    objc_msgSend(v7, "recomputeGeoWaypointTyped");
    v31 = objc_msgSend((id)objc_opt_self(Result), "resultWithValue:", v7);

  }
  else if (a2)
  {
    swift_errorRetain(a2);
    if (qword_101490EA0 != -1)
      swift_once(&qword_101490EA0, sub_10011478C);
    v33 = type metadata accessor for Logger(0);
    sub_10000E918(v33, (uint64_t)qword_1014D4AF0);
    swift_errorRetain(a2);
    v34 = swift_errorRetain(a2);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(12, -1);
      v38 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v37 = 138412290;
      swift_errorRetain(a2);
      v39 = _swift_stdlib_bridgeErrorToNSError(a2);
      v56 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v37 + 4, v37 + 12);
      *v38 = v39;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Waypoint resolution failed: %@", v37, 0xCu);
      v40 = sub_100008B04((uint64_t *)&unk_101494470);
      swift_arrayDestroy(v38, 1, v40);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v37, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    v52 = (void *)_convertErrorToNSError(_:)(a2);
    v31 = objc_msgSend((id)objc_opt_self(Result), "resultWithError:", v52);
    swift_errorRelease(a2);

  }
  else
  {
    v41 = off_101498DD8;
    v42 = objc_allocWithZone((Class)NSError);
    swift_bridgeObjectRetain(v41);
    v43 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v41);
    v44 = objc_msgSend(v42, "initWithDomain:code:userInfo:", v43, 1, 0);

    if (qword_101490EA0 != -1)
      swift_once(&qword_101490EA0, sub_10011478C);
    v45 = type metadata accessor for Logger(0);
    sub_10000E918(v45, (uint64_t)qword_1014D4AF0);
    v46 = v44;
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc(12, -1);
      v55 = (_QWORD *)swift_slowAlloc(8, -1);
      v56 = (uint64_t)v46;
      *(_DWORD *)v49 = 138412290;
      v50 = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v49 + 4, v49 + 12);
      *v55 = v46;

      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Waypoint resolution failed: %@", v49, 0xCu);
      v51 = sub_100008B04((uint64_t *)&unk_101494470);
      swift_arrayDestroy(v55, 1, v51);
      swift_slowDealloc(v55, -1, -1);
      swift_slowDealloc(v49, -1, -1);

    }
    else
    {

    }
    v53 = v46;
    v54 = (void *)_convertErrorToNSError(_:)(v53);
    v31 = objc_msgSend((id)objc_opt_self(Result), "resultWithError:", v54);

  }
  a5(v31);

}

uint64_t sub_1000B3590()
{
  return type metadata accessor for FindMyHandleMapServiceTicket(0);
}

uint64_t type metadata accessor for FindMyHandleMapServiceTicket(uint64_t a1)
{
  uint64_t result;

  result = qword_101498EE0;
  if (!qword_101498EE0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FindMyHandleMapServiceTicket);
  return result;
}

uint64_t sub_1000B35D4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for Handle(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100E2A3B0;
    v4[2] = &unk_100E2A3C8;
    v4[3] = &unk_100E2A3E0;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000B365C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008B04(&qword_10149E650);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B36A4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008B04(&qword_10149E650);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

BOOL sub_1000B36E4(double a1, double a2)
{
  _BOOL4 v2;

  v2 = a2 >= -180.0;
  if (a2 > 180.0)
    v2 = 0;
  if (a1 < -90.0)
    v2 = 0;
  return a1 <= 90.0 && v2;
}

uint64_t sub_1000B3728()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_1000B3754(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000B2E44(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(id))(v2 + 32));
}

uint64_t sub_1000B3760(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000B3770(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1000B3780(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void *);
  id v5;

  v4 = *(void (**)(void *))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4(a2);
  swift_release(v3);

}

id sub_1000B381C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UGCSubmissionLookupManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for UGCSubmissionLookupManager()
{
  return objc_opt_self(_TtC4Maps26UGCSubmissionLookupManager);
}

void sub_1000B3980(uint64_t a1, char a2, void (*a3)(_QWORD, uint64_t), uint64_t a4)
{
  uint64_t v4;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  _QWORD *v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  id v31[7];

  v31[0] = 0;
  v9 = objc_msgSend((id)objc_opt_self(UGCCredentialsBuilder), "buildICloudUserCredentialsWithError:", v31);
  v10 = v31[0];
  if (v9)
  {
    v11 = v9;
    v12 = swift_allocObject(&unk_1011A0AC8, 24, 7);
    swift_unknownObjectWeakInit(v12 + 16, v4);
    v13 = swift_allocObject(&unk_1011A0E38, 49, 7);
    *(_QWORD *)(v13 + 16) = a3;
    *(_QWORD *)(v13 + 24) = a4;
    *(_QWORD *)(v13 + 32) = v12;
    *(_QWORD *)(v13 + 40) = a1;
    *(_BYTE *)(v13 + 48) = a2 & 1;
    v14 = objc_allocWithZone((Class)UGCSubmissionLookupTicket);
    swift_retain();
    v15 = v11;
    v16 = v10;
    sub_10000C128((uint64_t)a3, a4);
    v17 = objc_msgSend(v14, "init");
    v18 = OBJC_IVAR____TtC4Maps26UGCSubmissionLookupManager_ticket;
    v19 = *(void **)(v4 + OBJC_IVAR____TtC4Maps26UGCSubmissionLookupManager_ticket);
    *(_QWORD *)(v4 + OBJC_IVAR____TtC4Maps26UGCSubmissionLookupManager_ticket) = v17;

    v20 = *(void **)(v4 + v18);
    if (v20)
    {
      v21 = (_QWORD *)swift_allocObject(&unk_1011A0E60, 32, 7);
      v21[2] = sub_1000B5CA8;
      v21[3] = v13;
      v31[4] = sub_100016728;
      v31[5] = v21;
      v31[0] = _NSConcreteStackBlock;
      v31[1] = (id)1107296256;
      v31[2] = sub_1000142F0;
      v31[3] = &unk_1011A0E78;
      v22 = _Block_copy(v31);
      v23 = v20;
      swift_retain();
      swift_release();
      objc_msgSend(v23, "fetchSubmissionForMuid:userInfo:completion:", a1, v15, v22);
      _Block_release(v22);
      swift_release();
      swift_release();

    }
    else
    {
      swift_release();
      swift_release();

    }
  }
  else
  {
    v24 = v31[0];
    v25 = _convertNSErrorToError(_:)(v10);

    swift_willThrow(v26);
    if (a3)
    {
      v27 = sub_1000B4E68();
      v28 = swift_allocError(&type metadata for UGCSubmissionLookupManager.LookupManagerError, v27, 0, 0);
      strcpy(v29, "Empty UserInfo");
      v29[15] = -18;
      a3(0, v28);
      swift_errorRelease(v25);
      v30 = v28;
    }
    else
    {
      v30 = v25;
    }
    swift_errorRelease(v30);
  }
}

void sub_1000B3C48(id a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v12;
  id v13;
  unsigned __int8 v14;
  uint64_t Strong;
  void *v16;
  _BYTE v17[24];

  if (a2)
  {
    if (a3)
      a3(0);
  }
  else
  {
    v12 = a5 + 16;
    if (a1)
    {
      v13 = objc_msgSend(a1, "previousSubmission");
      v14 = objc_msgSend(v13, "hasScorecard");

      if ((v14 & 1) != 0)
        objc_msgSend(a1, "setHasRatingsWithICloud:", 1);
    }
    swift_beginAccess(v12, v17, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v12);
    if (Strong)
    {
      v16 = (void *)Strong;
      sub_1000B50F8(a6, a1, a7 & 1, (void (*)(_QWORD, _QWORD))a3, a4);

    }
  }
}

void sub_1000B3F40(uint64_t a1, uint64_t a2, char a3, void (*a4)(_QWORD, uint64_t), uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  Class isa;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  id v25[7];

  v10 = swift_allocObject(&unk_1011A0AA0, 24, 7);
  v11 = (void *)objc_opt_self(UGCCredentialsBuilder);
  v25[0] = 0;
  v12 = objc_msgSend(v11, "buildICloudUserCredentialsWithError:", v25);
  v13 = v25[0];
  if (v12)
  {
    *(_QWORD *)(v10 + 16) = v12;
    sub_1000B4DDC();
    v14 = v13;
    isa = Array._bridgeToObjectiveC()().super.isa;
    v16 = swift_allocObject(&unk_1011A0AC8, 24, 7);
    swift_unknownObjectWeakInit(v16 + 16, v5);
    v17 = swift_allocObject(&unk_1011A0AF0, 57, 7);
    *(_QWORD *)(v17 + 16) = a4;
    *(_QWORD *)(v17 + 24) = a5;
    *(_QWORD *)(v17 + 32) = v16;
    *(_QWORD *)(v17 + 40) = a1;
    *(_QWORD *)(v17 + 48) = v10;
    *(_BYTE *)(v17 + 56) = a3 & 1;
    v25[4] = sub_1000B4F0C;
    v25[5] = (id)v17;
    v25[0] = _NSConcreteStackBlock;
    v25[1] = (id)1107296256;
    v25[2] = sub_1000B3780;
    v25[3] = &unk_1011A0B08;
    v18 = _Block_copy(v25);
    sub_10000C128((uint64_t)a4, a5);
    swift_retain();
    swift_release();
    objc_msgSend(v11, "fetchCommunityIDWithMUID:identifierHistory:shouldIncreaseCount:CompletionHandler:", a1, isa, 0, v18);
    _Block_release(v18);
    swift_release();

  }
  else
  {
    v19 = v25[0];
    v20 = _convertNSErrorToError(_:)(v13);

    swift_willThrow(v21);
    if (a4)
    {
      v22 = sub_1000B4E68();
      v23 = swift_allocError(&type metadata for UGCSubmissionLookupManager.LookupManagerError, v22, 0, 0);
      *v24 = 0xD00000000000001ALL;
      v24[1] = 0x8000000100E46EE0;
      a4(0, v23);
      swift_errorRelease(v20);
      v20 = v23;
    }
    swift_errorRelease(v20);
    swift_deallocUninitializedObject(v10, 24, 7);
  }
}

void sub_1000B41AC(void *a1, void (*a2)(_QWORD, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v14;
  uint64_t Strong;
  char *v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  id v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD aBlock[6];
  _BYTE v31[24];

  if (a1)
  {
    v14 = a4 + 16;
    swift_beginAccess(a4 + 16, v31, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v14);
    if (Strong)
    {
      v16 = (char *)Strong;
      v17 = swift_allocObject(&unk_1011A0B40, 57, 7);
      *(_QWORD *)(v17 + 16) = a4;
      *(_QWORD *)(v17 + 24) = a5;
      *(_QWORD *)(v17 + 32) = a6;
      *(_QWORD *)(v17 + 40) = a2;
      *(_QWORD *)(v17 + 48) = a3;
      *(_BYTE *)(v17 + 56) = a7 & 1;
      v18 = objc_allocWithZone((Class)UGCSubmissionLookupTicket);
      swift_retain();
      swift_retain();
      v19 = a1;
      sub_10000C128((uint64_t)a2, a3);
      v20 = objc_msgSend(v18, "init");
      v21 = OBJC_IVAR____TtC4Maps26UGCSubmissionLookupManager_ticket;
      v22 = *(void **)&v16[OBJC_IVAR____TtC4Maps26UGCSubmissionLookupManager_ticket];
      *(_QWORD *)&v16[OBJC_IVAR____TtC4Maps26UGCSubmissionLookupManager_ticket] = v20;

      v23 = *(void **)&v16[v21];
      if (v23)
      {
        v24 = swift_allocObject(&unk_1011A0B68, 32, 7);
        *(_QWORD *)(v24 + 16) = sub_1000B4F74;
        *(_QWORD *)(v24 + 24) = v17;
        aBlock[4] = sub_100016728;
        aBlock[5] = v24;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_1000142F0;
        aBlock[3] = &unk_1011A0B80;
        v25 = _Block_copy(aBlock);
        v26 = v23;
        swift_retain();
        swift_release();
        objc_msgSend(v26, "fetchSubmissionForMuid:userInfo:completion:", a5, v19, v25);
        _Block_release(v25);

        swift_release();
      }
      else
      {

        swift_release();
      }
    }
  }
  else if (a2)
  {
    v27 = sub_1000B4E68();
    v28 = swift_allocError(&type metadata for UGCSubmissionLookupManager.LookupManagerError, v27, 0, 0);
    *v29 = 0xD000000000000017;
    v29[1] = 0x8000000100E46F00;
    a2(0, v28);
    swift_errorRelease(v28);
  }
}

void sub_1000B4400(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v16;
  uint64_t Strong;
  char *v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  _QWORD aBlock[6];
  _BYTE v33[24];
  _BYTE v34[24];

  v16 = a3 + 16;
  swift_beginAccess(a3 + 16, v34, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v16);
  if (Strong)
  {
    v18 = (char *)Strong;
    swift_beginAccess(a5 + 16, v33, 0, 0);
    v19 = *(void **)(a5 + 16);
    v20 = swift_allocObject(&unk_1011A0BB8, 65, 7);
    *(_QWORD *)(v20 + 16) = a3;
    *(_QWORD *)(v20 + 24) = a1;
    *(_QWORD *)(v20 + 32) = a2;
    *(_QWORD *)(v20 + 40) = a6;
    *(_QWORD *)(v20 + 48) = a7;
    *(_QWORD *)(v20 + 56) = a4;
    v31 = a4;
    *(_BYTE *)(v20 + 64) = a8 & 1;
    v21 = objc_allocWithZone((Class)UGCSubmissionLookupTicket);
    v22 = v19;
    swift_retain();
    v23 = a1;
    swift_errorRetain(a2);
    sub_10000C128(a6, a7);
    v24 = objc_msgSend(v21, "init");
    v25 = OBJC_IVAR____TtC4Maps26UGCSubmissionLookupManager_ticket;
    v26 = *(void **)&v18[OBJC_IVAR____TtC4Maps26UGCSubmissionLookupManager_ticket];
    *(_QWORD *)&v18[OBJC_IVAR____TtC4Maps26UGCSubmissionLookupManager_ticket] = v24;

    v27 = *(void **)&v18[v25];
    if (v27)
    {
      v28 = swift_allocObject(&unk_1011A0BE0, 32, 7);
      *(_QWORD *)(v28 + 16) = sub_1000B4FC8;
      *(_QWORD *)(v28 + 24) = v20;
      aBlock[4] = sub_100016728;
      aBlock[5] = v28;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000142F0;
      aBlock[3] = &unk_1011A0BF8;
      v29 = _Block_copy(aBlock);
      v30 = v27;
      swift_retain();
      swift_release();
      objc_msgSend(v30, "fetchSubmissionForMuid:userInfo:completion:", v31, v22, v29);
      _Block_release(v29);

      swift_release();
    }
    else
    {

      swift_release();
    }
  }
}

uint64_t sub_1000B4600(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v17;
  uint64_t result;
  void *v19;
  uint64_t v20;
  id v21;
  _BYTE v22[24];

  v17 = a3 + 16;
  swift_beginAccess(a3 + 16, v22, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v17);
  if (result)
  {
    v19 = (void *)result;
    v20 = swift_allocObject(&unk_1011A0C30, 57, 7);
    *(_QWORD *)(v20 + 16) = a6;
    *(_QWORD *)(v20 + 24) = a7;
    *(_QWORD *)(v20 + 32) = a1;
    *(_QWORD *)(v20 + 40) = a3;
    *(_QWORD *)(v20 + 48) = a8;
    *(_BYTE *)(v20 + 56) = a9 & 1;
    sub_10000C128(a6, a7);
    v21 = a1;
    swift_retain();
    sub_1000B5904(a1, a2, a4, a5, (void (*)(id, uint64_t))sub_1000B5038);

    return swift_release();
  }
  return result;
}

void sub_1000B4700(void *a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4, id a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v13;
  id v14;
  unsigned int v15;
  uint64_t Strong;
  void *v18;
  _BYTE v19[24];

  if (a2)
  {
    if (a3)
      a3(0);
  }
  else
  {
    v13 = a6 + 16;
    if (a5)
    {
      v14 = objc_msgSend(a5, "previousSubmission");
      v15 = objc_msgSend(v14, "hasScorecard");

      if (v15 && a1 != 0)
        objc_msgSend(a1, "setHasRatingsWithICloud:", 1);
    }
    swift_beginAccess(v13, v19, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v13);
    if (Strong)
    {
      v18 = (void *)Strong;
      sub_1000B50F8(a7, a1, a8 & 1, (void (*)(_QWORD, _QWORD))a3, a4);

    }
  }
}

void sub_1000B48BC(void (*a1)(id, id))
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  NSString v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;

  v2 = (id)GEOErrorDomain(a1);
  if (v2)
  {
    v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    v5 = v4;

    v6 = objc_allocWithZone((Class)NSError);
    v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
    v8 = objc_msgSend(v6, "initWithDomain:code:userInfo:", v7, -8, 0);

    v9 = objc_allocWithZone((Class)UGCSubmissionLookupResult);
    v14 = v8;
    v10 = (void *)_convertErrorToNSError(_:)(v14);
    v11 = objc_msgSend(v9, "initWithError:", v10);

    if (a1)
    {
      v12 = v14;
      v13 = v11;
      a1(v11, v14);

      v11 = v12;
    }

  }
  else
  {
    __break(1u);
  }
}

void sub_1000B49E4(char a1, void *a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v10;
  id v11;
  void *v12;
  _QWORD *v13;
  void *v14;
  id v15;
  void *v16;
  _QWORD *v17;
  void *v18;
  id v19;
  void **v20;
  uint64_t v21;
  void (*v22)(uint64_t, void *);
  void *v23;
  void (*v24)(uint64_t);
  _QWORD *v25;

  if ((a1 & 1) == 0 || !a2)
    goto LABEL_5;
  v10 = a2;
  v11 = objc_msgSend(v10, "numberOfPhotosAdded");
  if (v11 == objc_msgSend(a3, "numberOfPhotosAdded"))
  {

LABEL_5:
    v12 = (void *)objc_opt_self(UGCReviewedPlaceManager);
    v13 = (_QWORD *)swift_allocObject(&unk_1011A0D20, 40, 7);
    v13[2] = a4;
    v13[3] = a5;
    v13[4] = a6;
    v24 = sub_1000B5C28;
    v25 = v13;
    v20 = _NSConcreteStackBlock;
    v21 = 1107296256;
    v22 = sub_1000B3780;
    v23 = &unk_1011A0D38;
    v14 = _Block_copy(&v20);
    sub_10000C128(a4, a5);
    v15 = a6;
    swift_release();
    objc_msgSend(v12, "updateLocalCacheWithReviewedPlace:completion:", a3, v14);
    _Block_release(v14);
    return;
  }
  objc_msgSend(v10, "setNumberOfPhotosAdded:", objc_msgSend(a3, "numberOfPhotosAdded"));
  v16 = (void *)objc_opt_self(UGCReviewedPlaceManager);
  v17 = (_QWORD *)swift_allocObject(&unk_1011A0D70, 40, 7);
  v17[2] = a4;
  v17[3] = a5;
  v17[4] = a6;
  v24 = sub_1000B5C50;
  v25 = v17;
  v20 = _NSConcreteStackBlock;
  v21 = 1107296256;
  v22 = sub_1000B3780;
  v23 = &unk_1011A0D88;
  v18 = _Block_copy(&v20);
  sub_10000C128(a4, a5);
  v19 = a6;
  swift_release();
  objc_msgSend(v16, "addOrEditReviewedPlace:completion:", v10, v18);
  _Block_release(v18);

}

void sub_1000B4BE4(uint64_t a1, void (*a2)(uint64_t, _QWORD), uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *format;
  uint64_t v19;
  uint64_t v20;

  if (a1)
  {
    if (qword_101490D78 != -1)
      swift_once(&qword_101490D78, sub_1000B505C);
    v9 = type metadata accessor for Logger(0);
    sub_10000E918(v9, (uint64_t)qword_101498EF8);
    swift_errorRetain(a1);
    v10 = swift_errorRetain(a1);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v13 = 138412290;
      swift_errorRetain(a1);
      format = a5;
      v15 = a4;
      v16 = _swift_stdlib_bridgeErrorToNSError(a1);
      v19 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v13 + 4, v13 + 12);
      *v14 = v16;
      a4 = v15;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, format, v13, 0xCu);
      v17 = sub_100008B04((uint64_t *)&unk_101494470);
      swift_arrayDestroy(v14, 1, v17);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

  }
  if (a2)
    a2(a4, 0);
}

unint64_t sub_1000B4DDC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10149AA00;
  if (!qword_10149AA00)
  {
    v1 = objc_opt_self(GEOMapItemIdentifier);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10149AA00);
  }
  return result;
}

uint64_t sub_1000B4E18()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000B4E3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100015E98(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_1000B4E44()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

unint64_t sub_1000B4E68()
{
  unint64_t result;

  result = qword_101498F40;
  if (!qword_101498F40)
  {
    result = swift_getWitnessTable("-k7", &type metadata for UGCSubmissionLookupManager.LookupManagerError);
    atomic_store(result, (unint64_t *)&qword_101498F40);
  }
  return result;
}

uint64_t sub_1000B4EAC()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000B4ED0()
{
  _QWORD *v0;

  if (v0[2])
    swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 57, 7);
}

void sub_1000B4F0C(void *a1)
{
  uint64_t v1;

  sub_1000B41AC(a1, *(void (**)(_QWORD, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_BYTE *)(v1 + 56));
}

uint64_t sub_1000B4F20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000B4F30(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000B4F38()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  if (v0[5])
    swift_release(v0[6]);
  return swift_deallocObject(v0, 57, 7);
}

uint64_t sub_1000B4F74(uint64_t a1, uint64_t a2)
{
  return sub_1000B5044(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000B4400);
}

uint64_t sub_1000B4F84()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_errorRelease(*(_QWORD *)(v0 + 32));
  if (*(_QWORD *)(v0 + 40))
    swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 65, 7);
}

uint64_t sub_1000B4FC8(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000B4600(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_BYTE *)(v2 + 64));
}

uint64_t sub_1000B4FFC()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 57, 7);
}

uint64_t sub_1000B5038(uint64_t a1, uint64_t a2)
{
  return sub_1000B5044(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000B4700);
}

uint64_t sub_1000B5044(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v3;

  return a3(a1, a2, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(unsigned __int8 *)(v3 + 56));
}

uint64_t sub_1000B505C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v0 = type metadata accessor for Logger(0);
  sub_10000E930(v0, qword_101498EF8);
  sub_10000E918(v0, (uint64_t)qword_101498EF8);
  v5 = type metadata accessor for UGCSubmissionLookupManager();
  v1 = sub_100008B04(&qword_101498F48);
  v2 = String.init<A>(describing:)(&v5, v1);
  return Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xEE007370614D2E65, v2, v3);
}

void sub_1000B50F8(uint64_t a1, void *a2, char a3, void (*a4)(_QWORD, _QWORD), uint64_t a5)
{
  void (*v6)(_QWORD, _QWORD);
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  void (*v23)(_QWORD, _QWORD);
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t BOOL;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  Class isa;
  _QWORD *v41;
  void *v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  void **aBlock;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  _QWORD *v52;

  v6 = a4;
  if (a2)
  {
    v10 = objc_allocWithZone((Class)UGCReviewedPlace);
    v11 = a2;
    v12 = objc_msgSend(v10, "initWithMUID:", a1);
    v13 = objc_msgSend(v11, "previousSubmission");
    v14 = objc_msgSend(v13, "imagesCount");

    objc_msgSend(v12, "setNumberOfPhotosAdded:", v14);
    v15 = objc_msgSend(v11, "previousSubmission");
    LODWORD(v14) = objc_msgSend(v15, "hasScorecard");

    if ((_DWORD)v14)
    {
      v16 = objc_msgSend(v11, "previousSubmission");
      v17 = objc_msgSend(v16, "scorecard");

      if (!v17)
      {
        __break(1u);
        return;
      }
      v18 = sub_1009CF4D0(v17);

      objc_msgSend(v12, "setRecommendState:", v18);
    }
    if (qword_101490D78 != -1)
      swift_once(&qword_101490D78, sub_1000B505C);
    v19 = type metadata accessor for Logger(0);
    sub_10000E918(v19, (uint64_t)qword_101498EF8);
    v20 = v12;
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.info.getter();
    v46 = a1;
    if (os_log_type_enabled(v21, v22))
    {
      v45 = v11;
      v23 = v6;
      v24 = a3;
      v25 = a5;
      v26 = swift_slowAlloc(22, -1);
      *(_DWORD *)v26 = 134218240;
      aBlock = (void **)objc_msgSend(v20, "recommendState");
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v48, v26 + 4, v26 + 12);
      *(_WORD *)(v26 + 12) = 2048;
      aBlock = (void **)objc_msgSend(v20, "numberOfPhotosAdded");
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v48, v26 + 14, v26 + 22);

      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Fetched submission with rating state %ld and number of photos added %lu", (uint8_t *)v26, 0x16u);
      v27 = v26;
      a5 = v25;
      LOBYTE(v25) = v24;
      v6 = v23;
      v11 = v45;
      swift_slowDealloc(v27, -1, -1);

      if ((v25 & 1) == 0)
        goto LABEL_18;
    }
    else
    {

      if ((a3 & 1) == 0)
      {
LABEL_18:
        v39 = (void *)objc_opt_self(UGCReviewedPlaceManager);
        sub_1000B4DDC();
        isa = Array._bridgeToObjectiveC()().super.isa;
        v41 = (_QWORD *)swift_allocObject(&unk_1011A0C58, 48, 7);
        v41[2] = v20;
        v41[3] = v6;
        v41[4] = a5;
        v41[5] = v11;
        v51 = sub_1000B5BE8;
        v52 = v41;
        aBlock = _NSConcreteStackBlock;
        v48 = 1107296256;
        v49 = sub_10019B464;
        v50 = &unk_1011A0C70;
        v42 = _Block_copy(&aBlock);
        v43 = v11;
        v44 = v20;
        sub_10000C128((uint64_t)v6, a5);
        swift_release();
        objc_msgSend(v39, "fetchReviewedPlaceForMUID:withIdentifierHistory:completion:", a1, isa, v42);
        _Block_release(v42);

        return;
      }
    }
    if ((objc_msgSend(v20, "hasCachedValues") & 1) != 0)
      goto LABEL_18;
    BOOL = GEOConfigGetBOOL(MapsConfig_LagunaBeachShouldTreatEmptyLookupResponseAsDeleted, off_1014B3DA8);
    if (!(_DWORD)BOOL)
      goto LABEL_18;
    v32 = Logger.logObject.getter(BOOL);
    v33 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "We infer from the empty lookup result that there is no submission stored server side.", v34, 2u);
      swift_slowDealloc(v34, -1, -1);
    }

    v35 = swift_allocObject(&unk_1011A0CA8, 32, 7);
    *(_QWORD *)(v35 + 16) = v6;
    *(_QWORD *)(v35 + 24) = a5;
    v36 = (void *)objc_opt_self(UGCReviewedPlaceManager);
    v37 = swift_allocObject(&unk_1011A0CD0, 32, 7);
    *(_QWORD *)(v37 + 16) = sub_1000B5BF8;
    *(_QWORD *)(v37 + 24) = v35;
    v51 = sub_10000BF08;
    v52 = (_QWORD *)v37;
    aBlock = _NSConcreteStackBlock;
    v48 = 1107296256;
    v49 = sub_1000B3780;
    v50 = &unk_1011A0CE8;
    v38 = _Block_copy(&aBlock);
    sub_10000C128((uint64_t)v6, a5);
    swift_retain();
    swift_release();
    objc_msgSend(v36, "removeReviewedPlaceForMUID:completion:", v46, v38);
    _Block_release(v38);

    swift_release();
  }
  else if (a4)
  {
    v28 = sub_1000B4E68();
    v29 = swift_allocError(&type metadata for UGCSubmissionLookupManager.LookupManagerError, v28, 0, 0);
    strcpy(v30, "Empty Result");
    v30[13] = 0;
    *((_WORD *)v30 + 7) = -5120;
    v6(0, v29);
    swift_errorRelease(v29);
  }
}

void sub_1000B568C(void *a1, void *a2, void (*a3)(id, _QWORD))
{
  id v6;
  unsigned __int8 v7;
  id v8;
  unsigned int v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  NSString v24;
  NSString v25;
  id v26;
  id v27;

  v6 = objc_msgSend(a1, "previousSubmission");
  v7 = objc_msgSend(v6, "hasScorecard");

  if ((v7 & 1) == 0)
  {
    v8 = objc_msgSend(a2, "previousSubmission");
    v9 = objc_msgSend(v8, "hasScorecard");

    if (v9)
    {
      v10 = objc_msgSend(a1, "previousSubmission");
      v11 = objc_msgSend(a2, "previousSubmission");
      v12 = objc_msgSend(v11, "scorecard");

      objc_msgSend(v10, "setScorecard:", v12);
    }
  }
  v13 = objc_msgSend(a1, "previousSubmission");
  v14 = objc_msgSend(a2, "previousSubmission");
  v15 = objc_msgSend(v14, "images");

  objc_msgSend(v13, "setImages:", v15);
  v16 = objc_msgSend(a1, "parentSubmissionIdentifier");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v18 = v17;

  v19 = objc_msgSend(a2, "parentSubmissionIdentifier");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v21 = v20;

  v22 = objc_msgSend(a1, "previousSubmission");
  v23 = objc_allocWithZone((Class)UGCSubmissionLookupResult);
  v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v18);
  v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v21);
  v27 = objc_msgSend(v23, "initWithRatingsSubmissionIdentifier:photosSubmissionIdentifier:previousSubmission:", v24, v25, v22);

  if (a3)
  {
    v26 = v27;
    a3(v27, 0);

  }
}

void sub_1000B5904(id a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(id, uint64_t))
{
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  NSString v14;
  NSString v15;
  id v16;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  BOOL v26;
  id v27;
  id v28;

  if (a2)
  {
    if (!a4 && a3)
    {
      v8 = a3;
      v9 = objc_msgSend(v8, "parentSubmissionIdentifier");
      static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      v11 = v10;

      v12 = objc_msgSend(v8, "previousSubmission");
      v13 = objc_allocWithZone((Class)UGCSubmissionLookupResult);
      v14 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v11);
      v15 = String._bridgeToObjectiveC()();
      v16 = objc_msgSend(v13, "initWithRatingsSubmissionIdentifier:photosSubmissionIdentifier:previousSubmission:", v14, v15, v12);
LABEL_8:
      v28 = v16;

      if (a5)
      {
        v27 = v28;
        a5(v28, 0);

        v25 = v27;
      }
      else
      {

        v25 = v28;
      }

      return;
    }
  }
  else if (a4)
  {
    if (a1)
    {
      v8 = a1;
      v18 = objc_msgSend(v8, "parentSubmissionIdentifier");
      static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      v20 = v19;

      v21 = objc_msgSend(v8, "parentSubmissionIdentifier");
      static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      v23 = v22;

      v12 = objc_msgSend(v8, "previousSubmission");
      v24 = objc_allocWithZone((Class)UGCSubmissionLookupResult);
      v14 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v20);
      v15 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v23);
      v16 = objc_msgSend(v24, "initWithRatingsSubmissionIdentifier:photosSubmissionIdentifier:previousSubmission:", v14, v15, v12);
      goto LABEL_8;
    }
  }
  else if (a1)
  {
    v26 = objc_msgSend(a1, "status") != (id)1 || a3 == 0;
    if (!v26 && objc_msgSend(a3, "status") == (id)1)
    {
      sub_1000B568C(a3, a1, a5);
      return;
    }
  }
  if (a5)
    a5(0, a4);
}

uint64_t sub_1000B5BAC()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24))
    swift_release(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

void sub_1000B5BE8(char a1, void *a2)
{
  uint64_t v2;

  sub_1000B49E4(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(void **)(v2 + 40));
}

void sub_1000B5BF8()
{
  uint64_t v0;

  sub_1000B48BC(*(void (**)(id, id))(v0 + 16));
}

uint64_t sub_1000B5C00()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000B5C28(uint64_t a1)
{
  uint64_t v1;

  sub_1000B4BE4(a1, *(void (**)(uint64_t, _QWORD))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), "We failed to update local cache with %@");
}

void sub_1000B5C50(uint64_t a1)
{
  uint64_t v1;

  sub_1000B4BE4(a1, *(void (**)(uint64_t, _QWORD))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), "We failed to update sync cache with %@");
}

uint64_t sub_1000B5C74()
{
  _QWORD *v0;

  if (v0[2])
    swift_release(v0[3]);
  swift_release(v0[4]);
  return swift_deallocObject(v0, 49, 7);
}

void sub_1000B5CA8(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000B3C48(a1, a2, *(void (**)(_QWORD))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_BYTE *)(v2 + 48));
}

ValueMetadata *type metadata accessor for UGCSubmissionLookupManager.LookupManagerError()
{
  return &type metadata for UGCSubmissionLookupManager.LookupManagerError;
}

id sub_1000B5DC8()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  NSBundle v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  unint64_t v10;
  void *object;
  Swift::String v12;
  Swift::String v13;
  void *v14;
  id v15;
  void *v16;
  id result;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  NSString v24;
  NSString v25;
  NSString v26;
  id v27;
  id v28;
  unint64_t v29;
  objc_super v30;
  Swift::String v31;

  v1 = v0;
  v2 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v3 = objc_msgSend(v2, "userInterfaceLayoutDirection");

  if (v3 == (id)1)
  {
    if (qword_101490ED0 != -1)
      swift_once(&qword_101490ED0, sub_10011833C);
    v4.super.isa = (Class)qword_1014D4B80;
    v5 = 0xD000000000000031;
    v6 = 0xD000000000000036;
    v29 = 0x8000000100E47280;
    v7 = 0x8000000100E47210;
    v8 = "Pin a line to the top of the screen by swiping it left";
  }
  else
  {
    if (qword_101490ED0 != -1)
      swift_once(&qword_101490ED0, sub_10011833C);
    v4.super.isa = (Class)qword_1014D4B80;
    v5 = 0xD000000000000031;
    v6 = 0xD000000000000037;
    v29 = 0x8000000100E47170;
    v7 = 0x8000000100E47100;
    v8 = "Pin a line to the top of the screen by swiping it right";
  }
  v9 = (unint64_t)(v8 - 32) | 0x8000000000000000;
  v10 = 0xD000000000000024;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)(&v7 + -8), (Swift::String_optional)0, v4, *(Swift::String *)&v6, *(Swift::String *)&v5)._object;
  if (qword_101490ED0 != -1)
    swift_once(&qword_101490ED0, sub_10011833C);
  v12._countAndFlagsBits = 0xD000000000000021;
  v31._countAndFlagsBits = 0xD00000000000002FLL;
  v31._object = (void *)0x8000000100E471E0;
  v12._object = (void *)0x8000000100E471B0;
  v13._countAndFlagsBits = 0x7373696D736944;
  v13._object = (void *)0xE700000000000000;
  v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v12, (Swift::String_optional)0, (NSBundle)qword_1014D4B80, v13, v31)._object;
  v15 = objc_allocWithZone((Class)sub_100008B04(&qword_101498F78));
  v16 = (void *)UIHostingController.init(rootView:)(v15);
  result = objc_msgSend(v16, "view");
  if (!result)
  {
    __break(1u);
    goto LABEL_15;
  }
  v18 = result;
  objc_msgSend(result, "setPreservesSuperviewLayoutMargins:", 0);

  result = objc_msgSend(v16, "view");
  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v19 = result;
  objc_msgSend(result, "setLayoutMargins:", UIEdgeInsetsZero.top, UIEdgeInsetsZero.left, UIEdgeInsetsZero.bottom, UIEdgeInsetsZero.right);

  result = objc_msgSend(v16, "view");
  if (result)
  {
    v20 = result;
    v21 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
    objc_msgSend(v20, "setBackgroundColor:", v21);

    v22 = objc_allocWithZone((Class)TeachableMomentConfiguration);
    v23 = v16;
    v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v14);
    v26 = String._bridgeToObjectiveC()();
    v27 = objc_msgSend(v22, "initWithTitle:buttonTitle:userDefaultSaveKey:illustrationViewController:", v24, v25, v26, v23);

    v30.receiver = v1;
    v30.super_class = (Class)type metadata accessor for NearbyTeachableMomentContaineeViewController();
    v28 = objc_msgSendSuper2(&v30, "initWithTeachableMomentConfiguration:", v27);

    return v28;
  }
LABEL_16:
  __break(1u);
  return result;
}

id sub_1000B61B8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NearbyTeachableMomentContaineeViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for NearbyTeachableMomentContaineeViewController()
{
  return objc_opt_self(_TtC4Maps44NearbyTeachableMomentContaineeViewController);
}

BOOL sub_1000B6314()
{
  void *v0;
  id v1;
  NSString v2;
  unsigned __int8 v3;
  id v5;
  NSString v6;
  uint64_t v7;

  v0 = (void *)objc_opt_self(NSUserDefaults);
  v1 = objc_msgSend(v0, "standardUserDefaults");
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "BOOLForKey:", v2);

  if ((v3 & 1) != 0)
    return 0;
  v5 = objc_msgSend(v0, "standardUserDefaults");
  v6 = String._bridgeToObjectiveC()();
  v7 = (uint64_t)objc_msgSend(v5, "integerForKey:", v6);

  return v7 > 2;
}

void sub_1000B64DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC4Maps18InfoCardHeaderView_title);
  v4 = *(_QWORD *)(v2 + OBJC_IVAR____TtC4Maps18InfoCardHeaderView_title + 8);
  *v3 = a1;
  v3[1] = a2;
  swift_bridgeObjectRelease(v4);
  v5 = *(void **)(v2 + OBJC_IVAR____TtC4Maps18InfoCardHeaderView_titleLabel);
  v6 = v3[1];
  if (v6)
  {
    swift_bridgeObjectRetain(v6);
    v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    v7 = 0;
  }
  objc_msgSend(v5, "setText:", v7);

}

void sub_1000B6630()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  double v11;
  id v12;
  id v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  unint64_t v18;
  id v19;
  void *v20;
  id v21;
  char v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Class isa;
  uint64_t v31;
  _BYTE v32[24];

  v1 = *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps18InfoCardHeaderView__buttonConfigurations];
  v2 = v0;
  v3 = swift_bridgeObjectRetain(v1);
  v4 = sub_1000BBD1C(v3, v2);
  swift_bridgeObjectRelease(v1);

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC4Maps18InfoCardHeaderView_actionButtons);
  swift_beginAccess(v2 + OBJC_IVAR____TtC4Maps18InfoCardHeaderView_actionButtons, v32, 1, 0);
  v6 = *v5;
  *v5 = (uint64_t)v4;
  swift_bridgeObjectRelease(v6);
  if (-[PlaceSummaryTableViewCell canBecomeFirstResponder]_0((void *)v2))
    v7 = 12.0;
  else
    v7 = 16.0;
  v8 = *v5;
  if ((unint64_t)*v5 >> 62)
    goto LABEL_37;
  v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(*v5);
  while (v9)
  {
    if (v9 < 1)
    {
      __break(1u);
      return;
    }
    v31 = v2;
    v10 = 0;
    v2 = 0;
    while (1)
    {
      if ((v8 & 0xC000000000000001) != 0)
      {
        v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v2, v8);
        if (!v10)
          goto LABEL_16;
      }
      else
      {
        v13 = *(id *)(v8 + 8 * v2 + 32);
        if (!v10)
        {
LABEL_16:
          v14 = 8.0;
          goto LABEL_17;
        }
      }
      v14 = objc_msgSend(v10, "isHidden", v31) ? 8.0 : 5.0;
LABEL_17:
      v15 = *v5;
      if ((unint64_t)*v5 >> 62)
      {
        if (v15 < 0)
          v23 = *v5;
        else
          v23 = v15 & 0xFFFFFFFFFFFFFF8;
        v24 = v13;
        swift_bridgeObjectRetain(v15);
        v16 = _CocoaArrayWrapper.endIndex.getter(v23);
        if (!v16)
        {
LABEL_8:

          swift_bridgeObjectRelease(v15);
          v11 = 5.0;
          goto LABEL_9;
        }
      }
      else
      {
        v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
        v17 = v13;
        swift_bridgeObjectRetain(v15);
        if (!v16)
          goto LABEL_8;
      }
      v18 = v16 - 1;
      if (__OFSUB__(v16, 1))
        break;
      if ((v15 & 0xC000000000000001) != 0)
      {
        v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v18, v15);
      }
      else
      {
        if ((v18 & 0x8000000000000000) != 0)
          goto LABEL_35;
        if (v18 >= *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_36;
        v19 = *(id *)(v15 + 8 * v18 + 32);
      }
      v20 = v19;
      swift_bridgeObjectRelease(v15);
      sub_10000E4BC(0, (unint64_t *)&unk_101499130, MUCardButton_ptr);
      v21 = v13;
      v22 = static NSObject.== infix(_:_:)(v21, v20);

      if ((v22 & 1) != 0)
        v11 = 16.0;
      else
        v11 = 5.0;
LABEL_9:
      ++v2;
      v12 = v13;
      objc_msgSend(v12, "setDirectionalLayoutMargins:", 16.0, v14, v7, v11);

      v10 = v13;
      if (v9 == v2)
      {
        v2 = v31;
        goto LABEL_42;
      }
    }
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    if (v8 < 0)
      v25 = v8;
    else
      v25 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v8);
    v9 = _CocoaArrayWrapper.endIndex.getter(v25);
  }
  v12 = 0;
LABEL_42:
  swift_bridgeObjectRelease(v8);

  v26 = *(void **)(v2 + OBJC_IVAR____TtC4Maps18InfoCardHeaderView_actionButtonsLayoutGuide);
  v27 = *v5;
  v28 = swift_bridgeObjectRetain(*v5);
  v29 = sub_10012D680(v28);
  swift_bridgeObjectRelease(v27);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v29);
  objc_msgSend(v26, "_maps_setArrangedSubviews:", isa);

}

void sub_1000B6AB4()
{
  uint64_t v0;
  double v1;
  int64_t v2;
  uint64_t v3;
  uint64_t *i;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  char v14;
  uint64_t v15;
  id v16;
  void *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  double v35;
  id v36;
  id v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  unint64_t v42;
  id v43;
  void *v44;
  id v45;
  char v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t *v54;
  int64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  _QWORD v59[3];
  char v60[32];

  v57 = OBJC_IVAR____TtC4Maps18InfoCardHeaderView__buttonConfigurations;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC4Maps18InfoCardHeaderView__buttonConfigurations);
  if ((unint64_t)v2 >> 62)
    goto LABEL_65;
  v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC4Maps18InfoCardHeaderView__buttonConfigurations));
  for (i = &OBJC_IVAR____TtC4Maps18InfoCardHeaderView_blurButtons;
        v3;
        i = &OBJC_IVAR____TtC4Maps18InfoCardHeaderView_blurButtons)
  {
    v54 = (uint64_t *)&v58[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_actionButtons];
    v5 = OBJC_IVAR____TtC4Maps18InfoCardHeaderView_hideTitleLabel;
    v56 = v2 & 0xC000000000000001;
    swift_beginAccess(&v58[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_actionButtons], v60, 0, 0);
    v6 = 0;
    v55 = v2;
    v50 = v2 + 32;
    v51 = v2 & 0xFFFFFFFFFFFFFF8;
    v52 = &v58[v5];
    v53 = v3;
    while (1)
    {
      if (v56)
      {
        v7 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v55);
      }
      else
      {
        if (v6 >= *(_QWORD *)(v51 + 16))
          goto LABEL_64;
        v7 = (char *)*(id *)(v50 + 8 * v6);
      }
      v8 = v7;
      if (__OFADD__(v6++, 1))
        break;
      v10 = *(_QWORD *)&v58[v57];
      if ((unint64_t)v10 >> 62)
      {
        if (v10 < 0)
          v28 = *(_QWORD *)&v58[v57];
        else
          v28 = v10 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain_n(*(_QWORD *)&v58[v57], 2);
        v11 = _CocoaArrayWrapper.endIndex.getter(v28);
        swift_bridgeObjectRelease(v10);
        if (!v11)
        {
LABEL_54:
          swift_bridgeObjectRelease(v55);
          swift_bridgeObjectRelease(v10);

          return;
        }
      }
      else
      {
        v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(*(_QWORD *)&v58[v57]);
        if (!v11)
          goto LABEL_54;
      }
      v2 = v10 & 0xC000000000000001;
      if ((v10 & 0xC000000000000001) != 0)
      {
        v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v10);
      }
      else
      {
        if (!*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_61;
        v12 = *(id *)(v10 + 32);
      }
      v13 = v12;
      type metadata accessor for InfoCardButtonConfiguration();
      v14 = static NSObject.== infix(_:_:)(v13, v8);

      v15 = 0;
      if ((v14 & 1) == 0)
      {
        if (v11 == 1)
          goto LABEL_54;
        if (v2)
        {
          v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v10);
        }
        else
        {
          if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
            goto LABEL_105;
          v16 = *(id *)(v10 + 40);
        }
        v17 = v16;
        v18 = static NSObject.== infix(_:_:)(v16, v8);

        if ((v18 & 1) == 0)
        {
          v24 = 1;
          while (1)
          {
            v15 = v24 + 1;
            if (__OFADD__(v24, 1))
              break;
            if (v15 == v11)
              goto LABEL_54;
            if (v2)
            {
              v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v24 + 1, v10);
            }
            else
            {
              if (v15 < 0)
                goto LABEL_58;
              if ((unint64_t)v15 >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
                goto LABEL_59;
              v25 = *(id *)(v10 + 32 + 8 * v15);
            }
            v26 = v25;
            v27 = static NSObject.== infix(_:_:)(v25, v8);

            ++v24;
            if ((v27 & 1) != 0)
              goto LABEL_24;
          }
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
          break;
        }
        v15 = 1;
      }
LABEL_24:
      swift_bridgeObjectRelease(v10);
      v2 = (int64_t)v54;
      v19 = *v54;
      if ((unint64_t)*v54 >> 62)
      {
        if (v19 < 0)
          v29 = *v54;
        else
          v29 = v19 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(*v54);
        v30 = _CocoaArrayWrapper.endIndex.getter(v29);
        swift_bridgeObjectRelease(v19);
        if (v15 >= v30)
        {
LABEL_55:

          swift_bridgeObjectRelease(v55);
          return;
        }
      }
      else if (v15 >= *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_55;
      }
      swift_beginAccess(v54, v59, 32, 0);
      v20 = *v54;
      if ((*v54 & 0xC000000000000001) != 0)
      {
        v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v20);
      }
      else
      {
        if (v15 < 0)
          goto LABEL_62;
        if ((unint64_t)v15 >= *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_63;
        v21 = *(id *)(v20 + 8 * v15 + 32);
      }
      v22 = v21;
      swift_endAccess(v59);
      v23 = *(_QWORD *)&v8[OBJC_IVAR____TtC4Maps27InfoCardButtonConfiguration_visibility];
      v5 = v53;
      if (v23)
      {
        if (v23 != 1)
          goto LABEL_113;
        objc_msgSend(v22, "setHidden:", 0, v50);
      }
      else
      {
        objc_msgSend(v22, "setHidden:", (*v52 & 1) == 0, v50);
      }

      if (v6 == v53)
      {
        swift_bridgeObjectRelease(v55);
        i = &OBJC_IVAR____TtC4Maps18InfoCardHeaderView_blurButtons;
        goto LABEL_70;
      }
    }
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    if (v2 < 0)
      v31 = v2;
    else
      v31 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v2, 2);
    v3 = _CocoaArrayWrapper.endIndex.getter(v31);
    swift_bridgeObjectRelease(v2);
  }
  swift_bridgeObjectRelease(v2);
LABEL_70:
  if (-[PlaceSummaryTableViewCell canBecomeFirstResponder]_0(v58))
    v1 = 12.0;
  else
    v1 = 16.0;
  v2 = (int64_t)&v58[i[2]];
  swift_beginAccess(v2, v59, 0, 0);
  v5 = *(_QWORD *)v2;
  if (*(_QWORD *)v2 >> 62)
    goto LABEL_106;
  v32 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(*(_QWORD *)v2);
  if (!v32)
  {
LABEL_110:
    v36 = 0;
LABEL_111:
    swift_bridgeObjectRelease(v5);

    return;
  }
LABEL_75:
  if (v32 >= 1)
  {
    v33 = 0;
    v34 = 0;
    while (1)
    {
      if ((v5 & 0xC000000000000001) != 0)
      {
        v37 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v34, v5);
        if (!v33)
          goto LABEL_85;
      }
      else
      {
        v37 = *(id *)(v5 + 8 * v34 + 32);
        if (!v33)
        {
LABEL_85:
          v38 = 8.0;
          goto LABEL_86;
        }
      }
      if (objc_msgSend(v33, "isHidden", v50))
        v38 = 8.0;
      else
        v38 = 5.0;
LABEL_86:
      v39 = *(_QWORD *)v2;
      if (*(_QWORD *)v2 >> 62)
      {
        if (v39 < 0)
          v47 = *(_QWORD *)v2;
        else
          v47 = v39 & 0xFFFFFFFFFFFFFF8;
        v48 = v37;
        swift_bridgeObjectRetain(v39);
        v40 = _CocoaArrayWrapper.endIndex.getter(v47);
        if (!v40)
        {
LABEL_77:

          swift_bridgeObjectRelease(v39);
          v35 = 5.0;
          goto LABEL_78;
        }
      }
      else
      {
        v40 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10);
        v41 = v37;
        swift_bridgeObjectRetain(v39);
        if (!v40)
          goto LABEL_77;
      }
      v42 = v40 - 1;
      if (__OFSUB__(v40, 1))
      {
        __break(1u);
LABEL_103:
        __break(1u);
LABEL_104:
        __break(1u);
LABEL_105:
        __break(1u);
LABEL_106:
        if (v5 < 0)
          v49 = v5;
        else
          v49 = v5 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v5);
        v32 = _CocoaArrayWrapper.endIndex.getter(v49);
        if (!v32)
          goto LABEL_110;
        goto LABEL_75;
      }
      if ((v39 & 0xC000000000000001) != 0)
      {
        v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v42, v39);
      }
      else
      {
        if ((v42 & 0x8000000000000000) != 0)
          goto LABEL_103;
        if (v42 >= *(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_104;
        v43 = *(id *)(v39 + 8 * v42 + 32);
      }
      v44 = v43;
      swift_bridgeObjectRelease(v39);
      sub_10000E4BC(0, (unint64_t *)&unk_101499130, MUCardButton_ptr);
      v45 = v37;
      v46 = static NSObject.== infix(_:_:)(v45, v44);

      if ((v46 & 1) != 0)
        v35 = 16.0;
      else
        v35 = 5.0;
LABEL_78:
      ++v34;
      v36 = v37;
      objc_msgSend(v36, "setDirectionalLayoutMargins:", 16.0, v38, v1, v35);

      v33 = v37;
      if (v32 == v34)
        goto LABEL_111;
    }
  }
  __break(1u);
LABEL_113:
  v59[0] = v23;
  _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for InfoCardButtonVisibility, v59, &type metadata for InfoCardButtonVisibility, &type metadata for Int);
  __break(1u);
}

uint64_t sub_1000B7218()
{
  uint64_t result;

  result = GEOConfigGetBOOL(MapsConfig_PlacecardAddToLibraryAnimationEnabled, off_1014B56B8);
  byte_101498F80 = result;
  return result;
}

uint64_t sub_1000B72A4(char a1, uint64_t *a2, SEL *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t i;
  id v11;
  void *v12;
  uint64_t v13;
  _BYTE v14[24];

  v5 = *a2;
  *(_BYTE *)(v3 + *a2) = a1;
  v6 = (uint64_t *)(v3 + OBJC_IVAR____TtC4Maps18InfoCardHeaderView_actionButtons);
  swift_beginAccess(v3 + OBJC_IVAR____TtC4Maps18InfoCardHeaderView_actionButtons, v14, 0, 0);
  v7 = *v6;
  if (!((unint64_t)v7 >> 62))
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(v7);
    if (v8)
      goto LABEL_3;
    return swift_bridgeObjectRelease(v7);
  }
  if (v7 < 0)
    v13 = v7;
  else
    v13 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  result = _CocoaArrayWrapper.endIndex.getter(v13);
  v8 = result;
  if (!result)
    return swift_bridgeObjectRelease(v7);
LABEL_3:
  if (v8 >= 1)
  {
    for (i = 0; i != v8; ++i)
    {
      if ((v7 & 0xC000000000000001) != 0)
        v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v7);
      else
        v11 = *(id *)(v7 + 8 * i + 32);
      v12 = v11;
      objc_msgSend(v11, *a3, *(unsigned __int8 *)(v3 + v5));

    }
    return swift_bridgeObjectRelease(v7);
  }
  __break(1u);
  return result;
}

void sub_1000B73AC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  void *v13;
  char v14;
  uint64_t v15;
  id v16;
  void *v17;
  char v18;
  uint64_t Strong;
  uint64_t v20;
  id v21;
  id v22;
  void *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char v38[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC4Maps18InfoCardHeaderView_actionButtons);
  swift_beginAccess(v0 + OBJC_IVAR____TtC4Maps18InfoCardHeaderView_actionButtons, v38, 0, 0);
  v36 = v1;
  v2 = *v1;
  if ((unint64_t)*v1 >> 62)
    goto LABEL_63;
  v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v2);
  for (; v3; v3 = _CocoaArrayWrapper.endIndex.getter(v28))
  {
    v4 = 0;
    v32 = v0 + OBJC_IVAR____TtC4Maps18InfoCardHeaderView_delegate;
    v33 = v0;
    v37 = OBJC_IVAR____TtC4Maps18InfoCardHeaderView__buttonConfigurations;
    v34 = v2;
    v35 = v2 & 0xC000000000000001;
    v29 = v2 + 32;
    v30 = v2 & 0xFFFFFFFFFFFFFF8;
    v31 = v3;
    while (1)
    {
      if (v35)
      {
        v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v2);
      }
      else
      {
        if (v4 >= *(_QWORD *)(v30 + 16))
          goto LABEL_62;
        v6 = *(id *)(v29 + 8 * v4);
      }
      v7 = v6;
      if (__OFADD__(v4++, 1))
        break;
      v9 = *v36;
      if ((unint64_t)*v36 >> 62)
      {
        if (v9 < 0)
          v0 = *v36;
        else
          v0 = v9 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain_n(*v36, 2);
        v10 = _CocoaArrayWrapper.endIndex.getter(v0);
        swift_bridgeObjectRelease(v9);
        if (!v10)
        {
LABEL_53:
          swift_bridgeObjectRelease(v34);
          swift_bridgeObjectRelease(v9);

          return;
        }
      }
      else
      {
        v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(*v36);
        if (!v10)
          goto LABEL_53;
      }
      v11 = v9 & 0xC000000000000001;
      if ((v9 & 0xC000000000000001) != 0)
      {
        v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v9);
      }
      else
      {
        if (!*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_59;
        v12 = *(id *)(v9 + 32);
      }
      v13 = v12;
      v0 = sub_10000E4BC(0, (unint64_t *)&unk_101499130, MUCardButton_ptr);
      v14 = static NSObject.== infix(_:_:)(v13, v7);

      v15 = 0;
      if ((v14 & 1) == 0)
      {
        if (v10 == 1)
          goto LABEL_53;
        if (v11)
        {
          v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v9);
        }
        else
        {
          if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
          {
            __break(1u);
            return;
          }
          v16 = *(id *)(v9 + 40);
        }
        v17 = v16;
        v18 = static NSObject.== infix(_:_:)(v16, v7);

        if ((v18 & 1) == 0)
        {
          v2 = 1;
          while (1)
          {
            v15 = v2 + 1;
            if (__OFADD__(v2, 1))
              break;
            if (v15 == v10)
              goto LABEL_53;
            if (v11)
            {
              v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v2 + 1, v9);
            }
            else
            {
              if (v15 < 0)
                goto LABEL_56;
              if ((unint64_t)v15 >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
                goto LABEL_57;
              v22 = *(id *)(v9 + 32 + 8 * v15);
            }
            v23 = v22;
            v24 = static NSObject.== infix(_:_:)(v22, v7);

            ++v2;
            if ((v24 & 1) != 0)
              goto LABEL_24;
          }
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
          break;
        }
        v15 = 1;
      }
LABEL_24:
      swift_bridgeObjectRelease(v9);
      v0 = *(_QWORD *)(v33 + v37);
      if ((unint64_t)v0 >> 62)
      {
        if (v0 < 0)
          v25 = *(_QWORD *)(v33 + v37);
        else
          v25 = v0 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(*(_QWORD *)(v33 + v37));
        v26 = _CocoaArrayWrapper.endIndex.getter(v25);
        swift_bridgeObjectRelease(v0);
        if (v15 >= v26)
        {
LABEL_54:

          v27 = v34;
          goto LABEL_68;
        }
      }
      else if (v15 >= *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_54;
      }
      Strong = swift_unknownObjectWeakLoadStrong(v32);
      if (Strong)
      {
        v0 = Strong;
        v20 = *(_QWORD *)(v33 + v37);
        if ((v20 & 0xC000000000000001) != 0)
        {
          swift_bridgeObjectRetain(*(_QWORD *)(v33 + v37));
          v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v20);
          swift_bridgeObjectRelease(v20);
        }
        else
        {
          if (v15 < 0)
            goto LABEL_60;
          if ((unint64_t)v15 >= *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_61;
          v21 = *(id *)(v20 + 8 * v15 + 32);
        }
        v5 = objc_msgSend((id)v0, "headerView:menuForButtonConfiguration:", v33, v21, v29);

        swift_unknownObjectRelease(v0);
      }
      else
      {
        v5 = 0;
      }
      objc_msgSend(v7, "setMenu:", v5, v29);

      v2 = v34;
      if (v4 == v31)
        goto LABEL_67;
    }
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    if (v2 < 0)
      v28 = v2;
    else
      v28 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
  }
LABEL_67:
  v27 = v2;
LABEL_68:
  swift_bridgeObjectRelease(v27);
}

id sub_1000B7898()
{
  char *v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  double v6;
  void *v7;

  v1 = *(void **)&v0[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_actionButtonsLayoutGuide];
  objc_msgSend(v1, "setAlignment:", 3);
  objc_msgSend(v1, "setDirectionalLayoutMargins:", 0.0, 8.0, 0.0, 0.0);
  objc_msgSend(v1, "setLayoutMarginsRelativeArrangement:", 0);
  objc_msgSend(v1, "setAxis:", 0);
  objc_msgSend(v1, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v0, "addSubview:", v1);
  v2 = *(void **)&v0[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_titleLabel];
  objc_msgSend(v2, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v3 = objc_msgSend((id)objc_opt_self(MKFontManager), "sharedManager");
  v4 = objc_msgSend(v3, "largeTitleFontStatic");
  swift_unknownObjectRelease(v3);
  objc_msgSend(v2, "setFont:", v4);

  objc_msgSend(v0, "addSubview:", v2);
  v5 = *(void **)&v0[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_bottomHairlineView];
  objc_msgSend(v5, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v5, "setAutoUpdateTheme:", 0);
  objc_msgSend(v0, "addSubview:", v5);
  LODWORD(v6) = 1144750080;
  objc_msgSend(v0, "setContentCompressionResistancePriority:forAxis:", 1, v6);
  v7 = *(void **)&v0[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_tapGestureRecognizer];
  objc_msgSend(v7, "addTarget:action:", v0, "handleTapWithGestureRecognizer:");
  objc_msgSend(v7, "setDelegate:", v0);
  return objc_msgSend(v0, "addGestureRecognizer:", v7);
}

void sub_1000B7A84()
{
  char *v0;
  uint64_t v1;
  void *v2;
  Class isa;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  void *v14;

  v1 = sub_1000B7C54();
  v2 = (void *)objc_opt_self(NSLayoutConstraint);
  sub_10000E4BC(0, (unint64_t *)&qword_101493070, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v1);
  objc_msgSend(v2, "activateConstraints:", isa);

  v4 = *(void **)&v0[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_actionButtonsLayoutGuide];
  v5 = objc_msgSend(v4, "trailingAnchor");
  v6 = objc_msgSend(v0, "trailingAnchor");
  v7 = objc_msgSend(v5, "constraintEqualToAnchor:", v6);

  v8 = OBJC_IVAR____TtC4Maps18InfoCardHeaderView_actionButtonsTrailingToSuperViewTrailing;
  v9 = *(void **)&v0[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_actionButtonsTrailingToSuperViewTrailing];
  *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_actionButtonsTrailingToSuperViewTrailing] = v7;

  v10 = *(void **)&v0[v8];
  if (v10)
    objc_msgSend(v10, "setActive:", 1);
  v11 = objc_msgSend(v4, "leadingAnchor");
  v12 = objc_msgSend(v0, "trailingAnchor");
  v13 = objc_msgSend(v11, "constraintEqualToAnchor:", v12);

  v14 = *(void **)&v0[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_actionButtonsLeadingToSuperviewTrailing];
  *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_actionButtonsLeadingToSuperviewTrailing] = v13;

}

uint64_t sub_1000B7C54()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;

  v1 = sub_100008B04((uint64_t *)&unk_101493B10);
  v2 = swift_allocObject(v1, 104, 7);
  *(_OWORD *)(v2 + 16) = xmmword_100E2A4D0;
  v3 = *(void **)&v0[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_titleLabel];
  v4 = objc_msgSend(v3, "leadingAnchor");
  v5 = objc_msgSend(v0, "layoutMarginsGuide");
  v6 = objc_msgSend(v5, "leadingAnchor");

  v7 = objc_msgSend(v4, "constraintEqualToAnchor:constant:", v6, 3.0);
  *(_QWORD *)(v2 + 32) = v7;
  v8 = objc_msgSend(v3, "topAnchor");
  v9 = objc_msgSend(v0, "layoutMarginsGuide");
  v10 = objc_msgSend(v9, "topAnchor");

  v11 = objc_msgSend(v8, "constraintEqualToAnchor:constant:", v10, 8.0);
  *(_QWORD *)(v2 + 40) = v11;
  v12 = objc_msgSend(v3, "bottomAnchor");
  v13 = objc_msgSend(v0, "layoutMarginsGuide");
  v14 = objc_msgSend(v13, "bottomAnchor");

  v15 = objc_msgSend(v12, "constraintLessThanOrEqualToAnchor:", v14);
  *(_QWORD *)(v2 + 48) = v15;
  v16 = objc_msgSend(v3, "trailingAnchor");
  v17 = *(void **)&v0[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_actionButtonsLayoutGuide];
  v18 = objc_msgSend(v17, "leadingAnchor");
  v19 = objc_msgSend(v16, "constraintLessThanOrEqualToAnchor:", v18);

  *(_QWORD *)(v2 + 56) = v19;
  v20 = objc_msgSend(v17, "topAnchor");
  v21 = objc_msgSend(v0, "topAnchor");
  v22 = objc_msgSend(v20, "constraintEqualToAnchor:", v21);

  *(_QWORD *)(v2 + 64) = v22;
  v23 = objc_msgSend(v17, "bottomAnchor");
  v24 = objc_msgSend(v0, "bottomAnchor");
  v25 = objc_msgSend(v23, "constraintEqualToAnchor:", v24);

  *(_QWORD *)(v2 + 72) = v25;
  v26 = *(void **)&v0[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_bottomHairlineView];
  v27 = objc_msgSend(v26, "bottomAnchor");
  v28 = objc_msgSend(v0, "bottomAnchor");
  v29 = objc_msgSend(v27, "constraintEqualToAnchor:", v28);

  *(_QWORD *)(v2 + 80) = v29;
  v30 = objc_msgSend(v26, "leadingAnchor");
  v31 = objc_msgSend(v0, "leadingAnchor");
  v32 = objc_msgSend(v30, "constraintEqualToAnchor:", v31);

  *(_QWORD *)(v2 + 88) = v32;
  v33 = objc_msgSend(v26, "trailingAnchor");
  v34 = objc_msgSend(v0, "trailingAnchor");
  v35 = objc_msgSend(v33, "constraintEqualToAnchor:", v34);

  *(_QWORD *)(v2 + 96) = v35;
  specialized Array._endMutation()(v36);
  return v2;
}

void sub_1000B8084(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSString v16;
  id v17;
  NSString v18;
  _QWORD v19[2];
  _QWORD v20[2];

  v5 = *a1;
  v6 = objc_msgSend(objc_allocWithZone((Class)MUCardButton), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v6, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v6, "addTarget:action:forControlEvents:", a2, "cardButtonTappedWithSender:", 0x2000);
  switch(*(_QWORD *)(v5 + OBJC_IVAR____TtC4Maps27InfoCardButtonConfiguration_type))
  {
    case 0:
      v7 = 0xE500000000000000;
      v20[0] = 0x65736F6C43;
      v20[1] = 0xE500000000000000;
      strcpy((char *)v19, "CardButtonType");
      HIBYTE(v19[1]) = -18;
      v19[0] = String.init<A>(_:)(v19, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
      v19[1] = v8;
      String.append<A>(contentsOf:)(v20, &type metadata for String, &protocol witness table for String);
      v9 = v19[1];
      break;
    case 1:
      v20[0] = 1937010500;
      v20[1] = 0xE400000000000000;
      strcpy((char *)v19, "CardButtonType");
      HIBYTE(v19[1]) = -18;
      v19[0] = String.init<A>(_:)(v19, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
      v19[1] = v10;
      String.append<A>(contentsOf:)(v20, &type metadata for String, &protocol witness table for String);
      v9 = v19[1];
      v7 = 0xE800000000000000;
      break;
    case 2:
      strcpy((char *)v20, "DotsFill");
      BYTE1(v20[1]) = 0;
      WORD1(v20[1]) = 0;
      HIDWORD(v20[1]) = -402653184;
      strcpy((char *)v19, "CardButtonType");
      HIBYTE(v19[1]) = -18;
      v19[0] = String.init<A>(_:)(v19, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
      v19[1] = v11;
      String.append<A>(contentsOf:)(v20, &type metadata for String, &protocol witness table for String);
      v9 = v19[1];
      v7 = 0xED00006C6C69662ELL;
      break;
    case 3:
      v20[0] = 0x6572616853;
      v20[1] = 0xE500000000000000;
      strcpy((char *)v19, "CardButtonType");
      HIBYTE(v19[1]) = -18;
      v19[0] = String.init<A>(_:)(v19, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
      v19[1] = v12;
      String.append<A>(contentsOf:)(v20, &type metadata for String, &protocol witness table for String);
      v9 = v19[1];
      v7 = 0x8000000100E477E0;
      break;
    case 5:
      strcpy((char *)v20, "AddToLibrary");
      BYTE5(v20[1]) = 0;
      HIWORD(v20[1]) = -5120;
      strcpy((char *)v19, "CardButtonType");
      HIBYTE(v19[1]) = -18;
      v19[0] = String.init<A>(_:)(v19, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
      v19[1] = v14;
      String.append<A>(contentsOf:)(v20, &type metadata for String, &protocol witness table for String);
      v9 = v19[1];
      v7 = 0xE400000000000000;
      break;
    case 6:
      v20[0] = 0xD000000000000011;
      v20[1] = 0x8000000100E477C0;
      strcpy((char *)v19, "CardButtonType");
      HIBYTE(v19[1]) = -18;
      v19[0] = String.init<A>(_:)(v19, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
      v19[1] = v15;
      String.append<A>(contentsOf:)(v20, &type metadata for String, &protocol witness table for String);
      v9 = v19[1];
      v7 = 0xE90000000000006BLL;
      break;
    default:
      strcpy((char *)v20, "Unknown");
      v20[1] = 0xE700000000000000;
      strcpy((char *)v19, "CardButtonType");
      HIBYTE(v19[1]) = -18;
      v19[0] = String.init<A>(_:)(v19, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
      v19[1] = v13;
      String.append<A>(contentsOf:)(v20, &type metadata for String, &protocol witness table for String);
      v9 = v19[1];
      v7 = 0xE000000000000000;
      break;
  }
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  objc_msgSend(v6, "setSymbolName:", v16);

  objc_msgSend(v6, "setBlurBackground:", *(unsigned __int8 *)(a2 + OBJC_IVAR____TtC4Maps18InfoCardHeaderView_blurButtons));
  v17 = v6;
  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  objc_msgSend(v17, "setAccessibilityIdentifier:", v18);

  *a3 = v17;
}

void sub_1000B8544(uint64_t a1)
{
  char *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  void *v8;
  char *v9;
  id v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t Strong;
  id v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t *v31;
  char v33[24];

  v2 = (uint64_t *)&v1[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_actionButtons];
  swift_beginAccess(&v1[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_actionButtons], v33, 0, 0);
  v3 = *v2;
  if ((unint64_t)*v2 >> 62)
  {
    if (v3 < 0)
      v27 = *v2;
    else
      v27 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v4 = _CocoaArrayWrapper.endIndex.getter(v27);
    if (v4)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease(v3);
    return;
  }
  v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(*v2);
  if (!v4)
    goto LABEL_10;
LABEL_3:
  v30 = v1;
  v31 = v2;
  v5 = (id)sub_10000E4BC(0, (unint64_t *)&qword_101492E60, NSObject_ptr);
  v6 = 4;
  while (1)
  {
    if ((v3 & 0xC000000000000001) != 0)
      v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, v3);
    else
      v7 = *(id *)(v3 + 8 * v6);
    v8 = v7;
    v9 = (char *)(v6 - 3);
    if (__OFADD__(v6 - 4, 1))
    {
      __break(1u);
LABEL_31:
      v23 = swift_allocObject(&unk_1011A1030, 24, 7);
      swift_unknownObjectWeakInit(v23 + 16, v6);
      v24 = (_QWORD *)swift_allocObject(&unk_1011A1058, 40, 7);
      v24[2] = v23;
      v24[3] = v9;
      v24[4] = v5;
      swift_retain();
      v25 = v9;
      v26 = v5;
      sub_1000B8A38(v8, (uint64_t)sub_1000BC56C, (uint64_t)v24);

      swift_release();
      swift_release();
      return;
    }
    v10 = objc_msgSend(v7, "underlyingButton");
    v11 = static NSObject.== infix(_:_:)(v10, a1);

    if ((v11 & 1) != 0)
      break;

    ++v6;
    if (v9 == (char *)v4)
      goto LABEL_10;
  }
  swift_bridgeObjectRelease(v3);
  v12 = *v31;
  swift_bridgeObjectRetain(*v31);
  v13 = sub_100180CF0((uint64_t)v8, v12);
  v15 = v14;
  swift_bridgeObjectRelease(v12);
  if ((v15 & 1) != 0)
    goto LABEL_41;
  v16 = OBJC_IVAR____TtC4Maps18InfoCardHeaderView__buttonConfigurations;
  v6 = (uint64_t)v30;
  v17 = *(_QWORD *)&v30[OBJC_IVAR____TtC4Maps18InfoCardHeaderView__buttonConfigurations];
  if ((unint64_t)v17 >> 62)
  {
    if (v17 < 0)
      v28 = *(_QWORD *)&v30[OBJC_IVAR____TtC4Maps18InfoCardHeaderView__buttonConfigurations];
    else
      v28 = v17 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)&v30[OBJC_IVAR____TtC4Maps18InfoCardHeaderView__buttonConfigurations]);
    v29 = _CocoaArrayWrapper.endIndex.getter(v28);
    swift_bridgeObjectRelease(v17);
    if (v13 >= v29)
      goto LABEL_41;
LABEL_14:
    v5 = objc_msgSend(objc_allocWithZone((Class)MUPresentationOptions), "init");
    objc_msgSend(v5, "setSourceView:", a1);
    v18 = *(_QWORD *)&v30[v16];
    if ((v18 & 0xC000000000000001) == 0)
    {
      if (v13 < 0)
      {
        __break(1u);
      }
      else if ((unint64_t)v13 < *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v9 = (char *)*(id *)(v18 + 8 * v13 + 32);
        if (v13)
          goto LABEL_22;
        goto LABEL_18;
      }
      __break(1u);
LABEL_46:
      swift_bridgeObjectRetain(v4);
      v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v4);
      swift_bridgeObjectRelease(v4);
LABEL_27:
      objc_msgSend((id)v18, "headerView:selectedActionButton:withPresentationOptions:", v30, v22, v5, v30);

      swift_unknownObjectRelease(v18);
LABEL_29:

      return;
    }
    swift_bridgeObjectRetain(*(_QWORD *)&v30[v16]);
    v9 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v18);
    swift_bridgeObjectRelease(v18);
    if (v13)
      goto LABEL_22;
LABEL_18:
    if (*(_QWORD *)&v9[OBJC_IVAR____TtC4Maps27InfoCardButtonConfiguration_type] != 5)
      goto LABEL_22;
    if (qword_101490D80 != -1)
      goto LABEL_49;
    while (1)
    {
      if (byte_101498F80 == 1)
      {
        v19 = objc_msgSend(v30, "traitCollection");
        v20 = objc_msgSend(v19, "preferredContentSizeCategory");

        LOBYTE(v19) = UIContentSizeCategory.isAccessibilityCategory.getter(v20);
        if ((v19 & 1) == 0)
          goto LABEL_31;
      }
LABEL_22:
      Strong = swift_unknownObjectWeakLoadStrong(&v30[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_delegate]);
      if (!Strong)
      {

        goto LABEL_29;
      }
      v18 = Strong;
      v4 = *(_QWORD *)&v30[v16];
      if ((v4 & 0xC000000000000001) != 0)
        goto LABEL_46;
      if (v13 < 0)
      {
        __break(1u);
      }
      else if ((unint64_t)v13 < *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v22 = *(id *)(v4 + 8 * v13 + 32);
        goto LABEL_27;
      }
      __break(1u);
LABEL_49:
      swift_once(&qword_101490D80, sub_1000B7218);
    }
  }
  if (v13 < *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_14;
LABEL_41:

}

void sub_1000B899C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t Strong;
  void *v7;
  void *v8;
  void *v9;
  _BYTE v10[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    v7 = (void *)Strong;
    v8 = (void *)swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC4Maps18InfoCardHeaderView_delegate);
    if (v8)
    {
      v9 = v8;
      objc_msgSend(v8, "headerView:selectedActionButton:withPresentationOptions:", v7, a2, a3);

      swift_unknownObjectRelease(v9);
    }
    else
    {

    }
  }
}

uint64_t sub_1000B8A38(void *a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  id v16;
  char *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  void *v21;
  double v22;
  id v23;
  double v24;
  double v25;
  double v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  void *v31;
  _QWORD *v32;
  uint64_t v33;
  void *v34;
  id v35;
  id v36;
  char *v37;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  uint64_t v40;
  void *v41;
  char *v42;
  _QWORD *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  char *v47;
  _QWORD *v48;
  void *v49;
  char *v50;
  id v51;
  uint64_t v52;
  void **aBlock;
  uint64_t v54;
  void *v55;
  void *v56;
  void *v57;
  _QWORD *v58;

  v4 = v3;
  v8 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AddToLibraryAnimationView()), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v8, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v8, "layoutIfNeeded");
  v9 = swift_allocObject(&unk_1011A1080, 17, 7);
  *(_BYTE *)(v9 + 16) = 0;
  v10 = swift_allocObject(&unk_1011A1080, 17, 7);
  *(_BYTE *)(v10 + 16) = 0;
  v11 = swift_allocObject(&unk_1011A1080, 17, 7);
  *(_BYTE *)(v11 + 16) = 0;
  v12 = swift_allocObject(&unk_1011A1030, 24, 7);
  swift_unknownObjectWeakInit(v12 + 16, v4);
  v13 = (_QWORD *)swift_allocObject(&unk_1011A10A8, 80, 7);
  v13[2] = v12;
  v13[3] = v11;
  v13[4] = v9;
  v13[5] = v10;
  v13[6] = v8;
  v13[7] = a1;
  v13[8] = a2;
  v13[9] = a3;
  v14 = *(void **)&v4[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_actionButtonsLayoutGuide];
  swift_retain();
  v52 = v9;
  swift_retain();
  swift_retain();
  v15 = v8;
  v16 = a1;
  objc_msgSend(v14, "layoutIfNeeded", swift_retain().n128_f64[0]);
  objc_msgSend(v14, "bounds");
  v17 = &v4[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_capturedTitleToEndTrailingConstant];
  *(_QWORD *)v17 = v18;
  v17[8] = 0;
  objc_msgSend(v15, "systemLayoutSizeFittingSize:", UILayoutFittingExpandedSize.width, UILayoutFittingExpandedSize.height);
  v20 = OBJC_IVAR____TtC4Maps18InfoCardHeaderView_actionButtonsLeadingToSuperviewTrailing;
  v21 = *(void **)&v4[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_actionButtonsLeadingToSuperviewTrailing];
  if (v21)
  {
    v22 = v19 + 16.0;
    v23 = v21;
    objc_msgSend(v4, "bounds");
    if (v24 + -16.0 < v22)
      v22 = v24 + -16.0;
    objc_msgSend(v14, "bounds");
    if (v22 > v25)
      v26 = v22;
    else
      v26 = v25;
    objc_msgSend(v23, "setConstant:", -v26);

  }
  v27 = *(void **)&v4[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_actionButtonsTrailingToSuperViewTrailing];
  if (v27)
    objc_msgSend(v27, "setActive:", 0);
  v28 = *(void **)&v4[v20];
  if (v28)
    objc_msgSend(v28, "setActive:", 1);
  objc_msgSend(v14, "layoutIfNeeded");
  v29 = sub_1000BB954(&OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___stackView, (uint64_t (*)(void))sub_1000BC200);
  v30 = sub_1000BB954(&OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___label, (uint64_t (*)(void))sub_1000BB9AC);
  objc_msgSend(v29, "_maps_removeArrangedSubview:", v30);

  objc_msgSend(v14, "setLayoutMarginsRelativeArrangement:", 1);
  v31 = (void *)objc_opt_self(UIView);
  v32 = (_QWORD *)swift_allocObject(&unk_1011A10D0, 40, 7);
  v32[2] = v4;
  v32[3] = v16;
  v32[4] = v15;
  v33 = swift_allocObject(&unk_1011A10F8, 32, 7);
  *(_QWORD *)(v33 + 16) = sub_1000BC5F4;
  *(_QWORD *)(v33 + 24) = v32;
  v57 = sub_1000BC664;
  v58 = (_QWORD *)v33;
  aBlock = _NSConcreteStackBlock;
  v54 = 1107296256;
  v55 = sub_1001DCBE4;
  v56 = &unk_1011A1110;
  v34 = _Block_copy(&aBlock);
  v35 = v15;
  v36 = v16;
  v37 = v4;
  swift_retain();
  swift_release();
  objc_msgSend(v31, "performWithoutAnimation:", v34);
  _Block_release(v34);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v33, "", 78, 446, 40, 1);
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    sub_1000BA444();
    v40 = swift_allocObject(&unk_1011A1148, 32, 7);
    *(_QWORD *)(v40 + 16) = v35;
    *(_QWORD *)(v40 + 24) = v37;
    v57 = sub_1000BC698;
    v58 = (_QWORD *)v40;
    aBlock = _NSConcreteStackBlock;
    v54 = 1107296256;
    v55 = sub_1001BB8D4;
    v56 = &unk_1011A1160;
    v41 = _Block_copy(&aBlock);
    v51 = v35;
    v42 = v37;
    swift_release();
    v43 = (_QWORD *)swift_allocObject(&unk_1011A1198, 40, 7);
    v43[2] = v10;
    v43[3] = sub_1000BC5DC;
    v43[4] = v13;
    v57 = sub_1000BC6A4;
    v58 = v43;
    aBlock = _NSConcreteStackBlock;
    v54 = 1107296256;
    v55 = sub_1001E2858;
    v56 = &unk_1011A11B0;
    v44 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    objc_msgSend(v31, "animateWithDuration:delay:usingSpringWithDamping:initialSpringVelocity:options:animations:completion:", 0, v41, v44, 0.3, 0.0, 0.7, 0.5);
    _Block_release(v44);
    _Block_release(v41);
    v45 = swift_allocObject(&unk_1011A11E8, 24, 7);
    *(_QWORD *)(v45 + 16) = v42;
    v57 = sub_1000BC6D4;
    v58 = (_QWORD *)v45;
    aBlock = _NSConcreteStackBlock;
    v54 = 1107296256;
    v55 = sub_1001BB8D4;
    v56 = &unk_1011A1200;
    v46 = _Block_copy(&aBlock);
    v47 = v42;
    swift_release();
    v48 = (_QWORD *)swift_allocObject(&unk_1011A1238, 48, 7);
    v48[2] = v47;
    v48[3] = v52;
    v48[4] = sub_1000BC5DC;
    v48[5] = v13;
    v57 = sub_1000BC750;
    v58 = v48;
    aBlock = _NSConcreteStackBlock;
    v54 = 1107296256;
    v55 = sub_1001E2858;
    v56 = &unk_1011A1250;
    v49 = _Block_copy(&aBlock);
    swift_retain();
    v50 = v47;
    swift_retain();
    swift_release();
    objc_msgSend(v31, "animateWithDuration:delay:usingSpringWithDamping:initialSpringVelocity:options:animations:completion:", 0, v46, v49, 0.4, 0.0, 0.7, 0.5);

    swift_release();
    _Block_release(v49);
    _Block_release(v46);
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1000B90F4()
{
  char *v0;
  objc_class *ObjectType;
  void *v2;
  double v3;
  CGFloat v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  uint64_t result;
  uint64_t v16;
  objc_super v17;
  CGRect v18;
  CGRect v19;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = *(void **)&v0[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_actionButtonsLayoutGuide];
  objc_msgSend(v2, "bounds");
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v17.receiver = v0;
  v17.super_class = ObjectType;
  objc_msgSendSuper2(&v17, "layoutSubviews");
  objc_msgSend(v2, "bounds");
  v19.origin.x = v11;
  v19.origin.y = v12;
  v19.size.width = v13;
  v19.size.height = v14;
  v18.origin.x = v4;
  v18.origin.y = v6;
  v18.size.width = v8;
  v18.size.height = v10;
  result = CGRectEqualToRect(v18, v19);
  if ((result & 1) == 0)
  {
    result = swift_unknownObjectWeakLoadStrong(&v0[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_delegate]);
    if (result)
    {
      v16 = result;
      objc_msgSend((id)result, "headerViewDidUpdateButtonContainerContentSize:", v0);
      return swift_unknownObjectRelease(v16);
    }
  }
  return result;
}

id sub_1000B9290(uint64_t a1, double a2, double a3)
{
  char *v3;
  char *v4;
  objc_class *ObjectType;
  void *Strong;
  void *v10;
  id v11;
  id v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  id v25;
  double v26;
  CGFloat v27;
  double v28;
  CGFloat v29;
  double v30;
  CGFloat v31;
  double v32;
  CGFloat v33;
  id v34;
  void *v35;
  double v36;
  double v37;
  double v38;
  double v39;
  id v40;
  objc_super v42;
  CGPoint v43;
  CGRect v44;

  v4 = v3;
  ObjectType = (objc_class *)swift_getObjectType(v3);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(&v3[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_delegate]);
  if (!Strong)
    goto LABEL_7;
  v10 = Strong;
  v11 = objc_msgSend(Strong, "underlyingHeaderViewForHitTesting:", v3);
  swift_unknownObjectRelease(v10);
  if (!v11)
    goto LABEL_7;
  v12 = objc_msgSend(v4, "window");
  objc_msgSend(v4, "convertPoint:toView:", v12, a2, a3);
  v14 = v13;
  v16 = v15;

  objc_msgSend(v11, "bounds");
  v18 = v17;
  v20 = v19;
  v22 = v21;
  v24 = v23;
  v25 = objc_msgSend(v4, "window");
  objc_msgSend(v11, "convertRect:toView:", v25, v18, v20, v22, v24);
  v27 = v26;
  v29 = v28;
  v31 = v30;
  v33 = v32;

  v44.origin.x = v27;
  v44.origin.y = v29;
  v44.size.width = v31;
  v44.size.height = v33;
  v43.x = v14;
  v43.y = v16;
  if (!CGRectContainsPoint(v44, v43))
  {

LABEL_7:
    v42.receiver = v4;
    v42.super_class = ObjectType;
    return objc_msgSendSuper2(&v42, "hitTest:withEvent:", a1, a2, a3);
  }
  v34 = objc_msgSend(v4, "window");
  if (v34)
  {
    v35 = v34;
    objc_msgSend(v34, "convertPoint:toCoordinateSpace:", v11, v14, v16);
    v37 = v36;
    v39 = v38;

  }
  else
  {
    v39 = 0.0;
    v37 = 0.0;
  }
  v40 = objc_msgSend(v11, "hitTest:withEvent:", a1, v37, v39);

  return v40;
}

BOOL sub_1000B9528(void *a1)
{
  char *v1;
  void *Strong;
  void *v4;
  id v5;
  id v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  id v19;
  double v20;
  CGFloat v21;
  double v22;
  CGFloat v23;
  double v24;
  CGFloat v25;
  double v26;
  CGFloat v27;
  CGPoint v29;
  CGRect v30;

  Strong = (void *)swift_unknownObjectWeakLoadStrong(&v1[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_delegate]);
  if (!Strong)
    return 1;
  v4 = Strong;
  v5 = objc_msgSend(Strong, "underlyingHeaderViewForHitTesting:", v1);
  swift_unknownObjectRelease(v4);
  if (!v5)
    return 1;
  v6 = objc_msgSend(v1, "window");
  objc_msgSend(a1, "locationInView:", v6);
  v8 = v7;
  v10 = v9;

  objc_msgSend(v5, "bounds");
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v19 = objc_msgSend(v1, "window");
  objc_msgSend(v5, "convertRect:toView:", v19, v12, v14, v16, v18);
  v21 = v20;
  v23 = v22;
  v25 = v24;
  v27 = v26;

  v30.origin.x = v21;
  v30.origin.y = v23;
  v30.size.width = v25;
  v30.size.height = v27;
  v29.x = v8;
  v29.y = v10;
  LOBYTE(v19) = CGRectContainsPoint(v30, v29);

  return (v19 & 1) == 0;
}

void sub_1000B96D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t Strong;
  void *v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  id v29;
  id v30;
  void **v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  _QWORD *v36;
  _BYTE v37[24];
  _BYTE v38[24];
  _BYTE v39[24];
  _BYTE v40[24];
  _BYTE v41[32];

  v15 = a1 + 16;
  swift_beginAccess(a1 + 16, v41, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v15);
  if (Strong)
  {
    v17 = (void *)Strong;
    v18 = (_BYTE *)(a2 + 16);
    swift_beginAccess(v18, v40, 0, 0);
    if (*v18 != 1
      && (v19 = (_BYTE *)(a3 + 16), swift_beginAccess(v19, v39, 0, 0), *v19 == 1)
      && (v20 = (_BYTE *)(a4 + 16), swift_beginAccess(v20, v38, 0, 0), (*v20 & 1) != 0))
    {
      swift_beginAccess(v18, v37, 1, 0);
      *v18 = 1;
      v21 = (void *)objc_opt_self(UIView);
      v22 = swift_allocObject(&unk_1011A12D8, 32, 7);
      *(_QWORD *)(v22 + 16) = a5;
      *(_QWORD *)(v22 + 24) = v17;
      v35 = sub_1000BC80C;
      v36 = (_QWORD *)v22;
      v31 = _NSConcreteStackBlock;
      v32 = 1107296256;
      v33 = sub_1001BB8D4;
      v34 = &unk_1011A12F0;
      v23 = _Block_copy(&v31);
      v24 = a5;
      v25 = v17;
      swift_release();
      v26 = swift_allocObject(&unk_1011A1030, 24, 7);
      swift_unknownObjectWeakInit(v26 + 16, v25);
      v27 = (_QWORD *)swift_allocObject(&unk_1011A1328, 56, 7);
      v27[2] = v26;
      v27[3] = v24;
      v27[4] = a6;
      v27[5] = a7;
      v27[6] = a8;
      v35 = sub_1000BC850;
      v36 = v27;
      v31 = _NSConcreteStackBlock;
      v32 = 1107296256;
      v33 = sub_1001E2858;
      v34 = &unk_1011A1340;
      v28 = _Block_copy(&v31);
      v29 = v24;
      v30 = a6;
      swift_retain();
      swift_release();
      objc_msgSend(v21, "animateWithDuration:delay:usingSpringWithDamping:initialSpringVelocity:options:animations:completion:", 0, v23, v28, 0.2, 0.0, 0.7, 0.5);

      _Block_release(v28);
      _Block_release(v23);
    }
    else
    {

    }
  }
}

id sub_1000B9958(void *a1, _BYTE *a2)
{
  void *v4;
  double v5;

  sub_1000B99F0();
  v4 = *(void **)&a2[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_actionButtonsLeadingToSuperviewTrailing];
  if (v4)
  {
    v5 = *(double *)&a2[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_capturedTitleToEndTrailingConstant];
    if (a2[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_capturedTitleToEndTrailingConstant + 8])
      v5 = 0.0;
    objc_msgSend(v4, "setConstant:", -v5);
  }
  objc_msgSend(a1, "layoutIfNeeded");
  objc_msgSend(*(id *)&a2[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_actionButtonsLayoutGuide], "layoutIfNeeded");
  return objc_msgSend(a2, "layoutIfNeeded");
}

void sub_1000B99F0()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  CGFloat m43;
  CGFloat m44;
  id v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  CGFloat Width;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  id v24;
  id v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  CATransform3D v33;
  CATransform3D b;
  CATransform3D a;
  CGRect v36;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView_labelWidthConstraint);
  if (v1)
    objc_msgSend(v1, "setActive:", 1);
  v2 = sub_1000BB954(&OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___label, (uint64_t (*)(void))sub_1000BB9AC);
  v3 = objc_msgSend(v2, "layer");

  CATransform3DMakeScale(&a, 0.1, 0.1, 0.1);
  v31 = *(_OWORD *)&a.m13;
  v32 = *(_OWORD *)&a.m11;
  v29 = *(_OWORD *)&a.m23;
  v30 = *(_OWORD *)&a.m21;
  v27 = *(_OWORD *)&a.m33;
  v28 = *(_OWORD *)&a.m31;
  v26 = *(_OWORD *)&a.m41;
  m43 = a.m43;
  m44 = a.m44;
  v6 = sub_1000BB954(&OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___label, (uint64_t (*)(void))sub_1000BB9AC);
  objc_msgSend(v6, "bounds");
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v14 = v13;

  v36.origin.x = v8;
  v36.origin.y = v10;
  v36.size.width = v12;
  v36.size.height = v14;
  Width = CGRectGetWidth(v36);
  CATransform3DMakeTranslation(&a, Width * -0.5, 0.0, 0.0);
  v16 = *(_OWORD *)&a.m11;
  v17 = *(_OWORD *)&a.m13;
  v18 = *(_OWORD *)&a.m21;
  v19 = *(_OWORD *)&a.m23;
  v20 = *(_OWORD *)&a.m31;
  v21 = *(_OWORD *)&a.m33;
  v22 = *(_OWORD *)&a.m41;
  v23 = *(_OWORD *)&a.m43;
  *(_OWORD *)&a.m11 = v32;
  *(_OWORD *)&a.m13 = v31;
  *(_OWORD *)&a.m21 = v30;
  *(_OWORD *)&a.m23 = v29;
  *(_OWORD *)&a.m31 = v28;
  *(_OWORD *)&a.m33 = v27;
  *(_OWORD *)&a.m41 = v26;
  a.m43 = m43;
  a.m44 = m44;
  *(_OWORD *)&b.m11 = v16;
  *(_OWORD *)&b.m13 = v17;
  *(_OWORD *)&b.m21 = v18;
  *(_OWORD *)&b.m23 = v19;
  *(_OWORD *)&b.m31 = v20;
  *(_OWORD *)&b.m33 = v21;
  *(_OWORD *)&b.m41 = v22;
  *(_OWORD *)&b.m43 = v23;
  CATransform3DConcat(&v33, &a, &b);
  a = v33;
  objc_msgSend(v3, "setTransform:", &a);

  v24 = sub_1000BB954(&OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___stackView, (uint64_t (*)(void))sub_1000BC200);
  objc_msgSend(v24, "setDirectionalLayoutMargins:", NSDirectionalEdgeInsetsZero.top, NSDirectionalEdgeInsetsZero.leading, NSDirectionalEdgeInsetsZero.bottom, NSDirectionalEdgeInsetsZero.trailing);

  v25 = sub_1000BB954(&OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___label, (uint64_t (*)(void))sub_1000BB9AC);
  objc_msgSend(v25, "setHidden:", 1);

}

uint64_t sub_1000B9C2C(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t result;
  void *v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  char isEscapingClosureAtFileLocation;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  void **aBlock;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t (*v33)();
  _QWORD *v34;
  _BYTE v35[24];

  v10 = a2 + 16;
  swift_beginAccess(a2 + 16, v35, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v10);
  if (result)
  {
    v12 = (void *)result;
    v28 = a5;
    v13 = (void *)objc_opt_self(UIView);
    v14 = (_QWORD *)swift_allocObject(&unk_1011A1378, 40, 7);
    v14[2] = v12;
    v14[3] = a3;
    v14[4] = a4;
    v15 = swift_allocObject(&unk_1011A13A0, 32, 7);
    *(_QWORD *)(v15 + 16) = sub_1000BC898;
    *(_QWORD *)(v15 + 24) = v14;
    v33 = sub_1000BC8F8;
    v34 = (_QWORD *)v15;
    aBlock = _NSConcreteStackBlock;
    v30 = 1107296256;
    v31 = sub_1001DCBE4;
    v32 = &unk_1011A13B8;
    v16 = _Block_copy(&aBlock);
    v17 = v12;
    v18 = a3;
    v19 = a4;
    swift_retain();
    swift_release();
    objc_msgSend(v13, "performWithoutAnimation:", v16);
    _Block_release(v16);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v15, "", 78, 390, 52, 1);
    result = swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      v21 = swift_allocObject(&unk_1011A13F0, 32, 7);
      *(_QWORD *)(v21 + 16) = v17;
      *(_QWORD *)(v21 + 24) = v18;
      v33 = (uint64_t (*)())sub_1000BC8B4;
      v34 = (_QWORD *)v21;
      aBlock = _NSConcreteStackBlock;
      v30 = 1107296256;
      v31 = sub_1001BB8D4;
      v32 = &unk_1011A1408;
      v22 = _Block_copy(&aBlock);
      v23 = v17;
      v24 = v18;
      swift_release();
      v25 = swift_allocObject(&unk_1011A1030, 24, 7);
      swift_unknownObjectWeakInit(v25 + 16, v23);
      v26 = (_QWORD *)swift_allocObject(&unk_1011A1440, 40, 7);
      v26[2] = v25;
      v26[3] = v28;
      v26[4] = a6;
      v33 = (uint64_t (*)())sub_1000BC8EC;
      v34 = v26;
      aBlock = _NSConcreteStackBlock;
      v30 = 1107296256;
      v31 = sub_1001E2858;
      v32 = &unk_1011A1458;
      v27 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      objc_msgSend(v13, "animateWithDuration:delay:usingSpringWithDamping:initialSpringVelocity:options:animations:completion:", 0, v22, v27, 0.2, 0.0, 0.7, 0.5);

      _Block_release(v27);
      _Block_release(v22);
      return swift_release();
    }
  }
  return result;
}

void sub_1000B9F04(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v3;
  uint64_t *v4;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  char *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  objc_class *v18;
  _BYTE *v19;
  uint64_t v20;
  NSString v21;
  uint64_t v22;
  uint64_t v23;
  NSString v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _QWORD v28[2];
  _QWORD v29[2];
  objc_super v30;
  unint64_t v31;

  v8 = *(void **)(a1 + OBJC_IVAR____TtC4Maps18InfoCardHeaderView_actionButtonsLayoutGuide);
  objc_msgSend(v8, "setLayoutMarginsRelativeArrangement:", 0);
  objc_msgSend(v8, "_maps_removeArrangedSubview:", a2);
  v9 = OBJC_IVAR____TtC4Maps18InfoCardHeaderView__buttonConfigurations;
  v10 = *(_QWORD *)(a1 + OBJC_IVAR____TtC4Maps18InfoCardHeaderView__buttonConfigurations);
  if (!((unint64_t)v10 >> 62))
  {
    v11 = *(id *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(*(_QWORD *)(a1 + OBJC_IVAR____TtC4Maps18InfoCardHeaderView__buttonConfigurations));
    if (v11)
      goto LABEL_3;
LABEL_19:
    swift_bridgeObjectRelease(v10);
    return;
  }
  if (v10 < 0)
    v15 = *(_QWORD *)(a1 + OBJC_IVAR____TtC4Maps18InfoCardHeaderView__buttonConfigurations);
  else
    v15 = v10 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + OBJC_IVAR____TtC4Maps18InfoCardHeaderView__buttonConfigurations));
  v11 = (id)_CocoaArrayWrapper.endIndex.getter(v15);
  if (!v11)
    goto LABEL_19;
LABEL_3:
  if ((v10 & 0xC000000000000001) != 0)
  {
    v12 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v10);
  }
  else
  {
    if (!*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_22;
    }
    v12 = (char *)*(id *)(v10 + 32);
  }
  v27 = v12;
  swift_bridgeObjectRelease(v10);
  v4 = &OBJC_IVAR____TtC4Maps27InfoCardButtonConfiguration_type;
  if (*(_QWORD *)&v27[OBJC_IVAR____TtC4Maps27InfoCardButtonConfiguration_type] != 5)
  {

    return;
  }
  v10 = *(_QWORD *)(a1 + v9);
  v31 = v10;
  v3 = (unint64_t)v10 >> 62;
  if (!((unint64_t)v10 >> 62))
  {
    if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      swift_bridgeObjectRetain(v10);
      goto LABEL_10;
    }
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
LABEL_22:
  if (v10 < 0)
    v16 = v10;
  else
    v16 = v10 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v10);
  if (!_CocoaArrayWrapper.endIndex.getter(v16))
    goto LABEL_44;
  swift_bridgeObjectRetain(v10);
  v11 = (id)_CocoaArrayWrapper.endIndex.getter(v16);
  swift_bridgeObjectRelease(v10);
  if (!v11)
  {
    __break(1u);
    goto LABEL_28;
  }
LABEL_10:
  if ((v10 & 0xC000000000000001) == 0)
  {
    if (!*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_38:
      if (v10 < 0)
        v25 = v10;
      else
        v25 = v10 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v10);
      v26 = _CocoaArrayWrapper.endIndex.getter(v25);
      swift_bridgeObjectRelease(v10);
      if ((v26 & 0x8000000000000000) == 0)
        goto LABEL_36;
      __break(1u);
      goto LABEL_43;
    }
    v13 = *(id *)(v10 + 32);
    if (!v3)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v10);
  if (!v3)
  {
LABEL_13:
    v14 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_34;
  }
LABEL_30:
  if (v10 < 0)
    v17 = v10;
  else
    v17 = v10 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v10);
  v14 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease(v10);
LABEL_34:
  if (v14)
  {
    sub_10020E75C(0, 1);

    v18 = (objc_class *)type metadata accessor for InfoCardButtonConfiguration();
    v19 = objc_allocWithZone(v18);
    *(_QWORD *)&v19[*v4] = 6;
    v19[OBJC_IVAR____TtC4Maps27InfoCardButtonConfiguration_shouldBlur] = 0;
    *(_QWORD *)&v19[OBJC_IVAR____TtC4Maps27InfoCardButtonConfiguration_tintColor] = 0;
    *(_QWORD *)&v19[OBJC_IVAR____TtC4Maps27InfoCardButtonConfiguration_visibility] = 0;
    v30.receiver = v19;
    v30.super_class = v18;
    v11 = objc_msgSendSuper2(&v30, "init");
    v10 = v31;
    if (!(v31 >> 62))
    {
LABEL_36:
      sub_10020DE1C(0, 0, (uint64_t)v11);
      v20 = *(_QWORD *)(a1 + v9);
      *(_QWORD *)(a1 + v9) = v31;
      swift_bridgeObjectRelease(v20);
      v21 = String._bridgeToObjectiveC()();
      objc_msgSend(a3, "setSymbolName:", v21);

      v29[0] = 0xD000000000000011;
      v29[1] = 0x8000000100E477C0;
      strcpy((char *)v28, "axIdentifier");
      BYTE5(v28[1]) = 0;
      HIWORD(v28[1]) = -5120;
      v28[0] = String.init<A>(_:)(v28, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
      v28[1] = v22;
      String.append<A>(contentsOf:)(v29, &type metadata for String, &protocol witness table for String);
      v23 = v28[1];
      v24 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v23);
      objc_msgSend(a3, "setAccessibilityIdentifier:", v24);

      objc_msgSend(a3, "layoutIfNeeded");
      objc_msgSend(v8, "insertArrangedSubview:atIndex:", a3, 0);

      return;
    }
    goto LABEL_38;
  }
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
}

id sub_1000BA330(char *a1, void *a2)
{
  void *v4;
  void *v5;
  void *v6;

  v4 = *(void **)&a1[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_actionButtonsLayoutGuide];
  objc_msgSend(v4, "setSpacing:", 0.0);
  v5 = *(void **)&a1[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_actionButtonsLeadingToSuperviewTrailing];
  if (v5)
    objc_msgSend(v5, "setActive:", 0);
  v6 = *(void **)&a1[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_actionButtonsTrailingToSuperViewTrailing];
  if (v6)
    objc_msgSend(v6, "setActive:", 1);
  objc_msgSend(v4, "layoutIfNeeded");
  objc_msgSend(a2, "layoutIfNeeded");
  return objc_msgSend(a1, "layoutIfNeeded");
}

void sub_1000BA3D8(uint64_t a1, uint64_t a2, void (*a3)(id))
{
  uint64_t v4;
  void *Strong;
  void *v6;
  _BYTE v7[24];

  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v4);
  if (Strong)
  {
    v6 = Strong;
    a3(objc_msgSend(Strong, "layoutIfNeeded"));

  }
}

void sub_1000BA444()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  CGFloat m43;
  CGFloat m44;
  id v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  CGFloat Width;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  id v26;
  id v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  CATransform3D v35;
  CATransform3D b;
  CATransform3D a;
  CGRect v38;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView_labelWidthConstraint);
  if (v1)
    objc_msgSend(v1, "setActive:", 1);
  v2 = sub_1000BB954(&OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___stackView, (uint64_t (*)(void))sub_1000BC200);
  v3 = sub_1000BB954(&OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___label, (uint64_t (*)(void))sub_1000BB9AC);
  objc_msgSend(v2, "addArrangedSubview:", v3);

  v4 = sub_1000BB954(&OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___label, (uint64_t (*)(void))sub_1000BB9AC);
  v5 = objc_msgSend(v4, "layer");

  CATransform3DMakeScale(&a, 0.1, 0.1, 0.1);
  v33 = *(_OWORD *)&a.m13;
  v34 = *(_OWORD *)&a.m11;
  v31 = *(_OWORD *)&a.m23;
  v32 = *(_OWORD *)&a.m21;
  v29 = *(_OWORD *)&a.m33;
  v30 = *(_OWORD *)&a.m31;
  v28 = *(_OWORD *)&a.m41;
  m43 = a.m43;
  m44 = a.m44;
  v8 = sub_1000BB954(&OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___label, (uint64_t (*)(void))sub_1000BB9AC);
  objc_msgSend(v8, "bounds");
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v16 = v15;

  v38.origin.x = v10;
  v38.origin.y = v12;
  v38.size.width = v14;
  v38.size.height = v16;
  Width = CGRectGetWidth(v38);
  CATransform3DMakeTranslation(&a, Width * -0.5, 0.0, 0.0);
  v18 = *(_OWORD *)&a.m11;
  v19 = *(_OWORD *)&a.m13;
  v20 = *(_OWORD *)&a.m21;
  v21 = *(_OWORD *)&a.m23;
  v22 = *(_OWORD *)&a.m31;
  v23 = *(_OWORD *)&a.m33;
  v24 = *(_OWORD *)&a.m41;
  v25 = *(_OWORD *)&a.m43;
  *(_OWORD *)&a.m11 = v34;
  *(_OWORD *)&a.m13 = v33;
  *(_OWORD *)&a.m21 = v32;
  *(_OWORD *)&a.m23 = v31;
  *(_OWORD *)&a.m31 = v30;
  *(_OWORD *)&a.m33 = v29;
  *(_OWORD *)&a.m41 = v28;
  a.m43 = m43;
  a.m44 = m44;
  *(_OWORD *)&b.m11 = v18;
  *(_OWORD *)&b.m13 = v19;
  *(_OWORD *)&b.m21 = v20;
  *(_OWORD *)&b.m23 = v21;
  *(_OWORD *)&b.m31 = v22;
  *(_OWORD *)&b.m33 = v23;
  *(_OWORD *)&b.m41 = v24;
  *(_OWORD *)&b.m43 = v25;
  CATransform3DConcat(&v35, &a, &b);
  a = v35;
  objc_msgSend(v5, "setTransform:", &a);

  v26 = sub_1000BB954(&OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___stackView, (uint64_t (*)(void))sub_1000BC200);
  objc_msgSend(v26, "setDirectionalLayoutMargins:", NSDirectionalEdgeInsetsZero.top, NSDirectionalEdgeInsetsZero.leading, NSDirectionalEdgeInsetsZero.bottom, NSDirectionalEdgeInsetsZero.trailing);

  v27 = sub_1000BB954(&OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___label, (uint64_t (*)(void))sub_1000BB9AC);
  objc_msgSend(v27, "setHidden:", 1);

}

id sub_1000BA6CC(char *a1, void *a2)
{
  void *v4;
  id v5;
  id v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  id v11;
  id v12;
  _OWORD v14[8];

  v4 = *(void **)&a1[OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView_labelWidthConstraint];
  if (v4)
    objc_msgSend(v4, "setActive:", 0);
  v5 = sub_1000BB954(&OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___label, (uint64_t (*)(void))sub_1000BB9AC);
  v6 = objc_msgSend(v5, "layer");

  v7 = *(_OWORD *)&CATransform3DIdentity.m13;
  v14[0] = *(_OWORD *)&CATransform3DIdentity.m11;
  v14[1] = v7;
  v8 = *(_OWORD *)&CATransform3DIdentity.m23;
  v14[2] = *(_OWORD *)&CATransform3DIdentity.m21;
  v14[3] = v8;
  v9 = *(_OWORD *)&CATransform3DIdentity.m33;
  v14[4] = *(_OWORD *)&CATransform3DIdentity.m31;
  v14[5] = v9;
  v10 = *(_OWORD *)&CATransform3DIdentity.m43;
  v14[6] = *(_OWORD *)&CATransform3DIdentity.m41;
  v14[7] = v10;
  objc_msgSend(v6, "setTransform:", v14);

  v11 = sub_1000BB954(&OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___stackView, (uint64_t (*)(void))sub_1000BC200);
  if (qword_101490D88 != -1)
    swift_once(&qword_101490D88, sub_1000BABB0);
  objc_msgSend(v11, "setDirectionalLayoutMargins:", *(double *)&qword_101498F88, unk_101498F90, *(double *)&qword_101498F98, unk_101498FA0);

  v12 = sub_1000BB954(&OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___label, (uint64_t (*)(void))sub_1000BB9AC);
  objc_msgSend(v12, "setHidden:", 0);

  objc_msgSend(a1, "layoutIfNeeded");
  return objc_msgSend(a2, "layoutIfNeeded");
}

uint64_t sub_1000BA83C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  __n128 v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD aBlock[6];

  v29 = a3;
  v30 = a4;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v34 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v32 = *(_QWORD *)(v8 - 8);
  v33 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchTime(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v29 - v16;
  sub_10000E4BC(0, (unint64_t *)&qword_101492FA0, OS_dispatch_queue_ptr);
  v18 = (void *)static OS_dispatch_queue.main.getter();
  static DispatchTime.now()(v18, v19);
  + infix(_:_:)(v14, 1.0);
  v31 = *(void (**)(char *, uint64_t))(v12 + 8);
  v31(v14, v11);
  v20 = (_QWORD *)swift_allocObject(&unk_1011A1288, 40, 7);
  v21 = v29;
  v22 = v30;
  v20[2] = a2;
  v20[3] = v21;
  v20[4] = v22;
  aBlock[4] = sub_1000BC7BC;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BB8D4;
  aBlock[3] = &unk_1011A12A0;
  v23 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  v24 = swift_release();
  static DispatchQoS.unspecified.getter(v24);
  aBlock[0] = _swiftEmptyArrayStorage;
  v25 = sub_10000E540();
  v26 = sub_100008B04((uint64_t *)&unk_101492FB0);
  v27 = sub_10000E588();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v26, v27, v5, v25);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v17, v10, v7, v23);
  _Block_release(v23);

  (*(void (**)(char *, uint64_t))(v34 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v33);
  return ((uint64_t (*)(char *, uint64_t))v31)(v17, v11);
}

uint64_t type metadata accessor for InfoCardHeaderView()
{
  return objc_opt_self(_TtC4Maps18InfoCardHeaderView);
}

void sub_1000BABB0()
{
  qword_101498F88 = 0;
  unk_101498F90 = 0;
  qword_101498F98 = 0;
  unk_101498FA0 = 0x4020000000000000;
}

uint64_t sub_1000BABC8()
{
  uint64_t result;

  result = sub_1000BABE4();
  qword_101498FA8 = result;
  return result;
}

uint64_t sub_1000BABE4()
{
  id v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t result;
  id v7;
  _QWORD v8[6];

  v0 = objc_msgSend(objc_allocWithZone((Class)UIGraphicsImageRendererFormat), "init");
  objc_msgSend(v0, "setScale:", 1.0);
  objc_msgSend(v0, "setPreferredRange:", 2);
  v1 = objc_msgSend(objc_allocWithZone((Class)UIGraphicsImageRenderer), "initWithBounds:format:", v0, 0.0, 0.0, 100.0, 40.0);
  v2 = swift_allocObject(&unk_1011A0FB8, 48, 7);
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_OWORD *)(v2 + 32) = xmmword_100E2A4E0;
  v3 = swift_allocObject(&unk_1011A0FE0, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1000BC4E0;
  *(_QWORD *)(v3 + 24) = v2;
  v8[4] = sub_10000BF08;
  v8[5] = v3;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_100008F44;
  v8[3] = &unk_1011A0FF8;
  v4 = _Block_copy(v8);
  swift_retain();
  swift_release();
  v5 = objc_msgSend(v1, "imageWithActions:", v4);

  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation(v3, "", 78, 491, 78, 1);
  result = swift_release();
  if ((v1 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v7 = objc_msgSend(v5, "CGImage");
    swift_release();

    return (uint64_t)v7;
  }
  return result;
}

void sub_1000BADC0(void *a1, double a2, double a3, double a4, double a5)
{
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  Class isa;
  id v23;

  v10 = objc_msgSend(objc_allocWithZone((Class)CAGradientLayer), "init");
  objc_msgSend(v10, "setBounds:", a2, a3, a4, a5);
  v11 = sub_100008B04((uint64_t *)&unk_101499120);
  v12 = swift_allocObject(v11, 96, 7);
  *(_OWORD *)(v12 + 16) = xmmword_100E22F70;
  v13 = (void *)objc_opt_self(UIColor);
  v14 = objc_msgSend(v13, "whiteColor");
  v15 = objc_msgSend(v14, "colorWithAlphaComponent:", 0.0);

  v16 = objc_msgSend(v15, "CGColor");
  type metadata accessor for CGColor(0);
  v18 = v17;
  *(_QWORD *)(v12 + 56) = v17;
  *(_QWORD *)(v12 + 32) = v16;
  v19 = objc_msgSend(v13, "whiteColor");
  v20 = objc_msgSend(v19, "colorWithAlphaComponent:", 0.7);

  v21 = objc_msgSend(v20, "CGColor");
  *(_QWORD *)(v12 + 88) = v18;
  *(_QWORD *)(v12 + 64) = v21;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v12);
  objc_msgSend(v10, "setColors:", isa);

  v23 = objc_msgSend(a1, "CGContext");
  objc_msgSend(v10, "renderInContext:", v23);

}

id sub_1000BAFD0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;

  v1 = OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___gradientView;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___gradientView);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___gradientView);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
    objc_msgSend(v4, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v5 = objc_msgSend((id)objc_opt_self(UIColor), "whiteColor");
    objc_msgSend(v4, "setBackgroundColor:", v5);

    v6 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v7 = v2;
  return v3;
}

void sub_1000BB0A0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  id v5;

  v1 = OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___blurView;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___blurView);
  if (v2)
    goto LABEL_6;
  if (qword_101490D90 != -1)
    swift_once(&qword_101490D90, sub_1000BABC8);
  if (qword_101498FA8)
  {
    v3 = objc_msgSend(objc_allocWithZone((Class)MUBlurView), "initWithVariableBlurWithRadius:maskImage:", qword_101498FA8, 1.0);
    objc_msgSend(v3, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v4 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v3;
    v3;

    v2 = 0;
LABEL_6:
    v5 = v2;
    return;
  }
  __break(1u);
}

void sub_1000BB164()
{
  char *v0;
  id v1;
  id v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  double v14;
  double v15;
  double v16;
  double v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  void *v40;
  void *v41;
  id v42;
  id v43;
  id v44;
  id v45;
  void *v46;
  void *v47;
  id v48;
  id v49;
  id v50;
  id v51;
  void *v52;
  void *v53;
  id v54;
  id v55;
  id v56;
  id v57;
  void *v58;
  void *v59;
  id v60;
  id v61;
  id v62;
  id v63;
  uint64_t v64;
  void *v65;
  Class isa;

  objc_msgSend(v0, "setClipsToBounds:", 0);
  v1 = sub_1000BB954(&OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___label, (uint64_t (*)(void))sub_1000BB9AC);
  v2 = objc_msgSend(v1, "widthAnchor");

  v3 = objc_msgSend(v2, "constraintEqualToConstant:", 0.0);
  v4 = *(void **)&v0[OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView_labelWidthConstraint];
  *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView_labelWidthConstraint] = v3;

  v5 = sub_1000BB954(&OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___stackView, (uint64_t (*)(void))sub_1000BC200);
  objc_msgSend(v0, "addSubview:", v5);

  v6 = sub_1000BB954(&OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___stackView, (uint64_t (*)(void))sub_1000BC200);
  v7 = sub_1000BB840();
  objc_msgSend(v6, "addArrangedSubview:", v7);

  v8 = sub_1000BB954(&OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___stackView, (uint64_t (*)(void))sub_1000BC200);
  v9 = sub_1000BB954(&OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___label, (uint64_t (*)(void))sub_1000BB9AC);
  objc_msgSend(v8, "addArrangedSubview:", v9);

  if (!-[PlaceSummaryTableViewCell canBecomeFirstResponder]_0(v0))
  {
    v10 = objc_msgSend(v0, "traitCollection");
    v11 = objc_msgSend(v10, "userInterfaceStyle");

    v12 = sub_1000BB954(&OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___stackView, (uint64_t (*)(void))sub_1000BC200);
    v13 = objc_allocWithZone((Class)UIColor);
    if (v11 == (id)2)
    {
      v14 = 0.224;
      v15 = 0.231;
      v16 = 0.25;
      v17 = 1.0;
    }
    else
    {
      v15 = 0.9;
      v14 = 0.894;
      v17 = 1.0;
      v16 = 0.894;
    }
    v18 = objc_msgSend(v13, "initWithRed:green:blue:alpha:", v14, v15, v16, v17);
    objc_msgSend(v12, "setBackgroundColor:", v18);

  }
  sub_1000BB0A0();
  v20 = v19;
  v21 = sub_1000BB954(&OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___stackView, (uint64_t (*)(void))sub_1000BC200);
  objc_msgSend(v0, "insertSubview:belowSubview:", v20, v21);

  v65 = (void *)objc_opt_self(NSLayoutConstraint);
  v22 = sub_100008B04((uint64_t *)&unk_101493B10);
  v23 = swift_allocObject(v22, 96, 7);
  *(_OWORD *)(v23 + 16) = xmmword_100E247C0;
  v24 = sub_1000BB954(&OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___stackView, (uint64_t (*)(void))sub_1000BC200);
  v25 = objc_msgSend(v24, "topAnchor");

  v26 = objc_msgSend(v0, "topAnchor");
  v27 = objc_msgSend(v25, "constraintEqualToAnchor:", v26);

  *(_QWORD *)(v23 + 32) = v27;
  v28 = sub_1000BB954(&OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___stackView, (uint64_t (*)(void))sub_1000BC200);
  v29 = objc_msgSend(v28, "bottomAnchor");

  v30 = objc_msgSend(v0, "bottomAnchor");
  v31 = objc_msgSend(v29, "constraintEqualToAnchor:", v30);

  *(_QWORD *)(v23 + 40) = v31;
  v32 = sub_1000BB954(&OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___stackView, (uint64_t (*)(void))sub_1000BC200);
  v33 = objc_msgSend(v32, "leadingAnchor");

  v34 = objc_msgSend(v0, "leadingAnchor");
  v35 = objc_msgSend(v33, "constraintEqualToAnchor:", v34);

  *(_QWORD *)(v23 + 48) = v35;
  v36 = sub_1000BB954(&OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___stackView, (uint64_t (*)(void))sub_1000BC200);
  v37 = objc_msgSend(v36, "trailingAnchor");

  v38 = objc_msgSend(v0, "trailingAnchor");
  v39 = objc_msgSend(v37, "constraintEqualToAnchor:", v38);

  *(_QWORD *)(v23 + 56) = v39;
  sub_1000BB0A0();
  v41 = v40;
  v42 = objc_msgSend(v40, "topAnchor");

  v43 = sub_1000BB954(&OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___stackView, (uint64_t (*)(void))sub_1000BC200);
  v44 = objc_msgSend(v43, "topAnchor");

  v45 = objc_msgSend(v42, "constraintEqualToAnchor:", v44);
  *(_QWORD *)(v23 + 64) = v45;
  sub_1000BB0A0();
  v47 = v46;
  v48 = objc_msgSend(v46, "bottomAnchor");

  v49 = sub_1000BB954(&OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___stackView, (uint64_t (*)(void))sub_1000BC200);
  v50 = objc_msgSend(v49, "bottomAnchor");

  v51 = objc_msgSend(v48, "constraintEqualToAnchor:constant:", v50, 8.0);
  *(_QWORD *)(v23 + 72) = v51;
  sub_1000BB0A0();
  v53 = v52;
  v54 = objc_msgSend(v52, "leadingAnchor");

  v55 = sub_1000BB954(&OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___stackView, (uint64_t (*)(void))sub_1000BC200);
  v56 = objc_msgSend(v55, "leadingAnchor");

  v57 = objc_msgSend(v54, "constraintEqualToAnchor:constant:", v56, -16.0);
  *(_QWORD *)(v23 + 80) = v57;
  sub_1000BB0A0();
  v59 = v58;
  v60 = objc_msgSend(v58, "trailingAnchor");

  v61 = sub_1000BB954(&OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___stackView, (uint64_t (*)(void))sub_1000BC200);
  v62 = objc_msgSend(v61, "trailingAnchor");

  v63 = objc_msgSend(v60, "constraintEqualToAnchor:constant:", v62, -16.0);
  *(_QWORD *)(v23 + 88) = v63;
  specialized Array._endMutation()(v64);
  sub_10000E4BC(0, (unint64_t *)&qword_101493070, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v23);
  objc_msgSend(v65, "activateConstraints:", isa);

}

id sub_1000BB840()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  NSString v5;
  void *v6;
  id v7;

  v1 = OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___button;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___button);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___button);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)MUCardButton), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
    objc_msgSend(v4, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v5 = String._bridgeToObjectiveC()();
    objc_msgSend(v4, "setSymbolName:", v5);

    objc_msgSend(v4, "setDirectionalLayoutMargins:", NSDirectionalEdgeInsetsZero.top, NSDirectionalEdgeInsetsZero.leading, NSDirectionalEdgeInsetsZero.bottom, NSDirectionalEdgeInsetsZero.trailing);
    objc_msgSend(v4, "setDrawBackground:", 0);
    objc_msgSend(v4, "setBlurBackground:", 0);
    v6 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v7 = v2;
  return v3;
}

id sub_1000BB954(uint64_t *a1, uint64_t (*a2)(void))
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;

  v3 = *a1;
  v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    v5 = *(id *)(v2 + *a1);
  }
  else
  {
    v6 = (void *)a2();
    v7 = *(void **)(v2 + v3);
    *(_QWORD *)(v2 + v3) = v6;
    v5 = v6;

    v4 = 0;
  }
  v8 = v4;
  return v5;
}

id sub_1000BB9AC()
{
  id v0;
  id v1;
  Swift::String v2;
  Swift::String v3;
  void *object;
  NSString v5;
  Swift::String v7;

  v0 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v1 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
  objc_msgSend(v0, "setTextColor:", v1);

  if (qword_101490ED0 != -1)
    swift_once(&qword_101490ED0, sub_10011833C);
  v7._countAndFlagsBits = 0xD000000000000051;
  v7._object = (void *)0x8000000100E47760;
  v2._object = (void *)0x8000000100E47730;
  v2._countAndFlagsBits = 0xD000000000000020;
  v3._countAndFlagsBits = 0x617262694C206E49;
  v3._object = (void *)0xEA00000000007972;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, (Swift::String_optional)0, (NSBundle)qword_1014D4B80, v3, v7)._object;
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  objc_msgSend(v0, "setText:", v5);

  objc_msgSend(v0, "setLineBreakMode:", 2);
  return v0;
}

id sub_1000BBB1C()
{
  char *v0;
  id v1;
  id v2;
  double v3;
  CGFloat v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  void *v11;
  id v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  objc_super v22;
  CGRect v23;

  v22.receiver = v0;
  v22.super_class = (Class)swift_getObjectType(v0);
  objc_msgSendSuper2(&v22, "layoutSubviews");
  v1 = sub_1000BB954(&OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___stackView, (uint64_t (*)(void))sub_1000BC200);
  v2 = sub_1000BB954(&OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___stackView, (uint64_t (*)(void))sub_1000BC200);
  objc_msgSend(v2, "bounds");
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;

  v23.origin.x = v4;
  v23.origin.y = v6;
  v23.size.width = v8;
  v23.size.height = v10;
  objc_msgSend(v1, "_setContinuousCornerRadius:", CGRectGetHeight(v23) * 0.5);

  v11 = *(void **)&v0[OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView_gradient];
  v12 = sub_1000BAFD0();
  objc_msgSend(v12, "bounds");
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v20 = v19;

  return objc_msgSend(v11, "setFrame:", v14, v16, v18, v20);
}

uint64_t type metadata accessor for AddToLibraryAnimationView()
{
  return objc_opt_self(_TtC4Maps25AddToLibraryAnimationView);
}

_QWORD *sub_1000BBD1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  _QWORD *v18;

  v3 = v2;
  if ((unint64_t)a1 >> 62)
    goto LABEL_16;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    result = _swiftEmptyArrayStorage;
    if (!v6)
      break;
    v18 = _swiftEmptyArrayStorage;
    result = (_QWORD *)specialized ContiguousArray.reserveCapacity(_:)(v6);
    if (v6 < 0)
    {
      __break(1u);
      return result;
    }
    v8 = 0;
    while (v6 != v8)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, a1);
      else
        v9 = *(id *)(a1 + 8 * v8 + 32);
      v10 = v9;
      v16 = v9;
      sub_1000B8084((uint64_t *)&v16, a2, &v17);

      if (v3)
        return (_QWORD *)swift_release();
      ++v8;
      v12 = v17;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v11);
      v13 = v18[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13);
      v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v12);
      specialized ContiguousArray._endMutation()(v14);
      if (v6 == v8)
        return v18;
    }
    __break(1u);
LABEL_16:
    if (a1 < 0)
      v15 = a1;
    else
      v15 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v6 = _CocoaArrayWrapper.endIndex.getter(v15);
    swift_bridgeObjectRelease(a1);
  }
  return result;
}

id sub_1000BBE80()
{
  char *v0;
  objc_class *ObjectType;
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  id v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  objc_super v14;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = &v0[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_title];
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  v3 = OBJC_IVAR____TtC4Maps18InfoCardHeaderView__buttonConfigurations;
  *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps18InfoCardHeaderView__buttonConfigurations] = _swiftEmptyArrayStorage;
  swift_unknownObjectWeakInit(&v0[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_delegate], 0);
  *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_lastButtonTrailingPadding] = 0x4030000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_actionButtonsTrailingToSuperViewTrailing] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_actionButtonsLeadingToSuperviewTrailing] = 0;
  v4 = &v0[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_capturedTitleToEndTrailingConstant];
  *(_QWORD *)v4 = 0;
  v4[8] = 1;
  v5 = OBJC_IVAR____TtC4Maps18InfoCardHeaderView_titleLabel;
  v6 = objc_allocWithZone((Class)UILabel);
  v7 = v0;
  *(_QWORD *)&v0[v5] = objc_msgSend(v6, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  *(_QWORD *)&v7[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_actionButtons] = _swiftEmptyArrayStorage;
  v8 = OBJC_IVAR____TtC4Maps18InfoCardHeaderView_actionButtonsLayoutGuide;
  *(_QWORD *)&v7[v8] = objc_msgSend(objc_allocWithZone((Class)UIStackView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v9 = OBJC_IVAR____TtC4Maps18InfoCardHeaderView_bottomHairlineView;
  *(_QWORD *)&v7[v9] = objc_msgSend(objc_allocWithZone((Class)HairlineView), "init");
  *(_QWORD *)&v7[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_actionButtonConstraints] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v7[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_hairLineAlpha] = 0;
  v10 = *(_QWORD *)&v0[v3];
  *(_QWORD *)&v0[v3] = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v10);
  v7[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_hideTitleLabel] = 0;
  v7[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_hideActionButtons] = 0;
  v7[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_blurButtons] = 0;
  v11 = objc_msgSend(objc_allocWithZone((Class)UITapGestureRecognizer), "init");
  *(_QWORD *)&v7[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_tapGestureRecognizer] = v11;

  v14.receiver = v7;
  v14.super_class = ObjectType;
  v12 = objc_msgSendSuper2(&v14, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  sub_1000B7898();
  sub_1000B7A84();

  return v12;
}

void sub_1000BC084()
{
  char *v0;
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = &v0[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_title];
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps18InfoCardHeaderView__buttonConfigurations] = &_swiftEmptyArrayStorage;
  swift_unknownObjectWeakInit(&v0[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_delegate], 0);
  *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_lastButtonTrailingPadding] = 0x4030000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_actionButtonsTrailingToSuperViewTrailing] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_actionButtonsLeadingToSuperviewTrailing] = 0;
  v2 = &v0[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_capturedTitleToEndTrailingConstant];
  *(_QWORD *)v2 = 0;
  v2[8] = 1;
  v3 = OBJC_IVAR____TtC4Maps18InfoCardHeaderView_titleLabel;
  *(_QWORD *)&v0[v3] = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_actionButtons] = &_swiftEmptyArrayStorage;
  v4 = OBJC_IVAR____TtC4Maps18InfoCardHeaderView_actionButtonsLayoutGuide;
  *(_QWORD *)&v0[v4] = objc_msgSend(objc_allocWithZone((Class)UIStackView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v5 = OBJC_IVAR____TtC4Maps18InfoCardHeaderView_bottomHairlineView;
  *(_QWORD *)&v0[v5] = objc_msgSend(objc_allocWithZone((Class)HairlineView), "init");
  *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_actionButtonConstraints] = &_swiftEmptyArrayStorage;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100E41970, "Maps/InfoCardHeaderView.swift", 29, 2, 163, 0);
  __break(1u);
}

id sub_1000BC200()
{
  id v0;
  uint64_t v1;
  id v2;

  v0 = objc_msgSend(objc_allocWithZone((Class)UIStackView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v0, "setAxis:", 0);
  objc_msgSend(v0, "setAlignment:", 3);
  objc_msgSend(v0, "setClipsToBounds:", 1);
  objc_msgSend(v0, "setSpacing:", 0.0);
  v1 = qword_101490D88;
  v2 = v0;
  if (v1 != -1)
    swift_once(&qword_101490D88, sub_1000BABB0);
  objc_msgSend(v2, "setDirectionalLayoutMargins:", *(double *)&qword_101498F88, unk_101498F90, *(double *)&qword_101498F98, unk_101498FA0);

  objc_msgSend(v2, "setLayoutMarginsRelativeArrangement:", 1);
  return v2;
}

id sub_1000BC310()
{
  char *v0;
  objc_class *ObjectType;
  uint64_t v2;
  id v3;
  char *v4;
  id v5;
  objc_super v7;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView_labelWidthConstraint] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___gradientView] = 0;
  v2 = OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView_gradient;
  v3 = objc_allocWithZone((Class)CAGradientLayer);
  v4 = v0;
  *(_QWORD *)&v0[v2] = objc_msgSend(v3, "init");
  *(_QWORD *)&v4[OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___blurView] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___stackView] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___button] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___label] = 0;

  v7.receiver = v4;
  v7.super_class = ObjectType;
  v5 = objc_msgSendSuper2(&v7, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  sub_1000BB164();

  return v5;
}

void sub_1000BC404()
{
  char *v0;
  uint64_t v1;

  *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView_labelWidthConstraint] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___gradientView] = 0;
  v1 = OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView_gradient;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone((Class)CAGradientLayer), "init");
  *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___blurView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___stackView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___button] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps25AddToLibraryAnimationView____lazy_storage___label] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100E41970, "Maps/InfoCardHeaderView.swift", 29, 2, 523, 0);
  __break(1u);
}

uint64_t sub_1000BC4D0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 48, 7);
}

void sub_1000BC4E0(void *a1)
{
  double *v1;

  sub_1000BADC0(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1000BC4EC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000BC4FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000BC50C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000BC514()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000BC538()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

void sub_1000BC56C()
{
  uint64_t *v0;

  sub_1000B899C(v0[2], v0[3], v0[4]);
}

uint64_t sub_1000BC578()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000BC588()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));

  swift_release(*(_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 80, 7);
}

void sub_1000BC5DC()
{
  uint64_t v0;

  sub_1000B96D8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(void **)(v0 + 48), *(void **)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
}

id sub_1000BC5F4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = v0[3];
  v2 = v0[4];
  v3 = *(void **)(v0[2] + OBJC_IVAR____TtC4Maps18InfoCardHeaderView_actionButtonsLayoutGuide);
  objc_msgSend(v3, "_maps_removeArrangedSubview:", v1);
  objc_msgSend(v3, "insertArrangedSubview:atIndex:", v2, 0);
  return objc_msgSend(v3, "layoutIfNeeded");
}

uint64_t sub_1000BC654()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000BC664()
{
  uint64_t v0;

  return sub_10003F08C(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1000BC66C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_1000BC698()
{
  uint64_t v0;

  return sub_1000BA6CC(*(char **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1000BC6A4(uint64_t a1)
{
  uint64_t *v1;

  return sub_1000BA83C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1000BC6B0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_1000BC6D4()
{
  uint64_t v0;
  char *v1;

  v1 = *(char **)(v0 + 16);
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC4Maps18InfoCardHeaderView_actionButtonsLayoutGuide], "setSpacing:", 100.0);
  return objc_msgSend(v1, "layoutIfNeeded");
}

uint64_t sub_1000BC71C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000BC750()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  _BYTE v5[24];

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(uint64_t (**)(uint64_t))(v0 + 32);
  objc_msgSend(*(id *)(v0 + 16), "layoutIfNeeded");
  v3 = swift_beginAccess(v1 + 16, v5, 1, 0);
  *(_BYTE *)(v1 + 16) = 1;
  return v2(v3);
}

uint64_t sub_1000BC7BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  _BYTE v5[24];

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(uint64_t (**)(uint64_t))(v0 + 24);
  v3 = swift_beginAccess(v1 + 16, v5, 1, 0);
  *(_BYTE *)(v1 + 16) = 1;
  return v2(v3);
}

id sub_1000BC80C()
{
  uint64_t v0;

  return sub_1000B9958(*(void **)(v0 + 16), *(_BYTE **)(v0 + 24));
}

uint64_t sub_1000BC814()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000BC850(uint64_t a1)
{
  uint64_t v1;

  return sub_1000B9C2C(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(void **)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_1000BC864()
{
  id *v0;

  return swift_deallocObject(v0, 40, 7);
}

void sub_1000BC898()
{
  uint64_t v0;

  sub_1000B9F04(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1000BC8A4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_1000BC8B4()
{
  uint64_t v0;

  return sub_1000BA330(*(char **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1000BC8C0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1000BC8EC(uint64_t a1)
{
  uint64_t v1;

  sub_1000BA3D8(a1, *(_QWORD *)(v1 + 16), *(void (**)(id))(v1 + 24));
}

id sub_1000BC95C(void *a1)
{
  uint64_t v1;
  void *v2;
  id v4;
  id v5;

  v2 = *(void **)(v1 + OBJC_IVAR____TtC4Maps18TransitLineContext_chromeViewController);
  if (!v2)
    return 0;
  v4 = v2;
  v5 = objc_msgSend(v4, "isTopContext:", v1);
  if ((_DWORD)v5 && (sub_100114A58(a1) & 1) == 0)
    sub_100114F5C(a1, (int)objc_msgSend(a1, "_maps_lineShouldZoomMapRegionOnSelection"));

  return v5;
}

id sub_1000BCA38()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC4Maps18TransitLineContext_chromeViewController);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = objc_msgSend(v2, "isTopContext:", v0);
  if ((_DWORD)v3)
    objc_msgSend(v2, "popContext:animated:completion:", v0, 1, 0);

  return v3;
}

uint64_t sub_1000BCAE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 48);
}

void sub_1000BCAF0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  sub_1000BDB44(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = (char *)&value witness table for Builtin.Int64 + 64;
      v6[3] = "\t";
      v6[4] = (char *)&value witness table for Builtin.Int64 + 64;
      v6[5] = "\t";
      v6[6] = &unk_100E2A5E8;
      swift_initStructMetadata(a1, 0, 7, v6, a1 + 32);
    }
  }
}

uint64_t *sub_1000BCB9C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;

  v6 = type metadata accessor for DynamicTypeSize(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_QWORD *)(v7 + 64) <= 8uLL)
    v8 = 8;
  else
    v8 = *(_QWORD *)(v7 + 64);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = v8 + v11 + 1;
  v13 = *(_QWORD *)(v10 + 64) + 7;
  v14 = v11 | *(_DWORD *)(v7 + 80) & 0xF8;
  if (v14 > 7
    || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v10 + 80)) & 0x100000) != 0
    || ((((((v13 + (v12 & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
     + 10 > 0x18)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + (((v14 | 7) + 16) & ~(unint64_t)(v14 | 7)));
    swift_retain(v17);
  }
  else
  {
    v18 = *((unsigned __int8 *)a2 + v8);
    if (v18 >= 2)
    {
      if (v8 <= 3)
        v19 = v8;
      else
        v19 = 4;
      __asm { BR              X14 }
    }
    v20 = ~v11;
    if (v18 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      v21 = 1;
    }
    else
    {
      v22 = *a2;
      *a1 = *a2;
      swift_retain(v22);
      v21 = 0;
    }
    *((_BYTE *)a1 + v8) = v21;
    v23 = ((unint64_t)a2 + v12) & v20;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))(((unint64_t)a1 + v12) & v20, v23, v9);
    v24 = (_QWORD *)((v13 + v23) & 0xFFFFFFFFFFFFFFF8);
    v25 = (_QWORD *)((v13 + (((unint64_t)a1 + v12) & v20)) & 0xFFFFFFFFFFFFFFF8);
    *v25 = *v24;
    v26 = ((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8;
    v27 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
    v28 = *(_QWORD *)v27;
    *(_BYTE *)(v26 + 8) = *(_BYTE *)(v27 + 8);
    *(_QWORD *)v26 = v28;
    v29 = (_QWORD *)(((unint64_t)v25 + 31) & 0xFFFFFFFFFFFFF8);
    v30 = (_QWORD *)(((unint64_t)v24 + 31) & 0xFFFFFFFFFFFFF8);
    *v29 = *v30;
    v31 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
    v32 = ((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8;
    v33 = *(_QWORD *)v32;
    *(_BYTE *)(v31 + 8) = *(_BYTE *)(v32 + 8);
    *(_QWORD *)v31 = v33;
    *(_BYTE *)(v31 + 9) = *(_BYTE *)(v32 + 9);
  }
  return a1;
}

uint64_t sub_1000BCDCC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  v4 = type metadata accessor for DynamicTypeSize(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v5 + 64) <= 8uLL)
    v6 = 8;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *((unsigned __int8 *)a1 + v6);
  if (v7 >= 2)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  if (v7 == 1)
    (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(a1, v4);
  else
    swift_release(*a1);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((unint64_t)a1 + v6 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t *sub_1000BCEC4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;

  v6 = type metadata accessor for DynamicTypeSize(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_QWORD *)(v7 + 64) <= 8uLL)
    v8 = 8;
  else
    v8 = *(_QWORD *)(v7 + 64);
  v9 = *((unsigned __int8 *)a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X13 }
  }
  if (v9 == 1)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
    v11 = 1;
  }
  else
  {
    v12 = *a2;
    *a1 = *a2;
    swift_retain(v12);
    v11 = 0;
  }
  *((_BYTE *)a1 + v8) = v11;
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v8 + v14 + 1;
  v16 = ((unint64_t)a1 + v15) & ~v14;
  v17 = ((unint64_t)a2 + v15) & ~v14;
  (*(void (**)(unint64_t, unint64_t))(v13 + 16))(v16, v17);
  v18 = *(_QWORD *)(v13 + 64) + 7;
  v19 = (_QWORD *)((v18 + v16) & 0xFFFFFFFFFFFFFFF8);
  v20 = (_QWORD *)((v18 + v17) & 0xFFFFFFFFFFFFFFF8);
  *v19 = *v20;
  v21 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
  v22 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
  v23 = *(_BYTE *)(v22 + 8);
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_BYTE *)(v21 + 8) = v23;
  v24 = (_QWORD *)(((unint64_t)v20 + 31) & 0xFFFFFFFFFFFFF8);
  v25 = (_QWORD *)(((unint64_t)v19 + 31) & 0xFFFFFFFFFFFFF8);
  *v25 = *v24;
  v26 = ((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8;
  v27 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v22) = *(_BYTE *)(v27 + 8);
  *(_QWORD *)v26 = *(_QWORD *)v27;
  *(_BYTE *)(v26 + 8) = v22;
  *(_BYTE *)(v26 + 9) = *(_BYTE *)(v27 + 9);
  return a1;
}

uint64_t *sub_1000BD080(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;

  if (a1 != a2)
  {
    v6 = type metadata accessor for DynamicTypeSize(0);
    v7 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v7 + 64) <= 8uLL)
      v8 = 8;
    else
      v8 = *(_QWORD *)(v7 + 64);
    v9 = *((unsigned __int8 *)a1 + v8);
    if (v9 >= 2)
    {
      if (v8 <= 3)
        v10 = v8;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v9 == 1)
      (*(void (**)(uint64_t *, uint64_t))(v7 + 8))(a1, v6);
    else
      swift_release(*a1);
    v11 = *((unsigned __int8 *)a2 + v8);
    if (v11 >= 2)
    {
      if (v8 <= 3)
        v12 = v8;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      *((_BYTE *)a1 + v8) = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      *((_BYTE *)a1 + v8) = 0;
      swift_retain(v13);
    }
  }
  v14 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for DynamicTypeSize(0) - 8) + 64);
  if (v14 <= 8)
    v14 = 8;
  v15 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = v14 + v16 + 1;
  v18 = ((unint64_t)a1 + v17) & ~v16;
  v19 = ((unint64_t)a2 + v17) & ~v16;
  (*(void (**)(unint64_t, unint64_t))(v15 + 24))(v18, v19);
  v20 = *(_QWORD *)(v15 + 64) + 7;
  v21 = (_QWORD *)((v20 + v18) & 0xFFFFFFFFFFFFFFF8);
  v22 = (_QWORD *)((v20 + v19) & 0xFFFFFFFFFFFFFFF8);
  *v21 = *v22;
  v23 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  v24 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  v25 = *(_BYTE *)(v24 + 8);
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *(_BYTE *)(v23 + 8) = v25;
  v26 = (_QWORD *)(((unint64_t)v22 + 31) & 0xFFFFFFFFFFFFF8);
  v27 = (_QWORD *)(((unint64_t)v21 + 31) & 0xFFFFFFFFFFFFF8);
  *v27 = *v26;
  v28 = ((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8;
  v29 = ((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v24) = *(_BYTE *)(v29 + 8);
  *(_QWORD *)v28 = *(_QWORD *)v29;
  *(_BYTE *)(v28 + 8) = v24;
  *(_BYTE *)(v28 + 9) = *(_BYTE *)(v29 + 9);
  return a1;
}

_QWORD *sub_1000BD314(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;

  v6 = type metadata accessor for DynamicTypeSize(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_QWORD *)(v7 + 64) <= 8uLL)
    v8 = 8;
  else
    v8 = *(_QWORD *)(v7 + 64);
  v9 = *((unsigned __int8 *)a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X13 }
  }
  if (v9 == 1)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 32))(a1, a2, v6);
    v11 = 1;
  }
  else
  {
    v11 = 0;
    *a1 = *a2;
  }
  *((_BYTE *)a1 + v8) = v11;
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = v8 + v13 + 1;
  v15 = ((unint64_t)a1 + v14) & ~v13;
  v16 = ((unint64_t)a2 + v14) & ~v13;
  (*(void (**)(unint64_t, unint64_t))(v12 + 32))(v15, v16);
  v17 = *(_QWORD *)(v12 + 64) + 7;
  v18 = (_QWORD *)((v17 + v15) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_QWORD *)((v17 + v16) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  v20 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  v21 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_BYTE *)(v21 + 8);
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_BYTE *)(v20 + 8) = v22;
  v23 = (_QWORD *)(((unint64_t)v19 + 31) & 0xFFFFFFFFFFFFF8);
  v24 = (_QWORD *)(((unint64_t)v18 + 31) & 0xFFFFFFFFFFFFF8);
  *v24 = *v23;
  v25 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
  v26 = ((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v21) = *(_BYTE *)(v26 + 8);
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_BYTE *)(v25 + 8) = v21;
  *(_BYTE *)(v25 + 9) = *(_BYTE *)(v26 + 9);
  return a1;
}

_QWORD *sub_1000BD4CC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;

  if (a1 != a2)
  {
    v6 = type metadata accessor for DynamicTypeSize(0);
    v7 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v7 + 64) <= 8uLL)
      v8 = 8;
    else
      v8 = *(_QWORD *)(v7 + 64);
    v9 = *((unsigned __int8 *)a1 + v8);
    if (v9 >= 2)
    {
      if (v8 <= 3)
        v10 = v8;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v9 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(a1, v6);
    else
      swift_release(*a1);
    v11 = *((unsigned __int8 *)a2 + v8);
    if (v11 >= 2)
    {
      if (v8 <= 3)
        v12 = v8;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 32))(a1, a2, v6);
      v13 = 1;
    }
    else
    {
      v13 = 0;
      *a1 = *a2;
    }
    *((_BYTE *)a1 + v8) = v13;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for DynamicTypeSize(0) - 8) + 64);
  if (v14 <= 8)
    v14 = 8;
  v15 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = v14 + v16 + 1;
  v18 = ((unint64_t)a1 + v17) & ~v16;
  v19 = ((unint64_t)a2 + v17) & ~v16;
  (*(void (**)(unint64_t, unint64_t))(v15 + 40))(v18, v19);
  v20 = *(_QWORD *)(v15 + 64) + 7;
  v21 = (_QWORD *)((v20 + v18) & 0xFFFFFFFFFFFFFFF8);
  v22 = (_QWORD *)((v20 + v19) & 0xFFFFFFFFFFFFFFF8);
  *v21 = *v22;
  v23 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  v24 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  v25 = *(_BYTE *)(v24 + 8);
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *(_BYTE *)(v23 + 8) = v25;
  v26 = (_QWORD *)(((unint64_t)v22 + 31) & 0xFFFFFFFFFFFFF8);
  v27 = (_QWORD *)(((unint64_t)v21 + 31) & 0xFFFFFFFFFFFFF8);
  *v27 = *v26;
  v28 = ((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8;
  v29 = ((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v24) = *(_BYTE *)(v29 + 8);
  *(_QWORD *)v28 = *(_QWORD *)v29;
  *(_BYTE *)(v28 + 8) = v24;
  *(_BYTE *)(v28 + 9) = *(_BYTE *)(v29 + 9);
  return a1;
}

uint64_t sub_1000BD75C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v18;

  v6 = type metadata accessor for DynamicTypeSize(0);
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) <= 8uLL)
    v7 = 8;
  else
    v7 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= 0xFE)
    v10 = 254;
  else
    v10 = *(_DWORD *)(v8 + 84);
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v8 + 80);
  v12 = v7 + v11 + 1;
  if (v10 < a2)
  {
    v13 = ((((((*(_QWORD *)(v8 + 64) + (v12 & ~v11) + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
        + 10;
    if (v13 <= 3)
      v14 = ((a2 - v10 + 0xFFFF) >> (8 * v13)) + 1;
    else
      v14 = 2;
    if (v14 >= 0x10000)
      v15 = 4;
    else
      v15 = 2;
    if (v14 < 0x100)
      v15 = 1;
    if (v14 >= 2)
      v16 = v15;
    else
      v16 = 0;
    __asm { BR              X17 }
  }
  if (v9 > 0xFE)
    return (*(uint64_t (**)(uint64_t))(v8 + 48))((v12 + a1) & ~v11);
  v18 = *(unsigned __int8 *)(a1 + v7);
  if (v18 >= 2)
    return (v18 ^ 0xFF) + 1;
  else
    return 0;
}

void sub_1000BD8E0(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  size_t v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;

  v8 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for DynamicTypeSize(0) - 8) + 64);
  if (v8 <= 8)
    v8 = 8;
  v9 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v9 + 84) <= 0xFEu)
    v10 = 254;
  else
    v10 = *(_DWORD *)(v9 + 84);
  v11 = ((((((*(_QWORD *)(v9 + 64)
            + ((v8 + 1 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
            + 7) & 0xFFFFFFFFFFFFFFF8)
          + 31) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 10;
  if (v10 >= a3)
  {
    v14 = 0;
    if (v10 >= a2)
      goto LABEL_19;
  }
  else
  {
    if (v11 <= 3)
      v12 = ((a3 - v10 + 0xFFFF) >> (8 * v11)) + 1;
    else
      v12 = 2;
    if (v12 >= 0x10000)
      v13 = 4;
    else
      v13 = 2;
    if (v12 < 0x100)
      v13 = 1;
    if (v12 >= 2)
      v14 = v13;
    else
      v14 = 0;
    if (v10 >= a2)
LABEL_19:
      __asm { BR              X14 }
  }
  v15 = ~v10 + a2;
  bzero(a1, v11);
  if (v11 > 3)
    *a1 = v15;
  else
    *(_WORD *)a1 = v15;
  __asm { BR              X11 }
}

void sub_1000BDA40(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v2) = a1;
}

void sub_1000BDA48()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x1000BDA50);
}

void sub_1000BDA90(__int16 a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v1 + v2) = a1;
}

void sub_1000BDA98(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = a1;
}

uint64_t sub_1000BDAA0@<X0>(unsigned int a1@<W2>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_WORD *)(v6 + v8) = 0;
  if ((_DWORD)v7)
  {
    if (a1 > 0xFE)
    {
      return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 56))((v4 + v6) & v5, v7);
    }
    else
    {
      if (v7 > 0xFE)
        JUMPOUT(0x1000BDAACLL);
      *(_BYTE *)(v6 + a2) = -(char)v7;
    }
  }
  return result;
}

void sub_1000BDAFC()
{
  _BYTE *v0;
  char v1;

  *v0 = v1;
}

void sub_1000BDB04()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_1000BDB14()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

uint64_t type metadata accessor for DynamicTextAdaptiveStack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10001A6E8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DynamicTextAdaptiveStack);
}

void sub_1000BDB44(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_101499220)
  {
    v2 = type metadata accessor for DynamicTypeSize(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_101499220);
  }
}

uint64_t sub_1000BDB98(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_101067D64, 1);
}

uint64_t sub_1000BDBCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t WitnessTable;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[2];

  v3 = v2;
  v67 = a2;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = type metadata accessor for HStack(0, v5, v6);
  v56 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v58 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v57 = (uint64_t)&v55 - v10;
  v62 = v6;
  v63 = v5;
  v11 = type metadata accessor for VStack(0, v5, v6);
  v60 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v59 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v61 = (uint64_t)&v55 - v14;
  v15 = *(_QWORD *)(a1 - 8);
  __chkstk_darwin(v16);
  v18 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DynamicTypeSize(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v55 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v25 = (char *)&v55 - v24;
  v66 = v7;
  v65 = type metadata accessor for _ConditionalContent(0, v11, v7);
  v68 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v64 = (char *)&v55 - v26;
  sub_10001A6B4((uint64_t)v25);
  (*(void (**)(char *, _QWORD, uint64_t))(v20 + 104))(v22, enum case for DynamicTypeSize.accessibility1(_:), v19);
  v27 = sub_1000BE174();
  LOBYTE(v7) = dispatch thunk of static Comparable.< infix(_:_:)(v25, v22, v19, v27);
  v28 = *(void (**)(char *, uint64_t))(v20 + 8);
  v28(v22, v19);
  v28(v25, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v3, a1);
  if ((v7 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, a1);
    v32 = v66;
    v31 = v67;
    v34 = (uint64_t)v64;
    v33 = v65;
    goto LABEL_5;
  }
  v29 = (uint64_t)v58;
  v30 = v18[*(int *)(a1 + 56)];
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, a1);
  v32 = v66;
  v31 = v67;
  v34 = (uint64_t)v64;
  v33 = v65;
  if (v30 == 1)
  {
LABEL_5:
    v45 = __chkstk_darwin(*(_QWORD *)(v3 + *(int *)(a1 + 40)));
    *(&v55 - 4) = v46;
    *(&v55 - 3) = v47;
    *(&v55 - 2) = v3;
    v48 = (uint64_t)v59;
    VStack.init(alignment:spacing:content:)(v45);
    WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for VStack<A>, v11);
    v50 = v61;
    sub_100129028(v48, v11, v61);
    v41 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
    v41(v48, v11);
    sub_100128F38(v50, v11, v48);
    v51 = swift_getWitnessTable((const char *)&protocol conformance descriptor for HStack<A>, v32);
    sub_100043BFC(v48, v11, v32, WitnessTable, v51);
    v41(v48, v11);
    v43 = v50;
    v44 = v11;
    goto LABEL_6;
  }
  v35 = __chkstk_darwin(*(_QWORD *)(v3 + *(int *)(a1 + 48)));
  *(&v55 - 4) = v36;
  *(&v55 - 3) = v37;
  *(&v55 - 2) = v3;
  v38 = v29;
  HStack.init(alignment:spacing:content:)(v35);
  v39 = swift_getWitnessTable((const char *)&protocol conformance descriptor for HStack<A>, v32);
  v40 = v57;
  sub_100129028(v29, v32, v57);
  v41 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
  v41(v38, v32);
  sub_100128F38(v40, v32, v38);
  v42 = swift_getWitnessTable((const char *)&protocol conformance descriptor for VStack<A>, v11);
  sub_100043CC0(v38, v11, v32, v42, v39);
  v41(v38, v32);
  v43 = v40;
  v44 = v32;
LABEL_6:
  v41(v43, v44);
  v52 = swift_getWitnessTable((const char *)&protocol conformance descriptor for VStack<A>, v11);
  v53 = swift_getWitnessTable((const char *)&protocol conformance descriptor for HStack<A>, v32);
  v69[0] = v52;
  v69[1] = v53;
  swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v33, v69);
  sub_100128F38(v34, v33, v31);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 8))(v34, v33);
}

uint64_t sub_1000BE0C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v6 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DynamicTextAdaptiveStack(0, v9, v10, v11);
  sub_100129028(a1 + *(int *)(v12 + 36), a2, (uint64_t)v8);
  sub_100128F38((uint64_t)v8, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, a2);
}

unint64_t sub_1000BE174()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10149DA20;
  if (!qword_10149DA20)
  {
    v1 = type metadata accessor for DynamicTypeSize(255);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for DynamicTypeSize, v1);
    atomic_store(result, (unint64_t *)&qword_10149DA20);
  }
  return result;
}

uint64_t sub_1000BE1BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000BE0C4(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1000BE1D8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v1 = *a1;
  v2 = a1[1];
  v3 = type metadata accessor for VStack(255, *a1, v2);
  v4 = type metadata accessor for HStack(255, v1, v2);
  v5 = type metadata accessor for _ConditionalContent(255, v3, v4);
  v7[0] = swift_getWitnessTable((const char *)&protocol conformance descriptor for VStack<A>, v3);
  v7[1] = swift_getWitnessTable((const char *)&protocol conformance descriptor for HStack<A>, v4);
  return swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v5, v7);
}

uint64_t Session._maps_location(for:reverseGeocode:maxAge:)(uint64_t a1, uint64_t a2, char a3, double a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 + 40) = v4;
  *(double *)(v5 + 32) = a4;
  *(_BYTE *)(v5 + 80) = a3;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  return swift_task_switch(sub_1000BE2A4, 0, 0);
}

uint64_t sub_1000BE2A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = sub_100008B04(&qword_101499230);
  v3 = type metadata accessor for Handle(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v2, v6 + *(_QWORD *)(v4 + 72), v5 | 7);
  *(_QWORD *)(v0 + 48) = v7;
  *(_OWORD *)(v7 + 16) = xmmword_100E22F40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v7 + v6, v1, v3);
  v8 = swift_task_alloc(dword_10149923C);
  *(_QWORD *)(v0 + 56) = v8;
  *(_QWORD *)v8 = v0;
  *(_QWORD *)(v8 + 8) = sub_1000BE394;
  v9 = *(_QWORD *)(v0 + 32);
  v10 = *(_BYTE *)(v0 + 80);
  *(_QWORD *)(v8 + 144) = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v8 + 136) = v9;
  *(_BYTE *)(v8 + 192) = v10;
  *(_QWORD *)(v8 + 128) = v7;
  return swift_task_switch(sub_1000BE6B0, 0, 0);
}

uint64_t sub_1000BE394(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 56);
  v3[8] = a1;
  v3[9] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_1000BE4D0;
  }
  else
  {
    swift_bridgeObjectRelease(v3[6]);
    v5 = sub_1000BE408;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000BE408()
{
  uint64_t v0;
  unint64_t v1;
  char v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 64) + 16) && (v1 = sub_1000C1AF8(*(_QWORD *)(v0 + 24)), (v2 & 1) != 0))
  {
    v3 = v1;
    v4 = *(_QWORD *)(v0 + 16);
    v5 = *(_QWORD *)(*(_QWORD *)(v0 + 64) + 56);
    v6 = type metadata accessor for Location(0);
    v7 = *(_QWORD *)(v6 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16))(v4, v5 + *(_QWORD *)(v7 + 72) * v3, v6);
    v8 = 0;
  }
  else
  {
    v6 = type metadata accessor for Location(0);
    v7 = *(_QWORD *)(v6 - 8);
    v8 = 1;
  }
  v9 = *(_QWORD *)(v0 + 64);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v7 + 56))(*(_QWORD *)(v0 + 16), v8, 1, v6);
  swift_bridgeObjectRelease(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BE4D0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Session._maps_latestLocation(for:includeAddress:timeout:)(uint64_t a1, uint64_t a2, char a3, double a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 + 40) = v4;
  *(double *)(v5 + 32) = a4;
  *(_BYTE *)(v5 + 80) = a3;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  return swift_task_switch(sub_1000BE528, 0, 0);
}

uint64_t sub_1000BE528()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = sub_100008B04(&qword_101499230);
  v3 = type metadata accessor for Handle(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v2, v6 + *(_QWORD *)(v4 + 72), v5 | 7);
  *(_QWORD *)(v0 + 48) = v7;
  *(_OWORD *)(v7 + 16) = xmmword_100E22F40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v7 + v6, v1, v3);
  v8 = swift_task_alloc(dword_10149924C);
  *(_QWORD *)(v0 + 56) = v8;
  *(_QWORD *)v8 = v0;
  *(_QWORD *)(v8 + 8) = sub_1000BE618;
  v9 = *(_QWORD *)(v0 + 32);
  v10 = *(_BYTE *)(v0 + 80);
  *(_QWORD *)(v8 + 120) = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v8 + 112) = v9;
  *(_BYTE *)(v8 + 176) = v10;
  *(_QWORD *)(v8 + 104) = v7;
  return swift_task_switch(sub_1000BF364, 0, 0);
}

uint64_t sub_1000BE618(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 56);
  v3[8] = a1;
  v3[9] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_1000C3B3C;
  }
  else
  {
    swift_bridgeObjectRelease(v3[6]);
    v5 = sub_1000C3B44;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t Session._maps_locations(for:reverseGeocode:maxAge:)(uint64_t a1, char a2, double a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 144) = v3;
  *(double *)(v4 + 136) = a3;
  *(_BYTE *)(v4 + 192) = a2;
  *(_QWORD *)(v4 + 128) = a1;
  return swift_task_switch(sub_1000BE6B0, 0, 0);
}

uint64_t sub_1000BE6B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t (*v30)(uint64_t);
  uint64_t v32;

  if (*(double *)(v0 + 136) <= 0.0)
  {
    if (qword_101490D98 != -1)
      swift_once(&qword_101490D98, sub_1000BFF50);
    v15 = *(_QWORD *)(v0 + 128);
    v16 = type metadata accessor for Logger(0);
    sub_10000E918(v16, (uint64_t)qword_1014D48C8);
    v17 = swift_bridgeObjectRetain_n(v15, 2);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter();
    v20 = os_log_type_enabled(v18, v19);
    v21 = *(_QWORD *)(v0 + 128);
    if (v20)
    {
      v22 = swift_slowAlloc(22, -1);
      v23 = swift_slowAlloc(32, -1);
      v32 = v23;
      *(_DWORD *)v22 = 141558275;
      *(_QWORD *)(v0 + 16) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v22 + 4, v22 + 12);
      *(_WORD *)(v22 + 12) = 2081;
      v24 = type metadata accessor for Handle(0);
      v25 = swift_bridgeObjectRetain(v21);
      v26 = Array.description.getter(v25, v24);
      v28 = v27;
      swift_bridgeObjectRelease(v21);
      *(_QWORD *)(v0 + 24) = sub_1000C28FC(v26, v28, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v22 + 14, v22 + 22);
      swift_bridgeObjectRelease(v28);
      swift_bridgeObjectRelease_n(v21, 2);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Trying to fetch cached locations for handles %{private,mask.hash}s with max age <= 0; ignoring max age",
        (uint8_t *)v22,
        0x16u);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 128), 2);
    }

    v29 = (_QWORD *)swift_task_alloc(async function pointer to Session.locations(for:reverseGeocode:)[1]);
    v30 = sub_1000BF04C;
    *(_QWORD *)(v0 + 184) = v29;
  }
  else
  {
    if (qword_101490D98 != -1)
      swift_once(&qword_101490D98, sub_1000BFF50);
    v1 = *(_QWORD *)(v0 + 128);
    v2 = type metadata accessor for Logger(0);
    *(_QWORD *)(v0 + 152) = sub_10000E918(v2, (uint64_t)qword_1014D48C8);
    v3 = swift_bridgeObjectRetain_n(v1, 2);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = *(_QWORD *)(v0 + 136);
      v7 = *(_QWORD *)(v0 + 128);
      v8 = swift_slowAlloc(32, -1);
      v9 = swift_slowAlloc(32, -1);
      v32 = v9;
      *(_DWORD *)v8 = 141558531;
      *(_QWORD *)(v0 + 104) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v8 + 4, v8 + 12);
      *(_WORD *)(v8 + 12) = 2081;
      v10 = type metadata accessor for Handle(0);
      v11 = swift_bridgeObjectRetain(v7);
      v12 = Array.description.getter(v11, v10);
      v14 = v13;
      swift_bridgeObjectRelease(v7);
      *(_QWORD *)(v0 + 112) = sub_1000C28FC(v12, v14, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v8 + 14, v8 + 22);
      swift_bridgeObjectRelease(v14);
      swift_bridgeObjectRelease_n(v7, 2);
      *(_WORD *)(v8 + 22) = 2050;
      *(_QWORD *)(v0 + 120) = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v8 + 24, v8 + 32);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Fetching cached locations for handles: %{private,mask.hash}s with max age: %{public}f", (uint8_t *)v8, 0x20u);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 128), 2);
    }

    v29 = (_QWORD *)swift_task_alloc(async function pointer to Session.locations(for:reverseGeocode:)[1]);
    v30 = sub_1000BEAF0;
    *(_QWORD *)(v0 + 160) = v29;
  }
  *v29 = v0;
  v29[1] = v30;
  return Session.locations(for:reverseGeocode:)(*(_QWORD *)(v0 + 128), *(unsigned __int8 *)(v0 + 192));
}

uint64_t sub_1000BEAF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 160);
  *(_QWORD *)(v3 + 168) = a1;
  *(_QWORD *)(v3 + 176) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1000BF0A0;
  else
    v5 = sub_1000BEB5C;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000BEB5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  NSObject *log;
  uint64_t v42;
  os_log_type_t v43;
  os_log_type_t type;
  uint64_t typea;
  uint64_t v46[2];

  v1 = *(_QWORD *)(v0 + 168);
  swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 128), 2);
  v2 = swift_bridgeObjectRetain_n(v1, 2);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 168);
    v6 = *(_QWORD *)(v0 + 128);
    type = v4;
    v7 = swift_slowAlloc(32, -1);
    v42 = swift_slowAlloc(64, -1);
    *(_QWORD *)(v0 + 80) = 1752392040;
    v46[0] = v42;
    *(_DWORD *)v7 = 141558531;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v7 + 4, v7 + 12);
    *(_WORD *)(v7 + 12) = 2081;
    v8 = type metadata accessor for Handle(0);
    v9 = swift_bridgeObjectRetain(v6);
    log = v3;
    v10 = Array.description.getter(v9, v8);
    v12 = v11;
    swift_bridgeObjectRelease(v6);
    *(_QWORD *)(v0 + 88) = sub_1000C28FC(v10, v12, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease_n(v6, 2);
    *(_WORD *)(v7 + 22) = 2081;
    v13 = type metadata accessor for Location(0);
    v14 = sub_10000BC84(&qword_101499250, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
    v15 = swift_bridgeObjectRetain(v5);
    v16 = Dictionary.description.getter(v15, v8, v13, v14);
    v18 = v17;
    swift_bridgeObjectRelease(v5);
    *(_QWORD *)(v0 + 96) = sub_1000C28FC(v16, v18, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v7 + 24, v7 + 32);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease_n(v5, 2);
    v3 = log;
    _os_log_impl((void *)&_mh_execute_header, log, type, "Successfully fetched cached locations for handles: %{private,mask.hash}s : %{private}s", (uint8_t *)v7, 0x20u);
    swift_arrayDestroy(v42, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 168);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 128), 2);
    swift_bridgeObjectRelease_n(v19, 2);
  }

  v20 = *(_QWORD *)(v0 + 168);
  v21 = *(_QWORD *)(v0 + 128);
  v22 = sub_1000C2ED8(v20, *(double *)(v0 + 136));
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRetain_n(v21, 2);
  v23 = swift_retain_n(v22, 2);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.info.getter();
  v26 = os_log_type_enabled(v24, v25);
  v27 = *(_QWORD *)(v0 + 128);
  if (v26)
  {
    v28 = swift_slowAlloc(32, -1);
    typea = swift_slowAlloc(64, -1);
    v46[0] = typea;
    *(_DWORD *)v28 = 141558531;
    *(_QWORD *)(v0 + 56) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v28 + 4, v28 + 12);
    *(_WORD *)(v28 + 12) = 2081;
    v29 = type metadata accessor for Handle(0);
    v30 = swift_bridgeObjectRetain(v27);
    v31 = Array.description.getter(v30, v29);
    v43 = v25;
    v33 = v32;
    swift_bridgeObjectRelease(v27);
    *(_QWORD *)(v0 + 64) = sub_1000C28FC(v31, v33, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v28 + 14, v28 + 22);
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease_n(v27, 2);
    *(_WORD *)(v28 + 22) = 2081;
    v34 = type metadata accessor for Location(0);
    v35 = sub_10000BC84(&qword_101499250, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
    swift_retain(v22);
    v37 = Dictionary.description.getter(v36, v29, v34, v35);
    v39 = v38;
    swift_release(v22);
    *(_QWORD *)(v0 + 72) = sub_1000C28FC(v37, v39, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v28 + 24, v28 + 32);
    swift_bridgeObjectRelease(v39);
    swift_release_n(v22, 2);
    _os_log_impl((void *)&_mh_execute_header, v24, v43, "Filtered fetched cached locations for handles: %{private,mask.hash}s : %{private}s", (uint8_t *)v28, 0x20u);
    swift_arrayDestroy(typea, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(typea, -1, -1);
    swift_slowDealloc(v28, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 128), 2);
    swift_release_n(v22, 2);
  }

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v22);
}

uint64_t sub_1000BF04C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(*v2 + 184);
  v5 = *v2;
  v6 = swift_task_dealloc(v4);
  if (!v1)
    v6 = a1;
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_1000BF0A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v19;
  NSObject *log;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 128);
  swift_bridgeObjectRetain(v2);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v2);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 176);
    v7 = *(_QWORD *)(v0 + 128);
    log = v4;
    v8 = swift_slowAlloc(32, -1);
    v19 = (uint64_t *)swift_slowAlloc(8, -1);
    v21 = swift_slowAlloc(32, -1);
    v22 = v21;
    *(_QWORD *)(v0 + 32) = 1752392040;
    *(_DWORD *)v8 = 141558531;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2081;
    v9 = type metadata accessor for Handle(0);
    v10 = swift_bridgeObjectRetain(v7);
    v11 = Array.description.getter(v10, v9);
    v13 = v12;
    swift_bridgeObjectRelease(v7);
    *(_QWORD *)(v0 + 40) = sub_1000C28FC(v11, v13, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease_n(v7, 2);
    *(_WORD *)(v8 + 22) = 2114;
    swift_errorRetain(v6);
    v14 = _swift_stdlib_bridgeErrorToNSError(v6);
    *(_QWORD *)(v0 + 48) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v8 + 24, v8 + 32);
    *v19 = v14;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, log, v5, "Got error fetching cached locations for handles: %{private,mask.hash}s : %{public}@", (uint8_t *)v8, 0x20u);
    v15 = sub_100008B04((uint64_t *)&unk_101494470);
    swift_arrayDestroy(v19, 1, v15);
    swift_slowDealloc(v19, -1, -1);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {
    v17 = *(_QWORD *)(v0 + 176);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 128), 2);
    swift_errorRelease(v17);
    swift_errorRelease(v17);

  }
  swift_willThrow(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Session._maps_latestLocations(for:includeAddress:timeout:)(uint64_t a1, char a2, double a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 120) = v3;
  *(double *)(v4 + 112) = a3;
  *(_BYTE *)(v4 + 176) = a2;
  *(_QWORD *)(v4 + 104) = a1;
  return swift_task_switch(sub_1000BF364, 0, 0);
}

uint64_t sub_1000BF364()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  double v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v39;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v41;

  if (*(double *)(v0 + 112) <= 0.0)
  {
    if (qword_101490D98 != -1)
      swift_once(&qword_101490D98, sub_1000BFF50);
    v15 = *(_QWORD *)(v0 + 104);
    v16 = type metadata accessor for Logger(0);
    sub_10000E918(v16, (uint64_t)qword_1014D48C8);
    v17 = swift_bridgeObjectRetain_n(v15, 2);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter();
    v20 = os_log_type_enabled(v18, v19);
    v21 = *(_QWORD *)(v0 + 104);
    if (v20)
    {
      v22 = swift_slowAlloc(22, -1);
      v23 = swift_slowAlloc(32, -1);
      v41 = v23;
      *(_DWORD *)v22 = 141558275;
      *(_QWORD *)(v0 + 16) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v22 + 4, v22 + 12);
      *(_WORD *)(v22 + 12) = 2081;
      v24 = type metadata accessor for Handle(0);
      v25 = swift_bridgeObjectRetain(v21);
      v26 = Array.description.getter(v25, v24);
      v28 = v27;
      swift_bridgeObjectRelease(v21);
      *(_QWORD *)(v0 + 24) = sub_1000C28FC(v26, v28, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v22 + 14, v22 + 22);
      swift_bridgeObjectRelease(v28);
      swift_bridgeObjectRelease_n(v21, 2);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Trying to fetch latest locations for handles %{private,mask.hash}s with timeout <= 0; ignoring timeout",
        (uint8_t *)v22,
        0x16u);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 104), 2);
    }

    v39 = (_QWORD *)swift_task_alloc(async function pointer to Session.latestLocations(for:includeAddress:)[1]);
    *(_QWORD *)(v0 + 168) = v39;
    *v39 = v0;
    v39[1] = sub_1000BFB58;
    return Session.latestLocations(for:includeAddress:)(*(_QWORD *)(v0 + 104), *(unsigned __int8 *)(v0 + 176));
  }
  else
  {
    if (qword_101490D98 != -1)
      swift_once(&qword_101490D98, sub_1000BFF50);
    v1 = *(_QWORD *)(v0 + 104);
    v2 = type metadata accessor for Logger(0);
    *(_QWORD *)(v0 + 128) = sub_10000E918(v2, (uint64_t)qword_1014D48C8);
    v3 = swift_bridgeObjectRetain_n(v1, 2);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = *(_QWORD *)(v0 + 112);
      v7 = *(_QWORD *)(v0 + 104);
      v8 = swift_slowAlloc(32, -1);
      v9 = swift_slowAlloc(32, -1);
      v41 = v9;
      *(_DWORD *)v8 = 141558531;
      *(_QWORD *)(v0 + 80) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v8 + 4, v8 + 12);
      *(_WORD *)(v8 + 12) = 2081;
      v10 = type metadata accessor for Handle(0);
      v11 = swift_bridgeObjectRetain(v7);
      v12 = Array.description.getter(v11, v10);
      v14 = v13;
      swift_bridgeObjectRelease(v7);
      *(_QWORD *)(v0 + 88) = sub_1000C28FC(v12, v14, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v8 + 14, v8 + 22);
      swift_bridgeObjectRelease(v14);
      swift_bridgeObjectRelease_n(v7, 2);
      *(_WORD *)(v8 + 22) = 2050;
      *(_QWORD *)(v0 + 96) = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v8 + 24, v8 + 32);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Fetching latest locations for handles %{private,mask.hash}s with timeout %{public}f", (uint8_t *)v8, 0x20u);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 104), 2);
    }

    v29 = *(_QWORD *)(v0 + 120);
    v30 = *(double *)(v0 + 112);
    v31 = *(_BYTE *)(v0 + 176);
    v32 = *(_QWORD *)(v0 + 104);
    v33 = swift_allocObject(&unk_1011A1520, 33, 7);
    *(_QWORD *)(v0 + 136) = v33;
    *(_QWORD *)(v33 + 16) = v29;
    *(_QWORD *)(v33 + 24) = v32;
    *(_BYTE *)(v33 + 32) = v31;
    swift_bridgeObjectRetain(v32);
    swift_retain(v29);
    v34 = static Duration.seconds(_:)(v30);
    v36 = v35;
    v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_101499268 + dword_101499268);
    v37 = (_QWORD *)swift_task_alloc(unk_10149926C);
    *(_QWORD *)(v0 + 144) = v37;
    *v37 = v0;
    v37[1] = sub_1000BF844;
    return v40(v34, v36, (uint64_t)&unk_101499260, v33);
  }
}

uint64_t sub_1000BF844(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 144);
  v3[19] = a1;
  v3[20] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_1000BFBAC;
  }
  else
  {
    swift_release(v3[17]);
    v5 = sub_1000BF8B8;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000BF8B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  os_log_type_t type;
  uint64_t v22;
  NSObject *log;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 152);
  swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 104), 2);
  v2 = swift_bridgeObjectRetain_n(v1, 2);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 152);
    v6 = *(_QWORD *)(v0 + 104);
    log = v3;
    v7 = swift_slowAlloc(32, -1);
    v22 = swift_slowAlloc(64, -1);
    *(_QWORD *)(v0 + 56) = 1752392040;
    v24 = v22;
    *(_DWORD *)v7 = 141558531;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v7 + 4, v7 + 12);
    *(_WORD *)(v7 + 12) = 2081;
    v8 = type metadata accessor for Handle(0);
    v9 = swift_bridgeObjectRetain(v6);
    v10 = Array.description.getter(v9, v8);
    type = v4;
    v12 = v11;
    swift_bridgeObjectRelease(v6);
    *(_QWORD *)(v0 + 64) = sub_1000C28FC(v10, v12, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease_n(v6, 2);
    *(_WORD *)(v7 + 22) = 2081;
    v13 = type metadata accessor for Location(0);
    v14 = sub_10000BC84(&qword_101499250, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
    v15 = swift_bridgeObjectRetain(v5);
    v16 = Dictionary.description.getter(v15, v8, v13, v14);
    v18 = v17;
    swift_bridgeObjectRelease(v5);
    *(_QWORD *)(v0 + 72) = sub_1000C28FC(v16, v18, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v7 + 24, v7 + 32);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease_n(v5, 2);
    _os_log_impl((void *)&_mh_execute_header, log, type, "Successfully fetched latest locations for handles: %{private,mask.hash}s : %{private}s", (uint8_t *)v7, 0x20u);
    swift_arrayDestroy(v22, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {
    v19 = *(_QWORD *)(v0 + 152);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 104), 2);
    swift_bridgeObjectRelease_n(v19, 2);

  }
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 152));
}

uint64_t sub_1000BFB58(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(*v2 + 168);
  v5 = *v2;
  v6 = swift_task_dealloc(v4);
  if (!v1)
    v6 = a1;
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_1000BFBAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v18;
  NSObject *log;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 104);
  swift_release(*(_QWORD *)(v0 + 136));
  swift_bridgeObjectRetain(v2);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v2);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 160);
    v7 = *(_QWORD *)(v0 + 104);
    log = v4;
    v8 = swift_slowAlloc(32, -1);
    v18 = (uint64_t *)swift_slowAlloc(8, -1);
    v20 = swift_slowAlloc(32, -1);
    v21 = v20;
    *(_QWORD *)(v0 + 32) = 1752392040;
    *(_DWORD *)v8 = 141558531;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2081;
    v9 = type metadata accessor for Handle(0);
    v10 = swift_bridgeObjectRetain(v7);
    v11 = Array.description.getter(v10, v9);
    v13 = v12;
    swift_bridgeObjectRelease(v7);
    *(_QWORD *)(v0 + 40) = sub_1000C28FC(v11, v13, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease_n(v7, 2);
    *(_WORD *)(v8 + 22) = 2114;
    swift_errorRetain(v6);
    v14 = _swift_stdlib_bridgeErrorToNSError(v6);
    *(_QWORD *)(v0 + 48) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v8 + 24, v8 + 32);
    *v18 = v14;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, log, v5, "Got error fetching latest locations for handles: %{private,mask.hash}s : %{public}@", (uint8_t *)v8, 0x20u);
    v15 = sub_100008B04((uint64_t *)&unk_101494470);
    swift_arrayDestroy(v18, 1, v15);
    swift_slowDealloc(v18, -1, -1);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {
    v16 = *(_QWORD *)(v0 + 160);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 104), 2);
    swift_errorRelease(v16);
    swift_errorRelease(v16);

  }
  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BFE50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v7;

  *(_QWORD *)(v4 + 16) = a1;
  v7 = (_QWORD *)swift_task_alloc(async function pointer to Session.latestLocations(for:includeAddress:)[1]);
  *(_QWORD *)(v4 + 24) = v7;
  *v7 = v4;
  v7[1] = sub_1000BFEBC;
  return Session.latestLocations(for:includeAddress:)(a3, a4);
}

uint64_t sub_1000BFEBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 24);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (v1)
    return (*(uint64_t (**)(void))(v6 + 8))();
  *(_QWORD *)(v4 + 32) = a1;
  return swift_task_switch(sub_1000BFF38, 0, 0);
}

uint64_t sub_1000BFF38()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BFF50()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000E930(v0, qword_1014D48C8);
  sub_10000E918(v0, (uint64_t)qword_1014D48C8);
  return Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xEE007370614D2E65, 0xD000000000000018, 0x8000000100E47A00);
}

uint64_t sub_1000BFFD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  v5 = type metadata accessor for ContinuousClock.Instant(0);
  v4[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[8] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[9] = swift_task_alloc(v7);
  v4[10] = swift_task_alloc(v7);
  v8 = type metadata accessor for ContinuousClock(0);
  v4[11] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[12] = v9;
  v4[13] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000C006C, 0, 0);
}

uint64_t sub_1000C006C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  __int128 v14;

  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 32);
  v14 = *(_OWORD *)(v0 + 40);
  v8 = ContinuousClock.init()();
  ContinuousClock.now.getter(v8);
  ContinuousClock.Instant.advanced(by:)(v7, v6);
  v9 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  *(_QWORD *)(v0 + 112) = v9;
  v9(v3, v4);
  v10 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 120) = v10;
  *(_OWORD *)(v10 + 16) = v14;
  *(_QWORD *)(v10 + 32) = v2;
  *(_QWORD *)(v10 + 40) = v1;
  v11 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 128) = v11;
  v12 = sub_100008B04(&qword_1014992B0);
  *v11 = v0;
  v11[1] = sub_1000C018C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD00000000000001CLL, 0x8000000100E47800, sub_1000C3320, v10, v12);
}

uint64_t sub_1000C018C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000C0280;
  }
  else
  {
    swift_task_dealloc(v2[15]);
    v2[18] = v2[2];
    v4 = sub_1000C0200;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000C0200()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 80);
  (*(void (**)(uint64_t, _QWORD))(v0 + 112))(v4, *(_QWORD *)(v0 + 56));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 144));
}

uint64_t sub_1000C0280()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 72);
  v7 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  v1(v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc(v2);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C0310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = type metadata accessor for ContinuousClock.Instant(0);
  v5[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[8] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[9] = swift_task_alloc(v8);
  v5[10] = swift_task_alloc(v8);
  v9 = type metadata accessor for ContinuousClock(0);
  v5[11] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[12] = v10;
  v5[13] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000C03B0, 0, 0);
}

uint64_t sub_1000C03B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  _QWORD *v11;
  __int128 v13;

  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 32);
  v13 = *(_OWORD *)(v0 + 40);
  v8 = ContinuousClock.init()();
  ContinuousClock.now.getter(v8);
  ContinuousClock.Instant.advanced(by:)(v7, v6);
  v9 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  *(_QWORD *)(v0 + 112) = v9;
  v9(v3, v4);
  v10 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 120) = v10;
  *(_OWORD *)(v10 + 16) = v13;
  *(_QWORD *)(v10 + 32) = v2;
  *(_QWORD *)(v10 + 40) = v1;
  v11 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 128) = v11;
  *v11 = v0;
  v11[1] = sub_1000C04C8;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(*(_QWORD *)(v0 + 16), 0, 0, 0xD00000000000001CLL, 0x8000000100E47800, sub_1000C30FC, v10, (char *)&type metadata for () + 8);
}

uint64_t sub_1000C04C8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 128);
  *(_QWORD *)(*v1 + 136) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000C0280;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 120));
    v4 = sub_1000C0534;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000C0534()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 80);
  (*(void (**)(uint64_t, _QWORD))(v0 + 112))(v4, *(_QWORD *)(v0 + 56));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C05B0(uint64_t a1, void (*a2)(uint64_t, char *, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void (*v24)(uint64_t, char *, uint64_t);
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t, uint64_t);
  char *v43;
  void (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  void (*v50)(uint64_t, char *, uint64_t);
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;

  v55 = a4;
  v56 = a5;
  v45 = a1;
  v46 = a3;
  v50 = a2;
  v54 = type metadata accessor for ContinuousClock(0);
  v6 = *(_QWORD *)(v54 - 8);
  v57 = *(_QWORD *)(v6 + 64);
  v58 = v6;
  __chkstk_darwin(v54);
  v60 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for ContinuousClock.Instant(0);
  v8 = *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64);
  v52 = *(_QWORD *)(v59 - 8);
  v53 = v8;
  __chkstk_darwin(v59);
  v51 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008B04(&qword_1014992B8);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v47 = v12;
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100008B04(&qword_101494070);
  __chkstk_darwin(v14);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for TimeoutActor();
  v18 = swift_allocObject(v17, 113, 15);
  swift_defaultActor_initialize();
  *(_BYTE *)(v18 + 112) = 0;
  v19 = type metadata accessor for TaskPriority(0);
  v42 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56);
  v42(v16, 1, 1, v19);
  v44 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v44(v13, a1, v10);
  v20 = *(unsigned __int8 *)(v11 + 80);
  v21 = (v20 + 56) & ~v20;
  v22 = (_QWORD *)swift_allocObject(&unk_1011A1598, v21 + v12, v20 | 7);
  v22[2] = 0;
  v22[3] = 0;
  v23 = v46;
  v22[4] = v50;
  v22[5] = v23;
  v22[6] = v18;
  v24 = *(void (**)(uint64_t, char *, uint64_t))(v11 + 32);
  v49 = v18;
  v50 = v24;
  v43 = v13;
  v25 = v10;
  v41 = v10;
  v24((uint64_t)v22 + v21, v13, v10);
  swift_retain(v23);
  swift_retain(v18);
  v48 = v16;
  v46 = sub_1001B0C08((uint64_t)v16, (uint64_t)&unk_1014992C8, (uint64_t)v22);
  v42(v16, 1, 1, v19);
  v26 = v51;
  v27 = v52;
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v51, v55, v59);
  v28 = v58;
  v29 = v54;
  (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v60, v56, v54);
  v44(v13, v45, v25);
  v30 = *(unsigned __int8 *)(v27 + 80);
  v31 = (v30 + 32) & ~v30;
  v32 = *(unsigned __int8 *)(v28 + 80);
  v33 = (v53 + v32 + v31) & ~v32;
  v34 = (v57 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
  v35 = (v34 + 15) & 0xFFFFFFFFFFFFFFF8;
  v36 = (v20 + v35 + 8) & ~v20;
  v37 = swift_allocObject(&unk_1011A15C0, v36 + v47, v20 | v30 | v32 | 7);
  *(_QWORD *)(v37 + 16) = 0;
  *(_QWORD *)(v37 + 24) = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(v37 + v31, v26, v59);
  (*(void (**)(uint64_t, char *, uint64_t))(v58 + 32))(v37 + v33, v60, v29);
  *(_QWORD *)(v37 + v34) = v49;
  *(_QWORD *)(v37 + v35) = v46;
  v50(v37 + v36, v43, v41);
  v38 = sub_1001B0C08((uint64_t)v48, (uint64_t)&unk_1014992D8, v37);
  return swift_release(v38);
}

uint64_t sub_1000C0914(uint64_t a1, void (*a2)(uint64_t, char *, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void (*v24)(uint64_t, char *, uint64_t);
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t, uint64_t);
  char *v42;
  void (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  void (*v49)(uint64_t, char *, uint64_t);
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;

  v54 = a4;
  v55 = a5;
  v44 = a1;
  v45 = a3;
  v49 = a2;
  v53 = type metadata accessor for ContinuousClock(0);
  v6 = *(_QWORD *)(v53 - 8);
  v56 = *(_QWORD *)(v6 + 64);
  v57 = v6;
  __chkstk_darwin(v53);
  v59 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = type metadata accessor for ContinuousClock.Instant(0);
  v8 = *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64);
  v51 = *(_QWORD *)(v58 - 8);
  v52 = v8;
  __chkstk_darwin(v58);
  v50 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008B04(&qword_1014A0C00);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v46 = v12;
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100008B04(&qword_101494070);
  __chkstk_darwin(v14);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for TimeoutActor();
  v18 = swift_allocObject(v17, 113, 15);
  swift_defaultActor_initialize();
  *(_BYTE *)(v18 + 112) = 0;
  v19 = type metadata accessor for TaskPriority(0);
  v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56);
  v41(v16, 1, 1, v19);
  v43 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v43(v13, a1, v10);
  v20 = *(unsigned __int8 *)(v11 + 80);
  v21 = (v20 + 56) & ~v20;
  v22 = (_QWORD *)swift_allocObject(&unk_1011A1548, v21 + v12, v20 | 7);
  v22[2] = 0;
  v22[3] = 0;
  v23 = v45;
  v22[4] = v49;
  v22[5] = v23;
  v22[6] = v18;
  v24 = *(void (**)(uint64_t, char *, uint64_t))(v11 + 32);
  v48 = v18;
  v49 = v24;
  v42 = v13;
  v25 = v10;
  v40 = v10;
  v24((uint64_t)v22 + v21, v13, v10);
  swift_retain();
  swift_retain();
  v47 = v16;
  v45 = sub_1001B0C08((uint64_t)v16, (uint64_t)&unk_101499288, (uint64_t)v22);
  v41(v16, 1, 1, v19);
  v26 = v50;
  v27 = v51;
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v50, v54, v58);
  v28 = v57;
  v29 = v53;
  (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v59, v55, v53);
  v43(v13, v44, v25);
  v30 = *(unsigned __int8 *)(v27 + 80);
  v31 = (v30 + 32) & ~v30;
  v32 = *(unsigned __int8 *)(v28 + 80);
  v33 = (v52 + v32 + v31) & ~v32;
  v34 = (v56 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
  v35 = (v34 + 15) & 0xFFFFFFFFFFFFFFF8;
  v36 = (v20 + v35 + 8) & ~v20;
  v37 = swift_allocObject(&unk_1011A1570, v36 + v46, v20 | v30 | v32 | 7);
  *(_QWORD *)(v37 + 16) = 0;
  *(_QWORD *)(v37 + 24) = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(v37 + v31, v26, v58);
  (*(void (**)(uint64_t, char *, uint64_t))(v57 + 32))(v37 + v33, v59, v29);
  *(_QWORD *)(v37 + v34) = v48;
  *(_QWORD *)(v37 + v35) = v45;
  v49(v37 + v36, v42, v40);
  sub_1001B0C08((uint64_t)v47, (uint64_t)&unk_101499298, v37);
  return swift_release();
}

uint64_t sub_1000C0C78(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *);

  v7[5] = a6;
  v7[6] = a7;
  v10 = (uint64_t (*)(_QWORD *))((char *)a4 + *a4);
  v8 = (_QWORD *)swift_task_alloc(a4[1]);
  v7[7] = v8;
  *v8 = v7;
  v8[1] = sub_1000C0CE0;
  return v10(v7 + 2);
}

uint64_t sub_1000C0CE0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 56);
  *(_QWORD *)(*v1 + 64) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000C0D7C;
    v5 = 0;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 40);
    v4 = sub_1000C0D48;
  }
  return swift_task_switch(v4, v5, 0);
}

uint64_t sub_1000C0D48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(v0 + 40);
  if ((*(_BYTE *)(v1 + 112) & 1) != 0)
  {
    v2 = sub_1000C0E14;
  }
  else
  {
    *(_BYTE *)(v1 + 112) = 1;
    v2 = sub_1000C0DC4;
  }
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000C0D7C()
{
  uint64_t v0;

  return swift_task_switch(sub_1000C0D90, *(_QWORD *)(v0 + 40), 0);
}

uint64_t sub_1000C0D90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(v0 + 40);
  if ((*(_BYTE *)(v1 + 112) & 1) != 0)
  {
    v2 = sub_1000C0E94;
  }
  else
  {
    *(_BYTE *)(v1 + 112) = 1;
    v2 = sub_1000C0E44;
  }
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000C0DC4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 32) = *(_QWORD *)(v0 + 16);
  v1 = sub_100008B04(&qword_1014992B8);
  CheckedContinuation.resume(returning:)(v0 + 32, v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C0E14()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C0E44()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 24) = *(_QWORD *)(v0 + 64);
  v1 = sub_100008B04(&qword_1014992B8);
  CheckedContinuation.resume(throwing:)(v0 + 24, v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C0E94()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C0EC4(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t (*v10)(void);

  v7[3] = a6;
  v7[4] = a7;
  v10 = (uint64_t (*)(void))((char *)a4 + *a4);
  v8 = (_QWORD *)swift_task_alloc(a4[1]);
  v7[5] = v8;
  *v8 = v7;
  v8[1] = sub_1000C0F1C;
  return v10();
}

uint64_t sub_1000C0F1C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 40);
  *(_QWORD *)(*v1 + 48) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000C0FBC;
    v5 = 0;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 24);
    v4 = sub_1000C0F84;
  }
  return swift_task_switch(v4, v5, 0);
}

uint64_t sub_1000C0F84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(v0 + 24);
  if (*(_BYTE *)(v1 + 112) == 1)
  {
    v2 = sub_1000C1008;
  }
  else
  {
    *(_BYTE *)(v1 + 112) = 1;
    v2 = sub_1000C1010;
  }
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000C0FBC()
{
  uint64_t v0;

  return swift_task_switch(sub_1000C0FD0, *(_QWORD *)(v0 + 24), 0);
}

uint64_t sub_1000C0FD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(v0 + 24);
  if (*(_BYTE *)(v1 + 112) == 1)
  {
    v2 = sub_1000C1050;
  }
  else
  {
    *(_BYTE *)(v1 + 112) = 1;
    v2 = sub_1000C1080;
  }
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000C1008()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C1010()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_100008B04(&qword_1014A0C00);
  CheckedContinuation.resume(returning:)(v1, v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C1050()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C1080()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 48);
  v1 = sub_100008B04(&qword_1014A0C00);
  CheckedContinuation.resume(throwing:)(v0 + 16, v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C10D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v8 + 64) = a7;
  *(_QWORD *)(v8 + 72) = a8;
  *(_QWORD *)(v8 + 56) = a6;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_BYTE *)(v8 + 32) = 1;
  v11 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep<A>(until:tolerance:clock:)[1]);
  *(_QWORD *)(v8 + 80) = v11;
  v12 = type metadata accessor for ContinuousClock(0);
  v13 = sub_10000BC84((unint64_t *)&qword_1014992A0, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock, (uint64_t)&protocol conformance descriptor for ContinuousClock);
  *v11 = v8;
  v11[1] = sub_1000C118C;
  return static Task<>.sleep<A>(until:tolerance:clock:)(a4, v8 + 16, a5, v12, v13);
}

uint64_t sub_1000C118C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  *(_QWORD *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000C1224;
    v5 = 0;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 56);
    v4 = sub_1000C11F4;
  }
  return swift_task_switch(v4, v5, 0);
}

uint64_t sub_1000C11F4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  if ((*(_BYTE *)(v1 + 112) & 1) != 0)
    return (*(uint64_t (**)(void))(v0 + 8))();
  *(_BYTE *)(v1 + 112) = 1;
  return swift_task_switch(sub_1000C126C, 0, 0);
}

uint64_t sub_1000C1224()
{
  uint64_t v0;

  return swift_task_switch(sub_1000C1238, *(_QWORD *)(v0 + 56), 0);
}

uint64_t sub_1000C1238()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(v0 + 56);
  if ((*(_BYTE *)(v1 + 112) & 1) != 0)
  {
    v2 = sub_1000C136C;
  }
  else
  {
    *(_BYTE *)(v1 + 112) = 1;
    v2 = sub_1000C12F4;
  }
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000C126C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  Task.cancel()();
  v1 = sub_1000C32DC();
  *(_QWORD *)(v0 + 48) = swift_allocError(&type metadata for TimeoutError, v1, 0, 0);
  v2 = sub_100008B04(&qword_1014992B8);
  CheckedContinuation.resume(throwing:)(v0 + 48, v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C12F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 88);
  Task.cancel()();
  *(_QWORD *)(v0 + 40) = v1;
  v2 = sub_100008B04(&qword_1014992B8);
  CheckedContinuation.resume(throwing:)(v0 + 40, v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C136C()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C139C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v8 + 64) = a7;
  *(_QWORD *)(v8 + 72) = a8;
  *(_QWORD *)(v8 + 56) = a6;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_BYTE *)(v8 + 32) = 1;
  v11 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep<A>(until:tolerance:clock:)[1]);
  *(_QWORD *)(v8 + 80) = v11;
  v12 = type metadata accessor for ContinuousClock(0);
  v13 = sub_10000BC84((unint64_t *)&qword_1014992A0, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock, (uint64_t)&protocol conformance descriptor for ContinuousClock);
  *v11 = v8;
  v11[1] = sub_1000C1458;
  return static Task<>.sleep<A>(until:tolerance:clock:)(a4, v8 + 16, a5, v12, v13);
}

uint64_t sub_1000C1458()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  *(_QWORD *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000C14F0;
    v5 = 0;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 56);
    v4 = sub_1000C14C0;
  }
  return swift_task_switch(v4, v5, 0);
}

uint64_t sub_1000C14C0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  if ((*(_BYTE *)(v1 + 112) & 1) != 0)
    return (*(uint64_t (**)(void))(v0 + 8))();
  *(_BYTE *)(v1 + 112) = 1;
  return swift_task_switch(sub_1000C153C, 0, 0);
}

uint64_t sub_1000C14F0()
{
  uint64_t v0;

  return swift_task_switch(sub_1000C1504, *(_QWORD *)(v0 + 56), 0);
}

uint64_t sub_1000C1504()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(v0 + 56);
  if (*(_BYTE *)(v1 + 112) == 1)
  {
    v2 = sub_1000C3B48;
  }
  else
  {
    *(_BYTE *)(v1 + 112) = 1;
    v2 = sub_1000C15C4;
  }
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000C153C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  Task.cancel()();
  v1 = sub_1000C32DC();
  *(_QWORD *)(v0 + 48) = swift_allocError(&type metadata for TimeoutError, v1, 0, 0);
  v2 = sub_100008B04(&qword_1014A0C00);
  CheckedContinuation.resume(throwing:)(v0 + 48, v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C15C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 88);
  Task.cancel()();
  *(_QWORD *)(v0 + 40) = v1;
  v2 = sub_100008B04(&qword_1014A0C00);
  CheckedContinuation.resume(throwing:)(v0 + 40, v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_1000C163C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = static Hasher._hash(seed:_:)(*(_QWORD *)(v1 + 40), a1);
  return sub_1000C1F58(a1, v3);
}

unint64_t sub_1000C1674(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  Swift::UInt v9;
  Swift::Int v10;
  _QWORD v12[9];

  Hasher.init(_seed:)(v12, *(_QWORD *)(v4 + 40));
  NSObject.hash(into:)(v12);
  if (a4)
  {
    if (a4 == 1)
    {
      Hasher._combine(_:)(4uLL);
      swift_bridgeObjectRetain(a3);
      String.hash(into:)(v12, a2, a3);
      sub_100084C88(a2, a3, 1u);
    }
    else
    {
      if (a2 | a3)
      {
        if (a2 ^ 1 | a3)
          v9 = 2;
        else
          v9 = 1;
      }
      else
      {
        v9 = 0;
      }
      Hasher._combine(_:)(v9);
    }
  }
  else
  {
    Hasher._combine(_:)(3uLL);
    swift_bridgeObjectRetain(a3);
    String.hash(into:)(v12, a2, a3);
    sub_100084C88(a2, a3, 0);
  }
  v10 = Hasher._finalize()();
  return sub_1000C1BD4(a1, a2, a3, a4, v10);
}

unint64_t sub_1000C17A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_1000C1E78(a1, a2, v5);
}

unint64_t sub_1000C1804(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1000C1FF4(a1, v4);
}

unint64_t sub_1000C1834(char a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  unint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v2 = v1;
  Hasher.init(_seed:)(v9, *(_QWORD *)(v2 + 40));
  v4 = a1 & 1;
  if ((a1 & 1) != 0)
    v5 = 0x74736574736166;
  else
    v5 = 0x74736574726F6873;
  if ((a1 & 1) != 0)
    v6 = 0xE700000000000000;
  else
    v6 = 0xE800000000000000;
  String.hash(into:)(v9, v5, v6);
  swift_bridgeObjectRelease(v6);
  v7 = Hasher._finalize()();
  return sub_1000C20B8(v4, v7);
}

unint64_t sub_1000C18C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v3 = *(_QWORD *)(v1 + 40);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  Hasher.init(_seed:)(v9, v3);
  String.hash(into:)(v9, v4, v6);
  v7 = Hasher._finalize()();
  swift_bridgeObjectRelease(v6);
  return sub_1000C21FC(a1, v7);
}

unint64_t sub_1000C1948(Swift::UInt32 a1)
{
  uint64_t v1;
  Swift::Int v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, *(_QWORD *)(v1 + 40));
  Hasher._combine(_:)(a1);
  v3 = Hasher._finalize()();
  return sub_1000C2370(a1, v3);
}

unint64_t sub_1000C19A0(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v2 = v1;
  v4 = 0xEA00000000006475;
  Hasher.init(_seed:)(v8, *(_QWORD *)(v2 + 40));
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x6F4E656D756C6F76;
    else
      v5 = 0x6F4C656D756C6F76;
    if (a1 == 1)
      v4 = 0xEC0000006C616D72;
  }
  else
  {
    v4 = 0xEA00000000007466;
    v5 = 0x6F53656D756C6F76;
  }
  String.hash(into:)(v8, v5, v4);
  swift_bridgeObjectRelease(v4);
  v6 = Hasher._finalize()();
  return sub_1000C240C(a1, v6);
}

unint64_t sub_1000C1A60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1000C25C4(a1, v4, (unint64_t *)&unk_10149BA50, &off_101196DA8);
}

unint64_t sub_1000C1AAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1000C25C4(a1, v4, &qword_101499270, UIKeyCommand_ptr);
}

unint64_t sub_1000C1AF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for Handle(0);
  v6 = sub_10000BC84(&qword_101499250, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_1000C26D4(a1, v7);
}

unint64_t sub_1000C1B64(char a1)
{
  uint64_t v1;
  Swift::Int v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, *(_QWORD *)(v1 + 40));
  String.hash(into:)(v5, *(_QWORD *)&aDriving_3[8 * a1], 0xE700000000000000);
  swift_bridgeObjectRelease(0xE700000000000000);
  v3 = Hasher._finalize()();
  return sub_1000C2814(a1, v3);
}

unint64_t sub_1000C1BD4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  char v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  char v24;
  BOOL v26;
  char v27;
  BOOL v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;

  v6 = -1 << *(_BYTE *)(v5 + 32);
  v7 = a5 & ~v6;
  if (((*(_QWORD *)(v5 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
  {
    v32 = ~v6;
    sub_10000E4BC(0, (unint64_t *)&qword_101492E60, NSObject_ptr);
    v11 = a2 != 2;
    v12 = a2 != 1;
    if (a3)
    {
      v11 = 1;
      v12 = 1;
    }
    v13 = a4 == 2;
    v31 = a3;
    if (a4 != 2)
      v11 = 1;
    v28 = v11;
    v14 = a4 != 2 || v12;
    if (a3 | a2)
      v13 = 0;
    v26 = v13;
    v27 = v14;
    v30 = a4;
    do
    {
      v16 = *(_QWORD *)(v5 + 48) + 32 * v7;
      v17 = *(_QWORD *)(v16 + 8);
      v18 = *(_QWORD *)(v16 + 16);
      v15 = *(unsigned __int8 *)(v16 + 24);
      v19 = *(id *)v16;
      sub_10000BE70(v17, v18, v15);
      if ((static NSObject.== infix(_:_:)(v19, a1) & 1) == 0)
        goto LABEL_13;
      if (v15)
      {
        if (v15 == 1)
        {
          if (a4 != 1)
          {
            LOBYTE(v15) = 1;
LABEL_13:

            sub_100084C88(v17, v18, v15);
            goto LABEL_14;
          }
          v22 = v17 == a2;
          v20 = a2;
          v21 = v31;
          v22 = v22 && v18 == v31;
          if (v22)
            goto LABEL_41;
          v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v20, v31, 0);

          sub_100084C88(v17, v18, 1u);
          a2 = v20;
          a4 = v30;
          if ((v29 & 1) != 0)
            return v7;
        }
        else if (v17 | v18)
        {
          if (v17 ^ 1 | v18)
          {

            if (!v28)
              return v7;
          }
          else
          {

            if ((v27 & 1) == 0)
              return v7;
          }
        }
        else
        {

          if (v26)
            return v7;
        }
      }
      else
      {
        if (a4)
        {
          LOBYTE(v15) = 0;
          goto LABEL_13;
        }
        v22 = v17 == a2;
        v20 = a2;
        v21 = v31;
        if (v22 && v18 == v31)
        {
LABEL_41:

          sub_100084C88(v20, v21, v15);
          return v7;
        }
        v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v20, v31, 0);

        sub_100084C88(v17, v18, 0);
        a2 = v20;
        a4 = v30;
        if ((v24 & 1) != 0)
          return v7;
      }
LABEL_14:
      v7 = (v7 + 1) & v32;
    }
    while (((*(_QWORD *)(v5 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
  }
  return v7;
}

unint64_t sub_1000C1E78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1000C1F58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_1000C1FF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_100035DEC(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_100012C48((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_1000C20B8(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v11;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = ~v3;
    if ((a1 & 1) != 0)
      v6 = 0x74736574736166;
    else
      v6 = 0x74736574726F6873;
    if ((a1 & 1) != 0)
      v7 = 0xE700000000000000;
    else
      v7 = 0xE800000000000000;
    while (1)
    {
      v8 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) ? 0x74736574736166 : 0x74736574726F6873;
      v9 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) ? 0xE700000000000000 : 0xE800000000000000;
      if (v8 == v6 && v9 == v7)
        break;
      v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v6, v7, 0);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v7);
      if ((v11 & 1) == 0)
      {
        v4 = (v4 + 1) & v5;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
    swift_bridgeObjectRelease_n(v7, 2);
  }
  return v4;
}

unint64_t sub_1000C21FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v17;
          v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_1000C2370(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_1000C240C(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  char v12;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    while (1)
    {
      v7 = 0xEA00000000007466;
      if (*(_BYTE *)(*(_QWORD *)(v2 + 48) + v4))
      {
        if (*(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) == 1)
        {
          v8 = 0x6F4E656D756C6F76;
          v9 = 0xEC0000006C616D72;
          v10 = a1;
          if (!a1)
            goto LABEL_17;
        }
        else
        {
          v8 = 0x6F4C656D756C6F76;
          v9 = 0xEA00000000006475;
          v10 = a1;
          if (!a1)
          {
LABEL_17:
            v11 = 0x6F53656D756C6F76;
            if (v8 != 0x6F53656D756C6F76)
              goto LABEL_19;
            goto LABEL_18;
          }
        }
      }
      else
      {
        v8 = 0x6F53656D756C6F76;
        v9 = 0xEA00000000007466;
        v10 = a1;
        if (!a1)
          goto LABEL_17;
      }
      if (v10 == 1)
        v11 = 0x6F4E656D756C6F76;
      else
        v11 = 0x6F4C656D756C6F76;
      if (v10 == 1)
        v7 = 0xEC0000006C616D72;
      else
        v7 = 0xEA00000000006475;
      if (v8 != v11)
        goto LABEL_19;
LABEL_18:
      if (v9 == v7)
      {
        swift_bridgeObjectRelease_n(v9, 2);
        return v4;
      }
LABEL_19:
      v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v11, v7, 0);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v7);
      if ((v12 & 1) == 0)
      {
        v4 = (v4 + 1) & v6;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
  }
  return v4;
}

unint64_t sub_1000C25C4(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t i;
  id v9;
  char v10;
  uint64_t v11;
  id v12;
  char v13;

  v5 = v4 + 64;
  v6 = -1 << *(_BYTE *)(v4 + 32);
  i = a2 & ~v6;
  if (((*(_QWORD *)(v4 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_10000E4BC(0, a3, a4);
    v9 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * i);
    v10 = static NSObject.== infix(_:_:)(v9, a1);

    if ((v10 & 1) == 0)
    {
      v11 = ~v6;
      for (i = (i + 1) & v11; ((*(_QWORD *)(v5 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v11)
      {
        v12 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * i);
        v13 = static NSObject.== infix(_:_:)(v12, a1);

        if ((v13 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_1000C26D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v18 = a1;
  v5 = type metadata accessor for Handle(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = sub_10000BC84(&qword_1014992E8, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
      v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_1000C2814(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = ~v3;
    v6 = *(_QWORD *)&aDriving_3[8 * a1];
    while (1)
    {
      v7 = *(_QWORD *)&aDriving_3[8 * *(char *)(*(_QWORD *)(v2 + 48) + v4)];
      if (v7 == v6)
        break;
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, 0xE700000000000000, v6, 0xE700000000000000, 0);
      swift_bridgeObjectRelease_n(0xE700000000000000, 2);
      if ((v8 & 1) == 0)
      {
        v4 = (v4 + 1) & v5;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
    swift_bridgeObjectRelease_n(0xE700000000000000, 2);
  }
  return v4;
}

uint64_t sub_1000C28FC(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_1000C29CC(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_100011E20((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_100011E20((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_10000BEAC(v12);
  return v7;
}

uint64_t sub_1000C29CC(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_1000C2B84(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_1000C2B84(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_1000C2C18(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1000C2D8C(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1000C2D8C(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_1000C2C18(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_1000F2840(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_1000C2D8C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008B04((uint64_t *)&unk_10149A570);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000C2ED8(uint64_t isStackAllocationSafe, double a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v13;

  v4 = isStackAllocationSafe;
  v5 = *(_BYTE *)(isStackAllocationSafe + 32);
  v6 = v5 & 0x3F;
  v7 = (1 << v5) + 63;
  v8 = v7 >> 6;
  v9 = 8 * (v7 >> 6);
  if (v6 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v7 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    v10 = sub_1000C36B8((unint64_t *)((char *)&v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0)), v8, v4, a2);
    if (v2)
      swift_willThrow(v10);
    else
      return v10;
  }
  else
  {
    v11 = (void *)swift_slowAlloc(v9, -1);
    bzero(v11, v9);
    v4 = sub_1000C36B8((unint64_t *)v11, v8, v4, a2);
    swift_slowDealloc(v11, -1, -1);
  }
  return v4;
}

uint64_t sub_1000C303C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 33, 7);
}

uint64_t sub_1000C3068(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(unsigned __int8 *)(v1 + 32);
  v6 = (_QWORD *)swift_task_alloc(dword_10149925C);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_10000C0E0;
  v6[2] = a1;
  v7 = (_QWORD *)swift_task_alloc(async function pointer to Session.latestLocations(for:includeAddress:)[1]);
  v6[3] = v7;
  *v7 = v6;
  v7[1] = sub_1000BFEBC;
  return Session.latestLocations(for:includeAddress:)(v4, v5);
}

uint64_t sub_1000C30FC(uint64_t a1)
{
  uint64_t v1;

  return sub_1000C0914(a1, *(void (**)(uint64_t, char *, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1000C3108()
{
  return sub_1000C3338(&qword_1014A0C00);
}

uint64_t sub_1000C3114()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t (*v9)(void);

  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_100008B04(&qword_1014A0C00) - 8) + 80);
  v3 = *(int **)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = v0 + ((v2 + 56) & ~v2);
  v6 = (_QWORD *)swift_task_alloc(dword_101499284);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_10000DD08;
  v6[3] = v4;
  v6[4] = v5;
  v9 = (uint64_t (*)(void))((char *)v3 + *v3);
  v7 = (_QWORD *)swift_task_alloc(v3[1]);
  v6[5] = v7;
  *v7 = v6;
  v7[1] = sub_1000C0F1C;
  return v9();
}

uint64_t sub_1000C31C4()
{
  return sub_1000C3480(&qword_1014A0C00);
}

uint64_t sub_1000C31D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v4 = *(_QWORD *)(type metadata accessor for ContinuousClock.Instant(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(type metadata accessor for ContinuousClock(0) - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(unsigned __int8 *)(*(_QWORD *)(sub_100008B04(&qword_1014A0C00) - 8) + 80);
  v12 = v11 + v10 + 8;
  v13 = *(_QWORD *)(v1 + 16);
  v14 = *(_QWORD *)(v1 + 24);
  v15 = v1 + v5;
  v16 = *(_QWORD *)(v1 + v9);
  v17 = v1 + v8;
  v18 = *(_QWORD *)(v1 + v10);
  v19 = v1 + (v12 & ~v11);
  v20 = (_QWORD *)swift_task_alloc(dword_101499294);
  *(_QWORD *)(v2 + 16) = v20;
  *v20 = v2;
  v20[1] = sub_10000DD08;
  return sub_1000C139C(a1, v13, v14, v15, v17, v16, v18, v19);
}

unint64_t sub_1000C32DC()
{
  unint64_t result;

  result = qword_1014992A8;
  if (!qword_1014992A8)
  {
    result = swift_getWitnessTable("1l7", &type metadata for TimeoutError);
    atomic_store(result, (unint64_t *)&qword_1014992A8);
  }
  return result;
}

uint64_t sub_1000C3320(uint64_t a1)
{
  uint64_t v1;

  return sub_1000C05B0(a1, *(void (**)(uint64_t, char *, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1000C332C()
{
  return sub_1000C3338(&qword_1014992B8);
}

uint64_t sub_1000C3338(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = sub_100008B04(a1);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 56) & ~v4;
  v6 = v5 + *(_QWORD *)(v3 + 64);
  v7 = v4 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v1 + 16));
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return swift_deallocObject(v1, v6, v7);
}

uint64_t sub_1000C33B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t (*v9)(_QWORD *);

  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_100008B04(&qword_1014992B8) - 8) + 80);
  v3 = *(int **)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = v0 + ((v2 + 56) & ~v2);
  v6 = (_QWORD *)swift_task_alloc(dword_1014992C4);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_10000DD08;
  v6[5] = v4;
  v6[6] = v5;
  v9 = (uint64_t (*)(_QWORD *))((char *)v3 + *v3);
  v7 = (_QWORD *)swift_task_alloc(v3[1]);
  v6[7] = v7;
  *v7 = v6;
  v7[1] = sub_1000C0CE0;
  return v9(v6 + 2);
}

uint64_t sub_1000C3474()
{
  return sub_1000C3480(&qword_1014992B8);
}

uint64_t sub_1000C3480(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = type metadata accessor for ContinuousClock.Instant(0);
  v3 = *(_QWORD *)(v20 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = *(_QWORD *)(v3 + 64);
  v19 = type metadata accessor for ContinuousClock(0);
  v7 = *(_QWORD *)(v19 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v6 + v8) & ~v8;
  v16 = (((*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = sub_100008B04(a1);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v12 + v16 + 8) & ~v12;
  v17 = v13 + *(_QWORD *)(v11 + 64);
  v18 = v10;
  v14 = v4 | v8 | v12 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v1 + 16));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v20);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1 + v9, v19);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v1 + v13, v18);
  return swift_deallocObject(v1, v17, v14);
}

uint64_t sub_1000C35AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v4 = *(_QWORD *)(type metadata accessor for ContinuousClock.Instant(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(type metadata accessor for ContinuousClock(0) - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(unsigned __int8 *)(*(_QWORD *)(sub_100008B04(&qword_1014992B8) - 8) + 80);
  v12 = v11 + v10 + 8;
  v13 = *(_QWORD *)(v1 + 16);
  v14 = *(_QWORD *)(v1 + 24);
  v15 = v1 + v5;
  v16 = *(_QWORD *)(v1 + v9);
  v17 = v1 + v8;
  v18 = *(_QWORD *)(v1 + v10);
  v19 = v1 + (v12 & ~v11);
  v20 = (_QWORD *)swift_task_alloc(dword_1014992D4);
  *(_QWORD *)(v2 + 16) = v20;
  *v20 = v2;
  v20[1] = sub_10000C0E0;
  return sub_1000C10D0(a1, v13, v14, v15, v17, v16, v18, v19);
}

uint64_t sub_1000C36B8(unint64_t *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  char *v24;
  void (*v25)(char *, unint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  double v42;
  void (*v43)(char *, uint64_t);
  void (*v44)(char *, uint64_t);
  int64_t v45;
  unint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  int64_t v68;
  char *v69;
  _QWORD *v70;
  _QWORD *v71;

  v51 = a2;
  v52 = a1;
  v6 = type metadata accessor for Date(0);
  v63 = *(_QWORD *)(v6 - 8);
  v64 = v6;
  __chkstk_darwin(v6);
  v62 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_100008B04(&qword_1014992E0);
  v8 = __chkstk_darwin(v61);
  v60 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v59 = (char *)&v50 - v10;
  v58 = type metadata accessor for Location(0);
  v71 = *(_QWORD **)(v58 - 8);
  __chkstk_darwin(v58);
  v57 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for Handle(0);
  v70 = *(_QWORD **)(v56 - 8);
  result = __chkstk_darwin(v56);
  v69 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = 0;
  v66 = (_QWORD *)a3;
  v15 = *(_QWORD *)(a3 + 64);
  v53 = 0;
  v54 = a3 + 64;
  v16 = 1 << *(_BYTE *)(a3 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & v15;
  v55 = (unint64_t)(v16 + 63) >> 6;
  v19 = v56;
  v21 = v58;
  v20 = (uint64_t)v59;
  while (1)
  {
    if (v18)
    {
      v67 = (v18 - 1) & v18;
      v68 = v14;
      v22 = __clz(__rbit64(v18)) | (v14 << 6);
      goto LABEL_5;
    }
    v45 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v45 >= v55)
      return sub_10020197C(v52, v51, v53, v66);
    v46 = *(_QWORD *)(v54 + 8 * v45);
    v47 = v14 + 1;
    if (!v46)
    {
      v47 = v14 + 2;
      if (v14 + 2 >= v55)
        return sub_10020197C(v52, v51, v53, v66);
      v46 = *(_QWORD *)(v54 + 8 * v47);
      if (!v46)
      {
        v47 = v14 + 3;
        if (v14 + 3 >= v55)
          return sub_10020197C(v52, v51, v53, v66);
        v46 = *(_QWORD *)(v54 + 8 * v47);
        if (!v46)
          break;
      }
    }
LABEL_20:
    v67 = (v46 - 1) & v46;
    v68 = v47;
    v22 = __clz(__rbit64(v46)) + (v47 << 6);
LABEL_5:
    v23 = v66;
    v24 = v69;
    v25 = (void (*)(char *, unint64_t, uint64_t))v70[2];
    v25(v69, v66[6] + v70[9] * v22, v19);
    v26 = v23[7];
    v27 = v71[9];
    v65 = v22;
    v28 = v26 + v27 * v22;
    v29 = (void (*)(char *, uint64_t, uint64_t))v71[2];
    v30 = v57;
    v29(v57, v28, v21);
    v31 = v61;
    v32 = v20 + *(int *)(v61 + 48);
    v25((char *)v20, (unint64_t)v24, v19);
    v33 = v30;
    v34 = ((uint64_t (*)(uint64_t, char *, uint64_t))v29)(v32, v30, v21);
    v35 = v62;
    v36 = Date.init()(v34);
    v37 = Date.timeIntervalSince1970.getter(v36);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v35, v64);
    v38 = *(int *)(v31 + 48);
    v39 = v60;
    v40 = &v60[v38];
    v25(v60, v20, v19);
    v41 = ((uint64_t (*)(char *, uint64_t, uint64_t))v29)(v40, v32, v21);
    v42 = Location.timestamp.getter(v41);
    sub_1000C3AFC(v20);
    v43 = (void (*)(char *, uint64_t))v71[1];
    v43(v40, v21);
    v44 = (void (*)(char *, uint64_t))v70[1];
    v44(v39, v19);
    v43(v33, v21);
    result = ((uint64_t (*)(char *, uint64_t))v44)(v69, v19);
    v18 = v67;
    v14 = v68;
    if (v37 - v42 <= a4)
    {
      *(unint64_t *)((char *)v52 + ((v65 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v65;
      if (__OFADD__(v53++, 1))
      {
        __break(1u);
        return sub_10020197C(v52, v51, v53, v66);
      }
    }
  }
  v48 = v14 + 4;
  if (v14 + 4 >= v55)
    return sub_10020197C(v52, v51, v53, v66);
  v46 = *(_QWORD *)(v54 + 8 * v48);
  if (v46)
  {
    v47 = v14 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    v47 = v48 + 1;
    if (__OFADD__(v48, 1))
      break;
    if (v47 >= v55)
      return sub_10020197C(v52, v51, v53, v66);
    v46 = *(_QWORD *)(v54 + 8 * v47);
    ++v48;
    if (v46)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1000C3AFC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008B04(&qword_1014992E0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_1000C3B4C()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;

  v1 = objc_msgSend(v0, "_type");
  if (v1 == (id)5)
  {
    v6 = objc_msgSend(v0, "publisherResult");
    v3 = v6;
    if (v6)
    {
      v4 = objc_msgSend(v6, "publisher");

      if (v4)
      {
        v5 = objc_msgSend(v4, "identifier");
        goto LABEL_9;
      }
      return 0;
    }
  }
  else
  {
    if (v1 != (id)4)
    {
      v7 = objc_msgSend(v0, "mapItem");
      v3 = v7;
      if (!v7)
        return v3;
      v8 = objc_msgSend(v7, "_geoMapItem");

      if (v8)
      {
        v3 = objc_msgSend(v8, "_identifier");
        swift_unknownObjectRelease(v8);
        return v3;
      }
      return 0;
    }
    v2 = objc_msgSend(v0, "collectionResult");
    v3 = v2;
    if (v2)
    {
      v4 = objc_msgSend(v2, "collection");

      if (v4)
      {
        v5 = objc_msgSend(v4, "collectionIdentifier");
LABEL_9:
        v3 = v5;

        return v3;
      }
      return 0;
    }
  }
  return v3;
}

uint64_t *sub_1000C3CBC@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  BOOL v3;

  v2 = *result;
  v3 = (unint64_t)*result > 2;
  if ((unint64_t)*result > 2)
    v2 = 0;
  *(_QWORD *)a2 = v2;
  *(_BYTE *)(a2 + 8) = v3;
  return result;
}

void sub_1000C3F4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void **v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  Class isa;
  id v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  void *Strong;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void **aBlock;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, uint64_t, uint64_t);
  void *v51;
  uint64_t (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  _QWORD v54[2];

  v1 = v0;
  v2 = type metadata accessor for CharacterSet(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_searchString + 8);
  if (v6)
  {
    v7 = *(void ***)(v0 + OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_searchString);
    swift_bridgeObjectRetain(v6);
    if (String.count.getter(v7, v6) >= 1)
    {
      aBlock = v7;
      v49 = v6;
      static CharacterSet.whitespaces.getter();
      v8 = sub_10006C008();
      v9 = StringProtocol.trimmingCharacters(in:)(v5, &type metadata for String, v8);
      v11 = v10;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      aBlock = (void **)v9;
      v49 = v11;
      v54[0] = 32;
      v54[1] = 0xE100000000000000;
      v12 = StringProtocol.components<A>(separatedBy:)(v54, &type metadata for String, &type metadata for String, v8, v8);
      swift_bridgeObjectRelease(v6);
      swift_bridgeObjectRelease(v11);
      v13 = *(_QWORD *)(v12 + 16);
      if (v13)
      {
        v47 = v1;
        v54[0] = _swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)(v13);
        v14 = (void *)objc_opt_self(NSPredicate);
        v46 = v12;
        v15 = (uint64_t *)(v12 + 40);
        do
        {
          v17 = *(v15 - 1);
          v16 = *v15;
          v18 = swift_allocObject(&unk_1011A1658, 32, 7);
          *(_QWORD *)(v18 + 16) = v17;
          *(_QWORD *)(v18 + 24) = v16;
          v52 = sub_1000C6478;
          v53 = v18;
          aBlock = _NSConcreteStackBlock;
          v49 = 1107296256;
          v50 = sub_1000C4538;
          v51 = &unk_1011A1670;
          v19 = _Block_copy(&aBlock);
          swift_bridgeObjectRetain(v16);
          v20 = objc_msgSend(v14, "predicateWithBlock:", v19);
          _Block_release(v19);
          v21 = swift_release();
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v21);
          v22 = *(_QWORD *)(v54[0] + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v22);
          v23 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v20);
          specialized ContiguousArray._endMutation()(v23);
          v15 += 2;
          --v13;
        }
        while (v13);
        v24 = (_QWORD *)v54[0];
        swift_bridgeObjectRelease(v46);
        v1 = v47;
      }
      else
      {
        swift_bridgeObjectRelease(v12);
        v24 = _swiftEmptyArrayStorage;
      }
      sub_10000E4BC(0, (unint64_t *)&unk_101499500, NSPredicate_ptr);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v24);
      v32 = objc_msgSend((id)objc_opt_self(NSCompoundPredicate), "andPredicateWithSubpredicates:", isa);

      v33 = *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_suggestedNetworks);
      v34 = v32;
      v35 = swift_bridgeObjectRetain(v33);
      v36 = sub_1000C5F04(v35, v34);
      swift_bridgeObjectRelease(v33);

      v37 = *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_filteredSuggestedNetworks);
      *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_filteredSuggestedNetworks) = v36;
      swift_bridgeObjectRelease(v37);
      v38 = *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_otherNetworks);
      v39 = v34;
      v40 = swift_bridgeObjectRetain(v38);
      v41 = sub_1000C5F04(v40, v39);
      swift_bridgeObjectRelease(v38);

      v42 = *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_filteredOtherNetworks);
      *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_filteredOtherNetworks) = v41;
      swift_bridgeObjectRelease(v42);
      Strong = (void *)swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_delegate);
      if (Strong)
      {
        v44 = Strong;
        objc_msgSend(Strong, "reloadData");
        swift_unknownObjectRelease(v44);
      }

      return;
    }
    swift_bridgeObjectRelease(v6);
  }
  v25 = *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_suggestedNetworks);
  v26 = *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_filteredSuggestedNetworks);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_filteredSuggestedNetworks) = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  v27 = *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_otherNetworks);
  v28 = *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_filteredOtherNetworks);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_filteredOtherNetworks) = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  v29 = (void *)swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_delegate);
  if (v29)
  {
    v30 = v29;
    objc_msgSend(v29, "reloadData");
    swift_unknownObjectRelease(v30);
  }
}

uint64_t sub_1000C437C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  _QWORD v24[4];

  v7 = sub_100008B04(&qword_1014958A0);
  __chkstk_darwin(v7);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000110D4(a1, (uint64_t)v24);
  if (!v24[3])
  {
    sub_100010CC4((uint64_t)v24, (uint64_t *)&unk_101493350);
    return 0;
  }
  v10 = sub_100008B04((uint64_t *)&unk_101492C00);
  if ((swift_dynamicCast(v23, v24, (char *)&type metadata for Any + 8, v10, 6) & 1) == 0)
    return 0;
  v11 = v23[0];
  v12 = *(_QWORD *)(v23[0] + 16);
  if (!v12)
  {
    v19 = v23[0];
LABEL_10:
    swift_bridgeObjectRelease(v19);
    return 0;
  }
  v13 = type metadata accessor for Locale(0);
  v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
  v22 = v11;
  v15 = (uint64_t *)(v11 + 40);
  while (1)
  {
    v16 = *v15;
    v24[0] = *(v15 - 1);
    v24[1] = v16;
    v23[0] = a3;
    v23[1] = a4;
    v14(v9, 1, 1, v13);
    v17 = sub_10006C008();
    swift_bridgeObjectRetain(v16);
    StringProtocol.range<A>(of:options:range:locale:)(v23, 1, 0, 0, 1, v9, &type metadata for String, &type metadata for String, v17, v17);
    LOBYTE(v17) = v18;
    sub_100010CC4((uint64_t)v9, &qword_1014958A0);
    swift_bridgeObjectRelease(v16);
    if ((v17 & 1) == 0)
      break;
    v15 += 2;
    if (!--v12)
    {
      v19 = v22;
      goto LABEL_10;
    }
  }
  swift_bridgeObjectRelease(v22);
  return 1;
}

uint64_t sub_1000C4538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v5)(__int128 *, uint64_t);
  char v6;
  __int128 v8;
  __int128 v9;

  v3 = a3;
  v5 = *(uint64_t (**)(__int128 *, uint64_t))(a1 + 32);
  if (!a2)
  {
    v8 = 0u;
    v9 = 0u;
    if (!a3)
      goto LABEL_4;
    goto LABEL_3;
  }
  *((_QWORD *)&v9 + 1) = swift_getObjectType(a2);
  *(_QWORD *)&v8 = a2;
  if (v3)
LABEL_3:
    v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v3, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
LABEL_4:
  swift_retain();
  swift_unknownObjectRetain(a2);
  v6 = v5(&v8, v3);
  swift_release();
  swift_bridgeObjectRelease(v3);
  sub_100010CC4((uint64_t)&v8, (uint64_t *)&unk_101493350);
  return v6 & 1;
}

unint64_t sub_1000C4600()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t result;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v1 = v0;
  v2 = IndexPath.section.getter();
  if (v2 != 1)
  {
    if (v2)
      return 0;
    result = IndexPath.row.getter();
    v4 = result;
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_filteredSuggestedNetworks);
    if ((v5 & 0xC000000000000001) != 0)
    {
LABEL_13:
      swift_bridgeObjectRetain(v5);
      v6 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v5);
      swift_bridgeObjectRelease(v5);
      return (unint64_t)v6;
    }
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
      goto LABEL_15;
    }
    if (result < *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_10:
      v6 = *(void **)(v5 + 8 * v4 + 32);
      v7 = v6;
      return (unint64_t)v6;
    }
    __break(1u);
  }
  result = IndexPath.row.getter();
  v4 = result;
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_filteredOtherNetworks);
  if ((v5 & 0xC000000000000001) != 0)
    goto LABEL_13;
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (result < *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_10;
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_1000C46E4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char **v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v4 = *(_QWORD *)(v2 + OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_filteredSuggestedNetworks);
  if ((unint64_t)v4 >> 62)
    goto LABEL_26;
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v4);
  v6 = &selRef_getDroppedPinWithCompletion_;
  if (v5)
    goto LABEL_3;
  do
  {
LABEL_10:
    swift_bridgeObjectRelease(v4);
    v2 = *(_QWORD *)(v2 + OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_filteredOtherNetworks);
    if ((unint64_t)v2 >> 62)
    {
      if (v2 < 0)
        v24 = v2;
      else
        v24 = v2 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v2);
      v4 = _CocoaArrayWrapper.endIndex.getter(v24);
      if (!v4)
      {
LABEL_19:
        swift_bridgeObjectRelease(v2);
        v17 = type metadata accessor for IndexPath(0);
        v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
        v19 = a2;
        v20 = 1;
        return v18(v19, v20, 1, v17);
      }
    }
    else
    {
      v4 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v2);
      if (!v4)
        goto LABEL_19;
    }
    v12 = 0;
    while (1)
    {
      v13 = (v2 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v2)
          : *(id *)(v2 + 8 * v12 + 32);
      v14 = v13;
      v15 = v12 + 1;
      if (__OFADD__(v12, 1))
        break;
      v16 = objc_msgSend(a1, v6[64]);
      if (v16 == objc_msgSend(v14, v6[64]))
      {
        swift_bridgeObjectRelease(v2);
        v21 = a2;
        IndexPath.init(row:section:)(v12, 1);

        goto LABEL_22;
      }

      ++v12;
      if (v15 == v4)
        goto LABEL_19;
    }
LABEL_25:
    __break(1u);
LABEL_26:
    if (v4 < 0)
      v23 = v4;
    else
      v23 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v5 = _CocoaArrayWrapper.endIndex.getter(v23);
    v6 = &selRef_getDroppedPinWithCompletion_;
  }
  while (!v5);
LABEL_3:
  v7 = 0;
  while (1)
  {
    if ((v4 & 0xC000000000000001) != 0)
      v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v4);
    else
      v8 = *(id *)(v4 + 8 * v7 + 32);
    v9 = v8;
    v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    v11 = objc_msgSend(a1, v6[64]);
    if (v11 == objc_msgSend(v9, v6[64]))
      break;

    ++v7;
    if (v10 == v5)
      goto LABEL_10;
  }
  swift_bridgeObjectRelease(v4);
  v21 = a2;
  IndexPath.init(row:section:)(v7, 0);

LABEL_22:
  v17 = type metadata accessor for IndexPath(0);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v19 = v21;
  v20 = 0;
  return v18(v19, v20, 1, v17);
}

id sub_1000C4A44()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ChargingNetworksDataSource();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ChargingNetworksDataSource()
{
  return objc_opt_self(_TtC4Maps26ChargingNetworksDataSource);
}

uint64_t sub_1000C4B48(uint64_t a1, uint64_t a2)
{
  void *v2;
  NSBundle v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v10;

  if (a2)
  {
    if (a2 == 1 && (uint64_t)objc_msgSend(v2, "tableView:numberOfRowsInSection:", a1, 1) > 0)
    {
      if (qword_101490ED0 != -1)
        swift_once(&qword_101490ED0, sub_10011833C);
      v3.super.isa = (Class)qword_1014D4B80;
      v4 = 0xD00000000000001BLL;
      v5 = 0xD000000000000026;
      v10 = 0x8000000100E47B60;
      v6 = 0x8000000100E47B40;
      v7 = 0x74654E2065726F4DLL;
      v8 = 0xED0000736B726F77;
      return NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v4, (Swift::String_optional)0, v3, *(Swift::String *)&v7, *(Swift::String *)&v5)._countAndFlagsBits;
    }
  }
  else if ((uint64_t)objc_msgSend(v2, "tableView:numberOfRowsInSection:", a1, 0) >= 1)
  {
    if (qword_101490ED0 != -1)
      swift_once(&qword_101490ED0, sub_10011833C);
    v3.super.isa = (Class)qword_1014D4B80;
    v5 = 0xD00000000000002BLL;
    v10 = 0x8000000100E47BB0;
    v6 = 0x8000000100E47B90;
    v4 = 0xD000000000000017;
    v7 = 0x6574736567677553;
    v8 = 0xE900000000000064;
    return NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v4, (Swift::String_optional)0, v3, *(Swift::String *)&v7, *(Swift::String *)&v5)._countAndFlagsBits;
  }
  return 0;
}

uint64_t sub_1000C4D50(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void (*v18)(_QWORD *, _QWORD);
  id v19;
  id v20;
  void (*v21)(_QWORD *, _QWORD);
  id v22;
  void (*v23)(_QWORD *, _QWORD);
  id v24;
  void (*v25)(_QWORD *, _QWORD);
  _QWORD *v26;
  uint64_t result;
  _QWORD v29[5];

  v3 = v2;
  v6 = type metadata accessor for UIListContentConfiguration(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend(objc_allocWithZone((Class)UITableViewHeaderFooterView), "init");
  static UIListContentConfiguration.prominentInsetGroupedHeader()();
  v11 = objc_msgSend(v3, "tableView:titleForHeaderInSection:", a1, a2);
  if (v11)
  {
    v12 = v11;
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v15 = v14;

  }
  else
  {
    v13 = 0;
    v15 = 0;
  }
  UIListContentConfiguration.text.setter(v13, v15);
  v16 = *(_QWORD *)&v3[OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_context];
  if (v16 != 2)
  {
    if (v16 != 1)
      goto LABEL_10;
    v17 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
    v18 = (void (*)(_QWORD *, _QWORD))UIListContentConfiguration.textProperties.modify(v29);
    UIListContentConfiguration.TextProperties.color.setter(v17);
    v18(v29, 0);
    v19 = objc_msgSend((id)objc_opt_self(UIFont), "_preferredFontForTextStyle:weight:", UIFontTextStyleSubheadline, UIFontWeightBold);
    if (v19)
    {
LABEL_12:
      v24 = v19;
      v25 = (void (*)(_QWORD *, _QWORD))UIListContentConfiguration.textProperties.modify(v29);
      UIListContentConfiguration.TextProperties.font.setter(v24);
      v25(v29, 0);
      v29[3] = v6;
      v29[4] = &protocol witness table for UIListContentConfiguration;
      v26 = sub_100011DCC(v29);
      (*(void (**)(_QWORD *, char *, uint64_t))(v7 + 16))(v26, v9, v6);
      UITableViewHeaderFooterView.contentConfiguration.setter(v29);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      return (uint64_t)v10;
    }
    __break(1u);
  }
  UIListContentConfiguration.directionalLayoutMargins.setter(0.0, -20.0, 0.0, 0.0);
  v20 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
  v21 = (void (*)(_QWORD *, _QWORD))UIListContentConfiguration.textProperties.modify(v29);
  UIListContentConfiguration.TextProperties.color.setter(v20);
  v21(v29, 0);
  v19 = objc_msgSend((id)objc_opt_self(UIFont), "_preferredFontForTextStyle:weight:", UIFontTextStyleSubheadline, UIFontWeightBold);
  if (v19)
    goto LABEL_12;
  __break(1u);
LABEL_10:
  if (!v16)
  {
    v22 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
    v23 = (void (*)(_QWORD *, _QWORD))UIListContentConfiguration.textProperties.modify(v29);
    UIListContentConfiguration.TextProperties.color.setter(v22);
    v23(v29, 0);
    v19 = objc_msgSend((id)objc_opt_self(UIFont), "_preferredFontForTextStyle:weight:", UIFontTextStyleTitle3, UIFontWeightSemibold);
    if (v19)
      goto LABEL_12;
    __break(1u);
  }
  v29[0] = v16;
  result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for ChargingNetworksDataSourceContext, v29, &type metadata for ChargingNetworksDataSourceContext, &type metadata for Int);
  __break(1u);
  return result;
}

uint64_t sub_1000C5154(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  NSString v8;
  Class isa;
  id v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t result;
  _BYTE v26[24];
  _QWORD v27[5];

  v2 = v1;
  v4 = type metadata accessor for UIListContentConfiguration(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v26[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = String._bridgeToObjectiveC()();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v10 = objc_msgSend(a1, "dequeueReusableCellWithIdentifier:forIndexPath:", v8, isa);

  v11 = sub_1000C4600();
  if (!v11)
    return (uint64_t)v10;
  v12 = (void *)v11;
  static UIListContentConfiguration.cell()();
  v13 = *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_context);
  switch(v13)
  {
    case 0:
      goto LABEL_6;
    case 1:
LABEL_10:
      v20 = objc_msgSend(v12, "name");
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      v23 = v22;

      UIListContentConfiguration.text.setter(v21, v23);
      v27[3] = v4;
      v27[4] = &protocol witness table for UIListContentConfiguration;
      v24 = sub_100011DCC(v27);
      (*(void (**)(_QWORD *, _BYTE *, uint64_t))(v5 + 16))(v24, v7, v4);
      UITableViewCell.contentConfiguration.setter(v27);

      (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
      return (uint64_t)v10;
    case 2:
      UIListContentConfiguration.directionalLayoutMargins.setter(16.0, 16.0, 16.0, 16.0);
LABEL_6:
      objc_msgSend(v10, "setSelectionStyle:", 0);
      v14 = (void *)objc_opt_self(UIColor);
      v15 = v10;
      v16 = objc_msgSend(v14, "tertiarySystemFillColor");
      objc_msgSend(v15, "setBackgroundColor:", v16);

      v17 = (uint64_t *)(v2 + OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_selectedNetworks);
      swift_beginAccess(v17, v26, 0, 0);
      v18 = *v17;
      swift_bridgeObjectRetain(v18);
      LOBYTE(v16) = sub_10012A810(v12, v18);
      swift_bridgeObjectRelease(v18);
      if ((v16 & 1) != 0)
        v19 = 3;
      else
        v19 = 0;
      objc_msgSend(v15, "setAccessoryType:", v19);
      goto LABEL_10;
  }
  v27[0] = *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_context);
  result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for ChargingNetworksDataSourceContext, v27, &type metadata for ChargingNetworksDataSourceContext, &type metadata for Int);
  __break(1u);
  return result;
}

void sub_1000C54A4(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  NSIndexPath v11;
  void *v12;
  Class isa;
  void *Strong;
  void *v15;
  _QWORD v16[3];
  Swift::Int v17;

  v2 = v1;
  v4 = IndexPath.section.getter();
  if (v4 == 1)
  {
LABEL_7:
    v9 = IndexPath.row.getter();
    v6 = v9;
    v7 = OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_filteredOtherNetworks;
    v8 = *(_QWORD *)(v2 + OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_filteredOtherNetworks);
    if ((v8 & 0xC000000000000001) == 0)
    {
      if ((v9 & 0x8000000000000000) == 0)
      {
        v7 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v9 < v7)
          goto LABEL_10;
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
LABEL_22:
    swift_bridgeObjectRetain(v8);
    v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v8);
    swift_bridgeObjectRelease(v8);
    goto LABEL_11;
  }
  if (v4)
    return;
  v5 = IndexPath.row.getter();
  v6 = v5;
  v7 = OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_filteredSuggestedNetworks;
  v8 = *(_QWORD *)(v2 + OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_filteredSuggestedNetworks);
  if ((v8 & 0xC000000000000001) != 0)
    goto LABEL_22;
  if ((v5 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  if (v5 >= *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_7;
  }
LABEL_10:
  v10 = *(id *)(v8 + 8 * v6 + 32);
LABEL_11:
  v7 = *(_QWORD *)(v2 + OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_context);
  if (v7 != 2)
  {
    if (v7 == 1)
    {
      v11.super.isa = IndexPath._bridgeToObjectiveC()().super.isa;
      objc_msgSend(a1, "deselectRowAtIndexPath:animated:", v11.super.isa, 1);
LABEL_17:

      goto LABEL_18;
    }
    if (v7)
    {
LABEL_26:
      v16[0] = v7;
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for ChargingNetworksDataSourceContext, v16, &type metadata for ChargingNetworksDataSourceContext, &type metadata for Int);
      __break(1u);
      return;
    }
  }
  swift_beginAccess(v2 + OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_selectedNetworks, v16, 33, 0);
  sub_10002D3A0(&v17, v10);
  v12 = (void *)v17;
  swift_endAccess(v16);

  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v11.super.isa = (Class)objc_msgSend(a1, "cellForRowAtIndexPath:", isa);

  if (v11.super.isa)
  {
    -[objc_class setAccessoryType:](v11.super.isa, "setAccessoryType:", 3);
    goto LABEL_17;
  }
LABEL_18:
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_delegate);
  if (Strong)
  {
    v15 = Strong;
    objc_msgSend(Strong, "didSelectNetwork:isSuggested:", v10, IndexPath.section.getter() == 0);
    swift_unknownObjectRelease(v15);
  }

}

void sub_1000C56EC(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  void *v11;
  Class isa;
  id v13;
  void *Strong;
  void *v15;
  _QWORD v16[3];

  v2 = v1;
  v4 = IndexPath.section.getter();
  if (v4 != 1)
  {
    if (v4)
      return;
    v5 = IndexPath.row.getter();
    v6 = v5;
    v7 = OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_filteredSuggestedNetworks;
    v8 = *(_QWORD *)(v2 + OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_filteredSuggestedNetworks);
    if ((v8 & 0xC000000000000001) != 0)
      goto LABEL_20;
    if ((v5 & 0x8000000000000000) != 0)
    {
      __break(1u);
      goto LABEL_22;
    }
    if (v5 < *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_10:
      v10 = *(id *)(v8 + 8 * v6 + 32);
      goto LABEL_11;
    }
    __break(1u);
  }
  v9 = IndexPath.row.getter();
  v6 = v9;
  v7 = OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_filteredOtherNetworks;
  v8 = *(_QWORD *)(v2 + OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_filteredOtherNetworks);
  if ((v8 & 0xC000000000000001) == 0)
  {
    if ((v9 & 0x8000000000000000) == 0)
    {
      v7 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v9 < v7)
        goto LABEL_10;
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
LABEL_20:
  swift_bridgeObjectRetain(v8);
  v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v8);
  swift_bridgeObjectRelease(v8);
LABEL_11:
  v7 = *(_QWORD *)(v2 + OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_context);
  if (v7 == 2)
    goto LABEL_14;
  if (v7 != 1)
  {
    if (!v7)
    {
LABEL_14:
      swift_beginAccess(v2 + OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_selectedNetworks, v16, 33, 0);
      v11 = (void *)sub_10002F484(v10);
      swift_endAccess(v16);

      isa = IndexPath._bridgeToObjectiveC()().super.isa;
      v13 = objc_msgSend(a1, "cellForRowAtIndexPath:", isa);

      if (v13)
      {
        objc_msgSend(v13, "setAccessoryType:", 0);

      }
      goto LABEL_16;
    }
LABEL_24:
    v16[0] = v7;
    _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for ChargingNetworksDataSourceContext, v16, &type metadata for ChargingNetworksDataSourceContext, &type metadata for Int);
    __break(1u);
    return;
  }
LABEL_16:
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_delegate);
  if (Strong)
  {
    v15 = Strong;
    objc_msgSend(Strong, "didSelectNetwork:isSuggested:", v10, IndexPath.section.getter() == 0);

    swift_unknownObjectRelease(v15);
  }
  else
  {

  }
}

uint64_t sub_1000C590C(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(id, char *))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  uint64_t v16;

  v9 = type metadata accessor for IndexPath(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(a4);
  v13 = a3;
  v14 = a1;
  a5(v13, v12);

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_1000C59C8(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  _QWORD aBlock[6];

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v21 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000E4BC(0, (unint64_t *)&qword_101492FA0, OS_dispatch_queue_ptr);
  v10 = (void *)static OS_dispatch_queue.main.getter();
  v11 = swift_allocObject(&unk_1011A1608, 32, 7);
  *(_QWORD *)(v11 + 16) = v1;
  *(_QWORD *)(v11 + 24) = a1;
  aBlock[4] = sub_1000C5EE4;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BB8D4;
  aBlock[3] = &unk_1011A1620;
  v12 = _Block_copy(aBlock);
  v13 = v1;
  v14 = a1;
  v15 = swift_release();
  static DispatchQoS.unspecified.getter(v15);
  aBlock[0] = _swiftEmptyArrayStorage;
  v16 = sub_10000E540();
  v17 = sub_100008B04((uint64_t *)&unk_101492FB0);
  v18 = sub_10000E588();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v17, v18, v3, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v12);
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v21 + 8))(v5, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void sub_1000C5BB0(char *a1, id a2)
{
  id v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;

  v4 = objc_msgSend(a2, "suggestedNetworks");
  if (v4)
  {
    v5 = v4;
    v6 = sub_10000E4BC(0, (unint64_t *)&unk_1014994F0, VGChargingNetwork_ptr);
    v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

    v8 = a1;
    v9 = sub_1000C6174(v7, (uint64_t)v8);
    swift_bridgeObjectRelease(v7);

  }
  else
  {
    v9 = _swiftEmptyArrayStorage;
  }
  v10 = *(_QWORD *)&a1[OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_suggestedNetworks];
  *(_QWORD *)&a1[OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_suggestedNetworks] = v9;
  swift_bridgeObjectRelease(v10);
  v11 = objc_msgSend(a2, "otherNetworks");
  if (v11)
  {
    v12 = v11;
    v13 = sub_10000E4BC(0, (unint64_t *)&unk_1014994F0, VGChargingNetwork_ptr);
    v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v13);

    v15 = a1;
    v16 = sub_1000C6174(v14, (uint64_t)v15);
    swift_bridgeObjectRelease(v14);

  }
  else
  {
    v16 = _swiftEmptyArrayStorage;
  }
  v17 = *(_QWORD *)&a1[OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_otherNetworks];
  *(_QWORD *)&a1[OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_otherNetworks] = v16;
  swift_bridgeObjectRelease(v17);
  sub_1000C3F4C();
}

void sub_1000C5D64(void *a1)
{
  uint64_t v1;
  id v2;
  id countAndFlagsBits;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  void *object;
  _QWORD *v8;
  uint64_t v9;

  v2 = objc_msgSend(a1, "searchBar");
  countAndFlagsBits = objc_msgSend(v2, "text");

  if (countAndFlagsBits)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(countAndFlagsBits);
    v5 = v4;

    v6 = String.lowercased()();
    countAndFlagsBits = (id)v6._countAndFlagsBits;
    object = v6._object;
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    object = 0;
  }
  v8 = (_QWORD *)(v1 + OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_searchString);
  v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_searchString + 8);
  *v8 = countAndFlagsBits;
  v8[1] = object;
  swift_bridgeObjectRelease(v9);
  sub_1000C3F4C();
}

ValueMetadata *type metadata accessor for ChargingNetworksDataSourceContext()
{
  return &type metadata for ChargingNetworksDataSourceContext;
}

unint64_t sub_1000C5E74()
{
  unint64_t result;

  result = qword_1014994E8;
  if (!qword_1014994E8)
  {
    result = swift_getWitnessTable("uo7", &type metadata for ChargingNetworksDataSourceContext);
    atomic_store(result, (unint64_t *)&qword_1014994E8);
  }
  return result;
}

uint64_t sub_1000C5EB8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1000C5EE4()
{
  uint64_t v0;

  sub_1000C5BB0(*(char **)(v0 + 16), *(id *)(v0 + 24));
}

uint64_t sub_1000C5EEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000C5EFC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

_QWORD *sub_1000C5F04(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  id v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Class isa;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;

  v3 = v2;
  v35 = a2;
  v5 = type metadata accessor for CharacterSet(0);
  v33 = *(_QWORD *)(v5 - 8);
  v34 = v5;
  __chkstk_darwin(v5);
  v32 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = _swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
    goto LABEL_16;
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v7)
  {
    while (1)
    {
      v27[1] = v3;
      v28 = a1;
      v8 = 0;
      v30 = a1 & 0xFFFFFFFFFFFFFF8;
      v31 = a1 & 0xC000000000000001;
      v29 = v7;
      v9 = v32;
      while (v31)
      {
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, a1);
LABEL_9:
        v3 = v10;
        v11 = v8 + 1;
        if (__OFADD__(v8, 1))
          goto LABEL_15;
        v12 = objc_msgSend(v10, "name");
        v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
        v15 = v14;

        v37 = v13;
        v38 = v15;
        static CharacterSet.whitespaces.getter();
        v16 = sub_10006C008();
        v17 = StringProtocol.trimmingCharacters(in:)(v9, &type metadata for String, v16);
        v19 = v18;
        (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v34);
        v37 = v17;
        v38 = v19;
        v36[0] = 32;
        v36[1] = 0xE100000000000000;
        v20 = StringProtocol.components<A>(separatedBy:)(v36, &type metadata for String, &type metadata for String, v16, v16);
        swift_bridgeObjectRelease(v15);
        swift_bridgeObjectRelease(v19);
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v20);
        LODWORD(v20) = objc_msgSend(v35, "evaluateWithObject:", isa);

        if ((_DWORD)v20)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v22);
          v23 = v39[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v23);
          v24 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v3);
          specialized ContiguousArray._endMutation()(v24);
        }
        else
        {

        }
        a1 = v28;
        ++v8;
        if (v11 == v29)
          return v39;
      }
      if (v8 < *(_QWORD *)(v30 + 16))
        break;
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      if (a1 < 0)
        v26 = a1;
      else
        v26 = a1 & 0xFFFFFFFFFFFFFF8;
      v7 = _CocoaArrayWrapper.endIndex.getter(v26);
      if (!v7)
        return _swiftEmptyArrayStorage;
    }
    v10 = *(id *)(a1 + 8 * v8 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_1000C6174(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  void *v8;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v28;

  v2 = a1;
  v28 = _swiftEmptyArrayStorage;
  if (a1 >> 62)
    goto LABEL_24;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      v21 = v2;
      v4 = 0;
      v26 = v2 & 0xC000000000000001;
      v24 = OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_excludedNetworks;
      v25 = v2 & 0xFFFFFFFFFFFFFF8;
      v22 = v3;
      v23 = v2 + 32;
      while (v26)
      {
        v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v21);
LABEL_9:
        v8 = (void *)v7;
        if (__OFADD__(v4++, 1))
          goto LABEL_23;
        v10 = *(_QWORD *)(a2 + v24);
        if ((v10 & 0xC000000000000001) != 0)
        {
          v2 = (uint64_t)(id)v7;
          v11 = __CocoaSet.contains(_:)();

          if ((v11 & 1) != 0)
          {

            goto LABEL_5;
          }
        }
        else if (*(_QWORD *)(v10 + 16))
        {
          v7 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v10 + 40));
          v12 = -1 << *(_BYTE *)(v10 + 32);
          v13 = v7 & ~v12;
          if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
          {
            v2 = sub_10000E4BC(0, (unint64_t *)&unk_1014994F0, VGChargingNetwork_ptr);
            v14 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * v13);
            v15 = static NSObject.== infix(_:_:)(v14, v8);

            if ((v15 & 1) != 0)
            {
LABEL_19:

              v3 = v22;
              goto LABEL_5;
            }
            v16 = ~v12;
            while (1)
            {
              v13 = (v13 + 1) & v16;
              v3 = v22;
              if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
                break;
              v17 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * v13);
              v18 = static NSObject.== infix(_:_:)(v17, v8);

              if ((v18 & 1) != 0)
                goto LABEL_19;
            }
          }
        }
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v7);
        v5 = v28[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v5);
        v6 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v5, v8);
        v2 = (uint64_t)&v28;
        specialized ContiguousArray._endMutation()(v6);
LABEL_5:
        if (v4 == v3)
          return v28;
      }
      if (v4 < *(_QWORD *)(v25 + 16))
        break;
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      if (v2 < 0)
        v20 = v2;
      else
        v20 = v2 & 0xFFFFFFFFFFFFFF8;
      v3 = _CocoaArrayWrapper.endIndex.getter(v20);
      if (!v3)
        return _swiftEmptyArrayStorage;
    }
    v7 = (Swift::Int)*(id *)(v23 + 8 * v4);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000C63D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  if (a1 == 1)
  {
    v2 = OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_filteredOtherNetworks;
  }
  else
  {
    if (a1)
      return 0;
    v2 = OBJC_IVAR____TtC4Maps26ChargingNetworksDataSource_filteredSuggestedNetworks;
  }
  v3 = *(_QWORD *)(v1 + v2);
  if (!((unint64_t)v3 >> 62))
    return *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v3 < 0)
    v5 = v3;
  else
    v5 = v3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v3);
  v6 = _CocoaArrayWrapper.endIndex.getter(v5);
  swift_bridgeObjectRelease(v3);
  return v6;
}

uint64_t sub_1000C6454()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000C6478(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000C437C(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

unint64_t sub_1000C6480()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101499518;
  if (!qword_101499518)
  {
    v1 = sub_10000E4BC(255, (unint64_t *)&unk_1014994F0, VGChargingNetwork_ptr);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_101499518);
  }
  return result;
}

uint64_t *sub_1000C64E0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v11);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for RoundedCornerStyle(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_retain(v5);
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_1000C657C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for RoundedCornerStyle(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_1000C65C4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for RoundedCornerStyle(0);
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_retain(v4);
  v9(v6, v7, v8);
  return a1;
}

_QWORD *sub_1000C6634(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

_OWORD *sub_1000C66B0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *sub_1000C670C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_release(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_1000C6778(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C6784);
}

uint64_t sub_1000C6784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Capsule(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_1000C6800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C680C);
}

uint64_t sub_1000C680C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Capsule(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for RefinementMultiSelectButton(uint64_t a1)
{
  return sub_100021D9C(a1, qword_101499578, (uint64_t)&nominal type descriptor for RefinementMultiSelectButton);
}

uint64_t sub_1000C6894(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_100E2A7E0;
  result = type metadata accessor for RoundedCornerStyle(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *sub_1000C6908(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    v4 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v4, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (_QWORD *)((char *)v4 + v8);
    v11 = (_QWORD *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (_QWORD *)((char *)v4 + v9);
    v14 = (_QWORD *)((char *)a2 + v9);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = a3[8];
    *((_BYTE *)v4 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)v4 + v16) = *((_BYTE *)a2 + v16);
    v17 = a3[9];
    v18 = (_QWORD *)((char *)v4 + v17);
    v19 = (_QWORD *)((char *)a2 + v17);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v15);
  }
  swift_retain(v20);
  return v4;
}

uint64_t sub_1000C69E0(uint64_t a1, int *a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  return swift_release(*(_QWORD *)(a1 + a2[9] + 8));
}

uint64_t sub_1000C6A48(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  v16 = a3[9];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v14);
  swift_retain(v19);
  return a1;
}

uint64_t sub_1000C6AF8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a3[6];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v17 = a3[9];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  v20 = v19[1];
  v21 = v18[1];
  *v18 = *v19;
  v18[1] = v20;
  swift_retain(v20);
  swift_release(v21);
  return a1;
}

uint64_t sub_1000C6BDC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1000C6C60(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = a3[6];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  v18 = v14[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  v19 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v19) = *(_BYTE *)(a2 + v19);
  v20 = a3[9];
  v21 = *(_QWORD *)(a1 + v20 + 8);
  *(_OWORD *)(a1 + v20) = *(_OWORD *)(a2 + v20);
  swift_release(v21);
  return a1;
}

uint64_t sub_1000C6D14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C6D20);
}

uint64_t sub_1000C6D24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C6D30);
}

uint64_t type metadata accessor for RefinementBarButton(uint64_t a1)
{
  return sub_100021D9C(a1, qword_101499608, (uint64_t)&nominal type descriptor for RefinementBarButton);
}

uint64_t sub_1000C6D48(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100E2A818;
    v4[2] = &unk_100E2A818;
    v4[3] = &unk_100E2A830;
    v4[4] = &unk_100E2A830;
    v4[5] = (char *)&value witness table for () + 64;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *sub_1000C6DD4(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v25 = *a2;
    *a1 = *a2;
    v4 = (_QWORD *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v4, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (_QWORD *)((char *)v4 + v8);
    v11 = (_QWORD *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (_QWORD *)((char *)v4 + v9);
    v14 = (_QWORD *)((char *)a2 + v9);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = a3[8];
    *((_BYTE *)v4 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)v4 + v16) = *((_BYTE *)a2 + v16);
    v17 = a3[9];
    v18 = a3[10];
    v19 = (char *)v4 + v17;
    v20 = (char *)a2 + v17;
    v22 = *(_QWORD *)v20;
    v21 = *((_QWORD *)v20 + 1);
    *(_QWORD *)v19 = *(_QWORD *)v20;
    *((_QWORD *)v19 + 1) = v21;
    v19[16] = v20[16];
    *((_QWORD *)v19 + 3) = *((_QWORD *)v20 + 3);
    v23 = (_QWORD *)((char *)v4 + v18);
    v24 = (_QWORD *)((char *)a2 + v18);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v22);
  }
  swift_retain(v25);
  return v4;
}

uint64_t sub_1000C6ED4(uint64_t a1, int *a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[9]));
  return swift_release(*(_QWORD *)(a1 + a2[10] + 8));
}

uint64_t sub_1000C6F48(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  v16 = a3[9];
  v17 = a3[10];
  v18 = a1 + v16;
  v19 = (uint64_t *)(a2 + v16);
  v21 = *v19;
  v20 = v19[1];
  *(_QWORD *)v18 = *v19;
  *(_QWORD *)(v18 + 8) = v20;
  *(_BYTE *)(v18 + 16) = *((_BYTE *)v19 + 16);
  *(_QWORD *)(v18 + 24) = v19[3];
  v22 = (_QWORD *)(a1 + v17);
  v23 = (_QWORD *)(a2 + v17);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v21);
  swift_retain(v24);
  return a1;
}

uint64_t sub_1000C7020(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a3[6];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v17 = a3[9];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = *(_QWORD *)(a2 + v17);
  v21 = *(_QWORD *)(a1 + v17);
  *(_QWORD *)(a1 + v17) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  v22 = *(_QWORD *)(v19 + 8);
  *(_BYTE *)(v18 + 16) = *(_BYTE *)(v19 + 16);
  *(_QWORD *)(v18 + 8) = v22;
  *(_QWORD *)(v18 + 24) = *(_QWORD *)(v19 + 24);
  v23 = a3[10];
  v24 = (_QWORD *)(a1 + v23);
  v25 = (_QWORD *)(a2 + v23);
  v26 = v25[1];
  v27 = v24[1];
  *v24 = *v25;
  v24[1] = v26;
  swift_retain(v26);
  swift_release(v27);
  return a1;
}

uint64_t sub_1000C7148(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  __int128 v13;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  v9 = a3[9];
  v10 = a3[10];
  v11 = (_OWORD *)(a1 + v9);
  v12 = (_OWORD *)(a2 + v9);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  *(_OWORD *)(a1 + v10) = *(_OWORD *)(a2 + v10);
  return a1;
}

uint64_t sub_1000C71DC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = a3[6];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  v18 = v14[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  v19 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v19) = *(_BYTE *)(a2 + v19);
  v20 = a3[9];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = *(_QWORD *)(a1 + v20);
  *(_QWORD *)(a1 + v20) = *(_QWORD *)(a2 + v20);
  swift_bridgeObjectRelease(v23);
  *(_QWORD *)(v21 + 8) = *(_QWORD *)(v22 + 8);
  *(_BYTE *)(v21 + 16) = *(_BYTE *)(v22 + 16);
  *(_QWORD *)(v21 + 24) = *(_QWORD *)(v22 + 24);
  v24 = a3[10];
  v25 = *(_QWORD *)(a1 + v24 + 8);
  *(_OWORD *)(a1 + v24) = *(_OWORD *)(a2 + v24);
  swift_release(v25);
  return a1;
}

uint64_t sub_1000C72CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C72D8);
}

uint64_t sub_1000C72DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 36));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000C7358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C7364);
}

uint64_t sub_1000C7368(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 36)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for RefinementMenu(uint64_t a1)
{
  return sub_100021D9C(a1, qword_1014996A8, (uint64_t)&nominal type descriptor for RefinementMenu);
}

uint64_t sub_1000C73F4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100E2A818;
    v4[2] = &unk_100E2A818;
    v4[3] = &unk_100E2A830;
    v4[4] = &unk_100E2A830;
    v4[5] = " ";
    v4[6] = (char *)&value witness table for () + 64;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1000C748C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_101067FF0, 1);
}

uint64_t sub_1000C749C@<X0>(unint64_t a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, unint64_t a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, __n128 a10@<Q0>, double a11, char a12, double a13, char a14, uint64_t a15, uint64_t a16)
{
  _OWORD *v16;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  uint64_t v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  unsigned int v42;
  unint64_t v43;
  double v44;
  double v45;
  unint64_t v46;
  _OWORD v47[7];

  v18 = a16;
  v19 = a13;
  v20 = a11;
  v21 = a2 & 1;
  a10.n128_u64[0] = a1;
  if ((_DWORD)v21)
    a10.n128_f64[0] = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = a10.n128_f64[0];
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (a10.n128_f64[0] > v23 || v23 > v26)
    goto LABEL_22;
  a10.n128_u64[0] = a7;
  if ((a8 & 1) != 0)
    a10.n128_f64[0] = -INFINITY;
  v28 = a11;
  if ((a12 & 1) != 0)
    v28 = a10.n128_f64[0];
  v29 = a13;
  if ((a14 & 1) != 0)
    v29 = v28;
  if (a10.n128_f64[0] > v28 || v28 > v29)
  {
LABEL_22:
    v45 = a5;
    v46 = a7;
    v44 = a3;
    v43 = a1;
    v42 = v21;
    v31 = static os_log_type_t.fault.getter(a10);
    v32 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v18 = a16;
    v21 = v42;
    v20 = a11;
    a1 = v43;
    a3 = v44;
    v19 = a13;
    a5 = v45;
    a7 = v46;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v47, a1, v21, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, a7, v25, *(_QWORD *)&v20, a12 & 1, *(_QWORD *)&v19, a14 & 1, a15, v18);
  v33 = v16[5];
  a9[4] = v16[4];
  a9[5] = v33;
  a9[6] = v16[6];
  *(_OWORD *)((char *)a9 + 105) = *(_OWORD *)((char *)v16 + 105);
  v34 = v16[1];
  *a9 = *v16;
  a9[1] = v34;
  v35 = v16[3];
  a9[2] = v16[2];
  a9[3] = v35;
  v36 = v47[1];
  a9[8] = v47[0];
  a9[9] = v36;
  v37 = v47[2];
  v38 = v47[3];
  v39 = v47[6];
  v40 = v47[4];
  a9[13] = v47[5];
  a9[14] = v39;
  a9[11] = v38;
  a9[12] = v40;
  a9[10] = v37;
  return sub_1000CCECC((uint64_t)v16);
}

uint64_t sub_1000C7658@<X0>(unint64_t a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, unint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, __n128 a10@<Q0>, double a11, char a12, double a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20)
{
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  double v34;
  double v36;
  double v37;
  uint64_t v39;
  void *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  unsigned int v45;
  unsigned int v46;
  unint64_t v47;
  double v48;
  unint64_t v49;
  double v50;
  _OWORD v51[7];

  v21 = a20;
  v22 = a19;
  v23 = a18;
  v25 = a15;
  v24 = a16;
  v26 = a13;
  v27 = a11;
  v28 = a2 & 1;
  a10.n128_u64[0] = a1;
  if ((_DWORD)v28)
    a10.n128_f64[0] = -INFINITY;
  v29 = a4 & 1;
  v30 = a3;
  if ((_DWORD)v29)
    v30 = a10.n128_f64[0];
  v31 = a6 & 1;
  v32 = a8 & 1;
  v33 = a14 & 1;
  v34 = a5;
  if ((a6 & 1) != 0)
    v34 = v30;
  if (a10.n128_f64[0] > v30 || v30 > v34)
    goto LABEL_22;
  a10.n128_u64[0] = a7;
  if ((a8 & 1) != 0)
    a10.n128_f64[0] = -INFINITY;
  v36 = a11;
  if ((a12 & 1) != 0)
    v36 = a10.n128_f64[0];
  v37 = a13;
  if ((a14 & 1) != 0)
    v37 = v36;
  if (a10.n128_f64[0] > v36 || v36 > v37)
  {
LABEL_22:
    v49 = a7;
    v50 = a5;
    v47 = a1;
    v48 = a3;
    v46 = v28;
    v45 = v29;
    v39 = static os_log_type_t.fault.getter(a10);
    v40 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v39, &_mh_execute_header, v40, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v33 = a14 & 1;
    v29 = v45;
    v25 = a15;
    v24 = a16;
    v28 = v46;
    v27 = a11;
    v26 = a13;
    a1 = v47;
    a3 = v48;
    a7 = v49;
    a5 = v50;
    v22 = a19;
    v21 = a20;
    v23 = a18;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v51, a1, v28, *(_QWORD *)&a3, v29, *(_QWORD *)&a5, v31, a7, v32, *(_QWORD *)&v27, a12 & 1, *(_QWORD *)&v26, v33, v25, v24);
  *(_QWORD *)a9 = a17;
  *(_QWORD *)(a9 + 8) = v23;
  *(_BYTE *)(a9 + 16) = v22 & 1;
  *(_QWORD *)(a9 + 24) = v21;
  v41 = v51[5];
  *(_OWORD *)(a9 + 96) = v51[4];
  *(_OWORD *)(a9 + 112) = v41;
  *(_OWORD *)(a9 + 128) = v51[6];
  v42 = v51[1];
  *(_OWORD *)(a9 + 32) = v51[0];
  *(_OWORD *)(a9 + 48) = v42;
  v43 = v51[3];
  *(_OWORD *)(a9 + 64) = v51[2];
  *(_OWORD *)(a9 + 80) = v43;
  sub_10006BB40(a17, v23, v22 & 1);
  return swift_bridgeObjectRetain(v21);
}

__n128 sub_1000C7838@<Q0>(unint64_t a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, unint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, __n128 a10@<Q0>, double a11, char a12, double a13, char a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __n128 result;
  unsigned int v39;
  unint64_t v40;
  double v41;
  double v42;
  unint64_t v43;
  _OWORD v44[7];

  v17 = v16;
  v19 = a16;
  v20 = a13;
  v21 = a11;
  v22 = a2 & 1;
  a10.n128_u64[0] = a1;
  if ((_DWORD)v22)
    a10.n128_f64[0] = -INFINITY;
  v23 = a4 & 1;
  v24 = a3;
  if ((a4 & 1) != 0)
    v24 = a10.n128_f64[0];
  v25 = a6 & 1;
  v26 = a8 & 1;
  v27 = a5;
  if ((a6 & 1) != 0)
    v27 = v24;
  if (a10.n128_f64[0] > v24 || v24 > v27)
    goto LABEL_22;
  a10.n128_u64[0] = a7;
  if ((a8 & 1) != 0)
    a10.n128_f64[0] = -INFINITY;
  v29 = a11;
  if ((a12 & 1) != 0)
    v29 = a10.n128_f64[0];
  v30 = a13;
  if ((a14 & 1) != 0)
    v30 = v29;
  if (a10.n128_f64[0] > v29 || v29 > v30)
  {
LABEL_22:
    v42 = a5;
    v43 = a7;
    v41 = a3;
    v40 = a1;
    v39 = v22;
    v32 = static os_log_type_t.fault.getter(a10);
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v19 = a16;
    v22 = v39;
    a1 = v40;
    v21 = a11;
    a3 = v41;
    v20 = a13;
    a5 = v42;
    a7 = v43;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v44, a1, v22, *(_QWORD *)&a3, v23, *(_QWORD *)&a5, v25, a7, v26, *(_QWORD *)&v21, a12 & 1, *(_QWORD *)&v20, a14 & 1, a15, v19);
  v34 = sub_100008B04((uint64_t *)&unk_10149D280);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(a9, v17, v34);
  v35 = a9 + *(int *)(sub_100008B04(&qword_101499A58) + 36);
  v36 = v44[5];
  *(_OWORD *)(v35 + 64) = v44[4];
  *(_OWORD *)(v35 + 80) = v36;
  *(_OWORD *)(v35 + 96) = v44[6];
  v37 = v44[1];
  *(_OWORD *)v35 = v44[0];
  *(_OWORD *)(v35 + 16) = v37;
  result = (__n128)v44[3];
  *(_OWORD *)(v35 + 32) = v44[2];
  *(__n128 *)(v35 + 48) = result;
  return result;
}

__n128 sub_1000C7A04@<Q0>(unint64_t a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, unint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, __n128 a10@<Q0>, double a11, char a12, double a13, char a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __n128 result;
  unsigned int v38;
  unint64_t v39;
  double v40;
  double v41;
  unint64_t v42;
  _OWORD v43[7];

  v17 = v16;
  v19 = a16;
  v20 = a13;
  v21 = a11;
  v22 = a2 & 1;
  a10.n128_u64[0] = a1;
  if ((_DWORD)v22)
    a10.n128_f64[0] = -INFINITY;
  v23 = a4 & 1;
  v24 = a3;
  if ((a4 & 1) != 0)
    v24 = a10.n128_f64[0];
  v25 = a6 & 1;
  v26 = a8 & 1;
  v27 = a5;
  if ((a6 & 1) != 0)
    v27 = v24;
  if (a10.n128_f64[0] > v24 || v24 > v27)
    goto LABEL_22;
  a10.n128_u64[0] = a7;
  if ((a8 & 1) != 0)
    a10.n128_f64[0] = -INFINITY;
  v29 = a11;
  if ((a12 & 1) != 0)
    v29 = a10.n128_f64[0];
  v30 = a13;
  if ((a14 & 1) != 0)
    v30 = v29;
  if (a10.n128_f64[0] > v29 || v29 > v30)
  {
LABEL_22:
    v41 = a5;
    v42 = a7;
    v40 = a3;
    v39 = a1;
    v38 = v22;
    v32 = static os_log_type_t.fault.getter(a10);
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v19 = a16;
    v22 = v38;
    a1 = v39;
    v21 = a11;
    a3 = v40;
    v20 = a13;
    a5 = v41;
    a7 = v42;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v43, a1, v22, *(_QWORD *)&a3, v23, *(_QWORD *)&a5, v25, a7, v26, *(_QWORD *)&v21, a12 & 1, *(_QWORD *)&v20, a14 & 1, a15, v19);
  sub_10000C1FC(v17, a9, &qword_1014998E8);
  v34 = a9 + *(int *)(sub_100008B04(&qword_1014998F0) + 36);
  v35 = v43[5];
  *(_OWORD *)(v34 + 64) = v43[4];
  *(_OWORD *)(v34 + 80) = v35;
  *(_OWORD *)(v34 + 96) = v43[6];
  v36 = v43[1];
  *(_OWORD *)v34 = v43[0];
  *(_OWORD *)(v34 + 16) = v36;
  result = (__n128)v43[3];
  *(_OWORD *)(v34 + 32) = v43[2];
  *(__n128 *)(v34 + 48) = result;
  return result;
}

uint64_t sub_1000C7BC0@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  double v17;
  __n128 v18;
  char v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  char v34;
  char *v35;
  uint64_t v37;
  uint64_t v38;

  v38 = a1;
  v2 = type metadata accessor for ButtonStyleConfiguration.Label(0, a2);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100008B04(&qword_101499A40);
  __chkstk_darwin(v6);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100008B04(&qword_101499A48);
  __chkstk_darwin(v9);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100008B04(&qword_101499A50);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = ButtonStyleConfiguration.label.getter(v13);
  if ((ButtonStyleConfiguration.isPressed.getter(v16) & 1) != 0)
    v17 = 0.85;
  else
    v17 = 1.0;
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v8, v5, v2);
  *(double *)&v8[*(int *)(v6 + 36)] = v17;
  v18.n128_f64[0] = (*(double (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v19 = static Edge.Set.all.getter(v18);
  v20 = EdgeInsets.init(_all:)(12.0);
  v22 = v21;
  v24 = v23;
  v26 = v25;
  sub_10000C1FC((uint64_t)v8, (uint64_t)v11, &qword_101499A40);
  v27 = &v11[*(int *)(v9 + 36)];
  *v27 = v19;
  *((double *)v27 + 1) = v20;
  *((_QWORD *)v27 + 2) = v22;
  *((_QWORD *)v27 + 3) = v24;
  *((_QWORD *)v27 + 4) = v26;
  v27[40] = 0;
  v28 = sub_100010CC4((uint64_t)v8, &qword_101499A40);
  v29 = ButtonStyleConfiguration.isPressed.getter(v28);
  if ((v29 & 1) != 0)
  {
    v30 = objc_msgSend((id)objc_opt_self(UIColor), "tertiarySystemFillColor");
    v31 = Color.init(uiColor:)(v30);
  }
  else
  {
    v31 = static Color.clear.getter(v29);
  }
  v33 = v31;
  v34 = static Edge.Set.all.getter(v32);
  sub_10000C1FC((uint64_t)v11, (uint64_t)v15, &qword_101499A48);
  v35 = &v15[*(int *)(v12 + 36)];
  *(_QWORD *)v35 = v33;
  v35[8] = v34;
  sub_100010CC4((uint64_t)v11, &qword_101499A48);
  return sub_1000207BC((uint64_t)v15, v38, &qword_101499A50);
}

uint64_t sub_1000C7E3C@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __n128 v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  char *v43;
  _OWORD *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  double v56;
  char *v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __n128 v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  _OWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t OpaqueTypeConformance2;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v99;
  char *v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122[16];
  uint64_t v123;
  _QWORD v124[4];
  _OWORD v125[2];
  uint64_t v126;

  v3 = v2;
  v120 = a1;
  v4 = type metadata accessor for AccessibilityTraits(0, a2);
  v118 = *(_QWORD *)(v4 - 8);
  v119 = v4;
  __chkstk_darwin(v4);
  v117 = (char *)&v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v121);
  v116 = (char *)&v99 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v100 = (char *)&v99 - v8;
  v9 = sub_100008B04(&qword_101495850);
  __chkstk_darwin(v9);
  v11 = (char *)&v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = type metadata accessor for RefinementBarButton(0);
  v12 = *(_QWORD *)(v103 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v103);
  v14 = (char *)&v99 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100008B04(&qword_101499780);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v99 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_100008B04(&qword_101499788);
  __chkstk_darwin(v102);
  v20 = (char *)&v99 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_100008B04(&qword_101499790);
  __chkstk_darwin(v105);
  v104 = (char *)&v99 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = sub_100008B04(&qword_101499798);
  __chkstk_darwin(v106);
  v107 = (uint64_t)&v99 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_100008B04(&qword_1014997A0);
  __chkstk_darwin(v109);
  v108 = (char *)&v99 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = sub_100008B04(&qword_1014997A8);
  v114 = *(_QWORD *)(v115 - 8);
  __chkstk_darwin(v115);
  v112 = (char *)&v99 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_100008B04(&qword_1014997B0);
  __chkstk_darwin(v113);
  v111 = (char *)&v99 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v110 = (char *)&v99 - v27;
  sub_1000202AC(v3, (uint64_t)v14, type metadata accessor for RefinementBarButton);
  v28 = *(unsigned __int8 *)(v12 + 80);
  v29 = (v28 + 16) & ~v28;
  v30 = swift_allocObject(&unk_1011A1750, v29 + v13, v28 | 7);
  sub_10003F29C((uint64_t)v14, v30 + v29, type metadata accessor for RefinementBarButton);
  v123 = v3;
  v31 = sub_100008B04(&qword_1014997B8);
  v32 = sub_1000CB85C();
  v34 = Button.init(action:label:)(sub_1000CB840, v30, sub_1000CB854, v122, v31, v32, v33);
  LOBYTE(v30) = static Edge.Set.vertical.getter(v34);
  v35 = EdgeInsets.init(_all:)(-5.0);
  v37 = v36;
  v39 = v38;
  v41 = v40;
  v42 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  v99 = v20;
  v42(v20, v18, v15);
  v43 = &v20[*(int *)(v102 + 36)];
  *v43 = v30;
  *((double *)v43 + 1) = v35;
  *((_QWORD *)v43 + 2) = v37;
  *((_QWORD *)v43 + 3) = v39;
  *((_QWORD *)v43 + 4) = v41;
  v43[40] = 0;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  v44 = v100;
  v45 = &v100[*(int *)(v121 + 20)];
  v46 = enum case for RoundedCornerStyle.continuous(_:);
  v47 = type metadata accessor for RoundedCornerStyle(0);
  v48 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 104);
  LODWORD(v102) = v46;
  v48(v45, v46, v47);
  __asm { FMOV            V0.2D, #16.0 }
  v101 = _Q0;
  *v44 = _Q0;
  v54 = Color.init(uiColor:)(objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.780392157, 0.780392157, 0.8, 1.0));
  v55 = *(int *)(v103 + 28);
  v56 = 0.0;
  if (!*(_BYTE *)(v3 + v55))
    v56 = 1.0;
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v125, 0, 0, _swiftEmptyArrayStorage, v56, 10.0, 0.0);
  sub_1000202AC((uint64_t)v44, (uint64_t)v11, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v57 = &v11[*(int *)(sub_100008B04(&qword_101495878) + 36)];
  v58 = v125[1];
  *(_OWORD *)v57 = v125[0];
  *((_OWORD *)v57 + 1) = v58;
  *((_QWORD *)v57 + 4) = v126;
  v59 = sub_100008B04(&qword_101495880);
  *(_QWORD *)&v11[*(int *)(v59 + 52)] = v54;
  *(_WORD *)&v11[*(int *)(v59 + 56)] = 256;
  v60 = static Alignment.center.getter(v59);
  v62 = v61;
  v63 = (uint64_t *)&v11[*(int *)(sub_100008B04(&qword_101495888) + 36)];
  *v63 = v60;
  v63[1] = v62;
  v64 = sub_1000202F0((uint64_t)v44, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v65 = static Alignment.center.getter(v64);
  v67 = v66;
  v68 = (uint64_t)v104;
  v69 = (uint64_t)&v104[*(int *)(v105 + 36)];
  sub_10000C1FC((uint64_t)v11, v69, &qword_101495850);
  v70 = (uint64_t *)(v69 + *(int *)(sub_100008B04(&qword_101495890) + 36));
  *v70 = v65;
  v70[1] = v67;
  v71 = (uint64_t)v99;
  sub_10000C1FC((uint64_t)v99, v68, &qword_101499788);
  sub_100010CC4((uint64_t)v11, &qword_101495850);
  v72 = v3;
  v73 = sub_100010CC4(v71, &qword_101499788);
  if (*(_BYTE *)(v3 + v55) == 1)
    v74 = static Color.blue.getter(v73);
  else
    v74 = static Color.clear.getter(v73);
  v76 = v74;
  v77 = static Edge.Set.all.getter(v75);
  v78 = v107;
  sub_10000C1FC(v68, v107, &qword_101499790);
  v79 = v78 + *(int *)(v106 + 36);
  *(_QWORD *)v79 = v76;
  *(_BYTE *)(v79 + 8) = v77;
  sub_100010CC4(v68, &qword_101499790);
  v80 = v116;
  v48(&v116[*(int *)(v121 + 20)], v102, v47);
  *v80 = v101;
  v81 = v109;
  v82 = (uint64_t)v108;
  v83 = (uint64_t)&v108[*(int *)(v109 + 36)];
  sub_1000202AC((uint64_t)v80, v83, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v83 + *(int *)(sub_100008B04(&qword_101494DD0) + 36)) = 256;
  sub_10000C1FC(v78, v82, &qword_101499798);
  sub_1000202F0((uint64_t)v80, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  sub_100010CC4(v78, &qword_101499798);
  v84 = sub_1000CB8F8();
  v85 = sub_1000CBB08();
  v86 = v112;
  View.buttonStyle<A>(_:)(v85, v81, &type metadata for RefinementButtonStyle, v84, v85);
  v87 = sub_100010CC4(v82, &qword_1014997A0);
  if (*(_BYTE *)(v72 + v55) == 1)
  {
    v88 = v117;
    static AccessibilityTraits.isSelected.getter(v87);
    v89 = v119;
  }
  else
  {
    v124[0] = _swiftEmptyArrayStorage;
    v90 = sub_10000BC84(&qword_101499800, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityTraits, (uint64_t)&protocol conformance descriptor for AccessibilityTraits);
    v91 = sub_100008B04((uint64_t *)&unk_10149CE50);
    v92 = sub_100010D70(&qword_101499808, (uint64_t *)&unk_10149CE50, (const char *)&protocol conformance descriptor for [A]);
    v88 = v117;
    v93 = v91;
    v89 = v119;
    dispatch thunk of SetAlgebra.init<A>(_:)(v124, v93, v92, v119, v90);
  }
  v124[0] = v81;
  v124[1] = &type metadata for RefinementButtonStyle;
  v124[2] = v84;
  v124[3] = v85;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v124, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v95 = (uint64_t)v111;
  v96 = v115;
  View.accessibility(addTraits:)(v88, v115, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v118 + 8))(v88, v89);
  (*(void (**)(char *, uint64_t))(v114 + 8))(v86, v96);
  v97 = (uint64_t)v110;
  ModifiedContent<>.accessibilityIdentifier(_:)(0xD000000000000013, 0x8000000100E2A7E0, v113);
  sub_100010CC4(v95, &qword_1014997B0);
  return sub_1000207BC(v97, v120, &qword_1014997B0);
}

uint64_t sub_1000C8774(uint64_t a1)
{
  uint64_t v3;

  static Animation.easeInOut(duration:)(0.2);
  v3 = a1;
  withAnimation<A>(_:_:)();
  return swift_release();
}

uint64_t sub_1000C87DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v19 = static VerticalAlignment.center.getter(a3);
  sub_1000C90FC(a1, type metadata accessor for RefinementBarButton, (uint64_t)v20);
  v5 = v20[0];
  v6 = v20[1];
  v7 = v20[2];
  v8 = v20[3];
  v9 = v21;
  v10 = v22;
  v11 = v23;
  v12 = v24;
  v17 = v26;
  v18 = v25;
  v13 = type metadata accessor for RefinementBarButton(0);
  if (*(_BYTE *)(a1 + *(int *)(v13 + 28)) == 1)
    v14 = static Color.white.getter(v13);
  else
    v14 = static Color.primary.getter(v13);
  v15 = v14;
  result = swift_getKeyPath(&unk_100E2A990);
  *(_QWORD *)a2 = v19;
  *(_QWORD *)(a2 + 8) = 0x4010000000000000;
  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = v5;
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v7;
  *(_QWORD *)(a2 + 48) = v8;
  *(_BYTE *)(a2 + 56) = v9;
  *(_QWORD *)(a2 + 64) = v10;
  *(_QWORD *)(a2 + 72) = v11;
  *(_QWORD *)(a2 + 80) = v12;
  *(_QWORD *)(a2 + 88) = v18;
  *(_QWORD *)(a2 + 96) = v17;
  *(_QWORD *)(a2 + 104) = result;
  *(_QWORD *)(a2 + 112) = v15;
  return result;
}

uint64_t sub_1000C88C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t OpaqueTypeConformance2;
  unint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35[16];
  uint64_t v36;
  char v37[16];
  uint64_t v38;
  _QWORD v39[4];
  _QWORD v40[3];

  v2 = v1;
  v34 = a1;
  v3 = sub_100008B04(&qword_1014996F8);
  v30 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100008B04(&qword_101499700);
  v32 = *(_QWORD *)(v6 - 8);
  v33 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_100008B04(&qword_101499708);
  __chkstk_darwin(v31);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v29 - v12;
  v38 = v2;
  v36 = v2;
  v14 = sub_100008B04(&qword_101499710);
  v15 = sub_100008B04(&qword_101499718);
  v16 = sub_1000CCDDC(&qword_101499720, &qword_101499710, (uint64_t (*)(void))sub_1000CB250);
  v17 = sub_1000CB2D4();
  Menu.init(content:label:)(sub_1000CB240, v37, sub_1000CB248, v35, v14, v15, v16, v17);
  v18 = type metadata accessor for RefinementMenu(0);
  LOBYTE(v39[0]) = *(_BYTE *)(v2 + *(int *)(v18 + 28));
  v19 = sub_100010D70(&qword_101499758, &qword_1014996F8, (const char *)&protocol conformance descriptor for Menu<A, B>);
  v20 = sub_1000CB364();
  View.menuStyle<A>(_:)(v39, v3, &type metadata for RefinementMenuStyle, v19, v20);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v5, v3);
  v21 = (uint64_t *)(v2 + *(int *)(v18 + 20));
  v22 = v21[1];
  if (v22)
  {
    v23 = *v21;
    v24 = v22;
  }
  else
  {
    v23 = 0;
    v24 = 0xE000000000000000;
  }
  v40[0] = v23;
  v40[1] = v24;
  swift_bridgeObjectRetain(v22);
  v39[0] = v3;
  v39[1] = &type metadata for RefinementMenuStyle;
  v39[2] = v19;
  v39[3] = v20;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v39, &opaque type descriptor for <<opaque return type of View.menuStyle<A>(_:)>>, 1);
  v26 = sub_10006C008();
  v27 = v33;
  View.accessibilityLabel<A>(_:)(v40, v33, &type metadata for String, OpaqueTypeConformance2, v26);
  swift_bridgeObjectRelease(v24);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v8, v27);
  ModifiedContent<>.accessibilityIdentifier(_:)(0x656D656E69666552, 0xEE00756E654D746ELL, v31);
  sub_100010CC4((uint64_t)v10, &qword_101499708);
  return sub_1000207BC((uint64_t)v13, v34, &qword_101499708);
}

uint64_t sub_1000C8BC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v2 = type metadata accessor for RefinementMenu(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v18 = *(_QWORD *)(a1 + *(int *)(v5 + 36));
  v6 = v18;
  sub_1000202AC(a1, (uint64_t)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for RefinementMenu);
  v7 = *(unsigned __int8 *)(v3 + 80);
  v8 = (v7 + 16) & ~v7;
  v9 = swift_allocObject(&unk_1011A1700, v8 + v4, v7 | 7);
  sub_10003F29C((uint64_t)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v9 + v8, type metadata accessor for RefinementMenu);
  swift_bridgeObjectRetain(v6);
  v10 = sub_100008B04(&qword_101499768);
  v11 = type metadata accessor for UUID(0);
  v12 = type metadata accessor for SubmenuButton(0);
  v13 = sub_100010D70(&qword_101499770, &qword_101499768, (const char *)&protocol conformance descriptor for [A]);
  v14 = sub_10000BC84(&qword_101499750, type metadata accessor for SubmenuButton, (uint64_t)&unk_100E2AAF8);
  v15 = sub_10000BC84(&qword_101499778, type metadata accessor for RefinementsBarButtonViewModel.Submenu.Element, (uint64_t)"Uz7");
  return ForEach<>.init(_:content:)(&v18, sub_1000CB63C, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t sub_1000C8D50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t (**v35)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v6 = type metadata accessor for RefinementMenu(0);
  v39 = *(_QWORD *)(v6 - 8);
  v7 = *(_QWORD *)(v39 + 64);
  __chkstk_darwin(v6);
  v40 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (int *)type metadata accessor for SubmenuButton(0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = v9;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v11, a1, v8, v13);
  v16 = type metadata accessor for RefinementsBarButtonViewModel.Submenu.Element(0);
  v17 = (uint64_t *)(a1 + *(int *)(v16 + 20));
  v18 = *v17;
  v19 = v17[1];
  v20 = a2 + *(int *)(v6 + 36);
  v21 = *(_QWORD *)v20;
  v22 = 8;
  if (*(_BYTE *)(v20 + 16))
    v22 = 24;
  v23 = *(_QWORD *)(v21 + 16);
  v43 = v8;
  v44 = a3;
  v41 = v18;
  if (v23)
  {
    v38 = a2;
    v24 = *(_QWORD *)(v20 + v22);
    v25 = *(_QWORD *)(v16 - 8);
    v26 = v21 + ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80));
    v27 = *(_QWORD *)(v25 + 72);
    v37 = v19;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v21);
    while ((static UUID.== infix(_:_:)(v26, a1) & 1) == 0)
    {
      --v24;
      v26 += v27;
      if (!--v23)
      {
        swift_bridgeObjectRelease(v21);
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease(v21);
    LOBYTE(v23) = v24 == 0;
LABEL_10:
    v29 = v39;
    v30 = (uint64_t)v40;
    v28 = v37;
    a2 = v38;
  }
  else
  {
    v28 = v19;
    swift_bridgeObjectRetain(v19);
    v29 = v39;
    v30 = (uint64_t)v40;
  }
  sub_1000202AC(a2, v30, type metadata accessor for RefinementMenu);
  v31 = *(unsigned __int8 *)(v29 + 80);
  v32 = (v31 + 16) & ~v31;
  v33 = swift_allocObject(&unk_1011A1728, v32 + v7, v31 | 7);
  sub_10003F29C(v30, v33 + v32, type metadata accessor for RefinementMenu);
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v15, v11, v43);
  v34 = &v15[v12[5]];
  *(_QWORD *)v34 = v41;
  *((_QWORD *)v34 + 1) = v28;
  v15[v12[6]] = v23;
  v35 = (uint64_t (**)(uint64_t))&v15[v12[7]];
  *v35 = sub_1000CB744;
  v35[1] = (uint64_t (*)(uint64_t))v33;
  return sub_10003F29C((uint64_t)v15, v44, type metadata accessor for SubmenuButton);
}

void sub_1000C8FD4(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  double v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  char v37;

  v5 = static VerticalAlignment.center.getter(a3);
  v6 = sub_1000C90FC(a1, type metadata accessor for RefinementMenu, (uint64_t)&v29);
  v7 = v30;
  v8 = v31;
  v9 = v32;
  v27 = v33;
  v28 = v29;
  v26 = v34;
  v10 = v35;
  LOBYTE(a1) = static Edge.Set.horizontal.getter(v6);
  v11 = EdgeInsets.init(_all:)(12.0);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v37 = 0;
  v36 = 0;
  v19 = static Edge.Set.vertical.getter(v18);
  v20 = EdgeInsets.init(_all:)(7.0);
  v21 = v37;
  v22 = v36;
  LOBYTE(v29) = 0;
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = 0x4010000000000000;
  *(_BYTE *)(a2 + 16) = v21;
  *(_OWORD *)(a2 + 24) = v28;
  *(_QWORD *)(a2 + 40) = v7;
  *(_QWORD *)(a2 + 48) = v8;
  *(_BYTE *)(a2 + 56) = v9;
  *(_OWORD *)(a2 + 64) = v27;
  *(_OWORD *)(a2 + 80) = v26;
  *(_QWORD *)(a2 + 96) = v10;
  *(_BYTE *)(a2 + 104) = a1;
  *(double *)(a2 + 112) = v11;
  *(_QWORD *)(a2 + 120) = v13;
  *(_QWORD *)(a2 + 128) = v15;
  *(_QWORD *)(a2 + 136) = v17;
  *(_BYTE *)(a2 + 144) = v22;
  *(_BYTE *)(a2 + 152) = v19;
  *(double *)(a2 + 160) = v20;
  *(_QWORD *)(a2 + 168) = v23;
  *(_QWORD *)(a2 + 176) = v24;
  *(_QWORD *)(a2 + 184) = v25;
  *(_BYTE *)(a2 + 192) = v29;
}

uint64_t sub_1000C90FC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t KeyPath;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 v52;

  v5 = a2(0);
  v6 = v5;
  v7 = (uint64_t *)(a1 + *(int *)(v5 + 20));
  v8 = v7[1];
  if (v8)
  {
    v48 = *v7;
    v49 = v8;
    v9 = sub_10006C008();
    swift_bridgeObjectRetain(v8);
    v10 = Text.init<A>(_:)(&v48, &type metadata for String, v9);
    v12 = v11;
    v14 = v13;
    v16 = v15 & 1;
    v17 = static Font.subheadline.getter(v10);
    v41 = v6;
    v42 = a1;
    v18 = Text.font(_:)(v17, v10, v12, v16, v14);
    v20 = v19;
    v22 = v21;
    v24 = v23;
    swift_release();
    sub_10006B77C(v10, v12, v16);
    swift_bridgeObjectRelease(v14);
    v43 = v18;
    KeyPath = v20;
    v6 = v41;
    a1 = v42;
    v45 = v22 & 1;
    v46 = v24;
    v47 = 0;
LABEL_5:
    v30 = sub_100008B04(&qword_101495790);
    v31 = sub_1000CB5B4();
    _ConditionalContent<>.init(storage:)(&v43, &type metadata for Text, v30, &protocol witness table for Text, v31);
    v26 = v48;
    v32 = v49;
    v33 = v50;
    v34 = v51;
    v35 = v52;
    goto LABEL_6;
  }
  v25 = (uint64_t *)(a1 + *(int *)(v5 + 24));
  v26 = v25[1];
  if (v26)
  {
    v27 = *v25;
    swift_bridgeObjectRetain(v25[1]);
    v28 = Image.init(systemName:)(v27, v26);
    v29 = static Font.subheadline.getter(v28);
    v43 = v28;
    KeyPath = swift_getKeyPath(&unk_100E2A960);
    v45 = v29;
    v46 = 0;
    v47 = 1;
    goto LABEL_5;
  }
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = -1;
LABEL_6:
  if (*(_BYTE *)(a1 + *(int *)(v6 + 32)) == 1)
  {
    v36 = Image.init(systemName:)(0x2E6E6F7276656863, 0xEC0000006E776F64);
    v37 = static Font.caption2.getter();
    v38 = swift_getKeyPath(&unk_100E2A960);
    v39 = 0x3FF0000000000000;
  }
  else
  {
    v36 = 0;
    v38 = 0;
    v37 = 0;
    v39 = 0;
  }
  *(_QWORD *)a3 = v26;
  *(_QWORD *)(a3 + 8) = v32;
  *(_QWORD *)(a3 + 16) = v33;
  *(_QWORD *)(a3 + 24) = v34;
  *(_BYTE *)(a3 + 32) = v35;
  *(_QWORD *)(a3 + 40) = v36;
  *(_QWORD *)(a3 + 48) = v38;
  *(_QWORD *)(a3 + 56) = v37;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = v39;
  sub_1000CB3A8(v26, v32, v33, v34, v35);
  sub_1000CB428(v36, v38, v37);
  sub_1000CB464(v36, v38, v37);
  return sub_1000CB49C(v26, v32, v33, v34, v35);
}

uint64_t sub_1000C938C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t KeyPath;
  uint64_t *v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  char v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  _OWORD *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t);
  uint64_t v59;
  char *v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  _OWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  _QWORD *v106;
  _OWORD v107[2];
  uint64_t v108;

  v105 = a2;
  v91 = a1;
  v103 = a3;
  v4 = type metadata accessor for AccessibilityTraits(0, a4);
  v101 = *(_QWORD *)(v4 - 8);
  v102 = v4;
  __chkstk_darwin(v4);
  v100 = (char *)&v88 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v104);
  v99 = (char *)&v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v95 = (char *)&v88 - v8;
  v9 = sub_100008B04(&qword_101495850);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for MenuStyleConfiguration(0, v10);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v88 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100008B04(&qword_1014999D8);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v88 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100008B04(&qword_1014999E0);
  __chkstk_darwin(v21);
  v23 = (char *)&v88 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_100008B04(&qword_1014999E8);
  __chkstk_darwin(v89);
  v25 = (char *)&v88 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v90 = sub_100008B04(&qword_1014999F0);
  __chkstk_darwin(v90);
  v93 = (uint64_t)&v88 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_100008B04(&qword_1014999F8);
  __chkstk_darwin(v92);
  v94 = (char *)&v88 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_100008B04(&qword_101499A00);
  __chkstk_darwin(v97);
  v98 = (char *)&v88 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_100008B04(&qword_101499A08);
  v30 = __chkstk_darwin(v29);
  v96 = (char *)&v88 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v14 + 16))(v16, v91, v13, v30);
  v32 = Menu<>.init(_:)(v16);
  if ((v105 & 1) != 0)
    v33 = static Color.white.getter(v32);
  else
    v33 = static Color.primary.getter(v32);
  v34 = v33;
  KeyPath = swift_getKeyPath(&unk_100E2A990);
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v23, v20, v17);
  v36 = (uint64_t *)&v23[*(int *)(v21 + 36)];
  *v36 = KeyPath;
  v36[1] = v34;
  v37 = (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  if ((v105 & 1) != 0)
  {
    v38 = 0.0;
    v39 = static Color.blue.getter(v37);
  }
  else
  {
    v38 = 1.0;
    v39 = static Color.clear.getter(v37);
  }
  v41 = v39;
  v42 = static Edge.Set.all.getter(v40);
  sub_10000C1FC((uint64_t)v23, (uint64_t)v25, &qword_1014999E0);
  v43 = &v25[*(int *)(v89 + 36)];
  *(_QWORD *)v43 = v41;
  v43[8] = v42;
  v44 = sub_100010CC4((uint64_t)v23, &qword_1014999E0);
  v45 = static Font.subheadline.getter(v44);
  v46 = swift_getKeyPath(&unk_100E2A960);
  v47 = v93;
  sub_10000C1FC((uint64_t)v25, v93, &qword_1014999E8);
  v48 = (uint64_t *)(v47 + *(int *)(v90 + 36));
  *v48 = v46;
  v48[1] = v45;
  sub_100010CC4((uint64_t)v25, &qword_1014999E8);
  v49 = v95;
  v50 = &v95[*(int *)(v104 + 20)];
  v51 = enum case for RoundedCornerStyle.continuous(_:);
  LODWORD(v91) = enum case for RoundedCornerStyle.continuous(_:);
  v52 = type metadata accessor for RoundedCornerStyle(0);
  v53 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 104);
  v53(v50, v51, v52);
  __asm { FMOV            V0.2D, #16.0 }
  v90 = _Q0;
  *v49 = _Q0;
  v59 = Color.init(uiColor:)(objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.780392157, 0.780392157, 0.8, 1.0));
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v107, 0, 0, _swiftEmptyArrayStorage, v38, 10.0, 0.0);
  sub_1000202AC((uint64_t)v49, (uint64_t)v12, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v60 = &v12[*(int *)(sub_100008B04(&qword_101495878) + 36)];
  v61 = v107[1];
  *(_OWORD *)v60 = v107[0];
  *((_OWORD *)v60 + 1) = v61;
  *((_QWORD *)v60 + 4) = v108;
  v62 = sub_100008B04(&qword_101495880);
  *(_QWORD *)&v12[*(int *)(v62 + 52)] = v59;
  *(_WORD *)&v12[*(int *)(v62 + 56)] = 256;
  v63 = static Alignment.center.getter(v62);
  v65 = v64;
  v66 = (uint64_t *)&v12[*(int *)(sub_100008B04(&qword_101495888) + 36)];
  *v66 = v63;
  v66[1] = v65;
  v67 = sub_1000202F0((uint64_t)v49, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v68 = static Alignment.center.getter(v67);
  v70 = v69;
  v71 = (uint64_t)v94;
  v72 = (uint64_t)&v94[*(int *)(v92 + 36)];
  sub_10000C1FC((uint64_t)v12, v72, &qword_101495850);
  v73 = (uint64_t *)(v72 + *(int *)(sub_100008B04(&qword_101495890) + 36));
  *v73 = v68;
  v73[1] = v70;
  sub_10000C1FC(v47, v71, &qword_1014999F0);
  sub_100010CC4((uint64_t)v12, &qword_101495850);
  sub_100010CC4(v47, &qword_1014999F0);
  v74 = v99;
  v53(&v99[*(int *)(v104 + 20)], v91, v52);
  *v74 = v90;
  v76 = v97;
  v75 = (uint64_t)v98;
  v77 = (uint64_t)&v98[*(int *)(v97 + 36)];
  sub_1000202AC((uint64_t)v74, v77, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v77 + *(int *)(sub_100008B04(&qword_101494DD0) + 36)) = 256;
  sub_10000C1FC(v71, v75, &qword_1014999F8);
  sub_1000202F0((uint64_t)v74, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v78 = sub_100010CC4(v71, &qword_1014999F8);
  if ((v105 & 1) != 0)
  {
    v79 = v100;
    static AccessibilityTraits.isSelected.getter(v78);
    v80 = v102;
  }
  else
  {
    v106 = _swiftEmptyArrayStorage;
    v81 = sub_10000BC84(&qword_101499800, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityTraits, (uint64_t)&protocol conformance descriptor for AccessibilityTraits);
    v82 = sub_100008B04((uint64_t *)&unk_10149CE50);
    v83 = sub_100010D70(&qword_101499808, (uint64_t *)&unk_10149CE50, (const char *)&protocol conformance descriptor for [A]);
    v79 = v100;
    v84 = v82;
    v80 = v102;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v106, v84, v83, v102, v81);
  }
  v85 = sub_1000CC968();
  v86 = (uint64_t)v96;
  View.accessibility(addTraits:)(v79, v76, v85);
  (*(void (**)(char *, uint64_t))(v101 + 8))(v79, v80);
  sub_100010CC4(v75, &qword_101499A00);
  return sub_1000207BC(v86, v103, &qword_101499A08);
}

uint64_t sub_1000C9B20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  unsigned __int8 *v3;

  return sub_1000C938C(a1, *v3, a2, a3);
}

uint64_t sub_1000C9B28@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39[16];
  uint64_t v40;
  _QWORD *v41;

  v38 = a1;
  v3 = type metadata accessor for AccessibilityTraits(0, a2);
  v4 = *(_QWORD *)(v3 - 8);
  v36 = v3;
  v37 = v4;
  __chkstk_darwin(v3);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SubmenuButton(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_100008B04(&qword_1014999A8);
  v35 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100008B04(&qword_1014999B0);
  __chkstk_darwin(v34);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v33 - v16;
  sub_1000202AC(v2, (uint64_t)v10, type metadata accessor for SubmenuButton);
  v18 = *(unsigned __int8 *)(v8 + 80);
  v19 = (v18 + 16) & ~v18;
  v20 = swift_allocObject(&unk_1011A1840, v19 + v9, v18 | 7);
  sub_10003F29C((uint64_t)v10, v20 + v19, type metadata accessor for SubmenuButton);
  v40 = v2;
  v21 = sub_100008B04(&qword_1014999B8);
  v22 = sub_1000CC8DC();
  v24 = Button.init(action:label:)(sub_1000CC88C, v20, sub_1000CC8D4, v39, v21, v22, v23);
  if (*(_BYTE *)(v2 + *(int *)(v7 + 24)) == 1)
  {
    static AccessibilityTraits.isSelected.getter(v24);
    v25 = v36;
  }
  else
  {
    v41 = _swiftEmptyArrayStorage;
    v26 = sub_10000BC84(&qword_101499800, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityTraits, (uint64_t)&protocol conformance descriptor for AccessibilityTraits);
    v27 = sub_100008B04((uint64_t *)&unk_10149CE50);
    v28 = sub_100010D70(&qword_101499808, (uint64_t *)&unk_10149CE50, (const char *)&protocol conformance descriptor for [A]);
    v29 = v36;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v41, v27, v28, v36, v26);
    v25 = v29;
  }
  v30 = sub_100010D70(&qword_1014999C8, &qword_1014999A8, (const char *)&protocol conformance descriptor for Button<A>);
  v31 = v33;
  View.accessibility(addTraits:)(v6, v33, v30);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v6, v25);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v12, v31);
  ModifiedContent<>.accessibilityIdentifier(_:)(0xD000000000000017, 0x8000000100E47C20, v34);
  sub_100010CC4((uint64_t)v14, &qword_1014999B0);
  return sub_1000207BC((uint64_t)v17, v38, &qword_1014999B0);
}

uint64_t sub_1000C9E48(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];

  v2 = sub_100008B04(&qword_1014999D0);
  __chkstk_darwin(v2);
  v4 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008B04((uint64_t *)&unk_10149D230);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SubmenuButton(0);
  if (*(_BYTE *)(a1 + *(int *)(v9 + 24)) == 1)
  {
    v10 = __chkstk_darwin(v9);
    v20[-2] = a1;
    Label.init(title:icon:)(sub_1000CC960, v10);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v4, v8, v5);
    swift_storeEnumTagMultiPayload(v4, v2, 0);
    v11 = sub_100010D70(&qword_10149D250, (uint64_t *)&unk_10149D230, (const char *)&protocol conformance descriptor for Label<A, B>);
    _ConditionalContent<>.init(storage:)(v4, v5, &type metadata for Text, v11, &protocol witness table for Text);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  else
  {
    v13 = (_QWORD *)(a1 + *(int *)(v9 + 20));
    v14 = v13[1];
    v20[0] = *v13;
    v20[1] = v14;
    v15 = sub_10006C008();
    swift_bridgeObjectRetain(v14);
    *(_QWORD *)v4 = Text.init<A>(_:)(v20, &type metadata for String, v15);
    *((_QWORD *)v4 + 1) = v16;
    v4[16] = v17 & 1;
    *((_QWORD *)v4 + 3) = v18;
    swift_storeEnumTagMultiPayload(v4, v2, 1);
    v19 = sub_100010D70(&qword_10149D250, (uint64_t *)&unk_10149D230, (const char *)&protocol conformance descriptor for Label<A, B>);
    return _ConditionalContent<>.init(storage:)(v4, v5, &type metadata for Text, v19, &protocol witness table for Text);
  }
}

uint64_t sub_1000CA090@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD v10[2];

  v3 = (_QWORD *)(a1 + *(int *)(type metadata accessor for SubmenuButton(0) + 20));
  v4 = v3[1];
  v10[0] = *v3;
  v10[1] = v4;
  v5 = sub_10006C008();
  swift_bridgeObjectRetain(v4);
  result = Text.init<A>(_:)(v10, &type metadata for String, v5);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v7;
  *(_BYTE *)(a2 + 16) = v8 & 1;
  *(_QWORD *)(a2 + 24) = v9;
  return result;
}

uint64_t sub_1000CA10C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Image.init(systemName:)(0x72616D6B63656863, 0xE90000000000006BLL);
  *a1 = result;
  return result;
}

uint64_t sub_1000CA14C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  __n128 v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t KeyPath;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __n128 v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  char *v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t OpaqueTypeConformance2;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  char *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char v141[16];
  uint64_t v142;
  _QWORD v143[4];
  _OWORD v144[2];
  uint64_t v145;

  v2 = v1;
  v139 = a1;
  v3 = sub_100008B04(&qword_101493178);
  __chkstk_darwin(v3);
  v138 = (uint64_t)&v117 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v136 = (char *)&v117 - v6;
  v8 = __chkstk_darwin(v7);
  v137 = (char *)&v117 - v9;
  v135 = type metadata accessor for AccessibilityTraits(0, v8);
  v134 = *(_QWORD *)(v135 - 8);
  __chkstk_darwin(v135);
  v133 = (char *)&v117 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Capsule(0);
  __chkstk_darwin(v11);
  v124 = (uint64_t)&v117 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100008B04(&qword_101499810);
  __chkstk_darwin(v13);
  v15 = (char *)&v117 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = type metadata accessor for RefinementMultiSelectButton(0);
  v16 = *(_QWORD *)(v121 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  __chkstk_darwin(v121);
  v18 = (char *)&v117 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100008B04(&qword_101499818);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v117 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = sub_100008B04(&qword_101499820);
  __chkstk_darwin(v118);
  v24 = (char *)&v117 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = sub_100008B04(&qword_101499828);
  __chkstk_darwin(v120);
  v117 = (uint64_t)&v117 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = sub_100008B04(&qword_101499830);
  __chkstk_darwin(v119);
  v122 = (char *)&v117 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = sub_100008B04(&qword_101499838);
  __chkstk_darwin(v140);
  v123 = (char *)&v117 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = sub_100008B04(&qword_101499840);
  v126 = *(_QWORD *)(v127 - 8);
  __chkstk_darwin(v127);
  v125 = (char *)&v117 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_100008B04(&qword_101499848);
  __chkstk_darwin(v29);
  v128 = (uint64_t)&v117 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v130 = (char *)&v117 - v32;
  v132 = sub_100008B04(&qword_101499850);
  __chkstk_darwin(v132);
  v131 = (char *)&v117 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100008B04(&qword_101499858);
  __chkstk_darwin(v34);
  v129 = (char *)&v117 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000202AC(v2, (uint64_t)v18, type metadata accessor for RefinementMultiSelectButton);
  v36 = *(unsigned __int8 *)(v16 + 80);
  v37 = (v36 + 16) & ~v36;
  v38 = swift_allocObject(&unk_1011A1778, v37 + v17, v36 | 7);
  sub_10003F29C((uint64_t)v18, v38 + v37, type metadata accessor for RefinementMultiSelectButton);
  v142 = v2;
  v39 = sub_100008B04(&qword_101499860);
  v40 = sub_1000CBC44();
  v42 = Button.init(action:label:)(sub_1000CBC28, v38, sub_1000CBC3C, v141, v39, v40, v41);
  LOBYTE(v39) = static Edge.Set.vertical.getter(v42);
  v43 = EdgeInsets.init(_all:)(-8.0);
  v45 = v44;
  v47 = v46;
  v49 = v48;
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v24, v22, v19);
  v50 = &v24[*(int *)(v118 + 36)];
  *v50 = v39;
  *((double *)v50 + 1) = v43;
  *((_QWORD *)v50 + 2) = v45;
  *((_QWORD *)v50 + 3) = v47;
  *((_QWORD *)v50 + 4) = v49;
  v50[40] = 0;
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  KeyPath = swift_getKeyPath(&unk_100E2A9C0);
  v52 = swift_getKeyPath(&unk_100E2A9E8);
  swift_retain();
  static Published.subscript.getter(v144, v53, KeyPath, v52);
  swift_release();
  swift_release();
  v54 = swift_release();
  if (LOBYTE(v144[0]) == 1)
    v55 = static Color.blue.getter(v54);
  else
    v55 = static Color.clear.getter(v54);
  v57 = v55;
  v58 = static Edge.Set.all.getter(v56);
  v59 = v117;
  sub_10000C1FC((uint64_t)v24, v117, &qword_101499820);
  v60 = v59 + *(int *)(v120 + 36);
  *(_QWORD *)v60 = v57;
  *(_BYTE *)(v60 + 8) = v58;
  sub_100010CC4((uint64_t)v24, &qword_101499820);
  v61 = v2 + *(int *)(v121 + 20);
  v62 = (uint64_t)v122;
  v63 = (uint64_t)&v122[*(int *)(v119 + 36)];
  sub_1000202AC(v61, v63, (uint64_t (*)(_QWORD))&type metadata accessor for Capsule);
  *(_WORD *)(v63 + *(int *)(sub_100008B04(&qword_101499880) + 36)) = 256;
  sub_1000207BC(v59, v62, &qword_101499828);
  v64 = v124;
  sub_1000202AC(v61, v124, (uint64_t (*)(_QWORD))&type metadata accessor for Capsule);
  v65 = Color.init(uiColor:)(objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.780392157, 0.780392157, 0.8, 1.0));
  v66 = swift_getKeyPath(&unk_100E2A9C0);
  v67 = swift_getKeyPath(&unk_100E2A9E8);
  swift_retain();
  static Published.subscript.getter(v144, v68, v66, v67);
  swift_release();
  swift_release();
  swift_release();
  v69 = 0.5;
  if (LOBYTE(v144[0]))
    v69 = 0.0;
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v144, 0, 0, _swiftEmptyArrayStorage, v69, 10.0, 0.0);
  sub_1000202AC(v64, (uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for Capsule);
  v70 = &v15[*(int *)(sub_100008B04(&qword_101499888) + 36)];
  v71 = v144[1];
  *(_OWORD *)v70 = v144[0];
  *((_OWORD *)v70 + 1) = v71;
  *((_QWORD *)v70 + 4) = v145;
  v72 = sub_100008B04(&qword_101499890);
  *(_QWORD *)&v15[*(int *)(v72 + 52)] = v65;
  *(_WORD *)&v15[*(int *)(v72 + 56)] = 256;
  v73 = static Alignment.center.getter(v72);
  v75 = v74;
  v76 = (uint64_t *)&v15[*(int *)(sub_100008B04(&qword_101499898) + 36)];
  *v76 = v73;
  v76[1] = v75;
  v77 = sub_1000202F0(v64, (uint64_t (*)(_QWORD))&type metadata accessor for Capsule);
  v78 = static Alignment.center.getter(v77);
  v80 = v79;
  v81 = v140;
  v82 = (uint64_t)v123;
  v83 = (uint64_t)&v123[*(int *)(v140 + 36)];
  sub_10000C1FC((uint64_t)v15, v83, &qword_101499810);
  v84 = (uint64_t *)(v83 + *(int *)(sub_100008B04(&qword_1014998A0) + 36));
  *v84 = v78;
  v84[1] = v80;
  sub_10000C1FC(v62, v82, &qword_101499830);
  sub_100010CC4((uint64_t)v15, &qword_101499810);
  sub_100010CC4(v62, &qword_101499830);
  v85 = sub_1000CBCE8();
  v86 = sub_1000CBB08();
  v87 = v125;
  View.buttonStyle<A>(_:)(v86, v81, &type metadata for RefinementButtonStyle, v85, v86);
  sub_100010CC4(v82, &qword_101499838);
  v88 = swift_getKeyPath(&unk_100E2A9C0);
  v89 = swift_getKeyPath(&unk_100E2A9E8);
  swift_retain();
  static Published.subscript.getter(v143, v90, v88, v89);
  swift_release();
  swift_release();
  v91 = swift_release();
  if (LOBYTE(v143[0]) == 1)
  {
    v92 = v133;
    static AccessibilityTraits.isSelected.getter(v91);
    v93 = v135;
  }
  else
  {
    v143[0] = _swiftEmptyArrayStorage;
    v94 = sub_10000BC84(&qword_101499800, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityTraits, (uint64_t)&protocol conformance descriptor for AccessibilityTraits);
    v95 = sub_100008B04((uint64_t *)&unk_10149CE50);
    v96 = sub_100010D70(&qword_101499808, (uint64_t *)&unk_10149CE50, (const char *)&protocol conformance descriptor for [A]);
    v92 = v133;
    v97 = v95;
    v93 = v135;
    dispatch thunk of SetAlgebra.init<A>(_:)(v143, v97, v96, v135, v94);
  }
  v143[0] = v140;
  v143[1] = &type metadata for RefinementButtonStyle;
  v143[2] = v85;
  v143[3] = v86;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v143, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v99 = (uint64_t)v130;
  v100 = v127;
  View.accessibility(addTraits:)(v92, v127, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v134 + 8))(v92, v93);
  (*(void (**)(char *, uint64_t))(v126 + 8))(v87, v100);
  v101 = enum case for ContentSizeCategory.accessibilityLarge(_:);
  v102 = type metadata accessor for ContentSizeCategory(0);
  v103 = *(_QWORD *)(v102 - 8);
  v104 = (uint64_t)v137;
  (*(void (**)(char *, uint64_t, uint64_t))(v103 + 104))(v137, v101, v102);
  v105 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v103 + 56);
  v105(v104, 0, 1, v102);
  v106 = (uint64_t)v136;
  v105((uint64_t)v136, 1, 1, v102);
  v107 = v138;
  sub_10000C1FC(v104, v138, &qword_101493178);
  v108 = v128;
  sub_10000C1FC(v99, v128, &qword_101499848);
  v109 = swift_getKeyPath(&unk_100E2AA08);
  v110 = v132;
  v111 = (uint64_t)v131;
  v112 = (uint64_t *)&v131[*(int *)(v132 + 40)];
  *v112 = v109;
  v113 = sub_100008B04(&qword_101493180);
  swift_storeEnumTagMultiPayload(v112, v113, 0);
  sub_1000207BC(v106, v111, &qword_101493178);
  sub_1000207BC(v107, v111 + *(int *)(v110 + 36), &qword_101493178);
  sub_1000207BC(v108, v111 + *(int *)(v110 + 44), &qword_101499848);
  sub_100010CC4(v104, &qword_101493178);
  sub_100010CC4(v99, &qword_101499848);
  v114 = sub_100010D70(&qword_1014998E0, &qword_101499850, "A{7");
  v115 = (uint64_t)v129;
  View.accessibilityIdentifier(_:)(0xD00000000000001BLL, 0x8000000100E2A7A0, v110, v114);
  sub_100010CC4(v111, &qword_101499850);
  return sub_1000207BC(v115, v139, &qword_101499858);
}

uint64_t sub_1000CAD18(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t (*v9)(__n128);
  __n128 v10;
  uint64_t result;
  uint64_t v12;
  __n128 v13;
  _BYTE v14[15];
  uint64_t v15;

  v2 = type metadata accessor for RefinementMultiSelectButton(0);
  __chkstk_darwin(v2);
  v4 = &v14[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  KeyPath = swift_getKeyPath(&unk_100E2A9C0);
  v6 = swift_getKeyPath(&unk_100E2A9E8);
  swift_retain();
  static Published.subscript.getter(&v15, v7, KeyPath, v6);
  swift_release();
  swift_release();
  swift_release();
  v8 = v15;
  sub_1000202AC(a1, (uint64_t)v4, type metadata accessor for RefinementMultiSelectButton);
  if (v8 == 1)
  {
    sub_1000202F0((uint64_t)v4, type metadata accessor for RefinementMultiSelectButton);
  }
  else
  {
    v9 = *(uint64_t (**)(__n128))(*((_QWORD *)v4 + 1)
                                          + OBJC_IVAR____TtC4Maps35RefinementsMultiSelectCellViewModel_allowsSelection);
    v10 = swift_retain();
    LOBYTE(v9) = v9(v10);
    swift_release();
    result = sub_1000202F0((uint64_t)v4, type metadata accessor for RefinementMultiSelectButton);
    if ((v9 & 1) == 0)
      return result;
  }
  v12 = static Animation.easeInOut(duration:)(0.2);
  v13 = __chkstk_darwin(v12);
  *(_QWORD *)&v14[-16] = a1;
  withAnimation<A>(_:_:)(v13);
  return swift_release();
}

uint64_t sub_1000CAEAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(BOOL);
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 8);
  v3 = *(void (**)(BOOL))(v1 + OBJC_IVAR____TtC4Maps35RefinementsMultiSelectCellViewModel_tapHandler);
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps35RefinementsMultiSelectCellViewModel_tapHandler + 8);
  KeyPath = swift_getKeyPath(&unk_100E2A9C0);
  v5 = swift_getKeyPath(&unk_100E2A9E8);
  swift_retain(v2);
  v6 = swift_retain(v1);
  static Published.subscript.getter(&v8, v6, KeyPath, v5);
  swift_release(v1);
  swift_release(KeyPath);
  swift_release(v5);
  v3((v8 & 1) == 0);
  return swift_release(v2);
}

double sub_1000CAF70@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t KeyPath;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  double result;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[151];
  char v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;

  v5 = static VerticalAlignment.center.getter(a3);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(v6 + 24);
  v40 = v5;
  *(_QWORD *)v41 = *(_QWORD *)(v6 + 16);
  *(_QWORD *)&v41[8] = v7;
  v8 = sub_10006C008();
  swift_bridgeObjectRetain(v7);
  v9 = Text.init<A>(_:)(v41, &type metadata for String, v8);
  v11 = v10;
  v13 = v12;
  v15 = v14 & 1;
  v16 = static Font.body.getter();
  v17 = Text.font(_:)(v16, v9, v11, v15, v13);
  v39 = v18;
  LOBYTE(v7) = v19;
  v21 = v20;
  swift_release();
  LOBYTE(v7) = v7 & 1;
  sub_10006B77C(v9, v11, v15);
  v22 = swift_bridgeObjectRelease(v13);
  v23 = *(double *)(v6 + OBJC_IVAR____TtC4Maps35RefinementsMultiSelectCellViewModel_maxWidth) + -8.0;
  v24 = static Alignment.center.getter(v22);
  sub_1000C7658(0, 1, 0.0, 1, v23, 0, 0, 1, (uint64_t)v41, v26, 0.0, 1, 0.0, 1, v24, v25, v17, v39, v7, v21);
  sub_10006B77C(v17, v39, v7);
  swift_bridgeObjectRelease(v21);
  v49 = *(_OWORD *)&v41[96];
  v50 = *(_OWORD *)&v41[112];
  v51 = *(_OWORD *)&v41[128];
  v45 = *(_OWORD *)&v41[32];
  v46 = *(_OWORD *)&v41[48];
  v47 = *(_OWORD *)&v41[64];
  v48 = *(_OWORD *)&v41[80];
  v43 = *(_OWORD *)v41;
  v44 = *(_OWORD *)&v41[16];
  KeyPath = swift_getKeyPath(&unk_100E2A9C0);
  v28 = swift_getKeyPath(&unk_100E2A9E8);
  swift_retain();
  static Published.subscript.getter(v41, v29, KeyPath, v28);
  swift_release();
  swift_release();
  v30 = swift_release();
  if (v41[0] == 1)
    v31 = static Color.white.getter(v30);
  else
    v31 = static Color.primary.getter(v30);
  v32 = v31;
  *(_OWORD *)&v41[87] = v48;
  *(_OWORD *)&v41[103] = v49;
  *(_OWORD *)&v41[119] = v50;
  *(_OWORD *)&v41[135] = v51;
  *(_OWORD *)&v41[23] = v44;
  *(_OWORD *)&v41[39] = v45;
  *(_OWORD *)&v41[55] = v46;
  *(_OWORD *)&v41[71] = v47;
  v42 = 0;
  *(_OWORD *)&v41[7] = v43;
  v33 = swift_getKeyPath(&unk_100E2A990);
  v34 = *(_OWORD *)&v41[112];
  *(_OWORD *)(a2 + 113) = *(_OWORD *)&v41[96];
  *(_OWORD *)(a2 + 129) = v34;
  *(_OWORD *)(a2 + 145) = *(_OWORD *)&v41[128];
  v35 = *(_OWORD *)&v41[48];
  *(_OWORD *)(a2 + 49) = *(_OWORD *)&v41[32];
  *(_OWORD *)(a2 + 65) = v35;
  v36 = *(_OWORD *)&v41[80];
  *(_OWORD *)(a2 + 81) = *(_OWORD *)&v41[64];
  *(_OWORD *)(a2 + 97) = v36;
  result = *(double *)v41;
  v38 = *(_OWORD *)&v41[16];
  *(_OWORD *)(a2 + 17) = *(_OWORD *)v41;
  *(_QWORD *)a2 = v40;
  *(_QWORD *)(a2 + 8) = 0x4010000000000000;
  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 160) = *(_QWORD *)&v41[143];
  *(_OWORD *)(a2 + 33) = v38;
  *(_WORD *)(a2 + 168) = 1;
  *(_QWORD *)(a2 + 176) = v33;
  *(_QWORD *)(a2 + 184) = v32;
  return result;
}

uint64_t sub_1000CB220(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_101067FC8, 1);
}

uint64_t sub_1000CB230(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_101067FA0, 1);
}

uint64_t sub_1000CB240()
{
  uint64_t v0;

  return sub_1000C8BC0(*(_QWORD *)(v0 + 16));
}

void sub_1000CB248(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;

  sub_1000C8FD4(*(_QWORD *)(v2 + 16), a1, a2);
}

unint64_t sub_1000CB250()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101499728;
  if (!qword_101499728)
  {
    v1 = sub_10000E5D4(&qword_101499730);
    v2[0] = sub_100010D70(&qword_101499738, &qword_101499740, (const char *)&protocol conformance descriptor for HStack<A>);
    v2[1] = &protocol witness table for _PaddingLayout;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101499728);
  }
  return result;
}

unint64_t sub_1000CB2D4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_101499748;
  if (!qword_101499748)
  {
    v1 = sub_10000E5D4(&qword_101499718);
    v2 = sub_10000BC84(&qword_101499750, type metadata accessor for SubmenuButton, (uint64_t)&unk_100E2AAF8);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ForEach<A, B, C>, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_101499748);
  }
  return result;
}

uint64_t type metadata accessor for SubmenuButton(uint64_t a1)
{
  return sub_100021D9C(a1, qword_101499950, (uint64_t)&nominal type descriptor for SubmenuButton);
}

unint64_t sub_1000CB364()
{
  unint64_t result;

  result = qword_101499760;
  if (!qword_101499760)
  {
    result = swift_getWitnessTable(byte_100E2AAC0, &type metadata for RefinementMenuStyle);
    atomic_store(result, (unint64_t *)&qword_101499760);
  }
  return result;
}

void sub_1000CB3A8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 != 255)
    sub_1000CB3C0(a1, a2, a3, a4, a5 & 1);
}

void sub_1000CB3C0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0)
  {
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    sub_10006BB40(a1, a2, a3 & 1);
    swift_bridgeObjectRetain(a4);
  }
}

uint64_t sub_1000CB428(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (result)
  {
    v4 = result;
    swift_retain(a3);
    swift_retain(v4);
    return swift_retain(a2);
  }
  return result;
}

uint64_t sub_1000CB464(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    swift_release(result);
    swift_release(a2);
    return swift_release(a3);
  }
  return result;
}

uint64_t sub_1000CB49C(uint64_t result, uint64_t a2, char a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 != 255)
    return sub_1000CB4B4(result, a2, a3, a4, a5 & 1);
  return result;
}

uint64_t sub_1000CB4B4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    sub_10006B77C(a1, a2, a3 & 1);
    return swift_bridgeObjectRelease(a4);
  }
}

uint64_t sub_1000CB514@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000CB53C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000CB564(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_1000CB58C(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

unint64_t sub_1000CB5B4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101495788;
  if (!qword_101495788)
  {
    v1 = sub_10000E5D4(&qword_101495790);
    v2[0] = &protocol witness table for Image;
    v2[1] = sub_100010D70((unint64_t *)&unk_101495710, (uint64_t *)&unk_10149D520, (const char *)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101495788);
  }
  return result;
}

uint64_t sub_1000CB63C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for RefinementMenu(0) - 8) + 80);
  return sub_1000C8D50(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t sub_1000CB68C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = (int *)type metadata accessor for RefinementMenu(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[9]));
  swift_release();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000CB744(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for RefinementMenu(0);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + ((v4 + 16) & ~v4) + *(int *)(v3 + 40)))(v1 + ((v4 + 16) & ~v4), a1);
}

uint64_t sub_1000CB794()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for RefinementBarButton(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + *(int *)(v1 + 20) + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + *(int *)(v1 + 24) + 8));
  swift_release();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000CB840()
{
  return sub_10006EC34(type metadata accessor for RefinementBarButton, sub_1000C8774);
}

uint64_t sub_1000CB854@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;

  return sub_1000C87DC(*(_QWORD *)(v2 + 16), a1, a2);
}

unint64_t sub_1000CB85C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1014997C0;
  if (!qword_1014997C0)
  {
    v1 = sub_10000E5D4(&qword_1014997B8);
    v2[0] = sub_100010D70(&qword_101499738, &qword_101499740, (const char *)&protocol conformance descriptor for HStack<A>);
    v2[1] = sub_100010D70((unint64_t *)&unk_101494DC0, &qword_10149D530, (const char *)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_1014997C0);
  }
  return result;
}

unint64_t sub_1000CB8F8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1014997C8;
  if (!qword_1014997C8)
  {
    v1 = sub_10000E5D4(&qword_1014997A0);
    v2[0] = sub_1000CB97C();
    v2[1] = sub_100010D70((unint64_t *)&unk_101494E00, &qword_101494DD0, (const char *)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_1014997C8);
  }
  return result;
}

unint64_t sub_1000CB97C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1014997D0;
  if (!qword_1014997D0)
  {
    v1 = sub_10000E5D4(&qword_101499798);
    v2[0] = sub_1000CBA00();
    v2[1] = sub_100010D70((unint64_t *)&unk_101495E10, &qword_10149CED0, (const char *)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_1014997D0);
  }
  return result;
}

unint64_t sub_1000CBA00()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1014997D8;
  if (!qword_1014997D8)
  {
    v1 = sub_10000E5D4(&qword_101499790);
    v2[0] = sub_1000CBA84();
    v2[1] = sub_100010D70(&qword_1014997F0, &qword_101495890, (const char *)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_1014997D8);
  }
  return result;
}

unint64_t sub_1000CBA84()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1014997E0;
  if (!qword_1014997E0)
  {
    v1 = sub_10000E5D4(&qword_101499788);
    v2[0] = sub_100010D70(&qword_1014997E8, &qword_101499780, (const char *)&protocol conformance descriptor for Button<A>);
    v2[1] = &protocol witness table for _PaddingLayout;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_1014997E0);
  }
  return result;
}

unint64_t sub_1000CBB08()
{
  unint64_t result;

  result = qword_1014997F8;
  if (!qword_1014997F8)
  {
    result = swift_getWitnessTable(")n7", &type metadata for RefinementButtonStyle);
    atomic_store(result, (unint64_t *)&qword_1014997F8);
  }
  return result;
}

uint64_t sub_1000CBB54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = type metadata accessor for RefinementBarButton(0);
  return (*(uint64_t (**)(uint64_t))(v1 + *(int *)(v2 + 36)))(v1);
}

uint64_t sub_1000CBB9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for RefinementMultiSelectButton(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  swift_release();
  v8 = v7 + *(int *)(v1 + 20);
  v9 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000CBC28()
{
  return sub_10006EC34(type metadata accessor for RefinementMultiSelectButton, sub_1000CAD18);
}

double sub_1000CBC3C@<D0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;

  return sub_1000CAF70(*(_QWORD *)(v2 + 16), a1, a2);
}

unint64_t sub_1000CBC44()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101499868;
  if (!qword_101499868)
  {
    v1 = sub_10000E5D4(&qword_101499860);
    v2[0] = sub_100010D70(&qword_101499870, &qword_101499878, (const char *)&protocol conformance descriptor for HStack<A>);
    v2[1] = sub_100010D70((unint64_t *)&unk_101494DC0, &qword_10149D530, (const char *)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101499868);
  }
  return result;
}

unint64_t sub_1000CBCE8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1014998A8;
  if (!qword_1014998A8)
  {
    v1 = sub_10000E5D4(&qword_101499838);
    v2[0] = sub_1000CBD6C();
    v2[1] = sub_100010D70(&qword_1014998D8, &qword_1014998A0, (const char *)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_1014998A8);
  }
  return result;
}

unint64_t sub_1000CBD6C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1014998B0;
  if (!qword_1014998B0)
  {
    v1 = sub_10000E5D4(&qword_101499830);
    v2[0] = sub_1000CBDF0();
    v2[1] = sub_100010D70(&qword_1014998D0, &qword_101499880, (const char *)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_1014998B0);
  }
  return result;
}

unint64_t sub_1000CBDF0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1014998B8;
  if (!qword_1014998B8)
  {
    v1 = sub_10000E5D4(&qword_101499828);
    v2[0] = sub_1000CBE74();
    v2[1] = sub_100010D70((unint64_t *)&unk_101495E10, &qword_10149CED0, (const char *)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_1014998B8);
  }
  return result;
}

unint64_t sub_1000CBE74()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1014998C0;
  if (!qword_1014998C0)
  {
    v1 = sub_10000E5D4(&qword_101499820);
    v2[0] = sub_100010D70(&qword_1014998C8, &qword_101499818, (const char *)&protocol conformance descriptor for Button<A>);
    v2[1] = &protocol witness table for _PaddingLayout;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_1014998C0);
  }
  return result;
}

uint64_t sub_1000CBF00()
{
  uint64_t v0;

  return sub_1000CAEAC(*(_QWORD *)(v0 + 16));
}

uint64_t getEnumTagSinglePayload for PlaceSummaryUnitRatings(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for RefinementMenuStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000CC004 + 4 * byte_100E2A7B5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000CC038 + 4 * byte_100E2A7B0[v4]))();
}

uint64_t sub_1000CC038(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CC040(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000CC048);
  return result;
}

uint64_t sub_1000CC054(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000CC05CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000CC060(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CC068(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RefinementMenuStyle()
{
  return &type metadata for RefinementMenuStyle;
}

_QWORD *sub_1000CC084(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v4, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (_QWORD *)((char *)v4 + v8);
    v11 = (_QWORD *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    *((_BYTE *)v4 + v9) = *((_BYTE *)a2 + v9);
    v13 = a3[7];
    v14 = (_QWORD *)((char *)v4 + v13);
    v15 = (_QWORD *)((char *)a2 + v13);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    swift_bridgeObjectRetain(v12);
  }
  swift_retain(v16);
  return v4;
}

uint64_t sub_1000CC138(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
  return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 28) + 8));
}

uint64_t sub_1000CC190(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  v12 = a3[7];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  swift_bridgeObjectRetain(v11);
  swift_retain(v15);
  return a1;
}

uint64_t sub_1000CC21C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v12 = a3[7];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  v15 = v14[1];
  v16 = v13[1];
  *v13 = *v14;
  v13[1] = v15;
  swift_retain(v15);
  swift_release(v16);
  return a1;
}

uint64_t sub_1000CC2C8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1000CC338(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v14 = *(_QWORD *)(a1 + v13 + 8);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  swift_release(v14);
  return a1;
}

uint64_t sub_1000CC3C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000CC3D0);
}

uint64_t sub_1000CC3D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000CC450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000CC45C);
}

uint64_t sub_1000CC45C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_1000CC4D8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100E2A7E0;
    v4[2] = &unk_100E2A830;
    v4[3] = (char *)&value witness table for () + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for RefinementButtonStyle()
{
  return &type metadata for RefinementButtonStyle;
}

unint64_t sub_1000CC574()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];
  _QWORD v3[4];

  result = qword_101499990;
  if (!qword_101499990)
  {
    v1 = sub_10000E5D4(&qword_101499708);
    v3[0] = sub_10000E5D4(&qword_1014996F8);
    v3[1] = &type metadata for RefinementMenuStyle;
    v3[2] = sub_100010D70(&qword_101499758, &qword_1014996F8, (const char *)&protocol conformance descriptor for Menu<A, B>);
    v3[3] = sub_1000CB364();
    v2[0] = swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of View.menuStyle<A>(_:)>>, 1);
    v2[1] = sub_10000BC84((unint64_t *)&qword_10149CE30, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101499990);
  }
  return result;
}

unint64_t sub_1000CC658()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];
  _QWORD v3[4];

  result = qword_101499998;
  if (!qword_101499998)
  {
    v1 = sub_10000E5D4(&qword_1014997B0);
    v3[0] = sub_10000E5D4(&qword_1014997A0);
    v3[1] = &type metadata for RefinementButtonStyle;
    v3[2] = sub_1000CB8F8();
    v3[3] = sub_1000CBB08();
    v2[0] = swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    v2[1] = sub_10000BC84((unint64_t *)&qword_10149CE30, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101499998);
  }
  return result;
}

unint64_t sub_1000CC724()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1014999A0;
  if (!qword_1014999A0)
  {
    v1 = sub_10000E5D4(&qword_101499858);
    v2[0] = sub_100010D70(&qword_1014998E0, &qword_101499850, "A{7");
    v2[1] = sub_10000BC84((unint64_t *)&qword_10149CE30, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_1014999A0);
  }
  return result;
}

uint64_t sub_1000CC7C0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_101068068, 1);
}

uint64_t sub_1000CC7D0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_101068040, 1);
}

uint64_t sub_1000CC7E0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_101068018, 1);
}

uint64_t sub_1000CC7F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for SubmenuButton(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + *(int *)(v1 + 20) + 8));
  swift_release();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000CC88C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for SubmenuButton(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  return (*(uint64_t (**)(uint64_t))(v0 + ((v2 + 16) & ~v2) + *(int *)(v1 + 28)))(v0 + ((v2 + 16) & ~v2));
}

uint64_t sub_1000CC8D4()
{
  uint64_t v0;

  return sub_1000C9E48(*(_QWORD *)(v0 + 16));
}

unint64_t sub_1000CC8DC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1014999C0;
  if (!qword_1014999C0)
  {
    v1 = sub_10000E5D4(&qword_1014999B8);
    v2[0] = sub_100010D70(&qword_10149D250, (uint64_t *)&unk_10149D230, (const char *)&protocol conformance descriptor for Label<A, B>);
    v2[1] = &protocol witness table for Text;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_1014999C0);
  }
  return result;
}

uint64_t sub_1000CC960@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000CA090(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1000CC968()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101499A10;
  if (!qword_101499A10)
  {
    v1 = sub_10000E5D4(&qword_101499A00);
    v2[0] = sub_1000CC9EC();
    v2[1] = sub_100010D70((unint64_t *)&unk_101494E00, &qword_101494DD0, (const char *)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101499A10);
  }
  return result;
}

unint64_t sub_1000CC9EC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101499A18;
  if (!qword_101499A18)
  {
    v1 = sub_10000E5D4(&qword_1014999F8);
    v2[0] = sub_1000CCA70();
    v2[1] = sub_100010D70(&qword_1014997F0, &qword_101495890, (const char *)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101499A18);
  }
  return result;
}

unint64_t sub_1000CCA70()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101499A20;
  if (!qword_101499A20)
  {
    v1 = sub_10000E5D4(&qword_1014999F0);
    v2[0] = sub_1000CCAF4();
    v2[1] = sub_100010D70((unint64_t *)&unk_101495710, (uint64_t *)&unk_10149D520, (const char *)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101499A20);
  }
  return result;
}

unint64_t sub_1000CCAF4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101499A28;
  if (!qword_101499A28)
  {
    v1 = sub_10000E5D4(&qword_1014999E8);
    v2[0] = sub_1000CCB78();
    v2[1] = sub_100010D70((unint64_t *)&unk_101495E10, &qword_10149CED0, (const char *)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101499A28);
  }
  return result;
}

unint64_t sub_1000CCB78()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101499A30;
  if (!qword_101499A30)
  {
    v1 = sub_10000E5D4(&qword_1014999E0);
    v2[0] = sub_100010D70(&qword_101499A38, &qword_1014999D8, (const char *)&protocol conformance descriptor for Menu<A, B>);
    v2[1] = sub_100010D70((unint64_t *)&unk_101494DC0, &qword_10149D530, (const char *)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101499A30);
  }
  return result;
}

unint64_t sub_1000CCC18()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101499A60;
  if (!qword_101499A60)
  {
    v1 = sub_10000E5D4(&qword_1014999B0);
    v2[0] = sub_100010D70(&qword_1014999C8, &qword_1014999A8, (const char *)&protocol conformance descriptor for Button<A>);
    v2[1] = sub_10000BC84((unint64_t *)&qword_10149CE30, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101499A60);
  }
  return result;
}

unint64_t sub_1000CCCB8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101499A68;
  if (!qword_101499A68)
  {
    v1 = sub_10000E5D4(&qword_101499A08);
    v2[0] = sub_1000CC968();
    v2[1] = sub_10000BC84((unint64_t *)&qword_10149CE30, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101499A68);
  }
  return result;
}

unint64_t sub_1000CCD40()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101499A70;
  if (!qword_101499A70)
  {
    v1 = sub_10000E5D4(&qword_101499A50);
    v2[0] = sub_1000CCDDC(&qword_101499A78, &qword_101499A48, (uint64_t (*)(void))sub_1000CCE48);
    v2[1] = sub_100010D70((unint64_t *)&unk_101495E10, &qword_10149CED0, (const char *)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101499A70);
  }
  return result;
}

uint64_t sub_1000CCDDC(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v6 = sub_10000E5D4(a2);
    v7[0] = a3();
    v7[1] = &protocol witness table for _PaddingLayout;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v6, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000CCE48()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101499A80;
  if (!qword_101499A80)
  {
    v1 = sub_10000E5D4(&qword_101499A40);
    v2[0] = sub_10000BC84(&qword_101496220, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label, (uint64_t)&protocol conformance descriptor for ButtonStyleConfiguration.Label);
    v2[1] = &protocol witness table for _OpacityEffect;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101499A80);
  }
  return result;
}

uint64_t sub_1000CCECC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 104);
  sub_10006BB40(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  return a1;
}

id sub_1000CCFF4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AutocompleteQueryToken();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AutocompleteQueryToken()
{
  return objc_opt_self(_TtC4Maps22AutocompleteQueryToken);
}

void sub_1000CD360(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v4;
  id v5;
  id v6;
  objc_class *v7;
  _BYTE *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  objc_super v13;

  v2 = *(void **)(v1 + OBJC_IVAR____TtC4Maps18TransitLineContext_chromeViewController);
  if (v2)
  {
    if (a1)
    {
      v4 = objc_allocWithZone((Class)PlaceCardItem);
      v5 = v2;
      v6 = objc_msgSend(v4, "initWithMapItem:", a1);
      v7 = (objc_class *)type metadata accessor for PlaceCardContextConfiguration();
      v8 = objc_allocWithZone(v7);
      *(_QWORD *)&v8[OBJC_IVAR____TtC4Maps29PlaceCardContextConfiguration_placeCardItem] = v6;
      v8[OBJC_IVAR____TtC4Maps29PlaceCardContextConfiguration_shouldInsertInHistory] = 0;
      *(_QWORD *)&v8[OBJC_IVAR____TtC4Maps29PlaceCardContextConfiguration_excludedContent] = 0;
      v13.receiver = v8;
      v13.super_class = v7;
      v9 = v6;
      v10 = objc_msgSendSuper2(&v13, "init");
      v11 = objc_allocWithZone((Class)type metadata accessor for PlaceCardContext());
      v12 = sub_1001ECE80(v10);
      objc_msgSend(v5, "pushContext:animated:completion:", v12, 1, 0, v13.receiver, v13.super_class);

    }
    else
    {
      __break(1u);
    }
  }
}

void sub_1000CD484(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  NSURL *v14;
  void *v15;
  void *v16;
  uint64_t v17;

  v2 = v1;
  v4 = sub_100008B04((uint64_t *)&unk_101499B30);
  *(_QWORD *)&v5 = __chkstk_darwin(v4).n128_u64[0];
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(v2, "iosBasedChromeViewController", v5);
  if (v8)
  {
    v9 = v8;
    v10 = objc_msgSend(v8, "_currentContainerViewController");

    if (v10)
    {
      v11 = objc_msgSend(objc_allocWithZone((Class)MapsWebLinkPresenter), "initWithPresentingViewController:", v10);
      sub_1000CD604(a1, (uint64_t)v7);
      v12 = type metadata accessor for URL(0);
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v7, 1, v12) == 1)
      {
        __break(1u);
      }
      else
      {
        URL._bridgeToObjectiveC()(v14);
        v16 = v15;
        (*(void (**)(char *, uint64_t))(v13 + 8))(v7, v12);
        objc_msgSend(v11, "presentWebURL:", v16);

      }
    }
  }
}

uint64_t sub_1000CD5C4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008B04((uint64_t *)&unk_101499B30);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000CD604(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008B04((uint64_t *)&unk_101499B30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id sub_1000CD934()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  char **v3;
  id v4;
  id result;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  NSNumber v10;
  unint64_t v11;
  NSNumber v12;
  char isUniquelyReferenced_nonNull_native;
  Class isa;
  id v15;
  _OWORD v16[2];
  __int128 v17;
  uint64_t v18;
  _QWORD v19[5];
  _BYTE v20[104];

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC4Maps24PersonalizedFavoriteItem_shortcutType);
  switch(v1)
  {
    case 5:
      v2 = (void *)objc_opt_self(GEOFeatureStyleAttributes);
      v3 = &selRef_schoolStyleAttributes;
      break;
    case 3:
      v2 = (void *)objc_opt_self(GEOFeatureStyleAttributes);
      v3 = &selRef_workStyleAttributes;
      break;
    case 2:
      v2 = (void *)objc_opt_self(GEOFeatureStyleAttributes);
      v3 = &selRef_homeStyleAttributes;
      break;
    default:
      v2 = *(void **)(v0 + OBJC_IVAR____TtC4Maps24PersonalizedFavoriteItem__mapItem);
      v3 = &selRef__styleAttributes;
      break;
  }
  v4 = objc_msgSend(v2, *v3);
  if (v4
    || (result = objc_msgSend((id)objc_opt_self(GEOFeatureStyleAttributes), "markerStyleAttributes"),
        (v4 = result) != 0))
  {
    v6 = sub_100008B04((uint64_t *)&unk_101499CE0);
    inited = swift_initStackObject(v6, v20);
    *(_OWORD *)(inited + 16) = xmmword_100E22F40;
    v8 = sub_10000E4BC(0, (unint64_t *)&qword_10149E3B0, NSNumber_ptr);
    v19[0] = NSNumber.init(integerLiteral:)(65572).super.super.isa;
    v9 = sub_100035DAC((unint64_t *)&unk_101499CF0, (unint64_t *)&qword_10149E3B0, NSNumber_ptr);
    AnyHashable.init<A>(_:)(v19, v8, v9);
    v10.super.super.isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
    *(_QWORD *)(inited + 96) = v8;
    *(NSNumber *)(inited + 72) = v10;
    v11 = sub_100009758(inited);
    if ((v1 & 0xFFFFFFFFFFFFFFFELL) != 2)
    {
      *(NSNumber *)&v17 = NSNumber.init(integerLiteral:)(65616);
      AnyHashable.init<A>(_:)(&v17, v8, v9);
      v12.super.super.isa = NSNumber.init(integerLiteral:)(3).super.super.isa;
      v18 = v8;
      *(NSNumber *)&v17 = v12;
      sub_10000BE60(&v17, v16);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v11);
      sub_1001A0350(v16, (uint64_t)v19, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease(0x8000000000000000);
      sub_100012C48((uint64_t)v19);
    }
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v11);
    v15 = objc_msgSend((id)objc_opt_self(PersonalizedItemStyleAttributesAdornment), "adornmentWithStyleAttributes:additionalAttributes:", v4, isa);

    return v15;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000CDEC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = OBJC_IVAR____TtC4Maps24PersonalizedFavoriteItem____lazy_storage___autocompletionStrings;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC4Maps24PersonalizedFavoriteItem____lazy_storage___autocompletionStrings);
  v3 = v2;
  if (v2 == 1)
  {
    v3 = sub_1000CDF8C(v0);
    v4 = *(_QWORD *)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v3;
    swift_bridgeObjectRetain(v3);
    sub_1000D010C(v4);
  }
  sub_1000D011C(v2);
  return v3;
}

uint64_t sub_1000CDF8C(uint64_t a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  NSString v8;
  id v9;
  uint64_t v10;
  uint64_t v11;

  v2 = objc_msgSend(objc_allocWithZone((Class)AutocompleteMatchInfo), "initWithType:", 1);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = sub_100008B04((uint64_t *)&unk_101493B10);
  v5 = swift_allocObject(v4, 40, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100E23F50;
  v6 = *(_QWORD *)(a1 + OBJC_IVAR____TtC4Maps24PersonalizedFavoriteItem__title + 8);
  v7 = objc_allocWithZone((Class)AutocompleteStringMatcher);
  swift_bridgeObjectRetain(v6);
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  v9 = objc_msgSend(v7, "initWithString:requiredMatchLength:matchInfo:", v8, 1, v3);

  *(_QWORD *)(v5 + 32) = v9;
  specialized Array._endMutation()(v10);
  v11 = v5;

  return v11;
}

uint64_t sub_1000CE190()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD v13[2];

  v1 = v0;
  v2 = (void *)0xE000000000000000;
  v13[0] = 0;
  v13[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(45);
  v3._object = (void *)0x8000000100E485C0;
  v3._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v3);
  v4 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + OBJC_IVAR____TtC4Maps24PersonalizedFavoriteItem__mapItem), "name"));
  if (v4)
  {
    v5 = v4;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v2 = v7;

  }
  else
  {
    v6 = 0;
  }
  v8._countAndFlagsBits = v6;
  v8._object = v2;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v2);
  v9._countAndFlagsBits = 0x756374726F687320;
  v9._object = (void *)0xEF203A6570795474;
  String.append(_:)(v9);
  v12 = *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps24PersonalizedFavoriteItem_shortcutType);
  type metadata accessor for MapsSuggestionsShortcutType(0);
  _print_unlocked<A, B>(_:_:)(&v12, v13, v10, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  return v13[0];
}

uint64_t type metadata accessor for PersonalizedFavoriteItem()
{
  return objc_opt_self(_TtC4Maps24PersonalizedFavoriteItem);
}

id sub_1000CE48C()
{
  void *v0;
  void *v1;
  objc_class *ObjectType;
  void *v3;
  id v4;
  objc_super v6;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType(v0);
  type metadata accessor for MapsSyncStore(0);
  v3 = (void *)static MapsSyncStore.sharedStore.getter();
  v4 = v1;
  dispatch thunk of MapsSyncStore.unsubscribe(_:)();

  v6.receiver = v4;
  v6.super_class = ObjectType;
  return objc_msgSendSuper2(&v6, "dealloc");
}

id sub_1000CE5F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v24;
  _QWORD *v25;

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0, v6);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = OBJC_IVAR____TtC4Maps30PersonalizedFavoriteItemSource____lazy_storage___updateQueue;
  v14 = *(void **)(v1 + OBJC_IVAR____TtC4Maps30PersonalizedFavoriteItemSource____lazy_storage___updateQueue);
  if (v14)
  {
    v15 = *(id *)(v1 + OBJC_IVAR____TtC4Maps30PersonalizedFavoriteItemSource____lazy_storage___updateQueue);
  }
  else
  {
    sub_10000E4BC(0, (unint64_t *)&qword_101492FA0, OS_dispatch_queue_ptr);
    v16 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v9);
    static DispatchQoS.unspecified.getter(v16);
    v25 = _swiftEmptyArrayStorage;
    v17 = sub_10000BC84((unint64_t *)&unk_10149AB40, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
    v18 = sub_100008B04((uint64_t *)&unk_101499CA0);
    v19 = sub_1000D00AC((unint64_t *)&unk_10149AB50, (uint64_t *)&unk_101499CA0);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v18, v19, v2, v17);
    v20 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001ELL, 0x8000000100E2AB80, v8, v4, v12, 0);
    v21 = *(void **)(v1 + v13);
    *(_QWORD *)(v1 + v13) = v20;
    v15 = v20;

    v14 = 0;
  }
  v22 = v14;
  return v15;
}

uint64_t sub_1000CE884@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + OBJC_IVAR____TtC4Maps30PersonalizedFavoriteItemSource__allItems);
  if (v3 < 0 || (v3 & 0x4000000000000000) != 0)
  {
    v6 = swift_bridgeObjectRetain(*(_QWORD *)(a1 + OBJC_IVAR____TtC4Maps30PersonalizedFavoriteItemSource__allItems));
    v4 = (uint64_t)sub_1000D8BD0(v6);
    result = swift_bridgeObjectRelease(v3);
  }
  else
  {
    v4 = v3 & 0xFFFFFFFFFFFFFF8;
    result = swift_bridgeObjectRetain(*(_QWORD *)(a1 + OBJC_IVAR____TtC4Maps30PersonalizedFavoriteItemSource__allItems));
  }
  *a2 = v4;
  return result;
}

id sub_1000CE8F0()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  char *v29;
  id v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v42[4];
  unsigned int v43;
  void (*v44)(_BYTE *);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  _BYTE *v48;
  objc_class *ObjectType;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD aBlock[6];
  objc_super v57;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v1 - 8);
  v53 = v1;
  v54 = v2;
  __chkstk_darwin(v1);
  v50 = &v42[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v48 = &v42[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for DispatchQoS(0);
  v51 = *(_QWORD *)(v6 - 8);
  v52 = v6;
  v7 = __chkstk_darwin(v6);
  v9 = &v42[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0, v7);
  v11 = *(_QWORD *)(v10 - 8);
  v45 = v10;
  __chkstk_darwin(v10);
  v13 = &v42[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = OBJC_IVAR____TtC4Maps30PersonalizedFavoriteItemSource_storeSubscriptionTypes;
  v15 = sub_10000B4B8();
  v16 = swift_allocObject(v15, ((*(unsigned int *)(v15 + 48) + 7) & 0x1FFFFFFF8) + 8, *(unsigned __int16 *)(v15 + 52) | 7);
  *(_OWORD *)(v16 + 16) = xmmword_100E22F40;
  *(_QWORD *)(v16 + 32) = type metadata accessor for FavoriteItem(0, v17);
  *(_QWORD *)&v0[v14] = v16;
  *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps30PersonalizedFavoriteItemSource_queryContents] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps30PersonalizedFavoriteItemSource__allItems] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps30PersonalizedFavoriteItemSource____lazy_storage___updateQueue] = 0;
  v46 = OBJC_IVAR____TtC4Maps30PersonalizedFavoriteItemSource_lockQueue;
  sub_10000E4BC(0, (unint64_t *)&qword_101492FA0, OS_dispatch_queue_ptr);
  v43 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  v44 = *(void (**)(_BYTE *))(v11 + 104);
  v44(v13);
  v47 = v0;
  v18 = v9;
  static DispatchQoS.unspecified.getter(v47);
  aBlock[0] = _swiftEmptyArrayStorage;
  v19 = sub_10000BC84((unint64_t *)&unk_10149AB40, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v20 = sub_100008B04((uint64_t *)&unk_101499CA0);
  v21 = sub_1000D00AC((unint64_t *)&unk_10149AB50, (uint64_t *)&unk_101499CA0);
  v22 = v48;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v20, v21, v4, v19);
  v23 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000023, 0x8000000100E48540, v18, v22, v13, 0);
  v24 = v45;
  *(_QWORD *)&v0[v46] = v23;
  v25 = OBJC_IVAR____TtC4Maps30PersonalizedFavoriteItemSource_queryQueue;
  v26 = ((uint64_t (*)(_BYTE *, _QWORD, uint64_t))v44)(v13, v43, v24);
  static DispatchQoS.unspecified.getter(v26);
  aBlock[0] = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v20, v21, v4, v19);
  v27 = v18;
  v28 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000024, 0x8000000100E48570, v18, v22, v13, 0);
  v29 = v47;
  *(_QWORD *)&v47[v25] = v28;

  v57.receiver = v29;
  v57.super_class = ObjectType;
  v30 = objc_msgSendSuper2(&v57, "init");
  v31 = swift_allocObject(&unk_1011A1900, 24, 7);
  swift_unknownObjectWeakInit(v31 + 16, v30);
  aBlock[4] = sub_1000D00EC;
  aBlock[5] = v31;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BB8D4;
  aBlock[3] = &unk_1011A1A08;
  v32 = _Block_copy(aBlock);
  v33 = v30;
  swift_retain();
  static DispatchQoS.unspecified.getter(v34);
  v55 = _swiftEmptyArrayStorage;
  v35 = sub_10000BC84((unint64_t *)&qword_101492BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v36 = sub_100008B04((uint64_t *)&unk_101492FB0);
  v37 = sub_1000D00AC((unint64_t *)&qword_101492BC0, (uint64_t *)&unk_101492FB0);
  v38 = v50;
  v39 = v36;
  v40 = v53;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v55, v39, v37, v53, v35);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v27, v38, v32);

  _Block_release(v32);
  (*(void (**)(_BYTE *, uint64_t))(v54 + 8))(v38, v40);
  (*(void (**)(_BYTE *, uint64_t))(v51 + 8))(v27, v52);
  swift_release();
  swift_release();
  return v33;
}

void sub_1000CEDC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  void *v4;
  id v5;
  _BYTE v6[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    type metadata accessor for MapsSyncStore(0);
    v4 = (void *)static MapsSyncStore.sharedStore.getter();
    v5 = v3;
    dispatch thunk of MapsSyncStore.subscribe(_:)();

    sub_1000CFDE0();
  }
}

uint64_t sub_1000CEE5C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  char **v9;
  char **v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSString v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  NSObject *v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  void *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t (*v58)();
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  id v70;
  uint64_t (*v71)();
  void *v72;
  uint64_t v73;
  void **aBlock;
  uint64_t v75;
  uint64_t (*v76)(uint64_t);
  void *v77;
  void *v78;
  uint64_t v79;
  unint64_t v80;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v67 = *(_QWORD *)(v1 - 8);
  v68 = v1;
  __chkstk_darwin(v1);
  v66 = (char *)&v60 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DispatchQoS(0);
  v64 = *(_QWORD *)(v3 - 8);
  v65 = v3;
  __chkstk_darwin(v3);
  v63 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = (unint64_t)_swiftEmptyArrayStorage;
  v69 = v0;
  v73 = *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps30PersonalizedFavoriteItemSource_queryContents];
  if ((unint64_t)v73 >> 62)
    goto LABEL_32;
  v5 = *(_QWORD *)((v73 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain(v73);
  if (v5)
  {
    while (1)
    {
      if (v5 < 1)
      {
        __break(1u);
        return result;
      }
      v71 = 0;
      v72 = 0;
      v7 = 0;
      v62 = OBJC_IVAR____TtC4Maps30PersonalizedFavoriteItemSource_lockQueue;
      v8 = v73 & 0xC000000000000001;
      v9 = &selRef_maneuverViewTopMarginForSign_;
      v10 = &selRef_updateWalkOptionsInformation_;
      v61 = v5;
      v60 = v73 & 0xC000000000000001;
      while (1)
      {
        v11 = v8
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v73)
            : *(id *)(v73 + 8 * v7 + 32);
        v12 = v11;
        v13 = objc_msgSend(v11, v9[57], v60, v61);
        if (v13)
          break;

LABEL_6:
        if (v5 == ++v7)
        {
          swift_bridgeObjectRelease(v73);
          v56 = (_QWORD *)v80;
          v58 = v71;
          v57 = (uint64_t)v72;
          goto LABEL_37;
        }
      }
      v14 = v13;
      v15 = objc_msgSend(v12, "customName");
      if (v15)
      {
        v16 = v15;
        v17 = objc_msgSend(v14, v10[220]);

        if (!v17)
        {
          v18 = objc_msgSend(objc_allocWithZone((Class)GEOMapItemStorageUserValues), "init");
          objc_msgSend(v14, "setUserValues:", v18);

        }
        v19 = objc_msgSend(v14, v10[220]);
        objc_msgSend(v19, "setName:", v16);

      }
      v20 = objc_msgSend(objc_allocWithZone((Class)MKMapItem), "initWithGeoMapItem:isPlaceHolderPlace:", v14, 0);
      if (!v20)
        goto LABEL_19;
      v21 = v20;
      v22 = objc_msgSend(v20, "_styleAttributes");
      if (v22)
      {
        v23 = v22;
        v24 = objc_msgSend(v22, "isLabelPOI");

        if ((v24 & 1) != 0)
          break;
      }
      v25 = dispatch thunk of FavoriteItem.customName.getter();
      if (v26)
      {
        v27 = v25;
        v28 = v26;
        v29 = String._bridgeToObjectiveC()();
        objc_msgSend(v21, "setName:", v29);
      }
      else
      {
        v30 = objc_msgSend(v21, "name");
        if (!v30)
        {

          v9 = &selRef_maneuverViewTopMarginForSign_;
          goto LABEL_28;
        }
        v29 = v30;
        v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
        v28 = v31;
      }

      v32 = (__int16)dispatch thunk of FavoriteItem.type.getter();
      v33 = objc_allocWithZone((Class)type metadata accessor for PersonalizedFavoriteItem());
      v34 = v21;
      v35 = sub_1000CFA78(v34, v32, v27, v28);
      v70 = v34;

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v36);
      v38 = *(_QWORD *)((v80 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v37 = *(_QWORD *)((v80 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v38 >= v37 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1);
      v39 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v38, v35);
      specialized Array._endMutation()(v39);
      v40 = v69;
      v41 = *(NSObject **)&v69[v62];
      v42 = swift_allocObject(&unk_1011A1978, 32, 7);
      *(_QWORD *)(v42 + 16) = v40;
      *(_QWORD *)(v42 + 24) = &v80;
      v43 = v40;
      sub_10000BF74((uint64_t)v71, (uint64_t)v72);
      v44 = swift_allocObject(&unk_1011A19A0, 32, 7);
      *(_QWORD *)(v44 + 16) = sub_1000D005C;
      *(_QWORD *)(v44 + 24) = v42;
      v78 = sub_1000BC664;
      v79 = v44;
      aBlock = _NSConcreteStackBlock;
      v75 = 1107296256;
      v76 = sub_1001DCBE4;
      v77 = &unk_1011A19B8;
      v45 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      dispatch_sync(v41, v45);
      _Block_release(v45);
      LOBYTE(v41) = swift_isEscapingClosureAtFileLocation(v44, "", 103, 232, 28, 1);
      swift_release();
      if ((v41 & 1) == 0)
      {
        sub_10000E4BC(0, (unint64_t *)&qword_101492FA0, OS_dispatch_queue_ptr);
        v72 = (void *)static OS_dispatch_queue.main.getter();
        v46 = swift_allocObject(&unk_1011A1900, 24, 7);
        swift_unknownObjectWeakInit(v46 + 16, v43);
        v78 = sub_1000D00A4;
        v79 = v46;
        aBlock = _NSConcreteStackBlock;
        v75 = 1107296256;
        v76 = sub_1001BB8D4;
        v77 = &unk_1011A19E0;
        v47 = _Block_copy(&aBlock);
        v48 = swift_release();
        v49 = v63;
        static DispatchQoS.unspecified.getter(v48);
        aBlock = (void **)_swiftEmptyArrayStorage;
        v50 = sub_10000BC84((unint64_t *)&qword_101492BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v51 = sub_100008B04((uint64_t *)&unk_101492FB0);
        v52 = sub_1000D00AC((unint64_t *)&qword_101492BC0, (uint64_t *)&unk_101492FB0);
        v53 = v66;
        v54 = v68;
        dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v51, v52, v68, v50);
        v55 = v72;
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v49, v53, v47);

        _Block_release(v47);
        (*(void (**)(char *, uint64_t))(v67 + 8))(v53, v54);
        (*(void (**)(char *, uint64_t))(v64 + 8))(v49, v65);
        v71 = sub_1000D005C;
        v72 = (void *)v42;
        v5 = v61;
        v8 = v60;
        v9 = &selRef_maneuverViewTopMarginForSign_;
        goto LABEL_28;
      }
      __break(1u);
LABEL_32:
      if (v73 < 0)
        v59 = v73;
      else
        v59 = v73 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v73);
      result = _CocoaArrayWrapper.endIndex.getter(v59);
      v5 = result;
      if (!result)
        goto LABEL_36;
    }

LABEL_19:
LABEL_28:
    v10 = &selRef_updateWalkOptionsInformation_;
    goto LABEL_6;
  }
LABEL_36:
  swift_bridgeObjectRelease(v73);
  v58 = 0;
  v57 = 0;
  v56 = _swiftEmptyArrayStorage;
LABEL_37:
  swift_bridgeObjectRelease(v56);
  return sub_10000BF74((uint64_t)v58, v57);
}

void sub_1000CF4E4(uint64_t a1)
{
  uint64_t v1;
  void *Strong;
  void *v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    objc_msgSend(Strong, "_notifyObserversItemsDidChange");

  }
}

uint64_t sub_1000CF53C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  char *v10;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD aBlock[7];
  char v33[24];

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v30 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v33, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(a1);
  if (result)
  {
    v10 = (char *)result;
    v29 = v5;
    type metadata accessor for MapsSyncQueryPredicate(0);
    v11 = static MapsSyncQueryPredicate.mapsFavoritesPredicate(hidden:)(0);
    v12 = objc_allocWithZone((Class)type metadata accessor for MapsSyncQueryOptions(0));
    v13 = (void *)MapsSyncQueryOptions.init(predicate:sortDescriptors:range:)(v11, 0, 0);
    type metadata accessor for FavoriteItemRequest(0);
    v14 = (void *)FavoriteItemRequest.__allocating_init()();
    v15 = v13;
    v16 = dispatch thunk of FavoriteItemRequest.fetchSync(options:)(v13);
    v28 = v6;
    v17 = v16;

    v18 = *(_QWORD *)&v10[OBJC_IVAR____TtC4Maps30PersonalizedFavoriteItemSource_queryContents];
    *(_QWORD *)&v10[OBJC_IVAR____TtC4Maps30PersonalizedFavoriteItemSource_queryContents] = v17;
    swift_bridgeObjectRelease(v18);
    v19 = sub_1000CE5F0();
    v20 = swift_allocObject(&unk_1011A1900, 24, 7);
    swift_unknownObjectWeakInit(v20 + 16, v10);
    aBlock[4] = sub_1000D0030;
    aBlock[5] = v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1001BB8D4;
    aBlock[3] = &unk_1011A1940;
    v21 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter(v22);
    v31 = _swiftEmptyArrayStorage;
    v23 = v8;
    v24 = sub_10000BC84((unint64_t *)&qword_101492BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v25 = sub_100008B04((uint64_t *)&unk_101492FB0);
    v26 = sub_1000D00AC((unint64_t *)&qword_101492BC0, (uint64_t *)&unk_101492FB0);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v25, v26, v2, v24);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v23, v4, v21);
    _Block_release(v21);

    (*(void (**)(char *, uint64_t))(v30 + 8))(v4, v2);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v23, v29);
    swift_release();
    return swift_release();
  }
  return result;
}

void sub_1000CF9A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    sub_1000CEE5C();

  }
}

uint64_t type metadata accessor for PersonalizedFavoriteItemSource()
{
  return objc_opt_self(_TtC4Maps30PersonalizedFavoriteItemSource);
}

id sub_1000CFA78(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  id v13;
  char *v14;
  uint64_t v15;
  uint64_t inited;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *ObjCClassFromMetadata;
  id v25;
  NSString v26;
  id v27;
  id v28;
  id result;
  uint64_t v30;
  uint64_t v31;
  objc_class *ObjectType;
  uint64_t v33;
  objc_super v34;
  id v35;
  char v36[72];

  v5 = v4;
  ObjectType = (objc_class *)swift_getObjectType(v4);
  *(_QWORD *)&v4[OBJC_IVAR____TtC4Maps24PersonalizedFavoriteItem_priority] = 1;
  v10 = OBJC_IVAR____TtC4Maps24PersonalizedFavoriteItem_mapItem;
  *(_QWORD *)&v4[OBJC_IVAR____TtC4Maps24PersonalizedFavoriteItem_mapItem] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC4Maps24PersonalizedFavoriteItem_source] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC4Maps24PersonalizedFavoriteItem_sortOrder] = 0;
  v4[OBJC_IVAR____TtC4Maps24PersonalizedFavoriteItem_shouldBeClustered] = 0;
  v4[OBJC_IVAR____TtC4Maps24PersonalizedFavoriteItem_showsBalloonCallout] = 1;
  *(_QWORD *)&v4[OBJC_IVAR____TtC4Maps24PersonalizedFavoriteItem_sourceLabelMarker] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC4Maps24PersonalizedFavoriteItem_address] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC4Maps24PersonalizedFavoriteItem_searchableStrings] = 0;
  v4[OBJC_IVAR____TtC4Maps24PersonalizedFavoriteItem_shouldBeHiddenFromMap] = 0;
  v4[OBJC_IVAR____TtC4Maps24PersonalizedFavoriteItem_hidden] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC4Maps24PersonalizedFavoriteItem____lazy_storage___autocompletionStrings] = 1;
  v33 = OBJC_IVAR____TtC4Maps24PersonalizedFavoriteItem__mapItem;
  *(_QWORD *)&v4[OBJC_IVAR____TtC4Maps24PersonalizedFavoriteItem__mapItem] = a1;
  v31 = a2;
  *(_QWORD *)&v4[OBJC_IVAR____TtC4Maps24PersonalizedFavoriteItem_shortcutType] = a2;
  v11 = &v4[OBJC_IVAR____TtC4Maps24PersonalizedFavoriteItem__title];
  *v11 = a3;
  v11[1] = a4;
  v12 = *(void **)&v4[v10];
  *(_QWORD *)&v4[v10] = a1;
  v13 = a1;
  v14 = v4;
  swift_bridgeObjectRetain(a4);

  v15 = sub_100008B04(&qword_101499C78);
  inited = swift_initStackObject(v15, v36);
  *(_OWORD *)(inited + 16) = xmmword_100E22F40;
  v35 = objc_msgSend(objc_allocWithZone((Class)PersonalizedMapItemKey), "initWithMapItem:", v13);
  v17 = sub_10000E4BC(0, &qword_101499C80, off_101197E30);
  v18 = sub_100035DAC(&qword_101499C88, &qword_101499C80, off_101197E30);
  AnyHashable.init<A>(_:)(&v35, v17, v18);
  v19 = sub_100035AD8(inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 1, &type metadata for AnyHashable);
  *(_QWORD *)&v14[OBJC_IVAR____TtC4Maps24PersonalizedFavoriteItem_keys] = v19;
  objc_msgSend(v13, "_coordinate");
  v20 = &v14[OBJC_IVAR____TtC4Maps24PersonalizedFavoriteItem_coordinate];
  *(_QWORD *)v20 = v21;
  *((_QWORD *)v20 + 1) = v22;
  v23 = sub_10000E4BC(0, (unint64_t *)&unk_101499C90, off_101197E20);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v23);
  v25 = objc_msgSend(ObjCClassFromMetadata, "defaultAdornment");
  *(_QWORD *)&v14[OBJC_IVAR____TtC4Maps24PersonalizedFavoriteItem_prefix] = v25;
  v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  v27 = objc_msgSend((id)objc_opt_self(PersonalizedItemPrioritizedStringAdornment), "adornmentWithString:priority:", v26, 0);

  *(_QWORD *)&v14[OBJC_IVAR____TtC4Maps24PersonalizedFavoriteItem_title] = v27;
  v28 = objc_msgSend(ObjCClassFromMetadata, "defaultAdornment");
  *(_QWORD *)&v14[OBJC_IVAR____TtC4Maps24PersonalizedFavoriteItem_subtitle] = v28;
  result = objc_msgSend(objc_allocWithZone((Class)SearchResult), "initWithMapItem:", *(_QWORD *)&v5[v33]);
  if (result)
  {
    *(_QWORD *)&v14[OBJC_IVAR____TtC4Maps24PersonalizedFavoriteItem__searchResult] = result;
    if ((unint64_t)(v31 - 1) > 4)
      v30 = 18;
    else
      v30 = qword_100E2ABD8[v31 - 1];
    *(_QWORD *)&v14[OBJC_IVAR____TtC4Maps24PersonalizedFavoriteItem_sourceSubtype] = v30;

    v34.receiver = v14;
    v34.super_class = ObjectType;
    return objc_msgSendSuper2(&v34, "init");
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000CFDE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  uint64_t v16;
  _QWORD *v17;
  _QWORD aBlock[6];

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v16 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[1] = *(_QWORD *)(v0 + OBJC_IVAR____TtC4Maps30PersonalizedFavoriteItemSource_queryQueue);
  v8 = swift_allocObject(&unk_1011A1900, 24, 7);
  swift_unknownObjectWeakInit(v8 + 16, v0);
  aBlock[4] = sub_1000D0010;
  aBlock[5] = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BB8D4;
  aBlock[3] = &unk_1011A1918;
  v9 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter(v10);
  v17 = _swiftEmptyArrayStorage;
  v11 = sub_10000BC84((unint64_t *)&qword_101492BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v12 = sub_100008B04((uint64_t *)&unk_101492FB0);
  v13 = sub_1000D00AC((unint64_t *)&qword_101492BC0, (uint64_t *)&unk_101492FB0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v12, v13, v1, v11);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v3, v9);
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_release();
  return swift_release();
}

uint64_t sub_1000CFFEC()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000D0010()
{
  uint64_t v0;

  return sub_1000CF53C(v0);
}

uint64_t sub_1000D0018(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000D0028(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1000D0030()
{
  uint64_t v0;

  sub_1000CF9A8(v0);
}

uint64_t sub_1000D0038()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D005C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = **(_QWORD **)(v0 + 24);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps30PersonalizedFavoriteItemSource__allItems);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps30PersonalizedFavoriteItemSource__allItems) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_1000D0094()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1000D00A4()
{
  uint64_t v0;

  sub_1000CF4E4(v0);
}

uint64_t sub_1000D00AC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_10000E5D4(a2);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1000D00EC()
{
  uint64_t v0;

  sub_1000CEDC0(v0);
}

uint64_t sub_1000D00F4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1000CE884(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1000D010C(uint64_t result)
{
  if (result != 1)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t sub_1000D011C(uint64_t result)
{
  if (result != 1)
    return swift_bridgeObjectRetain(result);
  return result;
}

unint64_t sub_1000D0154()
{
  unint64_t result;

  result = qword_101499D00;
  if (!qword_101499D00)
  {
    result = swift_getWitnessTable(byte_100E2AC70, &type metadata for TransitPreferBusEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_101499D00);
  }
  return result;
}

uint64_t sub_1000D0198()
{
  return sub_100010D70(&qword_101499D08, &qword_101499D10, (const char *)&protocol conformance descriptor for _IntentUpdatableEntityProperty<A, B, C>);
}

uint64_t sub_1000D01C4()
{
  uint64_t v0;
  __n128 v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[2];

  v0 = sub_100008B04(&qword_101494370);
  v1 = __chkstk_darwin(v0);
  v3 = (char *)v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0, v1);
  v4 = *(_QWORD *)(v23[0] - 8);
  __chkstk_darwin(v23[0]);
  v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for String.LocalizationValue(0, v8);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for LocalizedStringResource(0, v12);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for TypeDisplayRepresentation(0, v17);
  sub_10000E930(v20, qword_1014D48E0);
  sub_10000E918(v20, (uint64_t)qword_1014D48E0);
  v21 = String.LocalizationValue.init(stringLiteral:)(0x4220726566657250, 0xEA00000000007375);
  static Locale.current.getter(v21);
  (*(void (**)(char *, _QWORD, _QWORD))(v4 + 104))(v6, enum case for LocalizedStringResource.BundleDescription.main(_:), v23[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v10, v6, "A setting to choose bus travel as a transit preference", 54, 2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v3, 1, 1, v15);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v19, v3);
}

uint64_t sub_1000D03D8(__n128 a1)
{
  uint64_t v1;

  v1 = type metadata accessor for LocalizedStringResource(0, a1);
  sub_10000E930(v1, qword_1014D48F8);
  sub_10000E918(v1, (uint64_t)qword_1014D48F8);
  return LocalizedStringResource.init(stringLiteral:)(0xD000000000000011, 0x8000000100E486D0);
}

uint64_t sub_1000D0438()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_100008B04(&qword_1014964F0);
  sub_10000E930(v0, qword_1014D4910);
  v1 = sub_10000E918(v0, (uint64_t)qword_1014D4910);
  IntentDescription.init(stringLiteral:)(0xD000000000000029, 0x8000000100E486A0);
  v2 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 0, 1, v2);
}

uint64_t sub_1000D04C0()
{
  uint64_t result;

  result = swift_getKeyPath(&unk_100E2B138);
  qword_1014D4928 = result;
  return result;
}

uint64_t sub_1000D04E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  return swift_task_switch(sub_1000D0500, 0, 0);
}

uint64_t sub_1000D0500()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v0 + 24) = v1;
  *(_QWORD *)(v0 + 72) = v1;
  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 146));
  *(_BYTE *)(v0 + 145) = *(_BYTE *)(v0 + 146);
  if (qword_101490DB8 != -1)
    swift_once(&qword_101490DB8, sub_1000D04C0);
  v2 = qword_1014D4928;
  *(_QWORD *)(v0 + 80) = qword_1014D4928;
  v3 = async function pointer to AppEntity._setValue<A, B, C>(_:for:)[1];
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  *(_QWORD *)(v0 + 88) = v4;
  v5 = sub_100010D70(&qword_101499E10, &qword_101499E18, (const char *)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  *(_QWORD *)(v0 + 96) = v5;
  *v4 = v0;
  v4[1] = sub_1000D0600;
  return AppEntity._setValue<A, B, C>(_:for:)(v0 + 145, v2, &type metadata for Bool, v5);
}

uint64_t sub_1000D0600()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  swift_release();
  swift_release();
  if (v0)
    v3 = sub_100072D78;
  else
    v3 = sub_1000D0680;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000D0680()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  IntentParameter.wrappedValue.getter(v0 + 5);
  v1 = v0[5];
  v0[4] = v1;
  v2 = qword_1014D4928;
  v0[14] = v1;
  v0[15] = v2;
  v3 = async function pointer to AppEntity._value<A, B>(for:)[1];
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  v0[16] = v4;
  *v4 = v0;
  v4[1] = sub_100072CA0;
  return AppEntity._value<A, B>(for:)(v0 + 18, v2, v0[12]);
}

double sub_1000D0714()
{
  double result;

  if (qword_101490DB8 != -1)
    swift_once(&qword_101490DB8, sub_1000D04C0);
  *(_QWORD *)&result = swift_retain().n128_u64[0];
  return result;
}

unint64_t sub_1000D0758()
{
  unint64_t result;

  result = qword_101499D18;
  if (!qword_101499D18)
  {
    result = swift_getWitnessTable(byte_100E2AD00, &type metadata for TransitPreferBusEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_101499D18);
  }
  return result;
}

unint64_t sub_1000D07A0()
{
  unint64_t result;

  result = qword_101499D20;
  if (!qword_101499D20)
  {
    result = swift_getWitnessTable(byte_100E2AD28, &type metadata for TransitPreferBusEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_101499D20);
  }
  return result;
}

uint64_t sub_1000D07E4(uint64_t a1)
{
  return *(_QWORD *)(swift_getOpaqueTypeConformance2(a1, &unk_101068188, 1) + 8);
}

uint64_t sub_1000D0808(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_1000D0154();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t sub_1000D0848@<X0>(uint64_t a1@<X8>)
{
  return sub_100073694(&qword_101490DA8, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1014D48F8, (uint64_t)sub_1000D03D8, a1);
}

uint64_t sub_1000D086C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_101490DB0 != -1)
    swift_once(&qword_101490DB0, sub_1000D0438);
  v2 = sub_100008B04(&qword_1014964F0);
  v3 = sub_10000E918(v2, (uint64_t)qword_1014D4910);
  return sub_1000742A4(v3, a1);
}

uint64_t sub_1000D08CC(uint64_t a1)
{
  _OWORD *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = swift_task_alloc(dword_101499E2C);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_10000DD08;
  *(_OWORD *)(v4 + 56) = *v1;
  *(_QWORD *)(v4 + 48) = a1;
  return swift_task_switch(sub_1000D0500, 0, 0);
}

uint64_t sub_1000D0934@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1000D142C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_1000D0958()
{
  return 0xD000000000000027;
}

unint64_t sub_1000D0978()
{
  unint64_t result;

  result = qword_101499D30;
  if (!qword_101499D30)
  {
    result = swift_getWitnessTable(byte_100E2AD74, &type metadata for TransitPreferBusEntity);
    atomic_store(result, (unint64_t *)&qword_101499D30);
  }
  return result;
}

unint64_t sub_1000D09C0()
{
  unint64_t result;

  result = qword_101499D38;
  if (!qword_101499D38)
  {
    result = swift_getWitnessTable(byte_100E2AF6C, &type metadata for TransitPreferBusQuery);
    atomic_store(result, (unint64_t *)&qword_101499D38);
  }
  return result;
}

unint64_t sub_1000D0A08()
{
  unint64_t result;

  result = qword_101499D40;
  if (!qword_101499D40)
  {
    result = swift_getWitnessTable("mn7", &type metadata for TransitPreferBusEntity);
    atomic_store(result, (unint64_t *)&qword_101499D40);
  }
  return result;
}

unint64_t sub_1000D0A50()
{
  unint64_t result;

  result = qword_101499D48;
  if (!qword_101499D48)
  {
    result = swift_getWitnessTable("Un7", &type metadata for TransitPreferBusEntity);
    atomic_store(result, (unint64_t *)&qword_101499D48);
  }
  return result;
}

unint64_t sub_1000D0A98()
{
  unint64_t result;

  result = qword_101499D50;
  if (!qword_101499D50)
  {
    result = swift_getWitnessTable("=n7", &type metadata for TransitPreferBusEntity);
    atomic_store(result, (unint64_t *)&qword_101499D50);
  }
  return result;
}

unint64_t sub_1000D0AE0()
{
  unint64_t result;

  result = qword_101499D58;
  if (!qword_101499D58)
  {
    result = swift_getWitnessTable("mm7", &type metadata for TransitPreferBusQuery);
    atomic_store(result, (unint64_t *)&qword_101499D58);
  }
  return result;
}

uint64_t sub_1000D0B24(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_1000D0B3C, 0, 0);
}

uint64_t sub_1000D0B3C()
{
  uint64_t v0;
  _BYTE *v1;
  id v2;
  id v3;

  v1 = *(_BYTE **)(v0 + 16);
  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v3 = objc_msgSend(objc_allocWithZone((Class)TransitMutablePreferences), "initWithDefaults:", v2);

  LOBYTE(v2) = objc_msgSend(v3, "isModeDisabled:", 1);
  *v1 = v2 ^ 1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D0BE0(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 16) = *a2;
  return swift_task_switch(sub_1000D0BFC, 0, 0);
}

uint64_t sub_1000D0BFC()
{
  uint64_t v0;
  char v1;
  id v2;
  id v3;
  int BOOL;

  v1 = *(_BYTE *)(v0 + 16);
  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v3 = objc_msgSend(objc_allocWithZone((Class)TransitMutablePreferences), "initWithDefaults:", v2);

  objc_msgSend(v3, "setMode:disabled:", 1, (v1 & 1) == 0);
  objc_msgSend(v3, "synchronize");
  BOOL = GEOConfigGetBOOL(MapsConfig_PreferencesUniqueEntityDidUpdate, off_1014B5518);
  GEOConfigSetBOOL(MapsConfig_PreferencesUniqueEntityDidUpdate, off_1014B5518, BOOL ^ 1u);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_1000D0CD8()
{
  unint64_t result;

  result = qword_101499D60;
  if (!qword_101499D60)
  {
    result = swift_getWitnessTable("]m7", &type metadata for TransitPreferBusEntity);
    atomic_store(result, (unint64_t *)&qword_101499D60);
  }
  return result;
}

unint64_t sub_1000D0D20()
{
  unint64_t result;

  result = qword_101499D68;
  if (!qword_101499D68)
  {
    result = swift_getWitnessTable(byte_100E2AE94, &type metadata for TransitPreferBusEntity);
    atomic_store(result, (unint64_t *)&qword_101499D68);
  }
  return result;
}

unint64_t sub_1000D0D68()
{
  unint64_t result;

  result = qword_101499D70;
  if (!qword_101499D70)
  {
    result = swift_getWitnessTable(byte_100E2AEBC, &type metadata for TransitPreferBusEntity);
    atomic_store(result, (unint64_t *)&qword_101499D70);
  }
  return result;
}

unint64_t sub_1000D0DB0()
{
  unint64_t result;

  result = qword_101499D78;
  if (!qword_101499D78)
  {
    result = swift_getWitnessTable(byte_100E2AF14, &type metadata for TransitPreferBusEntity);
    atomic_store(result, (unint64_t *)&qword_101499D78);
  }
  return result;
}

uint64_t sub_1000D0DF4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = sub_1000D0FBC();
  result = UniqueAppEntity<>.id.getter(a1, v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_1000D0E30@<X0>(uint64_t a1@<X8>)
{
  return sub_100073694(&qword_101490DA0, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_1014D48E0, (uint64_t)sub_1000D01C4, a1);
}

uint64_t sub_1000D0E54()
{
  return sub_100010D70(&qword_101499D80, &qword_101499D88, (const char *)&protocol conformance descriptor for EmptyResolverSpecification<A>);
}

uint64_t sub_1000D0E80(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000D0978();
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_1000D0EBC()
{
  unint64_t result;

  result = qword_101499D90;
  if (!qword_101499D90)
  {
    result = swift_getWitnessTable(byte_100E2AF44, &type metadata for TransitPreferBusEntity);
    atomic_store(result, (unint64_t *)&qword_101499D90);
  }
  return result;
}

uint64_t sub_1000D0F00(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000D0FBC();
  return UniqueAppEntity.displayRepresentation.getter(a1, v2);
}

uint64_t sub_1000D0F38(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000D0DB0();
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_1000D0F74()
{
  unint64_t result;

  result = qword_101499D98;
  if (!qword_101499D98)
  {
    result = swift_getWitnessTable(byte_100E2AFAC, &type metadata for TransitPreferBusQuery);
    atomic_store(result, (unint64_t *)&qword_101499D98);
  }
  return result;
}

unint64_t sub_1000D0FBC()
{
  unint64_t result;

  result = qword_101499DA0[0];
  if (!qword_101499DA0[0])
  {
    result = swift_getWitnessTable(byte_100E2AD44, &type metadata for TransitPreferBusEntity);
    atomic_store(result, qword_101499DA0);
  }
  return result;
}

uint64_t sub_1000D1000(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 16) = a1;
  v3 = type metadata accessor for LocalizedStringResource(0, a2);
  *(_QWORD *)(v2 + 24) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000D1058, 0, 0);
}

uint64_t sub_1000D1058()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  sub_100008B04(&qword_101499D10);
  LocalizedStringResource.init(stringLiteral:)(0x4220726566657250, 0xEA00000000007375);
  v3 = sub_100010D70(&qword_101499E10, &qword_101499E18, (const char *)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  *v2 = _IntentUpdatableEntityProperty<>.init(title:get:set:intent:)(v1, &unk_101499E00, 0, &unk_101499E08, 0, &type metadata for TransitPreferBusEntity.UpdateIntent_value, v3);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D1114(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to UniqueAppEntityQuery.allEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_1000D09C0();
  *v4 = v2;
  v4[1] = sub_100073A34;
  return UniqueAppEntityQuery.allEntities()(a2, v5);
}

unint64_t sub_1000D1180()
{
  unint64_t result;

  result = qword_101499DB8;
  if (!qword_101499DB8)
  {
    result = swift_getWitnessTable("Um7", &type metadata for TransitPreferBusQuery);
    atomic_store(result, (unint64_t *)&qword_101499DB8);
  }
  return result;
}

unint64_t sub_1000D11C8()
{
  unint64_t result;

  result = qword_101499DC0[0];
  if (!qword_101499DC0[0])
  {
    result = swift_getWitnessTable("-k7", &type metadata for TransitPreferBusQuery);
    atomic_store(result, qword_101499DC0);
  }
  return result;
}

uint64_t sub_1000D120C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to UniqueAppEntityQuery.entities(for:)[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_1000D09C0();
  *v5 = v2;
  v5[1] = sub_100073B94;
  return UniqueAppEntityQuery.entities(for:)(a1, a2, v6);
}

uint64_t sub_1000D1278(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to UniqueAppEntityQuery.suggestedEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_1000D09C0();
  *v4 = v2;
  v4[1] = sub_1000742EC;
  return UniqueAppEntityQuery.suggestedEntities()(a2, v5);
}

unint64_t sub_1000D12E4()
{
  unint64_t result;

  result = qword_101499DD8;
  if (!qword_101499DD8)
  {
    result = swift_getWitnessTable(byte_100E2B0C4, &type metadata for TransitPreferBusQuery);
    atomic_store(result, (unint64_t *)&qword_101499DD8);
  }
  return result;
}

unint64_t sub_1000D132C()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_101499DE0;
  if (!qword_101499DE0)
  {
    v1 = sub_10000E5D4(qword_101499DE8);
    v2 = sub_1000D0D68();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_101499DE0);
  }
  return result;
}

uint64_t sub_1000D1390(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_1000D0AE0();
  *v5 = v2;
  v5[1] = sub_10000C0E0;
  return EntityQuery.results()(a1, a2, v6);
}

ValueMetadata *type metadata accessor for TransitPreferBusQuery()
{
  return &type metadata for TransitPreferBusQuery;
}

ValueMetadata *type metadata accessor for TransitPreferBusEntity.UpdateIntent_value()
{
  return &type metadata for TransitPreferBusEntity.UpdateIntent_value;
}

ValueMetadata *type metadata accessor for TransitPreferBusEntity()
{
  return &type metadata for TransitPreferBusEntity;
}

uint64_t sub_1000D142C()
{
  uint64_t v0;
  __n128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  char *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v27;
  void (*v28)(char *);
  unsigned int v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  char *v31;
  char *v32;
  char v33;
  uint64_t v34;

  v0 = sub_100008B04(&qword_1014964C0);
  v1 = __chkstk_darwin(v0);
  v32 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for InputConnectionBehavior(0, v1);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v31 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100008B04(&qword_1014964C8);
  __chkstk_darwin(v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v27 - v10;
  v12 = sub_100008B04(&qword_101494370);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for LocalizedStringResource(0, v13);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100008B04(&qword_101499E20);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000014, 0x8000000100E48650);
  v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
  v30(v15, 1, 1, v16);
  v34 = 0;
  v20 = type metadata accessor for IntentDialog(0);
  v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56);
  v21(v11, 1, 1, v20);
  v21(v8, 1, 1, v20);
  v29 = enum case for InputConnectionBehavior.default(_:);
  v28 = *(void (**)(char *))(v4 + 104);
  v22 = v31;
  v28(v31);
  v23 = sub_1000D0978();
  v27 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v19, v15, &v34, v11, v8, v22, v23);
  sub_100008B04(&qword_1014964D8);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000022, 0x8000000100E48670);
  v30(v15, 1, 1, v16);
  v33 = 2;
  v24 = type metadata accessor for Bool.IntentDisplayName(0);
  v25 = v32;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v32, 1, 1, v24);
  v21(v11, 1, 1, v20);
  ((void (*)(char *, _QWORD, uint64_t))v28)(v22, v29, v3);
  IntentParameter<>.init(title:description:default:displayName:requestValueDialog:inputConnectionBehavior:)(v19, v15, &v33, v25, v11, v22);
  return v27;
}

uint64_t sub_1000D1750@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  *a2 = v2;
  return swift_retain(v2);
}

void sub_1000D175C(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

uint64_t sub_1000D1790()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;

  sub_100080AC4(v1, v0, 0);
  v2._countAndFlagsBits = 0x6E6F74747542;
  v2._object = (void *)0xE600000000000000;
  String.append(_:)(v2);
  return v1;
}

uint64_t sub_1000D19B0()
{
  uint64_t v0;

  return ((uint64_t (*)(uint64_t))((char *)&loc_1000D199C + 4 * byte_100E2B16E[v0]))(0x747475426B636142);
}

void sub_1000D19E0()
{
  JUMPOUT(0x1000D199CLL);
}

void sub_1000D1A00()
{
  JUMPOUT(0x1000D199CLL);
}

void sub_1000D1A20()
{
  JUMPOUT(0x1000D199CLL);
}

void sub_1000D1A3C()
{
  JUMPOUT(0x1000D199CLL);
}

void sub_1000D1A50()
{
  JUMPOUT(0x1000D199CLL);
}

void sub_1000D1A68()
{
  JUMPOUT(0x1000D199CLL);
}

void sub_1000D1A88()
{
  JUMPOUT(0x1000D199CLL);
}

uint64_t sub_1000D1B08(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 0xCu)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 13);
}

uint64_t sub_1000D1B20(uint64_t result, unsigned int a2)
{
  if (a2 >= 0xD)
  {
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 13;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for MapsAccessibilityString()
{
  return &type metadata for MapsAccessibilityString;
}

uint64_t sub_1000D1B48(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(id, char *, _QWORD *);
  id v14;
  _QWORD v16[4];

  v8 = type metadata accessor for IndexPath(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void (**)(id, char *, _QWORD *))(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v16[3] = swift_getObjectType(a4);
  v16[0] = a4;
  swift_retain(v12);
  v14 = a2;
  swift_unknownObjectRetain(a4);
  v13(v14, v11, v16);

  swift_release(v12);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return sub_10000BEAC(v16);
}

uint64_t sub_1000D1D70(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void *a6, void *a7, uint64_t (*a8)(id, id, uint64_t, id, id))
{
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;

  v13 = a3;
  v14 = a4;
  swift_unknownObjectRetain(a5);
  v15 = a6;
  v16 = a7;
  v17 = a8(v13, v14, a5, v15, v16);

  swift_unknownObjectRelease(a5);
  return v17;
}

uint64_t sub_1000D1E9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *Strong;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  unsigned __int8 v15;
  char *v16;
  _BYTE v17[24];
  uint64_t v18;

  sub_1000110D4(a1, (uint64_t)v17);
  if (!v18)
  {
    sub_10000C180((uint64_t)v17);
    return 0;
  }
  v2 = type metadata accessor for PlaceSummaryOutlineCellModel();
  if ((swift_dynamicCast(&v16, v17, (char *)&type metadata for Any + 8, v2, 6) & 1) == 0)
    return 0;
  v3 = v16;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_delegate);
  v5 = &v3[OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_delegate];
  v6 = swift_unknownObjectWeakLoadStrong(&v3[OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_delegate]);
  swift_unknownObjectRelease(v6);
  v7 = v6 == 0;
  if (!Strong)
  {
LABEL_10:
    v10 = *(void **)(v1 + OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_searchResult);
    v11 = *(_QWORD *)&v3[OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_searchResult];
    if (v10)
    {
      if (v11 && objc_msgSend(v10, "isEqual:"))
      {
LABEL_13:
        v12 = *(void **)&v3[OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_placeSummaryViewModelTemplate];
        v13 = *(id *)(v1 + OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_placeSummaryViewModelTemplate);
        v14 = v12;
        v15 = objc_msgSend(v13, "isEqual:", v14);

        if ((v15 & 1) != 0)
          return v7;
        return 0;
      }
    }
    else if (!v11)
    {
      goto LABEL_13;
    }

    return 0;
  }
  if (!v6)
  {
    v7 = 0;
    goto LABEL_9;
  }
  result = swift_unknownObjectWeakLoadStrong(v5);
  if (result)
  {
    v9 = result;
    v7 = (unint64_t)objc_msgSend(Strong, "isEqual:", result);
    swift_unknownObjectRelease(v9);
LABEL_9:
    swift_unknownObjectRelease(Strong);
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

id sub_1000D2180@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v4;
  id v5;
  void *v6;
  __int128 v7;
  uint64_t v8;

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_searchResult))
  {
    v6 = *(void **)(v1 + OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_searchResult);
    v8 = sub_10000E4BC(0, &qword_101494570, off_101197F50);
    *(_QWORD *)&v7 = v6;
    sub_10000BE60(&v7, (_OWORD *)a1);
    return v6;
  }
  else
  {
    v4 = *(void **)(v1 + OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_rapObject);
    if (v4)
    {
      *(_QWORD *)(a1 + 24) = sub_10000E4BC(0, &qword_10149A048, off_101197E78);
      *(_QWORD *)a1 = v4;
    }
    else
    {
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
    }
    v5 = v4;
    return 0;
  }
}

id sub_1000D22D8()
{
  return sub_1000227F8(type metadata accessor for PlaceSummaryOutlineCellModel);
}

uint64_t type metadata accessor for PlaceSummaryOutlineCellModel()
{
  return objc_opt_self(_TtC4Maps28PlaceSummaryOutlineCellModel);
}

uint64_t sub_1000D237C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjCClassFromMetadata;
  void *v3;
  id v4;
  uint64_t result;
  _QWORD v6[6];

  v0 = type metadata accessor for PlaceSummaryOutlineCellRegistration();
  v1 = type metadata accessor for PlaceSummaryOutlineCell();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v1);
  v6[4] = sub_1000D243C;
  v6[5] = 0;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256;
  v6[2] = sub_1000D1B48;
  v6[3] = &unk_1011A1F88;
  v3 = _Block_copy(v6);
  v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(v0), "registrationWithCellClass:configurationHandler:", ObjCClassFromMetadata, v3);
  _Block_release(v3);
  result = swift_release();
  qword_1014D4930 = (uint64_t)v4;
  return result;
}

uint64_t sub_1000D243C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t result;
  void *v15;
  _BYTE v16[32];

  sub_100011E20(a3, (uint64_t)v16);
  v4 = sub_10000E4BC(0, (unint64_t *)&qword_101492DA0, &off_101197950);
  if ((swift_dynamicCast(&v15, v16, (char *)&type metadata for Any + 8, v4, 6) & 1) != 0)
  {
    v5 = v15;
    v6 = type metadata accessor for PlaceSummaryOutlineCell();
    v7 = swift_dynamicCastClass(a1, v6);
    if (v7)
    {
      v8 = v7;
      v9 = a1;
      v10 = objc_msgSend(v5, "viewModel");
      v11 = type metadata accessor for PlaceSummaryOutlineCellModel();
      v12 = swift_dynamicCastClass(v10, v11);
      if (v12)
      {
        v13 = *(void **)(v8 + OBJC_IVAR____TtC4Maps23PlaceSummaryOutlineCell_viewModel);
        *(_QWORD *)(v8 + OBJC_IVAR____TtC4Maps23PlaceSummaryOutlineCell_viewModel) = v12;
        swift_unknownObjectRetain_n(v10, 2);

        sub_1000D2674();
        return swift_unknownObjectRelease_n(v10, 2);
      }

      swift_unknownObjectRelease(v10);
    }
    else
    {

    }
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Maps/PlaceSummaryOutlineCell.swift", 34, 2, 96, 0);
  __break(1u);
  return result;
}

id sub_1000D25D4()
{
  return sub_1000227F8(type metadata accessor for PlaceSummaryOutlineCellRegistration);
}

uint64_t type metadata accessor for PlaceSummaryOutlineCellRegistration()
{
  return objc_opt_self(_TtC4Maps35PlaceSummaryOutlineCellRegistration);
}

void sub_1000D2674()
{
  char *v0;
  char *v1;
  char *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t KeyPath;
  uint64_t v7;
  id v8;
  id v9;
  char *v10;
  double v11;
  id v12;
  void *v13;
  double v14;
  double v15;
  void *v16;
  id v17;
  void *v18;
  int v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  char *v24;
  id v25;
  id v26;
  void *v27;
  void *v28;
  double v29;

  v1 = *(char **)&v0[OBJC_IVAR____TtC4Maps23PlaceSummaryOutlineCell_viewModel];
  if (v1)
  {
    v2 = v0;
    v3 = *(void **)&v1[OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_asyncDataManager];
    v4 = OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_placeSummaryViewModelTemplate;
    v5 = *(void **)&v1[OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_placeSummaryViewModelTemplate];
    KeyPath = swift_getKeyPath(&unk_100E2B318);
    v7 = swift_getKeyPath(&unk_100E2B340);
    v8 = v5;
    v9 = v3;
    v10 = v1;
    static Published.subscript.getter(&v29, v8, KeyPath, v7);

    swift_release();
    swift_release();
    v11 = v29;
    v12 = objc_msgSend((id)objc_opt_self(MKSystemController), "sharedInstance");
    if (v12)
    {
      v13 = v12;
      objc_msgSend(v12, "screenScale");
      v15 = v14;

      sub_1001118B0(v11, v15);
      v16 = *(void **)&v10[OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_searchResult];
      if (v16)
      {
        v17 = objc_msgSend(v16, "placeCollection");
        if (v17)
        {
          v18 = v17;
          v19 = *(unsigned __int8 *)(*(_QWORD *)&v1[v4]
                                   + OBJC_IVAR____TtC4Maps29PlaceSummaryViewModelTemplate_containsPhotoCarouselLine);
          v20 = objc_allocWithZone((Class)type metadata accessor for CuratedGuideViewModel(0));
          v21 = v18;
          v22 = sub_1000D53F0(v21, v19);

          v23 = *(void **)&v10[OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_curatedCollectionImageDownloader];
          v24 = (char *)v22;
          v25 = v23;
          sub_1001AC984(v24);

          v26 = sub_1000D55B0(1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
          v27 = *(void **)&v24[OBJC_IVAR____TtC4Maps21CuratedGuideViewModel_metrics];
          *(_QWORD *)&v24[OBJC_IVAR____TtC4Maps21CuratedGuideViewModel_metrics] = v26;

          v28 = *(void **)&v2[OBJC_IVAR____TtC4Maps23PlaceSummaryOutlineCell_curatedGuideViewModel];
          *(_QWORD *)&v2[OBJC_IVAR____TtC4Maps23PlaceSummaryOutlineCell_curatedGuideViewModel] = v24;

        }
      }
      objc_msgSend(v2, "setNeedsUpdateConfiguration");

    }
    else
    {
      __break(1u);
    }
  }
}

void sub_1000D2904()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  Class isa;
  objc_class *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSString v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  char **v32;
  uint64_t v33;
  _QWORD v34[5];
  uint64_t v35;
  uint64_t v36;
  objc_super v37;

  v1 = v0;
  v2 = sub_100008B04(&qword_101499EF0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v34[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  isa = UICellConfigurationState._bridgeToObjectiveC()().super.super.isa;
  v7 = (objc_class *)type metadata accessor for PlaceSummaryOutlineCell();
  v37.receiver = v1;
  v37.super_class = v7;
  objc_msgSendSuper2(&v37, "_bridgedUpdateConfigurationUsingState:", isa);

  v8 = OBJC_IVAR____TtC4Maps23PlaceSummaryOutlineCell_viewModel;
  v9 = *(void **)&v1[OBJC_IVAR____TtC4Maps23PlaceSummaryOutlineCell_viewModel];
  if (v9)
  {
    v10 = *(_QWORD *)&v1[OBJC_IVAR____TtC4Maps23PlaceSummaryOutlineCell_curatedGuideViewModel];
    v34[0] = swift_getObjectType(v1);
    v11 = v9;
    v12 = sub_100008B04(&qword_101499EE8);
    v13 = String.init<A>(describing:)(v34, v12);
    v15 = v14;
    if (v10)
    {
      v16 = 0x646574617275432ELL;
      v17 = 0xED00006564697547;
    }
    else
    {
      v16 = 0x736563616C502ELL;
      v17 = 0xE700000000000000;
    }
    v34[0] = v16;
    v34[1] = v17;
    v35 = v13;
    v36 = v14;
    swift_bridgeObjectRetain(v14);
    v35 = String.init<A>(_:)(&v35, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
    v36 = v18;
    String.append<A>(contentsOf:)(v34, &type metadata for String, &protocol witness table for String);
    swift_bridgeObjectRelease(v15);
    v19 = v36;
    v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v19);
    objc_msgSend(v1, "setAccessibilityIdentifier:", v20);

    __chkstk_darwin(v21);
    *(&v33 - 2) = (uint64_t)v1;
    *(&v33 - 1) = (uint64_t)v9;
    v22 = sub_100008B04(&qword_101499EF8);
    v23 = sub_1000D3A50(&qword_101499F00, &qword_101499EF8, sub_1000D3A2C, (uint64_t (*)(void))sub_1000D3BC8);
    v25.n128_f64[0] = UIHostingConfiguration<>.init(content:)(sub_1000D3A24, &v33 - 4, v22, v23, v24);
    v26 = static Edge.Set.all.getter(v25);
    v34[3] = v2;
    v34[4] = sub_100010D70((unint64_t *)&unk_10149A020, &qword_101499EF0, (const char *)&protocol conformance descriptor for UIHostingConfiguration<A, B>);
    sub_100011DCC(v34);
    UIHostingConfiguration.margins(_:_:)(v26, v2, 0.0);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    UICollectionViewCell.contentConfiguration.setter(v34);
    v27 = *(_QWORD *)&v1[v8];
    if (v27)
    {
      v28 = *(void **)(v27 + OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_searchResult);
      if (v28)
      {
        v29 = objc_msgSend(v28, "mapItem");
        if (v29)
        {
          v30 = v29;
          v31 = objc_msgSend(v29, "_venueFeatureType");
          v32 = &selRef__maps_addDisclosureIndicator;
          if (v31 != (id)1)
            v32 = &selRef__maps_removeDisclosureIndicator;
          objc_msgSend(v1, *v32);

          v9 = v30;
        }
      }
    }

  }
}

double sub_1000D2C30@<D0>(uint64_t a1@<X0>, char *a2@<X1>, _OWORD *a3@<X8>)
{
  _BYTE *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  double result;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t KeyPath;
  uint64_t v54;
  id v55;
  char IsEnabled_SearchAndDiscovery;
  uint64_t v57;
  uint64_t v58;
  _OWORD v59[10];
  _OWORD v60[2];
  __int128 v61;
  __int128 v62;
  id v63;
  uint64_t v64;
  void *(*v65)(uint64_t *);
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t *);
  uint64_t v69;
  uint64_t v70;
  void *(*v71)(uint64_t *);
  uint64_t v72;
  uint64_t v73;
  void *(*v74)(uint64_t *);
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t);
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t *);
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  _OWORD v92[3];

  v4 = *(_BYTE **)(a1 + OBJC_IVAR____TtC4Maps23PlaceSummaryOutlineCell_curatedGuideViewModel);
  if (v4)
  {
    v5 = v4[OBJC_IVAR____TtC4Maps21CuratedGuideViewModel_useRichLayout];
    v6 = type metadata accessor for CuratedGuideViewModel(0);
    v7 = sub_10000BC84((unint64_t *)&qword_101498DB8, type metadata accessor for CuratedGuideViewModel, (uint64_t)"ml7");
    v8 = v4;
    *(_QWORD *)&v61 = EnvironmentObject.init()(v6, v7);
    *((_QWORD *)&v61 + 1) = v9;
    *(_QWORD *)&v62 = static ObservableObject.environmentStore.getter(v6, v7);
    *((_QWORD *)&v62 + 1) = v4;
    LOBYTE(v63) = (v5 & 1) == 0;
    v32 = v8;
    v33 = sub_100008B04((uint64_t *)&unk_101499F20);
    v34 = sub_100008B04(&qword_101498D90);
    v35 = sub_1000D3AC0();
    v36 = sub_1000D3B44();
    _ConditionalContent<>.init(storage:)(&v61, v33, v34, v35, v36);
    v37 = v82;
    v38 = v83;
    v61 = v82;
    v62 = v83;
    LOBYTE(v63) = v84;
    sub_1000D4110((uint64_t)&v61);
    sub_1000D40C8((uint64_t)&v61, (uint64_t)&v82);
    sub_1000D4118((void *)v37, *((uint64_t *)&v37 + 1), v38, *((void **)&v38 + 1));
    v39 = sub_100008B04((uint64_t *)&unk_101499F10);
    v40 = sub_100008B04(&qword_101499F60);
    v41 = sub_1000D3A2C();
    v42 = sub_1000D3BC8();
    _ConditionalContent<>.init(storage:)(&v82, v39, v40, v41, v42);

    sub_1000D4144((void *)v37, *((uint64_t *)&v37 + 1), v38, *((void **)&v38 + 1));
    v90 = v59[8];
    v91 = v59[9];
    v92[0] = v60[0];
    *(_OWORD *)((char *)v92 + 9) = *(_OWORD *)((char *)v60 + 9);
    v86 = v59[4];
    v87 = v59[5];
    v88 = v59[6];
    v89 = v59[7];
    v82 = v59[0];
    v83 = v59[1];
    v84 = v59[2];
    v85 = v59[3];
  }
  else
  {
    v12 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
    v13 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
    v14 = EnvironmentObject.init()(v12, v13);
    v57 = v15;
    v58 = v14;
    IsEnabled_SearchAndDiscovery = MapsFeature_IsEnabled_SearchAndDiscovery(v14);
    v55 = *(id *)&a2[OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_placeSummaryViewModelTemplate];
    v54 = static ObservableObject.environmentStore.getter(v12, v13);
    KeyPath = swift_getKeyPath(&unk_100E2B218);
    v52 = swift_allocObject(&unk_1011A1E80, 24, 7);
    *(_QWORD *)(v52 + 16) = a2;
    v51 = swift_getKeyPath(&unk_100E2B240);
    v16 = swift_allocObject(&unk_1011A1EA8, 24, 7);
    *(_QWORD *)(v16 + 16) = a2;
    v50 = swift_getKeyPath(&unk_100E2B268);
    v17 = swift_allocObject(&unk_1011A1ED0, 24, 7);
    swift_unknownObjectWeakInit(v17 + 16, a1);
    v18 = swift_allocObject(&unk_1011A1EF8, 32, 7);
    *(_QWORD *)(v18 + 16) = v17;
    *(_QWORD *)(v18 + 24) = a2;
    v49 = swift_getKeyPath(&unk_100E2B290);
    v19 = swift_allocObject(&unk_1011A1ED0, 24, 7);
    swift_unknownObjectWeakInit(v19 + 16, a1);
    v20 = swift_allocObject(&unk_1011A1F20, 32, 7);
    *(_QWORD *)(v20 + 16) = v19;
    *(_QWORD *)(v20 + 24) = a2;
    v21 = swift_getKeyPath(&unk_100E2B2B8);
    v22 = swift_allocObject(&unk_1011A1ED0, 24, 7);
    swift_unknownObjectWeakInit(v22 + 16, a1);
    v23 = swift_allocObject(&unk_1011A1F48, 32, 7);
    *(_QWORD *)(v23 + 16) = v22;
    *(_QWORD *)(v23 + 24) = a2;
    v24 = swift_getKeyPath(&unk_100E2B2E0);
    v25 = swift_allocObject(&unk_1011A1ED0, 24, 7);
    swift_unknownObjectWeakInit(v25 + 16, a1);
    v26 = swift_allocObject(&unk_1011A1F70, 32, 7);
    *(_QWORD *)(v26 + 16) = v25;
    *(_QWORD *)(v26 + 24) = a2;
    *(_QWORD *)&v61 = v58;
    *((_QWORD *)&v61 + 1) = v57;
    LOBYTE(v62) = IsEnabled_SearchAndDiscovery;
    *((_QWORD *)&v62 + 1) = v54;
    v63 = v55;
    v64 = KeyPath;
    v65 = sub_1000D3FD4;
    v66 = v52;
    v67 = v51;
    v68 = sub_1000D3FE4;
    v69 = v16;
    v70 = v50;
    v71 = sub_1000D401C;
    v72 = v18;
    v73 = v49;
    v74 = sub_1000D4048;
    v75 = v20;
    v76 = v21;
    v77 = sub_1000D4074;
    v78 = v23;
    v79 = v24;
    v80 = sub_1000D40B4;
    v81 = v26;
    sub_1000D40BC((uint64_t)&v61);
    sub_1000D40C8((uint64_t)&v61, (uint64_t)v59);
    v27 = a2;
    v28 = sub_100008B04((uint64_t *)&unk_101499F10);
    v29 = sub_100008B04(&qword_101499F60);
    v30 = sub_1000D3A2C();
    v31 = sub_1000D3BC8();
    _ConditionalContent<>.init(storage:)(v59, v28, v29, v30, v31);
  }
  v43 = v91;
  a3[8] = v90;
  a3[9] = v43;
  a3[10] = v92[0];
  *(_OWORD *)((char *)a3 + 169) = *(_OWORD *)((char *)v92 + 9);
  v44 = v87;
  a3[4] = v86;
  a3[5] = v44;
  v45 = v89;
  a3[6] = v88;
  a3[7] = v45;
  v46 = v83;
  *a3 = v82;
  a3[1] = v46;
  result = *(double *)&v84;
  v48 = v85;
  a3[2] = v84;
  a3[3] = v48;
  return result;
}

void *sub_1000D316C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *result;
  void *v4;

  v2 = *a1;
  result = (void *)swift_unknownObjectWeakLoadStrong(a2 + OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_delegate);
  if (result)
  {
    v4 = result;
    objc_msgSend(result, "didTapOnUserGeneratedGuide:", v2);
    return (void *)swift_unknownObjectRelease(v4);
  }
  return result;
}

void sub_1000D31C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *Strong;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  Class isa;
  id v16;

  v3 = *a1;
  v4 = (unint64_t)*a1 >> 62;
  if (v4)
  {
    if (v3 < 0)
      v12 = *a1;
    else
      v12 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*a1);
    if (_CocoaArrayWrapper.endIndex.getter(v12))
    {
LABEL_3:
      if ((v3 & 0xC000000000000001) != 0)
      {
        v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v3);
      }
      else
      {
        if (!*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        v6 = *(id *)(v3 + 32);
      }
      v16 = v6;
      swift_bridgeObjectRelease(v3);
      if (v4)
      {
        if (v3 < 0)
          v7 = v3;
        else
          v7 = v3 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v3);
        v8 = _CocoaArrayWrapper.endIndex.getter(v7);
        swift_bridgeObjectRelease(v3);
        if (v8 != 1)
          goto LABEL_8;
      }
      else if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10) != 1)
      {
LABEL_8:

        goto LABEL_21;
      }
      Strong = (void *)swift_unknownObjectWeakLoadStrong(a2 + OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_delegate);
      if (!Strong)
      {

        return;
      }
      v10 = Strong;
      objc_msgSend(Strong, "didTapOnCuratedGuide:", v16);

      v11 = v10;
      goto LABEL_23;
    }
  }
  else
  {
    v5 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(*a1);
    if (v5)
      goto LABEL_3;
  }
  swift_bridgeObjectRelease(v3);
LABEL_21:
  v13 = swift_unknownObjectWeakLoadStrong(a2 + OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_delegate);
  if (v13)
  {
    v14 = (void *)v13;
    sub_10000E4BC(0, (unint64_t *)&qword_10149A040, GEOPlaceCollection_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v14, "didTapOnCuratedGuides:", isa);

    v11 = v14;
LABEL_23:
    swift_unknownObjectRelease(v11);
  }
}

void *sub_1000D3384(uint64_t *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t v6;
  uint64_t v7;
  void *result;
  void *v9;
  _BYTE v10[24];

  v6 = *a1;
  v7 = a2 + 16;
  swift_beginAccess(a2 + 16, v10, 0, 0);
  result = (void *)swift_unknownObjectWeakLoadStrong(v7);
  if (result)
  {

    result = (void *)swift_unknownObjectWeakLoadStrong(a3 + OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_delegate);
    if (result)
    {
      v9 = result;
      objc_msgSend(result, *a4, v6);
      return (void *)swift_unknownObjectRelease(v9);
    }
  }
  return result;
}

void sub_1000D340C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *Strong;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  _BYTE v10[24];

  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v10, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v4);
  if (Strong)
  {

    v6 = *(void **)(a3 + OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_searchResult);
    if (v6)
    {
      v7 = swift_unknownObjectWeakLoadStrong(a3 + OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_delegate);
      if (v7)
      {
        v8 = (void *)v7;
        v9 = v6;
        objc_msgSend(v8, "didTapOnUserNote:", v9);

        swift_unknownObjectRelease(v8);
      }
    }
  }
}

void sub_1000D34A8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *Strong;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  _BYTE v11[24];

  v4 = *a1;
  v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v11, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {

    v7 = *(void **)(a3 + OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_searchResult);
    if (v7)
    {
      v8 = swift_unknownObjectWeakLoadStrong(a3 + OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_delegate);
      if (v8)
      {
        v9 = (void *)v8;
        v10 = v7;
        objc_msgSend(v9, "didTapOnPhotoCarousel:index:", v10, v4);

        swift_unknownObjectRelease(v9);
      }
    }
  }
}

id sub_1000D35F0(double a1, double a2, double a3, double a4)
{
  char *v4;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSString v14;
  uint64_t ObjectType;
  objc_super v17;

  *(_QWORD *)&v4[OBJC_IVAR____TtC4Maps23PlaceSummaryOutlineCell_curatedGuideViewModel] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC4Maps23PlaceSummaryOutlineCell_viewModel] = 0;
  v17.receiver = v4;
  v17.super_class = (Class)type metadata accessor for PlaceSummaryOutlineCell();
  v9 = objc_msgSendSuper2(&v17, "initWithFrame:", a1, a2, a3, a4);
  ObjectType = swift_getObjectType(v9);
  v10 = v9;
  v11 = sub_100008B04(&qword_101499EE8);
  String.init<A>(describing:)(&ObjectType, v11);
  v13 = v12;
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v13);
  objc_msgSend(v10, "setAccessibilityIdentifier:", v14);

  return v10;
}

void sub_1000D383C(char a1)
{
  char *v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  char **v6;
  id v7;

  if (objc_msgSend(v1, "isHovering") != (a1 & 1))
  {
    v2 = *(_QWORD *)&v1[OBJC_IVAR____TtC4Maps23PlaceSummaryOutlineCell_viewModel];
    if (v2)
    {
      v3 = *(void **)(v2 + OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_searchResult);
      if (v3)
      {
        v4 = objc_msgSend(v3, "mapItem");
        if (v4)
        {
          v7 = v4;
          v5 = objc_msgSend(v4, "_venueFeatureType");
          v6 = &selRef__maps_addDisclosureIndicator;
          if (v5 != (id)1)
            v6 = &selRef__maps_removeDisclosureIndicator;
          objc_msgSend(v1, *v6);

        }
      }
    }
  }
}

void sub_1000D38F8()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  char **v5;
  id v6;

  v1 = *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps23PlaceSummaryOutlineCell_viewModel];
  if (v1)
  {
    v2 = *(void **)(v1 + OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_searchResult);
    if (v2)
    {
      v3 = objc_msgSend(v2, "mapItem");
      if (v3)
      {
        v6 = v3;
        v4 = objc_msgSend(v3, "_venueFeatureType");
        v5 = &selRef__maps_addDisclosureIndicator;
        if (v4 != (id)1)
          v5 = &selRef__maps_removeDisclosureIndicator;
        objc_msgSend(v0, *v5);

      }
    }
  }
}

id sub_1000D39C0()
{
  return sub_1000227F8(type metadata accessor for PlaceSummaryOutlineCell);
}

uint64_t type metadata accessor for PlaceSummaryOutlineCell()
{
  return objc_opt_self(_TtC4Maps23PlaceSummaryOutlineCell);
}

double sub_1000D3A24@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1000D2C30(*(_QWORD *)(v1 + 16), *(char **)(v1 + 24), a1);
}

uint64_t sub_1000D3A2C()
{
  return sub_1000D3A50(&qword_101499F08, (uint64_t *)&unk_101499F10, (uint64_t (*)(void))sub_1000D3AC0, (uint64_t (*)(void))sub_1000D3B44);
}

uint64_t sub_1000D3A50(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = sub_10000E5D4(a2);
    v9[0] = a3();
    v9[1] = a4();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000D3AC0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101498D50;
  if (!qword_101498D50)
  {
    v1 = sub_10000E5D4((uint64_t *)&unk_101499F20);
    v2[0] = sub_1000B1000();
    v2[1] = sub_100010D70((unint64_t *)&unk_101499F30, &qword_101498D60, (const char *)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101498D50);
  }
  return result;
}

unint64_t sub_1000D3B44()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101499F40;
  if (!qword_101499F40)
  {
    v1 = sub_10000E5D4(&qword_101498D90);
    v2[0] = sub_1000B1164();
    v2[1] = sub_100010D70((unint64_t *)&unk_101499F30, &qword_101498D60, (const char *)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101499F40);
  }
  return result;
}

unint64_t sub_1000D3BC8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101499F58;
  if (!qword_101499F58)
  {
    v1 = sub_10000E5D4(&qword_101499F60);
    v2[0] = sub_1000D3C4C();
    v2[1] = sub_100010D70(&qword_10149A010, &qword_10149A018, (const char *)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101499F58);
  }
  return result;
}

unint64_t sub_1000D3C4C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101499F68;
  if (!qword_101499F68)
  {
    v1 = sub_10000E5D4(&qword_101499F70);
    v2[0] = sub_1000D3CD0();
    v2[1] = sub_100010D70(&qword_10149A000, &qword_10149A008, (const char *)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101499F68);
  }
  return result;
}

unint64_t sub_1000D3CD0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101499F78;
  if (!qword_101499F78)
  {
    v1 = sub_10000E5D4(&qword_101499F80);
    v2[0] = sub_1000D3D54();
    v2[1] = sub_100010D70(&qword_10149A000, &qword_10149A008, (const char *)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101499F78);
  }
  return result;
}

unint64_t sub_1000D3D54()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101499F88;
  if (!qword_101499F88)
  {
    v1 = sub_10000E5D4(&qword_101499F90);
    v2[0] = sub_1000D3DD8();
    v2[1] = sub_100010D70(&qword_10149A000, &qword_10149A008, (const char *)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101499F88);
  }
  return result;
}

unint64_t sub_1000D3DD8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101499F98;
  if (!qword_101499F98)
  {
    v1 = sub_10000E5D4(&qword_101499FA0);
    v2[0] = sub_1000D3E5C();
    v2[1] = sub_100010D70((unint64_t *)&unk_101499FF0, &qword_101498D68, (const char *)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101499F98);
  }
  return result;
}

unint64_t sub_1000D3E5C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101499FA8;
  if (!qword_101499FA8)
  {
    v1 = sub_10000E5D4(&qword_101499FB0);
    v2[0] = sub_1000D3EE0();
    v2[1] = sub_100010D70(&qword_101499FE0, &qword_101499FE8, (const char *)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101499FA8);
  }
  return result;
}

unint64_t sub_1000D3EE0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101499FB8;
  if (!qword_101499FB8)
  {
    v1 = sub_10000E5D4(&qword_101499FC0);
    v2[0] = sub_1000D3F64();
    v2[1] = sub_100010D70(&qword_101499FD0, &qword_101499FD8, (const char *)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101499FB8);
  }
  return result;
}

unint64_t sub_1000D3F64()
{
  unint64_t result;

  result = qword_101499FC8;
  if (!qword_101499FC8)
  {
    result = swift_getWitnessTable(byte_100E24AE4, &type metadata for PlaceSummaryView);
    atomic_store(result, (unint64_t *)&qword_101499FC8);
  }
  return result;
}

uint64_t sub_1000D3FB0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void *sub_1000D3FD4(uint64_t *a1)
{
  uint64_t v1;

  return sub_1000D316C(a1, *(_QWORD *)(v1 + 16));
}

void sub_1000D3FE4(uint64_t *a1)
{
  uint64_t v1;

  sub_1000D31C0(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1000D3FF4()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void *sub_1000D401C(uint64_t *a1)
{
  uint64_t v1;

  return sub_1000D3384(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (SEL *)&selRef_didTapOnContainment_);
}

void *sub_1000D4048(uint64_t *a1)
{
  uint64_t v1;

  return sub_1000D3384(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (SEL *)&selRef_didTapOnUserLibrary_);
}

void sub_1000D4074(uint64_t a1)
{
  uint64_t v1;

  sub_1000D340C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000D4088()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_1000D40B4(uint64_t *a1)
{
  uint64_t v1;

  sub_1000D34A8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000D40BC(uint64_t result)
{
  *(_BYTE *)(result + 184) = 1;
  return result;
}

uint64_t sub_1000D40C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008B04((uint64_t *)&unk_10149A030);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D4110(uint64_t result)
{
  *(_BYTE *)(result + 184) = 0;
  return result;
}

uint64_t sub_1000D4118(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;

  v6 = a4;
  v7 = a1;
  return swift_retain(a3);
}

void sub_1000D4144(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  swift_release(a3);

}

id sub_1000D4184(void *a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  char *v5;
  uint64_t v11;
  char *v12;
  void *v13;
  char *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  objc_super v20;

  *(_QWORD *)&v5[OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_searchResult] = 0;
  v11 = OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_rapObject;
  *(_QWORD *)&v5[OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_rapObject] = 0;
  v12 = &v5[OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_delegate];
  swift_unknownObjectWeakInit(&v5[OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_delegate], 0);
  *(_QWORD *)&v5[OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_placeSummaryViewModelTemplate] = a2;
  v13 = *(void **)&v5[v11];
  *(_QWORD *)&v5[v11] = a1;
  v14 = v5;
  v15 = a2;
  v16 = a1;

  swift_unknownObjectWeakAssign(v12, a3);
  *(_QWORD *)&v14[OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_asyncDataManager] = a4;
  *(_QWORD *)&v14[OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_curatedCollectionImageDownloader] = a5;
  v17 = a4;
  v18 = a5;

  v20.receiver = v14;
  v20.super_class = (Class)type metadata accessor for PlaceSummaryOutlineCellModel();
  return objc_msgSendSuper2(&v20, "init");
}

id sub_1000D4278(void *a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  char *v5;
  uint64_t v11;
  char *v12;
  void *v13;
  char *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  objc_super v20;

  v11 = OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_searchResult;
  *(_QWORD *)&v5[OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_searchResult] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_rapObject] = 0;
  v12 = &v5[OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_delegate];
  swift_unknownObjectWeakInit(&v5[OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_delegate], 0);
  *(_QWORD *)&v5[OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_placeSummaryViewModelTemplate] = a2;
  v13 = *(void **)&v5[v11];
  *(_QWORD *)&v5[v11] = a1;
  v14 = v5;
  v15 = a2;
  v16 = a1;

  swift_unknownObjectWeakAssign(v12, a3);
  *(_QWORD *)&v14[OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_asyncDataManager] = a4;
  *(_QWORD *)&v14[OBJC_IVAR____TtC4Maps28PlaceSummaryOutlineCellModel_curatedCollectionImageDownloader] = a5;
  v17 = a4;
  v18 = a5;

  v20.receiver = v14;
  v20.super_class = (Class)type metadata accessor for PlaceSummaryOutlineCellModel();
  return objc_msgSendSuper2(&v20, "init");
}

uint64_t sub_1000D436C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000D437C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

ValueMetadata *type metadata accessor for PlaceSummaryUnitContainment()
{
  return &type metadata for PlaceSummaryUnitContainment;
}

uint64_t _s4Maps27PlaceSummaryUnitContainmentV31PlaceSummaryUnitContainmentTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000D43EC + 4 * byte_100E2B365[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000D4420 + 4 * byte_100E2B360[v4]))();
}

uint64_t sub_1000D4420(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D4428(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000D4430);
  return result;
}

uint64_t sub_1000D443C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000D4444);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000D4448(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D4450(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PlaceSummaryUnitContainment.PlaceSummaryUnitContainmentType()
{
  return &type metadata for PlaceSummaryUnitContainment.PlaceSummaryUnitContainmentType;
}

unint64_t sub_1000D4470()
{
  unint64_t result;

  result = qword_10149A050;
  if (!qword_10149A050)
  {
    result = swift_getWitnessTable(byte_100E2B3F0, &type metadata for PlaceSummaryUnitContainment.PlaceSummaryUnitContainmentType);
    atomic_store(result, (unint64_t *)&qword_10149A050);
  }
  return result;
}

double sub_1000D4594()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  double v4;

  KeyPath = swift_getKeyPath(&unk_100E2B4D0);
  v2 = swift_getKeyPath(&unk_100E2B4F8);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

double sub_1000D4678@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  double v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100E2B4D0);
  v5 = swift_getKeyPath(&unk_100E2B4F8);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  result = v7;
  *a2 = v7;
  return result;
}

uint64_t sub_1000D46F4(uint64_t *a1, void **a2)
{
  uint64_t v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100E2B4D0);
  v5 = swift_getKeyPath(&unk_100E2B4F8);
  v7 = v2;
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_1000D4768()
{
  return sub_100088DCC((uint64_t)&unk_100E2B560, (uint64_t)&unk_100E2B588);
}

uint64_t sub_1000D477C()
{
  return sub_100088DCC((uint64_t)&unk_100E2B518, (uint64_t)&unk_100E2B540);
}

uint64_t sub_1000D4828()
{
  uint64_t v0;
  void *v1;
  NSString v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  id v17;
  id v18;
  Swift::String v19;
  void *object;
  Swift::String v21;
  Swift::String v22;
  uint64_t countAndFlagsBits;
  Swift::String v25;

  if (qword_101490ED0 != -1)
    swift_once(&qword_101490ED0, sub_10011833C);
  v1 = (void *)qword_1014D4B80;
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v1, "localizedStringForKey:value:table:", v2, v3, 0);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  v8 = sub_100008B04((uint64_t *)&unk_10149A4F0);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100E22F40;
  v10 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC4Maps21CuratedGuideViewModel_placeCollection), "numberOfItems");
  *(_QWORD *)(v9 + 56) = &type metadata for UInt;
  *(_QWORD *)(v9 + 64) = &protocol witness table for UInt;
  *(_QWORD *)(v9 + 32) = v10;
  v11 = static String.localizedStringWithFormat(_:_:)(v5, v7, v9);
  v13 = v12;
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v7);
  v14._countAndFlagsBits = 0xD000000000000022;
  v25._countAndFlagsBits = 0xD000000000000035;
  v25._object = (void *)0x8000000100E48D20;
  v14._object = (void *)0x8000000100E48CF0;
  v15._countAndFlagsBits = 0x4544495547;
  v15._object = (void *)0xE500000000000000;
  v16 = NSLocalizedString(_:tableName:bundle:value:comment:)(v14, (Swift::String_optional)0, (NSBundle)qword_1014D4B80, v15, v25);
  v17 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v18 = objc_msgSend(v17, "userInterfaceLayoutDirection");

  if (v18 == (id)1)
  {
    countAndFlagsBits = v11;
    v19._countAndFlagsBits = 548913696;
    v19._object = (void *)0xA400000000000000;
    String.append(_:)(v19);
    String.append(_:)(v16);
    object = v16._object;
  }
  else
  {
    countAndFlagsBits = v16._countAndFlagsBits;
    v21._countAndFlagsBits = 548913696;
    v21._object = (void *)0xA400000000000000;
    String.append(_:)(v21);
    v22._countAndFlagsBits = v11;
    v22._object = v13;
    String.append(_:)(v22);
    object = v13;
  }
  swift_bridgeObjectRelease(object);
  return countAndFlagsBits;
}

double sub_1000D4C00()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t KeyPath;
  uint64_t v4;
  double v6;

  v1 = v0;
  v2 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC4Maps21CuratedGuideViewModel_useRichLayout);
  KeyPath = swift_getKeyPath(&unk_100E2B4D0);
  v4 = swift_getKeyPath(&unk_100E2B4F8);
  static Published.subscript.getter(&v6, v1, KeyPath, v4);
  swift_release(KeyPath);
  swift_release(v4);
  if (v2 == 1)
    return v6 + -32.0 + -6.0;
  else
    return v6 * 0.203562341;
}

double sub_1000D4CFC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t KeyPath;
  uint64_t v4;
  double v5;
  double v7;

  v1 = v0;
  v2 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC4Maps21CuratedGuideViewModel_useRichLayout);
  KeyPath = swift_getKeyPath(&unk_100E2B4D0);
  v4 = swift_getKeyPath(&unk_100E2B4F8);
  static Published.subscript.getter(&v7, v1, KeyPath, v4);
  swift_release(KeyPath);
  swift_release(v4);
  if (v2 == 1)
    v5 = 0.656509695;
  else
    v5 = 0.203562341;
  return v7 * v5;
}

uint64_t sub_1000D4DB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  id v5;
  char v6;
  char *v8;
  _BYTE v9[24];
  uint64_t v10;

  sub_1000110D4(a1, (uint64_t)v9);
  if (!v10)
  {
    sub_10000C180((uint64_t)v9);
    goto LABEL_5;
  }
  v2 = type metadata accessor for CuratedGuideViewModel(0);
  if ((swift_dynamicCast(&v8, v9, (char *)&type metadata for Any + 8, v2, 6) & 1) == 0)
  {
LABEL_5:
    v6 = 0;
    return v6 & 1;
  }
  v3 = v8;
  sub_1000D53B4();
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps21CuratedGuideViewModel_placeCollection);
  v5 = *(id *)&v3[OBJC_IVAR____TtC4Maps21CuratedGuideViewModel_placeCollection];
  v6 = static NSObject.== infix(_:_:)(v5, v4);

  return v6 & 1;
}

id sub_1000D4F48()
{
  return sub_100086D98(0, (uint64_t (*)(void))type metadata accessor for CuratedGuideViewModel);
}

uint64_t sub_1000D501C()
{
  return type metadata accessor for CuratedGuideViewModel(0);
}

uint64_t type metadata accessor for CuratedGuideViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_10149A0B0;
  if (!qword_10149A0B0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CuratedGuideViewModel);
  return result;
}

void sub_1000D5060(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];
  uint64_t v7;
  uint64_t v8;

  v6[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[1] = &unk_100E2B448;
  v6[2] = &unk_100E2B460;
  sub_1000D510C();
  if (v3 <= 0x3F)
  {
    v6[3] = *(_QWORD *)(v2 - 8) + 64;
    sub_1000D5160(319);
    if (v5 <= 0x3F)
    {
      v7 = *(_QWORD *)(v4 - 8) + 64;
      v8 = v7;
      swift_updateClassMetadata2(a1, 256, 6, v6, a1 + 80);
    }
  }
}

void sub_1000D510C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_101496B60)
  {
    v0 = type metadata accessor for Published(0, &type metadata for CGFloat);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_101496B60);
  }
}

void sub_1000D5160(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_101497208)
  {
    v2 = sub_10000E5D4((uint64_t *)&unk_101497210);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_101497208);
  }
}

uint64_t sub_1000D51B8@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for CuratedGuideViewModel(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

id sub_1000D5284(char a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  _BYTE *v9;
  objc_super v11;

  *(double *)&v9[OBJC_IVAR____TtC4Maps19GuideSummaryMetrics_leadingMargin] = a2;
  *(double *)&v9[OBJC_IVAR____TtC4Maps19GuideSummaryMetrics_trailingMargin] = a3;
  *(double *)&v9[OBJC_IVAR____TtC4Maps19GuideSummaryMetrics_topMargin] = a4;
  *(double *)&v9[OBJC_IVAR____TtC4Maps19GuideSummaryMetrics_bottomMargin] = a5;
  *(double *)&v9[OBJC_IVAR____TtC4Maps19GuideSummaryMetrics_topLeadingCornerRadius] = a6;
  *(double *)&v9[OBJC_IVAR____TtC4Maps19GuideSummaryMetrics_topTrailingCornerRadius] = a7;
  *(double *)&v9[OBJC_IVAR____TtC4Maps19GuideSummaryMetrics_bottomLeadingCornerRadius] = a8;
  *(double *)&v9[OBJC_IVAR____TtC4Maps19GuideSummaryMetrics_bottomTrailingCornerRadius] = a9;
  v9[OBJC_IVAR____TtC4Maps19GuideSummaryMetrics_showsDivider] = a1;
  v11.receiver = v9;
  v11.super_class = (Class)type metadata accessor for GuideSummaryMetrics();
  return objc_msgSendSuper2(&v11, "init");
}

id sub_1000D5370(uint64_t a1)
{
  return sub_100086D98(a1, type metadata accessor for GuideSummaryMetrics);
}

uint64_t type metadata accessor for GuideSummaryMetrics()
{
  return objc_opt_self(_TtC4Maps19GuideSummaryMetrics);
}

unint64_t sub_1000D53B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101492E60;
  if (!qword_101492E60)
  {
    v1 = objc_opt_self(NSObject);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_101492E60);
  }
  return result;
}

id sub_1000D53F0(void *a1, int a2)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, _BYTE *, uint64_t);
  char *v17;
  id v18;
  objc_class *v19;
  _BYTE v21[4];
  int v22;
  objc_super v23;
  uint64_t v24;

  v22 = a2;
  v4 = sub_100008B04(&qword_101497958);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_100008B04(&qword_101497920);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(_QWORD *)&v2[OBJC_IVAR____TtC4Maps21CuratedGuideViewModel_metrics] = 0;
  v12 = &v2[OBJC_IVAR____TtC4Maps21CuratedGuideViewModel__width];
  v24 = 0;
  v13 = v2;
  Published.init(initialValue:)(&v24, &type metadata for CGFloat);
  (*(void (**)(char *, _BYTE *, uint64_t))(v9 + 32))(v12, v11, v8);
  v14 = &v13[OBJC_IVAR____TtC4Maps21CuratedGuideViewModel__publisherIcon];
  v24 = 0;
  v15 = sub_100008B04((uint64_t *)&unk_101497210);
  Published.init(initialValue:)(&v24, v15);
  v16 = *(void (**)(char *, _BYTE *, uint64_t))(v5 + 32);
  v16(v14, v7, v4);
  v17 = &v13[OBJC_IVAR____TtC4Maps21CuratedGuideViewModel__collectionImage];
  v24 = 0;
  Published.init(initialValue:)(&v24, v15);
  v16(v17, v7, v4);
  *(_QWORD *)&v13[OBJC_IVAR____TtC4Maps21CuratedGuideViewModel_placeCollection] = a1;
  v13[OBJC_IVAR____TtC4Maps21CuratedGuideViewModel_useRichLayout] = v22;
  v18 = a1;

  v19 = (objc_class *)type metadata accessor for CuratedGuideViewModel(0);
  v23.receiver = v13;
  v23.super_class = v19;
  return objc_msgSendSuper2(&v23, "init");
}

id sub_1000D55B0(char a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  objc_class *v18;
  _BYTE *v19;
  objc_super v21;

  v18 = (objc_class *)type metadata accessor for GuideSummaryMetrics();
  v19 = objc_allocWithZone(v18);
  *(double *)&v19[OBJC_IVAR____TtC4Maps19GuideSummaryMetrics_leadingMargin] = a2;
  *(double *)&v19[OBJC_IVAR____TtC4Maps19GuideSummaryMetrics_trailingMargin] = a3;
  *(double *)&v19[OBJC_IVAR____TtC4Maps19GuideSummaryMetrics_topMargin] = a4;
  *(double *)&v19[OBJC_IVAR____TtC4Maps19GuideSummaryMetrics_bottomMargin] = a5;
  *(double *)&v19[OBJC_IVAR____TtC4Maps19GuideSummaryMetrics_topLeadingCornerRadius] = a6;
  *(double *)&v19[OBJC_IVAR____TtC4Maps19GuideSummaryMetrics_topTrailingCornerRadius] = a7;
  *(double *)&v19[OBJC_IVAR____TtC4Maps19GuideSummaryMetrics_bottomLeadingCornerRadius] = a8;
  *(double *)&v19[OBJC_IVAR____TtC4Maps19GuideSummaryMetrics_bottomTrailingCornerRadius] = a9;
  v19[OBJC_IVAR____TtC4Maps19GuideSummaryMetrics_showsDivider] = a1;
  v21.receiver = v19;
  v21.super_class = v18;
  return objc_msgSendSuper2(&v21, "init");
}

void sub_1000D578C(void *a1)
{
  uint64_t v1;
  void *Strong;
  void *v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  void *v21;
  id v22;
  _QWORD aBlock[6];
  __objc2_prot *v24;

  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC4Maps16PlaceCardContext_chromeViewController);
  if (Strong)
  {
    v4 = Strong;
    v5 = objc_msgSend(Strong, "mapView");

    if (v5)
    {
      v6 = objc_msgSend(v5, "preferredConfiguration");
      v24 = &OBJC_PROTOCOL___MKMapConfigurationHiking;
      v7 = (void *)swift_dynamicCastObjCProtocolConditional(v6, 1, &v24);
      if (v7)
      {
        v8 = v7;
        if (a1)
        {
          v6 = v6;
          v9 = a1;
          v10 = objc_msgSend(v9, "mapItem");
          if (v10)
          {
            v11 = v10;
            v12 = objc_msgSend(v10, "_geoMapItem");

            if (!v12)
            {
              __break(1u);
              return;
            }
            v13 = objc_msgSend(v12, "_placeData");
            swift_unknownObjectRelease(v12);
            if (v13)
            {
              if (objc_msgSend(v13, "hasMapDisplayType"))
                objc_msgSend(v8, "setShowsTopographicFeatures:", objc_msgSend(v13, "mapDisplayType") == 1);

            }
          }
          if (objc_msgSend(v9, "isDroppedPin")
            && (v14 = objc_msgSend(v9, "mapItem")) != 0)
          {
            v15 = v14;
            objc_msgSend(v14, "_coordinate");
            v17 = v16;
            v19 = v18;
            v20 = swift_allocObject(&unk_1011A21D0, 24, 7);
            *(_QWORD *)(v20 + 16) = v8;
            aBlock[4] = sub_1000D6A60;
            aBlock[5] = v20;
            aBlock[0] = _NSConcreteStackBlock;
            aBlock[1] = 1107296256;
            aBlock[2] = sub_1000D6198;
            aBlock[3] = &unk_1011A21E8;
            v21 = _Block_copy(aBlock);
            v22 = v6;
            swift_release();
            objc_msgSend(v5, "checkIfCoordinate:isInHikingContextualRegionWithCompletionHandler:", v21, v17, v19);

            _Block_release(v21);
            v6 = v15;
          }
          else
          {

          }
          goto LABEL_17;
        }
        objc_msgSend(v7, "setShowsTopographicFeatures:", 0);
      }

LABEL_17:
    }
  }
}

void sub_1000D5DB8(uint64_t a1, NSString a2, uint64_t a3)
{
  id v4;

  if (a2)
    a2 = String._bridgeToObjectiveC()();
  v4 = a2;
  (*(void (**)(uint64_t))(a3 + 16))(a3);

}

void sub_1000D5F3C(char a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, __n128), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16;
  uint64_t Strong;
  char *v18;
  __n128 v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  _BYTE v27[24];

  v16 = a4 + 16;
  swift_beginAccess(a4 + 16, v27, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v16);
  if (!Strong)
    return;
  v18 = (char *)Strong;
  if (a5)
  {
    if ((a1 & 1) != 0)
    {
      v19 = swift_retain();
      a5(a2, a3, v19);
      sub_10000BF74((uint64_t)a5, a6);
      v20 = *(void **)&v18[OBJC_IVAR____TtC4Maps16PlaceCardContext_noteEditorViewController];
      *(_QWORD *)&v18[OBJC_IVAR____TtC4Maps16PlaceCardContext_noteEditorViewController] = 0;

LABEL_6:
      if (!a9)
      {
        __break(1u);
        return;
      }
      String._mapsui_nilIfEmpty.getter(a8);
      v23 = v22;
      if (v22)
        swift_bridgeObjectRelease(v22);
      _s4Maps16LibraryAnalyticsC26captureAddOrEditNoteAction9placeMUID05isNewH0ys6UInt64V_SbtFZ_0(a7, v23 != 0);
      goto LABEL_11;
    }
    v24 = *(void **)(Strong + OBJC_IVAR____TtC4Maps16PlaceCardContext_noteEditorViewController);
    *(_QWORD *)(Strong + OBJC_IVAR____TtC4Maps16PlaceCardContext_noteEditorViewController) = 0;

  }
  else
  {
    v21 = *(void **)(Strong + OBJC_IVAR____TtC4Maps16PlaceCardContext_noteEditorViewController);
    *(_QWORD *)(Strong + OBJC_IVAR____TtC4Maps16PlaceCardContext_noteEditorViewController) = 0;

    if ((a1 & 1) != 0)
      goto LABEL_6;
  }
LABEL_11:
  v25 = (void *)swift_unknownObjectWeakLoadStrong(&v18[OBJC_IVAR____TtC4Maps16PlaceCardContext_chromeViewController]);
  if (v25)
  {
    v26 = v25;
    objc_msgSend(v25, "setNeedsUpdateComponent:animated:", CFSTR("cards"), 1);

  }
}

uint64_t sub_1000D6198(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v7;
  void (*v8)(uint64_t, double, double);

  v8 = *(void (**)(uint64_t, double, double))(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  swift_retain(v7);
  v8(a2, a3, a4);
  return swift_release(v7);
}

void sub_1000D61EC(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  NSURL *v14;
  void *v15;
  void *v16;
  uint64_t v17;

  v2 = v1;
  v4 = sub_100008B04((uint64_t *)&unk_101499B30);
  *(_QWORD *)&v5 = __chkstk_darwin(v4).n128_u64[0];
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(v2, "iosBasedChromeViewController", v5);
  if (v8)
  {
    v9 = v8;
    v10 = objc_msgSend(v8, "_currentContainerViewController");

    if (v10)
    {
      v11 = objc_msgSend(objc_allocWithZone((Class)MapsWebLinkPresenter), "initWithPresentingViewController:", v10);
      sub_10000C1FC(a1, (uint64_t)v7, (uint64_t *)&unk_101499B30);
      v12 = type metadata accessor for URL(0);
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v7, 1, v12) == 1)
      {
        __break(1u);
      }
      else
      {
        URL._bridgeToObjectiveC()(v14);
        v16 = v15;
        (*(void (**)(char *, uint64_t))(v13 + 8))(v7, v12);
        objc_msgSend(v11, "presentWebURL:", v16);

      }
    }
  }
}

void sub_1000D6334(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  id v9;
  void *v10;
  id v11;
  void *Strong;
  void *v13;
  id v14;
  NSString v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  NSString v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  id v26;

  v2 = v1;
  v4 = type metadata accessor for Locale(0);
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)&v6 = __chkstk_darwin(v4).n128_u64[0];
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1
    && (v9 = objc_msgSend(a1, "mapItem", v6)) != 0
    && (v10 = v9,
        v11 = objc_msgSend(v9, "_mapsui_trailSelectionInfoForMap"),
        v10,
        v11))
  {
    Strong = (void *)swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR____TtC4Maps16PlaceCardContext_chromeViewController);
    if (!Strong)
    {
LABEL_9:

LABEL_13:
      sub_1000D578C(a1);
      return;
    }
    v13 = Strong;
    v14 = objc_msgSend(Strong, "mapSelectionManager");

    if (v14)
    {
      v26 = objc_msgSend(v11, "trailID");
      v15 = objc_msgSend(v11, "trailName");
      if (!v15)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(0);
        v17 = v16;
        v15 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v17);
      }
      v18 = objc_msgSend((id)objc_opt_self(NSLocale), "currentLocale");
      static Locale._unconditionallyBridgeFromObjectiveC(_:)();

      Locale.identifier.getter();
      v20 = v19;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      v21 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v20);
      objc_msgSend(v14, "selectTrailWithId:name:locale:", v26, v15, v21);

      goto LABEL_9;
    }
  }
  else
  {
    v22 = (void *)swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR____TtC4Maps16PlaceCardContext_chromeViewController);
    if (!v22)
      goto LABEL_13;
    v23 = v22;
    v24 = objc_msgSend(v22, "mapSelectionManager");

    if (v24)
    {
      objc_msgSend(v24, "deselectTrails");

      goto LABEL_13;
    }
    __break(1u);
  }
  __break(1u);
}

void sub_1000D6578(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v4;
  objc_class *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  objc_super v10;

  Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC4Maps16PlaceCardContext_chromeViewController);
  if (Strong)
  {
    if (a1)
    {
      v4 = (void *)Strong;
      v5 = (objc_class *)type metadata accessor for TransitLineContext();
      v6 = (char *)objc_allocWithZone(v5);
      *(_QWORD *)&v6[OBJC_IVAR____TtC4Maps18TransitLineContext_chromeViewController] = 0;
      v7 = OBJC_IVAR____TtC4Maps18TransitLineContext_lineItem;
      *(_QWORD *)&v6[OBJC_IVAR____TtC4Maps18TransitLineContext_lineItem] = 0;
      *(_QWORD *)&v6[OBJC_IVAR____TtC4Maps18TransitLineContext_labelMarker] = 0;
      *(_QWORD *)&v6[OBJC_IVAR____TtC4Maps18TransitLineContext_lineCardViewController] = 0;
      *(_QWORD *)&v6[OBJC_IVAR____TtC4Maps18TransitLineContext_disambiguationViewController] = 0;
      v8 = *(_QWORD *)&v6[v7];
      *(_QWORD *)&v6[v7] = a1;
      swift_unknownObjectRetain_n(a1, 2);
      swift_unknownObjectRelease(v8);
      v10.receiver = v6;
      v10.super_class = v5;
      v9 = objc_msgSendSuper2(&v10, "init");
      swift_unknownObjectRelease(a1);
      objc_msgSend(v4, "pushContext:animated:completion:", v9, 1, 0);

    }
    else
    {
      __break(1u);
    }
  }
}

void sub_1000D6694(uint64_t a1)
{
  void *v1;
  void *v2;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD v14[3];
  uint64_t v15;

  v2 = v1;
  v4 = objc_msgSend(v2, "iosChromeViewController");
  if (v4)
  {
    v5 = v4;
    v6 = objc_msgSend(v4, "_currentContainerViewController");

    if (v6)
    {
      sub_10000C1FC(a1, (uint64_t)v14, (uint64_t *)&unk_101493350);
      v7 = v15;
      if (v15)
      {
        v8 = sub_10000BE88(v14, v15);
        v9 = *(_QWORD *)(v7 - 8);
        v10 = __chkstk_darwin(v8);
        v12 = (char *)v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, __n128))(v9 + 16))(v12, v10);
        v13 = _bridgeAnythingToObjectiveC<A>(_:)(v12, v7);
        (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v7);
        sub_10000BEAC(v14);
      }
      else
      {
        v13 = 0;
      }
      objc_msgSend(v6, "copy:", v13);

      swift_unknownObjectRelease(v13);
    }
  }
}

void sub_1000D67CC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  void *Strong;
  void *v23;
  _BYTE v24[24];

  v6 = OBJC_IVAR____TtC4Maps16PlaceCardContext_noteEditorViewController;
  if (!*(_QWORD *)(v5 + OBJC_IVAR____TtC4Maps16PlaceCardContext_noteEditorViewController))
  {
    v7 = v5;
    v13 = objc_allocWithZone((Class)type metadata accessor for PlaceNoteEditViewController());
    swift_bridgeObjectRetain(a2);
    v14 = PlaceNoteEditViewController.init(note:)(a1, a2);
    v15 = *(void **)(v5 + v6);
    *(_QWORD *)(v5 + v6) = v14;

    v16 = *(_QWORD *)(v5 + v6);
    if (v16)
    {
      v17 = swift_allocObject(&unk_1011A2158, 24, 7);
      swift_unknownObjectWeakInit(v17 + 16, v7);
      v18 = (_QWORD *)swift_allocObject(&unk_1011A2180, 64, 7);
      v18[2] = v17;
      v18[3] = a4;
      v18[4] = a5;
      v18[5] = a3;
      v18[6] = a1;
      v18[7] = a2;
      v19 = (uint64_t *)(v16 + OBJC_IVAR____TtC4Maps27PlaceNoteEditViewController_dismissHandler);
      swift_beginAccess(v16 + OBJC_IVAR____TtC4Maps27PlaceNoteEditViewController_dismissHandler, v24, 1, 0);
      v20 = *v19;
      v21 = v19[1];
      *v19 = (uint64_t)sub_1000D69D4;
      v19[1] = (uint64_t)v18;
      swift_bridgeObjectRetain(a2);
      sub_10000C128(a4, a5);
      sub_10000BF74(v20, v21);
    }
    Strong = (void *)swift_unknownObjectWeakLoadStrong(v7 + OBJC_IVAR____TtC4Maps16PlaceCardContext_chromeViewController);
    if (Strong)
    {
      v23 = Strong;
      objc_msgSend(Strong, "setNeedsUpdateComponent:animated:", CFSTR("cards"), 1);

    }
  }
}

uint64_t sub_1000D6948()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000D696C(uint64_t a1, void *a2)
{
  uint64_t v2;

  sub_1000D5DB8(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_1000D6974()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000D6998()
{
  _QWORD *v0;

  swift_release(v0[2]);
  if (v0[3])
    swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

void sub_1000D69D4(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_1000D5F3C(a1, a2, a3, *(_QWORD *)(v3 + 16), *(void (**)(uint64_t, uint64_t, __n128))(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56));
}

unint64_t sub_1000D6A00()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10149A040;
  if (!qword_10149A040)
  {
    v1 = objc_opt_self(GEOPlaceCollection);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10149A040);
  }
  return result;
}

uint64_t sub_1000D6A3C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

id sub_1000D6A60(char a1)
{
  uint64_t v1;

  return objc_msgSend(*(id *)(v1 + 16), "setShowsTopographicFeatures:", a1 & 1);
}

double sub_1000D6A78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_1000D6A88(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

_QWORD *sub_1000D6A98(void (*a1)(_QWORD *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v16;
  _QWORD v17[2];
  _QWORD *v18;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    v18 = _swiftEmptyArrayStorage;
    sub_1001323FC(0, v5, 0);
    v6 = _swiftEmptyArrayStorage;
    for (i = (uint64_t *)(a3 + 32); ; ++i)
    {
      v16 = *i;
      a1(v17, &v16);
      if (v4)
        break;
      v4 = 0;
      v10 = v17[0];
      v9 = v17[1];
      v18 = v6;
      v12 = v6[2];
      v11 = v6[3];
      if (v12 >= v11 >> 1)
      {
        sub_1001323FC(v11 > 1, v12 + 1, 1);
        v6 = v18;
      }
      v6[2] = v12 + 1;
      v13 = &v6[2 * v12];
      v13[4] = v10;
      v13[5] = v9;
      if (!--v5)
        return v6;
    }
    swift_release(v6);
  }
  return v6;
}

double sub_1000D6BA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  void (*v19)(char *, uint64_t);
  double v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;

  v1 = sub_100008B04(&qword_10149A1F0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v22 - v6;
  v8 = type metadata accessor for MapsElevationChartViewModel.ElevationDatum(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_BYTE *)(v0 + *(int *)(type metadata accessor for MapsElevationChartViewModel(0) + 60));
  if ((v12[16] & 1) == 0)
    return *(double *)v12;
  v13 = *(_QWORD *)(v0 + 16);
  v14 = *(_QWORD *)(v13 + 16);
  if (!v14)
    goto LABEL_10;
  v25 = &v11[*(int *)(v8 + 24)];
  v15 = v13 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  v16 = *(_QWORD *)(v9 + 72);
  v23 = v13;
  v24 = v16;
  swift_bridgeObjectRetain(v13);
  v17 = INFINITY;
  v18 = -INFINITY;
  do
  {
    sub_1000202AC(v15, (uint64_t)v11, type metadata accessor for MapsElevationChartViewModel.ElevationDatum);
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v25, v1);
    sub_1000202F0((uint64_t)v11, type metadata accessor for MapsElevationChartViewModel.ElevationDatum);
    Measurement<>.converted(to:)(*(_QWORD *)(v0 + 32), v1);
    v19 = *(void (**)(char *, uint64_t))(v2 + 8);
    v19(v4, v1);
    v20 = Measurement.value.getter(v1);
    v19(v7, v1);
    if (v20 < v17)
      v17 = v20;
    if (v18 < v20)
      v18 = v20;
    v15 += v24;
    --v14;
  }
  while (v14);
  swift_bridgeObjectRelease(v23);
  if (v17 > v18)
  {
LABEL_10:
    __break(1u);
    return *(double *)v12;
  }
  return v17;
}

uint64_t sub_1000D6D98()
{
  uint64_t v0;
  void *v1;
  id v2;
  char v3;
  uint64_t result;
  id v5;
  char v6;
  id v7;
  char v8;
  id v9;
  char v10;

  sub_10000E4BC(0, (unint64_t *)&qword_101492E60, NSObject_ptr);
  v1 = (void *)objc_opt_self(NSUnitLength);
  v2 = objc_msgSend(v1, "feet");
  v3 = static NSObject.== infix(_:_:)(v0, v2);

  if ((v3 & 1) != 0)
    return 1282;
  v5 = objc_msgSend(v1, "miles");
  v6 = static NSObject.== infix(_:_:)(v0, v5);

  if ((v6 & 1) != 0)
    return 1284;
  v7 = objc_msgSend(v1, "meters");
  v8 = static NSObject.== infix(_:_:)(v0, v7);

  if ((v8 & 1) != 0)
    return 11;
  v9 = objc_msgSend(v1, "kilometers");
  v10 = static NSObject.== infix(_:_:)(v0, v9);

  if ((v10 & 1) != 0)
    return 14;
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001BLL, 0x8000000100E48F00, "Maps/MapsElevationChartViewModel.swift", 38, 2, 317, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000D6F2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  double v12;
  int v13;
  int v14;
  double v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  double *v20;
  double v21;
  BOOL v22;
  double v24;
  double v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  double v30;
  unint64_t v31;
  double v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v1 = type metadata accessor for MapsElevationChartViewModel(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v42 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v42 - v5;
  v7 = sub_1000D6BA0();
  v8 = *(double *)(v0 + 40);
  v10 = ceil(v9 / v8);
  v11 = *(int *)(v1 + 56);
  v12 = floor(v7 / v8);
  v13 = *(unsigned __int8 *)(*(_QWORD *)(v0 + v11) + OBJC_IVAR____TtC4Maps23MapsElevationChartStyle_contextStyle);
  sub_1000202AC(v0, (uint64_t)v6, type metadata accessor for MapsElevationChartViewModel);
  if (v13 == 1)
  {
    sub_1000202F0((uint64_t)v6, type metadata accessor for MapsElevationChartViewModel);
    sub_1000202AC(v0, (uint64_t)v3, type metadata accessor for MapsElevationChartViewModel);
LABEL_4:
    sub_1000202F0((uint64_t)v3, type metadata accessor for MapsElevationChartViewModel);
    goto LABEL_5;
  }
  v14 = *(unsigned __int8 *)(*(_QWORD *)&v6[*(int *)(v1 + 56)]
                           + OBJC_IVAR____TtC4Maps23MapsElevationChartStyle_contextStyle);
  sub_1000202F0((uint64_t)v6, type metadata accessor for MapsElevationChartViewModel);
  sub_1000202AC(v0, (uint64_t)v3, type metadata accessor for MapsElevationChartViewModel);
  if (v14 == 2)
    goto LABEL_4;
  v16 = *(unsigned __int8 *)(*(_QWORD *)&v3[*(int *)(v1 + 56)]
                           + OBJC_IVAR____TtC4Maps23MapsElevationChartStyle_contextStyle);
  sub_1000202F0((uint64_t)v3, type metadata accessor for MapsElevationChartViewModel);
  if ((_DWORD)v16 == 3)
  {
LABEL_5:
    v15 = fabs(fmod(v10 - v12, 3.0));
    if (v15 > 2.22507386e-308)
    {
      if (v15 <= 1.0)
      {
        if (v12 <= 0.0)
        {
          v10 = v10 + 2.0;
        }
        else
        {
          v10 = v10 + 1.0;
          v12 = v12 + -1.0;
        }
      }
      else
      {
        v10 = v10 + 1.0;
      }
    }
    v21 = *(double *)(v0 + 40);
    v20 = (double *)sub_1000A80C8(0, 1, 1, _swiftEmptyArrayStorage);
    v18 = *((_QWORD *)v20 + 2);
    v17 = *((_QWORD *)v20 + 3);
    v29 = v17 >> 1;
    v16 = v18 + 1;
    if (v17 >> 1 > v18)
      goto LABEL_28;
    goto LABEL_40;
  }
  v18 = 0;
  v19 = 0;
  v20 = (double *)_swiftEmptyArrayStorage;
  v21 = v10;
  v22 = v10 == v12;
  if (v10 <= v12)
    goto LABEL_13;
  while (!__OFADD__(v19++, 1))
  {
    v24 = v10 - (double)v19;
    v25 = *(double *)(v0 + 40);
    if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) != 0)
      goto LABEL_19;
LABEL_23:
    v20 = (double *)sub_1000A80C8(0, *((_QWORD *)v20 + 2) + 1, 1, v20);
    while (1)
    {
LABEL_19:
      v28 = *((_QWORD *)v20 + 2);
      v27 = *((_QWORD *)v20 + 3);
      v16 = v28 + 1;
      if (v28 >= v27 >> 1)
        v20 = (double *)sub_1000A80C8((_QWORD *)(v27 > 1), v28 + 1, 1, v20);
      *((_QWORD *)v20 + 2) = v16;
      v17 = (unint64_t)&v20[v28];
      *(double *)(v17 + 32) = v21 * v25;
      v21 = v24;
      v22 = v24 == v12;
      if (v24 > v12)
        break;
LABEL_13:
      v26 = !v22;
      if (((v26 | v18) & 1) != 0)
        goto LABEL_35;
      v25 = *(double *)(v0 + 40);
      v18 = 1;
      v24 = v21;
      if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
        goto LABEL_23;
      v24 = v21;
    }
  }
  __break(1u);
LABEL_40:
  v20 = (double *)sub_1000A80C8((_QWORD *)(v17 > 1), v16, 1, v20);
  v17 = *((_QWORD *)v20 + 3);
  v29 = v17 >> 1;
LABEL_28:
  v30 = v10 * v21;
  *((_QWORD *)v20 + 2) = v16;
  v20[v18 + 4] = v30;
  v31 = v18 + 2;
  if (v29 < (uint64_t)(v18 + 2))
    v20 = (double *)sub_1000A80C8((_QWORD *)(v17 > 1), v18 + 2, 1, v20);
  v32 = v12 * v21;
  *((_QWORD *)v20 + 2) = v31;
  v20[v16 + 4] = v32 / 3.0 + (v30 + v30) / 3.0;
  v33 = *((_QWORD *)v20 + 3);
  v34 = v18 + 3;
  if ((uint64_t)(v18 + 3) > (uint64_t)(v33 >> 1))
    v20 = (double *)sub_1000A80C8((_QWORD *)(v33 > 1), v18 + 3, 1, v20);
  *((_QWORD *)v20 + 2) = v34;
  v20[v31 + 4] = v30 / 3.0 + (v32 + v32) / 3.0;
  v35 = *((_QWORD *)v20 + 3);
  if ((uint64_t)(v18 + 4) > (uint64_t)(v35 >> 1))
    v20 = (double *)sub_1000A80C8((_QWORD *)(v35 > 1), v18 + 4, 1, v20);
  *((_QWORD *)v20 + 2) = v18 + 4;
  v20[v34 + 4] = v32;
LABEL_35:
  if (*(_BYTE *)(*(_QWORD *)(v0 + v11) + OBJC_IVAR____TtC4Maps23MapsElevationChartStyle_contextStyle) != 5)
    return (uint64_t)v20;
  v36 = sub_100008B04(&qword_101496A30);
  result = swift_allocObject(v36, 56, 7);
  *(_OWORD *)(result + 16) = xmmword_100E22F50;
  v38 = *((_QWORD *)v20 + 2);
  if (v38)
  {
    v39 = result;
    *(double *)(result + 32) = v20[4];
    v40 = (uint64_t)&v20[v38 + 4];
    *(double *)(result + 40) = (v20[4] + *(double *)(v40 - 8)) * 0.5;
    v41 = *(_QWORD *)(v40 - 8);
    swift_bridgeObjectRelease(v20);
    *(_QWORD *)(v39 + 48) = v41;
    return v39;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000D73B0()
{
  uint64_t v0;
  double v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  double v11;
  void (*v12)(char *, unint64_t);
  int v13;
  uint64_t v14;
  id v15;
  uint64_t result;
  double *v17;
  uint64_t v18;
  _QWORD *v19;

  v2 = v0;
  v3 = sub_100008B04(&qword_10149A1F0);
  v4 = *(_QWORD **)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v0 + 16);
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8)
  {
    __break(1u);
LABEL_10:
    v4 = sub_1000A81D4((_QWORD *)(v8 > 1), v7, 1, v4);
    goto LABEL_8;
  }
  v9 = v8 - 1;
  v10 = type metadata accessor for MapsElevationChartViewModel.ElevationDatum(0);
  ((void (*)(char *, unint64_t, unint64_t))v4[2])(v6, v7+ ((*(unsigned __int8 *)(*(_QWORD *)(v10 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v10 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * v9+ *(int *)(v10 + 20), v3);
  v11 = Measurement.value.getter(v3);
  v12 = (void (*)(char *, unint64_t))v4[1];
  v12(v6, v3);
  v13 = *(unsigned __int8 *)(*(_QWORD *)(v2 + *(int *)(type metadata accessor for MapsElevationChartViewModel(0) + 56))
                           + OBJC_IVAR____TtC4Maps23MapsElevationChartStyle_contextStyle);
  v14 = sub_100008B04(&qword_10149BBE0);
  if (v13 != 2)
  {
    result = swift_allocObject(v14, 112, 7);
    *(_OWORD *)(result + 16) = xmmword_100E2B5B0;
    *(_QWORD *)(result + 32) = 0;
    *(_BYTE *)(result + 40) = 0;
    *(double *)(result + 48) = v11 * 0.25;
    *(_BYTE *)(result + 56) = 0;
    *(double *)(result + 64) = v11 * 0.5;
    *(_BYTE *)(result + 72) = 0;
    *(double *)(result + 80) = v11 * 0.75;
    *(_BYTE *)(result + 88) = 0;
    *(double *)(result + 96) = v11;
    *(_BYTE *)(result + 104) = 0;
    return result;
  }
  v4 = (_QWORD *)swift_allocObject(v14, 96, 7);
  *((_OWORD *)v4 + 1) = xmmword_100E255C0;
  *((double *)v4 + 4) = v11 * 0.25;
  *((_BYTE *)v4 + 40) = 0;
  *((double *)v4 + 6) = v11 * 0.5;
  *((_BYTE *)v4 + 56) = 0;
  *((double *)v4 + 8) = v11 * 0.75;
  *((_BYTE *)v4 + 72) = 0;
  *((double *)v4 + 10) = v11;
  *((_BYTE *)v4 + 88) = 0;
  v15 = objc_msgSend((id)objc_opt_self(NSUnitLength), "meters");
  Measurement<>.converted(to:)(v15, v3);

  v1 = Measurement.value.getter(v3);
  v12(v6, v3);
  if (v1 <= 2.22507386e-308)
  {
    v3 = 4;
    v8 = 8;
  }
  else
  {
    v3 = 5;
    v4 = sub_1000A81D4((_QWORD *)1, 5, 1, v4);
    v4[2] = 5;
    v4[12] = 0;
    *((_BYTE *)v4 + 104) = 0;
    v8 = v4[3];
  }
  v7 = v3 + 1;
  if (v3 >= v8 >> 1)
    goto LABEL_10;
LABEL_8:
  v4[2] = v7;
  v17 = (double *)&v4[2 * v3];
  v17[4] = v1;
  *((_BYTE *)v17 + 40) = 1;
  v19 = v4;
  swift_bridgeObjectRetain_n(v4, 2);
  sub_1000D8708((uint64_t *)&v19, sub_1000DDE98, sub_1000DB944);
  swift_bridgeObjectRelease_n(v4, 2);
  return (uint64_t)v19;
}

_QWORD *sub_1000D76AC()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v0 = sub_1000D73B0();
  v1 = v0;
  v2 = *(_QWORD *)(v0 + 16);
  if (v2)
  {
    sub_1001324A0(0, v2, 0);
    v3 = _swiftEmptyArrayStorage[2];
    v4 = 32;
    do
    {
      v5 = *(_QWORD *)(v1 + v4);
      v6 = _swiftEmptyArrayStorage[3];
      if (v3 >= v6 >> 1)
        sub_1001324A0(v6 > 1, v3 + 1, 1);
      _swiftEmptyArrayStorage[2] = v3 + 1;
      _swiftEmptyArrayStorage[v3 + 4] = v5;
      v4 += 16;
      ++v3;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease(v1);
  }
  else
  {
    swift_bridgeObjectRelease(v0);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000D7798()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t sub_1000D77A0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
  {
    v11 = 0;
    v19 = 0;
    v15 = 1;
    v16 = 1;
    goto LABEL_72;
  }
  v6 = result;
  v7 = type metadata accessor for MapsElevationChartViewModel.ElevationDatum(0);
  v8 = *(_QWORD *)(v7 - 8);
  v36 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v9 = v4 + v36;
  result = sub_1000DDEFC(v4 + v36 + *(int *)(v7 + 20), v6);
  if (result == -1)
  {
    v11 = 0;
    v19 = 0;
    v16 = 0;
    v15 = 1;
    goto LABEL_72;
  }
  v35 = a2;
  if (result)
    v10 = 1;
  else
    v10 = v5 == 1;
  if (!v10)
  {
    v19 = 0;
    v20 = *(_QWORD *)(v8 + 72);
    v21 = v4 + v20 + v36;
    while (1)
    {
      result = sub_1000DDEFC(v21 + *(int *)(v7 + 20), v6);
      if (result)
        break;
      ++v19;
      v21 += v20;
      if (v5 - 1 == v19)
        goto LABEL_8;
    }
    v11 = 0;
LABEL_38:
    v15 = 0;
    v16 = 0;
    goto LABEL_71;
  }
LABEL_8:
  v11 = v5 - 1;
  v12 = *(_QWORD *)(v8 + 72);
  result = sub_1000DDEFC(v9 + v12 * (v5 - 1) + *(int *)(v7 + 20), v6);
  if (result == 1)
  {
    v15 = 0;
    v19 = 0;
    v16 = 1;
LABEL_71:
    a2 = v35;
    goto LABEL_72;
  }
  if (result)
  {
    if (v5 != 1)
    {
LABEL_20:
      v19 = 0;
      v11 = v5 - 1;
      while (!__OFSUB__(v11, v19))
      {
        v17 = (uint64_t)(v11 - v19) / 2;
        v18 = v19 + v17;
        if (__OFADD__(v19, v17))
          goto LABEL_61;
        if (v18 >= v5)
          goto LABEL_62;
        result = sub_1000DDEFC(v9 + v18 * v12 + *(int *)(v7 + 20), v6);
        if (result == -1)
        {
          v11 = v19 + (uint64_t)(v11 - v19) / 2;
        }
        else
        {
          if (!result)
          {
            v9 = v19 + (uint64_t)(v11 - v19) / 2;
            if (v18 + 1 != v5)
            {
              v9 = v19 + v17;
              v22 = v4 + v36 + v12 * (v18 + 1);
              while ((uint64_t)(v9 + 1) < v5)
              {
                result = sub_1000DDEFC(v22 + *(int *)(v7 + 20), v6);
                if (result)
                  goto LABEL_52;
                ++v9;
                v22 += v12;
                if (v5 - 1 == v9)
                {
                  v9 = v19 + v17;
                  goto LABEL_52;
                }
              }
              goto LABEL_66;
            }
LABEL_52:
            if (!v18)
              goto LABEL_68;
            v23 = v4 + v36 + v12 * (v19 + v17 - 1);
            v24 = -v12;
            v11 = v18;
            while ((uint64_t)v18 >= v11)
            {
              v25 = v11 - 1;
              if (v11 - 1 >= v5)
                goto LABEL_65;
              result = sub_1000DDEFC(v23 + *(int *)(v7 + 20), v6);
              if (result)
                goto LABEL_69;
              v23 += v24;
              --v11;
              if (!v25)
              {
                v15 = 0;
                v16 = 0;
                v11 = v18;
                goto LABEL_70;
              }
            }
            goto LABEL_64;
          }
          v19 = v18 + 1;
          if (__OFADD__(v18, 1))
            goto LABEL_63;
        }
        if (v11 < (uint64_t)v19)
          goto LABEL_38;
        if (v11 == v19)
          goto LABEL_40;
      }
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }
  }
  else if (v5 != 1)
  {
    v13 = v4 + v36 + v12 * (v5 - 2);
    while (1)
    {
      v14 = v11 - 1;
      if (v11 - 1 >= v5)
        break;
      result = sub_1000DDEFC(v13 + *(int *)(v7 + 20), v6);
      if (result)
      {
        v15 = 0;
        v16 = 0;
        v19 = v5 - 1;
        a2 = v35;
        goto LABEL_72;
      }
      v13 -= v12;
      --v11;
      if (!v14)
        goto LABEL_20;
    }
    __break(1u);
    goto LABEL_60;
  }
  v19 = 0;
LABEL_40:
  if (v19 >= v5)
  {
LABEL_67:
    __break(1u);
LABEL_68:
    v11 = 0;
LABEL_69:
    v15 = 0;
    v16 = 0;
LABEL_70:
    v19 = v9;
    goto LABEL_71;
  }
  result = sub_1000DDEFC(v9 + v19 * v12 + *(int *)(v7 + 20), v6);
  if (result == 1)
  {
    v15 = 0;
    v16 = 0;
    v11 = v19++;
    goto LABEL_71;
  }
  a2 = v35;
  v15 = 0;
  v16 = 0;
  if (result == -1)
    v11 = v19 - 1;
  else
    v11 = v19;
LABEL_72:
  if ((v15 & 1) != 0)
    goto LABEL_81;
  if (!v16)
  {
    v26 = v11 + v19;
    if (__OFADD__(v11, v19))
    {
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
      goto LABEL_90;
    }
    if (v26 >= 0)
      v27 = v11 + v19;
    else
      v27 = v26 + 1;
    if (v26 < -1)
      goto LABEL_89;
    v28 = v27 >> 1;
    if (v27 >> 1 < *(_QWORD *)(v4 + 16))
    {
LABEL_83:
      v30 = type metadata accessor for MapsElevationChartViewModel.ElevationDatum(0);
      v31 = v4
          + ((*(unsigned __int8 *)(*(_QWORD *)(v30 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v30 - 8) + 80))
          + *(_QWORD *)(*(_QWORD *)(v30 - 8) + 72) * v28
          + *(int *)(v30 + 24);
LABEL_86:
      v34 = sub_100008B04(&qword_10149A1F0);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(a2, v31, v34);
    }
    __break(1u);
LABEL_81:
    v29 = *(_QWORD *)(v4 + 16);
    if (v29)
    {
      v28 = v29 - 1;
      goto LABEL_83;
    }
    __break(1u);
    goto LABEL_88;
  }
  if (*(_QWORD *)(v4 + 16))
  {
    v32 = type metadata accessor for MapsElevationChartViewModel.ElevationDatum(0);
    v33 = *(unsigned __int8 *)(*(_QWORD *)(v32 - 8) + 80);
    v31 = v4 + *(int *)(v32 + 24) + ((v33 + 32) & ~v33);
    goto LABEL_86;
  }
LABEL_90:
  __break(1u);
  return result;
}

void sub_1000D7BF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  char v32;
  double v33;
  double v34;
  double *v35;
  _QWORD *v36;
  char *v37;

  v1 = v0;
  v2 = sub_100008B04((uint64_t *)&unk_10149A480);
  v3 = __chkstk_darwin(v2);
  v37 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Text.Measurements(0, v3);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100008B04(&qword_10149A1F0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v1 + 16);
  v14 = *(_QWORD *)(v13 + 16);
  if (!v14)
  {
    __break(1u);
    goto LABEL_13;
  }
  v15 = v14 - 1;
  v16 = type metadata accessor for MapsElevationChartViewModel.ElevationDatum(0);
  (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v12, v13+ ((*(unsigned __int8 *)(*(_QWORD *)(v16 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v16 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v16 - 8) + 72) * v15+ *(int *)(v16 + 20), v9);
  v17 = Measurement.value.getter(v9);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if (v17 < 0.0)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    return;
  }
  if (*(_BYTE *)(*(_QWORD *)(v1 + *(int *)(type metadata accessor for MapsElevationChartViewModel(0) + 56))
                + OBJC_IVAR____TtC4Maps23MapsElevationChartStyle_contextStyle) == 5)
  {
    v18 = *(double *)(v1 + 8) + *(double *)v1 * 0.5;
    v35 = (double *)v1;
    v36 = sub_1000D849C();
    v19 = v36[2];
    v20 = 0.0;
    v21 = (uint64_t)v37;
    if (v19)
    {
      v22 = v36 + 7;
      do
      {
        v23 = *(v22 - 3);
        v24 = *(v22 - 2);
        v25 = v6;
        v26 = *((unsigned __int8 *)v22 - 8);
        v27 = *v22;
        v22 += 4;
        sub_10006BB40(v23, v24, v26);
        v28 = swift_bridgeObjectRetain(v27);
        Text.Measurements.init()(v28);
        v29 = type metadata accessor for Text.WritingMode(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v21, 1, 1, v29);
        v30 = Text.Measurements.size(of:in:writingMode:)(v23, v24, v26, v27, v21, INFINITY, INFINITY);
        v21 = (uint64_t)v37;
        v31 = v30;
        v32 = v26;
        v6 = v25;
        sub_10006B77C(v23, v24, v32);
        swift_bridgeObjectRelease(v27);
        sub_100010CC4(v21, (uint64_t *)&unk_10149A480);
        (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v5);
        if (v31 + -2.0 > v20)
          v20 = v31 + -2.0;
        --v19;
      }
      while (v19);
    }
    swift_bridgeObjectRelease(v36);
    v33 = v35[1] + v20 + *v35 * 0.5 + v35[1];
    v34 = v35[3];
    if (v18 + v33 < v34 && -(v17 / (v34 - (v18 + v33)) * v18) > v17 + v33 * (v17 / (v34 - (v18 + v33))))
      goto LABEL_14;
  }
}

uint64_t sub_1000D7F14(uint64_t a1, uint64_t a2)
{
  return (*(double *)a1 == *(double *)a2) & (*(unsigned __int8 *)(a1 + 8) ^ *(unsigned __int8 *)(a2 + 8) ^ 1u);
}

uint64_t sub_1000D7F3C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, void *a7@<X6>, int *a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, void *a12, uint64_t a13, uint64_t a14, unsigned __int8 a15, uint64_t a16, void *a17)
{
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  char *v26;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  _QWORD *v36;
  id v37;
  _QWORD *v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  id v44;
  id v45;
  double v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  int *v52;
  id v53;
  id v54;
  void *v55;
  id v56;
  id v57;
  id v58;
  id v59;
  void *v60;
  uint64_t result;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  id v70;
  id v71;
  uint64_t (*v72)(uint64_t, uint64_t);
  int *v73;
  id v74;
  uint64_t v75[3];

  v73 = a8;
  v74 = a3;
  v70 = a6;
  v71 = a7;
  v69 = a5;
  v23 = sub_100008B04(&qword_10149A1F0);
  v24 = *(uint64_t (**)(uint64_t, uint64_t))(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v62 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __asm { FMOV            V0.2D, #12.0 }
  *(_OWORD *)a9 = _Q0;
  v32 = *(_QWORD *)(a1 + 16);
  if (v32)
  {
    v67 = a16;
    v68 = a2;
    v66 = a15;
    v64 = a13;
    v65 = a14;
    *(_QWORD *)(a9 + 16) = a1;
    *(double *)(a9 + 24) = a10;
    *(_QWORD *)(a9 + 32) = a2;
    *(double *)(a9 + 40) = a11;
    *(_QWORD *)(a9 + 48) = v74;
    v33 = (int *)type metadata accessor for MapsElevationChartViewModel(0);
    v34 = a9 + v33[11];
    v72 = v24;
    v35 = (void (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v24 + 2);
    v63 = a4;
    v35(v34, a4, v23);
    v36 = (_QWORD *)(a9 + v33[12]);
    v37 = v70;
    *v36 = v69;
    v36[1] = v37;
    v38 = (_QWORD *)(a9 + v33[13]);
    v39 = v73;
    *v38 = v71;
    v38[1] = v39;
    *(_QWORD *)(a9 + v33[14]) = a12;
    v40 = a9 + v33[15];
    v41 = v65;
    *(_QWORD *)v40 = v64;
    *(_QWORD *)(v40 + 8) = v41;
    *(_BYTE *)(v40 + 16) = v66 & 1;
    v73 = v33;
    v42 = (_QWORD *)(a9 + v33[16]);
    *v42 = v67;
    v42[1] = a17;
    v43 = type metadata accessor for MapsElevationChartViewModel.ElevationDatum(0);
    v35((uint64_t)v26, a1+ ((*(unsigned __int8 *)(*(_QWORD *)(v43 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v43 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v43 - 8) + 72) * (v32 - 1)+ *(int *)(v43 + 20), v23);
    swift_bridgeObjectRetain(a1);
    v44 = v68;
    v45 = v74;
    v70 = a12;
    v74 = a17;
    swift_retain();
    v46 = Measurement.value.getter(v23);
    v47 = (void (*)(char *, uint64_t))*((_QWORD *)v72 + 1);
    v47(v26, v23);
    swift_bridgeObjectRetain(a1);
    v49 = sub_1000DE1DC(v48, a1, v46 * 0.25);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRetain(v49);
    v51 = sub_1000D8EC0(v50, &qword_10149A1F8, (uint64_t (*)(_QWORD *, _QWORD *, uint64_t, uint64_t))sub_1000DD780, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_100035E28);
    swift_bridgeObjectRelease(v49);
    v75[0] = (uint64_t)v51;
    sub_1000D8708(v75, (uint64_t (*)(uint64_t))sub_1000DDEAC, (uint64_t (*)(_QWORD *))sub_1000DC038);
    v71 = v45;
    v72 = (uint64_t (*)(uint64_t, uint64_t))v47;
    swift_bridgeObjectRelease(v49);
    v52 = v73;
    *(_QWORD *)(a9 + v73[17]) = v75[0];
    v53 = objc_msgSend(objc_allocWithZone((Class)NSLengthFormatter), "init");
    v54 = objc_msgSend(v53, "numberFormatter");
    if (v54)
    {
      v55 = v54;
      objc_msgSend(v54, "setMaximumFractionDigits:", 1);

      *(_QWORD *)(a9 + v52[18]) = v53;
      v56 = objc_allocWithZone((Class)NSLengthFormatter);
      v57 = v53;
      v58 = objc_msgSend(v56, "init");
      v59 = objc_msgSend(v58, "numberFormatter");
      if (v59)
      {
        v60 = v59;
        objc_msgSend(v59, "setMaximumFractionDigits:", 0);

        swift_release();
        result = v72(v63, v23);
        *(_QWORD *)(a9 + v52[19]) = v58;
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002DLL, 0x8000000100E48ED0, "Maps/MapsElevationChartViewModel.swift", 38, 2, 99, 0);
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for MapsElevationChartViewModel(uint64_t a1)
{
  return sub_100021D9C(a1, qword_10149A408, (uint64_t)&nominal type descriptor for MapsElevationChartViewModel);
}

uint64_t type metadata accessor for MapsElevationChartViewModel.ElevationDatum(uint64_t a1)
{
  return sub_100021D9C(a1, (uint64_t *)&unk_10149A368, (uint64_t)&nominal type descriptor for MapsElevationChartViewModel.ElevationDatum);
}

uint64_t sub_1000D8350@<X0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  double v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;

  v6 = sub_100008B04(&qword_1014958A0);
  __chkstk_darwin(v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a1;
  v10 = *(void **)(a2 + *(int *)(type metadata accessor for MapsElevationChartViewModel(0) + 76));
  v11 = objc_msgSend(v10, "stringFromValue:unit:", sub_1000D6D98(), v9);
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  v22 = v12;
  v23 = v14;
  static Locale.current.getter(v15);
  v16 = type metadata accessor for Locale(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v8, 0, 1, v16);
  v17 = sub_10006C008();
  v18 = StringProtocol.uppercased(with:)(v8, &type metadata for String, v17);
  v20 = v19;
  sub_100010CC4((uint64_t)v8, &qword_1014958A0);
  result = swift_bridgeObjectRelease(v23);
  *a3 = v18;
  a3[1] = v20;
  return result;
}

_QWORD *sub_1000D849C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char v36[16];
  uint64_t v37;
  _QWORD v38[2];
  _QWORD *v39;

  v1 = sub_100008B04(&qword_10149DAE0);
  __chkstk_darwin(v1);
  v33 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1000D6F2C();
  v37 = v0;
  v4 = sub_1000D6A98((void (*)(_QWORD *__return_ptr, uint64_t *))sub_1000DF56C, (uint64_t)v36, v3);
  swift_bridgeObjectRelease(v3);
  v5 = v4[2];
  if (v5)
  {
    v39 = _swiftEmptyArrayStorage;
    sub_100132484(0, v5, 0);
    v6 = sub_10006C008();
    v31 = v4;
    v32 = v6;
    v7 = v4 + 5;
    do
    {
      v8 = *v7;
      v38[0] = *(v7 - 1);
      v38[1] = v8;
      swift_bridgeObjectRetain_n(v8, 2);
      v9 = Text.init<A>(_:)(v38, &type metadata for String, v32);
      v11 = v10;
      v13 = v12;
      v15 = v14 & 1;
      v16 = static Font.Weight.medium.getter(v9);
      v17 = type metadata accessor for Font.Design(0);
      v18 = (uint64_t)v33;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v33, 1, 1, v17);
      v19 = static Font.system(size:weight:design:)(*(_QWORD *)&v16, 0, v18, 13.0);
      sub_100010CC4(v18, &qword_10149DAE0);
      v34 = Text.font(_:)(v19, v9, v11, v15, v13);
      v35 = v20;
      v22 = v21;
      v24 = v23;
      swift_release(v19);
      sub_10006B77C(v9, v11, v15);
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(v13);
      v25 = v39;
      if ((swift_isUniquelyReferenced_nonNull_native(v39) & 1) == 0)
      {
        sub_100132484(0, v25[2] + 1, 1);
        v25 = v39;
      }
      v27 = v25[2];
      v26 = v25[3];
      if (v27 >= v26 >> 1)
      {
        sub_100132484(v26 > 1, v27 + 1, 1);
        v25 = v39;
      }
      v7 += 2;
      v25[2] = v27 + 1;
      v28 = &v25[4 * v27];
      v28[4] = v34;
      v28[5] = v22;
      *((_BYTE *)v28 + 48) = v24 & 1;
      v28[7] = v35;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease(v31);
  }
  else
  {
    swift_bridgeObjectRelease(v4);
    return _swiftEmptyArrayStorage;
  }
  return v25;
}

uint64_t sub_1000D8708(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(_QWORD *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];

  v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v6 = a2(v6);
  v7 = *(_QWORD *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  result = a3(v9);
  *a1 = v6;
  return result;
}

_QWORD *sub_1000D8780(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_100008B04(&qword_101498AA8);
  v4 = swift_allocObject(v3, 4 * v1 + 32, 7);
  v5 = j__malloc_size((const void *)v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 29;
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = 2 * (v6 >> 2);
  v7 = sub_1000DD124(&v10, (_DWORD *)(v4 + 32), v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_100035E28(v8);
  if (v7 != (_QWORD *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return (_QWORD *)v4;
}

_QWORD *sub_1000D8864(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_100008B04((uint64_t *)&unk_101493B10);
  v4 = (_QWORD *)swift_allocObject(v3, 8 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 25;
  v4[2] = v1;
  v4[3] = (2 * (v6 >> 3)) | 1;
  v7 = sub_1000DD2B8(&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_100035E28(v8);
  if (v7 != (_QWORD *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

uint64_t *sub_1000D894C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *result;
  uint64_t v9;

  v1 = a1;
  if ((a1 & 0xC000000000000001) == 0)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
      goto LABEL_5;
    return _swiftEmptyArrayStorage;
  }
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  v2 = __CocoaDictionary.count.getter(a1);
  if (!v2)
    return _swiftEmptyArrayStorage;
LABEL_5:
  if (v2 <= 0)
  {
    v4 = _swiftEmptyArrayStorage;
  }
  else
  {
    v3 = sub_100008B04((uint64_t *)&unk_101493B10);
    v4 = (uint64_t *)swift_allocObject(v3, 8 * v2 + 32, 7);
    v5 = j__malloc_size(v4);
    v6 = v5 - 32;
    if (v5 < 32)
      v6 = v5 - 25;
    v4[2] = v2;
    v4[3] = (2 * (v6 >> 3)) | 1;
  }
  swift_bridgeObjectRetain(v1);
  v7 = sub_1000DD4B0((uint64_t)&v9, v4 + 4, v2, v1);
  result = (uint64_t *)sub_100035E28(v9);
  if (v7 == v2)
    return v4;
  __break(1u);
  return result;
}

_QWORD *sub_1000D8A44(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_16;
  if (!v5)
    return _swiftEmptyArrayStorage;
  if (v5 > 0)
  {
    v8 = sub_100008B04((uint64_t *)&unk_10149A2E0);
    v9 = (_QWORD *)swift_allocObject(v8, 48 * v5 + 32, 7);
    v10 = j__malloc_size(v9);
    v9[2] = v5;
    v9[3] = 2 * ((uint64_t)(v10 - 32) / 48);
    if (v4 != a3)
      goto LABEL_5;
    goto LABEL_15;
  }
  v9 = _swiftEmptyArrayStorage;
  if (v4 == a3)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
LABEL_5:
  if (v5 < 0)
  {
LABEL_17:
    result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_18;
  }
  v11 = (unint64_t)(v9 + 4);
  v12 = a2 + 48 * a3;
  if (v12 >= (unint64_t)&v9[6 * v5 + 4] || v11 >= v12 + 48 * v5)
  {
    swift_arrayInitWithCopy(v11);
    return v9;
  }
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_18:
  __break(1u);
  return result;
}

_QWORD *sub_1000D8BD0(uint64_t a1)
{
  return sub_1000D8DA4(a1, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))sub_1001236C8);
}

_QWORD *sub_1000D8BDC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1000D8C00(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for MapsFavoriteItem);
}

_QWORD *sub_1000D8BE8(uint64_t a1)
{
  return sub_1000D8DA4(a1, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))sub_100123D10);
}

_QWORD *sub_1000D8BF4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1000D8C00(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for MapsSyncObject);
}

_QWORD *sub_1000D8C00(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(_QWORD))
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *result;

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_18;
  if (!v6)
    return _swiftEmptyArrayStorage;
  v10 = 8 * v6;
  if (v6 <= 0)
  {
    v12 = _swiftEmptyArrayStorage;
    if (v5 != a3)
      goto LABEL_7;
    goto LABEL_17;
  }
  v11 = sub_100008B04((uint64_t *)&unk_101493B10);
  v12 = (_QWORD *)swift_allocObject(v11, v10 + 32, 7);
  v13 = j__malloc_size(v12);
  v14 = v13 - 32;
  if (v13 < 32)
    v14 = v13 - 25;
  v12[2] = v6;
  v12[3] = (2 * (v14 >> 3)) | 1;
  if (v5 == a3)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_7:
  if (v6 < 0)
  {
LABEL_19:
    result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_20;
  }
  v15 = a2 + 8 * a3;
  if (v15 >= (unint64_t)&v12[(unint64_t)v10 / 8 + 4] || (unint64_t)(v12 + 4) >= v15 + v10)
  {
    a5(0);
    swift_arrayInitWithCopy(v12 + 4);
    return v12;
  }
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_20:
  __break(1u);
  return result;
}

_QWORD *sub_1000D8D8C(uint64_t a1)
{
  return sub_1000D8DA4(a1, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))sub_100123D34);
}

_QWORD *sub_1000D8D98(uint64_t a1)
{
  return sub_1000D8DA4(a1, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))sub_100123D58);
}

_QWORD *sub_1000D8DA4(uint64_t a1, uint64_t (*a2)(_QWORD *, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(_QWORD *, uint64_t, uint64_t);
  uint64_t v11;

  if ((unint64_t)a1 >> 62)
    goto LABEL_10;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    return _swiftEmptyArrayStorage;
  while (1)
  {
    if (v4 <= 0)
    {
      v6 = _swiftEmptyArrayStorage;
    }
    else
    {
      v5 = sub_100008B04((uint64_t *)&unk_101493B10);
      v6 = (_QWORD *)swift_allocObject(v5, 8 * v4 + 32, 7);
      v7 = j__malloc_size(v6);
      v8 = v7 - 32;
      if (v7 < 32)
        v8 = v7 - 25;
      v6[2] = v4;
      v6[3] = (2 * (v8 >> 3)) | 1;
    }
    swift_bridgeObjectRetain(a1);
    v9 = a2(v6 + 4, v4, a1);
    a2 = v10;
    swift_bridgeObjectRelease(v9);
    if (a2 == (uint64_t (*)(_QWORD *, uint64_t, uint64_t))v4)
      break;
    __break(1u);
LABEL_10:
    if (a1 < 0)
      v11 = a1;
    else
      v11 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v11);
    swift_bridgeObjectRelease(a1);
    if (!v4)
      return _swiftEmptyArrayStorage;
  }
  return v6;
}

_QWORD *sub_1000D8EA4(uint64_t a1)
{
  return sub_1000D8EC0(a1, &qword_101492BF0, (uint64_t (*)(_QWORD *, _QWORD *, uint64_t, uint64_t))sub_1000DD980, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_1000DF67C);
}

_QWORD *sub_1000D8EC0(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD *, _QWORD *, uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))
{
  uint64_t v4;
  uint64_t v8;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  _QWORD v20[5];

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return _swiftEmptyArrayStorage;
  v8 = sub_100008B04(a2);
  v9 = (_QWORD *)swift_allocObject(v8, 16 * v4 + 32, 7);
  v10 = j__malloc_size(v9);
  v11 = v10 - 32;
  if (v10 < 32)
    v11 = v10 - 17;
  v9[2] = v4;
  v9[3] = 2 * (v11 >> 4);
  v12 = a3(v20, v9 + 4, v4, a1);
  v13 = v20[0];
  v14 = v20[1];
  v15 = v20[2];
  v16 = v20[3];
  v17 = v20[4];
  v18 = swift_bridgeObjectRetain(a1);
  a4(v13, v14, v15, v16, v17, v18);
  if (v12 != v4)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v9;
}

uint64_t **sub_1000D8FA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t **v4;
  int64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t **result;
  uint64_t v9;

  v1 = a1;
  if ((a1 & 0xC000000000000001) == 0)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
      goto LABEL_5;
    return (uint64_t **)_swiftEmptyArrayStorage;
  }
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  v2 = __CocoaSet.count.getter(a1);
  if (!v2)
    return (uint64_t **)_swiftEmptyArrayStorage;
LABEL_5:
  if (v2 <= 0)
  {
    v4 = (uint64_t **)_swiftEmptyArrayStorage;
  }
  else
  {
    v3 = sub_100008B04((uint64_t *)&unk_101493B10);
    v4 = (uint64_t **)swift_allocObject(v3, 8 * v2 + 32, 7);
    v5 = j__malloc_size(v4);
    v6 = v5 - 32;
    if (v5 < 32)
      v6 = v5 - 25;
    v4[2] = (uint64_t *)v2;
    v4[3] = (uint64_t *)((2 * (v6 >> 3)) | 1);
  }
  swift_bridgeObjectRetain(v1);
  v7 = sub_1000DDB7C(&v9, v4 + 4, v2, v1);
  result = (uint64_t **)sub_100035E28(v9);
  if (v7 == (uint64_t *)v2)
    return v4;
  __break(1u);
  return result;
}

uint64_t sub_1000D90A0(uint64_t a1, uint64_t a2)
{
  return sub_1000DA9CC(a1, a2, (uint64_t *)&unk_10149A290);
}

Swift::Int sub_1000D90AC(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int result;
  Swift::Int v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  Swift::UInt32 v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int *v31;
  int64_t v32;
  _QWORD *v33;
  uint64_t v34[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100008B04((uint64_t *)&unk_10149A300);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v31 = v3;
    v9 = 0;
    v33 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v32 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v18 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v19 = v18 | (v9 << 6);
      }
      else
      {
        v20 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v32)
          goto LABEL_36;
        v21 = v33[v20];
        ++v9;
        if (!v21)
        {
          v9 = v20 + 1;
          if (v20 + 1 >= v32)
            goto LABEL_36;
          v21 = v33[v9];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v31;
                goto LABEL_43;
              }
              v30 = 1 << *(_BYTE *)(v5 + 32);
              if (v30 >= 64)
                bzero(v33, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v33 = -1 << v30;
              v3 = v31;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                v9 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_45;
                if (v9 >= v32)
                  goto LABEL_36;
                v21 = v33[v9];
                ++v22;
                if (v21)
                  goto LABEL_33;
              }
            }
            v9 = v22;
          }
        }
LABEL_33:
        v12 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v9 << 6);
      }
      v27 = *(_QWORD *)(v5 + 56);
      v28 = *(_DWORD *)(*(_QWORD *)(v5 + 48) + 4 * v19);
      v29 = *(_QWORD *)(v27 + 8 * v19);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain(*(_QWORD *)(v27 + 8 * v19));
      Hasher.init(_seed:)(v34, *(_QWORD *)(v8 + 40));
      Hasher._combine(_:)(v28);
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v8 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v25 = v16 == v24;
          if (v16 == v24)
            v16 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_DWORD *)(*(_QWORD *)(v8 + 48) + 4 * v17) = v28;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v17) = v29;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_43:
  *v3 = v8;
  return result;
}

void sub_1000D937C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  __int128 *v23;
  id v24;
  Swift::Int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100008B04(&qword_1014918A0);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v34 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_25;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return;
    }
    if (v18 >= v12)
      break;
    v19 = (_QWORD *)(v5 + 64);
    v20 = *(_QWORD *)(v34 + 8 * v18);
    ++v14;
    if (!v20)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v12)
        goto LABEL_37;
      v20 = *(_QWORD *)(v34 + 8 * v14);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v12)
        {
LABEL_37:
          swift_release();
          if ((a2 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v20 = *(_QWORD *)(v34 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v14 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_46;
            if (v14 >= v12)
              goto LABEL_37;
            v20 = *(_QWORD *)(v34 + 8 * v14);
            ++v21;
            if (v20)
              goto LABEL_24;
          }
        }
        v14 = v21;
      }
    }
LABEL_24:
    v11 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_25:
    v22 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v17);
    v23 = (__int128 *)(*(_QWORD *)(v5 + 56) + 40 * v17);
    if ((a2 & 1) != 0)
    {
      sub_10000BE48(v23, (uint64_t)v35);
    }
    else
    {
      sub_100084C44((uint64_t)v23, (uint64_t)v35);
      v24 = v22;
    }
    v25 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v26 = -1 << *(_BYTE *)(v8 + 32);
    v27 = v25 & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v31 = v28 == v30;
        if (v28 == v30)
          v28 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      v15 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(_QWORD *)(v13 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v15) = v22;
    sub_10000BE48(v35, *(_QWORD *)(v8 + 56) + 40 * v15);
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v19 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  swift_release();
  *v3 = v8;
}

void sub_1000D9658(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t *v30;
  int64_t v31;
  _QWORD *v32;
  uint64_t i;
  char v34;
  uint64_t v35;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100008B04(&qword_101491BE8);
  v34 = a2;
  v35 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  if (*(_QWORD *)(v5 + 16))
  {
    v30 = v2;
    v7 = 1 << *(_BYTE *)(v5 + 32);
    v32 = (_QWORD *)(v5 + 64);
    v8 = -1;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    v9 = v8 & *(_QWORD *)(v5 + 64);
    v31 = (unint64_t)(v7 + 63) >> 6;
    swift_retain();
    v10 = 0;
    for (i = v5; ; v5 = i)
    {
      if (v9)
      {
        v11 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v12 = v11 | (v10 << 6);
      }
      else
      {
        v13 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
          __break(1u);
LABEL_32:
          __break(1u);
          return;
        }
        if (v13 >= v31)
          goto LABEL_25;
        v14 = v32[v13];
        ++v10;
        if (!v14)
        {
          v10 = v13 + 1;
          if (v13 + 1 >= v31)
            goto LABEL_25;
          v14 = v32[v10];
          if (!v14)
          {
            v15 = v13 + 2;
            if (v15 >= v31)
            {
LABEL_25:
              swift_release();
              v3 = v30;
              if ((v34 & 1) != 0)
              {
                v29 = 1 << *(_BYTE *)(v5 + 32);
                if (v29 > 63)
                  bzero(v32, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v32 = -1 << v29;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v14 = v32[v15];
            if (!v14)
            {
              while (1)
              {
                v10 = v15 + 1;
                if (__OFADD__(v15, 1))
                  goto LABEL_32;
                if (v10 >= v31)
                  goto LABEL_25;
                v14 = v32[v10];
                ++v15;
                if (v14)
                  goto LABEL_22;
              }
            }
            v10 = v15;
          }
        }
LABEL_22:
        v9 = (v14 - 1) & v14;
        v12 = __clz(__rbit64(v14)) + (v10 << 6);
      }
      v16 = 32 * v12;
      v17 = *(_QWORD *)(v5 + 48) + v16;
      v19 = *(void **)v17;
      v18 = *(_QWORD *)(v17 + 8);
      v20 = *(_QWORD *)(v17 + 16);
      v21 = *(_BYTE *)(v17 + 24);
      v22 = *(_QWORD *)(v5 + 56) + v16;
      v24 = *(void **)v22;
      v23 = *(_QWORD *)(v22 + 8);
      v26 = *(_QWORD *)(v22 + 16);
      v25 = *(_QWORD *)(v22 + 24);
      if ((v34 & 1) == 0)
      {
        v27 = v19;
        sub_10000BE70(v18, v20, v21);
        v28 = v24;
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRetain(v25);
      }
      sub_1000DB600((uint64_t)v19, v18, v20, v21, (uint64_t)v24, v23, v26, v25, v35);
    }
  }
  swift_release();
  *v3 = v35;
}

void sub_1000D98C8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  _QWORD v42[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100008B04((uint64_t *)&unk_10149A2B0);
  v40 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v3;
  v39 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v23 = v22 | (v14 << 6);
      goto LABEL_34;
    }
    v24 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v24 >= v12)
      break;
    v25 = (_QWORD *)(v5 + 64);
    v26 = *(_QWORD *)(v39 + 8 * v24);
    ++v14;
    if (!v26)
    {
      v14 = v24 + 1;
      if (v24 + 1 >= v12)
        goto LABEL_36;
      v26 = *(_QWORD *)(v39 + 8 * v14);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v12)
        {
LABEL_36:
          swift_release();
          v3 = v38;
          if ((v40 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v39 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v14 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v14 >= v12)
              goto LABEL_36;
            v26 = *(_QWORD *)(v39 + 8 * v14);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v14 = v27;
      }
    }
LABEL_33:
    v11 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    v32 = 16 * v23;
    v33 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v32);
    v35 = *v33;
    v34 = v33[1];
    v41 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v32);
    if ((v40 & 1) == 0)
    {
      swift_bridgeObjectRetain(v34);
      v36 = (id)v41;
    }
    Hasher.init(_seed:)(v42, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v42, v35, v34);
    v15 = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v18 == v29;
        if (v18 == v29)
          v18 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v31 == -1);
      v19 = __clz(__rbit64(~v31)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = 16 * v19;
    v21 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v20);
    *v21 = v35;
    v21[1] = v34;
    *(_OWORD *)(*(_QWORD *)(v8 + 56) + v20) = v41;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v3 = v38;
  v25 = (_QWORD *)(v5 + 64);
  if ((v40 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v37 = 1 << *(_BYTE *)(v5 + 32);
  if (v37 >= 64)
    bzero(v25, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v37;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release();
  *v3 = v8;
}

void sub_1000D9BE0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100008B04((uint64_t *)&unk_10149A2A0);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain();
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_34;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release();
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v13 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v13 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_bridgeObjectRetain(v33);
    }
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release();
  *v3 = v8;
}

void sub_1000D9EF4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  id v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  _OWORD v30[2];
  uint64_t v31;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100008B04((uint64_t *)&unk_10149A2D0);
  v29 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  if (*(_QWORD *)(v5 + 16))
  {
    v28 = v3;
    v7 = 1 << *(_BYTE *)(v5 + 32);
    v8 = (_QWORD *)(v5 + 64);
    v9 = -1;
    if (v7 < 64)
      v9 = ~(-1 << v7);
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v11 = (unint64_t)(v7 + 63) >> 6;
    swift_retain();
    v12 = 0;
    while (1)
    {
      if (v10)
      {
        v14 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
LABEL_35:
          __break(1u);
          return;
        }
        if (v16 >= v11)
          goto LABEL_26;
        v17 = v8[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v11)
            goto LABEL_26;
          v17 = v8[v12];
          if (!v17)
          {
            v18 = v16 + 2;
            if (v18 >= v11)
            {
LABEL_26:
              swift_release();
              if ((a2 & 1) == 0)
              {
                swift_release();
                v3 = v28;
                goto LABEL_33;
              }
              v27 = 1 << *(_BYTE *)(v5 + 32);
              if (v27 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v8 = -1 << v27;
              v3 = v28;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v17 = v8[v18];
            if (!v17)
            {
              while (1)
              {
                v12 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_35;
                if (v12 >= v11)
                  goto LABEL_26;
                v17 = v8[v12];
                ++v18;
                if (v17)
                  goto LABEL_23;
              }
            }
            v12 = v18;
          }
        }
LABEL_23:
        v10 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      v19 = *(_QWORD *)(v5 + 48) + 32 * v15;
      v20 = *(void **)v19;
      v21 = *(_QWORD *)(v19 + 8);
      v22 = *(_QWORD *)(v19 + 16);
      v23 = *(_BYTE *)(v19 + 24);
      v24 = *(_QWORD *)(v5 + 56) + 40 * v15;
      if ((a2 & 1) != 0)
      {
        v25 = *(_OWORD *)v24;
        v26 = *(_OWORD *)(v24 + 16);
        v31 = *(_QWORD *)(v24 + 32);
        v30[0] = v25;
        v30[1] = v26;
      }
      else
      {
        sub_1000DE5AC(v24, (uint64_t)v30);
        v13 = v20;
        sub_10000BE70(v21, v22, v23);
      }
      sub_1000DB7A8((uint64_t)v20, v21, v22, v23, (uint64_t)v30, v29);
    }
  }
  swift_release();
LABEL_33:
  *v3 = v29;
}

void sub_1000DA138(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100008B04(&qword_101491BF0);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v3;
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v38 + 8 * v23);
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_36;
      v25 = *(_QWORD *)(v38 + 8 * v14);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release();
          v3 = v37;
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v38 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v14 >= v12)
              goto LABEL_36;
            v25 = *(_QWORD *)(v38 + 8 * v14);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v14 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    v31 = 8 * v22;
    v32 = *(void **)(*(_QWORD *)(v5 + 48) + v31);
    v33 = *(void **)(*(_QWORD *)(v5 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      v34 = v32;
      v35 = v33;
    }
    v15 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = 8 * v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v20) = v32;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v20) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v3 = v37;
  v24 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release();
  *v3 = v8;
}

void sub_1000DA408(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  Swift::Int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD v38[2];
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100008B04((uint64_t *)&unk_10149E920);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v19 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_25;
    }
    v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return;
    }
    if (v21 >= v12)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v14;
    if (!v23)
    {
      v14 = v21 + 1;
      if (v21 + 1 >= v12)
        goto LABEL_37;
      v23 = *(_QWORD *)(v37 + 8 * v14);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v12)
        {
LABEL_37:
          swift_release();
          if ((a2 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v14 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_46;
            if (v14 >= v12)
              goto LABEL_37;
            v23 = *(_QWORD *)(v37 + 8 * v14);
            ++v24;
            if (v23)
              goto LABEL_24;
          }
        }
        v14 = v24;
      }
    }
LABEL_24:
    v11 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_25:
    v25 = *(_QWORD *)(v5 + 48) + 40 * v20;
    if ((a2 & 1) != 0)
    {
      v26 = *(_OWORD *)v25;
      v27 = *(_OWORD *)(v25 + 16);
      v41 = *(_QWORD *)(v25 + 32);
      v39 = v26;
      v40 = v27;
      sub_10000BE60((_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v20), v38);
    }
    else
    {
      sub_100035DEC(v25, (uint64_t)&v39);
      sub_100011E20(*(_QWORD *)(v5 + 56) + 32 * v20, (uint64_t)v38);
    }
    v28 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v29 = -1 << *(_BYTE *)(v8 + 32);
    v30 = v28 & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v13 + 8 * v31);
      }
      while (v35 == -1);
      v15 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v13 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = *(_QWORD *)(v8 + 48) + 40 * v15;
    v17 = v39;
    v18 = v40;
    *(_QWORD *)(v16 + 32) = v41;
    *(_OWORD *)v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    sub_10000BE60(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v15));
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v22, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  swift_release();
  *v3 = v8;
}

uint64_t sub_1000DA71C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100008B04(&qword_101491A30);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v10 = (uint64_t *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    v33 = -1 << v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v34 = 1 << *(_BYTE *)(v5 + 32);
    v35 = v3;
    v36 = (unint64_t)(v11 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v13)
      {
        v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v21 = v20 | (v9 << 6);
      }
      else
      {
        v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        if (v22 >= v36)
          goto LABEL_36;
        v23 = v10[v22];
        ++v9;
        if (!v23)
        {
          v9 = v22 + 1;
          if (v22 + 1 >= v36)
            goto LABEL_36;
          v23 = v10[v9];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v36)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v35;
                goto LABEL_43;
              }
              if (v34 >= 64)
                bzero((void *)(v5 + 64), 8 * v36);
              else
                *v10 = v33;
              v3 = v35;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v23 = v10[v24];
            if (!v23)
            {
              while (1)
              {
                v9 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_45;
                if (v9 >= v36)
                  goto LABEL_36;
                v23 = v10[v9];
                ++v24;
                if (v23)
                  goto LABEL_33;
              }
            }
            v9 = v24;
          }
        }
LABEL_33:
        v13 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }
      v29 = 8 * v21;
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v29);
      v31 = *(void **)(*(_QWORD *)(v5 + 56) + v29);
      if ((a2 & 1) == 0)
        v32 = v31;
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v30);
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v27 = v17 == v26;
          if (v17 == v26)
            v17 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v14 + 8 * v17);
        }
        while (v28 == -1);
        v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = 8 * v18;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v19) = v30;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v19) = v31;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
LABEL_43:
  *v3 = v8;
  return result;
}

uint64_t sub_1000DA9CC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_100008B04(a3);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = result;
  if (*(_QWORD *)(v6 + 16))
  {
    v10 = 0;
    v11 = (uint64_t *)(v6 + 64);
    v12 = 1 << *(_BYTE *)(v6 + 32);
    v34 = -1 << v12;
    v35 = v12;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v14 = v13 & *(_QWORD *)(v6 + 64);
    v36 = (unint64_t)(v12 + 63) >> 6;
    v15 = result + 64;
    while (1)
    {
      if (v14)
      {
        v21 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        v22 = v21 | (v10 << 6);
      }
      else
      {
        v23 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        if (v23 >= v36)
          goto LABEL_36;
        v24 = v11[v23];
        ++v10;
        if (!v24)
        {
          v10 = v23 + 1;
          if (v23 + 1 >= v36)
            goto LABEL_36;
          v24 = v11[v10];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v36)
            {
LABEL_36:
              if ((a2 & 1) != 0)
              {
                if (v35 >= 64)
                  bzero((void *)(v6 + 64), 8 * v36);
                else
                  *v11 = v34;
                *(_QWORD *)(v6 + 16) = 0;
              }
              break;
            }
            v24 = v11[v25];
            if (!v24)
            {
              while (1)
              {
                v10 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_44;
                if (v10 >= v36)
                  goto LABEL_36;
                v24 = v11[v10];
                ++v25;
                if (v24)
                  goto LABEL_33;
              }
            }
            v10 = v25;
          }
        }
LABEL_33:
        v14 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v10 << 6);
      }
      v30 = 8 * v22;
      v31 = *(_QWORD *)(v6 + 56);
      v32 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + v30);
      v33 = *(_QWORD *)(v31 + v30);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain(*(_QWORD *)(v31 + v30));
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v9 + 40), v32);
      v16 = -1 << *(_BYTE *)(v9 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v15 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v15 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v28 = v18 == v27;
          if (v18 == v27)
            v18 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v15 + 8 * v18);
        }
        while (v29 == -1);
        v19 = __clz(__rbit64(~v29)) + (v18 << 6);
      }
      *(_QWORD *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = 8 * v19;
      *(_QWORD *)(*(_QWORD *)(v9 + 48) + v20) = v32;
      *(_QWORD *)(*(_QWORD *)(v9 + 56) + v20) = v33;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  result = swift_release(v6);
  *v4 = v9;
  return result;
}

void sub_1000DAC7C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  char v44;
  _QWORD v45[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100008B04(&qword_101491AB0);
  v44 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v41 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v43 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v42 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    swift_retain();
    v13 = 0;
    while (1)
    {
      if (v11)
      {
        v22 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v23 = v22 | (v13 << 6);
      }
      else
      {
        v24 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return;
        }
        if (v24 >= v42)
          goto LABEL_36;
        v25 = v43[v24];
        ++v13;
        if (!v25)
        {
          v13 = v24 + 1;
          if (v24 + 1 >= v42)
            goto LABEL_36;
          v25 = v43[v13];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v42)
            {
LABEL_36:
              swift_release();
              v3 = v41;
              if ((v44 & 1) != 0)
              {
                v40 = 1 << *(_BYTE *)(v5 + 32);
                if (v40 >= 64)
                  bzero(v43, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v43 = -1 << v40;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v25 = v43[v26];
            if (!v25)
            {
              while (1)
              {
                v13 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_43;
                if (v13 >= v42)
                  goto LABEL_36;
                v25 = v43[v13];
                ++v26;
                if (v25)
                  goto LABEL_33;
              }
            }
            v13 = v26;
          }
        }
LABEL_33:
        v11 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v13 << 6);
      }
      v31 = 16 * v23;
      v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
      v34 = *v32;
      v33 = v32[1];
      v35 = *(_QWORD *)(v5 + 56) + v31;
      v37 = *(void **)v35;
      v36 = *(void **)(v35 + 8);
      if ((v44 & 1) == 0)
      {
        v38 = v36;
        swift_bridgeObjectRetain(v33);
        v39 = v37;
      }
      Hasher.init(_seed:)(v45, *(_QWORD *)(v8 + 40));
      String.hash(into:)(v45, v34, v33);
      v14 = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = v14 & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v29 = v17 == v28;
          if (v17 == v28)
            v17 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v12 + 8 * v17);
        }
        while (v30 == -1);
        v18 = __clz(__rbit64(~v30)) + (v17 << 6);
      }
      *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = 16 * v18;
      v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
      *v20 = v34;
      v20[1] = v33;
      v21 = (_QWORD *)(*(_QWORD *)(v8 + 56) + v19);
      *v21 = v37;
      v21[1] = v36;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release();
  *v3 = v8;
}

void sub_1000DAF8C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  int64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  _QWORD *v44;
  int v45;
  char *v46;
  uint64_t v47;
  _QWORD v48[9];

  v3 = v2;
  v47 = type metadata accessor for Handle(0);
  v6 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v46 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_100008B04((uint64_t *)&unk_10149E910);
  v45 = a2;
  v9 = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_41;
  v42 = v3;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v44 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v43 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  v16 = swift_retain();
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_24;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return;
    }
    if (v22 >= v43)
      goto LABEL_36;
    v23 = v44[v22];
    ++v17;
    if (!v23)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v43)
        goto LABEL_36;
      v23 = v44[v17];
      if (!v23)
        break;
    }
LABEL_23:
    v14 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_24:
    v25 = *(_QWORD *)(v8 + 56);
    v26 = v8;
    v27 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v21);
    v29 = *v27;
    v28 = v27[1];
    v30 = *(_QWORD *)(v6 + 72);
    v31 = v25 + v30 * v21;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 32))(v46, v31, v47, v16);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))(v46, v31, v47, v16);
      swift_bridgeObjectRetain(v28);
    }
    Hasher.init(_seed:)(v48, *(_QWORD *)(v10 + 40));
    String.hash(into:)(v48, v29, v28);
    v32 = Hasher._finalize()();
    v33 = -1 << *(_BYTE *)(v10 + 32);
    v34 = v32 & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v15 + 8 * (v34 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v15 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v15 + 8 * v35);
      }
      while (v39 == -1);
      v18 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v18);
    *v19 = v29;
    v19[1] = v28;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v10 + 56) + v30 * v18, v46, v47);
    ++*(_QWORD *)(v10 + 16);
    v8 = v26;
  }
  v24 = v22 + 2;
  if (v24 < v43)
  {
    v23 = v44[v24];
    if (!v23)
    {
      while (1)
      {
        v17 = v24 + 1;
        if (__OFADD__(v24, 1))
          goto LABEL_43;
        if (v17 >= v43)
          goto LABEL_36;
        v23 = v44[v17];
        ++v24;
        if (v23)
          goto LABEL_23;
      }
    }
    v17 = v24;
    goto LABEL_23;
  }
LABEL_36:
  swift_release();
  v3 = v42;
  if ((v45 & 1) != 0)
  {
    v40 = 1 << *(_BYTE *)(v8 + 32);
    if (v40 >= 64)
      bzero(v44, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v44 = -1 << v40;
    *(_QWORD *)(v8 + 16) = 0;
  }
LABEL_41:
  swift_release();
  *v3 = v10;
}

void sub_1000DB2F4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100008B04((uint64_t *)&unk_10149E900);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v36 = v3;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain();
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_34;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v37)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v38 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_36;
      v24 = *(_QWORD *)(v38 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release();
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v13 >= v37)
              goto LABEL_36;
            v24 = *(_QWORD *)(v38 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v13 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      v34 = v33;
    }
    Hasher.init(_seed:)(v40, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v40, v32, v31);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v3 = v36;
  v23 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release();
  *v3 = v8;
}

unint64_t sub_1000DB600(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Swift::UInt v17;
  Swift::Int v18;
  unint64_t result;
  uint64_t v20;
  _QWORD *v21;
  _QWORD v22[9];

  Hasher.init(_seed:)(v22, *(_QWORD *)(a9 + 40));
  NSObject.hash(into:)(v22);
  if (a4)
  {
    if (a4 == 1)
    {
      Hasher._combine(_:)(4uLL);
      swift_bridgeObjectRetain(a3);
      String.hash(into:)(v22, a2, a3);
      sub_100084C88(a2, a3, 1u);
    }
    else
    {
      if (a2 | a3)
      {
        if (a2 ^ 1 | a3)
          v17 = 2;
        else
          v17 = 1;
      }
      else
      {
        v17 = 0;
      }
      Hasher._combine(_:)(v17);
    }
  }
  else
  {
    Hasher._combine(_:)(3uLL);
    swift_bridgeObjectRetain(a3);
    String.hash(into:)(v22, a2, a3);
    sub_100084C88(a2, a3, 0);
  }
  v18 = Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)(v18 & ~(-1 << *(_BYTE *)(a9 + 32)), a9 + 64, ~(-1 << *(_BYTE *)(a9 + 32)));
  *(_QWORD *)(a9 + 64 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  v20 = *(_QWORD *)(a9 + 48) + 32 * result;
  *(_QWORD *)v20 = a1;
  *(_QWORD *)(v20 + 8) = a2;
  *(_QWORD *)(v20 + 16) = a3;
  *(_BYTE *)(v20 + 24) = a4;
  v21 = (_QWORD *)(*(_QWORD *)(a9 + 56) + 32 * result);
  *v21 = a5;
  v21[1] = a6;
  v21[2] = a7;
  v21[3] = a8;
  ++*(_QWORD *)(a9 + 16);
  return result;
}

__n128 sub_1000DB7A8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  Swift::UInt v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 result;
  _QWORD v18[9];

  Hasher.init(_seed:)(v18, *(_QWORD *)(a6 + 40));
  NSObject.hash(into:)(v18);
  if (a4)
  {
    if (a4 == 1)
    {
      Hasher._combine(_:)(4uLL);
      swift_bridgeObjectRetain(a3);
      String.hash(into:)(v18, a2, a3);
      sub_100084C88(a2, a3, 1u);
    }
    else
    {
      if (a2 | a3)
      {
        if (a2 ^ 1 | a3)
          v12 = 2;
        else
          v12 = 1;
      }
      else
      {
        v12 = 0;
      }
      Hasher._combine(_:)(v12);
    }
  }
  else
  {
    Hasher._combine(_:)(3uLL);
    swift_bridgeObjectRetain(a3);
    String.hash(into:)(v18, a2, a3);
    sub_100084C88(a2, a3, 0);
  }
  v13 = Hasher._finalize()();
  v14 = _HashTable.nextHole(atOrAfter:)(v13 & ~(-1 << *(_BYTE *)(a6 + 32)), a6 + 64, ~(-1 << *(_BYTE *)(a6 + 32)));
  *(_QWORD *)(a6 + 64 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
  v15 = *(_QWORD *)(a6 + 48) + 32 * v14;
  *(_QWORD *)v15 = a1;
  *(_QWORD *)(v15 + 8) = a2;
  *(_QWORD *)(v15 + 16) = a3;
  *(_BYTE *)(v15 + 24) = a4;
  v16 = *(_QWORD *)(a6 + 56) + 40 * v14;
  *(_QWORD *)(v16 + 32) = *(_QWORD *)(a5 + 32);
  result = *(__n128 *)(a5 + 16);
  *(_OWORD *)v16 = *(_OWORD *)a5;
  *(__n128 *)(v16 + 16) = result;
  ++*(_QWORD *)(a6 + 16);
  return result;
}

Swift::Int sub_1000DB944(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  double v15;
  uint64_t v16;
  double v17;
  double *v18;
  uint64_t v19;
  Swift::Int v20;
  Swift::Int v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t v25;
  char v26;
  Swift::Int v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  double v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  char v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t i;
  uint64_t v90;
  uint64_t v91;
  double v92;
  char v93;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  _QWORD *v104;
  Swift::Int v105;
  Swift::Int v106;
  uint64_t v107;
  double *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v3 < 2)
        return result;
      v86 = *a1;
      v87 = -1;
      v88 = 1;
      for (i = *a1; ; i += 16)
      {
        v90 = v87;
        v91 = i;
        do
        {
          v92 = *(double *)(v91 + 16);
          if (v92 >= *(double *)v91)
            break;
          if (!v86)
            goto LABEL_147;
          v93 = *(_BYTE *)(v91 + 24);
          *(_OWORD *)(v91 + 16) = *(_OWORD *)v91;
          *(double *)v91 = v92;
          *(_BYTE *)(v91 + 8) = v93;
          v91 -= 16;
        }
        while (!__CFADD__(v90++, 1));
        ++v88;
        --v87;
        if (v88 == v3)
          return result;
      }
    }
    goto LABEL_143;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
LABEL_152:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return result;
  }
  v6 = result;
  v102 = a1;
  if (v3 < 2)
  {
    v9 = _swiftEmptyArrayStorage;
    __dst = (double *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v13 = _swiftEmptyArrayStorage[2];
      v12 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_109;
    }
    v104 = _swiftEmptyArrayStorage;
  }
  else
  {
    v7 = v5 >> 1;
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for MapsElevationChartViewModel.ElevationMark);
    *(_QWORD *)(v8 + 16) = v7;
    v104 = (_QWORD *)v8;
    __dst = (double *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v103 = *a1 + 32;
  v101 = *a1 - 16;
  v12 = (char *)_swiftEmptyArrayStorage;
  v105 = v6;
  v106 = v3;
  v107 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 < v3)
    {
      v15 = *(double *)(v11 + 16 * v10);
      v16 = 16 * v14;
      v17 = *(double *)(v11 + 16 * v14);
      v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        v18 = (double *)(v103 + 16 * v14);
        while (v15 < v17 != *v18 >= *(v18 - 2))
        {
          ++v10;
          v18 += 2;
          if (v3 == v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v15 < v17)
      {
        if (v10 < v14)
          goto LABEL_144;
        if (v14 < v10)
        {
          v19 = 16 * v10 - 16;
          v20 = v10;
          v21 = v14;
          do
          {
            if (v21 != --v20)
            {
              if (!v11)
                goto LABEL_150;
              v23 = (_OWORD *)(v11 + v16);
              v24 = (_OWORD *)(v11 + v19);
              v25 = *(_QWORD *)(v11 + v16);
              v26 = *(_BYTE *)(v11 + v16 + 8);
              if (v16 != v19 || v23 >= v24 + 1)
                *v23 = *v24;
              v22 = v11 + v19;
              *(_QWORD *)v22 = v25;
              *(_BYTE *)(v22 + 8) = v26;
            }
            ++v21;
            v19 -= 16;
            v16 += 16;
          }
          while (v21 < v20);
        }
      }
    }
    if (v10 < v3)
    {
      if (__OFSUB__(v10, v14))
        goto LABEL_142;
      if (v10 - v14 < v6)
      {
        v27 = v14 + v6;
        if (__OFADD__(v14, v6))
          goto LABEL_145;
        if (v27 >= v3)
          v27 = v3;
        if (v27 < v14)
          goto LABEL_146;
        if (v10 != v27)
        {
          v28 = v101 + 16 * v10;
          do
          {
            v29 = v14;
            v30 = v28;
            do
            {
              v31 = *(double *)(v30 + 16);
              if (v31 >= *(double *)v30)
                break;
              if (!v11)
                goto LABEL_148;
              v32 = *(_BYTE *)(v30 + 24);
              *(_OWORD *)(v30 + 16) = *(_OWORD *)v30;
              *(double *)v30 = v31;
              *(_BYTE *)(v30 + 8) = v32;
              v30 -= 16;
              ++v29;
            }
            while (v10 != v29);
            ++v10;
            v28 += 16;
          }
          while (v10 != v27);
          v10 = v27;
        }
      }
    }
    if (v10 < v14)
    {
LABEL_137:
      __break(1u);
      goto LABEL_138;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
      v12 = sub_1000DCBFC(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v34 = *((_QWORD *)v12 + 2);
    v33 = *((_QWORD *)v12 + 3);
    v13 = v34 + 1;
    v11 = v107;
    if (v34 >= v33 >> 1)
    {
      v83 = sub_1000DCBFC((char *)(v33 > 1), v34 + 1, 1, v12);
      v11 = v107;
      v12 = v83;
    }
    *((_QWORD *)v12 + 2) = v13;
    v35 = v12 + 32;
    v36 = &v12[16 * v34 + 32];
    *(_QWORD *)v36 = v14;
    *((_QWORD *)v36 + 1) = v10;
    if (v34)
      break;
    v13 = 1;
LABEL_15:
    v6 = v105;
    v3 = v106;
    if (v10 >= v106)
    {
      v9 = v104;
LABEL_109:
      v85 = v12;
      v104 = v9;
      if (v13 < 2)
        goto LABEL_99;
      v95 = *v102;
      while (1)
      {
        v96 = v13 - 2;
        if (v13 < 2)
          break;
        if (!v95)
          goto LABEL_151;
        v84 = v85;
        v97 = *(_QWORD *)&v85[16 * v96 + 32];
        v98 = *(_QWORD *)&v85[16 * v13 + 24];
        sub_1000DC708((double *)(v95 + 16 * v97), (double *)(v95 + 16 * *(_QWORD *)&v85[16 * v13 + 16]), v95 + 16 * v98, __dst);
        if (v1)
          goto LABEL_98;
        if (v98 < v97)
          goto LABEL_139;
        if ((swift_isUniquelyReferenced_nonNull_native(v84) & 1) == 0)
          v84 = sub_1000DD110((uint64_t)v84);
        if (v96 >= *((_QWORD *)v84 + 2))
          goto LABEL_140;
        v99 = &v84[16 * v96 + 32];
        *(_QWORD *)v99 = v97;
        *((_QWORD *)v99 + 1) = v98;
        v100 = *((_QWORD *)v84 + 2);
        if (v13 > v100)
          goto LABEL_141;
        memmove(&v84[16 * v13 + 16], &v84[16 * v13 + 32], 16 * (v100 - v13));
        v85 = v84;
        *((_QWORD *)v84 + 2) = v100 - 1;
        v13 = v100 - 1;
        if (v100 <= 2)
          goto LABEL_99;
      }
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
      goto LABEL_152;
    }
  }
  while (1)
  {
    v37 = v13 - 1;
    if (v13 >= 4)
    {
      v42 = &v35[16 * v13];
      v43 = *((_QWORD *)v42 - 8);
      v44 = *((_QWORD *)v42 - 7);
      v48 = __OFSUB__(v44, v43);
      v45 = v44 - v43;
      if (v48)
        goto LABEL_126;
      v47 = *((_QWORD *)v42 - 6);
      v46 = *((_QWORD *)v42 - 5);
      v48 = __OFSUB__(v46, v47);
      v40 = v46 - v47;
      v41 = v48;
      if (v48)
        goto LABEL_127;
      v49 = v13 - 2;
      v50 = &v35[16 * v13 - 32];
      v52 = *(_QWORD *)v50;
      v51 = *((_QWORD *)v50 + 1);
      v48 = __OFSUB__(v51, v52);
      v53 = v51 - v52;
      if (v48)
        goto LABEL_129;
      v48 = __OFADD__(v40, v53);
      v54 = v40 + v53;
      if (v48)
        goto LABEL_132;
      if (v54 >= v45)
      {
        v72 = &v35[16 * v37];
        v74 = *(_QWORD *)v72;
        v73 = *((_QWORD *)v72 + 1);
        v48 = __OFSUB__(v73, v74);
        v75 = v73 - v74;
        if (v48)
          goto LABEL_136;
        v65 = v40 < v75;
        goto LABEL_87;
      }
    }
    else
    {
      if (v13 != 3)
      {
        v66 = *((_QWORD *)v12 + 4);
        v67 = *((_QWORD *)v12 + 5);
        v48 = __OFSUB__(v67, v66);
        v59 = v67 - v66;
        v60 = v48;
        goto LABEL_81;
      }
      v39 = *((_QWORD *)v12 + 4);
      v38 = *((_QWORD *)v12 + 5);
      v48 = __OFSUB__(v38, v39);
      v40 = v38 - v39;
      v41 = v48;
    }
    if ((v41 & 1) != 0)
      goto LABEL_128;
    v49 = v13 - 2;
    v55 = &v35[16 * v13 - 32];
    v57 = *(_QWORD *)v55;
    v56 = *((_QWORD *)v55 + 1);
    v58 = __OFSUB__(v56, v57);
    v59 = v56 - v57;
    v60 = v58;
    if (v58)
      goto LABEL_131;
    v61 = &v35[16 * v37];
    v63 = *(_QWORD *)v61;
    v62 = *((_QWORD *)v61 + 1);
    v48 = __OFSUB__(v62, v63);
    v64 = v62 - v63;
    if (v48)
      goto LABEL_134;
    if (__OFADD__(v59, v64))
      goto LABEL_135;
    if (v59 + v64 >= v40)
    {
      v65 = v40 < v64;
LABEL_87:
      if (v65)
        v37 = v49;
      goto LABEL_89;
    }
LABEL_81:
    if ((v60 & 1) != 0)
      goto LABEL_130;
    v68 = &v35[16 * v37];
    v70 = *(_QWORD *)v68;
    v69 = *((_QWORD *)v68 + 1);
    v48 = __OFSUB__(v69, v70);
    v71 = v69 - v70;
    if (v48)
      goto LABEL_133;
    if (v71 < v59)
      goto LABEL_15;
LABEL_89:
    v76 = v37 - 1;
    if (v37 - 1 >= v13)
    {
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
      goto LABEL_137;
    }
    if (!v11)
      goto LABEL_149;
    v77 = v12;
    v78 = &v35[16 * v76];
    v79 = *(_QWORD *)v78;
    v80 = &v35[16 * v37];
    v81 = *((_QWORD *)v80 + 1);
    sub_1000DC708((double *)(v11 + 16 * *(_QWORD *)v78), (double *)(v11 + 16 * *(_QWORD *)v80), v11 + 16 * v81, __dst);
    if (v1)
      break;
    if (v81 < v79)
      goto LABEL_123;
    if (v37 > *((_QWORD *)v77 + 2))
      goto LABEL_124;
    *(_QWORD *)v78 = v79;
    *(_QWORD *)&v35[16 * v76 + 8] = v81;
    v82 = *((_QWORD *)v77 + 2);
    if (v37 >= v82)
      goto LABEL_125;
    v12 = v77;
    v13 = v82 - 1;
    memmove(&v35[16 * v37], v80 + 16, 16 * (v82 - 1 - v37));
    *((_QWORD *)v77 + 2) = v82 - 1;
    v11 = v107;
    if (v82 <= 2)
      goto LABEL_15;
  }
  v84 = v77;
LABEL_98:
  v85 = v84;
LABEL_99:
  swift_bridgeObjectRelease(v85);
  v104[2] = 0;
  return swift_bridgeObjectRelease(v104);
}

void sub_1000DC038(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  Swift::Int v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  Swift::Int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  char v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  _QWORD *v104;
  Swift::Int v105;
  Swift::Int v106;
  uint64_t v107;
  char *__dst;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v3 < 2)
        return;
      v88 = 0;
      v89 = *a1;
      v90 = 1;
      while (1)
      {
        v91 = *(_QWORD *)(v89 + 16 * v90);
        v92 = v88;
        do
        {
          if (v91 >= *(_QWORD *)(v89 + v92))
            break;
          if (!v89)
            goto LABEL_142;
          v93 = (_QWORD *)(v89 + v92);
          v94 = *(_QWORD *)(v89 + v92 + 24);
          *(_OWORD *)(v89 + v92 + 16) = *(_OWORD *)(v89 + v92);
          *v93 = v91;
          v93[1] = v94;
          v92 -= 16;
        }
        while (v92 != -16);
        ++v90;
        v88 += 16;
        if (v90 == v3)
          return;
      }
    }
    goto LABEL_138;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
LABEL_147:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return;
  }
  v6 = v4;
  v102 = a1;
  if (v3 < 2)
  {
    v10 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v14 = _swiftEmptyArrayStorage[2];
      v13 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_104;
    }
    v104 = _swiftEmptyArrayStorage;
  }
  else
  {
    v7 = v5 >> 1;
    v8 = sub_100008B04(&qword_10149A200);
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)(v7, v8);
    *(_QWORD *)(v9 + 16) = v7;
    v104 = (_QWORD *)v9;
    __dst = (char *)(v9 + 32);
  }
  v11 = 0;
  v12 = *a1;
  v103 = *a1 + 32;
  v101 = *a1 - 16;
  v13 = (char *)_swiftEmptyArrayStorage;
  v105 = v6;
  v106 = v3;
  v107 = v12;
  while (1)
  {
    v15 = v11++;
    if (v11 < v3)
    {
      v16 = *(_QWORD *)(v12 + 16 * v11);
      v17 = 16 * v15;
      v18 = *(_QWORD *)(v12 + 16 * v15);
      v11 = v15 + 2;
      if (v15 + 2 < v3)
      {
        v19 = (uint64_t *)(v103 + 16 * v15);
        v20 = v16;
        while (1)
        {
          v22 = *v19;
          v19 += 2;
          v21 = v22;
          if (v16 < v18 == v22 >= v20)
            break;
          ++v11;
          v20 = v21;
          if (v3 == v11)
          {
            v11 = v3;
            break;
          }
        }
      }
      if (v16 < v18)
      {
        if (v11 < v15)
          goto LABEL_139;
        if (v15 < v11)
        {
          v23 = 16 * v11;
          v24 = v11;
          v25 = v15;
          do
          {
            if (v25 != --v24)
            {
              if (!v12)
                goto LABEL_145;
              v26 = v12 + v23;
              v27 = *(_QWORD *)(v12 + v17);
              v28 = *(_QWORD *)(v12 + v17 + 8);
              *(_OWORD *)(v12 + v17) = *(_OWORD *)(v12 + v23 - 16);
              *(_QWORD *)(v26 - 16) = v27;
              *(_QWORD *)(v26 - 8) = v28;
            }
            ++v25;
            v23 -= 16;
            v17 += 16;
          }
          while (v25 < v24);
        }
      }
    }
    if (v11 < v3)
    {
      if (__OFSUB__(v11, v15))
        goto LABEL_137;
      if (v11 - v15 < v6)
      {
        v29 = v15 + v6;
        if (__OFADD__(v15, v6))
          goto LABEL_140;
        if (v29 >= v3)
          v29 = v3;
        if (v29 < v15)
          goto LABEL_141;
        if (v11 != v29)
        {
          v30 = v101 + 16 * v11;
          do
          {
            v31 = *(_QWORD *)(v12 + 16 * v11);
            v32 = v15;
            v33 = v30;
            do
            {
              if (v31 >= *(_QWORD *)v33)
                break;
              if (!v12)
                goto LABEL_143;
              v34 = *(_QWORD *)(v33 + 24);
              *(_OWORD *)(v33 + 16) = *(_OWORD *)v33;
              *(_QWORD *)v33 = v31;
              *(_QWORD *)(v33 + 8) = v34;
              v33 -= 16;
              ++v32;
            }
            while (v11 != v32);
            ++v11;
            v30 += 16;
          }
          while (v11 != v29);
          v11 = v29;
        }
      }
    }
    if (v11 < v15)
    {
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
      v13 = sub_1000DCBFC(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
    v36 = *((_QWORD *)v13 + 2);
    v35 = *((_QWORD *)v13 + 3);
    v14 = v36 + 1;
    v12 = v107;
    if (v36 >= v35 >> 1)
    {
      v85 = sub_1000DCBFC((char *)(v35 > 1), v36 + 1, 1, v13);
      v12 = v107;
      v13 = v85;
    }
    *((_QWORD *)v13 + 2) = v14;
    v37 = v13 + 32;
    v38 = &v13[16 * v36 + 32];
    *(_QWORD *)v38 = v15;
    *((_QWORD *)v38 + 1) = v11;
    if (v36)
      break;
    v14 = 1;
LABEL_15:
    v6 = v105;
    v3 = v106;
    if (v11 >= v106)
    {
      v10 = v104;
LABEL_104:
      v87 = v13;
      v104 = v10;
      if (v14 < 2)
        goto LABEL_95;
      v95 = *v102;
      while (1)
      {
        v96 = v14 - 2;
        if (v14 < 2)
          break;
        if (!v95)
          goto LABEL_146;
        v86 = v87;
        v97 = *(_QWORD *)&v87[16 * v96 + 32];
        v98 = *(_QWORD *)&v87[16 * v14 + 24];
        sub_1000DC984((char *)(v95 + 16 * v97), (char *)(v95 + 16 * *(_QWORD *)&v87[16 * v14 + 16]), v95 + 16 * v98, __dst);
        if (v1)
          goto LABEL_94;
        if (v98 < v97)
          goto LABEL_134;
        if ((swift_isUniquelyReferenced_nonNull_native(v86) & 1) == 0)
          v86 = sub_1000DD110((uint64_t)v86);
        if (v96 >= *((_QWORD *)v86 + 2))
          goto LABEL_135;
        v99 = &v86[16 * v96 + 32];
        *(_QWORD *)v99 = v97;
        *((_QWORD *)v99 + 1) = v98;
        v100 = *((_QWORD *)v86 + 2);
        if (v14 > v100)
          goto LABEL_136;
        memmove(&v86[16 * v14 + 16], &v86[16 * v14 + 32], 16 * (v100 - v14));
        v87 = v86;
        *((_QWORD *)v86 + 2) = v100 - 1;
        v14 = v100 - 1;
        if (v100 <= 2)
          goto LABEL_95;
      }
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
      goto LABEL_147;
    }
  }
  while (1)
  {
    v39 = v14 - 1;
    if (v14 >= 4)
    {
      v44 = &v37[16 * v14];
      v45 = *((_QWORD *)v44 - 8);
      v46 = *((_QWORD *)v44 - 7);
      v50 = __OFSUB__(v46, v45);
      v47 = v46 - v45;
      if (v50)
        goto LABEL_121;
      v49 = *((_QWORD *)v44 - 6);
      v48 = *((_QWORD *)v44 - 5);
      v50 = __OFSUB__(v48, v49);
      v42 = v48 - v49;
      v43 = v50;
      if (v50)
        goto LABEL_122;
      v51 = v14 - 2;
      v52 = &v37[16 * v14 - 32];
      v54 = *(_QWORD *)v52;
      v53 = *((_QWORD *)v52 + 1);
      v50 = __OFSUB__(v53, v54);
      v55 = v53 - v54;
      if (v50)
        goto LABEL_124;
      v50 = __OFADD__(v42, v55);
      v56 = v42 + v55;
      if (v50)
        goto LABEL_127;
      if (v56 >= v47)
      {
        v74 = &v37[16 * v39];
        v76 = *(_QWORD *)v74;
        v75 = *((_QWORD *)v74 + 1);
        v50 = __OFSUB__(v75, v76);
        v77 = v75 - v76;
        if (v50)
          goto LABEL_131;
        v67 = v42 < v77;
        goto LABEL_83;
      }
    }
    else
    {
      if (v14 != 3)
      {
        v68 = *((_QWORD *)v13 + 4);
        v69 = *((_QWORD *)v13 + 5);
        v50 = __OFSUB__(v69, v68);
        v61 = v69 - v68;
        v62 = v50;
        goto LABEL_77;
      }
      v41 = *((_QWORD *)v13 + 4);
      v40 = *((_QWORD *)v13 + 5);
      v50 = __OFSUB__(v40, v41);
      v42 = v40 - v41;
      v43 = v50;
    }
    if ((v43 & 1) != 0)
      goto LABEL_123;
    v51 = v14 - 2;
    v57 = &v37[16 * v14 - 32];
    v59 = *(_QWORD *)v57;
    v58 = *((_QWORD *)v57 + 1);
    v60 = __OFSUB__(v58, v59);
    v61 = v58 - v59;
    v62 = v60;
    if (v60)
      goto LABEL_126;
    v63 = &v37[16 * v39];
    v65 = *(_QWORD *)v63;
    v64 = *((_QWORD *)v63 + 1);
    v50 = __OFSUB__(v64, v65);
    v66 = v64 - v65;
    if (v50)
      goto LABEL_129;
    if (__OFADD__(v61, v66))
      goto LABEL_130;
    if (v61 + v66 >= v42)
    {
      v67 = v42 < v66;
LABEL_83:
      if (v67)
        v39 = v51;
      goto LABEL_85;
    }
LABEL_77:
    if ((v62 & 1) != 0)
      goto LABEL_125;
    v70 = &v37[16 * v39];
    v72 = *(_QWORD *)v70;
    v71 = *((_QWORD *)v70 + 1);
    v50 = __OFSUB__(v71, v72);
    v73 = v71 - v72;
    if (v50)
      goto LABEL_128;
    if (v73 < v61)
      goto LABEL_15;
LABEL_85:
    v78 = v39 - 1;
    if (v39 - 1 >= v14)
    {
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
      goto LABEL_132;
    }
    if (!v12)
      goto LABEL_144;
    v79 = v13;
    v80 = &v37[16 * v78];
    v81 = *(_QWORD *)v80;
    v82 = &v37[16 * v39];
    v83 = *((_QWORD *)v82 + 1);
    sub_1000DC984((char *)(v12 + 16 * *(_QWORD *)v80), (char *)(v12 + 16 * *(_QWORD *)v82), v12 + 16 * v83, __dst);
    if (v1)
      break;
    if (v83 < v81)
      goto LABEL_118;
    if (v39 > *((_QWORD *)v79 + 2))
      goto LABEL_119;
    *(_QWORD *)v80 = v81;
    *(_QWORD *)&v37[16 * v78 + 8] = v83;
    v84 = *((_QWORD *)v79 + 2);
    if (v39 >= v84)
      goto LABEL_120;
    v13 = v79;
    v14 = v84 - 1;
    memmove(&v37[16 * v39], v82 + 16, 16 * (v84 - 1 - v39));
    *((_QWORD *)v79 + 2) = v84 - 1;
    v12 = v107;
    if (v84 <= 2)
      goto LABEL_15;
  }
  v86 = v79;
LABEL_94:
  v87 = v86;
LABEL_95:
  swift_bridgeObjectRelease(v87);
  v104[2] = 0;
  swift_bridgeObjectRelease(v104);
}

uint64_t sub_1000DC708(double *__src, double *a2, unint64_t a3, double *__dst)
{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  double *v15;
  double *v16;
  uint64_t v17;
  double *v18;
  double *v19;
  double *v20;
  double *v21;
  double v22;
  uint64_t result;
  char v24;
  double *v25;
  double *v26;
  double *v27;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 15;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v26 = __dst;
  v27 = __src;
  if (v10 >= v13)
  {
    if (v11 >= -15)
    {
      v17 = 2 * v13;
      if (__dst != a2 || &a2[v17] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v18 = &v4[v17];
      v25 = &v4[v17];
      v27 = v6;
      if (v7 < v6 && (unint64_t)(v11 - 16) <= 0xFFFFFFFFFFFFFFE0)
      {
        v19 = (double *)(a3 - 16);
        v20 = v6;
        while (1)
        {
          v21 = v19 + 2;
          v22 = *(v20 - 2);
          v20 -= 2;
          if (*(v18 - 2) >= v22)
          {
            v25 = v18 - 2;
            if (v21 < v18 || v19 >= v18 || v21 != v18)
              *(_OWORD *)v19 = *((_OWORD *)v18 - 1);
            v20 = v6;
            v18 -= 2;
            if (v6 <= v7)
              goto LABEL_42;
          }
          else
          {
            if (v21 != v6 || v19 >= v6)
              *(_OWORD *)v19 = *(_OWORD *)v20;
            v27 = v20;
            if (v20 <= v7)
              goto LABEL_42;
          }
          v19 -= 2;
          v6 = v20;
          if (v18 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -15)
  {
    v14 = 2 * v10;
    if (__dst != __src || &__src[v14] <= __dst)
      memmove(__dst, __src, v14 * 8);
    v15 = &v4[v14];
    v25 = &v4[v14];
    if ((unint64_t)v6 < a3 && (unint64_t)(v8 - 16) <= 0xFFFFFFFFFFFFFFE0)
    {
      do
      {
        if (*v6 >= *v4)
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 2;
          v26 = v4;
          v16 = v6;
        }
        else
        {
          v16 = v6 + 2;
          if (v7 < v6 || v7 >= v16 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        v7 += 2;
        if (v4 >= v15)
          break;
        v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      v27 = v7;
    }
LABEL_42:
    sub_1000DCD9C((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  v24 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v24, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000DC984(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t result;
  char *v22;
  char *v23;
  char *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v16 = &v4[16 * v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v17 = (char *)(a3 - 16);
        v18 = v6;
        while (1)
        {
          v19 = v17 + 16;
          v20 = *((_QWORD *)v18 - 2);
          v18 -= 16;
          if (*((_QWORD *)v16 - 2) >= v20)
          {
            v22 = v16 - 16;
            if (v19 < v16 || v17 >= v16 || v19 != v16)
              *(_OWORD *)v17 = *((_OWORD *)v16 - 1);
            v18 = v6;
            v16 -= 16;
            if (v6 <= v7)
              goto LABEL_42;
          }
          else
          {
            if (v19 != v6 || v17 >= v6)
              *(_OWORD *)v17 = *(_OWORD *)v18;
            v24 = v18;
            if (v18 <= v7)
              goto LABEL_42;
          }
          v17 -= 16;
          v6 = v18;
          if (v16 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[16 * v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        if (*(_QWORD *)v6 >= *(_QWORD *)v4)
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 16;
          v23 = v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 16;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        v7 += 16;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_42:
    sub_1000DCE44((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

char *sub_1000DCBFC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008B04(&qword_10149A208);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_1000DCCF4(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char v9;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 3;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -4)
  {
    v9 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v9, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 2;
    if (result != v3 || result >= &v3[4 * v7])
      return (char *)memmove(result, v3, 4 * v7);
  }
  return result;
}

char *sub_1000DCD9C(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  size_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = (v4 + (v4 < 0 ? 0xFuLL : 0)) & 0xFFFFFFFFFFFFFFF0;
    if (result != v3 || result >= &v3[v6])
      return (char *)memmove(result, v3, v6);
  }
  return result;
}

char *sub_1000DCE44(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char v9;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    v9 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v9, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

char *sub_1000DCEEC(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  char v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -88)
  {
    v7 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v7, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 88;
    if (result != v3 || result >= &v3[88 * v6])
      return (char *)memmove(result, v3, 88 * v6);
  }
  return result;
}

char *sub_1000DCFAC(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char v9;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    v9 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v9, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

char *sub_1000DD054(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  char v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -24)
  {
    v7 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v7, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 24;
    if (result != v3 || result >= &v3[24 * v6])
      return (char *)memmove(result, v3, 24 * v6);
  }
  return result;
}

char *sub_1000DD110(uint64_t a1)
{
  return sub_1000DCBFC(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *sub_1000DD124(_QWORD *result, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_DWORD *)(*(_QWORD *)(a4 + 48) + 4 * v12);
    if (v9 == a3)
      goto LABEL_35;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_19;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    v13 = v8;
LABEL_19:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_8;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    v13 = v15;
    goto LABEL_19;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_15;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_18;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

_QWORD *sub_1000DD2B8(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  id v21;

  v5 = result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (_QWORD *)v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(void **)(*(_QWORD *)(a4 + 48) + 8 * v16);
    *v11 = v20;
    if (v13 == v10)
    {
      v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    result = v20;
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1000DD4B0(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = a4;
  v6 = a2;
  v7 = (_QWORD *)result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a4 < 0)
      v8 = a4;
    else
      v8 = a4 & 0xFFFFFFFFFFFFFF8;
    result = __CocoaDictionary.makeIterator()(v8);
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v4 = result | 0x8000000000000000;
    if (v6)
      goto LABEL_6;
LABEL_39:
    v12 = 0;
    a3 = 0;
LABEL_48:
    *v7 = v4;
    v7[1] = v9;
    v7[2] = v10;
    v7[3] = v12;
    v7[4] = v11;
    return a3;
  }
  v25 = -1 << *(_BYTE *)(a4 + 32);
  v9 = a4 + 64;
  v26 = ~v25;
  v27 = -v25;
  if (v27 < 64)
    v28 = ~(-1 << v27);
  else
    v28 = -1;
  v11 = v28 & *(_QWORD *)(a4 + 64);
  v10 = v26;
  if (!a2)
    goto LABEL_39;
LABEL_6:
  if (!a3)
  {
    v12 = 0;
    goto LABEL_48;
  }
  if (a3 < 0)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  v29 = v10;
  v30 = v7;
  v12 = 0;
  v13 = 0;
  v31 = (unint64_t)(v10 + 64) >> 6;
  while ((v4 & 0x8000000000000000) != 0)
  {
    v19 = v9;
    v20 = __CocoaDictionary.Iterator.next()();
    if (!v20)
    {
      a3 = v13;
LABEL_47:
      v10 = v29;
      v7 = v30;
      goto LABEL_48;
    }
    v22 = v21;
    swift_unknownObjectRelease(v20);
    v32 = v22;
    v23 = sub_10000E4BC(0, (unint64_t *)&unk_10149A2C0, off_101196C58);
    swift_unknownObjectRetain(v22);
    swift_dynamicCast(&v33, &v32, (char *)&type metadata for Swift.AnyObject + 8, v23, 7);
    v16 = v33;
    result = swift_unknownObjectRelease(v22);
    v9 = v19;
    if (!v16)
      goto LABEL_46;
LABEL_11:
    ++v13;
    *v6++ = v16;
    if (v13 == a3)
      goto LABEL_47;
  }
  if (v11)
  {
    v14 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    v15 = v14 | (v12 << 6);
    goto LABEL_10;
  }
  v17 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
    goto LABEL_50;
  }
  if (v17 >= v31)
    goto LABEL_42;
  v18 = *(_QWORD *)(v9 + 8 * v17);
  if (v18)
    goto LABEL_26;
  v12 += 2;
  if (v17 + 1 >= v31)
  {
    v11 = 0;
    v12 = v17;
    goto LABEL_46;
  }
  v18 = *(_QWORD *)(v9 + 8 * v12);
  if (v18)
  {
LABEL_19:
    v17 = v12;
LABEL_26:
    v11 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
LABEL_10:
    result = (uint64_t)*(id *)(*(_QWORD *)(v4 + 56) + 8 * v15);
    v16 = result;
    if (!result)
      goto LABEL_46;
    goto LABEL_11;
  }
  v24 = v17 + 2;
  if (v17 + 2 >= v31)
    goto LABEL_42;
  v18 = *(_QWORD *)(v9 + 8 * v24);
  if (v18)
  {
LABEL_25:
    v17 = v24;
    goto LABEL_26;
  }
  v12 = v17 + 3;
  if (v17 + 3 >= v31)
  {
    v11 = 0;
    v12 = v17 + 2;
    goto LABEL_46;
  }
  v18 = *(_QWORD *)(v9 + 8 * v12);
  if (v18)
    goto LABEL_19;
  v24 = v17 + 4;
  if (v17 + 4 >= v31)
  {
LABEL_42:
    v11 = 0;
LABEL_46:
    a3 = v13;
    goto LABEL_47;
  }
  v18 = *(_QWORD *)(v9 + 8 * v24);
  if (v18)
    goto LABEL_25;
  while (1)
  {
    v17 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v17 >= v31)
    {
      v11 = 0;
      v12 = v31 - 1;
      goto LABEL_46;
    }
    v18 = *(_QWORD *)(v9 + 8 * v17);
    ++v24;
    if (v18)
      goto LABEL_26;
  }
LABEL_51:
  __break(1u);
  return result;
}

uint64_t sub_1000DD780(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v16);
    *v11 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v16);
    v11[1] = v20;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v20);
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain(v20);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1000DD980(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain(v21);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t *sub_1000DDB7C(uint64_t *result, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;
  uint64_t v34;
  uint64_t *v35;
  _QWORD v36[5];

  v4 = a4;
  v6 = a2;
  v7 = result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a4 < 0)
      v8 = a4;
    else
      v8 = a4 & 0xFFFFFFFFFFFFFF8;
    v9 = __CocoaSet.makeIterator()(v8);
    v10 = sub_10000E4BC(0, &qword_10149A2F0, MKMapItemIdentifier_ptr);
    v11 = sub_1000DE5F4();
    result = Set.Iterator.init(_cocoa:)(v36, v9, v10, v11);
    v4 = v36[0];
    v12 = v36[1];
    v13 = v36[2];
    v14 = v36[3];
    v15 = v36[4];
    v32 = v7;
    if (v6)
      goto LABEL_6;
LABEL_39:
    v16 = 0;
LABEL_49:
    *v32 = v4;
    v32[1] = v12;
    v32[2] = v13;
    v32[3] = v14;
    v32[4] = v15;
    return (uint64_t *)v16;
  }
  v14 = 0;
  v28 = -1 << *(_BYTE *)(a4 + 32);
  v12 = a4 + 56;
  v13 = ~v28;
  v29 = -v28;
  if (v29 < 64)
    v30 = ~(-1 << v29);
  else
    v30 = -1;
  v15 = v30 & *(_QWORD *)(a4 + 56);
  v32 = result;
  if (!a2)
    goto LABEL_39;
LABEL_6:
  if (!a3)
  {
    v16 = 0;
    goto LABEL_49;
  }
  if (a3 < 0)
    goto LABEL_51;
  v16 = 0;
  v33 = (unint64_t)(v13 + 64) >> 6;
  v31 = v13;
  while (1)
  {
    if (v4 < 0)
    {
      v23 = v12;
      v24 = __CocoaSet.Iterator.next()(result);
      if (!v24)
        goto LABEL_48;
      v25 = v24;
      v34 = v24;
      v26 = sub_10000E4BC(0, &qword_10149A2F0, MKMapItemIdentifier_ptr);
      swift_unknownObjectRetain(v25);
      swift_dynamicCast(&v35, &v34, (char *)&type metadata for Swift.AnyObject + 8, v26, 7);
      v19 = v35;
      result = (uint64_t *)swift_unknownObjectRelease(v25);
      v12 = v23;
      if (!v19)
        goto LABEL_48;
      goto LABEL_11;
    }
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v14 << 6);
      goto LABEL_10;
    }
    v20 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v20 >= v33)
    {
      v15 = 0;
      goto LABEL_48;
    }
    v21 = *(_QWORD *)(v12 + 8 * v20);
    if (v21)
      goto LABEL_26;
    v22 = v14 + 2;
    if (v14 + 2 >= v33)
    {
      v15 = 0;
      ++v14;
      goto LABEL_48;
    }
    v21 = *(_QWORD *)(v12 + 8 * v22);
    if (!v21)
    {
      if (v14 + 3 >= v33)
        goto LABEL_45;
      v21 = *(_QWORD *)(v12 + 8 * (v14 + 3));
      if (v21)
      {
        v20 = v14 + 3;
        goto LABEL_26;
      }
      v22 = v14 + 4;
      if (v14 + 4 >= v33)
      {
        v15 = 0;
        v14 += 3;
        goto LABEL_48;
      }
      v21 = *(_QWORD *)(v12 + 8 * v22);
      if (!v21)
      {
        v20 = v14 + 5;
        if (v14 + 5 >= v33)
        {
LABEL_45:
          v15 = 0;
          v14 = v22;
          goto LABEL_48;
        }
        v21 = *(_QWORD *)(v12 + 8 * v20);
        if (!v21)
        {
          v27 = v14 + 6;
          while (v33 != v27)
          {
            v21 = *(_QWORD *)(v12 + 8 * v27++);
            if (v21)
            {
              v20 = v27 - 1;
              goto LABEL_26;
            }
          }
          v15 = 0;
          v14 = v33 - 1;
          goto LABEL_48;
        }
        goto LABEL_26;
      }
    }
    v20 = v22;
LABEL_26:
    v15 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v20 << 6);
    v14 = v20;
LABEL_10:
    result = (uint64_t *)*(id *)(*(_QWORD *)(v4 + 48) + 8 * v18);
    v19 = result;
    if (!result)
      goto LABEL_48;
LABEL_11:
    ++v16;
    *v6++ = v19;
    if (v16 == a3)
    {
      v16 = a3;
LABEL_48:
      v13 = v31;
      goto LABEL_49;
    }
  }
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

uint64_t sub_1000DDE84(uint64_t a1)
{
  return sub_100132908(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000DDE98(uint64_t a1)
{
  return sub_100132D28(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000DDEAC(_QWORD *a1)
{
  return sub_100133780(0, a1[2], 0, a1);
}

uint64_t sub_1000DDEC0(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_1000DDED4(uint64_t a1)
{
  return sub_100133908(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000DDEE8(_QWORD *a1)
{
  return sub_100133EF8(0, a1[2], 0, a1);
}

uint64_t sub_1000DDEFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  int v19;
  void (*v20)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t result;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  unint64_t v27;
  _BYTE v28[40];
  _QWORD v29[5];

  v4 = sub_100008B04(&qword_10149A4A0);
  __chkstk_darwin(v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008B04(&qword_10149A1F0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v26 - v12;
  v29[3] = v14;
  v15 = sub_1000DF588();
  v29[4] = v15;
  v16 = (char *)sub_100011DCC(v29);
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v17(v16, a1, v7);
  sub_100084C44((uint64_t)v29, (uint64_t)v28);
  v18 = sub_100008B04((uint64_t *)&unk_10149A4B0);
  v19 = swift_dynamicCast(v6, v28, v18, v7, 6);
  v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
  if (v19)
  {
    v20(v6, 0, 1, v7);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v6, v7);
    if ((dispatch thunk of static Comparable.< infix(_:_:)(a2, v13, v7, v15) & 1) != 0)
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
      v21 = -1;
    }
    else
    {
      v22 = dispatch thunk of static Comparable.> infix(_:_:)(a2, v13, v7, v15);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
      v21 = v22 & 1;
    }
    sub_10000BEAC(v29);
    return v21;
  }
  else
  {
    v20(v6, 1, 1, v7);
    sub_100010CC4((uint64_t)v6, &qword_10149A4A0);
    v17(v10, a2, v7);
    sub_100084C44((uint64_t)v29, (uint64_t)v28);
    v26 = 0;
    v27 = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    _print_unlocked<A, B>(_:_:)(v10, &v26, v7, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v24._countAndFlagsBits = 0x20646E6120;
    v24._object = (void *)0xE500000000000000;
    String.append(_:)(v24);
    _print_unlocked<A, B>(_:_:)(v28, &v26, v18, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v25._object = (void *)0x8000000100E48F40;
    v25._countAndFlagsBits = 0xD000000000000020;
    String.append(_:)(v25);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v26, v27, "Maps/Array+BinarySearch.swift", 29, 2, 14, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000DE1DC(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t result;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;

  v50 = type metadata accessor for MapsElevationChartViewModel.ElevationDatum(0);
  __chkstk_darwin(v50);
  v53 = (uint64_t)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v54 = (uint64_t)&v46 - v9;
  v10 = _swiftEmptyDictionarySingleton;
  v55 = _swiftEmptyDictionarySingleton;
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
    return (uint64_t)v10;
  v12 = *(_QWORD *)(a2 + 16);
  if (v12)
  {
    v13 = *(unsigned __int8 *)(v8 + 80);
    v14 = (v13 + 32) & ~v13;
    v15 = a1 + v14;
    v46 = a2;
    v16 = *(_QWORD *)(v8 + 72);
    v17 = a2 + v14 + v16 * (v12 - 1);
    v18 = v50;
    v19 = *(int *)(v50 + 20);
    v51 = v14;
    v52 = v17 + v19;
    v49 = v16 + v14;
    v48 = v13 | 7;
    v47 = xmmword_100E22F40;
    while (1)
    {
      v21 = v54;
      sub_1000202AC(v15, v54, type metadata accessor for MapsElevationChartViewModel.ElevationDatum);
      v22 = v21 + *(int *)(v18 + 20);
      v23 = sub_10000E4BC(0, (unint64_t *)&qword_10149A210, NSUnitLength_ptr);
      if ((static Measurement.== infix<A, B>(_:_:)(v22, v52, v23, v23, v23) & 1) != 0)
      {
        v24 = 3;
      }
      else
      {
        v25 = sub_100008B04(&qword_10149A1F0);
        v26 = floor(Measurement.value.getter(v25) / a3);
        if ((~*(_QWORD *)&v26 & 0x7FF0000000000000) == 0)
          goto LABEL_25;
        if (v26 <= -9.22337204e18)
          goto LABEL_26;
        if (v26 >= 9.22337204e18)
          goto LABEL_27;
        v24 = (uint64_t)v26;
      }
      v28 = sub_1000C163C(v24);
      v29 = v10[2];
      v30 = (v27 & 1) == 0;
      v31 = v29 + v30;
      if (__OFADD__(v29, v30))
        break;
      v32 = v27;
      if (v10[3] < v31)
      {
        sub_1000DA9CC(v31, 1, (uint64_t *)&unk_10149A220);
        v10 = v55;
        v33 = sub_1000C163C(v24);
        if ((v32 & 1) != (v34 & 1))
          goto LABEL_30;
        v28 = v33;
      }
      if ((v32 & 1) != 0)
      {
        v35 = v10[7];
        sub_1000DE568(v54, v53);
        v36 = *(_QWORD *)(v35 + 8 * v28);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v36);
        *(_QWORD *)(v35 + 8 * v28) = v36;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v36 = sub_1000A8AB4(0, *(_QWORD *)(v36 + 16) + 1, 1, v36);
          *(_QWORD *)(v35 + 8 * v28) = v36;
        }
        v39 = *(_QWORD *)(v36 + 16);
        v38 = *(_QWORD *)(v36 + 24);
        if (v39 >= v38 >> 1)
        {
          v36 = sub_1000A8AB4(v38 > 1, v39 + 1, 1, v36);
          *(_QWORD *)(v35 + 8 * v28) = v36;
        }
        v18 = v50;
        v20 = v51;
        *(_QWORD *)(v36 + 16) = v39 + 1;
        sub_1000DE568(v53, v36 + v20 + v39 * v16);
      }
      else
      {
        v40 = sub_100008B04(&qword_1014989E0);
        v41 = swift_allocObject(v40, v49, v48);
        *(_OWORD *)(v41 + 16) = v47;
        sub_1000DE568(v54, v41 + v51);
        v10[(v28 >> 6) + 8] |= 1 << v28;
        *(_QWORD *)(v10[6] + 8 * v28) = v24;
        *(_QWORD *)(v10[7] + 8 * v28) = v41;
        v42 = v10[2];
        v43 = __OFADD__(v42, 1);
        v44 = v42 + 1;
        if (v43)
          goto LABEL_28;
        v10[2] = v44;
      }
      v15 += v16;
      if (!--v11)
        return (uint64_t)v10;
    }
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
  __break(1u);
LABEL_30:
  swift_bridgeObjectRelease(v46);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
  __break(1u);
  return result;
}

uint64_t sub_1000DE568(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MapsElevationChartViewModel.ElevationDatum(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000DE5AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008B04((uint64_t *)&unk_10149E930);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000DE5F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10149A2F8;
  if (!qword_10149A2F8)
  {
    v1 = sub_10000E4BC(255, &qword_10149A2F0, MKMapItemIdentifier_ptr);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10149A2F8);
  }
  return result;
}

char *sub_1000DE64C(char *a1, char *a2, int *a3)
{
  char *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *(_QWORD *)a2;
    *(_QWORD *)v4 = *(_QWORD *)a2;
    v4 = (char *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v7 = a3[5];
    v8 = &a1[v7];
    v9 = &a2[v7];
    v10 = sub_100008B04(&qword_10149A1F0);
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    v11(&v4[a3[6]], &a2[a3[6]], v10);
    v4[a3[7]] = a2[a3[7]];
  }
  return v4;
}

uint64_t sub_1000DE714(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v7)(uint64_t, uint64_t);

  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_100008B04(&qword_10149A1F0);
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v7(v4, v5);
  return ((uint64_t (*)(uint64_t, uint64_t))v7)(a1 + *(int *)(a2 + 24), v5);
}

char *sub_1000DE788(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_100008B04(&qword_10149A1F0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  v10(&a1[a3[6]], &a2[a3[6]], v9);
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

char *sub_1000DE824(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_100008B04(&qword_10149A1F0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  v10(&a1[a3[6]], &a2[a3[6]], v9);
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

char *sub_1000DE8C0(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_100008B04(&qword_10149A1F0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v10(&a1[a3[6]], &a2[a3[6]], v9);
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

char *sub_1000DE95C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_100008B04(&qword_10149A1F0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40);
  v10(v7, v8, v9);
  v10(&a1[a3[6]], &a2[a3[6]], v9);
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

uint64_t sub_1000DE9F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000DEA04);
}

uint64_t sub_1000DEA04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = sub_100008B04(&qword_10149A1F0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_1000DEA98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000DEAA4);
}

uint64_t sub_1000DEAA4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100008B04(&qword_10149A1F0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 28)) = a2 + 1;
  return result;
}

void sub_1000DEB24(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v4 = (char *)&value witness table for Builtin.Int64 + 64;
  sub_1000DEBA8(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(v2 - 8) + 64;
    v6 = v5;
    v7 = &unk_100E2B5D8;
    swift_initStructMetadata(a1, 256, 4, &v4, a1 + 16);
  }
}

void sub_1000DEBA8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10149A378)
  {
    v2 = sub_10000E4BC(255, (unint64_t *)&qword_10149A210, NSUnitLength_ptr);
    v3 = type metadata accessor for Measurement(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10149A378);
  }
}

uint64_t *sub_1000DEC0C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  id v41;
  id v42;
  id v43;
  uint64_t v44;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v44 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v44 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v7 = a2[2];
    v8 = a2[3];
    v4[2] = v7;
    v4[3] = v8;
    v10 = (void *)a2[4];
    v9 = a2[5];
    v4[4] = (uint64_t)v10;
    v4[5] = v9;
    v11 = (void *)a2[6];
    v12 = a3[11];
    v13 = (char *)v4 + v12;
    v14 = (char *)a2 + v12;
    v4[6] = (uint64_t)v11;
    swift_bridgeObjectRetain(v7);
    v15 = v10;
    v16 = v11;
    v17 = sub_100008B04(&qword_10149A1F0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v13, v14, v17);
    v18 = a3[12];
    v19 = a3[13];
    v20 = (uint64_t *)((char *)v4 + v18);
    v21 = (uint64_t *)((char *)a2 + v18);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    v23 = (uint64_t *)((char *)v4 + v19);
    v24 = (uint64_t *)((char *)a2 + v19);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    v26 = a3[14];
    v27 = a3[15];
    v28 = *(void **)((char *)a2 + v26);
    *(uint64_t *)((char *)v4 + v26) = (uint64_t)v28;
    v29 = (char *)v4 + v27;
    v30 = (char *)a2 + v27;
    *(_OWORD *)v29 = *(_OWORD *)v30;
    v29[16] = v30[16];
    v31 = a3[16];
    v32 = a3[17];
    v33 = (uint64_t *)((char *)v4 + v31);
    v34 = (uint64_t *)((char *)a2 + v31);
    v35 = v34[1];
    *v33 = *v34;
    v33[1] = v35;
    v36 = *(uint64_t *)((char *)a2 + v32);
    *(uint64_t *)((char *)v4 + v32) = v36;
    v37 = a3[18];
    v38 = a3[19];
    v39 = *(void **)((char *)a2 + v37);
    *(uint64_t *)((char *)v4 + v37) = (uint64_t)v39;
    v40 = *(void **)((char *)a2 + v38);
    *(uint64_t *)((char *)v4 + v38) = (uint64_t)v40;
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v25);
    v41 = v28;
    swift_retain();
    swift_bridgeObjectRetain(v36);
    v42 = v39;
    v43 = v40;
  }
  return v4;
}

void sub_1000DED74(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));

  v4 = a1 + a2[11];
  v5 = sub_100008B04(&qword_10149A1F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[13] + 8));

  swift_release();
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[17]));

}

uint64_t sub_1000DEE38(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  id v40;
  id v41;
  id v42;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v9 = *(void **)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v8;
  v10 = *(void **)(a2 + 48);
  v11 = a3[11];
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v6);
  v14 = v9;
  v15 = v10;
  v16 = sub_100008B04(&qword_10149A1F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v12, v13, v16);
  v17 = a3[12];
  v18 = a3[13];
  v19 = (_QWORD *)(a1 + v17);
  v20 = (_QWORD *)(a2 + v17);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  v22 = (_QWORD *)(a1 + v18);
  v23 = (_QWORD *)(a2 + v18);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  v25 = a3[14];
  v26 = a3[15];
  v27 = *(void **)(a2 + v25);
  *(_QWORD *)(a1 + v25) = v27;
  v28 = a1 + v26;
  v29 = a2 + v26;
  *(_OWORD *)v28 = *(_OWORD *)v29;
  *(_BYTE *)(v28 + 16) = *(_BYTE *)(v29 + 16);
  v30 = a3[16];
  v31 = a3[17];
  v32 = (_QWORD *)(a1 + v30);
  v33 = (_QWORD *)(a2 + v30);
  v34 = v33[1];
  *v32 = *v33;
  v32[1] = v34;
  v35 = *(_QWORD *)(a2 + v31);
  *(_QWORD *)(a1 + v31) = v35;
  v36 = a3[18];
  v37 = a3[19];
  v38 = *(void **)(a2 + v36);
  *(_QWORD *)(a1 + v36) = v38;
  v39 = *(void **)(a2 + v37);
  *(_QWORD *)(a1 + v37) = v39;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v24);
  v40 = v27;
  swift_retain();
  swift_bridgeObjectRetain(v35);
  v41 = v38;
  v42 = v39;
  return a1;
}

_QWORD *sub_1000DEF74(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  id v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  id v46;
  uint64_t v47;
  void *v48;
  void *v49;
  id v50;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[3] = a2[3];
  v8 = (void *)a2[4];
  v9 = (void *)a1[4];
  a1[4] = v8;
  v10 = v8;

  a1[5] = a2[5];
  v11 = (void *)a2[6];
  v12 = (void *)a1[6];
  a1[6] = v11;
  v13 = v11;

  v14 = a3[11];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = sub_100008B04(&qword_10149A1F0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  v18 = a3[12];
  v19 = (_QWORD *)((char *)a1 + v18);
  v20 = (_QWORD *)((char *)a2 + v18);
  *v19 = *v20;
  v21 = v20[1];
  v22 = v19[1];
  v19[1] = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  v23 = a3[13];
  v24 = (_QWORD *)((char *)a1 + v23);
  v25 = (_QWORD *)((char *)a2 + v23);
  *v24 = *v25;
  v26 = v25[1];
  v27 = v24[1];
  v24[1] = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  v28 = a3[14];
  v29 = *(void **)((char *)a2 + v28);
  v30 = *(void **)((char *)a1 + v28);
  *(_QWORD *)((char *)a1 + v28) = v29;
  v31 = v29;

  v32 = a3[15];
  v33 = (char *)a1 + v32;
  v34 = (char *)a2 + v32;
  v35 = v34[16];
  *(_OWORD *)v33 = *(_OWORD *)v34;
  v33[16] = v35;
  v36 = a3[16];
  v37 = (_QWORD *)((char *)a1 + v36);
  v38 = (_QWORD *)((char *)a2 + v36);
  v39 = v38[1];
  *v37 = *v38;
  v37[1] = v39;
  swift_retain();
  swift_release();
  v40 = a3[17];
  v41 = *(_QWORD *)((char *)a2 + v40);
  v42 = *(_QWORD *)((char *)a1 + v40);
  *(_QWORD *)((char *)a1 + v40) = v41;
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRelease(v42);
  v43 = a3[18];
  v44 = *(void **)((char *)a2 + v43);
  v45 = *(void **)((char *)a1 + v43);
  *(_QWORD *)((char *)a1 + v43) = v44;
  v46 = v44;

  v47 = a3[19];
  v48 = *(void **)((char *)a2 + v47);
  v49 = *(void **)((char *)a1 + v47);
  *(_QWORD *)((char *)a1 + v47) = v48;
  v50 = v48;

  return a1;
}

uint64_t sub_1000DF138(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v7 = a3[11];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_100008B04(&qword_10149A1F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[13];
  *(_OWORD *)(a1 + a3[12]) = *(_OWORD *)(a2 + a3[12]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  v12 = a3[15];
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  v13 = a1 + v12;
  v14 = a2 + v12;
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *(_BYTE *)(v13 + 16) = *(_BYTE *)(v14 + 16);
  v15 = a3[17];
  *(_OWORD *)(a1 + a3[16]) = *(_OWORD *)(a2 + a3[16]);
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  v16 = a3[19];
  *(_QWORD *)(a1 + a3[18]) = *(_QWORD *)(a2 + a3[18]);
  *(_QWORD *)(a1 + v16) = *(_QWORD *)(a2 + v16);
  return a1;
}

uint64_t sub_1000DF218(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v6);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v7 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);

  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v8 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);

  v9 = a3[11];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = sub_100008B04(&qword_10149A1F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  v13 = a3[12];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  v18 = v14[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  v19 = a3[13];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (uint64_t *)(a2 + v19);
  v23 = *v21;
  v22 = v21[1];
  v24 = v20[1];
  *v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease(v24);
  v25 = a3[14];
  v26 = *(void **)(a1 + v25);
  *(_QWORD *)(a1 + v25) = *(_QWORD *)(a2 + v25);

  v27 = a3[15];
  v28 = a3[16];
  v29 = a1 + v27;
  v30 = a2 + v27;
  *(_OWORD *)v29 = *(_OWORD *)v30;
  *(_BYTE *)(v29 + 16) = *(_BYTE *)(v30 + 16);
  *(_OWORD *)(a1 + v28) = *(_OWORD *)(a2 + v28);
  swift_release();
  v31 = a3[17];
  v32 = *(_QWORD *)(a1 + v31);
  *(_QWORD *)(a1 + v31) = *(_QWORD *)(a2 + v31);
  swift_bridgeObjectRelease(v32);
  v33 = a3[18];
  v34 = *(void **)(a1 + v33);
  *(_QWORD *)(a1 + v33) = *(_QWORD *)(a2 + v33);

  v35 = a3[19];
  v36 = *(void **)(a1 + v35);
  *(_QWORD *)(a1 + v35) = *(_QWORD *)(a2 + v35);

  return a1;
}

uint64_t sub_1000DF380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000DF38C);
}

uint64_t sub_1000DF38C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100008B04(&qword_10149A1F0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 44), a2, v8);
  }
}

uint64_t sub_1000DF40C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000DF418);
}

uint64_t sub_1000DF418(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = sub_100008B04(&qword_10149A1F0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 44), a2, a2, v7);
  }
  return result;
}

void sub_1000DF490(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[16];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_1000DEBA8(319);
  if (v3 <= 0x3F)
  {
    v4[7] = *(_QWORD *)(v2 - 8) + 64;
    v4[8] = &unk_100E2B610;
    v4[9] = &unk_100E2B610;
    v4[10] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[11] = &unk_100E2B628;
    v4[12] = (char *)&value witness table for () + 64;
    v4[13] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[14] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[15] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_initStructMetadata(a1, 256, 16, v4, a1 + 16);
  }
}

void *sub_1000DF560()
{
  return &protocol witness table for Int;
}

uint64_t sub_1000DF56C@<X0>(double *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1000D8350(a1, *(_QWORD *)(v2 + 16), a2);
}

unint64_t sub_1000DF588()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10149A4A8;
  if (!qword_10149A4A8)
  {
    v1 = sub_10000E5D4(&qword_10149A1F0);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for Measurement<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10149A4A8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MapsElevationChartViewModel.ElevationMark(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for MapsElevationChartViewModel.ElevationMark(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for MapsElevationChartViewModel.ElevationMark()
{
  return &type metadata for MapsElevationChartViewModel.ElevationMark;
}

uint64_t sub_1000DF684(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1000F149C(a1, a2, a3, &qword_10149A548);
}

uint64_t sub_1000DF690()
{
  uint64_t v0;

  v0 = sub_100008B04(&qword_10149A548);
  return dispatch thunk of Hashable.hashValue.getter(v0, &protocol witness table for AnyKeyPath);
}

void sub_1000DF6D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *a2;
  v3 = sub_10006C5A8();
  AttributeDynamicLookup.subscript.getter(v2, v3);
  __break(1u);
}

void sub_1000DF6F8()
{
  AttributeScopes.SwiftUIAttributes.foregroundColor.getter();
  __break(1u);
}

uint64_t sub_1000DF718@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W7>, uint64_t a7@<X8>, unsigned __int8 a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = a7;
  v28 = a3;
  v29 = a5;
  v30 = a9;
  v13 = sub_100008B04(&qword_101497918);
  __chkstk_darwin(v13);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a4;
  v27 = a6;
  v17 = v28;
  v18 = v29;
  v26 = a8;
  sub_1000E58AC(a2, a2);
  v19 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v15, 1, v19) == 1)
  {
    v21 = v31;
    sub_100010CC4((uint64_t)v15, &qword_101497918);
    v22 = *(_QWORD *)(a2 + 128);
    if (v22)
    {
      v23 = swift_retain();
      sub_1000DF718(a1, v22, v17, v16, v18, 0, 1, v27 & 1, v23, v26 & 1, 0, 0, 0);
      return swift_release();
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(v21, 1, 1, v19);
    }
  }
  else
  {
    v25 = v31;
    sub_10003F29C((uint64_t)v15, v31, type metadata accessor for PlaceSummaryViewModelUnit);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56))(v25, 0, 1, v19);
  }
}

unint64_t sub_1000DF900(void *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char **v24;
  char v25;
  id v26;
  id v27;
  void *v28;
  char **v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  void *v41;
  char *v42;
  uint64_t v43;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  char *v77;
  uint64_t v78;
  uint64_t KeyPath;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;

  v6 = sub_100008B04((uint64_t *)&unk_10149A660);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v97 = (char *)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PlaceSummaryImageViewModel.ImageType(0);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_100008B04((uint64_t *)&unk_101499B30);
  __chkstk_darwin(v12);
  v14 = (char *)&v88 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v96 = (uint64_t)&v88 - v16;
  v17 = type metadata accessor for URL(0);
  __chkstk_darwin(v17);
  v99 = (char *)&v88 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  if (!a2)
    return 0xF000000000000007;
  v93 = v7;
  v22 = *(_QWORD *)(a2 + 16);
  if (!v22)
    return 0xF000000000000007;
  v88 = (char *)&v88 - v20;
  v89 = v6;
  v98 = v21;
  v92 = a3;
  v90 = v9;
  v91 = v11;
  swift_bridgeObjectRetain(a2);
  v23 = 0;
  v24 = &selRef__deleteSharedTripWithSummary_atIndexPath_completion_;
  v94 = a2;
  v95 = v22;
  while (2)
  {
    v25 = *(_BYTE *)(a2 + v23 + 32);
    switch(v25)
    {
      case 2:
        swift_bridgeObjectRelease(a2);
        v51 = v96;
        sub_1000F1D98(a1, v96);
        v52 = v98;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v98 + 48))(v51, 1, v17) == 1)
        {
          sub_100010CC4(v51, (uint64_t *)&unk_101499B30);
          v53 = objc_msgSend(objc_allocWithZone((Class)MapsUIImageGEOFeatureSpec), "init");
          objc_msgSend(v53, "setSize:", 4);
          objc_msgSend(v53, "setTransparent:", 1);
          v54 = objc_msgSend(a1, "_styleAttributes");
          objc_msgSend(v53, "setStyle:", v54);

          v55 = sub_100008B04(&qword_101495DB0);
          v56 = swift_allocBox();
          v58 = v57;
          v59 = (char *)v57 + *(int *)(v55 + 96);
          v60 = *(int *)(v55 + 112);
          *v57 = v53;
          v57[1] = 0;
          v57[3] = 0;
          v61 = enum case for Image.TemplateRenderingMode.template(_:);
          v62 = type metadata accessor for Image.TemplateRenderingMode(0);
          (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 104))(v59, v61, v62);
          v63 = (void *)objc_opt_self(UIColor);
          v64 = v53;
          *(_QWORD *)((char *)v58 + v60) = Color.init(uiColor:)(objc_msgSend(v63, "systemGray5Color"));
          *((_BYTE *)v58 + 16) = 0;
          v65 = v90;
          v66 = (uint64_t)v91;
          *v91 = v56;
          swift_storeEnumTagMultiPayload(v66, v65, 2);
          v67 = type metadata accessor for PlaceSummaryImageViewModel(0);
          v81 = swift_allocObject(v67, *(unsigned int *)(v67 + 48), *(unsigned __int16 *)(v67 + 52));
          v100 = 0;
          v68 = sub_100008B04((uint64_t *)&unk_101497210);
          v69 = Published.init(initialValue:)(&v100, v68);
          UUID.init()(v69);
          sub_10003F29C(v66, v81 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_type, type metadata accessor for PlaceSummaryImageViewModel.ImageType);

          v70 = v81 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_cornerRadius;
          *(_QWORD *)v70 = 0;
          *(_BYTE *)(v70 + 8) = 1;
        }
        else
        {
          v82 = v88;
          (*(void (**)(char *, uint64_t, uint64_t))(v52 + 32))(v88, v51, v17);
          v83 = (uint64_t)v91;
          (*(void (**)(uint64_t *, char *, uint64_t))(v52 + 16))(v91, v82, v17);
          swift_storeEnumTagMultiPayload(v83, v90, 0);
          v84 = type metadata accessor for PlaceSummaryImageViewModel(0);
          v81 = swift_allocObject(v84, *(unsigned int *)(v84 + 48), *(unsigned __int16 *)(v84 + 52));
          v100 = 0;
          v85 = sub_100008B04((uint64_t *)&unk_101497210);
          v86 = Published.init(initialValue:)(&v100, v85);
          UUID.init()(v86);
          sub_10003F29C(v83, v81 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_type, type metadata accessor for PlaceSummaryImageViewModel.ImageType);
          v87 = v81 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_cornerRadius;
          *(_QWORD *)v87 = 0;
          *(_BYTE *)(v87 + 8) = 1;
          (*(void (**)(char *, uint64_t))(v52 + 8))(v82, v17);
        }
        return v81;
      case 3:
        v26 = objc_msgSend(a1, v24[447]);

        if (!v26)
          goto LABEL_5;
        swift_bridgeObjectRelease(a2);
        return 0x8000000000000000;
      case 4:
        if (!objc_msgSend(a1, "_hasLookAroundStorefront"))
          goto LABEL_5;
        v81 = 0x8000000000000008;
        swift_bridgeObjectRelease(a2);
        return v81;
      case 5:
        v27 = objc_msgSend(a1, "phoneNumber");
        if (!v27)
          goto LABEL_5;
        v28 = v27;
        v29 = v24;
        v30 = v17;
        v31 = a1;
        v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
        v33 = v14;
        v34 = v6;
        v36 = v35;

        v37 = v32;
        a1 = v31;
        v17 = v30;
        v24 = v29;
        v38 = String.count.getter(v37, v36);
        v39 = v36;
        v6 = v34;
        v14 = v33;
        a2 = v94;
        v22 = v95;
        swift_bridgeObjectRelease(v39);
        if (v38 <= 0)
          goto LABEL_5;
        swift_bridgeObjectRelease(a2);
        return 0x8000000000000010;
      case 6:
        v40 = objc_msgSend(a1, "url");
        if (!v40)
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v98 + 56))(v14, 1, 1, v17);
          goto LABEL_16;
        }
        v41 = v40;
        v42 = v99;
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v40);

        v43 = v98;
        (*(void (**)(char *, char *, uint64_t))(v98 + 32))(v14, v42, v17);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v14, 0, 1, v17);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v14, 1, v17) == 1)
        {
LABEL_16:
          sub_100010CC4((uint64_t)v14, (uint64_t *)&unk_101499B30);
          goto LABEL_5;
        }
        sub_100010CC4((uint64_t)v14, (uint64_t *)&unk_101499B30);
        swift_bridgeObjectRelease(a2);
        return 0x8000000000000018;
      case 7:
LABEL_5:
        if (v22 != ++v23)
          continue;
        swift_bridgeObjectRelease(a2);
        return 0xF000000000000007;
      case 8:
        swift_bridgeObjectRelease(a2);
        v71 = objc_msgSend(a1, "_detourInfo");

        v72 = (v71 != 0) | ~(_BYTE)v92;
        v73 = type metadata accessor for AccessoryButtonViewModel(0);
        v74 = swift_allocObject(v73, *(unsigned int *)(v73 + 48), *(unsigned __int16 *)(v73 + 52));
        v75 = v74 + OBJC_IVAR____TtC4Maps24AccessoryButtonViewModel__isDriveable;
        LOBYTE(v100) = 1;
        v76 = a1;
        v77 = v97;
        Published.init(initialValue:)(&v100, &type metadata for Bool);
        v78 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v93 + 32))(v75, v77, v89);
        UUID.init()(v78);
        *(_QWORD *)(v74 + OBJC_IVAR____TtC4Maps24AccessoryButtonViewModel_mapItem) = v76;
        KeyPath = swift_getKeyPath(&unk_100E2B8D0);
        v80 = swift_getKeyPath(&unk_100E2B8F8);
        LOBYTE(v100) = v72 & 1;
        swift_retain();
        static Published.subscript.setter(&v100, v74, KeyPath, v80);
        return v74 | 0x4000000000000000;
      case 9:
        swift_bridgeObjectRelease(a2);
        v47 = type metadata accessor for HikeRouteSnapshotViewModel(0);
        v48 = swift_allocObject(v47, *(unsigned int *)(v47 + 48), *(unsigned __int16 *)(v47 + 52));
        v100 = 0;
        v49 = a1;
        v50 = sub_100008B04((uint64_t *)&unk_101497210);
        Published.init(initialValue:)(&v100, v50);
        LOBYTE(v100) = 1;
        Published.init(initialValue:)(&v100, &type metadata for Bool);
        *(_QWORD *)(v48 + OBJC_IVAR____TtC4Maps26HikeRouteSnapshotViewModel_mapItem) = v49;
        return v48 | 0x6000000000000000;
      default:
        swift_bridgeObjectRelease(a2);
        v45 = type metadata accessor for DirectionsETAModel(0);
        swift_allocObject(v45, *(unsigned int *)(v45 + 48), *(unsigned __int16 *)(v45 + 52));
        v46 = a1;
        return sub_1000876B8(v25 & 1, (uint64_t)v46, v92 & 1) | 0x2000000000000000;
    }
  }
}

id sub_1000E0218(void *a1, char *a2, uint64_t a3, int a4, uint64_t a5)
{
  id v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  id result;
  void *v28;
  id v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t KeyPath;
  uint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  int v96;
  int v97;
  uint64_t v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  _QWORD v109[5];

  v105 = a3;
  v106 = a5;
  v9 = sub_100008B04(&qword_101497918);
  __chkstk_darwin(v9);
  v11 = (char *)&v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  v12 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104);
  v103 = (uint64_t)&v85 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v100 = (uint64_t)&v85 - v15;
  v16 = sub_100008B04((uint64_t *)&unk_10149A500);
  __chkstk_darwin(v16);
  v18 = (char *)&v85 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for PlaceSummaryViewModelLine(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v95 = (uint64_t)&v85 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v88 = (uint64_t)&v85 - v23;
  v107 = a4;
  v87 = sub_100146AE0(a1, a2, a4);
  if (!v87)
    return 0;
  v24 = objc_msgSend(a1, "mapItem");
  if (!v24)
  {

    return 0;
  }
  v25 = a1;
  v26 = v24;
  v101 = (uint64_t)v25;
  v102 = a2;
  result = objc_msgSend(v25, "mapItem");
  if (result)
  {
    v28 = result;
    v29 = objc_msgSend(result, "_geoMapItem");

    if (v29)
    {
      v30 = objc_msgSend(v29, "_identifier");
      swift_unknownObjectRelease(v29);
      v31 = v102;
      if (v102)
      {
LABEL_6:
        v32 = *(_QWORD *)&v31[OBJC_IVAR____TtC4Maps20PlaceSummaryMetadata_serverOverrides];
        swift_bridgeObjectRetain(v32);
LABEL_10:
        v33 = sub_1000F4CA8(v30, v32);
        swift_bridgeObjectRelease(v32);

        v34 = *(_QWORD *)&v87[OBJC_IVAR____TtC4Maps25PlaceSummaryTemplateEntry_lines];
        v35 = *(_QWORD *)(v34 + 16);
        v99 = v26;
        v92 = v20;
        v93 = v19;
        v91 = v35;
        if (v35)
        {
          v90 = v34 + 32;
          v86 = v34;
          swift_bridgeObjectRetain_n(v34, 2);
          v36 = 0;
          v94 = _swiftEmptyArrayStorage;
          v89 = v18;
          v108 = (uint64_t)v33;
          while (1)
          {
            v37 = v90 + 16 * v36;
            v38 = *(_QWORD *)v37;
            v39 = (char *)*(unsigned __int8 *)(v37 + 8);
            v40 = *(unsigned __int8 *)(v37 + 9);
            if (*(_QWORD *)v37 >> 62)
            {
              if (v38 < 0)
                v30 = *(_QWORD **)v37;
              else
                v30 = (_QWORD *)(v38 & 0xFFFFFFFFFFFFFF8);
              swift_bridgeObjectRetain_n(v38, 3);
              v41 = _CocoaArrayWrapper.endIndex.getter(v30);
            }
            else
            {
              v41 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain_n(v38, 3);
            }
            v96 = (int)v39;
            v97 = v40;
            v98 = v36;
            if (v41)
            {
              if (v41 < 1)
              {
                __break(1u);
                goto LABEL_70;
              }
              v42 = 0;
              v43 = _swiftEmptyArrayStorage;
              do
              {
                if ((v38 & 0xC000000000000001) != 0)
                {
                  v44 = specialized _ArrayBuffer._getElementSlowPath(_:)(v42, v38);
                }
                else
                {
                  v44 = *(_QWORD *)(v38 + 8 * v42 + 32);
                  swift_retain();
                }
                sub_1000DF718((uint64_t)v26, v44, v105, v108, 0, 0, (uint64_t)v11, v107 & 1, v101);
                swift_release();
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v104) == 1)
                {
                  sub_100010CC4((uint64_t)v11, &qword_101497918);
                }
                else
                {
                  v45 = v100;
                  sub_10003F29C((uint64_t)v11, v100, type metadata accessor for PlaceSummaryViewModelUnit);
                  sub_10003F29C(v45, v103, type metadata accessor for PlaceSummaryViewModelUnit);
                  if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
                    v43 = (_QWORD *)sub_1000A7E94(0, v43[2] + 1, 1, (unint64_t)v43);
                  v47 = v43[2];
                  v46 = v43[3];
                  if (v47 >= v46 >> 1)
                    v43 = (_QWORD *)sub_1000A7E94(v46 > 1, v47 + 1, 1, (unint64_t)v43);
                  v43[2] = v47 + 1;
                  sub_10003F29C(v103, (uint64_t)v43+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(_QWORD *)(v12 + 72) * v47, type metadata accessor for PlaceSummaryViewModelUnit);
                  v26 = v99;
                }
                ++v42;
              }
              while (v41 != v42);
            }
            else
            {
              v43 = _swiftEmptyArrayStorage;
            }
            swift_bridgeObjectRelease_n(v38, 2);
            v48 = v97;
            v30 = sub_1000F33E0((uint64_t)v43, v97);
            v49 = swift_bridgeObjectRelease(v43);
            if (v30[2])
            {
              v50 = (uint64_t)v89;
              UUID.init()(v49);
              v51 = v93;
              *(_QWORD *)(v50 + *(int *)(v93 + 20)) = v30;
              *(_BYTE *)(v50 + *(int *)(v51 + 24)) = v96;
              *(_BYTE *)(v50 + *(int *)(v51 + 28)) = v48;
              v52 = v92;
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v92 + 56))(v50, 0, 1, v51);
              v53 = (_QWORD *)v38;
            }
            else
            {
              v52 = v92;
              v51 = v93;
              v50 = (uint64_t)v89;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v92 + 56))(v89, 1, 1, v93);
              swift_bridgeObjectRelease(v38);
              v53 = v30;
            }
            swift_bridgeObjectRelease(v53);
            v54 = v108;
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51) == 1)
            {
              sub_100010CC4(v50, (uint64_t *)&unk_10149A500);
            }
            else
            {
              v55 = v88;
              sub_10003F29C(v50, v88, type metadata accessor for PlaceSummaryViewModelLine);
              sub_10003F29C(v55, v95, type metadata accessor for PlaceSummaryViewModelLine);
              v56 = (unint64_t)v94;
              if ((swift_isUniquelyReferenced_nonNull_native(v94) & 1) == 0)
                v56 = sub_1000A8AC8(0, *(_QWORD *)(v56 + 16) + 1, 1, v56);
              v58 = *(_QWORD *)(v56 + 16);
              v57 = *(_QWORD *)(v56 + 24);
              v30 = (_QWORD *)(v58 + 1);
              if (v58 >= v57 >> 1)
                v56 = sub_1000A8AC8(v57 > 1, v58 + 1, 1, v56);
              *(_QWORD *)(v56 + 16) = v30;
              v59 = (*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
              v94 = (_QWORD *)v56;
              sub_10003F29C(v95, v56 + v59 + *(_QWORD *)(v52 + 72) * v58, type metadata accessor for PlaceSummaryViewModelLine);
            }
            v36 = v98 + 1;
            if (v98 + 1 == v91)
            {
              swift_bridgeObjectRelease_n(v86, 2);
              swift_bridgeObjectRelease(v54);
              v60 = v94;
              goto LABEL_46;
            }
          }
        }
        swift_bridgeObjectRelease(v33);
        v60 = _swiftEmptyArrayStorage;
LABEL_46:
        v39 = v87;
        if (v60[2])
        {
          v61 = *(_QWORD *)&v87[OBJC_IVAR____TtC4Maps25PlaceSummaryTemplateEntry_trailingEntities];
          swift_bridgeObjectRetain(v61);
          v30 = (_QWORD *)sub_1000DF900(v26, v61, v107 & 1);
          swift_bridgeObjectRelease(v61);
          v62 = sub_10001FFF4((unint64_t)v30);
          v63 = static Color.clear.getter(v62);
          v64 = objc_allocWithZone((Class)type metadata accessor for PlaceSummaryViewModelTemplate(0));
          v5 = sub_100085B5C((unint64_t)v60, 0xF000000000000007, (unint64_t)v30, 0, 0, 0, 2, 0, v63, 0);
          if (v5)
          {
            KeyPath = swift_getKeyPath(&unk_100E2B728);
            v66 = swift_getKeyPath(&unk_100E2B750);
            static Published.subscript.getter(v109, v5, KeyPath, v66);
            swift_release();
            swift_release();
            v67 = *(_QWORD *)(v109[0] + 16);
            swift_bridgeObjectRelease(v109[0]);
            if (v67 >= 3)
              v41 = 3;
            else
              v41 = v67;
            v68 = sub_1000863C4(0);
            v69 = v68[2];
            swift_bridgeObjectRelease(v68);
            if (v69 >= v41
              || (v70 = swift_getKeyPath(&unk_100E2B728),
                  v71 = swift_getKeyPath(&unk_100E2B750),
                  static Published.subscript.getter(v109, v5, v70, v71),
                  swift_release(),
                  swift_release(),
                  v72 = *(_QWORD *)(v109[0] + 16),
                  swift_bridgeObjectRelease(v109[0]),
                  v69 >= v72))
            {

              sub_1000200AC((unint64_t)v30);
            }
            else
            {
              v73 = swift_getKeyPath(&unk_100E2B728);
              v74 = swift_getKeyPath(&unk_100E2B750);
              v26 = (id)static Published.subscript.modify(v109, v5, v73, v74);
              v38 = (uint64_t)v75;
              v40 = *v75;
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v75);
              *(_QWORD *)v38 = v40;
              if ((isUniquelyReferenced_nonNull_native & 1) != 0)
              {
                if (!*(_QWORD *)(v40 + 16))
                  goto LABEL_71;
              }
              else
              {
LABEL_70:
                v40 = sub_10020D8E4(v40);
                *(_QWORD *)v38 = v40;
                if (!*(_QWORD *)(v40 + 16))
                  goto LABEL_71;
              }
              *(_BYTE *)(v40
                       + ((*(unsigned __int8 *)(v92 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80))
                       + *(int *)(v93 + 24)) = 0;
              ((void (*)(_QWORD *, _QWORD))v26)(v109, 0);
              swift_release();
              swift_release();
              if (v41 != 1)
              {
                v77 = swift_getKeyPath(&unk_100E2B728);
                v78 = swift_getKeyPath(&unk_100E2B750);
                v26 = (id)static Published.subscript.modify(v109, v5, v77, v78);
                v38 = (uint64_t)v79;
                v40 = *v79;
                v80 = swift_isUniquelyReferenced_nonNull_native(*v79);
                *(_QWORD *)v38 = v40;
                if ((v80 & 1) == 0)
                  goto LABEL_72;
                while (1)
                {
                  if (*(_QWORD *)(v40 + 16) >= 2uLL)
                  {
                    *(_BYTE *)(v40
                             + ((*(unsigned __int8 *)(v92 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80))
                             + *(_QWORD *)(v92 + 72)
                             + *(int *)(v93 + 24)) = 0;
                    ((void (*)(_QWORD *, _QWORD))v26)(v109, 0);
                    swift_release();
                    swift_release();
                    if (v41 == 2)
                      goto LABEL_63;
                    v81 = swift_getKeyPath(&unk_100E2B728);
                    v82 = swift_getKeyPath(&unk_100E2B750);
                    v26 = (id)static Published.subscript.modify(v109, v5, v81, v82);
                    v38 = (uint64_t)v83;
                    v40 = *v83;
                    v84 = swift_isUniquelyReferenced_nonNull_native(*v83);
                    *(_QWORD *)v38 = v40;
                    if ((v84 & 1) == 0)
                    {
                      v40 = sub_10020D8E4(v40);
                      *(_QWORD *)v38 = v40;
                    }
                    if (*(_QWORD *)(v40 + 16) >= 3uLL)
                      break;
                  }
LABEL_71:
                  __break(1u);
LABEL_72:
                  v40 = sub_10020D8E4(v40);
                  *(_QWORD *)v38 = v40;
                }
                *(_BYTE *)(v40
                         + ((*(unsigned __int8 *)(v92 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80))
                         + 2 * *(_QWORD *)(v92 + 72)
                         + *(int *)(v93 + 24)) = 0;
                ((void (*)(_QWORD *, _QWORD))v26)(v109, 0);
                swift_release();
                swift_release();
              }
LABEL_63:

              sub_1000200AC((unint64_t)v30);
            }
          }
          else
          {
            sub_1000200AC((unint64_t)v30);

          }
          return v5;
        }

        swift_bridgeObjectRelease(v60);
        return 0;
      }
    }
    else
    {
      v30 = 0;
      v31 = v102;
      if (v102)
        goto LABEL_6;
    }
    v32 = 0;
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000E0DA0(void *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, int a8, double a9)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char v48;
  _QWORD *v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  __n128 v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  _UNKNOWN **v63;
  char *v64;
  unsigned __int8 *v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  int v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  _QWORD *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;

  v99 = a6;
  v97 = a4;
  v98 = a5;
  v96 = a3;
  v14 = sub_100008B04(&qword_101497918);
  __chkstk_darwin(v14);
  v16 = (char *)&v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  v17 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95);
  v94 = (uint64_t)&v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v91 = (uint64_t)&v77 - v20;
  v21 = sub_100008B04((uint64_t *)&unk_10149A500);
  __chkstk_darwin(v21);
  v23 = (char *)&v77 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for PlaceSummaryViewModelLine(0);
  v86 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v85 = (uint64_t)&v77 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v80 = (uint64_t)&v77 - v27;
  v79 = sub_100147AC0(a1, a2);
  if (!v79)
    return 0;
  v78 = a8;
  v100 = a1;
  v28 = sub_1000C3B4C();
  v92 = a2;
  if (a2)
  {
    v29 = *(_QWORD *)&a2[OBJC_IVAR____TtC4Maps20PlaceSummaryMetadata_serverOverrides];
    swift_bridgeObjectRetain(v29);
  }
  else
  {
    v29 = 0;
  }
  v31 = sub_1000F4CA8(v28, v29);
  swift_bridgeObjectRelease(v29);

  v32 = *(_QWORD *)&v79[OBJC_IVAR____TtC4Maps25PlaceSummaryTemplateEntry_lines];
  v84 = *(_QWORD *)(v32 + 16);
  if (!v84)
  {
    swift_bridgeObjectRelease(v31);
    v34 = _swiftEmptyArrayStorage;
LABEL_42:
    v61 = v100;
    if (v34[2])
    {
      v62 = *(_QWORD *)&v79[OBJC_IVAR____TtC4Maps25PlaceSummaryTemplateEntry_leadingEntities];
      if (v62)
        v63 = *(_UNKNOWN ***)&v79[OBJC_IVAR____TtC4Maps25PlaceSummaryTemplateEntry_leadingEntities];
      else
        v63 = &off_10119A548;
      v64 = (char *)v63[2];
      if (v64)
      {
        v65 = (unsigned __int8 *)(v63 + 4);
        while (1)
        {
          v66 = *v65++;
          if (v66 == 2)
            break;
          if (!--v64)
            goto LABEL_50;
        }
        swift_bridgeObjectRetain(v62);
        v67 = sub_1000F5498(v61);
      }
      else
      {
LABEL_50:
        swift_bridgeObjectRetain(v62);
        v67 = 0xF000000000000007;
      }
      if (objc_msgSend(v61, "hasQueryAcceleratorAffordanceEnabled", swift_bridgeObjectRelease(v63).n128_f64[0]))v68 = 0x8000000000000020;
      else
        v68 = 0xF000000000000007;
      sub_1000F6824(v61, a9);
      v70 = v69;
      v72 = v71;
      sub_1000F6BA4(v61);
      v74 = v73;
      v75 = static Color.clear.getter(v73);
      v76 = objc_allocWithZone((Class)type metadata accessor for PlaceSummaryViewModelTemplate(0));
      v30 = sub_100085B5C((unint64_t)v34, v67, v68, v70, v72, v74, 1, 0, v75, v78 & 1);

    }
    else
    {

      swift_bridgeObjectRelease(v34);
      return 0;
    }
    return (uint64_t)v30;
  }
  v93 = (uint64_t)v31;
  v83 = v32 + 32;
  v77 = v32;
  swift_bridgeObjectRetain_n(v32, 2);
  v33 = 0;
  v34 = _swiftEmptyArrayStorage;
  v35 = a7 & 1;
  v82 = v23;
  v81 = v24;
  while (1)
  {
    v36 = v83 + 16 * v33;
    v37 = *(_QWORD *)v36;
    v38 = *(unsigned __int8 *)(v36 + 8);
    v39 = *(unsigned __int8 *)(v36 + 9);
    if (*(_QWORD *)v36 >> 62)
    {
      v60 = v37 < 0 ? *(_QWORD *)v36 : v37 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(v37, 3);
      result = _CocoaArrayWrapper.endIndex.getter(v60);
      v40 = result;
    }
    else
    {
      v40 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain_n(v37, 3);
    }
    v88 = v34;
    v90 = v33;
    v89 = v39;
    v87 = v38;
    if (v40)
      break;
    v43 = _swiftEmptyArrayStorage;
LABEL_27:
    swift_bridgeObjectRelease_n(v37, 2);
    v48 = v89;
    v49 = sub_1000F33E0((uint64_t)v43, v89);
    v51 = swift_bridgeObjectRelease(v43);
    if (v49[2])
    {
      v52 = (uint64_t)v82;
      UUID.init()(v50);
      v53 = v81;
      *(_QWORD *)(v52 + *(int *)(v81 + 20)) = v49;
      *(_BYTE *)(v52 + *(int *)(v53 + 24)) = v87;
      *(_BYTE *)(v52 + *(int *)(v53 + 28)) = v48;
      v54 = v86;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v86 + 56))(v52, 0, 1, v53);
      v55 = (_QWORD *)v37;
    }
    else
    {
      v54 = v86;
      v52 = (uint64_t)v82;
      v53 = v81;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v86 + 56))(v82, 1, 1, v81, v51);
      swift_bridgeObjectRelease(v37);
      v55 = v49;
    }
    v56 = swift_bridgeObjectRelease(v55);
    v34 = v88;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v54 + 48))(v52, 1, v53, v56) == 1)
    {
      sub_100010CC4(v52, (uint64_t *)&unk_10149A500);
    }
    else
    {
      v57 = v80;
      sub_10003F29C(v52, v80, type metadata accessor for PlaceSummaryViewModelLine);
      sub_10003F29C(v57, v85, type metadata accessor for PlaceSummaryViewModelLine);
      if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) == 0)
        v34 = (_QWORD *)sub_1000A8AC8(0, v34[2] + 1, 1, (unint64_t)v34);
      v59 = v34[2];
      v58 = v34[3];
      if (v59 >= v58 >> 1)
        v34 = (_QWORD *)sub_1000A8AC8(v58 > 1, v59 + 1, 1, (unint64_t)v34);
      v34[2] = v59 + 1;
      sub_10003F29C(v85, (uint64_t)v34+ ((*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80))+ *(_QWORD *)(v54 + 72) * v59, type metadata accessor for PlaceSummaryViewModelLine);
    }
    v33 = v90 + 1;
    if (v90 + 1 == v84)
    {
      swift_bridgeObjectRelease_n(v77, 2);
      swift_bridgeObjectRelease(v93);
      goto LABEL_42;
    }
  }
  if (v40 >= 1)
  {
    v42 = 0;
    v43 = _swiftEmptyArrayStorage;
    do
    {
      if ((v37 & 0xC000000000000001) != 0)
      {
        v44 = specialized _ArrayBuffer._getElementSlowPath(_:)(v42, v37);
      }
      else
      {
        v44 = *(_QWORD *)(v37 + 8 * v42 + 32);
        swift_retain();
      }
      sub_1000E1530(v100, v44, v96, v97, v93, v98, v99, v35, (uint64_t)v16);
      swift_release();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, v95) == 1)
      {
        sub_100010CC4((uint64_t)v16, &qword_101497918);
      }
      else
      {
        v45 = v91;
        sub_10003F29C((uint64_t)v16, v91, type metadata accessor for PlaceSummaryViewModelUnit);
        sub_10003F29C(v45, v94, type metadata accessor for PlaceSummaryViewModelUnit);
        if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
          v43 = (_QWORD *)sub_1000A7E94(0, v43[2] + 1, 1, (unint64_t)v43);
        v47 = v43[2];
        v46 = v43[3];
        if (v47 >= v46 >> 1)
          v43 = (_QWORD *)sub_1000A7E94(v46 > 1, v47 + 1, 1, (unint64_t)v43);
        v43[2] = v47 + 1;
        sub_10003F29C(v94, (uint64_t)v43+ ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))+ *(_QWORD *)(v17 + 72) * v47, type metadata accessor for PlaceSummaryViewModelUnit);
      }
      ++v42;
    }
    while (v40 != v42);
    goto LABEL_27;
  }
  __break(1u);
  return result;
}

void sub_1000E1530(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  id v28;

  v25 = a8;
  v26 = a4;
  v27 = a6;
  v24 = a3;
  v14 = sub_100008B04(&qword_101497918);
  *(_QWORD *)&v15 = __chkstk_darwin(v14).n128_u64[0];
  v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = 0;
  v18 = objc_msgSend(a1, "directionIntent", v15);

  if (v18)
  {
    v18 = objc_msgSend(objc_allocWithZone((Class)DirectionIntentCellViewModel), "initWithLocalSearchCompletion:", a1);
    v28 = v18;
  }
  sub_1000EBA88(a2, a2);
  v19 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v17, 1, v19) == 1)
  {
    sub_100010CC4((uint64_t)v17, &qword_101497918);
    v21 = *(_QWORD *)(a2 + 128);
    if (v21)
    {
      v22 = swift_retain();
      sub_1000E1530(a1, v21, v24, v26, a5, v27, a7, v25 & 1, v22, 0);
      swift_release();

    }
    else
    {

      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(a9, 1, 1, v19);
    }
  }
  else
  {

    sub_10003F29C((uint64_t)v17, a9, type metadata accessor for PlaceSummaryViewModelUnit);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56))(a9, 0, 1, v19);
  }
}

uint64_t sub_1000E1830(uint64_t a1, uint64_t a2, int a3)
{
  return sub_1000E3740(a1, a2, a3, (uint64_t (*)(__n128))sub_100147DE4, (void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_1000E184C, (uint64_t (*)(uint64_t))sub_1000F6FC0);
}

uint64_t sub_1000E184C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1000E4CC8(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_1000EDBEC, (void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_1000E184C, a4);
}

uint64_t sub_1000E18D4(void *a1, void *a2, void *a3, int a4, double a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  _QWORD *v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  unint64_t v54;
  id v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  id v64;
  id v65;
  id v66;
  id v67;
  void *v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  _QWORD *v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  void *v89;
  void *v90;

  LODWORD(v5) = a4;
  v88 = a2;
  v89 = a3;
  v90 = a1;
  v7 = sub_100008B04(&qword_101497918);
  __chkstk_darwin(v7);
  v9 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  v10 = *(_QWORD *)(v87 - 8);
  __chkstk_darwin(v87);
  v86 = (uint64_t)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v85 = (uint64_t)&v70 - v13;
  v14 = sub_100008B04((uint64_t *)&unk_10149A500);
  __chkstk_darwin(v14);
  v16 = (char *)&v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for PlaceSummaryViewModelLine(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v80 = (uint64_t)&v70 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v74 = (uint64_t)&v70 - v21;
  v22 = (char *)sub_100147F80();
  if (!v22)
    return 0;
  v23 = *(_QWORD *)&v22[OBJC_IVAR____TtC4Maps25PlaceSummaryTemplateEntry_lines];
  v79 = *(_QWORD *)(v23 + 16);
  if (v79)
  {
    v72 = v22;
    v73 = v5;
    v78 = v23 + 32;
    v71 = v23;
    swift_bridgeObjectRetain_n(v23, 2);
    v24 = 0;
    v25 = _swiftEmptyArrayStorage;
    v76 = v17;
    v77 = v16;
    v75 = v18;
    do
    {
      v26 = v78 + 16 * v24;
      v27 = *(_QWORD *)v26;
      v81 = *(unsigned __int8 *)(v26 + 8);
      v83 = *(unsigned __int8 *)(v26 + 9);
      if ((unint64_t)v27 >> 62)
      {
        if (v27 < 0)
          v49 = v27;
        else
          v49 = v27 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain_n(v27, 3);
        result = _CocoaArrayWrapper.endIndex.getter(v49);
        v28 = result;
      }
      else
      {
        v28 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
        result = swift_bridgeObjectRetain_n(v27, 3);
      }
      v82 = v25;
      v84 = v24;
      if (v28)
      {
        if (v28 < 1)
        {
          __break(1u);
          return result;
        }
        v30 = 0;
        v31 = _swiftEmptyArrayStorage;
        do
        {
          if ((v27 & 0xC000000000000001) != 0)
          {
            v32 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v30, v27);
          }
          else
          {
            v32 = *(_QWORD **)(v27 + 8 * v30 + 32);
            swift_retain();
          }
          sub_1000E2078(v90, v32, v88, v89, (uint64_t)v9);
          swift_release();
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v87) == 1)
          {
            sub_100010CC4((uint64_t)v9, &qword_101497918);
          }
          else
          {
            v33 = v85;
            sub_10003F29C((uint64_t)v9, v85, type metadata accessor for PlaceSummaryViewModelUnit);
            sub_10003F29C(v33, v86, type metadata accessor for PlaceSummaryViewModelUnit);
            if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0)
              v31 = (_QWORD *)sub_1000A7E94(0, v31[2] + 1, 1, (unint64_t)v31);
            v35 = v31[2];
            v34 = v31[3];
            if (v35 >= v34 >> 1)
              v31 = (_QWORD *)sub_1000A7E94(v34 > 1, v35 + 1, 1, (unint64_t)v31);
            v31[2] = v35 + 1;
            sub_10003F29C(v86, (uint64_t)v31+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v35, type metadata accessor for PlaceSummaryViewModelUnit);
          }
          ++v30;
        }
        while (v28 != v30);
      }
      else
      {
        v31 = _swiftEmptyArrayStorage;
      }
      swift_bridgeObjectRelease_n(v27, 2);
      v36 = v83;
      v37 = sub_1000F33E0((uint64_t)v31, v83);
      v39 = swift_bridgeObjectRelease(v31);
      if (v37[2])
      {
        v40 = (uint64_t)v77;
        UUID.init()(v38);
        v41 = v76;
        *(_QWORD *)(v40 + *(int *)(v76 + 20)) = v37;
        *(_BYTE *)(v40 + *(int *)(v41 + 24)) = v81;
        *(_BYTE *)(v40 + *(int *)(v41 + 28)) = v36;
        v42 = v75;
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v75 + 56))(v40, 0, 1, v41);
        v43 = (_QWORD *)v27;
      }
      else
      {
        v42 = v75;
        v41 = v76;
        v40 = (uint64_t)v77;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v75 + 56))(v77, 1, 1, v76, v39);
        swift_bridgeObjectRelease(v27);
        v43 = v37;
      }
      v44 = swift_bridgeObjectRelease(v43);
      v25 = v82;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v42 + 48))(v40, 1, v41, v44) == 1)
      {
        sub_100010CC4(v40, (uint64_t *)&unk_10149A500);
      }
      else
      {
        v45 = v40;
        v46 = v74;
        sub_10003F29C(v45, v74, type metadata accessor for PlaceSummaryViewModelLine);
        sub_10003F29C(v46, v80, type metadata accessor for PlaceSummaryViewModelLine);
        if ((swift_isUniquelyReferenced_nonNull_native(v25) & 1) == 0)
          v25 = (_QWORD *)sub_1000A8AC8(0, v25[2] + 1, 1, (unint64_t)v25);
        v48 = v25[2];
        v47 = v25[3];
        if (v48 >= v47 >> 1)
          v25 = (_QWORD *)sub_1000A8AC8(v47 > 1, v48 + 1, 1, (unint64_t)v25);
        v25[2] = v48 + 1;
        sub_10003F29C(v80, (uint64_t)v25+ ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80))+ *(_QWORD *)(v42 + 72) * v48, type metadata accessor for PlaceSummaryViewModelLine);
      }
      v24 = v84 + 1;
    }
    while (v84 + 1 != v79);
    swift_bridgeObjectRelease_n(v71, 2);
    LOBYTE(v5) = v73;
    v22 = v72;
    if (!v25[2])
      goto LABEL_49;
LABEL_37:
    v50 = *(_QWORD *)&v22[OBJC_IVAR____TtC4Maps25PlaceSummaryTemplateEntry_leadingEntities];
    if (v50 && (v51 = *(_QWORD *)(v50 + 16)) != 0)
    {
      v52 = 0;
      while (*(_BYTE *)(v50 + v52 + 32) != 2)
      {
        if (v51 == ++v52)
          goto LABEL_42;
      }
      v53 = v22;
      swift_bridgeObjectRetain(*(_QWORD *)&v22[OBJC_IVAR____TtC4Maps25PlaceSummaryTemplateEntry_leadingEntities]);
      v65 = objc_msgSend(v90, "geoMapItem");
      if (v65)
      {
        v66 = v65;
        v67 = objc_msgSend((id)objc_opt_self(MKMapItem), "_itemWithGeoMapItem:", v65);
        if (v67)
        {
          v68 = v67;
          v69 = v5;
          v5 = (uint64_t)objc_msgSend(v67, "_styleAttributes");
          v54 = sub_1000F4E54(v5, 1, 0);
          swift_bridgeObjectRelease(v50);
          swift_unknownObjectRelease(v66);

          LOBYTE(v5) = v69;
          goto LABEL_44;
        }
        swift_bridgeObjectRelease(v50);
        swift_unknownObjectRelease(v66);
      }
      else
      {
        swift_bridgeObjectRelease(v50);
      }
    }
    else
    {
LABEL_42:
      v53 = v22;
    }
    v54 = 0xF000000000000007;
LABEL_44:
    v55 = objc_msgSend(v90, "geoMapItem");
    v56 = (uint64_t)v55;
    if (v55)
    {
      v57 = objc_msgSend(v55, "_childItems");
      v55 = (id)swift_unknownObjectRelease(v56);
      if (v57)
      {
        v58 = sub_10000E4BC(0, &qword_10149A568, GEOMapItemChildItem_ptr);
        v59 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v57, v58);

        sub_1000F64D4(v59, a5);
        v57 = v60;
        v56 = v61;
        swift_bridgeObjectRelease(v59);
      }
      else
      {
        v56 = 0;
      }
    }
    else
    {
      v57 = 0;
    }
    v63 = static Color.clear.getter(v55);
    v64 = objc_allocWithZone((Class)type metadata accessor for PlaceSummaryViewModelTemplate(0));
    v62 = sub_100085B5C((unint64_t)v25, v54, 0xF000000000000007, (uint64_t)v57, v56, 0, 1, 0, v63, v5 & 1);

    return (uint64_t)v62;
  }
  v25 = _swiftEmptyArrayStorage;
  if (_swiftEmptyArrayStorage[2])
    goto LABEL_37;
LABEL_49:

  swift_bridgeObjectRelease(v25);
  return 0;
}

void sub_1000E2078(void *a1@<X0>, _QWORD *a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;

  v11 = sub_100008B04(&qword_101497918);
  *(_QWORD *)&v12 = __chkstk_darwin(v11).n128_u64[0];
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = objc_msgSend(a1, "geoMapItem", v12);
  if (!v15)
    goto LABEL_9;
  v16 = v15;
  v17 = objc_msgSend((id)objc_opt_self(MKMapItem), "_itemWithGeoMapItem:", v15);
  if (!v17)
  {
    swift_unknownObjectRelease(v16);
LABEL_9:
    v31 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(a5, 1, 1, v31);
    return;
  }
  v18 = v17;
  v19 = objc_msgSend(v17, "name");
  if (!v19)
  {
    swift_unknownObjectRelease(v16);

    goto LABEL_9;
  }
  v20 = v19;
  v38 = a5;
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v37 = a4;
  v22 = v21;
  v24 = v23;

  v35 = v5;
  v36 = a2;
  v25 = v22;
  v26 = v37;
  v34 = a3;
  sub_1000EE098(a1, a2, v25, v24, a3, v37, (uint64_t)v14, v18);
  swift_bridgeObjectRelease(v24);
  v27 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v14, 1, v27) == 1)
  {
    sub_100010CC4((uint64_t)v14, &qword_101497918);
    v29 = v36[16];
    if (v29)
    {
      v30 = swift_retain();
      sub_1000E2078(a1, v29, v34, v26, v30);
      swift_unknownObjectRelease(v16);

      swift_release();
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56))(v38, 1, 1, v27);
      swift_unknownObjectRelease(v16);

    }
  }
  else
  {

    swift_unknownObjectRelease(v16);
    v32 = v38;
    sub_10003F29C((uint64_t)v14, v38, type metadata accessor for PlaceSummaryViewModelUnit);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v28 + 56))(v32, 0, 1, v27);
  }
}

uint64_t sub_1000E23A0(uint64_t a1, uint64_t a2, int a3)
{
  return sub_1000E46A0(a1, a2, a3, (uint64_t (*)(__n128))sub_100148160, (void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_1000E23BC, (uint64_t (*)(uint64_t, uint64_t))sub_1000F7174);
}

uint64_t sub_1000E23BC@<X0>(void *a1@<X0>, int8x16_t *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v16;

  v8 = sub_100008B04(&qword_101497918);
  __chkstk_darwin(v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000EEB38(a1, a2, a3, (uint64_t)v10);
  v11 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_100010CC4((uint64_t)v10, &qword_101497918);
    v13 = a2[8].i64[0];
    if (v13)
    {
      v14 = swift_retain();
      sub_1000E23BC(a1, v13, a3, v14);
      return swift_release();
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a4, 1, 1, v11);
    }
  }
  else
  {
    sub_10003F29C((uint64_t)v10, a4, type metadata accessor for PlaceSummaryViewModelUnit);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(a4, 0, 1, v11);
  }
}

void sub_1000E2508(_BYTE *a1, char *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  uint64_t v59;
  char *v60;
  char *v61;
  __n128 v62;
  void *v63;
  void *v64;
  id v65;
  id v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  int *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  NSString v99;
  id v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  NSString v105;
  uint64_t v106;
  NSString v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  _QWORD *v116;
  char *v117;
  uint64_t v118;
  _QWORD *v119;
  char v120;
  _QWORD *v121;
  uint64_t v122;
  __n128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  __n128 v128;
  BOOL v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  void *v134;
  id v135;
  void *v136;
  id v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  id v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  id v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  _QWORD *v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  int v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  unsigned int v168;
  unsigned int v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  _BYTE *v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  unint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  _QWORD v202[2];

  v155 = a3;
  v195 = a2;
  v153 = type metadata accessor for PlaceSummaryImageViewModel.ImageType(0);
  __chkstk_darwin(v153);
  v154 = (uint64_t *)((char *)&v150 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v179 = sub_100008B04(&qword_10149A618);
  v178 = *(_QWORD *)(v179 - 8);
  __chkstk_darwin(v179);
  v177 = (char *)&v150 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = sub_100008B04(&qword_10149A620);
  v175 = *(_QWORD *)(v176 - 8);
  __chkstk_darwin(v176);
  v174 = (char *)&v150 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v173 = sub_100008B04(&qword_10149A628);
  v172 = *(_QWORD *)(v173 - 8);
  v7 = __chkstk_darwin(v173);
  v171 = (char *)&v150 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AttributeContainer(0, v7);
  __chkstk_darwin(v9);
  v183 = (char *)&v150 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = type metadata accessor for AttributedString(0);
  v181 = *(_QWORD *)(v182 - 8);
  __chkstk_darwin(v182);
  v180 = (char *)&v150 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100008B04(&qword_101497918);
  __chkstk_darwin(v12);
  v14 = (char *)&v150 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v150 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v189 = (uint64_t)&v150 - v20;
  v21 = sub_100008B04((uint64_t *)&unk_10149A500);
  __chkstk_darwin(v21);
  v23 = (char *)&v150 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for PlaceSummaryViewModelLine(0);
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v161 = (uint64_t)&v150 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v156 = (uint64_t)&v150 - v28;
  v29 = (char *)sub_10014816C();
  if (!v29)
    return;
  v30 = *(_QWORD *)&v29[OBJC_IVAR____TtC4Maps25PlaceSummaryTemplateEntry_lines];
  v160 = *(_QWORD *)(v30 + 16);
  if (!v160)
  {
    v32 = _swiftEmptyArrayStorage;
    if (_swiftEmptyArrayStorage[2])
      goto LABEL_68;
    goto LABEL_75;
  }
  v162 = v25;
  v157 = v24;
  v158 = v23;
  v191 = v15;
  v152 = v29;
  v188 = OBJC_IVAR____TtC4Maps22MapsAutocompletePerson_contact;
  v167 = OBJC_IVAR____TtC4Maps22MapsAutocompletePerson_handle;
  v186 = &v195[OBJC_IVAR____TtC4Maps38PlaceSummaryTextHighlightConfiguration_typedAutocompleteQuery];
  v187 = OBJC_IVAR____TtC4Maps38PlaceSummaryTextHighlightConfiguration_type;
  v159 = v30 + 32;
  v169 = enum case for ListFormatStyle.ListType.and<A, B>(_:);
  v168 = enum case for ListFormatStyle.Width.standard<A, B>(_:);
  v151 = v30;
  swift_bridgeObjectRetain_n(v30, 2);
  v31 = 0;
  v32 = _swiftEmptyArrayStorage;
  v192 = a1;
  v184 = v18;
  v185 = v16;
  v170 = v14;
  do
  {
    v166 = v32;
    v165 = v31;
    v33 = v159 + 16 * v31;
    v34 = *(_QWORD *)v33;
    v163 = *(unsigned __int8 *)(v33 + 8);
    v164 = *(unsigned __int8 *)(v33 + 9);
    if ((unint64_t)v34 >> 62)
    {
      if (v34 < 0)
        v118 = v34;
      else
        v118 = v34 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(v34, 4);
      v35 = _CocoaArrayWrapper.endIndex.getter(v118);
      swift_bridgeObjectRelease(v34);
      v36 = v191;
      if (!v35)
        goto LABEL_57;
LABEL_8:
      v197 = v34 & 0xC000000000000001;
      v37 = 4;
      v198 = _swiftEmptyArrayStorage;
      v190 = v34;
      v196 = v35;
      while (1)
      {
        v38 = v37 - 4;
        v200 = v37;
        if (v197)
        {
          v39 = specialized _ArrayBuffer._getElementSlowPath(_:)(v37 - 4, v34);
          v40 = v38 + 1;
          if (__OFADD__(v38, 1))
            goto LABEL_77;
        }
        else
        {
          swift_retain();
          v40 = v38 + 1;
          if (__OFADD__(v38, 1))
          {
LABEL_77:
            __break(1u);
LABEL_78:
            __break(1u);
LABEL_79:
            __break(1u);
            goto LABEL_80;
          }
        }
        v41 = *(_QWORD *)(v39 + 104) >> 60;
        v199 = v40;
        if (v41 == 3)
        {
          v194 = v39;
          v42 = sub_1000F73CC(a1);
          v43 = v42;
          v193 = v44;
          if (v42[2] == 1)
          {
            v46 = v42[4];
            v45 = v42[5];
            swift_bridgeObjectRetain(v45);
            swift_bridgeObjectRelease(v43);
            v47 = type metadata accessor for PlaceSummaryStackedImageViewModel(0);
            v48 = swift_allocObject(v47, *(unsigned int *)(v47 + 48), *(unsigned __int16 *)(v47 + 52));
            v202[0] = 0;
            v49 = sub_100008B04((uint64_t *)&unk_10149A640);
            Published.init(initialValue:)(v202, v49);
            *(_QWORD *)(v48 + OBJC_IVAR____TtC4Maps33PlaceSummaryStackedImageViewModel_imageSpecs) = v193;
            v50 = HIBYTE(v45) & 0xF;
            if ((v45 & 0x2000000000000000) == 0)
              v50 = v46 & 0xFFFFFFFFFFFFLL;
            if (v50)
            {
              v51 = swift_bridgeObjectRetain(v45);
              v52 = v183;
              AttributeContainer.init()(v51);
              v53 = v180;
              v54 = AttributedString.init(_:attributes:)(v46, v45, v52);
              UUID.init()(v54);
              v55 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.Label(0);
              v56 = v181;
              v57 = v182;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v181 + 56))(&v14[v55[12]], 1, 1, v182);
              v58 = *(void (**)(char *, char *, uint64_t))(v56 + 32);
              v59 = v57;
              v18 = v184;
              v16 = v185;
              v58(&v14[v55[5]], v53, v59);
              v60 = &v14[v55[6]];
              *(_QWORD *)v60 = 0;
              *((_QWORD *)v60 + 1) = 0;
              *(_QWORD *)&v14[v55[7]] = 0;
              *(_QWORD *)&v14[v55[8]] = 0;
              *(_QWORD *)&v14[v55[9]] = 0;
              *(_QWORD *)&v14[v55[10]] = v48;
              v61 = &v14[v55[11]];
              *(_QWORD *)v61 = 1;
              v61[8] = 0;
              swift_storeEnumTagMultiPayload(v14, v36, 0);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v14, 0, 1, v36);
              swift_release();
              v62 = swift_bridgeObjectRelease(v45);
            }
            else
            {
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, 1, 1, v36);
              swift_release();
              swift_bridgeObjectRelease(v45);
              swift_release();
            }
            a1 = v192;
          }
          else
          {
            v201 = v42;
            v70 = v175;
            v71 = v174;
            v72 = v176;
            (*(void (**)(char *, _QWORD, uint64_t))(v175 + 104))(v174, v169, v176);
            v73 = v178;
            v74 = v177;
            v75 = v179;
            (*(void (**)(char *, _QWORD, uint64_t))(v178 + 104))(v177, v168, v179);
            v76 = sub_100008B04((uint64_t *)&unk_101492C00);
            v77 = sub_100010D70(&qword_10149A630, (uint64_t *)&unk_101492C00, (const char *)&protocol conformance descriptor for [A]);
            v78 = v171;
            static FormatStyle.list<A>(type:width:)(v71, v74, v76, v77);
            (*(void (**)(char *, uint64_t))(v73 + 8))(v74, v75);
            (*(void (**)(char *, uint64_t))(v70 + 8))(v71, v72);
            v79 = sub_100010D70(&qword_10149A638, &qword_10149A628, (const char *)&protocol conformance descriptor for ListFormatStyle<A, B>);
            v80 = v173;
            Sequence.formatted<A>(_:)(v202, v78, v76, v173, v77, v79);
            (*(void (**)(char *, uint64_t))(v172 + 8))(v78, v80);
            swift_bridgeObjectRelease(v43);
            v82 = v202[0];
            v81 = v202[1];
            v83 = type metadata accessor for PlaceSummaryStackedImageViewModel(0);
            v84 = swift_allocObject(v83, *(unsigned int *)(v83 + 48), *(unsigned __int16 *)(v83 + 52));
            v201 = 0;
            v85 = sub_100008B04((uint64_t *)&unk_10149A640);
            Published.init(initialValue:)(&v201, v85);
            *(_QWORD *)(v84 + OBJC_IVAR____TtC4Maps33PlaceSummaryStackedImageViewModel_imageSpecs) = v193;
            v86 = HIBYTE(v81) & 0xF;
            if ((v81 & 0x2000000000000000) == 0)
              v86 = v82 & 0xFFFFFFFFFFFFLL;
            if (v86)
            {
              v87 = swift_bridgeObjectRetain(v81);
              v88 = v183;
              AttributeContainer.init()(v87);
              v89 = v180;
              v90 = AttributedString.init(_:attributes:)(v82, v81, v88);
              v14 = v170;
              UUID.init()(v90);
              v91 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.Label(0);
              v92 = v181;
              v93 = v182;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v181 + 56))(&v14[v91[12]], 1, 1, v182);
              (*(void (**)(char *, char *, uint64_t))(v92 + 32))(&v14[v91[5]], v89, v93);
              v94 = &v14[v91[6]];
              *(_QWORD *)v94 = 0;
              *((_QWORD *)v94 + 1) = 0;
              *(_QWORD *)&v14[v91[7]] = 0;
              *(_QWORD *)&v14[v91[8]] = 0;
              *(_QWORD *)&v14[v91[9]] = 0;
              *(_QWORD *)&v14[v91[10]] = v84;
              v95 = &v14[v91[11]];
              *(_QWORD *)v95 = 1;
              v95[8] = 0;
              v36 = v191;
              swift_storeEnumTagMultiPayload(v14, v191, 0);
              v16 = v185;
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v185 + 56))(v14, 0, 1, v36);
              swift_release();
              v62 = swift_bridgeObjectRelease(v81);
            }
            else
            {
              v16 = v185;
              v14 = v170;
              v36 = v191;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v185 + 56))(v170, 1, 1, v191);
              swift_release();
              swift_bridgeObjectRelease(v81);
              swift_release();
            }
            a1 = v192;
            v18 = v184;
            v34 = v190;
          }
          v112 = v196;
          goto LABEL_46;
        }
        v63 = *(void **)&a1[v188];
        if (v63)
          break;
        v96 = *(void **)&a1[v167];
        if (v96)
        {
          v65 = v96;
          v97 = Handle.prettyName.getter();
          if (!v98)
            Handle.identifier.getter(v97);
          v69 = v98;
LABEL_33:
          v99 = String._bridgeToObjectiveC()();

          swift_bridgeObjectRelease(v69);
          goto LABEL_36;
        }
        v117 = v195;
        v110 = 0;
        v101 = 0;
        v103 = 0;
LABEL_40:
        v111 = v195;
        sub_1000ECFF4(v101, v103, v110, *(_BYTE *)(*(_QWORD *)&v195[v187] + OBJC_IVAR____TtC4Maps29PlaceSummaryTextHighlightType_type), 1, (uint64_t)v14);
        swift_release();

        swift_bridgeObjectRelease(v110);
        v62 = swift_bridgeObjectRelease(v103);
        v112 = v196;
        v34 = v190;
        v36 = v191;
LABEL_46:
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v16 + 48))(v14, 1, v36, v62) == 1)
        {
          sub_100010CC4((uint64_t)v14, &qword_101497918);
        }
        else
        {
          v113 = v189;
          sub_10003F29C((uint64_t)v14, v189, type metadata accessor for PlaceSummaryViewModelUnit);
          sub_10003F29C(v113, (uint64_t)v18, type metadata accessor for PlaceSummaryViewModelUnit);
          if ((swift_isUniquelyReferenced_nonNull_native(v198) & 1) == 0)
            v198 = (_QWORD *)sub_1000A7E94(0, v198[2] + 1, 1, (unint64_t)v198);
          v115 = v198[2];
          v114 = v198[3];
          if (v115 >= v114 >> 1)
            v198 = (_QWORD *)sub_1000A7E94(v114 > 1, v115 + 1, 1, (unint64_t)v198);
          v116 = v198;
          v198[2] = v115 + 1;
          sub_10003F29C((uint64_t)v18, (uint64_t)v116+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72) * v115, type metadata accessor for PlaceSummaryViewModelUnit);
        }
        v37 = v200 + 1;
        if (v199 == v112)
          goto LABEL_58;
      }
      v64 = (void *)objc_opt_self(CNContactFormatter);
      v65 = v63;
      v66 = objc_msgSend(v64, "stringFromContact:style:", v65, 0);
      if (v66)
      {
        v67 = v66;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
        v69 = v68;

        goto LABEL_33;
      }
      v100 = objc_msgSend(v65, "givenName");
      if (!v100)
        goto LABEL_78;
      v99 = v100;

LABEL_36:
      v101 = static String._unconditionallyBridgeFromObjectiveC(_:)(v99);
      v103 = v102;

      v104 = v195;
      v105 = String._bridgeToObjectiveC()();
      v106 = *((_QWORD *)v186 + 1);
      swift_bridgeObjectRetain(v106);
      v107 = String._bridgeToObjectiveC()();
      v108 = objc_msgSend(v105, "_maps_prefixMatchesForSearchString:", v107, swift_bridgeObjectRelease(v106).n128_f64[0]);

      if (v108)
      {
        v109 = sub_10000E4BC(0, (unint64_t *)&unk_10149A558, NSValue_ptr);
        v110 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v108, v109);

      }
      else
      {
        v110 = 0;
      }
      a1 = v192;
      goto LABEL_40;
    }
    v35 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n(v34, 3);
    v36 = v191;
    if (v35)
      goto LABEL_8;
LABEL_57:
    v198 = _swiftEmptyArrayStorage;
LABEL_58:
    swift_bridgeObjectRelease_n(v34, 2);
    v119 = v198;
    v120 = v164;
    v121 = sub_1000F33E0((uint64_t)v198, v164);
    v123 = swift_bridgeObjectRelease(v119);
    if (v121[2])
    {
      v124 = (uint64_t)v158;
      UUID.init()(v122);
      v125 = v157;
      *(_QWORD *)(v124 + *(int *)(v157 + 20)) = v121;
      *(_BYTE *)(v124 + *(int *)(v125 + 24)) = v163;
      *(_BYTE *)(v124 + *(int *)(v125 + 28)) = v120;
      v126 = v162;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v162 + 56))(v124, 0, 1, v125);
      v127 = (_QWORD *)v34;
    }
    else
    {
      v126 = v162;
      v124 = (uint64_t)v158;
      v125 = v157;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v162 + 56))(v158, 1, 1, v157, v123);
      swift_bridgeObjectRelease(v34);
      v127 = v121;
    }
    v128 = swift_bridgeObjectRelease(v127);
    v129 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v126 + 48))(v124, 1, v125, v128) == 1;
    v32 = v166;
    if (v129)
    {
      sub_100010CC4(v124, (uint64_t *)&unk_10149A500);
    }
    else
    {
      v130 = v156;
      sub_10003F29C(v124, v156, type metadata accessor for PlaceSummaryViewModelLine);
      sub_10003F29C(v130, v161, type metadata accessor for PlaceSummaryViewModelLine);
      if ((swift_isUniquelyReferenced_nonNull_native(v32) & 1) == 0)
        v32 = (_QWORD *)sub_1000A8AC8(0, v32[2] + 1, 1, (unint64_t)v32);
      v132 = v32[2];
      v131 = v32[3];
      v133 = (uint64_t)v32;
      if (v132 >= v131 >> 1)
        v133 = sub_1000A8AC8(v131 > 1, v132 + 1, 1, (unint64_t)v32);
      v32 = (_QWORD *)v133;
      *(_QWORD *)(v133 + 16) = v132 + 1;
      sub_10003F29C(v161, v133+ ((*(unsigned __int8 *)(v162 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80))+ *(_QWORD *)(v162 + 72) * v132, type metadata accessor for PlaceSummaryViewModelLine);
    }
    v31 = v165 + 1;
  }
  while (v165 + 1 != v160);
  swift_bridgeObjectRelease_n(v151, 2);
  v29 = v152;
  if (!v32[2])
  {
LABEL_75:

    swift_bridgeObjectRelease(v32);
    return;
  }
LABEL_68:
  v134 = v29;
  v135 = objc_msgSend((id)objc_opt_self(MapsUIImageCache), "sharedCache");
  if (!v135)
    goto LABEL_79;
  v136 = v135;
  v137 = objc_msgSend(v135, "searchImage");

  if (v137)
  {
    v138 = (uint64_t)v154;
    *v154 = v137;
    swift_storeEnumTagMultiPayload(v138, v153, 1);
    v139 = type metadata accessor for PlaceSummaryImageViewModel(0);
    v140 = swift_allocObject(v139, *(unsigned int *)(v139 + 48), *(unsigned __int16 *)(v139 + 52));
    v202[0] = 0;
    v141 = sub_100008B04((uint64_t *)&unk_101497210);
    v142 = Published.init(initialValue:)(v202, v141);
    UUID.init()(v142);
    sub_10003F29C(v138, v140 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_type, type metadata accessor for PlaceSummaryImageViewModel.ImageType);
    v143 = v140 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_cornerRadius;
    *(_QWORD *)v143 = 0;
    *(_BYTE *)(v143 + 8) = 1;
    v144 = *(void **)&a1[OBJC_IVAR____TtC4Maps22MapsAutocompletePerson_contact];
    if (v144)
    {
      v145 = v144;
      v146 = sub_1000F5044(v144, 0, 0);

      if ((~v146 & 0xF000000000000007) != 0)
      {
        swift_release();
        v140 = v146;
      }
    }
    v147 = sub_100020008(v140);
    v148 = static Color.clear.getter(v147);
    v149 = objc_allocWithZone((Class)type metadata accessor for PlaceSummaryViewModelTemplate(0));
    sub_100085B5C((unint64_t)v32, v140, 0xF000000000000007, 0, 0, 0, 1, 0, v148, v155 & 1);
    sub_1000200C0(v140);

  }
  else
  {
LABEL_80:
    __break(1u);
  }
}

id sub_1000E36B0(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t (*a6)(id, id, uint64_t))
{
  id v10;
  id v11;
  void *v12;

  swift_getObjCClassMetadata(a1);
  v10 = a3;
  v11 = a4;
  v12 = (void *)a6(v10, v11, a5);

  return v12;
}

uint64_t sub_1000E3724(uint64_t a1, uint64_t a2, int a3)
{
  return sub_1000E3740(a1, a2, a3, (uint64_t (*)(__n128))sub_1001482DC, (void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_1000E3D5C, (uint64_t (*)(uint64_t))sub_1000F8A80);
}

uint64_t sub_1000E3740(uint64_t a1, uint64_t a2, int a3, uint64_t (*a4)(__n128), void (*a5)(uint64_t, uint64_t, uint64_t, __n128), uint64_t (*a6)(uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  _QWORD *v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  id v64;
  uint64_t v65;
  char *v66;
  uint64_t (*v67)(uint64_t);
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t, uint64_t, __n128);

  v67 = a6;
  v84 = a2;
  v85 = a5;
  v68 = a3;
  v83 = a1;
  v7 = sub_100008B04(&qword_101497918);
  __chkstk_darwin(v7);
  v9 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  v10 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v81 = (uint64_t)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v80 = (uint64_t)&v65 - v13;
  v14 = sub_100008B04((uint64_t *)&unk_10149A500);
  __chkstk_darwin(v14);
  v16 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for PlaceSummaryViewModelLine(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v76 = (uint64_t)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v20);
  v69 = (uint64_t)&v65 - v22;
  v23 = (char *)a4(v21);
  if (!v23)
    return 0;
  v24 = *(_QWORD *)&v23[OBJC_IVAR____TtC4Maps25PlaceSummaryTemplateEntry_lines];
  v74 = *(_QWORD *)(v24 + 16);
  if (v74)
  {
    v65 = v24;
    v66 = v23;
    v73 = v24 + 32;
    swift_bridgeObjectRetain_n(v24, 2);
    v25 = 0;
    v75 = _swiftEmptyArrayStorage;
    v71 = v17;
    v72 = v16;
    v70 = v18;
    do
    {
      v26 = v73 + 16 * v25;
      v27 = *(_QWORD *)v26;
      v28 = *(unsigned __int8 *)(v26 + 8);
      v29 = *(unsigned __int8 *)(v26 + 9);
      if (*(_QWORD *)v26 >> 62)
      {
        if (v27 < 0)
          v55 = *(_QWORD *)v26;
        else
          v55 = v27 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain_n(v27, 3);
        result = _CocoaArrayWrapper.endIndex.getter(v55);
        v30 = result;
      }
      else
      {
        v30 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
        result = swift_bridgeObjectRetain_n(v27, 3);
      }
      v78 = v25;
      v79 = v29;
      v77 = v28;
      if (v30)
      {
        if (v30 < 1)
        {
          __break(1u);
          return result;
        }
        v32 = 0;
        v33 = _swiftEmptyArrayStorage;
        do
        {
          if ((v27 & 0xC000000000000001) != 0)
          {
            v34 = specialized _ArrayBuffer._getElementSlowPath(_:)(v32, v27);
          }
          else
          {
            v34 = *(_QWORD *)(v27 + 8 * v32 + 32);
            v35 = swift_retain();
          }
          v85(v83, v34, v84, v35);
          swift_release();
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v82) == 1)
          {
            sub_100010CC4((uint64_t)v9, &qword_101497918);
          }
          else
          {
            v36 = v80;
            sub_10003F29C((uint64_t)v9, v80, type metadata accessor for PlaceSummaryViewModelUnit);
            sub_10003F29C(v36, v81, type metadata accessor for PlaceSummaryViewModelUnit);
            if ((swift_isUniquelyReferenced_nonNull_native(v33) & 1) == 0)
              v33 = (_QWORD *)sub_1000A7E94(0, v33[2] + 1, 1, (unint64_t)v33);
            v38 = v33[2];
            v37 = v33[3];
            if (v38 >= v37 >> 1)
              v33 = (_QWORD *)sub_1000A7E94(v37 > 1, v38 + 1, 1, (unint64_t)v33);
            v33[2] = v38 + 1;
            sub_10003F29C(v81, (uint64_t)v33+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v38, type metadata accessor for PlaceSummaryViewModelUnit);
          }
          ++v32;
        }
        while (v30 != v32);
      }
      else
      {
        v33 = _swiftEmptyArrayStorage;
      }
      swift_bridgeObjectRelease_n(v27, 2);
      v39 = v79;
      v40 = sub_1000F33E0((uint64_t)v33, v79);
      v42 = swift_bridgeObjectRelease(v33);
      if (v40[2])
      {
        v43 = (uint64_t)v72;
        UUID.init()(v41);
        v44 = v71;
        *(_QWORD *)(v43 + *(int *)(v71 + 20)) = v40;
        *(_BYTE *)(v43 + *(int *)(v44 + 24)) = v77;
        *(_BYTE *)(v43 + *(int *)(v44 + 28)) = v39;
        v45 = v70;
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v70 + 56))(v43, 0, 1, v44);
        v46 = (_QWORD *)v27;
      }
      else
      {
        v45 = v70;
        v44 = v71;
        v43 = (uint64_t)v72;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v70 + 56))(v72, 1, 1, v71, v42);
        swift_bridgeObjectRelease(v27);
        v46 = v40;
      }
      v47 = swift_bridgeObjectRelease(v46);
      v48 = v78;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v45 + 48))(v43, 1, v44, v47) == 1)
      {
        sub_100010CC4(v43, (uint64_t *)&unk_10149A500);
      }
      else
      {
        v49 = v43;
        v50 = v69;
        sub_10003F29C(v49, v69, type metadata accessor for PlaceSummaryViewModelLine);
        sub_10003F29C(v50, v76, type metadata accessor for PlaceSummaryViewModelLine);
        v51 = (unint64_t)v75;
        if ((swift_isUniquelyReferenced_nonNull_native(v75) & 1) == 0)
          v51 = sub_1000A8AC8(0, *(_QWORD *)(v51 + 16) + 1, 1, v51);
        v53 = *(_QWORD *)(v51 + 16);
        v52 = *(_QWORD *)(v51 + 24);
        if (v53 >= v52 >> 1)
          v51 = sub_1000A8AC8(v52 > 1, v53 + 1, 1, v51);
        *(_QWORD *)(v51 + 16) = v53 + 1;
        v54 = (*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80);
        v75 = (_QWORD *)v51;
        sub_10003F29C(v76, v51 + v54 + *(_QWORD *)(v45 + 72) * v53, type metadata accessor for PlaceSummaryViewModelLine);
      }
      v25 = v48 + 1;
    }
    while (v25 != v74);
    swift_bridgeObjectRelease_n(v65, 2);
    v23 = v66;
    v56 = v75;
    if (!v75[2])
      goto LABEL_39;
    goto LABEL_37;
  }
  v56 = _swiftEmptyArrayStorage;
  if (!_swiftEmptyArrayStorage[2])
  {
LABEL_39:

    swift_bridgeObjectRelease(v56);
    return 0;
  }
LABEL_37:
  v57 = *(_QWORD *)&v23[OBJC_IVAR____TtC4Maps25PlaceSummaryTemplateEntry_leadingEntities];
  v58 = v23;
  v59 = swift_bridgeObjectRetain(v57);
  v60 = v67(v59);
  swift_bridgeObjectRelease(v57);
  v62 = static Color.clear.getter(v61);
  v63 = objc_allocWithZone((Class)type metadata accessor for PlaceSummaryViewModelTemplate(0));
  v64 = sub_100085B5C((unint64_t)v56, v60, 0xF000000000000007, 0, 0, 0, 1, 0, v62, v68 & 1);

  return (uint64_t)v64;
}

uint64_t sub_1000E3D5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1000E4CC8(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_1000EF16C, (void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_1000E3D5C, a4);
}

uint64_t sub_1000E3D7C(void *a1, char *a2, uint64_t a3, int a4, double a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  _QWORD *v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  id v53;
  void *v54;
  uint64_t v55;
  void *v56;
  id v57;
  id v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  _QWORD *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  void *v87;

  v70 = a4;
  v85 = a2;
  v86 = a3;
  v7 = sub_100008B04(&qword_101497918);
  __chkstk_darwin(v7);
  v9 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  v10 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v83 = (uint64_t)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v82 = (uint64_t)&v67 - v13;
  v14 = sub_100008B04((uint64_t *)&unk_10149A500);
  __chkstk_darwin(v14);
  v16 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for PlaceSummaryViewModelLine(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v77 = (uint64_t)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v21 = __chkstk_darwin(v20).n128_u64[0];
  v71 = (uint64_t)&v67 - v22;
  v87 = a1;
  if (objc_msgSend(a1, "type", v21) != 3)
  {
    v23 = (char *)sub_1001475BC(0);
    if (v23)
      goto LABEL_3;
    return 0;
  }
  v23 = (char *)sub_10014843C();
  if (!v23)
    return 0;
LABEL_3:
  v24 = *(_QWORD *)&v23[OBJC_IVAR____TtC4Maps25PlaceSummaryTemplateEntry_lines];
  v76 = *(_QWORD *)(v24 + 16);
  if (v76)
  {
    v69 = v23;
    v75 = v24 + 32;
    v68 = v24;
    swift_bridgeObjectRetain_n(v24, 2);
    v25 = 0;
    v26 = _swiftEmptyArrayStorage;
    v73 = v17;
    v74 = v16;
    v72 = v18;
    do
    {
      v27 = v75 + 16 * v25;
      v28 = *(_QWORD *)v27;
      v29 = *(unsigned __int8 *)(v27 + 8);
      v30 = *(unsigned __int8 *)(v27 + 9);
      if (*(_QWORD *)v27 >> 62)
      {
        if (v28 < 0)
          v52 = *(_QWORD *)v27;
        else
          v52 = v28 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain_n(v28, 3);
        result = _CocoaArrayWrapper.endIndex.getter(v52);
        v31 = result;
      }
      else
      {
        v31 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
        result = swift_bridgeObjectRetain_n(v28, 3);
      }
      v79 = v26;
      v81 = v25;
      v80 = v30;
      v78 = v29;
      if (v31)
      {
        if (v31 < 1)
        {
          __break(1u);
          return result;
        }
        v33 = 0;
        v34 = _swiftEmptyArrayStorage;
        do
        {
          if ((v28 & 0xC000000000000001) != 0)
          {
            v35 = specialized _ArrayBuffer._getElementSlowPath(_:)(v33, v28);
          }
          else
          {
            v35 = *(_QWORD *)(v28 + 8 * v33 + 32);
            swift_retain();
          }
          sub_1000E449C(v87, v35, v85, v86, (uint64_t)v9);
          swift_release();
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v84) == 1)
          {
            sub_100010CC4((uint64_t)v9, &qword_101497918);
          }
          else
          {
            v36 = v82;
            sub_10003F29C((uint64_t)v9, v82, type metadata accessor for PlaceSummaryViewModelUnit);
            sub_10003F29C(v36, v83, type metadata accessor for PlaceSummaryViewModelUnit);
            if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) == 0)
              v34 = (_QWORD *)sub_1000A7E94(0, v34[2] + 1, 1, (unint64_t)v34);
            v38 = v34[2];
            v37 = v34[3];
            if (v38 >= v37 >> 1)
              v34 = (_QWORD *)sub_1000A7E94(v37 > 1, v38 + 1, 1, (unint64_t)v34);
            v34[2] = v38 + 1;
            sub_10003F29C(v83, (uint64_t)v34+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v38, type metadata accessor for PlaceSummaryViewModelUnit);
          }
          ++v33;
        }
        while (v31 != v33);
      }
      else
      {
        v34 = _swiftEmptyArrayStorage;
      }
      swift_bridgeObjectRelease_n(v28, 2);
      v39 = v80;
      v40 = sub_1000F33E0((uint64_t)v34, v80);
      v42 = swift_bridgeObjectRelease(v34);
      if (v40[2])
      {
        v43 = (uint64_t)v74;
        UUID.init()(v41);
        v44 = v73;
        *(_QWORD *)(v43 + *(int *)(v73 + 20)) = v40;
        *(_BYTE *)(v43 + *(int *)(v44 + 24)) = v78;
        *(_BYTE *)(v43 + *(int *)(v44 + 28)) = v39;
        v45 = v72;
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v72 + 56))(v43, 0, 1, v44);
        v46 = (_QWORD *)v28;
      }
      else
      {
        v45 = v72;
        v44 = v73;
        v43 = (uint64_t)v74;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v72 + 56))(v74, 1, 1, v73, v42);
        swift_bridgeObjectRelease(v28);
        v46 = v40;
      }
      v47 = swift_bridgeObjectRelease(v46);
      v26 = v79;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v45 + 48))(v43, 1, v44, v47) == 1)
      {
        sub_100010CC4(v43, (uint64_t *)&unk_10149A500);
      }
      else
      {
        v48 = v43;
        v49 = v71;
        sub_10003F29C(v48, v71, type metadata accessor for PlaceSummaryViewModelLine);
        sub_10003F29C(v49, v77, type metadata accessor for PlaceSummaryViewModelLine);
        if ((swift_isUniquelyReferenced_nonNull_native(v26) & 1) == 0)
          v26 = (_QWORD *)sub_1000A8AC8(0, v26[2] + 1, 1, (unint64_t)v26);
        v51 = v26[2];
        v50 = v26[3];
        if (v51 >= v50 >> 1)
          v26 = (_QWORD *)sub_1000A8AC8(v50 > 1, v51 + 1, 1, (unint64_t)v26);
        v26[2] = v51 + 1;
        sub_10003F29C(v77, (uint64_t)v26+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(_QWORD *)(v45 + 72) * v51, type metadata accessor for PlaceSummaryViewModelLine);
      }
      v25 = v81 + 1;
    }
    while (v81 + 1 != v76);
    swift_bridgeObjectRelease_n(v68, 2);
    v23 = v69;
    if (!v26[2])
      goto LABEL_45;
    goto LABEL_40;
  }
  v26 = _swiftEmptyArrayStorage;
  if (_swiftEmptyArrayStorage[2])
  {
LABEL_40:
    v54 = v23;
    v55 = *(_QWORD *)&v23[OBJC_IVAR____TtC4Maps25PlaceSummaryTemplateEntry_leadingEntities];
    swift_bridgeObjectRetain(v55);
    v56 = v87;
    v57 = sub_1000F8C64(v87, v55);
    v58 = objc_msgSend(v56, "mapItem", swift_bridgeObjectRelease(v55).n128_f64[0]);
    v59 = v58;
    if (!v58)
      goto LABEL_46;
    v60 = objc_msgSend(v58, "_geoMapItem");

    if (!v60)
    {
      v59 = 0;
      goto LABEL_48;
    }
    v59 = objc_msgSend(v60, "_childItems");
    v58 = (id)swift_unknownObjectRelease(v60);
    if (v59)
    {
      v61 = sub_10000E4BC(0, &qword_10149A568, GEOMapItemChildItem_ptr);
      v62 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v59, v61);

      sub_1000F64D4(v62, a5);
      v59 = v63;
      v60 = v64;
      swift_bridgeObjectRelease(v62);
    }
    else
    {
LABEL_46:
      v60 = 0;
    }
LABEL_48:
    v65 = static Color.clear.getter(v58);
    v66 = objc_allocWithZone((Class)type metadata accessor for PlaceSummaryViewModelTemplate(0));
    v53 = sub_100085B5C((unint64_t)v26, (unint64_t)v57, 0xF000000000000007, (uint64_t)v59, (uint64_t)v60, 0, 1, 0, v65, v70 & 1);

    return (uint64_t)v53;
  }
LABEL_45:

  swift_bridgeObjectRelease(v26);
  return 0;
}

uint64_t sub_1000E449C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v18;

  v10 = sub_100008B04(&qword_101497918);
  __chkstk_darwin(v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000EF778(a1, a2, a3, a4, (uint64_t)v12);
  v13 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_100010CC4((uint64_t)v12, &qword_101497918);
    v15 = *(_QWORD *)(a2 + 128);
    if (v15)
    {
      v16 = swift_retain();
      sub_1000E449C(a1, v15, a3, a4, v16);
      return swift_release();
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(a5, 1, 1, v13);
    }
  }
  else
  {
    sub_10003F29C((uint64_t)v12, a5, type metadata accessor for PlaceSummaryViewModelUnit);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a5, 0, 1, v13);
  }
}

uint64_t sub_1000E4684(uint64_t a1, uint64_t a2, int a3)
{
  return sub_1000E46A0(a1, a2, a3, (uint64_t (*)(__n128))sub_1001485A8, (void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_1000E4CB4, (uint64_t (*)(uint64_t, uint64_t))sub_1000F8D98);
}

uint64_t sub_1000E46A0(uint64_t a1, uint64_t a2, int a3, uint64_t (*a4)(__n128), void (*a5)(uint64_t, uint64_t, uint64_t, __n128), uint64_t (*a6)(uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  _QWORD *v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  id v61;
  uint64_t v62;
  char *v63;
  uint64_t (*v64)(uint64_t, uint64_t);
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  _QWORD *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v82;

  v64 = a6;
  v80 = a2;
  v81 = a5;
  v65 = a3;
  v82 = a1;
  v7 = sub_100008B04(&qword_101497918);
  __chkstk_darwin(v7);
  v9 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  v10 = *(_QWORD *)(v79 - 8);
  __chkstk_darwin(v79);
  v78 = (uint64_t)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v77 = (uint64_t)&v62 - v13;
  v14 = sub_100008B04((uint64_t *)&unk_10149A500);
  __chkstk_darwin(v14);
  v16 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for PlaceSummaryViewModelLine(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v72 = (uint64_t)&v62 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v20);
  v66 = (uint64_t)&v62 - v22;
  v23 = (char *)a4(v21);
  if (!v23)
    return 0;
  v24 = *(_QWORD *)&v23[OBJC_IVAR____TtC4Maps25PlaceSummaryTemplateEntry_lines];
  v71 = *(_QWORD *)(v24 + 16);
  if (v71)
  {
    v62 = v24;
    v63 = v23;
    v70 = v24 + 32;
    swift_bridgeObjectRetain_n(v24, 2);
    v25 = 0;
    v26 = _swiftEmptyArrayStorage;
    v68 = v17;
    v69 = v16;
    v67 = v18;
    do
    {
      v27 = v70 + 16 * v25;
      v28 = *(_QWORD *)v27;
      v29 = *(unsigned __int8 *)(v27 + 8);
      v30 = *(unsigned __int8 *)(v27 + 9);
      if (*(_QWORD *)v27 >> 62)
      {
        if (v28 < 0)
          v54 = *(_QWORD *)v27;
        else
          v54 = v28 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain_n(v28, 3);
        result = _CocoaArrayWrapper.endIndex.getter(v54);
        v31 = result;
      }
      else
      {
        v31 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
        result = swift_bridgeObjectRetain_n(v28, 3);
      }
      v74 = v25;
      v75 = v26;
      v76 = v30;
      v73 = v29;
      if (v31)
      {
        if (v31 < 1)
        {
          __break(1u);
          return result;
        }
        v33 = 0;
        v34 = _swiftEmptyArrayStorage;
        do
        {
          if ((v28 & 0xC000000000000001) != 0)
          {
            v35 = specialized _ArrayBuffer._getElementSlowPath(_:)(v33, v28);
          }
          else
          {
            v35 = *(_QWORD *)(v28 + 8 * v33 + 32);
            v36 = swift_retain();
          }
          v81(v82, v35, v80, v36);
          swift_release();
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v79) == 1)
          {
            sub_100010CC4((uint64_t)v9, &qword_101497918);
          }
          else
          {
            v37 = v77;
            sub_10003F29C((uint64_t)v9, v77, type metadata accessor for PlaceSummaryViewModelUnit);
            sub_10003F29C(v37, v78, type metadata accessor for PlaceSummaryViewModelUnit);
            if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) == 0)
              v34 = (_QWORD *)sub_1000A7E94(0, v34[2] + 1, 1, (unint64_t)v34);
            v39 = v34[2];
            v38 = v34[3];
            if (v39 >= v38 >> 1)
              v34 = (_QWORD *)sub_1000A7E94(v38 > 1, v39 + 1, 1, (unint64_t)v34);
            v34[2] = v39 + 1;
            sub_10003F29C(v78, (uint64_t)v34+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v39, type metadata accessor for PlaceSummaryViewModelUnit);
          }
          ++v33;
        }
        while (v31 != v33);
      }
      else
      {
        v34 = _swiftEmptyArrayStorage;
      }
      swift_bridgeObjectRelease_n(v28, 2);
      v40 = v76;
      v41 = sub_1000F33E0((uint64_t)v34, v76);
      v43 = swift_bridgeObjectRelease(v34);
      if (v41[2])
      {
        v44 = (uint64_t)v69;
        UUID.init()(v42);
        v45 = v68;
        *(_QWORD *)(v44 + *(int *)(v68 + 20)) = v41;
        *(_BYTE *)(v44 + *(int *)(v45 + 24)) = v73;
        *(_BYTE *)(v44 + *(int *)(v45 + 28)) = v40;
        v46 = v67;
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v67 + 56))(v44, 0, 1, v45);
        v47 = (_QWORD *)v28;
      }
      else
      {
        v46 = v67;
        v45 = v68;
        v44 = (uint64_t)v69;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v67 + 56))(v69, 1, 1, v68, v43);
        swift_bridgeObjectRelease(v28);
        v47 = v41;
      }
      v48 = swift_bridgeObjectRelease(v47);
      v49 = v74;
      v26 = v75;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v46 + 48))(v44, 1, v45, v48) == 1)
      {
        sub_100010CC4(v44, (uint64_t *)&unk_10149A500);
      }
      else
      {
        v50 = v44;
        v51 = v66;
        sub_10003F29C(v50, v66, type metadata accessor for PlaceSummaryViewModelLine);
        sub_10003F29C(v51, v72, type metadata accessor for PlaceSummaryViewModelLine);
        if ((swift_isUniquelyReferenced_nonNull_native(v26) & 1) == 0)
          v26 = (_QWORD *)sub_1000A8AC8(0, v26[2] + 1, 1, (unint64_t)v26);
        v53 = v26[2];
        v52 = v26[3];
        if (v53 >= v52 >> 1)
          v26 = (_QWORD *)sub_1000A8AC8(v52 > 1, v53 + 1, 1, (unint64_t)v26);
        v26[2] = v53 + 1;
        sub_10003F29C(v72, (uint64_t)v26+ ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80))+ *(_QWORD *)(v46 + 72) * v53, type metadata accessor for PlaceSummaryViewModelLine);
      }
      v25 = v49 + 1;
    }
    while (v25 != v71);
    swift_bridgeObjectRelease_n(v62, 2);
    v23 = v63;
    if (!v26[2])
      goto LABEL_39;
    goto LABEL_37;
  }
  v26 = _swiftEmptyArrayStorage;
  if (!_swiftEmptyArrayStorage[2])
  {
LABEL_39:

    swift_bridgeObjectRelease(v26);
    return 0;
  }
LABEL_37:
  v55 = *(_QWORD *)&v23[OBJC_IVAR____TtC4Maps25PlaceSummaryTemplateEntry_leadingEntities];
  v56 = v23;
  swift_bridgeObjectRetain(v55);
  v57 = v64(v82, v55);
  swift_bridgeObjectRelease(v55);
  v59 = static Color.clear.getter(v58);
  v60 = objc_allocWithZone((Class)type metadata accessor for PlaceSummaryViewModelTemplate(0));
  v61 = sub_100085B5C((unint64_t)v26, v57, 0xF000000000000007, 0, 0, 0, 1, 0, v59, v65 & 1);

  return (uint64_t)v61;
}

uint64_t sub_1000E4CB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1000E4CC8(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_1000EFE8C, (void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_1000E4CB4, a4);
}

uint64_t sub_1000E4CC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128)@<X3>, void (*a5)(uint64_t, uint64_t, uint64_t, __n128)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v22;

  v13 = sub_100008B04(&qword_101497918);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  a4(a2, a2, v6, a1, a3, v14);
  v17 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    sub_100010CC4((uint64_t)v16, &qword_101497918);
    v19 = *(_QWORD *)(a2 + 128);
    if (v19)
    {
      v20 = swift_retain();
      a5(a1, v19, a3, v20);
      return swift_release();
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(a6, 1, 1, v17);
    }
  }
  else
  {
    sub_10003F29C((uint64_t)v16, a6, type metadata accessor for PlaceSummaryViewModelUnit);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(a6, 0, 1, v17);
  }
}

uint64_t sub_1000E4E74(int a1)
{
  NSBundle v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  _BYTE v13[64];
  Swift::String v14;
  Swift::String v15;

  if (qword_101490ED0 != -1)
    swift_once(&qword_101490ED0, sub_10011833C);
  v2.super.isa = (Class)qword_1014D4B80;
  v14._countAndFlagsBits = 0xD00000000000002DLL;
  v14._object = (void *)0x8000000100E490D0;
  v3._object = (void *)0x8000000100E490B0;
  v3._countAndFlagsBits = 0xD000000000000012;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)qword_1014D4B80, v4, v14);
  v6._countAndFlagsBits = 0xD000000000000013;
  v15._countAndFlagsBits = 0xD000000000000030;
  v15._object = (void *)0x8000000100E49120;
  v6._object = (void *)0x8000000100E49100;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, v2, v7, v15);
  v9 = sub_100008B04(&qword_101492BF0);
  inited = swift_initStackObject(v9, v13);
  *(_OWORD *)(inited + 16) = xmmword_100E22F70;
  *(Swift::String *)(inited + 32) = v5;
  *(Swift::String *)(inited + 48) = v8;
  v11 = sub_1000E4FF0(inited, 0x8000000000000028, 0, a1);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, *(_QWORD *)(inited + 16), &type metadata for String);
  return v11;
}

uint64_t sub_1000E4FF0(uint64_t a1, unint64_t a2, int a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  _QWORD *v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  __n128 v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  void *v52;
  unint64_t v53;
  uint64_t v54;
  id v55;
  id v56;
  uint64_t v57;
  char *v58;
  int v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v61 = a4;
  v59 = a3;
  v60 = a2;
  v5 = sub_100008B04(&qword_101497918);
  __chkstk_darwin(v5);
  v7 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v75 = (uint64_t)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v74 = (uint64_t)&v57 - v12;
  v13 = sub_100008B04((uint64_t *)&unk_10149A500);
  __chkstk_darwin(v13);
  v15 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for PlaceSummaryViewModelLine(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v69 = (uint64_t)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v62 = (uint64_t)&v57 - v20;
  v21 = (char *)sub_100148708(a1);
  if (!v21)
    return 0;
  v22 = *(_QWORD *)&v21[OBJC_IVAR____TtC4Maps25PlaceSummaryTemplateEntry_lines];
  v67 = *(_QWORD *)(v22 + 16);
  if (v67)
  {
    v57 = v22;
    v58 = v21;
    v66 = v22 + 32;
    swift_bridgeObjectRetain_n(v22, 2);
    v23 = 0;
    v68 = _swiftEmptyArrayStorage;
    v73 = v8;
    v64 = v16;
    v65 = v15;
    v63 = v17;
    do
    {
      v24 = v66 + 16 * v23;
      v25 = *(_QWORD *)v24;
      v26 = *(unsigned __int8 *)(v24 + 8);
      v71 = *(unsigned __int8 *)(v24 + 9);
      if ((unint64_t)v25 >> 62)
      {
        if (v25 < 0)
          v49 = v25;
        else
          v49 = v25 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain_n(v25, 3);
        result = _CocoaArrayWrapper.endIndex.getter(v49);
        v27 = result;
      }
      else
      {
        v27 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
        result = swift_bridgeObjectRetain_n(v25, 3);
      }
      v72 = v23;
      v70 = v26;
      if (v27)
      {
        if (v27 < 1)
        {
          __break(1u);
          return result;
        }
        v29 = 0;
        v30 = _swiftEmptyArrayStorage;
        do
        {
          if ((v25 & 0xC000000000000001) != 0)
          {
            v31 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v29, v25);
          }
          else
          {
            v31 = *(_QWORD **)(v25 + 8 * v29 + 32);
            swift_retain();
          }
          sub_1000E55E8(v31, (uint64_t)v7);
          swift_release();
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
          {
            sub_100010CC4((uint64_t)v7, &qword_101497918);
          }
          else
          {
            v32 = v74;
            sub_10003F29C((uint64_t)v7, v74, type metadata accessor for PlaceSummaryViewModelUnit);
            sub_10003F29C(v32, v75, type metadata accessor for PlaceSummaryViewModelUnit);
            if ((swift_isUniquelyReferenced_nonNull_native(v30) & 1) == 0)
              v30 = (_QWORD *)sub_1000A7E94(0, v30[2] + 1, 1, (unint64_t)v30);
            v34 = v30[2];
            v33 = v30[3];
            if (v34 >= v33 >> 1)
              v30 = (_QWORD *)sub_1000A7E94(v33 > 1, v34 + 1, 1, (unint64_t)v30);
            v30[2] = v34 + 1;
            sub_10003F29C(v75, (uint64_t)v30+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v34, type metadata accessor for PlaceSummaryViewModelUnit);
            v8 = v73;
          }
          ++v29;
        }
        while (v27 != v29);
      }
      else
      {
        v30 = _swiftEmptyArrayStorage;
      }
      swift_bridgeObjectRelease_n(v25, 2);
      v35 = v71;
      v36 = sub_1000F33E0((uint64_t)v30, v71);
      v38 = swift_bridgeObjectRelease(v30);
      if (v36[2])
      {
        v39 = (uint64_t)v65;
        UUID.init()(v37);
        v40 = v64;
        *(_QWORD *)(v39 + *(int *)(v64 + 20)) = v36;
        *(_BYTE *)(v39 + *(int *)(v40 + 24)) = v70;
        *(_BYTE *)(v39 + *(int *)(v40 + 28)) = v35;
        v41 = v63;
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v63 + 56))(v39, 0, 1, v40);
        v42 = (_QWORD *)v25;
      }
      else
      {
        v41 = v63;
        v40 = v64;
        v39 = (uint64_t)v65;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v63 + 56))(v65, 1, 1, v64, v38);
        swift_bridgeObjectRelease(v25);
        v42 = v36;
      }
      v43 = swift_bridgeObjectRelease(v42);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v41 + 48))(v39, 1, v40, v43) == 1)
      {
        sub_100010CC4(v39, (uint64_t *)&unk_10149A500);
      }
      else
      {
        v44 = v62;
        sub_10003F29C(v39, v62, type metadata accessor for PlaceSummaryViewModelLine);
        sub_10003F29C(v44, v69, type metadata accessor for PlaceSummaryViewModelLine);
        v45 = (unint64_t)v68;
        if ((swift_isUniquelyReferenced_nonNull_native(v68) & 1) == 0)
          v45 = sub_1000A8AC8(0, *(_QWORD *)(v45 + 16) + 1, 1, v45);
        v47 = *(_QWORD *)(v45 + 16);
        v46 = *(_QWORD *)(v45 + 24);
        if (v47 >= v46 >> 1)
          v45 = sub_1000A8AC8(v46 > 1, v47 + 1, 1, v45);
        *(_QWORD *)(v45 + 16) = v47 + 1;
        v48 = (*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
        v68 = (_QWORD *)v45;
        sub_10003F29C(v69, v45 + v48 + *(_QWORD *)(v41 + 72) * v47, type metadata accessor for PlaceSummaryViewModelLine);
      }
      v23 = v72 + 1;
    }
    while (v72 + 1 != v67);
    swift_bridgeObjectRelease_n(v57, 2);
    v21 = v58;
    v50 = v68;
    if (!v68[2])
      goto LABEL_39;
    goto LABEL_37;
  }
  v50 = _swiftEmptyArrayStorage;
  if (!_swiftEmptyArrayStorage[2])
  {
LABEL_39:

    swift_bridgeObjectRelease(v50);
    return 0;
  }
LABEL_37:
  v51 = v60;
  v52 = v21;
  v53 = sub_10001FFF4(v60);
  v54 = static Color.clear.getter(v53);
  v55 = objc_allocWithZone((Class)type metadata accessor for PlaceSummaryViewModelTemplate(0));
  v56 = sub_100085B5C((unint64_t)v50, v51, 0xF000000000000007, 0, 0, 0, v61, 0, v54, v59 & 1);

  return (uint64_t)v56;
}

uint64_t sub_1000E55E8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[9];
  char v34;
  uint64_t v35;
  char v36;
  void *v37;

  v4 = sub_100008B04(&qword_101497918);
  __chkstk_darwin(v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[13];
  if (v7 >> 60 == 6)
  {
    v8 = (void *)a1[14];
    v9 = a1[12];
    v11 = a1[9];
    v10 = a1[10];
    v26 = a1[11];
    v27 = v10;
    v13 = a1[7];
    v12 = a1[8];
    v14 = a1[5];
    v30 = a1[6];
    v31 = v12;
    v15 = a1[4];
    v32 = a2;
    v16 = a1[3];
    v28 = a1[2];
    v29 = v15;
    v33[0] = v28;
    v33[1] = v16;
    v33[2] = v15;
    v33[3] = v14;
    v33[4] = v30;
    v33[5] = v13;
    v33[6] = v12;
    v33[7] = v11;
    v33[8] = v10;
    v34 = v26 & 1;
    v35 = v9;
    v36 = v7 & 1;
    v37 = v8;
    v17 = v8;
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v9);
    sub_1000E8D14(v33, 1, (uint64_t)v6);
    v18 = v16;
    a2 = v32;
    sub_1000F9234(v28, v18, v29, v14, v30, v13, v31, v11, v27, v26, v9, v7, v8);
    v19 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v6, 1, v19) != 1)
    {
      sub_10003F29C((uint64_t)v6, a2, type metadata accessor for PlaceSummaryViewModelUnit);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56))(a2, 0, 1, v19);
    }
  }
  else
  {
    v22 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v6, 1, 1, v22);
  }
  sub_100010CC4((uint64_t)v6, &qword_101497918);
  if (a1[16])
  {
    v23 = swift_retain();
    sub_1000E55E8(v23);
    return swift_release();
  }
  else
  {
    v24 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(a2, 1, 1, v24);
  }
}

id sub_1000E585C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PlaceSummaryViewModelTemplateFactory();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for PlaceSummaryViewModelTemplateFactory()
{
  return objc_opt_self(_TtC4Maps36PlaceSummaryViewModelTemplateFactory);
}

void sub_1000E58AC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }
}

double sub_1000E592C(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  __n128 v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  double result;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;

  v28 = v9;
  v25 = v5;
  v29 = v7;
  v27 = v6;
  swift_bridgeObjectRetain(v14);
  v16 = objc_msgSend(a4, "_secondaryName");
  if (v16)
  {
    v18 = v16;
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v21 = v20;

  }
  else
  {
    v19 = 0;
    v21 = 0;
  }
  sub_1000E67E0(v19, v21, v27, v14, 0, 0, 0, 0, v25, v17, 0);
  sub_1000F9234(v27, v14, v11, v12, v15, v30, v28, a5, v13, v10, v8, v29, a1);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v21).n128_u64[0];
  return result;
}

void sub_1000E67E0(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __n128 a10@<Q0>, uint64_t a11)
{
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  __n128 v35;
  int *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a7;
  v47 = a8;
  v44 = a3;
  v45 = a4;
  v16 = type metadata accessor for AttributeContainer(0, a10);
  __chkstk_darwin(v16);
  v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for AttributedString(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
    goto LABEL_10;
  v23 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v23 = a1 & 0xFFFFFFFFFFFFLL;
  if (v23)
  {
    v24 = swift_bridgeObjectRetain(a2);
    AttributeContainer.init()(v24);
    v25 = AttributedString.init(_:attributes:)(a1, a2, v18);
    if (a5)
    {
      KeyPath = swift_getKeyPath(&unk_100E2B770);
      __chkstk_darwin(KeyPath);
      *(&v43 - 2) = v27;
      v28 = swift_getKeyPath(&unk_100E2B7A0);
      v48 = a5;
      v29 = sub_10006C5A8();
      v30 = swift_retain();
      v25 = AttributedString.subscript.setter(&v48, v28, v29, v30);
    }
    if (a6)
    {
      v31 = swift_getKeyPath(&unk_100E2B850);
      __chkstk_darwin(v31);
      *(&v43 - 2) = v32;
      v33 = swift_getKeyPath(&unk_100E2B880);
      v48 = a6;
      v34 = sub_1000F9468();
      v35 = swift_retain();
      v25 = AttributedString.subscript.setter(&v48, v33, v34, v35);
    }
    UUID.init()(v25);
    v36 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.Label(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(a9 + v36[12], 1, 1, v19);
    (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(a9 + v36[5], v22, v19);
    v37 = (_QWORD *)(a9 + v36[6]);
    v38 = v45;
    *v37 = v44;
    v37[1] = v38;
    v39 = v47;
    *(_QWORD *)(a9 + v36[7]) = v46;
    *(_QWORD *)(a9 + v36[8]) = v39;
    *(_QWORD *)(a9 + v36[9]) = 0;
    *(_QWORD *)(a9 + v36[10]) = a11;
    v40 = a9 + v36[11];
    *(_QWORD *)v40 = 1;
    *(_BYTE *)(v40 + 8) = 0;
    v41 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    swift_storeEnumTagMultiPayload(a9, v41, 0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(a9, 0, 1, v41);
    swift_retain();
    swift_bridgeObjectRetain(v38);
    swift_retain();
    swift_retain();
  }
  else
  {
LABEL_10:
    v42 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(a9, 1, 1, v42);
  }
}

uint64_t sub_1000E6AE8@<X0>(uint64_t a1@<X0>, char a2@<W1>, void *a3@<X2>, void *a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  id v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id IsEnabled_HikingWatch;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  Swift::String v35;

  if (!a4)
  {
    v14 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a6, 1, 1, v14);
  }
  if ((a2 & 1) != 0)
  {
    v16 = a4;
    v13 = 0;
  }
  else
  {
    v11 = objc_allocWithZone((Class)NSNumber);
    v12 = a4;
    v13 = objc_msgSend(v11, "initWithUnsignedLongLong:", a1);
  }
  v34 = 1;
  if ((a5 & 1) != 0)
  {
    v17 = objc_msgSend(a3, "_maps_distanceStringFromDetourInformation");
    if (v17)
    {
      v18 = v17;
      goto LABEL_10;
    }

LABEL_18:
    v33 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(a6, 1, 1, v33);
  }
  v19 = (void *)objc_opt_self(NSString);
  v20 = a4;
  objc_msgSend(a3, "_coordinate");
  v18 = objc_msgSend(v19, "distanceStringFromLocation:toCoordinate:withMapItem:showsDistance:onlyUseThreshold:maximumDistance:useShortThreshold:", v20, a3, &v34, 0, v13, 1);

  if (!v18)
  {

    goto LABEL_18;
  }
LABEL_10:
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v23 = v22;

  IsEnabled_HikingWatch = (id)MapsFeature_IsEnabled_HikingWatch();
  if ((_DWORD)IsEnabled_HikingWatch)
  {
    IsEnabled_HikingWatch = objc_msgSend(a3, "_placeCategoryType");
    if ((_DWORD)IsEnabled_HikingWatch == 1)
    {
      if (qword_101490ED0 != -1)
        swift_once(&qword_101490ED0, sub_10011833C);
      v35._object = (void *)0xEB00000000796177;
      v25._countAndFlagsBits = 0x636E61747369645BLL;
      v25._object = (void *)0xEF79617761205D65;
      v26._countAndFlagsBits = 0x79617761204025;
      v26._object = (void *)0xE700000000000000;
      v35._countAndFlagsBits = 0x6120696D20303031;
      v27 = NSLocalizedString(_:tableName:bundle:value:comment:)(v25, (Swift::String_optional)0, (NSBundle)qword_1014D4B80, v26, v35);
      v28 = sub_100008B04((uint64_t *)&unk_10149A4F0);
      v29 = swift_allocObject(v28, 72, 7);
      *(_OWORD *)(v29 + 16) = xmmword_100E22F40;
      *(_QWORD *)(v29 + 56) = &type metadata for String;
      *(_QWORD *)(v29 + 64) = sub_10000D8E0();
      *(_QWORD *)(v29 + 32) = v21;
      *(_QWORD *)(v29 + 40) = v23;
      v21 = String.init(format:_:)(v27._countAndFlagsBits, v27._object, v29);
      v23 = v30;
      swift_bridgeObjectRelease(v27._object);
    }
  }
  UUID.init()(IsEnabled_HikingWatch);

  v31 = (uint64_t *)(a6 + *(int *)(type metadata accessor for PlaceSummaryViewModelUnit.Distance(0) + 20));
  *v31 = v21;
  v31[1] = v23;
  v32 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  swift_storeEnumTagMultiPayload(a6, v32, 1);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(a6, 0, 1, v32);
}

void sub_1000E6E44(char a1@<W0>, _BOOL8 a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t IsEnabled_SearchAndDiscovery;
  id v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  id v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void (*v57)(char *, uint64_t);
  __n128 v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, char *, uint64_t);
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  id v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  id v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  unint64_t v87;
  __n128 v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  id v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t KeyPath;
  uint64_t v107;
  uint64_t v108;
  id v109;
  uint64_t v110;
  char *v111;
  void (*v112)(_QWORD *, _QWORD);
  unint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  char *v133;
  id v134;
  uint64_t v135;
  _QWORD v136[4];
  uint64_t v137;

  v132 = type metadata accessor for UUID(0);
  v130 = *(_QWORD *)(v132 - 8);
  __chkstk_darwin(v132);
  v131 = (char *)&v122 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100008B04(&qword_1014958A0);
  __chkstk_darwin(v13);
  v15 = (char *)&v122 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100008B04(&qword_1014958A8);
  __chkstk_darwin(v16);
  v18 = (char *)&v122 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = sub_100008B04(&qword_1014958B0);
  v19 = *(_QWORD *)(v129 - 8);
  __chkstk_darwin(v129);
  v127 = (uint64_t)&v122 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v21);
  v128 = (uint64_t)&v122 - v23;
  v24 = type metadata accessor for AttributeContainer(0, v22);
  __chkstk_darwin(v24);
  v133 = (char *)&v122 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for AttributedString(0);
  __chkstk_darwin(v26);
  v28 = (char *)&v122 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  __chkstk_darwin(v30);
  if (!a2)
  {
    v71 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 56))(a6, 1, 1, v71);
    return;
  }
  v135 = a6;
  v125 = v31;
  v126 = v33;
  if (a4 && *(_BYTE *)(a4 + OBJC_IVAR____TtC4Maps20PlaceSummaryMetadata_useCase) == 2)
  {
    v35 = (char *)&v122 - v32;
    v36 = v34;
    IsEnabled_SearchAndDiscovery = MapsFeature_IsEnabled_SearchAndDiscovery(v31);
  }
  else
  {
    v35 = (char *)&v122 - v32;
    v36 = v34;
    IsEnabled_SearchAndDiscovery = 0;
  }
  v38 = objc_msgSend(a3, "searchResultsHoursWithConciseStyle:openAt:", IsEnabled_SearchAndDiscovery, a5);
  if (!v38)
    goto LABEL_26;
  v134 = v38;
  if (!sub_1000F4324(a2, v38))
    goto LABEL_23;
  if ((a1 & 1) == 0)
  {
    v39 = objc_msgSend(v134, "localizedOperatingHours");
    if (v39)
    {
      v40 = v39;
      v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
      v43 = v42;

      if (String.count.getter(v41, v43) >= 1)
      {
        v44 = swift_bridgeObjectRetain(v43);
        v45 = v133;
        AttributeContainer.init()(v44);
        v46 = v35;
        AttributedString.init(_:attributes:)(v41, v43, v45);
        v47 = objc_msgSend(v134, "localizedOpenState");
        if (v47)
        {
          v48 = v47;
          v122 = v41;
          v123 = v43;
          v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
          v51 = v50;

          v52 = v125;
          v53 = *(void (**)(char *, char *, uint64_t))(v126 + 16);
          v124 = v46;
          v53(v36, v46, v125);
          v136[0] = v49;
          v136[1] = v51;
          v54 = type metadata accessor for Locale(0);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v15, 1, 1, v54);
          v55 = sub_10000BC84(&qword_1014958D0, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString, (uint64_t)&protocol conformance descriptor for AttributedString);
          v56 = sub_10006C008();
          AttributedStringProtocol.range<A>(of:options:locale:)(v136, 0, v15, v52, &type metadata for String, v55, v56);
          sub_100010CC4((uint64_t)v15, &qword_1014958A0);
          v57 = *(void (**)(char *, uint64_t))(v126 + 8);
          v57(v36, v52);
          v58 = swift_bridgeObjectRelease(v51);
          v59 = v129;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v19 + 48))(v18, 1, v129, v58) != 1)
          {
            v100 = v128;
            sub_1000207BC((uint64_t)v18, v128, &qword_1014958B0);
            v101 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
            objc_msgSend(v134, "updateHoursLabelColorWithDefaultLabelColor:", v101);

            v102 = objc_msgSend(v134, "hoursStateLabelColor");
            v103 = v123;
            if (v102)
            {
              v104 = v102;
              swift_bridgeObjectRelease(v123);
              v105 = v127;
              sub_10000C1FC(v100, v127, &qword_1014958B0);
              KeyPath = swift_getKeyPath(&unk_100E2B770);
              __chkstk_darwin(KeyPath);
              *(&v122 - 2) = v107;
              v108 = swift_getKeyPath(&unk_100E2B7A0);
              v109 = v104;
              v137 = Color.init(uiColor:)(v109);
              v110 = sub_100010D70(&qword_1014958E0, &qword_1014958B0, (const char *)&protocol conformance descriptor for Range<A>);
              v111 = v124;
              v112 = (void (*)(_QWORD *, _QWORD))AttributedString.subscript.modify(v136, v105, v59, v110);
              v113 = sub_10006C5A8();
              AttributedSubstring.subscript.setter(&v137, v108, v113);
              v112(v136, 0);
              v114 = sub_100010CC4(v105, &qword_1014958B0);
              v115 = v131;
              UUID.init()(v114);

              sub_100010CC4(v100, &qword_1014958B0);
              v116 = type metadata accessor for PlaceSummaryViewModelUnit.Hours(0);
              v66 = v135;
              (*(void (**)(uint64_t, char *, uint64_t))(v126 + 32))(v135 + *(int *)(v116 + 20), v111, v125);
              v68 = *(void (**)(uint64_t, char *, uint64_t))(v130 + 32);
              v67 = v66;
              v69 = v115;
              v70 = v132;
              goto LABEL_31;
            }
            v118 = v133;
            AttributeContainer.init()(0);
            v119 = v36;
            v120 = AttributedString.init(_:attributes:)(v122, v103, v118);
            v121 = v131;
            UUID.init()(v120);

            sub_100010CC4(v100, &qword_1014958B0);
            v65 = v125;
            v57(v124, v125);
            v66 = v135;
            (*(void (**)(uint64_t, char *, uint64_t))(v130 + 32))(v135, v121, v132);
            v67 = v66 + *(int *)(type metadata accessor for PlaceSummaryViewModelUnit.Hours(0) + 20);
            v68 = *(void (**)(uint64_t, char *, uint64_t))(v126 + 32);
            v69 = v119;
LABEL_15:
            v70 = v65;
LABEL_31:
            v68(v67, v69, v70);
            v117 = type metadata accessor for PlaceSummaryViewModelUnit(0);
            swift_storeEnumTagMultiPayload(v66, v117, 12);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v117 - 8) + 56))(v66, 0, 1, v117);
            return;
          }
          v47 = (id)sub_100010CC4((uint64_t)v18, &qword_1014958A8);
          v43 = v123;
          v46 = v124;
          v41 = v122;
        }
        v60 = v133;
        AttributeContainer.init()(v47);
        v61 = v36;
        v62 = AttributedString.init(_:attributes:)(v41, v43, v60);
        v63 = v131;
        UUID.init()(v62);

        v65 = v125;
        v64 = v126;
        (*(void (**)(char *, uint64_t))(v126 + 8))(v46, v125);
        v66 = v135;
        (*(void (**)(uint64_t, char *, uint64_t))(v130 + 32))(v135, v63, v132);
        v67 = v66 + *(int *)(type metadata accessor for PlaceSummaryViewModelUnit.Hours(0) + 20);
        v68 = *(void (**)(uint64_t, char *, uint64_t))(v64 + 32);
        v69 = v61;
        goto LABEL_15;
      }
      swift_bridgeObjectRelease(v43);
    }
    goto LABEL_25;
  }
  v72 = (unint64_t)objc_msgSend(v134, "state");
  if (v72 > 6)
  {
LABEL_23:
    v97 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 56))(v135, 1, 1, v97);

    return;
  }
  if (((1 << v72) & 0x5E) == 0)
  {
LABEL_25:

    v38 = 0;
LABEL_26:
    v98 = type metadata accessor for PlaceSummaryViewModelUnit((uint64_t)v38);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v98 - 8) + 56))(v135, 1, 1, v98);
    return;
  }
  v73 = objc_msgSend(v134, "localizedOpenState");
  v74 = v135;
  if (v73)
  {
    v75 = v73;
    v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v73);
    v78 = v77;

    v79 = v133;
    AttributeContainer.init()(v80);
    AttributedString.init(_:attributes:)(v76, v78, v79);
    v81 = objc_msgSend(v134, "hoursStateLabelColor");
    if (v81)
    {
      v82 = v81;
      v83 = swift_getKeyPath(&unk_100E2B770);
      __chkstk_darwin(v83);
      *(&v122 - 2) = v84;
      v85 = swift_getKeyPath(&unk_100E2B7A0);
      v86 = v82;
      v136[0] = Color.init(uiColor:)(v86);
      v87 = sub_10006C5A8();
      AttributedString.subscript.setter(v136, v85, v87, v88);

    }
    v89 = v126;
    v90 = v36;
    v91 = v36;
    v92 = v125;
    v93 = (*(uint64_t (**)(char *, char *, uint64_t))(v126 + 16))(v91, v28, v125);
    v94 = v131;
    UUID.init()(v93);

    (*(void (**)(char *, uint64_t))(v89 + 8))(v28, v92);
    (*(void (**)(uint64_t, char *, uint64_t))(v130 + 32))(v74, v94, v132);
    v95 = type metadata accessor for PlaceSummaryViewModelUnit.Hours(0);
    (*(void (**)(uint64_t, char *, uint64_t))(v89 + 32))(v74 + *(int *)(v95 + 20), v90, v92);
    v96 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    swift_storeEnumTagMultiPayload(v74, v96, 12);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 56))(v74, 0, 1, v96);
  }
  else
  {

    v99 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v99 - 8) + 56))(v74, 1, 1, v99);
  }
}

void sub_1000E7804(void *a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  id v15;
  id v16;
  double v17;
  double v18;
  void *v19;
  char **v20;
  id v21;
  float v22;
  float v23;
  uint64_t PartyRatings;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  id v31;
  void *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  id v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 *v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  _QWORD v66[3];

  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v66[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend((id)objc_opt_self(MKPOIEnrichmentAvailibility), "shouldShowAppleRatingsForMapItem:", a1))
  {
    v14 = objc_msgSend(a1, "_geoMapItem");
    if (v14)
    {
      v15 = v14;
      v16 = objc_msgSend(v14, "_overallAppleRating");
      swift_unknownObjectRelease(v15);
      if (!v16)
      {
        v29 = type metadata accessor for PlaceSummaryViewModelUnit(0);
        v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56);
        v27 = a4;
        v28 = 1;
        goto LABEL_23;
      }
      objc_msgSend(v16, "percentage");
      v18 = v17;
      v19 = (void *)objc_opt_self(UIColor);
      v20 = &selRef_labelColor;
      if (v18 <= 0.5)
        v20 = &selRef__maps_systemGrayColor;
      v21 = objc_msgSend(v19, *v20);
      UUID.init()(v21);
      objc_msgSend(a1, "_normalizedUserRatingScore");
      v23 = v22;

      if ((~LODWORD(v23) & 0x7F800000) != 0)
      {
        if (v23 > -9.2234e18)
        {
          if (v23 < 9.2234e18)
          {
            PartyRatings = type metadata accessor for PlaceSummaryViewModelUnit.FirstPartyRatings(0);
            *(_QWORD *)(a4 + *(int *)(PartyRatings + 20)) = (uint64_t)v23;
            *(_QWORD *)(a4 + *(int *)(PartyRatings + 24)) = v21;
            v25 = type metadata accessor for PlaceSummaryViewModelUnit(0);
            swift_storeEnumTagMultiPayload(a4, v25, 5);
            v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
            v27 = a4;
            v28 = 0;
            v29 = v25;
LABEL_23:
            v26(v27, v28, 1, v29);
            return;
          }
          __break(1u);
          goto LABEL_75;
        }
        __break(1u);
        goto LABEL_73;
      }
      __break(1u);
LABEL_70:
      swift_bridgeObjectRelease(v4);
      goto LABEL_71;
    }
    goto LABEL_78;
  }
  if (!objc_msgSend(a1, "_sampleSizeForUserRatingScore"))
  {
    sub_1000F035C(a2 & 1, a4);
    return;
  }
  objc_msgSend(a1, "_normalizedUserRatingScore");
  v23 = v30;
  v31 = objc_msgSend(a1, "_localizedSampleSizeForUserRatingScoreString");
  if (!v31)
    goto LABEL_79;
  v32 = v31;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
  v4 = v33;

  v34 = HIBYTE(v4) & 0xF;
  v35 = v5 & 0xFFFFFFFFFFFFLL;
  if ((v4 & 0x2000000000000000) != 0)
    v36 = HIBYTE(v4) & 0xF;
  else
    v36 = v5 & 0xFFFFFFFFFFFFLL;
  if (!v36)
    goto LABEL_70;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
    {
      if ((v5 & 0x1000000000000000) != 0)
      {
        v37 = (unsigned __int8 *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
LABEL_20:
        v38 = (uint64_t)sub_1000F2A2C(v37, v35, 10);
        v40 = v39 & 1;
        goto LABEL_48;
      }
LABEL_75:
      v37 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v5, v4);
      goto LABEL_20;
    }
    v66[0] = v5;
    v66[1] = v4 & 0xFFFFFFFFFFFFFFLL;
    if (v5 == 43)
    {
      if (!v34)
        goto LABEL_77;
      if (v34 != 1 && (BYTE1(v5) - 48) <= 9u)
      {
        v38 = (BYTE1(v5) - 48);
        if (v34 == 2)
          goto LABEL_47;
        if ((BYTE2(v5) - 48) <= 9u)
        {
          v38 = 10 * (BYTE1(v5) - 48) + (BYTE2(v5) - 48);
          v41 = v34 - 3;
          if (v41)
          {
            v42 = (unsigned __int8 *)v66 + 3;
            while (1)
            {
              v43 = *v42 - 48;
              if (v43 > 9)
                goto LABEL_45;
              v44 = 10 * v38;
              if ((unsigned __int128)(v38 * (__int128)10) >> 64 != (10 * v38) >> 63)
                goto LABEL_45;
              v38 = v44 + v43;
              if (__OFADD__(v44, v43))
                goto LABEL_45;
              v40 = 0;
              ++v42;
              if (!--v41)
                goto LABEL_48;
            }
          }
          goto LABEL_47;
        }
      }
    }
    else
    {
      if (v5 == 45)
      {
        if (v34)
        {
          if (v34 == 1 || (BYTE1(v5) - 48) > 9u)
            goto LABEL_45;
          if (v34 == 2)
          {
            v40 = 0;
            v38 = -(uint64_t)(BYTE1(v5) - 48);
            goto LABEL_48;
          }
          if ((BYTE2(v5) - 48) > 9u)
            goto LABEL_45;
          v38 = -10 * (BYTE1(v5) - 48) - (BYTE2(v5) - 48);
          v59 = v34 - 3;
          if (v59)
          {
            v60 = (unsigned __int8 *)v66 + 3;
            while (1)
            {
              v61 = *v60 - 48;
              if (v61 > 9)
                goto LABEL_45;
              v62 = 10 * v38;
              if ((unsigned __int128)(v38 * (__int128)10) >> 64 != (10 * v38) >> 63)
                goto LABEL_45;
              v38 = v62 - v61;
              if (__OFSUB__(v62, v61))
                goto LABEL_45;
              v40 = 0;
              ++v60;
              if (!--v59)
                goto LABEL_48;
            }
          }
LABEL_47:
          v40 = 0;
          goto LABEL_48;
        }
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
        return;
      }
      if (v34 && (v5 - 48) <= 9u)
      {
        v38 = (v5 - 48);
        if (v34 == 1)
          goto LABEL_47;
        if ((BYTE1(v5) - 48) <= 9u)
        {
          v38 = 10 * (v5 - 48) + (BYTE1(v5) - 48);
          v55 = v34 - 2;
          if (v55)
          {
            v56 = (unsigned __int8 *)v66 + 2;
            while (1)
            {
              v57 = *v56 - 48;
              if (v57 > 9)
                goto LABEL_45;
              v58 = 10 * v38;
              if ((unsigned __int128)(v38 * (__int128)10) >> 64 != (10 * v38) >> 63)
                goto LABEL_45;
              v38 = v58 + v57;
              if (__OFADD__(v58, v57))
                goto LABEL_45;
              v40 = 0;
              ++v56;
              if (!--v55)
                goto LABEL_48;
            }
          }
          goto LABEL_47;
        }
      }
    }
LABEL_45:
    v38 = 0;
    v40 = 1;
    goto LABEL_48;
  }
LABEL_73:
  v38 = sub_1000F293C(v5, v4, 10, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_1000F2A2C);
  v40 = v64;
LABEL_48:
  swift_bridgeObjectRelease(v4);
  if ((v40 & 1) != 0)
  {
LABEL_71:
    v63 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(a4, 1, 1, v63);
    return;
  }
  UUID.init()(v45);
  v46 = sub_1000F04B4(v23);
  v47 = objc_msgSend(a1, "_reviewsDisplayName");
  if (v47)
  {
    v48 = v47;
    v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
    v51 = v50;

  }
  else
  {
    v49 = 0;
    v51 = 0;
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a4, v13, v10);
  v52 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.ThirdPartyRatings(0);
  *(float *)(a4 + v52[5]) = v23;
  *(_QWORD *)(a4 + v52[6]) = v46;
  *(_QWORD *)(a4 + v52[7]) = v38;
  v53 = (uint64_t *)(a4 + v52[8]);
  *v53 = v49;
  v53[1] = v51;
  *(_BYTE *)(a4 + v52[9]) = a3 & 1;
  v54 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  swift_storeEnumTagMultiPayload(a4, v54, 6);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(a4, 0, 1, v54);
}

uint64_t sub_1000E7E5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = objc_msgSend((id)objc_opt_self(CollectionManager), "sharedManager");
  v5 = objc_msgSend(v4, "firstUserGuideContainingMapItem:requiresOrdering:", a1, 0);

  if (v5)
  {
    v6 = v5;
    UUID.init()(v6);
    v7 = objc_msgSend(v6, "title");
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v11 = type metadata accessor for PlaceSummaryViewModelUnit.UserGeneratedGuide(0);
    v12 = (uint64_t *)(a2 + *(int *)(v11 + 20));
    *v12 = v8;
    v12[1] = v10;
    *(_QWORD *)(a2 + *(int *)(v11 + 24)) = v6;
    v13 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    swift_storeEnumTagMultiPayload(a2, v13, 4);
    v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
    v15 = a2;
    v16 = 0;
    v17 = v13;
  }
  else
  {
    v17 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
    v15 = a2;
    v16 = 1;
  }
  return v14(v15, v16, 1, v17);
}

void sub_1000E7F8C(unint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t IsEnabled_SearchAndDiscovery;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  double v31;
  double v32;
  id v33;
  void *v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  void *v57;
  uint64_t v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  void *v67;
  id v68;
  void *v69;
  void *v70;
  id v71;
  id v72;
  double v73;
  double v74;
  id v75;
  void *v76;
  id v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int *v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)&v8 = __chkstk_darwin(v6).n128_u64[0];
  v10 = (char *)&v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = objc_msgSend(a2, "_placeCollections", v8);
  if (!v11)
  {
    v18 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
    v20 = a3;
    goto LABEL_8;
  }
  v12 = v11;
  v94 = a3;
  v13 = sub_10000E4BC(0, (unint64_t *)&qword_10149A040, GEOPlaceCollection_ptr);
  v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v13);

  v16 = (unint64_t)v14 >> 62;
  if ((unint64_t)v14 >> 62)
  {
    if (v14 < 0)
      v90 = v14;
    else
      v90 = v14 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v14);
    v17 = _CocoaArrayWrapper.endIndex.getter(v90);
    swift_bridgeObjectRelease(v14);
    if ((v17 & 0x8000000000000000) != 0)
      goto LABEL_5;
  }
  else
  {
    v17 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v17 < a1)
  {
LABEL_5:
    swift_bridgeObjectRelease(v14);
LABEL_6:
    v18 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
    v20 = v94;
LABEL_8:
    v21 = 1;
LABEL_9:
    v19(v20, v21, 1, v18);
    return;
  }
  if (v17 < 2)
  {
    if (v17 != 1)
      goto LABEL_5;
    if (v16)
    {
      v65 = v14 < 0 ? v14 : v14 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v14);
      v55 = _CocoaArrayWrapper.endIndex.getter(v65);
      swift_bridgeObjectRelease(v14);
    }
    else
    {
      v55 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (!v55)
      goto LABEL_5;
    if ((v14 & 0xC000000000000001) != 0)
    {
      v66 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v14);
    }
    else
    {
      if (!*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }
      v66 = *(id *)(v14 + 32);
    }
    v67 = v66;
    v68 = objc_msgSend(v66, "publisherAttribution", swift_bridgeObjectRelease(v14).n128_f64[0]);
    if (v68)
    {
      v69 = v68;
      v70 = (void *)objc_opt_self(MKIconManager);
      v71 = objc_msgSend(v69, "iconIdentifier");
      v72 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
      objc_msgSend(v72, "scale");
      v74 = v73;

      v75 = objc_msgSend(v70, "imageForIconID:contentScale:sizeGroup:nightMode:", v71, 1, 0, v74);
      if (v75)
      {
        v76 = v75;
        v77 = objc_msgSend(v69, "displayName");
        if (!v77)
        {
          swift_unknownObjectRelease(v69);

          goto LABEL_6;
        }
        v78 = v77;
        v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
        v81 = v80;

        v39 = v94;
        UUID.init()(v82);
        v83 = objc_msgSend(v67, "collectionTitle");
        v84 = static String._unconditionallyBridgeFromObjectiveC(_:)(v83);
        v86 = v85;
        swift_unknownObjectRelease(v69);

        v87 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(0);
        *(_QWORD *)(v39 + v87[5]) = v76;
        v88 = (uint64_t *)(v39 + v87[6]);
        *v88 = v79;
        v88[1] = v81;
        v89 = (uint64_t *)(v39 + v87[7]);
        *v89 = v84;
        v89[1] = v86;
        *(_QWORD *)(v39 + v87[8]) = v67;
        v51 = type metadata accessor for PlaceSummaryViewModelUnit(0);
        v52 = v39;
        v53 = v51;
        v54 = 3;
        goto LABEL_43;
      }
      swift_unknownObjectRelease(v69);
    }

    goto LABEL_6;
  }
  IsEnabled_SearchAndDiscovery = MapsFeature_IsEnabled_SearchAndDiscovery(v15);
  if ((_DWORD)IsEnabled_SearchAndDiscovery)
  {
    if (v16)
    {
      if (v14 < 0)
        v64 = v14;
      else
        v64 = v14 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v14);
      if (_CocoaArrayWrapper.endIndex.getter(v64))
        goto LABEL_14;
    }
    else
    {
      v23 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v14);
      if (v23)
      {
LABEL_14:
        if ((v14 & 0xC000000000000001) != 0)
        {
          v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v14);
          goto LABEL_17;
        }
        if (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v24 = *(id *)(v14 + 32);
LABEL_17:
          v25 = v24;
          v26 = objc_msgSend(v24, "publisherAttribution", swift_bridgeObjectRelease(v14).n128_f64[0]);
          if (!v26)
          {

            goto LABEL_5;
          }
          v27 = v26;
          v28 = (void *)objc_opt_self(MKIconManager);
          v29 = objc_msgSend(v27, "iconIdentifier");
          v30 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
          objc_msgSend(v30, "scale");
          v32 = v31;

          v33 = objc_msgSend(v28, "imageForIconID:contentScale:sizeGroup:nightMode:", v29, 1, 0, v32);
          if (!v33)
          {

            swift_unknownObjectRelease(v27);
            goto LABEL_5;
          }
          v34 = v33;
          v35 = objc_msgSend(v27, "displayName");
          if (!v35)
          {

            swift_unknownObjectRelease(v27);
            goto LABEL_5;
          }
          v36 = v35;
          v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
          v91 = v38;
          v92 = v37;

          v93 = type metadata accessor for PlaceSummaryViewModelUnit.MultipleCuratedGuides(0);
          v39 = v94;
          v40 = v94 + *(int *)(v93 + 28);
          UUID.init()(v93);
          v41 = v34;
          v42 = objc_msgSend(v25, "collectionTitle");
          v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
          v45 = v44;

          v46 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(0);
          *(_QWORD *)(v40 + v46[5]) = v41;
          v47 = (uint64_t *)(v40 + v46[6]);
          v48 = v91;
          *v47 = v92;
          v47[1] = v48;
          v49 = (uint64_t *)(v40 + v46[7]);
          *v49 = v43;
          v49[1] = v45;
          *(_QWORD *)(v40 + v46[8]) = v25;
          UUID.init()(v46);
          swift_unknownObjectRelease(v27);

          (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v46 - 1) + 56))(v40, 0, 1, v46);
          v50 = v93;
          *(_QWORD *)(v39 + *(int *)(v93 + 20)) = v17;
          *(_QWORD *)(v39 + *(int *)(v50 + 24)) = v14;
          v51 = type metadata accessor for PlaceSummaryViewModelUnit(0);
          v52 = v39;
          v53 = v51;
          v54 = 2;
LABEL_43:
          swift_storeEnumTagMultiPayload(v52, v53, v54);
          v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56);
          v20 = v39;
          v21 = 0;
          v18 = v51;
          goto LABEL_9;
        }
        __break(1u);
        goto LABEL_58;
      }
    }
    swift_bridgeObjectRelease(v14);
    goto LABEL_5;
  }
  UUID.init()(IsEnabled_SearchAndDiscovery);
  v56 = objc_msgSend(a2, "_placeCollections", swift_bridgeObjectRelease(v14).n128_f64[0]);
  if (v56)
  {
    v57 = v56;
    v58 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v56, v13);

    v59 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.MultipleCuratedGuides(0);
    v60 = v94;
    v61 = v94 + v59[7];
    v62 = type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v61, 1, 1, v62);
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v60, v10, v6);
    *(_QWORD *)(v60 + v59[5]) = v17;
    *(_QWORD *)(v60 + v59[6]) = v58;
    v63 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    swift_storeEnumTagMultiPayload(v60, v63, 2);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v60, 0, 1, v63);
    return;
  }
LABEL_59:
  __break(1u);
}

uint64_t sub_1000E86A0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  _BYTE v26[24];

  if (a1 && (v4 = objc_msgSend(a1, "_realTimeAvailableEVCharger")) != 0)
  {
    v5 = v4;
    v6 = sub_1001E2534(v4, 0);
    v8 = v7;
    v9 = objc_msgSend((id)objc_opt_self(SearchVirtualGarageManager), "sharedSearchVirtualGarageManager");
    v10 = objc_msgSend(v9, "virtualGarage");

    if (v10)
    {
      v11 = objc_msgSend((id)objc_opt_self(MUEVChargingHelper), "getRealTimeEVChargerInfo:charger:", v10, v5);
      v12 = objc_msgSend(v11, "status");

    }
    else
    {
      v12 = objc_msgSend(v5, "_realTimePlugAvailabilityStatus");
    }
    v15 = type metadata accessor for PlaceSummaryEVChargerViewModel(0);
    v16 = swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
    UUID.init()(a1);
    swift_beginAccess(v16 + OBJC_IVAR____TtC4Maps30PlaceSummaryEVChargerViewModel__displayString, v26, 33, 0);
    v25[0] = v6;
    v25[1] = v8;
    Published.init(initialValue:)(v25, &type metadata for String);
    swift_endAccess(v26);
    swift_beginAccess(v16 + OBJC_IVAR____TtC4Maps30PlaceSummaryEVChargerViewModel__evChargerStatus, v26, 33, 0);
    LODWORD(v25[0]) = v12;
    type metadata accessor for GEOEVChargerAvailability_RealTimeStatus(0);
    Published.init(initialValue:)(v25, v17);
    swift_endAccess(v26);
    *(_QWORD *)(v16 + OBJC_IVAR____TtC4Maps30PlaceSummaryEVChargerViewModel_mapItem) = a1;
    v18 = type metadata accessor for PlaceSummaryViewModelUnit.RealTimeAvailableCharger(0);
    v19 = swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
    UUID.init()(v19);
    v20 = (_QWORD *)(v19 + OBJC_IVAR____TtCO4Maps25PlaceSummaryViewModelUnit24RealTimeAvailableCharger__chargerViewModel);
    swift_beginAccess(v19 + OBJC_IVAR____TtCO4Maps25PlaceSummaryViewModelUnit24RealTimeAvailableCharger__chargerViewModel, v26, 33, 0);
    v21 = sub_10000BC84((unint64_t *)&unk_10149A580, type metadata accessor for PlaceSummaryEVChargerViewModel, (uint64_t)&unk_100E28174);
    swift_retain();
    *v20 = ObservedObject.init(wrappedValue:)(v22, v15, v21);
    v20[1] = v23;
    swift_endAccess(v26);

    swift_release();
    *a2 = v19;
    v24 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    swift_storeEnumTagMultiPayload(a2, v24, 13);
    return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(a2, 0, 1, v24);
  }
  else
  {
    v13 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a2, 1, 1, v13);
  }
}

uint64_t sub_1000E899C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD v21[2];
  _BYTE v22[24];

  v4 = objc_msgSend(a1, "_chargerNumberString");
  if (v4)
  {
    v5 = v4;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v8 = v7;

    v9 = type metadata accessor for PlaceSummaryEVChargerViewModel(0);
    v10 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
    UUID.init()(a1);
    swift_beginAccess(v10 + OBJC_IVAR____TtC4Maps30PlaceSummaryEVChargerViewModel__displayString, v22, 33, 0);
    v21[0] = v6;
    v21[1] = v8;
    Published.init(initialValue:)(v21, &type metadata for String);
    swift_endAccess(v22);
    swift_beginAccess(v10 + OBJC_IVAR____TtC4Maps30PlaceSummaryEVChargerViewModel__evChargerStatus, v22, 33, 0);
    LODWORD(v21[0]) = 0;
    type metadata accessor for GEOEVChargerAvailability_RealTimeStatus(0);
    Published.init(initialValue:)(v21, v11);
    swift_endAccess(v22);
    *(_QWORD *)(v10 + OBJC_IVAR____TtC4Maps30PlaceSummaryEVChargerViewModel_mapItem) = a1;
    v12 = type metadata accessor for PlaceSummaryViewModelUnit.RealTimeAvailableCharger(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    UUID.init()(v13);
    v14 = (_QWORD *)(v13 + OBJC_IVAR____TtCO4Maps25PlaceSummaryViewModelUnit24RealTimeAvailableCharger__chargerViewModel);
    swift_beginAccess(v13 + OBJC_IVAR____TtCO4Maps25PlaceSummaryViewModelUnit24RealTimeAvailableCharger__chargerViewModel, v22, 33, 0);
    v15 = sub_10000BC84((unint64_t *)&unk_10149A580, type metadata accessor for PlaceSummaryEVChargerViewModel, (uint64_t)&unk_100E28174);
    swift_retain();
    *v14 = ObservedObject.init(wrappedValue:)(v16, v9, v15);
    v14[1] = v17;
    swift_endAccess(v22);
    swift_release();
    *a2 = v13;
    v18 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    swift_storeEnumTagMultiPayload(a2, v18, 13);
    return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a2, 0, 1, v18);
  }
  else
  {
    v20 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a2, 1, 1, v20);
  }
}

uint64_t sub_1000E8BE0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  id v5;
  id v6;
  BOOL v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((objc_msgSend((id)objc_opt_self(MKPOIEnrichmentAvailibility), "shouldShowAppleRatingsForMapItem:", a1) & 1) == 0)goto LABEL_6;
  v4 = objc_msgSend((id)objc_opt_self(UGCReviewedPlaceManager), "locallyCachedReviewedPlaceForMUID:", objc_msgSend(a1, "_muid"));
  if (!v4)
    goto LABEL_6;
  v5 = v4;
  if (!objc_msgSend(v5, "recommendState"))
  {

LABEL_6:
    v12 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
    v10 = a2;
    v11 = 1;
    return v9(v10, v11, 1, v12);
  }
  v6 = objc_msgSend(v5, "recommendState");
  v7 = v6 == (id)2;
  UUID.init()(v6);

  *(_BYTE *)(a2 + *(int *)(type metadata accessor for PlaceSummaryViewModelUnit.UGCUserRecommendations(0) + 20)) = v7;
  v8 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  swift_storeEnumTagMultiPayload(a2, v8, 7);
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56);
  v10 = a2;
  v11 = 0;
  v12 = v8;
  return v9(v10, v11, 1, v12);
}

void sub_1000E8D14(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  NSString v21;
  id v22;
  uint64_t v23;
  void *v24;
  NSString v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  _BOOL8 v50;
  int *v51;
  uint64_t v52;
  char *v53;
  void *v54;
  void *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  int v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  char *v79;
  _QWORD v80[2];

  v70 = a2;
  v76 = a3;
  v4 = type metadata accessor for UUID(0);
  v74 = *(_QWORD *)(v4 - 8);
  v75 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v72 = (char *)&v64 - v8;
  v73 = type metadata accessor for PlaceSummaryViewModelUnit.Label(0);
  __chkstk_darwin(v73);
  v10 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = type metadata accessor for PlaceSummaryImageViewModel.ImageType(0);
  __chkstk_darwin(v66);
  v12 = (uint64_t *)((char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = type metadata accessor for AttributedString(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v69 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v78 = a1;
  v79 = (char *)&v64 - v18;
  if (a1[3])
  {
    v19 = v17;
    v20 = (void *)objc_opt_self(UIColor);
    v21 = String._bridgeToObjectiveC()();
    v22 = objc_msgSend(v20, "_maps_colorFromHexString:", v21);

    if (!v22)
    {
      __break(1u);
      goto LABEL_17;
    }
    v77 = Color.init(uiColor:)(v22);
    v17 = v19;
    a1 = v78;
  }
  else
  {
    v77 = 0;
  }
  v68 = v17;
  v23 = v14;
  if (!a1[7])
  {
    v67 = 0;
    v27 = (uint64_t)v79;
    goto LABEL_9;
  }
  v24 = (void *)objc_opt_self(UIColor);
  v25 = String._bridgeToObjectiveC()();
  v26 = objc_msgSend(v24, "_maps_colorFromHexString:", v25);

  if (!v26)
  {
LABEL_17:
    __break(1u);
    return;
  }
  v67 = Color.init(uiColor:)(v26);
  a1 = v78;
  v27 = (uint64_t)v79;
LABEL_9:
  v65 = v6;
  v28 = sub_1000F051C(*a1, a1[1], a1[10], v77, 0, v70 & 1, v27);
  v29 = (void *)a1[12];
  if (v29)
  {
    v30 = objc_allocWithZone((Class)MapsUIImageGEOFeatureSpec);
    v31 = v29;
    v32 = objc_msgSend(v30, "init");
    objc_msgSend(v32, "setStyle:", v31);
    objc_msgSend(v32, "setMarkerFallback:", 0);
    v33 = sub_100008B04(&qword_101495DB0);
    v34 = swift_allocBox(v33);
    v36 = v35;
    v37 = v35 + *(int *)(v33 + 96);
    v38 = *(int *)(v33 + 112);
    *(_QWORD *)v35 = v32;
    *(_QWORD *)(v35 + 8) = 0;
    *(_QWORD *)(v35 + 24) = 0;
    *(_BYTE *)(v35 + 16) = 0;
    v39 = enum case for Image.TemplateRenderingMode.original(_:);
    v40 = type metadata accessor for Image.TemplateRenderingMode(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 104))(v37, v39, v40);
    v41 = v32;
    *(_QWORD *)(v36 + v38) = static Color.clear.getter(v41);
    v27 = (uint64_t)v79;
    *v12 = v34;
    swift_storeEnumTagMultiPayload(v12, v66, 2);
    v42 = type metadata accessor for PlaceSummaryImageViewModel(0);
    v43 = swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
    v80[0] = 0;
    v44 = sub_100008B04((uint64_t *)&unk_101497210);
    v45 = Published.init(initialValue:)(v80, v44);
    UUID.init()(v45);
    sub_10003F29C((uint64_t)v12, v43 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_type, type metadata accessor for PlaceSummaryImageViewModel.ImageType);
    v46 = v43 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_cornerRadius;
    *(_QWORD *)v46 = 0;
    *(_BYTE *)(v46 + 8) = 1;

  }
  else
  {
    v43 = 0;
  }
  v47 = v72;
  UUID.init()(v28);
  v48 = v68;
  v49 = v69;
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v69, v27, v68);
  LODWORD(v71) = v78[11] & 1;
  v50 = (_DWORD)v71 == 0;
  sub_1000207BC((uint64_t)(v78 + 4), (uint64_t)v80, &qword_101495CE0);
  v51 = (int *)v73;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(&v10[*(int *)(v73 + 48)], 1, 1, v48);
  v52 = v75;
  v74 = *(_QWORD *)(v74 + 32);
  ((void (*)(char *, char *, uint64_t))v74)(v10, v47, v75);
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(&v10[v51[5]], v49, v48);
  sub_1000207BC((uint64_t)v80, (uint64_t)&v10[v51[6]], &qword_101495CE0);
  *(_QWORD *)&v10[v51[7]] = v67;
  *(_QWORD *)&v10[v51[8]] = 0;
  *(_QWORD *)&v10[v51[9]] = v43;
  *(_QWORD *)&v10[v51[10]] = 0;
  v53 = &v10[v51[11]];
  *(_QWORD *)v53 = v50;
  v53[8] = v71;
  v54 = sub_1000A3BF4();
  if (v54)
  {
    v55 = v54;
    sub_10006E484((uint64_t)v80);
    swift_retain();
    swift_retain();
    v56 = v65;
    UUID.init()(v57);
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v79, v48);
    v58 = type metadata accessor for PlaceSummaryViewModelUnit.TappableEntry(0);
    v59 = v76;
    sub_10003F29C((uint64_t)v10, v76 + *(int *)(v58 + 20), type metadata accessor for PlaceSummaryViewModelUnit.Label);
    ((void (*)(uint64_t, char *, uint64_t))v74)(v59, v56, v52);
    *(_QWORD *)(v59 + *(int *)(v58 + 24)) = v55;
    v60 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    v61 = v59;
    v62 = v60;
    v63 = 10;
  }
  else
  {
    sub_10006E484((uint64_t)v80);
    swift_release();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v79, v48);
    v59 = v76;
    sub_10003F29C((uint64_t)v10, v76, type metadata accessor for PlaceSummaryViewModelUnit.Label);
    v60 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    v61 = v59;
    v62 = v60;
    v63 = 0;
  }
  swift_storeEnumTagMultiPayload(v61, v62, v63);
  type metadata accessor for PlaceSummaryViewModelUnit(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v59, 0, 1, v60);
}

void sub_1000E9340(id a1@<X1>, char a2@<W0>, uint64_t *a3@<X8>)
{
  id v5;
  void *v6;
  id v7;
  __n128 v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  DataSource *v21;
  Swift::OpaquePointer v22;
  double v23;
  double v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  void *v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  _QWORD *v41;
  uint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  id v52;
  id v53;
  uint64_t v54;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  __n128 v67;
  uint64_t *v68;
  _QWORD *v69;

  if (!a2)
  {
    v13 = objc_msgSend(a1, "_geoMapItem");
    if (!v13
      || (v14 = v13,
          v15 = objc_msgSend(v13, "_containedPlace"),
          swift_unknownObjectRelease(v14),
          !v15)
      || (v16 = objc_msgSend(v15, "parent"), v15, !v16)
      || (v17 = objc_msgSend(v16, "_identifier"),
          swift_unknownObjectRelease(v16),
          !v17))
    {
      v5 = objc_msgSend(a1, "_venueInfo");
      if (!v5)
        goto LABEL_20;
      v18 = v5;
      v19 = objc_msgSend(v5, "parent");
      swift_unknownObjectRelease(v18);
      if (!v19)
      {
LABEL_19:
        v5 = 0;
        goto LABEL_20;
      }
      v20 = objc_msgSend(v19, "businessID");

      v21 = (DataSource *)objc_msgSend(a1, "_coordinate");
      CollectionPickerContaineeViewController.dataSource(_:didChangeSelectedCollections:)(v21, v22);
      v5 = objc_msgSend(objc_allocWithZone((Class)GEOMapItemIdentifier), "initWithMUID:coordinate:", v20, v23, v24);
      v17 = v5;
      if (!v5)
        goto LABEL_20;
    }
    v25 = objc_msgSend(objc_allocWithZone((Class)MKMapItemIdentifier), "initWithGEOMapItemIdentifier:", v17);

    if (v25)
    {
      v26 = type metadata accessor for PlaceSummaryViewModelUnit.ContainmentParent(0);
      v27 = swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
      v28 = v25;
      UUID.init()(v28);
      v69 = 0;
      v29 = sub_100008B04((uint64_t *)&unk_101496C20);
      Published.init(initialValue:)(&v69, v29);
      *(_QWORD *)(v27 + OBJC_IVAR____TtCO4Maps25PlaceSummaryViewModelUnit17ContainmentParent_parentIdentifier) = v28;

      *a3 = v27;
      v30 = type metadata accessor for PlaceSummaryViewModelUnit(0);
      swift_storeEnumTagMultiPayload(a3, v30, 9);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(a3, 0, 1, v30);
      return;
    }
    goto LABEL_19;
  }
  if (a2 == 1)
  {
    v5 = objc_msgSend(objc_allocWithZone((Class)PlaceSummaryContainmentGeoViewModel), "initWithMapItem:", a1);
    if (v5)
    {
      v6 = v5;
      v7 = objc_msgSend(v5, "containment");
      if (v7)
      {
        v9 = v7;
        v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
        v12 = v11;

      }
      else
      {
        v10 = 0;
        v12 = 0;
      }
      sub_1000E67E0(v10, v12, 0, 0, 0, 0, 0, 0, (uint64_t)a3, v8, 0);

      swift_bridgeObjectRelease(v12);
      return;
    }
LABEL_20:
    v42 = type metadata accessor for PlaceSummaryViewModelUnit((uint64_t)v5);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(a3, 1, 1, v42);
    return;
  }
  v5 = objc_msgSend(objc_allocWithZone((Class)PlaceSummaryContainmentGeoViewModel), "initWithMapItem:", a1);
  if (!v5)
    goto LABEL_20;
  v31 = v5;
  v68 = a3;
  v32 = objc_msgSend(v5, "prefix");
  if (v32)
  {
    v33 = v32;
    v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    v36 = v35;

    v37 = sub_1000A89A8(0, 1, 1, _swiftEmptyArrayStorage);
    v39 = v37[2];
    v38 = v37[3];
    v40 = (uint64_t *)(v39 + 1);
    if (v39 >= v38 >> 1)
      goto LABEL_47;
    goto LABEL_18;
  }
  v37 = _swiftEmptyArrayStorage;
LABEL_24:
  v43 = objc_msgSend(v31, "containment");
  if (v43)
  {
    v44 = v43;
    v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
    v47 = v46;

    if ((swift_isUniquelyReferenced_nonNull_native(v37) & 1) == 0)
      v37 = sub_1000A89A8(0, v37[2] + 1, 1, v37);
    v49 = v37[2];
    v48 = v37[3];
    if (v49 >= v48 >> 1)
      v37 = sub_1000A89A8((_QWORD *)(v48 > 1), v49 + 1, 1, v37);
    v37[2] = v49 + 1;
    v50 = &v37[2 * v49];
    v50[4] = v45;
    v50[5] = v47;
  }
  v51 = (uint64_t)v68;
  v52 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v53 = objc_msgSend(v52, "userInterfaceLayoutDirection");

  if (v53 == (id)1)
  {
    v54 = v37[2];
    if (v54)
    {
      v34 = v54 - 1;
      if (v54 != 1)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v37) & 1) == 0)
          v37 = sub_10020D8F8(v37);
        v36 = &v37[2 * v54 + 3];
        v40 = v37 + 5;
        v39 = 1;
        while (1)
        {
          v38 = v39 - 1;
          if (v39 - 1 != v34)
          {
            v56 = v37[2];
            if (v38 >= v56)
            {
              __break(1u);
LABEL_45:
              __break(1u);
LABEL_46:
              __break(1u);
LABEL_47:
              v37 = sub_1000A89A8((_QWORD *)(v38 > 1), (int64_t)v40, 1, v37);
LABEL_18:
              v37[2] = v40;
              v41 = &v37[2 * v39];
              v41[4] = v34;
              v41[5] = v36;
              goto LABEL_24;
            }
            if (v34 >= v56)
              goto LABEL_45;
            v57 = *(v40 - 1);
            v58 = *v40;
            v59 = *v36;
            *(v40 - 1) = *(v36 - 1);
            *v40 = v59;
            v60 = v37[2];
            swift_bridgeObjectRetain(v59);
            if (v34 >= v60)
              goto LABEL_46;
            v61 = *v36;
            *(v36 - 1) = v57;
            *v36 = v58;
            swift_bridgeObjectRelease(v61);
          }
          --v34;
          v36 -= 2;
          v40 += 2;
          if (v39++ >= (uint64_t)v34)
          {
            v51 = (uint64_t)v68;
            break;
          }
        }
      }
    }
  }
  v69 = v37;
  v62 = sub_100008B04((uint64_t *)&unk_101492C00);
  v63 = sub_100010D70((unint64_t *)&qword_10149A590, (uint64_t *)&unk_101492C00, (const char *)&protocol conformance descriptor for [A]);
  v64 = BidirectionalCollection<>.joined(separator:)(32, 0xE100000000000000, v62, v63);
  v66 = v65;
  v67 = swift_bridgeObjectRelease(v37);
  sub_1000E67E0(v64, v66, 0, 0, 0, 0, 0, 0, v51, v67, 0);
  swift_bridgeObjectRelease(v66);

}

void sub_1000E9994(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  id v37;
  __n128 v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v5 = objc_msgSend(a1, "_encyclopedicInfo");
  if (!v5)
    goto LABEL_26;
  v6 = v5;
  v7 = objc_msgSend(v5, "placeSummaryFactoids");
  if (!v7)
  {
    swift_unknownObjectRelease(v6);
LABEL_26:
    v45 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(a3, 1, 1, v45);
    return;
  }
  v8 = v7;
  v9 = sub_100008B04(&qword_10149A600);
  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);

  if ((unint64_t)v10 >> 62)
    goto LABEL_21;
  if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10) <= a2)
  {
LABEL_25:
    swift_unknownObjectRelease(v6);
    swift_bridgeObjectRelease(v10);
    goto LABEL_26;
  }
  while (1)
  {
    if ((v10 & 0xC000000000000001) != 0)
    {
      v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, v10);
    }
    else
    {
      if (a2 < 0)
      {
        __break(1u);
LABEL_29:
        __break(1u);
        return;
      }
      if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10) <= (unint64_t)a2)
        goto LABEL_29;
      v11 = *(_QWORD *)(v10 + 8 * a2 + 32);
      swift_unknownObjectRetain(v11);
    }
    swift_bridgeObjectRelease(v10);
    v46 = v11;
    v10 = (uint64_t)objc_msgSend((id)objc_opt_self(MUFactoidViewModel), "viewModelForFactoid:", v11);
    v12 = sub_100008B04(&qword_101492BF0);
    v13 = swift_allocObject(v12, 96, 7);
    *(_OWORD *)(v13 + 16) = xmmword_100E255C0;
    v14 = objc_msgSend((id)v10, "titleString");
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

    *(_QWORD *)(v13 + 32) = v15;
    *(_QWORD *)(v13 + 40) = v17;
    *(_QWORD *)(v13 + 48) = 58;
    *(_QWORD *)(v13 + 56) = 0xE100000000000000;
    *(_QWORD *)(v13 + 64) = 32;
    *(_QWORD *)(v13 + 72) = 0xE100000000000000;
    v18 = objc_msgSend((id)v10, "valueString");
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v21 = v20;

    *(_QWORD *)(v13 + 80) = v19;
    *(_QWORD *)(v13 + 88) = v21;
    a2 = (uint64_t)objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
    v22 = objc_msgSend((id)a2, "userInterfaceLayoutDirection");

    if (v22 != (id)1)
      break;
    v23 = (uint64_t *)(v13 + 88);
    v24 = (uint64_t *)(v13 + 40);
    v25 = 3;
    v26 = 1;
    while (1)
    {
      v27 = *(_QWORD *)(v13 + 16);
      if (v26 - 1 >= v27)
        break;
      if (v25 >= v27)
        goto LABEL_20;
      v29 = *(v24 - 1);
      v28 = *v24;
      v30 = *v23;
      *(v24 - 1) = *(v23 - 1);
      *v24 = v30;
      a2 = *v23;
      *(v23 - 1) = v29;
      *v23 = v28;
      swift_bridgeObjectRetain(v30);
      swift_bridgeObjectRelease(a2);
      --v25;
      v23 -= 2;
      v24 += 2;
      if (v26++ >= v25)
        goto LABEL_14;
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    if (v10 < 0)
      v43 = v10;
    else
      v43 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v44 = _CocoaArrayWrapper.endIndex.getter(v43);
    swift_bridgeObjectRelease(v10);
    if (v44 <= a2)
      goto LABEL_25;
  }
LABEL_14:
  v32 = sub_100008B04((uint64_t *)&unk_101492C00);
  v33 = sub_100010D70((unint64_t *)&qword_10149A590, (uint64_t *)&unk_101492C00, (const char *)&protocol conformance descriptor for [A]);
  v34 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v32, v33);
  v36 = v35;
  v37 = objc_msgSend((id)v10, "symbolName", swift_bridgeObjectRelease(v13).n128_f64[0]);
  if (v37)
  {
    v39 = v37;
    v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
    v42 = v41;

  }
  else
  {
    v40 = 0;
    v42 = 0;
  }
  sub_1000E67E0(v34, v36, v40, v42, 0, 0, 0, 0, a3, v38, 0);
  swift_bridgeObjectRelease(v36);
  swift_unknownObjectRelease(v6);

  swift_unknownObjectRelease(v46);
  swift_bridgeObjectRelease(v42);
}

void sub_1000E9D8C(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12[2];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  if ((a3 & 1) != 0)
    a2 = 2;
  v6 = objc_msgSend(a1, "venueLabelWithContext:", a2);
  if (v6)
  {
    v7 = v6;
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v10 = v9;

    if (String.count.getter(v8, v10) > 0)
    {
      v12[0] = v8;
      v12[1] = v10;
      v13 = 0u;
      v14 = 0u;
      v15 = 0u;
      v16 = 0;
      v17 = 1;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      sub_1000E8D14(v12, 0, a4);
      swift_bridgeObjectRelease_n(0, 4);
      swift_bridgeObjectRelease(v10);
      return;
    }
    swift_bridgeObjectRelease(v10);
  }
  v11 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a4, 1, 1, v11);
}

void sub_1000E9E98(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  id v4;
  id v5;
  id v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15[2];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v3 = objc_msgSend(a1, "_venueInfo");
  if (v3
    && (v4 = v3,
        v5 = objc_msgSend(v3, "contents"),
        swift_unknownObjectRelease(v4),
        v5))
  {
    v6 = objc_msgSend(v5, "items");
    swift_unknownObjectRelease(v5);
    v7 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, &type metadata for String);

    if (!v7[2])
    {
LABEL_4:
      v8 = type metadata accessor for PlaceSummaryViewModelUnit(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a2, 1, 1, v8);
      swift_bridgeObjectRelease(v7);
      return;
    }
  }
  else
  {
    v7 = _swiftEmptyArrayStorage;
    if (!_swiftEmptyArrayStorage[2])
      goto LABEL_4;
  }
  v15[0] = (uint64_t)v7;
  v9 = sub_100008B04((uint64_t *)&unk_101492C00);
  v10 = sub_100010D70((unint64_t *)&qword_10149A590, (uint64_t *)&unk_101492C00, (const char *)&protocol conformance descriptor for [A]);
  v11 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v9, v10);
  v13 = v12;
  swift_bridgeObjectRelease(v7);
  if (String.count.getter(v11, v13) <= 0)
  {
    swift_bridgeObjectRelease(v13);
    v14 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a2, 1, 1, v14);
  }
  else
  {
    v15[0] = v11;
    v15[1] = v13;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0;
    v20 = 1;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    sub_1000E8D14(v15, 0, a2);
    swift_bridgeObjectRelease_n(0, 4);
    swift_bridgeObjectRelease(v13);
  }
}

void sub_1000EA094(id a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t countAndFlagsBits;
  id v4;
  void *v5;
  NSString v6;
  unint64_t object;
  NSBundle v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  void *v15;
  Swift::String v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21[2];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  countAndFlagsBits = (uint64_t)a1;
  if (a1)
  {
    switch(objc_msgSend(a1, "locationType"))
    {
      case 0u:
        v4 = objc_msgSend((id)countAndFlagsBits, "address");
        if (!v4)
        {
          __break(1u);
          JUMPOUT(0x1000EA40CLL);
        }
        v5 = v4;
        v6 = objc_msgSend(v4, "localizedLabel");

        if (v6)
          goto LABEL_21;
        goto LABEL_5;
      case 1u:
        if (qword_101490ED0 != -1)
          swift_once(&qword_101490ED0, sub_10011833C);
        v8.super.isa = (Class)qword_1014D4B80;
        v9 = 0xD000000000000027;
        v20 = 0x8000000100E49650;
        v10 = 0x8000000100E49630;
        v11 = 0xD000000000000014;
        v12 = 1701670728;
        goto LABEL_18;
      case 2u:
        if (qword_101490ED0 != -1)
          swift_once(&qword_101490ED0, sub_10011833C);
        v8.super.isa = (Class)qword_1014D4B80;
        v9 = 0xD000000000000027;
        v20 = 0x8000000100E49600;
        v10 = 0x8000000100E495E0;
        v11 = 0xD000000000000014;
        v12 = 1802661719;
LABEL_18:
        v13 = 0xE400000000000000;
        goto LABEL_19;
      case 3u:
        if (qword_101490ED0 != -1)
          swift_once(&qword_101490ED0, sub_10011833C);
        v8.super.isa = (Class)qword_1014D4B80;
        v11 = 0xD000000000000016;
        v9 = 0xD000000000000029;
        v20 = 0x8000000100E495B0;
        v10 = 0x8000000100E49590;
        v12 = 0x6C6F6F686353;
        v13 = 0xE600000000000000;
LABEL_19:
        v16 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v11, (Swift::String_optional)0, v8, *(Swift::String *)&v12, *(Swift::String *)&v9);
        countAndFlagsBits = v16._countAndFlagsBits;
        object = (unint64_t)v16._object;
        goto LABEL_22;
      case 4u:
        v14 = objc_msgSend((id)countAndFlagsBits, "autocompletePerson");
        if (v14)
        {
          v15 = v14;
          v6 = sub_1001EFC78();

        }
        else
        {
          sub_10000E4BC(0, &qword_10149A608, NSString_ptr);
          v6 = (NSString)NSString.init(stringLiteral:)("", 0, 2);
        }
LABEL_21:
        countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
        object = v17;

        goto LABEL_22;
      default:
LABEL_5:
        countAndFlagsBits = 0;
        break;
    }
  }
  object = 0xE000000000000000;
LABEL_22:
  v18 = HIBYTE(object) & 0xF;
  if ((object & 0x2000000000000000) == 0)
    v18 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (v18 && String.count.getter(countAndFlagsBits, object) >= 1)
  {
    v21[0] = countAndFlagsBits;
    v21[1] = object;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0;
    v26 = 1;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    sub_1000E8D14(v21, 0, a2);
    swift_bridgeObjectRelease_n(0, 4);
    swift_bridgeObjectRelease(object);
  }
  else
  {
    swift_bridgeObjectRelease(object);
    v19 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a2, 1, 1, v19);
  }
}

uint64_t sub_1000EA420@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v42;
  id v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  _QWORD *v47;
  id v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  double v62;
  id v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v4 = type metadata accessor for PlaceSummaryViewModelUnit.PhotoCarousel(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v7 = a1;
    v8 = objc_msgSend(v7, "_identifier");
    if (v8)
    {
      v9 = v8;
      v10 = objc_msgSend(v7, "_searchResultPhotoCarousel");
      if (v10)
      {
        v11 = v10;
        v12 = sub_100008B04(&qword_101495C28);
        v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v12);

        v14 = type metadata accessor for PlaceSummaryPhotoCarouselViewModel(0);
        swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
        v15 = v7;
        v16 = sub_100088F28((uint64_t)v15, 0);
        swift_retain();
        UUID.init()(v17);
        v18 = &v6[*(int *)(v4 + 20)];
        v19 = sub_10000BC84((unint64_t *)&unk_101494BC0, type metadata accessor for PlaceSummaryPhotoCarouselViewModel, (uint64_t)&unk_100E2820C);
        v72 = v16;
        *(_QWORD *)v18 = ObservedObject.init(wrappedValue:)(v16, v14, v19);
        *((_QWORD *)v18 + 1) = v20;
        if (qword_101490EA8 != -1)
          swift_once(&qword_101490EA8, sub_1001147B8);
        v21 = type metadata accessor for Logger(0);
        sub_10000E918(v21, (uint64_t)qword_1014D4B08);
        v22 = v15;
        v23 = v9;
        v24 = v22;
        v25 = v23;
        v26 = swift_bridgeObjectRetain(v13);
        v27 = Logger.logObject.getter(v26);
        v28 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v27, v28))
        {
          v71 = a2;
          v29 = swift_slowAlloc(32, -1);
          v70 = swift_slowAlloc(32, -1);
          v73 = v70;
          *(_DWORD *)v29 = 136381187;
          v30 = objc_msgSend(v24, "name");
          if (v30)
          {
            v31 = v30;
            v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
            v34 = v33;

          }
          else
          {
            v32 = 0;
            v34 = 0xE000000000000000;
          }
          v75 = sub_1000C28FC(v32, v34, &v73);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v29 + 4, v29 + 12);

          *(_QWORD *)&v53 = swift_bridgeObjectRelease(v34).n128_u64[0];
          *(_WORD *)(v29 + 12) = 2049;
          v54 = objc_msgSend(v25, "muid", v53);

          v75 = (uint64_t)v54;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v29 + 14, v29 + 22);

          *(_WORD *)(v29 + 22) = 2048;
          if ((unint64_t)v13 >> 62)
          {
            if (v13 < 0)
              v68 = v13;
            else
              v68 = v13 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v13);
            v55 = _CocoaArrayWrapper.endIndex.getter(v68);
            swift_bridgeObjectRelease(v13);
          }
          else
          {
            v55 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          a2 = v71;
          swift_bridgeObjectRelease(v13);
          v75 = v55;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v29 + 24, v29 + 32);
          swift_bridgeObjectRelease(v13);
          _os_log_impl((void *)&_mh_execute_header, v27, v28, "[Place Summary] Mapitem %{private}s, muid: %{private}llu has photo carousel with %ld photos", (uint8_t *)v29, 0x20u);
          v56 = v70;
          swift_arrayDestroy(v70, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v56, -1, -1);
          swift_slowDealloc(v29, -1, -1);

          swift_release();
        }
        else
        {

          swift_release();
          swift_bridgeObjectRelease_n(v13, 2);
        }
        sub_10003F29C((uint64_t)v6, a2, type metadata accessor for PlaceSummaryViewModelUnit.PhotoCarousel);
        v57 = type metadata accessor for PlaceSummaryViewModelUnit(0);
        swift_storeEnumTagMultiPayload(a2, v57, 14);
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(a2, 0, 1, v57);
      }
      else
      {
        if (qword_101490EA8 != -1)
          swift_once(&qword_101490EA8, sub_1001147B8);
        v42 = type metadata accessor for Logger(0);
        sub_10000E918(v42, (uint64_t)qword_1014D4B08);
        v43 = v7;
        v44 = Logger.logObject.getter(v43);
        v45 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v44, v45))
        {
          v71 = a2;
          v46 = swift_slowAlloc(22, -1);
          v47 = (_QWORD *)swift_slowAlloc(8, -1);
          v72 = swift_slowAlloc(32, -1);
          v75 = v72;
          *(_DWORD *)v46 = 136315395;
          v48 = objc_msgSend(v43, "name");
          if (v48)
          {
            v49 = v48;
            v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
            v52 = v51;

          }
          else
          {
            v50 = 0;
            v52 = 0;
          }
          v73 = v50;
          v74 = v52;
          v58 = sub_100008B04(&qword_101495CE0);
          v59 = String.init<A>(describing:)(&v73, v58);
          v61 = v60;
          v73 = sub_1000C28FC(v59, v60, &v75);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v46 + 4, v46 + 12);

          *(_QWORD *)&v62 = swift_bridgeObjectRelease(v61).n128_u64[0];
          *(_WORD *)(v46 + 12) = 2113;
          v63 = objc_msgSend(v43, "_identifier", v62);
          v64 = v63;
          if (v63)
            v73 = (uint64_t)v63;
          else
            v73 = 0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v46 + 14, v46 + 22);
          v65 = v72;
          *v47 = v64;

          _os_log_impl((void *)&_mh_execute_header, v44, v45, "[Place Summary] Photo carousel is nil for mapItem %s, muid: %{private}@", (uint8_t *)v46, 0x16u);
          v66 = sub_100008B04((uint64_t *)&unk_101494470);
          swift_arrayDestroy(v47, 1, v66);
          swift_slowDealloc(v47, -1, -1);
          swift_arrayDestroy(v65, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v65, -1, -1);
          swift_slowDealloc(v46, -1, -1);

          a2 = v71;
        }
        else
        {

        }
        v67 = type metadata accessor for PlaceSummaryViewModelUnit(0);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(a2, 1, 1, v67);
      }
    }

  }
  if (qword_101490EA8 != -1)
    swift_once(&qword_101490EA8, sub_1001147B8);
  v35 = type metadata accessor for Logger(0);
  v36 = sub_10000E918(v35, (uint64_t)qword_1014D4B08);
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v37, v38))
  {
    v39 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "[Place Summary] No Mapitem (or nil identifier) when building photo carousel unit", v39, 2u);
    swift_slowDealloc(v39, -1, -1);
  }

  v40 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(a2, 1, 1, v40);
}

uint64_t sub_1000EAC28@<X0>(void *a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t IsEnabled_HikingiOS;
  uint64_t v24;
  uint64_t v25;
  char v26;
  void (*v27)(char *, uint64_t);
  void *v28;
  char **v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;

  v51 = a1;
  v4 = type metadata accessor for AttributeContainer(0, a3);
  __chkstk_darwin(v4);
  v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AttributedString(0);
  v49 = *(_QWORD *)(v7 - 8);
  v50 = v7;
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Locale.MeasurementSystem(0, v8);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v48 - v16;
  v18 = type metadata accessor for Locale(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v48 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  IsEnabled_HikingiOS = MapsFeature_IsEnabled_HikingiOS(v20);
  if ((IsEnabled_HikingiOS & 1) != 0)
  {
    v24 = static Locale.current.getter(IsEnabled_HikingiOS);
    Locale.measurementSystem.getter(v24);
    v25 = (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v22, v18);
    static Locale.MeasurementSystem.us.getter(v25);
    v26 = static Locale.MeasurementSystem.== infix(_:_:)(v17, v14);
    v27 = *(void (**)(char *, uint64_t))(v12 + 8);
    v27(v14, v11);
    v27(v17, v11);
    v28 = (void *)objc_opt_self(NSUnitLength);
    v29 = &selRef_miles;
    if ((v26 & 1) == 0)
      v29 = &selRef_kilometers;
    v30 = objc_msgSend(v28, *v29);
    v31 = objc_msgSend(v51, "_hikeSummary");
    if (v31)
    {
      v32 = v31;
      v33 = objc_msgSend(v31, "lengthStringForUnit:", v30);
      if (v33)
      {
        v34 = v33;
        v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
        v37 = v36;

        AttributeContainer.init()(v38);
        v39 = AttributedString.init(_:attributes:)(v35, v37, v6);
        UUID.init()(v39);
        v40 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.Label(0);
        v42 = v49;
        v41 = v50;
        (*(void (**)(uint64_t, char *, uint64_t))(v49 + 16))(a2 + v40[5], v10, v50);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56))(a2 + v40[12], 1, 1, v41);
        *(_OWORD *)(a2 + v40[6]) = xmmword_100E2B6B0;
        *(_QWORD *)(a2 + v40[7]) = 0;
        *(_QWORD *)(a2 + v40[8]) = 0;
        *(_QWORD *)(a2 + v40[9]) = 0;
        *(_QWORD *)(a2 + v40[10]) = 0;
        v43 = a2 + v40[11];
        *(_QWORD *)v43 = 1;
        *(_BYTE *)(v43 + 8) = 0;
        v44 = type metadata accessor for PlaceSummaryViewModelUnit(0);
        swift_storeEnumTagMultiPayload(a2, v44, 0);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(a2, 0, 1, v44);

        return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v10, v41);
      }

    }
    v47 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(a2, 1, 1, v47);
  }
  else
  {
    v46 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(a2, 1, 1, v46);
  }
}

uint64_t sub_1000EAFB8@<X0>(void *a1@<X0>, SEL *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;

  v7 = type metadata accessor for AttributeContainer(0, a4);
  __chkstk_darwin(v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AttributedString(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((MapsFeature_IsEnabled_HikingiOS(v12) & 1) != 0)
  {
    v15 = objc_msgSend(a1, "_hikeSummary");
    if (v15)
    {
      v16 = v15;
      v17 = objc_msgSend(v15, *a2);
      if (v17)
      {
        v18 = v17;
        v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
        v21 = v20;

        AttributeContainer.init()(v22);
        v23 = AttributedString.init(_:attributes:)(v19, v21, v9);
        UUID.init()(v23);
        v24 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.Label(0);
        (*(void (**)(uint64_t, char *, uint64_t))(v11 + 16))(a3 + v24[5], v14, v10);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a3 + v24[12], 1, 1, v10);
        v25 = (_QWORD *)(a3 + v24[6]);
        *v25 = 0;
        v25[1] = 0;
        *(_QWORD *)(a3 + v24[7]) = 0;
        *(_QWORD *)(a3 + v24[8]) = 0;
        *(_QWORD *)(a3 + v24[9]) = 0;
        *(_QWORD *)(a3 + v24[10]) = 0;
        v26 = a3 + v24[11];
        *(_QWORD *)v26 = 1;
        *(_BYTE *)(v26 + 8) = 0;
        v27 = type metadata accessor for PlaceSummaryViewModelUnit(0);
        swift_storeEnumTagMultiPayload(a3, v27, 0);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(a3, 0, 1, v27);

        return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
      }

    }
  }
  v29 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(a3, 1, 1, v29);
}

uint64_t sub_1000EB1F0@<X0>(void *a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t IsEnabled_HikingiOS;
  uint64_t v24;
  uint64_t v25;
  char v26;
  void (*v27)(char *, uint64_t);
  void *v28;
  char **v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  id v38;
  void *v39;
  void *v40;
  void *v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  Swift::String v49;
  void *v50;
  Swift::String v51;
  Swift::String v52;
  Swift::String v53;
  Swift::String v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  Swift::String v79;

  v5 = type metadata accessor for AttributeContainer(0, a3);
  __chkstk_darwin(v5);
  v7 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AttributedString(0);
  v75 = *(_QWORD *)(v8 - 8);
  v76 = v8;
  v9 = __chkstk_darwin(v8);
  v74 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Locale.MeasurementSystem(0, v9);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v69 - v16;
  v18 = type metadata accessor for Locale(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v69 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  IsEnabled_HikingiOS = MapsFeature_IsEnabled_HikingiOS(v20);
  if ((IsEnabled_HikingiOS & 1) == 0)
  {
    v67 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(a2, 1, 1, v67);
  }
  v24 = static Locale.current.getter(IsEnabled_HikingiOS);
  Locale.measurementSystem.getter(v24);
  v25 = (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v22, v18);
  static Locale.MeasurementSystem.us.getter(v25);
  v26 = static Locale.MeasurementSystem.== infix(_:_:)(v17, v14);
  v27 = *(void (**)(char *, uint64_t))(v12 + 8);
  v27(v14, v11);
  v27(v17, v11);
  v28 = (void *)objc_opt_self(NSUnitLength);
  v29 = &selRef_feet;
  if ((v26 & 1) == 0)
    v29 = &selRef_meters;
  v30 = objc_msgSend(v28, *v29);
  v31 = objc_msgSend(a1, "_hikeSummary");
  if (!v31)
    goto LABEL_13;
  v32 = v31;
  v33 = objc_msgSend(v31, "elevationGainStringForUnit:", v30);
  if (!v33)
  {

LABEL_13:
    v68 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56))(a2, 1, 1, v68);
  }
  v34 = v33;
  v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  v37 = v36;

  v38 = objc_msgSend(v32, "elevationLossStringForUnit:", v30);
  if (!v38)
  {

    swift_bridgeObjectRelease(v37);
    goto LABEL_13;
  }
  v39 = v38;
  v71 = v35;
  v73 = v37;
  v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
  v41 = v40;

  if (qword_101490ED0 != -1)
    swift_once(&qword_101490ED0, sub_10011833C);
  v79._object = (void *)0xA200000000000000;
  v42._object = (void *)0x8000000100E49680;
  v42._countAndFlagsBits = 0xD000000000000011;
  v43._countAndFlagsBits = 16421;
  v43._object = (void *)0xE200000000000000;
  v79._countAndFlagsBits = 47042;
  v44 = NSLocalizedString(_:tableName:bundle:value:comment:)(v42, (Swift::String_optional)0, (NSBundle)qword_1014D4B80, v43, v79);
  v45 = sub_100008B04((uint64_t *)&unk_10149A4F0);
  v46 = swift_allocObject(v45, 72, 7);
  *(_OWORD *)(v46 + 16) = xmmword_100E22F40;
  *(_QWORD *)(v46 + 56) = &type metadata for String;
  *(_QWORD *)(v46 + 64) = sub_10000D8E0();
  *(_QWORD *)(v46 + 32) = 47042;
  *(_QWORD *)(v46 + 40) = 0xA200000000000000;
  v70 = static String.localizedStringWithFormat(_:_:)(v44._countAndFlagsBits, v44._object, v46);
  v48 = v47;
  swift_bridgeObjectRelease(v46);
  swift_bridgeObjectRelease(v44._object);
  v77 = 0;
  v78 = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease(v78);
  v77 = 546801378;
  v78 = 0xA400000000000000;
  v49._countAndFlagsBits = v71;
  v50 = v73;
  v49._object = v73;
  String.append(_:)(v49);
  swift_bridgeObjectRelease(v50);
  v51._countAndFlagsBits = 32;
  v51._object = (void *)0xE100000000000000;
  String.append(_:)(v51);
  v52._countAndFlagsBits = v70;
  v52._object = v48;
  String.append(_:)(v52);
  swift_bridgeObjectRelease(v48);
  v53._countAndFlagsBits = 0x209886E220;
  v53._object = (void *)0xA500000000000000;
  String.append(_:)(v53);
  v54._countAndFlagsBits = v72;
  v54._object = v41;
  String.append(_:)(v54);
  swift_bridgeObjectRelease(v41);
  v55 = v77;
  v56 = v78;
  AttributeContainer.init()(v57);
  v58 = v74;
  v59 = AttributedString.init(_:attributes:)(v55, v56, v7);
  UUID.init()(v59);
  v60 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.Label(0);
  v62 = v75;
  v61 = v76;
  (*(void (**)(uint64_t, char *, uint64_t))(v75 + 16))(a2 + v60[5], v58, v76);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 56))(a2 + v60[12], 1, 1, v61);
  v63 = (_QWORD *)(a2 + v60[6]);
  *v63 = 0;
  v63[1] = 0;
  *(_QWORD *)(a2 + v60[7]) = 0;
  *(_QWORD *)(a2 + v60[8]) = 0;
  *(_QWORD *)(a2 + v60[9]) = 0;
  *(_QWORD *)(a2 + v60[10]) = 0;
  v64 = a2 + v60[11];
  *(_QWORD *)v64 = 1;
  *(_BYTE *)(v64 + 8) = 0;
  v65 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  swift_storeEnumTagMultiPayload(a2, v65, 0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(a2, 0, 1, v65);

  return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v58, v61);
}

uint64_t sub_1000EB740@<X0>(id a1@<X0>, uint64_t *a2@<X8>)
{
  id v4;
  id v5;
  uint64_t v6;
  id v7;
  char v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  if (qword_101490F30 != -1)
    swift_once(&qword_101490F30, sub_10012902C);
  if (byte_1014D4C10 == 1
    && (v4 = objc_msgSend((id)objc_opt_self(CollectionManager), "sharedManager"),
        v5 = objc_msgSend(v4, "lookupMapItem:", a1),
        v4,
        v5))
  {

    v6 = type metadata accessor for PlaceSummaryViewModelUnit.UserLibrary(0);
    swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v7 = a1;
    v8 = 1;
  }
  else
  {
    v9 = objc_msgSend(a1, "_hikeAssociatedInfo");
    if (!v9)
    {
      v16 = type metadata accessor for PlaceSummaryViewModelUnit(0);
      v13 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56);
      v14 = a2;
      v15 = 1;
      return v13(v14, v15, 1, v16);
    }
    v10 = v9;
    objc_msgSend(v9, "hasEncryptedTourMuid");

    v11 = type metadata accessor for PlaceSummaryViewModelUnit.UserLibrary(0);
    swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v7 = a1;
    v8 = 0;
  }
  *a2 = sub_100086FAC(v7, v8);
  v12 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  swift_storeEnumTagMultiPayload(a2, v12, 15);
  v13 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  v14 = a2;
  v15 = 0;
  v16 = v12;
  return v13(v14, v15, 1, v16);
}

uint64_t sub_1000EB8C0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  if (qword_101490F30 != -1)
    swift_once(&qword_101490F30, sub_10012902C);
  if (byte_1014D4C10 != 1)
    goto LABEL_12;
  v4 = objc_msgSend((id)objc_opt_self(CollectionManager), "sharedManager");
  v5 = objc_msgSend(v4, "lookupMapItem:", a1);

  if (!v5)
    goto LABEL_12;
  v6 = objc_msgSend(v5, "placeItem");
  v7 = dispatch thunk of CollectionPlaceItem.placeItemNote.getter();
  v9 = v8;

  if (!v9)
  {
LABEL_11:

LABEL_12:
    v19 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    v16 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56);
    v17 = a2;
    v18 = 1;
    return v16(v17, v18, 1, v19);
  }
  v10 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0)
    v10 = v7 & 0xFFFFFFFFFFFFLL;
  if (!v10)
  {
    swift_bridgeObjectRelease(v9);
    goto LABEL_11;
  }
  v11 = type metadata accessor for PlaceSummaryViewModelUnit.UserNote(0);
  v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  v13 = a1;
  UUID.init()(v13);
  *(_QWORD *)(v12 + OBJC_IVAR____TtCO4Maps25PlaceSummaryViewModelUnit8UserNote_mapItem) = v13;
  v14 = (uint64_t *)(v12 + OBJC_IVAR____TtCO4Maps25PlaceSummaryViewModelUnit8UserNote_userNote);
  *v14 = v7;
  v14[1] = v9;

  *a2 = v12;
  v15 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  swift_storeEnumTagMultiPayload(a2, v15, 16);
  v16 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
  v17 = a2;
  v18 = 0;
  v19 = v15;
  return v16(v17, v18, 1, v19);
}

void sub_1000EBA88(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

double sub_1000EBAF4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v16;
  void *v17;
  id v18;
  unint64_t v19;
  unint64_t v20;
  __n128 v21;
  uint64_t v22;
  double result;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;

  v27 = v6;
  v28 = v5;
  v29 = v4;
  v30 = v3;
  swift_bridgeObjectRetain(v7);
  v16 = objc_msgSend(a3, "mapItem");
  if (v16
    && (v17 = v16, v18 = objc_msgSend(v16, "_secondaryName"), v17, v18))
  {
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v25 = v19;
    v20 = v19;

    sub_1000E67E0(v24, v20, a1, v7, 0, 0, 0, 0, v30, v21, 0);
    sub_1000F9234(a1, v7, v14, v13, v27, v11, v28, v9, v10, v12, v8, v29, a2);
    *(_QWORD *)&result = swift_bridgeObjectRelease(v25).n128_u64[0];
  }
  else
  {
    sub_1000F9234(a1, v7, v14, v13, v27, v11, v28, v9, v10, v12, v8, v29, a2);
    v22 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v30, 1, 1, v22);
  }
  return result;
}

void sub_1000ECC3C(id a1@<X2>, uint64_t a2@<X0>, char a3@<W1>, void *a4@<X3>, uint64_t a5@<X8>)
{
  id v10;
  void *v11;
  int v12;
  double v13;
  double v14;
  id v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char v25;
  double v26;
  double v27;

  v10 = objc_msgSend(a1, "mapItem");
  if (!v10)
  {
    v16 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a5, 1, 1, v16);
    return;
  }
  v11 = v10;
  v12 = a3 & 1;
  if (objc_msgSend(a1, "_type") == (id)2)
  {
    v26 = 0.0;
    v27 = 0.0;
    if (objc_msgSend(a1, "getCoordinate:", &v26))
    {
      v13 = v26;
      v14 = v27;
      if (v12)
        v15 = 0;
      else
        v15 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedLongLong:", a2);
      v25 = 1;
      v17 = objc_msgSend((id)objc_opt_self(NSString), "distanceStringFromLocation:toCoordinate:withMapItem:showsDistance:onlyUseThreshold:maximumDistance:useShortThreshold:", a4, v11, &v25, 0, v15, 1, v13, v14);
      if (v17)
      {
        v18 = v17;
        v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
        v21 = v20;

        UUID.init()(v22);
        v23 = (uint64_t *)(a5 + *(int *)(type metadata accessor for PlaceSummaryViewModelUnit.Distance(0) + 20));
        *v23 = v19;
        v23[1] = v21;
        v24 = type metadata accessor for PlaceSummaryViewModelUnit(0);
        swift_storeEnumTagMultiPayload(a5, v24, 1);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(a5, 0, 1, v24);
        return;
      }

    }
  }
  sub_1000E6AE8(a2, v12, v11, a4, 0, a5);

}

double sub_1000ECE80@<D0>(id a1@<X1>, char a2@<W0>, void *a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  __n128 v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  if (a2 == 3)
    return sub_1000F14F0(a1, a3, a4);
  v7 = objc_msgSend(a1, "mapItem");
  if (v7)
  {
    v8 = v7;
    if (a2)
    {
      if (a2 == 1)
        v9 = objc_msgSend(v7, "_addressFormattedAsCity");
      else
        v9 = objc_msgSend(v7, "_addressFormattedAsShortenedAddress");
    }
    else
    {
      v9 = objc_msgSend(v7, "_addressFormattedAsName");
    }
    v11 = v9;
    v13 = v11;
    if (v11)
    {
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v16 = v15;

    }
    else
    {
      v14 = 0;
      v16 = 0;
    }
    sub_1000E67E0(v14, v16, 0, 0, 0, 0, 0, 0, a4, v12, 0);

    *(_QWORD *)&result = swift_bridgeObjectRelease(v16).n128_u64[0];
  }
  else
  {
    v10 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a4, 1, 1, v10);
  }
  return result;
}

void sub_1000ECFF4(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 a4@<W3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  __n128 v26;
  unint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(char *, char *, uint64_t, __n128);
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t KeyPath;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(_BYTE *, _QWORD);
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(_BYTE *, _QWORD);
  unint64_t v61;
  __n128 v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  int *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  __n128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  uint64_t (*v89)(char *, char *, uint64_t, __n128);
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  _BYTE v99[32];
  _QWORD v100[2];

  v12 = sub_100008B04(&qword_1014958A8);
  __chkstk_darwin(v12);
  v14 = (char *)&v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100008B04(&qword_1014958B0);
  v95 = *(_QWORD *)(v15 - 8);
  v96 = v15;
  __chkstk_darwin(v15);
  v94 = (uint64_t)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v93 = (uint64_t)&v81 - v18;
  v19 = type metadata accessor for AttributedString(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v97 = (char *)&v81 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v24 = (char *)&v81 - v23;
  if (!a2 || (v25 = String.count.getter(a1, a2), v25 < 1))
  {
    v32 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(a6, 1, 1, v32);
    return;
  }
  if (!a3)
    goto LABEL_40;
  v98 = v24;
  v82 = a6;
  v27 = (unint64_t)a3 >> 62;
  if (!((unint64_t)a3 >> 62))
  {
    v28 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a3);
    if (v28 >= 1)
      goto LABEL_6;
    goto LABEL_39;
  }
  if (a3 < 0)
    v73 = a3;
  else
    v73 = a3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a3);
  if (_CocoaArrayWrapper.endIndex.getter(v73) < 1)
  {
LABEL_39:
    v26 = swift_bridgeObjectRelease(a3);
    a6 = v82;
LABEL_40:
    v74 = a4;
    if (a4)
    {
      v75 = a6;
      if (v74 == 1)
      {
        static Color.primary.getter(v25);
        v76 = Color.opacity(_:)(0.58);
        swift_release();
      }
      else
      {
        v76 = static Color.primary.getter(v25);
      }
      v78 = 0;
    }
    else
    {
      v75 = a6;
      if ((a5 & 1) != 0)
        v79 = static Font.body.getter(v26);
      else
        v79 = static Font.subheadline.getter(v25);
      v80 = v79;
      static Font.Weight.regular.getter();
      v78 = Font.weight(_:)(v80);
      swift_release();
      v76 = 0;
    }
    sub_1000E67E0(a1, a2, 0, 0, v76, v78, 0, 0, v75, v77, 0);
    swift_release();
    swift_release();
    return;
  }
LABEL_6:
  v30 = sub_1000F0168(a4, a5 & 1, a1, a2, v29);
  if (a4)
  {
    if (a4 == 1)
    {
      v31 = static Color.primary.getter(v30);
      v87 = 0;
      if (!v27)
        goto LABEL_32;
    }
    else
    {
      static Color.primary.getter(v30);
      v31 = Color.opacity(_:)(0.58);
      swift_release();
      v87 = 0;
      if (!v27)
        goto LABEL_32;
    }
  }
  else
  {
    if ((a5 & 1) != 0)
      v33 = static Font.headline.getter(v30);
    else
      v33 = static Font.subheadline.getter(v30);
    v63 = v33;
    static Font.Weight.semibold.getter();
    v87 = Font.weight(_:)(v63);
    swift_release();
    v31 = 0;
    if (!v27)
    {
LABEL_32:
      v35 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v35)
      {
LABEL_33:
        v62 = swift_bridgeObjectRelease(a3);
        v42 = *(uint64_t (**)(char *, char *, uint64_t, __n128))(v20 + 16);
LABEL_34:
        v64 = v97;
        v65 = v98;
        v66 = v42(v97, v98, v19, v62);
        v67 = v82;
        UUID.init()(v66);
        v68 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.Label(0);
        ((void (*)(uint64_t, char *, uint64_t))v42)(v67 + v68[5], v64, v19);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(v67 + v68[12], 1, 1, v19);
        v69 = (_QWORD *)(v67 + v68[6]);
        *v69 = 0;
        v69[1] = 0;
        *(_QWORD *)(v67 + v68[7]) = 0;
        *(_QWORD *)(v67 + v68[8]) = 0;
        *(_QWORD *)(v67 + v68[9]) = 0;
        *(_QWORD *)(v67 + v68[10]) = 0;
        v70 = v67 + v68[11];
        *(_QWORD *)v70 = 1;
        *(_BYTE *)(v70 + 8) = 0;
        v71 = type metadata accessor for PlaceSummaryViewModelUnit(0);
        swift_storeEnumTagMultiPayload(v67, v71, 0);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 56))(v67, 0, 1, v71);
        swift_release();
        swift_release();
        v72 = *(void (**)(char *, uint64_t))(v20 + 8);
        v72(v64, v19);
        v72(v65, v19);
        return;
      }
      goto LABEL_18;
    }
  }
  if (a3 < 0)
    v34 = a3;
  else
    v34 = a3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a3);
  v35 = _CocoaArrayWrapper.endIndex.getter(v34);
  swift_bridgeObjectRelease(a3);
  if (!v35)
    goto LABEL_33;
LABEL_18:
  if (v35 >= 1)
  {
    v36 = 0;
    v90 = a3 & 0xC000000000000001;
    v91 = v35;
    v92 = a3;
    v85 = v19;
    v86 = v20;
    v83 = v31;
    v84 = v14;
    do
    {
      if (v90)
        v37 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v36, a3);
      else
        v37 = *(id *)(a3 + 8 * v36 + 32);
      v38 = v37;
      v39 = objc_msgSend(v37, "rangeValue");
      v41 = v40;
      v42 = *(uint64_t (**)(char *, char *, uint64_t, __n128))(v20 + 16);
      v43 = v20;
      v44 = v97;
      ((void (*)(char *, char *, uint64_t))v42)(v97, v98, v19);
      v45 = sub_10000BC84(&qword_1014958D0, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString, (uint64_t)&protocol conformance descriptor for AttributedString);
      Range<>.init<A>(_:in:)(v39, v41, v44, v19, v45);
      v46 = v96;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48))(v14, 1, v96) == 1)
      {

        sub_100010CC4((uint64_t)v14, &qword_1014958A8);
        v20 = v43;
      }
      else
      {
        v88 = v38;
        v89 = v42;
        v47 = v93;
        sub_1000207BC((uint64_t)v14, v93, &qword_1014958B0);
        v48 = v94;
        if (v31)
        {
          sub_10000C1FC(v47, v94, &qword_1014958B0);
          KeyPath = swift_getKeyPath(&unk_100E2B770);
          __chkstk_darwin(KeyPath);
          v50 = swift_getKeyPath(&unk_100E2B7A0);
          v100[0] = v31;
          swift_retain_n(v31, 2);
          v51 = sub_100010D70(&qword_1014958E0, &qword_1014958B0, (const char *)&protocol conformance descriptor for Range<A>);
          v52 = (void (*)(_BYTE *, _QWORD))AttributedString.subscript.modify(v99, v48, v46, v51);
          v53 = sub_10006C5A8();
          v54 = v50;
          v47 = v93;
          AttributedSubstring.subscript.setter(v100, v54, v53);
          v52(v99, 0);
          v48 = v94;
          swift_release();
          sub_100010CC4(v48, &qword_1014958B0);
        }
        sub_10000C1FC(v47, v48, &qword_1014958B0);
        v55 = swift_getKeyPath(&unk_100E2B850);
        __chkstk_darwin(v55);
        v56 = v47;
        v57 = swift_getKeyPath(&unk_100E2B880);
        v100[0] = v87;
        swift_retain();
        v58 = sub_100010D70(&qword_1014958E0, &qword_1014958B0, (const char *)&protocol conformance descriptor for Range<A>);
        v59 = v48;
        v60 = (void (*)(_BYTE *, _QWORD))AttributedString.subscript.modify(v99, v48, v46, v58);
        v61 = sub_1000F9468();
        AttributedSubstring.subscript.setter(v100, v57, v61);
        v60(v99, 0);

        sub_100010CC4(v59, &qword_1014958B0);
        v31 = v83;
        sub_100010CC4(v56, &qword_1014958B0);
        v19 = v85;
        v20 = v86;
        v14 = v84;
        v42 = v89;
      }
      ++v36;
      a3 = v92;
    }
    while (v91 != v36);
    v62 = swift_bridgeObjectRelease(v92);
    goto LABEL_34;
  }
  __break(1u);
}

void sub_1000ED7D0(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  NSString v8;
  NSString v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __n128 v19;
  uint64_t v20;

  v3 = objc_msgSend(a1, "collectionResult");
  if (v3 && (v4 = v3, v5 = objc_msgSend(v3, "collection"), v4, v5))
  {
    v6 = objc_msgSend(v5, "numberOfItems");

    if (qword_101490ED0 != -1)
      swift_once(&qword_101490ED0, sub_10011833C);
    v7 = (void *)qword_1014D4B80;
    v8 = String._bridgeToObjectiveC()();
    v9 = String._bridgeToObjectiveC()();
    v10 = objc_msgSend(v7, "localizedStringForKey:value:table:", v8, v9, 0);

    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v13 = v12;

    v14 = sub_100008B04((uint64_t *)&unk_10149A4F0);
    v15 = swift_allocObject(v14, 72, 7);
    *(_OWORD *)(v15 + 16) = xmmword_100E22F40;
    *(_QWORD *)(v15 + 56) = &type metadata for UInt;
    *(_QWORD *)(v15 + 64) = &protocol witness table for UInt;
    *(_QWORD *)(v15 + 32) = v6;
    v16 = static String.localizedStringWithFormat(_:_:)(v11, v13, v15);
    v18 = v17;
    swift_bridgeObjectRelease(v15);
    v19 = swift_bridgeObjectRelease(v13);
    sub_1000E67E0(v16, v18, 0, 0, 0, 0, 0, 0, a2, v19, 0);
    swift_bridgeObjectRelease(v18);
  }
  else
  {
    v20 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a2, 1, 1, v20);
  }
}

void sub_1000ED9E0(void *a1@<X0>, SEL *a2@<X1>, uint64_t a3@<X8>)
{
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __n128 v14;
  unint64_t v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;

  v6 = objc_msgSend(a1, "publisherResult");
  if (v6)
  {
    v7 = v6;
    v8 = objc_msgSend(v6, "publisher");

    if (v8)
    {
      v9 = objc_msgSend(v8, "publisherAttribution");

      if (v9)
      {
        v10 = objc_msgSend(v9, *a2);
        swift_unknownObjectRelease(v9);
        if (v10)
        {
          v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
          v13 = v12;

          sub_1000E67E0(v11, v13, 0, 0, 0, 0, 0, 0, a3, v14, 0);
          v15 = v13;
LABEL_11:
          swift_bridgeObjectRelease(v15);
          return;
        }
      }
    }
  }
  v16 = objc_msgSend(a1, "collectionResult");
  if (v16)
  {
    v17 = v16;
    v18 = objc_msgSend(v16, "collection");

    if (v18)
    {
      v19 = objc_msgSend(v18, "publisherAttribution");

      if (v19)
      {
        v20 = objc_msgSend(v19, *a2);
        swift_unknownObjectRelease(v19);
        if (v20)
        {
          v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
          v23 = v22;

          sub_1000E67E0(v21, v23, 0, 0, 0, 0, 0, 0, a3, v24, 0);
          v15 = v23;
          goto LABEL_11;
        }
      }
    }
  }
  v25 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(a3, 1, 1, v25);
}

double sub_1000EDBEC@<D0>(_QWORD *a1@<X1>, void *a2@<X3>, char *a3@<X4>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  NSString v29;
  uint64_t v30;
  NSString v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  __n128 v38;
  double result;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  Swift::String v56;

  v9 = type metadata accessor for AttributeContainer(0, a5);
  __chkstk_darwin(v9);
  v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[13];
  if (v12 >> 60 != 10)
    goto LABEL_20;
  v13 = a1[14];
  v14 = a1[5];
  v16 = a1[3];
  v15 = a1[4];
  v17 = a1[2];
  if (v12 == 0xA000000000000000)
  {
    v18.i64[0] = a1[9];
    v18.i64[1] = a1[8];
    v19.i64[0] = a1[14];
    v19.i64[1] = a1[12];
    v20.i64[0] = a1[7];
    v20.i64[1] = a1[6];
    v21.i64[0] = a1[11];
    v21.i64[1] = a1[10];
    v22 = vorrq_s8(vorrq_s8(v19, v18), vorrq_s8(v21, v20));
    if (!(v16 | *(_QWORD *)&vorr_s8(*(int8x8_t *)v22.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)) | v15 | v14 | v17))
    {
      v23 = objc_msgSend(a2, "query");
      v24 = v23;
      if (v23)
      {
        v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
        v27 = v26;

        v28 = a3;
        v29 = String._bridgeToObjectiveC()();
        v30 = *(_QWORD *)&v28[OBJC_IVAR____TtC4Maps38PlaceSummaryTextHighlightConfiguration_typedAutocompleteQuery + 8];
        swift_bridgeObjectRetain(v30);
        v31 = String._bridgeToObjectiveC()();
        v32 = objc_msgSend(v29, "_maps_prefixMatchesForSearchString:", v31, swift_bridgeObjectRelease(v30).n128_f64[0]);

        if (v32)
        {
          v33 = sub_10000E4BC(0, (unint64_t *)&unk_10149A558, NSValue_ptr);
          v24 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v32, v33);

        }
        else
        {
          v24 = 0;
        }
      }
      else
      {
        v54 = a3;
        v25 = 0;
        v27 = 0;
      }
      sub_1000ECFF4(v25, v27, (uint64_t)v24, *(_BYTE *)(*(_QWORD *)&a3[OBJC_IVAR____TtC4Maps38PlaceSummaryTextHighlightConfiguration_type]+ OBJC_IVAR____TtC4Maps29PlaceSummaryTextHighlightType_type), 1, a4);

      swift_bridgeObjectRelease(v24);
      *(_QWORD *)&result = swift_bridgeObjectRelease(v27).n128_u64[0];
      return result;
    }
  }
  v34 = a1[11] | a1[12] | a1[10] | a1[9] | a1[8] | a1[7] | a1[6] | v14 | v15 | v16;
  if (v13 || v12 != 0xA000000000000000 || v17 != 7 || v34)
  {
    if (!v13 && v12 == 0xA000000000000000 && v17 == 26 && !v34)
    {
      v40 = objc_msgSend(a2, "locationDisplayString");
      if (v40)
      {
        v41 = v40;
        v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
        v44 = v43;

        v46 = UUID.init()(v45);
        AttributeContainer.init()(v46);
        v47 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.Label(0);
        AttributedString.init(_:attributes:)(v42, v44, v11);
        v48 = a4 + v47[12];
        v49 = type metadata accessor for AttributedString(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v48, 1, 1, v49);
        v50 = (_QWORD *)(a4 + v47[6]);
        *v50 = 0;
        v50[1] = 0;
        *(_QWORD *)(a4 + v47[7]) = 0;
        *(_QWORD *)(a4 + v47[8]) = 0;
        *(_QWORD *)(a4 + v47[9]) = 0;
        *(_QWORD *)(a4 + v47[10]) = 0;
        v51 = a4 + v47[11];
        *(_QWORD *)v51 = 1;
        *(_BYTE *)(v51 + 8) = 0;
        v52 = type metadata accessor for PlaceSummaryViewModelUnit(0);
        swift_storeEnumTagMultiPayload(a4, v52, 0);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(a4, 0, 1, v52);
        return result;
      }
      goto LABEL_21;
    }
LABEL_20:
    v40 = 0;
LABEL_21:
    v53 = type metadata accessor for PlaceSummaryViewModelUnit((uint64_t)v40);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(a4, 1, 1, v53);
    return result;
  }
  if (qword_101490ED0 != -1)
    swift_once(&qword_101490ED0, sub_10011833C);
  v56._object = (void *)0x8000000100E49830;
  v35._countAndFlagsBits = 0x5320746E65636552;
  v35._object = (void *)0xED00006863726165;
  v36._countAndFlagsBits = 0;
  v36._object = (void *)0xE000000000000000;
  v56._countAndFlagsBits = 0xD00000000000004DLL;
  v37 = NSLocalizedString(_:tableName:bundle:value:comment:)(v35, (Swift::String_optional)0, (NSBundle)qword_1014D4B80, v36, v56);
  sub_1000E67E0(v37._countAndFlagsBits, (unint64_t)v37._object, 0, 0, 0, 0, 0, 0, a4, v38, 0);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v37._object).n128_u64[0];
  return result;
}

double sub_1000EE098@<D0>(id a1@<X6>, _QWORD *a2@<X1>, uint64_t a3@<X3>, unint64_t a4@<X4>, void *a5@<X5>, void *a6@<X7>, uint64_t a7@<X8>, void *a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  char *v30;
  NSString v31;
  uint64_t v32;
  NSString v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  id v38;
  id v39;
  id v40;
  double result;
  uint64_t v42;
  Swift::String v43;
  Swift::String v44;
  Swift::String v45;
  __n128 v46;
  uint64_t object;
  uint64_t v48;
  id v49;
  Swift::String v50;

  v9 = a2[2];
  v10 = a2[13];
  if (v10 >> 60 == 1)
  {
    v38 = objc_msgSend(a1, "geoMapItem");
    if (v38)
    {
      v39 = v38;
      v40 = objc_msgSend(objc_allocWithZone((Class)MKMapItem), "initWithGeoMapItem:isPlaceHolderPlace:", v38, 0);
      if (v40)
      {
        v49 = v40;
        sub_1000E6AE8(v9, 0, v40, a6, 0, a7);
        swift_unknownObjectRelease(v39);

        return result;
      }
      swift_unknownObjectRelease(v39);
    }
    goto LABEL_23;
  }
  if (v10 >> 60 != 10)
  {
LABEL_23:
    v48 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(a7, 1, 1, v48);
    return result;
  }
  v12 = a2[14];
  v14 = a2[11];
  v13 = a2[12];
  v16 = a2[9];
  v15 = a2[10];
  v18 = a2[7];
  v17 = a2[8];
  v19 = a2[5];
  v20 = a2[6];
  v23 = a2 + 3;
  v21 = a2[3];
  v22 = v23[1];
  if (v10 != 0xA000000000000000)
    goto LABEL_10;
  v25.i64[0] = v16;
  v25.i64[1] = v17;
  v26.i64[0] = v12;
  v26.i64[1] = v13;
  v27.i64[0] = v18;
  v27.i64[1] = v20;
  v28.i64[0] = v14;
  v28.i64[1] = v15;
  v29 = vorrq_s8(vorrq_s8(v26, v25), vorrq_s8(v28, v27));
  if (v21 | *(_QWORD *)&vorr_s8(*(int8x8_t *)v29.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL)) | v22 | v19 | v9)
  {
LABEL_10:
    v42 = v14 | v13 | v15 | v16 | v17 | v18 | v20 | v19 | v22 | v21;
    if (!v12 && v10 == 0xA000000000000000 && v9 == 7 && !v42)
    {
      if (qword_101490ED0 != -1)
        swift_once(&qword_101490ED0, sub_10011833C);
      v50._object = (void *)0x8000000100E497E0;
      v43._countAndFlagsBits = 0x796C746E65636552;
      v43._object = (void *)0xEF64657765695620;
      v44._countAndFlagsBits = 0;
      v44._object = (void *)0xE000000000000000;
      v50._countAndFlagsBits = 0xD00000000000004CLL;
      v45 = NSLocalizedString(_:tableName:bundle:value:comment:)(v43, (Swift::String_optional)0, (NSBundle)qword_1014D4B80, v44, v50);
      sub_1000E67E0(v45._countAndFlagsBits, (unint64_t)v45._object, 0, 0, 0, 0, 0, 0, a7, v46, 0);
      object = (uint64_t)v45._object;
      goto LABEL_26;
    }
    if (!v12 && v10 == 0xA000000000000000 && v9 == 27 && !v42)
      return sub_1000EE478(a8, a7);
    goto LABEL_23;
  }
  v30 = a5;
  v31 = String._bridgeToObjectiveC()();
  v32 = *(_QWORD *)&v30[OBJC_IVAR____TtC4Maps38PlaceSummaryTextHighlightConfiguration_typedAutocompleteQuery + 8];
  swift_bridgeObjectRetain(v32);
  v33 = String._bridgeToObjectiveC()();
  v34 = objc_msgSend(v31, "_maps_prefixMatchesForSearchString:", v33, swift_bridgeObjectRelease(v32).n128_f64[0]);

  if (v34)
  {
    v35 = sub_10000E4BC(0, (unint64_t *)&unk_10149A558, NSValue_ptr);
    v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v34, v35);

  }
  else
  {
    v36 = 0;
  }
  sub_1000ECFF4(a3, a4, v36, *(_BYTE *)(*(_QWORD *)&v30[OBJC_IVAR____TtC4Maps38PlaceSummaryTextHighlightConfiguration_type]+ OBJC_IVAR____TtC4Maps29PlaceSummaryTextHighlightType_type), 1, a7);

  object = v36;
LABEL_26:
  *(_QWORD *)&result = swift_bridgeObjectRelease(object).n128_u64[0];
  return result;
}

double sub_1000EE478@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  __n128 v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  Swift::String v26;
  unint64_t object;
  Swift::String v28;
  id v29;
  id v30;
  id v31;
  unsigned int v32;
  __n128 v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __n128 v41;
  double result;
  uint64_t v43;
  char v44;
  id v45;
  void *v46;
  id v47;
  id v48;
  void *v49;
  uint64_t v50;
  unint64_t v51;
  id v52;
  void *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  Swift::String v57;
  Swift::String v58;
  __n128 v59;
  uint64_t v60;
  char v61;
  __n128 v62;
  unint64_t v63;
  __n128 v64;
  _QWORD v65[4];

  v4 = objc_msgSend(a1, "name");
  if (!v4)
    goto LABEL_25;
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v8 = v7;

  if (objc_msgSend(a1, "_venueFeatureType") != (id)4)
  {
    v14 = objc_msgSend(a1, "_addressFormattedAsShortenedAddress");
    if (v14)
    {
      v15 = v14;
      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v18 = v17;

      if (objc_msgSend(a1, "_isMapItemTypeAddress"))
      {
        v65[2] = v16;
        v65[3] = v18;
        v65[0] = v6;
        v65[1] = v8;
        v19 = sub_10006C008();
        if ((StringProtocol.contains<A>(_:)(v65, &type metadata for String, &type metadata for String, v19, v19) & 1) != 0)
        {
          swift_bridgeObjectRelease(v18);
          v20 = objc_msgSend(a1, "_geoAddress", swift_bridgeObjectRelease(v8).n128_f64[0]);
          v22 = v20;
          if (v20)
          {
            v23 = objc_msgSend(v20, "structuredAddress");

            if (v23)
            {
              v24 = objc_msgSend(v23, "locality");

              if (v24)
              {
                v23 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
                v22 = v25;

LABEL_48:
                sub_1000E67E0((uint64_t)v23, (unint64_t)v22, 0, 0, 0, 0, 0, 0, a2, v21, 0);
                v63 = (unint64_t)v22;
                goto LABEL_52;
              }
              v23 = 0;
            }
            v22 = 0;
            goto LABEL_48;
          }
          v23 = 0;
          goto LABEL_48;
        }
      }
      v26 = String.uppercased()();
      object = (unint64_t)v26._object;
      v28 = String.uppercased()();
      if (v26._countAndFlagsBits == v28._countAndFlagsBits && v26._object == v28._object)
      {
        swift_bridgeObjectRelease(v18);
        swift_bridgeObjectRelease(v26._object);
      }
      else
      {
        v44 = _stringCompareWithSmolCheck(_:_:expecting:)(v26._countAndFlagsBits, v26._object, v28._countAndFlagsBits, v28._object, 0);
        swift_bridgeObjectRelease(v26._object);
        swift_bridgeObjectRelease(v28._object);
        if ((v44 & 1) == 0)
        {
          v59 = swift_bridgeObjectRelease(v8);
          sub_1000E67E0(v16, v18, 0, 0, 0, 0, 0, 0, a2, v59, 0);
LABEL_51:
          v63 = v18;
          goto LABEL_52;
        }
        object = v18;
      }
      v45 = objc_msgSend(a1, "_geoAddress", swift_bridgeObjectRelease(object).n128_f64[0]);
      if (v45)
      {
        v46 = v45;
        v47 = objc_msgSend(v45, "structuredAddress");

        if (v47)
        {
          v48 = objc_msgSend(v47, "administrativeArea");
          if (v48)
          {
            v49 = v48;
            v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
            v18 = v51;

            v52 = objc_msgSend(v47, "country");
            if (!v52)
            {
LABEL_50:
              v64 = swift_bridgeObjectRelease(v8);
              sub_1000E67E0(v50, v18, 0, 0, 0, 0, 0, 0, a2, v64, 0);

              goto LABEL_51;
            }
            v53 = v52;
            v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
            v56 = v55;

            v57 = String.uppercased()();
            swift_bridgeObjectRelease(v8);
            v58 = String.uppercased()();
            if (v57._countAndFlagsBits == v58._countAndFlagsBits && v57._object == v58._object)
            {
              swift_bridgeObjectRelease_n(v57._object, 2);
            }
            else
            {
              v61 = _stringCompareWithSmolCheck(_:_:expecting:)(v57._countAndFlagsBits, v57._object, v58._countAndFlagsBits, v58._object, 0);
              swift_bridgeObjectRelease(v57._object);
              swift_bridgeObjectRelease(v58._object);
              if ((v61 & 1) == 0 && String.count.getter(v50, v18) < 1)
              {
LABEL_49:
                v8 = v56;
                goto LABEL_50;
              }
            }
            if (String.count.getter(v54, v56) >= 1)
            {
              v62 = swift_bridgeObjectRelease(v18);
              sub_1000E67E0(v54, v56, 0, 0, 0, 0, 0, 0, a2, v62, 0);

              v63 = v56;
LABEL_52:
              *(_QWORD *)&result = swift_bridgeObjectRelease(v63).n128_u64[0];
              return result;
            }
            goto LABEL_49;
          }

        }
      }
      swift_bridgeObjectRelease(v8);
      v60 = type metadata accessor for PlaceSummaryViewModelUnit(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(a2, 1, 1, v60);
      return result;
    }
    swift_bridgeObjectRelease(v8);
    v4 = 0;
LABEL_25:
    v43 = type metadata accessor for PlaceSummaryViewModelUnit((uint64_t)v4);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(a2, 1, 1, v43);
    return result;
  }
  v9 = objc_msgSend(a1, "venueLabelWithContext:", 2, swift_bridgeObjectRelease(v8).n128_f64[0]);
  if (v9)
  {
    v10 = v9;
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v13 = v12;

  }
  else
  {
    v11 = 0;
    v13 = 0;
  }
  v29 = objc_msgSend(a1, "_venueInfo");
  if (!v29
    || (v30 = v29,
        v31 = objc_msgSend(v29, "parent"),
        swift_unknownObjectRelease(v30),
        !v31)
    || (v32 = objc_msgSend(v31, "featureType"), v31, v32 != 2))
  {
    v34 = objc_msgSend(a1, "_geoMapItem");
    if (v34)
    {
      v35 = v34;
      v36 = objc_msgSend(v34, "addressObject");
      swift_unknownObjectRelease(v35);
      if (v36)
      {
        v37 = objc_msgSend(v36, "venueShortAddress");

        if (v37)
        {
          v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
          v40 = v39;

          if (String.count.getter(v38, v40) >= 1)
          {
            v41 = swift_bridgeObjectRelease(v13);
            sub_1000E67E0(v38, v40, 0, 0, 0, 0, 0, 0, a2, v41, 0);
            *(_QWORD *)&result = swift_bridgeObjectRelease(v40).n128_u64[0];
            return result;
          }
          v33 = swift_bridgeObjectRelease(v40);
        }
      }
    }
  }
  sub_1000E67E0(v11, v13, 0, 0, 0, 0, 0, 0, a2, v33, 0);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v13).n128_u64[0];
  return result;
}

double sub_1000EEB38@<D0>(id a1@<X2>, int8x16_t *a2@<X1>, char *a3@<X4>, uint64_t a4@<X8>)
{
  unint64_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  id v11;
  id v12;
  __n128 v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  double result;
  id v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  NSString v26;
  uint64_t v27;
  NSString v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;

  v6 = a2[6].u64[1];
  if (v6 >> 60 == 3)
  {
    if (a2[1].i64[0] == 2)
    {
      v12 = objc_msgSend(a1, "shortAddress");
      if (v12)
      {
        v14 = v12;
        v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
        v17 = v16;

      }
      else
      {
        v15 = 0;
        v17 = 0;
      }
      sub_1000E67E0(v15, v17, 0, 0, 0, 0, 0, 0, a4, v13, 0);
      v32 = v17;
      goto LABEL_20;
    }
LABEL_10:
    v18 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a4, 1, 1, v18);
    return result;
  }
  if (v6 >> 60 != 10)
    goto LABEL_10;
  if (v6 != 0xA000000000000000)
    goto LABEL_10;
  v7.i64[0] = a2[6].i64[0];
  v7.i64[1] = a2[7].i64[0];
  v8 = vorrq_s8(a2[5], a2[3]);
  v9 = vorrq_s8(v7, vorrq_s8(vextq_s8(a2[4], a2[4], 8uLL), vextq_s8(v8, v8, 8uLL)));
  if (*(_QWORD *)&vorr_s8(*(int8x8_t *)v9.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)) | a2[2].i64[1] | a2[2].i64[0] | a2[1].i64[1] | a2[1].i64[0])
    goto LABEL_10;
  if (objc_msgSend(a1, "isMeCard"))
    v11 = objc_msgSend(a1, "localizedLabel");
  else
    v11 = objc_msgSend(a1, "compositeName");
  v20 = v11;
  v21 = v20;
  if (v20)
  {
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v24 = v23;

    v25 = a3;
    v26 = String._bridgeToObjectiveC()();
    v27 = *(_QWORD *)&v25[OBJC_IVAR____TtC4Maps38PlaceSummaryTextHighlightConfiguration_typedAutocompleteQuery + 8];
    swift_bridgeObjectRetain(v27);
    v28 = String._bridgeToObjectiveC()();
    v29 = objc_msgSend(v26, "_maps_prefixMatchesForSearchString:", v28, swift_bridgeObjectRelease(v27).n128_f64[0]);

    if (v29)
    {
      v30 = sub_10000E4BC(0, (unint64_t *)&unk_10149A558, NSValue_ptr);
      v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v29, v30);

    }
    else
    {
      v31 = 0;
    }
  }
  else
  {
    v33 = a3;
    v31 = 0;
    v22 = 0;
    v24 = 0;
  }
  sub_1000ECFF4(v22, v24, v31, *(_BYTE *)(*(_QWORD *)&a3[OBJC_IVAR____TtC4Maps38PlaceSummaryTextHighlightConfiguration_type]+ OBJC_IVAR____TtC4Maps29PlaceSummaryTextHighlightType_type), 1, a4);

  swift_bridgeObjectRelease(v31);
  v32 = v24;
LABEL_20:
  *(_QWORD *)&result = swift_bridgeObjectRelease(v32).n128_u64[0];
  return result;
}

id sub_1000EEE18(void *a1)
{
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char **v33;
  id v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = objc_msgSend(objc_allocWithZone((Class)MapsUIImageGEOFeatureSpec), "init");
  objc_msgSend(v2, "setMarkerFallback:", 0);
  v3 = objc_msgSend(a1, "label");
  if (!v3)
    goto LABEL_3;
  v4 = v3;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v7 = v6;

  v38 = v5;
  v39 = v7;
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(CNLabelHome);
  v10 = v9;
  v36 = v8;
  v37 = v9;
  v11 = sub_10006C008();
  v12 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v36, &type metadata for String, &type metadata for String, v11, v11);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v10);
  if (!v12)
  {
    v33 = &selRef_homeWithHalo;
  }
  else
  {
LABEL_3:
    v13 = objc_msgSend(a1, "label", v36, v37, v38, v39);
    if (!v13)
      goto LABEL_5;
    v14 = v13;
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v17 = v16;

    v38 = v15;
    v39 = v17;
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(CNLabelWork);
    v20 = v19;
    v36 = v18;
    v37 = v19;
    v21 = sub_10006C008();
    v22 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v36, &type metadata for String, &type metadata for String, v21, v21);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v20);
    if (!v22)
    {
      v33 = &selRef_workWithHalo;
    }
    else
    {
LABEL_5:
      v23 = objc_msgSend(a1, "label");
      if (!v23)
        goto LABEL_7;
      v24 = v23;
      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      v27 = v26;

      v38 = v25;
      v39 = v27;
      v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(CNLabelSchool);
      v30 = v29;
      v36 = v28;
      v37 = v29;
      v31 = sub_10006C008();
      v32 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v36, &type metadata for String, &type metadata for String, v31, v31);
      swift_bridgeObjectRelease(v27);
      swift_bridgeObjectRelease(v30);
      if (!v32)
        v33 = &selRef_schoolWithHalo;
      else
LABEL_7:
        v33 = &selRef_markerWithHalo;
    }
  }
  v34 = objc_msgSend((id)objc_opt_self(GEOFeatureStyleAttributes), *v33);
  objc_msgSend(v2, "setStyle:", v34);

  return v2;
}

uint64_t sub_1000EF070(void *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  id v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE v14[24];

  v4 = (_QWORD *)(a2 + 16);
  result = swift_beginAccess(a2 + 16, v14, 0, 0);
  v6 = *(_QWORD *)(a2 + 16);
  if (!((unint64_t)v6 >> 62))
  {
    if (*(uint64_t *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10) > 2)
      return result;
    goto LABEL_3;
  }
  if (v6 < 0)
    v11 = v6;
  else
    v11 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v6);
  v12 = _CocoaArrayWrapper.endIndex.getter(v11);
  result = swift_bridgeObjectRelease(v6);
  if (v12 <= 2)
  {
LABEL_3:
    swift_beginAccess(v4, v13, 33, 0);
    v7 = a1;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v9 = *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v8 = *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v9 >= v8 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
    v10 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v7);
    specialized Array._endMutation()(v10);
    return swift_endAccess(v13);
  }
  return result;
}

double sub_1000EF16C@<D0>(id a1@<X3>, _QWORD *a2@<X1>, char *a3@<X4>, uint64_t a4@<X8>)
{
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  NSString v31;
  uint64_t v32;
  NSString v33;
  id v34;
  uint64_t v35;
  double result;
  uint64_t v37;
  char *v38;

  v5 = a2[13];
  if (v5 >> 60 != 10)
  {
LABEL_11:
    v37 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(a4, 1, 1, v37);
    return result;
  }
  v7 = a2[14];
  v9 = a2[11];
  v8 = a2[12];
  v10 = a2[9];
  v11 = a2[10];
  v13 = a2[7];
  v12 = a2[8];
  v15 = a2[5];
  v14 = a2[6];
  v16 = a2[2];
  v19 = a2 + 3;
  v18 = a2[3];
  v17 = v19[1];
  if (v5 != 0xA000000000000000)
    goto LABEL_17;
  v20.i64[0] = v10;
  v20.i64[1] = v12;
  v21.i64[0] = v7;
  v21.i64[1] = v8;
  v22.i64[0] = v13;
  v22.i64[1] = v14;
  v23.i64[0] = v9;
  v23.i64[1] = v11;
  v24 = vorrq_s8(vorrq_s8(v21, v20), vorrq_s8(v23, v22));
  if (v18 | *(_QWORD *)&vorr_s8(*(int8x8_t *)v24.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)) | v17 | v15 | v16)
  {
LABEL_17:
    if (v5 == 0xA000000000000000 && v16 == 28 && !(v8 | v7 | v9 | v11 | v10 | v12 | v13 | v14 | v15 | v17 | v18))
      return sub_1000EF3FC(a1, a4);
    goto LABEL_11;
  }
  v25 = objc_msgSend(a1, "address");
  v26 = v25;
  if (v25)
  {
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v29 = v28;

    v30 = a3;
    v31 = String._bridgeToObjectiveC()();
    v32 = *(_QWORD *)&v30[OBJC_IVAR____TtC4Maps38PlaceSummaryTextHighlightConfiguration_typedAutocompleteQuery + 8];
    swift_bridgeObjectRetain(v32);
    v33 = String._bridgeToObjectiveC()();
    v34 = objc_msgSend(v31, "_maps_prefixMatchesForSearchString:", v33, swift_bridgeObjectRelease(v32).n128_f64[0]);

    if (v34)
    {
      v35 = sub_10000E4BC(0, (unint64_t *)&unk_10149A558, NSValue_ptr);
      v26 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v34, v35);

    }
    else
    {
      v26 = 0;
    }
  }
  else
  {
    v38 = a3;
    v27 = 0;
    v29 = 0;
  }
  sub_1000ECFF4(v27, v29, (uint64_t)v26, *(_BYTE *)(*(_QWORD *)&a3[OBJC_IVAR____TtC4Maps38PlaceSummaryTextHighlightConfiguration_type]+ OBJC_IVAR____TtC4Maps29PlaceSummaryTextHighlightType_type), 1, a4);

  swift_bridgeObjectRelease(v26);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v29).n128_u64[0];
  return result;
}

double sub_1000EF3FC@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t countAndFlagsBits;
  void *v25;
  void *object;
  __n128 v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  double result;
  _QWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  Swift::String v38;
  Swift::String v39;

  v3 = objc_msgSend(a1, "metadata");
  if (!v3)
    goto LABEL_18;
  v4 = v3;
  v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v3, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  v33[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(CRRecentContactMetadataFrom);
  v33[1] = v6;
  AnyHashable.init<A>(_:)(v33, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v5 + 16) && (v7 = sub_1000C1804((uint64_t)&v34), (v8 & 1) != 0))
  {
    sub_100011E20(*(_QWORD *)(v5 + 56) + 32 * v7, (uint64_t)&v36);
  }
  else
  {
    v36 = 0u;
    v37 = 0u;
  }
  swift_bridgeObjectRelease(v5);
  sub_100012C48((uint64_t)&v34);
  if (*((_QWORD *)&v37 + 1))
  {
    v9 = sub_100008B04(&qword_10149A610);
    if ((swift_dynamicCast(v33, &v36, (char *)&type metadata for Any + 8, v9, 6) & 1) != 0)
    {
      v10 = v33[0];
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(CRRecentContactMetadataFromDisplayName);
      v13 = v12;
      if (!*(_QWORD *)(v10 + 16) || (v14 = sub_1000C17A0(v11, v12), (v15 & 1) == 0))
      {
        swift_bridgeObjectRelease(v13);
        v28 = v10;
LABEL_17:
        swift_bridgeObjectRelease(v28);
        goto LABEL_18;
      }
      v16 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v14);
      swift_unknownObjectRetain(v16);
      swift_bridgeObjectRelease(v13);
      swift_bridgeObjectRelease(v10);
      *(_QWORD *)&v36 = v16;
      if ((swift_dynamicCast(&v34, &v36, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6) & 1) != 0)
      {
        v18 = v34;
        v17 = v35;
        if (String.count.getter(v34, v35) >= 1)
        {
          if (qword_101490ED0 != -1)
            swift_once(&qword_101490ED0, sub_10011833C);
          v19._countAndFlagsBits = 0xD00000000000001ELL;
          v38._countAndFlagsBits = 0xD00000000000005FLL;
          v38._object = (void *)0x8000000100E49760;
          v19._object = (void *)0x8000000100E49740;
          v20._countAndFlagsBits = 0;
          v20._object = (void *)0xE000000000000000;
          v21 = NSLocalizedString(_:tableName:bundle:value:comment:)(v19, (Swift::String_optional)0, (NSBundle)qword_1014D4B80, v20, v38);
          v22 = sub_100008B04((uint64_t *)&unk_10149A4F0);
          v23 = swift_allocObject(v22, 72, 7);
          *(_OWORD *)(v23 + 16) = xmmword_100E22F40;
          *(_QWORD *)(v23 + 56) = &type metadata for String;
          *(_QWORD *)(v23 + 64) = sub_10000D8E0();
          *(_QWORD *)(v23 + 32) = v18;
          *(_QWORD *)(v23 + 40) = v17;
          countAndFlagsBits = static String.localizedStringWithFormat(_:_:)(v21._countAndFlagsBits, v21._object, v23);
          object = v25;
          swift_bridgeObjectRelease(v23);
          v27 = swift_bridgeObjectRelease(v21._object);
          goto LABEL_21;
        }
        v28 = v17;
        goto LABEL_17;
      }
    }
  }
  else
  {
    sub_100010CC4((uint64_t)&v36, (uint64_t *)&unk_101493350);
  }
LABEL_18:
  if (qword_101490ED0 != -1)
    swift_once(&qword_101490ED0, sub_10011833C);
  v39._countAndFlagsBits = 0xD000000000000050;
  v39._object = (void *)0x8000000100E496E0;
  v29._object = (void *)0x8000000100E496C0;
  v29._countAndFlagsBits = 0xD000000000000016;
  v30._countAndFlagsBits = 0;
  v30._object = (void *)0xE000000000000000;
  v31 = NSLocalizedString(_:tableName:bundle:value:comment:)(v29, (Swift::String_optional)0, (NSBundle)qword_1014D4B80, v30, v39);
  countAndFlagsBits = v31._countAndFlagsBits;
  object = v31._object;
LABEL_21:
  sub_1000E67E0(countAndFlagsBits, (unint64_t)object, 0, 0, 0, 0, 0, 0, a2, v27, 0);
  *(_QWORD *)&result = swift_bridgeObjectRelease(object).n128_u64[0];
  return result;
}

void sub_1000EF778(id a1@<X3>, uint64_t a2@<X1>, char *a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int8x16_t v12;
  uint64_t v13;
  BOOL v14;
  BOOL v16;
  BOOL v17;
  id v18;
  uint64_t v19;
  id v20;

  v9 = *(_QWORD *)(a2 + 104);
  if (v9 >> 60 != 10)
    goto LABEL_22;
  v10 = *(_QWORD *)(a2 + 112);
  v11 = *(_QWORD *)(a2 + 16);
  v12 = vorrq_s8(vorrq_s8(*(int8x16_t *)(a2 + 40), *(int8x16_t *)(a2 + 72)), vorrq_s8(*(int8x16_t *)(a2 + 56), *(int8x16_t *)(a2 + 88)));
  v13 = *(_QWORD *)&vorr_s8(*(int8x8_t *)v12.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)) | *(_QWORD *)(a2 + 32) | *(_QWORD *)(a2 + 24);
  if (!v10)
  {
    v14 = v9 == 0xA000000000000000 && v11 == 29;
    if (v14 && v13 == 0)
    {
      sub_1000EF90C(a1, a3, a5);
      return;
    }
  }
  if (!v10 && (v9 == 0xA000000000000000 ? (v16 = v11 == 30) : (v16 = 0), v16 ? (v17 = v13 == 0) : (v17 = 0), v17))
  {
    sub_1000EFC70(a1, *(_QWORD *)&a3[OBJC_IVAR____TtC4Maps38PlaceSummaryTextHighlightConfiguration_typedAutocompleteQuery], *(_QWORD *)&a3[OBJC_IVAR____TtC4Maps38PlaceSummaryTextHighlightConfiguration_typedAutocompleteQuery + 8], a5);
  }
  else
  {
LABEL_22:
    v18 = objc_msgSend(a1, "mapItem");
    if (v18)
    {
      v20 = v18;
      sub_1000DF718((uint64_t)v18, a2, a4, 0, (uint64_t)a3, 0, a5, 0, 0);

    }
    else
    {
      v19 = type metadata accessor for PlaceSummaryViewModelUnit(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a5, 1, 1, v19);
    }
  }
}

double sub_1000EF90C@<D0>(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  unint64_t v15;
  char v16;
  char *v17;
  NSString v18;
  NSString v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  NSString v28;
  uint64_t v29;
  NSString v30;
  id v31;
  uint64_t v32;
  char *v33;
  double result;
  Swift::String v35[2];

  v6 = objc_msgSend(a1, "mapItem");
  if (v6)
  {
    v7 = v6;
    v8 = objc_msgSend(v6, "_addressFormattedAsShortenedAddress");

    if (v8)
    {
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      v11 = v10;

      v12 = *(_QWORD *)&a2[OBJC_IVAR____TtC4Maps38PlaceSummaryTextHighlightConfiguration_typedAutocompleteQuery + 8];
      if (String.count.getter(*(_QWORD *)&a2[OBJC_IVAR____TtC4Maps38PlaceSummaryTextHighlightConfiguration_typedAutocompleteQuery], v12) < 1)
      {
        swift_bridgeObjectRelease(v11);
      }
      else
      {
        v13 = String.lowercased()();
        v35[1] = v13;
        v14 = String.lowercased()();
        v35[0] = v14;
        v15 = sub_10006C008();
        v16 = StringProtocol.contains<A>(_:)(v35, &type metadata for String, &type metadata for String, v15, v15);
        swift_bridgeObjectRelease(v13._object);
        swift_bridgeObjectRelease(v14._object);
        if ((v16 & 1) != 0)
        {
          v17 = a2;
          v18 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRetain(v12);
          v19 = String._bridgeToObjectiveC()();
          v20 = objc_msgSend(v18, "_maps_prefixMatchesForSearchString:", v19, swift_bridgeObjectRelease(v12).n128_f64[0]);

          if (v20)
          {
            v21 = sub_10000E4BC(0, (unint64_t *)&unk_10149A558, NSValue_ptr);
            v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v20, v21);

          }
          else
          {
            v22 = 0;
          }
          sub_1000ECFF4(v9, v11, v22, *(_BYTE *)(*(_QWORD *)&v17[OBJC_IVAR____TtC4Maps38PlaceSummaryTextHighlightConfiguration_type]+ OBJC_IVAR____TtC4Maps29PlaceSummaryTextHighlightType_type), 1, a3);
          swift_bridgeObjectRelease(v11);

          goto LABEL_15;
        }
        swift_bridgeObjectRelease(v11);
      }
    }
  }
  v23 = objc_msgSend(a1, "name");
  v24 = v23;
  if (v23)
  {
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v22 = v26;

    v27 = a2;
    v28 = String._bridgeToObjectiveC()();
    v29 = *(_QWORD *)&v27[OBJC_IVAR____TtC4Maps38PlaceSummaryTextHighlightConfiguration_typedAutocompleteQuery + 8];
    swift_bridgeObjectRetain(v29);
    v30 = String._bridgeToObjectiveC()();
    v31 = objc_msgSend(v28, "_maps_prefixMatchesForSearchString:", v30, swift_bridgeObjectRelease(v29).n128_f64[0]);

    if (v31)
    {
      v32 = sub_10000E4BC(0, (unint64_t *)&unk_10149A558, NSValue_ptr);
      v24 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v31, v32);

    }
    else
    {
      v24 = 0;
    }
  }
  else
  {
    v33 = a2;
    v25 = 0;
    v22 = 0;
  }
  sub_1000ECFF4(v25, v22, (uint64_t)v24, *(_BYTE *)(*(_QWORD *)&a2[OBJC_IVAR____TtC4Maps38PlaceSummaryTextHighlightConfiguration_type]+ OBJC_IVAR____TtC4Maps29PlaceSummaryTextHighlightType_type), 1, a3);

  swift_bridgeObjectRelease(v24);
LABEL_15:
  *(_QWORD *)&result = swift_bridgeObjectRelease(v22).n128_u64[0];
  return result;
}

double sub_1000EFC70@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *object;
  __n128 v13;
  Swift::String v14;
  Swift::String v15;
  unint64_t v16;
  char v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  __n128 v21;
  uint64_t v22;
  double result;
  Swift::String v24[2];
  Swift::String v25;

  v7 = objc_msgSend(a1, "mapItem");
  if (v7
    && (v8 = v7,
        v9 = objc_msgSend(v7, "_addressFormattedAsShortenedAddress"),
        v8,
        v9))
  {
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    object = v11;

    if (String.count.getter(a2, a3) < 1)
      goto LABEL_9;
    v14 = String.lowercased()();
    v24[1] = v14;
    v15 = String.lowercased()();
    v24[0] = v15;
    v16 = sub_10006C008();
    v17 = StringProtocol.contains<A>(_:)(v24, &type metadata for String, &type metadata for String, v16, v16);
    swift_bridgeObjectRelease(v14._object);
    v13 = swift_bridgeObjectRelease(v15._object);
    if ((v17 & 1) != 0)
    {
      swift_bridgeObjectRelease(object);
      if (qword_101490ED0 != -1)
        swift_once(&qword_101490ED0, sub_10011833C);
      v25._object = (void *)0x8000000100E49500;
      v18._countAndFlagsBits = 0x4C2064656B72614DLL;
      v18._object = (void *)0xEF6E6F697461636FLL;
      v19._countAndFlagsBits = 0;
      v19._object = (void *)0xE000000000000000;
      v25._countAndFlagsBits = 0xD00000000000004FLL;
      v20 = NSLocalizedString(_:tableName:bundle:value:comment:)(v18, (Swift::String_optional)0, (NSBundle)qword_1014D4B80, v19, v25);
      object = v20._object;
      sub_1000E67E0(v20._countAndFlagsBits, (unint64_t)v20._object, 0, 0, 0, 0, 0, 0, a4, v21, 0);
    }
    else
    {
LABEL_9:
      sub_1000E67E0(v10, (unint64_t)object, 0, 0, 0, 0, 0, 0, a4, v13, 0);
    }
    *(_QWORD *)&result = swift_bridgeObjectRelease(object).n128_u64[0];
  }
  else
  {
    v22 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(a4, 1, 1, v22);
  }
  return result;
}

double sub_1000EFE8C@<D0>(id a1@<X3>, _QWORD *a2@<X1>, void *a3@<X4>, uint64_t a4@<X8>)
{
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  NSString v30;
  uint64_t v31;
  NSString v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  __n128 v37;
  void *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  double result;
  unint64_t v44;

  v5 = a2[13];
  if (v5 >> 60 != 10)
    goto LABEL_11;
  v7 = a2[14];
  v9 = a2[11];
  v8 = a2[12];
  v10 = a2[9];
  v11 = a2[10];
  v13 = a2[7];
  v12 = a2[8];
  v15 = a2[5];
  v14 = a2[6];
  v16 = a2[2];
  v19 = a2 + 3;
  v18 = a2[3];
  v17 = v19[1];
  if (v5 != 0xA000000000000000)
    goto LABEL_19;
  v20.i64[0] = v10;
  v20.i64[1] = v12;
  v21.i64[0] = v7;
  v21.i64[1] = v8;
  v22.i64[0] = v13;
  v22.i64[1] = v14;
  v23.i64[0] = v9;
  v23.i64[1] = v11;
  v24 = vorrq_s8(vorrq_s8(v21, v20), vorrq_s8(v23, v22));
  if (v18 | *(_QWORD *)&vorr_s8(*(int8x8_t *)v24.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)) | v17 | v15 | v16)
  {
LABEL_19:
    if (v5 == 0xA000000000000000 && v16 == 31 && !(v8 | v7 | v9 | v11 | v10 | v12 | v13 | v14 | v15 | v17 | v18))
    {
      v36 = objc_msgSend(a1, "subtitle");
      if (v36)
      {
        v38 = v36;
        v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
        v41 = v40;

      }
      else
      {
        v39 = 0;
        v41 = 0;
      }
      sub_1000E67E0(v39, v41, 0, 0, 0, 0, 0, 0, a4, v37, 0);
      v44 = v41;
      goto LABEL_16;
    }
LABEL_11:
    v42 = type metadata accessor for PlaceSummaryViewModelUnit(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(a4, 1, 1, v42);
    return result;
  }
  v25 = objc_msgSend(a1, "title");
  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  v28 = v27;

  v29 = a3;
  v30 = String._bridgeToObjectiveC()();
  v31 = *(_QWORD *)&v29[OBJC_IVAR____TtC4Maps38PlaceSummaryTextHighlightConfiguration_typedAutocompleteQuery + 8];
  swift_bridgeObjectRetain(v31);
  v32 = String._bridgeToObjectiveC()();
  v33 = objc_msgSend(v30, "_maps_prefixMatchesForSearchString:", v32, swift_bridgeObjectRelease(v31).n128_f64[0]);

  if (v33)
  {
    v34 = sub_10000E4BC(0, (unint64_t *)&unk_10149A558, NSValue_ptr);
    v35 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v33, v34);

  }
  else
  {
    v35 = 0;
  }
  sub_1000ECFF4(v26, v28, v35, *(_BYTE *)(*(_QWORD *)&v29[OBJC_IVAR____TtC4Maps38PlaceSummaryTextHighlightConfiguration_type]+ OBJC_IVAR____TtC4Maps29PlaceSummaryTextHighlightType_type), 1, a4);
  swift_bridgeObjectRelease(v28);

  v44 = v35;
LABEL_16:
  *(_QWORD *)&result = swift_bridgeObjectRelease(v44).n128_u64[0];
  return result;
}

uint64_t sub_1000F0168(char a1, char a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __n128 v28;
  uint64_t v30;
  uint64_t v31;

  v9 = type metadata accessor for AttributeContainer(0, a5);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (a1 == 1)
    {
      static Color.primary.getter(v10);
      v14 = Color.opacity(_:)(0.58);
      swift_release();
    }
    else
    {
      v14 = static Color.primary.getter(v10);
    }
    v15 = 0;
  }
  else
  {
    if ((a2 & 1) != 0)
      v16 = static Font.body.getter(v11);
    else
      v16 = static Font.subheadline.getter(v10);
    v17 = v16;
    static Font.Weight.regular.getter();
    v15 = Font.weight(_:)(v17);
    swift_release();
    v14 = 0;
  }
  v18 = swift_bridgeObjectRetain(a4);
  AttributeContainer.init()(v18);
  AttributedString.init(_:attributes:)(a3, a4, v13);
  KeyPath = swift_getKeyPath(&unk_100E2B770);
  __chkstk_darwin(KeyPath);
  *(&v30 - 2) = v20;
  v21 = swift_getKeyPath(&unk_100E2B7A0);
  v31 = v14;
  v22 = sub_10006C5A8();
  v23 = swift_retain();
  AttributedString.subscript.setter(&v31, v21, v22, v23);
  v24 = swift_getKeyPath(&unk_100E2B850);
  __chkstk_darwin(v24);
  *(&v30 - 2) = v25;
  v26 = swift_getKeyPath(&unk_100E2B880);
  v31 = v15;
  v27 = sub_1000F9468();
  v28 = swift_retain();
  AttributedString.subscript.setter(&v31, v26, v27, v28);
  swift_release();
  return swift_release();
}

void sub_1000F035C(char a1@<W0>, uint64_t a2@<X8>)
{
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  Swift::String v7[4];
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  Swift::String v13;

  if ((a1 & 1) != 0)
  {
    if (qword_101490ED0 != -1)
      swift_once(&qword_101490ED0, sub_10011833C);
    v3._countAndFlagsBits = 0xD00000000000001ALL;
    v13._object = (void *)0x8000000100E49570;
    v3._object = (void *)0x8000000100E49550;
    v4._countAndFlagsBits = 0x6569766552206F4ELL;
    v4._object = (void *)0xEA00000000007377;
    v13._countAndFlagsBits = 0xD000000000000017;
    v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)qword_1014D4B80, v4, v13);
    if (String.count.getter(v5._countAndFlagsBits, v5._object) > 0)
    {
      v7[0] = v5;
      memset(&v7[1], 0, 48);
      v8 = 0;
      v9 = 1;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      sub_1000E8D14(&v7[0]._countAndFlagsBits, 0, a2);
      swift_bridgeObjectRelease_n(0, 4);
      swift_bridgeObjectRelease(v5._object);
      return;
    }
    swift_bridgeObjectRelease(v5._object);
  }
  v6 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a2, 1, 1, v6);
}

id sub_1000F04B4(float a1)
{
  double v2;

  if (a1 >= 4.0 || a1 < 0.0)
    v2 = dbl_100E2B6C0[a1 == 4.0];
  else
    v2 = 0.68627451;
  return objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 1.0, v2, 0.0, 1.0);
}

uint64_t sub_1000F051C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  __n128 v46;
  uint64_t v47;
  unint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(_QWORD *, _QWORD);
  unint64_t v57;
  uint64_t (*v58)(char *, uint64_t);
  void *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(_QWORD *, _QWORD);
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(_QWORD *, _QWORD);
  uint64_t v103;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  int v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  int v116;
  char *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t KeyPath;
  _QWORD v130[4];
  _QWORD v131[3];
  uint64_t v132;

  v116 = a6;
  v108 = a5;
  v12 = sub_100008B04(&qword_10149A510);
  v13 = __chkstk_darwin(v12);
  v115 = (char *)&v105 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for AttributedSubstring(0, v13);
  v122 = *(_QWORD *)(v15 - 8);
  v123 = v15;
  __chkstk_darwin(v15);
  v117 = (char *)&v105 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v114 = (char *)&v105 - v18;
  v19 = sub_100008B04(&qword_1014958A8);
  __chkstk_darwin(v19);
  v125 = (char *)&v105 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100008B04(&qword_1014958B0);
  v126 = *(_QWORD *)(v21 - 8);
  v127 = v21;
  __chkstk_darwin(v21);
  v112 = (uint64_t)&v105 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v113 = (uint64_t)&v105 - v24;
  __chkstk_darwin(v25);
  v120 = (char *)&v105 - v26;
  __chkstk_darwin(v27);
  v124 = (uint64_t)&v105 - v28;
  __chkstk_darwin(v29);
  v31 = (char *)&v105 - v30;
  __chkstk_darwin(v32);
  v121 = (uint64_t)&v105 - v33;
  v35 = __chkstk_darwin(v34);
  v37 = (char *)&v105 - v36;
  v38 = type metadata accessor for AttributeContainer(0, v35);
  __chkstk_darwin(v38);
  v40 = (char *)&v105 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = type metadata accessor for AttributedString(0);
  v110 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v42 = (char *)&v105 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = swift_bridgeObjectRetain(a2);
  AttributeContainer.init()(v43);
  AttributedString.init(_:attributes:)(a1, a2, v40);
  KeyPath = swift_getKeyPath(&unk_100E2B770);
  v44 = swift_getKeyPath(&unk_100E2B7A0);
  v130[0] = a4;
  v45 = sub_10006C5A8();
  v46 = swift_retain();
  v107 = v45;
  v128 = v42;
  AttributedString.subscript.setter(v130, v44, v45, v46);
  if (!a3)
    goto LABEL_28;
  v47 = *(_QWORD *)(a3 + 16);
  if (!v47)
    goto LABEL_28;
  v109 = v31;
  v106 = a7;
  swift_bridgeObjectRetain(a3);
  v105 = a3;
  v48 = (unint64_t *)(a3 + 48);
  v49 = &qword_1014958B0;
  v50 = (uint64_t)v125;
  v51 = (uint64_t)v120;
  v119 = v37;
  while (1)
  {
    v58 = (uint64_t (*)(char *, uint64_t))*(v48 - 1);
    v57 = *v48;
    v59 = (void *)*(v48 - 2);
    sub_1000A42BC(v59);
    sub_1000F0FB4(v58, v57, (uint64_t)v128, v50);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v126 + 48))(v50, 1, v127) == 1)
      break;
    sub_1000207BC(v50, (uint64_t)v37, v49);
    if (v59)
    {
      if (v59 != (void *)1)
      {
        if (v59 == (void *)2)
        {
          v60 = (uint64_t)v37;
          v61 = v49;
          v62 = v113;
          sub_10000C1FC(v60, v113, v61);
          v63 = swift_getKeyPath(&unk_100E2B7E0);
          __chkstk_darwin(v63);
          *(&v105 - 2) = v64;
          v65 = swift_getKeyPath(&unk_100E2B810);
          v66 = v115;
          static Text.LineStyle.single.getter(v65);
          v67 = type metadata accessor for Text.LineStyle(0);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v66, 0, 1, v67);
          swift_beginAccess(v128, v131, 33, 0);
          v68 = sub_100010D70(&qword_1014958E0, v61, (const char *)&protocol conformance descriptor for Range<A>);
          v69 = (void (*)(_QWORD *, _QWORD))AttributedString.subscript.modify(v130, v62, v127, v68);
          v70 = sub_1000F93AC();
          AttributedSubstring.subscript.setter(v66, v65, v70);
          v69(v130, 0);
          swift_endAccess(v131);
          v71 = v62;
          v49 = v61;
          v37 = v119;
          v51 = (uint64_t)v120;
          sub_100010CC4(v71, v49);
          sub_100010CC4((uint64_t)v37, v49);
        }
        else if ((v116 & 1) != 0)
        {
          sub_10000C1FC((uint64_t)v37, v112, v49);
          v93 = swift_getKeyPath(&unk_100E2B770);
          __chkstk_darwin(v93);
          *(&v105 - 2) = v94;
          v95 = swift_getKeyPath(&unk_100E2B7A0);
          v96 = v95;
          if ((v108 & 1) != 0)
            v97 = static Color.white.getter(v95);
          else
            v97 = static Color.blue.getter(v95);
          v132 = v97;
          swift_beginAccess(v128, v131, 33, 0);
          v100 = sub_100010D70(&qword_1014958E0, v49, (const char *)&protocol conformance descriptor for Range<A>);
          v101 = v112;
          v102 = (void (*)(_QWORD *, _QWORD))AttributedString.subscript.modify(v130, v112, v127, v100);
          AttributedSubstring.subscript.setter(&v132, v96, v107);
          v102(v130, 0);
          swift_endAccess(v131);
          sub_1000F9380(v59);
          sub_100010CC4(v101, v49);
          sub_100010CC4((uint64_t)v37, v49);
          v51 = (uint64_t)v120;
        }
        else
        {
          sub_100010CC4((uint64_t)v37, v49);
          sub_1000F9380(v59);
        }
        goto LABEL_7;
      }
      sub_10000C1FC((uint64_t)v37, v124, v49);
      v72 = swift_getKeyPath(&unk_100E2B850);
      __chkstk_darwin(v72);
      *(&v105 - 2) = v73;
      v118 = swift_getKeyPath(&unk_100E2B880);
      sub_10000C1FC((uint64_t)v37, v51, v49);
      v74 = swift_getKeyPath(&unk_100E2B850);
      __chkstk_darwin(v74);
      *(&v105 - 2) = v75;
      v76 = swift_getKeyPath(&unk_100E2B880);
      swift_beginAccess(v128, v130, 32, 0);
      v77 = sub_100010D70(&qword_1014958E0, v49, (const char *)&protocol conformance descriptor for Range<A>);
      v78 = v117;
      AttributedString.subscript.getter(v51, v127, v77);
      v79 = sub_1000F9468();
      AttributedSubstring.subscript.getter(v131, v76, v79);
      (*(void (**)(char *, uint64_t))(v122 + 8))(v78, v123);
      v80 = v131[0];
      if (v131[0])
      {
        swift_endAccess(v130);
        swift_release();
        v81 = v51;
        sub_100010CC4(v51, v49);
        v82 = v80;
      }
      else
      {
        swift_endAccess(v130);
        swift_release();
        v81 = v51;
        v98 = sub_100010CC4(v51, v49);
        v82 = static Font.subheadline.getter(v98);
      }
      v99 = Font.italic()(v82);
      swift_release();
      v132 = v99;
      swift_beginAccess(v128, v131, 33, 0);
      v55 = v124;
    }
    else
    {
      v81 = v51;
      sub_10000C1FC((uint64_t)v37, v121, v49);
      v83 = swift_getKeyPath(&unk_100E2B850);
      __chkstk_darwin(v83);
      *(&v105 - 2) = v84;
      v118 = swift_getKeyPath(&unk_100E2B880);
      v85 = (uint64_t)v37;
      v86 = v49;
      v87 = (uint64_t)v109;
      sub_10000C1FC(v85, (uint64_t)v109, v86);
      v88 = swift_getKeyPath(&unk_100E2B850);
      __chkstk_darwin(v88);
      *(&v105 - 2) = v89;
      v90 = swift_getKeyPath(&unk_100E2B880);
      swift_beginAccess(v128, v130, 32, 0);
      v77 = sub_100010D70(&qword_1014958E0, v86, (const char *)&protocol conformance descriptor for Range<A>);
      v91 = v114;
      AttributedString.subscript.getter(v87, v127, v77);
      v79 = sub_1000F9468();
      AttributedSubstring.subscript.getter(v131, v90, v79);
      (*(void (**)(char *, uint64_t))(v122 + 8))(v91, v123);
      v92 = v131[0];
      if (v131[0])
      {
        swift_endAccess(v130);
        swift_release();
        sub_100010CC4(v87, v86);
        v53 = v92;
      }
      else
      {
        swift_endAccess(v130);
        swift_release();
        v52 = sub_100010CC4(v87, v86);
        v53 = static Font.subheadline.getter(v52);
      }
      v54 = Font.bold()(v53);
      swift_release();
      v49 = v86;
      v37 = v119;
      v132 = v54;
      swift_beginAccess(v128, v131, 33, 0);
      v55 = v121;
    }
    v56 = (void (*)(_QWORD *, _QWORD))AttributedString.subscript.modify(v130, v55, v127, v77);
    AttributedSubstring.subscript.setter(&v132, v118, v79);
    v56(v130, 0);
    swift_endAccess(v131);
    sub_100010CC4(v55, v49);
    sub_100010CC4((uint64_t)v37, v49);
    v50 = (uint64_t)v125;
    v51 = v81;
LABEL_7:
    v48 += 3;
    if (!--v47)
    {
      swift_bridgeObjectRelease(v105);
      goto LABEL_27;
    }
  }
  swift_bridgeObjectRelease(v105);
  sub_1000F9380(v59);
  sub_100010CC4(v50, &qword_1014958A8);
LABEL_27:
  a7 = v106;
LABEL_28:
  v103 = (uint64_t)v128;
  swift_beginAccess(v128, v130, 0, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v110 + 32))(a7, v103, v111);
}

uint64_t sub_1000F0FB4@<X0>(uint64_t (*a1)(char *, uint64_t)@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(char *, uint64_t);
  uint64_t result;
  unint64_t v40;
  char *v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  char *v55;
  char *v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  char *v59;
  void (*v60)(char *, uint64_t);
  void (*v61)(char *, uint64_t, uint64_t);
  void (*v62)(char *, uint64_t);
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t (*v70)(char *, uint64_t);
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE v76[32];

  v73 = a2;
  v70 = a1;
  v75 = a4;
  v65 = sub_100008B04(&qword_10149A538);
  __chkstk_darwin(v65);
  v66 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v63 = (char *)&v60 - v7;
  v74 = sub_100008B04(&qword_1014958B0);
  v72 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v64 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for AttributedString(0);
  v9 = *(_QWORD *)(v69 - 8);
  v10 = __chkstk_darwin(v69);
  v12 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AttributedString.Index(0, v10);
  v71 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v67 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v60 - v16;
  v19 = __chkstk_darwin(v18);
  v68 = (char *)&v60 - v20;
  v21 = type metadata accessor for AttributedString.CharacterView(0, v19);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v60 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v27 = (char *)&v60 - v26;
  v28 = swift_beginAccess(a3, v76, 32, 0);
  AttributedString.characters.getter(v28);
  v29 = swift_endAccess(v76);
  v30 = AttributedString.CharacterView._count.getter(v29);
  v31 = *(void (**)(char *, uint64_t))(v22 + 8);
  v31(v27, v21);
  v32 = 1;
  if ((v30 & 0x8000000000000000) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 56))(v75, v32, 1, v74);
  if (v30 < v73)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 56))(v75, v32, 1, v74);
  v33 = (unint64_t)v70;
  if ((unint64_t)v70 >= v73)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 56))(v75, v32, 1, v74);
  v62 = v31;
  v34 = swift_beginAccess(a3, v76, 32, 0);
  AttributedString.characters.getter(v34);
  v35 = v69;
  v61 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v61(v12, a3, v69);
  v36 = swift_endAccess(v76);
  AttributedString.startIndex.getter(v36);
  v37 = v35;
  v38 = *(uint64_t (**)(char *, uint64_t))(v9 + 8);
  result = v38(v12, v37);
  if ((v33 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  v40 = v33;
  v41 = v68;
  v70 = v38;
  AttributedString.CharacterView._index(_:offsetBy:)(v17, v40);
  v60 = *(void (**)(char *, uint64_t))(v71 + 8);
  v60(v17, v13);
  v42 = v62;
  v62(v24, v21);
  v43 = swift_beginAccess(a3, v76, 32, 0);
  AttributedString.characters.getter(v43);
  v61(v12, a3, v37);
  v44 = swift_endAccess(v76);
  v45 = v67;
  AttributedString.startIndex.getter(v44);
  result = v70(v12, v37);
  if ((v73 & 0x8000000000000000) != 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  AttributedString.CharacterView._index(_:offsetBy:)(v45, v73);
  v46 = v45;
  v47 = v60;
  v60(v46, v13);
  v42(v24, v21);
  v48 = sub_10000BC84(&qword_10149A540, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.Index, (uint64_t)&protocol conformance descriptor for AttributedString.Index);
  result = dispatch thunk of static Comparable.<= infix(_:_:)(v41, v17, v13, v48);
  if ((result & 1) != 0)
  {
    v49 = v41;
    v50 = v65;
    v51 = v63;
    v52 = &v63[*(int *)(v65 + 48)];
    v53 = v71;
    v54 = *(void (**)(char *, char *, uint64_t))(v71 + 32);
    v54(v63, v49, v13);
    v54(v52, v17, v13);
    v55 = v66;
    v56 = &v66[*(int *)(v50 + 48)];
    v57 = *(void (**)(char *, char *, uint64_t))(v53 + 16);
    v57(v66, v51, v13);
    v57(v56, v52, v13);
    v58 = (uint64_t)v64;
    v54(v64, v55, v13);
    v47(v56, v13);
    v59 = &v55[*(int *)(v50 + 48)];
    v54(v55, v51, v13);
    v54(v59, v52, v13);
    v54((char *)(v58 + *(int *)(v74 + 36)), v59, v13);
    v47(v55, v13);
    sub_1000207BC(v58, v75, &qword_1014958B0);
    v32 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 56))(v75, v32, 1, v74);
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000F149C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v4 = *a2;
  v7 = *a1;
  v8 = v4;
  v5 = sub_100008B04(a4);
  return dispatch thunk of static Equatable.== infix(_:_:)(&v8, &v7, v5, &protocol witness table for AnyKeyPath) & 1;
}

double sub_1000F14F0@<D0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  __n128 v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __n128 v29;
  unint64_t v30;
  uint64_t v31;
  double result;
  id v33;
  void *v34;
  uint64_t v35;
  void *v36;
  Swift::String v37;

  v5 = objc_msgSend(a1, "clientResolved");
  if (v5)
  {
    v6 = v5;
    switch(objc_msgSend(v5, "itemType"))
    {
      case 1u:
        v7 = objc_msgSend((id)objc_opt_self(AddressBookManager), "sharedManager");
        if (!v7)
        {
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
          JUMPOUT(0x1000F1940);
        }
        v8 = v7;
        v9 = objc_msgSend(v7, "meCardHomeAddress");

        if (v9)
          goto LABEL_21;
        goto LABEL_23;
      case 2u:
        v11 = objc_msgSend((id)objc_opt_self(AddressBookManager), "sharedManager");
        if (!v11)
          goto LABEL_28;
        v12 = v11;
        v9 = objc_msgSend(v11, "meCardWorkAddress");

        if (v9)
          goto LABEL_21;
        goto LABEL_23;
      case 3u:
        v13 = objc_msgSend((id)objc_opt_self(ParkedCarManager), "sharedManager");
        v9 = objc_msgSend(v13, "parkedCar");

        if (!v9)
          goto LABEL_23;
        v14 = objc_msgSend(v9, "locationDisplayString");

        goto LABEL_22;
      case 4u:
        if (!a2)
          goto LABEL_17;
        v15 = objc_msgSend(a2, "mapItem");
        if (!v15)
          goto LABEL_17;
        v16 = v15;
        v17 = objc_msgSend(v15, "_addressFormattedAsShortenedAddress");

        if (!v17)
          goto LABEL_17;
        v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
        v20 = v19;

        if (qword_101490ED0 != -1)
          swift_once(&qword_101490ED0, sub_10011833C);
        v37._countAndFlagsBits = 0xD00000000000006ELL;
        v37._object = (void *)0x8000000100E498A0;
        v21._object = (void *)0x8000000100E49880;
        v21._countAndFlagsBits = 0xD000000000000015;
        v22._countAndFlagsBits = 0x4025207261654ELL;
        v22._object = (void *)0xE700000000000000;
        v23 = NSLocalizedString(_:tableName:bundle:value:comment:)(v21, (Swift::String_optional)0, (NSBundle)qword_1014D4B80, v22, v37);
        v24 = sub_100008B04((uint64_t *)&unk_10149A4F0);
        v25 = swift_allocObject(v24, 72, 7);
        *(_OWORD *)(v25 + 16) = xmmword_100E22F40;
        *(_QWORD *)(v25 + 56) = &type metadata for String;
        *(_QWORD *)(v25 + 64) = sub_10000D8E0();
        *(_QWORD *)(v25 + 32) = v18;
        *(_QWORD *)(v25 + 40) = v20;
        v26 = static String.localizedStringWithFormat(_:_:)(v23._countAndFlagsBits, v23._object, v25);
        v28 = v27;
        swift_bridgeObjectRelease(v25);
        v29 = swift_bridgeObjectRelease(v23._object);
        sub_1000E67E0(v26, v28, 0, 0, 0, 0, 0, 0, a3, v29, 0);

        v30 = v28;
        goto LABEL_26;
      case 6u:
        v33 = objc_msgSend((id)objc_opt_self(AddressBookManager), "sharedManager");
        if (!v33)
          goto LABEL_29;
        v34 = v33;
        v9 = objc_msgSend(v33, "meCardSchoolAddress");

        if (v9)
        {
LABEL_21:
          v14 = objc_msgSend(v9, "shortAddress");

          if (v14)
          {
LABEL_22:
            v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
            v9 = v36;

          }
          else
          {
            v35 = 0;
            v9 = 0;
          }
        }
        else
        {
LABEL_23:
          v35 = 0;
        }
        sub_1000E67E0(v35, (unint64_t)v9, 0, 0, 0, 0, 0, 0, a3, v10, 0);

        v30 = (unint64_t)v9;
LABEL_26:
        *(_QWORD *)&result = swift_bridgeObjectRelease(v30).n128_u64[0];
        break;
      default:
LABEL_17:

        v5 = 0;
        goto LABEL_18;
    }
  }
  else
  {
LABEL_18:
    v31 = type metadata accessor for PlaceSummaryViewModelUnit((uint64_t)v5);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(a3, 1, 1, v31);
  }
  return result;
}

double sub_1000F1958@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  __n128 v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double result;

  v4 = objc_msgSend(a1, "symbolColor");
  if (v4)
    v5 = Color.init(uiColor:)(v4);
  else
    v5 = 0;
  v6 = objc_msgSend(a1, "darkSymbolColor");
  if (v6)
    v7 = Color.init(uiColor:)(v6);
  else
    v7 = 0;
  v8 = objc_msgSend(a1, "valueString");
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  v12 = objc_msgSend(a1, "symbolName");
  if (v12)
  {
    v14 = v12;
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v17 = v16;

  }
  else
  {
    v15 = 0;
    v17 = 0;
  }
  sub_1000E67E0(v9, v11, v15, v17, 0, 0, v5, v7, a2, v13, 0);
  swift_bridgeObjectRelease(v11);
  swift_release();
  swift_release();
  *(_QWORD *)&result = swift_bridgeObjectRelease(v17).n128_u64[0];
  return result;
}

void sub_1000F1AA4(void *a1, void *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  void (*v21)(_BYTE *, _QWORD);
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE v31[32];

  v8 = sub_100008B04(&qword_101497918);
  __chkstk_darwin(v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000F8F98(a3);
  if ((v17 & 1) == 0)
  {
    v18 = v15;
    v30 = v16;
    sub_1000E6AE8(0, 1, a2, a1, a4 & 1, (uint64_t)v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
    {
      sub_100010CC4((uint64_t)v10, &qword_101497918);
      return;
    }
    sub_10003F29C((uint64_t)v10, (uint64_t)v14, type metadata accessor for PlaceSummaryViewModelUnit);
    KeyPath = swift_getKeyPath(&unk_100E2B728);
    v20 = swift_getKeyPath(&unk_100E2B750);
    v21 = (void (*)(_BYTE *, _QWORD))static Published.subscript.modify(v31, a3, KeyPath, v20);
    v23 = v22;
    v24 = *v22;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v22);
    *v23 = v24;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((v18 & 0x8000000000000000) == 0)
        goto LABEL_6;
    }
    else
    {
      v24 = sub_10020D8E4(v24);
      *v23 = v24;
      if ((v18 & 0x8000000000000000) == 0)
      {
LABEL_6:
        if (v18 < *(_QWORD *)(v24 + 16))
        {
          v26 = type metadata accessor for PlaceSummaryViewModelLine(0);
          v24 += ((*(unsigned __int8 *)(*(_QWORD *)(v26 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v26 - 8) + 80))
               + *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72) * v18;
          v23 = (unint64_t *)*(int *)(v26 + 20);
          v18 = *(unint64_t *)((char *)v23 + v24);
          v27 = swift_isUniquelyReferenced_nonNull_native(v18);
          *(unint64_t *)((char *)v23 + v24) = v18;
          if ((v27 & 1) != 0)
          {
            v28 = v30;
            if ((v30 & 0x8000000000000000) == 0)
              goto LABEL_9;
            goto LABEL_16;
          }
LABEL_15:
          v18 = sub_10020D90C(v18);
          *(unint64_t *)((char *)v23 + v24) = v18;
          v28 = v30;
          if ((v30 & 0x8000000000000000) == 0)
          {
LABEL_9:
            if (v28 < *(_QWORD *)(v18 + 16))
            {
              sub_1000F91F0((uint64_t)v14, v18+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(_QWORD *)(v12 + 72) * v28);
              v21(v31, 0);
              swift_release();
              swift_release();
              sub_1000202F0((uint64_t)v14, type metadata accessor for PlaceSummaryViewModelUnit);
              return;
            }
LABEL_17:
            __break(1u);
            return;
          }
LABEL_16:
          __break(1u);
          goto LABEL_17;
        }
LABEL_14:
        __break(1u);
        goto LABEL_15;
      }
    }
    __break(1u);
    goto LABEL_14;
  }
}

void sub_1000F1D98(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  double v17;
  double v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  id v50;
  void *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  id v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  id v64;
  void *v65;
  uint64_t v66;
  id v67;
  NSObject *v68;
  uint64_t v69;
  uint8_t *v70;
  uint64_t v71;
  id v72;
  void *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;

  v4 = sub_100008B04((uint64_t *)&unk_101499B30);
  __chkstk_darwin(v4);
  v6 = (char *)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v82 - v8;
  __chkstk_darwin(v10);
  v12 = (char *)&v82 - v11;
  __chkstk_darwin(v13);
  v15 = (char *)&v82 - v14;
  v16 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
  objc_msgSend(v16, "scale");
  v18 = v17;

  if (!MapsFeature_IsEnabled_SearchAndDiscovery(v19))
  {
    v28 = objc_msgSend(a1, "_geoMapItem");
    if (v28)
    {
      v29 = v28;
      v30 = objc_msgSend(v28, "_photos");
      swift_unknownObjectRelease(v29);
      if (!v30
        || (v31 = sub_100008B04(&qword_101495C28),
            v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v30, v31),
            v30,
            v33 = sub_1000F268C(v32, v18 * 64.0, v18 * 64.0),
            swift_bridgeObjectRelease(v32),
            !v33))
      {
        v37 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(a2, 1, 1, v37);
        return;
      }
      v34 = objc_msgSend(v33, "url");
      if (v34)
      {
        v35 = v34;
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v34);

        swift_unknownObjectRelease(v33);
        v36 = type metadata accessor for URL(0);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v6, 0, 1, v36);
      }
      else
      {
        swift_unknownObjectRelease(v33);
        v38 = type metadata accessor for URL(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v6, 1, 1, v38);
      }
      v39 = (uint64_t)v6;
      goto LABEL_47;
    }
    goto LABEL_53;
  }
  v20 = objc_msgSend(a1, "_searchResultPhotoCarousel");
  if (!v20)
    goto LABEL_28;
  v21 = v20;
  v22 = sub_100008B04(&qword_101495C28);
  v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, v22);

  if ((unint64_t)v23 >> 62)
  {
    if (v23 < 0)
      v41 = v23;
    else
      v41 = v23 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v23);
    v42 = _CocoaArrayWrapper.endIndex.getter(v41);
    swift_bridgeObjectRelease(v23);
    if (v42)
      goto LABEL_5;
  }
  else if (*(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_5:
    if ((v23 & 0xC000000000000001) != 0)
    {
      v24 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v23);
      goto LABEL_8;
    }
    if (*(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v24 = *(void **)(v23 + 32);
      swift_unknownObjectRetain(v24);
LABEL_8:
      swift_bridgeObjectRelease(v23);
      v25 = objc_msgSend(v24, "largestPhoto");
      swift_unknownObjectRelease(v24);
      if (!v25)
      {
LABEL_55:
        __break(1u);
        return;
      }
      v26 = objc_msgSend(v25, "url");
      swift_unknownObjectRelease(v25);
      if (v26)
      {
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v26);

        v27 = type metadata accessor for URL(0);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v12, 0, 1, v27);
      }
      else
      {
        v27 = type metadata accessor for URL(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v12, 1, 1, v27);
      }
      sub_1000207BC((uint64_t)v12, (uint64_t)v15, (uint64_t *)&unk_101499B30);
      type metadata accessor for URL(0);
      v40 = *(_QWORD *)(v27 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v15, 1, v27) != 1)
      {
        (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(a2, v15, v27);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v40 + 56))(a2, 0, 1, v27);
        return;
      }
      goto LABEL_27;
    }
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  swift_bridgeObjectRelease(v23);
  v43 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v15, 1, 1, v43);
LABEL_27:
  sub_100010CC4((uint64_t)v15, (uint64_t *)&unk_101499B30);
LABEL_28:
  if (qword_101490EA8 != -1)
    swift_once(&qword_101490EA8, sub_1001147B8);
  v44 = type metadata accessor for Logger(0);
  sub_10000E918(v44, (uint64_t)qword_1014D4B08);
  v45 = a1;
  v46 = Logger.logObject.getter(v45);
  v47 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v46, v47))
  {
    v82 = a2;
    v48 = (uint8_t *)swift_slowAlloc(12, -1);
    v49 = swift_slowAlloc(32, -1);
    v85 = v49;
    *(_DWORD *)v48 = 136315138;
    v50 = objc_msgSend(v45, "name");
    if (v50)
    {
      v51 = v50;
      v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
      v54 = v53;

    }
    else
    {
      v52 = 0;
      v54 = 0xE000000000000000;
    }
    v83 = v52;
    v84 = v54;
    v55 = String.init<A>(_:)(&v83, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
    v57 = v56;
    v83 = sub_1000C28FC(v55, v56, &v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v48 + 4, v48 + 12);

    swift_bridgeObjectRelease(v57);
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "[Place Summary] No photo carousel images for  %s were found, using mapItem photos", v48, 0xCu);
    swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1, -1);
    swift_slowDealloc(v48, -1, -1);

    a2 = v82;
  }
  else
  {

  }
  v58 = objc_msgSend(v45, "_geoMapItem");
  if (!v58)
    goto LABEL_54;
  v59 = v58;
  v60 = objc_msgSend(v58, "_photos");
  swift_unknownObjectRelease(v59);
  if (v60)
  {
    v61 = sub_100008B04(&qword_101495C28);
    v62 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v60, v61);

    v63 = sub_1000F268C(v62, v18 * 64.0, v18 * 64.0);
    swift_bridgeObjectRelease(v62);
    if (v63)
    {
      v64 = objc_msgSend(v63, "url");
      if (v64)
      {
        v65 = v64;
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v64);

        swift_unknownObjectRelease(v63);
        v66 = type metadata accessor for URL(0);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(v9, 0, 1, v66);
      }
      else
      {
        swift_unknownObjectRelease(v63);
        v77 = type metadata accessor for URL(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 56))(v9, 1, 1, v77);
      }
      v39 = (uint64_t)v9;
LABEL_47:
      sub_1000207BC(v39, a2, (uint64_t *)&unk_101499B30);
      return;
    }
  }
  else
  {
    v67 = v45;
    v68 = Logger.logObject.getter(v67);
    v69 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v68, (os_log_type_t)v69))
    {
      v70 = (uint8_t *)swift_slowAlloc(12, -1);
      v71 = swift_slowAlloc(32, -1);
      v85 = v71;
      *(_DWORD *)v70 = 136315138;
      v72 = objc_msgSend(v67, "name");
      if (v72)
      {
        v73 = v72;
        v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
        v76 = v75;

      }
      else
      {
        v74 = 0;
        v76 = 0xE000000000000000;
      }
      v83 = v74;
      v84 = v76;
      v78 = String.init<A>(_:)(&v83, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
      v80 = v79;
      v83 = sub_1000C28FC(v78, v79, &v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v70 + 4, v70 + 12);

      swift_bridgeObjectRelease(v80);
      _os_log_impl((void *)&_mh_execute_header, v68, (os_log_type_t)v69, "No photos found for map item %s", v70, 0xCu);
      swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1, -1);
      swift_slowDealloc(v70, -1, -1);

    }
    else
    {

    }
  }
  v81 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 56))(a2, 1, 1, v81);
}

id sub_1000F268C(uint64_t a1, double a2, double a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v18;

  if ((unint64_t)a1 >> 62)
    goto LABEL_24;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v6)
  {
    v7 = a1 & 0xC000000000000001;
    v8 = 4;
    while (1)
    {
      v9 = v8 - 4;
      if (v7)
      {
        v10 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, a1);
        v11 = v8 - 3;
        if (__OFADD__(v9, 1))
          break;
        goto LABEL_9;
      }
      v10 = *(void **)(a1 + 8 * v8);
      swift_unknownObjectRetain(v10);
      v11 = v8 - 3;
      if (__OFADD__(v9, 1))
        break;
LABEL_9:
      v12 = objc_msgSend(v10, "bestPhotoForSize:allowSmaller:", 0, a2, a3);
      swift_unknownObjectRelease(v10);
      if (v12)
        goto LABEL_20;
      ++v8;
      if (v11 == v6)
      {
        swift_bridgeObjectRelease(a1);
        swift_bridgeObjectRetain(a1);
        v13 = 4;
        while (1)
        {
          v14 = v13 - 4;
          if (v7)
          {
            v15 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v13 - 4, a1);
            v16 = v13 - 3;
            if (__OFADD__(v14, 1))
              goto LABEL_23;
          }
          else
          {
            v15 = *(void **)(a1 + 8 * v13);
            swift_unknownObjectRetain(v15);
            v16 = v13 - 3;
            if (__OFADD__(v14, 1))
              goto LABEL_23;
          }
          v12 = objc_msgSend(v15, "bestPhotoForSize:allowSmaller:", 1, a2, a3);
          swift_unknownObjectRelease(v15);
          if (v12)
            break;
          ++v13;
          if (v16 == v6)
            goto LABEL_19;
        }
LABEL_20:
        swift_bridgeObjectRelease(a1);
        return v12;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    if (a1 < 0)
      v18 = a1;
    else
      v18 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v6 = _CocoaArrayWrapper.endIndex.getter(v18);
  }
LABEL_19:
  swift_bridgeObjectRelease(a1);
  return 0;
}

_QWORD *sub_1000F2840(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_100008B04((uint64_t *)&unk_10149A570);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_1000F28A4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v5 = a1;
  v6 = a1 >> 16;
  v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v13 = String.UTF16View.index(_:offsetBy:)(15, v6, a2);
    v14 = v13 + (v7 << 16);
    v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v16 = v14 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v16 = v15;
    return v16 | 4;
  }
  else
  {
    v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15, v6);
    v9 = v8 + (v7 << 16);
    v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v11 = v9 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v11 = v10;
    return v11 | 8;
  }
}

unsigned __int8 *sub_1000F291C(unsigned __int8 *a1, uint64_t a2, int64_t a3)
{
  return sub_1000F2CA8(a1, a2, a3);
}

uint64_t sub_1000F2930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F293C(a1, a2, a3, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_1000F2CA8);
}

uint64_t sub_1000F293C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t *, uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v16 = a1;
  v17 = a2;
  swift_bridgeObjectRetain(a2);
  v6 = String.init<A>(_:)(&v16, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v8 = v6;
  v9 = v7;
  if ((v7 & 0x1000000000000000) == 0)
  {
    if ((v7 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v11 = HIBYTE(v9) & 0xF;
    v16 = v8;
    v17 = v9 & 0xFFFFFFFFFFFFFFLL;
    v10 = &v16;
    goto LABEL_7;
  }
  v8 = sub_1000F2F24(v6, v7);
  v13 = v12;
  swift_bridgeObjectRelease(v9);
  v9 = v13;
  if ((v13 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v8 & 0x1000000000000000) != 0)
  {
    v10 = (uint64_t *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v11 = v8 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v10 = (uint64_t *)_StringObject.sharedUTF8.getter(v8, v9);
  }
LABEL_7:
  v14 = a4(v10, v11, a3);
  swift_bridgeObjectRelease(v9);
  return v14;
}

unsigned __int8 *sub_1000F2A2C(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      v22 = a3 + 48;
      v23 = a3 + 55;
      v24 = a3 + 87;
      if (a3 > 10)
      {
        v22 = 58;
      }
      else
      {
        v24 = 97;
        v23 = 65;
      }
      if (result)
      {
        v25 = 0;
        do
        {
          v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24)
                return 0;
              v27 = -87;
            }
            else
            {
              v27 = -55;
            }
          }
          else
          {
            v27 = -48;
          }
          v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63)
            return 0;
          v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  v14 = a2 - 1;
  if (a2 == 1)
    return 0;
  v15 = a3 + 48;
  v16 = a3 + 55;
  v17 = a3 + 87;
  if (a3 > 10)
  {
    v15 = 58;
  }
  else
  {
    v17 = 97;
    v16 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v18 = result + 1;
  do
  {
    v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17)
          return 0;
        v20 = -87;
      }
      else
      {
        v20 = -55;
      }
    }
    else
    {
      v20 = -48;
    }
    v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20)))
      return 0;
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

unsigned __int8 *sub_1000F2CA8(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  unint64_t v13;
  unsigned __int8 v14;
  BOOL v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  unint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unint64_t v28;
  unsigned int v29;
  char v30;
  unint64_t v31;
  unsigned __int8 v32;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              if (!is_mul_ok(v9, a3))
                return 0;
              v13 = v9 * a3;
              v14 = v11 + v12;
              v15 = v13 >= v14;
              v9 = v13 - v14;
              if (!v15)
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      v25 = a3 + 48;
      v26 = a3 + 55;
      v27 = a3 + 87;
      if (a3 > 10)
      {
        v25 = 58;
      }
      else
      {
        v27 = 97;
        v26 = 65;
      }
      if (result)
      {
        v28 = 0;
        do
        {
          v29 = *result;
          if (v29 < 0x30 || v29 >= v25)
          {
            if (v29 < 0x41 || v29 >= v26)
            {
              if (v29 < 0x61 || v29 >= v27)
                return 0;
              v30 = -87;
            }
            else
            {
              v30 = -55;
            }
          }
          else
          {
            v30 = -48;
          }
          if (!is_mul_ok(v28, a3))
            return 0;
          v31 = v28 * a3;
          v32 = v29 + v30;
          v15 = __CFADD__(v31, v32);
          v28 = v31 + v32;
          if (v15)
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)v28;
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  v16 = a2 - 1;
  if (a2 == 1)
    return 0;
  v17 = a3 + 48;
  v18 = a3 + 55;
  v19 = a3 + 87;
  if (a3 > 10)
  {
    v17 = 58;
  }
  else
  {
    v19 = 97;
    v18 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v20 = result + 1;
  do
  {
    v21 = *v20;
    if (v21 < 0x30 || v21 >= v17)
    {
      if (v21 < 0x41 || v21 >= v18)
      {
        if (v21 < 0x61 || v21 >= v19)
          return 0;
        v22 = -87;
      }
      else
      {
        v22 = -55;
      }
    }
    else
    {
      v22 = -48;
    }
    if (!is_mul_ok(v9, a3))
      return 0;
    v23 = v9 * a3;
    v24 = v21 + v22;
    v15 = __CFADD__(v23, v24);
    v9 = v23 + v24;
    if (v15)
      return 0;
    ++v20;
    --v16;
  }
  while (v16);
  return (unsigned __int8 *)v9;
}

uint64_t sub_1000F2F24(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  v4 = String.subscript.getter(15, v3 | (v2 << 16), a1, a2);
  v6 = v5;
  v9 = sub_1000F2FA0(v4, v7, v8, v5);
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t sub_1000F2FA0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];

  v5 = a3;
  if ((a4 & 0x1000000000000000) != 0)
  {
    v12 = sub_1000F30E4(a1, a2, a3, a4);
    if (v12)
    {
      v9 = v12;
      v8 = (unint64_t)sub_1000F2840(v12, 0);
      v5 = sub_1000F31D0((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
    v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(_QWORD *)(v8 + 16));
    swift_release();
    return v14;
  }
  else
  {
    v8 = a1 >> 16;
    v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
LABEL_11:
      v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10)
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      goto LABEL_5;
    }
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }
}

unint64_t sub_1000F30E4(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_1000F28A4(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_1000F28A4(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t sub_1000F31D0(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_1000F28A4(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter(a6, a7);
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_1000F28A4(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

_QWORD *sub_1000F33E0(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __n128 v58;
  char *v59;
  unint64_t v60;
  void (*v61)(uint64_t, _QWORD, uint64_t, uint64_t);
  _QWORD *result;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t, uint64_t, uint64_t);
  char *v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int (*v82)(char *, uint64_t, uint64_t);
  unint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(char *, uint64_t, uint64_t);
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  void (*v99)(char *, uint64_t);
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  void (*v110)(uint64_t, uint64_t);
  uint64_t v111;
  void (*v112)(char *, uint64_t);
  char *v113;
  char *v114;
  uint64_t v115;
  void (*v116)(uint64_t, char *, uint64_t);
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  int *v129;
  char *v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  void (*v138)(char *, uint64_t);
  uint64_t v139;
  void (*v140)(char *, uint64_t);
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  int v155;
  char *v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t (*v160)(uint64_t, uint64_t, uint64_t);
  uint64_t v161;
  void (*v162)(uint64_t, char *, uint64_t);
  unint64_t v163;
  void (*v164)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v165;
  char *v166;
  char *v167;
  char *v168;
  uint64_t v169;
  void (*v170)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;

  v155 = a2;
  v3 = type metadata accessor for UUID(0);
  v183 = *(_QWORD *)(v3 - 8);
  v184 = v3;
  __chkstk_darwin(v3);
  v154 = (char *)&v142 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v142 - v6;
  v8 = type metadata accessor for AttributedString(0);
  v178 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v165 = (char *)&v142 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v148 = (char *)&v142 - v11;
  __chkstk_darwin(v12);
  v147 = (char *)&v142 - v13;
  __chkstk_darwin(v14);
  v181 = (char *)&v142 - v15;
  __chkstk_darwin(v16);
  v180 = (char *)&v142 - v17;
  v18 = sub_100008B04(&qword_10149A550);
  __chkstk_darwin(v18);
  v145 = (char *)&v142 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v22 = (char *)&v142 - v21;
  v175 = type metadata accessor for PlaceSummaryViewModelUnit.Label(0);
  v23 = *(_QWORD *)(v175 - 8);
  __chkstk_darwin(v175);
  v144 = (uint64_t)&v142 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v151 = (uint64_t)&v142 - v26;
  __chkstk_darwin(v27);
  v157 = (uint64_t)&v142 - v28;
  __chkstk_darwin(v29);
  v31 = (char *)&v142 - v30;
  __chkstk_darwin(v32);
  v171 = (uint64_t)&v142 - v33;
  v174 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  v34 = *(_QWORD *)(v174 - 8);
  __chkstk_darwin(v174);
  v172 = (uint64_t)&v142 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  v152 = (uint64_t)&v142 - v37;
  __chkstk_darwin(v38);
  v146 = (uint64_t)&v142 - v39;
  __chkstk_darwin(v40);
  v149 = (uint64_t)&v142 - v41;
  __chkstk_darwin(v42);
  v44 = (char *)&v142 - v43;
  __chkstk_darwin(v45);
  v173 = (char *)&v142 - v46;
  __chkstk_darwin(v47);
  v49 = (char *)&v142 - v48;
  v50 = sub_100008B04(&qword_101494BF0);
  __chkstk_darwin(v50);
  __chkstk_darwin(v51);
  v153 = (char *)&v142 - v52;
  __chkstk_darwin(v53);
  v161 = (uint64_t)&v142 - v54;
  v58 = __chkstk_darwin(v55);
  v59 = (char *)&v142 - v56;
  v60 = *(_QWORD *)(a1 + 16);
  v150 = v60 - 1;
  if (v60 <= 1)
  {
    swift_bridgeObjectRetain(a1);
    return (_QWORD *)a1;
  }
  v159 = v57;
  v61 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v178 + 56);
  v179 = v8;
  v185 = v60;
  v164 = v61;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v61)((char *)&v142 - v56, 1, 1, v8, v58);
  v163 = (*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  v177 = a1 + v163;
  v186 = *(_QWORD *)(v34 + 72);
  v166 = v31;
  v156 = v31 + 8;
  v142 = v151 + 8;
  v143 = a1;
  result = (_QWORD *)swift_bridgeObjectRetain(a1);
  v63 = (char *)v185;
  v64 = 0;
  v182 = _swiftEmptyArrayStorage;
  v176 = v22;
  v65 = v175;
  v169 = v23;
  v66 = (uint64_t)v173;
  v167 = v59;
  v67 = v181;
  v158 = v49;
  while (v64 != v63)
  {
    sub_1000202AC(v177 + v186 * (_QWORD)v64, (uint64_t)v49, type metadata accessor for PlaceSummaryViewModelUnit);
    sub_1000202AC((uint64_t)v49, v66, type metadata accessor for PlaceSummaryViewModelUnit);
    if (swift_getEnumCaseMultiPayload(v66, v174))
    {
      v68 = v67;
      v69 = v169;
      v170 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v169 + 56);
      v170(v22, 1, 1, v65);
      sub_1000202F0(v66, type metadata accessor for PlaceSummaryViewModelUnit);
      v70 = v69;
      v67 = v68;
      goto LABEL_13;
    }
    v71 = v66;
    v72 = (uint64_t)v166;
    sub_10003F29C(v71, (uint64_t)v166, type metadata accessor for PlaceSummaryViewModelUnit.Label);
    v73 = v65;
    v74 = *(_QWORD *)&v156[*(int *)(v65 + 24)];
    v75 = v157;
    sub_1000202AC(v72, v157, type metadata accessor for PlaceSummaryViewModelUnit.Label);
    if (v74)
    {
      sub_1000202F0(v75, type metadata accessor for PlaceSummaryViewModelUnit.Label);
    }
    else
    {
      v76 = *(_QWORD *)(v75 + *(int *)(v73 + 36));
      sub_1000202F0(v75, type metadata accessor for PlaceSummaryViewModelUnit.Label);
      if (!v76)
      {
        sub_10003F29C((uint64_t)v166, (uint64_t)v22, type metadata accessor for PlaceSummaryViewModelUnit.Label);
        v77 = v169;
        v78 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v169 + 56);
        v79 = v22;
        v80 = 0;
        goto LABEL_12;
      }
    }
    sub_1000202F0((uint64_t)v166, type metadata accessor for PlaceSummaryViewModelUnit.Label);
    v77 = v169;
    v78 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v169 + 56);
    v79 = v22;
    v80 = 1;
LABEL_12:
    v170 = v78;
    v78(v79, v80, 1, v73);
    v65 = v73;
    v70 = v77;
    v66 = (uint64_t)v173;
    v67 = v181;
LABEL_13:
    v81 = v179;
    v82 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48);
    if (v82(v22, 1, v65) == 1)
    {
      sub_100010CC4((uint64_t)v22, &qword_10149A550);
      sub_1000202AC((uint64_t)v49, v172, type metadata accessor for PlaceSummaryViewModelUnit);
      if ((swift_isUniquelyReferenced_nonNull_native(v182) & 1) == 0)
        v182 = (_QWORD *)sub_1000A7E94(0, v182[2] + 1, 1, (unint64_t)v182);
      v84 = v182[2];
      v83 = v182[3];
      if (v84 >= v83 >> 1)
        v182 = (_QWORD *)sub_1000A7E94(v83 > 1, v84 + 1, 1, (unint64_t)v182);
      v85 = v182;
      v182[2] = v84 + 1;
      sub_10003F29C(v172, (uint64_t)v85 + v163 + v84 * v186, type metadata accessor for PlaceSummaryViewModelUnit);
      result = (_QWORD *)sub_1000202F0((uint64_t)v49, type metadata accessor for PlaceSummaryViewModelUnit);
      goto LABEL_19;
    }
    v160 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v82;
    v86 = v171;
    sub_10003F29C((uint64_t)v22, v171, type metadata accessor for PlaceSummaryViewModelUnit.Label);
    v87 = v86 + *(int *)(v65 + 20);
    v88 = v178;
    v89 = *(void (**)(char *, uint64_t, uint64_t))(v178 + 16);
    v90 = v180;
    v89(v180, v87, v81);
    v91 = (uint64_t)v167;
    v92 = v161;
    sub_10000C1FC((uint64_t)v167, v161, &qword_101494BF0);
    v168 = *(char **)(v88 + 48);
    v93 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v168)(v92, 1, v81);
    v162 = (void (*)(uint64_t, char *, uint64_t))v89;
    if (v93 == 1)
    {
      sub_100010CC4(v91, &qword_101494BF0);
      sub_100010CC4(v92, &qword_101494BF0);
      v89((char *)v91, (uint64_t)v90, v81);
      v164(v91, 0, 1, v81);
LABEL_24:
      v66 = (uint64_t)v173;
      v96 = v91;
      v49 = v158;
      v22 = v176;
      goto LABEL_26;
    }
    v94 = v181;
    (*(void (**)(char *, uint64_t, uint64_t))(v88 + 32))(v181, v92, v81);
    if ((v155 & 1) != 0)
    {
      v95 = (uint64_t)v153;
      static AttributedString.+ infix(_:_:)(v94, v180);
      (*(void (**)(char *, uint64_t))(v88 + 8))(v94, v81);
      sub_100010CC4(v91, &qword_101494BF0);
      v164(v95, 0, 1, v81);
      sub_1000207BC(v95, v91, &qword_101494BF0);
      goto LABEL_24;
    }
    v97 = v148;
    AttributedString.init(stringLiteral:)(548913696, 0xA400000000000000);
    v98 = v147;
    static AttributedString.+ infix(_:_:)(v181, v97);
    v99 = *(void (**)(char *, uint64_t))(v88 + 8);
    v99(v97, v81);
    v100 = (uint64_t)v153;
    static AttributedString.+ infix(_:_:)(v98, v180);
    v101 = v98;
    v96 = (uint64_t)v167;
    v99(v101, v81);
    v99(v181, v81);
    v22 = v176;
    sub_100010CC4(v96, &qword_101494BF0);
    v164(v100, 0, 1, v81);
    sub_1000207BC(v100, v96, &qword_101494BF0);
    v66 = (uint64_t)v173;
    v49 = v158;
LABEL_26:
    v102 = v168;
    v103 = v96;
    v104 = v159;
    sub_10000C1FC(v103, v159, &qword_101494BF0);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v102)(v104, 1, v81) != 1)
    {
      v168 = v64;
      (*(void (**)(char *, uint64_t, uint64_t))(v178 + 32))(v165, v104, v81);
      v105 = 0;
      v106 = v177;
      v107 = (uint64_t)v154;
      while (1)
      {
        sub_1000202AC(v106, (uint64_t)v44, type metadata accessor for PlaceSummaryViewModelUnit);
        sub_1000896E8((uint64_t)v7);
        sub_1000896E8(v107);
        v108 = static UUID.== infix(_:_:)(v7, v107);
        v109 = v184;
        v110 = *(void (**)(uint64_t, uint64_t))(v183 + 8);
        v110(v107, v184);
        v110((uint64_t)v7, v109);
        result = (_QWORD *)sub_1000202F0((uint64_t)v44, type metadata accessor for PlaceSummaryViewModelUnit);
        if ((v108 & 1) != 0)
          break;
        ++v105;
        v106 += v186;
        if (v185 == v105)
        {
          v111 = v179;
          v112 = *(void (**)(char *, uint64_t))(v178 + 8);
          v112(v165, v179);
          v112(v180, v111);
          sub_1000202F0(v171, type metadata accessor for PlaceSummaryViewModelUnit.Label);
          result = (_QWORD *)sub_1000202F0((uint64_t)v49, type metadata accessor for PlaceSummaryViewModelUnit);
          v67 = v181;
          v22 = v176;
          v66 = (uint64_t)v173;
          v64 = v168;
          goto LABEL_4;
        }
      }
      v113 = v165;
      v114 = v180;
      v115 = v151;
      v64 = v168;
      v116 = v162;
      if (v150 == v105)
        goto LABEL_42;
      if (__OFADD__(v105, 1))
        goto LABEL_53;
      v117 = v149;
      sub_1000202AC(v177 + (v105 + 1) * v186, v149, type metadata accessor for PlaceSummaryViewModelUnit);
      v118 = v117;
      v119 = v146;
      sub_1000202AC(v118, v146, type metadata accessor for PlaceSummaryViewModelUnit);
      if (swift_getEnumCaseMultiPayload(v119, v174))
      {
        v120 = (uint64_t)v145;
        v121 = v175;
        v170(v145, 1, 1, v175);
        sub_1000202F0(v119, type metadata accessor for PlaceSummaryViewModelUnit);
        goto LABEL_41;
      }
      sub_10003F29C(v119, v115, type metadata accessor for PlaceSummaryViewModelUnit.Label);
      v121 = v175;
      v122 = *(_QWORD *)(v142 + *(int *)(v175 + 24));
      v123 = v144;
      sub_1000202AC(v115, v144, type metadata accessor for PlaceSummaryViewModelUnit.Label);
      v120 = (uint64_t)v145;
      if (v122)
      {
        sub_1000202F0(v123, type metadata accessor for PlaceSummaryViewModelUnit.Label);
        v114 = v180;
        goto LABEL_39;
      }
      v124 = *(_QWORD *)(v123 + *(int *)(v121 + 36));
      sub_1000202F0(v123, type metadata accessor for PlaceSummaryViewModelUnit.Label);
      v114 = v180;
      if (v124)
      {
LABEL_39:
        sub_1000202F0(v151, type metadata accessor for PlaceSummaryViewModelUnit.Label);
        v125 = v120;
        v126 = 1;
      }
      else
      {
        sub_10003F29C(v151, v120, type metadata accessor for PlaceSummaryViewModelUnit.Label);
        v125 = v120;
        v126 = 0;
      }
      v170((char *)v125, v126, 1, v121);
LABEL_41:
      sub_1000202F0(v149, type metadata accessor for PlaceSummaryViewModelUnit);
      v127 = v160(v120, 1, v121);
      result = (_QWORD *)sub_100010CC4(v120, &qword_10149A550);
      v113 = v165;
      if (v127 == 1)
      {
LABEL_42:
        v128 = v152;
        UUID.init()(result);
        v129 = (int *)v175;
        v130 = v113;
        v131 = v179;
        v116(v128 + *(int *)(v175 + 20), v130, v179);
        v164(v128 + v129[12], 1, 1, v131);
        v132 = (_QWORD *)(v128 + v129[6]);
        *v132 = 0;
        v132[1] = 0;
        *(_QWORD *)(v128 + v129[7]) = 0;
        *(_QWORD *)(v128 + v129[8]) = 0;
        *(_QWORD *)(v128 + v129[9]) = 0;
        *(_QWORD *)(v128 + v129[10]) = 0;
        v133 = v128 + v129[11];
        *(_QWORD *)v133 = 1;
        *(_BYTE *)(v133 + 8) = 0;
        swift_storeEnumTagMultiPayload(v128, v174, 0);
        if ((swift_isUniquelyReferenced_nonNull_native(v182) & 1) == 0)
          v182 = (_QWORD *)sub_1000A7E94(0, v182[2] + 1, 1, (unint64_t)v182);
        v67 = v181;
        v135 = v182[2];
        v134 = v182[3];
        v66 = (uint64_t)v173;
        if (v135 >= v134 >> 1)
          v182 = (_QWORD *)sub_1000A7E94(v134 > 1, v135 + 1, 1, (unint64_t)v182);
        v136 = v182;
        v182[2] = v135 + 1;
        sub_10003F29C(v152, (uint64_t)v136 + v163 + v135 * v186, type metadata accessor for PlaceSummaryViewModelUnit);
        v137 = v179;
        v138 = *(void (**)(char *, uint64_t))(v178 + 8);
        v138(v165, v179);
        v138(v180, v137);
        sub_1000202F0(v171, type metadata accessor for PlaceSummaryViewModelUnit.Label);
        sub_1000202F0((uint64_t)v49, type metadata accessor for PlaceSummaryViewModelUnit);
        v139 = (uint64_t)v167;
        sub_100010CC4((uint64_t)v167, &qword_101494BF0);
        result = (_QWORD *)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v164)(v139, 1, 1, v137);
      }
      else
      {
        v140 = *(void (**)(char *, uint64_t))(v178 + 8);
        v141 = v179;
        v140(v165, v179);
        v140(v114, v141);
        sub_1000202F0(v171, type metadata accessor for PlaceSummaryViewModelUnit.Label);
        result = (_QWORD *)sub_1000202F0((uint64_t)v49, type metadata accessor for PlaceSummaryViewModelUnit);
        v67 = v181;
        v66 = (uint64_t)v173;
      }
LABEL_19:
      v22 = v176;
      goto LABEL_4;
    }
    (*(void (**)(char *, uint64_t))(v178 + 8))(v180, v81);
    sub_1000202F0(v171, type metadata accessor for PlaceSummaryViewModelUnit.Label);
    sub_1000202F0((uint64_t)v49, type metadata accessor for PlaceSummaryViewModelUnit);
    result = (_QWORD *)sub_100010CC4(v104, &qword_101494BF0);
    v67 = v181;
LABEL_4:
    ++v64;
    v63 = (char *)v185;
    v65 = v175;
    if (v64 == (char *)v185)
    {
      swift_bridgeObjectRelease(v143);
      sub_100010CC4((uint64_t)v167, &qword_101494BF0);
      return v182;
    }
  }
  __break(1u);
LABEL_53:
  __break(1u);
  return result;
}

BOOL sub_1000F4324(_BOOL8 result, id a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;

  if (result)
  {
    v2 = result;
    v3 = *(_QWORD *)(result + 16);
    if (!v3)
      goto LABEL_10;
    if (*(_BYTE *)(result + 32) == 6)
      return 1;
    if (v3 == 1)
    {
LABEL_10:
      v6 = (char *)objc_msgSend(a2, "state");
      return (unint64_t)(v6 - 1) <= 5 && sub_100157604(0x40305020100uLL >> (8 * (v6 - 1)), v2);
    }
    else
    {
      v4 = 33;
      while (1)
      {
        v5 = v4 - 31;
        if (__OFADD__(v4 - 32, 1))
          break;
        if (*(_BYTE *)(result + v4) == 6)
          return 1;
        ++v4;
        if (v5 == v3)
          goto LABEL_10;
      }
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1000F43DC(void *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  id v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  id v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t KeyPath;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(_QWORD *, _QWORD);
  _QWORD *v73;
  _QWORD *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _QWORD v95[5];

  v94 = a2;
  v3 = sub_100008B04(&qword_101497918);
  __chkstk_darwin(v3);
  v5 = (char *)&v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  v6 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin(v93);
  v92 = (uint64_t)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v91 = (uint64_t)&v76 - v9;
  v10 = sub_100008B04((uint64_t *)&unk_10149A500);
  __chkstk_darwin(v10);
  v12 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PlaceSummaryViewModelLine(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v84 = (uint64_t)&v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v79 = (uint64_t)&v76 - v17;
  v18 = (char *)sub_10014521C(a1);
  if (!v18)
    return 0;
  v78 = v18;
  v19 = objc_msgSend(a1, "mapItem");
  if (!v19)
  {

    return 0;
  }
  v20 = v19;
  v21 = v78;
  v22 = *(_QWORD *)&v78[OBJC_IVAR____TtC4Maps25PlaceSummaryTemplateEntry_lines];
  v23 = *(_QWORD *)(v22 + 16);
  v85 = v14;
  v86 = v13;
  v90 = v20;
  v82 = v23;
  if (!v23)
  {
    v51 = _swiftEmptyArrayStorage;
    if (_swiftEmptyArrayStorage[2])
      goto LABEL_39;
LABEL_54:

    swift_bridgeObjectRelease(v51);
    return 0;
  }
  v81 = v22 + 32;
  v77 = v22;
  swift_bridgeObjectRetain_n(v22, 2);
  v24 = 0;
  v83 = _swiftEmptyArrayStorage;
  v80 = v12;
  do
  {
    v25 = v81 + 16 * v24;
    v26 = *(_QWORD *)v25;
    v27 = *(unsigned __int8 *)(v25 + 8);
    v89 = *(unsigned __int8 *)(v25 + 9);
    if ((unint64_t)v26 >> 62)
    {
      if (v26 < 0)
        v49 = v26;
      else
        v49 = v26 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(v26, 3);
      result = _CocoaArrayWrapper.endIndex.getter(v49);
      v28 = result;
    }
    else
    {
      v28 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain_n(v26, 3);
    }
    v88 = v24;
    v87 = v27;
    if (v28)
    {
      if (v28 < 1)
      {
        __break(1u);
        goto LABEL_60;
      }
      v30 = 0;
      v31 = _swiftEmptyArrayStorage;
      do
      {
        if ((v26 & 0xC000000000000001) != 0)
        {
          v32 = specialized _ArrayBuffer._getElementSlowPath(_:)(v30, v26);
        }
        else
        {
          v32 = *(_QWORD *)(v26 + 8 * v30 + 32);
          swift_retain();
        }
        sub_1000DF718((uint64_t)v20, v32, 0, 0, 0, 1, (uint64_t)v5, 0, 0);
        swift_release();
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v5, 1, v93) == 1)
        {
          sub_100010CC4((uint64_t)v5, &qword_101497918);
        }
        else
        {
          v33 = v91;
          sub_10003F29C((uint64_t)v5, v91, type metadata accessor for PlaceSummaryViewModelUnit);
          sub_10003F29C(v33, v92, type metadata accessor for PlaceSummaryViewModelUnit);
          if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0)
            v31 = (_QWORD *)sub_1000A7E94(0, v31[2] + 1, 1, (unint64_t)v31);
          v35 = v31[2];
          v34 = v31[3];
          if (v35 >= v34 >> 1)
            v31 = (_QWORD *)sub_1000A7E94(v34 > 1, v35 + 1, 1, (unint64_t)v31);
          v31[2] = v35 + 1;
          sub_10003F29C(v92, (uint64_t)v31+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v35, type metadata accessor for PlaceSummaryViewModelUnit);
          v20 = v90;
        }
        ++v30;
      }
      while (v28 != v30);
    }
    else
    {
      v31 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease_n(v26, 2);
    v36 = v89;
    v37 = sub_1000F33E0((uint64_t)v31, v89);
    v38 = swift_bridgeObjectRelease(v31);
    if (v37[2])
    {
      v39 = (uint64_t)v80;
      UUID.init()(v38);
      v41 = v85;
      v40 = v86;
      *(_QWORD *)(v39 + *(int *)(v86 + 20)) = v37;
      *(_BYTE *)(v39 + *(int *)(v40 + 24)) = v87;
      *(_BYTE *)(v39 + *(int *)(v40 + 28)) = v36;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v41 + 56))(v39, 0, 1, v40);
      v42 = (_QWORD *)v26;
    }
    else
    {
      v41 = v85;
      v40 = v86;
      v39 = (uint64_t)v80;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v85 + 56))(v80, 1, 1, v86);
      swift_bridgeObjectRelease(v26);
      v42 = v37;
    }
    swift_bridgeObjectRelease(v42);
    v43 = v88;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40) == 1)
    {
      sub_100010CC4(v39, (uint64_t *)&unk_10149A500);
    }
    else
    {
      v44 = v79;
      sub_10003F29C(v39, v79, type metadata accessor for PlaceSummaryViewModelLine);
      sub_10003F29C(v44, v84, type metadata accessor for PlaceSummaryViewModelLine);
      v45 = (unint64_t)v83;
      if ((swift_isUniquelyReferenced_nonNull_native(v83) & 1) == 0)
        v45 = sub_1000A8AC8(0, *(_QWORD *)(v45 + 16) + 1, 1, v45);
      v47 = *(_QWORD *)(v45 + 16);
      v46 = *(_QWORD *)(v45 + 24);
      if (v47 >= v46 >> 1)
        v45 = sub_1000A8AC8(v46 > 1, v47 + 1, 1, v45);
      *(_QWORD *)(v45 + 16) = v47 + 1;
      v48 = (*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
      v83 = (_QWORD *)v45;
      sub_10003F29C(v84, v45 + v48 + *(_QWORD *)(v41 + 72) * v47, type metadata accessor for PlaceSummaryViewModelLine);
    }
    v24 = v43 + 1;
  }
  while (v24 != v82);
  swift_bridgeObjectRelease_n(v77, 2);
  v21 = v78;
  v51 = v83;
  if (!v83[2])
    goto LABEL_54;
LABEL_39:
  v52 = *(_QWORD *)&v21[OBJC_IVAR____TtC4Maps25PlaceSummaryTemplateEntry_trailingEntities];
  swift_bridgeObjectRetain(v52);
  v53 = sub_1000DF900(v20, v52, 0);
  swift_bridgeObjectRelease(v52);
  v54 = sub_10001FFF4(v53);
  v55 = static Color.clear.getter(v54);
  v56 = objc_allocWithZone((Class)type metadata accessor for PlaceSummaryViewModelTemplate(0));
  v50 = sub_100085B5C((unint64_t)v51, 0xF000000000000007, v53, 0, 0, 0, 2, 0, v55, 0);
  if (!v50)
  {
    sub_1000200AC(v53);

    return (uint64_t)v50;
  }
  KeyPath = swift_getKeyPath(&unk_100E2B728);
  v58 = swift_getKeyPath(&unk_100E2B750);
  static Published.subscript.getter(v95, v50, KeyPath, v58);
  swift_release();
  swift_release();
  v59 = *(_QWORD *)(v95[0] + 16);
  swift_bridgeObjectRelease(v95[0]);
  if (v59 >= 3)
    v60 = 3;
  else
    v60 = v59;
  v61 = sub_1000863C4(0);
  v62 = v61[2];
  swift_bridgeObjectRelease(v61);
  if (v62 >= v60
    || (v63 = swift_getKeyPath(&unk_100E2B728),
        v64 = swift_getKeyPath(&unk_100E2B750),
        static Published.subscript.getter(v95, v50, v63, v64),
        swift_release(),
        swift_release(),
        v65 = *(_QWORD *)(v95[0] + 16),
        swift_bridgeObjectRelease(v95[0]),
        v62 >= v65))
  {

    sub_1000200AC(v53);
    return (uint64_t)v50;
  }
  v94 = v53;
  v66 = swift_getKeyPath(&unk_100E2B728);
  v67 = swift_getKeyPath(&unk_100E2B750);
  static Published.subscript.getter(v95, v50, v66, v67);
  swift_release();
  swift_release();
  v68 = *(_QWORD *)(v95[0] + 16);
  swift_bridgeObjectRelease(v95[0]);
  if (!v68)
  {
LABEL_57:

    sub_1000200AC(v94);
    return (uint64_t)v50;
  }
  v69 = 0;
  while (1)
  {
    v70 = swift_getKeyPath(&unk_100E2B728);
    v71 = swift_getKeyPath(&unk_100E2B750);
    v72 = (void (*)(_QWORD *, _QWORD))static Published.subscript.modify(v95, v50, v70, v71);
    v74 = v73;
    v75 = *v73;
    result = swift_isUniquelyReferenced_nonNull_native(*v73);
    *v74 = v75;
    if ((result & 1) == 0)
    {
      result = sub_10020D8E4(v75);
      v75 = result;
      *v74 = result;
    }
    if (v69 >= *(_QWORD *)(v75 + 16))
      break;
    *(_BYTE *)(v75
             + ((*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80))
             + *(_QWORD *)(v85 + 72) * v69
             + *(int *)(v86 + 24)) = 0;
    v72(v95, 0);
    swift_release();
    swift_release();
    if (v68 == ++v69)
      goto LABEL_57;
  }
LABEL_60:
  __break(1u);
  return result;
}

id sub_1000F4CA8(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id result;
  void *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!a2)
    return 0;
  if (!a1)
    return 0;
  v16 = *(_QWORD *)(a2 + 16);
  if (!v16)
    return 0;
  v17 = a2 + 32;
  swift_bridgeObjectRetain(a2);
  v3 = a1;
  v4 = 0;
  while (1)
  {
    v5 = (uint64_t *)(v17 + 16 * v4);
    v7 = *v5;
    v6 = v5[1];
    v18 = v6;
    if ((unint64_t)*v5 >> 62)
      break;
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n(v7, 2);
    swift_bridgeObjectRetain(v6);
    if (v8)
      goto LABEL_8;
LABEL_5:
    ++v4;
    swift_bridgeObjectRelease_n(v7, 2);
    swift_bridgeObjectRelease(v18);
    if (v4 == v16)
    {

      swift_bridgeObjectRelease(a2);
      return 0;
    }
  }
  if (v7 < 0)
    v14 = *v5;
  else
    v14 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain_n(v7, 3);
  swift_bridgeObjectRetain(v6);
  v8 = _CocoaArrayWrapper.endIndex.getter(v14);
  swift_bridgeObjectRelease(v7);
  if (!v8)
    goto LABEL_5;
LABEL_8:
  v9 = 4;
  while (1)
  {
    result = (v7 & 0xC000000000000001) != 0
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9 - 4, v7)
           : *(id *)(v7 + 8 * v9);
    v11 = result;
    v12 = v9 - 3;
    if (__OFADD__(v9 - 4, 1))
      break;
    v13 = objc_msgSend(result, "isEqualToGEOMapItemIdentifier:", v3);

    if (v13)
    {
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease_n(v7, 2);

      return (id)v18;
    }
    ++v9;
    if (v12 == v8)
      goto LABEL_5;
  }
  __break(1u);
  return result;
}

unint64_t sub_1000F4E54(uint64_t a1, char a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v6 = type metadata accessor for PlaceSummaryImageViewModel.ImageType(0);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!a1 && (a2 & 1) == 0)
    return 0xF000000000000007;
  v10 = objc_msgSend(objc_allocWithZone((Class)MapsUIImageGEOFeatureSpec), "init");
  objc_msgSend(v10, "setStyle:", a1);
  objc_msgSend(v10, "setMarkerFallback:", a2 & 1);
  v11 = sub_100008B04(&qword_101495DB0);
  v12 = swift_allocBox();
  v14 = v13;
  v15 = v13 + *(int *)(v11 + 96);
  v16 = *(int *)(v11 + 112);
  *(_QWORD *)v13 = v10;
  *(_QWORD *)(v13 + 8) = 0;
  *(_BYTE *)(v13 + 16) = a3 & 1;
  *(_QWORD *)(v13 + 24) = 0;
  v17 = enum case for Image.TemplateRenderingMode.original(_:);
  v18 = type metadata accessor for Image.TemplateRenderingMode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v15, v17, v18);
  v19 = v10;
  *(_QWORD *)(v14 + v16) = static Color.clear.getter(v19);
  *v8 = v12;
  swift_storeEnumTagMultiPayload(v8, v6, 2);
  v20 = type metadata accessor for PlaceSummaryImageViewModel(0);
  v9 = swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v26 = 0;
  v21 = sub_100008B04((uint64_t *)&unk_101497210);
  v22 = Published.init(initialValue:)(&v26, v21);
  UUID.init()(v22);
  sub_10003F29C((uint64_t)v8, v9 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_type, type metadata accessor for PlaceSummaryImageViewModel.ImageType);

  v23 = v9 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_cornerRadius;
  *(_QWORD *)v23 = 0;
  *(_BYTE *)(v23 + 8) = 1;
  return v9;
}

unint64_t sub_1000F5044(void *a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  id v55;
  uint64_t v56;
  unsigned int v57;
  id v58;
  uint64_t v59;

  v6 = type metadata accessor for PlaceSummaryImageViewModel.ImageType(0);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!a1)
    return 0xF000000000000007;
  v9 = objc_allocWithZone((Class)MapsUIImageContactSpec);
  v10 = a1;
  v11 = objc_msgSend(v9, "init");
  objc_msgSend(v11, "setContact:", v10);
  objc_msgSend(v11, "setUseAvatarImageRendered:", 1);
  if (a2 || (a3 & 1) != 0)
  {
    v25 = objc_msgSend(objc_allocWithZone((Class)MapsUIImageGEOFeatureSpec), "init");
    v58 = v10;
    v26 = v25;
    objc_msgSend(v25, "setStyle:", a2);
    objc_msgSend(v26, "setMarkerFallback:", a3 & 1);
    v27 = sub_100008B04(&qword_101495DB0);
    v54 = ((uint64_t (*)(void))swift_allocBox)();
    v29 = v28;
    v30 = v28 + *(int *)(v27 + 96);
    v31 = *(int *)(v27 + 112);
    *(_QWORD *)v28 = v26;
    *(_QWORD *)(v28 + 8) = 0;
    *(_QWORD *)(v28 + 24) = 0;
    *(_BYTE *)(v28 + 16) = 0;
    v32 = v6;
    v33 = enum case for Image.TemplateRenderingMode.original(_:);
    v57 = enum case for Image.TemplateRenderingMode.original(_:);
    v56 = type metadata accessor for Image.TemplateRenderingMode(0);
    v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 104);
    v34(v30, v33, v56);
    v55 = v26;
    *(_QWORD *)(v29 + v31) = static Color.clear.getter(v55);
    *v8 = v54;
    v35 = v32;
    swift_storeEnumTagMultiPayload(v8, v32, 2);
    v36 = type metadata accessor for PlaceSummaryImageViewModel(0);
    v37 = swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
    v59 = 0;
    v38 = sub_100008B04((uint64_t *)&unk_101497210);
    v39 = Published.init(initialValue:)(&v59, v38);
    UUID.init()(v39);
    sub_10003F29C((uint64_t)v8, v37 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_type, type metadata accessor for PlaceSummaryImageViewModel.ImageType);
    v40 = v37 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_cornerRadius;
    *(_QWORD *)v40 = 0;
    *(_BYTE *)(v40 + 8) = 1;
    v41 = swift_allocBox(v27);
    v43 = v42;
    v44 = v42 + *(int *)(v27 + 96);
    v45 = *(int *)(v27 + 112);
    *(_QWORD *)v42 = v11;
    *(_QWORD *)(v42 + 8) = 0;
    *(_QWORD *)(v42 + 24) = v37;
    *(_BYTE *)(v42 + 16) = 0;
    v34(v44, v57, v56);
    v46 = v11;
    v20 = v55;
    v47 = v46;
    *(_QWORD *)(v43 + v45) = static Color.clear.getter(v46);
    *v8 = v41;
    swift_storeEnumTagMultiPayload(v8, v35, 2);
    v48 = *(unsigned int *)(v36 + 48);
    v49 = *(unsigned __int16 *)(v36 + 52);
    v50 = v36;
    v10 = v58;
    v22 = swift_allocObject(v50, v48, v49);
    v59 = 0;
    v51 = Published.init(initialValue:)(&v59, v38);
    UUID.init()(v51);
    sub_10003F29C((uint64_t)v8, v22 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_type, type metadata accessor for PlaceSummaryImageViewModel.ImageType);

  }
  else
  {
    v12 = sub_100008B04(&qword_101495DB0);
    v13 = swift_allocBox(v12);
    v15 = v14;
    v16 = v14 + *(int *)(v12 + 96);
    v17 = *(int *)(v12 + 112);
    *(_QWORD *)v14 = v11;
    *(_QWORD *)(v14 + 8) = 0;
    *(_QWORD *)(v14 + 24) = 0;
    *(_BYTE *)(v14 + 16) = 0;
    v18 = enum case for Image.TemplateRenderingMode.original(_:);
    v19 = type metadata accessor for Image.TemplateRenderingMode(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v16, v18, v19);
    v20 = v11;
    *(_QWORD *)(v15 + v17) = static Color.clear.getter(v20);
    *v8 = v13;
    swift_storeEnumTagMultiPayload(v8, v6, 2);
    v21 = type metadata accessor for PlaceSummaryImageViewModel(0);
    v22 = swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
    v59 = 0;
    v23 = sub_100008B04((uint64_t *)&unk_101497210);
    v24 = Published.init(initialValue:)(&v59, v23);
    UUID.init()(v24);
    sub_10003F29C((uint64_t)v8, v22 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_type, type metadata accessor for PlaceSummaryImageViewModel.ImageType);
  }

  v52 = v22 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_cornerRadius;
  *(_QWORD *)v52 = 0;
  *(_BYTE *)(v52 + 8) = 1;
  return v22;
}

unint64_t sub_1000F5498(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  unint64_t v18;
  id v20;
  NSString v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  id v39;
  void *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  NSString v44;
  id v45;
  id v46;
  void *v47;
  id v48;
  id v49;
  id v50;
  id v51;
  void *v52;
  _QWORD *v53;
  NSString v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  id v64;
  void *v65;
  id v66;
  unint64_t v67;
  id v68;
  void *v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v2 = type metadata accessor for PlaceSummaryImageViewModel.ImageType(0);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v75 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v75 - v6);
  *(_QWORD *)&v9 = __chkstk_darwin(v8).n128_u64[0];
  v11 = (uint64_t *)((char *)&v75 - v10);
  v12 = objc_msgSend(a1, "mapItem", v9);
  if (v12
    && (v13 = v12,
        v14 = objc_msgSend(v12, "_styleAttributes"),
        v13,
        v14)
    || (v15 = objc_msgSend(a1, "category")) != 0
    && (v16 = v15, v14 = objc_msgSend(v15, "styleAttributes"),
                   v16,
                   v14))
  {
    v17 = v14;
    v18 = sub_1000F4E54((uint64_t)v14, 0, 0);

LABEL_6:
    return v18;
  }
  v20 = objc_msgSend(a1, "directionIntent");

  if (v20)
  {
    v21 = String._bridgeToObjectiveC()();
    v22 = objc_msgSend((id)objc_opt_self(UIImage), "imageNamed:", v21);

    if (v22)
    {
      *v11 = v22;
      swift_storeEnumTagMultiPayload(v11, v2, 1);
      v23 = type metadata accessor for PlaceSummaryImageViewModel(0);
      v24 = swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
      v76 = 0;
      v25 = sub_100008B04((uint64_t *)&unk_101497210);
      v26 = Published.init(initialValue:)(&v76, v25);
      UUID.init()(v26);
      sub_10003F29C((uint64_t)v11, v24 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_type, type metadata accessor for PlaceSummaryImageViewModel.ImageType);
      v27 = v24 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_cornerRadius;
      *(_QWORD *)v27 = 0;
      *(_BYTE *)(v27 + 8) = 1;
      return v24;
    }
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v28 = objc_msgSend(a1, "clientResolved");
  if (v28)
  {
    v29 = v28;
    switch(objc_msgSend(v28, "itemType"))
    {
      case 1u:
        v30 = objc_msgSend((id)objc_opt_self(GEOFeatureStyleAttributes), "homeStyleAttributes");
        goto LABEL_23;
      case 2u:
        v30 = objc_msgSend((id)objc_opt_self(GEOFeatureStyleAttributes), "workStyleAttributes");
        goto LABEL_23;
      case 3u:
        v30 = objc_msgSend((id)objc_opt_self(GEOFeatureStyleAttributes), "parkedCarStyleAttributes");
        goto LABEL_23;
      case 4u:
        v31 = objc_msgSend((id)objc_opt_self(AddressBookManager), "sharedManager");
        if (!v31)
          goto LABEL_42;
        v32 = v31;
        v33 = objc_msgSend(v31, "meCard");

        v24 = sub_1000F5044(v33, 0, 0);
        return v24;
      case 6u:
        v30 = objc_msgSend((id)objc_opt_self(GEOFeatureStyleAttributes), "schoolStyleAttributes");
LABEL_23:
        v17 = v30;
        v18 = sub_1000F4E54((uint64_t)v17, 0, 0);

        goto LABEL_6;
      default:

        return 0xF000000000000007;
    }
  }
  if (objc_msgSend(a1, "_type") == (id)2 || objc_msgSend(a1, "_type") == (id)1)
  {
    v17 = objc_msgSend((id)objc_opt_self(GEOFeatureStyleAttributes), "markerStyleAttributes");
    v18 = sub_1000F4E54((uint64_t)v17, 0, 0);
    goto LABEL_6;
  }
  v34 = objc_msgSend(a1, "collectionResult");
  if (v34)
  {
    v35 = v34;
    v36 = objc_msgSend(v34, "collection");

    if (v36)
    {
      v37 = objc_msgSend(v36, "publisherAttribution");

      if (v37)
      {
        v38 = objc_msgSend(v37, "iconIdentifier");
        swift_unknownObjectRelease(v37);
        v39 = objc_msgSend(objc_allocWithZone((Class)MapsUIImagePublisherSpec), "initWithIconIdentifier:", v38);
        if (v39)
        {
          v40 = v39;
          v41 = sub_100008B04(&qword_101495DB0);
          a1 = (void *)swift_allocBox(v41);
          v43 = v42;
          *v42 = v40;
          v4 = v40;
          v44 = String._bridgeToObjectiveC()();
          v45 = objc_msgSend((id)objc_opt_self(UIImage), "imageNamed:", v44);

          if (v45)
            goto LABEL_35;
          __break(1u);
        }
      }
    }
  }
  v46 = objc_msgSend(a1, "publisherResult");
  if (v46)
  {
    v47 = v46;
    v48 = objc_msgSend(v46, "publisher");

    if (v48)
    {
      v49 = objc_msgSend(v48, "publisherAttribution");

      if (v49)
      {
        v50 = objc_msgSend(v49, "iconIdentifier");
        swift_unknownObjectRelease(v49);
        v51 = objc_msgSend(objc_allocWithZone((Class)MapsUIImagePublisherSpec), "initWithIconIdentifier:", v50);
        if (v51)
        {
          v52 = v51;
          v41 = sub_100008B04(&qword_101495DB0);
          a1 = (void *)swift_allocBox(v41);
          v43 = v53;
          *v53 = v52;
          v4 = v52;
          v54 = String._bridgeToObjectiveC()();
          v45 = objc_msgSend((id)objc_opt_self(UIImage), "imageNamed:", v54);

          if (!v45)
          {
LABEL_45:
            __break(1u);
            JUMPOUT(0x1000F5D84);
          }
LABEL_35:
          v55 = (char *)v43 + *(int *)(v41 + 96);
          v56 = *(int *)(v41 + 112);
          v43[1] = v45;
          v43[3] = 0;
          *((_BYTE *)v43 + 16) = 0;
          v57 = enum case for Image.TemplateRenderingMode.original(_:);
          v58 = type metadata accessor for Image.TemplateRenderingMode(0);
          v59 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 104))(v55, v57, v58);
          *(_QWORD *)((char *)v43 + v56) = static Color.clear.getter(v59);
          *v7 = a1;
          swift_storeEnumTagMultiPayload(v7, v2, 2);
          v60 = type metadata accessor for PlaceSummaryImageViewModel(0);
          v24 = swift_allocObject(v60, *(unsigned int *)(v60 + 48), *(unsigned __int16 *)(v60 + 52));
          v76 = 0;
          v61 = sub_100008B04((uint64_t *)&unk_101497210);
          v62 = Published.init(initialValue:)(&v76, v61);
          UUID.init()(v62);
          sub_10003F29C((uint64_t)v7, v24 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_type, type metadata accessor for PlaceSummaryImageViewModel.ImageType);

          v63 = v24 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_cornerRadius;
          *(_QWORD *)v63 = 0x4014000000000000;
          *(_BYTE *)(v63 + 8) = 0;
          return v24;
        }
      }
    }
  }
  v64 = objc_msgSend(a1, "iconStyleAttributes");
  if (!v64)
  {
    v68 = objc_msgSend((id)objc_opt_self(MapsUIImageCache), "sharedCache");
    if (v68)
    {
      v69 = v68;
      v70 = objc_msgSend(v68, "searchImage");

      if (v70)
      {
        *v4 = v70;
        swift_storeEnumTagMultiPayload(v4, v2, 1);
        v71 = type metadata accessor for PlaceSummaryImageViewModel(0);
        v24 = swift_allocObject(v71, *(unsigned int *)(v71 + 48), *(unsigned __int16 *)(v71 + 52));
        v76 = 0;
        v72 = sub_100008B04((uint64_t *)&unk_101497210);
        v73 = Published.init(initialValue:)(&v76, v72);
        UUID.init()(v73);
        sub_10003F29C((uint64_t)v4, v24 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_type, type metadata accessor for PlaceSummaryImageViewModel.ImageType);
        v74 = v24 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_cornerRadius;
        *(_QWORD *)v74 = 0;
        *(_BYTE *)(v74 + 8) = 1;
        return v24;
      }
      goto LABEL_44;
    }
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v65 = v64;
  v66 = objc_msgSend(objc_allocWithZone((Class)GEOFeatureStyleAttributes), "initWithGEOStyleAttributes:", v64);
  v67 = sub_1000F4E54((uint64_t)v66, 0, 1);

  return v67;
}

uint64_t sub_1000F5D9C(void *a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  NSBundle v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  unsigned int v24;
  id v25;
  unint64_t v27;

  v2 = objc_msgSend(a1, "childItemType");
  if (v2 == (id)3)
  {
    v7 = objc_msgSend(a1, "publisherResult");
    v4 = v7;
    if (!v7)
      return (uint64_t)v4;
    v8 = objc_msgSend(v7, "publisher");

    if (v8)
    {
      v9 = objc_msgSend(v8, "totalCollectionCount");
LABEL_11:
      v10 = v9;

      if (v10 == (id)1)
      {
        if (qword_101490ED0 != -1)
          swift_once(&qword_101490ED0, sub_10011833C);
        v11.super.isa = (Class)qword_1014D4B80;
        v12 = 0xD000000000000018;
        v13 = 0xD000000000000040;
        v27 = 0x8000000100E491F0;
        v14 = 0x8000000100E491D0;
        v15 = 0x6564697547;
        v16 = 0xE500000000000000;
      }
      else
      {
        if (qword_101490ED0 != -1)
          swift_once(&qword_101490ED0, sub_10011833C);
        v11.super.isa = (Class)qword_1014D4B80;
        v13 = 0xD000000000000041;
        v27 = 0x8000000100E49180;
        v14 = 0x8000000100E49160;
        v12 = 0xD000000000000019;
        v15 = 0x736564697547;
        v16 = 0xE600000000000000;
      }
      return NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v12, (Swift::String_optional)0, v11, *(Swift::String *)&v15, *(Swift::String *)&v13)._countAndFlagsBits;
    }
    return 0;
  }
  if (v2 == (id)2)
  {
    v17 = objc_msgSend(a1, "childItemAction");
    v18 = v17;
    if (v17)
    {
      v19 = objc_msgSend(v17, "childActionType");

      switch((unint64_t)v19)
      {
        case 1uLL:
          if (qword_101490ED0 != -1)
            swift_once(&qword_101490ED0, sub_10011833C);
          v11.super.isa = (Class)qword_1014D4B80;
          v13 = 0xD000000000000032;
          v27 = 0x8000000100E494C0;
          v14 = 0x8000000100E494A0;
          v12 = 0xD000000000000019;
          v15 = 0x6F69746365726944;
          v16 = 0xEA0000000000736ELL;
          return NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v12, (Swift::String_optional)0, v11, *(Swift::String *)&v15, *(Swift::String *)&v13)._countAndFlagsBits;
        case 2uLL:
          v22 = objc_msgSend((id)objc_opt_self(VKPlatform), "sharedPlatform");
          if (!v22)
          {
            __break(1u);
            JUMPOUT(0x1000F64B4);
          }
          v23 = v22;
          v24 = objc_msgSend(v22, "supportsARMode");

          if (v24)
          {
            if (qword_101490ED0 != -1)
              swift_once(&qword_101490ED0, sub_10011833C);
            v11.super.isa = (Class)qword_1014D4B80;
            v12 = 0xD000000000000016;
            v13 = 0xD000000000000034;
            v27 = 0x8000000100E49460;
            v14 = 0x8000000100E49440;
            v15 = 0x7265766F796C46;
            v16 = 0xE700000000000000;
          }
          else
          {
            if (qword_101490ED0 != -1)
              swift_once(&qword_101490ED0, sub_10011833C);
            v11.super.isa = (Class)qword_1014D4B80;
            v12 = 0xD00000000000001BLL;
            v13 = 0xD000000000000039;
            v27 = 0x8000000100E49400;
            v14 = 0x8000000100E493E0;
            v15 = 0x207265766F796C46;
            v16 = 0xEC00000072756F54;
          }
          return NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v12, (Swift::String_optional)0, v11, *(Swift::String *)&v15, *(Swift::String *)&v13)._countAndFlagsBits;
        case 3uLL:
          v20 = objc_msgSend(a1, "childItemAction");
          v21 = v20;
          if (!v20)
            return 0;
          v4 = objc_msgSend(v20, "childActionSearch");

          if (!v4)
            return (uint64_t)v4;
          v5 = objc_msgSend(v4, "displayString");
          goto LABEL_6;
        case 4uLL:
          if (qword_101490ED0 != -1)
            swift_once(&qword_101490ED0, sub_10011833C);
          v11.super.isa = (Class)qword_1014D4B80;
          v12 = 0xD00000000000001ALL;
          v13 = 0xD000000000000037;
          v27 = 0x8000000100E493A0;
          v14 = 0x8000000100E49380;
          v15 = 0x6F7241206B6F6F4CLL;
          v16 = 0xEB00000000646E75;
          return NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v12, (Swift::String_optional)0, v11, *(Swift::String *)&v15, *(Swift::String *)&v13)._countAndFlagsBits;
        case 5uLL:
          if (qword_101490ED0 != -1)
            swift_once(&qword_101490ED0, sub_10011833C);
          v11.super.isa = (Class)qword_1014D4B80;
          v12 = 0xD000000000000013;
          v13 = 0xD00000000000004ELL;
          v27 = 0x8000000100E49330;
          v14 = 0x8000000100E49310;
          v15 = 1819042115;
          v16 = 0xE400000000000000;
          return NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v12, (Swift::String_optional)0, v11, *(Swift::String *)&v15, *(Swift::String *)&v13)._countAndFlagsBits;
        case 6uLL:
          if (qword_101490ED0 != -1)
            swift_once(&qword_101490ED0, sub_10011833C);
          v11.super.isa = (Class)qword_1014D4B80;
          v12 = 0xD000000000000016;
          v13 = 0xD00000000000003DLL;
          v27 = 0x8000000100E492D0;
          v14 = 0x8000000100E492B0;
          v15 = 0x65746973626557;
          v16 = 0xE700000000000000;
          return NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v12, (Swift::String_optional)0, v11, *(Swift::String *)&v15, *(Swift::String *)&v13)._countAndFlagsBits;
        case 7uLL:
          v25 = objc_msgSend(a1, "childItemAction");
          v4 = v25;
          if (!v25)
            return (uint64_t)v4;
          v8 = objc_msgSend(v25, "guideLocation");

          if (!v8)
            return 0;
          v9 = objc_msgSend(v8, "numberOfGuides");
          break;
        case 8uLL:
          if (qword_101490ED0 != -1)
            swift_once(&qword_101490ED0, sub_10011833C);
          v11.super.isa = (Class)qword_1014D4B80;
          v12 = 0xD00000000000001FLL;
          v13 = 0xD000000000000047;
          v27 = 0x8000000100E49260;
          v14 = 0x8000000100E49240;
          v15 = 0x64616F6C6E776F44;
          v16 = 0xE800000000000000;
          return NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v12, (Swift::String_optional)0, v11, *(Swift::String *)&v15, *(Swift::String *)&v13)._countAndFlagsBits;
        default:
          return 0;
      }
      goto LABEL_11;
    }
    return 0;
  }
  if (v2 != (id)1)
    return 0;
  v3 = objc_msgSend(a1, "childItemPlace");
  v4 = v3;
  if (!v3)
    return (uint64_t)v4;
  v5 = objc_msgSend(v3, "name");
LABEL_6:
  v6 = v5;

  if (!v6)
    return 0;
  v4 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v6);

  return (uint64_t)v4;
}

void sub_1000F64D4(uint64_t a1, double a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  Class isa;
  id v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  id v26;
  unint64_t v27;
  unint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = (int *)type metadata accessor for PlaceSummaryViewModelActionButtons.Button(0);
  v32 = *((_QWORD *)v4 - 1);
  __chkstk_darwin(v4);
  v34 = (uint64_t)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v31 - v7;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v30 = a1;
    else
      v30 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v9 = _CocoaArrayWrapper.endIndex.getter(v30);
    swift_bridgeObjectRelease(a1);
    if (!v9)
      return;
  }
  else
  {
    v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v9)
      return;
  }
  v10 = objc_msgSend((id)objc_opt_self(UIFont), "system15Semibold");
  if (!v10)
  {
LABEL_27:
    __break(1u);
    return;
  }
  v11 = v10;
  v12 = objc_allocWithZone((Class)ChildItemsViewModel);
  sub_10000E4BC(0, &qword_10149A568, GEOMapItemChildItem_ptr);
  swift_bridgeObjectRetain(a1);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  v14 = objc_msgSend(v12, "initWithChildItems:childItemsSpacing:font:maxWidth:buttonContentEdgeInsets:", isa, v11, 8.0, a2 + -72.0, 0.0, 10.0, 0.0, 10.0);

  if (v9 < 1)
  {
    __break(1u);
    goto LABEL_27;
  }
  v33 = v9;
  v15 = a1 & 0xC000000000000001;
  swift_bridgeObjectRetain(a1);
  v16 = 0;
  v17 = _swiftEmptyArrayStorage;
  v18 = a1;
  do
  {
    if (v15)
      v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v16, a1);
    else
      v19 = *(id *)(a1 + 8 * v16 + 32);
    v20 = v19;
    v21 = sub_1000F5D9C(v19);
    if (v22)
    {
      v23 = v21;
      v24 = v22;
      UUID.init()(v21);
      v25 = &v8[v4[5]];
      *(_QWORD *)v25 = v23;
      *((_QWORD *)v25 + 1) = v24;
      *(_QWORD *)&v8[v4[6]] = v14;
      *(_QWORD *)&v8[v4[7]] = v16;
      sub_1000202AC((uint64_t)v8, v34, type metadata accessor for PlaceSummaryViewModelActionButtons.Button);
      v26 = v14;
      if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
        v17 = (_QWORD *)sub_1000A8ADC(0, v17[2] + 1, 1, (unint64_t)v17);
      v28 = v17[2];
      v27 = v17[3];
      if (v28 >= v27 >> 1)
        v17 = (_QWORD *)sub_1000A8ADC(v27 > 1, v28 + 1, 1, (unint64_t)v17);
      v17[2] = v28 + 1;
      sub_10003F29C(v34, (uint64_t)v17+ ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))+ *(_QWORD *)(v32 + 72) * v28, type metadata accessor for PlaceSummaryViewModelActionButtons.Button);

      sub_1000202F0((uint64_t)v8, type metadata accessor for PlaceSummaryViewModelActionButtons.Button);
    }
    else
    {

    }
    ++v16;
    a1 = v18;
  }
  while (v33 != v16);
  *(_QWORD *)&v29 = swift_bridgeObjectRelease(v18).n128_u64[0];
  if (v17[2])
  {
    objc_msgSend(v14, "numberOfColumns", v29);

  }
  else
  {

    swift_bridgeObjectRelease(v17);
  }
}

void sub_1000F6824(void *a1, double a2)
{
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  unsigned __int8 v20;
  id v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  void *v32;

  v3 = a1;
  v4 = objc_msgSend(a1, "childItems");
  if (v4)
  {
    v5 = sub_10000E4BC(0, &qword_10149A568, GEOMapItemChildItem_ptr);
    v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

    if ((unint64_t)v6 >> 62)
    {
LABEL_27:
      if (v6 < 0)
        v29 = v6;
      else
        v29 = v6 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v6);
      v7 = _CocoaArrayWrapper.endIndex.getter(v29);
      swift_bridgeObjectRelease(v6);
      if (v7)
      {
LABEL_4:
        v8 = 4;
        v32 = v3;
        do
        {
          if ((v6 & 0xC000000000000001) != 0)
            v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, v6);
          else
            v9 = *(id *)(v6 + 8 * v8);
          v10 = v9;
          v11 = v8 - 3;
          if (__OFADD__(v8 - 4, 1))
          {
            __break(1u);
            goto LABEL_27;
          }
          v12 = objc_msgSend(v9, "childItemAction");
          if (v12 && (v13 = v12, v14 = objc_msgSend(v12, "childActionType"), v13, v14 == (id)8))
          {
            v15 = objc_msgSend(v3, "mapItem");
            if (!v15)
            {
              __break(1u);
LABEL_39:
              __break(1u);
              return;
            }
            v16 = v15;
            v17 = objc_msgSend(v15, "_geoMapItem");

            if (!v17)
              goto LABEL_39;
            v18 = objc_msgSend(v17, "offlineDownloadRegion");
            swift_unknownObjectRelease(v17);
            if (v18)
            {
              v19 = objc_msgSend((id)objc_opt_self(MapsOfflineUIHelper), "sharedHelper");
              v20 = objc_msgSend(v19, "isRegionDownloaded:requireFullyDownloaded:", v18, 0);

              if ((v20 & 1) != 0)
              {

              }
              else
              {
                v21 = v10;
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v21);
                v23 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
                v22 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
                if (v23 >= v22 >> 1)
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
                v24 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v21);
                specialized Array._endMutation()(v24);

                v3 = v32;
              }
            }
          }
          else
          {
            v25 = v10;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v25);
            v27 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
            v26 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v27 >= v26 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
            v28 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, v25);
            specialized Array._endMutation()(v28);
          }

          ++v8;
        }
        while (v11 != v7);
        swift_bridgeObjectRelease(v6);
        if ((unint64_t)_swiftEmptyArrayStorage >> 62)
          goto LABEL_32;
        goto LABEL_24;
      }
    }
    else
    {
      v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v7)
        goto LABEL_4;
    }
    swift_bridgeObjectRelease(v6);
    if ((unint64_t)_swiftEmptyArrayStorage >> 62)
    {
LABEL_32:
      if ((uint64_t)_swiftEmptyArrayStorage < 0)
        v30 = _swiftEmptyArrayStorage;
      else
        v30 = (_QWORD *)((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8);
      swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
      v31 = _CocoaArrayWrapper.endIndex.getter(v30);
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      if (v31)
        goto LABEL_25;
LABEL_36:
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      return;
    }
LABEL_24:
    if (*(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_25:
      sub_1000F64D4((uint64_t)_swiftEmptyArrayStorage, a2);
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      return;
    }
    goto LABEL_36;
  }
}

void sub_1000F6BA4(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  char *v25;
  id v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;

  v2 = type metadata accessor for UUID(0);
  v44 = *(_QWORD *)(v2 - 8);
  v45 = v2;
  __chkstk_darwin(v2);
  v43 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100008B04(&qword_10149A650);
  __chkstk_darwin(v4);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)type metadata accessor for PlaceSummaryViewModelRefinementButtons.Button(0);
  v8 = *((_QWORD *)v7 - 1);
  __chkstk_darwin(v7);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v12 = __chkstk_darwin(v11).n128_u64[0];
  v46 = (uint64_t)&v39 - v13;
  v14 = objc_msgSend(a1, "resultRefinements", v12);
  if (!v14)
    return;
  v15 = v14;
  v16 = sub_10000E4BC(0, &qword_10149A658, GEOResultRefinement_ptr);
  v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, v16);

  if (!((unint64_t)v17 >> 62))
  {
    v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v18)
      goto LABEL_4;
LABEL_27:
    v37 = (_QWORD *)v17;
    goto LABEL_28;
  }
  if (v17 < 0)
    v38 = v17;
  else
    v38 = v17 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v17);
  v18 = _CocoaArrayWrapper.endIndex.getter(v38);
  swift_bridgeObjectRelease(v17);
  if (!v18)
    goto LABEL_27;
LABEL_4:
  if (v18 < 1)
  {
    __break(1u);
    return;
  }
  v48 = v17 & 0xC000000000000001;
  swift_bridgeObjectRetain(v17);
  v19 = 0;
  v20 = _swiftEmptyArrayStorage;
  v41 = v8;
  v42 = v7;
  v40 = v17;
  do
  {
    if (v48)
      v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v19, v17);
    else
      v21 = *(id *)(v17 + 8 * v19 + 32);
    v22 = v21;
    if (objc_msgSend(v21, "type") == (id)1
      && (v23 = objc_msgSend(v22, "toggle")) != 0)
    {
      v24 = v23;
      v25 = v43;
      UUID.init()(v23);
      v26 = objc_msgSend(v24, "displayName");
      v27 = v10;
      v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      v47 = v20;
      v29 = v18;
      v31 = v30;

      v22 = v22;
      LOBYTE(v26) = objc_msgSend(v24, "showAsSelected");

      v32 = v25;
      v7 = v42;
      (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v6, v32, v45);
      v33 = (uint64_t *)&v6[v7[5]];
      *v33 = v28;
      v33[1] = v31;
      v10 = v27;
      v18 = v29;
      v20 = v47;
      *(_QWORD *)&v6[v7[6]] = v22;
      v6[v7[7]] = (char)v26;
      v17 = v40;
      v8 = v41;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v41 + 56))(v6, 0, 1, v7);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, int *))(v8 + 56))(v6, 1, 1, v7);
    }

    if ((*(unsigned int (**)(char *, uint64_t, int *))(v8 + 48))(v6, 1, v7) == 1)
    {
      sub_100010CC4((uint64_t)v6, &qword_10149A650);
    }
    else
    {
      v34 = v46;
      sub_10003F29C((uint64_t)v6, v46, type metadata accessor for PlaceSummaryViewModelRefinementButtons.Button);
      sub_10003F29C(v34, (uint64_t)v10, type metadata accessor for PlaceSummaryViewModelRefinementButtons.Button);
      if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
        v20 = (_QWORD *)sub_1000A8AF0(0, v20[2] + 1, 1, (unint64_t)v20);
      v36 = v20[2];
      v35 = v20[3];
      if (v36 >= v35 >> 1)
        v20 = (_QWORD *)sub_1000A8AF0(v35 > 1, v36 + 1, 1, (unint64_t)v20);
      v20[2] = v36 + 1;
      sub_10003F29C((uint64_t)v10, (uint64_t)v20+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v36, type metadata accessor for PlaceSummaryViewModelRefinementButtons.Button);
    }
    ++v19;
  }
  while (v18 != v19);
  swift_bridgeObjectRelease_n(v17, 2);
  if (!v20[2])
  {
    v37 = v20;
LABEL_28:
    swift_bridgeObjectRelease(v37);
  }
}

void sub_1000F6FC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = type metadata accessor for PlaceSummaryImageViewModel.ImageType(0);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1)
  {
    v5 = *(_QWORD *)(a1 + 16);
    if (v5)
    {
      v6 = 0;
      while (*(_BYTE *)(a1 + v6 + 32) != 2)
      {
        if (v5 == ++v6)
          return;
      }
      v7 = (void *)objc_opt_self(MapsUIImageCache);
      swift_bridgeObjectRetain(a1);
      v8 = objc_msgSend(v7, "sharedCache");
      if (v8)
      {
        v9 = v8;
        v10 = objc_msgSend(v8, "searchImage");

        if (v10)
        {
          swift_bridgeObjectRelease(a1);
          *v4 = v10;
          swift_storeEnumTagMultiPayload(v4, v2, 1);
          v11 = type metadata accessor for PlaceSummaryImageViewModel(0);
          v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
          v17 = 0;
          v13 = sub_100008B04((uint64_t *)&unk_101497210);
          v14 = Published.init(initialValue:)(&v17, v13);
          UUID.init()(v14);
          sub_10003F29C((uint64_t)v4, v12 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_type, type metadata accessor for PlaceSummaryImageViewModel.ImageType);
          v15 = v12 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_cornerRadius;
          *(_QWORD *)v15 = 0;
          *(_BYTE *)(v15 + 8) = 1;
          return;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
    }
  }
}

unint64_t sub_1000F7174(id a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v4;
  int v5;
  unint64_t v6;
  unsigned int v8;
  id v9;
  id v10;
  unint64_t v11;
  id v12;
  id v13;
  id v14;

  if (!a2)
    return 0xF000000000000007;
  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0xF000000000000007;
  v4 = (unsigned __int8 *)(a2 + 32);
  while (1)
  {
    v5 = *v4++;
    if (v5 == 2)
      break;
    if (!--v2)
      return 0xF000000000000007;
  }
  v8 = objc_msgSend(a1, "isMeCard");
  switch(objc_msgSend(a1, "addressType"))
  {
    case 1u:
      if (v8)
      {
        v9 = objc_msgSend((id)objc_opt_self(GEOFeatureStyleAttributes), "homeStyleAttributes");
        goto LABEL_16;
      }
      v12 = objc_msgSend(a1, "contact");
      v13 = objc_msgSend((id)objc_opt_self(GEOFeatureStyleAttributes), "homeStyleAttributes");
      goto LABEL_21;
    case 2u:
      if (v8)
      {
        v9 = objc_msgSend((id)objc_opt_self(GEOFeatureStyleAttributes), "workStyleAttributes");
        goto LABEL_16;
      }
      v12 = objc_msgSend(a1, "contact");
      v13 = objc_msgSend((id)objc_opt_self(GEOFeatureStyleAttributes), "workStyleAttributes");
      goto LABEL_21;
    case 3u:
      if (v8)
      {
        v9 = objc_msgSend((id)objc_opt_self(GEOFeatureStyleAttributes), "schoolStyleAttributes");
LABEL_16:
        v10 = v9;
        v11 = sub_1000F4E54((uint64_t)v10, 0, 0);
LABEL_17:
        v6 = v11;

      }
      else
      {
        v12 = objc_msgSend(a1, "contact");
        v13 = objc_msgSend((id)objc_opt_self(GEOFeatureStyleAttributes), "schoolStyleAttributes");
LABEL_21:
        v14 = v13;
        v6 = sub_1000F5044(v12, (uint64_t)v14, 0);

      }
      break;
    default:
      v10 = objc_msgSend(a1, "contact");
      v11 = sub_1000F5044(v10, 0, v8 == 0);
      goto LABEL_17;
  }
  return v6;
}

_QWORD *sub_1000F73CC(_BYTE *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  NSString v7;
  Swift::String v8;
  uint64_t countAndFlagsBits;
  uint64_t object;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  _QWORD *v15;
  id v16;
  id v17;
  id v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  uint64_t i;
  _QWORD *v58;
  id v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  id v70;
  id v71;
  id v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  id v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  id v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  void *v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  void *v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  void *v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  id v112;
  void *v113;
  id v114;
  uint64_t v115;
  unint64_t v116;
  void *v117;
  NSString v118;
  NSString v119;
  id v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  unint64_t v130;
  unint64_t v131;
  _QWORD *v132;
  id v133;
  uint64_t v134;
  uint64_t v135;
  double v136;
  uint64_t v137;
  id v138;
  uint64_t v139;
  void *v140;
  id v141;
  id v142;
  id v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  Swift::String v147;
  id v148;
  id v149;
  uint64_t v150;
  void *v151;
  void *v152;
  Swift::String v153;
  _QWORD *v154;
  unint64_t v155;
  unint64_t v156;
  _QWORD *v157;
  id v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  id v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  NSBundle v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  Swift::String v178;
  _QWORD *v179;
  unint64_t v180;
  unint64_t v181;
  _QWORD *v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  unint64_t v189;
  unint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  id v205;
  int v206;
  _QWORD *v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD v213[2];

  v4 = swift_allocObject(&unk_1011A2330, 24, 7);
  v5 = _swiftEmptyArrayStorage;
  *(_QWORD *)(v4 + 16) = _swiftEmptyArrayStorage;
  v6 = v4 + 16;
  if (*(_QWORD *)&a1[OBJC_IVAR____TtC4Maps22MapsAutocompletePerson_handle])
  {
    v7 = sub_1001EFC78();
    v8 = String.init(_:)(v7);
    countAndFlagsBits = v8._countAndFlagsBits;
    object = (uint64_t)v8._object;
    v11 = sub_1000A89A8(0, 1, 1, _swiftEmptyArrayStorage);
    v13 = v11[2];
    v12 = v11[3];
    v14 = v13 + 1;
    if (v13 >= v12 >> 1)
      goto LABEL_89;
    goto LABEL_3;
  }
  v207 = _swiftEmptyArrayStorage;
LABEL_7:
  if (a1[OBJC_IVAR____TtC4Maps22MapsAutocompletePerson_placeSummaryShowsStackedIconsAndLabels] == 1)
  {
    v22 = *(void **)&a1[OBJC_IVAR____TtC4Maps22MapsAutocompletePerson_contact];
    if (v22)
    {
      v13 = v22;
      v23 = objc_msgSend((id)v13, "postalAddresses");
      v24 = sub_100008B04((uint64_t *)&unk_1014A0C80);
      v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v23, v24);

      if ((unint64_t)v25 >> 62)
      {
        if (v25 < 0)
          v98 = v25;
        else
          v98 = v25 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v25);
        v26 = _CocoaArrayWrapper.endIndex.getter(v98);
        swift_bridgeObjectRelease(v25);
      }
      else
      {
        v26 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      *(_QWORD *)&v27 = swift_bridgeObjectRelease(v25).n128_u64[0];
      if (v26 >= 1)
      {
        countAndFlagsBits = (uint64_t)objc_msgSend((id)v13, "postalAddresses", v27);
        v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)(countAndFlagsBits, v24);

        v213[0] = v5;
        if ((unint64_t)v28 >> 62)
        {
          if (v28 < 0)
            countAndFlagsBits = v28;
          else
            countAndFlagsBits = v28 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v28);
          object = _CocoaArrayWrapper.endIndex.getter(countAndFlagsBits);
          swift_bridgeObjectRelease(v28);
        }
        else
        {
          object = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        v203 = v4;
        v204 = v24;
        v199 = v6;
        v205 = (id)v13;
        if (object)
        {
          if (object < 1)
          {
            __break(1u);
            goto LABEL_210;
          }
          v29 = 0;
          v6 = (uint64_t)&type metadata for String;
          do
          {
            if ((v28 & 0xC000000000000001) != 0)
              v30 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v29, v28);
            else
              v30 = *(id *)(v28 + 8 * v29 + 32);
            v5 = v30;
            v31 = objc_msgSend(v30, "label");
            if (!v31)
              goto LABEL_17;
            v32 = v31;
            v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
            v2 = v34;

            v209 = v33;
            v210 = v2;
            v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(CNLabelHome);
            v1 = v36;
            v211 = v35;
            v212 = v36;
            v37 = sub_10006C008();
            v38 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v211, &type metadata for String, &type metadata for String, v37, v37);
            swift_bridgeObjectRelease(v2);
            swift_bridgeObjectRelease(v1);
            if (v38)
            {
LABEL_17:

            }
            else
            {
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v39);
              v1 = *(_QWORD *)(v213[0] + 16);
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v1);
              v40 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v1, v5);
              specialized ContiguousArray._endMutation()(v40);
            }
            ++v29;
          }
          while (object != v29);
          *(_QWORD *)&v41 = swift_bridgeObjectRelease(v28).n128_u64[0];
          v202 = v213[0];
          v24 = v204;
        }
        else
        {
          *(_QWORD *)&v41 = swift_bridgeObjectRelease(v28).n128_u64[0];
          v202 = (uint64_t)_swiftEmptyArrayStorage;
        }
        countAndFlagsBits = (uint64_t)objc_msgSend((id)v13, "postalAddresses", v41);
        v42 = static Array._unconditionallyBridgeFromObjectiveC(_:)(countAndFlagsBits, v24);

        v213[0] = _swiftEmptyArrayStorage;
        if ((unint64_t)v42 >> 62)
        {
          if (v42 < 0)
            countAndFlagsBits = v42;
          else
            countAndFlagsBits = v42 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v42);
          object = _CocoaArrayWrapper.endIndex.getter(countAndFlagsBits);
          swift_bridgeObjectRelease(v42);
        }
        else
        {
          object = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        if (!object)
        {
          *(_QWORD *)&v55 = swift_bridgeObjectRelease(v42).n128_u64[0];
          v201 = _swiftEmptyArrayStorage;
LABEL_43:
          countAndFlagsBits = (uint64_t)objc_msgSend((id)v13, "postalAddresses", v55);
          v56 = static Array._unconditionallyBridgeFromObjectiveC(_:)(countAndFlagsBits, v24);

          v213[0] = _swiftEmptyArrayStorage;
          if ((unint64_t)v56 >> 62)
          {
            if (v56 < 0)
              countAndFlagsBits = v56;
            else
              countAndFlagsBits = v56 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v56);
            object = _CocoaArrayWrapper.endIndex.getter(countAndFlagsBits);
            swift_bridgeObjectRelease(v56);
          }
          else
          {
            object = *(_QWORD *)((v56 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          if (!object)
          {
            *(_QWORD *)&v69 = swift_bridgeObjectRelease(v56).n128_u64[0];
            v6 = (uint64_t)_swiftEmptyArrayStorage;
            goto LABEL_58;
          }
          if (object >= 1)
          {
            for (i = 0; i != object; ++i)
            {
              if ((v56 & 0xC000000000000001) != 0)
                v58 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v56);
              else
                v58 = *(id *)(v56 + 8 * i + 32);
              v5 = v58;
              v59 = objc_msgSend(v58, "label");
              if (!v59)
                goto LABEL_48;
              v60 = v59;
              v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
              v63 = v62;

              v209 = v61;
              v210 = v63;
              v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(CNLabelSchool);
              v1 = v65;
              v211 = v64;
              v212 = v65;
              v66 = sub_10006C008();
              countAndFlagsBits = StringProtocol.caseInsensitiveCompare<A>(_:)(&v211, &type metadata for String, &type metadata for String, v66, v66);
              swift_bridgeObjectRelease(v63);
              swift_bridgeObjectRelease(v1);
              if (countAndFlagsBits)
              {
LABEL_48:

              }
              else
              {
                countAndFlagsBits = (uint64_t)v213;
                specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v67);
                v1 = *(_QWORD *)(v213[0] + 16);
                specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v1);
                v68 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v1, v5);
                specialized ContiguousArray._endMutation()(v68);
              }
            }
            *(_QWORD *)&v69 = swift_bridgeObjectRelease(v56).n128_u64[0];
            v6 = v213[0];
            v24 = v204;
LABEL_58:
            v70 = objc_msgSend((id)v13, "postalAddresses", v69);
            v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v70, v24);

            v213[0] = _swiftEmptyArrayStorage;
            if ((unint64_t)v2 >> 62)
            {
              if (v2 < 0)
                v99 = v2;
              else
                v99 = v2 & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain(v2);
              v14 = _CocoaArrayWrapper.endIndex.getter(v99);
              swift_bridgeObjectRelease(v2);
            }
            else
            {
              v14 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
            }
            v200 = v6;
            if (v14)
            {
              v4 = 0;
              v6 = v2 & 0xFFFFFFFFFFFFFF8;
              a1 = &type metadata for String;
              while (1)
              {
                if ((v2 & 0xC000000000000001) != 0)
                {
                  v71 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v2);
                }
                else
                {
                  v12 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
                  if (v4 >= v12)
                  {
                    __break(1u);
LABEL_88:
                    __break(1u);
LABEL_89:
                    v11 = sub_1000A89A8((_QWORD *)(v12 > 1), v14, 1, v11);
LABEL_3:
                    v11[2] = v14;
                    v207 = v11;
                    v15 = &v11[2 * v13];
                    v15[4] = countAndFlagsBits;
                    v15[5] = object;
                    v16 = objc_msgSend(objc_allocWithZone((Class)MapsUIImageGEOFeatureSpec), "init");
                    v17 = objc_msgSend((id)objc_opt_self(GEOFeatureStyleAttributes), "sharedLocationWithHalo");
                    objc_msgSend(v16, "setStyle:", v17);

                    objc_msgSend(v16, "setMarkerFallback:", 1);
                    v18 = v16;
                    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v18);
                    v20 = *(_QWORD *)((*(_QWORD *)v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
                    v19 = *(_QWORD *)((*(_QWORD *)v6 & 0xFFFFFFFFFFFFFF8) + 0x18);
                    if (v20 >= v19 >> 1)
                      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
                    v21 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v18);
                    specialized Array._endMutation()(v21);

                    goto LABEL_7;
                  }
                  v71 = *(id *)(v2 + 8 * v4 + 32);
                }
                object = (uint64_t)v71;
                v5 = (_QWORD *)(v4 + 1);
                if (__OFADD__(v4, 1))
                  goto LABEL_88;
                v72 = objc_msgSend(v71, "label");
                if (v72)
                {
                  v73 = v72;
                  v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
                  v1 = v75;

                  v209 = v74;
                  v210 = v1;
                  v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(CNLabelHome);
                  v13 = v77;
                  v211 = v76;
                  v212 = v77;
                  v78 = sub_10006C008();
                  countAndFlagsBits = StringProtocol.caseInsensitiveCompare<A>(_:)(&v211, &type metadata for String, &type metadata for String, v78, v78);
                  swift_bridgeObjectRelease(v1);
                  swift_bridgeObjectRelease(v13);
                  if (!countAndFlagsBits)
                    goto LABEL_62;
                }
                v79 = objc_msgSend((id)object, "label");
                if (v79)
                {
                  v80 = v79;
                  v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
                  v1 = v82;

                  v209 = v81;
                  v210 = v1;
                  v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(CNLabelWork);
                  v13 = v84;
                  v211 = v83;
                  v212 = v84;
                  v85 = sub_10006C008();
                  countAndFlagsBits = StringProtocol.caseInsensitiveCompare<A>(_:)(&v211, &type metadata for String, &type metadata for String, v85, v85);
                  swift_bridgeObjectRelease(v1);
                  swift_bridgeObjectRelease(v13);
                  if (!countAndFlagsBits)
                    goto LABEL_62;
                }
                v86 = objc_msgSend((id)object, "label");
                if (!v86)
                  goto LABEL_74;
                v87 = v86;
                v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(v86);
                v1 = v89;

                v209 = v88;
                v210 = v1;
                v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(CNLabelSchool);
                v13 = v91;
                v211 = v90;
                v212 = v91;
                v92 = sub_10006C008();
                countAndFlagsBits = StringProtocol.caseInsensitiveCompare<A>(_:)(&v211, &type metadata for String, &type metadata for String, v92, v92);
                swift_bridgeObjectRelease(v1);
                swift_bridgeObjectRelease(v13);
                if (!countAndFlagsBits)
                {
LABEL_62:

                }
                else
                {
LABEL_74:
                  countAndFlagsBits = (uint64_t)v213;
                  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v86);
                  v13 = *(_QWORD *)(v213[0] + 16);
                  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13);
                  v93 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, object);
                  specialized ContiguousArray._endMutation()(v93);
                }
                ++v4;
                if (v5 == (_QWORD *)v14)
                {
                  countAndFlagsBits = v213[0];
                  v4 = v203;
                  v6 = v200;
                  goto LABEL_78;
                }
              }
            }
            countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
LABEL_78:
            swift_bridgeObjectRelease(v2);
            object = (uint64_t)v201;
            v13 = v202;
            if (v202 < 0)
              v24 = 1;
            else
              v24 = ((unint64_t)v202 >> 62) & 1;
            if ((_DWORD)v24 == 1)
            {
              swift_retain();
              if (_CocoaArrayWrapper.endIndex.getter(v100))
              {
LABEL_83:
                if ((v202 & 0xC000000000000001) == 0)
                {
                  if (!*(_QWORD *)(v202 + 16))
                  {
                    __break(1u);
                    goto LABEL_214;
                  }
                  v95 = *(id *)(v202 + 32);
                  goto LABEL_86;
                }
LABEL_212:
                v95 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v13);
LABEL_86:
                v96 = v95;
                swift_release();
                v97 = sub_1000EEE18(v96);
                sub_1000EF070(v97, v4);

                goto LABEL_112;
              }
            }
            else
            {
              v94 = *(_QWORD *)(v202 + 16);
              swift_retain();
              if (v94)
                goto LABEL_83;
            }
            swift_release();
LABEL_112:
            LODWORD(v5) = object < 0 || (object & 0x4000000000000000) != 0;
            if ((_DWORD)v5 == 1)
            {
              swift_retain();
              if (_CocoaArrayWrapper.endIndex.getter(v105))
              {
LABEL_117:
                if ((object & 0xC000000000000001) == 0)
                {
                  if (!*(_QWORD *)(object + 16))
                  {
                    __break(1u);
                    goto LABEL_216;
                  }
                  v102 = *(id *)(object + 32);
                  goto LABEL_120;
                }
LABEL_214:
                v102 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, object);
LABEL_120:
                v103 = v102;
                swift_release();
                v104 = sub_1000EEE18(v103);
                sub_1000EF070(v104, v4);

                goto LABEL_123;
              }
            }
            else
            {
              v101 = *(_QWORD *)(object + 16);
              swift_retain();
              if (v101)
                goto LABEL_117;
            }
            swift_release();
LABEL_123:
            LODWORD(v1) = v6 < 0 || (v6 & 0x4000000000000000) != 0;
            if ((_DWORD)v1 == 1)
            {
              swift_retain();
              if (_CocoaArrayWrapper.endIndex.getter(v110))
              {
LABEL_128:
                if ((v6 & 0xC000000000000001) == 0)
                {
                  if (!*(_QWORD *)(v6 + 16))
                  {
                    __break(1u);
                    goto LABEL_218;
                  }
                  v107 = *(id *)(v6 + 32);
                  goto LABEL_131;
                }
LABEL_216:
                v107 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v6);
LABEL_131:
                v108 = v107;
                swift_release();
                v109 = sub_1000EEE18(v108);
                sub_1000EF070(v109, v4);

                goto LABEL_134;
              }
            }
            else
            {
              v106 = *(_QWORD *)(v6 + 16);
              swift_retain();
              if (v106)
                goto LABEL_128;
            }
            swift_release();
LABEL_134:
            LODWORD(v6) = countAndFlagsBits < 0 || (countAndFlagsBits & 0x4000000000000000) != 0;
            if ((_DWORD)v6 == 1)
            {
              swift_retain();
              v111 = _CocoaArrayWrapper.endIndex.getter(v115);
              if (v111)
              {
LABEL_139:
                if ((countAndFlagsBits & 0xC000000000000001) == 0)
                {
                  if (!*(_QWORD *)(countAndFlagsBits + 16))
                  {
                    __break(1u);
                    goto LABEL_220;
                  }
                  v112 = *(id *)(countAndFlagsBits + 32);
                  goto LABEL_142;
                }
LABEL_218:
                v112 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, countAndFlagsBits);
LABEL_142:
                v113 = v112;
                swift_release();
                v114 = sub_1000EEE18(v113);
                sub_1000EF070(v114, v4);

                goto LABEL_145;
              }
            }
            else
            {
              v111 = *(_QWORD *)(countAndFlagsBits + 16);
              swift_retain();
              if (v111)
                goto LABEL_139;
            }
            swift_release();
LABEL_145:
            v206 = (int)v5;
            v208 = v24;
            if (qword_101490ED0 != -1)
              swift_once(&qword_101490ED0, sub_10011833C);
            v116 = 0xD000000000000014;
            v117 = (void *)qword_1014D4B80;
            v118 = String._bridgeToObjectiveC()();
            v119 = String._bridgeToObjectiveC()();
            v120 = objc_msgSend(v117, "localizedStringForKey:value:table:", v118, v119, 0);

            v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v120);
            v2 = v121;

            if (v207[2] == 1)
            {
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              v122 = sub_100008B04((uint64_t *)&unk_10149A4F0);
              v111 = swift_allocObject(v122, 72, 7);
              *(_OWORD *)(v111 + 16) = xmmword_100E22F40;
              v123 = objc_msgSend(v205, "postalAddresses");
              countAndFlagsBits = static Array._unconditionallyBridgeFromObjectiveC(_:)(v123, v204);

              if (!((unint64_t)countAndFlagsBits >> 62))
              {
                v124 = *(_QWORD *)((countAndFlagsBits & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_150:
                v125 = v199;
                swift_bridgeObjectRelease(countAndFlagsBits);
                *(_QWORD *)(v111 + 56) = &type metadata for Int;
                *(_QWORD *)(v111 + 64) = &protocol witness table for Int;
                *(_QWORD *)(v111 + 32) = v124;
                v126 = static String.localizedStringWithFormat(_:_:)(v24, v2, v111);
                v128 = v127;
                swift_bridgeObjectRelease(v111);
                swift_bridgeObjectRelease(v2);
                if ((swift_isUniquelyReferenced_nonNull_native(v207) & 1) == 0)
                  v207 = sub_1000A89A8(0, v207[2] + 1, 1, v207);
                v129 = v207;
                v131 = v207[2];
                v130 = v207[3];
                if (v131 >= v130 >> 1)
                  v129 = sub_1000A89A8((_QWORD *)(v130 > 1), v131 + 1, 1, v207);
                v129[2] = v131 + 1;
                v207 = v129;
                v132 = &v129[2 * v131];
                v132[4] = v126;
                v132[5] = v128;

                goto LABEL_233;
              }
LABEL_220:
              if (countAndFlagsBits < 0)
                v192 = countAndFlagsBits;
              else
                v192 = countAndFlagsBits & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain(countAndFlagsBits);
              v124 = _CocoaArrayWrapper.endIndex.getter(v192);
              swift_bridgeObjectRelease(countAndFlagsBits);
              goto LABEL_150;
            }
            v133 = objc_msgSend(v205, "postalAddresses");
            v134 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v133, v204);

            if ((unint64_t)v134 >> 62)
            {
              if (v134 < 0)
                v193 = v134;
              else
                v193 = v134 & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain(v134);
              v135 = _CocoaArrayWrapper.endIndex.getter(v193);
              swift_bridgeObjectRelease(v134);
            }
            else
            {
              v135 = *(_QWORD *)((v134 & 0xFFFFFFFFFFFFF8) + 0x10);
            }
            *(_QWORD *)&v136 = swift_bridgeObjectRelease(v134).n128_u64[0];
            if (v135 == 1)
            {
              swift_bridgeObjectRelease(v2);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              v137 = (uint64_t)v205;
              v138 = objc_msgSend(v205, "postalAddresses");
              v139 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v138, v204);

              if ((unint64_t)v139 >> 62)
              {
                if (v139 < 0)
                  v194 = v139;
                else
                  v194 = v139 & 0xFFFFFFFFFFFFFF8;
                swift_bridgeObjectRetain(v139);
                v140 = (void *)_CocoaArrayWrapper.endIndex.getter(v194);
                swift_bridgeObjectRelease(v139);
                v125 = v199;
                if (v140)
                {
LABEL_160:
                  if ((v139 & 0xC000000000000001) != 0)
                  {
                    v141 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v139);
                  }
                  else
                  {
                    if (!*(_QWORD *)((v139 & 0xFFFFFFFFFFFFF8) + 0x10))
                    {
                      __break(1u);
                      goto LABEL_241;
                    }
                    v141 = *(id *)(v139 + 32);
                  }
                  v140 = v141;
                  v142 = objc_msgSend(v141, "value", swift_bridgeObjectRelease(v139).n128_f64[0]);
                  v143 = objc_msgSend(v142, "street");

                  v144 = static String._unconditionallyBridgeFromObjectiveC(_:)(v143);
                  v146 = v145;

                  v209 = v144;
                  v210 = v146;
                  v147._countAndFlagsBits = 8236;
                  v147._object = (void *)0xE200000000000000;
                  String.append(_:)(v147);
                  v148 = objc_msgSend(v140, "value");
                  v149 = objc_msgSend(v148, "city");

                  v150 = static String._unconditionallyBridgeFromObjectiveC(_:)(v149);
                  v152 = v151;

                  v153._countAndFlagsBits = v150;
                  v153._object = v152;
                  String.append(_:)(v153);
                  swift_bridgeObjectRelease(v152);
                  v137 = v209;
                  v135 = v210;
                  if ((swift_isUniquelyReferenced_nonNull_native(v207) & 1) != 0)
                  {
LABEL_164:
                    v154 = v207;
                    v156 = v207[2];
                    v155 = v207[3];
                    if (v156 >= v155 >> 1)
                      v154 = sub_1000A89A8((_QWORD *)(v155 > 1), v156 + 1, 1, v207);
                    v154[2] = v156 + 1;
                    v207 = v154;
                    v157 = &v154[2 * v156];
                    v157[4] = v137;
                    v157[5] = v135;

                    goto LABEL_233;
                  }
LABEL_241:
                  v207 = sub_1000A89A8(0, v207[2] + 1, 1, v207);
                  goto LABEL_164;
                }
              }
              else
              {
                v140 = *(void **)((v139 & 0xFFFFFFFFFFFFF8) + 0x10);
                v125 = v199;
                if (v140)
                  goto LABEL_160;
              }

              swift_bridgeObjectRelease(v139);
LABEL_233:
              swift_beginAccess(v125, &v209, 0, 0);
              goto LABEL_234;
            }
            v158 = objc_msgSend(v205, "postalAddresses", v136);
            v159 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v158, v204);

            if ((unint64_t)v159 >> 62)
            {
              if (v159 < 0)
                v196 = v159;
              else
                v196 = v159 & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain(v159);
              v160 = _CocoaArrayWrapper.endIndex.getter(v196);
              swift_bridgeObjectRelease(v159);
            }
            else
            {
              v160 = *(_QWORD *)((v159 & 0xFFFFFFFFFFFFF8) + 0x10);
            }
            swift_bridgeObjectRelease(v159);
            if (v160 < 2)
            {
              swift_bridgeObjectRelease(v2);
              swift_release();
              swift_release();
              swift_release();
              swift_release();

              v125 = v199;
              goto LABEL_233;
            }
            v161 = sub_100008B04((uint64_t *)&unk_10149A4F0);
            v162 = swift_allocObject(v161, 72, 7);
            *(_OWORD *)(v162 + 16) = xmmword_100E22F40;
            v163 = objc_msgSend(v205, "postalAddresses");
            v164 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v163, v204);

            if ((unint64_t)v164 >> 62)
            {
              if (v164 < 0)
                v197 = v164;
              else
                v197 = v164 & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain(v164);
              v165 = _CocoaArrayWrapper.endIndex.getter(v197);
              swift_bridgeObjectRelease(v164);
            }
            else
            {
              v165 = *(_QWORD *)((v164 & 0xFFFFFFFFFFFFF8) + 0x10);
            }
            swift_bridgeObjectRelease(v164);
            if (__OFSUB__(v165, 1))
            {
              __break(1u);
              goto LABEL_247;
            }
            *(_QWORD *)(v162 + 56) = &type metadata for Int;
            *(_QWORD *)(v162 + 64) = &protocol witness table for Int;
            *(_QWORD *)(v162 + 32) = v165 - 1;
            v166 = static String.localizedStringWithFormat(_:_:)(v24, v2, v162);
            v165 = v167;
            swift_bridgeObjectRelease(v162);
            swift_bridgeObjectRelease(v2);
            if (v208)
            {
              v168 = swift_bridgeObjectRetain(v202);
              v169 = _CocoaArrayWrapper.endIndex.getter(v168);
              swift_release();
            }
            else
            {
              v169 = *(_QWORD *)(v202 + 16);
            }
            v24 = (uint64_t)v205;
            swift_release();
            if (v169 < 1)
            {
              if (v206)
              {
                v175 = swift_bridgeObjectRetain(v201);
                v176 = _CocoaArrayWrapper.endIndex.getter(v175);
                swift_release();
              }
              else
              {
                v176 = v201[2];
              }
              swift_release();
              if (v176 < 1)
              {
                if ((_DWORD)v1)
                {
                  v184 = swift_bridgeObjectRetain(v200);
                  v185 = _CocoaArrayWrapper.endIndex.getter(v184);
                  swift_release();
                }
                else
                {
                  v185 = *(_QWORD *)(v200 + 16);
                }
                swift_release();
                if (v185 < 1)
                {
                  if ((_DWORD)v6)
                  {
                    v186 = swift_bridgeObjectRetain(countAndFlagsBits);
                    v187 = _CocoaArrayWrapper.endIndex.getter(v186);
                    swift_release();
                  }
                  else
                  {
                    v187 = *(_QWORD *)(countAndFlagsBits + 16);
                  }
                  swift_release();
                  v125 = v199;
                  if (v187 >= 1)
                  {
                    if ((swift_isUniquelyReferenced_nonNull_native(v207) & 1) == 0)
                      v207 = sub_1000A89A8(0, v207[2] + 1, 1, v207);
                    v188 = v207;
                    v190 = v207[2];
                    v189 = v207[3];
                    if (v190 >= v189 >> 1)
                      v188 = sub_1000A89A8((_QWORD *)(v189 > 1), v190 + 1, 1, v207);
                    v188[2] = v190 + 1;
                    v207 = v188;
                    v191 = &v188[2 * v190];
                    v191[4] = v166;
                    v191[5] = v165;
                    goto LABEL_194;
                  }
                  goto LABEL_190;
                }
                swift_release();
                v170.super.isa = (Class)qword_1014D4B80;
                v173 = 0xD000000000000016;
                v171 = 0xD000000000000029;
                v198 = 0x8000000100E495B0;
                v172 = 0x8000000100E49590;
                v174 = 0x6C6F6F686353;
                v177 = 0xE600000000000000;
LABEL_185:
                v178 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v173, (Swift::String_optional)0, v170, *(Swift::String *)&v174, *(Swift::String *)&v171);
                v162 = v178._countAndFlagsBits;
                countAndFlagsBits = (uint64_t)v178._object;
                v116 = v166;
                if ((swift_isUniquelyReferenced_nonNull_native(v207) & 1) != 0)
                {
LABEL_186:
                  v125 = v199;
                  v179 = v207;
                  v181 = v207[2];
                  v180 = v207[3];
                  if (v181 >= v180 >> 1)
                    v179 = sub_1000A89A8((_QWORD *)(v180 > 1), v181 + 1, 1, v207);
                  v179[2] = v181 + 1;
                  v182 = &v179[2 * v181];
                  v182[4] = v162;
                  v182[5] = countAndFlagsBits;
                  if (!v181)
                  {
                    v183 = v179[3];
                    if (v183 <= 3)
                      v179 = sub_1000A89A8((_QWORD *)(v183 > 1), 2, 1, v179);
                    v179[2] = 2;
                    v179[6] = v116;
                    v179[7] = v165;
                    v207 = v179;
                    goto LABEL_194;
                  }
                  v207 = v179;
LABEL_190:
                  swift_bridgeObjectRelease(v165);
LABEL_194:

                  v4 = v203;
                  goto LABEL_233;
                }
LABEL_247:
                v207 = sub_1000A89A8(0, v207[2] + 1, 1, v207);
                goto LABEL_186;
              }
              swift_release();
              swift_release();
              v170.super.isa = (Class)qword_1014D4B80;
              v171 = 0xD000000000000027;
              v198 = 0x8000000100E49600;
              v172 = 0x8000000100E495E0;
              v173 = 0xD000000000000014;
              v174 = 1802661719;
            }
            else
            {
              swift_release();
              swift_release();
              swift_release();
              v170.super.isa = (Class)qword_1014D4B80;
              v171 = 0xD000000000000027;
              v198 = 0x8000000100E49650;
              v172 = 0x8000000100E49630;
              v173 = 0xD000000000000014;
              v174 = 1701670728;
            }
            v177 = 0xE400000000000000;
            goto LABEL_185;
          }
LABEL_211:
          __break(1u);
          goto LABEL_212;
        }
        if (object >= 1)
        {
          v43 = 0;
          v6 = (uint64_t)&type metadata for String;
          do
          {
            if ((v42 & 0xC000000000000001) != 0)
              v44 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v43, v42);
            else
              v44 = *(id *)(v42 + 8 * v43 + 32);
            v5 = v44;
            v45 = objc_msgSend(v44, "label");
            if (!v45)
              goto LABEL_33;
            v46 = v45;
            v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
            v2 = v48;

            v209 = v47;
            v210 = v2;
            v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(CNLabelWork);
            v1 = v50;
            v211 = v49;
            v212 = v50;
            v51 = sub_10006C008();
            v52 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v211, &type metadata for String, &type metadata for String, v51, v51);
            swift_bridgeObjectRelease(v2);
            swift_bridgeObjectRelease(v1);
            if (v52)
            {
LABEL_33:

            }
            else
            {
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v53);
              v1 = *(_QWORD *)(v213[0] + 16);
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v1);
              v54 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v1, v5);
              specialized ContiguousArray._endMutation()(v54);
            }
            ++v43;
          }
          while (object != v43);
          *(_QWORD *)&v55 = swift_bridgeObjectRelease(v42).n128_u64[0];
          v201 = (_QWORD *)v213[0];
          v24 = v204;
          goto LABEL_43;
        }
LABEL_210:
        __break(1u);
        goto LABEL_211;
      }

    }
  }
LABEL_234:
  swift_bridgeObjectRetain(*(_QWORD *)(v4 + 16));
  swift_release();
  return v207;
}

unint64_t sub_1000F8A80(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  unint64_t v8;
  void *v10;
  NSString v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;

  v2 = type metadata accessor for PlaceSummaryImageViewModel.ImageType(0);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!a1)
    return 0xF000000000000007;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return 0xF000000000000007;
  v6 = (unsigned __int8 *)(a1 + 32);
  while (1)
  {
    v7 = *v6++;
    if (v7 == 2)
      break;
    if (!--v5)
      return 0xF000000000000007;
  }
  v10 = (void *)objc_opt_self(UIImage);
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(v10, "_maps_applicationIconWithBundleIdentifier:", v11);

  if (v12)
  {
    *v4 = v12;
    swift_storeEnumTagMultiPayload(v4, v2, 1);
    v13 = type metadata accessor for PlaceSummaryImageViewModel(0);
    v8 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    v20 = 0;
    v14 = v12;
    v15 = sub_100008B04((uint64_t *)&unk_101497210);
    v16 = Published.init(initialValue:)(&v20, v15);
    UUID.init()(v16);
    sub_10003F29C((uint64_t)v4, v8 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_type, type metadata accessor for PlaceSummaryImageViewModel.ImageType);

    v17 = v8 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_cornerRadius;
    *(_QWORD *)v17 = 0;
    *(_BYTE *)(v17 + 8) = 1;
  }
  else
  {
    v18 = objc_msgSend((id)objc_opt_self(GEOFeatureStyleAttributes), "markerStyleAttributes");
    v8 = sub_1000F4E54((uint64_t)v18, 0, 0);

  }
  return v8;
}

id sub_1000F8C64(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  id result;
  void *v8;
  id v9;
  unint64_t v10;
  id v11;

  if (!a2)
    return (id)0xF000000000000007;
  v3 = *(_QWORD *)(a2 + 16);
  if (!v3)
    return (id)0xF000000000000007;
  v5 = 0;
  while (*(_BYTE *)(a2 + v5 + 32) != 2)
  {
    if (v3 == ++v5)
      return (id)0xF000000000000007;
  }
  swift_bridgeObjectRetain(a2);
  if (!objc_msgSend(a1, "isDynamicCurrentLocation"))
  {
    v11 = objc_msgSend(a1, "mapItem", swift_bridgeObjectRelease(a2).n128_f64[0]);
    v9 = objc_msgSend(v11, "_styleAttributes");

    v10 = sub_1000F4E54((uint64_t)v9, 1, 0);
    goto LABEL_12;
  }
  result = objc_msgSend((id)objc_opt_self(AddressBookManager), "sharedManager");
  if (result)
  {
    v8 = result;
    v9 = objc_msgSend(result, "meCard", swift_bridgeObjectRelease(a2).n128_f64[0]);

    v10 = sub_1000F5044(v9, 0, 0);
LABEL_12:
    v6 = v10;

    return (id)v6;
  }
  __break(1u);
  return result;
}

id sub_1000F8D98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id result;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = type metadata accessor for PlaceSummaryImageViewModel.ImageType(0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!a2)
    return (id)0xF000000000000007;
  v7 = *(_QWORD *)(a2 + 16);
  if (!v7)
    return (id)0xF000000000000007;
  v8 = 0;
  while (*(_BYTE *)(a2 + v8 + 32) != 2)
  {
    if (v7 == ++v8)
      return (id)0xF000000000000007;
  }
  v11 = objc_allocWithZone((Class)MapsUIImageSuggestionSpec);
  swift_bridgeObjectRetain(a2);
  result = objc_msgSend(v11, "initWithSuggestion:", a1);
  if (result)
  {
    v12 = result;
    v13 = sub_100008B04(&qword_101495DB0);
    v14 = swift_allocBox(v13);
    v16 = v15;
    swift_bridgeObjectRelease(a2);
    v17 = v16 + *(int *)(v13 + 96);
    v18 = *(int *)(v13 + 112);
    *(_QWORD *)v16 = v12;
    *(_QWORD *)(v16 + 8) = 0;
    *(_QWORD *)(v16 + 24) = 0;
    *(_BYTE *)(v16 + 16) = 0;
    v19 = enum case for Image.TemplateRenderingMode.original(_:);
    v20 = type metadata accessor for Image.TemplateRenderingMode(0);
    v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v17, v19, v20);
    *(_QWORD *)(v16 + v18) = static Color.clear.getter(v21);
    *v6 = v14;
    swift_storeEnumTagMultiPayload(v6, v4, 2);
    v22 = type metadata accessor for PlaceSummaryImageViewModel(0);
    v9 = swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
    v27 = 0;
    v23 = sub_100008B04((uint64_t *)&unk_101497210);
    v24 = Published.init(initialValue:)(&v27, v23);
    UUID.init()(v24);
    sub_10003F29C((uint64_t)v6, v9 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_type, type metadata accessor for PlaceSummaryImageViewModel.ImageType);
    v25 = v9 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_cornerRadius;
    *(_QWORD *)v25 = 0;
    *(_BYTE *)(v25 + 8) = 1;
    return (id)v9;
  }
  __break(1u);
  return result;
}

void sub_1000F8F98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  v24 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PlaceSummaryViewModelLine(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_100E2B728);
  v10 = swift_getKeyPath(&unk_100E2B750);
  static Published.subscript.getter(&v27, a1, KeyPath, v10);
  swift_release();
  swift_release();
  v11 = v27;
  v12 = *(_QWORD *)(v27 + 16);
  if (v12)
  {
    v13 = 0;
    v14 = *(int *)(v5 + 20);
    v25 = v27 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v26 = v14;
    v22 = v6;
    v23 = v27;
    v21 = v12;
    while (1)
    {
      if (v13 >= *(_QWORD *)(v11 + 16))
      {
        __break(1u);
        return;
      }
      sub_1000202AC(v25 + *(_QWORD *)(v6 + 72) * v13, (uint64_t)v8, type metadata accessor for PlaceSummaryViewModelLine);
      v15 = *(_QWORD *)&v8[v26];
      swift_bridgeObjectRetain(v15);
      sub_1000202F0((uint64_t)v8, type metadata accessor for PlaceSummaryViewModelLine);
      v16 = *(_QWORD *)(v15 + 16);
      if (v16)
        break;
      swift_bridgeObjectRelease(v15);
LABEL_10:
      if (++v13 == v12)
        goto LABEL_11;
    }
    v17 = 0;
    v18 = v15 + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
    v19 = *(_QWORD *)(v24 + 72);
    while (1)
    {
      sub_1000202AC(v18, (uint64_t)v4, type metadata accessor for PlaceSummaryViewModelUnit);
      if (swift_getEnumCaseMultiPayload(v4, v2) == 1)
        break;
      ++v17;
      sub_1000202F0((uint64_t)v4, type metadata accessor for PlaceSummaryViewModelUnit);
      v18 += v19;
      if (v16 == v17)
      {
        swift_bridgeObjectRelease(v15);
        v6 = v22;
        v11 = v23;
        v12 = v21;
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v15);
    sub_1000202F0((uint64_t)v4, type metadata accessor for PlaceSummaryViewModelUnit);
  }
  else
  {
LABEL_11:
    swift_bridgeObjectRelease(v11);
  }
}

uint64_t sub_1000F91F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void sub_1000F9234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, void *a13)
{
  unint64_t v13;

  v13 = a12 >> 60;
  if (a12 >> 60 == 6)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a8);
    swift_bridgeObjectRelease(a11);

  }
  else if ((_DWORD)v13 == 2 || !(_DWORD)v13)
  {
    swift_bridgeObjectRelease(a2);
  }
}

void sub_1000F92E8()
{
  AttributeScopes.SwiftUIAttributes.foregroundColor.getter();
  __break(1u);
}

void sub_1000F9304(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *a2;
  v3 = sub_10006C5A8();
  AttributeDynamicLookup.subscript.getter(v2, v3);
  __break(1u);
}

uint64_t sub_1000F9328()
{
  return 8;
}

uint64_t sub_1000F9334(_QWORD *a1)
{
  return swift_release(*a1);
}

double sub_1000F933C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  double result;

  v2 = *a1;
  *a2 = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_1000F9348(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1000F149C(a1, a2, a3, &qword_10149A548) & 1;
}

uint64_t sub_1000F9368(uint64_t a1, uint64_t a2)
{
  return sub_1000F9508(a1, a2, &qword_10149A548);
}

_QWORD *sub_1000F9374(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

void sub_1000F9380(id a1)
{
  if ((unint64_t)a1 >= 3)

}

void sub_1000F9390()
{
  AttributeScopes.SwiftUIAttributes.strikethroughStyle.getter();
  __break(1u);
}

unint64_t sub_1000F93AC()
{
  unint64_t result;

  result = qword_10149A518;
  if (!qword_10149A518)
  {
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute, &type metadata for AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute);
    atomic_store(result, (unint64_t *)&qword_10149A518);
  }
  return result;
}

void sub_1000F93F0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *a2;
  v3 = sub_1000F93AC();
  AttributeDynamicLookup.subscript.getter(v2, v3);
  __break(1u);
}

uint64_t sub_1000F9414()
{
  return 8;
}

uint64_t sub_1000F9420(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1000F149C(a1, a2, a3, &qword_10149A530) & 1;
}

uint64_t sub_1000F9440(uint64_t a1, uint64_t a2)
{
  return sub_1000F9508(a1, a2, &qword_10149A530);
}

void sub_1000F944C()
{
  AttributeScopes.SwiftUIAttributes.font.getter();
  __break(1u);
}

unint64_t sub_1000F9468()
{
  unint64_t result;

  result = qword_10149A520;
  if (!qword_10149A520)
  {
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.FontAttribute, &type metadata for AttributeScopes.SwiftUIAttributes.FontAttribute);
    atomic_store(result, (unint64_t *)&qword_10149A520);
  }
  return result;
}

void sub_1000F94AC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *a2;
  v3 = sub_1000F9468();
  AttributeDynamicLookup.subscript.getter(v2, v3);
  __break(1u);
}

uint64_t sub_1000F94D0()
{
  return 8;
}

uint64_t sub_1000F94DC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1000F149C(a1, a2, a3, &qword_10149A528) & 1;
}

uint64_t sub_1000F94FC(uint64_t a1, uint64_t a2)
{
  return sub_1000F9508(a1, a2, &qword_10149A528);
}

uint64_t sub_1000F9508(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_100008B04(a3);
  return dispatch thunk of Hashable.hashValue.getter(v3, &protocol witness table for AnyKeyPath);
}

uint64_t sub_1000F9548(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(id *)(a1 + 96);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

_QWORD *sub_1000F95BC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = a1[3];
  v3 = a1[5];
  v4 = a1[7];
  v5 = a1[10];
  v6 = (void *)a1[12];
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);

  return a1;
}

uint64_t sub_1000F962C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000F9670()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000E930(v0, qword_1014D4938);
  sub_10000E918(v0, (uint64_t)qword_1014D4938);
  return Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xEE007370614D2E65, 0xD000000000000014, 0x8000000100E2B940);
}

uint64_t sub_1000F96F0()
{
  uint64_t result;

  result = GEOConfigGetInteger(MapsConfig_MapsHomeMaxPins, off_1014B5478);
  qword_1014D4950 = result;
  return result;
}

void sub_1000F971C()
{
  qword_1014D4958 = GEOConfigGetDouble(MapsConfig_MapsHomeSuggestionsMaxAge, off_1014B54D8);
}

uint64_t sub_1000F9748()
{
  uint64_t result;

  result = GEOConfigGetInteger(MapsConfig_MapsHomeSuggestionsMinVisitsHWS, off_1014B54E8);
  qword_1014D4960 = result;
  return result;
}

uint64_t sub_1000F9774()
{
  uint64_t result;

  result = GEOConfigGetInteger(MapsConfig_MapsHomeSuggestionsMinVisitsAll, off_1014B54F8);
  qword_1014D4968 = result;
  return result;
}

uint64_t sub_1000F97A0()
{
  uint64_t result;

  result = GEOConfigGetUInteger(MapsConfig_MapsHomeSuggestionsMaxResults, off_1014B5508);
  qword_1014D4970 = result;
  return result;
}

void sub_1000F97CC()
{
  qword_1014D4978 = GEOConfigGetDouble(MapsConfig_MapsHomeETAValidityPeriod, off_1014B5488);
}

void sub_1000F97F8()
{
  qword_1014D4980 = GEOConfigGetDouble(MapsConfig_MapsHomeItemIsNearbyDistance, off_1014B5498);
}

void sub_1000F9824()
{
  qword_1014D4988 = GEOConfigGetDouble(MapsConfig_MapsHomeItemIsNearbyETA, off_1014B5588);
}

void sub_1000F9850()
{
  qword_1014D4990 = GEOConfigGetDouble(MapsConfig_MapsHomeETAUpdateTimeout, off_1014B5528);
}

uint64_t sub_1000F987C()
{
  uint64_t result;

  result = GEOConfigGetBOOL(MapsConfig_MapsHomeMeCardWritebackDefault, off_1014B5538);
  byte_1014D4998 = result;
  return result;
}

void sub_1000F98A8()
{
  qword_1014D49A0 = GEOConfigGetDouble(MapsConfig_MapsHomeItemFarAwayDistance, off_1014B5578);
}

void sub_1000F98D4()
{
  qword_1014D49A8 = GEOConfigGetDouble(MapsConfig_MapsHomeMaxDistanceForETAs, off_1014B56C8);
}

void sub_1000F9900()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;

  v1 = OBJC_IVAR____TtC4Maps20MapsFavoritesManager____lazy_storage___msgRoutine;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC4Maps20MapsFavoritesManager____lazy_storage___msgRoutine);
  if (v2)
    goto LABEL_5;
  v3 = sub_100B3A5D4();
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend(v3, "oneRoutine");

    if (v5)
    {
      v6 = *(void **)(v0 + v1);
      *(_QWORD *)(v0 + v1) = v5;
      v5;

      v2 = 0;
LABEL_5:
      v7 = v2;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

id sub_1000F999C()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MapsFavoritesManager()), "init");
  qword_1014D49B0 = (uint64_t)result;
  return result;
}

uint64_t sub_1000F9AD0(uint64_t a1)
{
  return sub_1000F9C50(a1, &OBJC_IVAR____TtC4Maps20MapsFavoritesManager__shortcuts);
}

void sub_1000F9AF4(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  id v9;

  v7 = type metadata accessor for MapsFavoriteItem();
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a3, v7);
  v9 = a1;
  a4(v8);

}

uint64_t sub_1000F9B5C(uint64_t a1)
{
  return sub_1000F9C50(a1, &OBJC_IVAR____TtC4Maps20MapsFavoritesManager__sortedShortcuts);
}

Class sub_1000F9B74(char *a1, uint64_t a2, _QWORD *a3)
{
  os_unfair_lock_s **v4;
  os_unfair_lock_s *v5;
  uint64_t *v6;
  char *v7;
  uint64_t v8;
  Class isa;
  uint64_t v11;
  char v12[24];

  v4 = (os_unfair_lock_s **)&a1[*a3];
  swift_beginAccess(v4, v12, 0, 0);
  v5 = *v4;
  v6 = (uint64_t *)&(*v4)[4];
  v7 = a1;
  swift_retain();
  os_unfair_lock_lock(v5 + 6);
  sub_10020E740(v6, &v11);
  os_unfair_lock_unlock(v5 + 6);
  v8 = v11;

  swift_release();
  type metadata accessor for MapsFavoriteItem();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v8);
  return isa;
}

uint64_t sub_1000F9C44(uint64_t a1)
{
  return sub_1000F9C50(a1, &OBJC_IVAR____TtC4Maps20MapsFavoritesManager__suggestions);
}

uint64_t sub_1000F9C50(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  os_unfair_lock_s **v4;
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;
  _BYTE v8[24];

  v4 = (os_unfair_lock_s **)(v2 + *a2);
  swift_beginAccess(v4, v8, 33, 0);
  v5 = *v4;
  v6 = *v4 + 6;
  os_unfair_lock_lock(v6);
  swift_bridgeObjectRelease(*(_QWORD *)&v5[4]._os_unfair_lock_opaque);
  *(_QWORD *)&v5[4]._os_unfair_lock_opaque = a1;
  swift_bridgeObjectRetain(a1);
  os_unfair_lock_unlock(v6);
  swift_bridgeObjectRelease(a1);
  return swift_endAccess(v8);
}

uint64_t sub_1000F9E20()
{
  return sub_1000F9E98(&OBJC_IVAR____TtC4Maps20MapsFavoritesManager__sortedShortcuts);
}

Class sub_1000F9E38(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4;
  uint64_t v5;
  Class isa;

  v4 = a1;
  v5 = a3();

  type metadata accessor for MapsFavoriteItem();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v5);
  return isa;
}

uint64_t sub_1000F9E8C()
{
  return sub_1000F9E98(&OBJC_IVAR____TtC4Maps20MapsFavoritesManager__shortcuts);
}

uint64_t sub_1000F9E98(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  os_unfair_lock_s **v4;
  os_unfair_lock_s *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD v13[4];
  char v14[24];

  v3 = v1;
  v4 = (os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC4Maps20MapsFavoritesManager__setupButtons);
  swift_beginAccess(v4, v14, 0, 0);
  v5 = *v4;
  v6 = (uint64_t *)&(*v4)[4];
  swift_retain();
  os_unfair_lock_lock(v5 + 6);
  sub_10020E740(v6, v13);
  os_unfair_lock_unlock(v5 + 6);
  v7 = v13[0];
  swift_release();
  v8 = (uint64_t *)(v3 + *a1);
  swift_beginAccess(v8, v13, 0, 0);
  v9 = *v8;
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v9 + 24));
  sub_10020E740((uint64_t *)(v9 + 16), &v12);
  os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 24));
  v10 = v12;
  swift_release();
  v12 = v7;
  sub_1001200FC(v10);
  return v12;
}

uint64_t sub_1000F9FB0()
{
  uint64_t v0;
  unint64_t *v1;
  unint64_t i;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  _BOOL4 v13;
  uint64_t v14;
  Swift::Int v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _BYTE v33[24];

  v1 = (unint64_t *)(v0 + OBJC_IVAR____TtC4Maps20MapsFavoritesManager__sortedShortcuts);
  swift_beginAccess(v0 + OBJC_IVAR____TtC4Maps20MapsFavoritesManager__sortedShortcuts, v33, 0, 0);
  i = *v1;
  v3 = (uint64_t *)(*v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(i + 24));
  v4 = 0;
  sub_10020E740(v3, &v32);
  os_unfair_lock_unlock((os_unfair_lock_t)(i + 24));
  v5 = (uint64_t)v32;
  v6 = swift_release();
  v32 = _swiftEmptyArrayStorage;
  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v4 = v5;
    else
      v4 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v7 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(v5);
    if (v7)
      goto LABEL_3;
LABEL_17:
    swift_bridgeObjectRelease(v5);
    v5 = (uint64_t)_swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v7)
    goto LABEL_17;
LABEL_3:
  if (v7 < 1)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  for (i = 0; i != v7; ++i)
  {
    if ((v5 & 0xC000000000000001) != 0)
      v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v5);
    else
      v10 = *(id *)(v5 + 8 * i + 32);
    v11 = v10;
    v12 = objc_msgSend(v10, "type");
    if (v12 == (id)6)
    {

    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v12);
      v8 = v32[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v8);
      v9 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v11);
      specialized ContiguousArray._endMutation()(v9);
    }
  }
  swift_bridgeObjectRelease(v5);
  v5 = (uint64_t)v32;
LABEL_18:
  v13 = v5 < 0 || (v5 & 0x4000000000000000) != 0;
  if (!v13)
  {
    if (*(uint64_t *)(v5 + 16) >= 20)
      v14 = 20;
    else
      v14 = *(_QWORD *)(v5 + 16);
    goto LABEL_25;
  }
  v27 = swift_bridgeObjectRetain(v5);
  v4 = _CocoaArrayWrapper.endIndex.getter(v27);
  swift_release();
  v28 = swift_bridgeObjectRetain(v5);
  v7 = _CocoaArrayWrapper.endIndex.getter(v28);
  v6 = swift_release();
  if (v7 < 0)
  {
    __break(1u);
    goto LABEL_43;
  }
  if (v4 >= 20)
    v29 = 20;
  else
    v29 = v4;
  if (v4 >= 0)
    v14 = v29;
  else
    v14 = 20;
  v30 = swift_bridgeObjectRetain(v5);
  v31 = _CocoaArrayWrapper.endIndex.getter(v30);
  result = swift_release();
  if (v31 >= v14)
  {
LABEL_25:
    if ((v5 & 0xC000000000000001) != 0 && v14)
    {
      type metadata accessor for MapsFavoriteItem();
      v15 = 0;
      do
      {
        v16 = v15 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v15);
        v15 = v16;
      }
      while (v14 != v16);
    }
    if (v13)
    {
      swift_bridgeObjectRetain(v5);
      v17 = _CocoaArrayWrapper.subscript.getter(0, v14, v5);
      v7 = v18;
      v4 = v19;
      i = v20;
      swift_release_n(v5, 2);
      v5 = v17;
      if ((i & 1) != 0)
      {
LABEL_34:
        v22 = type metadata accessor for __ContiguousArrayStorageBase(0);
        v23 = swift_unknownObjectRetain_n(v5, 2);
        v24 = (_QWORD *)swift_dynamicCastClass(v23, v22);
        if (!v24)
        {
          swift_unknownObjectRelease(v5);
          v24 = _swiftEmptyArrayStorage;
        }
        v25 = v24[2];
        v6 = swift_release();
        if (!__OFSUB__(i >> 1, v4))
        {
          v6 = v5;
          if (v25 == (i >> 1) - v4)
          {
            v21 = (_QWORD *)swift_dynamicCastClass(v5, v22);
            if (!v21)
            {
              swift_unknownObjectRelease(v5);
              v21 = _swiftEmptyArrayStorage;
            }
            goto LABEL_40;
          }
          goto LABEL_45;
        }
LABEL_44:
        __break(1u);
LABEL_45:
        swift_unknownObjectRelease(v6);
      }
    }
    else
    {
      v4 = 0;
      v7 = v5 + 32;
      i = (2 * v14) | 1;
      if ((i & 1) != 0)
        goto LABEL_34;
    }
    v21 = sub_1000D8BDC(v5, v7, v4, i);
LABEL_40:
    swift_unknownObjectRelease(v5);
    return (uint64_t)v21;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000FA38C()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  char v18[24];

  v1 = v0;
  v2 = sub_100008B04(&qword_101494070);
  __chkstk_darwin(v2);
  v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_101490DC8 != -1)
    swift_once(&qword_101490DC8, sub_1000F9670);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_10000E918(v5, (uint64_t)qword_1014D4938);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "ViewMode changed", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  v10 = &v1[OBJC_IVAR____TtC4Maps20MapsFavoritesManager__hasInitialData];
  swift_beginAccess(&v1[OBJC_IVAR____TtC4Maps20MapsFavoritesManager__hasInitialData], v18, 0, 0);
  v11 = *(_QWORD *)v10;
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v11 + 20));
  v12 = *(unsigned __int8 *)(v11 + 16);
  os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 20));
  result = swift_release();
  if (v12 == 1)
  {
    v14 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v4, 1, 1, v14);
    v15 = (_QWORD *)swift_allocObject(&unk_1011A28E0, 40, 7);
    v15[2] = 0;
    v15[3] = 0;
    v15[4] = v1;
    v16 = v1;
    sub_1001B0C08((uint64_t)v4, (uint64_t)&unk_10149AB70, (uint64_t)v15);
    return swift_release();
  }
  return result;
}

id sub_1000FA558()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  objc_class *v44;
  id v45;
  id v46;
  void *v47;
  id v48;
  __CFNotificationCenter *v49;
  uint64_t v50;
  uint64_t v51;
  __CFString *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  objc_super v67;
  _QWORD *v68;

  v1 = type metadata accessor for OS_dispatch_source.TimerFlags(0);
  v2 = *(_QWORD *)(v1 - 8);
  v65 = v1;
  v66 = v2;
  v3 = __chkstk_darwin(v1);
  v64 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0, v3);
  v59 = *(_QWORD *)(v5 - 8);
  v60 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = OBJC_IVAR____TtC4Maps20MapsFavoritesManager_etaTimer;
  v61 = sub_10000E4BC(0, &qword_101492C10, OS_dispatch_source_ptr);
  sub_10000E4BC(0, (unint64_t *)&qword_101492FA0, OS_dispatch_queue_ptr);
  v14 = v0;
  static DispatchQoS.unspecified.getter(v14);
  v68 = _swiftEmptyArrayStorage;
  v15 = sub_10000BC84((unint64_t *)&unk_10149AB40, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v16 = sub_100008B04((uint64_t *)&unk_101499CA0);
  v17 = sub_1000D00AC((unint64_t *)&unk_10149AB50, (uint64_t *)&unk_101499CA0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v68, v16, v17, v8, v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v59 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v60);
  v18 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000022, 0x8000000100E49D30, v13, v10, v7, 0);
  v68 = _swiftEmptyArrayStorage;
  v19 = sub_10000BC84(&qword_101492C18, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags, (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
  v20 = sub_100008B04(&qword_101492C20);
  v21 = sub_1000D00AC(&qword_101492C28, &qword_101492C20);
  v23 = v64;
  v22 = v65;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v68, v20, v21, v65, v19);
  v24 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v23, v18);

  (*(void (**)(char *, uint64_t))(v66 + 8))(v23, v22);
  *(_QWORD *)(v62 + v63) = v24;
  v14[OBJC_IVAR____TtC4Maps20MapsFavoritesManager_isETATimerRunning] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC4Maps20MapsFavoritesManager____lazy_storage___msgRoutine] = 0;
  v25 = OBJC_IVAR____TtC4Maps20MapsFavoritesManager_observers;
  *(_QWORD *)&v14[v25] = objc_msgSend(objc_allocWithZone((Class)GEOObserverHashTable), "initWithProtocol:queue:", &OBJC_PROTOCOL___HomeDataProvidingObserver, 0);
  v26 = OBJC_IVAR____TtC4Maps20MapsFavoritesManager_storeSubscriptionTypes;
  v27 = sub_10000B4B8();
  v28 = swift_allocObject(v27, ((*(unsigned int *)(v27 + 48) + 7) & 0x1FFFFFFF8) + 8, *(unsigned __int16 *)(v27 + 52) | 7);
  *(_OWORD *)(v28 + 16) = xmmword_100E22F40;
  *(_QWORD *)(v28 + 32) = type metadata accessor for FavoriteItem(0, v29);
  *(_QWORD *)&v14[v26] = v28;
  v30 = OBJC_IVAR____TtC4Maps20MapsFavoritesManager__shortcuts;
  v31 = sub_100008B04(&qword_10149AB60);
  v32 = swift_allocObject(v31, 28, 7);
  *(_DWORD *)(v32 + 24) = 0;
  *(_QWORD *)(v32 + 16) = _swiftEmptyArrayStorage;
  *(_QWORD *)&v14[v30] = v32;
  v33 = OBJC_IVAR____TtC4Maps20MapsFavoritesManager__sortedShortcuts;
  v34 = swift_allocObject(v31, 28, 7);
  *(_DWORD *)(v34 + 24) = 0;
  *(_QWORD *)(v34 + 16) = _swiftEmptyArrayStorage;
  *(_QWORD *)&v14[v33] = v34;
  v35 = OBJC_IVAR____TtC4Maps20MapsFavoritesManager__setupButtons;
  v36 = swift_allocObject(v31, 28, 7);
  *(_DWORD *)(v36 + 24) = 0;
  *(_QWORD *)(v36 + 16) = _swiftEmptyArrayStorage;
  *(_QWORD *)&v14[v35] = v36;
  v37 = OBJC_IVAR____TtC4Maps20MapsFavoritesManager__suggestions;
  v38 = swift_allocObject(v31, 28, 7);
  *(_DWORD *)(v38 + 24) = 0;
  *(_QWORD *)(v38 + 16) = _swiftEmptyArrayStorage;
  *(_QWORD *)&v14[v37] = v38;
  v39 = OBJC_IVAR____TtC4Maps20MapsFavoritesManager__hasInitialData;
  v40 = sub_100008B04(&qword_10149AB68);
  v41 = swift_allocObject(v40, 24, 7);
  *(_DWORD *)(v41 + 20) = 0;
  *(_BYTE *)(v41 + 16) = 0;
  *(_QWORD *)&v14[v39] = v41;
  v42 = OBJC_IVAR____TtC4Maps20MapsFavoritesManager__needsSuggestions;
  v43 = swift_allocObject(v40, 24, 7);
  *(_DWORD *)(v43 + 20) = 0;
  *(_BYTE *)(v43 + 16) = 1;
  *(_QWORD *)&v14[v42] = v43;
  v14[OBJC_IVAR____TtC4Maps20MapsFavoritesManager_active] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC4Maps20MapsFavoritesManager_mapViewMode] = 0;

  v44 = (objc_class *)type metadata accessor for MapsFavoritesManager();
  v67.receiver = v14;
  v67.super_class = v44;
  v45 = objc_msgSendSuper2(&v67, "init");
  type metadata accessor for MapsSyncStore(0);
  v46 = v45;
  v47 = (void *)static MapsSyncStore.sharedStore.getter();
  v48 = v46;
  dispatch thunk of MapsSyncStore.subscribe(_:)();

  v49 = CFNotificationCenterGetDarwinNotifyCenter();
  static String._unconditionallyBridgeFromObjectiveC(_:)(RTLocationsOfInterestDidChangeNotification);
  v51 = v50;
  v52 = (__CFString *)String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v51);
  CFNotificationCenterAddObserver(v49, v48, (CFNotificationCallback)sub_1000FAAD4, v52, 0, CFNotificationSuspensionBehaviorDrop);

  v53 = sub_1000FAAFC();
  v54 = GeoServicesConfig_TransportTypePreference;
  v55 = *((_QWORD *)&GeoServicesConfig_TransportTypePreference + 1);
  v56 = (void *)static OS_dispatch_queue.main.getter(v53);
  _GEOConfigAddDelegateListenerForKey(v54, v55, v56, v48);

  sub_10010095C();
  return v48;
}

uint64_t sub_1000FAAD4(uint64_t a1, uint64_t a2)
{
  return sub_100105214(a2);
}

uint64_t sub_1000FAAFC()
{
  return sub_100107AE8((uint64_t)&unk_1011A26D8, (uint64_t)&unk_1011A2700, (uint64_t)&unk_10149AAA8, (uint64_t)&unk_10149AAB0);
}

uint64_t sub_1000FAB20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v4 + 24) = a4;
  v5 = (_QWORD *)swift_task_alloc(dword_10149A7CC);
  *(_QWORD *)(v4 + 32) = v5;
  *v5 = v4;
  v5[1] = sub_1000FAB6C;
  return sub_1000FCB8C();
}

uint64_t sub_1000FAB6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  *(_QWORD *)(*(_QWORD *)v1 + 40) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000FACB4;
  else
    v3 = sub_1000FABD0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000FABD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  sub_1000FE5EC();
  if (qword_101490DC8 != -1)
    swift_once(&qword_101490DC8, sub_1000F9670);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10000E918(v1, (uint64_t)qword_1014D4938);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Finished populating initial data", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FACB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (qword_101490DC8 != -1)
    swift_once(&qword_101490DC8, sub_1000F9670);
  v1 = *(_QWORD *)(v0 + 40);
  v2 = type metadata accessor for Logger(0);
  sub_10000E918(v2, (uint64_t)qword_1014D4938);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 40);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error loading shortcuts %@", v8, 0xCu);
    v11 = sub_100008B04((uint64_t *)&unk_101494470);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 40));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FAE80(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2[38] = a1;
  v2[39] = v1;
  v3 = type metadata accessor for Date(0);
  v2[40] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[41] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[42] = swift_task_alloc(v5);
  v2[43] = swift_task_alloc(v5);
  return swift_task_switch(sub_1000FAEF0, 0, 0);
}

void sub_1000FAEF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  char v5;
  _QWORD *v6;
  id v7;
  id v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  _QWORD *v16;
  uint64_t v17;
  os_unfair_lock_s **v18;
  os_unfair_lock_s *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  os_unfair_lock_s *v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  id v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56[2];

  v1 = *(_QWORD *)(v0 + 312);
  v2 = OBJC_IVAR____TtC4Maps20MapsFavoritesManager__needsSuggestions;
  *(_QWORD *)(v0 + 352) = OBJC_IVAR____TtC4Maps20MapsFavoritesManager__needsSuggestions;
  v3 = (uint64_t *)(v1 + v2);
  swift_beginAccess(v1 + v2, v0 + 16, 0, 0);
  v4 = *v3;
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 20));
  v5 = *(_BYTE *)(v4 + 16);
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 20));
  swift_release();
  if ((v5 & 1) != 0)
  {
    v6 = (_QWORD *)(v0 + 248);
    *(_QWORD *)(v0 + 248) = _swiftEmptyArrayStorage;
    v7 = sub_1000FEE68();
    if (v7)
    {
      v8 = v7;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v8);
      v10 = *(_QWORD *)((*v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v9 = *(_QWORD *)((*v6 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v10 >= v9 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
      v11 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v8);
      specialized Array._endMutation()(v11);

    }
    Date.init()(v7);
    if (qword_101490DD8 != -1)
      swift_once(&qword_101490DD8, sub_1000F971C);
    v12 = *(_QWORD *)(v0 + 336);
    v13 = *(_QWORD *)(v0 + 320);
    v14 = *(_QWORD *)(v0 + 328);
    Date.addingTimeInterval(_:)(-*(double *)&qword_1014D4958);
    v15 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    *(_QWORD *)(v0 + 360) = v15;
    v15(v12, v13);
    v16 = (_QWORD *)swift_task_alloc(dword_10149A7D4);
    *(_QWORD *)(v0 + 368) = v16;
    *v16 = v0;
    v16[1] = sub_1000FB510;
    v17 = *(_QWORD *)(v0 + 312);
    v16[9] = 0;
    v16[10] = v17;
    v16[7] = 0;
    v16[8] = sub_1000FC050;
    v16[6] = sub_1000FBFEC;
    swift_task_switch(sub_1000FF164, 0, 0);
    return;
  }
  v18 = (os_unfair_lock_s **)(*(_QWORD *)(v0 + 312) + OBJC_IVAR____TtC4Maps20MapsFavoritesManager__suggestions);
  if (*(_QWORD *)(v0 + 304))
  {
    swift_beginAccess(*(_QWORD *)(v0 + 312) + OBJC_IVAR____TtC4Maps20MapsFavoritesManager__suggestions, v0 + 64, 0, 0);
    v19 = *v18;
    v20 = (uint64_t *)&(*v18)[4];
    swift_retain();
    os_unfair_lock_lock(v19 + 6);
    sub_10020E740(v20, v56);
    os_unfair_lock_unlock(v19 + 6);
    v21 = v56[0];
    swift_release();
    v56[0] = (uint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v21 >> 62)
    {
      if (v21 < 0)
        v33 = v21;
      else
        v33 = v21 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v21);
      v22 = _CocoaArrayWrapper.endIndex.getter(v33);
      swift_bridgeObjectRelease(v21);
      if (v22)
        goto LABEL_12;
    }
    else
    {
      v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v22)
      {
LABEL_12:
        if (v22 < 1)
        {
          __break(1u);
          return;
        }
        for (i = 0; i != v22; ++i)
        {
          if ((v21 & 0xC000000000000001) != 0)
            v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v21);
          else
            v26 = *(id *)(v21 + 8 * i + 32);
          v27 = v26;
          v28 = *(id *)(v0 + 304);
          v29 = objc_msgSend(v26, "type");
          if (v29 == v28)
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v29);
            v24 = *(_QWORD *)(v56[0] + 16);
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v24);
            v25 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v27);
            specialized ContiguousArray._endMutation()(v25);
          }
          else
          {

          }
        }
        swift_bridgeObjectRelease(v21);
        v32 = (_QWORD *)v56[0];
        goto LABEL_28;
      }
    }
    swift_bridgeObjectRelease(v21);
    v32 = _swiftEmptyArrayStorage;
  }
  else
  {
    swift_beginAccess(*(_QWORD *)(v0 + 312) + OBJC_IVAR____TtC4Maps20MapsFavoritesManager__suggestions, v0 + 184, 0, 0);
    v30 = *v18;
    v31 = (uint64_t *)&(*v18)[4];
    swift_retain();
    os_unfair_lock_lock(v30 + 6);
    sub_10020E740(v31, v56);
    os_unfair_lock_unlock(v30 + 6);
    v32 = (_QWORD *)v56[0];
    swift_release();
  }
LABEL_28:
  v34 = *(id *)(v0 + 312);
  v35 = swift_bridgeObjectRetain(v32);
  sub_100104DDC(v35, (uint64_t)v34);
  v37 = v36;

  swift_bridgeObjectRelease_n(v32, 2);
  *(_QWORD *)(v0 + 288) = v37;
  if (qword_101490DC8 != -1)
    swift_once(&qword_101490DC8, sub_1000F9670);
  v38 = (uint64_t *)(v0 + 288);
  v39 = type metadata accessor for Logger(0);
  v40 = sub_10000E918(v39, (uint64_t)qword_1014D4938);
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v41, v42))
  {
    v43 = swift_slowAlloc(22, -1);
    v44 = swift_slowAlloc(32, -1);
    v56[0] = v44;
    *(_DWORD *)v43 = 134218242;
    swift_beginAccess(v0 + 288, v0 + 112, 0, 0);
    v45 = *v38;
    if ((unint64_t)*v38 >> 62)
    {
      if (v45 < 0)
        v55 = *v38;
      else
        v55 = v45 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*v38);
      v46 = _CocoaArrayWrapper.endIndex.getter(v55);
      swift_bridgeObjectRelease(v45);
    }
    else
    {
      v46 = *(_QWORD *)((v45 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    *(_QWORD *)(v0 + 272) = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v43 + 4, v43 + 12);
    *(_WORD *)(v43 + 12) = 2080;
    v47 = type metadata accessor for MapsFavoriteItem();
    v48 = swift_bridgeObjectRetain(v45);
    v49 = Array.description.getter(v48, v47);
    v51 = v50;
    swift_bridgeObjectRelease(v45);
    *(_QWORD *)(v0 + 256) = sub_1000C28FC(v49, v51, v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264, v43 + 14, v43 + 22);
    swift_bridgeObjectRelease(v51);
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Returning %ld suggested LOIs: %s", (uint8_t *)v43, 0x16u);
    swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v43, -1, -1);
  }

  v53 = *(_QWORD *)(v0 + 336);
  v52 = *(_QWORD *)(v0 + 344);
  swift_beginAccess(v0 + 288, v0 + 88, 0, 0);
  v54 = *(_QWORD *)(v0 + 288);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  (*(void (**)(uint64_t))(v0 + 8))(v54);
}

uint64_t sub_1000FB510(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 368);
  *(_QWORD *)(v3 + 376) = a1;
  *(_QWORD *)(v3 + 384) = v1;
  swift_task_dealloc(v4);
  (*(void (**)(_QWORD, _QWORD))(v3 + 360))(*(_QWORD *)(v3 + 344), *(_QWORD *)(v3 + 320));
  if (v1)
    v5 = sub_1000FBFA4;
  else
    v5 = sub_1000FB58C;
  return swift_task_switch(v5, 0, 0);
}

void sub_1000FB58C()
{
  _QWORD *v0;
  _QWORD *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  objc_class *v13;
  _BYTE *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  objc_super *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  void **p_vtable;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  os_unfair_lock_s **v49;
  os_unfair_lock_s *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t i;
  uint64_t v55;
  uint64_t v56;
  id v57;
  void *v58;
  id v59;
  id v60;
  os_unfair_lock_s *v61;
  uint64_t *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t *v94;
  uint64_t v95;
  _QWORD *v96;
  objc_super *v97;
  _QWORD *v98;
  uint64_t v99[2];

  v6 = v0[47];
  v99[0] = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v6 >> 62)
  {
    if (v6 < 0)
      v64 = v6;
    else
      v64 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v7 = _CocoaArrayWrapper.endIndex.getter(v64);
  }
  else
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v6);
  }
  v98 = v0;
  if (v7)
  {
    if (v7 < 1)
    {
      __break(1u);
      goto LABEL_48;
    }
    v8 = 0;
    v9 = v6 & 0xC000000000000001;
    v95 = v0[47] + 32;
    v97 = (objc_super *)(v0 + 29);
    do
    {
      if (v9)
        v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v0[47]);
      else
        v11 = *(id *)(v95 + 8 * v8);
      v12 = v11;
      v13 = (objc_class *)type metadata accessor for MapsFavoriteItem();
      v14 = objc_allocWithZone(v13);
      v15 = &v14[OBJC_IVAR____TtC4Maps16MapsFavoriteItem_cachedSubtitle];
      *v15 = 0;
      v15[1] = 0;
      v14[OBJC_IVAR____TtC4Maps16MapsFavoriteItem_isUpdatingETA] = 0;
      v16 = &v14[OBJC_IVAR____TtC4Maps16MapsFavoriteItem_analyticsGrouping];
      *v16 = 0x6966654472657355;
      v16[1] = 0xEB0000000064656ELL;
      *(_QWORD *)&v14[OBJC_IVAR____TtC4Maps16MapsFavoriteItem_number] = 0;
      v14[OBJC_IVAR____TtC4Maps16MapsFavoriteItem_isShortcutForSetup] = 0;
      v14[OBJC_IVAR____TtC4Maps16MapsFavoriteItem_isPersisted] = 0;
      v14[OBJC_IVAR____TtC4Maps16MapsFavoriteItem_isAlreadyThere] = 0;
      v17 = OBJC_IVAR____TtC4Maps16MapsFavoriteItem_isMeCardWritebackEnabled;
      v18 = qword_101490E18;
      v19 = v14;
      if (v18 != -1)
        swift_once(&qword_101490E18, sub_1000F987C);
      v14[v17] = byte_1014D4998;
      *(_QWORD *)&v19[OBJC_IVAR____TtC4Maps16MapsFavoriteItem_transportType] = 0;
      *(_QWORD *)&v19[OBJC_IVAR____TtC4Maps16MapsFavoriteItem_favoriteItem] = v12;
      v20 = v12;

      v0 = v98;
      v98[29] = v19;
      v98[30] = v13;
      v21 = -[objc_super init](v97, "init");

      if (v21)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v22);
        v24 = *(_QWORD *)((v99[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
        v23 = *(_QWORD *)((v99[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v24 >= v23 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
        v10 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v21);
        specialized Array._endMutation()(v10);
      }
      ++v8;
    }
    while (v7 != v8);
    v25 = (_QWORD *)v99[0];
  }
  else
  {
    v25 = _swiftEmptyArrayStorage;
  }
  v96 = v0 + 20;
  v26 = v0 + 26;
  v27 = v0 + 33;
  v93 = v0 + 35;
  v4 = v0 + 31;
  swift_bridgeObjectRelease_n(v0[47], 2);
  sub_1001200FC((uint64_t)v25);
  p_vtable = DirectionsElevationNormalisedPoint.vtable;
  if (qword_101490DC8 != -1)
    swift_once(&qword_101490DC8, sub_1000F9670);
  v94 = v0 + 36;
  v92 = type metadata accessor for Logger(0);
  v29 = sub_10000E918(v92, (uint64_t)qword_1014D4938);
  v6 = Logger.logObject.getter(v29);
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled((os_log_t)v6, v2))
  {
    v90 = v0 + 26;
    v91 = v0 + 33;
    v1 = v0 + 37;
    v5 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(32, -1);
    v99[0] = v7;
    *(_DWORD *)v5 = 134218242;
    swift_beginAccess(v0 + 31, v0 + 5, 0, 0);
    v3 = *v4;
    if (!((unint64_t)*v4 >> 62))
    {
      v30 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_23:
      v0 = v98;
      v98[37] = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1, v98 + 38, v5 + 4, v5 + 12);
      *(_WORD *)(v5 + 12) = 2080;
      v31 = v98[31];
      v32 = type metadata accessor for MapsFavoriteItem();
      v33 = swift_bridgeObjectRetain(v31);
      v34 = Array.description.getter(v33, v32);
      v36 = v35;
      swift_bridgeObjectRelease(v31);
      v98[35] = sub_1000C28FC(v34, v36, v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v93, v94, v5 + 14, v5 + 22);
      swift_bridgeObjectRelease(v36);
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v6, v2, "Fetched %ld suggested items: %s", (uint8_t *)v5, 0x16u);
      swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v7, -1, -1);
      swift_slowDealloc(v5, -1, -1);

      v26 = v90;
      v27 = v91;
      p_vtable = (void **)(DirectionsElevationNormalisedPoint + 24);
      goto LABEL_25;
    }
LABEL_48:
    if (v3 < 0)
      v65 = v3;
    else
      v65 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v30 = _CocoaArrayWrapper.endIndex.getter(v65);
    swift_bridgeObjectRelease(v3);
    goto LABEL_23;
  }

LABEL_25:
  v37 = v0[48];
  v38 = v0[39];
  swift_beginAccess(v4, v26, 0, 0);
  v39 = v0[31];
  v40 = (uint64_t *)(v38 + OBJC_IVAR____TtC4Maps20MapsFavoritesManager__suggestions);
  swift_beginAccess(v40, v96, 33, 0);
  v0[33] = v39;
  v41 = *v40;
  v42 = swift_task_alloc(32);
  *(_QWORD *)(v42 + 16) = v27;
  swift_bridgeObjectRetain(v39);
  os_unfair_lock_lock((os_unfair_lock_t)(v41 + 24));
  v43 = **(_QWORD **)(v42 + 16);
  swift_bridgeObjectRelease(*(_QWORD *)(v41 + 16));
  *(_QWORD *)(v41 + 16) = v43;
  swift_bridgeObjectRetain(v43);
  os_unfair_lock_unlock((os_unfair_lock_t)(v41 + 24));
  if (v37)
    return;
  v44 = (uint64_t *)(v0[39] + v0[44]);
  swift_task_dealloc(v42);
  swift_bridgeObjectRelease(v0[33]);
  swift_endAccess(v96);
  swift_beginAccess(v44, v0 + 17, 33, 0);
  *((_BYTE *)v0 + 392) = 0;
  v45 = *v44;
  v46 = swift_task_alloc(32);
  *(_QWORD *)(v46 + 16) = v0 + 49;
  os_unfair_lock_lock((os_unfair_lock_t)(v45 + 20));
  *(_BYTE *)(v45 + 16) = **(_BYTE **)(v46 + 16);
  os_unfair_lock_unlock((os_unfair_lock_t)(v45 + 20));
  swift_task_dealloc(v46);
  swift_endAccess(v0 + 17);
  swift_bridgeObjectRelease(v0[31]);
  v47 = v0[48];
  v48 = v0[39];
  v49 = (os_unfair_lock_s **)(v48 + OBJC_IVAR____TtC4Maps20MapsFavoritesManager__suggestions);
  if (v0[38])
  {
    swift_beginAccess(v48 + OBJC_IVAR____TtC4Maps20MapsFavoritesManager__suggestions, v0 + 8, 0, 0);
    v50 = *v49;
    v51 = (uint64_t *)&(*v49)[4];
    swift_retain();
    os_unfair_lock_lock(v50 + 6);
    sub_10020E740(v51, v99);
    os_unfair_lock_unlock(v50 + 6);
    if (v47)
      return;
    v52 = v99[0];
    swift_release();
    v99[0] = (uint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v52 >> 62)
    {
      if (v52 < 0)
        v66 = v52;
      else
        v66 = v52 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v52);
      v53 = _CocoaArrayWrapper.endIndex.getter(v66);
      swift_bridgeObjectRelease(v52);
      if (v53)
        goto LABEL_31;
    }
    else
    {
      v53 = *(_QWORD *)((v52 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v53)
      {
LABEL_31:
        if (v53 < 1)
        {
          __break(1u);
          return;
        }
        for (i = 0; i != v53; ++i)
        {
          if ((v52 & 0xC000000000000001) != 0)
            v57 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v52);
          else
            v57 = *(id *)(v52 + 8 * i + 32);
          v58 = v57;
          v59 = (id)v0[38];
          v60 = objc_msgSend(v57, "type", v90, v91, v92);
          if (v60 == v59)
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v60);
            v55 = *(_QWORD *)(v99[0] + 16);
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v55);
            v56 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v55, v58);
            specialized ContiguousArray._endMutation()(v56);
          }
          else
          {

          }
        }
        swift_bridgeObjectRelease(v52);
        v63 = (_QWORD *)v99[0];
        p_vtable = (void **)(DirectionsElevationNormalisedPoint + 24);
        goto LABEL_57;
      }
    }
    swift_bridgeObjectRelease(v52);
    v63 = _swiftEmptyArrayStorage;
  }
  else
  {
    swift_beginAccess(v48 + OBJC_IVAR____TtC4Maps20MapsFavoritesManager__suggestions, v0 + 23, 0, 0);
    v61 = *v49;
    v62 = (uint64_t *)&(*v49)[4];
    swift_retain();
    os_unfair_lock_lock(v61 + 6);
    sub_10020E740(v62, v99);
    os_unfair_lock_unlock(v61 + 6);
    if (v47)
      return;
    v63 = (_QWORD *)v99[0];
    swift_release();
  }
LABEL_57:
  v67 = (id)v0[39];
  v68 = swift_bridgeObjectRetain(v63);
  sub_100104DDC(v68, (uint64_t)v67);
  v70 = v69;

  swift_bridgeObjectRelease_n(v63, 2);
  v0[36] = v70;
  if (p_vtable[441] != (void *)-1)
    swift_once(&qword_101490DC8, sub_1000F9670);
  v71 = sub_10000E918(v92, (uint64_t)qword_1014D4938);
  v72 = Logger.logObject.getter(v71);
  v73 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v72, v73))
  {
    v74 = v0 + 32;
    v75 = v0 + 34;
    v76 = swift_slowAlloc(22, -1);
    v77 = swift_slowAlloc(32, -1);
    v99[0] = v77;
    *(_DWORD *)v76 = 134218242;
    swift_beginAccess(v94, v0 + 14, 0, 0);
    v78 = *v94;
    v79 = v27;
    if ((unint64_t)*v94 >> 62)
    {
      if (v78 < 0)
        v89 = *v94;
      else
        v89 = v78 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v78);
      v80 = _CocoaArrayWrapper.endIndex.getter(v89);
      swift_bridgeObjectRelease(v78);
    }
    else
    {
      v80 = *(_QWORD *)((v78 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    *v75 = v80;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v75, v93, v76 + 4, v76 + 12);
    *(_WORD *)(v76 + 12) = 2080;
    v81 = type metadata accessor for MapsFavoriteItem();
    v82 = swift_bridgeObjectRetain(v78);
    v83 = Array.description.getter(v82, v81);
    v85 = v84;
    swift_bridgeObjectRelease(v78);
    *v74 = sub_1000C28FC(v83, v85, v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v74, v79, v76 + 14, v76 + 22);
    swift_bridgeObjectRelease(v85);
    _os_log_impl((void *)&_mh_execute_header, v72, v73, "Returning %ld suggested LOIs: %s", (uint8_t *)v76, 0x16u);
    swift_arrayDestroy(v77, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v77, -1, -1);
    swift_slowDealloc(v76, -1, -1);

    v0 = v98;
  }
  else
  {

  }
  v86 = v0[42];
  v87 = v0[43];
  swift_beginAccess(v94, v0 + 11, 0, 0);
  v88 = v0[36];
  swift_task_dealloc(v87);
  swift_task_dealloc(v86);
  ((void (*)(uint64_t))v0[1])(v88);
}

uint64_t sub_1000FBFA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 336);
  v2 = *(_QWORD *)(v0 + 344);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

BOOL sub_1000FBFEC(void *a1)
{
  id v1;

  v1 = objc_msgSend(a1, "visitCount");
  if (qword_101490DE0 != -1)
    swift_once(&qword_101490DE0, sub_1000F9748);
  return qword_1014D4960 < 1 || (unint64_t)v1 >= qword_1014D4960;
}

BOOL sub_1000FC050(void *a1)
{
  id v2;
  BOOL v3;

  v2 = objc_msgSend(a1, "visitCount");
  if (qword_101490DE8 != -1)
    swift_once(&qword_101490DE8, sub_1000F9774);
  v3 = qword_1014D4968 < 1 || (unint64_t)v2 >= qword_1014D4968;
  return v3
      && objc_msgSend(a1, "type") != (id)2
      && objc_msgSend(a1, "type") != (id)3
      && objc_msgSend(a1, "type") != (id)5;
}

uint64_t sub_1000FC22C(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  _QWORD *v7;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = dword_10149A7C4;
  a3;
  v7 = (_QWORD *)swift_task_alloc(v6);
  v3[4] = v7;
  *v7 = v3;
  v7[1] = sub_1000FC2A0;
  return sub_1000FAE80(a1);
}

uint64_t sub_1000FC2A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  void *v11;
  void (**v12)(_QWORD, _QWORD, _QWORD);

  v3 = v1;
  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 32);
  v7 = *(void **)(*v2 + 16);
  v8 = *v2;
  swift_task_dealloc(v6);

  if (v3)
  {
    v9 = _convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    isa = 0;
    v11 = (void *)v9;
  }
  else
  {
    type metadata accessor for MapsFavoriteItem();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
    v9 = 0;
    v11 = isa;
  }
  v12 = *(void (***)(_QWORD, _QWORD, _QWORD))(v5 + 24);
  ((void (**)(_QWORD, Class, uint64_t))v12)[2](v12, isa, v9);

  _Block_release(v12);
  return (*(uint64_t (**)(void))(v8 + 8))();
}

void *sub_1000FC36C(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_unfair_lock_s **v24;
  os_unfair_lock_s *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  id v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char v42;
  void (*v43)(char *, uint64_t);
  char *v44;
  id v45;
  void *v46;
  id v47;
  id v48;
  id v49;
  uint64_t v50;
  uint64_t v52;
  id v53;
  char *v54;
  char *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66[24];

  v62 = type metadata accessor for UUID(0);
  v64 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v55 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_100008B04(&qword_10149AA88);
  __chkstk_darwin(v61);
  v5 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100008B04((uint64_t *)&unk_10149AA90);
  __chkstk_darwin(v6);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v52 - v10;
  *(_QWORD *)&v13 = __chkstk_darwin(v12).n128_u64[0];
  v63 = (uint64_t)&v52 - v14;
  v56 = a1;
  v15 = objc_msgSend(a1, "_geoMapItem", v13);
  if (!v15)
    return 0;
  v16 = v15;
  v59 = v8;
  v17 = objc_msgSend((id)swift_unknownObjectRetain(v15), "_clientAttributes");
  if (v17
    && (v18 = v17,
        v19 = objc_msgSend(v17, "mapsSyncAttributes"),
        v18,
        v19)
    && (v20 = objc_msgSend(v19, "mapsSyncIdentifier"), v19, v20))
  {
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    UUID.init(uuidString:)(v21, v23);
    swift_unknownObjectRelease(v16);
    swift_bridgeObjectRelease(v23);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v64 + 56))(v63, 1, 1, v62);
    swift_unknownObjectRelease(v16);
  }
  v24 = (os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC4Maps20MapsFavoritesManager__shortcuts);
  swift_beginAccess(v24, v66, 0, 0);
  v25 = *v24;
  v26 = (uint64_t *)&(*v24)[4];
  swift_retain();
  os_unfair_lock_lock(v25 + 6);
  sub_10020E740(v26, &v65);
  os_unfair_lock_unlock(v25 + 6);
  v27 = v65;
  swift_release();
  v53 = v16;
  if ((unint64_t)v27 >> 62)
  {
LABEL_32:
    if (v27 < 0)
      v50 = v27;
    else
      v50 = v27 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v27);
    v28 = _CocoaArrayWrapper.endIndex.getter(v50);
    swift_bridgeObjectRelease(v27);
    v29 = v62;
    if (v28)
      goto LABEL_9;
  }
  else
  {
    v28 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
    v29 = v62;
    if (v28)
    {
LABEL_9:
      v60 = v27 & 0xC000000000000001;
      v30 = 4;
      v54 = v5;
      v57 = v27;
      v58 = v28;
      while (1)
      {
        if (v60)
          v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v30 - 4, v27);
        else
          v33 = *(id *)(v27 + 8 * v30);
        v34 = v33;
        v35 = v30 - 3;
        if (__OFADD__(v30 - 4, 1))
        {
          __break(1u);
          goto LABEL_32;
        }
        dispatch thunk of MapsSyncObject.identifier.getter();
        v36 = (uint64_t)&v5[*(int *)(v61 + 48)];
        sub_1000A4FC0((uint64_t)v11, (uint64_t)v5);
        sub_1000A4FC0(v63, v36);
        v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48);
        if (v37(v5, 1, v29) == 1)
          break;
        v38 = (uint64_t)v59;
        sub_1000A4FC0((uint64_t)v5, (uint64_t)v59);
        if (v37((char *)v36, 1, v29) == 1)
        {
          sub_100010CC4((uint64_t)v11, (uint64_t *)&unk_10149AA90);
          (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v38, v29);
          v27 = v57;
          v28 = v58;
LABEL_22:
          sub_100010CC4((uint64_t)v5, &qword_10149AA88);
          goto LABEL_24;
        }
        v39 = v64;
        v40 = v55;
        (*(void (**)(char *, uint64_t, uint64_t))(v64 + 32))(v55, v36, v29);
        v41 = sub_10000BC84(&qword_1014A0BC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v42 = dispatch thunk of static Equatable.== infix(_:_:)(v38, v40, v29, v41);
        v43 = *(void (**)(char *, uint64_t))(v39 + 8);
        v44 = v40;
        v5 = v54;
        v43(v44, v29);
        sub_100010CC4((uint64_t)v11, (uint64_t *)&unk_10149AA90);
        v43((char *)v38, v29);
        sub_100010CC4((uint64_t)v5, (uint64_t *)&unk_10149AA90);
        v27 = v57;
        v28 = v58;
        if ((v42 & 1) != 0)
          goto LABEL_30;
LABEL_24:
        v45 = objc_msgSend(v34, "mapItemStorage");
        if (v45)
        {
          v46 = v45;
          v32 = objc_msgSend(v45, "_identifier");

          if (v32)
          {
            v47 = objc_msgSend(v56, "_geoMapItem");
            if (!v47
              || (v48 = v47,
                  v49 = objc_msgSend(v47, "_identifier"),
                  swift_unknownObjectRelease(v48),
                  !v49))
            {

              goto LABEL_12;
            }
            v31 = objc_msgSend(v32, "isEqualToGEOMapItemIdentifier:", v49);

            if (v31)
              goto LABEL_30;
          }
        }
        v32 = v34;
LABEL_12:

        ++v30;
        v29 = v62;
        if (v35 == v28)
          goto LABEL_36;
      }
      sub_100010CC4((uint64_t)v11, (uint64_t *)&unk_10149AA90);
      if (v37((char *)v36, 1, v29) == 1)
      {
        sub_100010CC4((uint64_t)v5, (uint64_t *)&unk_10149AA90);
LABEL_30:
        swift_bridgeObjectRelease(v27);
        swift_unknownObjectRelease(v53);
        goto LABEL_37;
      }
      goto LABEL_22;
    }
  }
LABEL_36:
  swift_bridgeObjectRelease(v27);
  swift_unknownObjectRelease(v53);
  v34 = 0;
LABEL_37:
  sub_100010CC4(v63, (uint64_t *)&unk_10149AA90);
  return v34;
}

uint64_t sub_1000FCA8C(const void *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (__cdecl *v4)();

  *(_QWORD *)(v1 + 16) = _Block_copy(a1);
  v4 = (uint64_t (__cdecl *)())((char *)&dword_10149AB10 + dword_10149AB10);
  v2 = (_QWORD *)swift_task_alloc(unk_10149AB14);
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_1000FCAEC;
  return v4();
}

uint64_t sub_1000FCAEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v4 = *(_QWORD *)(*v2 + 24);
  v5 = *v2;
  swift_task_dealloc(v4);
  v6 = *(_QWORD *)(v5 + 16);
  if (v1)
  {
    v7 = (void *)_convertErrorToNSError(_:)(v1);
    swift_errorRelease(v1);
    (*(void (**)(uint64_t))(v6 + 16))(v6);

  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD))(v6 + 16))(*(_QWORD *)(v5 + 16), a1, 0);
  }
  _Block_release(*(const void **)(v5 + 16));
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_1000FCB8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 200) = v0;
  v2 = sub_100008B04(&qword_101494070);
  *(_QWORD *)(v1 + 208) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000FCBE8, 0, 0);
}

uint64_t sub_1000FCBE8()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  NSString v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  _QWORD *v17;
  uint64_t (*v19)(void *);

  type metadata accessor for MapsSyncQueryPredicate(0);
  v1 = (void *)static MapsSyncQueryPredicate.mapsFavoritesPredicate(hidden:)(1);
  v0[27] = v1;
  v2 = sub_100008B04((uint64_t *)&unk_101493B10);
  v3 = swift_allocObject(v2, 40, 7);
  *(_OWORD *)(v3 + 16) = xmmword_100E23F50;
  v4 = objc_allocWithZone((Class)NSSortDescriptor);
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v4, "initWithKey:ascending:", v5, 1);

  *(_QWORD *)(v3 + 32) = v6;
  specialized Array._endMutation()(v7);
  v8 = v3;
  if (qword_101490DD0 != -1)
    swift_once(&qword_101490DD0, sub_1000F96F0);
  v9 = qword_1014D4950;
  v10 = objc_allocWithZone((Class)type metadata accessor for MapsSyncRange(0));
  v11 = (void *)MapsSyncRange.init(offset:limit:)(0, v9);
  v0[28] = v11;
  objc_allocWithZone((Class)type metadata accessor for MapsSyncQueryOptions(0));
  v12 = v1;
  v13 = v11;
  v14 = (void *)MapsSyncQueryOptions.init(predicate:sortDescriptors:range:)(v1, v8, v11);
  v0[29] = v14;
  type metadata accessor for FavoriteItemRequest(0);
  v0[30] = FavoriteItemRequest.__allocating_init()();
  v15 = *((unsigned int *)&async function pointer to dispatch thunk of FavoriteItemRequest.fetch(options:) + 1);
  v19 = (uint64_t (*)(void *))((char *)&async function pointer to dispatch thunk of FavoriteItemRequest.fetch(options:)
                                       + async function pointer to dispatch thunk of FavoriteItemRequest.fetch(options:));
  v16 = v14;
  v17 = (_QWORD *)swift_task_alloc(v15);
  v0[31] = v17;
  *v17 = v0;
  v17[1] = sub_1000FCDB0;
  return v19(v14);
}

uint64_t sub_1000FCDB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  void *v6;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 248);
  *(_QWORD *)(v3 + 256) = a1;
  *(_QWORD *)(v3 + 264) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_1000FD600;
  }
  else
  {
    v6 = *(void **)(v3 + 232);

    v5 = sub_1000FCE28;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000FCE28()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  os_log_type_t v3;
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  id v13;
  void *v14;
  objc_class *v15;
  _BYTE *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  id v22;
  char *v23;
  id v24;
  objc_super *v25;
  objc_super *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  _QWORD *v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  _QWORD *v70;
  id v71;
  uint64_t v72;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  objc_super *v81;
  objc_super *v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;

  v1[19] = _swiftEmptyArrayStorage;
  v6 = v1 + 19;
  v7 = v1[32];
  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0)
      v0 = v1[32];
    else
      v0 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1[32]);
    v8 = _CocoaArrayWrapper.endIndex.getter(v0);
    v83 = v1 + 19;
    v84 = v1;
    if (!v8)
      goto LABEL_19;
  }
  else
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v1[32]);
    v83 = v1 + 19;
    v84 = v1;
    if (!v8)
      goto LABEL_19;
  }
  if (v8 < 1)
  {
    __break(1u);
    goto LABEL_29;
  }
  v9 = 0;
  v82 = (objc_super *)(v1 + 17);
  v10 = v7 & 0xC000000000000001;
  v77 = v1[32] + 32;
  v11 = &OBJC_IVAR____TtC4Maps16MapsFavoriteItem_isPersisted;
  v80 = v8;
  do
  {
    if (v10)
      v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v1[32]);
    else
      v13 = *(id *)(v77 + 8 * v9);
    v14 = v13;
    if ((dispatch thunk of FavoriteItem.hidden.getter() & 1) == 0)
    {
      v15 = (objc_class *)type metadata accessor for MapsFavoriteItem();
      v16 = objc_allocWithZone(v15);
      v17 = &v16[OBJC_IVAR____TtC4Maps16MapsFavoriteItem_cachedSubtitle];
      *v17 = 0;
      v17[1] = 0;
      v16[OBJC_IVAR____TtC4Maps16MapsFavoriteItem_isUpdatingETA] = 0;
      v18 = &v16[OBJC_IVAR____TtC4Maps16MapsFavoriteItem_analyticsGrouping];
      *v18 = 0x6966654472657355;
      v18[1] = 0xEB0000000064656ELL;
      *(_QWORD *)&v16[OBJC_IVAR____TtC4Maps16MapsFavoriteItem_number] = 0;
      v16[OBJC_IVAR____TtC4Maps16MapsFavoriteItem_isShortcutForSetup] = 0;
      v16[*v11] = 0;
      v16[OBJC_IVAR____TtC4Maps16MapsFavoriteItem_isAlreadyThere] = 0;
      v19 = OBJC_IVAR____TtC4Maps16MapsFavoriteItem_isMeCardWritebackEnabled;
      v20 = qword_101490E18;
      v21 = v11;
      v22 = v14;
      v23 = v16;
      if (v20 != -1)
        swift_once(&qword_101490E18, sub_1000F987C);
      v16[v19] = byte_1014D4998;
      *(_QWORD *)&v23[OBJC_IVAR____TtC4Maps16MapsFavoriteItem_transportType] = 0;
      *(_QWORD *)&v23[OBJC_IVAR____TtC4Maps16MapsFavoriteItem_favoriteItem] = v22;
      v24 = v22;

      v1 = v84;
      v84[17] = v23;
      v84[18] = v15;
      v25 = -[objc_super init](v82, "init");

      *((_BYTE *)&v25->receiver + *v21) = 1;
      v26 = v25;
      v6 = v83;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v26);
      v28 = *(_QWORD *)((v84[19] & 0xFFFFFFFFFFFFFF8) + 0x10);
      v27 = *(_QWORD *)((v84[19] & 0xFFFFFFFFFFFFFF8) + 0x18);
      v11 = v21;
      if (v28 >= v27 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
      v12 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v26);
      specialized Array._endMutation()(v12);

      v8 = v80;
    }
    ++v9;

  }
  while (v8 != v9);
LABEL_19:
  v29 = v6 - 14;
  v30 = v6 - 8;
  v75 = v6 - 17;
  v78 = v6 + 1;
  v31 = v6 + 2;
  v32 = v6 + 3;
  v79 = v6 + 15;
  v81 = (objc_super *)(v6 - 5);
  swift_bridgeObjectRelease(v1[32]);
  v33 = v1[32];
  v2 = v1 + 25;
  v34 = v1[25];
  v35 = sub_100105484(v33);
  swift_bridgeObjectRelease(v33);
  v36 = (uint64_t *)(v34 + OBJC_IVAR____TtC4Maps20MapsFavoritesManager__setupButtons);
  swift_beginAccess(v34 + OBJC_IVAR____TtC4Maps20MapsFavoritesManager__setupButtons, v6 - 14, 33, 0);
  v1[22] = v35;
  v37 = *v36;
  v38 = swift_task_alloc(32);
  *(_QWORD *)(v38 + 16) = v32;
  os_unfair_lock_lock((os_unfair_lock_t)(v37 + 24));
  v39 = **(_QWORD **)(v38 + 16);
  swift_bridgeObjectRelease(*(_QWORD *)(v37 + 16));
  *(_QWORD *)(v37 + 16) = v39;
  swift_bridgeObjectRetain(v39);
  os_unfair_lock_unlock((os_unfair_lock_t)(v37 + 24));
  swift_task_dealloc(v38);
  swift_bridgeObjectRelease(v1[22]);
  swift_endAccess(v29);
  v40 = v1[19];
  v41 = (uint64_t *)(v34 + OBJC_IVAR____TtC4Maps20MapsFavoritesManager__shortcuts);
  swift_beginAccess(v34 + OBJC_IVAR____TtC4Maps20MapsFavoritesManager__shortcuts, v30, 33, 0);
  v1[21] = v40;
  v42 = *v41;
  v43 = swift_task_alloc(32);
  *(_QWORD *)(v43 + 16) = v31;
  swift_bridgeObjectRetain(v40);
  os_unfair_lock_lock((os_unfair_lock_t)(v42 + 24));
  v44 = **(_QWORD **)(v43 + 16);
  swift_bridgeObjectRelease(*(_QWORD *)(v42 + 16));
  *(_QWORD *)(v42 + 16) = v44;
  swift_bridgeObjectRetain(v44);
  os_unfair_lock_unlock((os_unfair_lock_t)(v42 + 24));
  swift_task_dealloc(v43);
  swift_bridgeObjectRelease(*(v2 - 4));
  swift_endAccess(v30);
  v45 = (uint64_t *)(v34 + OBJC_IVAR____TtC4Maps20MapsFavoritesManager__sortedShortcuts);
  swift_beginAccess(v34 + OBJC_IVAR____TtC4Maps20MapsFavoritesManager__sortedShortcuts, v75, 33, 0);
  *(v2 - 5) = v40;
  v46 = *v45;
  v47 = swift_task_alloc(32);
  *(_QWORD *)(v47 + 16) = v78;
  swift_bridgeObjectRetain(v40);
  os_unfair_lock_lock((os_unfair_lock_t)(v46 + 24));
  v48 = **(_QWORD **)(v47 + 16);
  swift_bridgeObjectRelease(*(_QWORD *)(v46 + 16));
  *(_QWORD *)(v46 + 16) = v48;
  swift_bridgeObjectRetain(v48);
  os_unfair_lock_unlock((os_unfair_lock_t)(v46 + 24));
  swift_task_dealloc(v47);
  swift_bridgeObjectRelease(*(v2 - 5));
  swift_endAccess(v75);
  if (qword_101490DC8 != -1)
    swift_once(&qword_101490DC8, sub_1000F9670);
  v49 = type metadata accessor for Logger(0);
  v50 = sub_10000E918(v49, (uint64_t)qword_1014D4938);
  v7 = Logger.logObject.getter(v50);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled((os_log_t)v7, v3))
  {
    v1 = v83;
    v5 = v83 + 4;
    v4 = v83 + 5;
    v8 = swift_slowAlloc(22, -1);
    v76 = swift_slowAlloc(32, -1);
    v85 = v76;
    *(_DWORD *)v8 = 134218242;
    swift_beginAccess(v83, v83 - 11, 0, 0);
    v0 = *v83;
    if (!(*v83 >> 62))
    {
      v51 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_24:
      *v5 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v5, v4, v8 + 4, v8 + 12);
      *(_WORD *)(v8 + 12) = 2080;
      v52 = *v1;
      v53 = type metadata accessor for MapsFavoriteItem();
      v54 = swift_bridgeObjectRetain(v52);
      v55 = Array.description.getter(v54, v53);
      v57 = v56;
      swift_bridgeObjectRelease(v52);
      *v4 = sub_1000C28FC(v55, v57, &v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v4, v2, v8 + 14, v8 + 22);
      swift_bridgeObjectRelease(v57);
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v7, v3, "Fetched %ld persisted items: %s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy(v76, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v76, -1, -1);
      swift_slowDealloc(v8, -1, -1);
      goto LABEL_25;
    }
LABEL_29:
    if (v0 < 0)
      v74 = v0;
    else
      v74 = v0 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v0);
    v51 = _CocoaArrayWrapper.endIndex.getter(v74);
    swift_bridgeObjectRelease(v0);
    goto LABEL_24;
  }
LABEL_25:

  v58 = (uint64_t *)(v84[25] + OBJC_IVAR____TtC4Maps20MapsFavoritesManager__hasInitialData);
  swift_beginAccess(v58, v81, 33, 0);
  *((_BYTE *)v84 + 272) = 1;
  v59 = *v58;
  v60 = swift_task_alloc(32);
  *(_QWORD *)(v60 + 16) = v79;
  os_unfair_lock_lock((os_unfair_lock_t)(v59 + 20));
  *(_BYTE *)(v59 + 16) = **(_BYTE **)(v60 + 16);
  os_unfair_lock_unlock((os_unfair_lock_t)(v59 + 20));
  swift_task_dealloc(v60);
  swift_endAccess(v81);
  v61 = *v58;
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v61 + 20));
  v62 = *(unsigned __int8 *)(v61 + 16);
  v63 = v84;
  os_unfair_lock_unlock((os_unfair_lock_t)(v61 + 20));
  swift_release();
  v65 = (void *)v84[28];
  v64 = (void *)v84[29];
  v66 = (void *)v84[27];
  if (v62 == 1)
  {
    v68 = (void *)v84[25];
    v67 = v84[26];
    v69 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v67, 1, 1, v69);
    v70 = (_QWORD *)swift_allocObject(&unk_1011A26B0, 40, 7);
    v70[2] = 0;
    v70[3] = 0;
    v70[4] = v68;
    v71 = v68;
    v63 = v84;
    sub_1001B0C08(v67, (uint64_t)&unk_10149AA80, (uint64_t)v70);
    swift_release();
  }
  v72 = v63[19];

  swift_bridgeObjectRelease(v72);
  swift_task_dealloc(v63[26]);
  return ((uint64_t (*)(void))v63[1])();
}

uint64_t sub_1000FD600()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  v2 = *(void **)(v0 + 232);
  v1 = *(void **)(v0 + 240);
  v4 = *(void **)(v0 + 216);
  v3 = *(void **)(v0 + 224);
  v5 = *(_QWORD *)(v0 + 208);

  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FD780(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_10149A7CC;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_100108D5C;
  return sub_1000FCB8C();
}

void sub_1000FD7E0(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  id v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  double v21;
  double v22;
  id v23;
  double v24;
  double v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  os_unfair_lock_s **v31;
  os_unfair_lock_s *v32;
  os_unfair_lock_s *v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  os_unfair_lock_s **v37;
  os_unfair_lock_s *v38;
  os_unfair_lock_s *v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD v45[4];
  _BYTE v46[24];

  v2 = v1;
  if (!a1)
  {
    v28 = (uint64_t *)(v1 + OBJC_IVAR____TtC4Maps20MapsFavoritesManager__shortcuts);
    swift_beginAccess(v1 + OBJC_IVAR____TtC4Maps20MapsFavoritesManager__shortcuts, v46, 0, 0);
    v29 = *v28;
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v29 + 24));
    sub_10020E740((uint64_t *)(v29 + 16), v45);
    os_unfair_lock_unlock((os_unfair_lock_t)(v29 + 24));
    v30 = v45[0];
    swift_release();
    v31 = (os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC4Maps20MapsFavoritesManager__sortedShortcuts);
    swift_beginAccess(v2 + OBJC_IVAR____TtC4Maps20MapsFavoritesManager__sortedShortcuts, v45, 33, 0);
    v32 = *v31;
    v33 = *v31 + 6;
    os_unfair_lock_lock(v33);
    swift_bridgeObjectRelease(*(_QWORD *)&v32[4]._os_unfair_lock_opaque);
    *(_QWORD *)&v32[4]._os_unfair_lock_opaque = v30;
    swift_bridgeObjectRetain(v30);
    os_unfair_lock_unlock(v33);
    swift_bridgeObjectRelease(v30);
    swift_endAccess(v45);
    sub_1000FE5EC();
    return;
  }
  v43 = (uint64_t)_swiftEmptyArrayStorage;
  v44 = (unint64_t)_swiftEmptyArrayStorage;
  v4 = (uint64_t *)(v2 + OBJC_IVAR____TtC4Maps20MapsFavoritesManager__shortcuts);
  swift_beginAccess(v2 + OBJC_IVAR____TtC4Maps20MapsFavoritesManager__shortcuts, v46, 0, 0);
  v5 = *v4;
  v42 = a1;
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 24));
  sub_10020E740((uint64_t *)(v5 + 16), v45);
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 24));
  v6 = v45[0];
  swift_release();
  if (!((unint64_t)v6 >> 62))
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v7)
      goto LABEL_4;
LABEL_26:
    swift_bridgeObjectRelease(v6);
    v27 = _swiftEmptyArrayStorage;
LABEL_27:
    v35 = v42;
    sub_1001068EC(&v43, v35);

    v45[0] = v27;
    sub_1001200FC(v43);
    v36 = v45[0];
    v37 = (os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC4Maps20MapsFavoritesManager__sortedShortcuts);
    swift_beginAccess(v2 + OBJC_IVAR____TtC4Maps20MapsFavoritesManager__sortedShortcuts, v45, 33, 0);
    v38 = *v37;
    v39 = *v37 + 6;
    os_unfair_lock_lock(v39);
    swift_bridgeObjectRelease(*(_QWORD *)&v38[4]._os_unfair_lock_opaque);
    *(_QWORD *)&v38[4]._os_unfair_lock_opaque = v36;
    swift_bridgeObjectRetain(v36);
    os_unfair_lock_unlock(v39);
    swift_bridgeObjectRelease(v36);
    swift_endAccess(v45);
    sub_1000FE5EC();

    return;
  }
  if (v6 < 0)
    v34 = v6;
  else
    v34 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v6);
  v7 = _CocoaArrayWrapper.endIndex.getter(v34);
  swift_bridgeObjectRelease(v6);
  if (!v7)
    goto LABEL_26;
LABEL_4:
  if (v7 >= 1)
  {
    v40 = 0;
    v41 = v2;
    for (i = 0; i != v7; ++i)
    {
      if ((v6 & 0xC000000000000001) != 0)
        v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v6);
      else
        v13 = *(id *)(v6 + 8 * i + 32);
      v14 = v13;
      v15 = (void *)dispatch thunk of FavoriteItem.latitude.getter(v13);
      if (!v15)
        goto LABEL_6;
      v16 = v15;
      objc_msgSend(v15, "doubleValue", v40);
      v18 = v17;

      v19 = (void *)dispatch thunk of FavoriteItem.longitude.getter();
      if (!v19)
        goto LABEL_6;
      v20 = v19;
      objc_msgSend(v19, "doubleValue");
      v22 = v21;

      v23 = objc_msgSend(objc_allocWithZone((Class)CLLocation), "initWithLatitude:longitude:", v18, v22);
      objc_msgSend(v23, "distanceFromLocation:", v42);
      v25 = v24;

      if (qword_101490E20 != -1)
        swift_once(&qword_101490E20, sub_1000F98A8);
      if (*(double *)&qword_1014D49A0 < v25)
      {
        v9 = v14;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v9);
        v11 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v26 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v11 >= v26 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v11 + 1, 1);
      }
      else
      {
LABEL_6:
        v9 = v14;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v9);
        v11 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v10 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v11 >= v10 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      }
      v12 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v9);
      specialized Array._endMutation()(v12);

    }
    swift_bridgeObjectRelease(v6);
    v27 = (_QWORD *)v44;
    v2 = v41;
    goto LABEL_27;
  }
  __break(1u);
}

BOOL sub_1000FDC40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  double v13;
  double v14;
  double v15;
  id v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  id v22;
  double v23;
  double v24;

  v4 = (void *)dispatch thunk of FavoriteItem.latitude.getter();
  v5 = (void *)dispatch thunk of FavoriteItem.longitude.getter();
  v6 = (void *)dispatch thunk of FavoriteItem.latitude.getter();
  v7 = dispatch thunk of FavoriteItem.longitude.getter();
  v8 = (void *)v7;
  if (!v4)
  {

LABEL_8:
    return 0;
  }
  if (!v5)
  {

    goto LABEL_8;
  }
  if (v6)
  {
    if (v7)
    {
      v9 = v4;
      v10 = v5;
      v11 = v6;
      v12 = v8;
      objc_msgSend(v9, "doubleValue");
      v14 = v13;
      objc_msgSend(v10, "doubleValue");
      v16 = objc_msgSend(objc_allocWithZone((Class)CLLocation), "initWithLatitude:longitude:", v14, v15);
      objc_msgSend(v16, "distanceFromLocation:", a3);
      v18 = v17;

      objc_msgSend(v11, "doubleValue");
      v20 = v19;
      objc_msgSend(v12, "doubleValue");
      v22 = objc_msgSend(objc_allocWithZone((Class)CLLocation), "initWithLatitude:longitude:", v20, v21);
      objc_msgSend(v22, "distanceFromLocation:", a3);
      v24 = v23;

      return v18 < v24;
    }

  }
  else
  {

  }
  return 1;
}

uint64_t sub_1000FDE24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v4 + 144) = a4;
  v5 = (_QWORD *)swift_task_alloc(dword_10149AA54);
  *(_QWORD *)(v4 + 152) = v5;
  *v5 = v4;
  v5[1] = sub_1000FDE6C;
  return sub_10010402C();
}

uint64_t sub_1000FDE6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  void (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 152);
  *(_QWORD *)(*v2 + 160) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    swift_errorRelease(v1);
    v6 = sub_1000FE0E8;
  }
  else
  {
    *(_QWORD *)(v4 + 168) = a1;
    v6 = sub_1000FDEE8;
  }
  return swift_task_switch(v6, 0, 0);
}

void sub_1000FDEE8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s **v4;
  os_unfair_lock_s *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(v0 + 160);
  v1 = *(void **)(v0 + 168);
  *(_QWORD *)(v0 + 176) = v1;
  v3 = *(_QWORD *)(v0 + 144);
  sub_1000FD7E0(v1);
  v4 = (os_unfair_lock_s **)(v3 + OBJC_IVAR____TtC4Maps20MapsFavoritesManager__shortcuts);
  swift_beginAccess(v4, v0 + 120, 0, 0);
  v5 = *v4;
  v6 = (uint64_t *)&(*v4)[4];
  swift_retain();
  os_unfair_lock_lock(v5 + 6);
  sub_10020E740(v6, &v18);
  os_unfair_lock_unlock(v5 + 6);
  if (v2)
    return;
  v7 = v18;
  *(_QWORD *)(v0 + 184) = v18;
  swift_release();
  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0)
      v17 = v7;
    else
      v17 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v8 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease(v7);
    *(_QWORD *)(v0 + 192) = v8;
    if (v8)
      goto LABEL_4;
LABEL_13:
    swift_bridgeObjectRelease(v7);

    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  *(_QWORD *)(v0 + 192) = v8;
  if (!v8)
    goto LABEL_13;
LABEL_4:
  v9 = OBJC_IVAR____TtC4Maps20MapsFavoritesManager_mapViewMode;
  *(_QWORD *)(v0 + 200) = OBJC_IVAR____TtC4Maps20MapsFavoritesManager_mapViewMode;
  if (v8 < 1)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v0 + 208) = 0;
    v10 = *(_QWORD *)(v0 + 184);
    if ((v10 & 0xC000000000000001) != 0)
    {
      v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v10);
      v9 = *(_QWORD *)(v0 + 200);
    }
    else
    {
      v11 = *(id *)(v10 + 32);
    }
    v12 = v0 + 16;
    *(_QWORD *)(v0 + 216) = v11;
    v13 = *(_QWORD *)(v0 + 176);
    v14 = *(_QWORD *)(*(_QWORD *)(v0 + 144) + v9);
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_1000FE2E4;
    v15 = swift_continuation_init(v0 + 16, 0);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    v16 = (_QWORD *)(v0 + 80);
    v16[1] = 0x40000000;
    v16[2] = sub_1000FE448;
    v16[3] = &unk_1011A2558;
    v16[4] = v15;
    objc_msgSend(v11, "updateSubtitleWithViewMode:currentLocation:completionHandler:", v14, v13, v16);
    swift_continuation_await(v12);
  }
}

void sub_1000FE0E8()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s **v2;
  os_unfair_lock_s *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;

  *(_QWORD *)(v0 + 176) = 0;
  v1 = *(_QWORD *)(v0 + 144);
  sub_1000FD7E0(0);
  v2 = (os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC4Maps20MapsFavoritesManager__shortcuts);
  swift_beginAccess(v2, v0 + 120, 0, 0);
  v3 = *v2;
  v4 = (uint64_t *)&(*v2)[4];
  swift_retain();
  os_unfair_lock_lock(v3 + 6);
  sub_10020E740(v4, &v17);
  os_unfair_lock_unlock(v3 + 6);
  v5 = v17;
  *(_QWORD *)(v0 + 184) = v17;
  swift_release();
  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v15 = v5;
    else
      v15 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v6 = _CocoaArrayWrapper.endIndex.getter(v15);
    swift_bridgeObjectRelease(v5);
    *(_QWORD *)(v0 + 192) = v6;
    if (v6)
      goto LABEL_3;
LABEL_12:
    v16 = swift_bridgeObjectRelease(v5);
    (*(void (**)(__n128))(v0 + 8))(v16);
    return;
  }
  v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  *(_QWORD *)(v0 + 192) = v6;
  if (!v6)
    goto LABEL_12;
LABEL_3:
  v7 = OBJC_IVAR____TtC4Maps20MapsFavoritesManager_mapViewMode;
  *(_QWORD *)(v0 + 200) = OBJC_IVAR____TtC4Maps20MapsFavoritesManager_mapViewMode;
  if (v6 < 1)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v0 + 208) = 0;
    v8 = *(_QWORD *)(v0 + 184);
    if ((v8 & 0xC000000000000001) != 0)
    {
      v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v8);
      v7 = *(_QWORD *)(v0 + 200);
    }
    else
    {
      v9 = *(id *)(v8 + 32);
    }
    v10 = v0 + 16;
    *(_QWORD *)(v0 + 216) = v9;
    v11 = *(_QWORD *)(v0 + 176);
    v12 = *(_QWORD *)(*(_QWORD *)(v0 + 144) + v7);
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_1000FE2E4;
    v13 = swift_continuation_init(v0 + 16, 0);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    v14 = (_QWORD *)(v0 + 80);
    v14[1] = 0x40000000;
    v14[2] = sub_1000FE448;
    v14[3] = &unk_1011A2558;
    v14[4] = v13;
    objc_msgSend(v9, "updateSubtitleWithViewMode:currentLocation:completionHandler:", v12, v11, v14);
    swift_continuation_await(v10);
  }
}

uint64_t sub_1000FE2E4()
{
  return swift_task_switch(sub_1000FE330, 0, 0);
}

uint64_t sub_1000FE330()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 192);

  if (v1 + 1 == v2)
  {
    v3 = *(void **)(v0 + 176);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 184));

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 208) + 1;
    *(_QWORD *)(v0 + 208) = v5;
    v6 = *(_QWORD *)(v0 + 184);
    if ((v6 & 0xC000000000000001) != 0)
      v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v6);
    else
      v7 = *(id *)(v6 + 8 * v5 + 32);
    v8 = v7;
    v9 = v0 + 16;
    *(_QWORD *)(v0 + 216) = v7;
    v10 = *(_QWORD *)(v0 + 176);
    v11 = *(_QWORD *)(*(_QWORD *)(v0 + 144) + *(_QWORD *)(v0 + 200));
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_1000FE2E4;
    v12 = swift_continuation_init(v0 + 16, 0);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    v13 = (_QWORD *)(v0 + 80);
    v13[1] = 0x40000000;
    v13[2] = sub_1000FE448;
    v13[3] = &unk_1011A2558;
    v13[4] = v12;
    objc_msgSend(v8, "updateSubtitleWithViewMode:currentLocation:completionHandler:", v11, v10, v13);
    return swift_continuation_await(v9);
  }
}

uint64_t sub_1000FE448(uint64_t a1)
{
  return swift_continuation_resume(*(_QWORD *)(a1 + 32));
}

id sub_1000FE450(uint64_t a1)
{
  uint64_t v1;
  id result;
  uint64_t v3;

  result = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC4Maps20MapsFavoritesManager_observers), "registerObserver:", a1);
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC4Maps20MapsFavoritesManager_isETATimerRunning) & 1) == 0)
  {
    *(_BYTE *)(v1 + OBJC_IVAR____TtC4Maps20MapsFavoritesManager_isETATimerRunning) = 1;
    v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps20MapsFavoritesManager_etaTimer);
    swift_getObjectType(v3);
    swift_unknownObjectRetain(v3);
    OS_dispatch_source.resume()();
    return (id)swift_unknownObjectRelease(v3);
  }
  return result;
}

uint64_t sub_1000FE4E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = v1;
  v3 = *(void **)(v1 + OBJC_IVAR____TtC4Maps20MapsFavoritesManager_observers);
  result = (uint64_t)objc_msgSend(v3, "unregisterObserver:", a1);
  v5 = OBJC_IVAR____TtC4Maps20MapsFavoritesManager_isETATimerRunning;
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC4Maps20MapsFavoritesManager_isETATimerRunning) == 1)
  {
    result = (uint64_t)objc_msgSend(v3, "hasObservers");
    if ((result & 1) == 0)
    {
      v6 = *(_QWORD *)(v2 + OBJC_IVAR____TtC4Maps20MapsFavoritesManager_etaTimer);
      swift_getObjectType(v6);
      swift_unknownObjectRetain(v6);
      OS_dispatch_source.suspend()();
      result = swift_unknownObjectRelease(v6);
      *(_BYTE *)(v2 + v5) = 0;
    }
  }
  return result;
}

void sub_1000FE58C(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  id v7;

  swift_unknownObjectRetain(a3);
  v7 = a1;
  a4(a3);
  swift_unknownObjectRelease(a3);

}

uint64_t sub_1000FE5EC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD aBlock[6];

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v19 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000E4BC(0, (unint64_t *)&qword_101492FA0, OS_dispatch_queue_ptr);
  v9 = (void *)static OS_dispatch_queue.main.getter(v8);
  v10 = swift_allocObject(&unk_1011A2660, 24, 7);
  *(_QWORD *)(v10 + 16) = v0;
  aBlock[4] = sub_1001088BC;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BB8D4;
  aBlock[3] = &unk_1011A2678;
  v11 = _Block_copy(aBlock);
  v12 = v0;
  v13 = swift_release();
  static DispatchQoS.unspecified.getter(v13);
  aBlock[0] = _swiftEmptyArrayStorage;
  v14 = sub_10000BC84((unint64_t *)&qword_101492BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v15 = sub_100008B04((uint64_t *)&unk_101492FB0);
  v16 = sub_1000D00AC((unint64_t *)&qword_101492BC0, (uint64_t *)&unk_101492FB0);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v15, v16, v1, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v3, v11);
  _Block_release(v11);

  (*(void (**)(char *, uint64_t))(v19 + 8))(v3, v1);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

double sub_1000FE7F8(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  double result;
  id v9;
  _BYTE v10[32];

  v2 = objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC4Maps20MapsFavoritesManager_observers), "allObservers");
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, (char *)&type metadata for Any + 8);

  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = v3 + 32;
    do
    {
      sub_100011E20(v5, (uint64_t)v10);
      v6 = sub_100008B04(&qword_101498358);
      if ((swift_dynamicCast(&v9, v10, (char *)&type metadata for Any + 8, v6, 6) & 1) != 0)
      {
        v7 = v9;
        if ((objc_msgSend(v9, "respondsToSelector:", "homeDataProvidingObjectDidUpdate:") & 1) != 0)
          objc_msgSend(v7, "homeDataProvidingObjectDidUpdate:", a1);
        swift_unknownObjectRelease(v7);
      }
      v5 += 32;
      --v4;
    }
    while (v4);
    *(_QWORD *)&result = swift_bridgeObjectRelease(v3).n128_u64[0];
  }
  else
  {
    *(_QWORD *)&result = swift_bridgeObjectRelease(v3).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000FE938(id *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  double v16;
  id v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  os_log_type_t type;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v3 = *a1;
  v4 = objc_msgSend(*a1, "identifier");
  if (v4)
  {
    v5 = v4;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v8 = v7;

  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  v9 = objc_msgSend(a2, "identifier");
  if (!v9)
  {
    if (v8)
      goto LABEL_14;
LABEL_28:
    if (qword_101490DC8 != -1)
      swift_once(&qword_101490DC8, sub_1000F9670);
    v32 = type metadata accessor for Logger(0);
    sub_10000E918(v32, (uint64_t)qword_1014D4938);
    v19 = (uint64_t)v3;
    v33 = Logger.logObject.getter(v19);
    v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v43 = swift_slowAlloc(32, -1);
      v46 = v43;
      *(_DWORD *)v35 = 136315138;
      v36 = objc_msgSend((id)v19, "debugDescription");
      v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
      v39 = v38;

      v44 = sub_1000C28FC(v37, v39, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v35 + 4, v35 + 12);

      swift_bridgeObjectRelease(v39);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Removing existing LOI from suggestions: %s", v35, 0xCu);
      v19 = 1;
      swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v35, -1, -1);

      return v19;
    }

LABEL_33:
    return 1;
  }
  v10 = v9;
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v13 = v12;

  if (!v8)
  {
    if (v13)
      goto LABEL_16;
    goto LABEL_28;
  }
  if (!v13)
  {
LABEL_14:
    v13 = v8;
LABEL_16:
    *(_QWORD *)&v16 = swift_bridgeObjectRelease(v13).n128_u64[0];
    goto LABEL_17;
  }
  if (v6 == v11 && v8 == v13)
  {
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v13);
    goto LABEL_28;
  }
  v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, v11, v13, 0);
  swift_bridgeObjectRelease(v8);
  *(_QWORD *)&v16 = swift_bridgeObjectRelease(v13).n128_u64[0];
  if ((v15 & 1) != 0)
    goto LABEL_28;
LABEL_17:
  v17 = objc_msgSend(v3, "geoMapItem", v16);
  if (!v17)
    return 0;
  v18 = v17;
  v19 = (uint64_t)objc_msgSend(v17, "_identifier");
  swift_unknownObjectRelease(v18);
  if (!v19)
    return v19;
  v20 = objc_msgSend(a2, "geoMapItem");
  if (!v20
    || (v21 = v20,
        v22 = objc_msgSend(v20, "_identifier"),
        swift_unknownObjectRelease(v21),
        !v22))
  {

    return 0;
  }
  if ((objc_msgSend((id)v19, "isEqualToGEOMapItemIdentifier:", v22) & 1) == 0)
  {

    return 0;
  }
  if (qword_101490DC8 != -1)
    swift_once(&qword_101490DC8, sub_1000F9670);
  v23 = type metadata accessor for Logger(0);
  sub_10000E918(v23, (uint64_t)qword_1014D4938);
  v24 = v3;
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v25, v26))
  {

    goto LABEL_33;
  }
  type = v26;
  v27 = (uint8_t *)swift_slowAlloc(12, -1);
  v42 = swift_slowAlloc(32, -1);
  v46 = v42;
  *(_DWORD *)v27 = 136315138;
  v28 = objc_msgSend(v24, "debugDescription");
  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
  v31 = v30;

  v44 = sub_1000C28FC(v29, v31, &v46);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v27 + 4, v27 + 12);

  swift_bridgeObjectRelease(v31);
  _os_log_impl((void *)&_mh_execute_header, v25, type, "Removing existing LOI from suggestions: %s", v27, 0xCu);
  swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v42, -1, -1);
  swift_slowDealloc(v27, -1, -1);

  return 1;
}

id sub_1000FEE68()
{
  uint64_t v0;
  os_unfair_lock_s **v1;
  os_unfair_lock_s *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  id v17;
  uint64_t v18;
  NSString v19;
  NSString v20;
  uint64_t v22;
  _BYTE v23[24];

  v1 = (os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC4Maps20MapsFavoritesManager__shortcuts);
  swift_beginAccess(v0 + OBJC_IVAR____TtC4Maps20MapsFavoritesManager__shortcuts, v23, 0, 0);
  v2 = *v1;
  v3 = (uint64_t *)&(*v1)[4];
  swift_retain();
  os_unfair_lock_lock(v2 + 6);
  sub_10020E740(v3, &v22);
  os_unfair_lock_unlock(v2 + 6);
  v4 = v22;
  swift_release();
  if ((unint64_t)v4 >> 62)
    goto LABEL_20;
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v4);
  for (; v5; v5 = _CocoaArrayWrapper.endIndex.getter(v18))
  {
    v6 = 4;
    while (1)
    {
      v7 = (v4 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, v4)
         : *(id *)(v4 + 8 * v6);
      v8 = v7;
      v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1))
        break;
      if (objc_msgSend(v7, "type") == (id)6)
      {
        v10 = objc_msgSend(v8, "identifier");
        if (v10)
        {
          v11 = v10;
          v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
          v14 = v13;

          if (v12 == 0x725479627261654ELL && v14 == 0xED00007469736E61)
          {
            swift_bridgeObjectRelease_n(v4, 2);
            swift_bridgeObjectRelease(0xED00007469736E61);
            goto LABEL_18;
          }
          v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, 0x725479627261654ELL, 0xED00007469736E61, 0);
          swift_bridgeObjectRelease(v14);
          if ((v16 & 1) != 0)
          {
            swift_bridgeObjectRelease_n(v4, 2);
LABEL_18:

            return 0;
          }
        }
      }

      ++v6;
      if (v9 == v5)
        goto LABEL_24;
    }
    __break(1u);
LABEL_20:
    if (v4 < 0)
      v18 = v4;
    else
      v18 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
  }
LABEL_24:
  swift_bridgeObjectRelease_n(v4, 2);
  v17 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MapsFavoriteItem()), "init");
  objc_msgSend(v17, "setType:", 6);
  v19 = String._bridgeToObjectiveC()();
  objc_msgSend(v17, "setCustomName:", v19);

  v20 = String._bridgeToObjectiveC()();
  objc_msgSend(v17, "setShortcutIdentifier:", v20);

  return v17;
}

uint64_t sub_1000FF144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[9] = a4;
  v5[10] = v4;
  v5[7] = a2;
  v5[8] = a3;
  v5[6] = a1;
  return swift_task_switch(sub_1000FF164, 0, 0);
}

uint64_t sub_1000FF164()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v0[2] = _swiftEmptyArrayStorage;
  v0[3] = _swiftEmptyArrayStorage;
  v1 = sub_100008B04((uint64_t *)&unk_101493B10);
  v2 = swift_allocObject(v1, 56, 7);
  *(_OWORD *)(v2 + 16) = xmmword_100E25080;
  *(_QWORD *)(v2 + 32) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", 2);
  *(_QWORD *)(v2 + 40) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", 3);
  v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", 5);
  *(_QWORD *)(v2 + 48) = v3;
  specialized Array._endMutation()(v3);
  v0[11] = v2;
  if (qword_101490DF0 != -1)
    swift_once(&qword_101490DF0, sub_1000F97A0);
  v4 = v0[10];
  v6 = v0[6];
  v5 = v0[7];
  v7 = qword_1014D4970;
  v8 = (_QWORD *)swift_task_alloc(64);
  v0[12] = v8;
  v8[2] = v4;
  v8[3] = v2;
  v8[4] = v7;
  v8[5] = v6;
  v8[6] = v5;
  v9 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[13] = v9;
  v10 = sub_100008B04(&qword_10149A9F0);
  v0[14] = v10;
  *v9 = v0;
  v9[1] = sub_1000FF2FC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 4, 0, 0, 0xD000000000000031, 0x8000000100E49C70, sub_100104C28, v8, v10);
}

uint64_t sub_1000FF2FC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  *(_QWORD *)(*v1 + 120) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000FF4E0;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 96));
    v4 = sub_1000FF368;
  }
  return swift_task_switch(v4, 0, 0);
}

void sub_1000FF368()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char v11;

  sub_100120120(*(_QWORD *)(v0 + 32));
  v1 = qword_1014D4970;
  v2 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 128) = v2;
  if ((unint64_t)v2 >> 62)
  {
    if (v2 < 0)
      v10 = v2;
    else
      v10 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v3 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(v2);
    if ((v3 & 0x8000000000000000) != 0)
    {
      v11 = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, v11, 3451, 0);
      return;
    }
  }
  else
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = v1 >= v3;
  v5 = v1 - v3;
  if (v4)
  {
    v7 = *(_QWORD *)(v0 + 64);
    v6 = *(_QWORD *)(v0 + 72);
    v8 = swift_task_alloc(64);
    *(_QWORD *)(v0 + 136) = v8;
    *(_OWORD *)(v8 + 16) = *(_OWORD *)(v0 + 80);
    *(_QWORD *)(v8 + 32) = v5;
    *(_QWORD *)(v8 + 40) = v7;
    *(_QWORD *)(v8 + 48) = v6;
    v9 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v0 + 144) = v9;
    *v9 = v0;
    v9[1] = sub_1000FF52C;
    withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 40, 0, 0, 0xD000000000000039, 0x8000000100E49CB0, sub_100104C34, v8, *(_QWORD *)(v0 + 112));
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000FF4E0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  swift_bridgeObjectRelease_n(&_swiftEmptyArrayStorage, 2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FF52C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 144);
  *(_QWORD *)(*v1 + 152) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000FFA28;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 136));
    v4 = sub_1000FF598;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000FF598()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char **v4;
  void **p_vtable;
  uint64_t *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  char **v19;
  uint64_t *v20;
  void **v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  id v36;
  unint64_t v37;
  unint64_t v38;
  __n128 v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
  sub_100120120(*(_QWORD *)(v0 + 40));
  v1 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 160) = v1;
  if ((unint64_t)v1 >> 62)
    goto LABEL_27;
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  *(_QWORD *)(v0 + 168) = v2;
  if (v2)
  {
    do
    {
      v3 = 0;
      v50 = (_QWORD *)(v0 + 16);
      v4 = &selRef_maneuverViewTopMarginForSign_;
      p_vtable = DirectionsElevationNormalisedPoint.vtable;
      v6 = qword_1014D4938;
      v51 = v0;
      while (1)
      {
        v9 = *(void **)(*(_QWORD *)(v0 + 160) + 8 * v3 + 32);
        *(_QWORD *)(v0 + 176) = v9;
        *(_QWORD *)(v0 + 184) = v3 + 1;
        if (__OFADD__(v3, 1))
          break;
        v10 = v9;
        v11 = objc_msgSend(v10, v4[41]);
        *(_QWORD *)(v0 + 192) = v11;
        if (v11)
        {
          v27 = v11;
          type metadata accessor for FavoriteItem(0, v12);
          v28 = (void *)MapsSyncObject.__allocating_init()();
          *(_QWORD *)(v0 + 200) = v28;
          v29 = objc_msgSend((id)objc_opt_self(GEOMapItemStorage), "mapItemStorageForGEOMapItem:", v27);
          dispatch thunk of FavoriteItem.mapItemStorage.setter(v29);
          v30 = objc_msgSend(v10, "identifierString");
          v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
          v33 = v32;

          dispatch thunk of FavoriteItem.shortcutIdentifier.setter(v31, v33);
          v34 = objc_msgSend(v10, "preferredName");
          if (v34)
          {
            v35 = v34;
            v36 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
            v38 = v37;

          }
          else
          {
            v36 = 0;
            v38 = 0;
          }
          v41 = v50;
          dispatch thunk of FavoriteItem.customName.setter(v36, v38);
          v42 = (uint64_t)objc_msgSend(v10, "type");
          if (v42 < -32768)
          {
            __break(1u);
          }
          else if (v42 < 0x8000)
          {
            dispatch thunk of FavoriteItem.type.setter(v42);
            if (objc_msgSend(v10, "isLOIFromMeCard"))
              v44 = 1;
            else
              v44 = 0xFFFFFFFFLL;
            objc_msgSend(v28, "setSourceType:", v44, v50);
            v36 = v28;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v36);
            v38 = *(_QWORD *)((*v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v43 = *(_QWORD *)((*v41 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v38 < v43 >> 1)
              goto LABEL_25;
            goto LABEL_35;
          }
          __break(1u);
LABEL_35:
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v38 + 1, 1);
LABEL_25:
          v45 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v38, v36);
          specialized Array._endMutation()(v45);
          v46 = (_QWORD *)swift_task_alloc(dword_10149A7DC);
          *(_QWORD *)(v0 + 208) = v46;
          *v46 = v0;
          v46[1] = sub_1000FFA7C;
          return sub_1000FFF04((uint64_t)v10);
        }
        if (p_vtable[441] != (void *)-1)
          swift_once(&qword_101490DC8, sub_1000F9670);
        v13 = type metadata accessor for Logger(0);
        sub_10000E918(v13, (uint64_t)v6);
        v8 = v10;
        v1 = Logger.logObject.getter(v8);
        v14 = static os_log_type_t.error.getter();
        if (os_log_type_enabled((os_log_t)v1, v14))
        {
          v15 = swift_slowAlloc(14, -1);
          *(_DWORD *)v15 = 67109376;
          v16 = objc_msgSend(v8, "mapItemHandle");
          if (v16)
          {
            v17 = v16;
            v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v16);
            v19 = v4;
            v20 = v6;
            v21 = p_vtable;
            v23 = v22;

            v24 = v23;
            p_vtable = v21;
            v6 = v20;
            v4 = v19;
            v0 = v51;
            sub_100036B4C(v18, v24);
            v25 = 0;
          }
          else
          {
            v25 = 1;
          }

          *(_DWORD *)(v15 + 4) = v25;
          *(_WORD *)(v15 + 8) = 1024;
          v26 = objc_msgSend(v8, v4[41]);

          *(_DWORD *)(v15 + 10) = v26 == 0;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v1, v14, "Something's wrong: mapItemHandle:%{BOOL}d, mapItem:%{BOOL}d", (uint8_t *)v15, 0xEu);
          swift_slowDealloc(v15, -1, -1);
          v7 = (void *)v1;
        }
        else
        {

          v7 = v8;
          v8 = (id)v1;
        }

        v3 = *(_QWORD *)(v0 + 184);
        if (v3 == *(_QWORD *)(v0 + 168))
        {
          v39 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 160));
          v40 = *(_QWORD **)(v0 + 16);
          return (*(uint64_t (**)(_QWORD *, __n128))(v0 + 8))(v40, v39);
        }
      }
      __break(1u);
LABEL_27:
      if (v1 < 0)
        v48 = v1;
      else
        v48 = v1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v1);
      v49 = _CocoaArrayWrapper.endIndex.getter(v48);
      swift_bridgeObjectRelease(v1);
      *(_QWORD *)(v0 + 168) = v49;
    }
    while (v49);
  }
  v39 = swift_bridgeObjectRelease(v1);
  v40 = _swiftEmptyArrayStorage;
  return (*(uint64_t (**)(_QWORD *, __n128))(v0 + 8))(v40, v39);
}

uint64_t sub_1000FFA28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(&_swiftEmptyArrayStorage);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FFA7C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 208));
  return swift_task_switch(sub_1000FFAD0, 0, 0);
}

uint64_t sub_1000FFAD0()
{
  NSObject *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  __n128 v5;
  char **v7;
  void **p_vtable;
  uint64_t *v9;
  NSObject *v10;
  void *v11;
  BOOL v12;
  unint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  char **v23;
  uint64_t *v24;
  void **v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  void **v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;

  v2 = *(void **)(v1 + 192);
  v3 = *(void **)(v1 + 176);

  v4 = *(_QWORD *)(v1 + 184);
  if (v4 == *(_QWORD *)(v1 + 168))
  {
LABEL_2:
    v5 = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 160));
    return (*(uint64_t (**)(_QWORD, __n128))(v1 + 8))(*(_QWORD *)(v1 + 16), v5);
  }
  v46 = (_QWORD *)(v1 + 16);
  v7 = &selRef_maneuverViewTopMarginForSign_;
  p_vtable = DirectionsElevationNormalisedPoint.vtable;
  v9 = qword_1014D4938;
  v47 = v1;
  while (1)
  {
    v11 = *(void **)(*(_QWORD *)(v1 + 160) + 8 * v4 + 32);
    v12 = __OFADD__(v4, 1);
    v13 = v4 + 1;
    *(_QWORD *)(v1 + 176) = v11;
    *(_QWORD *)(v1 + 184) = v13;
    if (v12)
    {
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v0 = v11;
    v14 = objc_msgSend(v0, v7[41]);
    *(_QWORD *)(v1 + 192) = v14;
    if (v14)
      break;
    if (p_vtable[441] != (void *)-1)
      swift_once(&qword_101490DC8, sub_1000F9670);
    v16 = type metadata accessor for Logger(0);
    sub_10000E918(v16, (uint64_t)v9);
    v0 = v0;
    v17 = Logger.logObject.getter(v0);
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = swift_slowAlloc(14, -1);
      *(_DWORD *)v19 = 67109376;
      v20 = -[NSObject mapItemHandle](v0, "mapItemHandle");
      if (v20)
      {
        v21 = v20;
        v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v20);
        v23 = v7;
        v24 = v9;
        v25 = p_vtable;
        v27 = v26;

        v28 = v27;
        p_vtable = v25;
        v9 = v24;
        v7 = v23;
        v1 = v47;
        sub_100036B4C(v22, v28);
        v29 = 0;
      }
      else
      {
        v29 = 1;
      }

      *(_DWORD *)(v19 + 4) = v29;
      *(_WORD *)(v19 + 8) = 1024;
      v30 = objc_msgSend(v0, v7[41]);

      *(_DWORD *)(v19 + 10) = v30 == 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Something's wrong: mapItemHandle:%{BOOL}d, mapItem:%{BOOL}d", (uint8_t *)v19, 0xEu);
      swift_slowDealloc(v19, -1, -1);
      v10 = v17;
    }
    else
    {

      v10 = v0;
      v0 = v17;
    }

    v4 = *(_QWORD *)(v1 + 184);
    if (v4 == *(_QWORD *)(v1 + 168))
      goto LABEL_2;
  }
  v31 = v14;
  type metadata accessor for FavoriteItem(0, v15);
  v32 = (void *)MapsSyncObject.__allocating_init()();
  *(_QWORD *)(v1 + 200) = v32;
  v33 = objc_msgSend((id)objc_opt_self(GEOMapItemStorage), "mapItemStorageForGEOMapItem:", v31);
  dispatch thunk of FavoriteItem.mapItemStorage.setter(v33);
  v34 = -[NSObject identifierString](v0, "identifierString");
  v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
  v37 = v36;

  dispatch thunk of FavoriteItem.shortcutIdentifier.setter(v35, v37);
  v38 = -[NSObject preferredName](v0, "preferredName");
  if (v38)
  {
    v39 = v38;
    v9 = (uint64_t *)static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    p_vtable = v40;

  }
  else
  {
    v9 = 0;
    p_vtable = 0;
  }
  v41 = v46;
  dispatch thunk of FavoriteItem.customName.setter(v9, p_vtable);
  v42 = (uint64_t)-[NSObject type](v0, "type");
  if (v42 < -32768)
    goto LABEL_26;
  if (v42 >= 0x8000)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, (char *)p_vtable + 1, 1);
    goto LABEL_24;
  }
  dispatch thunk of FavoriteItem.type.setter(v42);
  if (-[NSObject isLOIFromMeCard](v0, "isLOIFromMeCard"))
    v43 = 1;
  else
    v43 = 0xFFFFFFFFLL;
  objc_msgSend(v32, "setSourceType:", v43, v46);
  v9 = v32;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v9);
  p_vtable = *(void ***)((*v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = *(_QWORD *)((*v41 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if ((unint64_t)p_vtable >= v13 >> 1)
    goto LABEL_28;
LABEL_24:
  v44 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(p_vtable, v9);
  specialized Array._endMutation()(v44);
  v45 = (_QWORD *)swift_task_alloc(dword_10149A7DC);
  *(_QWORD *)(v1 + 208) = v45;
  *v45 = v1;
  v45[1] = sub_1000FFA7C;
  return sub_1000FFF04((uint64_t)v0);
}

uint64_t sub_1000FFF04(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2[21] = a1;
  v2[22] = v1;
  v3 = type metadata accessor for Logger(0);
  v2[23] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[24] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[25] = swift_task_alloc(v5);
  v2[26] = swift_task_alloc(v5);
  return swift_task_switch(sub_1000FFF74, 0, 0);
}

void sub_1000FFF74()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  id v22;
  id v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_unfair_lock_s *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  id i;
  void *v42;
  id v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  id v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  os_unfair_lock_s *v55;
  id v56;
  void *v57;
  NSString v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  os_log_type_t v73;
  os_log_t log;
  uint64_t v75;
  _QWORD v76[2];

  v1 = objc_msgSend(*(id *)(v0 + 168), "addressIdentifier");
  if (!v1)
    goto LABEL_7;
  v2 = v1;
  v3 = *(_QWORD *)(v0 + 176);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v6 = v5;

  v7 = OBJC_IVAR____TtC4Maps20MapsFavoritesManager__shortcuts;
  *(_QWORD *)(v0 + 216) = OBJC_IVAR____TtC4Maps20MapsFavoritesManager__shortcuts;
  v8 = (uint64_t *)(v3 + v7);
  swift_beginAccess(v8, v0 + 120, 0, 0);
  v9 = (uint64_t *)(*v8 + 16);
  v10 = (os_unfair_lock_s *)(*v8 + 24);
  swift_retain();
  os_unfair_lock_lock(v10);
  sub_10020E740(v9, v76);
  os_unfair_lock_unlock(v10);
  v11 = v76[0];
  swift_release();
  swift_bridgeObjectRetain(v6);
  v12 = sub_100104C4C(v11, v4, v6);
  v14 = v13;
  swift_bridgeObjectRelease_n(v6, 2);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(v0 + 224) = v12;
  if ((v14 & 1) != 0)
  {
LABEL_7:
    v33 = *(_QWORD *)(v0 + 200);
    swift_task_dealloc(*(_QWORD *)(v0 + 208));
    swift_task_dealloc(v33);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  if (qword_101490DC8 != -1)
    swift_once(&qword_101490DC8, sub_1000F9670);
  v15 = *(_QWORD *)(v0 + 208);
  v16 = *(_QWORD *)(v0 + 184);
  v17 = *(_QWORD *)(v0 + 192);
  v19 = *(void **)(v0 + 168);
  v18 = *(void **)(v0 + 176);
  v20 = sub_10000E918(v16, (uint64_t)qword_1014D4938);
  *(_QWORD *)(v0 + 232) = v20;
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16);
  *(_QWORD *)(v0 + 240) = v21;
  v21(v15, v20, v16);
  v22 = v18;
  v23 = v19;
  v24 = v22;
  v25 = Logger.logObject.getter(v23);
  v26 = static os_log_type_t.default.getter();
  log = v25;
  if (!os_log_type_enabled(v25, v26))
  {
    v34 = *(_QWORD *)(v0 + 208);
    v35 = *(_QWORD *)(v0 + 184);
    v36 = *(_QWORD *)(v0 + 192);
    v37 = *(void **)(v0 + 168);
    v38 = *(void **)(v0 + 176);

    v39 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
    v39(v34, v35);
    goto LABEL_16;
  }
  v73 = v26;
  v27 = swift_slowAlloc(22, -1);
  v28 = swift_slowAlloc(64, -1);
  v75 = v28;
  *(_DWORD *)v27 = 136315394;
  v29 = *v8 + 16;
  v30 = (os_unfair_lock_s *)(*v8 + 24);
  swift_retain();
  os_unfair_lock_lock(v30);
  v31 = (uint64_t *)v29;
  v32 = 0;
  sub_10020E740(v31, v76);
  v72 = v28;
  os_unfair_lock_unlock(v30);
  v40 = v76[0];
  swift_release();
  if ((v40 & 0xC000000000000001) != 0)
    goto LABEL_30;
  if (v12 >= *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
LABEL_32:
    v63 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v32);
    goto LABEL_26;
  }
  for (i = *(id *)(v40 + 8 * v12 + 32); ; i = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v40))
  {
    v42 = i;
    v68 = v0 + 152;
    v43 = objc_msgSend(i, "identifier", swift_bridgeObjectRelease(v40).n128_f64[0]);

    if (v43)
    {
      v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
      v46 = v45;

      v47 = v44;
    }
    else
    {
      v47 = 0;
      v46 = 0xE000000000000000;
    }
    v69 = *(_QWORD *)(v0 + 192);
    v70 = *(_QWORD *)(v0 + 208);
    v48 = *(void **)(v0 + 176);
    v71 = *(_QWORD *)(v0 + 184);
    v49 = *(void **)(v0 + 168);
    *(_QWORD *)(v0 + 152) = sub_1000C28FC(v47, v46, &v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v68, v0 + 160, v27 + 4, v27 + 12);
    swift_bridgeObjectRelease(v46);

    *(_WORD *)(v27 + 12) = 2080;
    v50 = objc_msgSend(v49, "identifierString");
    v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
    v53 = v52;

    *(_QWORD *)(v0 + 160) = sub_1000C28FC(v51, v53, &v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v27 + 14, v27 + 22);
    swift_bridgeObjectRelease(v53);

    _os_log_impl((void *)&_mh_execute_header, log, v73, "Remapping shortcut identifier <%s> to <%s>", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy(v72, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v72, -1, -1);
    swift_slowDealloc(v27, -1, -1);

    v39 = *(void (**)(uint64_t, uint64_t))(v69 + 8);
    v39(v70, v71);
LABEL_16:
    *(_QWORD *)(v0 + 248) = v39;
    v27 = *v8;
    v54 = (uint64_t *)(*v8 + 16);
    v55 = (os_unfair_lock_s *)(*v8 + 24);
    swift_retain();
    os_unfair_lock_lock(v55);
    sub_10020E740(v54, v76);
    os_unfair_lock_unlock(v55);
    v40 = v76[0];
    swift_release();
    if ((v40 & 0xC000000000000001) != 0)
      break;
    if ((v12 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v12 < *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v56 = *(id *)(v40 + 8 * v12 + 32);
      goto LABEL_20;
    }
    __break(1u);
LABEL_30:
    ;
  }
  v56 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v40);
LABEL_20:
  v57 = v56;
  v58 = objc_msgSend(*(id *)(v0 + 168), "identifierString", swift_bridgeObjectRelease(v40).n128_f64[0]);
  if (!v58)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v61 = v60;
    v58 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v59 = swift_bridgeObjectRelease(v61).n128_u64[0];
  }
  objc_msgSend(v57, "setIdentifier:", v58, v59, v68);

  v62 = *v8;
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v62 + 24));
  sub_10020E740((uint64_t *)(v62 + 16), v76);
  os_unfair_lock_unlock((os_unfair_lock_t)(v62 + 24));
  v32 = v76[0];
  swift_release();
  if ((v32 & 0xC000000000000001) != 0)
    goto LABEL_32;
  if ((v12 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v12 < *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v63 = *(id *)(v32 + 8 * v12 + 32);
LABEL_26:
    v64 = v63;
    v65 = v0 + 16;
    *(_QWORD *)(v0 + 256) = v63;
    swift_bridgeObjectRelease(v32);
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_10010065C;
    v66 = swift_continuation_init(v0 + 16, 1);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    v67 = (_QWORD *)(v0 + 80);
    v67[1] = 0x40000000;
    v67[2] = sub_100205D48;
    v67[3] = &unk_1011A2638;
    v67[4] = v66;
    objc_msgSend(v64, "saveWithCompletionHandler:", v67);
    swift_continuation_await(v65);
    return;
  }
  __break(1u);
}

uint64_t sub_10010065C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 264) = v1;
  if (v1)
    v2 = sub_1001006FC;
  else
    v2 = sub_1001006BC;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001006BC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 200);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_1001006FC(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unint64_t result;
  id v18;
  id v19;
  void *v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = *(void **)(v1 + 256);
  v3 = *(_QWORD *)(v1 + 232);
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 240);
  v5 = *(_QWORD *)(v1 + 200);
  v7 = *(void **)(v1 + 176);
  v6 = *(_QWORD *)(v1 + 184);
  swift_willThrow(a1);

  v4(v5, v3, v6);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v8, v9))
  {
    v15 = *(void **)(v1 + 176);

LABEL_9:
    v22 = *(void (**)(uint64_t, uint64_t))(v1 + 248);
    v23 = *(_QWORD *)(v1 + 200);
    v24 = *(_QWORD *)(v1 + 184);
    swift_errorRelease(*(_QWORD *)(v1 + 264));

    v22(v23, v24);
    v25 = *(_QWORD *)(v1 + 200);
    swift_task_dealloc(*(_QWORD *)(v1 + 208));
    swift_task_dealloc(v25);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  v10 = *(_QWORD *)(v1 + 216);
  v11 = *(_QWORD *)(v1 + 176);
  v12 = (uint8_t *)swift_slowAlloc(12, -1);
  v13 = (_QWORD *)swift_slowAlloc(8, -1);
  *(_DWORD *)v12 = 138412290;
  v14 = *(_QWORD *)(v11 + v10);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v14 + 24));
  sub_10020E740((uint64_t *)(v14 + 16), &v26);
  os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 24));
  v16 = v26;
  swift_release();
  result = *(_QWORD *)(v1 + 224);
  if ((v16 & 0xC000000000000001) != 0)
  {
    v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(result, v16);
    goto LABEL_8;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v18 = *(id *)(v16 + 8 * result + 32);
LABEL_8:
    v19 = v18;
    v20 = *(void **)(v1 + 176);
    swift_bridgeObjectRelease(v16);
    *(_QWORD *)(v1 + 144) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 144, v1 + 152, v12 + 4, v12 + 12);
    *v13 = v19;

    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to save favorite %@", v12, 0xCu);
    v21 = sub_100008B04((uint64_t *)&unk_101494470);
    swift_arrayDestroy(v13, 1, v21);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_10010095C()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  uint64_t v17;
  __n128 v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD aBlock[6];

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v32 = *(_QWORD *)(v2 - 8);
  v33 = v2;
  __chkstk_darwin(v2);
  v31 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v29 = *(_QWORD *)(v4 - 8);
  v30 = v4;
  __chkstk_darwin(v4);
  v28 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchTimeInterval(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char **)((char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for DispatchTime(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = OBJC_IVAR____TtC4Maps20MapsFavoritesManager_etaTimer;
  v15 = *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps20MapsFavoritesManager_etaTimer];
  ObjectType = swift_getObjectType(v15);
  v17 = swift_unknownObjectRetain(v15);
  static DispatchTime.now()(v17, v18);
  if (qword_101490DF8 != -1)
    swift_once(&qword_101490DF8, sub_1000F97CC);
  v19 = *(double *)&qword_1014D4978;
  *v9 = 0;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DispatchTimeInterval.nanoseconds(_:), v6);
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v13, v9, ObjectType, v19);
  swift_unknownObjectRelease(v15);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v20 = *(_QWORD *)&v1[v14];
  v21 = swift_getObjectType(v20);
  v22 = swift_allocObject(&unk_1011A25D0, 24, 7);
  *(_QWORD *)(v22 + 16) = v1;
  aBlock[4] = sub_10010889C;
  aBlock[5] = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BB8D4;
  aBlock[3] = &unk_1011A25E8;
  v23 = _Block_copy(aBlock);
  swift_unknownObjectRetain(v20);
  v24 = v1;
  v25 = v28;
  j___s8Dispatch0A3QoSV11unspecifiedACvgZ(v21);
  v26 = v31;
  sub_100148A00();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v25, v26, v23, v21);
  _Block_release(v23);
  swift_unknownObjectRelease(v20);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v26, v33);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v25, v30);
  return swift_release();
}

uint64_t sub_100100C28(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  char v13[24];

  v2 = sub_100008B04(&qword_101494070);
  __chkstk_darwin(v2);
  v4 = &v13[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = &a1[OBJC_IVAR____TtC4Maps20MapsFavoritesManager__hasInitialData];
  swift_beginAccess(&a1[OBJC_IVAR____TtC4Maps20MapsFavoritesManager__hasInitialData], v13, 0, 0);
  v6 = *(_QWORD *)v5;
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 20));
  v7 = *(unsigned __int8 *)(v6 + 16);
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 20));
  result = swift_release();
  if (v7 == 1)
  {
    v9 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
    v10 = (_QWORD *)swift_allocObject(&unk_1011A2620, 40, 7);
    v10[2] = 0;
    v10[3] = 0;
    v10[4] = a1;
    v11 = a1;
    sub_1001B0C08((uint64_t)v4, (uint64_t)&unk_10149AA70, (uint64_t)v10);
    return swift_release();
  }
  return result;
}

void sub_100100D48(int a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  char *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  char v22[24];

  v3 = v2;
  v6 = sub_100008B04(&qword_101494070);
  __chkstk_darwin(v6);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (GeoServicesConfig_TransportTypePreference == a1
    && *((_QWORD *)&GeoServicesConfig_TransportTypePreference + 1) == a2)
  {
    if (qword_101490DC8 != -1)
      swift_once(&qword_101490DC8, sub_1000F9670);
    v10 = type metadata accessor for Logger(0);
    v11 = sub_10000E918(v10, (uint64_t)qword_1014D4938);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Transport preference changed", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

    v15 = &v3[OBJC_IVAR____TtC4Maps20MapsFavoritesManager__hasInitialData];
    swift_beginAccess(&v3[OBJC_IVAR____TtC4Maps20MapsFavoritesManager__hasInitialData], v22, 0, 0);
    v16 = *(_QWORD *)v15;
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v16 + 20));
    v17 = *(unsigned __int8 *)(v16 + 16);
    os_unfair_lock_unlock((os_unfair_lock_t)(v16 + 20));
    swift_release();
    if (v17 == 1)
    {
      v18 = type metadata accessor for TaskPriority(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v8, 1, 1, v18);
      v19 = (_QWORD *)swift_allocObject(&unk_1011A2540, 40, 7);
      v19[2] = 0;
      v19[3] = 0;
      v19[4] = v3;
      v20 = v3;
      sub_1001B0C08((uint64_t)v8, (uint64_t)&unk_10149AA48, (uint64_t)v19);
      swift_release();
    }
  }
}

uint64_t sub_100100F80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 48) = a4;
  return swift_task_switch(sub_100100F98, 0, 0);
}

uint64_t sub_100100F98()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = (uint64_t *)(*(_QWORD *)(v0 + 48) + OBJC_IVAR____TtC4Maps20MapsFavoritesManager__needsSuggestions);
  swift_beginAccess(v1, v0 + 16, 33, 0);
  *(_BYTE *)(v0 + 72) = 1;
  v2 = *v1;
  v3 = swift_task_alloc(32);
  *(_QWORD *)(v3 + 16) = v0 + 72;
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 20));
  *(_BYTE *)(v2 + 16) = **(_BYTE **)(v3 + 16);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 20));
  swift_task_dealloc(v3);
  swift_endAccess(v0 + 16);
  v4 = (_QWORD *)swift_task_alloc(dword_10149A7CC);
  *(_QWORD *)(v0 + 56) = v4;
  *v4 = v0;
  v4[1] = sub_100101060;
  return sub_1000FCB8C();
}

uint64_t sub_100101060()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1001010F4;
  else
    v3 = sub_1001010C4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001010C4()
{
  uint64_t v0;

  sub_1000FE5EC();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001010F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (qword_101490DC8 != -1)
    swift_once(&qword_101490DC8, sub_1000F9670);
  v1 = *(_QWORD *)(v0 + 64);
  v2 = type metadata accessor for Logger(0);
  sub_10000E918(v2, (uint64_t)qword_1014D4938);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 64);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 40) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error loading shortcuts %@", v8, 0xCu);
    v11 = sub_100008B04((uint64_t *)&unk_101494470);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 64));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_100101318()
{
  return sub_1000227F8(type metadata accessor for MapsFavoritesManager);
}

uint64_t type metadata accessor for MapsFavoritesManager()
{
  return objc_opt_self(_TtC4Maps20MapsFavoritesManager);
}

id sub_1001014F4()
{
  return sub_1000227F8(type metadata accessor for MapsFavoritesSuggestor);
}

uint64_t type metadata accessor for MapsFavoritesSuggestor()
{
  return objc_opt_self(_TtC4Maps22MapsFavoritesSuggestor);
}

uint64_t sub_100101520()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 120) = v0;
  v2 = sub_100008B04((uint64_t *)&unk_10149E140);
  *(_QWORD *)(v1 + 128) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10010157C, 0, 0);
}

uint64_t sub_10010157C()
{
  _QWORD *v0;
  uint64_t v1;
  id v2;
  void *v3;
  uint64_t v4;
  id v5;
  _QWORD *v6;
  uint64_t (*v8)(void *);

  type metadata accessor for MapsSyncQueryPredicate(0);
  v1 = static MapsSyncQueryPredicate.withFormat(_:_:)(0xD000000000000022, 0x8000000100E49C20, _swiftEmptyArrayStorage);
  v2 = objc_allocWithZone((Class)type metadata accessor for MapsSyncQueryOptions(0));
  v3 = (void *)MapsSyncQueryOptions.init(predicate:sortDescriptors:range:)(v1, 0, 0);
  v0[17] = v3;
  type metadata accessor for FavoriteItemRequest(0);
  v0[18] = FavoriteItemRequest.__allocating_init()();
  v4 = *((unsigned int *)&async function pointer to dispatch thunk of FavoriteItemRequest.count(options:) + 1);
  v8 = (uint64_t (*)(void *))((char *)&async function pointer to dispatch thunk of FavoriteItemRequest.count(options:)
                                      + async function pointer to dispatch thunk of FavoriteItemRequest.count(options:));
  v5 = v3;
  v6 = (_QWORD *)swift_task_alloc(v4);
  v0[19] = v6;
  *v6 = v0;
  v6[1] = sub_100101660;
  return v8(v3);
}

uint64_t sub_100101660(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  void *v7;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 152);
  *(_QWORD *)(*v2 + 160) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100103190;
  }
  else
  {
    v7 = *(void **)(v4 + 144);

    *(_QWORD *)(v4 + 168) = a1;
    v6 = sub_1001016E0;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1001016E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  NSObject *v6;
  uint8_t *v7;
  NSObject *v8;
  id v9;
  objc_class *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  if (*(uint64_t *)(v0 + 168) < 1)
  {
    v9 = objc_msgSend(objc_allocWithZone((Class)MapsSuggestionsMapsSyncShortcutStorage), "init");
    *(_QWORD *)(v0 + 176) = v9;
    v10 = (objc_class *)type metadata accessor for MapsFavoritesSuggestor();
    *(_QWORD *)(v0 + 40) = objc_allocWithZone(v10);
    *(_QWORD *)(v0 + 48) = v10;
    v11 = objc_msgSendSuper2((objc_super *)(v0 + 40), "init");
    *(_QWORD *)(v0 + 184) = v11;
    v12 = objc_msgSend(objc_allocWithZone((Class)MapsSuggestionsRealContactsConnector), "init");
    *(_QWORD *)(v0 + 192) = v12;
    v13 = objc_msgSend(objc_allocWithZone((Class)MapsSuggestionsRealNetworkRequester), "initFromResourceDepot:", 0);
    *(_QWORD *)(v0 + 200) = v13;
    v14 = objc_msgSend(objc_allocWithZone((Class)MapsSuggestionsContacts), "initWithConnector:networkRequester:", v12, v13);
    *(_QWORD *)(v0 + 208) = v14;
    v15 = objc_msgSend(objc_allocWithZone((Class)MapsSuggestionsRealRoutineConnector), "init");
    *(_QWORD *)(v0 + 216) = v15;
    v16 = objc_msgSend(objc_allocWithZone((Class)MapsSuggestionsRoutine), "initWithRoutineConnector:networkRequester:", v15, v13);
    *(_QWORD *)(v0 + 224) = v16;
    v17 = objc_msgSend(objc_allocWithZone((Class)MapsSuggestionsRealMapsSyncConnector), "init");
    *(_QWORD *)(v0 + 232) = v17;
    v18 = objc_msgSend(objc_allocWithZone((Class)MapsSuggestionsMapsSync), "initWithMapsSyncConnector:", v17);
    *(_QWORD *)(v0 + 240) = v18;
    v19 = objc_msgSend(objc_allocWithZone((Class)MapsSuggestionsShortcutManager), "initWithStorage:suggestor:contacts:routine:mapsSync:usingMyPlaces:", v9, v11, v14, v16, v18, 0);
    *(_QWORD *)(v0 + 248) = v19;
    v20 = swift_task_alloc(32);
    *(_QWORD *)(v0 + 256) = v20;
    *(_QWORD *)(v20 + 16) = v19;
    v21 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v0 + 264) = v21;
    v22 = sub_100008B04((uint64_t *)&unk_10149A9E0);
    *v21 = v0;
    v21[1] = sub_100101A08;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 88, 0, 0, 0xD000000000000012, 0x8000000100E49C50, sub_100104C20, v20, v22);
  }
  else
  {
    if (qword_101490DC8 != -1)
      swift_once(&qword_101490DC8, sub_1000F9670);
    v1 = type metadata accessor for Logger(0);
    v2 = sub_10000E918(v1, (uint64_t)qword_1014D4938);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.default.getter();
    v5 = os_log_type_enabled(v3, v4);
    v6 = *(NSObject **)(v0 + 136);
    if (v5)
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "[Migration] skipping migration, existing favorites present", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
      v8 = v3;
    }
    else
    {
      v8 = *(NSObject **)(v0 + 136);
      v6 = v3;
    }

    swift_task_dealloc(*(_QWORD *)(v0 + 128));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100101A08()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 264);
  *(_QWORD *)(*v1 + 272) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100101DB4;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 256));
    v4 = sub_100101A74;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100101A74()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;

  v1 = v0[11];
  v0[35] = v1;
  if (qword_101490DC8 != -1)
    swift_once(&qword_101490DC8, sub_1000F9670);
  v2 = type metadata accessor for Logger(0);
  v0[36] = sub_10000E918(v2, (uint64_t)qword_1014D4938);
  v3 = swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v23 = v7;
    *(_DWORD *)v6 = 136315138;
    v8 = sub_10000E4BC(0, &qword_10149AA08, MapsSuggestionsShortcut_ptr);
    v9 = swift_bridgeObjectRetain(v1);
    v10 = Array.description.getter(v9, v8);
    v12 = v11;
    swift_bridgeObjectRelease(v1);
    v0[14] = sub_1000C28FC(v10, v12, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 14, v0 + 15, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease_n(v1, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[Migration] Shortcuts from MSg: %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v1, 2);
  }

  v0[7] = _swiftEmptyArrayStorage;
  v13 = sub_100008B04((uint64_t *)&unk_101493B10);
  v14 = swift_allocObject(v13, 56, 7);
  *(_OWORD *)(v14 + 16) = xmmword_100E25080;
  *(_QWORD *)(v14 + 32) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", 2);
  *(_QWORD *)(v14 + 40) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", 3);
  v15 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", 5);
  *(_QWORD *)(v14 + 48) = v15;
  v23 = v14;
  specialized Array._endMutation()(v15);
  v16 = v23;
  v0[37] = v23;
  if (qword_101490DF0 != -1)
    swift_once(&qword_101490DF0, sub_1000F97A0);
  v17 = v0[15];
  v18 = qword_1014D4970;
  v19 = (_QWORD *)swift_task_alloc(64);
  v0[38] = v19;
  v19[2] = v17;
  v19[3] = v16;
  v19[4] = v18;
  v19[5] = 0;
  v19[6] = 0;
  v20 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[39] = v20;
  v21 = sub_100008B04(&qword_10149A9F0);
  v0[40] = v21;
  *v20 = v0;
  v20[1] = sub_100101E60;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 8, 0, 0, 0xD000000000000031, 0x8000000100E49C70, sub_100104C28, v19, v21);
}

uint64_t sub_100101DB4()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v11;
  void *v12;

  v1 = *(void **)(v0 + 248);
  v3 = *(void **)(v0 + 232);
  v2 = *(void **)(v0 + 240);
  v5 = *(void **)(v0 + 216);
  v4 = *(void **)(v0 + 224);
  v7 = *(void **)(v0 + 200);
  v6 = *(void **)(v0 + 208);
  v9 = *(void **)(v0 + 184);
  v8 = *(void **)(v0 + 192);
  v11 = *(void **)(v0 + 176);
  v12 = *(void **)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 256));

  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100101E60()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 312);
  *(_QWORD *)(*v1 + 328) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100102044;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 304));
    v4 = sub_100101ECC;
  }
  return swift_task_switch(v4, 0, 0);
}

void sub_100101ECC()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  char v11;

  sub_100120120(v0[8]);
  v1 = qword_1014D4970;
  v2 = v0[7];
  v0[42] = v2;
  if ((unint64_t)v2 >> 62)
  {
    if (v2 < 0)
      v10 = v2;
    else
      v10 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v3 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(v2);
    if ((v3 & 0x8000000000000000) != 0)
    {
      v11 = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, v11, 3451, 0);
      return;
    }
  }
  else
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = v1 >= v3;
  v5 = v1 - v3;
  if (v4)
  {
    v6 = v0[37];
    v7 = v0[15];
    v8 = (_QWORD *)swift_task_alloc(64);
    v0[43] = v8;
    v8[2] = v7;
    v8[3] = v6;
    v8[5] = 0;
    v8[6] = 0;
    v8[4] = v5;
    v9 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    v0[44] = v9;
    *v9 = v0;
    v9[1] = sub_100102120;
    withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 9, 0, 0, 0xD000000000000039, 0x8000000100E49CB0, sub_100104C34, v8, v0[40]);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100102044()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v1 = *(_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 280);
  v3 = *(void **)(v0 + 232);
  v13 = *(void **)(v0 + 240);
  v14 = *(void **)(v0 + 248);
  v4 = *(void **)(v0 + 216);
  v5 = *(void **)(v0 + 200);
  v11 = *(void **)(v0 + 208);
  v12 = *(void **)(v0 + 224);
  v7 = *(void **)(v0 + 184);
  v6 = *(void **)(v0 + 192);
  v8 = *(void **)(v0 + 176);
  v9 = *(void **)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 304));
  swift_bridgeObjectRelease(&_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v1);

  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100102120()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 352);
  *(_QWORD *)(*v1 + 360) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100102D14;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 344));
    v4 = sub_10010218C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10010218C()
{
  _QWORD *v0;
  unint64_t v1;
  _QWORD *v2;
  uint64_t i;
  uint64_t v4;
  char **v5;
  unint64_t v6;
  id v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v13;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  char IsEqualToMapItemForPurpose;
  void *v22;
  char *v23;
  id v24;
  id v25;
  _QWORD *v26;
  id v27;
  _QWORD *v28;
  char v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  id v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  void *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  unint64_t v99;
  uint64_t *v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t (*v108)(uint64_t);
  uint64_t v109;

  v1 = v0[35];
  swift_bridgeObjectRelease(v0[37]);
  v104 = v0 + 7;
  sub_100120120(v0[9]);
  v0[10] = _swiftEmptyArrayStorage;
  v2 = v0 + 10;
  i = v0[35];
  v99 = v1;
  if (v1 >> 62)
    goto LABEL_101;
  v4 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  for (i = swift_bridgeObjectRetain(i); ; i = v0[35])
  {
    v100 = v2 + 3;
    v5 = &selRef_timeOfIssue;
    if (v4)
    {
      v1 = 0;
      v6 = v99 & 0xC000000000000001;
      v106 = i + 32;
      v98 = v0 + 14;
      v101 = v0;
      v102 = v4;
      v103 = v2;
      while (1)
      {
        if (v6)
        {
          i = specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v0[35]);
        }
        else
        {
          if (v1 >= *(_QWORD *)((v99 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_98;
          i = (uint64_t)*(id *)(v106 + 8 * v1);
        }
        v11 = (void *)i;
        if (__OFADD__(v1++, 1))
        {
LABEL_95:
          __break(1u);
          goto LABEL_96;
        }
        v13 = (unint64_t)objc_msgSend((id)i, v5[502]);
        if (v13 > 5 || ((1 << v13) & 0x2C) == 0)
          goto LABEL_8;
        if (objc_msgSend(v11, "isHidden"))
          goto LABEL_8;
        v15 = objc_msgSend(v11, "geoMapItem");

        if (!v15)
          goto LABEL_8;
        type metadata accessor for FavoriteItem(0, v16);
        v17 = (void *)MapsSyncObject.__allocating_init()();
        v18 = *v104;
        if ((unint64_t)*v104 >> 62)
        {
          if (v18 < 0)
            v59 = *v104;
          else
            v59 = v18 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain_n(*v104, 2);
          v19 = _CocoaArrayWrapper.endIndex.getter(v59);
        }
        else
        {
          v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain_n(*v104, 2);
        }
        v105 = v1;
        v107 = v11;
        if (!v19)
        {
          swift_bridgeObjectRelease_n(v18, 2);
          v2 = v103;
          v5 = &selRef_timeOfIssue;
          goto LABEL_45;
        }
        v1 = 0;
        while (1)
        {
          if ((v18 & 0xC000000000000001) != 0)
            i = specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v18);
          else
            i = (uint64_t)*(id *)(v18 + 8 * v1 + 32);
          v22 = (void *)i;
          v23 = (char *)(v1 + 1);
          if (__OFADD__(v1, 1))
          {
            __break(1u);
            goto LABEL_95;
          }
          if (!objc_msgSend((id)i, "isLOIFromMeCard"))
            goto LABEL_27;
          v24 = objc_msgSend(v22, "mapItem");
          v2 = objc_msgSend(v24, "_identifier");

          if (v2)
          {
            v25 = objc_msgSend(v22, "mapItem");
            v26 = objc_msgSend(v25, "_identifier");

            v27 = objc_msgSend(v107, "geoMapItem");
            v2 = objc_msgSend(v27, "_identifier");

            if (!v26)
            {
              if (!v2)
                break;
              goto LABEL_25;
            }
            if (!v2)
            {
              v2 = v26;
LABEL_25:

              goto LABEL_26;
            }
            sub_10000E4BC(0, (unint64_t *)&qword_10149AA00, GEOMapItemIdentifier_ptr);
            v28 = v26;
            v29 = static NSObject.== infix(_:_:)(v28, v2);

            if ((v29 & 1) != 0)
              break;
          }
LABEL_26:
          v20 = objc_msgSend(v22, "mapItem");
          v0 = objc_msgSend(v107, "geoMapItem");
          IsEqualToMapItemForPurpose = GEOMapItemIsEqualToMapItemForPurpose(v20, v0, 3);

          if ((IsEqualToMapItemForPurpose & 1) != 0)
            break;
LABEL_27:

          ++v1;
          v11 = v107;
          if (v23 == (char *)v19)
          {
            swift_bridgeObjectRelease_n(v18, 2);
            v0 = v101;
            v2 = v103;
            v5 = &selRef_timeOfIssue;
            goto LABEL_45;
          }
        }
        v0 = v101;
        swift_bridgeObjectRelease_n(v18, 2);
        v30 = objc_msgSend(v22, "identifierString");
        v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
        v33 = v32;

        dispatch thunk of FavoriteItem.shortcutIdentifier.setter(v31, v33);
        objc_msgSend(v17, "setSourceType:", 1);
        v34 = v22;
        v35 = Logger.logObject.getter(v34);
        v36 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v35, v36))
        {
          v37 = (uint8_t *)swift_slowAlloc(12, -1);
          v38 = swift_slowAlloc(32, -1);
          v109 = v38;
          *(_DWORD *)v37 = 136315138;
          v39 = objc_msgSend(v34, "identifierString");
          v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
          v42 = v41;

          v0 = v101;
          *v100 = sub_1000C28FC(v40, v42, &v109);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v100, v98, v37 + 4, v37 + 12);
          swift_bridgeObjectRelease(v42);

          _os_log_impl((void *)&_mh_execute_header, v35, v36, "[Migration] found matching loi: %s", v37, 0xCu);
          swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v38, -1, -1);
          swift_slowDealloc(v37, -1, -1);

        }
        else
        {

        }
        v2 = v103;
        v5 = &selRef_timeOfIssue;
        v11 = v107;
LABEL_45:
        v43 = v17;
        v44 = objc_msgSend(v11, "mapsSyncCreateTime");
        v1 = v0[16];
        if (v44)
        {
          v45 = v44;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v44);

          v46 = type metadata accessor for Date(0);
          (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v1, 0, 1, v46);
        }
        else
        {
          v47 = type metadata accessor for Date(0);
          (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v1, 1, 1, v47);
        }
        dispatch thunk of MapsSyncObject.createTime.setter(v0[16]);

        dispatch thunk of FavoriteItem.mapItemStorage.setter(objc_msgSend(v11, "geoMapItem"));
        i = (uint64_t)objc_msgSend(v11, v5[502]);
        if (i < -32768)
          goto LABEL_99;
        if (i >= 0x8000)
          goto LABEL_100;
        dispatch thunk of FavoriteItem.type.setter(i);
        dispatch thunk of FavoriteItem.version.setter(2);
        dispatch thunk of FavoriteItem.hidden.setter(0);
        v48 = objc_msgSend(v11, "customName");
        if (v48)
        {
          v49 = v48;
          v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
          v52 = v51;

        }
        else
        {
          v50 = 0;
          v52 = 0;
        }
        v4 = v102;
        dispatch thunk of FavoriteItem.customName.setter(v50, v52);
        v53 = objc_msgSend(v11, "stringContacts");
        v54 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v53, &type metadata for String);

        v55 = *(_QWORD *)(v54 + 16);
        if (v55)
        {
          v56 = (_QWORD *)(v54 + 40);
          do
          {
            v58 = *(v56 - 1);
            v57 = *v56;
            swift_bridgeObjectRetain(*v56);
            dispatch thunk of FavoriteItem.addContactHandle(_:)(v58, v57);
            swift_bridgeObjectRelease(v57);
            v56 += 2;
            --v55;
          }
          while (v55);
        }
        swift_bridgeObjectRelease(v54);
        v7 = v43;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v7);
        v9 = *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v8 = *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v9 >= v8 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
        v10 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v7);
        specialized Array._endMutation()(v10);

        v6 = v99 & 0xC000000000000001;
        v1 = v105;
        v11 = v107;
LABEL_8:

        if (v1 == v4)
        {
          v60 = 0;
          while (1)
          {
            i = v6
              ? specialized _ArrayBuffer._getElementSlowPath(_:)(v60, v0[35])
              : (uint64_t)*(id *)(v106 + 8 * v60);
            v1 = i;
            v61 = v60 + 1;
            if (__OFADD__(v60, 1))
              goto LABEL_97;
            v62 = objc_msgSend((id)i, v5[502]);

            if (v62 == (id)2)
            {
              v68 = v0[35];
              goto LABEL_74;
            }
            ++v60;
            if (v61 == v4)
            {
              i = v0[35];
              goto LABEL_69;
            }
          }
        }
      }
    }
LABEL_69:
    swift_bridgeObjectRelease(i);
    v64 = sub_10010343C(2, v63);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v64);
    v66 = *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v65 = *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v66 >= v65 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v65 > 1, v66 + 1, 1);
    v67 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v66, v64);
    specialized Array._endMutation()(v67);
    if (!v4)
      break;
    v6 = v99 & 0xC000000000000001;
    v68 = swift_bridgeObjectRetain(v0[35]);
LABEL_74:
    v69 = 0;
    v70 = v68 + 32;
    while (1)
    {
      i = v6
        ? specialized _ArrayBuffer._getElementSlowPath(_:)(v69, v0[35])
        : (uint64_t)*(id *)(v70 + 8 * v69);
      v1 = i;
      v71 = v69 + 1;
      if (__OFADD__(v69, 1))
        break;
      v72 = v6;
      v73 = objc_msgSend((id)i, v5[502]);

      if (v73 == (id)3)
      {
        v80 = v0[35];
        swift_bridgeObjectRelease(v80);
        swift_bridgeObjectRelease(v0[7]);
        swift_bridgeObjectRelease(v80);
        goto LABEL_86;
      }
      ++v69;
      v6 = v72;
      if (v71 == v4)
      {
        swift_bridgeObjectRelease(v0[35]);
        goto LABEL_82;
      }
    }
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    if (i < 0)
      v94 = i;
    else
      v94 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(i);
    v4 = _CocoaArrayWrapper.endIndex.getter(v94);
  }
LABEL_82:
  v74 = v0[35];
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v74);
  v76 = sub_10010343C(3, v75);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v76);
  v78 = *(_QWORD *)((v0[10] & 0xFFFFFFFFFFFFFF8) + 0x10);
  v77 = *(_QWORD *)((v0[10] & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v78 >= v77 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v77 > 1, v78 + 1, 1);
  v79 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v78, v76);
  specialized Array._endMutation()(v79);
LABEL_86:
  v81 = v0[10];
  v82 = swift_bridgeObjectRetain_n(v81, 2);
  v83 = Logger.logObject.getter(v82);
  v84 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v83, v84))
  {
    v85 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v85 = 134217984;
    if ((unint64_t)v81 >> 62)
    {
      if (v81 < 0)
        v97 = v81;
      else
        v97 = v81 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v81);
      v86 = _CocoaArrayWrapper.endIndex.getter(v97);
      swift_bridgeObjectRelease(v81);
    }
    else
    {
      v86 = *(_QWORD *)((v81 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v81);
    v2[2] = v86;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 2, v100, v85 + 4, v85 + 12);
    swift_bridgeObjectRelease(v81);
    _os_log_impl((void *)&_mh_execute_header, v83, v84, "[Migration] saving %ld migrated favorites", v85, 0xCu);
    swift_slowDealloc(v85, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v81, 2);
  }

  type metadata accessor for MapsSyncStore(0);
  v0[46] = static MapsSyncStore.sharedStore.getter();
  swift_beginAccess(v2, v2 - 8, 0, 0);
  v88 = v0[10];
  if ((unint64_t)v88 >> 62)
  {
    if (v88 < 0)
      v95 = v0[10];
    else
      v95 = v88 & 0xFFFFFFFFFFFFFF8;
    v96 = type metadata accessor for MapsSyncObject(0, v87);
    swift_bridgeObjectRetain(v88);
    v91 = _bridgeCocoaArray<A>(_:)(v95, v96);
  }
  else
  {
    v89 = swift_bridgeObjectRetain_n(v0[10], 2);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v89);
    type metadata accessor for MapsSyncObject(0, v90);
    v91 = v88;
  }
  v0[47] = v91;
  swift_bridgeObjectRelease(v88);
  v108 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of MapsSyncStore.save(objects:)
                                         + async function pointer to dispatch thunk of MapsSyncStore.save(objects:));
  v92 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of MapsSyncStore.save(objects:)
                                   + 1));
  v0[48] = v92;
  *v92 = v0;
  v92[1] = sub_100102DF8;
  return v108(v91);
}

uint64_t sub_100102D14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v1 = *(_QWORD *)(v0 + 336);
  v2 = *(_QWORD *)(v0 + 296);
  v3 = *(_QWORD *)(v0 + 280);
  v4 = *(void **)(v0 + 232);
  v14 = *(void **)(v0 + 240);
  v15 = *(void **)(v0 + 248);
  v5 = *(void **)(v0 + 216);
  v6 = *(void **)(v0 + 200);
  v12 = *(void **)(v0 + 208);
  v13 = *(void **)(v0 + 224);
  v7 = *(void **)(v0 + 192);
  v11 = *(void **)(v0 + 184);
  v8 = *(void **)(v0 + 176);
  v9 = *(void **)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 344));
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);

  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100102DF8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t (*v6)();
  void *v7;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 384);
  *(_QWORD *)(*(_QWORD *)v1 + 392) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v5 = (void *)v2[46];
    v4 = v2[47];
    swift_bridgeObjectRelease(v2[10]);
    swift_bridgeObjectRelease(v4);

    v6 = sub_1001031D4;
  }
  else
  {
    v7 = (void *)v2[46];
    swift_bridgeObjectRelease(v2[47]);

    v6 = sub_100102E88;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100102E88()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = v0[10];
  v0[50] = v1;
  v2 = (_QWORD *)swift_task_alloc(dword_10149A9FC);
  v0[51] = v2;
  *v2 = v0;
  v2[1] = sub_100102EEC;
  v2[9] = v1;
  return swift_task_switch(sub_100107CD4, 0, 0);
}

uint64_t sub_100102EEC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 408);
  *(_QWORD *)(*v1 + 416) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1001030E4;
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 400));
    v4 = sub_100102F58;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100102F58()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  id *v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  void **v12;
  void **v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  NSObject *v24;
  NSObject *v25;

  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v3 = 0;
    v25 = v1;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "[Migration] migration complete", v3, 2u);
    swift_slowDealloc(v3, -1, -1);
    v4 = (id *)(v0 + 248);
    v5 = (void **)(v0 + 240);
    v6 = (void **)(v0 + 232);
    v7 = (void **)(v0 + 224);
    v8 = (void **)(v0 + 216);
    v9 = (void **)(v0 + 208);
    v10 = (void **)(v0 + 200);
    v11 = (void **)(v0 + 192);
    v12 = (void **)(v0 + 184);
    v24 = *(NSObject **)(v0 + 136);
    v13 = (void **)(v0 + 176);
  }
  else
  {
    v11 = (void **)(v0 + 248);
    v10 = (void **)(v0 + 240);
    v9 = (void **)(v0 + 232);
    v8 = (void **)(v0 + 224);
    v7 = (void **)(v0 + 216);
    v6 = (void **)(v0 + 208);
    v5 = (void **)(v0 + 200);
    v24 = v1;
    v13 = (void **)(v0 + 184);
    v12 = (void **)(v0 + 176);
    v4 = (id *)(v0 + 136);
    v25 = *(NSObject **)(v0 + 192);
  }
  v14 = *v5;
  v15 = *v7;
  v16 = *v9;
  v17 = *v12;
  v18 = *v13;
  v19 = *v6;
  v20 = *v8;
  v21 = *v10;
  v22 = *v11;

  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001030E4()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v11;
  uint64_t v12;

  v1 = *(void **)(v0 + 240);
  v11 = *(void **)(v0 + 248);
  v12 = *(_QWORD *)(v0 + 400);
  v3 = *(void **)(v0 + 224);
  v2 = *(void **)(v0 + 232);
  v5 = *(void **)(v0 + 208);
  v4 = *(void **)(v0 + 216);
  v7 = *(void **)(v0 + 192);
  v6 = *(void **)(v0 + 200);
  v8 = *(void **)(v0 + 176);
  v9 = *(void **)(v0 + 184);

  swift_bridgeObjectRelease(v12);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100103190()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 136);
  v2 = *(void **)(v0 + 144);

  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001031D4()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v11;

  v1 = *(void **)(v0 + 240);
  v11 = *(void **)(v0 + 248);
  v3 = *(void **)(v0 + 224);
  v2 = *(void **)(v0 + 232);
  v5 = *(void **)(v0 + 208);
  v4 = *(void **)(v0 + 216);
  v7 = *(void **)(v0 + 192);
  v6 = *(void **)(v0 + 200);
  v8 = *(void **)(v0 + 176);
  v9 = *(void **)(v0 + 184);

  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100103274(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD aBlock[6];

  v4 = sub_100008B04(&qword_10149AA38);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4, v7);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_1011A24F0, v9 + v6, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_100108714;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100103428;
  aBlock[3] = &unk_1011A2508;
  v11 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, "loadAllShortcutsWithHandler:", v11);
  _Block_release(v11);
}

uint64_t sub_1001033A4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  if (a2)
  {
    v5 = a2;
    swift_errorRetain(a2);
    v2 = sub_100008B04(&qword_10149AA38);
    return CheckedContinuation.resume(throwing:)(&v5, v2);
  }
  else
  {
    if (a1)
    {
      v5 = a1;
      swift_bridgeObjectRetain(a1);
    }
    else
    {
      v5 = _swiftEmptyArrayStorage;
    }
    v4 = sub_100008B04(&qword_10149AA38);
    return CheckedContinuation.resume(returning:)(&v5, v4);
  }
}

double sub_100103428(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_100103C2C(a1, a2, a3, &qword_10149AA08, MapsSuggestionsShortcut_ptr);
}

void *sub_10010343C(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v15;
  uint64_t v16;

  type metadata accessor for FavoriteItem(0, a2);
  v3 = (void *)MapsSyncObject.__allocating_init()();
  dispatch thunk of FavoriteItem.version.setter(2);
  objc_msgSend(v3, "setSourceType:", 2);
  if (a1 < -32768)
  {
    __break(1u);
  }
  else if (a1 < 0x8000)
  {
    dispatch thunk of FavoriteItem.type.setter(a1);
    dispatch thunk of FavoriteItem.hidden.setter(1);
    v4 = (id)NSStringFromMapsSuggestionsShortcutType(a1);
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

    v15 = v5;
    v16 = v7;
    v8._countAndFlagsBits = 0x70757465535FLL;
    v8._object = (void *)0xE600000000000000;
    String.append(_:)(v8);
    dispatch thunk of FavoriteItem.shortcutIdentifier.setter(v5, v7);
    if (qword_101490DC8 == -1)
      goto LABEL_4;
    goto LABEL_9;
  }
  __break(1u);
LABEL_9:
  swift_once(&qword_101490DC8, sub_1000F9670);
LABEL_4:
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10000E918(v9, (uint64_t)qword_1014D4938);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v13 = 134217984;
    v15 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v13 + 4, v13 + 12);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "[Migration] migrating hidden setup placeholder of type %ld", v13, 0xCu);
    swift_slowDealloc(v13, -1, -1);
  }

  return v3;
}

uint64_t sub_100103710(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_10149A9D4;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_100103770;
  return sub_100101520();
}

uint64_t sub_100103770()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(*v1 + 32);
  v3 = *(void **)(*v1 + 16);
  v4 = *v1;
  swift_task_dealloc(v2);

  v5 = *(_QWORD *)(v4 + 24);
  if (v0)
  {
    v6 = (void *)_convertErrorToNSError(_:)(v0);
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v5 + 16))(*(_QWORD *)(v4 + 24), 0);
  }
  _Block_release(*(const void **)(v4 + 24));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

void sub_100103810(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD aBlock[6];

  v4 = sub_100008B04(&qword_1014A0C00);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4, v7);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_1011A2400, v9 + v6, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_1001085BC;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000B3780;
  aBlock[3] = &unk_1011A2418;
  v11 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, "moveToFrontWithCompletion:", v11);
  _Block_release(v11);
}

uint64_t sub_100103940(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  if (a1)
  {
    v4 = a1;
    swift_errorRetain(a1);
    v1 = sub_100008B04(&qword_1014A0C00);
    return CheckedContinuation.resume(throwing:)(&v4, v1);
  }
  else
  {
    v3 = sub_100008B04(&qword_1014A0C00);
    return CheckedContinuation.resume(returning:)(v3, v3);
  }
}

void sub_1001039A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  NSArray v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD aBlock[6];

  v25 = a6;
  v9 = sub_100008B04((uint64_t *)&unk_10149AA20);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000F9900();
  v14 = v13;
  sub_10000E4BC(0, (unint64_t *)&qword_10149E3B0, NSNumber_ptr);
  v15.super.isa = Array._bridgeToObjectiveC()().super.isa;
  if (qword_101490DE0 != -1)
    swift_once(&qword_101490DE0, sub_1000F9748);
  v16 = qword_1014D4960;
  if (qword_1014D4960 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    __break(1u);
  }
  else
  {
    v26 = a4;
    if (qword_101490DD8 != -1)
      swift_once(&qword_101490DD8, sub_1000F971C);
    v17 = *(double *)&qword_1014D4958;
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
    v18 = *(unsigned __int8 *)(v10 + 80);
    v19 = (v18 + 16) & ~v18;
    v20 = (v11 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
    v21 = swift_allocObject(&unk_1011A24A0, v20 + 16, v18 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v21 + v19, v12, v9);
    v22 = (uint64_t *)(v21 + v20);
    v23 = v25;
    *v22 = a5;
    v22[1] = v23;
    aBlock[4] = sub_100108618;
    aBlock[5] = v21;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100103C18;
    aBlock[3] = &unk_1011A24B8;
    v24 = _Block_copy(aBlock);
    sub_10000C128(a5, v23);
    swift_release();
    objc_msgSend(v14, "fetchSuggestedLOIsForTypes:minVisits:maxAge:maxResults:handler:", v15.super.isa, v16, v26, v24, v17);

    _Block_release(v24);
  }
}

double sub_100103C18(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_100103C2C(a1, a2, a3, &qword_10149AA30, MapsSuggestionsLocationOfInterest_ptr);
}

double sub_100103C2C(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4, _QWORD *a5)
{
  uint64_t v6;
  void (*v7)(uint64_t, void *);
  uint64_t v8;
  id v9;
  double result;

  v6 = a2;
  v7 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    v8 = sub_10000E4BC(0, a4, a5);
    v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v8);
  }
  swift_retain();
  v9 = a3;
  v7(v6, a3);
  swift_release();

  *(_QWORD *)&result = swift_bridgeObjectRelease(v6).n128_u64[0];
  return result;
}

void sub_100103CB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  NSArray v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD aBlock[6];

  v25 = a6;
  v9 = sub_100008B04((uint64_t *)&unk_10149AA20);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000F9900();
  v14 = v13;
  sub_10000E4BC(0, (unint64_t *)&qword_10149E3B0, NSNumber_ptr);
  v15.super.isa = Array._bridgeToObjectiveC()().super.isa;
  if (qword_101490DE8 != -1)
    swift_once(&qword_101490DE8, sub_1000F9774);
  v16 = qword_1014D4968;
  if (qword_1014D4968 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    __break(1u);
  }
  else
  {
    v26 = a4;
    if (qword_101490DD8 != -1)
      swift_once(&qword_101490DD8, sub_1000F971C);
    v17 = *(double *)&qword_1014D4958;
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
    v18 = *(unsigned __int8 *)(v10 + 80);
    v19 = (v18 + 16) & ~v18;
    v20 = (v11 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
    v21 = swift_allocObject(&unk_1011A2450, v20 + 16, v18 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v21 + v19, v12, v9);
    v22 = (uint64_t *)(v21 + v20);
    v23 = v25;
    *v22 = a5;
    v22[1] = v23;
    aBlock[4] = sub_100108618;
    aBlock[5] = v21;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100103C18;
    aBlock[3] = &unk_1011A2468;
    v24 = _Block_copy(aBlock);
    sub_10000C128(a5, v23);
    swift_release();
    objc_msgSend(v14, "fetchAllSuggestedLOIsExcludingTypes:minVisits:maxAge:maxResults:handler:", v15.super.isa, v16, v26, v24, v17);

    _Block_release(v24);
  }
}

uint64_t sub_100103F28(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t (*a4)(id), _QWORD *a5)
{
  uint64_t v5;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  if (a2)
  {
    v15 = a2;
    swift_errorRetain(a2);
    v5 = sub_100008B04((uint64_t *)&unk_10149AA20);
    return CheckedContinuation.resume(throwing:)(&v15, v5);
  }
  else if (a4)
  {
    if (a1)
    {
      sub_10000C128((uint64_t)a4, (uint64_t)a5);
      v10 = swift_bridgeObjectRetain(a1);
      v11 = sub_100105074(v10, a4, a5);
    }
    else
    {
      swift_retain();
      v11 = _swiftEmptyArrayStorage;
    }
    v15 = v11;
    v14 = sub_100008B04((uint64_t *)&unk_10149AA20);
    CheckedContinuation.resume(returning:)(&v15, v14);
    return sub_10000BF74((uint64_t)a4, (uint64_t)a5);
  }
  else
  {
    v12 = _swiftEmptyArrayStorage;
    if (a1)
      v12 = a1;
    v15 = v12;
    swift_bridgeObjectRetain(a1);
    v13 = sub_100008B04((uint64_t *)&unk_10149AA20);
    return CheckedContinuation.resume(returning:)(&v15, v13);
  }
}

uint64_t sub_10010402C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = type metadata accessor for MainActor(0);
  v0[3] = v1;
  v0[4] = static MainActor.shared.getter();
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  v0[5] = v2;
  v0[6] = v3;
  return swift_task_switch(sub_100104098, v2, v3);
}

uint64_t sub_100104098()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v1 = objc_msgSend((id)objc_opt_self(MKLocationManager), "sharedLocationManager");
  *(_QWORD *)(v0 + 56) = v1;
  if (!v1)
  {
    swift_release();
    v4 = 0;
    return (*(uint64_t (**)(id))(v0 + 8))(v4);
  }
  v2 = v1;
  v3 = objc_msgSend(v1, "lastLocation");
  if (v3)
  {
    v4 = v3;

    swift_release();
    return (*(uint64_t (**)(id))(v0 + 8))(v4);
  }
  v6 = static MainActor.shared.getter();
  *(_QWORD *)(v0 + 64) = v6;
  v7 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 72) = v7;
  *(_QWORD *)(v7 + 16) = v2;
  v8 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 80) = v8;
  v9 = sub_100008B04(&qword_10149AA58);
  *v8 = v0;
  v8[1] = sub_1001041E8;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, v6, &protocol witness table for MainActor, 0x636F4C6863746566, 0xEF29286E6F697461, sub_100108798, v7, v9);
}

uint64_t sub_1001041E8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[5];
    v5 = v2[6];
    v6 = sub_10010429C;
  }
  else
  {
    v7 = v2[9];
    swift_release();
    swift_task_dealloc(v7);
    v4 = v2[5];
    v5 = v2[6];
    v6 = sub_10010425C;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_10010425C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);

  swift_release(v1);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10010429C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(void **)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 32));

  swift_release(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1001042F4(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  _QWORD aBlock[6];

  v4 = sub_100008B04((uint64_t *)&unk_10149AA60);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4, v7);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_1011A2580, v9 + v6, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_100108808;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000142F0;
  aBlock[3] = &unk_1011A2598;
  v11 = _Block_copy(aBlock);
  swift_release();
  v12 = objc_msgSend(a2, "singleLocationUpdateWithHandler:", v11);
  _Block_release(v11);
  if (v12)
  {
    objc_msgSend(v12, "start");
    swift_unknownObjectRelease(v12);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100104450(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_101490DC8 != -1)
      swift_once(&qword_101490DC8, sub_1000F9670);
    v3 = type metadata accessor for Logger(0);
    sub_10000E918(v3, (uint64_t)qword_1014D4938);
    swift_errorRetain(a2);
    v4 = swift_errorRetain(a2);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      v8 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v7 = 138412290;
      swift_errorRetain(a2);
      v9 = _swift_stdlib_bridgeErrorToNSError(a2);
      v15 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v7 + 4, v7 + 12);
      *v8 = v9;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to fetch location: %@", v7, 0xCu);
      v10 = sub_100008B04((uint64_t *)&unk_101494470);
      swift_arrayDestroy(v8, 1, v10);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    v15 = a2;
    v14 = sub_100008B04((uint64_t *)&unk_10149AA60);
    return CheckedContinuation.resume(throwing:)(&v15, v14);
  }
  else
  {
    v15 = (uint64_t)a1;
    v11 = a1;
    v12 = sub_100008B04((uint64_t *)&unk_10149AA60);
    return CheckedContinuation.resume(returning:)(&v15, v12);
  }
}

uint64_t sub_100104650(unint64_t a1)
{
  if (a1 > 6)
    return static String._unconditionallyBridgeFromObjectiveC(_:)(CNLabelOther);
  else
    return static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)*(&off_1011A28F8 + a1));
}

BOOL sub_10010467C(id a1, SEL a2)
{
  id v2;
  char v3;

  v2 = a1;
  v3 = sub_1001046B8();

  return v3 & 1;
}

uint64_t type metadata accessor for ThreadSafe(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10001A6E8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ThreadSafe);
}

uint64_t sub_1001046B8()
{
  void *v0;
  int v1;
  __int16 v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v1 = (unsigned __int16)FavoriteItemSourceType.rawValue.getter(objc_msgSend(v0, "sourceType"));
  if (v1 == (unsigned __int16)FavoriteItemSourceType.rawValue.getter(2))
    return 1;
  v3 = dispatch thunk of FavoriteItem.type.getter();
  v4 = (id)NSStringFromMapsSuggestionsShortcutType(v3);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  v8._countAndFlagsBits = 0x70757465535FLL;
  v8._object = (void *)0xE600000000000000;
  String.append(_:)(v8);
  v9 = dispatch thunk of FavoriteItem.shortcutIdentifier.getter();
  if (v10)
  {
    v11 = v10;
    if (v5 == v9 && v10 == v7)
    {
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v11);
      return 1;
    }
    else
    {
      v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v9, v10, 0);
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v11);
      return v12 & 1;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v7);
    return 0;
  }
}

uint64_t sub_1001047DC()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_10149A9B4);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10000C0E0;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_10149A9B0 + dword_10149A9B0))(v2, v3);
}

uint64_t sub_100104844()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_1014A0B74);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_10000DD08;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1014A0B70 + dword_1014A0B70))(v2, v3, v4);
}

uint64_t sub_1001048C0(id *__src, id *a2, unint64_t a3, id *__dst, void *a5)
{
  id *v5;
  id *v7;
  id *v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id *v15;
  id *v16;
  id *v17;
  void *v18;
  id v19;
  id v20;
  BOOL v21;
  BOOL v22;
  id *v23;
  id *v24;
  id *v25;
  id *v26;
  id *v27;
  unint64_t v28;
  id *v29;
  void *v30;
  id v31;
  id v32;
  BOOL v33;
  BOOL v34;
  id *v35;
  id *v36;
  uint64_t result;
  id *v38;
  id *v39;
  uint64_t v41;
  id v42;
  id v43;
  id *v44;
  id *v45;
  id *v46;

  v5 = __dst;
  v7 = a2;
  v8 = __src;
  v9 = (char *)a2 - (char *)__src;
  v10 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v10 = (char *)a2 - (char *)__src;
  v11 = v10 >> 3;
  v12 = a3 - (_QWORD)a2;
  v13 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v13 = a3 - (_QWORD)a2;
  v14 = v13 >> 3;
  v46 = __src;
  v45 = __dst;
  if (v11 >= v13 >> 3)
  {
    if (v12 >= -7)
    {
      if (__dst != a2 || &a2[v14] <= __dst)
        memmove(__dst, a2, 8 * v14);
      v25 = &v5[v14];
      v44 = v25;
      v46 = v7;
      if (v8 < v7 && v12 >= 8)
      {
        v26 = (id *)(a3 - 8);
        v27 = v7;
        v38 = v5;
        v39 = v8;
        while (1)
        {
          v28 = (unint64_t)v25;
          v29 = v25 - 1;
          v43 = *(v25 - 1);
          v30 = *--v27;
          v42 = v30;
          v31 = v43;
          v32 = v30;
          v33 = sub_1000FDC40((uint64_t)&v43, (uint64_t)&v42, (uint64_t)a5);
          if (v41)
            break;
          v34 = v33;
          v41 = 0;
          v35 = v26 + 1;

          if (v34)
          {
            if (v35 != v7 || v26 >= v7)
              *v26 = *v27;
            v46 = v27;
            v36 = v38;
            v25 = (id *)v28;
            if (v27 <= v39)
              goto LABEL_48;
          }
          else
          {
            v44 = v29;
            if ((unint64_t)v35 < v28 || (unint64_t)v26 >= v28 || v35 != (id *)v28)
              *v26 = *v29;
            v27 = v7;
            v25 = v29;
            v36 = v38;
            if (v7 <= v39)
              goto LABEL_48;
          }
          --v26;
          v7 = v27;
          if (v25 <= v36)
            goto LABEL_48;
        }

      }
      goto LABEL_48;
    }
  }
  else if (v9 >= -7)
  {
    if (__dst != __src || &__src[v11] <= __dst)
      memmove(__dst, __src, 8 * v11);
    v15 = &v5[v11];
    v44 = v15;
    if ((unint64_t)v7 < a3 && v9 >= 8)
    {
      while (1)
      {
        v16 = v8;
        v43 = *v7;
        v17 = v5;
        v42 = *v5;
        v18 = v42;
        v19 = v43;
        v20 = v18;
        v21 = sub_1000FDC40((uint64_t)&v43, (uint64_t)&v42, (uint64_t)a5);
        if (v41)
          break;
        v22 = v21;

        if (v22)
        {
          v23 = v7 + 1;
          v24 = v16;
          if (v16 < v7 || v16 >= v23 || v16 != v7)
            *v16 = *v7;
          v5 = v17;
        }
        else
        {
          v24 = v16;
          if (v16 != v17)
            *v16 = *v17;
          v5 = v17 + 1;
          v45 = v17 + 1;
          v23 = v7;
        }
        v41 = 0;
        v8 = v24 + 1;
        v46 = v8;
        if (v5 < v15)
        {
          v7 = v23;
          if ((unint64_t)v23 < a3)
            continue;
        }
        goto LABEL_48;
      }

    }
LABEL_48:
    sub_1000DCE40((void **)&v46, (const void **)&v45, &v44);

    return 1;
  }

  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

void sub_100104C20(uint64_t a1)
{
  uint64_t v1;

  sub_100103274(a1, *(void **)(v1 + 16));
}

uint64_t sub_100104C28(uint64_t a1)
{
  return sub_1001088A8(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001039A0);
}

uint64_t sub_100104C34(uint64_t a1)
{
  return sub_1001088A8(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100103CB0);
}

_BYTE *sub_100104C40@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100104C4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t i;
  id v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  if ((unint64_t)a1 >> 62)
    goto LABEL_22;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v5)
  {
    v20 = a3;
    for (i = 0; ; ++i)
    {
      v7 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1)
         : *(id *)(a1 + 8 * i + 32);
      v8 = v7;
      v9 = objc_msgSend(v7, "identifier");
      if (v9)
        break;

      v16 = i + 1;
      if (__OFADD__(i, 1))
        goto LABEL_21;
LABEL_17:
      if (v16 == v5)
        return 0;
    }
    v10 = v9;
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v13 = v12;

    if (v11 == a2 && v13 == v20)
    {

      swift_bridgeObjectRelease(v20);
      return i;
    }
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, a2, v20, 0);

    swift_bridgeObjectRelease(v13);
    if ((v15 & 1) != 0)
      return i;
    v16 = i + 1;
    if (!__OFADD__(i, 1))
      goto LABEL_17;
LABEL_21:
    __break(1u);
LABEL_22:
    if (a1 < 0)
      v17 = a1;
    else
      v17 = a1 & 0xFFFFFFFFFFFFFF8;
    v18 = a3;
    swift_bridgeObjectRetain(a1);
    v5 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease(a1);
    a3 = v18;
  }
  return 0;
}

void sub_100104DDC(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t *v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  os_unfair_lock_s **v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[24];
  _QWORD *v34;

  v3 = v2;
  v5 = a1;
  v34 = _swiftEmptyArrayStorage;
  if (a1 >> 62)
  {
LABEL_34:
    if (v5 < 0)
      v24 = v5;
    else
      v24 = v5 & 0xFFFFFFFFFFFFFF8;
    v6 = _CocoaArrayWrapper.endIndex.getter(v24);
  }
  else
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v30 = (os_unfair_lock_s **)(a2 + OBJC_IVAR____TtC4Maps20MapsFavoritesManager__shortcuts);
  swift_beginAccess(a2 + OBJC_IVAR____TtC4Maps20MapsFavoritesManager__shortcuts, v33, 0, 0);
  if (v6)
  {
    a2 = 0;
    v28 = v5 & 0xFFFFFFFFFFFFFF8;
    v29 = v5 & 0xC000000000000001;
    v26 = v5;
    v27 = v5 + 32;
    v25 = v6;
    while (1)
    {
      if (v29)
      {
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, v5);
      }
      else
      {
        if ((unint64_t)a2 >= *(_QWORD *)(v28 + 16))
          goto LABEL_33;
        v10 = *(id *)(v27 + 8 * a2);
      }
      v11 = v10;
      if (__OFADD__(a2++, 1))
        goto LABEL_32;
      v31 = a2;
      v13 = (uint64_t *)&(*v30)[4];
      v14 = *v30 + 6;
      swift_retain();
      os_unfair_lock_lock(v14);
      sub_10020E740(v13, &v32);
      if (v3)
        break;
      v3 = 0;
      os_unfair_lock_unlock(v14);
      a2 = v32;
      swift_release();
      if ((unint64_t)a2 >> 62)
      {
        if (a2 < 0)
          v22 = a2;
        else
          v22 = a2 & 0xFFFFFFFFFFFFFF8;
        v23 = v11;
        swift_bridgeObjectRetain(a2);
        v15 = _CocoaArrayWrapper.endIndex.getter(v22);
        if (v15)
        {
LABEL_14:
          v5 = a2 & 0xC000000000000001;
          v17 = 4;
          while (1)
          {
            v18 = v5
                ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17 - 4, a2)
                : *(id *)(a2 + 8 * v17);
            v19 = v18;
            v20 = v17 - 3;
            if (__OFADD__(v17 - 4, 1))
              break;
            v32 = (uint64_t)v18;
            v21 = sub_1000FE938((id *)&v32, v11);

            if ((v21 & 1) != 0)
            {

              swift_bridgeObjectRelease_n(a2, 2);
              goto LABEL_6;
            }
            ++v17;
            if (v20 == v15)
              goto LABEL_5;
          }
          __break(1u);
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
          goto LABEL_34;
        }
      }
      else
      {
        v15 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
        v16 = v11;
        swift_bridgeObjectRetain(a2);
        if (v15)
          goto LABEL_14;
      }
LABEL_5:

      v7 = swift_bridgeObjectRelease_n(a2, 2);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v7);
      v8 = v34[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v8);
      v9 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v11);
      specialized ContiguousArray._endMutation()(v9);
LABEL_6:
      v5 = v26;
      a2 = v31;
      if (v31 == v25)
        return;
    }
    os_unfair_lock_unlock(v14);
    __break(1u);
  }
}

_QWORD *sub_100105074(unint64_t a1, uint64_t (*a2)(id), _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  void *v10;
  unint64_t v11;
  _QWORD *v12;
  char v13;
  uint64_t v14;
  uint64_t (*v15)(id);
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v6 = a1;
  if (a1 >> 62)
    goto LABEL_18;
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v7)
  {
    while (1)
    {
      v8 = 0;
      v23 = v6 & 0xFFFFFFFFFFFFFF8;
      v24 = v6 & 0xC000000000000001;
      v22 = v6;
      while (v24)
      {
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v6);
LABEL_9:
        v10 = v9;
        v11 = v8 + 1;
        if (__OFADD__(v8, 1))
          goto LABEL_17;
        v12 = a3;
        v13 = a2(v9);
        if (v3)
        {
          swift_bridgeObjectRelease(v6);

          swift_release(_swiftEmptyArrayStorage);
          return v12;
        }
        if ((v13 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          v14 = v7;
          v15 = a2;
          v16 = a3;
          v17 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v17);
          v18 = v17;
          a3 = v16;
          a2 = v15;
          v7 = v14;
          v6 = v22;
          v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v10);
          specialized ContiguousArray._endMutation()(v19);
        }
        else
        {

        }
        ++v8;
        if (v11 == v7)
        {
          v12 = _swiftEmptyArrayStorage;
          goto LABEL_23;
        }
      }
      if (v8 < *(_QWORD *)(v23 + 16))
        break;
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      if (v6 < 0)
        v20 = v6;
      else
        v20 = v6 & 0xFFFFFFFFFFFFFF8;
      v7 = _CocoaArrayWrapper.endIndex.getter(v20);
      if (!v7)
        goto LABEL_22;
    }
    v9 = *(id *)(v6 + 8 * v8 + 32);
    goto LABEL_9;
  }
LABEL_22:
  v12 = _swiftEmptyArrayStorage;
LABEL_23:
  swift_bridgeObjectRelease(v6);
  return v12;
}

uint64_t sub_100105214(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  os_unfair_lock_s **v11;
  os_unfair_lock_s *v12;
  os_unfair_lock_s *v13;
  _BYTE v14[24];

  if (result)
  {
    v1 = result;
    v2 = type metadata accessor for MapsFavoritesManager();
    v3 = swift_unknownObjectRetain(v1);
    v4 = swift_dynamicCastClass(v3, v2);
    if (v4)
    {
      v5 = v4;
      if (qword_101490DC8 != -1)
        swift_once(&qword_101490DC8, sub_1000F9670);
      v6 = type metadata accessor for Logger(0);
      v7 = sub_10000E918(v6, (uint64_t)qword_1014D4938);
      v8 = Logger.logObject.getter(v7);
      v9 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v8, v9))
      {
        v10 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "LOIs changed", v10, 2u);
        swift_slowDealloc(v10, -1, -1);
      }

      v11 = (os_unfair_lock_s **)(v5 + OBJC_IVAR____TtC4Maps20MapsFavoritesManager__needsSuggestions);
      swift_beginAccess(v5 + OBJC_IVAR____TtC4Maps20MapsFavoritesManager__needsSuggestions, v14, 33, 0);
      v12 = *v11;
      v13 = *v11 + 5;
      os_unfair_lock_lock(v13);
      LOBYTE(v12[4]._os_unfair_lock_opaque) = 1;
      os_unfair_lock_unlock(v13);
      swift_endAccess(v14);
      return swift_unknownObjectRelease(v1);
    }
    else
    {
      return swift_unknownObjectRelease(v1);
    }
  }
  return result;
}

_BYTE *sub_10010538C(uint64_t a1, uint64_t a2)
{
  void *v3;
  _BYTE *result;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  id v10;
  _BYTE *v11;

  type metadata accessor for FavoriteItem(0, a2);
  v3 = (void *)MapsSyncObject.__allocating_init()();
  result = objc_msgSend(v3, "setSourceType:", 2);
  if (a1 < -32768)
  {
    __break(1u);
  }
  else if (a1 < 0x8000)
  {
    dispatch thunk of FavoriteItem.type.setter(a1);
    v5 = (id)NSStringFromMapsSuggestionsShortcutType(a1);
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v8 = v7;

    v9._countAndFlagsBits = 0x70757465535FLL;
    v9._object = (void *)0xE600000000000000;
    String.append(_:)(v9);
    dispatch thunk of FavoriteItem.shortcutIdentifier.setter(v6, v8);
    v10 = objc_allocWithZone((Class)type metadata accessor for MapsFavoriteItem());
    v11 = sub_10020E76C(v3);

    v11[OBJC_IVAR____TtC4Maps16MapsFavoriteItem_isShortcutForSetup] = 1;
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100105484(uint64_t a1)
{
  uint64_t v2;
  void **p_vtable;
  unint64_t v4;
  id v5;
  void *v6;
  int v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  _BYTE *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  int v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  _BYTE *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v42;

  if ((unint64_t)a1 >> 62)
    goto LABEL_45;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  p_vtable = DirectionsElevationNormalisedPoint.vtable;
  if (v2)
    goto LABEL_3;
  while (1)
  {
LABEL_14:
    swift_bridgeObjectRelease(a1);
    if (p_vtable[441] != (void *)-1)
      swift_once(&qword_101490DC8, sub_1000F9670);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_10000E918(v13, (uint64_t)qword_1014D4938);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Adding Home setup placeholder", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

    v19 = sub_10010538C(2, v18);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v19);
    v21 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
    v20 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v21 >= v20 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
    v22 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v19);
    specialized Array._endMutation()(v22);
    if (!v2)
      break;
    v4 = a1 & 0xC000000000000001;
    swift_bridgeObjectRetain(a1);
LABEL_22:
    if (v4)
      v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    else
      v23 = *(id *)(a1 + 32);
    v24 = v23;
    v25 = (unsigned __int16)dispatch thunk of FavoriteItem.type.getter();

    if (v25 == 3)
    {
LABEL_25:
      swift_bridgeObjectRelease(a1);
      return _swiftEmptyArrayStorage;
    }
    if (v2 == 1)
    {
LABEL_34:
      swift_bridgeObjectRelease(a1);
      break;
    }
    v26 = 5;
    while (1)
    {
      v27 = v4 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v26 - 4, a1) : *(id *)(a1 + 8 * v26);
      v28 = v27;
      v29 = v26 - 3;
      if (__OFADD__(v26 - 4, 1))
        break;
      v30 = (unsigned __int16)dispatch thunk of FavoriteItem.type.getter();

      if (v30 == 3)
        goto LABEL_25;
      ++v26;
      if (v29 == v2)
        goto LABEL_34;
    }
    __break(1u);
    while (1)
    {
      __break(1u);
LABEL_45:
      v42 = a1 < 0 ? a1 : a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v2 = _CocoaArrayWrapper.endIndex.getter(v42);
      p_vtable = (void **)(DirectionsElevationNormalisedPoint + 24);
      if (!v2)
        break;
LABEL_3:
      v4 = a1 & 0xC000000000000001;
      if ((a1 & 0xC000000000000001) != 0)
        v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
      else
        v5 = *(id *)(a1 + 32);
      v6 = v5;
      v7 = (unsigned __int16)dispatch thunk of FavoriteItem.type.getter();

      if (v7 == 2)
        goto LABEL_22;
      if (v2 == 1)
        goto LABEL_14;
      v8 = 5;
      while (1)
      {
        v9 = v4 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, a1) : *(id *)(a1 + 8 * v8);
        v10 = v9;
        v11 = v8 - 3;
        if (__OFADD__(v8 - 4, 1))
          break;
        v12 = (unsigned __int16)dispatch thunk of FavoriteItem.type.getter();

        if (v12 == 2)
          goto LABEL_22;
        ++v8;
        if (v11 == v2)
          goto LABEL_14;
      }
    }
  }
  if (p_vtable[441] != (void *)-1)
    swift_once(&qword_101490DC8, sub_1000F9670);
  v31 = type metadata accessor for Logger(0);
  v32 = sub_10000E918(v31, (uint64_t)qword_1014D4938);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v35 = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Adding Work setup placeholder", v35, 2u);
    swift_slowDealloc(v35, -1, -1);
  }

  v37 = sub_10010538C(3, v36);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v37);
  v39 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
  v38 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v39 >= v38 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1);
  v40 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v39, v37);
  specialized Array._endMutation()(v40);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10010587C()
{
  return swift_task_switch(sub_100105890, 0, 0);
}

uint64_t sub_100105890()
{
  _QWORD *v0;
  uint64_t v1;
  id v2;
  void *v3;
  uint64_t v4;
  id v5;
  _QWORD *v6;
  uint64_t (*v8)(void *);

  type metadata accessor for MapsSyncQueryPredicate(0);
  v1 = static MapsSyncQueryPredicate.mapsFavoritesPredicate(hidden:)(0);
  v2 = objc_allocWithZone((Class)type metadata accessor for MapsSyncQueryOptions(0));
  v3 = (void *)MapsSyncQueryOptions.init(predicate:sortDescriptors:range:)(v1, 0, 0);
  v0[2] = v3;
  type metadata accessor for FavoriteItemRequest(0);
  v0[3] = FavoriteItemRequest.__allocating_init()();
  v4 = *((unsigned int *)&async function pointer to dispatch thunk of FavoriteItemRequest.count(options:) + 1);
  v8 = (uint64_t (*)(void *))((char *)&async function pointer to dispatch thunk of FavoriteItemRequest.count(options:)
                                      + async function pointer to dispatch thunk of FavoriteItemRequest.count(options:));
  v5 = v3;
  v6 = (_QWORD *)swift_task_alloc(v4);
  v0[4] = v6;
  *v6 = v0;
  v6[1] = sub_100105958;
  return v8(v3);
}

uint64_t sub_100105958(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  void *v7;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 32);
  *(_QWORD *)(*v2 + 40) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100105A10;
  }
  else
  {
    v7 = *(void **)(v4 + 24);

    *(_QWORD *)(v4 + 48) = a1;
    v6 = sub_1001059D8;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1001059D8()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 48));
}

uint64_t sub_100105A10()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 16);
  v2 = *(void **)(v0 + 24);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100105A4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  double v18;
  double v19;
  double v20;
  id v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  id v27;
  double v28;
  double v29;
  void *v30;
  uint64_t v33;
  uint64_t v35;
  id v36;
  id v37;
  uint64_t v38;
  id v39;

  if (a3 != a2)
  {
    v5 = a3;
    v38 = *a4;
    v6 = *a4 + 8 * a3 - 8;
LABEL_7:
    v8 = *(void **)(v38 + 8 * v5);
    v9 = a1;
    v33 = v6;
    v35 = v5;
    while (1)
    {
      v10 = *(void **)v6;
      v11 = v8;
      v12 = v10;
      v7 = (void *)dispatch thunk of FavoriteItem.latitude.getter();
      v13 = (void *)dispatch thunk of FavoriteItem.longitude.getter();
      v14 = (void *)dispatch thunk of FavoriteItem.latitude.getter();
      v15 = dispatch thunk of FavoriteItem.longitude.getter();
      v16 = (void *)v15;
      if (!v7)
      {
        v7 = v13;
LABEL_5:

LABEL_6:
        ++v5;
        v6 = v33 + 8;
        if (v5 == a2)
          return;
        goto LABEL_7;
      }
      if (!v13)
        goto LABEL_5;
      if (!v14)
        break;
      if (!v15)
      {

        v16 = v7;
        goto LABEL_16;
      }
      v36 = v7;
      v37 = v13;
      v17 = v14;
      v39 = v16;
      objc_msgSend(v36, "doubleValue");
      v19 = v18;
      objc_msgSend(v37, "doubleValue");
      v21 = objc_msgSend(objc_allocWithZone((Class)CLLocation), "initWithLatitude:longitude:", v19, v20);
      objc_msgSend(v21, "distanceFromLocation:", a5);
      v23 = v22;

      objc_msgSend(v17, "doubleValue");
      v25 = v24;
      objc_msgSend(v39, "doubleValue");
      v27 = objc_msgSend(objc_allocWithZone((Class)CLLocation), "initWithLatitude:longitude:", v25, v26);
      objc_msgSend(v27, "distanceFromLocation:", a5);
      v29 = v28;

      v5 = v35;
      if (v23 >= v29)
        goto LABEL_6;
LABEL_17:
      if (!v38)
      {
        __break(1u);
        return;
      }
      v30 = *(void **)v6;
      v8 = *(void **)(v6 + 8);
      *(_QWORD *)v6 = v8;
      *(_QWORD *)(v6 + 8) = v30;
      v6 -= 8;
      if (v5 == ++v9)
        goto LABEL_6;
    }

LABEL_16:
    goto LABEL_17;
  }
}

void sub_100105CE8(uint64_t *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  Swift::Int v16;
  void *v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  Swift::Int v22;
  Swift::Int v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  double v35;
  double v36;
  double v37;
  id v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  id v44;
  double v45;
  double v46;
  uint64_t *v47;
  Swift::Int v48;
  Swift::Int v49;
  uint64_t *v50;
  uint64_t v51;
  Swift::Int v52;
  uint64_t v53;
  void *v54;
  Swift::Int v55;
  void *v56;
  void *v57;
  id v58;
  void *v59;
  void *v60;
  uint64_t v61;
  void *v62;
  id v63;
  id v64;
  id v65;
  double v66;
  double v67;
  double v68;
  id v69;
  double v70;
  double v71;
  double v72;
  double v73;
  void *v74;
  double v75;
  id v76;
  double v77;
  double v78;
  void *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  BOOL v106;
  uint64_t v107;
  char v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  BOOL v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  char *v129;
  unint64_t v130;
  char *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  Swift::Int v144;
  uint64_t v145;
  Swift::Int v146;
  char *v147;
  Swift::Int v148;
  Swift::Int v149;
  id *__dst;
  uint64_t v151;
  id v152;
  uint64_t v153;
  id v154;
  id v155;
  Swift::Int v156;
  Swift::Int v157;
  uint64_t v158;
  _BOOL4 __src;
  id __srca;
  void *v161;
  void *v162;
  uint64_t v163;

  v3 = v2;
  v5 = a1[1];
  v152 = a2;
  v6 = _minimumMergeRunLength(_:)(v5);
  if (v6 >= v5)
  {
    if (v5 < 0)
      goto LABEL_162;
    if (v5)
    {
      v11 = v152;
      sub_100105A4C(0, v5, 1, a1, (uint64_t)v11);

    }
    else
    {

    }
    return;
  }
  if (v5 >= 0)
    v7 = v5;
  else
    v7 = v5 + 1;
  if (v5 < -1)
    goto LABEL_170;
  v143 = a1;
  v144 = v6;
  v149 = v5;
  if (v5 < 2)
  {
    v12 = (char *)_swiftEmptyArrayStorage;
    v163 = (uint64_t)_swiftEmptyArrayStorage;
    __dst = (id *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v5 != 1)
    {
      v82 = _swiftEmptyArrayStorage[2];
      goto LABEL_127;
    }
  }
  else
  {
    v8 = v7 >> 1;
    v9 = type metadata accessor for MapsFavoriteItem();
    v10 = static Array._allocateBufferUninitialized(minimumCapacity:)(v8, v9);
    *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    __dst = (id *)((v10 & 0xFFFFFFFFFFFFFF8) + 32);
    v163 = v10;
  }
  v13 = 0;
  v14 = *v143;
  v142 = *v143 - 8;
  v12 = (char *)_swiftEmptyArrayStorage;
  v15 = v5;
  v153 = *v143;
  do
  {
    v147 = v12;
    v148 = v13;
    v16 = v13 + 1;
    if (v13 + 1 >= v15)
    {
      v23 = v13 + 1;
    }
    else
    {
      v17 = *(void **)(v14 + 8 * v16);
      v18 = v13;
      v19 = *(void **)(v14 + 8 * v13);
      v161 = v19;
      v162 = v17;
      v20 = v17;
      v21 = v19;
      __src = sub_1000FDC40((uint64_t)&v162, (uint64_t)&v161, (uint64_t)v152);
      if (v3)
      {
        swift_bridgeObjectRelease(v147);

        goto LABEL_139;
      }

      v22 = v18 + 2;
      v23 = v18 + 2;
      if (v18 + 2 < v149)
      {
        while (1)
        {
          while (1)
          {
            v24 = *(void **)(v14 + 8 * v16);
            v25 = *(id *)(v14 + 8 * v22);
            v26 = v24;
            v27 = (void *)dispatch thunk of FavoriteItem.latitude.getter();
            v28 = (void *)dispatch thunk of FavoriteItem.longitude.getter();
            v29 = (void *)dispatch thunk of FavoriteItem.latitude.getter();
            v30 = dispatch thunk of FavoriteItem.longitude.getter();
            v31 = (void *)v30;
            if (v27)
              break;
            v27 = v28;
LABEL_24:

            if (__src)
            {
              v23 = v22;
              v14 = v153;
              goto LABEL_38;
            }
            v23 = v22 + 1;
            v16 = v22;
            v22 = v23;
            v14 = v153;
            if (v23 >= v149)
              goto LABEL_46;
          }
          v12 = v147;
          if (!v28)
            goto LABEL_24;
          if (!v29)
          {

            goto LABEL_29;
          }
          if (v30)
          {
            v32 = v27;
            v155 = v28;
            v33 = v29;
            v34 = v31;
            objc_msgSend(v32, "doubleValue");
            v36 = v35;
            objc_msgSend(v155, "doubleValue");
            v38 = objc_msgSend(objc_allocWithZone((Class)CLLocation), "initWithLatitude:longitude:", v36, v37);
            objc_msgSend(v38, "distanceFromLocation:", v152);
            v40 = v39;

            objc_msgSend(v33, "doubleValue");
            v42 = v41;
            objc_msgSend(v34, "doubleValue");
            v44 = objc_msgSend(objc_allocWithZone((Class)CLLocation), "initWithLatitude:longitude:", v42, v43);
            objc_msgSend(v44, "distanceFromLocation:", v152);
            v46 = v45;

            if (((__src ^ (v40 >= v46)) & 1) == 0)
            {
              v23 = v22;
              v14 = v153;
              break;
            }
            v23 = v22 + 1;
            v16 = v22;
            v22 = v23;
            v14 = v153;
            if (v23 >= v149)
              break;
          }
          else
          {

            v31 = v27;
LABEL_29:

            v14 = v153;
            if (!__src)
            {
              v23 = v22;
              v3 = 0;
              v13 = v148;
              goto LABEL_47;
            }
            v23 = v22 + 1;
            v16 = v22;
            v22 = v23;
            if (v23 >= v149)
              goto LABEL_38;
          }
        }
      }
      if (!__src)
      {
LABEL_46:
        v3 = 0;
        v12 = v147;
        v13 = v148;
        goto LABEL_47;
      }
LABEL_38:
      v13 = v148;
      if (v23 < v148)
        goto LABEL_165;
      if (v148 < v23)
      {
        v47 = (uint64_t *)(v142 + 8 * v23);
        v48 = v23;
        v49 = v148;
        v50 = (uint64_t *)(v14 + 8 * v148);
        v3 = 0;
        v12 = v147;
        while (1)
        {
          if (v49 != --v48)
          {
            if (!v14)
              goto LABEL_168;
            v51 = *v50;
            *v50 = *v47;
            *v47 = v51;
          }
          ++v49;
          --v47;
          ++v50;
          if (v49 >= v48)
            goto LABEL_47;
        }
      }
      v3 = 0;
    }
    v12 = v147;
LABEL_47:
    if (v23 >= v149)
      goto LABEL_74;
    if (__OFSUB__(v23, v13))
      goto LABEL_161;
    if (v23 - v13 >= v144)
      goto LABEL_74;
    if (__OFADD__(v13, v144))
      goto LABEL_163;
    v52 = v149;
    if (v13 + v144 < v149)
      v52 = v13 + v144;
    if (v52 < v13)
    {
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:

      __break(1u);
LABEL_167:

      __break(1u);
LABEL_168:

      __break(1u);
LABEL_169:

      __break(1u);
LABEL_170:

      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
      __break(1u);
      return;
    }
    if (v23 == v52)
      goto LABEL_74;
    v145 = v3;
    v146 = v52;
    v53 = v142 + 8 * v23;
    while (2)
    {
      v56 = *(void **)(v14 + 8 * v23);
      v151 = v53;
      v156 = v23;
      while (1)
      {
        v57 = *(void **)v53;
        __srca = v56;
        v58 = v57;
        v54 = (void *)dispatch thunk of FavoriteItem.latitude.getter();
        v59 = (void *)dispatch thunk of FavoriteItem.longitude.getter();
        v60 = (void *)dispatch thunk of FavoriteItem.latitude.getter();
        v61 = dispatch thunk of FavoriteItem.longitude.getter();
        v62 = (void *)v61;
        if (!v54)
          break;
        if (!v59)
          goto LABEL_57;
        if (v60)
        {
          if (v61)
          {
            v154 = v54;
            v63 = v59;
            v64 = v60;
            v65 = v62;
            objc_msgSend(v154, "doubleValue");
            v67 = v66;
            objc_msgSend(v63, "doubleValue");
            v69 = objc_msgSend(objc_allocWithZone((Class)CLLocation), "initWithLatitude:longitude:", v67, v68);
            objc_msgSend(v69, "distanceFromLocation:", v152);
            v71 = v70;

            objc_msgSend(v64, "doubleValue");
            v73 = v72;
            v74 = v65;
            objc_msgSend(v65, "doubleValue");
            v76 = objc_msgSend(objc_allocWithZone((Class)CLLocation), "initWithLatitude:longitude:", v73, v75);
            objc_msgSend(v76, "distanceFromLocation:", v152);
            v78 = v77;

            v14 = v153;
            if (v71 >= v78)
              goto LABEL_58;
            goto LABEL_70;
          }

          v62 = v54;
        }
        else
        {

        }
LABEL_70:
        v55 = v156;
        if (!v14)
          goto LABEL_166;
        v79 = *(void **)v53;
        v56 = *(void **)(v53 + 8);
        *(_QWORD *)v53 = v56;
        *(_QWORD *)(v53 + 8) = v79;
        v53 -= 8;
        if (v156 == ++v13)
          goto LABEL_59;
      }
      v54 = v59;
LABEL_57:

LABEL_58:
      v55 = v156;
LABEL_59:
      v23 = v55 + 1;
      v53 = v151 + 8;
      v13 = v148;
      if (v23 != v146)
        continue;
      break;
    }
    v23 = v146;
    v3 = v145;
    v12 = v147;
LABEL_74:
    if (v23 < v13)
      goto LABEL_157;
    v157 = v23;
    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
      v12 = sub_1000DCBFC(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v81 = *((_QWORD *)v12 + 2);
    v80 = *((_QWORD *)v12 + 3);
    v82 = v81 + 1;
    if (v81 >= v80 >> 1)
      v12 = sub_1000DCBFC((char *)(v80 > 1), v81 + 1, 1, v12);
    *((_QWORD *)v12 + 2) = v82;
    v83 = v12 + 32;
    v84 = &v12[16 * v81 + 32];
    *(_QWORD *)v84 = v148;
    *((_QWORD *)v84 + 1) = v23;
    if (v81)
    {
      while (2)
      {
        v85 = v82 - 1;
        if (v82 >= 4)
        {
          v90 = &v83[16 * v82];
          v91 = *((_QWORD *)v90 - 8);
          v92 = *((_QWORD *)v90 - 7);
          v96 = __OFSUB__(v92, v91);
          v93 = v92 - v91;
          if (v96)
            goto LABEL_145;
          v95 = *((_QWORD *)v90 - 6);
          v94 = *((_QWORD *)v90 - 5);
          v96 = __OFSUB__(v94, v95);
          v88 = v94 - v95;
          v89 = v96;
          if (v96)
            goto LABEL_146;
          v97 = v82 - 2;
          v98 = &v83[16 * v82 - 32];
          v100 = *(_QWORD *)v98;
          v99 = *((_QWORD *)v98 + 1);
          v96 = __OFSUB__(v99, v100);
          v101 = v99 - v100;
          if (v96)
            goto LABEL_148;
          v96 = __OFADD__(v88, v101);
          v102 = v88 + v101;
          if (v96)
            goto LABEL_151;
          if (v102 >= v93)
          {
            v120 = &v83[16 * v85];
            v122 = *(_QWORD *)v120;
            v121 = *((_QWORD *)v120 + 1);
            v96 = __OFSUB__(v121, v122);
            v123 = v121 - v122;
            if (v96)
              goto LABEL_155;
            v113 = v88 < v123;
          }
          else
          {
LABEL_93:
            if ((v89 & 1) != 0)
              goto LABEL_147;
            v97 = v82 - 2;
            v103 = &v83[16 * v82 - 32];
            v105 = *(_QWORD *)v103;
            v104 = *((_QWORD *)v103 + 1);
            v106 = __OFSUB__(v104, v105);
            v107 = v104 - v105;
            v108 = v106;
            if (v106)
              goto LABEL_150;
            v109 = &v83[16 * v85];
            v111 = *(_QWORD *)v109;
            v110 = *((_QWORD *)v109 + 1);
            v96 = __OFSUB__(v110, v111);
            v112 = v110 - v111;
            if (v96)
              goto LABEL_153;
            if (__OFADD__(v107, v112))
              goto LABEL_154;
            if (v107 + v112 < v88)
              goto LABEL_105;
            v113 = v88 < v112;
          }
          if (v113)
            v85 = v97;
        }
        else
        {
          if (v82 == 3)
          {
            v87 = *((_QWORD *)v12 + 4);
            v86 = *((_QWORD *)v12 + 5);
            v96 = __OFSUB__(v86, v87);
            v88 = v86 - v87;
            v89 = v96;
            goto LABEL_93;
          }
          v114 = *((_QWORD *)v12 + 4);
          v115 = *((_QWORD *)v12 + 5);
          v96 = __OFSUB__(v115, v114);
          v107 = v115 - v114;
          v108 = v96;
LABEL_105:
          if ((v108 & 1) != 0)
            goto LABEL_149;
          v116 = &v83[16 * v85];
          v118 = *(_QWORD *)v116;
          v117 = *((_QWORD *)v116 + 1);
          v96 = __OFSUB__(v117, v118);
          v119 = v117 - v118;
          if (v96)
            goto LABEL_152;
          if (v119 < v107)
            goto LABEL_122;
        }
        v124 = v85 - 1;
        if (v85 - 1 >= v82)
        {
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
          goto LABEL_164;
        }
        if (!v14)
          goto LABEL_167;
        v125 = v14;
        v126 = &v83[16 * v124];
        v127 = v83;
        v128 = *(_QWORD *)v126;
        v129 = v127;
        v130 = v85;
        v131 = &v127[16 * v85];
        v132 = *((_QWORD *)v131 + 1);
        sub_1001048C0((id *)(v125 + 8 * *(_QWORD *)v126), (id *)(v125 + 8 * *(_QWORD *)v131), v125 + 8 * v132, __dst, v152);
        if (v3)
          goto LABEL_138;
        if (v132 < v128)
          goto LABEL_142;
        if (v130 > *((_QWORD *)v12 + 2))
          goto LABEL_143;
        *(_QWORD *)v126 = v128;
        *(_QWORD *)&v129[16 * v124 + 8] = v132;
        v133 = *((_QWORD *)v12 + 2);
        if (v130 >= v133)
          goto LABEL_144;
        v83 = v129;
        v82 = v133 - 1;
        memmove(v131, v131 + 16, 16 * (v133 - 1 - v130));
        *((_QWORD *)v12 + 2) = v133 - 1;
        v14 = v153;
        if (v133 <= 2)
          goto LABEL_122;
        continue;
      }
    }
    v82 = 1;
LABEL_122:
    v15 = v149;
    v13 = v157;
  }
  while (v157 < v149);
LABEL_127:
  if (v82 >= 2)
  {
    v134 = *v143;
    v158 = *v143;
    do
    {
      v135 = v82 - 2;
      if (v82 < 2)
        goto LABEL_156;
      if (!v134)
        goto LABEL_169;
      v136 = *(_QWORD *)&v12[16 * v135 + 32];
      v137 = *(_QWORD *)&v12[16 * v82 + 24];
      sub_1001048C0((id *)(v134 + 8 * v136), (id *)(v134 + 8 * *(_QWORD *)&v12[16 * v82 + 16]), v134 + 8 * v137, __dst, v152);
      if (v3)
        break;
      if (v137 < v136)
        goto LABEL_158;
      if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
        v12 = sub_1000DD110((uint64_t)v12);
      if (v135 >= *((_QWORD *)v12 + 2))
        goto LABEL_159;
      v138 = &v12[16 * v135 + 32];
      *(_QWORD *)v138 = v136;
      *((_QWORD *)v138 + 1) = v137;
      v139 = *((_QWORD *)v12 + 2);
      if (v82 > v139)
        goto LABEL_160;
      memmove(&v12[16 * v82 + 16], &v12[16 * v82 + 32], 16 * (v139 - v82));
      *((_QWORD *)v12 + 2) = v139 - 1;
      v82 = v139 - 1;
      v134 = v158;
    }
    while (v139 > 2);
  }
LABEL_138:
  swift_bridgeObjectRelease(v12);
LABEL_139:
  *(_QWORD *)((v163 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
  specialized Array._endMutation()(v140);
  v141 = v163;

  swift_bridgeObjectRelease(v141);
}

void sub_1001068EC(uint64_t *a1, void *a2)
{
  uint64_t v3;
  id v4;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9[2];

  v3 = *a1;
  v4 = a2;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v3);
  *a1 = v3;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v3 < 0 || (v3 & 0x4000000000000000) != 0)
  {
    v3 = sub_10020D8B8(v3);
    *a1 = v3;
  }
  v6 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v9[0] = (v3 & 0xFFFFFFFFFFFFFF8) + 32;
  v9[1] = v6;
  v7 = v4;
  sub_100105CE8(v9, v7);

  specialized Array._endMutation()(v8);
}

uint64_t sub_100106994(void **__src, id *a2, id *a3, void **__dst, uint64_t a5)
{
  void **v5;
  id *v6;
  id *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void **v19;
  void *v20;
  id v21;
  id v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  void **v28;
  unint64_t v29;
  id *v30;
  uint64_t v31;
  uint64_t v32;
  id *v33;
  void **v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  id *v38;
  void **v39;
  void *v40;
  id v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  unint64_t v47;
  void **v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t result;
  unint64_t v52;
  void **v53;
  unint64_t v54;
  unint64_t v56;
  id *v57;
  void **v58;
  id *v59;
  void **v60;
  id v61;
  id *v62;
  id *v63;
  id *v64;
  id *v65;
  void **v66;
  void **v67;
  id *v68;

  v5 = __dst;
  v6 = a3;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 3;
  v11 = (char *)a3 - (char *)a2;
  v12 = (char *)a3 - (char *)a2 + 7;
  if ((char *)a3 - (char *)a2 >= 0)
    v12 = (char *)a3 - (char *)a2;
  v13 = v12 >> 3;
  v68 = __src;
  v67 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[v13] <= __dst)
      {
        v33 = a2;
        memmove(__dst, a2, 8 * v13);
        a2 = v33;
      }
      v34 = &v5[v13];
      v66 = v34;
      v68 = a2;
      if (v7 < a2 && v11 >= 8)
      {
        v35 = *(_QWORD *)(a5 + 16);
        v36 = v35 - 1;
        v53 = v5;
        v54 = v35;
        if (v35 <= 1)
          v35 = 1;
        v52 = v35 - 1;
        v37 = a5 + 40;
        v38 = a2;
        v59 = v7;
        while (1)
        {
          v63 = v6;
          v65 = a2;
          v57 = v6 - 1;
          v39 = v34 - 1;
          v40 = *--v38;
          v41 = *(v34 - 1);
          v61 = v40;
          v42 = dispatch thunk of FavoriteItem.type.getter();
          if (v54)
          {
            v43 = *(_QWORD *)(a5 + 32);
            if (v43 == v42)
            {
              v44 = 0;
LABEL_55:
              v46 = dispatch thunk of FavoriteItem.type.getter();
              if (v43 != v46)
              {
                v49 = 0;
                while (v36 != v49)
                {
                  if (v52 == v49)
                  {
                    __break(1u);
LABEL_76:
                    __break(1u);
                    goto LABEL_77;
                  }
                  v50 = *(_QWORD *)(v37 + 8 * v49++);
                  if (v50 == v46)
                  {

                    if (v44 > v49 - 1)
                      goto LABEL_57;
                    v6 = v57;
                    v47 = (unint64_t)v59;
                    if (v63 != v65 || v57 >= v65)
                      *v57 = *v38;
                    v68 = v38;
                    goto LABEL_62;
                  }
                }
              }
            }
            else
            {
              v44 = 0;
              while (v36 != v44)
              {
                v45 = *(_QWORD *)(v37 + 8 * v44++);
                if (v45 == v42)
                  goto LABEL_55;
              }
            }
          }

LABEL_57:
          v66 = v34 - 1;
          v38 = v65;
          v6 = v57;
          v47 = (unint64_t)v59;
          if (v63 < v34 || v57 >= v34)
          {
            *v57 = *v39;
            --v34;
LABEL_62:
            v48 = v53;
            if ((unint64_t)v38 <= v47)
              goto LABEL_74;
          }
          else
          {
            v48 = v53;
            if (v63 != v34)
              *v57 = *v39;
            --v34;
            if (v65 <= v59)
              goto LABEL_74;
          }
          a2 = v38;
          if (v34 <= v48)
            goto LABEL_74;
        }
      }
      goto LABEL_74;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst)
    {
      v14 = a2;
      memmove(__dst, __src, 8 * v10);
      a2 = v14;
    }
    v60 = &v5[v10];
    v66 = v60;
    if (a2 < v6 && v8 >= 8)
    {
      v15 = *(_QWORD *)(a5 + 16);
      v16 = v15 - 1;
      v56 = v15;
      if (v15 <= 1)
        v15 = 1;
      v17 = v15 - 1;
      v18 = a5 + 40;
      v62 = v6;
      do
      {
        v58 = v7;
        v64 = a2;
        v19 = v5;
        v20 = *v5;
        v21 = *a2;
        v22 = v20;
        v23 = dispatch thunk of FavoriteItem.type.getter();
        if (v56)
        {
          v24 = *(_QWORD *)(a5 + 32);
          if (v24 == v23)
          {
            v25 = 0;
LABEL_21:
            v27 = dispatch thunk of FavoriteItem.type.getter();
            if (v24 != v27)
            {
              v31 = 0;
              while (v16 != v31)
              {
                if (v17 == v31)
                  goto LABEL_76;
                v32 = *(_QWORD *)(v18 + 8 * v31++);
                if (v32 == v27)
                {

                  if (v25 > v31 - 1)
                    goto LABEL_23;
                  v29 = (unint64_t)v62;
                  v30 = v64 + 1;
                  v28 = v58;
                  v5 = v19;
                  if (v58 < v64 || v58 >= v30 || v58 != v64)
                    *v58 = *v64;
                  goto LABEL_26;
                }
              }
            }
          }
          else
          {
            v25 = 0;
            while (v16 != v25)
            {
              v26 = *(_QWORD *)(v18 + 8 * v25++);
              if (v26 == v23)
                goto LABEL_21;
            }
          }
        }

LABEL_23:
        v28 = v58;
        v29 = (unint64_t)v62;
        if (v58 != v19)
          *v58 = *v19;
        v5 = v19 + 1;
        v67 = v19 + 1;
        v30 = v64;
LABEL_26:
        v7 = v28 + 1;
        if (v5 >= v60)
          break;
        a2 = v30;
      }
      while ((unint64_t)v30 < v29);
      v68 = v7;
    }
LABEL_74:
    sub_1000DCE40((void **)&v68, (const void **)&v67, &v66);
    return 1;
  }
LABEL_77:
  swift_bridgeObjectRelease(a5);
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

void sub_100106E18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v25;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a3 == a2)
    return;
  v5 = a5;
  v6 = *a4;
  v7 = *(_QWORD *)(a5 + 16);
  v8 = v7 - 1;
  v27 = v7;
  if (v7 <= 1)
    v7 = 1;
  v9 = v7 - 1;
  v10 = a5 + 40;
  v25 = *a4;
  do
  {
    v11 = *(void **)(v6 + 8 * a3);
    v29 = a3;
    while (2)
    {
      v28 = a3;
      v12 = a3 - 1;
      v13 = *(void **)(v6 + 8 * (a3 - 1));
      v14 = v11;
      v15 = v13;
      v16 = dispatch thunk of FavoriteItem.type.getter();
      if (!v27)
        goto LABEL_22;
      v17 = *(_QWORD *)(v5 + 32);
      if (v17 != v16)
      {
        v18 = 0;
        while (v8 != v18)
        {
          v19 = *(_QWORD *)(v10 + 8 * v18++);
          if (v19 == v16)
            goto LABEL_12;
        }
LABEL_21:
        v6 = v25;
        v5 = a5;
LABEL_22:

        break;
      }
      v18 = 0;
LABEL_12:
      v20 = dispatch thunk of FavoriteItem.type.getter();
      if (v17 == v20)
        goto LABEL_21;
      v21 = 0;
      do
      {
        if (v8 == v21)
          goto LABEL_21;
        if (v9 == v21)
        {
          __break(1u);
LABEL_27:
          __break(1u);
          return;
        }
        v22 = *(_QWORD *)(v10 + 8 * v21++);
      }
      while (v22 != v20);

      if (v18 > v21 - 1)
      {
        v6 = v25;
        v5 = a5;
        break;
      }
      v6 = v25;
      v5 = a5;
      if (!v25)
        goto LABEL_27;
      v11 = *(void **)(v25 + 8 * v28);
      *(_QWORD *)(v25 + 8 * v28) = *(_QWORD *)(v25 + 8 * v12);
      *(_QWORD *)(v25 + 8 * v12) = v11;
      a3 = v12;
      if (v12 != a1)
        continue;
      break;
    }
    a3 = v29 + 1;
  }
  while (v29 + 1 != a2);
}

void sub_100106FB0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  Swift::Int v14;
  uint64_t v15;
  Swift::Int v16;
  Swift::Int v17;
  Swift::Int v18;
  Swift::Int v19;
  void *v20;
  id v21;
  id v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  Swift::Int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  id v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  Swift::Int v48;
  Swift::Int v49;
  uint64_t *v50;
  uint64_t v51;
  Swift::Int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  Swift::Int v56;
  void *v57;
  Swift::Int v58;
  Swift::Int v59;
  void *v60;
  id v61;
  id v62;
  __int16 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  char v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  void **v119;
  id *v120;
  unint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  void **v130;
  id *v131;
  id *v132;
  uint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  Swift::Int v138;
  char *v139;
  char *v140;
  Swift::Int v141;
  Swift::Int v142;
  Swift::Int v143;
  Swift::Int v144;
  uint64_t v145;
  Swift::Int v146;
  _BOOL4 v147;
  unint64_t v148;
  void **__dst;
  unint64_t v150;
  Swift::Int v151;
  id *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;

  v3 = a2;
  v4 = a1;
  v5 = a1[1];
  swift_bridgeObjectRetain_n(a2, 3);
  v6 = _minimumMergeRunLength(_:)(v5);
  if (v6 >= v5)
  {
    if ((v5 & 0x8000000000000000) == 0)
    {
      if (v5)
      {
        swift_bridgeObjectRetain(v3);
        sub_100106E18(0, v5, 1, v4, v3);
        swift_bridgeObjectRelease_n(v3, 4);
      }
      else
      {
        swift_bridgeObjectRelease_n(v3, 3);
      }
      return;
    }
    goto LABEL_188;
  }
  if (v5 >= 0)
    v8 = v5;
  else
    v8 = v5 + 1;
  if (v5 < -1)
    goto LABEL_196;
  v138 = v6;
  v156 = v3;
  v146 = v5;
  v155 = v2;
  v137 = v4;
  if (v5 < 2)
  {
    v13 = (char *)_swiftEmptyArrayStorage;
    v157 = (uint64_t)_swiftEmptyArrayStorage;
    __dst = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v5 != 1)
    {
      v72 = _swiftEmptyArrayStorage[2];
LABEL_150:
      if (v72 < 2)
      {
LABEL_161:
        swift_bridgeObjectRelease(v13);
        *(_QWORD *)((v157 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
        specialized Array._endMutation()(v135);
        v125 = v157;
        v126 = v3;
        goto LABEL_162;
      }
      v127 = *v137;
      v154 = *v137;
      while (1)
      {
        v128 = v72 - 2;
        if (v72 < 2)
          goto LABEL_182;
        if (!v127)
          goto LABEL_195;
        v3 = *(_QWORD *)&v13[16 * v128 + 32];
        v129 = *(_QWORD *)&v13[16 * v72 + 24];
        v130 = (void **)(v127 + 8 * v3);
        v131 = (id *)(v127 + 8 * *(_QWORD *)&v13[16 * v72 + 16]);
        v132 = (id *)(v127 + 8 * v129);
        swift_bridgeObjectRetain(v156);
        sub_100106994(v130, v131, v132, __dst, v156);
        if (v155)
        {
          v123 = v13;
          goto LABEL_147;
        }
        swift_bridgeObjectRelease(v156);
        if (v129 < v3)
          goto LABEL_183;
        if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
          v13 = sub_1000DD110((uint64_t)v13);
        if (v128 >= *((_QWORD *)v13 + 2))
          goto LABEL_184;
        v133 = (uint64_t *)&v13[16 * v128 + 32];
        *v133 = v3;
        v133[1] = v129;
        v134 = *((_QWORD *)v13 + 2);
        if (v72 > v134)
          goto LABEL_185;
        memmove(&v13[16 * v72 + 16], &v13[16 * v72 + 32], 16 * (v134 - v72));
        *((_QWORD *)v13 + 2) = v134 - 1;
        v72 = v134 - 1;
        v3 = v156;
        v127 = v154;
        if (v134 <= 2)
          goto LABEL_161;
      }
    }
  }
  else
  {
    v9 = v4;
    v10 = v8 >> 1;
    v11 = type metadata accessor for FavoriteItem(0, v7);
    v12 = static Array._allocateBufferUninitialized(minimumCapacity:)(v10, v11);
    *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) = v10;
    v4 = v9;
    __dst = (void **)((v12 & 0xFFFFFFFFFFFFFF8) + 32);
    v157 = v12;
  }
  v14 = 0;
  v15 = *v4;
  v145 = v3 + 40;
  v136 = *v4 - 8;
  v13 = (char *)_swiftEmptyArrayStorage;
  v16 = v5;
  v153 = *v4;
  while (1)
  {
    v17 = v14;
    v18 = v14 + 1;
    if (v18 >= v16)
      goto LABEL_64;
    v139 = v13;
    v141 = v17;
    v19 = v18;
    v20 = *(void **)(v15 + 8 * v17);
    v21 = *(id *)(v15 + 8 * v18);
    v22 = v20;
    v23 = dispatch thunk of FavoriteItem.type.getter();
    v150 = *(_QWORD *)(v3 + 16);
    if (v150)
    {
      v24 = *(_QWORD *)(v3 + 32);
      if (v24 == v23)
      {
        v25 = 0;
LABEL_20:
        v27 = dispatch thunk of FavoriteItem.type.getter();
        if (v24 == v27)
        {
          v28 = 0;
LABEL_28:

          v147 = v25 < v28;
          goto LABEL_30;
        }
        v28 = 0;
        v29 = v150;
        if (v150 <= 1)
          v29 = 1;
        v30 = v29 - 1;
        while (v150 - 1 != v28)
        {
          if (v30 == v28)
            goto LABEL_181;
          v31 = *(_QWORD *)(v145 + 8 * v28++);
          if (v31 == v27)
            goto LABEL_28;
        }
      }
      else
      {
        v25 = 0;
        while (v150 - 1 != v25)
        {
          v26 = *(_QWORD *)(v145 + 8 * v25++);
          if (v26 == v23)
            goto LABEL_20;
        }
      }
    }

    v147 = 0;
LABEL_30:
    v32 = v141 + 2;
    v15 = v153;
    if (v141 + 2 < v146)
    {
      v33 = v19;
      v34 = v150;
      v35 = v150 - 1;
      if (v150 <= 1)
        v34 = 1;
      v36 = v34 - 1;
      while (1)
      {
        v37 = *(void **)(v15 + 8 * v33);
        v38 = *(id *)(v15 + 8 * v32);
        v39 = v37;
        v40 = dispatch thunk of FavoriteItem.type.getter();
        if (v150)
        {
          v41 = *(_QWORD *)(v3 + 32);
          if (v41 == v40)
          {
            v42 = 0;
LABEL_42:
            v44 = dispatch thunk of FavoriteItem.type.getter();
            if (v41 != v44)
            {
              v45 = 0;
              while (1)
              {
                if (v35 == v45)
                  goto LABEL_34;
                if (v36 == v45)
                  break;
                v46 = *(_QWORD *)(v145 + 8 * v45++);
                if (v46 == v44)
                  goto LABEL_48;
              }
LABEL_165:
              __break(1u);
LABEL_166:
              __break(1u);
LABEL_167:
              __break(1u);
LABEL_168:
              __break(1u);
LABEL_169:
              __break(1u);
LABEL_170:
              __break(1u);
LABEL_171:
              __break(1u);
LABEL_172:
              __break(1u);
LABEL_173:
              __break(1u);
LABEL_174:
              __break(1u);
LABEL_175:
              __break(1u);
LABEL_176:
              __break(1u);
LABEL_177:
              __break(1u);
LABEL_178:
              __break(1u);
LABEL_179:
              __break(1u);
LABEL_180:
              __break(1u);
LABEL_181:
              __break(1u);
LABEL_182:
              __break(1u);
LABEL_183:
              __break(1u);
LABEL_184:
              __break(1u);
LABEL_185:
              __break(1u);
LABEL_186:
              __break(1u);
LABEL_187:
              __break(1u);
LABEL_188:
              __break(1u);
LABEL_189:
              __break(1u);
LABEL_190:
              __break(1u);
LABEL_191:
              __break(1u);
LABEL_192:
              swift_bridgeObjectRelease_n(v156, 3);
              __break(1u);
LABEL_193:
              swift_bridgeObjectRelease_n(v3, 3);
              __break(1u);
LABEL_194:
              swift_bridgeObjectRelease_n(v3, 3);
              __break(1u);
LABEL_195:
              swift_bridgeObjectRelease_n(v156, 3);
              __break(1u);
LABEL_196:
              swift_bridgeObjectRelease_n(v3, 4);
              _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
              __break(1u);
              return;
            }
            v45 = 0;
LABEL_48:

            if (((v147 ^ (v42 >= v45)) & 1) == 0)
            {
              v13 = v139;
              v15 = v153;
              goto LABEL_52;
            }
            goto LABEL_35;
          }
          v42 = 0;
          while (v35 != v42)
          {
            v43 = *(_QWORD *)(v145 + 8 * v42++);
            if (v43 == v40)
              goto LABEL_42;
          }
        }
LABEL_34:

        if (v147)
        {
          v13 = v139;
          v17 = v141;
          v15 = v153;
          if (v32 < v141)
            goto LABEL_189;
          goto LABEL_56;
        }
LABEL_35:
        v33 = v32++;
        v15 = v153;
        if (v32 == v146)
        {
          v32 = v146;
          break;
        }
      }
    }
    v13 = v139;
LABEL_52:
    v18 = v32;
    v17 = v141;
    if (v147)
    {
      if (v32 < v141)
        goto LABEL_189;
LABEL_56:
      if (v17 < v32)
      {
        v47 = (uint64_t *)(v136 + 8 * v32);
        v48 = v32;
        v49 = v17;
        v50 = (uint64_t *)(v15 + 8 * v17);
        do
        {
          if (v49 != --v48)
          {
            if (!v15)
              goto LABEL_193;
            v51 = *v50;
            *v50 = *v47;
            *v47 = v51;
          }
          ++v49;
          --v47;
          ++v50;
        }
        while (v49 < v48);
      }
      v18 = v32;
    }
LABEL_64:
    v144 = v18;
    if (v18 >= v146)
      goto LABEL_96;
    if (__OFSUB__(v18, v17))
      goto LABEL_187;
    if (v18 - v17 >= v138)
      goto LABEL_96;
    if (__OFADD__(v17, v138))
      goto LABEL_190;
    v52 = v146;
    if (v17 + v138 < v146)
      v52 = v17 + v138;
    if (v52 < v17)
      goto LABEL_191;
    if (v144 == v52)
      goto LABEL_96;
    v140 = v13;
    v142 = v17;
    v53 = *(_QWORD *)(v3 + 16);
    v54 = v53 - 1;
    v148 = v53;
    if (v53 <= 1)
      v53 = 1;
    v55 = v53 - 1;
    v56 = v144;
    v143 = v52;
    do
    {
      v57 = *(void **)(v15 + 8 * v56);
      v58 = v56;
      do
      {
        v59 = v58 - 1;
        v60 = *(void **)(v15 + 8 * (v58 - 1));
        v61 = v57;
        v62 = v60;
        v63 = dispatch thunk of FavoriteItem.type.getter();
        if (!v148)
          goto LABEL_92;
        v151 = v58;
        v64 = *(_QWORD *)(v3 + 32);
        if (v64 != v63)
        {
          v65 = 0;
          while (v54 != v65)
          {
            v66 = *(_QWORD *)(v145 + 8 * v65++);
            if (v66 == v63)
              goto LABEL_82;
          }
LABEL_91:
          v3 = v156;
LABEL_92:

LABEL_93:
          v15 = v153;
          break;
        }
        v65 = 0;
LABEL_82:
        v67 = dispatch thunk of FavoriteItem.type.getter();
        if (v64 == v67)
          goto LABEL_91;
        v68 = 0;
        v3 = v156;
        do
        {
          if (v54 == v68)
            goto LABEL_92;
          if (v55 == v68)
          {
            __break(1u);
            goto LABEL_165;
          }
          v69 = *(_QWORD *)(v156 + 8 * v68++ + 40);
        }
        while (v69 != v67);

        if (v65 > v68 - 1)
          goto LABEL_93;
        v15 = v153;
        if (!v153)
          goto LABEL_194;
        v57 = *(void **)(v153 + 8 * v151);
        *(_QWORD *)(v153 + 8 * v151) = *(_QWORD *)(v153 + 8 * v59);
        *(_QWORD *)(v153 + 8 * v59) = v57;
        v58 = v59;
      }
      while (v59 != v142);
      ++v56;
    }
    while (v56 != v143);
    v144 = v143;
    v13 = v140;
    v17 = v142;
LABEL_96:
    if (v144 < v17)
      goto LABEL_186;
    if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
      v13 = sub_1000DCBFC(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
    v71 = *((_QWORD *)v13 + 2);
    v70 = *((_QWORD *)v13 + 3);
    v72 = v71 + 1;
    v15 = v153;
    if (v71 >= v70 >> 1)
    {
      v122 = sub_1000DCBFC((char *)(v70 > 1), v71 + 1, 1, v13);
      v15 = v153;
      v13 = v122;
    }
    *((_QWORD *)v13 + 2) = v72;
    v73 = v13 + 32;
    v74 = &v13[16 * v71 + 32];
    *(_QWORD *)v74 = v17;
    *((_QWORD *)v74 + 1) = v144;
    if (v71)
      break;
    v72 = 1;
LABEL_144:
    v16 = v146;
    v14 = v144;
    if (v144 >= v146)
      goto LABEL_150;
  }
  while (1)
  {
    v75 = v72 - 1;
    if (v72 >= 4)
    {
      v80 = &v73[16 * v72];
      v81 = *((_QWORD *)v80 - 8);
      v82 = *((_QWORD *)v80 - 7);
      v86 = __OFSUB__(v82, v81);
      v83 = v82 - v81;
      if (v86)
        goto LABEL_170;
      v85 = *((_QWORD *)v80 - 6);
      v84 = *((_QWORD *)v80 - 5);
      v86 = __OFSUB__(v84, v85);
      v78 = v84 - v85;
      v79 = v86;
      if (v86)
        goto LABEL_171;
      v87 = v72 - 2;
      v88 = &v73[16 * v72 - 32];
      v90 = *(_QWORD *)v88;
      v89 = *((_QWORD *)v88 + 1);
      v86 = __OFSUB__(v89, v90);
      v91 = v89 - v90;
      if (v86)
        goto LABEL_173;
      v86 = __OFADD__(v78, v91);
      v92 = v78 + v91;
      if (v86)
        goto LABEL_176;
      if (v92 >= v83)
      {
        v110 = &v73[16 * v75];
        v112 = *(_QWORD *)v110;
        v111 = *((_QWORD *)v110 + 1);
        v86 = __OFSUB__(v111, v112);
        v113 = v111 - v112;
        if (v86)
          goto LABEL_180;
        v103 = v78 < v113;
        goto LABEL_133;
      }
    }
    else
    {
      if (v72 != 3)
      {
        v104 = *((_QWORD *)v13 + 4);
        v105 = *((_QWORD *)v13 + 5);
        v86 = __OFSUB__(v105, v104);
        v97 = v105 - v104;
        v98 = v86;
        goto LABEL_127;
      }
      v77 = *((_QWORD *)v13 + 4);
      v76 = *((_QWORD *)v13 + 5);
      v86 = __OFSUB__(v76, v77);
      v78 = v76 - v77;
      v79 = v86;
    }
    if ((v79 & 1) != 0)
      goto LABEL_172;
    v87 = v72 - 2;
    v93 = &v73[16 * v72 - 32];
    v95 = *(_QWORD *)v93;
    v94 = *((_QWORD *)v93 + 1);
    v96 = __OFSUB__(v94, v95);
    v97 = v94 - v95;
    v98 = v96;
    if (v96)
      goto LABEL_175;
    v99 = &v73[16 * v75];
    v101 = *(_QWORD *)v99;
    v100 = *((_QWORD *)v99 + 1);
    v86 = __OFSUB__(v100, v101);
    v102 = v100 - v101;
    if (v86)
      goto LABEL_178;
    if (__OFADD__(v97, v102))
      goto LABEL_179;
    if (v97 + v102 >= v78)
    {
      v103 = v78 < v102;
LABEL_133:
      if (v103)
        v75 = v87;
      goto LABEL_135;
    }
LABEL_127:
    if ((v98 & 1) != 0)
      goto LABEL_174;
    v106 = &v73[16 * v75];
    v108 = *(_QWORD *)v106;
    v107 = *((_QWORD *)v106 + 1);
    v86 = __OFSUB__(v107, v108);
    v109 = v107 - v108;
    if (v86)
      goto LABEL_177;
    if (v109 < v97)
      goto LABEL_144;
LABEL_135:
    v114 = v75 - 1;
    if (v75 - 1 >= v72)
      goto LABEL_166;
    if (!v15)
      goto LABEL_192;
    v115 = (uint64_t *)&v73[16 * v114];
    v116 = *v115;
    v117 = v75;
    v118 = &v73[16 * v75];
    v3 = *((_QWORD *)v118 + 1);
    v119 = (void **)(v15 + 8 * *v115);
    v120 = (id *)(v15 + 8 * *(_QWORD *)v118);
    v152 = (id *)(v15 + 8 * v3);
    swift_bridgeObjectRetain(v156);
    sub_100106994(v119, v120, v152, __dst, v156);
    if (v155)
      break;
    swift_bridgeObjectRelease(v156);
    if (v3 < v116)
      goto LABEL_167;
    if (v117 > *((_QWORD *)v13 + 2))
      goto LABEL_168;
    *v115 = v116;
    v73 = v13 + 32;
    *(_QWORD *)&v13[16 * v114 + 40] = v3;
    v121 = *((_QWORD *)v13 + 2);
    if (v117 >= v121)
      goto LABEL_169;
    v72 = v121 - 1;
    memmove(v118, v118 + 16, 16 * (v121 - 1 - v117));
    *((_QWORD *)v13 + 2) = v121 - 1;
    v3 = v156;
    v15 = v153;
    if (v121 <= 2)
      goto LABEL_144;
  }
  v123 = v13;
LABEL_147:
  swift_bridgeObjectRelease(v123);
  swift_bridgeObjectRelease(v156);
  *(_QWORD *)((v157 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
  specialized Array._endMutation()(v124);
  v125 = v157;
  v126 = v156;
LABEL_162:
  swift_bridgeObjectRelease_n(v126, 3);
  swift_bridgeObjectRelease(v125);
}

uint64_t sub_100107A40(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[2];

  v4 = *a1;
  swift_bridgeObjectRetain_n(a2, 2);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
  *a1 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v4 = sub_1000DF680(v4);
    *a1 = v4;
  }
  v6 = *(_QWORD *)(v4 + 16);
  v9[0] = v4 + 32;
  v9[1] = v6;
  swift_bridgeObjectRetain(a2);
  sub_100106FB0(v9, a2);
  swift_bridgeObjectRelease(a2);
  specialized ContiguousArray._endMutation()(v7);
  return swift_bridgeObjectRelease_n(a2, 2);
}

uint64_t sub_100107AE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t ObjectType;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD v29[4];

  v9 = sub_100008B04(&qword_101494070);
  __chkstk_darwin(v9);
  v11 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for TaskPriority(0);
  v13 = *(_QWORD *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
  v14 = (_QWORD *)swift_allocObject(a1, 40, 7);
  v14[2] = 0;
  v15 = v14 + 2;
  v14[3] = 0;
  v14[4] = v4;
  v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  v17 = v4;
  if (v16 == 1)
  {
    sub_100010CC4((uint64_t)v11, &qword_101494070);
    v18 = 0;
    v19 = 0;
    v20 = 7168;
  }
  else
  {
    v21 = TaskPriority.rawValue.getter(v17);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v11, v12);
    v20 = v21 | 0x1C00;
    v22 = *v15;
    if (*v15)
    {
      v23 = v14[3];
      ObjectType = swift_getObjectType(*v15);
      swift_unknownObjectRetain(v22);
      v18 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v23);
      v19 = v25;
      swift_unknownObjectRelease(v22);
    }
    else
    {
      v18 = 0;
      v19 = 0;
    }
  }
  v26 = swift_allocObject(a2, 32, 7);
  *(_QWORD *)(v26 + 16) = a3;
  *(_QWORD *)(v26 + 24) = v14;
  if (v19 | v18)
  {
    v29[0] = 0;
    v29[1] = 0;
    v27 = v29;
    v29[2] = v18;
    v29[3] = v19;
  }
  else
  {
    v27 = 0;
  }
  swift_task_create(v20, v27, (char *)&type metadata for () + 8, a4, v26);
  return swift_release();
}

uint64_t sub_100107CBC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 72) = a1;
  return swift_task_switch(sub_100107CD4, 0, 0);
}

uint64_t sub_100107CD4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v35[2];

  v1 = v0[9];
  v2 = sub_100008B04((uint64_t *)&unk_10149AA10);
  inited = swift_initStackObject(v2, v0 + 2);
  *(_OWORD *)(inited + 16) = xmmword_100E22F50;
  *(_OWORD *)(inited + 32) = xmmword_100E2B920;
  *(_QWORD *)(inited + 48) = 2;
  v4 = v0[9];
  if (v1 < 0 || (v1 & 0x4000000000000000) != 0)
  {
    v32 = swift_bridgeObjectRetain(v0[9]);
    v5 = (uint64_t)sub_1000D8BE8(v32);
    swift_bridgeObjectRetain(inited);
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    v5 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v0[9]);
    swift_bridgeObjectRetain(inited);
  }
  v35[0] = v5;
  sub_100107A40(v35, inited);
  swift_bridgeObjectRelease(inited);
  v6 = v35[0];
  v0[10] = v35[0];
  swift_setDeallocating(inited);
  if (v6 < 0 || (v6 & 0x4000000000000000) != 0)
  {
    swift_retain();
    v7 = _CocoaArrayWrapper.endIndex.getter(v33);
  }
  else
  {
    v7 = *(_QWORD *)(v6 + 16);
    swift_retain();
  }
  v0[11] = v7;
  v8 = v0[10];
  if (v7)
  {
    if ((v8 & 0xC000000000000001) != 0)
      v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v0[10]);
    else
      v9 = *(id *)(v8 + 32);
    v15 = v9;
    v0[12] = v9;
    v0[13] = 1;
    if (qword_101490DC8 != -1)
      swift_once(&qword_101490DC8, sub_1000F9670);
    v16 = type metadata accessor for Logger(0);
    sub_10000E918(v16, (uint64_t)qword_1014D4938);
    v17 = v15;
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      v35[0] = v21;
      *(_DWORD *)v20 = 136315138;
      v22 = objc_msgSend(v17, "description");
      v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
      v25 = v24;

      *(_QWORD *)(v20 + 4) = sub_1000C28FC(v23, v25, v35);
      swift_bridgeObjectRelease(v25);

      _os_log_impl((void *)&_mh_execute_header, v18, v19, "[Migration] moving favorite to front: %s", (uint8_t *)v20, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);
    }
    else
    {

    }
    v26 = swift_task_alloc(32);
    v0[14] = v26;
    *(_QWORD *)(v26 + 16) = v17;
    v27 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    v0[15] = v27;
    *v27 = v0;
    v27[1] = sub_1001080F8;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v27, 0, 0, 0xD000000000000013, 0x8000000100E49CF0, sub_1001085A8, v26, (char *)&type metadata for () + 8);
  }
  else
  {
    swift_release();
    type metadata accessor for MapsSyncStore(0);
    v0[17] = static MapsSyncStore.sharedStore.getter();
    v11 = v0[10];
    if (v8 < 0 || (v8 & 0x4000000000000000) != 0)
    {
      v29 = type metadata accessor for MapsSyncObject(0, v10);
      v30 = swift_bridgeObjectRetain(v11);
      v14 = _bridgeCocoaArray<A>(_:)(v30, v29);
      swift_release();
    }
    else
    {
      v12 = swift_bridgeObjectRetain(v0[10]);
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v12);
      type metadata accessor for MapsSyncObject(0, v13);
      v14 = v0[10];
    }
    v0[18] = v14;
    swift_release();
    v34 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of MapsSyncStore.save(objects:)
                                          + async function pointer to dispatch thunk of MapsSyncStore.save(objects:));
    v31 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of MapsSyncStore.save(objects:)
                                     + 1));
    v0[19] = v31;
    *v31 = v0;
    v31[1] = sub_1001084F4;
    return v34(v14);
  }
}

uint64_t sub_1001080F8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 120);
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1001084A8;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 112));
    v4 = sub_100108164;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100108164()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t (*v29)(uint64_t);
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 88);

  if (v1 != v2)
  {
    v9 = *(_QWORD *)(v0 + 104);
    v10 = *(_QWORD *)(v0 + 80);
    if ((v10 & 0xC000000000000001) != 0)
      v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(*(_QWORD *)(v0 + 104), v10);
    else
      v11 = *(id *)(v10 + 8 * v9 + 32);
    v16 = v11;
    *(_QWORD *)(v0 + 96) = v11;
    *(_QWORD *)(v0 + 104) = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
    }
    else if (qword_101490DC8 == -1)
    {
LABEL_12:
      v17 = type metadata accessor for Logger(0);
      sub_10000E918(v17, (uint64_t)qword_1014D4938);
      v18 = v16;
      v19 = Logger.logObject.getter(v18);
      v20 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v19, v20))
      {
        v21 = swift_slowAlloc(12, -1);
        v22 = swift_slowAlloc(32, -1);
        v30 = v22;
        *(_DWORD *)v21 = 136315138;
        v23 = objc_msgSend(v18, "description");
        v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
        v26 = v25;

        *(_QWORD *)(v21 + 4) = sub_1000C28FC(v24, v26, &v30);
        swift_bridgeObjectRelease(v26);

        _os_log_impl((void *)&_mh_execute_header, v19, v20, "[Migration] moving favorite to front: %s", (uint8_t *)v21, 0xCu);
        swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v22, -1, -1);
        swift_slowDealloc(v21, -1, -1);
      }
      else
      {

      }
      v27 = swift_task_alloc(32);
      *(_QWORD *)(v0 + 112) = v27;
      *(_QWORD *)(v27 + 16) = v18;
      v28 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
      *(_QWORD *)(v0 + 120) = v28;
      *v28 = v0;
      v28[1] = sub_1001080F8;
      return withCheckedThrowingContinuation<A>(isolation:function:_:)(v28, 0, 0, 0xD000000000000013, 0x8000000100E49CF0, sub_1001085A8, v27, (char *)&type metadata for () + 8);
    }
    swift_once(&qword_101490DC8, sub_1000F9670);
    goto LABEL_12;
  }
  v3 = *(_QWORD *)(v0 + 80);
  swift_release();
  type metadata accessor for MapsSyncStore(0);
  *(_QWORD *)(v0 + 136) = static MapsSyncStore.sharedStore.getter();
  v5 = *(_QWORD *)(v0 + 80);
  if (v3 < 0 || (v3 & 0x4000000000000000) != 0)
  {
    v12 = type metadata accessor for MapsSyncObject(0, v4);
    v13 = swift_bridgeObjectRetain(v5);
    v8 = _bridgeCocoaArray<A>(_:)(v13, v12);
    swift_release();
  }
  else
  {
    v6 = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 80));
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v6);
    type metadata accessor for MapsSyncObject(0, v7);
    v8 = *(_QWORD *)(v0 + 80);
  }
  *(_QWORD *)(v0 + 144) = v8;
  swift_release();
  v29 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of MapsSyncStore.save(objects:)
                                        + async function pointer to dispatch thunk of MapsSyncStore.save(objects:));
  v14 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of MapsSyncStore.save(objects:)
                                   + 1));
  *(_QWORD *)(v0 + 152) = v14;
  *v14 = v0;
  v14[1] = sub_1001084F4;
  return v29(v8);
}

uint64_t sub_1001084A8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(void **)(v0 + 96);
  swift_release_n(*(_QWORD *)(v0 + 80), 2);
  swift_task_dealloc(v1);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001084F4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;

  v2 = *(_QWORD *)(*v1 + 152);
  v3 = *v1;
  *(_QWORD *)(v3 + 160) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100108570, 0, 0);
  v5 = *(void **)(v3 + 136);
  swift_bridgeObjectRelease(*(_QWORD *)(v3 + 144));

  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100108570()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 136);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 144));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1001085A8(uint64_t a1)
{
  uint64_t v1;

  sub_100103810(a1, *(void **)(v1 + 16));
}

uint64_t sub_1001085B0()
{
  return sub_1001087AC(&qword_1014A0C00);
}

uint64_t sub_1001085BC(uint64_t a1)
{
  sub_100008B04(&qword_1014A0C00);
  return sub_100103940(a1);
}

double sub_1001085FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_10010860C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100108620()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = sub_100008B04((uint64_t *)&unk_10149AA20);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  if (*(_QWORD *)(v0 + v5))
    swift_release();
  return swift_deallocObject(v0, v5 + 16, v3 | 7);
}

uint64_t sub_10010869C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(sub_100008B04((uint64_t *)&unk_10149AA20) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_100103F28(a1, a2, v2 + v6, *(uint64_t (**)(id))v7, *(_QWORD **)(v7 + 8));
}

uint64_t sub_100108708()
{
  return sub_1001087AC(&qword_10149AA38);
}

uint64_t sub_100108714(uint64_t a1, uint64_t a2)
{
  return sub_10010881C(a1, a2, &qword_10149AA38, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1001033A4);
}

uint64_t sub_10010872C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_10149AA44);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10000DD08;
  v3[18] = v2;
  v4 = (_QWORD *)swift_task_alloc(dword_10149AA54);
  v3[19] = v4;
  *v4 = v3;
  v4[1] = sub_1000FDE6C;
  return sub_10010402C();
}

void sub_100108798(uint64_t a1)
{
  uint64_t v1;

  sub_1001042F4(a1, *(void **)(v1 + 16));
}

uint64_t sub_1001087A0()
{
  return sub_1001087AC((uint64_t *)&unk_10149AA60);
}

uint64_t sub_1001087AC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = sub_100008B04(a1);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 16) & ~v4;
  v6 = v5 + *(_QWORD *)(v3 + 64);
  v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return swift_deallocObject(v1, v6, v7);
}

uint64_t sub_100108808(uint64_t a1, uint64_t a2)
{
  return sub_10010881C(a1, a2, (uint64_t *)&unk_10149AA60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100104450);
}

uint64_t sub_10010881C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(sub_100008B04(a3) - 8) + 80);
  return a4(a1, a2, v4 + ((v7 + 16) & ~v7));
}

uint64_t sub_100108878()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10010889C()
{
  uint64_t v0;

  return sub_100100C28(*(char **)(v0 + 16));
}

uint64_t sub_1001088A8(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6]);
}

double sub_1001088BC()
{
  uint64_t v0;

  return sub_1000FE7F8(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1001088CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_10149AAA4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10000DD08;
  v3[3] = v2;
  v4 = (_QWORD *)swift_task_alloc(dword_10149A7CC);
  v3[4] = v4;
  *v4 = v3;
  v4[1] = sub_1000FAB6C;
  return sub_1000FCB8C();
}

uint64_t sub_100108938()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10010895C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10149ADA4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10000DD08;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10149ADA0 + dword_10149ADA0))(a1, v4);
}

uint64_t sub_1001089D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_10149AABC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10000DD08;
  v3[6] = v2;
  return swift_task_switch(sub_100100F98, 0, 0);
}

uint64_t sub_100108A30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10149ADA4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10000C0E0;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10149ADA0 + dword_10149ADA0))(a1, v4);
}

uint64_t sub_100108AA4()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_10149AAD4);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10000DD08;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_10149AAD0 + dword_10149AAD0))(v2, v3);
}

uint64_t sub_100108B10(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1014A0B84);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10000DD08;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1014A0B80 + dword_1014A0B80))(a1, v4, v5, v6);
}

uint64_t sub_100108B98()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100108BC4()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  _QWORD *v3;

  v2 = *(const void **)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_10149AAF4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10000DD08;
  return ((uint64_t (*)(const void *))((char *)&dword_10149AAF0 + dword_10149AAF0))(v2);
}

uint64_t sub_100108C30()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100108C5C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_10149AB1C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_10000DD08;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_10149AB18 + dword_10149AB18))(v2, v3, v4);
}

uint64_t sub_100108CD0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100108D00()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

_BYTE *sub_100108D2C(_BYTE *result)
{
  uint64_t v1;

  *result = **(_BYTE **)(v1 + 16);
  return result;
}

unint64_t sub_100108D7C()
{
  unint64_t result;

  result = qword_10149AB78;
  if (!qword_10149AB78)
  {
    result = swift_getWitnessTable("1p7", &type metadata for DirectionsOnRadioEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_10149AB78);
  }
  return result;
}

uint64_t sub_100108DC0()
{
  return sub_100010D70(&qword_10149AB80, &qword_10149AB88, (const char *)&protocol conformance descriptor for _IntentUpdatableEntityProperty<A, B, C>);
}

uint64_t sub_100108DEC()
{
  uint64_t v0;
  __n128 v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[2];

  v0 = sub_100008B04(&qword_101494370);
  v1 = __chkstk_darwin(v0);
  v3 = (char *)v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0, v1);
  v4 = *(_QWORD *)(v23[0] - 8);
  __chkstk_darwin(v23[0]);
  v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for String.LocalizationValue(0, v8);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for LocalizedStringResource(0, v12);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for TypeDisplayRepresentation(0, v17);
  sub_10000E930(v20, qword_1014D49B8);
  sub_10000E918(v20, (uint64_t)qword_1014D49B8);
  v21 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000013, 0x8000000100E49D60);
  static Locale.current.getter(v21);
  (*(void (**)(char *, _QWORD, _QWORD))(v4 + 104))(v6, enum case for LocalizedStringResource.BundleDescription.main(_:), v23[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v10, v6, "On cars that support it, hear spoken directions when you're listening to the radio.", 83, 2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v3, 1, 1, v15);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v19, v3);
}

uint64_t sub_100109000(__n128 a1)
{
  uint64_t v1;

  v1 = type metadata accessor for LocalizedStringResource(0, a1);
  sub_10000E930(v1, qword_1014D49D0);
  sub_10000E918(v1, (uint64_t)qword_1014D49D0);
  return LocalizedStringResource.init(stringLiteral:)(0xD00000000000001ALL, 0x8000000100E49EB0);
}

uint64_t sub_100109060()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_100008B04(&qword_1014964F0);
  sub_10000E930(v0, qword_1014D49E8);
  v1 = sub_10000E918(v0, (uint64_t)qword_1014D49E8);
  IntentDescription.init(stringLiteral:)(0xD00000000000003BLL, 0x8000000100E49E70);
  v2 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 0, 1, v2);
}

uint64_t sub_1001090E8()
{
  uint64_t result;

  result = swift_getKeyPath(&unk_100E2BF18);
  qword_1014D4A00 = result;
  return result;
}

uint64_t sub_10010910C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  return swift_task_switch(sub_100109128, 0, 0);
}

uint64_t sub_100109128()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v0 + 24) = v1;
  *(_QWORD *)(v0 + 72) = v1;
  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 146));
  *(_BYTE *)(v0 + 145) = *(_BYTE *)(v0 + 146);
  if (qword_101490E50 != -1)
    swift_once(&qword_101490E50, sub_1001090E8);
  v2 = qword_1014D4A00;
  *(_QWORD *)(v0 + 80) = qword_1014D4A00;
  v3 = async function pointer to AppEntity._setValue<A, B, C>(_:for:)[1];
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  *(_QWORD *)(v0 + 88) = v4;
  v5 = sub_100010D70(&qword_10149AC88, &qword_10149AC90, (const char *)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  *(_QWORD *)(v0 + 96) = v5;
  *v4 = v0;
  v4[1] = sub_100109228;
  return AppEntity._setValue<A, B, C>(_:for:)(v0 + 145, v2, &type metadata for Bool, v5);
}

uint64_t sub_100109228()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  swift_release();
  swift_release();
  if (v0)
    v3 = sub_100072D78;
  else
    v3 = sub_1001092A8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001092A8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  IntentParameter.wrappedValue.getter(v0 + 5);
  v1 = v0[5];
  v0[4] = v1;
  v2 = qword_1014D4A00;
  v0[14] = v1;
  v0[15] = v2;
  v3 = async function pointer to AppEntity._value<A, B>(for:)[1];
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  v0[16] = v4;
  *v4 = v0;
  v4[1] = sub_100072CA0;
  return AppEntity._value<A, B>(for:)(v0 + 18, v2, v0[12]);
}

double sub_10010933C()
{
  double result;

  if (qword_101490E50 != -1)
    swift_once(&qword_101490E50, sub_1001090E8);
  *(_QWORD *)&result = swift_retain().n128_u64[0];
  return result;
}

unint64_t sub_100109380()
{
  unint64_t result;

  result = qword_10149AB90;
  if (!qword_10149AB90)
  {
    result = swift_getWitnessTable(byte_100E2BAE0, &type metadata for DirectionsOnRadioEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_10149AB90);
  }
  return result;
}

unint64_t sub_1001093C8()
{
  unint64_t result;

  result = qword_10149AB98;
  if (!qword_10149AB98)
  {
    result = swift_getWitnessTable(byte_100E2BB08, &type metadata for DirectionsOnRadioEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_10149AB98);
  }
  return result;
}

uint64_t sub_10010940C(uint64_t a1)
{
  return *(_QWORD *)(swift_getOpaqueTypeConformance2(a1, &unk_1010688AC, 1) + 8);
}

uint64_t sub_100109430(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_100108D7C();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t sub_100109470@<X0>(uint64_t a1@<X8>)
{
  return sub_100073694(&qword_101490E40, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1014D49D0, (uint64_t)sub_100109000, a1);
}

uint64_t sub_100109494@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_101490E48 != -1)
    swift_once(&qword_101490E48, sub_100109060);
  v2 = sub_100008B04(&qword_1014964F0);
  v3 = sub_10000E918(v2, (uint64_t)qword_1014D49E8);
  return sub_1000742A4(v3, a1);
}

uint64_t sub_1001094F4(uint64_t a1)
{
  _OWORD *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = swift_task_alloc(dword_10149ACA4);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_10000DD08;
  *(_OWORD *)(v4 + 56) = *v1;
  *(_QWORD *)(v4 + 48) = a1;
  return swift_task_switch(sub_100109128, 0, 0);
}

uint64_t sub_10010955C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_10010A0B4();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_100109580()
{
  return 0xD000000000000028;
}

unint64_t sub_1001095A0()
{
  unint64_t result;

  result = qword_10149ABA8;
  if (!qword_10149ABA8)
  {
    result = swift_getWitnessTable(byte_100E2BB54, &type metadata for DirectionsOnRadioEntity);
    atomic_store(result, (unint64_t *)&qword_10149ABA8);
  }
  return result;
}

unint64_t sub_1001095E8()
{
  unint64_t result;

  result = qword_10149ABB0;
  if (!qword_10149ABB0)
  {
    result = swift_getWitnessTable(byte_100E2BD4C, &type metadata for DirectionsOnRadioQuery);
    atomic_store(result, (unint64_t *)&qword_10149ABB0);
  }
  return result;
}

unint64_t sub_100109630()
{
  unint64_t result;

  result = qword_10149ABB8;
  if (!qword_10149ABB8)
  {
    result = swift_getWitnessTable(byte_100E2BBAC, &type metadata for DirectionsOnRadioEntity);
    atomic_store(result, (unint64_t *)&qword_10149ABB8);
  }
  return result;
}

unint64_t sub_100109678()
{
  unint64_t result;

  result = qword_10149ABC0;
  if (!qword_10149ABC0)
  {
    result = swift_getWitnessTable(byte_100E2BBE4, &type metadata for DirectionsOnRadioEntity);
    atomic_store(result, (unint64_t *)&qword_10149ABC0);
  }
  return result;
}

unint64_t sub_1001096C0()
{
  unint64_t result;

  result = qword_10149ABC8;
  if (!qword_10149ABC8)
  {
    result = swift_getWitnessTable(byte_100E2BC14, &type metadata for DirectionsOnRadioEntity);
    atomic_store(result, (unint64_t *)&qword_10149ABC8);
  }
  return result;
}

unint64_t sub_100109708()
{
  unint64_t result;

  result = qword_10149ABD0;
  if (!qword_10149ABD0)
  {
    result = swift_getWitnessTable(byte_100E2BDC4, &type metadata for DirectionsOnRadioQuery);
    atomic_store(result, (unint64_t *)&qword_10149ABD0);
  }
  return result;
}

uint64_t sub_10010974C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100109764, 0, 0);
}

uint64_t sub_100109764()
{
  uint64_t v0;
  uint64_t v1;
  Block_layout *v2;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  void *v8;
  unsigned __int8 BOOL;
  unsigned __int8 v10;
  unsigned __int8 *v11;

  v1 = qword_1014C6C80[0];
  v2 = &stru_1011A2A08;
  if (v1 != -1)
    dispatch_once(qword_1014C6C80, &stru_1011A2A08);

  v3 = (id)qword_1014C6C78;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "path"));
  v5 = (id)_CFPreferencesCopyAppValueWithContainer(CFSTR("NavVolumeSettingUseHFP"), CFSTR("com.apple.Maps"), v4);

  v6 = NavigationConfig_SpokenGuidanceUseHFP[1];
  if (v5)
  {
    if ((_GEOConfigHasValue(NavigationConfig_SpokenGuidanceUseHFP[0], v6) & 1) == 0)
    {
      v7 = objc_msgSend(v5, "BOOLValue");
      GEOConfigSetBOOL(NavigationConfig_SpokenGuidanceUseHFP[0], NavigationConfig_SpokenGuidanceUseHFP[1], v7);
    }
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[MSPMapsPaths mapsApplicationContainerPaths](MSPMapsPaths, "mapsApplicationContainerPaths"));
    _CFPreferencesSetValueWithContainer(CFSTR("NavVolumeSettingUseHFP"), 0, CFSTR("com.apple.Maps"), kCFPreferencesCurrentUser, kCFPreferencesAnyHost, objc_msgSend(v8, "homeDirectory"));

    BOOL = objc_msgSend(v5, "BOOLValue");
  }
  else
  {
    BOOL = GEOConfigGetBOOL(NavigationConfig_SpokenGuidanceUseHFP[0], v6);
  }
  v10 = BOOL;
  v11 = *(unsigned __int8 **)(v0 + 16);

  *v11 = v10;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001098D4(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 16) = *a2;
  return swift_task_switch(sub_1001098F0, 0, 0);
}

uint64_t sub_1001098F0()
{
  uint64_t v0;
  int BOOL;

  GEOConfigSetSyncBOOL(NavigationConfig_SpokenGuidanceUseHFP, *((_QWORD *)&NavigationConfig_SpokenGuidanceUseHFP + 1), *(unsigned __int8 *)(v0 + 16));
  BOOL = GEOConfigGetBOOL(MapsConfig_PreferencesUniqueEntityDidUpdate, off_1014B5518);
  GEOConfigSetBOOL(MapsConfig_PreferencesUniqueEntityDidUpdate, off_1014B5518, BOOL ^ 1u);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_100109960()
{
  unint64_t result;

  result = qword_10149ABD8;
  if (!qword_10149ABD8)
  {
    result = swift_getWitnessTable(byte_100E2BC4C, &type metadata for DirectionsOnRadioEntity);
    atomic_store(result, (unint64_t *)&qword_10149ABD8);
  }
  return result;
}

unint64_t sub_1001099A8()
{
  unint64_t result;

  result = qword_10149ABE0;
  if (!qword_10149ABE0)
  {
    result = swift_getWitnessTable("Mo7", &type metadata for DirectionsOnRadioEntity);
    atomic_store(result, (unint64_t *)&qword_10149ABE0);
  }
  return result;
}

unint64_t sub_1001099F0()
{
  unint64_t result;

  result = qword_10149ABE8;
  if (!qword_10149ABE8)
  {
    result = swift_getWitnessTable("5o7", &type metadata for DirectionsOnRadioEntity);
    atomic_store(result, (unint64_t *)&qword_10149ABE8);
  }
  return result;
}

unint64_t sub_100109A38()
{
  unint64_t result;

  result = qword_10149ABF0;
  if (!qword_10149ABF0)
  {
    result = swift_getWitnessTable(byte_100E2BCF4, &type metadata for DirectionsOnRadioEntity);
    atomic_store(result, (unint64_t *)&qword_10149ABF0);
  }
  return result;
}

uint64_t sub_100109A7C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = sub_100109C44();
  result = UniqueAppEntity<>.id.getter(a1, v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_100109AB8@<X0>(uint64_t a1@<X8>)
{
  return sub_100073694(&qword_101490E38, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_1014D49B8, (uint64_t)sub_100108DEC, a1);
}

uint64_t sub_100109ADC()
{
  return sub_100010D70(&qword_10149ABF8, &qword_10149AC00, (const char *)&protocol conformance descriptor for EmptyResolverSpecification<A>);
}

uint64_t sub_100109B08(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001095A0();
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_100109B44()
{
  unint64_t result;

  result = qword_10149AC08;
  if (!qword_10149AC08)
  {
    result = swift_getWitnessTable(byte_100E2BD24, &type metadata for DirectionsOnRadioEntity);
    atomic_store(result, (unint64_t *)&qword_10149AC08);
  }
  return result;
}

uint64_t sub_100109B88(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100109C44();
  return UniqueAppEntity.displayRepresentation.getter(a1, v2);
}

uint64_t sub_100109BC0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100109A38();
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_100109BFC()
{
  unint64_t result;

  result = qword_10149AC10;
  if (!qword_10149AC10)
  {
    result = swift_getWitnessTable(byte_100E2BD8C, &type metadata for DirectionsOnRadioQuery);
    atomic_store(result, (unint64_t *)&qword_10149AC10);
  }
  return result;
}

unint64_t sub_100109C44()
{
  unint64_t result;

  result = qword_10149AC18[0];
  if (!qword_10149AC18[0])
  {
    result = swift_getWitnessTable(byte_100E2BB24, &type metadata for DirectionsOnRadioEntity);
    atomic_store(result, qword_10149AC18);
  }
  return result;
}

uint64_t sub_100109C88(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 16) = a1;
  v3 = type metadata accessor for LocalizedStringResource(0, a2);
  *(_QWORD *)(v2 + 24) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100109CE0, 0, 0);
}

uint64_t sub_100109CE0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  sub_100008B04(&qword_10149AB88);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000013, 0x8000000100E49D60);
  v3 = sub_100010D70(&qword_10149AC88, &qword_10149AC90, (const char *)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  *v2 = _IntentUpdatableEntityProperty<>.init(title:get:set:intent:)(v1, &unk_10149AC78, 0, &unk_10149AC80, 0, &type metadata for DirectionsOnRadioEntity.UpdateIntent_value, v3);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100109D9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to UniqueAppEntityQuery.allEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_1001095E8();
  *v4 = v2;
  v4[1] = sub_100073A34;
  return UniqueAppEntityQuery.allEntities()(a2, v5);
}

unint64_t sub_100109E08()
{
  unint64_t result;

  result = qword_10149AC30;
  if (!qword_10149AC30)
  {
    result = swift_getWitnessTable(byte_100E2BE1C, &type metadata for DirectionsOnRadioQuery);
    atomic_store(result, (unint64_t *)&qword_10149AC30);
  }
  return result;
}

unint64_t sub_100109E50()
{
  unint64_t result;

  result = qword_10149AC38[0];
  if (!qword_10149AC38[0])
  {
    result = swift_getWitnessTable("}l7", &type metadata for DirectionsOnRadioQuery);
    atomic_store(result, qword_10149AC38);
  }
  return result;
}

uint64_t sub_100109E94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to UniqueAppEntityQuery.entities(for:)[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_1001095E8();
  *v5 = v2;
  v5[1] = sub_100073B94;
  return UniqueAppEntityQuery.entities(for:)(a1, a2, v6);
}

uint64_t sub_100109F00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to UniqueAppEntityQuery.suggestedEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_1001095E8();
  *v4 = v2;
  v4[1] = sub_1000742EC;
  return UniqueAppEntityQuery.suggestedEntities()(a2, v5);
}

unint64_t sub_100109F6C()
{
  unint64_t result;

  result = qword_10149AC50;
  if (!qword_10149AC50)
  {
    result = swift_getWitnessTable("el7", &type metadata for DirectionsOnRadioQuery);
    atomic_store(result, (unint64_t *)&qword_10149AC50);
  }
  return result;
}

unint64_t sub_100109FB4()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_10149AC58;
  if (!qword_10149AC58)
  {
    v1 = sub_10000E5D4(qword_10149AC60);
    v2 = sub_1001099F0();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_10149AC58);
  }
  return result;
}

uint64_t sub_10010A018(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100109708();
  *v5 = v2;
  v5[1] = sub_10000C0E0;
  return EntityQuery.results()(a1, a2, v6);
}

ValueMetadata *type metadata accessor for DirectionsOnRadioQuery()
{
  return &type metadata for DirectionsOnRadioQuery;
}

ValueMetadata *type metadata accessor for DirectionsOnRadioEntity()
{
  return &type metadata for DirectionsOnRadioEntity;
}

ValueMetadata *type metadata accessor for DirectionsOnRadioEntity.UpdateIntent_value()
{
  return &type metadata for DirectionsOnRadioEntity.UpdateIntent_value;
}

uint64_t sub_10010A0B4()
{
  uint64_t v0;
  __n128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  char *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v27;
  void (*v28)(char *);
  unsigned int v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  char *v31;
  char *v32;
  char v33;
  uint64_t v34;

  v0 = sub_100008B04(&qword_1014964C0);
  v1 = __chkstk_darwin(v0);
  v32 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for InputConnectionBehavior(0, v1);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v31 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100008B04(&qword_1014964C8);
  __chkstk_darwin(v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v27 - v10;
  v12 = sub_100008B04(&qword_101494370);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for LocalizedStringResource(0, v13);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100008B04(&qword_10149AC98);
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000001DLL, 0x8000000100E49E10);
  v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
  v30(v15, 1, 1, v16);
  v34 = 0;
  v20 = type metadata accessor for IntentDialog(0);
  v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56);
  v21(v11, 1, 1, v20);
  v21(v8, 1, 1, v20);
  v29 = enum case for InputConnectionBehavior.default(_:);
  v28 = *(void (**)(char *))(v4 + 104);
  v22 = v31;
  v28(v31);
  v23 = sub_1001095A0();
  v27 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v19, v15, &v34, v11, v8, v22, v23);
  sub_100008B04(&qword_1014964D8);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000034, 0x8000000100E49E30);
  v30(v15, 1, 1, v16);
  v33 = 2;
  v24 = type metadata accessor for Bool.IntentDisplayName(0);
  v25 = v32;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v32, 1, 1, v24);
  v21(v11, 1, 1, v20);
  ((void (*)(char *, _QWORD, uint64_t))v28)(v22, v29, v3);
  IntentParameter<>.init(title:description:default:displayName:requestValueDialog:inputConnectionBehavior:)(v19, v15, &v33, v25, v11, v22);
  return v27;
}

double sub_10010A3D8@<D0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *a1;
  *a2 = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

void sub_10010A3E4(id a1)
{
  id v1;
  uint64_t v2;
  id v3;

  v1 = objc_msgSend(objc_alloc((Class)LSApplicationRecord), "initWithBundleIdentifier:allowPlaceholder:error:", CFSTR("com.apple.Maps"), 0, 0);
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "dataContainerURL"));
  v3 = (id)qword_1014C6C78;
  qword_1014C6C78 = v2;

}

uint64_t sub_10010A44C()
{
  return swift_initClassMetadata2();
}

uint64_t sub_10010A48C()
{
  return 1;
}

uint64_t sub_10010A494(uint64_t a1)
{
  objc_class *v1;
  objc_class *v2;
  id v4;
  uint64_t v5;

  v2 = v1;
  v4 = objc_allocWithZone(v1);
  v5 = sub_10010A6F0(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)((char *)v2 + qword_1014D4A08) - 8) + 8))(a1);
  return v5;
}

void *sub_10010A4F4(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return sub_10010A534(a1, a2);
}

void *sub_10010A534(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void (*v10)(uint64_t, uint64_t);
  id v11;
  uint64_t v13;

  v5 = *(_QWORD *)((swift_isaMask & *v2) + qword_1014D4A08);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(a1);
  v8 = (char *)&v13 - v7;
  (*(void (**)(char *))(v6 + 16))((char *)&v13 - v7);
  v9 = (void *)UIHostingController.init(coder:rootView:)(a1, v8);
  v10 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v11 = v9;
  v10(a2, v5);
  if (v9)

  return v9;
}

id sub_10010A5F4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v6;
  id v7;
  objc_super v9;

  v6 = (objc_class *)type metadata accessor for SecureHostingController(0, *(_QWORD *)((swift_isaMask & *v4) + qword_1014D4A08), *(_QWORD *)((swift_isaMask & *v4) + qword_1014D4A08 + 8), a4);
  v9.receiver = v4;
  v9.super_class = v6;
  v7 = objc_msgSendSuper2(&v9, "initWithCoder:", a1);

  return v7;
}

id sub_10010A668(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  return sub_10010A5F4(v3, v4, v5, v6);
}

id sub_10010A68C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for SecureHostingController(0, *(_QWORD *)((swift_isaMask & *v4) + qword_1014D4A08), *(_QWORD *)((swift_isaMask & *v4) + qword_1014D4A08 + 8), a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, "dealloc");
}

uint64_t type metadata accessor for SecureHostingController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10001A6E8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SecureHostingController);
}

uint64_t sub_10010A6F0(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v5;

  __chkstk_darwin(a1);
  v2 = (char *)&v5 - v1;
  (*(void (**)(char *))(v3 + 16))((char *)&v5 - v1);
  return UIHostingController.init(rootView:)(v2);
}

void sub_10010A85C(void *a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  void *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  _QWORD *v24;
  id v25;
  id v26;
  uint64_t v27;
  NSObject *v28;

  v4 = v3;
  v8 = sub_100008B04(&qword_101494070);
  __chkstk_darwin(v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)&v3[OBJC_IVAR____TtC4Maps33SearchFindMyFriendshipCoordinator_handleId];
  v11 = *(_QWORD *)&v3[OBJC_IVAR____TtC4Maps33SearchFindMyFriendshipCoordinator_handleId + 8];
  v13 = swift_bridgeObjectRetain(v11);
  v14 = Handle.identifier.getter(v13);
  if (v12 == v14 && v11 == v15)
  {
    swift_bridgeObjectRelease_n(v11, 2);
    goto LABEL_12;
  }
  v17 = v15;
  v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v11, v14, v15, 0);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v17);
  if ((v18 & 1) != 0)
  {
LABEL_12:
    v23 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v10, 1, 1, v23);
    v24 = (_QWORD *)swift_allocObject(&unk_1011A2E48, 64, 7);
    v24[2] = 0;
    v24[3] = 0;
    v24[4] = v4;
    v24[5] = a1;
    v24[6] = a2;
    v24[7] = a3;
    v25 = v4;
    v26 = a1;
    swift_retain();
    sub_1001B0C08((uint64_t)v10, (uint64_t)&unk_10149ADC8, (uint64_t)v24);
    swift_release();
    return;
  }
  if (qword_101490EB8 != -1)
    swift_once(&qword_101490EB8, sub_1001147FC);
  v19 = type metadata accessor for Logger(0);
  v20 = sub_10000E918(v19, (uint64_t)qword_1014D4B38);
  v28 = Logger.logObject.getter(v20);
  v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v28, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, v21, "SearchFindMyFriendshipCoordinator handle identifier and passed handle do not match", v22, 2u);
    swift_slowDealloc(v22, -1, -1);
  }

}

uint64_t sub_10010AA8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v7[29] = a6;
  v7[30] = a7;
  v7[27] = a4;
  v7[28] = a5;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v7[31] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[32] = v9;
  v7[33] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v7[34] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v7[35] = v11;
  v7[36] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Location(0);
  v7[37] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v7[38] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v7[39] = v14;
  v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[40] = swift_task_alloc(v15);
  v7[41] = swift_task_alloc(v15);
  v16 = type metadata accessor for Handle(0);
  v7[42] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v7[43] = v17;
  v7[44] = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (*(_QWORD *)(*(_QWORD *)(sub_100008B04(&qword_10149E650) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[45] = swift_task_alloc(v18);
  v7[46] = swift_task_alloc(v18);
  v19 = type metadata accessor for ClientOrigin(0);
  v7[47] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v7[48] = v20;
  v7[49] = swift_task_alloc((*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for RequestOrigin(0);
  v7[50] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v21 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10010ABF8, 0, 0);
}

uint64_t sub_10010ABF8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[49];
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[48] + 104))(v1, enum case for ClientOrigin.other(_:), v0[47]);
  RequestOrigin.init(_:)(v1);
  v2 = type metadata accessor for Session(0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v3 = (_QWORD *)swift_task_alloc(async function pointer to Session.init(_:)[1]);
  v0[51] = v3;
  *v3 = v0;
  v3[1] = sub_10010AC8C;
  return Session.init(_:)(v0[50]);
}

uint64_t sub_10010AC8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 408);
  *(_QWORD *)(*(_QWORD *)v1 + 416) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10010ACE8, 0, 0);
}

uint64_t sub_10010ACE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  char *v10;
  uint8_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double Double;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *(_QWORD *)(v0 + 216);
  v2 = OBJC_IVAR____TtC4Maps33SearchFindMyFriendshipCoordinator_session;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps33SearchFindMyFriendshipCoordinator_session) = *(_QWORD *)(v0 + 416);
  swift_release();
  v3 = *(_QWORD *)(v1 + v2);
  *(_QWORD *)(v0 + 424) = v3;
  if (v3)
  {
    v4 = qword_101490EB8;
    swift_retain();
    if (v4 != -1)
      swift_once(&qword_101490EB8, sub_1001147FC);
    v5 = *(void **)(v0 + 216);
    v6 = type metadata accessor for Logger(0);
    *(_QWORD *)(v0 + 432) = sub_10000E918(v6, (uint64_t)qword_1014D4B38);
    v7 = Logger.logObject.getter(v5);
    v8 = static os_log_type_t.info.getter();
    v9 = os_log_type_enabled(v7, v8);
    v10 = *(char **)(v0 + 216);
    if (v9)
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = swift_slowAlloc(32, -1);
      v31 = v30;
      *(_DWORD *)v11 = 136315138;
      v12 = *(_QWORD *)&v10[OBJC_IVAR____TtC4Maps33SearchFindMyFriendshipCoordinator_handleId];
      v13 = *(_QWORD *)&v10[OBJC_IVAR____TtC4Maps33SearchFindMyFriendshipCoordinator_handleId + 8];
      swift_bridgeObjectRetain(v13);
      *(_QWORD *)(v0 + 208) = sub_1000C28FC(v12, v13, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v11 + 4, v11 + 12);
      swift_bridgeObjectRelease(v13);

      _os_log_impl((void *)&_mh_execute_header, v7, v8, "SearchFindMyFriendshipCoordinator: Calling FM to get fresh location for handle:%s", v11, 0xCu);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }
    else
    {

    }
    (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 344) + 16))(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 224) + OBJC_IVAR____TtC4Maps18SearchFindMyHandle_handle, *(_QWORD *)(v0 + 336));
    Double = GEOConfigGetDouble(MapsConfig_SearchACLocationRefreshInterval, off_1014B4E78);
    v29 = (_QWORD *)swift_task_alloc(dword_101499244);
    *(_QWORD *)(v0 + 440) = v29;
    *v29 = v0;
    v29[1] = sub_10010B078;
    return Session._maps_latestLocation(for:includeAddress:timeout:)(*(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 352), 0, Double);
  }
  else
  {
    if (qword_101490EB8 != -1)
      swift_once(&qword_101490EB8, sub_1001147FC);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_10000E918(v14, (uint64_t)qword_1014D4B38);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "SearchFindMyFriendshipCoordinator couldn't create a session.", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }

    v19 = *(_QWORD *)(v0 + 392);
    v21 = *(_QWORD *)(v0 + 360);
    v20 = *(_QWORD *)(v0 + 368);
    v22 = *(_QWORD *)(v0 + 352);
    v24 = *(_QWORD *)(v0 + 320);
    v23 = *(_QWORD *)(v0 + 328);
    v25 = *(_QWORD *)(v0 + 288);
    v26 = *(_QWORD *)(v0 + 264);
    swift_task_dealloc(*(_QWORD *)(v0 + 400));
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10010B078()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 440);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 344);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 352);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 336);
  *(_QWORD *)(*(_QWORD *)v1 + 448) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0)
    v6 = sub_10010B784;
  else
    v6 = sub_10010B0FC;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10010B0FC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  os_log_type_t v8;
  BOOL v9;
  char *v10;
  uint8_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  char *v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v1 = v0[45];
  v2 = v0[37];
  v3 = v0[38];
  sub_10000C1FC(v0[46], v1, &qword_10149E650);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  v5 = v0[45];
  if (v4 == 1)
  {
    v6 = (void *)v0[27];
    sub_100010CC4(v5, &qword_10149E650);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter();
    v9 = os_log_type_enabled(v7, v8);
    v10 = (char *)v0[27];
    if (v9)
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v79 = v12;
      *(_DWORD *)v11 = 136315138;
      v14 = *(_QWORD *)&v10[OBJC_IVAR____TtC4Maps33SearchFindMyFriendshipCoordinator_handleId];
      v13 = *(_QWORD *)&v10[OBJC_IVAR____TtC4Maps33SearchFindMyFriendshipCoordinator_handleId + 8];
      swift_bridgeObjectRetain(v13);
      v0[22] = sub_1000C28FC(v14, v13, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 22, v0 + 23, v11 + 4, v11 + 12);
      swift_bridgeObjectRelease(v13);

      _os_log_impl((void *)&_mh_execute_header, v7, v8, "SearchFindMyFriendshipCoordinator couldn't find location for handle:%s", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }
    else
    {

    }
    v78 = v0[46];
    v24 = v0[36];
    v25 = v0[33];
    v74 = v0[35];
    v77 = v0[34];
    v26 = v0[31];
    v73 = v0[32];
    v28 = v0[29];
    v27 = v0[30];
    v29 = sub_10009729C();
    v30 = (void *)static OS_dispatch_queue.main.getter(v29);
    v31 = swift_allocObject(&unk_1011A2EC0, 32, 7);
    *(_QWORD *)(v31 + 16) = v28;
    *(_QWORD *)(v31 + 24) = v27;
    v0[19] = v31;
    v0[18] = sub_10010D910;
    v0[14] = _NSConcreteStackBlock;
    v0[15] = 1107296256;
    v0[16] = sub_1001BB8D4;
    v0[17] = &unk_1011A2ED8;
    v32 = _Block_copy(v0 + 14);
    swift_retain();
    static DispatchQoS.unspecified.getter(v33);
    v0[21] = _swiftEmptyArrayStorage;
    v34 = sub_10000E540();
    v35 = sub_100008B04((uint64_t *)&unk_101492FB0);
    v36 = sub_10000E588();
    dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 21, v35, v36, v26, v34);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v24, v25, v32);
    swift_release();
    _Block_release(v32);

    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v25, v26);
    (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v24, v77);
  }
  else
  {
    v15 = (void *)v0[27];
    v76 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[38] + 32);
    v76(v0[41], v5, v0[37]);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter();
    v18 = os_log_type_enabled(v16, v17);
    v19 = (char *)v0[27];
    if (v18)
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      v79 = v21;
      *(_DWORD *)v20 = 136315138;
      v22 = *(_QWORD *)&v19[OBJC_IVAR____TtC4Maps33SearchFindMyFriendshipCoordinator_handleId];
      v23 = *(_QWORD *)&v19[OBJC_IVAR____TtC4Maps33SearchFindMyFriendshipCoordinator_handleId + 8];
      swift_bridgeObjectRetain(v23);
      v0[25] = sub_1000C28FC(v22, v23, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 25, v0 + 26, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease(v23);

      _os_log_impl((void *)&_mh_execute_header, v16, v17, "SearchFindMyFriendshipCoordinator did find location for handle:%s", v20, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);
    }
    else
    {

    }
    v78 = v0[46];
    v37 = v0[40];
    v38 = v0[41];
    v39 = v0[38];
    v40 = v0[39];
    v41 = v0[37];
    v67 = v0[36];
    v72 = v0[35];
    v75 = v0[34];
    v69 = v0[33];
    v70 = v38;
    v42 = v0[31];
    v71 = v0[32];
    v43 = v0[29];
    v44 = v0[30];
    v45 = sub_10009729C();
    v68 = (void *)static OS_dispatch_queue.main.getter(v45);
    v46 = v39;
    v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16);
    v48 = v41;
    v47(v37, v38, v41);
    v49 = *(unsigned __int8 *)(v46 + 80);
    v50 = v46;
    v51 = (v49 + 32) & ~v49;
    v52 = swift_allocObject(&unk_1011A2F10, v51 + v40, v49 | 7);
    *(_QWORD *)(v52 + 16) = v43;
    *(_QWORD *)(v52 + 24) = v44;
    v76(v52 + v51, v37, v48);
    v0[13] = v52;
    v0[12] = sub_10010D80C;
    v0[8] = _NSConcreteStackBlock;
    v0[9] = 1107296256;
    v0[10] = sub_1001BB8D4;
    v0[11] = &unk_1011A2F28;
    v53 = _Block_copy(v0 + 8);
    swift_retain();
    static DispatchQoS.unspecified.getter(v54);
    v0[24] = _swiftEmptyArrayStorage;
    v55 = sub_10000E540();
    v56 = sub_100008B04((uint64_t *)&unk_101492FB0);
    v57 = sub_10000E588();
    dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 24, v56, v57, v42, v55);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v67, v69, v53);
    _Block_release(v53);

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v69, v42);
    (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v67, v75);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v70, v48);
  }
  sub_100010CC4(v78, &qword_10149E650);
  swift_release();
  v58 = v0[49];
  v60 = v0[45];
  v59 = v0[46];
  v61 = v0[44];
  v63 = v0[40];
  v62 = v0[41];
  v64 = v0[36];
  v65 = v0[33];
  swift_task_dealloc(v0[50]);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_10010B784()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = v0[56];
  swift_release();
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = v0[56];
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138412290;
    swift_errorRetain(v5);
    v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    v0[20] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 20, v0 + 21, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "SearchFindMyFriendshipCoordinator encountered error:%@.", v6, 0xCu);
    v9 = sub_100008B04((uint64_t *)&unk_101494470);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    v10 = v0[56];
    swift_errorRelease(v10);
    swift_errorRelease(v10);
  }
  v11 = v0[36];
  v34 = v0[56];
  v35 = v0[35];
  v12 = v0[33];
  v36 = v0[34];
  v14 = v0[31];
  v13 = v0[32];
  v15 = v0[29];
  v16 = v0[30];

  v17 = sub_10009729C();
  v18 = (void *)static OS_dispatch_queue.main.getter(v17);
  v19 = swift_allocObject(&unk_1011A2E70, 32, 7);
  *(_QWORD *)(v19 + 16) = v15;
  *(_QWORD *)(v19 + 24) = v16;
  v0[6] = sub_10010D75C;
  v0[7] = v19;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_1001BB8D4;
  v0[5] = &unk_1011A2E88;
  v20 = _Block_copy(v0 + 2);
  swift_retain();
  static DispatchQoS.unspecified.getter(v21);
  v0[23] = _swiftEmptyArrayStorage;
  v22 = sub_10000E540();
  v23 = sub_100008B04((uint64_t *)&unk_101492FB0);
  v24 = sub_10000E588();
  dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 23, v23, v24, v14, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v12, v20);
  _Block_release(v20);

  swift_errorRelease(v34);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v11, v36);
  swift_release();
  v25 = v0[49];
  v27 = v0[45];
  v26 = v0[46];
  v28 = v0[44];
  v30 = v0[40];
  v29 = v0[41];
  v31 = v0[36];
  v32 = v0[33];
  swift_task_dealloc(v0[50]);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  return ((uint64_t (*)(void))v0[1])();
}

void sub_10010BA98(void (*a1)(id), uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  void (*v10)(char *, uint64_t, uint64_t, __n128);
  objc_class *MyLocation;
  char *v12;
  id v13;
  objc_super v14;

  v5 = type metadata accessor for Location(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16);
  v10(v9, a3, v5, v7);
  MyLocation = (objc_class *)type metadata accessor for SearchFindMyLocation(0);
  v12 = (char *)objc_allocWithZone(MyLocation);
  UUID.init()(v12);
  ((void (*)(char *, char *, uint64_t))v10)(&v12[OBJC_IVAR____TtC4Maps20SearchFindMyLocation_location], v9, v5);

  v14.receiver = v12;
  v14.super_class = MyLocation;
  v13 = objc_msgSendSuper2(&v14, "init");
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  a1(v13);

}

uint64_t sub_10010BC34()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD v21[4];

  v1 = sub_100008B04(&qword_101494070);
  __chkstk_darwin(v1);
  v3 = (char *)v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TaskPriority(0);
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
  v6 = (_QWORD *)swift_allocObject(&unk_1011A2DF8, 40, 7);
  v6[2] = 0;
  v7 = v6 + 2;
  v6[3] = 0;
  v6[4] = v0;
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4);
  v9 = v0;
  if (v8 == 1)
  {
    sub_100010CC4((uint64_t)v3, &qword_101494070);
    v10 = 0;
    v11 = 0;
    v12 = 7168;
  }
  else
  {
    v13 = TaskPriority.rawValue.getter(v9);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v3, v4);
    v12 = v13 | 0x1C00;
    v14 = *v7;
    if (*v7)
    {
      v15 = v6[3];
      ObjectType = swift_getObjectType(*v7);
      swift_unknownObjectRetain(v14);
      v10 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v15);
      v11 = v17;
      swift_unknownObjectRelease(v14);
    }
    else
    {
      v10 = 0;
      v11 = 0;
    }
  }
  v18 = swift_allocObject(&unk_1011A2E20, 32, 7);
  *(_QWORD *)(v18 + 16) = &unk_10149AD98;
  *(_QWORD *)(v18 + 24) = v6;
  if (v11 | v10)
  {
    v21[0] = 0;
    v21[1] = 0;
    v19 = v21;
    v21[2] = v10;
    v21[3] = v11;
  }
  else
  {
    v19 = 0;
  }
  swift_task_create(v12, v19, (char *)&type metadata for () + 8, &unk_10149AAB0, v18);
  return swift_release();
}

uint64_t sub_10010BE04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4[6] = a4;
  v5 = type metadata accessor for Friend(0);
  v4[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[8] = v6;
  v4[9] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for FriendStreamChange(0);
  v4[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[11] = v8;
  v4[12] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100008B04(&qword_10149ADA8);
  v4[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008B04(&qword_10149ADB0);
  v4[14] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[15] = v11;
  v4[16] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100008B04(&qword_10149AD88);
  v4[17] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[18] = v13;
  v4[19] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (*(_QWORD *)(*(_QWORD *)(sub_100008B04(&qword_10149ADB8) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[20] = swift_task_alloc(v14);
  v4[21] = swift_task_alloc(v14);
  v15 = type metadata accessor for ClientOrigin(0);
  v4[22] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v4[23] = v16;
  v4[24] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for RequestOrigin(0);
  v4[25] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10010BF84, 0, 0);
}

uint64_t sub_10010BF84()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[24];
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[23] + 104))(v1, enum case for ClientOrigin.other(_:), v0[22]);
  RequestOrigin.init(_:)(v1);
  v2 = type metadata accessor for Session(0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v3 = (_QWORD *)swift_task_alloc(async function pointer to Session.init(_:)[1]);
  v0[26] = v3;
  *v3 = v0;
  v3[1] = sub_10010C018;
  return Session.init(_:)(v0[25]);
}

uint64_t sub_10010C018(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10010C074, 0, 0);
}

uint64_t sub_10010C074()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = OBJC_IVAR____TtC4Maps33SearchFindMyFriendshipCoordinator_session;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps33SearchFindMyFriendshipCoordinator_session) = *(_QWORD *)(v0 + 216);
  swift_release();
  v3 = *(_QWORD *)(v1 + v2);
  *(_QWORD *)(v0 + 224) = v3;
  if (v3)
  {
    v4 = async function pointer to Session.startUpdatingFriends(receiveInitialUpdates:)[1];
    swift_retain();
    v5 = (_QWORD *)swift_task_alloc(v4);
    *(_QWORD *)(v0 + 232) = v5;
    *v5 = v0;
    v5[1] = sub_10010C23C;
    return Session.startUpdatingFriends(receiveInitialUpdates:)(*(_QWORD *)(v0 + 168), 1);
  }
  else
  {
    if (qword_101490EB8 != -1)
      swift_once(&qword_101490EB8, sub_1001147FC);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_10000E918(v7, (uint64_t)qword_1014D4B38);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "SearchFindMyFriendshipCoordinator couldn't create a session.", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }

    v12 = *(_QWORD *)(v0 + 192);
    v14 = *(_QWORD *)(v0 + 160);
    v13 = *(_QWORD *)(v0 + 168);
    v15 = *(_QWORD *)(v0 + 152);
    v16 = *(_QWORD *)(v0 + 128);
    v18 = *(_QWORD *)(v0 + 96);
    v17 = *(_QWORD *)(v0 + 104);
    v19 = *(_QWORD *)(v0 + 72);
    swift_task_dealloc(*(_QWORD *)(v0 + 200));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10010C23C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10010C830;
  else
    v3 = sub_10010C2A0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10010C2A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *(_QWORD *)(v0 + 160);
  v1 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(v1, 0, 1, v3);
  v6 = v5 + OBJC_IVAR____TtC4Maps33SearchFindMyFriendshipCoordinator_updateStream;
  swift_beginAccess(v6, v0 + 16, 33, 0);
  sub_10010D628(v1, v6);
  swift_endAccess(v0 + 16);
  sub_10000C1FC(v6, v2, &qword_10149ADB8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_100010CC4(*(_QWORD *)(v0 + 160), &qword_10149ADB8);
    if (qword_101490EB8 != -1)
      swift_once(&qword_101490EB8, sub_1001147FC);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_10000E918(v7, (uint64_t)qword_1014D4B38);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "SearchFindMyFriendshipCoordinator did not receive a stream.", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
      swift_release();

    }
    else
    {

      swift_release();
    }
    v15 = *(_QWORD *)(v0 + 192);
    v17 = *(_QWORD *)(v0 + 160);
    v16 = *(_QWORD *)(v0 + 168);
    v18 = *(_QWORD *)(v0 + 152);
    v19 = *(_QWORD *)(v0 + 128);
    v21 = *(_QWORD *)(v0 + 96);
    v20 = *(_QWORD *)(v0 + 104);
    v22 = *(_QWORD *)(v0 + 72);
    swift_task_dealloc(*(_QWORD *)(v0 + 200));
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 136);
    (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v0 + 144) + 32))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), v12);
    AsyncStream.makeAsyncIterator()(v12);
    *(_DWORD *)(v0 + 256) = enum case for FriendStreamChange.added(_:);
    *(_DWORD *)(v0 + 260) = enum case for FriendStreamChange.removed(_:);
    v13 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(_QWORD *)(v0 + 248) = v13;
    *v13 = v0;
    v13[1] = sub_10010C540;
    return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 104), 0, 0, *(_QWORD *)(v0 + 112));
  }
}

uint64_t sub_10010C540()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 248));
  return swift_task_switch(sub_10010C594, 0, 0);
}

uint64_t sub_10010C594()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v5 = *(_QWORD *)(v0 + 144);
    v4 = *(_QWORD *)(v0 + 152);
    v7 = *(_QWORD *)(v0 + 128);
    v6 = *(_QWORD *)(v0 + 136);
    v8 = *(_QWORD *)(v0 + 112);
    v9 = *(_QWORD *)(v0 + 120);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    v10 = *(_QWORD *)(v0 + 192);
    v12 = *(_QWORD *)(v0 + 160);
    v11 = *(_QWORD *)(v0 + 168);
    v13 = *(_QWORD *)(v0 + 152);
    v14 = *(_QWORD *)(v0 + 128);
    v16 = *(_QWORD *)(v0 + 96);
    v15 = *(_QWORD *)(v0 + 104);
    v17 = *(_QWORD *)(v0 + 72);
    swift_task_dealloc(*(_QWORD *)(v0 + 200));
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v19 = *(_DWORD *)(v0 + 256);
    v20 = *(_QWORD *)(v0 + 96);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v20, v1, v2);
    v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v20, v2);
    if (v21 == v19)
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
    }
    else if (v21 == *(_DWORD *)(v0 + 260))
    {
      v22 = *(_QWORD *)(v0 + 96);
      v23 = *(_QWORD *)(v0 + 72);
      v24 = *(_QWORD *)(v0 + 56);
      v25 = *(_QWORD *)(v0 + 64);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 96))(v22, *(_QWORD *)(v0 + 80));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32))(v23, v22, v24);
      sub_10010CF6C(v23);
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v24);
    }
    else
    {
      if (qword_101490EB8 != -1)
        swift_once(&qword_101490EB8, sub_1001147FC);
      v26 = type metadata accessor for Logger(0);
      v27 = sub_10000E918(v26, (uint64_t)qword_1014D4B38);
      v28 = Logger.logObject.getter(v27);
      v29 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v28, v29))
      {
        v30 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v30 = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "SearchFindMyFriendshipCoordinator received unhandled friendship event", v30, 2u);
        swift_slowDealloc(v30, -1, -1);
      }
      v32 = *(_QWORD *)(v0 + 88);
      v31 = *(_QWORD *)(v0 + 96);
      v33 = *(_QWORD *)(v0 + 80);

      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
    }
    v34 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(_QWORD *)(v0 + 248) = v34;
    *v34 = v0;
    v34[1] = sub_10010C540;
    return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 104), 0, 0, *(_QWORD *)(v0 + 112));
  }
}

uint64_t sub_10010C830()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  swift_release();
  if (qword_101490EB8 != -1)
    swift_once(&qword_101490EB8, sub_1001147FC);
  v1 = *(_QWORD *)(v0 + 240);
  v2 = type metadata accessor for Logger(0);
  sub_10000E918(v2, (uint64_t)qword_1014D4B38);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 240);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 40) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "SearchFindMyFriendshipCoordinator: encountered error: %@ when monitoring handles", v8, 0xCu);
    v11 = sub_100008B04((uint64_t *)&unk_101494470);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 240));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  v12 = *(_QWORD *)(v0 + 192);
  v14 = *(_QWORD *)(v0 + 160);
  v13 = *(_QWORD *)(v0 + 168);
  v15 = *(_QWORD *)(v0 + 152);
  v16 = *(_QWORD *)(v0 + 128);
  v18 = *(_QWORD *)(v0 + 96);
  v17 = *(_QWORD *)(v0 + 104);
  v19 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10010CA94()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  return swift_task_switch(sub_10010CAAC, 0, 0);
}

uint64_t sub_10010CAAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + OBJC_IVAR____TtC4Maps33SearchFindMyFriendshipCoordinator_session);
  *(_QWORD *)(v0 + 32) = v1;
  if (!v1)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v2 = async function pointer to Session.stopUpdatingFriends()[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 40) = v3;
  *v3 = v0;
  v3[1] = sub_10010CB2C;
  return Session.stopUpdatingFriends()();
}

uint64_t sub_10010CB2C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 40);
  v3 = *v1;
  *(_QWORD *)(v3 + 48) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_10010CBA0, 0, 0);
  swift_release();
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10010CBA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  swift_release();
  if (qword_101490EB8 != -1)
    swift_once(&qword_101490EB8, sub_1001147FC);
  v1 = *(_QWORD *)(v0 + 48);
  v2 = type metadata accessor for Logger(0);
  sub_10000E918(v2, (uint64_t)qword_1014D4B38);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 48);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "SearchFindMyFriendshipCoordinator: encountered error: %@ when stopped monitoring handles.", v8, 0xCu);
    v11 = sub_100008B04((uint64_t *)&unk_101494470);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 48));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10010CE90(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  id v5;
  _QWORD *v6;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_10149AD7C;
  v5 = a2;
  v6 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v6;
  *v6 = v2;
  v6[1] = sub_10010CF08;
  v6[3] = v5;
  return swift_task_switch(sub_10010CAAC, 0, 0);
}

uint64_t sub_10010CF08()
{
  uint64_t *v0;
  void (**v1)(_QWORD);
  void *v2;
  uint64_t v4;

  v1 = *(void (***)(_QWORD))(*v0 + 24);
  v2 = *(void **)(*v0 + 16);
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 32));

  v1[2](v1);
  _Block_release(v1);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

void sub_10010CF6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  __n128 v34;
  uint64_t Strong;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSString v40;
  uint8_t *v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v3 = type metadata accessor for Friend(0);
  v45 = *(_QWORD *)(v3 - 8);
  v46 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Handle(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v41 - v11;
  v42 = v1;
  v14 = *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps33SearchFindMyFriendshipCoordinator_handleId);
  v13 = *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps33SearchFindMyFriendshipCoordinator_handleId + 8);
  v15 = swift_bridgeObjectRetain(v13);
  v16 = Friend.handle.getter(v15);
  v17 = Handle.identifier.getter(v16);
  v19 = v18;
  v43 = *(void (**)(char *, uint64_t))(v7 + 8);
  v44 = v6;
  v43(v12, v6);
  if (v14 == v17 && v13 == v19)
  {
    swift_bridgeObjectRelease_n(v13, 2);
  }
  else
  {
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v13, v17, v19, 0);
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(v13);
    if ((v21 & 1) == 0)
      return;
  }
  if (qword_101490EB8 != -1)
    swift_once(&qword_101490EB8, sub_1001147FC);
  v22 = type metadata accessor for Logger(0);
  sub_10000E918(v22, (uint64_t)qword_1014D4B38);
  v24 = v45;
  v23 = v46;
  v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 16))(v5, a1, v46);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc(12, -1);
    v29 = swift_slowAlloc(32, -1);
    v48 = v29;
    *(_DWORD *)v28 = 136315138;
    v41 = v28 + 4;
    v30 = Friend.handle.getter(v29);
    v31 = Handle.identifier.getter(v30);
    v33 = v32;
    v43(v9, v44);
    v47 = sub_1000C28FC(v31, v33, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v41, v28 + 12);
    v34 = swift_bridgeObjectRelease(v33);
    (*(void (**)(char *, uint64_t, __n128))(v45 + 8))(v5, v46, v34);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Found a handle that was removed; identifier: %s", v28, 0xCu);
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v28, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v23);
  }

  Strong = swift_unknownObjectWeakLoadStrong(v42 + OBJC_IVAR____TtC4Maps33SearchFindMyFriendshipCoordinator_delegate);
  if (Strong)
  {
    v36 = (void *)Strong;
    v37 = Friend.handle.getter(Strong);
    Handle.identifier.getter(v37);
    v39 = v38;
    v43(v9, v44);
    v40 = String._bridgeToObjectiveC()();
    objc_msgSend(v36, "searchFindMyFriendDidRemoveHandleWithIdentifier:", v40, swift_bridgeObjectRelease(v39).n128_f64[0]);

    swift_unknownObjectRelease(v36);
  }
}

id sub_10010D31C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SearchFindMyFriendshipCoordinator(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10010D3B8()
{
  return type metadata accessor for SearchFindMyFriendshipCoordinator(0);
}

uint64_t type metadata accessor for SearchFindMyFriendshipCoordinator(uint64_t a1)
{
  uint64_t result;

  result = qword_10149AD68;
  if (!qword_10149AD68)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SearchFindMyFriendshipCoordinator);
  return result;
}

void sub_10010D3FC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_100E2BFA8;
  v4[1] = &unk_100E2BFC0;
  v4[2] = &unk_100E2BFD8;
  sub_10010D488(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
  }
}

void sub_10010D488(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10149AD80)
  {
    v2 = sub_10000E5D4(&qword_10149AD88);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10149AD80);
  }
}

uint64_t sub_10010D4E0(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10010D544;
  return v6(a1);
}

uint64_t sub_10010D544()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10010D590()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10010D5BC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10149AD94);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10000DD08;
  return sub_10010BE04(a1, v4, v5, v6);
}

uint64_t sub_10010D628(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008B04(&qword_10149ADB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10010D670()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10010D6AC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc(dword_10149ADC4);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10000C0E0;
  return sub_10010AA8C(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_10010D738()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10010D75C()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(0);
}

double sub_10010D780(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_10010D790(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10010D798()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Location(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_10010D80C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Location(0) - 8) + 80);
  sub_10010BA98(*(void (**)(id))(v0 + 16), *(_QWORD *)(v0 + 24), v0 + ((v1 + 32) & ~v1));
}

uint64_t sub_10010D83C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10010D868()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_10149ADD4);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10000DD08;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_10149ADD0 + dword_10149ADD0))(v2, v3);
}

uint64_t sub_10010D8D4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void *PlaceCardLibraryOperationsCoordinator.mapItem.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;
  _BYTE v5[24];

  v1 = (void **)(v0 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_mapItem);
  swift_beginAccess(v0 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_mapItem, v5, 0, 0);
  v2 = *v1;
  v3 = v2;
  return v2;
}

void PlaceCardLibraryOperationsCoordinator.mapItem.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;
  id v5;
  _BYTE v6[24];

  v3 = (void **)(v1 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_mapItem);
  swift_beginAccess(v1 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_mapItem, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  v5 = a1;
  sub_10010DA94(v4);

}

void sub_10010DA94(void *a1)
{
  uint64_t v1;
  id *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  _BYTE v19[24];
  _BYTE v20[24];

  v3 = (id *)(v1 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_mapItem);
  swift_beginAccess(v1 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_mapItem, v20, 0, 0);
  if (*v3)
  {
    v4 = objc_msgSend(*v3, "_geoMapItem");
    if (v4)
    {
      v5 = v4;
      if (a1)
      {
        v6 = objc_msgSend(a1, "_geoMapItem");
        if (v6)
        {
          v7 = v6;
          if (!GEOMapItemIsEqualToMapItemForPurpose(v5, v6, 3))
          {
            v8 = (_QWORD *)(v1 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_savedStateOfPlace);
            swift_beginAccess(v1 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_savedStateOfPlace, v19, 1, 0);
            *v8 = 0;
            sub_10010DEA8();
            v9 = OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_hasOperationInProgress;
            *(_BYTE *)(v1 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_hasOperationInProgress) = 0;
            v10 = *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_placeItemInLibrary);
            *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_placeItemInLibrary) = 0;
            swift_unknownObjectRelease(v10);
            v11 = *v3;
            if (*v3)
            {
              if ((*(_BYTE *)(v1 + v9) & 1) == 0)
              {
                *(_BYTE *)(v1 + v9) = 1;
                v12 = swift_allocObject(&unk_1011A3000, 24, 7);
                swift_unknownObjectWeakInit(v12 + 16, v1);
                v13 = v11;
                sub_1001B7C24(v13, v12);
                swift_unknownObjectRelease(v5);
                swift_unknownObjectRelease(v7);
LABEL_13:

                swift_release();
                return;
              }
            }
            else
            {
              *v8 = 0;
              sub_10010DEA8();
            }
          }
          swift_unknownObjectRelease(v5);
          swift_unknownObjectRelease(v7);
          return;
        }
      }
      swift_unknownObjectRelease(v5);
    }
  }
  v14 = (_QWORD *)(v1 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_savedStateOfPlace);
  swift_beginAccess(v1 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_savedStateOfPlace, v19, 1, 0);
  *v14 = 0;
  sub_10010DEA8();
  v15 = OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_hasOperationInProgress;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_hasOperationInProgress) = 0;
  v16 = *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_placeItemInLibrary);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_placeItemInLibrary) = 0;
  swift_unknownObjectRelease(v16);
  v17 = *v3;
  if (*v3)
  {
    if ((*(_BYTE *)(v1 + v15) & 1) != 0)
      return;
    *(_BYTE *)(v1 + v15) = 1;
    v18 = swift_allocObject(&unk_1011A3000, 24, 7);
    swift_unknownObjectWeakInit(v18 + 16, v1);
    v13 = v17;
    sub_1001B7C24(v13, v18);
    goto LABEL_13;
  }
  *v14 = 0;
  sub_10010DEA8();
}

void (*PlaceCardLibraryOperationsCoordinator.mapItem.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  id v7;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_mapItem;
  v3[4] = v1;
  v3[5] = v4;
  v5 = (void **)(v1 + v4);
  swift_beginAccess(v1 + v4, v3, 1, 0);
  v6 = *v5;
  v3[3] = *v5;
  v7 = v6;
  return sub_10010DD34;
}

void sub_10010DD34(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;

  v2 = *(void **)a1;
  v4 = (void **)(*(_QWORD *)a1 + 24);
  v3 = *v4;
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v7 = *(void **)(v6 + v5);
  *(_QWORD *)(v6 + v5) = *v4;
  if ((a2 & 1) != 0)
  {
    v8 = v3;
    sub_10010DA94(v7);

    v7 = *v4;
  }
  else
  {
    v9 = v3;
    sub_10010DA94(v7);

  }
  free(v2);
}

uint64_t PlaceCardLibraryOperationsCoordinator.savedStateOfPlace.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_savedStateOfPlace;
  swift_beginAccess(v0 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_savedStateOfPlace, v3, 0, 0);
  return *(_QWORD *)v1;
}

double sub_10010DEA8()
{
  uint64_t v0;
  uint64_t v1;
  char **v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  double v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char **v18;
  NSString v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double result;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32[3];
  _BYTE v33[24];
  _BYTE v34[32];

  v1 = OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_savedStateObservers;
  v2 = &selRef_addTasks_;
  v3 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_savedStateObservers), "allObservers");
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, (char *)&type metadata for Any + 8);

  v5 = *(_QWORD *)(v4 + 16);
  v6 = &qword_10149A000;
  if (v5)
  {
    v7 = (_QWORD *)(v0 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_savedStateOfPlace);
    v8 = v4 + 32;
    swift_beginAccess(v0 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_savedStateOfPlace, v33, 0, 0);
    do
    {
      sub_100011E20(v8, (uint64_t)v34);
      v9 = sub_100008B04(&qword_10149AE18);
      if (swift_dynamicCast(v32, v34, (char *)&type metadata for Any + 8, v9, 6))
      {
        v10 = v32[0];
        objc_msgSend(v32[0], "libraryAccessProvider:savedStateOfPlaceDidChange:", v0, *v7 == 1);
        swift_unknownObjectRelease(v10);
      }
      v8 += 32;
      --v5;
    }
    while (v5);
    *(_QWORD *)&v11 = swift_bridgeObjectRelease(v4).n128_u64[0];
    v6 = &qword_10149A000;
    v2 = &selRef_addTasks_;
  }
  else
  {
    *(_QWORD *)&v11 = swift_bridgeObjectRelease(v4).n128_u64[0];
  }
  v12 = objc_msgSend(*(id *)(v0 + v1), v2[198], v11);
  v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, (char *)&type metadata for Any + 8);

  v14 = *(_QWORD *)(v13 + 16);
  if (v14)
  {
    v15 = (_QWORD *)(v0 + v6[445]);
    v16 = OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_placeItemInLibrary;
    v29 = v13;
    v17 = v13 + 32;
    swift_beginAccess(v15, v32, 0, 0);
    v18 = &selRef_templateId;
    v30 = v0;
    do
    {
      sub_100011E20(v17, (uint64_t)v34);
      v20 = sub_100008B04(&qword_10149AE18);
      if (swift_dynamicCast(&v31, v34, (char *)&type metadata for Any + 8, v20, 6))
      {
        v21 = v31;
        if (*v15 == 1 && (v22 = *(void **)(v0 + v16)) != 0)
        {
          v23 = objc_msgSend(v22, "placeItemNote");
          v19 = v23;
          if (v23)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
            v25 = v24;

            v0 = v30;
            v19 = String._bridgeToObjectiveC()();
            v26 = v25;
            v18 = &selRef_templateId;
            swift_bridgeObjectRelease(v26);
          }
        }
        else
        {
          v19 = 0;
        }
        objc_msgSend(v21, v18[206], v0, v19);
        swift_unknownObjectRelease(v21);

      }
      v17 += 32;
      --v14;
    }
    while (v14);
    v27 = v29;
  }
  else
  {
    v27 = v13;
  }
  *(_QWORD *)&result = swift_bridgeObjectRelease(v27).n128_u64[0];
  return result;
}

uint64_t PlaceCardLibraryOperationsCoordinator.viewControllerForPresentingAlert.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_viewControllerForPresentingAlert;
  swift_beginAccess(v0 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_viewControllerForPresentingAlert, v3, 0, 0);
  return swift_unknownObjectWeakLoadStrong(v1);
}

void PlaceCardLibraryOperationsCoordinator.viewControllerForPresentingAlert.setter(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v4[24];

  v3 = v1 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_viewControllerForPresentingAlert;
  swift_beginAccess(v3, v4, 1, 0);
  swift_unknownObjectWeakAssign(v3, a1);

}

void (*PlaceCardLibraryOperationsCoordinator.viewControllerForPresentingAlert.modify(_QWORD *a1))(id **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_viewControllerForPresentingAlert;
  v3[4] = v1;
  v3[5] = v4;
  v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33, 0);
  v3[3] = swift_unknownObjectWeakLoadStrong(v5);
  return sub_10010E2FC;
}

void sub_10010E2FC(id **a1, char a2)
{
  id *v3;
  id v4;

  v3 = *a1;
  v4 = (*a1)[3];
  swift_unknownObjectWeakAssign((char *)(*a1)[5] + (_QWORD)(*a1)[4], v4);
  if ((a2 & 1) != 0)
  {

    swift_endAccess(v3);
  }
  else
  {
    swift_endAccess(v3);

  }
  free(v3);
}

uint64_t PlaceCardLibraryOperationsCoordinator.placeNote.getter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  _BYTE v7[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_savedStateOfPlace);
  swift_beginAccess(v0 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_savedStateOfPlace, v7, 0, 0);
  v2 = 0;
  if (*v1 == 1)
  {
    v3 = *(void **)(v0 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_placeItemInLibrary);
    if (v3 && (v4 = objc_msgSend(v3, "placeItemNote")) != 0)
    {
      v5 = v4;
      v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);

    }
    else
    {
      return 0;
    }
  }
  return v2;
}

BOOL PlaceCardLibraryOperationsCoordinator.isPinned.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_placeItemInLibrary);
  if (!v3)
    return 0;
  v4 = type metadata accessor for FavoriteItem(0, a2);
  return swift_dynamicCastClass(v3, v4) != 0;
}

uint64_t PlaceCardLibraryOperationsCoordinator.syncObject.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_placeItemInLibrary);
  if (!v3)
    return 0;
  v4 = type metadata accessor for MapsSyncObject(0, a2);
  v5 = swift_dynamicCastClass(v3, v4);
  if (v5)
    swift_unknownObjectRetain(v3);
  return v5;
}

id sub_10010E5BC()
{
  char *v0;
  uint64_t v1;
  id v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  objc_class *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  objc_super v16;
  objc_super v17;

  *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_mapItem] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_savedStateOfPlace] = 0;
  swift_unknownObjectWeakInit(&v0[OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_viewControllerForPresentingAlert], 0);
  v1 = OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_savedStateObservers;
  v2 = objc_allocWithZone((Class)GEOObserverHashTable);
  v3 = v0;
  *(_QWORD *)&v0[v1] = objc_msgSend(v2, "initWithProtocol:queue:", &OBJC_PROTOCOL___MULibraryAccessProviderObserver, 0);
  v3[OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_hasOperationInProgress] = 0;
  v4 = OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_dataOperationsProvider;
  type metadata accessor for MapsSyncStore(0);
  v5 = static MapsSyncStore.sharedStore.getter();
  v6 = (objc_class *)type metadata accessor for LibraryDataOperationsProvider();
  v7 = (char *)objc_allocWithZone(v6);
  *(_QWORD *)&v7[OBJC_IVAR____TtC4Maps29LibraryDataOperationsProvider_mapsSyncStore] = v5;
  v17.receiver = v7;
  v17.super_class = v6;
  *(_QWORD *)&v3[v4] = objc_msgSendSuper2(&v17, "init");
  *(_QWORD *)&v3[OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_placeItemInLibrary] = 0;
  v8 = OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_storeSubscriptionTypes;
  v9 = sub_10000B4B8();
  v10 = swift_allocObject(v9, ((*(unsigned int *)(v9 + 48) + 7) & 0x1FFFFFFF8) + 24, *(unsigned __int16 *)(v9 + 52) | 7);
  *(_OWORD *)(v10 + 16) = xmmword_100E22F50;
  *(_QWORD *)(v10 + 32) = type metadata accessor for FavoriteItem(0, v11);
  *(_QWORD *)(v10 + 40) = type metadata accessor for CollectionPlaceItem(0);
  *(_QWORD *)(v10 + 48) = type metadata accessor for Collection(0);
  *(_QWORD *)&v3[v8] = v10;

  v16.receiver = v3;
  v16.super_class = (Class)type metadata accessor for PlaceCardLibraryOperationsCoordinator();
  v12 = objc_msgSendSuper2(&v16, "init");
  v13 = (void *)static MapsSyncStore.sharedStore.getter();
  v14 = v12;
  dispatch thunk of MapsSyncStore.subscribe(_:)();

  return v14;
}

id PlaceCardLibraryOperationsCoordinator.__deallocating_deinit()
{
  void *v0;
  void *v1;
  void *v2;
  id v3;
  objc_super v5;

  v1 = v0;
  type metadata accessor for MapsSyncStore(0);
  v2 = (void *)static MapsSyncStore.sharedStore.getter();
  v3 = v1;
  dispatch thunk of MapsSyncStore.unsubscribe(_:)();

  v5.receiver = v3;
  v5.super_class = (Class)type metadata accessor for PlaceCardLibraryOperationsCoordinator();
  return objc_msgSendSuper2(&v5, "dealloc");
}

void sub_10010E8D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t Strong;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _BYTE v12[24];
  _BYTE v13[24];

  v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v13, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    v7 = (char *)Strong;
    *(_BYTE *)(Strong + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_hasOperationInProgress) = 0;
    if (a2)
    {
      v8 = (_QWORD *)(Strong + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_savedStateOfPlace);
      swift_beginAccess(Strong + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_savedStateOfPlace, v12, 1, 0);
      *v8 = 0;
    }
    else
    {
      v9 = *(_QWORD *)(Strong + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_placeItemInLibrary);
      *(_QWORD *)(Strong + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_placeItemInLibrary) = a1;
      swift_unknownObjectRetain(a1);
      swift_unknownObjectRelease(v9);
      if (a1)
        v10 = 1;
      else
        v10 = 2;
      v11 = (uint64_t *)&v7[OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_savedStateOfPlace];
      swift_beginAccess(&v7[OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_savedStateOfPlace], v12, 1, 0);
      *v11 = v10;
    }
    sub_10010DEA8();

  }
}

double sub_10010E9BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void **v9;
  double result;
  void *v11;
  _QWORD *v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  _QWORD *v18;
  _BYTE v19[24];
  _BYTE v20[24];

  v9 = (void **)(v4 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_mapItem);
  swift_beginAccess(v4 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_mapItem, v20, 0, 0);
  v11 = *v9;
  if (*v9)
  {
    if ((*(_BYTE *)(v4 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_hasOperationInProgress) & 1) == 0)
    {
      *(_BYTE *)(v4 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_hasOperationInProgress) = 1;
      v12 = (_QWORD *)(v4 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_savedStateOfPlace);
      swift_beginAccess(v4 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_savedStateOfPlace, v19, 1, 0);
      *v12 = 1;
      v13 = v11;
      sub_10010DEA8();
      v14 = *(void **)(v4 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_dataOperationsProvider);
      v15 = swift_allocObject(&unk_1011A3000, 24, 7);
      swift_unknownObjectWeakInit(v15 + 16, v4);
      swift_bridgeObjectRetain(a4);
      swift_retain();
      v16 = v13;
      v17 = v14;
      swift_bridgeObjectRetain(a2);
      sub_1001B7FC0(v16, (uint64_t)sub_10010F7AC, v15, v17, v16, a1, a2, a3, a4);
      swift_release_n(v15, 2);

      swift_bridgeObjectRelease(a2);
      *(_QWORD *)&result = swift_bridgeObjectRelease(a4).n128_u64[0];
    }
  }
  else
  {
    v18 = (_QWORD *)(v4 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_savedStateOfPlace);
    swift_beginAccess(v4 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_savedStateOfPlace, v19, 1, 0);
    *v18 = 0;
    return sub_10010DEA8();
  }
  return result;
}

void sub_10010EB4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t Strong;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _BYTE v12[24];
  _BYTE v13[24];

  v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v13, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    v7 = (char *)Strong;
    if (*(_BYTE *)(Strong + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_hasOperationInProgress) == 1)
    {
      *(_BYTE *)(Strong + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_hasOperationInProgress) = 0;
      if (a2)
      {
        v8 = (_QWORD *)(Strong + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_savedStateOfPlace);
        swift_beginAccess(Strong + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_savedStateOfPlace, v12, 1, 0);
        *v8 = 0;
      }
      else
      {
        v9 = *(_QWORD *)(Strong + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_placeItemInLibrary);
        *(_QWORD *)(Strong + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_placeItemInLibrary) = a1;
        swift_unknownObjectRetain(a1);
        swift_unknownObjectRelease(v9);
        if (a1)
          v10 = 1;
        else
          v10 = 2;
        v11 = (uint64_t *)&v7[OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_savedStateOfPlace];
        swift_beginAccess(&v7[OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_savedStateOfPlace], v12, 1, 0);
        *v11 = v10;
      }
      sub_10010DEA8();
    }

  }
}

Swift::Void __swiftcall PlaceCardLibraryOperationsCoordinator.addPlaceToLibrary(customName:)(Swift::String_optional customName)
{
  sub_10010E9BC(customName.value._countAndFlagsBits, (uint64_t)customName.value._object, 0, 0);
}

Swift::Void __swiftcall PlaceCardLibraryOperationsCoordinator.deletePlaceFromLibrary()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  uint64_t v6;
  _BYTE v7[24];

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_placeItemInLibrary);
  if (v1)
  {
    v2 = OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_hasOperationInProgress;
    if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_hasOperationInProgress) & 1) == 0)
    {
      v3 = v0 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_viewControllerForPresentingAlert;
      swift_beginAccess(v0 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_viewControllerForPresentingAlert, v7, 0, 0);
      Strong = swift_unknownObjectWeakLoadStrong(v3);
      if (Strong)
      {
        v5 = (void *)Strong;
        *(_BYTE *)(v0 + v2) = 1;
        v6 = swift_allocObject(&unk_1011A3000, 24, 7);
        swift_unknownObjectWeakInit(v6 + 16);
        swift_unknownObjectRetain(v1);
        swift_retain();
        sub_1001B1370(v1, v5, (uint64_t)sub_10010F41C, v6);
        swift_unknownObjectRelease(v1);

        swift_release_n(v6, 2);
      }
    }
  }
}

void sub_10010EDB0(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *Strong;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11[24];

  v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v11, 0, 0);
  Strong = (char *)swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    v7 = Strong;
    if (Strong[OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_hasOperationInProgress] != 1
      || (Strong[OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_hasOperationInProgress] = 0, (a1 & 1) != 0)
      || a2)
    {

    }
    else
    {
      v8 = &Strong[OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_savedStateOfPlace];
      swift_beginAccess(&Strong[OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_savedStateOfPlace], &v10, 1, 0);
      *(_QWORD *)v8 = 2;
      sub_10010DEA8();
      v9 = *(_QWORD *)&v7[OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_placeItemInLibrary];
      *(_QWORD *)&v7[OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_placeItemInLibrary] = 0;

      swift_unknownObjectRelease(v9);
    }
  }
}

Swift::Void __swiftcall PlaceCardLibraryOperationsCoordinator.updatePlaceNote(to:)(Swift::String_optional to)
{
  uint64_t v1;
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char **v12;
  NSString v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  _BYTE v28[32];
  _BYTE v29[24];

  v2 = v1;
  object = to.value._object;
  countAndFlagsBits = to.value._countAndFlagsBits;
  v5 = (_QWORD *)(v1 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_savedStateOfPlace);
  swift_beginAccess(v1 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_savedStateOfPlace, v29, 0, 0);
  if (*v5 == 2)
  {
    if (object)
      v21 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    else
      v21 = 0;
    if (object)
      v22 = (unint64_t)object;
    else
      v22 = 0xE000000000000000;
    swift_bridgeObjectRetain(object);
    swift_bridgeObjectRelease(v22);
    v23 = HIBYTE(v22) & 0xF;
    if ((v22 & 0x2000000000000000) == 0)
      v23 = v21;
    if (v23)
      sub_10010E9BC(0, 0, countAndFlagsBits, (uint64_t)object);
  }
  else if (*v5 == 1)
  {
    v6 = OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_placeItemInLibrary;
    v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_placeItemInLibrary);
    if (v7)
    {
      swift_unknownObjectRetain(*(_QWORD *)(v1
                                          + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_placeItemInLibrary));
      if ((sub_1001B147C(countAndFlagsBits, object, v7) & 1) != 0)
      {
        v8 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_savedStateObservers), "allObservers");
        v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, (char *)&type metadata for Any + 8);

        v10 = *(_QWORD *)(v9 + 16);
        if (v10)
        {
          v25 = v9;
          v26 = v7;
          v11 = v9 + 32;
          v12 = &selRef_templateId;
          do
          {
            sub_100011E20(v11, (uint64_t)v28);
            v14 = sub_100008B04(&qword_10149AE18);
            if (swift_dynamicCast(&v27, v28, (char *)&type metadata for Any + 8, v14, 6))
            {
              v15 = v27;
              if (*v5 == 1 && (v16 = *(void **)(v2 + v6)) != 0)
              {
                v17 = objc_msgSend(v16, "placeItemNote");
                v13 = v17;
                if (v17)
                {
                  static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
                  v19 = v18;

                  v13 = String._bridgeToObjectiveC()();
                  v20 = v19;
                  v12 = &selRef_templateId;
                  swift_bridgeObjectRelease(v20);
                }
              }
              else
              {
                v13 = 0;
              }
              objc_msgSend(v15, v12[206], v2, v13, v25, v26);
              swift_unknownObjectRelease(v15);

            }
            v11 += 32;
            --v10;
          }
          while (v10);
          swift_unknownObjectRelease(v26);
          v24 = v25;
        }
        else
        {
          swift_unknownObjectRelease(v7);
          v24 = v9;
        }
        swift_bridgeObjectRelease(v24);
      }
      else
      {
        swift_unknownObjectRelease(v7);
      }
    }
  }
}

id PlaceCardLibraryOperationsCoordinator.register(_:)(uint64_t a1)
{
  uint64_t v1;

  return objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_savedStateObservers), "registerObserver:", a1);
}

id PlaceCardLibraryOperationsCoordinator.unregisterObserver(_:)(uint64_t a1)
{
  uint64_t v1;

  return objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_savedStateObservers), "unregisterObserver:", a1);
}

uint64_t PlaceCardLibraryOperationsCoordinator.storeSubscriptionTypes.getter()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_storeSubscriptionTypes);
  swift_beginAccess(v0 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_storeSubscriptionTypes, v3, 0, 0);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t PlaceCardLibraryOperationsCoordinator.storeSubscriptionTypes.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_storeSubscriptionTypes);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*PlaceCardLibraryOperationsCoordinator.storeSubscriptionTypes.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_storeSubscriptionTypes, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t type metadata accessor for PlaceCardLibraryOperationsCoordinator()
{
  return objc_opt_self(_TtC4Maps37PlaceCardLibraryOperationsCoordinator);
}

uint64_t sub_10010F3F8()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_10010F41C(char a1, uint64_t a2)
{
  uint64_t v2;

  sub_10010EDB0(a1, a2, v2);
}

uint64_t (*sub_10010F424(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_unknownObjectRetain(*(_QWORD *)(a3 + 8 * a2 + 32));
LABEL_5:
    *v3 = v4;
    return sub_10010F7B4;
  }
  __break(1u);
  return result;
}

void (*sub_10010F490(void (*result)(id *), unint64_t a2, uint64_t a3))(id *)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return destroy for PlaceSummaryView;
  }
  __break(1u);
  return result;
}

uint64_t (*sub_10010F4FC(uint64_t (*result)(_QWORD *a1), unint64_t a2, uint64_t a3))(_QWORD *a1)
{
  _QWORD *v3;
  uint64_t v4;

  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(a3 + 16) > a2)
  {
    v3 = result;
    v4 = *(_QWORD *)(a3 + 8 * a2 + 32);
    *v3 = v4;
    swift_bridgeObjectRetain(v4);
    return destroy for PlaceSummaryLine;
  }
  __break(1u);
  return result;
}

void (*sub_10010F550(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return destroy for PlaceSummaryView.Autocomplete;
  }
  __break(1u);
  return result;
}

uint64_t *sub_10010F5BC(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_unknownObjectRetain(*(_QWORD *)(a3 + 8 * a2 + 32));
LABEL_5:
    *v3 = v4;
    return (uint64_t *)sub_10010F628;
  }
  __break(1u);
  return result;
}

uint64_t sub_10010F628(_QWORD *a1)
{
  return swift_unknownObjectRelease(*a1);
}

double _s4Maps37PlaceCardLibraryOperationsCoordinatorC14storeDidChange5typesySaySSG_tF_0()
{
  uint64_t v0;
  void **v1;
  double result;
  void *v3;
  uint64_t v4;
  id v5;
  _QWORD *v6;
  uint64_t v7;
  _BYTE v8[24];

  v1 = (void **)(v0 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_mapItem);
  swift_beginAccess(v0 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_mapItem, v8, 0, 0);
  v3 = *v1;
  if (*v1)
  {
    if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_hasOperationInProgress) & 1) == 0)
    {
      *(_BYTE *)(v0 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_hasOperationInProgress) = 1;
      v4 = swift_allocObject(&unk_1011A3000, 24, 7);
      swift_unknownObjectWeakInit(v4 + 16);
      v5 = v3;
      sub_1001B7C24(v5, v4);

      swift_release();
    }
  }
  else
  {
    v6 = (_QWORD *)(v0 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_savedStateOfPlace);
    swift_beginAccess(v0 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_savedStateOfPlace, &v7, 1, 0);
    *v6 = 0;
    return sub_10010DEA8();
  }
  return result;
}

uint64_t sub_10010F704@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_QWORD *)(*a1 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_savedStateOfPlace);
  result = swift_beginAccess(v3, v5, 0, 0);
  *a2 = *v3;
  return result;
}

double sub_10010F754(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _BYTE v5[24];

  v2 = *a1;
  v3 = (_QWORD *)(*a2 + OBJC_IVAR____TtC4Maps37PlaceCardLibraryOperationsCoordinator_savedStateOfPlace);
  swift_beginAccess(v3, v5, 1, 0);
  *v3 = v2;
  return sub_10010DEA8();
}

void sub_10010F7AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10010EB4C(a1, a2, v2);
}

uint64_t sub_10010F8E4(void *a1, void *aBlock)
{
  _QWORD *v2;
  uint64_t v4;
  id v5;
  _QWORD *v6;
  uint64_t (*v8)(id);

  v2[2] = a1;
  v2[3] = _Block_copy(aBlock);
  v4 = unk_10149AEC4;
  v8 = (uint64_t (*)(id))((char *)&dword_10149AEC0 + dword_10149AEC0);
  v5 = a1;
  v6 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v6;
  *v6 = v2;
  v6[1] = sub_10010F964;
  return v8(v5);
}

uint64_t sub_10010F964(void *a1)
{
  uint64_t *v1;
  void (**v3)(_QWORD, _QWORD);
  void *v4;
  uint64_t v6;

  v3 = *(void (***)(_QWORD, _QWORD))(*v1 + 24);
  v4 = *(void **)(*v1 + 16);
  v6 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 32));

  ((void (**)(_QWORD, void *))v3)[2](v3, a1);
  _Block_release(v3);

  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_10010F9DC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10010FA08()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_10149AEB4);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10000C0E0;
  return ((uint64_t (*)(void *, void *))((char *)&dword_10149AEB0 + dword_10149AEB0))(v2, v3);
}

uint64_t sub_10010FA74()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000E930(v0, qword_1014D4A20);
  sub_10000E918(v0, (uint64_t)qword_1014D4A20);
  return Logger.init(subsystem:category:)(0xD00000000000001ALL, 0x8000000100E4A250, 0xD000000000000016, 0x8000000100E4A270);
}

uint64_t sub_10010FAFC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v1[10] = a1;
  v2 = type metadata accessor for Location(0);
  v1[11] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[12] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[13] = swift_task_alloc(v4);
  v1[14] = swift_task_alloc(v4);
  v1[15] = swift_task_alloc(v4);
  v1[16] = swift_task_alloc(v4);
  v5 = (*(_QWORD *)(*(_QWORD *)(sub_100008B04(&qword_10149E650) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[17] = swift_task_alloc(v5);
  v1[18] = swift_task_alloc(v5);
  v1[19] = swift_task_alloc(v5);
  v1[20] = swift_task_alloc(v5);
  v6 = type metadata accessor for ClientOrigin(0);
  v1[21] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[22] = v7;
  v1[23] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for RequestOrigin(0);
  v1[24] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Handle(0);
  v1[25] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v1[26] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[27] = swift_task_alloc(v11);
  v1[28] = swift_task_alloc(v11);
  return swift_task_switch(sub_10010FC50, 0, 0);
}

uint64_t sub_10010FC50()
{
  uint64_t v0;
  id v1;
  void *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  objc_class *MyHandle;
  char *v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = objc_msgSend(*(id *)(v0 + 80), "stringForKey:", CFSTR("MapsSuggestionsContactLikelyAppleIDKey"));
  if (v1)
  {
    v2 = v1;
    v3 = *(char **)(v0 + 216);
    v4 = *(_QWORD *)(v0 + 224);
    v6 = *(_QWORD *)(v0 + 200);
    v5 = *(_QWORD *)(v0 + 208);
    v7 = *(_QWORD *)(v0 + 184);
    v8 = *(_QWORD *)(v0 + 176);
    v34 = *(_QWORD *)(v0 + 168);
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    v11 = v10;

    v12 = sub_1001DA8C4((uint64_t)_swiftEmptyArrayStorage);
    Handle.init(withID:serverID:pushIdentifiers:expiresByGroupId:siblingIdentifiers:)(v9, v11, 0, 0, _swiftEmptyArrayStorage, v12, _swiftEmptyArrayStorage);
    v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v13(v3, v4, v6);
    MyHandle = (objc_class *)type metadata accessor for SearchFindMyHandle(0);
    v15 = (char *)objc_allocWithZone(MyHandle);
    UUID.init()(v15);
    v13(&v15[OBJC_IVAR____TtC4Maps18SearchFindMyHandle_handle], (uint64_t)v3, v6);

    *(_QWORD *)(v0 + 16) = v15;
    *(_QWORD *)(v0 + 24) = MyHandle;
    *(_QWORD *)(v0 + 232) = objc_msgSendSuper2((objc_super *)(v0 + 16), "init");
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    *(_QWORD *)(v0 + 240) = v16;
    v16(v3, v6);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 104))(v7, enum case for ClientOrigin.other(_:), v34);
    RequestOrigin.init(_:)(v7);
    v17 = type metadata accessor for Session(0);
    swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
    v18 = (_QWORD *)swift_task_alloc(async function pointer to Session.init(_:)[1]);
    *(_QWORD *)(v0 + 248) = v18;
    *v18 = v0;
    v18[1] = sub_10010FF64;
    return Session.init(_:)(*(_QWORD *)(v0 + 192));
  }
  else
  {
    if (qword_101490E58 != -1)
      swift_once(&qword_101490E58, sub_10010FA74);
    v20 = type metadata accessor for Logger(0);
    v21 = sub_10000E918(v20, (uint64_t)qword_1014D4A20);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Entry does not have a value for MapsSuggestionsContactLikelyAppleIDKey. Returning.", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

    v25 = *(_QWORD *)(v0 + 216);
    v27 = *(_QWORD *)(v0 + 184);
    v26 = *(_QWORD *)(v0 + 192);
    v29 = *(_QWORD *)(v0 + 152);
    v28 = *(_QWORD *)(v0 + 160);
    v31 = *(_QWORD *)(v0 + 136);
    v30 = *(_QWORD *)(v0 + 144);
    v33 = *(_QWORD *)(v0 + 120);
    v32 = *(_QWORD *)(v0 + 128);
    v35 = *(_QWORD *)(v0 + 112);
    v36 = *(_QWORD *)(v0 + 104);
    swift_task_dealloc(*(_QWORD *)(v0 + 224));
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
}

uint64_t sub_10010FF64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 248);
  *(_QWORD *)(*(_QWORD *)v1 + 256) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10010FFC0, 0, 0);
}

uint64_t sub_10010FFC0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  double Double;
  _QWORD *v5;

  v1 = v0[20];
  v2 = v0[11];
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0[12] + 56);
  v0[33] = v3;
  v3(v1, 1, 1, v2);
  Double = GEOConfigGetDouble(MapsConfig_GTCachedLocationMaxAge, off_1014B4F78);
  v5 = (_QWORD *)swift_task_alloc(dword_10149922C);
  v0[34] = v5;
  *v5 = v0;
  v5[1] = sub_100110054;
  return Session._maps_location(for:reverseGeocode:maxAge:)(v0[19], v0[28], 0, Double);
}

uint64_t sub_100110054()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 272);
  *(_QWORD *)(*(_QWORD *)v1 + 280) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    swift_errorRelease(v0);
    v3 = sub_100110FE0;
  }
  else
  {
    v3 = sub_1001100C0;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001100C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  double Double;
  _QWORD *v10;
  void (*v12)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  objc_class *MyLocation;
  char *v33;
  id v34;
  objc_super *v35;
  objc_class *MyLocationHandle;
  char *v37;
  uint64_t v38;
  void *v39;
  id v40;
  id v41;
  id v42;
  id v43;
  objc_super *v44;
  id v45;
  void *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  objc_super *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  void (*v87)(uint64_t, uint64_t);
  void *v88;
  uint64_t v89;
  objc_super *v90;
  objc_super *v91;
  objc_super *v92;
  objc_super *v93;
  uint64_t v94;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    sub_1000B36A4(v1);
    if (qword_101490E58 != -1)
      swift_once(&qword_101490E58, sub_10010FA74);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10000E918(v4, (uint64_t)qword_1014D4A20);
    *(_QWORD *)(v0 + 288) = v5;
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Unable to get cached location from Find My", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    Double = GEOConfigGetDouble(MapsConfig_GTLiveLocationFetchTimeout, off_1014B5048);
    v10 = (_QWORD *)swift_task_alloc(dword_101499244);
    *(_QWORD *)(v0 + 296) = v10;
    *v10 = v0;
    v10[1] = sub_100110874;
    return Session._maps_latestLocation(for:includeAddress:timeout:)(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 224), 0, Double);
  }
  else
  {
    v12 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 264);
    v13 = *(_QWORD *)(v0 + 160);
    v14 = *(_QWORD *)(v0 + 128);
    sub_1000B36A4(v13);
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
    v15(v14, v1, v2);
    v15(v13, v14, v2);
    v12(v13, 0, 1, v2);
    v16 = *(_QWORD *)(v0 + 280);
    v17 = *(_QWORD *)(v0 + 136);
    v18 = *(_QWORD *)(v0 + 88);
    v19 = *(_QWORD *)(v0 + 96);
    sub_1000B365C(*(_QWORD *)(v0 + 160), v17);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
    {
      v21 = *(void **)(v0 + 232);
      v20 = *(void (**)(uint64_t, uint64_t))(v0 + 240);
      v22 = *(_QWORD *)(v0 + 224);
      v23 = *(_QWORD *)(v0 + 200);
      v24 = *(_QWORD *)(v0 + 160);
      v25 = *(_QWORD *)(v0 + 136);
      swift_release();

      sub_1000B36A4(v24);
      v20(v22, v23);
      sub_1000B36A4(v25);
      v92 = 0;
    }
    else
    {
      v84 = v16;
      v86 = *(id *)(v0 + 80);
      v26 = *(void **)(v0 + 232);
      v27 = *(char **)(v0 + 104);
      v28 = *(_QWORD *)(v0 + 112);
      v30 = *(_QWORD *)(v0 + 88);
      v29 = *(_QWORD *)(v0 + 96);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v29 + 32))(v28, *(_QWORD *)(v0 + 136), v30);
      v31 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
      v31(v27, v28, v30);
      MyLocation = (objc_class *)type metadata accessor for SearchFindMyLocation(0);
      v33 = (char *)objc_allocWithZone(MyLocation);
      UUID.init()(v33);
      v31(&v33[OBJC_IVAR____TtC4Maps20SearchFindMyLocation_location], (uint64_t)v27, v30);

      *(_QWORD *)(v0 + 32) = v33;
      *(_QWORD *)(v0 + 40) = MyLocation;
      v34 = objc_msgSendSuper2((objc_super *)(v0 + 32), "init");
      v35 = *(objc_super **)(v29 + 8);
      ((void (*)(char *, uint64_t))v35)(v27, v30);
      MyLocationHandle = (objc_class *)type metadata accessor for MapsFindMyLocationHandle();
      v37 = (char *)objc_allocWithZone(MyLocationHandle);
      v38 = OBJC_IVAR____TtC4Maps24MapsFindMyLocationHandle_location;
      *(_QWORD *)&v37[OBJC_IVAR____TtC4Maps24MapsFindMyLocationHandle_location] = 0;
      *(_QWORD *)&v37[OBJC_IVAR____TtC4Maps24MapsFindMyLocationHandle_handle] = v26;
      v39 = *(void **)&v37[v38];
      *(_QWORD *)&v37[v38] = v34;
      v40 = v26;
      v41 = v34;
      v42 = v40;
      v43 = v41;

      *(_QWORD *)(v0 + 48) = v37;
      *(_QWORD *)(v0 + 56) = MyLocationHandle;
      v44 = (objc_super *)objc_msgSendSuper2((objc_super *)(v0 + 48), "init");
      v88 = v43;

      v45 = objc_msgSend(v86, "dataForKey:", CFSTR("MapsSuggestionsContactAsDataKey"));
      v90 = v35;
      v93 = v44;
      if (v45)
      {
        v46 = v45;
        v47 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v45);
        v49 = v48;

        sub_10000E4BC(0, (unint64_t *)&qword_101494468, NSKeyedUnarchiver_ptr);
        v50 = sub_10000E4BC(0, (unint64_t *)&unk_10149E5F0, CNContact_ptr);
        sub_100036B08(v47, v49);
        v51 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v50, v47, v49, v50);
        sub_100036B4C(v47, v49);
        v81 = v47;
        if (v84)
        {
          if (qword_101490E58 != -1)
            swift_once(&qword_101490E58, sub_10010FA74);
          v52 = type metadata accessor for Logger(0);
          v53 = sub_10000E918(v52, (uint64_t)qword_1014D4A20);
          v54 = Logger.logObject.getter(v53);
          v55 = static os_log_type_t.error.getter(v54);
          if (os_log_type_enabled(v54, v55))
          {
            v56 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v56 = 0;
            _os_log_impl((void *)&_mh_execute_header, v54, v55, "Unable to get data from Contacts", v56, 2u);
            swift_slowDealloc(v56, -1, -1);
          }

          swift_errorRetain(v84);
          v57 = swift_errorRetain(v84);
          v58 = Logger.logObject.getter(v57);
          v59 = static os_log_type_t.error.getter(v58);
          if (os_log_type_enabled(v58, v59))
          {
            v60 = (uint8_t *)swift_slowAlloc(12, -1);
            v61 = swift_slowAlloc(32, -1);
            v94 = v61;
            *(_DWORD *)v60 = 136315138;
            *(_QWORD *)(v0 + 64) = v84;
            swift_errorRetain(v84);
            v62 = sub_100008B04(&qword_10149E610);
            v63 = String.init<A>(describing:)(v0 + 64, v62);
            v65 = v64;
            *(_QWORD *)(v0 + 72) = sub_1000C28FC(v63, v64, &v94);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v60 + 4, v60 + 12);
            swift_bridgeObjectRelease(v65);
            swift_errorRelease(v84);
            swift_errorRelease(v84);
            _os_log_impl((void *)&_mh_execute_header, v58, v59, "CNContactVCardSerialization threw an error: %s", v60, 0xCu);
            swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v61, -1, -1);
            swift_slowDealloc(v60, -1, -1);

            swift_errorRelease(v84);
          }
          else
          {
            swift_errorRelease(v84);
            swift_errorRelease(v84);
            swift_errorRelease(v84);

          }
          v51 = 0;
          v66 = v49;
        }
        else
        {
          v66 = v49;
        }
      }
      else
      {
        v51 = 0;
        v81 = 0;
        v66 = 0xF000000000000000;
      }
      v67 = *(void **)(v0 + 232);
      v85 = *(_QWORD *)(v0 + 224);
      v87 = *(void (**)(uint64_t, uint64_t))(v0 + 240);
      v82 = *(_QWORD *)(v0 + 160);
      v83 = *(_QWORD *)(v0 + 200);
      v68 = *(_QWORD *)(v0 + 112);
      v69 = *(_QWORD *)(v0 + 88);
      v70 = objc_allocWithZone((Class)type metadata accessor for MapsAutocompletePerson());
      v71 = v93;
      v92 = (objc_super *)sub_1001F10E0(v51, 0, v93, 0);

      swift_release();
      sub_1001117C8(v81, v66);

      ((void (*)(uint64_t, uint64_t))v90)(v68, v69);
      sub_1000B36A4(v82);
      v87(v85, v83);
    }
    v72 = *(_QWORD *)(v0 + 216);
    v74 = *(_QWORD *)(v0 + 184);
    v73 = *(_QWORD *)(v0 + 192);
    v76 = *(_QWORD *)(v0 + 152);
    v75 = *(_QWORD *)(v0 + 160);
    v78 = *(_QWORD *)(v0 + 136);
    v77 = *(_QWORD *)(v0 + 144);
    v79 = *(_QWORD *)(v0 + 120);
    v80 = *(_QWORD *)(v0 + 128);
    v89 = *(_QWORD *)(v0 + 112);
    v91 = *(objc_super **)(v0 + 104);
    swift_task_dealloc(*(_QWORD *)(v0 + 224));
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v80);
    swift_task_dealloc(v79);
    swift_task_dealloc(v89);
    swift_task_dealloc(v91);
    return (*(uint64_t (**)(objc_super *))(v0 + 8))(v92);
  }
}

uint64_t sub_100110874()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 296);
  *(_QWORD *)(*(_QWORD *)v1 + 304) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    swift_errorRelease(v0);
    v3 = sub_100111130;
  }
  else
  {
    v3 = sub_1001108E0;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001108E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  void (*v9)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  objc_class *MyLocation;
  char *v29;
  id v30;
  objc_super *v31;
  objc_class *MyLocationHandle;
  char *v33;
  uint64_t v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  id v39;
  objc_super *v40;
  id v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  objc_super *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  void (*v83)(uint64_t, uint64_t);
  void *v84;
  uint64_t v85;
  objc_super *v86;
  objc_super *v87;
  objc_super *v88;
  objc_super *v89;
  uint64_t v90;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = *(_QWORD *)(v0 + 304);
    v5 = sub_1000B36A4(v1);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Unable to get live location from Find My", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

  }
  else
  {
    v9 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 264);
    v10 = *(_QWORD *)(v0 + 160);
    v11 = *(_QWORD *)(v0 + 120);
    sub_1000B36A4(v10);
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
    v12(v11, v1, v2);
    v12(v10, v11, v2);
    v9(v10, 0, 1, v2);
    v4 = *(_QWORD *)(v0 + 304);
  }
  v13 = *(_QWORD *)(v0 + 136);
  v14 = *(_QWORD *)(v0 + 88);
  v15 = *(_QWORD *)(v0 + 96);
  sub_1000B365C(*(_QWORD *)(v0 + 160), v13);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    v17 = *(void **)(v0 + 232);
    v16 = *(void (**)(uint64_t, uint64_t))(v0 + 240);
    v18 = *(_QWORD *)(v0 + 224);
    v19 = *(_QWORD *)(v0 + 200);
    v20 = *(_QWORD *)(v0 + 160);
    v21 = *(_QWORD *)(v0 + 136);
    swift_release();

    sub_1000B36A4(v20);
    v16(v18, v19);
    sub_1000B36A4(v21);
    v88 = 0;
  }
  else
  {
    v82 = *(id *)(v0 + 80);
    v22 = *(void **)(v0 + 232);
    v23 = *(char **)(v0 + 104);
    v24 = *(_QWORD *)(v0 + 112);
    v26 = *(_QWORD *)(v0 + 88);
    v25 = *(_QWORD *)(v0 + 96);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v25 + 32))(v24, *(_QWORD *)(v0 + 136), v26);
    v27 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
    v27(v23, v24, v26);
    MyLocation = (objc_class *)type metadata accessor for SearchFindMyLocation(0);
    v29 = (char *)objc_allocWithZone(MyLocation);
    UUID.init()(v29);
    v27(&v29[OBJC_IVAR____TtC4Maps20SearchFindMyLocation_location], (uint64_t)v23, v26);

    *(_QWORD *)(v0 + 32) = v29;
    *(_QWORD *)(v0 + 40) = MyLocation;
    v30 = objc_msgSendSuper2((objc_super *)(v0 + 32), "init");
    v31 = *(objc_super **)(v25 + 8);
    ((void (*)(char *, uint64_t))v31)(v23, v26);
    MyLocationHandle = (objc_class *)type metadata accessor for MapsFindMyLocationHandle();
    v33 = (char *)objc_allocWithZone(MyLocationHandle);
    v34 = OBJC_IVAR____TtC4Maps24MapsFindMyLocationHandle_location;
    *(_QWORD *)&v33[OBJC_IVAR____TtC4Maps24MapsFindMyLocationHandle_location] = 0;
    *(_QWORD *)&v33[OBJC_IVAR____TtC4Maps24MapsFindMyLocationHandle_handle] = v22;
    v35 = *(void **)&v33[v34];
    *(_QWORD *)&v33[v34] = v30;
    v36 = v22;
    v37 = v30;
    v38 = v36;
    v39 = v37;

    *(_QWORD *)(v0 + 48) = v33;
    *(_QWORD *)(v0 + 56) = MyLocationHandle;
    v40 = (objc_super *)objc_msgSendSuper2((objc_super *)(v0 + 48), "init");
    v84 = v39;

    v41 = objc_msgSend(v82, "dataForKey:", CFSTR("MapsSuggestionsContactAsDataKey"));
    v86 = v31;
    v89 = v40;
    if (v41)
    {
      v42 = v41;
      v43 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v41);
      v45 = v44;

      sub_10000E4BC(0, (unint64_t *)&qword_101494468, NSKeyedUnarchiver_ptr);
      v46 = sub_10000E4BC(0, (unint64_t *)&unk_10149E5F0, CNContact_ptr);
      sub_100036B08(v43, v45);
      v47 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v46, v43, v45, v46);
      sub_100036B4C(v43, v45);
      v78 = v43;
      if (v4)
      {
        if (qword_101490E58 != -1)
          swift_once(&qword_101490E58, sub_10010FA74);
        v48 = type metadata accessor for Logger(0);
        v49 = sub_10000E918(v48, (uint64_t)qword_1014D4A20);
        v50 = Logger.logObject.getter(v49);
        v51 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v50, v51))
        {
          v52 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v52 = 0;
          _os_log_impl((void *)&_mh_execute_header, v50, v51, "Unable to get data from Contacts", v52, 2u);
          swift_slowDealloc(v52, -1, -1);
        }

        swift_errorRetain(v4);
        v53 = swift_errorRetain(v4);
        v54 = Logger.logObject.getter(v53);
        v55 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v54, v55))
        {
          v56 = (uint8_t *)swift_slowAlloc(12, -1);
          v57 = swift_slowAlloc(32, -1);
          v90 = v57;
          *(_DWORD *)v56 = 136315138;
          *(_QWORD *)(v0 + 64) = v4;
          swift_errorRetain(v4);
          v58 = sub_100008B04(&qword_10149E610);
          v59 = String.init<A>(describing:)(v0 + 64, v58);
          v61 = v60;
          *(_QWORD *)(v0 + 72) = sub_1000C28FC(v59, v60, &v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v56 + 4, v56 + 12);
          swift_bridgeObjectRelease(v61);
          swift_errorRelease(v4);
          swift_errorRelease(v4);
          _os_log_impl((void *)&_mh_execute_header, v54, v55, "CNContactVCardSerialization threw an error: %s", v56, 0xCu);
          swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v57, -1, -1);
          swift_slowDealloc(v56, -1, -1);

          swift_errorRelease(v4);
        }
        else
        {
          swift_errorRelease(v4);
          swift_errorRelease(v4);
          swift_errorRelease(v4);

        }
        v47 = 0;
        v62 = v45;
      }
      else
      {
        v62 = v45;
      }
    }
    else
    {
      v47 = 0;
      v78 = 0;
      v62 = 0xF000000000000000;
    }
    v63 = *(void **)(v0 + 232);
    v81 = *(_QWORD *)(v0 + 224);
    v83 = *(void (**)(uint64_t, uint64_t))(v0 + 240);
    v79 = *(_QWORD *)(v0 + 160);
    v80 = *(_QWORD *)(v0 + 200);
    v64 = *(_QWORD *)(v0 + 112);
    v65 = *(_QWORD *)(v0 + 88);
    v66 = objc_allocWithZone((Class)type metadata accessor for MapsAutocompletePerson());
    v67 = v89;
    v88 = (objc_super *)sub_1001F10E0(v47, 0, v89, 0);

    swift_release();
    sub_1001117C8(v78, v62);

    ((void (*)(uint64_t, uint64_t))v86)(v64, v65);
    sub_1000B36A4(v79);
    v83(v81, v80);
  }
  v68 = *(_QWORD *)(v0 + 216);
  v70 = *(_QWORD *)(v0 + 184);
  v69 = *(_QWORD *)(v0 + 192);
  v72 = *(_QWORD *)(v0 + 152);
  v71 = *(_QWORD *)(v0 + 160);
  v74 = *(_QWORD *)(v0 + 136);
  v73 = *(_QWORD *)(v0 + 144);
  v75 = *(_QWORD *)(v0 + 120);
  v76 = *(_QWORD *)(v0 + 128);
  v85 = *(_QWORD *)(v0 + 112);
  v87 = *(objc_super **)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  swift_task_dealloc(v76);
  swift_task_dealloc(v75);
  swift_task_dealloc(v85);
  swift_task_dealloc(v87);
  return (*(uint64_t (**)(objc_super *))(v0 + 8))(v88);
}

uint64_t sub_100110FE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  double Double;
  _QWORD *v7;

  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0 + 264))(*(_QWORD *)(v0 + 152), 1, 1, *(_QWORD *)(v0 + 88));
  sub_1000B36A4(*(_QWORD *)(v0 + 152));
  if (qword_101490E58 != -1)
    swift_once(&qword_101490E58, sub_10010FA74);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10000E918(v1, (uint64_t)qword_1014D4A20);
  *(_QWORD *)(v0 + 288) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Unable to get cached location from Find My", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  Double = GEOConfigGetDouble(MapsConfig_GTLiveLocationFetchTimeout, off_1014B5048);
  v7 = (_QWORD *)swift_task_alloc(dword_101499244);
  *(_QWORD *)(v0 + 296) = v7;
  *v7 = v0;
  v7[1] = sub_100110874;
  return Session._maps_latestLocation(for:includeAddress:timeout:)(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 224), 0, Double);
}

uint64_t sub_100111130()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  objc_class *MyLocation;
  char *v21;
  id v22;
  void (*v23)(char *, uint64_t);
  objc_class *MyLocationHandle;
  char *v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  objc_super *v32;
  id v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  unint64_t v40;
  void *v41;
  char *v42;
  uint64_t v43;
  id v44;
  objc_super *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  void (*v61)(uint64_t, uint64_t);
  void *v62;
  uint64_t v63;
  objc_super *v64;
  objc_super *v65;
  objc_super *v66;

  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0 + 264))(*(_QWORD *)(v0 + 144), 1, 1, *(_QWORD *)(v0 + 88));
  v1 = sub_1000B36A4(*(_QWORD *)(v0 + 144));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Unable to get live location from Find My", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  v5 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 96);
  sub_1000B365C(*(_QWORD *)(v0 + 160), v5);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    v9 = *(void **)(v0 + 232);
    v8 = *(void (**)(uint64_t, uint64_t))(v0 + 240);
    v10 = *(_QWORD *)(v0 + 224);
    v11 = *(_QWORD *)(v0 + 200);
    v12 = *(_QWORD *)(v0 + 160);
    v13 = *(_QWORD *)(v0 + 136);
    swift_release();

    sub_1000B36A4(v12);
    v8(v10, v11);
    sub_1000B36A4(v13);
    v65 = 0;
  }
  else
  {
    v60 = *(id *)(v0 + 80);
    v14 = *(void **)(v0 + 232);
    v15 = *(char **)(v0 + 104);
    v16 = *(_QWORD *)(v0 + 112);
    v18 = *(_QWORD *)(v0 + 88);
    v17 = *(_QWORD *)(v0 + 96);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v17 + 32))(v16, *(_QWORD *)(v0 + 136), v18);
    v19 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
    v19(v15, v16, v18);
    MyLocation = (objc_class *)type metadata accessor for SearchFindMyLocation(0);
    v21 = (char *)objc_allocWithZone(MyLocation);
    UUID.init()(v21);
    v19(&v21[OBJC_IVAR____TtC4Maps20SearchFindMyLocation_location], (uint64_t)v15, v18);

    *(_QWORD *)(v0 + 32) = v21;
    *(_QWORD *)(v0 + 40) = MyLocation;
    v22 = objc_msgSendSuper2((objc_super *)(v0 + 32), "init");
    v23 = *(void (**)(char *, uint64_t))(v17 + 8);
    v23(v15, v18);
    MyLocationHandle = (objc_class *)type metadata accessor for MapsFindMyLocationHandle();
    v25 = (char *)objc_allocWithZone(MyLocationHandle);
    v26 = OBJC_IVAR____TtC4Maps24MapsFindMyLocationHandle_location;
    *(_QWORD *)&v25[OBJC_IVAR____TtC4Maps24MapsFindMyLocationHandle_location] = 0;
    *(_QWORD *)&v25[OBJC_IVAR____TtC4Maps24MapsFindMyLocationHandle_handle] = v14;
    v27 = *(void **)&v25[v26];
    *(_QWORD *)&v25[v26] = v22;
    v28 = v14;
    v29 = v22;
    v30 = v28;
    v31 = v29;

    *(_QWORD *)(v0 + 48) = v25;
    *(_QWORD *)(v0 + 56) = MyLocationHandle;
    v32 = (objc_super *)objc_msgSendSuper2((objc_super *)(v0 + 48), "init");
    v62 = v31;

    v33 = objc_msgSend(v60, "dataForKey:", CFSTR("MapsSuggestionsContactAsDataKey"));
    v66 = v32;
    if (v33)
    {
      v34 = v33;
      v35 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v33);
      v37 = v36;

      sub_10000E4BC(0, (unint64_t *)&qword_101494468, NSKeyedUnarchiver_ptr);
      v38 = sub_10000E4BC(0, (unint64_t *)&unk_10149E5F0, CNContact_ptr);
      sub_100036B08(v35, v37);
      v39 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v38, v35, v37, v38);
      sub_100036B4C(v35, v37);
      v56 = v35;
      v40 = v37;
    }
    else
    {
      v39 = 0;
      v56 = 0;
      v40 = 0xF000000000000000;
    }
    v41 = *(void **)(v0 + 232);
    v59 = *(_QWORD *)(v0 + 224);
    v61 = *(void (**)(uint64_t, uint64_t))(v0 + 240);
    v57 = *(_QWORD *)(v0 + 160);
    v58 = *(_QWORD *)(v0 + 200);
    v42 = *(char **)(v0 + 112);
    v43 = *(_QWORD *)(v0 + 88);
    v44 = objc_allocWithZone((Class)type metadata accessor for MapsAutocompletePerson());
    v45 = v66;
    v65 = (objc_super *)sub_1001F10E0(v39, 0, v66, 0);

    swift_release();
    sub_1001117C8(v56, v40);

    v23(v42, v43);
    sub_1000B36A4(v57);
    v61(v59, v58);
  }
  v46 = *(_QWORD *)(v0 + 216);
  v48 = *(_QWORD *)(v0 + 184);
  v47 = *(_QWORD *)(v0 + 192);
  v50 = *(_QWORD *)(v0 + 152);
  v49 = *(_QWORD *)(v0 + 160);
  v52 = *(_QWORD *)(v0 + 136);
  v51 = *(_QWORD *)(v0 + 144);
  v53 = *(_QWORD *)(v0 + 120);
  v54 = *(_QWORD *)(v0 + 128);
  v63 = *(_QWORD *)(v0 + 112);
  v64 = *(objc_super **)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v54);
  swift_task_dealloc(v53);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  return (*(uint64_t (**)(objc_super *))(v0 + 8))(v65);
}

uint64_t sub_1001117C8(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100036B4C(result, a2);
  return result;
}

id sub_1001117DC()
{
  void *v0;
  id v1;
  char *v2;
  id v3;
  objc_super v5;

  v1 = objc_allocWithZone((Class)type metadata accessor for PlaceSummaryImageDownloader());
  v2 = v0;
  v3 = objc_msgSend(v1, "init");
  *(_QWORD *)&v2[OBJC_IVAR____TtC4Maps28PlaceSummaryAsyncDataManager_imageDownloader] = v3;
  *(_QWORD *)&v2[OBJC_IVAR____TtC4Maps28PlaceSummaryAsyncDataManager_etaDownloader] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PlaceSummaryETADownloader()), "init");
  *(_QWORD *)&v2[OBJC_IVAR____TtC4Maps28PlaceSummaryAsyncDataManager_mapItemDownloader] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PlaceSummaryMapItemDownloader()), "init");

  v5.receiver = v2;
  v5.super_class = (Class)type metadata accessor for PlaceSummaryAsyncDataManager();
  return objc_msgSendSuper2(&v5, "init");
}

uint64_t sub_1001118B0(double a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;

  v4 = sub_100089E24();
  sub_1001A1F10(v4);
  swift_bridgeObjectRelease(v4);
  v5 = sub_10008AA6C();
  sub_1001A2284(v5);
  swift_release();
  v6 = sub_10008ABE0();
  sub_10019DF9C(v6, a1, a2);
  swift_release();
  v7 = (void *)sub_10008B680();
  sub_1001A2708(v7);
  swift_bridgeObjectRelease(v7);
  v8 = sub_10008B45C();
  sub_100184988(v8);
  swift_bridgeObjectRelease(v8);
  v9 = sub_10008B8A4();
  sub_1001AB6C8(v9);
  return swift_bridgeObjectRelease(v9);
}

id sub_100111A10()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PlaceSummaryAsyncDataManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for PlaceSummaryAsyncDataManager()
{
  return objc_opt_self(_TtC4Maps28PlaceSummaryAsyncDataManager);
}

unint64_t sub_100111AAC()
{
  unint64_t result;

  result = qword_10149AF08;
  if (!qword_10149AF08)
  {
    result = swift_getWitnessTable(byte_100E2C0D0, &type metadata for TransitPreferSubwayEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_10149AF08);
  }
  return result;
}

uint64_t sub_100111AF0()
{
  return sub_100010D70(&qword_10149AF10, &qword_10149AF18, (const char *)&protocol conformance descriptor for _IntentUpdatableEntityProperty<A, B, C>);
}

uint64_t sub_100111B1C()
{
  uint64_t v0;
  __n128 v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[2];

  v0 = sub_100008B04(&qword_101494370);
  v1 = __chkstk_darwin(v0);
  v3 = (char *)v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0, v1);
  v4 = *(_QWORD *)(v23[0] - 8);
  __chkstk_darwin(v23[0]);
  v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for String.LocalizationValue(0, v8);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for LocalizedStringResource(0, v12);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for TypeDisplayRepresentation(0, v17);
  sub_10000E930(v20, qword_1014D4A38);
  sub_10000E918(v20, (uint64_t)qword_1014D4A38);
  v21 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001ALL, 0x8000000100E4A320);
  static Locale.current.getter(v21);
  (*(void (**)(char *, _QWORD, _QWORD))(v4 + 104))(v6, enum case for LocalizedStringResource.BundleDescription.main(_:), v23[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v10, v6, "A setting to choose travel by commuter or light rail as a transit preference", 76, 2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v3, 1, 1, v15);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v19, v3);
}

uint64_t sub_100111D30(__n128 a1)
{
  uint64_t v1;

  v1 = type metadata accessor for LocalizedStringResource(0, a1);
  sub_10000E930(v1, qword_1014D4A50);
  sub_10000E918(v1, (uint64_t)qword_1014D4A50);
  return LocalizedStringResource.init(stringLiteral:)(0xD000000000000021, 0x8000000100E4A490);
}

uint64_t sub_100111D90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_100008B04(&qword_1014964F0);
  sub_10000E930(v0, qword_1014D4A68);
  v1 = sub_10000E918(v0, (uint64_t)qword_1014D4A68);
  IntentDescription.init(stringLiteral:)(0xD000000000000049, 0x8000000100E4A440);
  v2 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 0, 1, v2);
}

uint64_t sub_100111E18()
{
  uint64_t result;

  result = swift_getKeyPath(&unk_100E2C5A0);
  qword_1014D4A80 = result;
  return result;
}

uint64_t sub_100111E3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  return swift_task_switch(sub_100111E58, 0, 0);
}

uint64_t sub_100111E58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v0 + 24) = v1;
  *(_QWORD *)(v0 + 72) = v1;
  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 146));
  *(_BYTE *)(v0 + 145) = *(_BYTE *)(v0 + 146);
  if (qword_101490E78 != -1)
    swift_once(&qword_101490E78, sub_100111E18);
  v2 = qword_1014D4A80;
  *(_QWORD *)(v0 + 80) = qword_1014D4A80;
  v3 = async function pointer to AppEntity._setValue<A, B, C>(_:for:)[1];
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  *(_QWORD *)(v0 + 88) = v4;
  v5 = sub_100010D70(&qword_10149B018, &qword_10149B020, (const char *)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  *(_QWORD *)(v0 + 96) = v5;
  *v4 = v0;
  v4[1] = sub_100111F58;
  return AppEntity._setValue<A, B, C>(_:for:)(v0 + 145, v2, &type metadata for Bool, v5);
}

uint64_t sub_100111F58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  swift_release();
  swift_release();
  if (v0)
    v3 = sub_100072D78;
  else
    v3 = sub_100111FD8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100111FD8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  IntentParameter.wrappedValue.getter(v0 + 5);
  v1 = v0[5];
  v0[4] = v1;
  v2 = qword_1014D4A80;
  v0[14] = v1;
  v0[15] = v2;
  v3 = async function pointer to AppEntity._value<A, B>(for:)[1];
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  v0[16] = v4;
  *v4 = v0;
  v4[1] = sub_100072CA0;
  return AppEntity._value<A, B>(for:)(v0 + 18, v2, v0[12]);
}

double sub_10011206C()
{
  double result;

  if (qword_101490E78 != -1)
    swift_once(&qword_101490E78, sub_100111E18);
  *(_QWORD *)&result = swift_retain().n128_u64[0];
  return result;
}

unint64_t sub_1001120B0()
{
  unint64_t result;

  result = qword_10149AF20;
  if (!qword_10149AF20)
  {
    result = swift_getWitnessTable(byte_100E2C160, &type metadata for TransitPreferSubwayEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_10149AF20);
  }
  return result;
}

unint64_t sub_1001120F8()
{
  unint64_t result;

  result = qword_10149AF28;
  if (!qword_10149AF28)
  {
    result = swift_getWitnessTable(byte_100E2C188, &type metadata for TransitPreferSubwayEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_10149AF28);
  }
  return result;
}

uint64_t sub_10011213C(uint64_t a1)
{
  return *(_QWORD *)(swift_getOpaqueTypeConformance2(a1, &unk_101068BF0, 1) + 8);
}

uint64_t sub_100112160(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_100111AAC();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t sub_1001121A0@<X0>(uint64_t a1@<X8>)
{
  return sub_100073694(&qword_101490E68, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1014D4A50, (uint64_t)sub_100111D30, a1);
}

uint64_t sub_1001121C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_101490E70 != -1)
    swift_once(&qword_101490E70, sub_100111D90);
  v2 = sub_100008B04(&qword_1014964F0);
  v3 = sub_10000E918(v2, (uint64_t)qword_1014D4A68);
  return sub_1000742A4(v3, a1);
}

uint64_t sub_100112224(uint64_t a1)
{
  _OWORD *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = swift_task_alloc(dword_10149B034);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_10000DD08;
  *(_OWORD *)(v4 + 56) = *v1;
  *(_QWORD *)(v4 + 48) = a1;
  return swift_task_switch(sub_100111E58, 0, 0);
}

uint64_t sub_10011228C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_100112D88();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_1001122B0()
{
  return 0xD00000000000002ALL;
}

unint64_t sub_1001122D0()
{
  unint64_t result;

  result = qword_10149AF38;
  if (!qword_10149AF38)
  {
    result = swift_getWitnessTable(byte_100E2C1D4, &type metadata for TransitPreferSubwayEntity);
    atomic_store(result, (unint64_t *)&qword_10149AF38);
  }
  return result;
}

unint64_t sub_100112318()
{
  unint64_t result;

  result = qword_10149AF40;
  if (!qword_10149AF40)
  {
    result = swift_getWitnessTable(byte_100E2C3CC, &type metadata for TransitPreferSubwayQuery);
    atomic_store(result, (unint64_t *)&qword_10149AF40);
  }
  return result;
}

unint64_t sub_100112360()
{
  unint64_t result;

  result = qword_10149AF48;
  if (!qword_10149AF48)
  {
    result = swift_getWitnessTable("}p7", &type metadata for TransitPreferSubwayEntity);
    atomic_store(result, (unint64_t *)&qword_10149AF48);
  }
  return result;
}

unint64_t sub_1001123A8()
{
  unint64_t result;

  result = qword_10149AF50;
  if (!qword_10149AF50)
  {
    result = swift_getWitnessTable("ep7", &type metadata for TransitPreferSubwayEntity);
    atomic_store(result, (unint64_t *)&qword_10149AF50);
  }
  return result;
}

unint64_t sub_1001123F0()
{
  unint64_t result;

  result = qword_10149AF58;
  if (!qword_10149AF58)
  {
    result = swift_getWitnessTable("Mp7", &type metadata for TransitPreferSubwayEntity);
    atomic_store(result, (unint64_t *)&qword_10149AF58);
  }
  return result;
}

unint64_t sub_100112438()
{
  unint64_t result;

  result = qword_10149AF60;
  if (!qword_10149AF60)
  {
    result = swift_getWitnessTable("}o7", &type metadata for TransitPreferSubwayQuery);
    atomic_store(result, (unint64_t *)&qword_10149AF60);
  }
  return result;
}

uint64_t sub_10011247C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100112494, 0, 0);
}

uint64_t sub_100112494()
{
  uint64_t v0;
  _BYTE *v1;
  id v2;
  id v3;

  v1 = *(_BYTE **)(v0 + 16);
  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v3 = objc_msgSend(objc_allocWithZone((Class)TransitMutablePreferences), "initWithDefaults:", v2);

  LOBYTE(v2) = objc_msgSend(v3, "isModeDisabled:", 2);
  *v1 = v2 ^ 1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100112538(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 16) = *a2;
  return swift_task_switch(sub_100112554, 0, 0);
}

uint64_t sub_100112554()
{
  uint64_t v0;
  char v1;
  id v2;
  id v3;
  int BOOL;

  v1 = *(_BYTE *)(v0 + 16);
  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v3 = objc_msgSend(objc_allocWithZone((Class)TransitMutablePreferences), "initWithDefaults:", v2);

  objc_msgSend(v3, "setMode:disabled:", 2, (v1 & 1) == 0);
  objc_msgSend(v3, "synchronize");
  BOOL = GEOConfigGetBOOL(MapsConfig_PreferencesUniqueEntityDidUpdate, off_1014B5518);
  GEOConfigSetBOOL(MapsConfig_PreferencesUniqueEntityDidUpdate, off_1014B5518, BOOL ^ 1u);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_100112630()
{
  unint64_t result;

  result = qword_10149AF68;
  if (!qword_10149AF68)
  {
    result = swift_getWitnessTable("mo7", &type metadata for TransitPreferSubwayEntity);
    atomic_store(result, (unint64_t *)&qword_10149AF68);
  }
  return result;
}

unint64_t sub_100112678()
{
  unint64_t result;

  result = qword_10149AF70;
  if (!qword_10149AF70)
  {
    result = swift_getWitnessTable("\rp7", &type metadata for TransitPreferSubwayEntity);
    atomic_store(result, (unint64_t *)&qword_10149AF70);
  }
  return result;
}

unint64_t sub_1001126C0()
{
  unint64_t result;

  result = qword_10149AF78;
  if (!qword_10149AF78)
  {
    result = swift_getWitnessTable(byte_100E2C31C, &type metadata for TransitPreferSubwayEntity);
    atomic_store(result, (unint64_t *)&qword_10149AF78);
  }
  return result;
}

unint64_t sub_100112708()
{
  unint64_t result;

  result = qword_10149AF80;
  if (!qword_10149AF80)
  {
    result = swift_getWitnessTable(byte_100E2C374, &type metadata for TransitPreferSubwayEntity);
    atomic_store(result, (unint64_t *)&qword_10149AF80);
  }
  return result;
}

uint64_t sub_10011274C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = sub_100112914();
  result = UniqueAppEntity<>.id.getter(a1, v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_100112788@<X0>(uint64_t a1@<X8>)
{
  return sub_100073694(&qword_101490E60, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_1014D4A38, (uint64_t)sub_100111B1C, a1);
}

uint64_t sub_1001127AC()
{
  return sub_100010D70(&qword_10149AF88, &qword_10149AF90, (const char *)&protocol conformance descriptor for EmptyResolverSpecification<A>);
}

uint64_t sub_1001127D8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001122D0();
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_100112814()
{
  unint64_t result;

  result = qword_10149AF98;
  if (!qword_10149AF98)
  {
    result = swift_getWitnessTable(byte_100E2C3A4, &type metadata for TransitPreferSubwayEntity);
    atomic_store(result, (unint64_t *)&qword_10149AF98);
  }
  return result;
}

uint64_t sub_100112858(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100112914();
  return UniqueAppEntity.displayRepresentation.getter(a1, v2);
}

uint64_t sub_100112890(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100112708();
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_1001128CC()
{
  unint64_t result;

  result = qword_10149AFA0;
  if (!qword_10149AFA0)
  {
    result = swift_getWitnessTable(byte_100E2C40C, &type metadata for TransitPreferSubwayQuery);
    atomic_store(result, (unint64_t *)&qword_10149AFA0);
  }
  return result;
}

unint64_t sub_100112914()
{
  unint64_t result;

  result = qword_10149AFA8[0];
  if (!qword_10149AFA8[0])
  {
    result = swift_getWitnessTable(byte_100E2C1A4, &type metadata for TransitPreferSubwayEntity);
    atomic_store(result, qword_10149AFA8);
  }
  return result;
}

uint64_t sub_100112958(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 16) = a1;
  v3 = type metadata accessor for LocalizedStringResource(0, a2);
  *(_QWORD *)(v2 + 24) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001129B0, 0, 0);
}

uint64_t sub_1001129B0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  sub_100008B04(&qword_10149AF18);
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000001ALL, 0x8000000100E4A320);
  v3 = sub_100010D70(&qword_10149B018, &qword_10149B020, (const char *)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  *v2 = _IntentUpdatableEntityProperty<>.init(title:get:set:intent:)(v1, &unk_10149B008, 0, &unk_10149B010, 0, &type metadata for TransitPreferSubwayEntity.UpdateIntent_value, v3);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100112A6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to UniqueAppEntityQuery.allEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_100112318();
  *v4 = v2;
  v4[1] = sub_100073A34;
  return UniqueAppEntityQuery.allEntities()(a2, v5);
}

unint64_t sub_100112AD8()
{
  unint64_t result;

  result = qword_10149AFC0;
  if (!qword_10149AFC0)
  {
    result = swift_getWitnessTable("eo7", &type metadata for TransitPreferSubwayQuery);
    atomic_store(result, (unint64_t *)&qword_10149AFC0);
  }
  return result;
}

unint64_t sub_100112B20()
{
  unint64_t result;

  result = qword_10149AFC8[0];
  if (!qword_10149AFC8[0])
  {
    result = swift_getWitnessTable("=m7", &type metadata for TransitPreferSubwayQuery);
    atomic_store(result, qword_10149AFC8);
  }
  return result;
}

uint64_t sub_100112B68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to UniqueAppEntityQuery.entities(for:)[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100112318();
  *v5 = v2;
  v5[1] = sub_100073B94;
  return UniqueAppEntityQuery.entities(for:)(a1, a2, v6);
}

uint64_t sub_100112BD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to UniqueAppEntityQuery.suggestedEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_100112318();
  *v4 = v2;
  v4[1] = sub_1000742EC;
  return UniqueAppEntityQuery.suggestedEntities()(a2, v5);
}

unint64_t sub_100112C40()
{
  unint64_t result;

  result = qword_10149AFE0;
  if (!qword_10149AFE0)
  {
    result = swift_getWitnessTable("%m7", &type metadata for TransitPreferSubwayQuery);
    atomic_store(result, (unint64_t *)&qword_10149AFE0);
  }
  return result;
}

unint64_t sub_100112C88()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_10149AFE8;
  if (!qword_10149AFE8)
  {
    v1 = sub_10000E5D4(qword_10149AFF0);
    v2 = sub_1001126C0();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_10149AFE8);
  }
  return result;
}

uint64_t sub_100112CEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100112438();
  *v5 = v2;
  v5[1] = sub_10000C0E0;
  return EntityQuery.results()(a1, a2, v6);
}

ValueMetadata *type metadata accessor for TransitPreferSubwayQuery()
{
  return &type metadata for TransitPreferSubwayQuery;
}

ValueMetadata *type metadata accessor for TransitPreferSubwayEntity.UpdateIntent_value()
{
  return &type metadata for TransitPreferSubwayEntity.UpdateIntent_value;
}

ValueMetadata *type metadata accessor for TransitPreferSubwayEntity()
{
  return &type metadata for TransitPreferSubwayEntity;
}

uint64_t sub_100112D88()
{
  uint64_t v0;
  __n128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  char *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v27;
  void (*v28)(char *);
  unsigned int v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  char *v31;
  char *v32;
  char v33;
  uint64_t v34;

  v0 = sub_100008B04(&qword_1014964C0);
  v1 = __chkstk_darwin(v0);
  v32 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for InputConnectionBehavior(0, v1);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v31 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100008B04(&qword_1014964C8);
  __chkstk_darwin(v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v27 - v10;
  v12 = sub_100008B04(&qword_101494370);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for LocalizedStringResource(0, v13);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100008B04(&qword_10149B028);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000024, 0x8000000100E4A3C0);
  v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
  v30(v15, 1, 1, v16);
  v34 = 0;
  v20 = type metadata accessor for IntentDialog(0);
  v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56);
  v21(v11, 1, 1, v20);
  v21(v8, 1, 1, v20);
  v29 = enum case for InputConnectionBehavior.default(_:);
  v28 = *(void (**)(char *))(v4 + 104);
  v22 = v31;
  v28(v31);
  v23 = sub_1001122D0();
  v27 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v19, v15, &v34, v11, v8, v22, v23);
  sub_100008B04(&qword_1014964D8);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000042, 0x8000000100E4A3F0);
  v30(v15, 1, 1, v16);
  v33 = 2;
  v24 = type metadata accessor for Bool.IntentDisplayName(0);
  v25 = v32;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v32, 1, 1, v24);
  v21(v11, 1, 1, v20);
  ((void (*)(char *, _QWORD, uint64_t))v28)(v22, v29, v3);
  IntentParameter<>.init(title:description:default:displayName:requestValueDialog:inputConnectionBehavior:)(v19, v15, &v33, v25, v11, v22);
  return v27;
}

double sub_1001130AC@<D0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *a1;
  *a2 = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

ValueMetadata *type metadata accessor for PlaceSummaryUnitUserGeneratedGuides()
{
  return &type metadata for PlaceSummaryUnitUserGeneratedGuides;
}

uint64_t sub_10011324C(uint64_t a1)
{
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  void (*v12)(char *, char *, uint64_t);
  char v13;
  void (*v14)(char *, uint64_t);
  uint64_t v16;
  char *v17;
  _BYTE v18[24];
  uint64_t v19;

  ObjectType = swift_getObjectType(v1);
  v4 = type metadata accessor for Handle(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v16 - v9;
  sub_1000110D4(a1, (uint64_t)v18);
  if (!v19)
  {
    sub_10000C180((uint64_t)v18);
    goto LABEL_5;
  }
  if ((swift_dynamicCast(&v17, v18, (char *)&type metadata for Any + 8, ObjectType, 6) & 1) == 0)
  {
LABEL_5:
    v13 = 0;
    return v13 & 1;
  }
  v11 = v17;
  v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v12(v10, &v17[OBJC_IVAR____TtC4Maps16MapsFindMyHandle_handle], v4);
  v12(v7, (char *)(v1 + OBJC_IVAR____TtC4Maps16MapsFindMyHandle_handle), v4);
  v13 = static Handle.== infix(_:_:)(v10, v7);
  v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v7, v4);
  v14(v10, v4);

  return v13 & 1;
}

uint64_t sub_100113530()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t);
  unint64_t v11;
  int v12;
  id v13;
  __n128 v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  void *v25;
  id v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  NSString v36;
  id v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  NSString v45;
  id v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  char *v59;
  void (*v60)(char *, uint64_t);
  uint64_t (*v61)(char *, __n128);
  uint64_t v62;
  uint64_t v63;
  _QWORD v64[4];
  uint64_t v65;

  v1 = type metadata accessor for Handle(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = (uint64_t)_swiftEmptyArrayStorage;
  v61 = *(uint64_t (**)(char *, __n128))(v2 + 16);
  v62 = v0 + OBJC_IVAR____TtC4Maps16MapsFindMyHandle_handle;
  v6 = v61(v5, v3);
  v7 = Handle.identifier.getter(v6);
  v9 = v8;
  v10 = *(void (**)(char *, uint64_t))(v2 + 8);
  v59 = v5;
  v60 = v10;
  v63 = v1;
  v10(v5, v1);
  v64[2] = v7;
  v64[3] = v9;
  v64[0] = 64;
  v64[1] = 0xE100000000000000;
  v11 = sub_10006C008();
  v12 = StringProtocol.contains<A>(_:)(v64, &type metadata for String, &type metadata for String, v11, v11);
  swift_bridgeObjectRelease(v9);
  v13 = sub_100114194();
  if (!v13)
  {
    if ((v12 & 1) != 0)
      goto LABEL_33;
LABEL_30:
    v39 = v59;
    v40 = v63;
    v41 = ((uint64_t (*)(char *, uint64_t, uint64_t, __n128))v61)(v59, v62, v63, v14);
    Handle.identifier.getter(v41);
    v43 = v42;
    v60(v39, v40);
    v44 = objc_allocWithZone((Class)CNPhoneNumber);
    v45 = String._bridgeToObjectiveC()();
    v46 = objc_msgSend(v44, "initWithStringValue:", v45, swift_bridgeObjectRelease(v43).n128_f64[0]);

    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v47);
    v49 = *(_QWORD *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v48 = *(_QWORD *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v49 >= v48 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1);
    v50 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v49, v46);
    specialized Array._endMutation()(v50);
    goto LABEL_33;
  }
  v15 = v13;
  v16 = objc_msgSend(v13, "phoneNumbers");

  v17 = sub_100008B04((uint64_t *)&unk_1014A0C80);
  v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, v17);

  if ((unint64_t)v18 >> 62)
  {
LABEL_25:
    if (v18 < 0)
      v38 = v18;
    else
      v38 = v18 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v18);
    v19 = _CocoaArrayWrapper.endIndex.getter(v38);
    swift_bridgeObjectRelease(v18);
    if (v19)
      goto LABEL_4;
    goto LABEL_29;
  }
  v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v19)
  {
LABEL_29:
    v14 = swift_bridgeObjectRelease(v18);
    if ((v12 & 1) != 0)
      goto LABEL_33;
    goto LABEL_30;
  }
LABEL_4:
  v20 = 0;
  v21 = v12 ^ 1;
  v22 = v18 & 0xC000000000000001;
  v56 = v18 & 0xFFFFFFFFFFFFFF8;
  v58 = v18;
  v57 = v12;
LABEL_5:
  HIDWORD(v55) = v21;
  v23 = v20;
  do
  {
    if (v22)
    {
      v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v23, v18);
    }
    else
    {
      if (v23 >= *(_QWORD *)(v56 + 16))
        goto LABEL_24;
      v24 = *(id *)(v18 + 8 * v23 + 32);
    }
    v25 = v24;
    v20 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v26 = objc_msgSend(v24, "value");
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v26);
    v28 = *(_QWORD *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v27 = *(_QWORD *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v28 >= v27 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
    v29 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v26);
    specialized Array._endMutation()(v29);
    if ((v12 & 1) != 0)
    {

    }
    else
    {
      v30 = v59;
      v31 = v63;
      v32 = ((uint64_t (*)(char *, uint64_t, uint64_t))v61)(v59, v62, v63);
      Handle.identifier.getter(v32);
      v34 = v33;
      v60(v30, v31);
      v35 = objc_allocWithZone((Class)CNPhoneNumber);
      v36 = String._bridgeToObjectiveC()();
      v37 = objc_msgSend(v35, "initWithStringValue:", v36, swift_bridgeObjectRelease(v34).n128_f64[0]);

      LOBYTE(v36) = objc_msgSend(v26, "isLikePhoneNumber:", v37);
      v12 = v57;
      v18 = v58;

      if ((v36 & 1) != 0)
      {
        v21 = 0;
        if (v20 != v19)
          goto LABEL_5;
        swift_bridgeObjectRelease(v18);
        goto LABEL_33;
      }
    }
    ++v23;
  }
  while (v20 != v19);
  v14 = swift_bridgeObjectRelease(v18);
  if ((v55 & 0x100000000) != 0)
    goto LABEL_30;
LABEL_33:
  v51 = v65;
  sub_100035B60(v65);
  v53 = v52;
  swift_bridgeObjectRelease(v51);
  return v53;
}

uint64_t sub_1001139E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t (*v7)(char *, uint64_t, uint64_t, __n128);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  unint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  _QWORD *v31;
  id v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD v45[2];
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;

  v1 = type metadata accessor for Handle(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v45[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = _swiftEmptyArrayStorage;
  v6 = v0 + OBJC_IVAR____TtC4Maps16MapsFindMyHandle_handle;
  v7 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v2 + 16);
  v8 = v7(v5, v0 + OBJC_IVAR____TtC4Maps16MapsFindMyHandle_handle, v1, v3);
  v9 = Handle.identifier.getter(v8);
  v11 = v10;
  v12 = *(void (**)(char *, uint64_t))(v2 + 8);
  v12(v5, v1);
  v46 = (_QWORD *)v9;
  v47 = v11;
  v45[0] = 64;
  v45[1] = 0xE100000000000000;
  v13 = sub_10006C008();
  LOBYTE(v9) = StringProtocol.contains<A>(_:)(v45, &type metadata for String, &type metadata for String, v13, v13);
  v14 = swift_bridgeObjectRelease(v11);
  if ((v9 & 1) != 0)
  {
    v15 = v7(v5, v6, v1, v14);
    v16 = Handle.identifier.getter(v15);
    v18 = v17;
    v12(v5, v1);
    v19 = v48;
    if ((swift_isUniquelyReferenced_nonNull_native(v48) & 1) == 0)
      v19 = sub_1000A89A8(0, v19[2] + 1, 1, v19);
    v21 = v19[2];
    v20 = v19[3];
    if (v21 >= v20 >> 1)
      v19 = sub_1000A89A8((_QWORD *)(v20 > 1), v21 + 1, 1, v19);
    v19[2] = v21 + 1;
    v22 = &v19[2 * v21];
    v22[4] = v16;
    v22[5] = v18;
    v48 = v19;
  }
  v23 = sub_100114194();
  if (!v23)
    goto LABEL_25;
  v24 = v23;
  v25 = objc_msgSend(v23, "emailAddresses");

  v26 = sub_100008B04((uint64_t *)&unk_1014A0C80);
  v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v25, v26);

  if (!((unint64_t)v27 >> 62))
  {
    v28 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v28)
      goto LABEL_10;
LABEL_23:
    swift_bridgeObjectRelease(v27);
    v31 = _swiftEmptyArrayStorage;
LABEL_24:
    sub_1001202E8((uint64_t)v31);
LABEL_25:
    v42 = v48;
    v43 = sub_100035D18((uint64_t)v48);
    swift_bridgeObjectRelease(v42);
    return v43;
  }
  if (v27 < 0)
    v41 = v27;
  else
    v41 = v27 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v27);
  v28 = _CocoaArrayWrapper.endIndex.getter(v41);
  swift_bridgeObjectRelease(v27);
  if (!v28)
    goto LABEL_23;
LABEL_10:
  v46 = _swiftEmptyArrayStorage;
  result = sub_1001323FC(0, v28 & ~(v28 >> 63), 0);
  if ((v28 & 0x8000000000000000) == 0)
  {
    v30 = 0;
    v31 = v46;
    do
    {
      if ((v27 & 0xC000000000000001) != 0)
        v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v30, v27);
      else
        v32 = *(id *)(v27 + 8 * v30 + 32);
      v33 = v32;
      v34 = objc_msgSend(v32, "value");
      v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      v37 = v36;

      v46 = v31;
      v39 = v31[2];
      v38 = v31[3];
      if (v39 >= v38 >> 1)
      {
        sub_1001323FC(v38 > 1, v39 + 1, 1);
        v31 = v46;
      }
      ++v30;
      v31[2] = v39 + 1;
      v40 = &v31[2 * v39];
      v40[4] = v35;
      v40[5] = v37;
    }
    while (v28 != v30);
    swift_bridgeObjectRelease(v27);
    goto LABEL_24;
  }
  __break(1u);
  return result;
}

id sub_100113D30()
{
  return sub_100113F6C((SEL *)&selRef_senderNameForAddress_ofType_);
}

uint64_t sub_100113D90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  Swift::String v18;

  v1 = type metadata accessor for Handle(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101490ED0 != -1)
    swift_once(&qword_101490ED0, sub_10011833C);
  v18._object = (void *)0x8000000100E4A590;
  v5._object = (void *)0x8000000100E4A560;
  v5._countAndFlagsBits = 0xD000000000000025;
  v6._countAndFlagsBits = 0x4C20739980E24025;
  v6._object = (void *)0xAF6E6F697461636FLL;
  v18._countAndFlagsBits = 0x1000000000000054;
  v7 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, (Swift::String_optional)0, (NSBundle)qword_1014D4B80, v6, v18);
  v8 = sub_100008B04((uint64_t *)&unk_10149A4F0);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100E22F40;
  v10 = sub_100113D30();
  v12 = v11;
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  *(_QWORD *)(v9 + 64) = sub_10000D8E0();
  if (!v12)
  {
    v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v0 + OBJC_IVAR____TtC4Maps16MapsFindMyHandle_handle, v1);
    v10 = (id)Handle.identifier.getter(v13);
    v12 = v14;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  *(_QWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 40) = v12;
  v15 = String.init(format:_:)(v7._countAndFlagsBits, v7._object, v9);
  swift_bridgeObjectRelease(v7._object);
  return v15;
}

id sub_100113F60()
{
  return sub_100113F6C((SEL *)&selRef_spokenContactNameForAddress_ofType_);
}

id sub_100113F6C(SEL *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id result;
  void *v8;
  uint64_t v9;
  uint64_t (*v10)(char *, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  NSString v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  NSString *const *v21;
  uint64_t v22;
  uint64_t v23;
  NSString v24;
  id v25;
  uint64_t v26;
  _QWORD v27[4];

  v3 = type metadata accessor for Handle(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend((id)objc_opt_self(AddressBookManager), "sharedManager");
  if (result)
  {
    v8 = result;
    v9 = v1 + OBJC_IVAR____TtC4Maps16MapsFindMyHandle_handle;
    v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16);
    v11 = v10(v6, v1 + OBJC_IVAR____TtC4Maps16MapsFindMyHandle_handle, v3);
    Handle.identifier.getter(v11);
    v13 = v12;
    v14 = *(void (**)(char *, uint64_t))(v4 + 8);
    v14(v6, v3);
    v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v13);
    v16 = v10(v6, v9, v3);
    v17 = Handle.identifier.getter(v16);
    v19 = v18;
    v14(v6, v3);
    v27[2] = v17;
    v27[3] = v19;
    v27[0] = 64;
    v27[1] = 0xE100000000000000;
    v20 = sub_10006C008();
    LOBYTE(v17) = StringProtocol.contains<A>(_:)(v27, &type metadata for String, &type metadata for String, v20, v20);
    swift_bridgeObjectRelease(v19);
    v21 = &CNContactEmailAddressesKey;
    if ((v17 & 1) == 0)
      v21 = &CNContactPhoneNumbersKey;
    static String._unconditionallyBridgeFromObjectiveC(_:)(*v21);
    v23 = v22;
    v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v23);
    v25 = objc_msgSend(v8, *a1, v15, v24);

    if (!v25)
      return 0;
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);

    return (id)v26;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100114194()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t (*v6)(char *, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t);
  unint64_t v12;
  id result;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSString v18;
  char **v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  _QWORD v23[4];

  v1 = type metadata accessor for Handle(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = v0 + OBJC_IVAR____TtC4Maps16MapsFindMyHandle_handle;
  v6 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v7 = v6(v4, v0 + OBJC_IVAR____TtC4Maps16MapsFindMyHandle_handle, v1);
  v8 = Handle.identifier.getter(v7);
  v10 = v9;
  v11 = *(void (**)(char *, uint64_t))(v2 + 8);
  v11(v4, v1);
  v23[2] = v8;
  v23[3] = v10;
  v23[0] = 64;
  v23[1] = 0xE100000000000000;
  v12 = sub_10006C008();
  LOBYTE(v8) = StringProtocol.contains<A>(_:)(v23, &type metadata for String, &type metadata for String, v12, v12);
  swift_bridgeObjectRelease(v10);
  result = objc_msgSend((id)objc_opt_self(AddressBookManager), "sharedManager");
  v14 = result;
  if ((v8 & 1) != 0)
  {
    if (result)
    {
      v15 = v6(v4, v5, v1);
      Handle.identifier.getter(v15);
      v17 = v16;
      v11(v4, v1);
      v18 = String._bridgeToObjectiveC()();
      v19 = &selRef_contactWithEmailAddress_;
LABEL_6:
      swift_bridgeObjectRelease(v17);
      v22 = objc_msgSend(v14, *v19, v18);

      return v22;
    }
    __break(1u);
  }
  else if (result)
  {
    v20 = v6(v4, v5, v1);
    Handle.identifier.getter(v20);
    v17 = v21;
    v11(v4, v1);
    v18 = String._bridgeToObjectiveC()();
    v19 = &selRef_contactWithPhoneNumber_;
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

id sub_100114378(double a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSString v16;
  id v17;
  uint64_t v19;

  v7 = type metadata accessor for Handle(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100114194();
  if (v11)
  {
    v12 = v11;
  }
  else
  {
    v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v3 + OBJC_IVAR____TtC4Maps16MapsFindMyHandle_handle, v7);
    Handle.identifier.getter(v13);
    v15 = v14;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v15);
    v12 = objc_msgSend((id)objc_opt_self(CNContact), "contactWithDisplayName:emailOrPhoneNumber:", 0, v16);

  }
  v17 = objc_msgSend(v12, "avatarImageWithSize:scale:rightToLeft:", 0, a2, a3, a1);

  return v17;
}

id sub_100114544()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MapsFindMyHandle(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1001145B4()
{
  return type metadata accessor for MapsFindMyHandle(0);
}

uint64_t type metadata accessor for MapsFindMyHandle(uint64_t a1)
{
  uint64_t result;

  result = qword_10149B060;
  if (!qword_10149B060)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MapsFindMyHandle);
  return result;
}

uint64_t sub_1001145F8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for Handle(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 1, &v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

unint64_t sub_100114664()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101494028;
  if (!qword_101494028)
  {
    v1 = objc_opt_self(CNPhoneNumber);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_101494028);
  }
  return result;
}

unint64_t sub_1001146A0()
{
  unint64_t result;
  unint64_t v1;

  result = qword_101494030;
  if (!qword_101494030)
  {
    v1 = sub_100114664();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_101494030);
  }
  return result;
}

uint64_t sub_1001146E8(uint64_t a1)
{
  return sub_100114848(a1, qword_1014D4A90, 0xD000000000000012, 0x8000000100E4A610);
}

uint64_t sub_10011470C(uint64_t a1)
{
  return sub_100114848(a1, qword_1014D4AA8, 0x7262694C7370614DLL, 0xEB00000000797261);
}

uint64_t sub_100114734(uint64_t a1)
{
  return sub_100114848(a1, qword_1014D4AC0, 0x725479627261654ELL, 0xED00007469736E61);
}

uint64_t sub_100114760(uint64_t a1)
{
  return sub_100114848(a1, qword_1014D4AD8, 0x76697463616F7250, 0xED00007961725465);
}

uint64_t sub_10011478C(uint64_t a1)
{
  return sub_100114848(a1, qword_1014D4AF0, 0x616C506574756F52, 0xED0000676E696E6ELL);
}

uint64_t sub_1001147B8(uint64_t a1)
{
  return sub_100114848(a1, qword_1014D4B08, 0x4341686372616553, 0xE800000000000000);
}

uint64_t sub_1001147D8(uint64_t a1)
{
  return sub_100114848(a1, qword_1014D4B20, 0x6F48686372616553, 0xEA0000000000656DLL);
}

uint64_t sub_1001147FC(uint64_t a1)
{
  return sub_100114848(a1, qword_1014D4B38, 0x6946686372616553, 0xEC000000794D646ELL);
}

uint64_t sub_100114824(uint64_t a1)
{
  return sub_100114848(a1, qword_1014D4B50, 0xD000000000000018, 0x8000000100E4A630);
}

uint64_t sub_100114848(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = type metadata accessor for Logger(0);
  sub_10000E930(v7, a2);
  sub_10000E918(v7, (uint64_t)a2);
  return Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xEE007370614D2E65, a3, a4);
}

uint64_t sub_100114A58(void *a1)
{
  uint64_t v1;
  void *v2;
  id v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;

  v2 = *(void **)(v1 + OBJC_IVAR____TtC4Maps18TransitLineContext_chromeViewController);
  if (!v2)
    return 0;
  v4 = v2;
  if (!objc_msgSend(v4, "isTopContext:", v1))
    goto LABEL_15;
  v5 = objc_msgSend(v4, "mapView");
  if (!v5)
    goto LABEL_15;
  v6 = v5;
  if (objc_msgSend(a1, "_maps_numLines") != (id)1)
  {
LABEL_14:

LABEL_15:
    return 0;
  }
  v7 = objc_msgSend(v6, "_selectedTransitLineIDs");
  if (v7)
  {
    v8 = v7;
    v9 = sub_10000E4BC(0, &qword_10149A2F0, MKMapItemIdentifier_ptr);
    v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);

  }
  else
  {
    v10 = 0;
  }
  v11 = objc_msgSend(a1, "_maps_lineIdentifiers");
  if (v11)
  {
    v12 = v11;
    v13 = sub_10000E4BC(0, &qword_10149A2F0, MKMapItemIdentifier_ptr);
    v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v13);

    if (v10)
    {
      if (v14)
      {
        v15 = swift_bridgeObjectRetain(v10);
        v16 = sub_1000846F4(v15, v14);
        swift_bridgeObjectRelease_n(v10, 2);
        swift_bridgeObjectRelease(v14);

        return v16 & 1;
      }
      goto LABEL_13;
    }

    if (v14)
    {
      swift_bridgeObjectRelease(v14);
      return 0;
    }
  }
  else
  {
    if (v10)
    {
LABEL_13:
      swift_bridgeObjectRelease(v10);
      goto LABEL_14;
    }

  }
  return 1;
}

uint64_t sub_100114C5C(void *a1)
{
  uint64_t v1;
  void *v2;
  id v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v17;

  v2 = *(void **)(v1 + OBJC_IVAR____TtC4Maps18TransitLineContext_chromeViewController);
  if (v2)
  {
    v4 = v2;
    if (objc_msgSend(v4, "isTopContext:", v1)
      && (v5 = objc_msgSend(v4, "mapView")) != 0)
    {
      v6 = v5;
      v7 = objc_msgSend(v5, "_selectedTransitLineIDs");
      if (v7)
      {
        v8 = v7;
        v9 = sub_10000E4BC(0, &qword_10149A2F0, MKMapItemIdentifier_ptr);
        v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);

      }
      else
      {
        v10 = 0;
      }
      v12 = sub_100008B04((uint64_t *)&unk_101493B10);
      v13 = swift_allocObject(v12, 40, 7);
      *(_OWORD *)(v13 + 16) = xmmword_100E23F50;
      *(_QWORD *)(v13 + 32) = a1;
      v17 = v13;
      specialized Array._endMutation()(v13);
      v14 = a1;
      if (v10)
      {
        v15 = swift_bridgeObjectRetain(v10);
        v11 = sub_1000846F4(v15, v17);
        swift_bridgeObjectRelease_n(v10, 2);
      }
      else
      {
        v11 = 0;
      }
      swift_bridgeObjectRelease(v17);

    }
    else
    {
      v11 = 0;
    }

  }
  else
  {
    v11 = 0;
  }
  return v11 & 1;
}

void sub_100114E38()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC4Maps18TransitLineContext_chromeViewController);
  if (v1)
  {
    v2 = objc_msgSend(v1, "mapView");
    if (v2)
    {
      v3 = v2;
      v4 = objc_msgSend((id)objc_opt_self(MKMapService), "sharedService");
      if (v4)
      {
        v5 = v4;
        v6 = objc_msgSend(v3, "mapRegion");
        v7 = objc_msgSend(v5, "mapsDefaultTraitsForMapRegion:source:", v6, 20);

        if (v7)
        {

          return;
        }
        goto LABEL_12;
      }
LABEL_11:
      __break(1u);
LABEL_12:
      __break(1u);
      return;
    }
  }
  v8 = objc_msgSend((id)objc_opt_self(MKMapService), "sharedService");
  if (!v8)
  {
    __break(1u);
    goto LABEL_10;
  }
  v9 = v8;
  v10 = objc_msgSend(v8, "mapsDefaultTraits");

  if (!v10)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
}

void sub_100114F5C(void *a1, int a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  id v15;
  unint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  char *v22;
  void *v23;
  void *v24;
  _QWORD *v25;
  void *v26;
  char *v27;
  id v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  void *v35;
  id v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  void *v44;
  char *v45;
  id v46;
  id v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  id v53;
  id v54;
  id v55;
  void **aBlock;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, uint64_t, void *);
  void *v59;
  void (*v60)(uint64_t, uint64_t);
  _QWORD *v61;

  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v10 = __chkstk_darwin(v9).n128_u64[0];
  v12 = (char *)&v52 - v11;
  v13 = OBJC_IVAR____TtC4Maps18TransitLineContext_chromeViewController;
  v14 = *(void **)&v2[OBJC_IVAR____TtC4Maps18TransitLineContext_chromeViewController];
  if (v14)
  {
    v55 = objc_msgSend(v14, "mapView", v10);
    if (v55)
    {
      LODWORD(v54) = a2;
      v15 = objc_msgSend(a1, "_maps_numLines");
      if (!v15)
      {
        objc_msgSend(v55, "_deselectTransitLineMarker");

        return;
      }
      v16 = (unint64_t)v15;
      v17 = objc_msgSend(v55, "mapRegion");
      v53 = v17;
      if (!v17)
      {
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      Date.init()(v17);
      if (v16 >= 2)
      {
        (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v12, v5);
        v18 = *(unsigned __int8 *)(v6 + 80);
        v19 = (v18 + 40) & ~v18;
        v20 = swift_allocObject(&unk_1011A35C0, v19 + v7, v18 | 7);
        *(_QWORD *)(v20 + 16) = v2;
        *(_BYTE *)(v20 + 24) = v54 & 1;
        v21 = v53;
        *(_QWORD *)(v20 + 32) = v53;
        (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v20 + v19, v8, v5);
        v22 = v2;
        v54 = v21;
        objc_msgSend(a1, "_maps_numLines");
        sub_100114E38();
        v24 = v23;
        v25 = (_QWORD *)swift_allocObject(&unk_1011A35E8, 48, 7);
        v25[2] = sub_100116CF4;
        v25[3] = v20;
        v25[4] = v22;
        v25[5] = a1;
        v60 = (void (*)(uint64_t, uint64_t))sub_100116DD4;
        v61 = v25;
        aBlock = _NSConcreteStackBlock;
        v57 = 1107296256;
        v58 = sub_10011582C;
        v59 = &unk_1011A3600;
        v26 = _Block_copy(&aBlock);
        v27 = v22;
        swift_retain();
        v28 = a1;
        swift_release();
        objc_msgSend(v28, "_maps_loadLineInfoUsingTraits:withCompletion:", v24, v26);
        _Block_release(v26);

        swift_release();
LABEL_23:
        (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
        return;
      }
      v29 = objc_msgSend(a1, "_maps_lineIdentifiers");
      if (!v29)
      {
LABEL_28:
        __break(1u);
        return;
      }
      v30 = v29;
      v31 = sub_10000E4BC(0, &qword_10149A2F0, MKMapItemIdentifier_ptr);
      v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v30, v31);

      if ((unint64_t)v32 >> 62)
      {
        if (v32 < 0)
          v50 = v32;
        else
          v50 = v32 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v32);
        v51 = _CocoaArrayWrapper.endIndex.getter(v50);
        swift_bridgeObjectRelease(v32);
        if (v51)
          goto LABEL_11;
      }
      else if (*(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_11:
        if ((v32 & 0xC000000000000001) != 0)
        {
          v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v32);
          goto LABEL_14;
        }
        if (*(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v33 = *(id *)(v32 + 32);
LABEL_14:
          v34 = v33;
          swift_bridgeObjectRelease(v32);
          objc_msgSend(v55, "_deselectTransitLineMarker");
          v35 = *(void **)&v2[v13];
          if (v35)
          {
            v36 = objc_msgSend(v35, "mapView");
            if (v36)
            {
              v37 = v36;
              objc_msgSend(v36, "_selectTransitLineMarkerWithIdentifier:", v34);

            }
          }
          sub_100114E38();
          v52 = v38;
          (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v12, v5);
          v39 = *(unsigned __int8 *)(v6 + 80);
          v40 = (v39 + 48) & ~v39;
          v41 = swift_allocObject(&unk_1011A3570, v40 + v7, v39 | 7);
          *(_QWORD *)(v41 + 16) = v2;
          *(_QWORD *)(v41 + 24) = v34;
          *(_BYTE *)(v41 + 32) = v54 & 1;
          v42 = v34;
          v43 = v53;
          *(_QWORD *)(v41 + 40) = v53;
          (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v41 + v40, v8, v5);
          v60 = sub_100116C1C;
          v61 = (_QWORD *)v41;
          aBlock = _NSConcreteStackBlock;
          v57 = 1107296256;
          v58 = sub_10011582C;
          v59 = &unk_1011A3588;
          v44 = _Block_copy(&aBlock);
          v45 = v2;
          v46 = v43;
          v47 = v42;
          swift_release();
          v48 = a1;
          v49 = v52;
          objc_msgSend(v48, "_maps_loadLineInfoUsingTraits:withCompletion:", v52, v44);

          _Block_release(v44);
          goto LABEL_23;
        }
        __break(1u);
        goto LABEL_27;
      }
      swift_bridgeObjectRelease(v32);
      objc_msgSend(v55, "_deselectTransitLineMarker");

      goto LABEL_23;
    }
  }
}

void sub_100115458(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  id v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;

  if (a2)
  {
    swift_errorRetain(a2);
    sub_100115F8C(0, a2);
    swift_errorRelease(a2);
    return;
  }
  if (!a1)
  {
    sub_100115F8C(0, 0);
    return;
  }
  v7 = OBJC_IVAR____TtC4Maps18TransitLineContext_chromeViewController;
  v8 = *(void **)(a3 + OBJC_IVAR____TtC4Maps18TransitLineContext_chromeViewController);
  if (!v8)
    return;
  swift_unknownObjectRetain(a1);
  v10 = objc_msgSend(v8, "mapView");
  if (!v10)
  {
    swift_unknownObjectRelease(a1);
    return;
  }
  v11 = v10;
  objc_msgSend(v10, "_deselectLabelMarkerAnimated:", 1);
  v12 = (id)MKMapItemIdentifierFromGEOTransitLine(a1);
  v13 = *(void **)(a3 + v7);
  if (v13)
  {
    v14 = objc_msgSend(v13, "mapView");
    if (v14)
    {
      v15 = v14;
      objc_msgSend(v14, "_selectTransitLineMarkerWithIdentifier:", v12);

      if ((a4 & 1) == 0)
        goto LABEL_14;
      goto LABEL_13;
    }
  }

  if ((a4 & 1) != 0)
LABEL_13:
    sub_10011691C(a1);
LABEL_14:
  v16 = (void *)swift_unknownObjectRetain(a1);
  sub_100115F8C(v16, 0);

  swift_unknownObjectRelease_n(a1, 2);
}

void sub_1001155D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  id v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  id v25;

  if (a2)
  {
    swift_errorRetain(a2);
    sub_100115F8C(0, a2);
    swift_errorRelease(a2);
    return;
  }
  if (!a1)
  {
    sub_100115F8C(0, 0);
    return;
  }
  LOBYTE(v10) = a5;
  swift_bridgeObjectRetain(a1);
  v25 = (id)MKMapItemIdentifiersToGEOMapItemIdentifier(a4);
  v12 = a1 & 0xFFFFFFFFFFFFFF8;
  if ((unint64_t)a1 >> 62)
  {
LABEL_20:
    if (a1 >= 0)
      v22 = v12;
    else
      v22 = a1;
    swift_bridgeObjectRetain(a1);
    v13 = _CocoaArrayWrapper.endIndex.getter(v22);
    swift_bridgeObjectRelease(a1);
    if (v13)
    {
LABEL_6:
      v24 = (char)v10;
      v23 = a7;
      v14 = 4;
      while (1)
      {
        v15 = v14 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          v16 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v14 - 4, a1);
          v17 = v14 - 3;
          if (__OFADD__(v15, 1))
            goto LABEL_19;
        }
        else
        {
          v16 = *(void **)(a1 + 8 * v14);
          swift_unknownObjectRetain(v16);
          v17 = v14 - 3;
          if (__OFADD__(v15, 1))
          {
LABEL_19:
            __break(1u);
            goto LABEL_20;
          }
        }
        v18 = objc_msgSend(v16, "identifier", v23);
        if (v18)
        {
          v19 = v18;
          a7 = sub_10000E4BC(0, (unint64_t *)&qword_10149AA00, GEOMapItemIdentifier_ptr);
          v10 = v25;
          v20 = v19;
          LOBYTE(v19) = static NSObject.== infix(_:_:)(v20, v10);

          if ((v19 & 1) != 0)
            break;
        }
        swift_unknownObjectRelease(v16);
        ++v14;
        if (v17 == v13)
          goto LABEL_24;
      }
      swift_bridgeObjectRelease(a1);
      if ((v24 & 1) != 0)
      {
        v21 = (void *)swift_unknownObjectRetain(v16);
        sub_10011691C(v21);
        swift_unknownObjectRelease(v16);
      }
      goto LABEL_25;
    }
  }
  else
  {
    v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v13)
      goto LABEL_6;
  }
LABEL_24:
  swift_bridgeObjectRelease(a1);
  v16 = 0;
LABEL_25:
  sub_100115F8C(v16, 0);

  swift_unknownObjectRelease(v16);
}

uint64_t sub_10011582C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  uint64_t v6;
  id v7;

  v4 = a2;
  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    v6 = sub_100008B04(&qword_10149B120);
    v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v6);
  }
  swift_retain();
  v7 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease(v4);
}

void sub_100115908(void *a1, int a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  Class isa;
  void *v39;
  void *v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  void *v48;
  char *v49;
  id v50;
  uint64_t v51;
  id v52;
  id v53;
  int v54;
  _QWORD aBlock[6];

  v3 = v2;
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v11 = __chkstk_darwin(v10).n128_u64[0];
  v13 = (char *)&v51 - v12;
  v14 = OBJC_IVAR____TtC4Maps18TransitLineContext_chromeViewController;
  v15 = *(void **)&v3[OBJC_IVAR____TtC4Maps18TransitLineContext_chromeViewController];
  if (v15)
  {
    v16 = objc_msgSend(v15, "mapView", v11);
    if (v16)
    {
      v51 = v6;
      v54 = a2;
      v53 = v16;
      v17 = objc_msgSend(v16, "mapRegion");
      v52 = v17;
      if (!v17)
      {
        __break(1u);
        goto LABEL_21;
      }
      Date.init()(v17);
      v18 = (id)MKMapItemIdentifierFromGEOTransitLine(a1);
      if ((v54 & 1) != 0)
      {
        v19 = objc_msgSend(a1, "mapRegion");
        v20 = *(void **)&v3[v14];
        if (!v20)
          goto LABEL_11;
      }
      else
      {
        v19 = 0;
        v20 = *(void **)&v3[v14];
        if (!v20)
          goto LABEL_11;
      }
      v21 = objc_msgSend(v20, "mapView");
      if (v21)
      {
        v22 = v21;
        objc_msgSend(v21, "_selectTransitLineMarkerWithIdentifier:", v18);
        if (v19)
        {
          v23 = v19;
          v25 = GEOMapRectForMapRegion(v23, v24);
          v27 = v26;
          v29 = v28;
          v31 = v30;

          objc_msgSend(v22, "setVisibleMapRect:animated:", 1, v25, v27, v29, v31);
        }
        goto LABEL_12;
      }
LABEL_11:
      v22 = v19;
LABEL_12:

      if ((sub_1002589D4(a1) & 1) == 0)
      {
        (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v51);

LABEL_18:
        return;
      }
      v32 = objc_msgSend((id)objc_opt_self(MKMapService), "sharedService");
      if (v32)
      {
        v33 = v32;
        v34 = sub_100008B04((uint64_t *)&unk_101493B10);
        v35 = swift_allocObject(v34, 40, 7);
        *(_OWORD *)(v35 + 16) = xmmword_100E23F50;
        *(_QWORD *)(v35 + 32) = v18;
        aBlock[0] = v35;
        specialized Array._endMutation()(v35);
        v36 = aBlock[0];
        sub_10000E4BC(0, &qword_10149A2F0, MKMapItemIdentifier_ptr);
        v37 = v18;
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v36);
        sub_100114E38();
        v40 = v39;
        v41 = objc_msgSend(v33, "ticketForTransitLines:traits:", isa, v39);

        if (v41)
        {
          v42 = v37;
          v43 = v51;
          (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v13, v51);
          v44 = *(unsigned __int8 *)(v7 + 80);
          v45 = (v44 + 40) & ~v44;
          v46 = swift_allocObject(&unk_1011A3520, v45 + v8, v44 | 7);
          *(_QWORD *)(v46 + 16) = v3;
          *(_BYTE *)(v46 + 24) = v54 & 1;
          v47 = v52;
          *(_QWORD *)(v46 + 32) = v52;
          (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v46 + v45, v9, v43);
          aBlock[4] = sub_100116764;
          aBlock[5] = v46;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = sub_10011582C;
          aBlock[3] = &unk_1011A3538;
          v48 = _Block_copy(aBlock);
          swift_unknownObjectRetain(v41);
          v49 = v3;
          v50 = v47;
          swift_release();
          objc_msgSend(v41, "submitWithHandler:networkActivity:", v48, 0);
          _Block_release(v48);

          swift_unknownObjectRelease_n(v41, 2);
          (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v43);
          return;
        }
        (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v51);

        goto LABEL_18;
      }
LABEL_21:
      __break(1u);
    }
  }
}

void sub_100115D30(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;

  if (a2)
  {
    swift_errorRetain(a2);
    sub_100115F8C(0, a2);
    swift_errorRelease(a2);
    return;
  }
  if (!a1)
    goto LABEL_17;
  if (!((unint64_t)a1 >> 62))
  {
    v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v7)
      goto LABEL_6;
    goto LABEL_16;
  }
  if (a1 >= 0)
    v10 = a1 & 0xFFFFFFFFFFFFFF8;
  else
    v10 = a1;
  swift_bridgeObjectRetain(a1);
  if (!_CocoaArrayWrapper.endIndex.getter(v10))
  {
LABEL_16:
    swift_bridgeObjectRelease(a1);
LABEL_17:
    sub_100115F8C(0, 0);
    return;
  }
LABEL_6:
  if ((a1 & 0xC000000000000001) != 0)
  {
    v8 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
  }
  else
  {
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v8 = *(void **)(a1 + 32);
    swift_unknownObjectRetain(v8);
  }
  swift_bridgeObjectRelease(a1);
  v9 = (void *)swift_unknownObjectRetain(v8);
  sub_100115F8C(v9, 0);
  swift_unknownObjectRelease(v8);
  if ((a4 & 1) != 0)
    sub_10011691C(v8);
  swift_unknownObjectRelease(v8);
}

void sub_100115ED0()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;

  v1 = OBJC_IVAR____TtC4Maps18TransitLineContext_lineCardViewController;
  if (!*(_QWORD *)(v0 + OBJC_IVAR____TtC4Maps18TransitLineContext_lineCardViewController))
  {
    v2 = objc_msgSend(objc_allocWithZone((Class)LineCardViewController), "init");
    objc_msgSend(v2, "setContaineeDelegate:", v0);
    objc_msgSend(v2, "setLineCardDelegate:", v0);
    v3 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v2;

  }
}

void sub_100115F8C(void *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;

  v3 = *(void **)(v2 + OBJC_IVAR____TtC4Maps18TransitLineContext_chromeViewController);
  if (v3)
  {
    v15 = v3;
    if (objc_msgSend(v15, "isTopContext:", v2))
    {
      v6 = OBJC_IVAR____TtC4Maps18TransitLineContext_lineCardViewController;
      v7 = *(void **)(v2 + OBJC_IVAR____TtC4Maps18TransitLineContext_lineCardViewController);
      if (v7
        || (v8 = objc_msgSend(objc_allocWithZone((Class)LineCardViewController), "init"),
            objc_msgSend(v8, "setContaineeDelegate:", v2),
            objc_msgSend(v8, "setLineCardDelegate:", v2),
            v9 = *(void **)(v2 + v6),
            *(_QWORD *)(v2 + v6) = v8,
            v9,
            (v7 = *(void **)(v2 + v6)) != 0))
      {
        v10 = v7;
        v11 = objc_msgSend(v10, "lineItem");
        if (v11)
        {
          v12 = v11;
          if (!a1)
            goto LABEL_13;
          v13 = objc_msgSend((id)swift_unknownObjectRetain(a1), "muid");
          if (v13 == objc_msgSend(v12, "muid"))
          {
            objc_msgSend(v10, "setLineItem:loading:", a1, 0);

            swift_unknownObjectRelease(v12);
            v14 = a1;
LABEL_15:
            swift_unknownObjectRelease(v14);
            return;
          }
          swift_unknownObjectRelease(a1);
          if (a2)
LABEL_13:
            objc_msgSend(v10, "setLineItem:loading:", v12, 0);

          v14 = v12;
          goto LABEL_15;
        }

      }
    }

  }
}

void sub_10011618C(void *a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  id v11;
  id v12;
  _QWORD v13[6];

  objc_msgSend(a1, "_maps_numLines");
  sub_100114E38();
  v8 = v7;
  v9 = (_QWORD *)swift_allocObject(&unk_1011A3480, 48, 7);
  v9[2] = a2;
  v9[3] = a3;
  v9[4] = v3;
  v9[5] = a1;
  v13[4] = sub_100116704;
  v13[5] = v9;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_10011582C;
  v13[3] = &unk_1011A3498;
  v10 = _Block_copy(v13);
  swift_retain();
  v11 = v3;
  v12 = a1;
  swift_release();
  objc_msgSend(v12, "_maps_loadLineInfoUsingTraits:withCompletion:", v8, v10);
  _Block_release(v10);

}

void sub_100116280(Class isa, uint64_t a2, void (*a3)(_QWORD, uint64_t), uint64_t a4, void *a5, void *a6)
{
  id v12;
  _QWORD *v13;
  void *v14;
  char *v15;
  uint64_t v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  _QWORD v23[6];

  if (a2)
  {
    swift_errorRetain(a2);
    a3(0, a2);
    swift_errorRelease(a2);
  }
  else
  {
    v12 = objc_msgSend(objc_allocWithZone((Class)TransitLineDisambiguationViewController), "init");
    objc_msgSend(v12, "setContaineeDelegate:", a5);
    if (isa)
    {
      sub_100008B04(&qword_10149B120);
      isa = Array._bridgeToObjectiveC()().super.isa;
    }
    objc_msgSend(v12, "setLines:", isa);

    v13 = (_QWORD *)swift_allocObject(&unk_1011A34D0, 40, 7);
    v13[2] = a3;
    v13[3] = a4;
    v13[4] = a5;
    v23[4] = sub_100116754;
    v23[5] = v13;
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 1107296256;
    v23[2] = sub_100116554;
    v23[3] = &unk_1011A34E8;
    v14 = _Block_copy(v23);
    swift_retain();
    v15 = a5;
    swift_release();
    objc_msgSend(v12, "setLineSelectionBlock:", v14);
    _Block_release(v14);
    v16 = OBJC_IVAR____TtC4Maps18TransitLineContext_chromeViewController;
    if (-[PlaceSummaryTableViewCell canBecomeFirstResponder]_0(*(void **)&v15[OBJC_IVAR____TtC4Maps18TransitLineContext_chromeViewController]))
    {
      v17 = objc_msgSend(v12, "macPopoverPresentationController");
      if (v17)
      {
        v18 = v17;
        objc_msgSend(v12, "setPreferredPresentationStyle:", 3);
        objc_msgSend(a6, "coordinate");
        objc_msgSend(v18, "setCoordinate:");

      }
    }
    v19 = *(void **)&v15[OBJC_IVAR____TtC4Maps18TransitLineContext_disambiguationViewController];
    *(_QWORD *)&v15[OBJC_IVAR____TtC4Maps18TransitLineContext_disambiguationViewController] = v12;
    v20 = v12;

    v21 = *(void **)&v15[v16];
    if (v21)
    {
      v22 = v21;
      objc_msgSend(v22, "setNeedsUpdateComponent:animated:", CFSTR("cards"), 1);

    }
  }
}

uint64_t sub_1001164BC(uint64_t result, void (*a2)(uint64_t, _QWORD), uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  if (result)
  {
    v6 = result;
    v7 = swift_unknownObjectRetain(result);
    a2(v7, 0);
    v8 = *(void **)(a4 + OBJC_IVAR____TtC4Maps18TransitLineContext_disambiguationViewController);
    *(_QWORD *)(a4 + OBJC_IVAR____TtC4Maps18TransitLineContext_disambiguationViewController) = 0;

    v9 = *(void **)(a4 + OBJC_IVAR____TtC4Maps18TransitLineContext_chromeViewController);
    if (v9)
    {
      v10 = v9;
      objc_msgSend(v10, "setNeedsUpdateComponent:animated:", CFSTR("cards"), 1);

    }
    return swift_unknownObjectRelease(v6);
  }
  return result;
}

uint64_t sub_100116554(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

id sub_100116648()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TransitLineContext();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TransitLineContext()
{
  return objc_opt_self(_TtC4Maps18TransitLineContext);
}

void sub_100116704(objc_class *a1, uint64_t a2)
{
  uint64_t v2;

  sub_100116280(a1, a2, *(void (**)(_QWORD, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32), *(void **)(v2 + 40));
}

double sub_100116710(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_100116720(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100116728()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100116754(uint64_t a1)
{
  uint64_t v1;

  return sub_1001164BC(a1, *(void (**)(uint64_t, _QWORD))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_100116764(uint64_t a1, uint64_t a2)
{
  return sub_100116D00(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))sub_100115D30);
}

id sub_100116770(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  objc_super v5;

  *(_QWORD *)&v1[OBJC_IVAR____TtC4Maps18TransitLineContext_chromeViewController] = 0;
  v2 = OBJC_IVAR____TtC4Maps18TransitLineContext_lineItem;
  *(_QWORD *)&v1[OBJC_IVAR____TtC4Maps18TransitLineContext_lineItem] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC4Maps18TransitLineContext_labelMarker] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC4Maps18TransitLineContext_lineCardViewController] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC4Maps18TransitLineContext_disambiguationViewController] = 0;
  v3 = *(_QWORD *)&v1[v2];
  *(_QWORD *)&v1[v2] = a1;
  swift_unknownObjectRetain(a1);
  swift_unknownObjectRelease(v3);
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for TransitLineContext();
  return objc_msgSendSuper2(&v5, "init");
}

id sub_1001167F8(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  char *v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  objc_super v14;

  *(_QWORD *)&v1[OBJC_IVAR____TtC4Maps18TransitLineContext_chromeViewController] = 0;
  v3 = OBJC_IVAR____TtC4Maps18TransitLineContext_lineItem;
  *(_QWORD *)&v1[OBJC_IVAR____TtC4Maps18TransitLineContext_lineItem] = 0;
  v4 = OBJC_IVAR____TtC4Maps18TransitLineContext_labelMarker;
  *(_QWORD *)&v1[OBJC_IVAR____TtC4Maps18TransitLineContext_labelMarker] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC4Maps18TransitLineContext_lineCardViewController] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC4Maps18TransitLineContext_disambiguationViewController] = 0;
  v5 = *(void **)&v1[v4];
  *(_QWORD *)&v1[v4] = a1;
  v6 = v1;
  v7 = a1;

  v8 = objc_msgSend(v7, "_maps_numLines");
  v9 = objc_msgSend(v7, "_maps_loadedLineItems");
  if (v9)
  {
    v10 = v9;

  }
  else if ((unint64_t)v8 < 2)
  {
    v11 = objc_msgSend(objc_allocWithZone((Class)IncompleteTransitLineItem), "initWithLabelMarker:", v7);
    v12 = *(_QWORD *)&v1[v3];
    *(_QWORD *)&v1[v3] = v11;

    swift_unknownObjectRelease(v12);
  }
  else
  {

  }
  v14.receiver = v6;
  v14.super_class = (Class)type metadata accessor for TransitLineContext();
  return objc_msgSendSuper2(&v14, "init");
}

void sub_10011691C(void *a1)
{
  uint64_t v1;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  id v29;

  v3 = *(void **)(v1 + OBJC_IVAR____TtC4Maps18TransitLineContext_chromeViewController);
  if (v3)
  {
    v4 = objc_msgSend(v3, "mapView");
    if (v4)
    {
      v29 = v4;
      v5 = objc_msgSend(a1, "mapRegion");
      if (!v5)
      {
        v15 = v29;
LABEL_20:

        return;
      }
      v6 = v5;
      v7 = objc_msgSend(v29, "mapRegion");
      if (v7)
      {
        v8 = v7;
        sub_10000E4BC(0, &qword_10149B128, GEOMapRegion_ptr);
        v9 = v6;
        v10 = v8;
        LOBYTE(v8) = static NSObject.== infix(_:_:)(v10, v9);

        if ((v8 & 1) != 0)
        {
          v6 = v29;
LABEL_19:

          v15 = v6;
          goto LABEL_20;
        }
      }
      if (fabs(Date.timeIntervalSinceNow.getter()) >= 30.0)
      {
        v11 = objc_msgSend(v29, "_selectedTransitLineIDs");
        if (v11)
        {
          v12 = v11;
          v13 = sub_10000E4BC(0, &qword_10149A2F0, MKMapItemIdentifier_ptr);
          v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v13);

        }
        else
        {
          v14 = 0;
        }
        v16 = sub_100008B04((uint64_t *)&unk_101493B10);
        v17 = swift_allocObject(v16, 40, 7);
        *(_OWORD *)(v17 + 16) = xmmword_100E23F50;
        v18 = (id)MKMapItemIdentifierFromGEOTransitLine(a1);
        *(_QWORD *)(v17 + 32) = v18;
        specialized Array._endMutation()(v18);
        if (v14)
        {
          v19 = swift_bridgeObjectRetain(v14);
          v20 = sub_1000846F4(v19, v17);
          swift_bridgeObjectRelease_n(v14, 2);
          swift_bridgeObjectRelease(v17);
          if ((v20 & 1) != 0)
            goto LABEL_18;
        }
        else
        {
          swift_bridgeObjectRelease(v17);
        }
        v6 = v6;
        v22 = GEOMapRectForMapRegion(v6, v21);
        v24 = v23;
        v26 = v25;
        v28 = v27;

        objc_msgSend(v29, "setVisibleMapRect:animated:", 1, v22, v24, v26, v28);
      }
LABEL_18:
      v9 = v29;
      goto LABEL_19;
    }
  }
}

uint64_t sub_100116B98()
{
  id *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  (*(void (**)(char *, uint64_t))(v2 + 8))((char *)v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_100116C1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Date(0) - 8) + 80);
  sub_1001155D0(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_BYTE *)(v2 + 32), *(_QWORD *)(v2 + 40), v2 + ((v5 + 48) & ~v5));
}

uint64_t sub_100116C78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100116CF4(uint64_t a1, uint64_t a2)
{
  return sub_100116D00(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))sub_100115458);
}

uint64_t sub_100116D00(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))
{
  uint64_t v3;
  uint64_t v6;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Date(0) - 8) + 80);
  return a3(a1, a2, *(_QWORD *)(v3 + 16), *(unsigned __int8 *)(v3 + 24), *(_QWORD *)(v3 + 32), v3 + ((v6 + 40) & ~v6));
}

uint64_t sub_100116D6C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100116DA0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

id sub_100116E70()
{
  return sub_1000227F8(type metadata accessor for PlaceSummaryTextHighlightType);
}

uint64_t type metadata accessor for PlaceSummaryTextHighlightType()
{
  return objc_opt_self(_TtC4Maps29PlaceSummaryTextHighlightType);
}

id sub_100116F90()
{
  return sub_1000227F8(type metadata accessor for PlaceSummaryTextHighlightConfiguration);
}

uint64_t type metadata accessor for PlaceSummaryTextHighlightConfiguration()
{
  return objc_opt_self(_TtC4Maps38PlaceSummaryTextHighlightConfiguration);
}

uint64_t storeEnumTagSinglePayload for PlaceSummaryTextHighlightType.TextHighlightType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100117044 + 4 * byte_100E2C645[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100117078 + 4 * byte_100E2C640[v4]))();
}

uint64_t sub_100117078(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100117080(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100117088);
  return result;
}

uint64_t sub_100117094(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10011709CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1001170A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001170A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PlaceSummaryTextHighlightType.TextHighlightType()
{
  return &type metadata for PlaceSummaryTextHighlightType.TextHighlightType;
}

unint64_t sub_1001170C8()
{
  unint64_t result;

  result = qword_10149B198;
  if (!qword_10149B198)
  {
    result = swift_getWitnessTable(byte_100E2C6F4, &type metadata for PlaceSummaryTextHighlightType.TextHighlightType);
    atomic_store(result, (unint64_t *)&qword_10149B198);
  }
  return result;
}

_QWORD *sub_10011710C()
{
  uint64_t v0;
  void *v1;
  id v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC4Maps18TransitLineContext_lineCardViewController);
  if (v1)
  {
    v2 = v1;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v4 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
    v3 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v4 >= v3 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1);
    v5 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v4, v2);
    specialized Array._endMutation()(v5);

  }
  v6 = *(void **)(v0 + OBJC_IVAR____TtC4Maps18TransitLineContext_disambiguationViewController);
  if (v6)
  {
    v7 = v6;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v9 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
    v8 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v9 >= v8 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
    v10 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v7);
    specialized Array._endMutation()(v10);

  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100117290(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;

  v1 = OBJC_IVAR____TtC4Maps18TransitLineContext_lineCardViewController;
  if (!*(_QWORD *)(result + OBJC_IVAR____TtC4Maps18TransitLineContext_lineCardViewController))
  {
    v2 = result;
    v3 = *(_QWORD *)(result + OBJC_IVAR____TtC4Maps18TransitLineContext_lineItem);
    if (v3)
    {
      v4 = (void *)swift_unknownObjectRetain(*(_QWORD *)(result + OBJC_IVAR____TtC4Maps18TransitLineContext_lineItem));
      v5 = sub_1002589D4(v4);
      v6 = *(void **)(v2 + v1);
      if (v6
        || (v7 = objc_msgSend(objc_allocWithZone((Class)LineCardViewController), "init"),
            objc_msgSend(v7, "setContaineeDelegate:", v2),
            objc_msgSend(v7, "setLineCardDelegate:", v2),
            v8 = *(void **)(v2 + v1),
            *(_QWORD *)(v2 + v1) = v7,
            v8,
            (v6 = *(void **)(v2 + v1)) != 0))
      {
        objc_msgSend(v6, "setLineItem:labelMarker:loading:preferredLayout:", v3, *(_QWORD *)(v2 + OBJC_IVAR____TtC4Maps18TransitLineContext_labelMarker), v5, 0);
      }
      return swift_unknownObjectRelease(v3);
    }
  }
  return result;
}

void sub_100117478(void *a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  id v11;
  id v12;

  v4 = objc_msgSend(a1, "mapView");
  if (v4)
  {
    v12 = v4;
    objc_msgSend(v4, "_setApplicationState:", 4);
    v5 = objc_opt_self(IOSBasedChromeViewController);
    v6 = (void *)swift_dynamicCastObjCClass(a1, v5);
    if (v6)
      objc_msgSend(v6, "updateViewMode:animated:preserveMapSelection:", 3, 1, 1);
    v7 = *(void **)(a2 + OBJC_IVAR____TtC4Maps18TransitLineContext_lineItem);
    if (v7)
    {
      v8 = *(void **)(a2 + OBJC_IVAR____TtC4Maps18TransitLineContext_labelMarker);
      swift_unknownObjectRetain(*(_QWORD *)(a2 + OBJC_IVAR____TtC4Maps18TransitLineContext_lineItem));
      if (v8)
        v9 = objc_msgSend(v8, "_maps_lineShouldZoomMapRegionOnSelection");
      else
        v9 = 0;
      sub_100115908(v7, v9);
      swift_unknownObjectRelease(v7);
    }
    else
    {
      v10 = *(void **)(a2 + OBJC_IVAR____TtC4Maps18TransitLineContext_labelMarker);
      if (v10)
      {
        v11 = v10;
        sub_100114F5C(v11, (int)objc_msgSend(v11, "_maps_lineShouldZoomMapRegionOnSelection"));

      }
    }

  }
}

uint64_t sub_1001176B4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1001176E0()
{
  uint64_t v0;

  sub_100117478(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

double sub_1001176E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_1001176F8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100117700()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100117724()
{
  uint64_t v0;

  return sub_100117290(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100117734@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v14;
  _QWORD *v15;
  uint64_t DynamicType;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[8];

  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_BYTE *)(a9 + 16) = a3;
  *(_BYTE *)(a9 + 17) = a4;
  swift_unknownObjectWeakInit(v23, 0);
  if (!a5)
    goto LABEL_8;
  v14 = sub_100008B04(&qword_10149B1D0);
  v22 = v14;
  v20 = a5;
  v21 = a6;
  v15 = sub_10000BE88(&v20, v14);
  DynamicType = swift_getDynamicType(v15, v14, 1);
  swift_unknownObjectRetain_n(a5, 2);
  sub_10000BEAC(&v20);
  if (swift_isClassType(DynamicType))
    v17 = DynamicType;
  else
    v17 = 0;
  if (!v17)
  {
    swift_unknownObjectRelease(a5);
LABEL_8:
    swift_unknownObjectWeakAssign(v23, 0);
    goto LABEL_9;
  }
  v20 = a5;
  v21 = a6;
  v18 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v20, v14);
  swift_unknownObjectWeakAssign(v23, v18);
  swift_unknownObjectRelease(v18);
LABEL_9:
  sub_1000207BC((uint64_t)v23, a9 + 24, (uint64_t *)&unk_101498C70);
  result = swift_unknownObjectRelease(a5);
  *(_QWORD *)(a9 + 32) = a7;
  *(_QWORD *)(a9 + 40) = a8;
  return result;
}

