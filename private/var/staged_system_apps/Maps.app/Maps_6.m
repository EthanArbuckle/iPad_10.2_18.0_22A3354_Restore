void sub_1008824E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100882508(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "dataSource"));

    if (v2)
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "dataSource"));
      objc_msgSend(v3, "didTapTryAgainOnErrorView");
    }
    else
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "apiController"));
      objc_msgSend(v3, "fetchAllCollectionsViewForKeywordFilter:addressFilter:onCompletion:", 0, 0, &stru_1011D9CC0);
    }

    WeakRetained = v4;
  }

}

id sub_1008826A8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "resetCollectionViewLayout");
}

void sub_100882A20(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "AllCollectionsViewController");
  v2 = (void *)qword_1014D3728;
  qword_1014D3728 = (uint64_t)v1;

}

BOOL sub_100882CF0(id a1, MapsSession *a2, unint64_t a3, BOOL *a4)
{
  MapsSession *v4;
  uint64_t v5;
  char isKindOfClass;

  v4 = a2;
  v5 = objc_opt_class(RoutePlanningSession);
  isKindOfClass = objc_opt_isKindOfClass(v4, v5);

  return isKindOfClass & 1;
}

id sub_100882D38()
{
  if (qword_1014D3740 != -1)
    dispatch_once(&qword_1014D3740, &stru_1011D9D80);
  return (id)qword_1014D3738;
}

void sub_100883AEC(id a1, NSError *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  id v6;
  void *v7;
  uint8_t v8[16];
  uint64_t v9;
  uint64_t v10;

  if (!a2)
  {
    v9 = v2;
    v10 = v3;
    v4 = sub_100882D38();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Hinting refresh for Resume Route", v8, 2u);
    }

    v6 = sub_100B3A5D4();
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    objc_msgSend(v7, "hintRefreshOfType:", 11);

  }
}

BOOL sub_100883B70(id a1, id a2, unint64_t a3, BOOL *a4)
{
  id v4;
  uint64_t v5;
  char isKindOfClass;

  v4 = a2;
  v5 = objc_opt_class(GEOComposedWaypoint);
  isKindOfClass = objc_opt_isKindOfClass(v4, v5);

  return isKindOfClass & 1;
}

void sub_100883F74(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "RoutePlanningSessionRouteLoadedNotifier");
  v2 = (void *)qword_1014D3738;
  qword_1014D3738 = (uint64_t)v1;

}

void sub_1008845FC(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  id v4;

  v2 = *(_QWORD **)(a1 + 32);
  if (v2[4])
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_minutesText"));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setText:", v3);

  }
  v4 = (id)objc_claimAutoreleasedReturnValue(+[UIFont _maps_systemFontWithFixedSize:](UIFont, "_maps_systemFontWithFixedSize:", 24.0));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setFont:", v4);

}

void sub_100884694(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localizedStringForKey:value:table:", CFSTR("[ridesharing] eta balloon min"), CFSTR("localized string not found"), 0));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "setText:", v2);

}

void sub_10088470C(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setText:", &stru_1011EB268);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[UIFont _maps_boldSystemFontWithFixedSize:](UIFont, "_maps_boldSystemFontWithFixedSize:", 24.0));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setFont:", v2);

}

id sub_100884778(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "setText:", &stru_1011EB268);
}

void sub_100884794(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setText:", &stru_1011EB268);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[UIFont _maps_boldSystemFontWithFixedSize:](UIFont, "_maps_boldSystemFontWithFixedSize:", 24.0));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setFont:", v2);

}

id sub_100884800(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "setText:", &stru_1011EB268);
}

void sub_100884AB0(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_1014D3748;
  qword_1014D3748 = (uint64_t)v1;

}

void sub_100884AD8(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setText:", *(_QWORD *)(a1 + 40));
  v2 = (id)objc_claimAutoreleasedReturnValue(+[UIFont _maps_boldSystemFontWithFixedSize:](UIFont, "_maps_boldSystemFontWithFixedSize:", 18.0));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setFont:", v2);

}

void sub_100884B3C(uint64_t a1)
{
  void *v1;
  void *v2;
  id v4;
  int v5;
  void *v6;
  uint64_t v7;
  id v8;

  v4 = objc_msgSend(*(id *)(a1 + 40), "length");
  if (v4)
  {
    v5 = 0;
    v6 = *(void **)(a1 + 40);
  }
  else
  {
    v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "timeZone"));
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "abbreviation"));
    v1 = (void *)v7;
    if (v7)
    {
      v5 = 0;
      v6 = (void *)v7;
    }
    else
    {
      v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1014D3748, "timeZone"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "abbreviation"));
      v5 = 1;
    }
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "setText:", v6);
  if (v5)
  {

  }
  if (!v4)
  {

  }
}

void sub_100885A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100885AA0(uint64_t a1)
{
  id *WeakRetained;
  id v3;
  id *v4;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v3 = objc_loadWeakRetained(WeakRetained + 2);
    objc_msgSend(v3, "updateRequestRidePaymentMethod:", *(_QWORD *)(a1 + 32));

    WeakRetained = v4;
  }

}

void sub_100885E44(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id obj;
  NSMutableArray *v18;
  _QWORD v19[4];
  id v20;
  _QWORD v21[5];
  id v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  id location;
  _BYTE v28[128];

  v3 = a2;
  v18 = objc_opt_new(NSMutableArray);
  v16 = v3;
  objc_initWeak(&location, v3);
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "rideOption"));
  obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "passengerChoices"));

  v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v24 != v6)
          objc_enumerationMutation(obj);
        v8 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "formattedPriceRange"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "title"));
        v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ %@"), v9, v10));

        v21[0] = _NSConcreteStackBlock;
        v21[1] = 3221225472;
        v21[2] = sub_1008861B0;
        v21[3] = &unk_1011D9DC8;
        objc_copyWeak(&v22, &location);
        v21[4] = v8;
        v12 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction _actionWithTitle:image:style:handler:shouldDismissHandler:](UIAlertAction, "_actionWithTitle:image:style:handler:shouldDismissHandler:", v11, 0, 0, v21, &stru_1011D9DE8));
        -[NSMutableArray addObject:](v18, "addObject:", v12);

        objc_destroyWeak(&v22);
      }
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
    }
    while (v5);
  }

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "localizedStringForKey:value:table:", CFSTR("Cancel"), CFSTR("localized string not found"), 0));
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_100886234;
  v19[3] = &unk_1011AFA88;
  objc_copyWeak(&v20, &location);
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v14, 1, v19));
  -[NSMutableArray addObject:](v18, "addObject:", v15);

  objc_msgSend(v16, "_setActions:", v18);
  objc_destroyWeak(&v20);
  objc_destroyWeak(&location);

}

void sub_100886144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id location)
{
  id *v34;

  objc_destroyWeak(v34);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1008861B0(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void (**v4)(_QWORD, _QWORD);
  id v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v5 = WeakRetained;
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "didFinishSelectingPartySize"));

    WeakRetained = v5;
    if (v3)
    {
      v4 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "didFinishSelectingPartySize"));
      v4[2](v4, *(_QWORD *)(a1 + 32));

      objc_msgSend(v5, "setDidFinishSelectingPartySize:", 0);
      WeakRetained = v5;
    }
  }

}

BOOL sub_10088622C(id a1)
{
  return 1;
}

void sub_100886234(uint64_t a1)
{
  void *v1;
  void (**v2)(_QWORD, _QWORD);
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "didFinishSelectingPartySize"));

  if (v1)
  {
    v2 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "didFinishSelectingPartySize"));
    v2[2](v2, 0);

    objc_msgSend(WeakRetained, "setDidFinishSelectingPartySize:", 0);
  }

}

void sub_100886574(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100886598(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  _QWORD block[5];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10088660C;
    block[3] = &unk_1011AC860;
    block[4] = WeakRetained;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  }

}

void sub_10088660C(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tableView"));
  objc_msgSend(v1, "reloadData");

}

void sub_100887788(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v1, "dismiss");

}

void sub_100888134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100888154(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "weatherConditions"));
    if (!v3)
      goto LABEL_8;
    if (sub_1002A8AA0(v2) == 5)
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont systemFontOfSize:weight:](UIFont, "systemFontOfSize:weight:", 14.0, UIFontWeightMedium));
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "fontDescriptor"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "fontDescriptorWithDesign:", UIFontDescriptorSystemDesignRounded));

      v7 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont fontWithDescriptor:size:](UIFont, "fontWithDescriptor:size:", v6, 0.0));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "name"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[UIImageSymbolConfiguration configurationWithFont:](UIImageSymbolConfiguration, "configurationWithFont:", v7));
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage systemImageNamed:withConfiguration:](UIImage, "systemImageNamed:withConfiguration:", v8, v9));

    }
    else
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "name"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "palette"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[UIImageSymbolConfiguration configurationWithPaletteColors:](UIImageSymbolConfiguration, "configurationWithPaletteColors:", v6));
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage systemImageNamed:withConfiguration:](UIImage, "systemImageNamed:withConfiguration:", v4, v7));
    }

    if (!v10)
LABEL_8:
      v10 = 0;

  }
  else
  {
    v10 = 0;
  }

  return v10;
}

void sub_10088990C(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "imageView"));
  objc_msgSend(v4, "setImage:", v3);

}

id sub_100889AD4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CarDisplayController sharedInstance](CarDisplayController, "sharedInstance"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "routeGeniusManager"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chromeViewController"));
  objc_msgSend(v3, "activateIfPossibleForChrome:", v4);

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[CarRouteGeniusService sharedService](CarRouteGeniusService, "sharedService"));
  objc_msgSend(v5, "registerObserver:", *(_QWORD *)(a1 + 32));

  v6 = *(void **)(a1 + 32);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[CarRouteGeniusService sharedService](CarRouteGeniusService, "sharedService"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "suggestion"));
  objc_msgSend(v6, "setCurrentSuggestion:", v8);

  return objc_msgSend(*(id *)(a1 + 32), "_updateRouteGeniusCardContents");
}

id sub_10088A8D8()
{
  if (qword_1014D3760 != -1)
    dispatch_once(&qword_1014D3760, &stru_1011D9EE8);
  return (id)qword_1014D3758;
}

void sub_10088C7B0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  objc_class *v10;
  NSString *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;

  v17 = a2;
  v5 = a3;
  if (v5)
  {
    v6 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0
      || (v7 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v5, v7) & 1) != 0))
    {
      v8 = v5;
LABEL_11:
      v15 = *(void **)(a1 + 32);
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: %@"), v17, v8));
      objc_msgSend(v15, "addObject:", v16);

      goto LABEL_12;
    }
    v9 = v5;
    v10 = (objc_class *)objc_opt_class(v9);
    v11 = NSStringFromClass(v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    if ((objc_opt_respondsToSelector(v9, "accessibilityIdentifier") & 1) != 0)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "performSelector:", "accessibilityIdentifier"));
      v14 = v13;
      if (v13 && !objc_msgSend(v13, "isEqualToString:", v12))
      {
        v8 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v12, v9, v14));

        goto LABEL_10;
      }

    }
    v8 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v12, v9));
LABEL_10:

    goto LABEL_11;
  }
LABEL_12:

}

void sub_10088C930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v4;

  if (a3)
  {
    v3 = *(void **)(a1 + 32);
    v4 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: %@"), a2, a3));
    objc_msgSend(v3, "addObject:", v4);

  }
}

void sub_10088C98C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "MapsRadarAttachment");
  v2 = (void *)qword_1014D3758;
  qword_1014D3758 = (uint64_t)v1;

}

void sub_10088C9FC(id a1)
{
  CollectionManager *v1;
  void *v2;

  v1 = objc_alloc_init(CollectionManager);
  v2 = (void *)qword_1014D3768;
  qword_1014D3768 = (uint64_t)v1;

}

void sub_10088CD68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10088CDA4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id *v4;
  id v5;
  id WeakRetained;

  v4 = (id *)(a1 + 32);
  v5 = a4;
  WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend(WeakRetained, "_fetchCollectionsWithCompletion:", v5);

}

void sub_10088D198(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10088D1BC(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD block[4];
  id v6;
  id v7;
  id v8;

  v3 = a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10088D274;
  block[3] = &unk_1011B0288;
  objc_copyWeak(&v8, (id *)(a1 + 40));
  v6 = v3;
  v7 = *(id *)(a1 + 32);
  v4 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  objc_destroyWeak(&v8);
}

void sub_10088D274(uint64_t a1)
{
  id v2;
  NSObject *v3;
  os_signpost_id_t v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  id *WeakRetained;
  id *v9;
  id v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  __int16 v14[8];
  uint8_t buf[16];

  v2 = sub_1004315EC();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = os_signpost_id_generate(v3);

  v5 = sub_1004315EC();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = v6;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_INTERVAL_BEGIN, v4, "FetchCollectionsChangesComparison", "", buf, 2u);
  }

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  v9 = WeakRetained;
  if (WeakRetained)
  {
    if (!*((_BYTE *)WeakRetained + 64))
    {
      *((_BYTE *)WeakRetained + 64) = 1;
      *((_BYTE *)WeakRetained + 32) = 1;
    }
    objc_storeStrong(WeakRetained + 13, *(id *)(a1 + 32));
    objc_msgSend(v9, "_updateContent");
    v10 = sub_1004315EC();
    v11 = objc_claimAutoreleasedReturnValue(v10);
    v12 = v11;
    if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
    {
      v14[0] = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_INTERVAL_END, v4, "FetchCollectionsChangesComparison", "", (uint8_t *)v14, 2u);
    }

    v13 = *(_QWORD *)(a1 + 40);
    if (v13)
      (*(void (**)(void))(v13 + 16))();
  }

}

void sub_10088D580(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  uint8_t buf[4];
  id v12;

  v3 = a2;
  v4 = sub_1004315EC();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[MCM] createCollection done error %@", buf, 0xCu);
  }

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10088D694;
  v8[3] = &unk_1011ACAD0;
  v6 = *(id *)(a1 + 32);
  v9 = v3;
  v10 = v6;
  v7 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v8);

}

uint64_t sub_10088D694(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 32));
  return result;
}

void sub_10088D840(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  uint8_t buf[4];
  id v12;

  v3 = a2;
  v4 = sub_1004315EC();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[MCM] saveCollection done error %@", buf, 0xCu);
  }

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10088D954;
  v8[3] = &unk_1011ACAD0;
  v6 = *(id *)(a1 + 32);
  v9 = v3;
  v10 = v6;
  v7 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v8);

}

uint64_t sub_10088D954(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 32));
  return result;
}

void sub_10088DB2C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  uint8_t buf[4];
  id v12;

  v3 = a2;
  v4 = sub_1004315EC();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[MCM] deleteCollection done error %@", buf, 0xCu);
  }

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10088DC40;
  v8[3] = &unk_1011ACAD0;
  v6 = *(id *)(a1 + 32);
  v9 = v3;
  v10 = v6;
  v7 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v8);

}

uint64_t sub_10088DC40(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 32));
  return result;
}

void sub_10088DE74(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  id v8;

  v3 = a2;
  v4 = sub_1004315EC();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v7 = 138412290;
    v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[MCM] deleteCollections done error %@", (uint8_t *)&v7, 0xCu);
  }

  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
    (*(void (**)(uint64_t, id))(v6 + 16))(v6, v3);

}

uint64_t sub_10088E7FC(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a2;
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allPlacesCollection"));

  if (v4 == v3)
  {
    v5 = 0;
  }
  else
  {
    if (objc_msgSend(v3, "contentType") == (id)1)
      LODWORD(v5) = objc_msgSend(v3, "isEmpty") ^ 1;
    else
      LODWORD(v5) = 0;
    if (objc_msgSend(v3, "handlerType") == (id)4)
      v5 = 1;
    else
      v5 = v5;
  }

  return v5;
}

BOOL sub_10088E8E8(id a1, id a2, NSDictionary *a3)
{
  id v3;
  unsigned int v4;

  v3 = a2;
  if (objc_msgSend(v3, "contentType") == (id)1)
    v4 = objc_msgSend(v3, "isEmpty") ^ 1;
  else
    LOBYTE(v4) = 0;
  if (objc_msgSend(v3, "handlerType") == (id)4)
    LOBYTE(v4) = 1;

  return v4;
}

id sub_10088F760(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateContent");
}

void sub_10088FD48(id a1)
{
  dispatch_queue_attr_t v1;
  NSObject *v2;
  dispatch_queue_attr_t v3;
  dispatch_queue_t v4;
  void *v5;
  NSObject *attr;

  v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  v3 = dispatch_queue_attr_make_with_qos_class(v2, QOS_CLASS_UTILITY, 0);
  attr = objc_claimAutoreleasedReturnValue(v3);

  v4 = dispatch_queue_create("com.apple.Maps.MapsAnalyticStateProvider", attr);
  v5 = (void *)qword_1014D3778;
  qword_1014D3778 = (uint64_t)v4;

}

void sub_100890138(uint64_t a1)
{
  id v2;
  _QWORD v3[4];
  id v4;
  id v5;
  id v6;
  __int128 v7;
  uint64_t v8;
  int v9;
  __int16 v10;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100890204;
  v3[3] = &unk_1011D9F70;
  v4 = (id)objc_claimAutoreleasedReturnValue(+[GEOAPSharedStateData sharedData](GEOAPSharedStateData, "sharedData"));
  v9 = *(_DWORD *)(a1 + 72);
  v5 = *(id *)(a1 + 32);
  v7 = *(_OWORD *)(a1 + 48);
  v10 = *(_WORD *)(a1 + 76);
  v8 = *(_QWORD *)(a1 + 64);
  v6 = *(id *)(a1 + 40);
  v2 = v4;
  objc_msgSend(v2, "performMapViewStateUpdate:", v3);

}

void sub_100890204(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "setMapViewMapType:", *(unsigned int *)(a1 + 80));
  objc_msgSend(*(id *)(a1 + 32), "setMapViewMapRegion:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "setMapViewZoomLevel:", *(double *)(a1 + 56));
  objc_msgSend(*(id *)(a1 + 32), "setMapViewStyleZoomLevel:", *(double *)(a1 + 64));
  if (*(_BYTE *)(a1 + 84))
    objc_msgSend(*(id *)(a1 + 32), "setMapViewLocationPuckInViewport:", *(unsigned __int8 *)(a1 + 85));
  objc_msgSend(*(id *)(a1 + 32), "setMapViewPitch:", *(double *)(a1 + 72));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "_mapLayer"));
  objc_msgSend(*(id *)(a1 + 32), "setMapViewIsAdvancedMap:", objc_msgSend(v2, "isShowingCuratedElevatedGround"));

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "_mapLayer"));
  objc_msgSend(*(id *)(a1 + 32), "setMapViewIsGlobeProjection:", objc_msgSend(v3, "enableGlobe"));

}

void sub_100890340(uint64_t a1)
{
  id v2;
  _QWORD v3[4];
  id v4;
  int v5;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1008903C8;
  v3[3] = &unk_1011B71A0;
  v4 = (id)objc_claimAutoreleasedReturnValue(+[GEOAPSharedStateData sharedData](GEOAPSharedStateData, "sharedData"));
  v5 = *(_DWORD *)(a1 + 32);
  v2 = v4;
  objc_msgSend(v2, "performMapViewStateUpdate:", v3);

}

id sub_1008903C8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setMapViewViewMode:", *(unsigned int *)(a1 + 40));
}

void sub_100890408(id a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  double v5;
  _BOOL8 v6;
  id v7;

  v7 = (id)objc_claimAutoreleasedReturnValue(+[GEOAPSharedStateData sharedData](GEOAPSharedStateData, "sharedData"));
  v1 = sub_100B3A5D4();
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "oneInsights"));
  v4 = objc_msgSend(v3, "isTouristHere");
  v6 = v5 > MapsSuggestionsConfidenceDontKnow(v4);

  objc_msgSend(v7, "setMapViewLocationIsTourist:", v6);
}

void sub_100890FEC(id a1, BOOL a2, NSError *a3)
{
  GEOConfigSetBOOL(GeoAnalyticsConfig_UseriCloudAccountAvailable[0], GeoAnalyticsConfig_UseriCloudAccountAvailable[1], a2);
}

void sub_100891150(id a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v3 = objc_msgSend(objc_alloc((Class)LSApplicationRecord), "initWithBundleIdentifier:allowPlaceholder:error:", CFSTR("com.apple.Maps"), 0, 0);
  v1 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dataContainerURL"));
  v2 = (void *)qword_1014D3788;
  qword_1014D3788 = v1;

}

void sub_10089330C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a43, 8);
  _Unwind_Resume(a1);
}

id sub_100893340(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  double v7;
  void *v8;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contentsForContext:", objc_msgSend(*(id *)(a1 + 40), "context")));
  v5 = v4;
  if (*(_BYTE *)(a1 + 48))
  {
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "instruction"));
  }
  else
  {
    if (v3)
      objc_msgSend(v3, "doubleValue");
    else
      v7 = -1.0;
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "stringForDistance:", v7));
  }
  v8 = (void *)v6;

  return v8;
}

void sub_1008933D0(id a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  NSAttributedStringKey v8;
  void *v9;

  v1 = objc_alloc((Class)NSAttributedString);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("[Directions] road descriptions separator"), CFSTR("localized string not found"), 0));
  v8 = NSForegroundColorAttributeName;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor whiteColor](UIColor, "whiteColor"));
  v9 = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1));
  v6 = objc_msgSend(v1, "initWithString:attributes:", v3, v5);
  v7 = (void *)qword_1014D37A0;
  qword_1014D37A0 = (uint64_t)v6;

}

uint64_t sub_1008934E8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1008934F8(uint64_t a1)
{

}

void sub_100893500(uint64_t a1, int a2, id obj)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a2;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), obj);
}

void sub_100894184(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  unsigned int v10;
  void *v11;
  unsigned int v12;
  void *v13;
  void *v14;
  id v15;

  v15 = a2;
  if (objc_msgSend(v15, "type") == 10)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "route"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "legs"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectAtIndexedSubscript:", *(_QWORD *)(a1 + 40)));

    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "token"));
    LODWORD(v4) = objc_msgSend(v6, "isEqualToString:", CFSTR("{Name}"));

    if ((_DWORD)v4)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "destination"));
      v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "navDisplayNameWithSpecialContacts:", 0));
    }
    else
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "token"));
      v10 = objc_msgSend(v9, "isEqualToString:", CFSTR("{Address}"));

      if (v10)
      {
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "destination"));
        v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "navDisplayAddress"));
      }
      else
      {
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "token"));
        v12 = objc_msgSend(v11, "isEqualToString:", CFSTR("{Road}"));

        if (!v12)
        {
LABEL_9:

          goto LABEL_10;
        }
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "step"));
        v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "maneuverRoadOrExitName"));
      }
    }
    v13 = (void *)v8;
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "stringFormat"));
    objc_msgSend(v14, "setOverrideValue:", v13);

    goto LABEL_9;
  }
LABEL_10:

}

void sub_1008954E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location)
{
  uint64_t v11;

  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v11 - 200));
  _Unwind_Resume(a1);
}

id sub_100895510(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_createMenuForSortButton"));
  else
    v3 = 0;

  return v3;
}

void sub_100895860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100895880(uint64_t a1)
{
  id *WeakRetained;
  id v3;
  id *v4;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v3 = objc_loadWeakRetained(WeakRetained + 6);
    objc_msgSend(v3, "requestsCollectionHeaderSortActionForView:forSortType:", v4, *(_QWORD *)(a1 + 40));

    WeakRetained = v4;
  }

}

void sub_100895C0C(id a1)
{
  TrafficIncidentLayoutManager *v1;
  void *v2;

  v1 = -[TrafficIncidentLayoutManager initWithFormType:]([TrafficIncidentLayoutManager alloc], "initWithFormType:", 7);
  v2 = (void *)qword_1014D37B0;
  qword_1014D37B0 = (uint64_t)v1;

}

void sub_100895F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100895F6C(uint64_t a1, void *a2)
{
  id *WeakRetained;
  id *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;

  v8 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    if (v8)
    {
      objc_msgSend(WeakRetained, "setIncidentLayout:", v8);
      v5 = *(_QWORD *)(a1 + 32);
      if (v5)
      {
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4[3], "layoutItems"));
        (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);

      }
    }
    else
    {
      v7 = *(_QWORD *)(a1 + 32);
      if (v7)
        (*(void (**)(uint64_t, void *))(v7 + 16))(v7, &__NSArray0__struct);
    }
  }

}

void sub_100896FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100896FE8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *WeakRetained;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  id v13;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = sub_10043379C();
    WeakRetained = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(WeakRetained, OS_LOG_TYPE_ERROR))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "description"));
      v10 = 138412546;
      v11 = v9;
      v12 = 2048;
      v13 = objc_msgSend(v5, "count");
      _os_log_impl((void *)&_mh_execute_header, WeakRetained, OS_LOG_TYPE_ERROR, "Error fetching categories: %@, categories.count=%lu", (uint8_t *)&v10, 0x16u);

    }
  }
  else
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    -[NSObject setSearchCategories:](WeakRetained, "setSearchCategories:", v5);
  }

}

uint64_t sub_1008974F8()
{
  uint64_t v0;
  void *v1;
  uint64_t result;

  v0 = MapsConfig_UsePlaceSummary;
  v1 = off_1014B3FB8;
  result = MapsFeature_IsEnabled_ShelbyvilleSearch();
  if ((_DWORD)result)
    return GEOConfigGetBOOL(v0, v1);
  return result;
}

void sub_1008976CC(uint64_t a1, uint64_t a2)
{
  uint64_t IsEnabled_EVRouting;
  uint64_t IsEnabled_Alberta;
  id v5;
  NSObject *v6;
  _BOOL8 v7;
  uint64_t v8;
  const __CFString *v9;
  __CFString *v10;
  __CFString *v11;
  __CFString *v12;
  __CFString *v13;
  id WeakRetained;
  int v15;
  const __CFString *v16;
  __int16 v17;
  __CFString *v18;
  __int16 v19;
  __CFString *v20;

  IsEnabled_EVRouting = MapsFeature_IsEnabled_EVRouting(a1, a2);
  if ((IsEnabled_EVRouting & 1) != 0)
    IsEnabled_Alberta = 1;
  else
    IsEnabled_Alberta = MapsFeature_IsEnabled_Alberta(IsEnabled_EVRouting);
  v5 = sub_1004326FC();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
  if (v7)
  {
    if ((_DWORD)IsEnabled_Alberta)
      v9 = CFSTR("will");
    else
      v9 = CFSTR("won't");
    if (MapsFeature_IsEnabled_EVRouting(v7, v8))
      v10 = CFSTR("YES");
    else
      v10 = CFSTR("NO");
    v11 = v10;
    if (MapsFeature_IsEnabled_Alberta(v11))
      v12 = CFSTR("YES");
    else
      v12 = CFSTR("NO");
    v13 = v12;
    v15 = 138412802;
    v16 = v9;
    v17 = 2112;
    v18 = v11;
    v19 = 2112;
    v20 = v13;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "_setupVirtualGarageIfNeeded %@ launch VG logic. evRoutingEnabled: %@, albertaEnabled: %@", (uint8_t *)&v15, 0x20u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setUsesVirtualGarage:", IsEnabled_Alberta);

}

void sub_1008979CC(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v1, "postNotificationName:object:", off_1014B63B0, 0);

}

void sub_100897AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100897AD4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_tearDownVirtualGarage");

}

id sub_100897E68(uint64_t a1)
{
  id v2;
  NSObject *v3;
  const __CFString *v4;
  void *v5;
  int v7;
  void *v8;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 48) = 1;
  v2 = sub_10043214C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = sub_1008EFC08(*(_QWORD *)(a1 + 40));
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    v7 = 138412290;
    v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Starting '%@'", (uint8_t *)&v7, 0xCu);

  }
  return objc_msgSend(*(id *)(a1 + 32), "start");
}

void sub_100898060(uint64_t a1)
{
  id v2;
  NSObject *v3;
  const __CFString *v4;
  void *v5;
  int v6;
  void *v7;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 48) = 0;
  objc_msgSend(*(id *)(a1 + 32), "stop");
  v2 = sub_10043214C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = sub_1008EFC08(*(_QWORD *)(a1 + 40));
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    v6 = 138412290;
    v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Stopped '%@'", (uint8_t *)&v6, 0xCu);

  }
}

id sub_10089820C(uint64_t a1)
{
  int v2;
  id v3;
  NSObject *v4;
  _BOOL4 v5;
  const __CFString *v6;
  void *v7;
  const __CFString *v9;
  void *v10;
  int v11;
  void *v12;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 48) = *(_BYTE *)(a1 + 40);
  v2 = *(unsigned __int8 *)(a1 + 40);
  v3 = sub_10043214C();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG);
  if (v2)
  {
    if (v5)
    {
      v6 = sub_1008EFC08(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32));
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      v11 = 138412290;
      v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Resuming '%@' state", (uint8_t *)&v11, 0xCu);

    }
    return objc_msgSend(*(id *)(a1 + 32), "resume");
  }
  else
  {
    if (v5)
    {
      v9 = sub_1008EFC08(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32));
      v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      v11 = 138412290;
      v12 = v10;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Pausing '%@' state", (uint8_t *)&v11, 0xCu);

    }
    return objc_msgSend(*(id *)(a1 + 32), "pause");
  }
}

void sub_100898528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

int64_t sub_10089854C(id a1, NanoRoutePlanningMutableRequest *a2, NanoRoutePlanningMutableResponse *a3)
{
  return 2;
}

void sub_100898554(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id *v7;
  id WeakRetained;
  NSObject **v9;
  NSObject **v10;
  NSObject *v11;
  _QWORD block[4];
  id v13;
  id v14;
  id v15;

  v5 = a2;
  v6 = a3;
  v7 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));

  if (WeakRetained)
  {
    v9 = (NSObject **)objc_loadWeakRetained(v7);
    v10 = v9;
    if (v9)
    {
      v11 = v9[1];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100898648;
      block[3] = &unk_1011AFF10;
      objc_copyWeak(&v15, v7);
      v13 = v5;
      v14 = v6;
      dispatch_async(v11, block);

      objc_destroyWeak(&v15);
    }

  }
}

void sub_100898648(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "_handleLocation:error:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

uint64_t sub_1008987F4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (*(_QWORD *)(a1 + 32) || (v9 = *(_QWORD *)(a1 + 40)) == 0)
  {
    objc_msgSend(v6, "setLastError:");
    v8 = 3;
  }
  else
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "traits"));
    objc_msgSend(v10, "setDeviceLocation:", v9);

    v8 = 2;
  }

  return v8;
}

GEOComposedWaypoint *__cdecl sub_100898BA0(id a1, NanoDirectionWaypoint *a2, unint64_t a3)
{
  return -[NanoDirectionWaypoint composedWaypoint](a2, "composedWaypoint", a3);
}

void sub_100898BA8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;
  NSObject *v8;
  _BOOL4 v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[4];
  NSObject *v13;
  id v14;
  uint64_t v15;
  uint8_t buf[4];
  uint64_t v17;

  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "composedWaypoint"));

  v7 = sub_10043214C();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
  if (v6)
  {
    if (v9)
    {
      *(_DWORD *)buf = 134217984;
      v17 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Skipping waypoint %lu", buf, 0xCu);
    }
  }
  else
  {
    if (v9)
    {
      *(_DWORD *)buf = 134217984;
      v17 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Refining waypoint %lu", buf, 0xCu);
    }

    dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
    v10 = *(_QWORD *)(a1 + 40);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "auditToken"));
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100898D40;
    v12[3] = &unk_1011DA1F8;
    v15 = a3;
    v13 = *(id *)(a1 + 56);
    v14 = *(id *)(a1 + 32);
    objc_msgSend(v5, "refineWithTraits:auditToken:completionHandler:", v10, v11, v12);

    v8 = v13;
  }

}

void sub_100898D40(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  id v14;

  v4 = a3;
  v5 = sub_10043214C();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = v6;
  if (v4)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v8 = *(_QWORD *)(a1 + 48);
      v11 = 134218242;
      v12 = v8;
      v13 = 2112;
      v14 = v4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Error refining waypoint %lu: %@", (uint8_t *)&v11, 0x16u);
    }

    v9 = *(void **)(a1 + 32);
    v7 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 48)));
    objc_msgSend(v9, "setObject:forKeyedSubscript:", v4, v7);
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v10 = *(_QWORD *)(a1 + 48);
    v11 = 134217984;
    v12 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Refined waypoint %lu", (uint8_t *)&v11, 0xCu);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_100898E88(uint64_t a1)
{
  id v2;
  BOOL v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  _BOOL4 v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  _QWORD v16[2];
  _QWORD v17[2];

  objc_copyWeak(&v15, (id *)(a1 + 48));
  v2 = objc_loadWeakRetained(&v15);
  v3 = v2 == 0;

  if (!v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allValues"));
    if (objc_msgSend(v4, "count") == (id)1)
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "firstObject"));
    }
    else if ((unint64_t)objc_msgSend(v4, "count") < 2)
    {
      v5 = 0;
    }
    else
    {
      v16[0] = NSUnderlyingErrorKey;
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "firstObject"));
      v16[1] = NSMultipleUnderlyingErrorsKey;
      v17[0] = v6;
      v17[1] = v4;
      v7 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v17, v16, 2));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", NSLocalizedDescriptionKey));
      v9 = v8 == 0;

      v10 = v7;
      if (v9)
      {
        v11 = sub_1008EFB10(4);
        v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
        v10 = v7;
        if (v12)
        {
          v13 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithDictionary:", v7);
          objc_msgSend(v13, "setObject:forKeyedSubscript:", v12, NSLocalizedDescriptionKey);
          v10 = objc_msgSend(v13, "copy");

        }
      }
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NanoRoutePlanningSession"), 4, v10));

    }
    v14 = objc_loadWeakRetained(&v15);
    objc_msgSend(v14, "_handleCompletionWithWaypoints:error:", *(_QWORD *)(a1 + 40), v5);

  }
  objc_destroyWeak(&v15);
}

void sub_100899090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

NSString *__cdecl sub_10089925C(id a1, NanoDirectionWaypoint *a2, unint64_t a3)
{
  void *v3;
  __CFString *v4;
  NSString *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(-[NanoDirectionWaypoint composedWaypoint](a2, "composedWaypoint", a3));
  if (v3)
    v4 = CFSTR("YES");
  else
    v4 = CFSTR("NO");
  v5 = v4;

  return v5;
}

uint64_t sub_1008992AC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  id v6;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = a3;
  objc_msgSend(a2, "setWaypoints:", v5);
  objc_msgSend(v6, "setLastError:", *(_QWORD *)(a1 + 40));

  if (*(_QWORD *)(a1 + 40))
    return 3;
  else
    return 2;
}

void sub_10089968C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

GEOComposedWaypoint *__cdecl sub_1008996B0(id a1, NanoDirectionWaypoint *a2, unint64_t a3)
{
  return -[NanoDirectionWaypoint composedWaypoint](a2, "composedWaypoint", a3);
}

void sub_1008996B8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  _QWORD *WeakRetained;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  _QWORD block[4];
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v11 = WeakRetained;
  if (WeakRetained)
  {
    if (*(_QWORD *)(a1 + 32) == WeakRetained[8])
    {
      v12 = *(_QWORD *)(a1 + 40);
      v13 = *(void **)(v12 + 64);
      *(_QWORD *)(v12 + 64) = 0;

    }
    v14 = v11[1];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1008997FC;
    block[3] = &unk_1011B55C8;
    objc_copyWeak(&v20, (id *)(a1 + 48));
    v16 = v7;
    v17 = v8;
    v18 = v9;
    v19 = *(id *)(a1 + 32);
    dispatch_async(v14, block);

    objc_destroyWeak(&v20);
  }

}

void sub_1008997FC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  objc_msgSend(WeakRetained, "_processIncomingRoutes:error:directionsError:fromTicket:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));

}

uint64_t sub_100899BD0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "directionsRequest"));
  objc_msgSend(v4, "setDirectionsRequest:", v5);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "directionsResponse"));
  objc_msgSend(v4, "setDirectionsResponse:", v6);

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "traceRecordingData"));
  objc_msgSend(v4, "setTraceRecordingData:", v7);

  if (*(_QWORD *)(a1 + 40))
    v8 = 0;
  else
    v8 = *(_QWORD *)(a1 + 48);
  objc_msgSend(v4, "setRoutes:", v8);
  objc_msgSend(v4, "setExpectedNumberOfRoutes:", objc_msgSend(*(id *)(a1 + 48), "count"));
  objc_msgSend(v4, "setLastError:", *(_QWORD *)(a1 + 40));
  if (*(_QWORD *)(a1 + 40))
    v9 = 3;
  else
    v9 = 2;

  return v9;
}

void sub_10089A924(id a1, int a2, int a3, BOOL a4)
{
  uint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  id v8;

  v4 = *(_QWORD *)&a2;
  if ((a3 - 1) > 5)
    v5 = 0;
  else
    v5 = qword_100E3C4B0[a3 - 1] - 1;
  if (v5 > 4)
  {
    v7 = 0;
  }
  else
  {
    v6 = (unsigned int *)&unk_100E3C4F4;
    if (a4)
      v6 = (unsigned int *)&unk_100E3C4E0;
    v7 = v6[v5];
  }
  v8 = (id)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
  objc_msgSend(v8, "captureUserAction:onTarget:eventValue:", v4, v7, 0);

}

_QWORD *sub_10089D054(void *a1)
{
  id v1;
  _QWORD *v2;
  _QWORD v4[4];
  id v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10089D0CC;
  v4[3] = &unk_1011DA338;
  v5 = a1;
  v1 = v5;
  v2 = objc_retainBlock(v4);

  return v2;
}

void sub_10089D0CC(uint64_t a1, void *a2, void *a3)
{
  unint64_t v5;
  unint64_t v6;
  id v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;

  v5 = a2;
  v6 = a3;
  if (!(v5 | v6))
  {
    v7 = sub_1004328BC();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v16) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Response contained no waypoint or error", (uint8_t *)&v16, 2u);
    }

    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("WaypointRequestErrorDomain"), 0, 0));
    goto LABEL_5;
  }
  v9 = (void *)v6;
  if (v5 && v6)
  {
    v12 = sub_1004328BC();
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v5, "shortDescription"));
      v16 = 138412546;
      v17 = v14;
      v18 = 2112;
      v19 = v9;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Response contained both a waypoint and an error. Waypoint: %@\n\nError: %@", (uint8_t *)&v16, 0x16u);

    }
    goto LABEL_12;
  }
  if (v5)
  {
LABEL_12:
    v10 = *(_QWORD *)(a1 + 32);
    v11 = objc_claimAutoreleasedReturnValue(+[Result resultWithValue:](Result, "resultWithValue:", v5));
    goto LABEL_13;
  }
LABEL_5:
  v10 = *(_QWORD *)(a1 + 32);
  v11 = objc_claimAutoreleasedReturnValue(+[Result resultWithError:](Result, "resultWithError:", v9));
LABEL_13:
  v15 = (void *)v11;
  (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v10, v11);

}

void sub_10089D284(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  objc_class *v10;
  NSString *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;

  v17 = a2;
  v5 = a3;
  if (v5)
  {
    v6 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0
      || (v7 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v5, v7) & 1) != 0))
    {
      v8 = v5;
LABEL_11:
      v15 = *(void **)(a1 + 32);
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: %@"), v17, v8));
      objc_msgSend(v15, "addObject:", v16);

      goto LABEL_12;
    }
    v9 = v5;
    v10 = (objc_class *)objc_opt_class(v9);
    v11 = NSStringFromClass(v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    if ((objc_opt_respondsToSelector(v9, "accessibilityIdentifier") & 1) != 0)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "performSelector:", "accessibilityIdentifier"));
      v14 = v13;
      if (v13 && !objc_msgSend(v13, "isEqualToString:", v12))
      {
        v8 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v12, v9, v14));

        goto LABEL_10;
      }

    }
    v8 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v12, v9));
LABEL_10:

    goto LABEL_11;
  }
LABEL_12:

}

void sub_10089D404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v4;

  if (a3)
  {
    v3 = *(void **)(a1 + 32);
    v4 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: %@"), a2, a3));
    objc_msgSend(v3, "addObject:", v4);

  }
}

void sub_10089D834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10089D85C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  id WeakRetained;
  dispatch_time_t v11;
  int v12;
  void *v13;
  __int16 v14;
  id v15;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = sub_10043364C();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "description"));
      v12 = 138412546;
      v13 = v9;
      v14 = 2048;
      v15 = objc_msgSend(v5, "count");
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Error fetching categories: %@, categories.count=%lu", (uint8_t *)&v12, 0x16u);

    }
  }
  else
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    objc_msgSend(WeakRetained, "_updateCategories:", v5);

    v11 = dispatch_time(0, 2000000000);
    dispatch_after(v11, (dispatch_queue_t)&_dispatch_main_q, &stru_1011DA358);
  }

}

void sub_10089D98C(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v1, "postNotificationName:object:", CFSTR("PPTTest_CarSearchCategoriesModeController_DidDisplayCategories"), 0);

}

GEOSearchCategory *__cdecl sub_10089E0EC(id a1, BrowseCategory *a2, unint64_t a3)
{
  return -[BrowseCategory category](a2, "category", a3);
}

void sub_10089F4C4(id a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc((Class)GEOMapItemPhotoOptions), "initWithAllowSmaller:cropStyle:format:", 1, 3, 0);
  v2 = (void *)qword_1014D37B8;
  qword_1014D37B8 = (uint64_t)v1;

}

id sub_1008A0208(id a1, UGCPhotoAlbumCategory *a2, unint64_t a3)
{
  UGCPhotoAlbumCategory *v3;
  id v4;
  void *v5;

  v3 = a2;
  v4 = objc_alloc_init((Class)MUScrollableSegmentedPickerCategory);
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[UGCPhotoAlbumCategory albumTitle](v3, "albumTitle"));

  objc_msgSend(v4, "setCategoryName:", v5);
  return v4;
}

void sub_1008A0E7C(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;
  char v11;

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1008A0F34;
  v7[3] = &unk_1011AED08;
  v8 = a2;
  v9 = *(id *)(a1 + 32);
  v10 = *(id *)(a1 + 40);
  v11 = a4;
  v6 = v8;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v7);

}

void sub_1008A0F34(uint64_t a1)
{
  void *v2;
  void *v3;
  unsigned int v4;
  double v5;
  _QWORD v6[4];
  id v7;
  id v8;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "assetIdentifier"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "photoID"));
    v4 = objc_msgSend(v2, "isEqualToString:", v3);

    if (v4)
    {
      if (*(_BYTE *)(a1 + 56))
        v5 = 0.0;
      else
        v5 = 0.4;
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      v6[2] = sub_1008A1030;
      v6[3] = &unk_1011AC8B0;
      v7 = *(id *)(a1 + 40);
      v8 = *(id *)(a1 + 32);
      +[UIView animateWithDuration:animations:](UIView, "animateWithDuration:animations:", v6, v5);

    }
  }
}

id sub_1008A1030(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setImage:", *(_QWORD *)(a1 + 40));
}

void sub_1008A1324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1008A1340(uint64_t a1)
{
  _BYTE *WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && !WeakRetained[64])
    WeakRetained[64] = 1;

}

void sub_1008A3580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

id sub_1008A35A4()
{
  if (qword_1014D37D0 != -1)
    dispatch_once(&qword_1014D37D0, &stru_1011DA4D0);
  return (id)qword_1014D37C8;
}

void sub_1008A3794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  _Unwind_Resume(exception_object);
}

void sub_1008A4794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1008A4868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1008A49A0(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

void sub_1008A49C4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_updateConstraintsForLandscape:", *(unsigned __int8 *)(a1 + 40));

}

void sub_1008A4A00(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_updateConstraintsForLandscape:", *(unsigned __int8 *)(a1 + 40));

}

void sub_1008A5744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1008A57CC(uint64_t a1, int a2)
{
  id *v2;
  id WeakRetained;
  void *v4;
  id v5;

  if (a2)
  {
    v2 = (id *)(a1 + 32);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "localizingView"));
    objc_msgSend(v4, "removeFromSuperview");

    v5 = objc_loadWeakRetained(v2);
    objc_msgSend(v5, "setLocalizingView:", 0);

  }
}

void sub_1008A583C(uint64_t a1, int a2)
{
  id *v2;
  id WeakRetained;
  void *v4;
  id v5;

  if (a2)
  {
    v2 = (id *)(a1 + 32);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "localizingView"));
    objc_msgSend(v4, "removeFromSuperview");

    v5 = objc_loadWeakRetained(v2);
    objc_msgSend(v5, "setLocalizingView:", 0);

  }
}

void sub_1008A5B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1008A6850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1008A6A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1008A6C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1008A6CAC(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "instructionContainerView"));
  objc_msgSend(v1, "setAlpha:", 1.0);

}

void sub_1008A6CE0(uint64_t a1, int a2)
{
  id v4;
  NSObject *v5;
  id WeakRetained;
  uint64_t v7;
  void *v8;
  __CFString *v9;
  __CFString *v10;
  int v11;
  id v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  __CFString *v16;

  v4 = sub_1008A35A4();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "instructionContainerView"));
    v8 = (void *)v7;
    v9 = CFSTR("NO");
    v11 = 134349570;
    v12 = WeakRetained;
    if (a2)
      v9 = CFSTR("YES");
    v13 = 2048;
    v14 = v7;
    v15 = 2112;
    v16 = v9;
    v10 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[%{public}p] Instruction view (%p) showing finished (%@)", (uint8_t *)&v11, 0x20u);

  }
}

void sub_1008A6F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1008A7094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1008A71C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1008A73B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1008A73F8(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "arrowGuidanceView"));
  objc_msgSend(v1, "setAlpha:", 1.0);

}

void sub_1008A742C(uint64_t a1, int a2)
{
  id v4;
  NSObject *v5;
  id WeakRetained;
  uint64_t v7;
  void *v8;
  __CFString *v9;
  __CFString *v10;
  int v11;
  id v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  __CFString *v16;

  v4 = sub_1008A35A4();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "arrowGuidanceView"));
    v8 = (void *)v7;
    v9 = CFSTR("NO");
    v11 = 134349570;
    v12 = WeakRetained;
    if (a2)
      v9 = CFSTR("YES");
    v13 = 2048;
    v14 = v7;
    v15 = 2112;
    v16 = v9;
    v10 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[%{public}p] Arrow guidance view (%p) showing finished (%@)", (uint8_t *)&v11, 0x20u);

  }
}

void sub_1008A7658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1008A7780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1008A78A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1008A7D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1008A80FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state, id location)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1008A8138(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  NSObject *v6;
  id v7;
  NSObject *v8;
  os_activity_scope_state_s v9;
  uint8_t buf[4];
  void *v11;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "activity", 0, 0));
    os_activity_scope_enter(v6, &v9);

    v7 = sub_1008A35A4();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134349056;
      v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[%{public}p] Reroute completion timer fired", buf, 0xCu);
    }

    objc_msgSend(v5, "setRerouteCompletionTimer:", 0);
    objc_msgSend(v5, "waitForActiveFeatureIfNecessary");
    os_activity_scope_leave(&v9);
  }

}

void sub_1008A823C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1008A8344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1008A85DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state, id location)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1008A8614(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  NSObject *v6;
  id v7;
  NSObject *v8;
  os_activity_scope_state_s v9;
  uint8_t buf[4];
  void *v11;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "activity", 0, 0));
    os_activity_scope_enter(v6, &v9);

    v7 = sub_1008A35A4();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134349056;
      v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[%{public}p] Active feature timer fired", buf, 0xCu);
    }

    objc_msgSend(v5, "setActiveFeatureTimer:", 0);
    objc_msgSend(v5, "setState:", 2);
    os_activity_scope_leave(&v9);
  }

}

void sub_1008A871C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1008A8824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1008A89E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state, id location)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1008A8A18(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  NSObject *v6;
  id v7;
  NSObject *v8;
  os_activity_scope_state_s v9;
  uint8_t buf[4];
  void *v11;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "activity", 0, 0));
    os_activity_scope_enter(v6, &v9);

    v7 = sub_1008A35A4();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134349056;
      v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[%{public}p] Failure view timeout fired; closing pedestrian AR",
        buf,
        0xCu);
    }

    objc_msgSend(v5, "stop");
    os_activity_scope_leave(&v9);
  }

}

void sub_1008A8B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1008A8EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1008A8F24(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  id WeakRetained;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD v11[4];
  id v12;
  __int128 *p_buf;
  __int128 buf;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  id v18;

  v3 = a2;
  v4 = sub_1008A35A4();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    LODWORD(buf) = 134349056;
    *(_QWORD *)((char *)&buf + 4) = WeakRetained;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[%{public}p] Temporarily enabling VL trace recording", (uint8_t *)&buf, 0xCu);

  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v7, "setBool:forKey:", 1, CFSTR("PedestrianARViewControllerTemporarilyEnableVLTraceRecordingKey"));

  *(_QWORD *)&buf = 0;
  *((_QWORD *)&buf + 1) = &buf;
  v15 = 0x3032000000;
  v16 = sub_1008A90F4;
  v17 = sub_1008A9104;
  v18 = 0;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1008A910C;
  v11[3] = &unk_1011DA488;
  p_buf = &buf;
  v12 = *(id *)(a1 + 32);
  v8 = _GEOConfigAddBlockListenerForKey(MapsConfig_VLTraceRecordingEnabled, off_1014B3698, &_dispatch_main_q, v11);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = *(void **)(*((_QWORD *)&buf + 1) + 40);
  *(_QWORD *)(*((_QWORD *)&buf + 1) + 40) = v9;

  GEOConfigSetBOOL(MapsConfig_VLTraceRecordingEnabled, off_1014B3698, 1);
  _Block_object_dispose(&buf, 8);

}

void sub_1008A90D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1008A90F4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1008A9104(uint64_t a1)
{

}

uint64_t sub_1008A910C(uint64_t a1, uint64_t a2)
{
  GEOConfigRemoveBlockListener(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1008A9140(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1008A9514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1008A97E0(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  NSObject *v4;
  void *v5;
  void *v6;
  unsigned int v7;
  dispatch_time_t v8;
  _QWORD v9[4];
  id v10;
  id v11;
  os_activity_scope_state_s state;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    state.opaque[0] = 0;
    state.opaque[1] = 0;
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "activity"));
    os_activity_scope_enter(v4, &state);

    objc_msgSend(v3, "setState:", 3);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "chromeViewController"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[GEOPlatform sharedPlatform](GEOPlatform, "sharedPlatform"));
    v7 = objc_msgSend(v6, "isInternalInstall");

    if (v7)
    {
      v8 = dispatch_time(0, 500000000);
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472;
      v9[2] = sub_1008A9924;
      v9[3] = &unk_1011AC8B0;
      v10 = *(id *)(a1 + 32);
      v11 = v5;
      dispatch_after(v8, (dispatch_queue_t)&_dispatch_main_q, v9);

    }
    os_activity_scope_leave(&state);
  }

}

void sub_1008A990C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1008A9924(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@"), *(_QWORD *)(a1 + 32)));
  v4 = (id)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", CFSTR("ARSession failure [Internal only]"), v2, 1));

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", CFSTR("OK"), 0, 0));
  objc_msgSend(v4, "addAction:", v3);

  objc_msgSend(*(id *)(a1 + 40), "presentViewController:animated:completion:", v4, 1, 0);
}

void sub_1008A9B08(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  int v6;
  void *v7;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "session"));

    if (v3)
    {
      objc_msgSend(v2, "setArkitSessionStartTimestamp:", 0);
      objc_msgSend(v2, "start");
    }
    else
    {
      v4 = sub_1008A35A4();
      v5 = objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        v6 = 134349056;
        v7 = v2;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[%{public}p] We aren't the ARKit session owners anymore; will not kick off re-localization",
          (uint8_t *)&v6,
          0xCu);
      }

    }
  }

}

void sub_1008A9C74(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  unsigned int v3;
  void *v4;
  int v5;
  int v6;
  void *v7;
  double v8;
  void *v9;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    v9 = WeakRetained;
    v3 = objc_msgSend(WeakRetained, "shouldUpdateCameraFocusLensPosition");
    v2 = v9;
    if (v3)
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
      objc_msgSend(v4, "floatForKey:", CFSTR("PedestrianARAutoFocusDistanceKey"));
      v6 = v5;

      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "session"));
      LODWORD(v8) = v6;
      objc_msgSend(v7, "updateCameraFocusLensPosition:", v8);

      objc_msgSend(v9, "setShouldUpdateCameraFocusLensPosition:", 0);
      v2 = v9;
    }
  }

}

void sub_1008AA288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1008AA4F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state, id location)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1008AA538(uint64_t a1, void *a2)
{
  NSObject *v3;
  id v4;
  NSObject *v5;
  NSObject *v6;
  id WeakRetained;
  id v8;
  NSObject *v9;
  id v10;
  id v11;
  NSObject *v12;
  id v13;
  int v14;
  id v15;
  __int16 v16;
  NSObject *v17;

  v3 = a2;
  v4 = sub_1008A35A4();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
      v14 = 134349314;
      v15 = WeakRetained;
      v16 = 2112;
      v17 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "[%{public}p] Saving ARKit session recording failed: %@", (uint8_t *)&v14, 0x16u);

    }
  }
  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v8 = objc_loadWeakRetained((id *)(a1 + 40));
      v9 = *(NSObject **)(a1 + 32);
      v14 = 134349314;
      v15 = v8;
      v16 = 2112;
      v17 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[%{public}p] Saving ARKit session recording succeeded: %@", (uint8_t *)&v14, 0x16u);

    }
    v10 = sub_1004A9A1C(*(void **)(a1 + 32));
    v6 = objc_claimAutoreleasedReturnValue(v10);
    if (v6)
    {
      v11 = sub_1008A35A4();
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        v13 = objc_loadWeakRetained((id *)(a1 + 40));
        v14 = 134349314;
        v15 = v13;
        v16 = 2112;
        v17 = v6;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "[%{public}p] Copying ARKit session recording to crash reporter directory failed: %@", (uint8_t *)&v14, 0x16u);

      }
    }
  }

}

void sub_1008AA84C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1008AAA3C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1008AAB04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1008AABD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1008AAD2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;
  uint64_t v16;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  os_activity_scope_leave((os_activity_scope_state_t)(v16 - 48));
  _Unwind_Resume(a1);
}

void sub_1008AAD58(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "start");

}

void sub_1008AAE40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1008AAFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1008AB184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1008ABA10(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "PedestrianARViewController");
  v2 = (void *)qword_1014D37C8;
  qword_1014D37C8 = (uint64_t)v1;

}

id sub_1008AC0D8(uint64_t a1)
{
  void *v2;
  void *v3;

  objc_msgSend(*(id *)(a1 + 32), "_updateCompactVerticalLayout");
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tableViewController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "view"));
  objc_msgSend(v3, "layoutIfNeeded");

  return objc_msgSend(*(id *)(a1 + 32), "_updatePreferredContentSize");
}

void sub_1008AC74C(uint64_t a1)
{
  void *v1;
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "navigationController"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "view"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "superview"));
  objc_msgSend(v2, "layoutIfNeeded");

}

void sub_1008ACD74(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1008ACD98(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  id v3;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_clearTableIfNeeded");

  v3 = objc_loadWeakRetained(v1);
  objc_msgSend(v3, "didMoveToParentViewController:", 0);

}

void sub_1008AD0CC(uint64_t a1)
{
  id v2;
  NSObject *v3;
  os_signpost_id_t v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  NSObject *v15;
  NSObject *v16;
  uint64_t v17;
  uint8_t buf[16];
  id v19;

  v2 = sub_10043310C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = os_signpost_id_generate(v3);

  v5 = sub_10043310C();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = v6;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_INTERVAL_BEGIN, v4, "NumberOfPhotosTakenForMapItemProcessing", "", buf, 2u);
  }

  v8 = objc_alloc_init((Class)PHFetchOptions);
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("creationDate >= %@"), *(_QWORD *)(a1 + 32)));
  objc_msgSend(v8, "setPredicate:", v9);

  v10 = objc_msgSend(objc_alloc((Class)NSSortDescriptor), "initWithKey:ascending:", CFSTR("creationDate"), 0);
  v19 = v10;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v19, 1));
  objc_msgSend(v8, "setSortDescriptors:", v11);

  v12 = *(void **)(a1 + 56);
  objc_msgSend(*(id *)(a1 + 40), "_coordinate");
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "fetchNearbyAssetsForMapItemCoordinate:withOptions:", v8));
  v14 = sub_10043310C();
  v15 = objc_claimAutoreleasedReturnValue(v14);
  v16 = v15;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v15))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_INTERVAL_END, v4, "NumberOfPhotosTakenForMapItemProcessing", "", buf, 2u);
  }

  v17 = *(_QWORD *)(a1 + 48);
  if (v17)
    (*(void (**)(uint64_t, id))(v17 + 16))(v17, objc_msgSend(v13, "count"));

}

void sub_1008AD3A0(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  CLLocationCoordinate2D v10;

  objc_msgSend(*(id *)(a1 + 32), "_coordinate");
  if (!CLLocationCoordinate2DIsValid(v10))
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  v2 = objc_alloc_init((Class)PHFetchOptions);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("creationDate <= %@"), v3));
  objc_msgSend(v2, "setPredicate:", v4);

  objc_msgSend(v2, "setFetchLimit:", GEOConfigGetUInteger(MapsConfig_NumberOfPhotoToFetchForSuggestionsInContributionCard, off_1014B4A78));
  v5 = objc_msgSend(objc_alloc((Class)NSSortDescriptor), "initWithKey:ascending:", CFSTR("creationDate"), 0);
  v9 = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v9, 1));
  objc_msgSend(v2, "setSortDescriptors:", v6);

  v7 = *(void **)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "_coordinate");
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "fetchNearbyAssetsForMapItemCoordinate:withOptions:", v2));
  (*(void (**)(_QWORD, BOOL))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), objc_msgSend(v8, "count") != 0);

}

void sub_1008AE04C(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addCheckmarkRowsGroupWithContent:defaultsKey:checkedRowValueIfUnset:changeHandler:](a2, "addCheckmarkRowsGroupWithContent:defaultsKey:checkedRowValueIfUnset:changeHandler:", &stru_1011DA540, CFSTR("__internal__keyColorOverride"), &off_10126FA78, 0);
}

void sub_1008AE088(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  unint64_t v2;
  const __CFString *v3;
  void *v4;
  id v5;
  MapsDebugCheckmarkRowsGroup *v6;

  v6 = a2;
  v2 = -1;
  do
  {
    v3 = CFSTR("None");
    if (v2 <= 7)
      v3 = off_1011DA560[v2];
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", ++v2));
    v5 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v6, "addRowWithTitle:value:", v3, v4);

  }
  while (v2 != 8);

}

void sub_1008AE8E0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;

  v25 = a2;
  v5 = a3;
  v6 = 0;
  if (v25 && !v5)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "selectedVehicle"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "evChargingPorts"));

    if (objc_msgSend(v8, "count"))
    {
      v15 = objc_msgSend(v8, "count");
      sub_100B0AAF0(OS_LOG_TYPE_INFO, CFSTR("MAPS IPC Found EV Ports, count: %ld. "), v16, v17, v18, v19, v20, v21, (uint64_t)v15);
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[GEOMapService sharedService](GEOMapService, "sharedService"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "serializedSearchEvChargingParametersForSiriFromPorts:", v8));

    }
    else
    {
      sub_100B0AAF0(OS_LOG_TYPE_INFO, CFSTR("MAPS IPC No EV Ports found"), v9, v10, v11, v12, v13, v14, v24);
      v6 = 0;
    }

  }
  v23 = *(_QWORD *)(a1 + 32);
  if (v23)
    (*(void (**)(uint64_t, void *))(v23 + 16))(v23, v6);

}

id sub_1008AF4EC()
{
  if (qword_1014D37E0 != -1)
    dispatch_once(&qword_1014D37E0, &stru_1011DA710);
  return (id)qword_1014D37D8;
}

void sub_1008B0664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_1008B06B0(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v7;
  id v8;
  id v9;

  v7 = *(void **)(a1 + 32);
  v8 = a2;
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectAtIndexedSubscript:", a3));
  LOBYTE(a3) = objc_msgSend(v8, "isEqualToSearchResult:forPurpose:");

  if ((a3 & 1) == 0)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    *a4 = 1;
  }

}

void sub_1008B2D2C(uint64_t a1, int a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapSelectionManager"));
  objc_msgSend(v4, "resumeUpdates");

  if (a2)
  {
    v5 = *(void **)(a1 + 32);
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "results"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "searchDotPlaces"));
    objc_msgSend(v5, "dropPinsForSearchResults:searchDotPlaces:selectedSearchResult:animate:itemSource:", v6, v7, *(_QWORD *)(a1 + 48), 1, *(_QWORD *)(a1 + 56));

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    LOBYTE(v6) = objc_opt_respondsToSelector(v8, "setNeedsUserActivityUpdate");

    if ((v6 & 1) != 0)
    {
      v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
      objc_msgSend(v9, "setNeedsUserActivityUpdate");

    }
  }
}

void sub_1008B2E0C(uint64_t a1, int a2, double a3, double a4, double a5, double a6)
{
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapSelectionManager"));
  objc_msgSend(v12, "resumeUpdates");

  if (a2)
  {
    v13 = *(void **)(a1 + 32);
    v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "results"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "searchDotPlaces"));
    objc_msgSend(v13, "dropPinsForSearchResults:searchDotPlaces:selectedSearchResult:animate:itemSource:", v14, v15, *(_QWORD *)(a1 + 48), 1, *(_QWORD *)(a1 + 56));

    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    LOBYTE(v14) = objc_opt_respondsToSelector(v16, "setNeedsUserActivityUpdate");

    if ((v14 & 1) != 0)
    {
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
      objc_msgSend(v17, "setNeedsUserActivityUpdate");

    }
    v18 = *(_QWORD *)(a1 + 64);
    if (v18)
      (*(void (**)(double, double, double, double))(v18 + 16))(a3, a4, a5, a6);
  }
}

void sub_1008B3240(uint64_t a1, int a2, double a3, double a4, double a5, double a6)
{
  id v12;
  NSObject *v13;
  id v14;
  void *v15;
  objc_class *v16;
  NSString *v17;
  void *v18;
  void *v19;
  void *v20;
  __CFString *v21;
  uint64_t v22;
  void *v23;
  uint8_t buf[4];
  __CFString *v25;
  __int16 v26;
  int v27;

  if (*(_QWORD *)(a1 + 40))
  {
    v12 = sub_1008AF4EC();
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
LABEL_12:

      (*(void (**)(double, double, double, double))(*(_QWORD *)(a1 + 40) + 16))(a3, a4, a5, a6);
      goto LABEL_13;
    }
    v14 = *(id *)(a1 + 32);
    v15 = v14;
    if (!v14)
    {
      v21 = CFSTR("<nil>");
      goto LABEL_11;
    }
    v16 = (objc_class *)objc_opt_class(v14);
    v17 = NSStringFromClass(v16);
    v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    if ((objc_opt_respondsToSelector(v15, "accessibilityIdentifier") & 1) != 0)
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "performSelector:", "accessibilityIdentifier"));
      v20 = v19;
      if (v19 && !objc_msgSend(v19, "isEqualToString:", v18))
      {
        v21 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v18, v15, v20));

        goto LABEL_9;
      }

    }
    v21 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v18, v15));
LABEL_9:

LABEL_11:
    *(_DWORD *)buf = 138543618;
    v25 = v21;
    v26 = 1024;
    v27 = a2;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "[%{public}@] Animation completed, Calling completion block. Finished:(%d)", buf, 0x12u);

    goto LABEL_12;
  }
LABEL_13:
  v22 = *(_QWORD *)(a1 + 32);
  v23 = *(void **)(v22 + 16);
  *(_QWORD *)(v22 + 16) = 0;

}

void sub_1008B3AE0(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 24), a2);
}

void sub_1008B3AEC(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 24), a2);
}

void sub_1008B4264(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_1008B4288(uint64_t a1)
{
  void *v2;
  unsigned __int8 v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapSelectionManager"));
  v3 = objc_msgSend(v2, "hasSelection");

  if ((v3 & 1) == 0)
    objc_msgSend(*(id *)(a1 + 32), "selectLabelMarkerForSearchResult:animated:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

void sub_1008B42E4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "selectLabelMarkerForSearchResult:animated:", *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 48));

}

id sub_1008B5630(uint64_t a1, uint64_t a2)
{
  return +[POIShapeFactory searchResultWaypointPOIShapeWithMapView:searchResult:](POIShapeFactory, "searchResultWaypointPOIShapeWithMapView:searchResult:", *(_QWORD *)(a1 + 32), a2);
}

void sub_1008B62A4(uint64_t a1, double a2, double a3, double a4, double a5, uint64_t a6, void *a7)
{
  id v13;
  id v14;
  NSObject *v15;
  id v16;
  void *v17;
  objc_class *v18;
  NSString *v19;
  void *v20;
  void *v21;
  void *v22;
  __CFString *v23;
  id *v24;
  uint8_t buf[4];
  __CFString *v26;

  v13 = a7;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 52))
    goto LABEL_16;
  v14 = sub_1008AF4EC();
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    v16 = *(id *)(a1 + 32);
    v17 = v16;
    if (!v16)
    {
      v23 = CFSTR("<nil>");
      goto LABEL_11;
    }
    v18 = (objc_class *)objc_opt_class(v16);
    v19 = NSStringFromClass(v18);
    v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
    if ((objc_opt_respondsToSelector(v17, "accessibilityIdentifier") & 1) != 0)
    {
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "performSelector:", "accessibilityIdentifier"));
      v22 = v21;
      if (v21 && !objc_msgSend(v21, "isEqualToString:", v20))
      {
        v23 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v20, v17, v22));

        goto LABEL_9;
      }

    }
    v23 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v20, v17));
LABEL_9:

LABEL_11:
    *(_DWORD *)buf = 138543362;
    v26 = v23;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "[%{public}@] Framing map region completed", buf, 0xCu);

  }
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 50) = 1;
  v24 = *(id **)(a1 + 32);
  if (v13 && !v24[7])
  {
    objc_storeStrong(v24 + 7, a7);
    v24 = *(id **)(a1 + 32);
  }
  objc_msgSend(v24, "proceedWithDroppingPins:searchResultsRegion:", 1, a2, a3, a4, a5);
LABEL_16:

}

void sub_1008B6A04(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  void *v5;
  objc_class *v6;
  NSString *v7;
  void *v8;
  void *v9;
  void *v10;
  __CFString *v11;
  uint64_t v12;
  void *v13;
  uint8_t buf[4];
  __CFString *v15;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 72))
  {
    v2 = sub_1008AF4EC();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
LABEL_12:

      (*(void (**)(double, double, double, double))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 72) + 16))(*(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64));
      v12 = *(_QWORD *)(a1 + 32);
      v13 = *(void **)(v12 + 72);
      *(_QWORD *)(v12 + 72) = 0;

      return;
    }
    v4 = *(id *)(a1 + 32);
    v5 = v4;
    if (!v4)
    {
      v11 = CFSTR("<nil>");
      goto LABEL_11;
    }
    v6 = (objc_class *)objc_opt_class(v4);
    v7 = NSStringFromClass(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if ((objc_opt_respondsToSelector(v5, "accessibilityIdentifier") & 1) != 0)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "performSelector:", "accessibilityIdentifier"));
      v10 = v9;
      if (v9 && !objc_msgSend(v9, "isEqualToString:", v8))
      {
        v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v8, v5, v10));

        goto LABEL_9;
      }

    }
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v8, v5));
LABEL_9:

LABEL_11:
    *(_DWORD *)buf = 138543362;
    v15 = v11;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[%{public}@] Calling completion block to drop pins", buf, 0xCu);

    goto LABEL_12;
  }
}

uint64_t sub_1008B6C64(uint64_t a1, uint64_t a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v12;
  uint64_t result;

  v6 = a6.n128_f64[0];
  v7 = a5.n128_f64[0];
  v8 = a4.n128_f64[0];
  v9 = a3.n128_f64[0];
  v12 = *(_QWORD *)(a1 + 32);
  if (v12)
    (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(v12 + 16))(v12, a2, a3, a4, a5, a6);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, double, double, double, double))(result + 16))(result, a2, v9, v8, v7, v6);
  return result;
}

void sub_1008B6D74(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "SearchPins");
  v2 = (void *)qword_1014D37D8;
  qword_1014D37D8 = (uint64_t)v1;

}

void sub_1008B731C(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v4 = a2;
  v3 = objc_opt_class(NSString);
  if ((objc_opt_isKindOfClass(v4, v3) & 1) != 0)
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v4);

}

void sub_1008B74DC(id *a1, void *a2, void *a3)
{
  id v5;
  unsigned __int16 v6;
  NSMutableArray *v7;
  uint64_t v8;
  NSMutableArray *v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];

  v5 = a3;
  v6 = (unsigned __int16)objc_msgSend(a2, "unsignedIntValue");
  v7 = (NSMutableArray *)v5;
  v8 = v6;
  v9 = v7;
  if ((_DWORD)v8 == 2)
  {
    v9 = objc_opt_new(NSMutableArray);
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "laneInfoList", 0));
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v17;
      do
      {
        v14 = 0;
        do
        {
          if (*(_QWORD *)v17 != v13)
            objc_enumerationMutation(v10);
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "accNavigationLaneGuidanceLaneInfoFrom:", *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)v14)));
          -[NSMutableArray addObject:](v9, "addObject:", v15);

          v14 = (char *)v14 + 1;
        }
        while (v12 != v14);
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
      }
      while (v12);
    }

  }
  objc_msgSend(a1[5], "setInfo:data:", v8, v9);

}

void sub_1008B7700(uint64_t a1, void *a2, void *a3)
{
  id v5;

  v5 = a3;
  objc_msgSend(*(id *)(a1 + 32), "setInfo:data:", (unsigned __int16)objc_msgSend(a2, "unsignedIntValue"), v5);

}

void sub_1008B77FC(uint64_t a1, void *a2, void *a3)
{
  id v5;

  v5 = a3;
  objc_msgSend(*(id *)(a1 + 32), "setInfo:data:", (unsigned __int16)objc_msgSend(a2, "unsignedIntValue"), v5);

}

void sub_1008B78F8(uint64_t a1, void *a2, void *a3)
{
  id v5;

  v5 = a3;
  objc_msgSend(*(id *)(a1 + 32), "setInfo:data:", (unsigned __int16)objc_msgSend(a2, "unsignedIntValue"), v5);

}

id sub_1008B8D14()
{
  if (qword_1014D37F0 != -1)
    dispatch_once(&qword_1014D37F0, &stru_1011DA9A0);
  return (id)qword_1014D37E8;
}

void sub_1008B8D54(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  id v8;
  uint64_t v9;
  void *i;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;
  id v16;
  id obj;
  _QWORD v18[4];
  id v19;
  __int128 *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[4];
  id v25;
  NSObject *v26;
  __int128 *p_buf;
  _QWORD *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _QWORD v33[5];
  id v34;
  _QWORD block[4];
  id v36;
  id v37;
  uint8_t v38[128];
  __int128 buf;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t);
  void (*v42)(uint64_t);
  id v43;

  v4 = a2;
  v16 = a3;
  if (v16)
  {
    v5 = sub_1008B8D14();
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 138543362;
      *(_QWORD *)((char *)&buf + 4) = v16;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Error fetching route library: %{public}@", (uint8_t *)&buf, 0xCu);
    }

    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1008B90EC;
    block[3] = &unk_1011ACAD0;
    v37 = *(id *)(a1 + 32);
    v36 = v16;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  }
  else
  {
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v40 = 0x3032000000;
    v41 = sub_1008B9104;
    v42 = sub_1008B9114;
    v43 = 0;
    v33[0] = 0;
    v33[1] = v33;
    v33[2] = 0x3032000000;
    v33[3] = sub_1008B9104;
    v33[4] = sub_1008B9114;
    v34 = 0;
    v7 = dispatch_group_create();
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    obj = v4;
    v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v38, 16);
    if (v8)
    {
      v9 = *(_QWORD *)v30;
      do
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(_QWORD *)v30 != v9)
            objc_enumerationMutation(obj);
          v11 = (void *)objc_claimAutoreleasedReturnValue(+[MapsSavedRoutesManager routeDataForMapsSyncUserRoute:](MapsSavedRoutesManager, "routeDataForMapsSyncUserRoute:", *(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)i)));
          dispatch_group_enter(v7);
          v24[0] = _NSConcreteStackBlock;
          v24[1] = 3221225472;
          v24[2] = sub_1008B911C;
          v24[3] = &unk_1011DA7C8;
          v12 = v11;
          v25 = v12;
          p_buf = &buf;
          v28 = v33;
          v26 = v7;
          objc_msgSend(v12, "updateCountryIfNecessaryWithCompletionHandler:", v24);

        }
        v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v38, 16);
      }
      while (v8);
    }

    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_1008B91CC;
    v18[3] = &unk_1011DA850;
    v20 = &buf;
    v21 = v33;
    v13 = *(_QWORD *)(a1 + 48);
    v14 = *(void **)(a1 + 32);
    v22 = *(_QWORD *)(a1 + 40);
    v23 = v13;
    v19 = v14;
    dispatch_group_notify(v7, (dispatch_queue_t)&_dispatch_main_q, v18);

    _Block_object_dispose(v33, 8);
    _Block_object_dispose(&buf, 8);

  }
}

void sub_1008B90B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  _Block_object_dispose(&a39, 8);
  _Block_object_dispose((const void *)(v39 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1008B90EC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, 0, *(_QWORD *)(a1 + 32));
}

uint64_t sub_1008B9104(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1008B9114(uint64_t a1)
{

}

void sub_1008B911C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  if (objc_msgSend(*(id *)(a1 + 32), "isAvailableForCurrentCountry"))
  {
    v2 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    if (!v2)
    {
      v3 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v5 = *(void **)(v4 + 40);
      *(_QWORD *)(v4 + 40) = v3;

      v6 = *(_QWORD *)(a1 + 48);
LABEL_6:
      v2 = *(void **)(*(_QWORD *)(v6 + 8) + 40);
    }
  }
  else
  {
    v2 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
    if (!v2)
    {
      v7 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v9 = *(void **)(v8 + 40);
      *(_QWORD *)(v8 + 40) = v7;

      v6 = *(_QWORD *)(a1 + 56);
      goto LABEL_6;
    }
  }
  objc_msgSend(v2, "addObject:", *(_QWORD *)(a1 + 32));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1008B91CC(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  NSObject *v5;
  unsigned int v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  NSObject *v11;
  unsigned int v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  _QWORD block[4];
  id v19;
  __int128 v20;
  uint8_t buf[4];
  unsigned int v22;
  __int16 v23;
  void *v24;

  v2 = sub_10039DCD4(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), &stru_1011DA808);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = sub_1008B8D14();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "count");
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "componentsJoinedByString:", CFSTR("\n\t")));
    *(_DWORD *)buf = 67109379;
    v22 = v6;
    v23 = 2113;
    v24 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Loaded %d routes:\n\t%{private}@", buf, 0x12u);

  }
  if (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "count"))
  {
    v8 = sub_10039DCD4(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), &stru_1011DA828);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    v10 = sub_1008B8D14();
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "count");
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "componentsJoinedByString:", CFSTR("\n\t")));
      *(_DWORD *)buf = 67109379;
      v22 = v12;
      v23 = 2113;
      v24 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Found %d unavailable routes:\n\t%{private}@", buf, 0x12u);

    }
  }
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  objc_msgSend(v14, "addObjectsFromArray:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  objc_msgSend(v14, "addObjectsFromArray:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
  objc_msgSend(*(id *)(a1 + 56), "_updateLocalListWithKnownRoutes:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v16 = v15;
  v17 = *(_QWORD *)(a1 + 64);
  if ((v17 & 1) != 0)
  {
    objc_msgSend(v15, "addObjectsFromArray:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
    v17 = *(_QWORD *)(a1 + 64);
  }
  if ((v17 & 2) != 0)
    objc_msgSend(v16, "addObjectsFromArray:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1008B9594;
  block[3] = &unk_1011B0B38;
  v19 = *(id *)(a1 + 32);
  v20 = *(_OWORD *)(a1 + 40);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

NSString *__cdecl sub_1008B948C(id a1, GEOComposedGeometryRoutePersistentData *a2, unint64_t a3)
{
  GEOComposedGeometryRoutePersistentData *v3;
  void *v4;
  void *v5;
  void *v6;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[GEOComposedGeometryRoutePersistentData userProvidedName](v3, "userProvidedName"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[GEOComposedGeometryRoutePersistentData anchorPoints](v3, "anchorPoints"));

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("\"%@\", Anchors: %d"), v4, objc_msgSend(v5, "count")));
  return (NSString *)v6;
}

NSString *__cdecl sub_1008B9514(id a1, GEOComposedGeometryRoutePersistentData *a2, unint64_t a3)
{
  GEOComposedGeometryRoutePersistentData *v3;
  void *v4;
  void *v5;
  void *v6;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[GEOComposedGeometryRoutePersistentData userProvidedName](v3, "userProvidedName"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[GEOComposedGeometryRoutePersistentData iso3166CountryCode](v3, "iso3166CountryCode"));

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("\"%@\" (%@)"), v4, v5));
  return (NSString *)v6;
}

uint64_t sub_1008B9594(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[4] + 16))(a1[4], *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40), *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40), 0);
}

void sub_1008B98A4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  _QWORD block[4];
  id v17;
  id v18;
  id v19;
  uint8_t buf[4];
  uint64_t v21;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = sub_1008B8D14();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 134217984;
      v21 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Error finding saved route with tour muid %llu.", buf, 0xCu);
    }

  }
  if ((unint64_t)objc_msgSend(v5, "count") >= 2)
  {
    v10 = sub_1008B8D14();
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 134217984;
      v21 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Found more than 1 route with tour muid of %llu. This is unexpected, but returning all of them anyway.", buf, 0xCu);
    }

  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1008B9A48;
  block[3] = &unk_1011B1BB8;
  v17 = v5;
  v13 = *(id *)(a1 + 32);
  v18 = v6;
  v19 = v13;
  v14 = v6;
  v15 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_1008B9A48(uint64_t a1)
{
  id v2;
  id v3;

  v2 = sub_10039DCD4(*(void **)(a1 + 32), &stru_1011DA8B8);
  v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

GEOComposedGeometryRoutePersistentData *__cdecl sub_1008B9A98(id a1, MSUserRoute *a2, unint64_t a3)
{
  void *v3;
  void *v4;
  GEOComposedGeometryRoutePersistentData *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MapsSavedRoutesManager routeDataForMapsSyncUserRoute:](MapsSavedRoutesManager, "routeDataForMapsSyncUserRoute:", a2));
  if (objc_msgSend(v3, "isAvailableForCurrentCountry"))
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;

  return v5;
}

void sub_1008B9D4C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  __int128 v8;
  _QWORD v9[4];
  id v10;
  id v11;
  __int128 v12;
  id v13;

  v3 = a2;
  +[MapsSavedRoutesManager _updateUserRoute:withRouteData:](MapsSavedRoutesManager, "_updateUserRoute:withRouteData:", v3, *(_QWORD *)(a1 + 32));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MapsSyncStore sharedStore](_TtC8MapsSync13MapsSyncStore, "sharedStore"));
  v13 = v3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v13, 1));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1008B9E80;
  v9[3] = &unk_1011DA908;
  v10 = *(id *)(a1 + 32);
  v11 = v3;
  v8 = *(_OWORD *)(a1 + 40);
  v6 = (id)v8;
  v12 = v8;
  v7 = v3;
  objc_msgSend(v4, "saveWithObjects:completionHandler:", v5, v9);

}

void sub_1008B9E80(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  __int128 v5;
  _QWORD block[4];
  id v7;
  id v8;
  id v9;
  __int128 v10;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1008B9F48;
  block[3] = &unk_1011BA6E8;
  v7 = a2;
  v8 = *(id *)(a1 + 32);
  v9 = *(id *)(a1 + 40);
  v5 = *(_OWORD *)(a1 + 48);
  v3 = (id)v5;
  v10 = v5;
  v4 = v7;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

uint64_t sub_1008B9F48(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t result;

  if (!*(_QWORD *)(a1 + 32))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "identifier"));
    objc_msgSend(*(id *)(a1 + 40), "setStorageID:", v2);

    objc_msgSend(*(id *)(a1 + 64), "_saveToLocalListWithRoute:", *(_QWORD *)(a1 + 40));
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v3, "postNotificationName:object:", CFSTR("MapsSavedRoutesDidUpdateNotification"), *(_QWORD *)(a1 + 40));

  }
  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 32));
  return result;
}

void sub_1008B9FDC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  MSUserRoute *v6;
  id v7;
  NSObject *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  id v13;

  v5 = a3;
  v6 = (MSUserRoute *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "firstObject"));
  if (!v6)
  {
    v7 = sub_1008B8D14();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "storageID"));
      v10 = 138412546;
      v11 = v9;
      v12 = 2112;
      v13 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Requested to save a route data with existing storage ID %@, but no matching user route was found in the MapsSyncStore. Creating a new entry. Error: %@", (uint8_t *)&v10, 0x16u);

    }
    v6 = objc_opt_new(MSUserRoute);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_1008BA258(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void (**v8)(id, id);
  id v9;
  void *v10;
  id v11;
  NSObject *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  void *i;
  void *v19;
  id v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  _QWORD v26[4];
  id v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _QWORD v32[4];
  id v33;
  uint8_t v34[128];
  uint8_t buf[4];
  void *v36;

  v5 = a2;
  v6 = a3;
  v7 = objc_msgSend(v5, "count");
  if (v6 || !v7)
  {
    v8 = (void (**)(id, id))a1[5];
    if (v8)
      v8[2](v8, v6);
  }
  objc_msgSend(a1[6], "_deleteIDFromLocalListWithRoute:", a1[4], v6);
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472;
  v32[2] = sub_1008BA53C;
  v32[3] = &unk_1011DA958;
  v33 = a1[4];
  v9 = sub_10039E080(v5, v32);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  if (!objc_msgSend(v10, "count"))
  {
    v11 = sub_1008B8D14();
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = a1[4];
      *(_DWORD *)buf = 138412290;
      v36 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Error finding saved route with ID %@ for deletion.", buf, 0xCu);
    }

  }
  v25 = v5;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v14 = v10;
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v28, v34, 16);
  if (v15)
  {
    v16 = v15;
    v17 = *(_QWORD *)v29;
    do
    {
      for (i = 0; i != v16; i = (char *)i + 1)
      {
        if (*(_QWORD *)v29 != v17)
          objc_enumerationMutation(v14);
        v19 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)i);
        v20 = sub_1008B8D14();
        v21 = objc_claimAutoreleasedReturnValue(v20);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "customName"));
          *(_DWORD *)buf = 138477827;
          v36 = v22;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Deleting route \"%{private}@\"", buf, 0xCu);

        }
      }
      v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v28, v34, 16);
    }
    while (v16);
  }

  v23 = (void *)objc_claimAutoreleasedReturnValue(+[MapsSyncStore sharedStore](_TtC8MapsSync13MapsSyncStore, "sharedStore"));
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  v26[2] = sub_1008BA57C;
  v26[3] = &unk_1011AE218;
  v27 = a1[5];
  objc_msgSend(v23, "deleteWithObjects:completionHandler:", v14, v26);

}

id sub_1008BA53C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "identifier"));
  v4 = objc_msgSend(v3, "isEqual:", *(_QWORD *)(a1 + 32));

  return v4;
}

void sub_1008BA57C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1008BA60C;
  v6[3] = &unk_1011ACAD0;
  v4 = *(id *)(a1 + 32);
  v7 = v3;
  v8 = v4;
  v5 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);

}

uint64_t sub_1008BA60C(uint64_t a1)
{
  void *v2;
  uint64_t result;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "postNotificationName:object:", CFSTR("MapsSavedRoutesDidUpdateNotification"), 0);

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 32));
  return result;
}

void sub_1008BA9D8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  _QWORD block[4];
  id v14;
  id v15;
  id v16;
  uint8_t buf[4];
  uint64_t v18;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = sub_1008B8D14();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v18 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Error finding saved route with ID %@ for deletion.", buf, 0xCu);
    }

  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1008BAB18;
  block[3] = &unk_1011B5ED8;
  v10 = *(id *)(a1 + 40);
  v15 = v6;
  v16 = v10;
  v14 = v5;
  v11 = v6;
  v12 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

uint64_t sub_1008BAB18(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1008BB828(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "MapsSavedRoutesManager");
  v2 = (void *)qword_1014D37E8;
  qword_1014D37E8 = (uint64_t)v1;

}

void sub_1008BBC08(uint64_t a1)
{
  id v1;
  uint64_t v2;
  void *v3;

  v1 = objc_msgSend(*(id *)(a1 + 32), "registrationWithCellClass:configurationHandler:", objc_opt_class(FeatureDiscoveryOutlineCell), &stru_1011DA9E0);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)qword_1014D37F8;
  qword_1014D37F8 = v2;

}

void sub_1008BBC54(id a1, FeatureDiscoveryOutlineCell *a2, NSIndexPath *a3, MapsUIDiffableDataSourceOutlineNodeSnapshot *a4)
{
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  FeatureDiscoveryOutlineCell *v9;

  v9 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[MapsUIDiffableDataSourceOutlineNodeSnapshot viewModel](a4, "viewModel"));
  v6 = objc_opt_class(FeatureDiscoveryModel);
  if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0)
    v7 = v5;
  else
    v7 = 0;
  v8 = v7;

  -[FeatureDiscoveryOutlineCell setCellModel:](v9, "setCellModel:", v8);
}

void sub_1008BCE50(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSDateComponentsFormatter);
  v2 = (void *)qword_1014D3808;
  qword_1014D3808 = (uint64_t)v1;

  objc_msgSend((id)qword_1014D3808, "setAllowedUnits:", 64);
  objc_msgSend((id)qword_1014D3808, "setUnitsStyle:", 2);
}

void sub_1008BDD4C(id a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_1014D3818;
  qword_1014D3818 = (uint64_t)v1;

  objc_msgSend((id)qword_1014D3818, "setTimeStyle:", 1);
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSLocale autoupdatingCurrentLocale](NSLocale, "autoupdatingCurrentLocale"));
  objc_msgSend((id)qword_1014D3818, "setLocale:", v3);

}

void sub_1008BF248(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_1014D3828;
  qword_1014D3828 = (uint64_t)v1;

}

void sub_1008BF758(id a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_1014D3838;
  qword_1014D3838 = (uint64_t)v1;

  objc_msgSend((id)qword_1014D3838, "setTimeStyle:", 1);
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSLocale autoupdatingCurrentLocale](NSLocale, "autoupdatingCurrentLocale"));
  objc_msgSend((id)qword_1014D3838, "setLocale:", v3);

}

RideBookingAction *sub_1008C0130(uint64_t a1, void *a2)
{
  id v3;
  RideBookingAction *v4;
  void *v5;
  RideBookingAction *v6;

  v3 = a2;
  v4 = [RideBookingAction alloc];
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
  v6 = -[RideBookingAction initWithActivity:application:](v4, "initWithActivity:application:", v3, v5);

  return v6;
}

id sub_1008C0C9C(id a1, INCurrencyAmount *a2, unint64_t a3)
{
  INCurrencyAmount *v3;
  RideBookingCurrencyAmount *v4;
  void *v5;
  void *v6;
  RideBookingCurrencyAmount *v7;

  v3 = a2;
  v4 = [RideBookingCurrencyAmount alloc];
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[INCurrencyAmount amount](v3, "amount"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[INCurrencyAmount currencyCode](v3, "currencyCode"));

  v7 = -[RideBookingCurrencyAmount initWithAmount:currencyCode:](v4, "initWithAmount:currencyCode:", v5, v6);
  return v7;
}

void sub_1008C1878(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  double v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  AutocompleteItem *v17;
  id v18;

  v18 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[AutocompleteMatchInfo matchInfoWithType:](AutocompleteMatchInfo, "matchInfoWithType:", 1));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "historyEntry"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "usageDate"));
  objc_msgSend(v4, "timeIntervalSinceDate:", v6);
  objc_msgSend(v3, "setAgeInSeconds:", (int)v7);

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "query"));
  LODWORD(v5) = objc_msgSend(v8, "_web_hasCaseInsensitivePrefix:", *(_QWORD *)(a1 + 40));

  if ((_DWORD)v5)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 40), "query"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "query"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "matchesInString:", v10));

    objc_msgSend(v11, "fractionOfMatch");
    objc_msgSend(v3, "setFractionOfMatch:");
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "prefixLastTokenMatchCover"));
    objc_msgSend(v3, "setPrefixLastTokenMatchCover:", v12);

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "prefixMatchCover"));
    objc_msgSend(v3, "setPrefixMatchCover:", v13);

    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "prefixMatchPosition"));
    objc_msgSend(v3, "setPrefixMatchPosition:", v14);

    objc_msgSend(v3, "setPrefixMatchesWordBoundary:", objc_msgSend(v11, "prefixMatchesWordBoundary"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "firstPrefixToken"));
    objc_msgSend(v3, "setFirstPrefixToken:", v15);

    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "secondPrefixToken"));
    objc_msgSend(v3, "setSecondPrefixToken:", v16);

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 40), "setMatchInfo:forObject:", v3, *(_QWORD *)(a1 + 32));
    v17 = -[AutocompleteItem initWithLocalCompletion:sourceType:sourceSubtype:matchInfo:]([AutocompleteItem alloc], "initWithLocalCompletion:sourceType:sourceSubtype:matchInfo:", *(_QWORD *)(a1 + 32), 7, 11, v3);
    objc_msgSend(*(id *)(a1 + 56), "addObject:", v17);

  }
}

void sub_1008C1AA4(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  SearchResult *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  void *i;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  double v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  AutocompleteItem *v39;
  void *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[128];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "geoMapItem"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapItem _itemWithGeoMapItem:](MKMapItem, "_itemWithGeoMapItem:", v3));

  v5 = -[SearchResult initWithMapItem:]([SearchResult alloc], "initWithMapItem:", v4);
  v6 = *(void **)(a1 + 32);
  v7 = (void *)objc_claimAutoreleasedReturnValue(-[SearchResult mapItem](v5, "mapItem"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "shortAddressForMapItem:", v7));

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "query"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(-[SearchResult mapItem](v5, "mapItem"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "_geoMapItem"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "_alternateSearchableNames"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", (char *)objc_msgSend(v12, "count") + 1));

  v14 = (void *)objc_claimAutoreleasedReturnValue(-[SearchResult mapItem](v5, "mapItem"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "name"));
  objc_msgSend(v13, "addObject:", v15);

  v16 = (void *)objc_claimAutoreleasedReturnValue(-[SearchResult mapItem](v5, "mapItem"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "_geoMapItem"));
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "_alternateSearchableNames"));
  objc_msgSend(v13, "addObjectsFromArray:", v18);

  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v19 = v13;
  v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v41, v45, 16);
  if (v20)
  {
    v21 = v20;
    v22 = *(_QWORD *)v42;
    while (2)
    {
      for (i = 0; i != v21; i = (char *)i + 1)
      {
        if (*(_QWORD *)v42 != v22)
          objc_enumerationMutation(v19);
        v24 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "matchesInString:", *(_QWORD *)(*((_QWORD *)&v41 + 1)
                                                                                               + 8 * (_QWORD)i)));
        if (v24)
        {
          v25 = (void *)v24;
          v26 = *(void **)(a1 + 32);
          v27 = (void *)objc_claimAutoreleasedReturnValue(-[SearchResult mapItem](v5, "mapItem"));
          v40 = v4;
          v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "name"));
          objc_msgSend(v26, "_removeCompletionItemForStringKey:query:fromCompletions:", v28, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

          objc_msgSend(*(id *)(a1 + 32), "_removeCompletionItemForStringKey:query:fromCompletions:", v8, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
          v29 = (void *)objc_claimAutoreleasedReturnValue(+[AutocompleteMatchInfo matchInfoWithType:](AutocompleteMatchInfo, "matchInfoWithType:", 1));
          v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
          v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "historyEntry"));
          v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "usageDate"));
          objc_msgSend(v30, "timeIntervalSinceDate:", v32);
          objc_msgSend(v29, "setAgeInSeconds:", (int)v33);

          v4 = v40;
          objc_msgSend(v25, "fractionOfMatch");
          objc_msgSend(v29, "setFractionOfMatch:");
          v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "prefixLastTokenMatchCover"));
          objc_msgSend(v29, "setPrefixLastTokenMatchCover:", v34);

          v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "prefixMatchCover"));
          objc_msgSend(v29, "setPrefixMatchCover:", v35);

          v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "prefixMatchPosition"));
          objc_msgSend(v29, "setPrefixMatchPosition:", v36);

          objc_msgSend(v29, "setPrefixMatchesWordBoundary:", objc_msgSend(v25, "prefixMatchesWordBoundary"));
          v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "firstPrefixToken"));
          objc_msgSend(v29, "setFirstPrefixToken:", v37);

          v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "secondPrefixToken"));
          objc_msgSend(v29, "setSecondPrefixToken:", v38);

          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "setMatchInfo:forObject:", v29, *(_QWORD *)(a1 + 56));
          v39 = -[AutocompleteItem initWithLocalCompletion:sourceType:sourceSubtype:matchInfo:]([AutocompleteItem alloc], "initWithLocalCompletion:sourceType:sourceSubtype:matchInfo:", *(_QWORD *)(a1 + 56), 7, 10, v29);
          objc_msgSend(*(id *)(a1 + 64), "addObject:", v39);

          goto LABEL_11;
        }
      }
      v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v41, v45, 16);
      if (v21)
        continue;
      break;
    }
  }
LABEL_11:

}

unint64_t sub_1008C1EF0(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  unint64_t v8;

  v3 = a2;
  v4 = sub_1008C217C(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = sub_1008C217C(v3);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

  if (v7)
    v8 = (unint64_t)objc_msgSend(v5, "caseInsensitiveCompare:", v7);
  else
    v8 = v5 == 0;

  return v8;
}

id sub_1008C217C(void *a1)
{
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "autocompleteObject"));
  v2 = objc_opt_class(NSString);
  if ((objc_opt_isKindOfClass(v1, v2) & 1) == 0)
  {
    v4 = objc_opt_class(SearchResult);
    if ((objc_opt_isKindOfClass(v1, v4) & 1) != 0)
    {
      v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "title"));
      goto LABEL_5;
    }
    if (!+[AddressBookManager addressBookAllowed](AddressBookManager, "addressBookAllowed")
      || ((v7 = objc_opt_class(AddressBookAddress),
           v8 = v1,
           (objc_opt_isKindOfClass(v8, v7) & 1) == 0)
        ? (v9 = 0)
        : (v9 = v8),
          v10 = v9,
          v8,
          !v10))
    {
      v5 = 0;
      goto LABEL_6;
    }
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "contact"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[CNContactsUserDefaults sharedDefaults](CNContactsUserDefaults, "sharedDefaults"));
    v13 = objc_msgSend(v12, "sortOrder");

    if (v13 == (id)3)
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "familyName"));
      v5 = v14;
      if (v14 && objc_msgSend(v14, "length"))
        goto LABEL_17;

    }
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "givenName"));
LABEL_17:

    goto LABEL_6;
  }
  v3 = v1;
LABEL_5:
  v5 = v3;
LABEL_6:

  return v5;
}

void sub_1008C2310(id a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v1 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localizedStringForKey:value:table:", CFSTR(" · [List view details separator]"), CFSTR("localized string not found"), 0));
  v2 = (void *)qword_1014D3850;
  qword_1014D3850 = v1;

}

void sub_1008C24FC(id a1, double a2, id a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = (id)objc_claimAutoreleasedReturnValue(+[UIImage imageNamed:](UIImage, "imageNamed:", CFSTR("search")));
  (*((void (**)(id, id, _QWORD))a3 + 2))(v4, v5, 0);

}

void sub_1008C2610(id a1, double a2, id a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = (id)objc_claimAutoreleasedReturnValue(+[UIImage imageNamed:](UIImage, "imageNamed:", CFSTR("RAPHomeWorkAddMissing")));
  (*((void (**)(id, id, _QWORD))a3 + 2))(v4, v5, 0);

}

void sub_1008C2858(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id *v6;
  _QWORD *v7;
  _QWORD v8[4];
  id v9;
  _QWORD v10[4];
  id v11;
  _QWORD v12[4];
  id v13;
  _QWORD v14[4];
  id v15;

  v3 = a2;
  switch(objc_msgSend(*(id *)(a1 + 32), "addressType"))
  {
    case 0u:
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[MapsUIImageCache sharedCache](MapsUIImageCache, "sharedCache"));
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contact"));
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_1008C2ABC;
      v8[3] = &unk_1011ACBF8;
      v6 = &v9;
      v9 = v3;
      objc_msgSend(v4, "getImageForContact:completion:", v5, v8);
      goto LABEL_7;
    case 1u:
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[MapsUIImageCache sharedCache](MapsUIImageCache, "sharedCache"));
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[GEOFeatureStyleAttributes homeStyleAttributes](GEOFeatureStyleAttributes, "homeStyleAttributes"));
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_1008C2A8C;
      v14[3] = &unk_1011ACBF8;
      v6 = &v15;
      v15 = v3;
      v7 = v14;
      goto LABEL_6;
    case 2u:
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[MapsUIImageCache sharedCache](MapsUIImageCache, "sharedCache"));
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[GEOFeatureStyleAttributes workStyleAttributes](GEOFeatureStyleAttributes, "workStyleAttributes"));
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_1008C2A9C;
      v12[3] = &unk_1011ACBF8;
      v6 = &v13;
      v13 = v3;
      v7 = v12;
      goto LABEL_6;
    case 3u:
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[MapsUIImageCache sharedCache](MapsUIImageCache, "sharedCache"));
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[GEOFeatureStyleAttributes schoolStyleAttributes](GEOFeatureStyleAttributes, "schoolStyleAttributes"));
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_1008C2AAC;
      v10[3] = &unk_1011ACBF8;
      v6 = &v11;
      v11 = v3;
      v7 = v10;
LABEL_6:
      objc_msgSend(v4, "getImageForStyleAttributes:completion:", v5, v7);
LABEL_7:

      break;
    default:
      break;
  }

}

uint64_t sub_1008C2A8C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1008C2A9C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1008C2AAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1008C2ABC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

SearchResultMapItem *sub_1008C2ACC(uint64_t a1)
{
  SearchResult *v1;
  SearchResultMapItem *v2;

  v1 = -[SearchResult initWithMapItem:searchResultType:addressBookAddress:retainedSearchMetadata:resultIndex:]([SearchResult alloc], "initWithMapItem:searchResultType:addressBookAddress:retainedSearchMetadata:resultIndex:", *(_QWORD *)(a1 + 32), 0, *(_QWORD *)(a1 + 40), 0, 0);
  v2 = -[SearchResultMapItemBase initWithSearchResult:]([SearchResultMapItem alloc], "initWithSearchResult:", v1);

  return v2;
}

void sub_1008C2D80(uint64_t a1, void *a2)
{
  void (**v3)(id, void *, uint64_t);
  void *v4;
  ImageIconWithBackgroundConfiguration *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v11[4];
  void (**v12)(id, void *, uint64_t);

  v3 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "isDynamicCurrentLocation"))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage systemImageNamed:](UIImage, "systemImageNamed:", CFSTR("location.fill")));
    v5 = objc_alloc_init(ImageIconWithBackgroundConfiguration);
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor secondarySystemFillColor](UIColor, "secondarySystemFillColor"));
    -[ImageIconWithBackgroundConfiguration setBackgroundColor:](v5, "setBackgroundColor:", v6);

    v7 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemBlueColor](UIColor, "systemBlueColor"));
    -[ImageIconWithBackgroundConfiguration setTintColor:](v5, "setTintColor:", v7);

    -[ImageIconWithBackgroundConfiguration setIconSize:](v5, "setIconSize:", 30.0, 30.0);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "_maps_imageIconWithBackgroundConfiguration:", v5));
    v3[2](v3, v8, 1);

  }
  else
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[MapsUIImageCache sharedCache](MapsUIImageCache, "sharedCache"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[GEOFeatureStyleAttributes markerStyleAttributes](GEOFeatureStyleAttributes, "markerStyleAttributes"));
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1008C2F00;
    v11[3] = &unk_1011ACBF8;
    v12 = v3;
    objc_msgSend(v9, "getImageForStyleAttributes:completion:", v10, v11);

  }
}

uint64_t sub_1008C2F00(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

SearchResultMapItem *sub_1008C2F10(uint64_t a1)
{
  return -[SearchResultMapItemBase initWithSearchResult:]([SearchResultMapItem alloc], "initWithSearchResult:", *(_QWORD *)(a1 + 32));
}

id sub_1008C3208(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("NEAR_AUTOCOMPLETE_ROW"), CFSTR("localized string not found"), 0));

    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", v3, v1));
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void sub_1008C32A8(uint64_t a1, void *a2)
{
  id v3;
  unsigned int v4;
  void *v5;
  void *v6;
  void *v7;
  id *v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  _QWORD v13[4];
  id v14;

  v3 = a2;
  v4 = objc_msgSend(*(id *)(a1 + 32), "isDynamicCurrentLocation");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[MapsUIImageCache sharedCache](MapsUIImageCache, "sharedCache"));
  if (v4)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[AddressBookManager sharedManager](AddressBookManager, "sharedManager"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "meCard"));
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1008C33F0;
    v13[3] = &unk_1011ACBF8;
    v8 = &v14;
    v14 = v3;
    v9 = v3;
    objc_msgSend(v5, "getImageForContact:completion:", v7, v13);

  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[GEOFeatureStyleAttributes markerStyleAttributes](GEOFeatureStyleAttributes, "markerStyleAttributes"));
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1008C3400;
    v11[3] = &unk_1011ACBF8;
    v8 = &v12;
    v12 = v3;
    v10 = v3;
    objc_msgSend(v5, "getImageForStyleAttributes:completion:", v6, v11);
  }

}

uint64_t sub_1008C33F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1008C3400(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

SearchResultMapItem *sub_1008C3410(uint64_t a1)
{
  return -[SearchResultMapItemBase initWithSearchResult:]([SearchResultMapItem alloc], "initWithSearchResult:", *(_QWORD *)(a1 + 32));
}

void sub_1008C3658(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  void *v5;
  uint64_t v6;
  id *v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  _QWORD v12[4];
  id v13;

  v3 = a2;
  v4 = *(unsigned __int8 *)(a1 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[MapsUIImageCache sharedCache](MapsUIImageCache, "sharedCache"));
  v6 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1008C3750;
    v12[3] = &unk_1011ACBF8;
    v7 = &v13;
    v13 = v3;
    v8 = v3;
    objc_msgSend(v5, "getImageForInvertedStyleAttributes:completion:", v6, v12);
  }
  else
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1008C3760;
    v10[3] = &unk_1011ACBF8;
    v7 = &v11;
    v11 = v3;
    v9 = v3;
    objc_msgSend(v5, "getImageForStyleAttributes:completion:", v6, v10);
  }

}

uint64_t sub_1008C3750(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1008C3760(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1008C3960(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MapsUIImageCache sharedCache](MapsUIImageCache, "sharedCache"));
  v5 = *(_QWORD *)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1008C3A04;
  v7[3] = &unk_1011ACBF8;
  v8 = v3;
  v6 = v3;
  objc_msgSend(v4, "getImageForSuggestion:completion:", v5, v7);

}

uint64_t sub_1008C3A04(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

SuggestionsItem *sub_1008C3A14(uint64_t a1)
{
  return -[SuggestionsItem initWithSuggestion:order:sourceType:sourceSubtype:hasPriorityOverride:priorityOverride:]([SuggestionsItem alloc], "initWithSuggestion:order:sourceType:sourceSubtype:hasPriorityOverride:priorityOverride:", *(_QWORD *)(a1 + 32), 0, 9, 0, 0, 0);
}

void sub_1008C3C20(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MapsUIImageCache sharedCache](MapsUIImageCache, "sharedCache"));
  v5 = *(_QWORD *)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1008C3CC8;
  v7[3] = &unk_1011ACBF8;
  v8 = v3;
  v6 = v3;
  objc_msgSend(v4, "getImageForRowFavorite:inverted:completion:", v5, 0, v7);

}

uint64_t sub_1008C3CC8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1008C3DC8(uint64_t a1, void *a2)
{
  void *v3;
  void (**v4)(_QWORD);
  id v5;
  void *v6;
  uint64_t v7;
  id v8;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = objc_msgSend(v3, "handlerType");
  v6 = *(void **)(a1 + 32);
  if (v5 == (id)4)
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "badgeImage"));
  else
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "image"));
  v8 = (id)v7;
  v4[2](v4);

}

void sub_1008C3FDC(uint64_t a1, void *a2, double a3)
{
  id v5;
  dispatch_queue_global_t global_queue;
  NSObject *v7;
  id v8;
  id v9;
  _QWORD block[4];
  id v11;
  id v12;
  double v13;

  v5 = a2;
  global_queue = dispatch_get_global_queue(21, 0);
  v7 = objc_claimAutoreleasedReturnValue(global_queue);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1008C4098;
  block[3] = &unk_1011B2188;
  v8 = *(id *)(a1 + 32);
  v13 = a3;
  v11 = v8;
  v12 = v5;
  v9 = v5;
  dispatch_async(v7, block);

}

void sub_1008C4098(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "system"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "artwork"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage _mapkit_transitArtworkImageWithDataSource:size:scale:](UIImage, "_mapkit_transitArtworkImageWithDataSource:size:scale:", v3, 6, *(double *)(a1 + 48)));

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1008C4170;
  v7[3] = &unk_1011ACAD0;
  v5 = *(id *)(a1 + 40);
  v8 = v4;
  v9 = v5;
  v6 = v4;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v7);

}

uint64_t sub_1008C4170(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

void sub_1008C43BC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MapsUIImageCache sharedCache](MapsUIImageCache, "sharedCache"));
  v5 = *(_QWORD *)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1008C4460;
  v7[3] = &unk_1011ACBF8;
  v8 = v3;
  v6 = v3;
  objc_msgSend(v4, "getImageForMapItem:completion:", v5, v7);

}

uint64_t sub_1008C4460(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1008C4540(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MapsUIImageCache sharedCache](MapsUIImageCache, "sharedCache"));
  v5 = *(_QWORD *)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1008C45E4;
  v7[3] = &unk_1011ACBF8;
  v8 = v3;
  v6 = v3;
  objc_msgSend(v4, "getImageForMapItem:completion:", v5, v7);

}

uint64_t sub_1008C45E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1008C4924(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MapsUIImageCache sharedCache](MapsUIImageCache, "sharedCache"));
  v5 = *(_QWORD *)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1008C49C8;
  v7[3] = &unk_1011ACBF8;
  v8 = v3;
  v6 = v3;
  objc_msgSend(v4, "getImageForStyleAttributes:completion:", v5, v7);

}

uint64_t sub_1008C49C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1008C4A5C(id a1, double a2, id a3)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v3 = a3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MapsUIImageCache sharedCache](MapsUIImageCache, "sharedCache"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[GEOFeatureStyleAttributes parkedCarStyleAttributes](GEOFeatureStyleAttributes, "parkedCarStyleAttributes"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1008C4B10;
  v7[3] = &unk_1011ACBF8;
  v8 = v3;
  v6 = v3;
  objc_msgSend(v4, "getImageForStyleAttributes:completion:", v5, v7);

}

uint64_t sub_1008C4B10(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1008C5494(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD v19[4];
  id v20;
  _QWORD v21[4];
  id v22;
  _QWORD v23[4];
  id v24;
  _QWORD v25[4];
  id v26;

  v3 = a2;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    (*((void (**)(id, uint64_t, _QWORD))v3 + 2))(v3, v5, 0);
  }
  else
  {
    if (!*(_QWORD *)(a1 + 40))
    {
      if (*(_QWORD *)(a1 + 56))
      {
        v8 = (void *)objc_claimAutoreleasedReturnValue(+[MapsUIImageCache sharedCache](MapsUIImageCache, "sharedCache"));
        v9 = *(_QWORD *)(a1 + 56);
        v23[0] = _NSConcreteStackBlock;
        v23[1] = 3221225472;
        v23[2] = sub_1008C5728;
        v23[3] = &unk_1011ACBF8;
        v24 = v4;
        objc_msgSend(v8, "getImageForStyleAttributes:completion:", v9, v23);

        v10 = v24;
      }
      else if (*(_QWORD *)(a1 + 64))
      {
        v11 = (void *)objc_claimAutoreleasedReturnValue(+[MapsUIImageCache sharedCache](MapsUIImageCache, "sharedCache"));
        v12 = *(_QWORD *)(a1 + 64);
        v21[0] = _NSConcreteStackBlock;
        v21[1] = 3221225472;
        v21[2] = sub_1008C5738;
        v21[3] = &unk_1011ACBF8;
        v22 = v4;
        objc_msgSend(v11, "getImageForContact:completion:", v12, v21);

        v10 = v22;
      }
      else
      {
        if (objc_msgSend(*(id *)(a1 + 48), "_type") != (id)4)
          goto LABEL_15;
        v13 = *(void **)(a1 + 72);
        if (v13)
        {
          v14 = objc_msgSend(v13, "unsignedIntValue");
        }
        else
        {
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "collectionResult"));
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "collection"));
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "publisherAttribution"));
          v14 = objc_msgSend(v17, "iconIdentifier");

        }
        v18 = (void *)objc_claimAutoreleasedReturnValue(+[MapsUIImageCache sharedCache](MapsUIImageCache, "sharedCache"));
        v19[0] = _NSConcreteStackBlock;
        v19[1] = 3221225472;
        v19[2] = sub_1008C57B0;
        v19[3] = &unk_1011ACBF8;
        v20 = v4;
        objc_msgSend(v18, "getImageForPublisherWithIconIdentifier:completion:", v14, v19);

        v10 = v20;
      }

      goto LABEL_15;
    }
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "category"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[MapsUIImageCache sharedCache](MapsUIImageCache, "sharedCache"));
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_1008C5718;
    v25[3] = &unk_1011ACBF8;
    v26 = v4;
    objc_msgSend(v7, "getImageForCategory:completion:", v6, v25);

  }
LABEL_15:

}

uint64_t sub_1008C5718(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1008C5728(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1008C5738(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 32);
  if (a2)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 16))(*(_QWORD *)(a1 + 32), a2, 1);
  }
  else
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(+[UIImage imageNamed:](UIImage, "imageNamed:", CFSTR("my_location_cell_icon")));
    (*(void (**)(uint64_t, id, uint64_t))(v2 + 16))(v2, v3, 1);

  }
}

void sub_1008C57B0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;

  v3 = a2;
  v6 = v3;
  if (v3)
    v4 = v3;
  else
    v4 = (id)objc_claimAutoreleasedReturnValue(+[UIImage imageNamed:](UIImage, "imageNamed:", CFSTR("Fallback-Guide")));
  v5 = v4;
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

SearchResultMapItem *sub_1008C5820(uint64_t a1)
{
  SearchResult *v1;
  SearchResultMapItem *v2;

  v1 = -[SearchResult initWithMapItem:syncIdentifier:]([SearchResult alloc], "initWithMapItem:syncIdentifier:", *(_QWORD *)(a1 + 32), 0);
  v2 = -[SearchResultMapItemBase initWithSearchResult:]([SearchResultMapItem alloc], "initWithSearchResult:", v1);

  return v2;
}

void sub_1008C5A04(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  _QWORD v11[4];
  id v12;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "iconStyleAttributes"));

  if (v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[MapsUIImageCache sharedCache](MapsUIImageCache, "sharedCache"));
    v6 = objc_alloc((Class)GEOFeatureStyleAttributes);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "iconStyleAttributes"));
    v8 = objc_msgSend(v6, "initWithGEOStyleAttributes:", v7);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1008C5B2C;
    v11[3] = &unk_1011ACBF8;
    v12 = v3;
    objc_msgSend(v5, "getImageForStyleAttributes:completion:", v8, v11);

  }
  else
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[MapsUIImageCache sharedCache](MapsUIImageCache, "sharedCache"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "searchImage"));
    (*((void (**)(id, void *, _QWORD))v3 + 2))(v3, v10, 0);

  }
}

uint64_t sub_1008C5B2C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1008C5E60(uint64_t a1, void *a2)
{
  void (**v3)(id, uint64_t, _QWORD);
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v8[4];
  void (**v9)(id, uint64_t, _QWORD);

  v3 = a2;
  if (*(_BYTE *)(a1 + 40)
    && (v4 = objc_claimAutoreleasedReturnValue(+[AutocompleteClientSource autocompleteClientSourceAppIconWithType:](AutocompleteClientSource, "autocompleteClientSourceAppIconWithType:", *(_QWORD *)(a1 + 32)))) != 0)
  {
    v5 = (void *)v4;
    v3[2](v3, v4, 0);
  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[MapsUIImageCache sharedCache](MapsUIImageCache, "sharedCache"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[GEOFeatureStyleAttributes markerStyleAttributes](GEOFeatureStyleAttributes, "markerStyleAttributes"));
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1008C5F50;
    v8[3] = &unk_1011ACBF8;
    v9 = v3;
    objc_msgSend(v6, "getImageForStyleAttributes:completion:", v7, v8);

    v5 = v9;
  }

}

uint64_t sub_1008C5F50(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1008C66F8(id a1, double a2, id a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = (id)objc_claimAutoreleasedReturnValue(+[UIImage imageNamed:](UIImage, "imageNamed:", CFSTR("recentroute")));
  (*((void (**)(id, id, _QWORD))a3 + 2))(v4, v5, 0);

}

void sub_1008C6AB0(id a1, double a2, id a3)
{
  void (**v4)(id, id, _QWORD);
  void *v5;
  id v6;

  v4 = (void (**)(id, id, _QWORD))a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[GEOFeatureStyleAttributes customSavedRouteStyleAttributes](GEOFeatureStyleAttributes, "customSavedRouteStyleAttributes"));
  v6 = (id)objc_claimAutoreleasedReturnValue(+[MKIconManager imageForStyle:size:forScale:format:](MKIconManager, "imageForStyle:size:forScale:format:", v5, 3, 0, a2));

  v4[2](v4, v6, 0);
}

void sub_1008C6F30(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MapsUIImageCache sharedCache](MapsUIImageCache, "sharedCache"));
  v5 = *(_QWORD *)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1008C6FD4;
  v7[3] = &unk_1011ACBF8;
  v8 = v3;
  v6 = v3;
  objc_msgSend(v4, "getImageForMapItem:completion:", v5, v7);

}

uint64_t sub_1008C6FD4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

SearchResultMapItem *sub_1008C6FE4(uint64_t a1)
{
  SearchResult *v1;
  SearchResultMapItem *v2;

  v1 = -[SearchResult initWithGEOMapItem:]([SearchResult alloc], "initWithGEOMapItem:", *(_QWORD *)(a1 + 32));
  v2 = -[SearchResultMapItemBase initWithSearchResult:]([SearchResultMapItem alloc], "initWithSearchResult:", v1);

  return v2;
}

void sub_1008C71C4(id a1, double a2, id a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = (id)objc_claimAutoreleasedReturnValue(+[UIImage imageNamed:](UIImage, "imageNamed:", CFSTR("search")));
  (*((void (**)(id, id, _QWORD))a3 + 2))(v4, v5, 0);

}

void sub_1008C74D0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "publisherAttribution"));
  v5 = objc_msgSend(v4, "iconIdentifier");

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[MapsUIImageCache sharedCache](MapsUIImageCache, "sharedCache"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1008C758C;
  v8[3] = &unk_1011ACBF8;
  v9 = v3;
  v7 = v3;
  objc_msgSend(v6, "getImageForPublisherWithIconIdentifier:completion:", v5, v8);

}

void sub_1008C758C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;

  v3 = a2;
  v6 = v3;
  if (v3)
    v4 = v3;
  else
    v4 = (id)objc_claimAutoreleasedReturnValue(+[UIImage imageNamed:](UIImage, "imageNamed:", CFSTR("Fallback-Guide")));
  v5 = v4;
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_1008C76CC(uint64_t a1, void *a2)
{
  void (**v3)(id, void *, _QWORD);
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  unsigned int v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  const __CFString *v17;
  _QWORD v18[4];
  void (**v19)(id, void *, _QWORD);

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sharedTrips"));
  v5 = objc_msgSend(v4, "count");

  if (v5 != (id)1)
  {
    v17 = CFSTR("MultiSharedTrip");
LABEL_6:
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage imageNamed:](UIImage, "imageNamed:", v17));
    v3[2](v3, v15, 0);
    goto LABEL_7;
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sharedTrips"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "firstObject"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "senderInfo"));
  v9 = objc_msgSend(v8, "hasLocalContactIdentifier");

  if (!v9)
  {
    v17 = CFSTR("SharedTrip");
    goto LABEL_6;
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[AddressBookManager sharedManager](AddressBookManager, "sharedManager"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sharedTrips"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "firstObject"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "senderInfo"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "localContactIdentifier"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "contactForCNContactIdentifier:", v14));

  v16 = (void *)objc_claimAutoreleasedReturnValue(+[MapsUIImageCache sharedCache](MapsUIImageCache, "sharedCache"));
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_1008C7898;
  v18[3] = &unk_1011ACBF8;
  v19 = v3;
  objc_msgSend(v16, "getImageForContact:completion:", v15, v18);

LABEL_7:
}

void sub_1008C7898(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 32);
  if (a2)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 16))(*(_QWORD *)(a1 + 32), a2, 1);
  }
  else
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(+[UIImage imageNamed:](UIImage, "imageNamed:", CFSTR("SharedTrip")));
    (*(void (**)(uint64_t, id, uint64_t))(v2 + 16))(v2, v3, 1);

  }
}

void sub_1008C7A4C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned int v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v11[4];
  id v12;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "senderInfo"));
  v5 = objc_msgSend(v4, "hasLocalContactIdentifier");

  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[AddressBookManager sharedManager](AddressBookManager, "sharedManager"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "senderInfo"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "localContactIdentifier"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "contactForCNContactIdentifier:", v8));

    v10 = (void *)objc_claimAutoreleasedReturnValue(+[MapsUIImageCache sharedCache](MapsUIImageCache, "sharedCache"));
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1008C7B98;
    v11[3] = &unk_1011ACBF8;
    v12 = v3;
    objc_msgSend(v10, "getImageForContact:completion:", v9, v11);

  }
  else
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage imageNamed:](UIImage, "imageNamed:", CFSTR("SharedTrip")));
    (*((void (**)(id, void *, _QWORD))v3 + 2))(v3, v9, 0);
  }

}

void sub_1008C7B98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 32);
  if (a2)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 16))(*(_QWORD *)(a1 + 32), a2, 1);
  }
  else
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(+[UIImage imageNamed:](UIImage, "imageNamed:", CFSTR("SharedTrip")));
    (*(void (**)(uint64_t, id, uint64_t))(v2 + 16))(v2, v3, 1);

  }
}

void sub_1008C7DA8(id a1, double a2, id a3)
{
  id v4;
  void *v5;
  id v6;

  v4 = a3;
  v6 = (id)objc_claimAutoreleasedReturnValue(+[UIImage imageNamed:](UIImage, "imageNamed:", CFSTR("RAPLookAround")));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "imageWithRenderingMode:", 2));
  (*((void (**)(id, void *, _QWORD))a3 + 2))(v4, v5, 0);

}

void sub_1008C8040(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MapsUIImageCache sharedCache](MapsUIImageCache, "sharedCache"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "publisherAttribution"));
  v6 = objc_msgSend(v5, "iconIdentifier");
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1008C80FC;
  v8[3] = &unk_1011ACBF8;
  v9 = v3;
  v7 = v3;
  objc_msgSend(v4, "getImageForPublisherWithIconIdentifier:completion:", v6, v8);

}

uint64_t sub_1008C80FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1008C82E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 176), 8);
  _Block_object_dispose((const void *)(v35 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1008C8328(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1008C8338(uint64_t a1)
{

}

void sub_1008C8340(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "query"));
  v5 = *(_QWORD *)(a1[4] + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "locationDisplayString"));
  v8 = *(_QWORD *)(a1[5] + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

  v10 = objc_claimAutoreleasedReturnValue(+[UIImage imageNamed:](UIImage, "imageNamed:", CFSTR("search")));
  v11 = *(_QWORD *)(a1[6] + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = v10;

}

void sub_1008C83D8(_QWORD *a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;

  v21 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "geoMapItem"));
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "name"));
  v5 = *(_QWORD *)(a1[4] + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "geoMapItem"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "addressObject"));

  v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "cityDisplayNameWithFallback:", 0));
  v10 = *(_QWORD *)(a1[5] + 8);
  v11 = *(void **)(v10 + 40);
  *(_QWORD *)(v10 + 40) = v9;

  if (!objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "length")
    || objc_msgSend(*(id *)(*(_QWORD *)(a1[4] + 8) + 40), "length")
    && objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "isEqualToString:", *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 40)))
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "address"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "structuredAddress"));
    v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "country"));
    v15 = *(_QWORD *)(a1[5] + 8);
    v16 = *(void **)(v15 + 40);
    *(_QWORD *)(v15 + 40) = v14;

  }
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "geoMapItem"));
  v18 = objc_claimAutoreleasedReturnValue(+[MKMapItem _itemWithGeoMapItem:](MKMapItem, "_itemWithGeoMapItem:", v17));
  v19 = *(_QWORD *)(a1[6] + 8);
  v20 = *(void **)(v19 + 40);
  *(_QWORD *)(v19 + 40) = v18;

}

void sub_1008C8548(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _QWORD v8[4];
  id v9;

  v3 = a2;
  v4 = v3;
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  if (v5)
  {
    (*((void (**)(id, uint64_t, _QWORD))v3 + 2))(v3, v5, 0);
  }
  else if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[MapsUIImageCache sharedCache](MapsUIImageCache, "sharedCache"));
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1008C8624;
    v8[3] = &unk_1011ACBF8;
    v9 = v4;
    objc_msgSend(v6, "getImageForMapItem:completion:", v7, v8);

  }
}

uint64_t sub_1008C8624(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1008C8C34(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MapsUIImageCache sharedCache](MapsUIImageCache, "sharedCache"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapItem"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1008C8CE8;
  v7[3] = &unk_1011ACBF8;
  v8 = v3;
  v6 = v3;
  objc_msgSend(v4, "getImageForMapItem:completion:", v5, v7);

}

uint64_t sub_1008C8CE8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1008C9018(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  const __CFString *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD v17[4];
  id v18;
  _QWORD v19[4];
  id v20;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapItem"));

  if (v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[MapsUIImageCache sharedCache](MapsUIImageCache, "sharedCache"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapItem"));
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_1008C92AC;
    v19[3] = &unk_1011ACBF8;
    v20 = v3;
    objc_msgSend(v5, "getImageForMapItem:completion:", v6, v19);

    v7 = v20;
LABEL_5:

  }
  else
  {
    switch(objc_msgSend(*(id *)(a1 + 32), "reportType"))
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 0xAu:
      case 0xBu:
      case 0xDu:
      case 0xEu:
      case 0x10u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
        v8 = (void *)objc_claimAutoreleasedReturnValue(+[MapsUIImageCache sharedCache](MapsUIImageCache, "sharedCache"));
        v9 = (void *)objc_claimAutoreleasedReturnValue(+[GEOFeatureStyleAttributes markerStyleAttributes](GEOFeatureStyleAttributes, "markerStyleAttributes"));
        v17[0] = _NSConcreteStackBlock;
        v17[1] = 3221225472;
        v17[2] = sub_1008C92BC;
        v17[3] = &unk_1011ACBF8;
        v18 = v3;
        objc_msgSend(v8, "getImageForStyleAttributes:completion:", v9, v17);

        v7 = v18;
        goto LABEL_5;
      case 8u:
        v10 = objc_claimAutoreleasedReturnValue(+[UIImage imageNamed:](UIImage, "imageNamed:", CFSTR("recentroute")));
        goto LABEL_13;
      case 9u:
        v11 = CFSTR("binoculars.fill");
        goto LABEL_12;
      case 0xCu:
        v12 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage imageNamed:](UIImage, "imageNamed:", CFSTR("Fallback-Guide")));
        (*((void (**)(id, void *, uint64_t))v3 + 2))(v3, v12, 1);
        goto LABEL_14;
      case 0xFu:
        v13 = *(void **)(a1 + 40);
        v14 = (void *)objc_claimAutoreleasedReturnValue(+[UIImageSymbolConfiguration configurationWithPointSize:](UIImageSymbolConfiguration, "configurationWithPointSize:", 15.0));
        v15 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage _systemImageNamed:withConfiguration:](UIImage, "_systemImageNamed:withConfiguration:", CFSTR("pin.point.of.interest.badge.plus.fill"), v14));
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "_convertSymbolToIconImage:RAPType:", v15, objc_msgSend(*(id *)(a1 + 32), "reportType")));
        (*((void (**)(id, void *, uint64_t))v3 + 2))(v3, v16, 1);

        break;
      case 0x11u:
        v11 = CFSTR("signpost.right.fill");
LABEL_12:
        v10 = objc_claimAutoreleasedReturnValue(+[UIImage systemImageNamed:](UIImage, "systemImageNamed:", v11));
LABEL_13:
        v12 = (void *)v10;
        (*((void (**)(id, uint64_t, _QWORD))v3 + 2))(v3, v10, 0);
LABEL_14:

        break;
      default:
        break;
    }
  }

}

uint64_t sub_1008C92AC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1008C92BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1008C9714(id a1, double a2, id a3)
{
  id v4;
  void *v5;
  id v6;

  v4 = a3;
  v6 = (id)objc_claimAutoreleasedReturnValue(+[UserInformationManager sharedInstance](UserInformationManager, "sharedInstance"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "userIcon"));
  (*((void (**)(id, void *, _QWORD))a3 + 2))(v4, v5, 0);

}

_QWORD *sub_1008C9984(void *a1)
{
  id v1;
  _QWORD *v2;
  _QWORD v4[4];
  id v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1008CD3FC;
  v4[3] = &unk_1011DAF88;
  v5 = a1;
  v1 = v5;
  v2 = objc_retainBlock(v4);

  return v2;
}

void sub_1008C99FC(void *a1, void *a2)
{
  id v3;
  int64_t v4;
  double v5;
  double v6;
  void *v7;
  id v8;

  v3 = a2;
  v8 = a1;
  objc_msgSend(v8, "setImageStyle:", 1);
  v4 = +[MapsOfflineUIHelper idealDisplayAspectRatio:](MapsOfflineUIHelper, "idealDisplayAspectRatio:", v3);

  v5 = 53.0;
  v6 = 40.0;
  if (v4 == 2)
    v6 = 30.0;
  if (v4 != 1)
    v5 = v6;
  objc_msgSend(v8, "setImageSize:", 40.0, v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor _mapkit_colorNamed:](UIColor, "_mapkit_colorNamed:", CFSTR("CartographyBackgroundColor")));
  objc_msgSend(v8, "setLeadingImageBackgroundColor:", v7);

  objc_msgSend(v8, "setImageShadowStyle:", 1);
}

uint64_t sub_1008C9D70(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_1008C9FD8(uint64_t a1, void *a2, double a3)
{
  id v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, _QWORD *, double);
  id v8;
  uint64_t v9;
  void *v10;
  _QWORD v12[4];
  id v13;

  v5 = a2;
  v6 = *(_QWORD *)(a1 + 32);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1008CA07C;
  v12[3] = &unk_1011DAEA0;
  v13 = v5;
  v7 = *(uint64_t (**)(uint64_t, _QWORD *, double))(v6 + 16);
  v8 = v5;
  v9 = v7(v6, v12, a3);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

  return v10;
}

void sub_1008CA07C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  _QWORD v21[4];
  id v22;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_1008CA284;
    v21[3] = &unk_1011DAE78;
    v5 = v3;
    v22 = v5;
    v6 = objc_retainBlock(v21);
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[UITraitCollection traitCollectionWithUserInterfaceStyle:](UITraitCollection, "traitCollectionWithUserInterfaceStyle:", 1));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[UITraitCollection traitCollectionWithUserInterfaceStyle:](UITraitCollection, "traitCollectionWithUserInterfaceStyle:", 2));
    v9 = objc_alloc((Class)UIGraphicsImageRenderer);
    objc_msgSend(v5, "size");
    v10 = objc_msgSend(v9, "initWithSize:");
    v11 = ((uint64_t (*)(_QWORD *, void *))v6[2])(v6, v7);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "imageWithActions:", v12));

    v14 = objc_alloc((Class)UIGraphicsImageRenderer);
    objc_msgSend(v5, "size");
    v15 = objc_msgSend(v14, "initWithSize:");
    v16 = ((uint64_t (*)(_QWORD *, void *))v6[2])(v6, v8);
    v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "imageWithActions:", v17));

    v19 = objc_alloc_init((Class)UIImageAsset);
    objc_msgSend(v19, "registerImage:withTraitCollection:", v13, v7);
    objc_msgSend(v19, "registerImage:withTraitCollection:", v18, v8);
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "imageWithTraitCollection:", v7));
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

_QWORD *sub_1008CA284(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD *v5;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1008CA314;
  v7[3] = &unk_1011DAE50;
  v8 = *(id *)(a1 + 32);
  v9 = v3;
  v4 = v3;
  v5 = objc_retainBlock(v7);

  return v5;
}

void sub_1008CA314(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  CGContext *v9;
  double v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  id v15;
  CGImage *v16;
  double v17;
  CGFloat v18;
  double v19;
  CGFloat v20;
  CGAffineTransform v21;
  CGAffineTransform transform;
  CGAffineTransform v23;
  CGRect v24;
  CGRect v25;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "imageAsset"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "imageWithTraitCollection:", *(_QWORD *)(a1 + 40)));
  v7 = v6;
  if (!v6)
    v7 = *(void **)(a1 + 32);
  v8 = v7;

  v9 = (CGContext *)objc_msgSend(v4, "CGContext");
  CGContextSaveGState(v9);
  memset(&v23, 0, sizeof(v23));
  CGAffineTransformMakeScale(&v23, 1.0, -1.0);
  objc_msgSend(*(id *)(a1 + 32), "size");
  v21 = v23;
  CGAffineTransformTranslate(&transform, &v21, 0.0, -v10);
  v23 = transform;
  CGContextConcatCTM(v9, &transform);
  objc_msgSend(*(id *)(a1 + 32), "size");
  v12 = v11;
  objc_msgSend(*(id *)(a1 + 32), "size");
  v14 = v13;
  v15 = objc_retainAutorelease(v8);
  v16 = (CGImage *)objc_msgSend(v15, "CGImage");
  v24.origin.x = 0.0;
  v24.origin.y = 0.0;
  v24.size.width = v12;
  v24.size.height = v14;
  CGContextDrawImage(v9, v24, v16);
  CGContextSetBlendMode(v9, kCGBlendModeSaturation);
  CGContextSetRGBFillColor(v9, 0.0, 0.0, 0.0, 1.0);
  objc_msgSend(*(id *)(a1 + 32), "size");
  v18 = v17;
  objc_msgSend(*(id *)(a1 + 32), "size");
  v20 = v19;

  v25.origin.x = 0.0;
  v25.origin.y = 0.0;
  v25.size.width = v18;
  v25.size.height = v20;
  CGContextFillRect(v9, v25);
  CGContextRestoreGState(v9);
}

uint64_t sub_1008CAD00(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return 0;
}

void sub_1008CB018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1008CB03C(uint64_t a1, void *a2, uint64_t a3)
{
  id *WeakRetained;
  id *v7;
  id v8;
  id v9;
  void (**v10)(id, id, _QWORD);
  id v11;
  id v12;

  v12 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  v7 = WeakRetained;
  if (WeakRetained)
  {
    if (objc_msgSend(WeakRetained, "imageCreationCanBeCached"))
    {
      objc_storeStrong(v7 + 2, a2);
      *((_BYTE *)v7 + 24) = a3;
    }
    v8 = v7[4];
    v7[4] = 0;

    if (objc_msgSend(*(id *)(a1 + 32), "imageCreationCanBeCached"))
    {
      v9 = v7[5];
      if (v9)
      {
        v10 = (void (**)(id, id, _QWORD))objc_retainBlock(v9);
        v11 = v7[5];
        v7[5] = 0;

        v10[2](v10, v12, a3);
      }
    }
    else
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    }
  }

}

void sub_1008CB520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1008CB53C(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  void *v4;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "contents"));

  objc_msgSend(WeakRetained, "_updateSubtitleWithContents:", v4);
  objc_msgSend(WeakRetained, "updateObservers");

}

id sub_1008CBE64(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateObservers");
}

id sub_1008CC134(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateObservers");
}

void sub_1008CCFDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1008CD04C(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSByteCountFormatter);
  v2 = (void *)qword_1014D3860;
  qword_1014D3860 = (uint64_t)v1;

}

void sub_1008CD074(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void (**v3)(void);
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cancelDownloadBlock"));

    WeakRetained = v4;
    if (v2)
    {
      v3 = (void (**)(void))objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "cancelDownloadBlock"));
      v3[2]();

      WeakRetained = v4;
    }
  }

}

void sub_1008CD0DC(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void (**v3)(void);
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "resumeDownloadBlock"));

    WeakRetained = v4;
    if (v2)
    {
      v3 = (void (**)(void))objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "resumeDownloadBlock"));
      v3[2]();

      WeakRetained = v4;
    }
  }

}

void sub_1008CD208(uint64_t a1)
{
  void *v2;
  void *v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 232), "state"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 232), "pairedDeviceState"));
    objc_msgSend(WeakRetained, "_updateModelWithSubscriptionState:pairedDeviceState:", v2, v3);

    objc_msgSend(WeakRetained, "updateObservers");
  }

}

id sub_1008CD3FC(uint64_t a1, void *a2)
{
  id v3;
  int64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  _QWORD v22[4];
  id v23;
  id location;
  _QWORD v25[4];
  id v26;
  uint64_t v27;
  double v28;

  v3 = a2;
  v4 = +[MapsOfflineUIHelper idealDisplayAspectRatio:](MapsOfflineUIHelper, "idealDisplayAspectRatio:", *(_QWORD *)(a1 + 32));
  v6 = 40.0;
  if (v4 == 2)
    v6 = 30.0;
  if (v4 == 1)
    v7 = 53.0;
  else
    v7 = v6;
  v8 = GEOMapRectForMapRegion(*(_QWORD *)(a1 + 32), v5);
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v15 = objc_alloc_init((Class)MKMapSnapshotOptions);
  v16 = objc_msgSend(objc_alloc((Class)MKStandardMapConfiguration), "initWithElevationStyle:", 0);
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[MKPointOfInterestFilter filterExcludingAllCategories](MKPointOfInterestFilter, "filterExcludingAllCategories"));
  objc_msgSend(v16, "setPointOfInterestFilter:", v17);

  objc_msgSend(v15, "setPreferredConfiguration:", v16);
  objc_msgSend(v15, "_setShowsRoadShields:", 0);
  objc_msgSend(v15, "_setAllowsSimultaneousLightDarkSnapshots:", 1);
  objc_msgSend(v15, "setMapRect:", v8, v10, v12, v14);
  objc_msgSend(v15, "setSize:", 40.0 * 6.0, v7 * 6.0);
  v18 = objc_msgSend(objc_alloc((Class)MKMapSnapshotter), "initWithOptions:", v15);
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_1008CD638;
  v25[3] = &unk_1011DAF60;
  v19 = v3;
  v26 = v19;
  v27 = 0x4044000000000000;
  v28 = v7;
  objc_msgSend(v18, "startWithCompletionHandler:", v25);
  objc_initWeak(&location, v18);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_1008CD7D0;
  v22[3] = &unk_1011AD260;
  objc_copyWeak(&v23, &location);
  v20 = objc_msgSend(v22, "copy");
  objc_destroyWeak(&v23);
  objc_destroyWeak(&location);

  return v20;
}

void sub_1008CD61C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1008CD638(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  id v16;

  v5 = a2;
  v16 = v5;
  if (a3)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "image"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "imageAsset"));

    if (v7)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[UITraitCollection traitCollectionWithUserInterfaceStyle:](UITraitCollection, "traitCollectionWithUserInterfaceStyle:", 1));
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[UITraitCollection traitCollectionWithUserInterfaceStyle:](UITraitCollection, "traitCollectionWithUserInterfaceStyle:", 2));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "imageWithTraitCollection:", v8));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "imageByPreparingThumbnailOfSize:", *(double *)(a1 + 40), *(double *)(a1 + 48)));

      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "imageWithTraitCollection:", v9));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "imageByPreparingThumbnailOfSize:", *(double *)(a1 + 40), *(double *)(a1 + 48)));

      v14 = objc_alloc_init((Class)UIImageAsset);
      objc_msgSend(v14, "registerImage:withTraitCollection:", v11, v8);
      objc_msgSend(v14, "registerImage:withTraitCollection:", v13, v9);
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "imageWithTraitCollection:", v8));

    }
    else
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "image"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "imageByPreparingThumbnailOfSize:", *(double *)(a1 + 40), *(double *)(a1 + 48)));
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

void sub_1008CD7D0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "cancel");

}

void sub_1008CD7FC(id a1)
{
  void *v1;

  v1 = (void *)qword_1014D3878;
  qword_1014D3878 = (uint64_t)&off_101273EA8;

}

void sub_1008CF1A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

double sub_1008CF1D0(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  double v3;
  double v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "containeeViewController"));
  objc_msgSend(v2, "preferredContentSize");
  v4 = v3;

  return v4;
}

void sub_1008CF4D4(uint64_t a1)
{
  uint64_t v1;
  id WeakRetained;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 18))
  {
    WeakRetained = objc_loadWeakRetained((id *)(v1 + 32));
    objc_msgSend(WeakRetained, "updateViewsForCustomPresentationTransition");

    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 16) = 0;
  }
}

uint64_t sub_1008CF538(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1008CF678(uint64_t a1)
{
  uint64_t v1;
  id WeakRetained;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 19))
  {
    WeakRetained = objc_loadWeakRetained((id *)(v1 + 32));
    objc_msgSend(WeakRetained, "updateViewsForCustomDismissalTransition");

    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 16) = 1;
  }
}

uint64_t sub_1008CF6E0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_1008D05C8(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "hairLineAlpha");
}

id sub_1008D05DC(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "setHairLineAlpha:");
}

void sub_1008D0B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1008D0B34(uint64_t a1, int a2)
{
  id *WeakRetained;
  id *v4;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && a2)
  {
    v4 = WeakRetained;
    objc_msgSend(WeakRetained[17], "setState:", 6);
    WeakRetained = v4;
  }

}

uint64_t sub_1008D0CB4(uint64_t a1, char a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  id v10;
  _QWORD v12[4];
  id v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  if ((a2 & 1) == 0)
    return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0);
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v3 = *(id *)(a1 + 32);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v15;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v15 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)i);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
        v12[0] = _NSConcreteStackBlock;
        v12[1] = 3221225472;
        v12[2] = sub_1008D0E6C;
        v12[3] = &unk_1011B1BE0;
        v13 = v9;
        v10 = v9;
        objc_msgSend(v8, "deleteCollection:", v12);

      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v5);
  }

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1008D0E6C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  id v10;

  v3 = a2;
  if (v3)
  {
    v4 = sub_1004315EC();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = *(_QWORD *)(a1 + 32);
      v7 = 138412546;
      v8 = v6;
      v9 = 2112;
      v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Error deleting collection '%@' from collection list: %@", (uint8_t *)&v7, 0x16u);
    }

  }
}

void sub_1008D1098(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  void *v13;
  void *v14;
  id v15;

  v3 = *(_QWORD *)(a1 + 32);
  v15 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "popoverPresentationController"));
  objc_msgSend(v4, "setSourceView:", v3);

  objc_msgSend(*(id *)(a1 + 32), "bounds");
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "popoverPresentationController"));
  objc_msgSend(v13, "setSourceRect:", v6, v8, v10, v12);

  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "popoverPresentationController"));
  objc_msgSend(v14, "setPermittedArrowDirections:", 15);

  objc_msgSend(*(id *)(a1 + 40), "presentViewController:animated:completion:", v15, 1, 0);
}

void sub_1008D116C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  CuratedCollectionShareItemSource *v11;
  MapsActivityViewController *v12;
  id v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  void *v21;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = v9;
  if (v7 && !v9 && objc_msgSend(v8, "count"))
  {
    v11 = -[CuratedCollectionShareItemSource initWithPlaceCollection:refinedMapItems:]([CuratedCollectionShareItemSource alloc], "initWithPlaceCollection:refinedMapItems:", v7, v8);
    v12 = -[MapsActivityViewController initWithShareItem:]([MapsActivityViewController alloc], "initWithShareItem:", v11);
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

  }
  else
  {
    v13 = sub_1004316CC();
    v11 = (CuratedCollectionShareItemSource *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(&v11->super, OS_LOG_TYPE_ERROR))
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "curatedCollectionIdentifier"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v8, "count")));
      v16 = 138412802;
      v17 = v14;
      v18 = 2112;
      v19 = v15;
      v20 = 2112;
      v21 = v10;
      _os_log_impl((void *)&_mh_execute_header, &v11->super, OS_LOG_TYPE_ERROR, "Cannot share collection with Id:%@ collectionCount:%@ error:%@", (uint8_t *)&v16, 0x20u);

    }
  }

}

id sub_1008D1A04(void *a1, unint64_t a2, unint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  double v14;
  double v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  unint64_t v26;
  void *v27;
  _QWORD v28[4];

  v5 = a1;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", a3));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", a3));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", a3));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", a3));
  v26 = a3;
  if (a2 < a2 + a3)
  {
    do
    {
      if (v5)
        objc_msgSend(v5, "frameAtIndex:", a2);
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSValue valueWithCGPoint:](NSValue, "valueWithCGPoint:", 0.0, 0.0));
      objc_msgSend(v6, "addObject:", v10);

      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSValue valueWithCGSize:](NSValue, "valueWithCGSize:", (unsigned __int128)0));
      objc_msgSend(v7, "addObject:", v11);

      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSValue valueWithCGRect:](NSValue, "valueWithCGRect:", 0.0, (unsigned __int128)0, 0.0));
      objc_msgSend(v8, "addObject:", v12);

      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", 0.0));
      objc_msgSend(v9, "addObject:", v13);

      ++a2;
      --a3;
    }
    while (a3);
  }
  objc_msgSend(v5, "frameDuration");
  v15 = v14 * (double)v26;
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[CAKeyframeAnimation animationWithKeyPath:](CAKeyframeAnimation, "animationWithKeyPath:", CFSTR("position")));
  objc_msgSend(v16, "setCalculationMode:", kCAAnimationDiscrete);
  objc_msgSend(v16, "setDuration:", v15);
  v27 = v16;
  objc_msgSend(v16, "setValues:", v6);
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[CAKeyframeAnimation animationWithKeyPath:](CAKeyframeAnimation, "animationWithKeyPath:", CFSTR("bounds.size")));
  objc_msgSend(v17, "setCalculationMode:", kCAAnimationDiscrete);
  objc_msgSend(v17, "setDuration:", v15);
  v25 = v17;
  objc_msgSend(v17, "setValues:", v7);
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[CAKeyframeAnimation animationWithKeyPath:](CAKeyframeAnimation, "animationWithKeyPath:", CFSTR("contentsRect")));
  objc_msgSend(v18, "setCalculationMode:", kCAAnimationDiscrete);
  objc_msgSend(v18, "setDuration:", v15);
  objc_msgSend(v18, "setValues:", v8);
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[CAKeyframeAnimation animationWithKeyPath:](CAKeyframeAnimation, "animationWithKeyPath:", CFSTR("transform.rotation.z")));
  objc_msgSend(v19, "setCalculationMode:", kCAAnimationDiscrete);
  objc_msgSend(v19, "setDuration:", v15);
  objc_msgSend(v19, "setValues:", v9);
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[CAAnimationGroup animation](CAAnimationGroup, "animation"));
  v28[0] = v16;
  v28[1] = v17;
  v28[2] = v18;
  v28[3] = v19;
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v28, 4));
  objc_msgSend(v20, "setAnimations:", v21);

  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "animations"));
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "objectAtIndexedSubscript:", 0));
  objc_msgSend(v23, "duration");
  objc_msgSend(v20, "setDuration:");

  return v20;
}

id sub_1008D2290()
{
  if (qword_1014D3888 != -1)
    dispatch_once(&qword_1014D3888, &stru_1011DB0F0);
  return (id)qword_1014D3880;
}

void sub_1008D2710(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFSessionTileAvailabilityMonitor");
  v2 = (void *)qword_1014D3880;
  qword_1014D3880 = (uint64_t)v1;

}

void sub_1008D44C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 160), 8);
  _Block_object_dispose((const void *)(v33 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1008D44F8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1008D4508(uint64_t a1)
{

}

void sub_1008D4510(uint64_t a1, void *a2)
{
  id v4;
  id v5;
  NSObject *v6;
  uint8_t v7[16];

  v4 = a2;
  v5 = sub_100431D5C();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "firstUpcomingTrip called back", v7, 2u);
  }

  if (v4)
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_1008D45B0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;

  v5 = a2;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);
  v9 = a3;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;
  v8 = v5;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1008D4630(uint64_t a1)
{
  id WeakRetained;
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  id v7;
  NSObject *v8;
  id v9;
  NSObject *v10;
  id v11;
  NSObject *v12;
  id v13;
  uint64_t v14;
  id v15;
  int v16;
  id v17;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    v3 = objc_alloc_init((Class)NSMutableArray);
    v4 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    if (v4
      && objc_msgSend(v4, "count")
      && (objc_msgSend(WeakRetained, "_homeAreaTipWasDismissed") & 1) == 0)
    {
      v5 = sub_100431D5C();
      v6 = objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        LOWORD(v16) = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Adding home area offline suggestion in allOfflineSuggestions", (uint8_t *)&v16, 2u);
      }

      objc_msgSend(v3, "addObjectsFromArray:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
    }
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40)
      && !*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40)
      && (objc_msgSend(WeakRetained, "_tripTipWasDismissed") & 1) == 0)
    {
      v7 = sub_100431D5C();
      v8 = objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        LOWORD(v16) = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Adding pre-arrival offline suggestion in allOfflineSuggestions", (uint8_t *)&v16, 2u);
      }

      objc_msgSend(v3, "addObject:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
    }
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40)
      && (objc_msgSend(WeakRetained, "_tripTipWasDismissed") & 1) == 0)
    {
      v9 = sub_100431D5C();
      v10 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        LOWORD(v16) = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Adding airport arrival offline suggestion in allOfflineSuggestions", (uint8_t *)&v16, 2u);
      }

      objc_msgSend(v3, "addObject:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
    }
    v11 = sub_100431D5C();
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      v13 = objc_msgSend(v3, "count");
      v16 = 134217984;
      v17 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "allOfflineSuggestions calling back with %lu items", (uint8_t *)&v16, 0xCu);
    }

    v14 = *(_QWORD *)(a1 + 32);
    v15 = objc_msgSend(v3, "copy");
    (*(void (**)(uint64_t, id))(v14 + 16))(v14, v15);

  }
}

void sub_1008D4ED0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  id v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint8_t v18[128];
  uint8_t buf[4];
  id v20;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = sub_100431D5C();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v20 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Unable to load shortcuts:%@", buf, 0xCu);
    }
LABEL_14:

    goto LABEL_15;
  }
  if (objc_msgSend(v5, "count"))
  {
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v8 = v5;
    v9 = -[NSObject countByEnumeratingWithState:objects:count:](v8, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v9)
    {
      v10 = *(_QWORD *)v15;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(_QWORD *)v15 != v10)
            objc_enumerationMutation(v8);
          v12 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)i);
          if (objc_msgSend(v12, "type", (_QWORD)v14) == (id)2)
          {
            v13 = *(id *)(a1 + 40);
            objc_sync_enter(v13);
            objc_msgSend(*(id *)(a1 + 40), "addObject:", v12);
            objc_sync_exit(v13);

          }
        }
        v9 = -[NSObject countByEnumeratingWithState:objects:count:](v8, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      }
      while (v9);
    }
    goto LABEL_14;
  }
LABEL_15:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_1008D5080(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1008D52EC(uint64_t a1)
{
  id *WeakRetained;
  id *v3;
  void *v4;
  id v5;
  uint64_t v6;
  _QWORD v7[6];
  id v8;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[1], "oneInsights"));
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1008D5394;
    v7[3] = &unk_1011DB1E0;
    v5 = *(id *)(a1 + 40);
    v6 = *(_QWORD *)(a1 + 32);
    v7[4] = v3;
    v7[5] = v6;
    v8 = v5;
    objc_msgSend(v4, "futureTripsWithHandler:", v7);

  }
}

void sub_1008D5394(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  BOOL v17;
  id v18;
  NSObject *v19;
  NSObject *v20;
  const char *v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  double v33;
  double v34;
  void *v35;
  void *v36;
  double v37;
  double v38;
  id v39;
  id v40;
  id v41;
  id v42;
  NSObject *v43;
  id v44;
  id v45;
  void *v46;
  _QWORD v47[5];
  id v48;
  id v49;
  uint8_t buf[16];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[128];
  CLLocationCoordinate2D v56;

  v5 = a2;
  v6 = a3;
  if (!v5 || !objc_msgSend(v5, "count"))
  {
    (*((void (**)(void))a1[6] + 2))();
    goto LABEL_31;
  }
  v44 = v6;
  v45 = v5;
  v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "fetchHomeLocationsAsShortCuts"));
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v7 = v5;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v51, v55, 16);
  if (!v8)
  {
LABEL_23:

    goto LABEL_27;
  }
  v9 = v8;
  v10 = *(_QWORD *)v52;
LABEL_5:
  v11 = 0;
  while (1)
  {
    if (*(_QWORD *)v52 != v10)
      objc_enumerationMutation(v7);
    v12 = *(void **)(*((_QWORD *)&v51 + 1) + 8 * v11);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "placemark"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "locality"));

    if (!v14)
    {
      v18 = sub_100431D5C();
      v19 = objc_claimAutoreleasedReturnValue(v18);
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        goto LABEL_20;
      *(_WORD *)buf = 0;
      v20 = v19;
      v21 = "Trip Placemark has no locality, not showing Offline Maps trip.";
LABEL_19:
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, v21, buf, 2u);
      goto LABEL_20;
    }
    if ((objc_msgSend(v12, "isInternational") & 1) == 0)
    {
      v22 = sub_100431D5C();
      v19 = objc_claimAutoreleasedReturnValue(v22);
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        goto LABEL_20;
      *(_WORD *)buf = 0;
      v20 = v19;
      v21 = "Trip is not international, not showing Offline Maps trip.";
      goto LABEL_19;
    }
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(0, "placemark"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "location"));
    objc_msgSend(v16, "coordinate");
    v17 = CLLocationCoordinate2DIsValid(v56);

    if (!v17)
    {
      v23 = sub_100431D5C();
      v19 = objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        v20 = v19;
        v21 = "Trip does not have a valid coordinate.";
        goto LABEL_19;
      }
LABEL_20:

      goto LABEL_21;
    }
    if ((objc_msgSend(a1[5], "isTrip:nearAtLeastOneShortcut:", v12, v46) & 1) == 0)
      break;
LABEL_21:
    if (v9 == (id)++v11)
    {
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v51, v55, 16);
      if (v9)
        goto LABEL_5;
      goto LABEL_23;
    }
  }
  v24 = v12;

  if (v24)
  {
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "localizedStringForKey:value:table:", CFSTR("MAPS_OFFLINE_TIP_TITLE_FOR_FUTURE_TRIP"), CFSTR("localized string not found"), CFSTR("Offline")));

    v27 = objc_alloc((Class)NSString);
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "placemark"));
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "locality"));
    v30 = objc_msgSend(v27, "initWithFormat:", v26, v29);

    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "placemark"));
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "location"));
    objc_msgSend(v32, "coordinate");
    v34 = v33;

    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "placemark"));
    v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "location"));
    objc_msgSend(v36, "coordinate");
    v38 = v37;

    v39 = a1[4];
    v47[0] = _NSConcreteStackBlock;
    v47[1] = 3221225472;
    v47[2] = sub_1008D57EC;
    v47[3] = &unk_1011DB1B8;
    v40 = a1[6];
    v48 = v30;
    v49 = v40;
    v47[4] = a1[5];
    v41 = v30;
    objc_msgSend(v39, "_buildMapRegionForLatitude:longitude:handler:", v47, v34, v38);

    goto LABEL_30;
  }
LABEL_27:
  v42 = sub_100431D5C();
  v43 = objc_claimAutoreleasedReturnValue(v42);
  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "No trips found matching criteria, not showing Offline Maps trip.", buf, 2u);
  }

  (*((void (**)(void))a1[6] + 2))();
LABEL_30:
  v6 = v44;
  v5 = v45;

LABEL_31:
}

void sub_1008D57EC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  if (v5)
  {
    v6 = objc_alloc_init((Class)GEOMapDataSubscriptionManager);
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1008D58EC;
    v9[3] = &unk_1011DB190;
    v12 = *(id *)(a1 + 48);
    v10 = *(id *)(a1 + 40);
    v11 = v5;
    v13 = a3;
    v8 = objc_msgSend(v6, "determineEstimatedSizeForSubscriptionWithRegion:dataTypes:queue:completionHandler:", v11, 1024, v7, v9);

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }

}

void sub_1008D58EC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  OfflineMapsSuggestionModelData *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  OfflineMapsSuggestionModelData *v23;
  OfflineMapsSuggestionModelData *v24;
  uint8_t buf[16];

  if (!a2 || a3)
  {
    v19 = sub_100431D5C();
    v20 = objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Failed to load download size.", buf, 2u);
    }

    (*(void (**)(void))(a1[6] + 16))();
  }
  else
  {
    v4 = [OfflineMapsSuggestionModelData alloc];
    v22 = a1[4];
    v23 = v4;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "localizedStringForKey:value:table:", CFSTR("MAPS_OFFLINE_TIP_SUBTITLE"), CFSTR("localized string not found"), CFSTR("Offline")));

    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "localizedStringForKey:value:table:", CFSTR("MAPS_OFFLINE_TIP_ACTION_BUTTON_TITLE"), CFSTR("localized string not found"), CFSTR("Offline")));

    v9 = (void *)objc_claimAutoreleasedReturnValue(+[UIImageSymbolConfiguration configurationWithPointSize:weight:scale:](UIImageSymbolConfiguration, "configurationWithPointSize:weight:scale:", 7, -1, 60.0));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage systemImageNamed:withConfiguration:](UIImage, "systemImageNamed:withConfiguration:", CFSTR("map.circle.fill"), v9));

    v12 = a1[4];
    v11 = a1[5];
    v13 = a1[7];
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "localizedStringForKey:value:table:", CFSTR("MAPS_OFFLINE_FUTURE_TRIP_SUGGESTION_SUBTITLE"), CFSTR("localized string not found"), CFSTR("Offline")));

    v16 = objc_alloc_init((Class)NSByteCountFormatter);
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "stringFromByteCount:", v13));

    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v15, v17));
    LODWORD(v21) = 2;
    v24 = -[OfflineMapsSuggestionModelData initWithTipTitle:tipSubtitle:tipActionTitle:tipImage:mapRegion:regionName:suggestionSubtitle:suggestionType:](v23, "initWithTipTitle:tipSubtitle:tipActionTitle:tipImage:mapRegion:regionName:suggestionSubtitle:suggestionType:", v22, v6, v8, v10, v11, v12, v18, v21);

    (*(void (**)(void))(a1[6] + 16))();
  }
}

void sub_1008D60C4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  OfflineMapsSuggestionModelData *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  OfflineMapsSuggestionModelData *v19;
  id v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  OfflineMapsSuggestionModelData *v24;
  uint8_t buf[16];

  v5 = a2;
  if (v5)
  {
    v6 = [OfflineMapsSuggestionModelData alloc];
    v23 = *(_QWORD *)(a1 + 32);
    v24 = v6;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "localizedStringForKey:value:table:", CFSTR("MAPS_OFFLINE_TIP_SUBTITLE"), CFSTR("localized string not found"), CFSTR("Offline")));

    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "localizedStringForKey:value:table:", CFSTR("MAPS_OFFLINE_TIP_ACTION_BUTTON_TITLE"), CFSTR("localized string not found"), CFSTR("Offline")));

    v11 = (void *)objc_claimAutoreleasedReturnValue(+[UIImageSymbolConfiguration configurationWithPointSize:weight:scale:](UIImageSymbolConfiguration, "configurationWithPointSize:weight:scale:", 7, -1, 60.0));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage systemImageNamed:withConfiguration:](UIImage, "systemImageNamed:withConfiguration:", CFSTR("map.circle.fill"), v11));

    v13 = *(_QWORD *)(a1 + 32);
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "localizedStringForKey:value:table:", CFSTR("MAPS_OFFLINE_FUTURE_TRIP_SUGGESTION_SUBTITLE"), CFSTR("localized string not found"), CFSTR("Offline")));

    v16 = objc_alloc_init((Class)NSByteCountFormatter);
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "stringFromByteCount:", a3));

    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v15, v17));
    LODWORD(v22) = 3;
    v19 = -[OfflineMapsSuggestionModelData initWithTipTitle:tipSubtitle:tipActionTitle:tipImage:mapRegion:regionName:suggestionSubtitle:suggestionType:](v24, "initWithTipTitle:tipSubtitle:tipActionTitle:tipImage:mapRegion:regionName:suggestionSubtitle:suggestionType:", v23, v8, v10, v12, v5, v13, v18, v22);

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v20 = sub_100431D5C();
    v21 = objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Airport Arrival Tip: Region is nil, should not have happened.", buf, 2u);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

uint64_t sub_1008D666C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1008D667C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  OfflineMapsSuggestionModelData *v18;
  id v19;
  NSObject *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  OfflineMapsSuggestionModelData *v26;
  _QWORD v27[4];
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  _QWORD block[4];
  id v34;
  uint8_t buf[16];

  v5 = a2;
  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "localizedStringForKey:value:table:", CFSTR("MAPS_OFFLINE_HOME_AREA_SUBTILE"), CFSTR("localized string not found"), CFSTR("Offline")));

    if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 44) == 3)
    {
      v26 = [OfflineMapsSuggestionModelData alloc];
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "localizedStringForKey:value:table:", CFSTR("MAPS_OFFLINE_TIP_SUBTITLE"), CFSTR("localized string not found"), CFSTR("Offline")));

      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "localizedStringForKey:value:table:", CFSTR("MAPS_OFFLINE_TIP_ACTION_BUTTON_TITLE"), CFSTR("localized string not found"), CFSTR("Offline")));

      v11 = (void *)objc_claimAutoreleasedReturnValue(+[UIImageSymbolConfiguration configurationWithPointSize:weight:scale:](UIImageSymbolConfiguration, "configurationWithPointSize:weight:scale:", 7, -1, 60.0));
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage systemImageNamed:withConfiguration:](UIImage, "systemImageNamed:withConfiguration:", CFSTR("map.circle.fill"), v11));

      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "localizedStringForKey:value:table:", CFSTR("MAPS_OFFLINE_HOME_SUGGESTION_SUBTITLE"), CFSTR("localized string not found"), CFSTR("Offline")));

      v15 = objc_alloc_init((Class)NSByteCountFormatter);
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "stringFromByteCount:", a3));

      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v14, v16));
      LODWORD(v24) = 1;
      v18 = -[OfflineMapsSuggestionModelData initWithTipTitle:tipSubtitle:tipActionTitle:tipImage:mapRegion:regionName:suggestionSubtitle:suggestionType:](v26, "initWithTipTitle:tipSubtitle:tipActionTitle:tipImage:mapRegion:regionName:suggestionSubtitle:suggestionType:", v7, v25, v10, v12, v5, 0, v17, v24);

      (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
    }
    else
    {
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[GEOMapService sharedService](GEOMapService, "sharedService"));
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "ticketForOfflineRegionNameSuggestionWithRegion:traits:", v5, 0));

      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472;
      v27[2] = sub_1008D6A38;
      v27[3] = &unk_1011DB230;
      v31 = *(id *)(a1 + 56);
      v28 = *(id *)(a1 + 48);
      v7 = v7;
      v29 = v7;
      v30 = v5;
      v32 = a3;
      objc_msgSend(v23, "submitWithHandler:timeout:networkActivity:queue:", v27, (uint64_t)GEOConfigGetDouble(MapsConfig_OfflineMapsRegionNameLookupTimeout, off_1014B4EF8), 0, *(_QWORD *)(a1 + 32));

    }
  }
  else
  {
    v19 = sub_100431D5C();
    v20 = objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Could not construct region for home area tip.", buf, 2u);
    }

    v21 = *(NSObject **)(a1 + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1008D6A28;
    block[3] = &unk_1011ADA00;
    v34 = *(id *)(a1 + 56);
    dispatch_async(v21, block);
    v7 = v34;
  }

}

uint64_t sub_1008D6A28(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1008D6A38(uint64_t a1, void *a2, uint64_t a3)
{
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  OfflineMapsSuggestionModelData *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  OfflineMapsSuggestionModelData *v24;
  id v25;
  NSObject *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  OfflineMapsSuggestionModelData *v30;
  uint8_t v31[16];
  uint8_t buf[16];

  if (a2 || !a3)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "firstObject"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "name"));
    if (v7
      || (v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "geoMapItem")),
          v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "addressDictionary")),
          v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", CFSTR("City"))),
          v9,
          v8,
          v7))
    {
      v10 = [OfflineMapsSuggestionModelData alloc];
      v29 = *(_QWORD *)(a1 + 40);
      v30 = v10;
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "localizedStringForKey:value:table:", CFSTR("MAPS_OFFLINE_TIP_SUBTITLE"), CFSTR("localized string not found"), CFSTR("Offline")));

      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "localizedStringForKey:value:table:", CFSTR("MAPS_OFFLINE_TIP_ACTION_BUTTON_TITLE"), CFSTR("localized string not found"), CFSTR("Offline")));

      v14 = (void *)objc_claimAutoreleasedReturnValue(+[UIImageSymbolConfiguration configurationWithPointSize:weight:scale:](UIImageSymbolConfiguration, "configurationWithPointSize:weight:scale:", 7, -1, 60.0));
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage systemImageNamed:withConfiguration:](UIImage, "systemImageNamed:withConfiguration:", CFSTR("map.circle.fill"), v14));

      v16 = *(_QWORD *)(a1 + 48);
      v17 = v6;
      v18 = *(_QWORD *)(a1 + 64);
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "localizedStringForKey:value:table:", CFSTR("MAPS_OFFLINE_HOME_SUGGESTION_SUBTITLE"), CFSTR("localized string not found"), CFSTR("Offline")));

      v21 = objc_alloc_init((Class)NSByteCountFormatter);
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "stringFromByteCount:", v18));

      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v20, v22));
      v6 = v17;

      LODWORD(v27) = 1;
      v24 = -[OfflineMapsSuggestionModelData initWithTipTitle:tipSubtitle:tipActionTitle:tipImage:mapRegion:regionName:suggestionSubtitle:suggestionType:](v30, "initWithTipTitle:tipSubtitle:tipActionTitle:tipImage:mapRegion:regionName:suggestionSubtitle:suggestionType:", v29, v28, v13, v15, v16, v7, v23, v27);

      (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
    }
    else
    {
      v25 = sub_100431D5C();
      v26 = objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v31 = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "Could not construct region name for home area tip", v31, 2u);
      }

      (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
    }

  }
  else
  {
    v4 = sub_100431D5C();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Could not determine name for home area tip", buf, 2u);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
}

void sub_1008D7144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  id *v20;
  uint64_t v21;

  objc_destroyWeak(v20);
  _Block_object_dispose(&a20, 8);
  objc_destroyWeak((id *)(v21 - 72));
  _Unwind_Resume(a1);
}

void sub_1008D716C(uint64_t a1, void *a2, void *a3)
{
  NSObject *v5;
  _QWORD *WeakRetained;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *i;
  void *v13;
  void *v14;
  unsigned __int8 v15;
  uint64_t v16;
  void *v17;
  BOOL v18;
  double v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  NSObject *v23;
  NSObject *v24;
  id v25;
  id v26;
  id v27;
  NSObject *v28;
  __int128 v29;
  id v30;
  NSObject *group;
  _QWORD *v32;
  _QWORD block[4];
  id v34;
  __int128 v35;
  _QWORD *v36;
  _QWORD v37[4];
  NSObject *v38;
  _QWORD *v39;
  _QWORD v40[4];
  id v41;
  NSObject *v42;
  double v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _QWORD v48[5];
  id v49;
  _BYTE v50[128];

  v5 = a2;
  v27 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v32 = WeakRetained;
  if (WeakRetained)
  {
    v7 = WeakRetained;
    v30 = objc_alloc_init((Class)NSMutableArray);
    v48[0] = 0;
    v48[1] = v48;
    v48[2] = 0x3032000000;
    v48[3] = sub_1008D44F8;
    v48[4] = sub_1008D4508;
    v49 = 0;
    group = dispatch_group_create();
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "_filterEntriesWithOverLappingRects:", v5));

    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v5 = v8;
    v9 = -[NSObject countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v44, v50, 16);
    v10 = 0;
    if (v9)
    {
      v11 = *(_QWORD *)v45;
      v28 = v5;
      while (1)
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(_QWORD *)v45 != v11)
            objc_enumerationMutation(v5);
          v13 = *(void **)(*((_QWORD *)&v44 + 1) + 8 * (_QWORD)i);
          if (objc_msgSend(v13, "type") == (id)1)
          {
            if (GEOConfigGetBOOL(MapsConfig_OfflineMapsHomeAreaTipEnabled, off_1014B4588))
            {
              v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "geoMapItem"));
              if (v14)
              {
                v15 = objc_msgSend(*(id *)(a1 + 32), "_homeAreaTipWasDismissed");

                if ((v15 & 1) == 0)
                {
                  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 44) == 1)
                  {
                    v16 = MapsSuggestionsMostRecentLocation();
                    v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
                    v18 = v17 == 0;

                    if (v18)
                      continue;
                    v43 = 0.0;
                    MapsSuggestionsDistanceFromHereToEntry(v13, &v43);
                    v19 = v43;
                    if (v19 > (double)GEOConfigGetInteger(MapsConfig_OfflineMapsTipDefaultRegionRadius, off_1014B4518))
                      continue;
                  }
                  dispatch_group_enter(group);
                  v20 = v32[2];
                  v40[0] = _NSConcreteStackBlock;
                  v40[1] = 3221225472;
                  v40[2] = sub_1008D75B8;
                  v40[3] = &unk_1011DB280;
                  v41 = v30;
                  v5 = v28;
                  v42 = group;
                  objc_msgSend(v32, "_fetchHomeAreaModelDataFromEntry:onQueue:completionHandler:", v13, v20, v40);

                }
              }
            }
          }
          if (objc_msgSend(v13, "type") == (id)15
            && *(_BYTE *)(a1 + 72)
            && (!v10 || objc_msgSend(v10, "startsBeforeEntry:", v13)))
          {
            v21 = v13;

            v10 = v21;
          }
        }
        v9 = -[NSObject countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v44, v50, 16);
        if (!v9)
        {

          if (v10)
          {
            dispatch_group_enter(group);
            v22 = *(_QWORD *)(a1 + 40);
            v37[0] = _NSConcreteStackBlock;
            v37[1] = 3221225472;
            v37[2] = sub_1008D75E8;
            v37[3] = &unk_1011DB118;
            v39 = v48;
            v5 = v28;
            v38 = group;
            objc_msgSend(v32, "_fetchAirportArrivalModelDataFromFlightEntry:usingCurrentLocation:completion:", v10, v22, v37);
            v23 = v38;
            goto LABEL_25;
          }
          goto LABEL_26;
        }
      }
    }
    v23 = v5;
LABEL_25:

LABEL_26:
    v24 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1008D7634;
    block[3] = &unk_1011DB2A8;
    v29 = *(_OWORD *)(a1 + 48);
    v25 = (id)v29;
    v35 = v29;
    v34 = v30;
    v36 = v48;
    v26 = v30;
    dispatch_group_notify(group, v24, block);

    _Block_object_dispose(v48, 8);
  }

}

void sub_1008D7588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  _Block_object_dispose(&a46, 8);
  _Unwind_Resume(a1);
}

void sub_1008D75B8(uint64_t a1, uint64_t a2)
{
  if (a2)
    objc_msgSend(*(id *)(a1 + 32), "addObject:", a2);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1008D75E8(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_1008D7634(uint64_t a1)
{
  uint64_t v2;
  id v3;

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
  {
    v2 = *(_QWORD *)(a1 + 40);
    v3 = objc_msgSend(*(id *)(a1 + 32), "copy");
    (*(void (**)(uint64_t, id, _QWORD))(v2 + 16))(v2, v3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  }
}

uint64_t sub_1008D8050(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4;
  NSObject *v5;
  uint8_t v7[16];

  if (!a3)
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  v4 = sub_100431D5C();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Unable to get estimated download size of map region, this region is likely in an unsupported area.", v7, 2u);
  }

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

id sub_1008D8C0C(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_1008D9040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1008D905C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "didFinishJumping");

}

void sub_1008D9134(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1008D9150(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "tapPOI");

}

void sub_1008D9500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id location)
{
  id *v34;

  objc_destroyWeak(v34);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1008D9550(uint64_t a1, void *a2)
{
  void *v3;
  id WeakRetained;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "object"));
  objc_storeWeak((id *)(*(_QWORD *)(a1 + 32) + 64), v3);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "didShowPlaceCard");

}

id sub_1008D95B4(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("fetchPlaceEnrichment"));
  return objc_msgSend(*(id *)(a1 + 32), "startedSubTest:", CFSTR("displayPlaceEnrichment"));
}

id sub_1008D95EC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("displayPlaceEnrichment"));
}

void sub_1008D95FC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "didShowPlaceCard");

}

void sub_1008D9718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1008D9734(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "didShowWebModule");

}

id sub_1008D981C(uint64_t a1)
{
  unsigned int v2;
  void *v3;
  unsigned int v4;
  void *v5;
  _QWORD v7[5];

  v2 = objc_msgSend(*(id *)(a1 + 32), "shouldScrollPlacecard");
  v3 = *(void **)(a1 + 32);
  if (!v2)
    return objc_msgSend(v3, "finishedTest");
  v4 = objc_msgSend(v3, "canUpdateTrayLayout");
  v5 = *(void **)(a1 + 32);
  if (!v4)
    return _objc_msgSend(v5, "scrollPlacecardTest");
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1008D98C4;
  v7[3] = &unk_1011AC860;
  v7[4] = v5;
  return objc_msgSend(v5, "updateTrayLayout:animated:completion:", 2, 1, v7);
}

id sub_1008D98C4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "scrollPlacecardTest");
}

void sub_1008D9B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1008D9BC4(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "finishedSubTest:", *(_QWORD *)(a1 + 32));
    objc_msgSend(v3, "finishedTest");
    WeakRetained = v3;
  }

}

void sub_1008DA07C(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_1008DA090(uint64_t a1)
{
  id *WeakRetained;
  void *v2;
  void *v3;
  void *v4;
  uint64_t Log;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  const char *v14;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NavdLocationLeecher sharedLeecher](NavdLocationLeecher, "sharedLeecher"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "lastLeechedLocation"));
    objc_msgSend(WeakRetained, "_updateLocationIfAllowed:", v3);

    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NavdLocationLeecher sharedLeecher](NavdLocationLeecher, "sharedLeecher"));
    objc_msgSend(v4, "addObserver:", WeakRetained);

    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "MapsSuggestionsNavdLocationManager");
    v6 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v9) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Starting visit monitoring", (uint8_t *)&v9, 2u);
    }

    objc_msgSend(WeakRetained[1], "startMonitoringSignificantLocationChanges");
    objc_msgSend(WeakRetained[1], "startMonitoringVisits");
  }
  else
  {
    v7 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "MapsSuggestionsNavdLocationManager");
    v8 = (id)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = 136446722;
      v10 = "MapsSuggestionsNavdLocationManager.m";
      v11 = 1026;
      v12 = 66;
      v13 = 2082;
      v14 = "-[MapsSuggestionsNavdLocationManager onStartImplementation]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", (uint8_t *)&v9, 0x1Cu);
    }

  }
}

void sub_1008DA2F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_1008DA308(uint64_t a1)
{
  id *WeakRetained;
  void *v2;
  uint64_t Log;
  NSObject *v4;
  uint64_t v5;
  int v6;
  char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NavdLocationLeecher sharedLeecher](NavdLocationLeecher, "sharedLeecher"));
    objc_msgSend(v2, "removeObserver:", WeakRetained);

    objc_msgSend(WeakRetained[1], "stopMonitoringSignificantLocationChanges");
    objc_msgSend(WeakRetained[1], "stopMonitoringVisits");
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "MapsSuggestionsNavdLocationManager");
    v4 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v6) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Stopped visit monitoring", (uint8_t *)&v6, 2u);
    }
  }
  else
  {
    v5 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "MapsSuggestionsNavdLocationManager");
    v4 = (id)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = 136446722;
      v7 = "MapsSuggestionsNavdLocationManager.m";
      v8 = 1026;
      v9 = 83;
      v10 = 2082;
      v11 = "-[MapsSuggestionsNavdLocationManager onStopImplementation]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", (uint8_t *)&v6, 0x1Cu);
    }

  }
}

void sub_1008DA5C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1008DA5D8(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  uint64_t Log;
  NSObject *v5;
  int v6;
  char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "_updateLocationIfAllowed:", *(_QWORD *)(a1 + 32));
  }
  else
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "MapsSuggestionsNavdLocationManager");
    v5 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = 136446722;
      v7 = "MapsSuggestionsNavdLocationManager.m";
      v8 = 1026;
      v9 = 112;
      v10 = 2082;
      v11 = "-[MapsSuggestionsNavdLocationManager locationLeecher:receivedLocation:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", (uint8_t *)&v6, 0x1Cu);
    }

  }
}

void sub_1008DAA68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1008DAA7C(uint64_t a1)
{
  NSObject *WeakRetained;
  NSObject *v3;
  uint64_t v4;
  char *v5;
  uint64_t Log;
  NSObject *v7;
  int v8;
  char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  const char *v13;

  if ((MapsSuggestionsIsValidVisit(*(_QWORD *)(a1 + 32)) & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    if (WeakRetained)
    {
      v3 = WeakRetained;
      -[NSObject considerMyAllowanceAsLimited:](WeakRetained, "considerMyAllowanceAsLimited:", objc_msgSend(*(id *)(a1 + 40), "_hasMapsCoarseLocationEnabled"));
      -[NSObject considerMyNewVisit:](v3, "considerMyNewVisit:", *(_QWORD *)(a1 + 32));
    }
    else
    {
      Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "MapsSuggestionsNavdLocationManager");
      v7 = (id)objc_claimAutoreleasedReturnValue(Log);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        v8 = 136446722;
        v9 = "MapsSuggestionsNavdLocationManager.m";
        v10 = 1026;
        v11 = 157;
        v12 = 2082;
        v13 = "-[MapsSuggestionsNavdLocationManager locationManager:didVisit:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", (uint8_t *)&v8, 0x1Cu);
      }

      v3 = 0;
    }
  }
  else
  {
    v4 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "MapsSuggestionsNavdLocationManager");
    v3 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v5 = *(char **)(a1 + 32);
      v8 = 138412290;
      v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Dropping invalid visit: %@", (uint8_t *)&v8, 0xCu);
    }
  }

}

id sub_1008DBB48()
{
  if (qword_1014D3898 != -1)
    dispatch_once(&qword_1014D3898, &stru_1011DB3D8);
  return (id)qword_1014D3890;
}

void sub_1008DC8A8(uint64_t a1)
{
  id WeakRetained;
  id v3;
  id v4;
  NSObject *v5;
  id v6;
  void *v7;
  objc_class *v8;
  NSString *v9;
  void *v10;
  void *v11;
  void *v12;
  __CFString *v13;
  __CFString *v14;
  uint64_t v15;
  id v16;
  void *v17;
  objc_class *v18;
  NSString *v19;
  void *v20;
  void *v21;
  void *v22;
  __CFString *v23;
  __CFString *v24;
  id v25;
  void *v26;
  objc_class *v27;
  NSString *v28;
  void *v29;
  void *v30;
  void *v31;
  __CFString *v32;
  uint8_t buf[4];
  __CFString *v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  __CFString *v38;
  __int16 v39;
  __CFString *v40;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 88));
  v3 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 72));
  objc_msgSend(WeakRetained, "containee:didChangeLayout:", v3, *(_QWORD *)(a1 + 40));

  v4 = sub_1008DBB48();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v6 = *(id *)(a1 + 32);
    v7 = v6;
    if (!v6)
    {
      v13 = CFSTR("<nil>");
LABEL_10:

      v14 = v13;
      v15 = *(_QWORD *)(a1 + 40);
      v16 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 88));
      v17 = v16;
      if (!v16)
      {
        v23 = CFSTR("<nil>");
LABEL_18:

        v24 = v23;
        v25 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 72));
        v26 = v25;
        if (!v25)
        {
          v32 = CFSTR("<nil>");
          goto LABEL_26;
        }
        v27 = (objc_class *)objc_opt_class(v25);
        v28 = NSStringFromClass(v27);
        v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
        if ((objc_opt_respondsToSelector(v26, "accessibilityIdentifier") & 1) != 0)
        {
          v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "performSelector:", "accessibilityIdentifier"));
          v31 = v30;
          if (v30 && !objc_msgSend(v30, "isEqualToString:", v29))
          {
            v32 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v29, v26, v31));

            goto LABEL_24;
          }

        }
        v32 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v29, v26));
LABEL_24:

LABEL_26:
        *(_DWORD *)buf = 138544130;
        v34 = v14;
        v35 = 2048;
        v36 = v15;
        v37 = 2112;
        v38 = v24;
        v39 = 2112;
        v40 = v32;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[%{public}@] Did change layout: %lu for container: %@ continee: %@", buf, 0x2Au);

        goto LABEL_27;
      }
      v18 = (objc_class *)objc_opt_class(v16);
      v19 = NSStringFromClass(v18);
      v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
      if ((objc_opt_respondsToSelector(v17, "accessibilityIdentifier") & 1) != 0)
      {
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "performSelector:", "accessibilityIdentifier"));
        v22 = v21;
        if (v21 && !objc_msgSend(v21, "isEqualToString:", v20))
        {
          v23 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v20, v17, v22));

          goto LABEL_16;
        }

      }
      v23 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v20, v17));
LABEL_16:

      goto LABEL_18;
    }
    v8 = (objc_class *)objc_opt_class(v6);
    v9 = NSStringFromClass(v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    if ((objc_opt_respondsToSelector(v7, "accessibilityIdentifier") & 1) != 0)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "performSelector:", "accessibilityIdentifier"));
      v12 = v11;
      if (v11 && !objc_msgSend(v11, "isEqualToString:", v10))
      {
        v13 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v10, v7, v12));

        goto LABEL_8;
      }

    }
    v13 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v10, v7));
LABEL_8:

    goto LABEL_10;
  }
LABEL_27:

}

void sub_1008DCDC8(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  void *v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 72));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "sheetPresentationController"));
  objc_msgSend(v4, "setSelectedDetentIdentifier:", v2);

  v5 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 88));
  objc_msgSend(v5, "animateAlongsideCardTransition");

}

uint64_t sub_1008DCE38(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1008DCE44(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;

  v2 = *(_QWORD *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 72));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "sheetPresentationController"));
  objc_msgSend(v4, "setSelectedDetentIdentifier:", v2);

  v5 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 72));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "view"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "window"));
  objc_msgSend(v7, "layoutIfNeeded");

  v8 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 88));
  objc_msgSend(v8, "animateAlongsideCardTransition");

}

uint64_t sub_1008DCEEC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1008DD4E8(uint64_t a1)
{
  id v2;
  void *v3;
  id WeakRetained;

  v2 = objc_msgSend(*(id *)(a1 + 32), "hidden");
  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 72));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "sheetPresentationController"));
  objc_msgSend(v3, "_setHidden:", v2);

}

void sub_1008DD9D4(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 72));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "sheetPresentationController"));
  objc_msgSend(v1, "invalidateDetents");

}

id sub_1008DE4C8(uint64_t a1)
{
  void *v2;
  double v3;
  double v4;
  id result;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewController"));
  objc_msgSend(v2, "heightForLayout:", 1);
  v4 = v3;

  result = objc_msgSend(*(id *)(a1 + 32), "_fullHeightFixed");
  if ((result & 1) == 0 && v4 != -1.0)
  {
    objc_msgSend(*(id *)(a1 + 32), "bottomSafeOffset");
    return objc_msgSend(*(id *)(a1 + 32), "grabberSafeAreaHeight");
  }
  return result;
}

void sub_1008DE54C(uint64_t a1)
{
  void *v2;
  double v3;
  double v4;
  void *v5;
  double v6;
  double v7;

  if (objc_msgSend(*(id *)(a1 + 32), "presentedModally"))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewController"));
    objc_msgSend(v2, "heightForLayout:", 5);
    v4 = v3;

    if (v4 != -1.0)
      goto LABEL_4;
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewController"));
  objc_msgSend(v5, "heightForLayout:", 3);
  v7 = v6;

  if (v7 != -1.0)
LABEL_4:
    objc_msgSend(*(id *)(a1 + 32), "bottomSafeOffset");
}

double sub_1008DE5F0(uint64_t a1, void *a2)
{
  id v3;
  double v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;

  v3 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "containerStyle") == (id)4)
  {
    v4 = (*(double (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewController"));
    objc_msgSend(v5, "heightForLayout:", 2);
    v7 = v6;

    if ((objc_msgSend(*(id *)(a1 + 32), "_fullHeightFixed") & 1) != 0 || v7 == -1.0)
    {
      v4 = UISheetPresentationControllerDetentInactive;
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 32), "bottomSafeOffset");
      v9 = v7 - v8;
      objc_msgSend(*(id *)(a1 + 32), "grabberSafeAreaHeight");
      v4 = v9 + v10;
    }
  }

  return v4;
}

double sub_1008DE6B4(uint64_t a1, void *a2)
{
  id v3;
  double v4;

  v3 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "containerStyle") == (id)4)
    v4 = UISheetPresentationControllerDetentInactive;
  else
    v4 = (*(double (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

  return v4;
}

void sub_1008DED28(uint64_t a1)
{
  void *v2;
  double Height;
  id v4;
  void *v5;
  id WeakRetained;
  CGRect v7;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 88));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "statusBarSupplementaryView"));
  objc_msgSend(v2, "frame");
  Height = CGRectGetHeight(v7);
  v4 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 72));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "sheetPresentationController"));
  objc_msgSend(v5, "_setAdditionalMinimumTopInset:", Height);

}

double sub_1008DF2A4(uint64_t a1, double a2)
{
  double v4;
  double v5;
  double v6;

  objc_msgSend(*(id *)(a1 + 32), "bottomSafeOffset");
  v5 = v4 + a2;
  objc_msgSend(*(id *)(a1 + 32), "grabberSafeAreaHeight");
  return v5 - v6;
}

void sub_1008DF4C0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CardPresentationController");
  v2 = (void *)qword_1014D3890;
  qword_1014D3890 = (uint64_t)v1;

}

void sub_1008DF678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

double sub_1008DF6A0(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  double v4;
  double v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "presentedViewController"));
    objc_msgSend(v3, "preferredContentSize");
    v5 = v4;

  }
  else
  {
    v5 = 0.0;
  }

  return v5;
}

id sub_1008DFDAC()
{
  if (qword_1014D38A8 != -1)
    dispatch_once(&qword_1014D38A8, &stru_1011DB3F8);
  return (id)qword_1014D38A0;
}

void sub_1008DFDEC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFCrowdsourcing");
  v2 = (void *)qword_1014D38A0;
  qword_1014D38A0 = (uint64_t)v1;

}

id sub_1008DFE1C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  _QWORD v6[4];
  id v7;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1008E052C;
  v6[3] = &unk_1011DAE28;
  v7 = a2;
  v3 = v7;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIAction actionWithTitle:image:identifier:handler:](UIAction, "actionWithTitle:image:identifier:handler:", a1, 0, 0, v6));

  return v4;
}

id HomeDeleteAction(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("[Maps Home] Delete"), CFSTR("localized string not found"), 0));
  v4 = sub_1008DFE1C((uint64_t)v3, v1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  return v5;
}

id HomeOpenInNewTabAction(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("[Maps Home] Open in New Tab"), CFSTR("localized string not found"), 0));
  v4 = sub_1008DFE1C((uint64_t)v3, v1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  return v5;
}

id HomeOpenInNewWindowAction(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("[Maps Home] Open in New Window"), CFSTR("localized string not found"), 0));
  v4 = sub_1008DFE1C((uint64_t)v3, v1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  return v5;
}

id HomeAddToFavoritesAction(void *a1)
{
  id v1;
  unsigned int v2;
  void *v3;
  void *v4;
  const __CFString *v5;
  void *v6;
  id v7;
  void *v8;

  v1 = a1;
  v2 = +[LibraryUIUtilities isMyPlacesEnabled](_TtC4Maps18LibraryUIUtilities, "isMyPlacesEnabled");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v4 = v3;
  if (v2)
    v5 = CFSTR("[Maps Home] Pin");
  else
    v5 = CFSTR("[Maps Home] Add to Favorites");
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localizedStringForKey:value:table:", v5, CFSTR("localized string not found"), 0));
  v7 = sub_1008DFE1C((uint64_t)v6, v1);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

  return v8;
}

id HomeRemoveFromFavoritesAction(void *a1)
{
  id v1;
  unsigned int v2;
  void *v3;
  void *v4;
  const __CFString *v5;
  void *v6;
  id v7;
  void *v8;

  v1 = a1;
  v2 = +[LibraryUIUtilities isMyPlacesEnabled](_TtC4Maps18LibraryUIUtilities, "isMyPlacesEnabled");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v4 = v3;
  if (v2)
    v5 = CFSTR("[Maps Home] Unpin");
  else
    v5 = CFSTR("[Maps Home] Remove from Favorites");
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localizedStringForKey:value:table:", v5, CFSTR("localized string not found"), 0));
  v7 = sub_1008DFE1C((uint64_t)v6, v1);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

  return v8;
}

id HomeEditFavoriteAction(void *a1)
{
  id v1;
  unsigned int v2;
  void *v3;
  void *v4;
  const __CFString *v5;
  void *v6;
  id v7;
  void *v8;

  v1 = a1;
  v2 = +[LibraryUIUtilities isMyPlacesEnabled](_TtC4Maps18LibraryUIUtilities, "isMyPlacesEnabled");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v4 = v3;
  if (v2)
    v5 = CFSTR("[Maps Home] Edit Pin");
  else
    v5 = CFSTR("[Maps Home] Edit Favorite");
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localizedStringForKey:value:table:", v5, CFSTR("localized string not found"), 0));
  v7 = sub_1008DFE1C((uint64_t)v6, v1);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

  return v8;
}

id HomeAddToCollectionAction(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("[Maps Home] Add New Place"), CFSTR("localized string not found"), 0));
  v4 = sub_1008DFE1C((uint64_t)v3, v1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  return v5;
}

id HomeRemoveFromCollectionAction(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("[Maps Home] Remove from Guide"), CFSTR("localized string not found"), 0));

  v4 = sub_1008DFE1C((uint64_t)v3, v1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  return v5;
}

id HomeDuplicateCollectionAction(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("[Maps Home] Duplicate Guide"), CFSTR("localized string not found"), 0));

  v4 = sub_1008DFE1C((uint64_t)v3, v1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  return v5;
}

id HomeEditCollectionAction(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("[Maps Home] Edit Guide"), CFSTR("localized string not found"), 0));

  v4 = sub_1008DFE1C((uint64_t)v3, v1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  return v5;
}

id HomeDeleteCollectionAction(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("[Maps Home] Delete Guide"), CFSTR("localized string not found"), 0));

  v4 = sub_1008DFE1C((uint64_t)v3, v1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  return v5;
}

id HomeRenameCollectionMapItemAction(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("[Maps Home] Rename Place"), CFSTR("localized string not found"), 0));
  v4 = sub_1008DFE1C((uint64_t)v3, v1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  return v5;
}

uint64_t sub_1008E052C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

BOOL sub_1008E0894(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  int *v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v12 = 0;
        v13 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 12) |= 1u;
        while (1)
        {
          v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v18 = &OBJC_IVAR___DirectionsPlanTransitPreferences__avoidBusRoutes;
            goto LABEL_52;
          }
          v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0)
            break;
          v12 += 7;
          v17 = v13++ > 8;
          if (v17)
          {
            v14 = 0;
            v18 = &OBJC_IVAR___DirectionsPlanTransitPreferences__avoidBusRoutes;
            goto LABEL_55;
          }
        }
        v18 = &OBJC_IVAR___DirectionsPlanTransitPreferences__avoidBusRoutes;
        goto LABEL_53;
      case 2u:
        v19 = 0;
        v20 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 12) |= 4u;
        while (2)
        {
          v21 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v18 = &OBJC_IVAR___DirectionsPlanTransitPreferences__avoidMetroLightRailRoutes;
            goto LABEL_52;
          }
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
          v14 |= (unint64_t)(v22 & 0x7F) << v19;
          if (v22 < 0)
          {
            v19 += 7;
            v17 = v20++ > 8;
            if (v17)
            {
              v14 = 0;
              v18 = &OBJC_IVAR___DirectionsPlanTransitPreferences__avoidMetroLightRailRoutes;
              goto LABEL_55;
            }
            continue;
          }
          break;
        }
        v18 = &OBJC_IVAR___DirectionsPlanTransitPreferences__avoidMetroLightRailRoutes;
        goto LABEL_53;
      case 3u:
        v23 = 0;
        v24 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 12) |= 8u;
        while (2)
        {
          v25 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v25 == -1 || v25 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v18 = &OBJC_IVAR___DirectionsPlanTransitPreferences__avoidRailRoutes;
            goto LABEL_52;
          }
          v26 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 1;
          v14 |= (unint64_t)(v26 & 0x7F) << v23;
          if (v26 < 0)
          {
            v23 += 7;
            v17 = v24++ > 8;
            if (v17)
            {
              v14 = 0;
              v18 = &OBJC_IVAR___DirectionsPlanTransitPreferences__avoidRailRoutes;
              goto LABEL_55;
            }
            continue;
          }
          break;
        }
        v18 = &OBJC_IVAR___DirectionsPlanTransitPreferences__avoidRailRoutes;
        goto LABEL_53;
      case 4u:
        v27 = 0;
        v28 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 12) |= 2u;
        break;
      default:
        if ((PBReaderSkipValueWithTag(a2) & 1) != 0)
          continue;
        return 0;
    }
    while (1)
    {
      v29 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v29 == -1 || v29 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v30 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29 + 1;
      v14 |= (unint64_t)(v30 & 0x7F) << v27;
      if ((v30 & 0x80) == 0)
      {
        v18 = &OBJC_IVAR___DirectionsPlanTransitPreferences__avoidFerryRoutes;
        goto LABEL_53;
      }
      v27 += 7;
      v17 = v28++ > 8;
      if (v17)
      {
        v14 = 0;
        v18 = &OBJC_IVAR___DirectionsPlanTransitPreferences__avoidFerryRoutes;
        goto LABEL_55;
      }
    }
    v18 = &OBJC_IVAR___DirectionsPlanTransitPreferences__avoidFerryRoutes;
LABEL_52:
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_53:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v14 = 0;
LABEL_55:
    *(_BYTE *)(a1 + *v18) = v14 != 0;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1008E15E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[SearchFieldItem searchFieldItemWithWaypointRequest:resolvedWaypoint:](SearchFieldItem, "searchFieldItemWithWaypointRequest:resolvedWaypoint:", a2, a3));
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v4);

}

void sub_1008E249C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1008E24B8(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  void *v5;
  id v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = WeakRetained;
  if (a2 && WeakRetained)
  {
    v6 = WeakRetained;
    objc_msgSend(*(id *)(a1 + 32), "viewControllerShowOfflineMaps:", WeakRetained);
    v5 = v6;
  }

}

void sub_1008E2764(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fetchCurrentRoute"));
  objc_msgSend(*(id *)(a1 + 32), "_checkRouteProximityForManualFraming:");
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56))
  {
    v2 = objc_msgSend(objc_alloc((Class)GEOTransitVehicleUpdater), "initWithDelegate:", *(_QWORD *)(a1 + 32));
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(v3 + 56);
    *(_QWORD *)(v3 + 56) = v2;

  }
}

id sub_1008E28AC(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "mapView"));
  objc_msgSend(v2, "_setupMapView:", v3);

  return _objc_msgSend(*(id *)(a1 + 32), "_updateCurrentRouteIfNeeded");
}

id sub_1008E28F4(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapView"));
  objc_msgSend(v2, "setMapType:", 104);

  objc_msgSend(*(id *)(a1 + 40), "_updateAnnotationsForCurrentRoute");
  objc_msgSend(*(id *)(a1 + 40), "_pauseOrResumeRealtimeUpdatesIfNeeded");
  objc_msgSend(*(id *)(a1 + 40), "updateTransitVehicleUpdaterIfNeeded");
  if (objc_msgSend(*(id *)(a1 + 40), "_shouldUseManualFraming"))
    objc_msgSend(*(id *)(a1 + 40), "manuallyFrameCurrentStep");
  return objc_msgSend(*(id *)(a1 + 40), "canRecenterDidChange");
}

id sub_1008E29D8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "mapView"));
  objc_msgSend(v2, "_restoreMapView:", v3);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_navCameraController"));
  objc_msgSend(v4, "frameVehiclePositions:", &__NSArray0__struct);

  v5 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v5 + 48))
  {
    *(_BYTE *)(v5 + 48) = 0;
    objc_msgSend(*(id *)(a1 + 32), "stopRequestingRealtimeUpdates");
    v5 = *(_QWORD *)(a1 + 32);
  }
  return objc_msgSend(*(id *)(v5 + 8), "setManeuverDisplayEnabled:", 0);
}

void sub_1008E3140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1008E315C(uint64_t a1, double a2, double a3, double a4, double a5)
{
  _QWORD *WeakRetained;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  void *v17;
  void *v18;
  id v19;
  NSObject *v20;
  __CFString *v21;
  __CFString *v22;
  void *v23;
  void *v24;
  _QWORD v25[5];
  uint8_t buf[4];
  __CFString *v27;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v11 = WeakRetained;
  if (WeakRetained)
  {
    v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "chromeViewController"));
    if (v12)
    {
      v13 = (void *)v12;
      if (objc_msgSend(v11, "_shouldUseManualFraming"))
      {

      }
      else
      {
        v14 = v11[5];

        if (!v14)
          goto LABEL_16;
      }
      if (objc_msgSend(*(id *)(a1 + 32), "isNavigationCameraTracking"))
      {
        v15 = sub_10043309C();
        v16 = objc_claimAutoreleasedReturnValue(v15);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "Will manually frame step but navigation display is unexpectedly running. Will attempt to pause it.", buf, 2u);
        }

        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chromeViewController"));
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "navigationDisplay"));
        v25[0] = _NSConcreteStackBlock;
        v25[1] = 3221225472;
        v25[2] = sub_1008E3394;
        v25[3] = &unk_1011AD430;
        v25[4] = *(_QWORD *)(a1 + 32);
        objc_msgSend(v18, "configureDisplay:animated:", v25, 0);

      }
      v19 = sub_10043309C();
      v20 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40))
          v21 = CFSTR("YES");
        else
          v21 = CFSTR("NO");
        v22 = v21;
        *(_DWORD *)buf = 138477827;
        v27 = v22;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Applying manual camera frame for displayed step/point-to-point (temporary: %{private}@)", buf, 0xCu);

      }
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "chromeViewController"));
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "mapView"));

      objc_msgSend(v24, "animateToVisibleMapRect:usingDefaultAnimationDuration:resetHeading:completion:", 1, 1, 0, a2, a3, a4, a5);
    }
  }
LABEL_16:

}

id sub_1008E3394(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_updateNavigationDisplayConfigurationForDisplayedStep:", a2);
}

id sub_1008E37F0(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_updateNavigationDisplayConfigurationForDisplayedStep:", a2);
}

void sub_1008E6128(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  objc_class *v10;
  NSString *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;

  v17 = a2;
  v5 = a3;
  if (v5)
  {
    v6 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0
      || (v7 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v5, v7) & 1) != 0))
    {
      v8 = v5;
LABEL_11:
      v15 = *(void **)(a1 + 32);
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: %@"), v17, v8));
      objc_msgSend(v15, "addObject:", v16);

      goto LABEL_12;
    }
    v9 = v5;
    v10 = (objc_class *)objc_opt_class(v9);
    v11 = NSStringFromClass(v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    if ((objc_opt_respondsToSelector(v9, "accessibilityIdentifier") & 1) != 0)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "performSelector:", "accessibilityIdentifier"));
      v14 = v13;
      if (v13 && !objc_msgSend(v13, "isEqualToString:", v12))
      {
        v8 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v12, v9, v14));

        goto LABEL_10;
      }

    }
    v8 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v12, v9));
LABEL_10:

    goto LABEL_11;
  }
LABEL_12:

}

void sub_1008E62A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v4;

  if (a3)
  {
    v3 = *(void **)(a1 + 32);
    v4 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: %@"), a2, a3));
    objc_msgSend(v3, "addObject:", v4);

  }
}

id sub_1008E718C()
{
  void *v0;
  void *v1;

  if (+[CarVisualEffectView isDisablingBlur](CarVisualEffectView, "isDisablingBlur"))
  {
    v0 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.968627453, 0.972549021, 0.984313726, 1.0));
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIVisualEffect effectCompositingColor:](UIVisualEffect, "effectCompositingColor:", v0));

  }
  else
  {
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIBlurEffect effectWithStyle:](UIBlurEffect, "effectWithStyle:", 14));
  }
  return v1;
}

void sub_1008E72E8(id a1)
{
  MapsARSessionIndoorOutdoorFloatingDebugViewController *v1;
  void *v2;

  v1 = objc_opt_new(MapsARSessionIndoorOutdoorFloatingDebugViewController);
  v2 = (void *)qword_1014D38B8;
  qword_1014D38B8 = (uint64_t)v1;

}

void sub_1008E78FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1008E7EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1008E7EC8(id a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_1014D38D0;
  qword_1014D38D0 = (uint64_t)v1;

  objc_msgSend((id)qword_1014D38D0, "setDateFormat:", CFSTR("yyyy-MM-dd HH:mm:ss.SSSSSSZZZ"));
  v3 = objc_msgSend(objc_alloc((Class)NSLocale), "initWithLocaleIdentifier:", CFSTR("en_US_POSIX"));
  objc_msgSend((id)qword_1014D38D0, "setLocale:", v3);

}

void sub_1008E8184(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1008E81A4(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  id v3;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "updateDebugText");

  v3 = objc_loadWeakRetained(v1);
  objc_msgSend(v3, "updateTintAndIconLabel");

}

void sub_1008E905C(_QWORD *a1, uint64_t a2, void *a3)
{
  void *v5;
  void *v6;
  id v7;
  id v8;

  v5 = (void *)a1[4];
  v6 = (void *)a1[5];
  v7 = a3;
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifierPathByAppendingIdentifier:", a2));
  objc_msgSend(v5, "_visitNode:identifierPath:block:", v7, v8, a1[6]);

}

void sub_1008E91C0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  unsigned int v8;
  void *v9;
  id v10;

  v10 = a2;
  v5 = a3;
  if (objc_msgSend(v5, "hasPrefix:", *(_QWORD *)(a1 + 32)))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "expandedValue"));

    if (v6)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "expandedValue"));
      v8 = objc_msgSend(v7, "BOOLValue");

      v9 = *(void **)(a1 + 40);
      if (v8)
        objc_msgSend(v9, "addObject:", v5);
      else
        objc_msgSend(v9, "removeObject:", v5);
    }
  }

}

void sub_1008E9730(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  id v6;
  id v7;

  v5 = *(void **)(a1 + 32);
  v6 = a2;
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "_storageNodeForExpandedIdentifierPaths:", a3));
  objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v7, v6);

}

void sub_1008E9D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1008E9DB0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1008E9E54;
  v5[3] = &unk_1011AD1E8;
  objc_copyWeak(&v7, (id *)(a1 + 32));
  v6 = v3;
  v4 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v5);

  objc_destroyWeak(&v7);
}

void sub_1008E9E54(uint64_t a1)
{
  id v2;
  void *v3;
  _QWORD *WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v2 = objc_msgSend(*(id *)(a1 + 32), "copy");
    v3 = (void *)WeakRetained[12];
    WeakRetained[12] = v2;

    objc_msgSend(WeakRetained, "rebuildContent");
    objc_msgSend(WeakRetained, "updateSorting");
  }

}

void sub_1008EA1B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, id a19)
{
  id *v19;
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a19);
  _Unwind_Resume(a1);
}

void sub_1008EA1E4(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  void *v6;
  id v7;
  _QWORD *v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  uint8_t buf[4];
  id v17;
  __int16 v18;
  id v19;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    v5 = objc_loadWeakRetained(a1 + 7);
    v6 = v5;
    if (v5)
    {
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_1008EA3A4;
      v12[3] = &unk_1011AECC0;
      v7 = v5;
      v13 = v7;
      v14 = WeakRetained;
      v15 = a1[5];
      v8 = objc_retainBlock(v12);
      v9 = sub_100431C0C();
      v10 = objc_claimAutoreleasedReturnValue(v9);
      v11 = v10;
      if (v3)
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412546;
          v17 = v7;
          v18 = 2112;
          v19 = v3;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "NavigationRouteInterrupter: Failed to interrupt an entry: %@ with error: %@", buf, 0x16u);
        }

      }
      else
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v17 = v7;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "NavigationRouteInterrupter: Finished interrupting entry: %@. Will hint refresh.", buf, 0xCu);
        }

        objc_msgSend(a1[4], "hintRefreshOfType:", 11);
      }
      ((void (*)(_QWORD *))v8[2])(v8);

    }
  }

}

void sub_1008EA3A4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  NSObject *v8;
  id WeakRetained;
  id v10;
  uint64_t v11;
  int v12;
  id v13;
  __int16 v14;
  void *v15;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "historyEntry"));
  v3 = objc_opt_class(_TtC8MapsSync14MapsSyncObject);
  if ((objc_opt_isKindOfClass(v2, v3) & 1) != 0)
    v4 = v2;
  else
    v4 = 0;
  v5 = v4;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
  v7 = sub_100431C0C();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 40) + 8));
    v12 = 138412546;
    v13 = WeakRetained;
    v14 = 2112;
    v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "NavigationRouteInterrupter: Will notify delegate: %@ of interruption with identifier: %@", (uint8_t *)&v12, 0x16u);

  }
  v10 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 40) + 8));
  objc_msgSend(v10, "navigationRouteInterrupter:finishedInteruptingEntryWithIdentifier:", *(_QWORD *)(a1 + 40), v6);

  v11 = *(_QWORD *)(a1 + 48);
  if (v11)
    (*(void (**)(void))(v11 + 16))();

}

void sub_1008EA75C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, id a19)
{
  id *v19;
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a19);
  _Unwind_Resume(a1);
}

void sub_1008EA790(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  id v11;
  __int16 v12;
  id v13;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v5 = objc_loadWeakRetained((id *)(a1 + 56));
    if (v5)
    {
      v6 = sub_100431C0C();
      v7 = objc_claimAutoreleasedReturnValue(v6);
      v8 = v7;
      if (v3)
      {
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          v10 = 138412546;
          v11 = v5;
          v12 = 2112;
          v13 = v3;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "NavigationRouteInterrupter: Failed to cancel interruption on entry: %@ with error: %@", (uint8_t *)&v10, 0x16u);
        }

      }
      else
      {
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          v10 = 138412290;
          v11 = v5;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "NavigationRouteInterrupter: Finished cancelling interruption on entry: %@. Will hint refresh.", (uint8_t *)&v10, 0xCu);
        }

        objc_msgSend(*(id *)(a1 + 32), "hintRefreshOfType:", 11);
      }
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
        (*(void (**)(void))(v9 + 16))();
    }

  }
}

void sub_1008EB428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(location);
  objc_destroyWeak(&a22);
  _Unwind_Resume(a1);
}

void sub_1008EB454(uint64_t a1, void *a2)
{
  id *v3;
  id WeakRetained;
  id v5;

  v3 = (id *)(a1 + 40);
  v5 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  objc_msgSend(WeakRetained, "setCachedLoadResult:", v5);

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1008EB4B0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  _QWORD *v15;
  void (**v16)(_QWORD, _QWORD, _QWORD);
  id v17;

  v17 = a2;
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "address"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "waypointCompositeName"));

  if (v17 && v8)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "mapItemStorage"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "userValues"));
    v11 = v10;
    if (v10)
      v12 = v10;
    else
      v12 = (id)objc_opt_new(GEOMapItemStorageUserValues);
    v13 = v12;

    objc_msgSend(v13, "setName:", v8);
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "mapItemStorage"));
    objc_msgSend(v14, "setUserValues:", v13);

  }
  v15 = sub_10089D054(*(void **)(a1 + 32));
  v16 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(v15);
  ((void (**)(_QWORD, id, id))v16)[2](v16, v17, v5);

}

void sub_1008EB7E4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  objc_class *v10;
  NSString *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;

  v17 = a2;
  v5 = a3;
  if (v5)
  {
    v6 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0
      || (v7 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v5, v7) & 1) != 0))
    {
      v8 = v5;
LABEL_11:
      v15 = *(void **)(a1 + 32);
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: %@"), v17, v8));
      objc_msgSend(v15, "addObject:", v16);

      goto LABEL_12;
    }
    v9 = v5;
    v10 = (objc_class *)objc_opt_class(v9);
    v11 = NSStringFromClass(v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    if ((objc_opt_respondsToSelector(v9, "accessibilityIdentifier") & 1) != 0)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "performSelector:", "accessibilityIdentifier"));
      v14 = v13;
      if (v13 && !objc_msgSend(v13, "isEqualToString:", v12))
      {
        v8 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v12, v9, v14));

        goto LABEL_10;
      }

    }
    v8 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v12, v9));
LABEL_10:

    goto LABEL_11;
  }
LABEL_12:

}

void sub_1008EB964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v4;

  if (a3)
  {
    v3 = *(void **)(a1 + 32);
    v4 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: %@"), a2, a3));
    objc_msgSend(v3, "addObject:", v4);

  }
}

id sub_1008EC474(uint64_t a1)
{
  void *v1;
  const __CFString *v2;
  void *v3;

  switch(a1)
  {
    case 1:
      v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIImageSymbolConfiguration configurationWithPointSize:weight:](UIImageSymbolConfiguration, "configurationWithPointSize:weight:", 4, 15.0));
      v2 = CFSTR("car.fill");
      goto LABEL_8;
    case 2:
      v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIImageSymbolConfiguration configurationWithPointSize:weight:](UIImageSymbolConfiguration, "configurationWithPointSize:weight:", 4, 15.0));
      v2 = CFSTR("figure.walk");
      goto LABEL_8;
    case 3:
      v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIImageSymbolConfiguration configurationWithPointSize:weight:](UIImageSymbolConfiguration, "configurationWithPointSize:weight:", 4, 15.0));
      v2 = CFSTR("tram.fill");
      goto LABEL_8;
    case 4:
      v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIImageSymbolConfiguration configurationWithPointSize:weight:](UIImageSymbolConfiguration, "configurationWithPointSize:weight:", 4, 15.0));
      v2 = CFSTR("figure.wave");
      goto LABEL_8;
    case 5:
      v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIImageSymbolConfiguration configurationWithPointSize:weight:](UIImageSymbolConfiguration, "configurationWithPointSize:weight:", 6, 15.0));
      v2 = CFSTR("bicycle");
LABEL_8:
      v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage systemImageNamed:withConfiguration:](UIImage, "systemImageNamed:withConfiguration:", v2, v1));

      break;
    default:
      v3 = 0;
      break;
  }
  return v3;
}

id sub_1008EC5D4(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  const __CFString *v4;

  switch(a1)
  {
    case 0:
      v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v3 = v2;
      v4 = CFSTR("[Transport Type Picker] Undefined");
      goto LABEL_8;
    case 1:
      v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v3 = v2;
      v4 = CFSTR("[Transport Type Picker] Drive");
      goto LABEL_8;
    case 2:
      v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v3 = v2;
      v4 = CFSTR("[Transport Type Picker] Walk");
      goto LABEL_8;
    case 3:
      v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v3 = v2;
      v4 = CFSTR("[Transport Type Picker] Transit");
      goto LABEL_8;
    case 4:
      v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v3 = v2;
      v4 = CFSTR("[Transport Type Picker] Ride Share");
      goto LABEL_8;
    case 5:
      v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v3 = v2;
      v4 = CFSTR("[Transport Type Picker] Cycle");
LABEL_8:
      v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:", v4, CFSTR("localized string not found"), 0));

      break;
    default:
      return v1;
  }
  return v1;
}

void sub_1008ECA78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1008ECAD0(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    objc_msgSend(WeakRetained, "setValue:", *(_QWORD *)(a1 + 32));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "delegate"));
    objc_msgSend(v3, "updatedRefinementModel:", v4);

    WeakRetained = v4;
  }

}

id sub_1008ECD84(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_startTestAndPerformScrollTest");
}

id sub_1008ECE24(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_selectAndScrollAllCuratedCollections");
}

void sub_1008ECEA0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v5[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "testCoordinator"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "pptTestScrollView"));

  v4 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1008ECF30;
  v5[3] = &unk_1011D95F0;
  v5[4] = v4;
  objc_msgSend(v4, "_performScrollTestOfScrollView:completion:", v3, v5);

}

id sub_1008ECF30(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "results"));
  objc_msgSend(v5, "addEntriesFromDictionary:", v4);

  return objc_msgSend(*(id *)(a1 + 32), "finishedTest");
}

uint64_t sub_1008ED018(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_1008ED10C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t PlaceCardItemsAreEqual(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3 == v4)
  {
    v6 = 1;
  }
  else if ((v3 || !v4) && (!v3 || v4))
  {
    v6 = (uint64_t)objc_msgSend(v3, "isEqual:", v4);
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_1008EE448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1008EE468(uint64_t a1)
{
  void *v1;
  void (**v2)(_QWORD, _QWORD);
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "actionHandler"));

  if (v1)
  {
    v2 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "actionHandler"));
    ((void (**)(_QWORD, id))v2)[2](v2, WeakRetained);

  }
}

uint64_t sub_1008EE79C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_1008EEF48(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];

  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = a1;
  v2 = (uint64_t)objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v2)
  {
    v3 = *(_QWORD *)v7;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v7 != v3)
          objc_enumerationMutation(v1);
        if (!objc_msgSend(*(id *)(*((_QWORD *)&v6 + 1) + 8 * i), "type", (_QWORD)v6))
        {
          v2 = 1;
          goto LABEL_11;
        }
      }
      v2 = (uint64_t)objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
      if (v2)
        continue;
      break;
    }
  }
LABEL_11:

  return v2;
}

id sub_1008EF45C()
{
  if (qword_1014D38E0 != -1)
    dispatch_once(&qword_1014D38E0, &stru_1011DB678);
  return (id)qword_1014D38D8;
}

void sub_1008EFAB8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "PedestrianARUsageMigratorTask");
  v2 = (void *)qword_1014D38D8;
  qword_1014D38D8 = (uint64_t)v1;

}

const __CFString *sub_1008EFAE8(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3)
    return CFSTR("unknown");
  else
    return off_1011DB698[a1 - 1];
}

id sub_1008EFB10(uint64_t a1)
{
  void *v1;
  void *v2;
  const __CFString *v3;
  void *v4;

  switch(a1)
  {
    case 1:
      v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v2 = v1;
      v3 = CFSTR("Error: route request missing origin [Nano]");
      break;
    case 2:
      v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v2 = v1;
      v3 = CFSTR("Error: route request missing destination [Nano]");
      break;
    case 3:
      v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v2 = v1;
      v3 = CFSTR("Error: connection error [Nano]");
      break;
    case 4:
      v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v2 = v1;
      v3 = CFSTR("Error: waypoint refinement error [Nano]");
      break;
    default:
      v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v2 = v1;
      v3 = CFSTR("Error: unknown error [Nano]");
      break;
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "localizedStringForKey:value:table:", v3, CFSTR("localized string not found"), 0));

  return v4;
}

const __CFString *sub_1008EFC08(unint64_t a1)
{
  if (a1 > 4)
    return CFSTR("unknown");
  else
    return off_1011DB6B8[a1];
}

id sub_1008F0F04()
{
  if (qword_1014D38F0 != -1)
    dispatch_once(&qword_1014D38F0, &stru_1011DB708);
  return (id)qword_1014D38E8;
}

void sub_1008F1454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1008F147C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id WeakRetained;
  void *v5;
  const __CFString *v6;
  uint64_t v7;
  BOOL v8;
  id v9;
  int v10;
  id v11;
  __int16 v12;
  const __CFString *v13;
  __int16 v14;
  uint64_t v15;

  v2 = sub_1008F0F04();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v5 = WeakRetained;
    v6 = CFSTR("VIOSessionThrottleEventDeviceMotion");
    v7 = *(_QWORD *)(a1 + 48);
    v8 = *(_QWORD *)(a1 + 40) == 0;
    v10 = 134349570;
    if (v8)
      v6 = CFSTR("VIOSessionThrottleEventARTrackingState");
    v11 = WeakRetained;
    v12 = 2112;
    v13 = v6;
    v14 = 2048;
    v15 = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%{public}p] Detected consecutive throttle event of type %@ for longer than %f seconds", (uint8_t *)&v10, 0x20u);

  }
  v9 = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(v9, "throttleSessionWithEventReason:", *(_QWORD *)(a1 + 40));

}

void sub_1008F30D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1008F30F8(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id WeakRetained;
  id *v5;
  id v6;
  id v7;
  void *v8;
  int v9;
  id v10;

  v2 = sub_1008F0F04();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v9 = 134349056;
    v10 = WeakRetained;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%{public}p] Retry timer fired", (uint8_t *)&v9, 0xCu);

  }
  v5 = (id *)(a1 + 32);
  v6 = objc_loadWeakRetained(v5);
  objc_msgSend(v6, "resumeSession");

  v7 = objc_loadWeakRetained(v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "observers"));
  objc_msgSend(v8, "throttleDidEnd");

}

void sub_1008F37B8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VIOSessionStateManager");
  v2 = (void *)qword_1014D38E8;
  qword_1014D38E8 = (uint64_t)v1;

}

void sub_1008F3C44(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  objc_msgSend(v3, "stop");
  objc_msgSend(v3, "setOriginatingDeviceFromOrigin:", *(_QWORD *)(a1 + 40));
  v4 = *(_QWORD *)(a1 + 32);
  v5 = objc_msgSend(v3, "copyCurrentPartialRecording");

  (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);
}

uint64_t sub_1008F3DC4(uint64_t a1)
{
  void *v2;
  uint64_t result;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "addObserver:selector:name:object:", *(_QWORD *)(a1 + 32), "_updateWatchControls", NRPairedDeviceRegistryDeviceDidPairNotification, 0);

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 32));
  return result;
}

void sub_1008F4224(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  RAPAuxiliaryControlWatch *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  RAPAuxiliaryControlWatch *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];

  v3 = a2;
  --*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v16;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v16 != v6)
          objc_enumerationMutation(v3);
        v8 = -[RAPAuxiliaryControlWatch initWithPropertiesOfDevice:]([RAPAuxiliaryControlWatch alloc], "initWithPropertiesOfDevice:", *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)v7));
        if (v8)
        {
          if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "isSameControlAsControl:", v8))
          {
            if (-[RAPAuxiliaryControlWatch isActive](v8, "isActive"))
              goto LABEL_13;
            v9 = *(_QWORD *)(a1 + 32);
            v10 = *(void **)(v9 + 48);
            *(_QWORD *)(v9 + 48) = 0;
          }
          else
          {
            objc_msgSend(*(id *)(a1 + 32), "_addControlIfNotDuplicate:", v8);
            if (!-[RAPAuxiliaryControlWatch isActive](v8, "isActive"))
              goto LABEL_13;
            v11 = *(_QWORD *)(a1 + 32);
            v12 = v8;
            v10 = *(void **)(v11 + 48);
            *(_QWORD *)(v11 + 48) = v12;
          }

        }
LABEL_13:

        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v5);
  }
  v13 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v13 + 10))
  {
    objc_storeStrong((id *)(v13 + 32), *(id *)(v13 + 48));
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 10) = 0;
  }
  v14 = *(_QWORD *)(a1 + 40);
  if (v14)
    (*(void (**)(void))(v14 + 16))();

}

void sub_1008F4CA0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  id v10;
  __CFString *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  __CFString *v16;
  char *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  NSObject *v34;
  char *v35;
  uint64_t v36;
  id v37;
  id obj;
  void *v39;
  __CFString *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint8_t v45[128];
  uint8_t buf[4];
  id v47;
  __int16 v48;
  __CFString *v49;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v5 || v6)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v8 = sub_1008F5030();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      v10 = objc_msgSend(v5, "count");
      v11 = *(__CFString **)(a1 + 40);
      *(_DWORD *)buf = 134218240;
      v47 = v10;
      v48 = 2048;
      v49 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Fetched %ld new data, the offset: %ld", buf, 0x16u);
    }
    v36 = a1;

    v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v41 = 0u;
    v42 = 0u;
    v43 = 0u;
    v44 = 0u;
    v37 = v5;
    obj = v5;
    v12 = (char *)objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v41, v45, 16);
    if (v12)
    {
      v13 = v12;
      v14 = 0;
      v15 = *(_QWORD *)v42;
      v16 = &stru_1011EB268;
      while (2)
      {
        v17 = 0;
        v18 = -(uint64_t)v14;
        v35 = &v14[(_QWORD)v13];
        do
        {
          if (*(_QWORD *)v42 != v15)
            objc_enumerationMutation(obj);
          v19 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * (_QWORD)v17);
          if ((char *)v18 == v17)
          {
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v41 + 1)
                                                                               + 8 * (_QWORD)v17), "communityID"));
            v21 = objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "communityIdentifier"));

            v16 = (__CFString *)v21;
          }
          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "communityID"));
          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "communityIdentifier"));
          if (-[__CFString isEqualToString:](v16, "isEqualToString:", v23))
          {

          }
          else
          {
            if (-[__CFString length](v16, "length"))
            {

              goto LABEL_24;
            }
            v40 = v16;
            v24 = v13;
            v25 = v18;
            v26 = v15;
            v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "communityID"));
            v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "communityIdentifier"));
            v29 = objc_msgSend(v28, "length");

            v15 = v26;
            v18 = v25;
            v13 = v24;
            v16 = v40;

            if (v29)
              goto LABEL_24;
          }
          v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "reportId"));
          v31 = objc_msgSend(v30, "length");

          if (v31)
          {
            v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "reportId"));
            objc_msgSend(v39, "addObject:", v32);

          }
          ++v17;
        }
        while (v13 != v17);
        v13 = (char *)objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v41, v45, 16);
        v14 = v35;
        if (v13)
          continue;
        break;
      }
    }
    else
    {
      v16 = &stru_1011EB268;
    }
LABEL_24:

    v33 = sub_1008F5030();
    v34 = objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      v47 = v39;
      v48 = 2112;
      v49 = v16;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "Fetching RAPRecords: %@ with communityID:%@", buf, 0x16u);
    }

    (*(void (**)(void))(*(_QWORD *)(v36 + 32) + 16))();
    v7 = 0;
    v5 = v37;
  }

}

id sub_1008F5030()
{
  if (qword_1014D3900 != -1)
    dispatch_once(&qword_1014D3900, &stru_1011DB818);
  return (id)qword_1014D38F8;
}

void sub_1008F51CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1008F51F0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  id v8;
  NSObject *v9;
  uint64_t v10;
  id v11;
  int v12;
  id v13;
  __int16 v14;
  id v15;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v8 = sub_1008F5030();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      v12 = 138412546;
      v13 = v5;
      v14 = 2112;
      v15 = v6;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Fetched contents %@ with error %@", (uint8_t *)&v12, 0x16u);
    }

    v10 = *(_QWORD *)(a1 + 32);
    v11 = objc_msgSend(v5, "copy");
    (*(void (**)(uint64_t, id, id))(v10 + 16))(v10, v11, v6);

  }
}

void sub_1008F54C4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  void *v6;
  int v7;
  void *v8;
  __int16 v9;
  id v10;

  v3 = a2;
  if (v3)
  {
    v4 = sub_1008F5030();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "problemId"));
      v7 = 138412546;
      v8 = v6;
      v9 = 2112;
      v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Failed to persist reviewed RAP identifier %@ with error %@", (uint8_t *)&v7, 0x16u);

    }
  }

}

void sub_1008F5B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  _Block_object_dispose(&a61, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1008F5B88(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1008F5B98(uint64_t a1)
{

}

void sub_1008F5BA0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v8 = v3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "reportId"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v5));

  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v6, 0, 0));
    objc_msgSend(v8, "setRapResponse:", v7);

  }
}

void sub_1008F5C30(uint64_t a1, void *a2)
{
  id v4;

  v4 = a2;
  if (v4)
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_1008F5C84(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v8 = v3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "reportId"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v5));

  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v6, 0, 0));
    objc_msgSend(v8, "setRapResponse:", v7);

  }
}

void sub_1008F5D14(uint64_t a1, void *a2)
{
  id v4;

  v4 = a2;
  if (v4)
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_1008F5D68(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v8 = v3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "reportId"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v5));

  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v6, 0, 0));
    objc_msgSend(v8, "setRapResponse:", v7);

  }
}

void sub_1008F5DF8(uint64_t a1, void *a2)
{
  id v4;

  v4 = a2;
  if (v4)
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

uint64_t sub_1008F5E4C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
}

void sub_1008F61E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1008F6214(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  void *v13;
  uint64_t v14;
  void *v15;
  _QWORD v16[4];
  id v17;
  id v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint8_t v23[128];
  uint8_t buf[4];
  id v25;
  __int16 v26;
  uint64_t v27;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v7 = sub_1008F5030();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      v25 = v5;
      v26 = 2112;
      v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Fetched contents %@ with error %@", buf, 0x16u);
    }

    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v9 = v5;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    if (v10)
    {
      v11 = *(_QWORD *)v20;
      do
      {
        for (i = 0; i != v10; i = (char *)i + 1)
        {
          if (*(_QWORD *)v20 != v11)
            objc_enumerationMutation(v9);
          v13 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)i);
          v14 = *(_QWORD *)(a1 + 40);
          if (v14)
            (*(void (**)(uint64_t, _QWORD))(v14 + 16))(v14, *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)i));
          objc_msgSend(v13, "setStatus:", *(__int16 *)(a1 + 56));
        }
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
      }
      while (v10);
    }

    v15 = (void *)objc_claimAutoreleasedReturnValue(+[MapsSyncStore sharedStore](_TtC8MapsSync13MapsSyncStore, "sharedStore"));
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_1008F645C;
    v16[3] = &unk_1011B0260;
    objc_copyWeak(&v18, (id *)(a1 + 48));
    v17 = *(id *)(a1 + 32);
    objc_msgSend(v15, "saveWithObjects:completionHandler:", v9, v16);

    objc_destroyWeak(&v18);
  }

}

void sub_1008F6440(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1008F645C(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  NSObject *v6;
  int v7;
  id v8;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v5 = sub_1008F5030();
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = 138412290;
      v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "committed batch with error %@", (uint8_t *)&v7, 0xCu);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

uint64_t sub_1008F6650(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1008F6664(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "RAPSubmissionStatusSyncHandler");
  v2 = (void *)qword_1014D38F8;
  qword_1014D38F8 = (uint64_t)v1;

}

void sub_1008F691C(id a1)
{
  VectorKitFloatingDebugViewController *v1;
  void *v2;

  v1 = objc_opt_new(VectorKitFloatingDebugViewController);
  v2 = (void *)qword_1014D3908;
  qword_1014D3908 = (uint64_t)v1;

}

void sub_1008F71E0(id a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_1014D3920;
  qword_1014D3920 = (uint64_t)v1;

  objc_msgSend((id)qword_1014D3920, "setDateFormat:", CFSTR("yyyy-MM-dd HH:mm:ss.SSSSSSZZZ"));
  v3 = objc_msgSend(objc_alloc((Class)NSLocale), "initWithLocaleIdentifier:", CFSTR("en_US_POSIX"));
  objc_msgSend((id)qword_1014D3920, "setLocale:", v3);

}

void sub_1008F7398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1008F73B4(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  id v3;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "updateDebugText");

  v3 = objc_loadWeakRetained(v1);
  objc_msgSend(v3, "startDebugInfoRefreshTimer");

}

id sub_1008F7B98()
{
  if (qword_1014D3930 != -1)
    dispatch_once(&qword_1014D3930, &stru_1011DB878);
  return (id)qword_1014D3928;
}

void sub_1008F7E74(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "DebugViewFrameHighlighter");
  v2 = (void *)qword_1014D3928;
  qword_1014D3928 = (uint64_t)v1;

}

void sub_1008F7EA4(id a1)
{
  uint64_t Integer;
  uint64_t v2;

  Integer = GEOConfigGetInteger(MapsConfig_NumberOfSuggestionsInTrayCarplay, off_1014B2F08);
  v2 = 5;
  if (Integer >= 1)
    v2 = Integer;
  qword_1014D3938 = v2;
}

void sub_1008F8228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1008F82CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1008F8540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1008F8704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1008F887C(uint64_t a1)
{
  int v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  int v10;
  uint64_t v11;
  const __CFString *v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  const __CFString *v16;
  __int16 v17;
  uint64_t v18;

  v2 = *(unsigned __int8 *)(a1 + 40);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "controller"));
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 32);
  if (v2)
    objc_msgSend(v3, "registerObserver:", v5);
  else
    objc_msgSend(v3, "unregisterObserver:", v5);

  v6 = sub_10043364C();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "controller"));
    v9 = (void *)v8;
    v10 = *(unsigned __int8 *)(a1 + 40);
    v11 = *(_QWORD *)(a1 + 32);
    v13 = 138412802;
    if (v10)
      v12 = CFSTR("Registered");
    else
      v12 = CFSTR("Unregistered");
    v14 = v8;
    v15 = 2112;
    v16 = v12;
    v17 = 2112;
    v18 = v11;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[CarMapsSuggestionsObserver_LowFuel] - The controllers (%@) has %@ object - %@ as Observers", (uint8_t *)&v13, 0x20u);

  }
}

BOOL sub_1008F8FAC(id a1, MapsSuggestionsEntry *a2)
{
  MapsSuggestionsEntry *v2;
  unint64_t v3;
  unsigned int v4;
  void *v6;

  v2 = a2;
  v3 = (unint64_t)-[MapsSuggestionsEntry type](v2, "type");
  LOBYTE(v4) = 1;
  if (v3 <= 0x16)
  {
    if (((1 << v3) & 0x7400C0) != 0)
    {
      LOBYTE(v4) = 0;
    }
    else if (v3 == 9)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(-[MapsSuggestionsEntry numberForKey:](v2, "numberForKey:", CFSTR("MapsSuggestionsIsNotADestinationKey")));
      v4 = objc_msgSend(v6, "BOOLValue") ^ 1;

    }
  }

  return v4;
}

void sub_1008F9324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1008F9348(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  id v6;
  id *v7;
  id WeakRetained;
  _QWORD block[4];
  id v10;
  uint8_t buf[4];
  id v12;

  v3 = a2;
  v4 = sub_10043364C();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[CarMapsSuggestionsController] suggestions: %@", buf, 0xCu);
  }

  v6 = objc_msgSend(v3, "copy");
  v7 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained(v7);
  objc_msgSend(WeakRetained, "setSuggestions:", v6);

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1008F9480;
  block[3] = &unk_1011AD260;
  objc_copyWeak(&v10, v7);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  objc_destroyWeak(&v10);

}

void sub_1008F9480(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_notifyObservers");

}

void sub_1008F955C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1008F9610(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1008F97B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1008F9950(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1008F9964(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  id v4;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "observers"));
  objc_sync_enter(v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "observers"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "allObjects"));
  v4 = objc_msgSend(v3, "count");

  if (!v4)
    objc_msgSend(WeakRetained, "setSinkAttached:", 0);
  objc_msgSend(WeakRetained, "setSinkDetaching:", 0);
  objc_sync_exit(v1);

}

void sub_1008F9A00(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1008F9C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1008F9C70(id a1, BOOL a2)
{
  _BOOL4 v2;
  id v3;
  NSObject *v4;
  __CFString *v5;
  __CFString *v6;
  int v7;
  __CFString *v8;

  v2 = a2;
  v3 = sub_10043364C();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = CFSTR("NO");
    if (v2)
      v5 = CFSTR("YES");
    v6 = v5;
    v7 = 138543362;
    v8 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[CarMapsSuggestionsController] processAssertion acquired=%{public}@", (uint8_t *)&v7, 0xCu);

  }
}

void sub_1008F9D34(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id WeakRetained;
  uint8_t v5[16];

  v2 = sub_10043364C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[CarMapsSuggestionsController] processAssertionTimer fired", v5, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setHoldProcessAssertion:", 0);

}

BOOL sub_1008FA06C(id a1, MapsSuggestionsEntry *a2)
{
  MapsSuggestionsEntry *v2;
  MapsSuggestionsOfflineService *v3;
  unsigned __int8 v4;

  v2 = a2;
  v3 = objc_alloc_init(MapsSuggestionsOfflineService);
  v4 = -[MapsSuggestionsOfflineService shouldKeepEntryWhenOffline:](v3, "shouldKeepEntryWhenOffline:", v2);

  return v4;
}

void sub_1008FA2B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1008FA734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1008FA764(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "trafficAlertView"));
  objc_msgSend(v1, "setAcceptProgress:", 1.0);

}

void sub_1008FA7AC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_dismissTrafficAlert");

}

void sub_1008FB644(uint64_t a1)
{
  void *v2;
  _MapViewState *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _LookAroundViewState *v9;
  uint64_t v10;
  void *v11;
  id v12;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "chromeViewController"));
  v12 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "mapView"));

  v3 = -[_MapViewState initWithMapView:]([_MapViewState alloc], "initWithMapView:", v12);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 16);
  *(_QWORD *)(v4 + 16) = v3;

  objc_msgSend(v12, "setUserTrackingMode:", 0);
  objc_msgSend(v12, "setShowsTraffic:", 0);
  objc_msgSend(v12, "setShowsUserLocation:", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "_mapLayer"));
  objc_msgSend(v6, "setStaysCenteredDuringPinch:", 1);

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "_mapLayer"));
  objc_msgSend(v7, "setStaysCenteredDuringRotation:", 1);

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "lookAroundView"));
  v9 = -[_LookAroundViewState initWithLookAroundView:]([_LookAroundViewState alloc], "initWithLookAroundView:", v8);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(void **)(v10 + 24);
  *(_QWORD *)(v10 + 24) = v9;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "_setModeDidBecomeCurrent");
}

void sub_1008FB7AC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "_setModeDidResignCurrent");
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 16);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 8), "chromeViewController"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "mapView"));
  objc_msgSend(v3, "restoreStateToMapView:", v4);

}

id sub_1008FC1A4()
{
  if (qword_1014D3950 != -1)
    dispatch_once(&qword_1014D3950, &stru_1011DB918);
  return (id)qword_1014D3948;
}

void sub_1008FE504(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "PedestrianARFailureContaineeViewController");
  v2 = (void *)qword_1014D3948;
  qword_1014D3948 = (uint64_t)v1;

}

void sub_1008FE8DC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_1008FE900(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  id v5;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "editSession"));
    objc_msgSend(WeakRetained, "viewController:createNewCollectionWithSession:", v5, v4);

  }
}

void sub_1008FE968(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  id v5;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "editSession"));
    objc_msgSend(WeakRetained, "viewController:createNewCollectionWithSession:", v5, v4);

  }
}

void sub_1008FEC74(uint64_t a1)
{
  id WeakRetained;
  unsigned int v3;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 56));
  v3 = objc_msgSend(WeakRetained, "isDisplayingLookAroundFullScreen");

  if (v3)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "updateLocation");
}

void sub_1008FF320(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  id v5;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  objc_msgSend(v4, "setContaineeDelegate:", v3);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "containerViewController"));
  objc_msgSend(v5, "presentController:animated:", v4, 1);

}

void sub_1008FF384(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "containerViewController"));
  objc_msgSend(v4, "_maps_topMostPresentViewController:animated:completion:", v3, 1, 0);

}

uint64_t sub_1008FF498(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1008FF5B8(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "containerViewController"));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void sub_1008FF78C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1008FF7B4(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "appCoordinator"));
  objc_msgSend(v1, "exitLookAround");

}

void sub_1008FFC84(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "LookAroundActionCoordinator");
  v2 = (void *)qword_1014D3958;
  qword_1014D3958 = (uint64_t)v1;

}

id sub_100900338(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  NSTextAttachment *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  NSTextAttachment *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  NSAttributedString *v25;
  void *v26;
  void *v28;
  uint64_t v29;
  void *v30;

  v3 = a2;
  v4 = a1;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", NSForegroundColorAttributeName));
  v6 = v5;
  if (v5)
    v7 = v5;
  else
    v7 = (id)objc_claimAutoreleasedReturnValue(+[UIColor secondaryLabelColor](UIColor, "secondaryLabelColor"));
  v8 = v7;

  v9 = objc_opt_new(NSTextAttachment);
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage systemImageNamed:](UIImage, "systemImageNamed:", CFSTR("arrow.up.forward")));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "imageWithTintColor:", v8));
  -[NSTextAttachment setImage:](v9, "setImage:", v11);

  v29 = objc_claimAutoreleasedReturnValue(+[NSAttributedString attributedStringWithAttachment:attributes:](NSAttributedString, "attributedStringWithAttachment:attributes:", v9, v3));
  v12 = GEOStringForDistance(97, (float)objc_msgSend(v4, "sumElevationGainCm") * 0.01);
  v28 = (void *)objc_claimAutoreleasedReturnValue(v12);
  v13 = objc_msgSend(objc_alloc((Class)NSAttributedString), "initWithString:", v28);
  v14 = objc_opt_new(NSTextAttachment);
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage systemImageNamed:](UIImage, "systemImageNamed:", CFSTR("arrow.down.forward")));
  v30 = v8;
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "imageWithTintColor:", v8));
  -[NSTextAttachment setImage:](v14, "setImage:", v16);

  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSAttributedString attributedStringWithAttachment:attributes:](NSAttributedString, "attributedStringWithAttachment:attributes:", v14, v3));
  LODWORD(v15) = objc_msgSend(v4, "sumElevationLossCm");

  v18 = GEOStringForDistance(97, (float)v15 * 0.01);
  v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  v20 = objc_msgSend(objc_alloc((Class)NSAttributedString), "initWithString:", v19);
  v21 = objc_msgSend(objc_alloc((Class)NSAttributedString), "initWithString:attributes:", CFSTR("%@ %@ • %@ %@"), v3);

  v22 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  v23 = objc_msgSend(v22, "userInterfaceLayoutDirection");

  if (v23 == (id)1)
  {
    v24 = (void *)v29;
    v25 = +[NSAttributedString localizedAttributedStringWithFormat:](NSAttributedString, "localizedAttributedStringWithFormat:", v21, v20, v17, v13, v29);
  }
  else
  {
    v24 = (void *)v29;
    v25 = +[NSAttributedString localizedAttributedStringWithFormat:](NSAttributedString, "localizedAttributedStringWithFormat:", v21, v29, v13, v17, v20);
  }
  v26 = (void *)objc_claimAutoreleasedReturnValue(v25);

  return v26;
}

id sub_1009005D8(void *a1, double a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = a1;
  v4 = GEOStringForDistance(1, a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = objc_msgSend(objc_alloc((Class)NSAttributedString), "initWithString:attributes:", v5, v3);

  return v6;
}

id sub_100900648(void *a1, void *a2, void *a3, double a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  NSAttributedString *v19;
  id v20;
  id *v21;
  void *v22;
  void *v23;
  _QWORD v25[5];
  id v26;
  id v27;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  if (v7)
  {
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_1009008B0;
    v25[3] = &unk_1011DB9A8;
    *(double *)&v25[4] = a4;
    v10 = (id)objc_claimAutoreleasedReturnValue(+[NSAttributedString _mapkit_attributedStringForComposedString:defaultAttributes:argumentOverrideHandler:](NSAttributedString, "_mapkit_attributedStringForComposedString:defaultAttributes:argumentOverrideHandler:", v7, v9, v25));
  }
  else
  {
    v11 = GEOStringForDuration(2, a4);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    v10 = objc_msgSend(objc_alloc((Class)NSAttributedString), "initWithString:attributes:", v12, v9);

  }
  if (objc_msgSend(v8, "isValid"))
  {
    v13 = sub_100900338(v8, v9);
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    v15 = v14;
    if (v10)
    {
      v16 = objc_msgSend(objc_alloc((Class)NSAttributedString), "initWithString:attributes:", CFSTR("%@ • %@"), v9);
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
      v18 = objc_msgSend(v17, "userInterfaceLayoutDirection");

      if (v18 == (id)1)
        v19 = +[NSAttributedString localizedAttributedStringWithFormat:](NSAttributedString, "localizedAttributedStringWithFormat:", v16, v15, v10);
      else
        v19 = +[NSAttributedString localizedAttributedStringWithFormat:](NSAttributedString, "localizedAttributedStringWithFormat:", v16, v10, v15);
      v20 = (id)objc_claimAutoreleasedReturnValue(v19);

    }
    else
    {
      v20 = v14;
    }
    v27 = v20;
    v21 = &v27;
  }
  else
  {
    v15 = objc_msgSend(objc_alloc((Class)NSAttributedString), "initWithString:attributes:", CFSTR("%@"), v9);
    v20 = (id)objc_claimAutoreleasedReturnValue(+[NSAttributedString localizedAttributedStringWithFormat:](NSAttributedString, "localizedAttributedStringWithFormat:", v15, v10));
    v26 = v20;
    v21 = &v26;
  }
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v21, 1));
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[MKMultiPartAttributedString multiPartAttributedStringWithComponents:repeatedSeparator:](MKMultiPartAttributedString, "multiPartAttributedStringWithComponents:repeatedSeparator:", v22, 0));

  return v23;
}

void sub_1009008B0(uint64_t a1, void *a2)
{
  void *v3;
  double v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "durationFormat"));

  if (v3)
  {
    v4 = *(double *)(a1 + 32);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "durationFormat"));
    objc_msgSend(v5, "setOverrideValue:", v4);

  }
}

id sub_10090091C(void *a1, double a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v3 = a1;
  v4 = GEOStringForDistance(1, a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  if (objc_msgSend(v3, "isValid"))
  {
    v6 = GEOStringForDistance(97, (float)objc_msgSend(v3, "sumElevationGainCm") * 0.01);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v8 = GEOStringForDistance(97, (float)objc_msgSend(v3, "sumElevationLossCm") * 0.01);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "localizedStringForKey:value:table:", CFSTR("[Route Creation] Temp distance and elevation description summary"), CFSTR("localized string not found"), 0));

    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v11, v5, v7, v9));
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "localizedStringForKey:value:table:", CFSTR("[Route Creation] Temp distance description"), CFSTR("localized string not found"), 0));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v9, v5));
  }

  return v12;
}

void sub_100903454(uint64_t a1)
{
  void *v2;
  void *v3;
  double v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD v14[3];

  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "_maps_rightRHDAnchor"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "viewportLayoutGuide"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_maps_rightRHDAnchor"));
  LODWORD(v4) = 1148846080;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "_maps_constraintWithRHDAnchor:relation:constant:priority:", v3, 0, -10.0, v4));
  v14[0] = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "topAnchor"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "viewportLayoutGuide"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "topAnchor"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "constraintEqualToAnchor:constant:", v8, 10.0));
  v14[1] = v9;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "heightAnchor"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "constraintEqualToConstant:", 28.0));
  v14[2] = v11;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v14, 3));
  +[NSLayoutConstraint activateConstraints:](NSLayoutConstraint, "activateConstraints:", v12);

}

void sub_100903D50(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_100903D8C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_deleteCardUUID:", *(_QWORD *)(a1 + 32));

}

void sub_100903EF8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_100903F18(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_deleteCardUUID:", *(_QWORD *)(a1 + 32));

}

id sub_100903F54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_handleCardButtonTag:forStackID:card:", a3, *(_QWORD *)(a1 + 40), a2);
}

void sub_1009040BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1009040D8(uint64_t a1)
{
  id *WeakRetained;
  id *v3;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained[1], "removeObjectForKey:", *(_QWORD *)(a1 + 32));
    objc_msgSend(v3[2], "removeObjectForKey:", *(_QWORD *)(a1 + 32));
    WeakRetained = v3;
  }

}

void sub_100904404(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CarTestContext");
  v2 = (void *)qword_1014D3968;
  qword_1014D3968 = (uint64_t)v1;

}

void sub_100904474(id a1)
{
  PlaceholderCollectionHandler *v1;
  void *v2;

  v1 = objc_alloc_init(PlaceholderCollectionHandler);
  v2 = (void *)qword_1014D3978;
  qword_1014D3978 = (uint64_t)v1;

}

void sub_100904F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100904F70(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  _QWORD v6[4];
  id v7;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "startedTest");
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100905084;
    v6[3] = &unk_1011AD288;
    objc_copyWeak(&v7, v1);
    +[PPTNotificationCenter addOnceObserverForName:object:usingBlock:](PPTNotificationCenter, "addOnceObserverForName:object:usingBlock:", CFSTR("PPTTest_SearchHome_DidSetActive"), 0, v6);
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v4, "addObserver:selector:name:object:", v3, "didUpdateDataFetcher:", CFSTR("PPTTest_SearchHome_DidUpdateDataFetcher"), 0);

    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "testCoordinator"));
    objc_msgSend(v5, "pptTestEnterSearchMode");

    objc_destroyWeak(&v7);
  }

}

void sub_10090506C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100905084(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "object"));
    objc_msgSend(WeakRetained, "setSearchHomeDataSource:", v4);

    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "searchHomeDataSource"));
    objc_msgSend(WeakRetained, "setNumberOfDataFetchers:", objc_msgSend(v5, "_ppt_numberOfDataFetchers"));

    objc_msgSend(WeakRetained, "startedSubTest:", CFSTR("searchHomeCollectData"));
  }

}

id sub_100905234(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "continueAfterCollectingDataFromDataFetchers");
}

void sub_100905318(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_100905338(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  _QWORD v3[5];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "finishedSubTest:", CFSTR("citySelectorCollectData"));
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1009053B8;
    v3[3] = &unk_1011AC860;
    v3[4] = v2;
    objc_msgSend(v2, "_dispatchAfterShortDelay:", v3);
  }

}

id sub_1009053B8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "runScrollTest");
}

id sub_1009053C0(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchHomeDataSource"));
  objc_msgSend(v2, "_ppt_selectBrowseCities");

  return objc_msgSend(*(id *)(a1 + 32), "startedSubTest:", CFSTR("citySelectorCollectData"));
}

void sub_1009055D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100905614(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "finishedSubTest:", *(_QWORD *)(a1 + 32));
    objc_msgSend(v3, "finishedTest");
    WeakRetained = v3;
  }

}

uint64_t sub_1009056F0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1009059A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1009059CC(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  void *v6;
  id v7;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v5 = objc_alloc((Class)UIWindow);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "coordinateSpace"));
    objc_msgSend(v6, "bounds");
    v7 = objc_msgSend(v5, "initWithFrame:");

    objc_msgSend(v7, "setCanResizeToFitContent:", 1);
    objc_msgSend(v7, "setWindowScene:", v3);
    objc_msgSend(v7, "setRootViewController:", *((_QWORD *)WeakRetained + 3));
    objc_msgSend(v7, "makeKeyAndVisible");
    objc_storeStrong((id *)WeakRetained + 4, v7);
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

id sub_100905C50(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v12[2];
  _QWORD v13[2];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("KeyCommand_AddTo"), CFSTR("localized string not found"), 0));
  v12[0] = CFSTR("row");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v3, "row")));
  v12[1] = CFSTR("section");
  v13[0] = v6;
  v7 = objc_msgSend(v3, "section");

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v7));
  v13[1] = v8;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v13, v12, 2));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[UIKeyCommand commandWithTitle:image:action:input:modifierFlags:propertyList:](UIKeyCommand, "commandWithTitle:image:action:input:modifierFlags:propertyList:", v5, 0, a1, CFSTR("a"), 0x100000, v9));

  return v10;
}

id sub_100905DCC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v12[2];
  _QWORD v13[2];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("KeyCommand_Delete"), CFSTR("localized string not found"), 0));
  v12[0] = CFSTR("row");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v3, "row")));
  v12[1] = CFSTR("section");
  v13[0] = v6;
  v7 = objc_msgSend(v3, "section");

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v7));
  v13[1] = v8;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v13, v12, 2));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[UIKeyCommand commandWithTitle:image:action:input:modifierFlags:propertyList:](UIKeyCommand, "commandWithTitle:image:action:input:modifierFlags:propertyList:", v5, 0, a1, CFSTR("\b"), 0, v9));

  return v10;
}

id sub_100905F48(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v12[2];
  _QWORD v13[2];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("KeyCommand_Edit"), CFSTR("localized string not found"), 0));
  v12[0] = CFSTR("row");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v3, "row")));
  v12[1] = CFSTR("section");
  v13[0] = v6;
  v7 = objc_msgSend(v3, "section");

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v7));
  v13[1] = v8;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v13, v12, 2));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[UIKeyCommand commandWithTitle:image:action:input:modifierFlags:propertyList:](UIKeyCommand, "commandWithTitle:image:action:input:modifierFlags:propertyList:", v5, 0, a1, CFSTR("e"), 0x100000, v9));

  return v10;
}

id sub_1009060C4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v12[2];
  _QWORD v13[2];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("KeyCommand_Share"), CFSTR("localized string not found"), 0));
  v12[0] = CFSTR("row");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v3, "row")));
  v12[1] = CFSTR("section");
  v13[0] = v6;
  v7 = objc_msgSend(v3, "section");

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v7));
  v13[1] = v8;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v13, v12, 2));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[UIKeyCommand commandWithTitle:image:action:input:modifierFlags:propertyList:](UIKeyCommand, "commandWithTitle:image:action:input:modifierFlags:propertyList:", v5, 0, a1, CFSTR("s"), 0x100000, v9));

  return v10;
}

void sub_10090669C(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "photo"));

  if (v3)
  {
    v4 = *(void **)(a1 + 32);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "photo"));
    objc_msgSend(v4, "addPhoto:", v5);

    v6 = *(void **)(a1 + 40);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "photo"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "photo"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "photo"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_maps_diffableDataSourceIdentifier"));
    objc_msgSend(v6, "addImage:forIdentifier:", v8, v10);

    objc_msgSend(v11, "clearSelectedPhoto");
  }

}

void sub_100906A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100906AAC(uint64_t a1, void *a2)
{
  id *WeakRetained;
  id *v4;
  void *v5;
  void *v6;
  id v7;

  v7 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[2], "commentQuestion"));
    objc_msgSend(v5, "setComment:", v7);

    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "_commentsHeaderView"));
    objc_msgSend(v6, "updateRemainingCharacters");

  }
}

void sub_1009078CC(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;

  v2 = sub_1004336BC();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = objc_opt_class(*(_QWORD *)(a1 + 32));
    v5 = *(_QWORD *)(a1 + 32);
    v9 = 138412546;
    v10 = v4;
    v11 = 2048;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "deactivateForChrome: deactivating chrome: <%@: %p>", (uint8_t *)&v9, 0x16u);
  }

  if (*(_QWORD *)(a1 + 32))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "activeChromes"));
    objc_msgSend(v6, "removeObject:", *(_QWORD *)(a1 + 32));

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "activeChromes"));
    v8 = objc_msgSend(v7, "count");

    if (!v8)
      objc_msgSend(*(id *)(a1 + 40), "setActive:", 0);
  }
}

id sub_100907AC8(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  uint8_t v6[16];

  v2 = sub_1004336BC();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "deactivateForAllChromes", v6, 2u);
  }

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activeChromes"));
  objc_msgSend(v4, "removeAllObjects");

  return objc_msgSend(*(id *)(a1 + 32), "setActive:", 0);
}

void sub_1009080F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100908114(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  id v3;
  id v4;
  NSObject *v5;
  _BOOL4 v6;
  id v7;
  unsigned int v8;
  __CFString *v9;
  __CFString *v10;
  id v11;
  unsigned int v12;
  __CFString *v13;
  __CFString *v14;
  _QWORD block[4];
  id v16;
  uint8_t buf[4];
  id v18;
  __int16 v19;
  __CFString *v20;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = objc_msgSend(WeakRetained, "retryCount");
  v4 = sub_1004336BC();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_INFO);
  if ((unint64_t)v3 > 0xE)
  {
    if (v6)
    {
      v11 = objc_msgSend(WeakRetained, "retryCount");
      v12 = objc_msgSend(WeakRetained, "isActive");
      v13 = CFSTR("NO");
      if (v12)
        v13 = CFSTR("YES");
      v14 = v13;
      *(_DWORD *)buf = 134218242;
      v18 = v11;
      v19 = 2112;
      v20 = v14;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Predicting retry count exceded, failed! retryCount=%lu routeGeniusActive=%@", buf, 0x16u);

    }
    objc_msgSend(WeakRetained, "_stopPredictingRetryTimer");
  }
  else
  {
    if (v6)
    {
      v7 = objc_msgSend(WeakRetained, "retryCount");
      v8 = objc_msgSend(WeakRetained, "isActive");
      v9 = CFSTR("NO");
      if (v8)
        v9 = CFSTR("YES");
      v10 = v9;
      *(_DWORD *)buf = 134218242;
      v18 = v7;
      v19 = 2112;
      v20 = v10;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Predicting retry timer fired retryCount=%lu routeGeniusActive=%@", buf, 0x16u);

    }
    objc_msgSend(WeakRetained, "setRetryCount:", (char *)objc_msgSend(WeakRetained, "retryCount") + 1);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100908320;
    block[3] = &unk_1011AD260;
    objc_copyWeak(&v16, v1);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
    objc_destroyWeak(&v16);
  }

}

void sub_100908320(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "predictingRetryTimer"));
  objc_msgSend(v1, "invalidate");

  objc_msgSend(WeakRetained, "setPredictingRetryTimer:", 0);
  objc_msgSend(WeakRetained, "startPredictingDestinationIfNeeded");

}

void sub_1009086EC(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)UIViewController);
  v2 = (void *)qword_1014D3988;
  qword_1014D3988 = (uint64_t)v1;

}

uint64_t (**sub_100908D98(uint64_t a1))(void)
{
  uint64_t (**result)(void);

  if (*(_QWORD *)(a1 + 64) < *(_QWORD *)(a1 + 72))
    return (uint64_t (**)(void))_objc_msgSend(*(id *)(a1 + 32), "_resizingTestWithCount:numbeorOfRounds:latencySubTestName:animationSubTestName:completion:");
  result = *(uint64_t (***)(void))(a1 + 56);
  if (result)
    return (uint64_t (**)(void))result[2]();
  return result;
}

void sub_100908E9C(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  _QWORD v5[5];
  id v6;
  id v7;
  id v8;

  v3 = *(void **)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100908F58;
  v5[3] = &unk_1011B4320;
  v5[4] = v3;
  v6 = v2;
  v7 = *(id *)(a1 + 48);
  v8 = *(id *)(a1 + 56);
  objc_msgSend(v3, "_updateTrayLayout:animated:latencySubTestName:animationSubTestName:completion:", 1, 1, v6, v4, v5);

}

void sub_100908F58(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  _QWORD v5[5];
  id v6;
  id v7;
  id v8;

  v3 = *(void **)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100909014;
  v5[3] = &unk_1011B4320;
  v5[4] = v3;
  v6 = v2;
  v7 = *(id *)(a1 + 48);
  v8 = *(id *)(a1 + 56);
  objc_msgSend(v3, "_updateTrayLayout:animated:latencySubTestName:animationSubTestName:completion:", 2, 1, v6, v4, v5);

}

void sub_100909014(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  _QWORD v5[5];
  id v6;
  id v7;
  id v8;

  v3 = *(void **)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1009090D0;
  v5[3] = &unk_1011B4320;
  v5[4] = v3;
  v6 = v2;
  v7 = *(id *)(a1 + 48);
  v8 = *(id *)(a1 + 56);
  objc_msgSend(v3, "_updateTrayLayout:animated:latencySubTestName:animationSubTestName:completion:", 0, 1, v6, v4, v5);

}

void sub_1009090D0(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  _QWORD v5[5];
  id v6;
  id v7;
  id v8;

  v3 = *(void **)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10090918C;
  v5[3] = &unk_1011B4320;
  v5[4] = v3;
  v6 = v2;
  v7 = *(id *)(a1 + 48);
  v8 = *(id *)(a1 + 56);
  objc_msgSend(v3, "_updateTrayLayout:animated:latencySubTestName:animationSubTestName:completion:", 2, 1, v6, v4, v5);

}

void sub_10090918C(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[4];
  id v5;

  v1 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100909214;
  v4[3] = &unk_1011ADA00;
  v3 = *(_QWORD *)(a1 + 48);
  v5 = *(id *)(a1 + 56);
  objc_msgSend(v1, "_updateTrayLayout:animated:latencySubTestName:animationSubTestName:completion:", 1, 1, v2, v3, v4);

}

uint64_t sub_100909214(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_100909328(uint64_t a1)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", *(_QWORD *)(a1 + 40));
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

id sub_1009094D8(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", *(_QWORD *)(a1 + 40));
  return objc_msgSend(*(id *)(a1 + 32), "startedSubTest:", *(_QWORD *)(a1 + 48));
}

uint64_t sub_100909508(uint64_t a1)
{
  uint64_t result;

  if (*(_BYTE *)(a1 + 56))
    objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", *(_QWORD *)(a1 + 40));
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_100909678(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t (**sub_100909880(uint64_t a1))(void)
{
  uint64_t (**result)(void);

  if (*(_QWORD *)(a1 + 72) < *(_QWORD *)(a1 + 80))
    return (uint64_t (**)(void))_objc_msgSend(*(id *)(a1 + 32), "_presentDismissTrayTestWithCount:numberOfRounds:latencySubTestName:animationSubTestName:presenter:completion:");
  result = *(uint64_t (***)(void))(a1 + 64);
  if (result)
    return (uint64_t (**)(void))result[2]();
  return result;
}

void sub_100909A60(uint64_t a1)
{
  void *v2;
  _QWORD block[5];
  id v4;
  id v5;
  id v6;
  char v7;

  block[0] = _NSConcreteStackBlock;
  block[2] = sub_100909B08;
  block[3] = &unk_1011DBB68;
  v7 = *(_BYTE *)(a1 + 64);
  v2 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  block[1] = 3221225472;
  v4 = v2;
  v5 = *(id *)(a1 + 48);
  v6 = *(id *)(a1 + 56);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_100909B08(uint64_t a1)
{
  char v2;
  void *v3;
  void *v4;
  _QWORD v5[4];
  id v6;
  id v7;
  id v8;
  char v9;
  _QWORD v10[5];
  id v11;
  id v12;

  v2 = *(_BYTE *)(a1 + 64);
  if (v2)
  {
    objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 32), "startedSubTest:", *(_QWORD *)(a1 + 48));
    v3 = (void *)UIApp;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100909C24;
    v10[3] = &unk_1011AD238;
    v10[4] = *(_QWORD *)(a1 + 32);
    v11 = *(id *)(a1 + 48);
    v12 = *(id *)(a1 + 40);
    objc_msgSend(v3, "installCACommitCompletionBlock:", v10);

    v2 = *(_BYTE *)(a1 + 64);
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100909C54;
  v5[3] = &unk_1011BE4E8;
  v9 = v2;
  v4 = *(void **)(a1 + 40);
  v6 = *(id *)(a1 + 32);
  v7 = v4;
  v8 = *(id *)(a1 + 56);
  objc_msgSend(v6, "dismissTrayWithCompletion:", v5);

}

id sub_100909C24(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", *(_QWORD *)(a1 + 40));
  return objc_msgSend(*(id *)(a1 + 32), "startedSubTest:", *(_QWORD *)(a1 + 48));
}

void sub_100909C54(uint64_t a1)
{
  _QWORD block[4];
  id v3;

  if (*(_BYTE *)(a1 + 56))
    objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", *(_QWORD *)(a1 + 40));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100909CD8;
  block[3] = &unk_1011ADA00;
  v3 = *(id *)(a1 + 48);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

uint64_t sub_100909CD8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

id sub_100909CEC(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", *(_QWORD *)(a1 + 40));
  return objc_msgSend(*(id *)(a1 + 32), "startedSubTest:", *(_QWORD *)(a1 + 48));
}

id sub_100909DA4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_100909E74(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_100909FA4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

id sub_100909FB8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "popToRootTrayWithCompletion:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_10090A078(uint64_t a1)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", *(_QWORD *)(a1 + 40));
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_10090A1CC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_10090A538(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;

}

void sub_10090B1D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10090B1F0(id *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void **v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  void *v16;
  id v17;
  id v18;
  id v19[2];

  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "displayName"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "headsign"));
  v13 = _NSConcreteStackBlock;
  v14 = 3221225472;
  v15 = sub_10090B364;
  v16 = &unk_1011DBBF8;
  objc_copyWeak(v19, a1 + 6);
  v8 = v5;
  v17 = v8;
  v19[1] = a3;
  v9 = v6;
  v18 = v9;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[UIAction actionWithTitle:image:identifier:handler:](UIAction, "actionWithTitle:image:identifier:handler:", v9, 0, v7, &v13));

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "headsign", v13, v14, v15, v16));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "headsign"));
  objc_msgSend(v10, "setState:", objc_msgSend(v11, "isEqual:", v12));

  objc_msgSend(a1[5], "addObject:", v10);
  objc_destroyWeak(v19);

}

void sub_10090B34C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10090B364(uint64_t a1)
{
  void *v2;
  void *v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  objc_msgSend(v2, "selectDepartureSequence:", *(_QWORD *)(a1 + 32));

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%lu, %@"), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40)));
  +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 49, 651, v3);

}

void sub_10090BBF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10090BC10(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "timeDidChangeSignificantly");
    objc_msgSend(v2, "scheduleTimeCheck");
    WeakRetained = v2;
  }

}

void sub_10090BDA8(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  void *v4;
  id v5;
  _QWORD block[4];
  id v7[2];
  char v8;
  char v9;

  v2 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v9 = 0;
    v5 = objc_msgSend(WeakRetained, "_computeOnQueueAstronomicalConditionForTime:currentLocation:isBeforeSolarTransit:", *(_QWORD *)(a1 + 32), &v9, *(double *)(a1 + 48));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10090BE6C;
    block[3] = &unk_1011DBC48;
    objc_copyWeak(v7, v2);
    v8 = v9;
    v7[1] = v5;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
    objc_destroyWeak(v7);
  }

}

void sub_10090BE6C(uint64_t a1)
{
  _BYTE *WeakRetained;
  _BYTE *v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    WeakRetained[41] = *(_BYTE *)(a1 + 48);
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "setAstronomicalCondition:", *(_QWORD *)(a1 + 40));
    WeakRetained = v3;
  }

}

void sub_10090CF54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10090CF74(uint64_t a1)
{
  id *WeakRetained;
  id *v2;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "estimatedHeight");
    objc_msgSend(v2[3], "setConstant:");
    objc_msgSend(v2, "_updateConstraints");
    WeakRetained = v2;
  }

}

NavTrayWaypointRow *sub_10090D14C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  NavTrayWaypointRow *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  unsigned int v15;
  void *v16;
  _QWORD v18[4];
  id v19;
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  unsigned int v23;
  __int16 v24;
  void *v25;

  v5 = a2;
  v6 = objc_alloc_init(NavTrayWaypointRow);
  -[NavTrayWaypointRow setWaypointIndex:](v6, "setWaypointIndex:", *(_QWORD *)(a1 + 40) + a3);
  -[NavTrayWaypointRow setWaypoint:](v6, "setWaypoint:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "displayEtaInfo"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "legInfos"));
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_10090D30C;
  v18[3] = &unk_1011DBC90;
  v9 = v5;
  v19 = v9;
  v10 = sub_10039E1FC(v8, v18);
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  -[NavTrayWaypointRow setEtaInfo:](v6, "setEtaInfo:", v11);

  v12 = sub_100431C0C();
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "navDisplayName"));
    v15 = -[NavTrayWaypointRow waypointIndex](v6, "waypointIndex");
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "uniqueID"));
    *(_DWORD *)buf = 138412802;
    v21 = v14;
    v22 = 1024;
    v23 = v15;
    v24 = 2112;
    v25 = v16;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "NavTrayWaypointRow created for destination \"%@\", index: %d, ID: %@", buf, 0x1Cu);

  }
  return v6;
}

id sub_10090D30C(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "waypointID"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uniqueID"));
  v5 = objc_msgSend(v3, "isEqual:", v4);

  return v5;
}

void sub_10090E3C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

NSString *__cdecl sub_10090E3F8(id a1, $14D77461FF5D83CAEC4252578BA76F85 *a2)
{
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%lu,%lu,%lu"), a2->var0, a2->var1, a2->var2);
}

void sub_10090E438(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _UNKNOWN **v4;
  void *v5;
  char *v6;
  void *v7;
  id v8;

  if (*(_BYTE *)(a2 + 3))
  {
    v3 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    v8 = (id)objc_claimAutoreleasedReturnValue(v3);
    v4 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v8));
    v5 = v4;
    if (!v4)
      v4 = &off_10126FB80;
    v6 = (char *)objc_msgSend(v4, "unsignedIntegerValue");

    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v6 + 1));
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v7, v8);

  }
}

uint64_t sub_10090E4F4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10090E504(uint64_t a1)
{

}

void sub_10090E50C(uint64_t a1, void *a2, void *a3)
{
  id v6;
  uint64_t v7;
  id v8;

  v8 = a2;
  v6 = objc_msgSend(a3, "unsignedIntegerValue");
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if ((unint64_t)v6 > *(_QWORD *)(v7 + 24))
  {
    *(_QWORD *)(v7 + 24) = v6;
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  }

}

void sub_10090F550(uint64_t a1)
{
  int v2;
  void *v3;
  void *v4;
  id v5;

  v2 = *(unsigned __int8 *)(a1 + 40);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  v4 = v3;
  if (v2)
  {
    objc_msgSend(v3, "setAlpha:", 0.0);

    objc_msgSend(*(id *)(a1 + 32), "didStartHiding");
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
    objc_msgSend(v5, "layoutIfNeeded");

  }
  else
  {
    objc_msgSend(v3, "setAlpha:", 1.0);

    objc_msgSend(*(id *)(a1 + 32), "didStartShowing");
  }
}

id sub_10090F5EC(uint64_t a1)
{
  void *v2;

  objc_msgSend(*(id *)(a1 + 32), "setOpen:animated:", 0, 0);
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
    objc_msgSend(v2, "setAlpha:", 1.0);

    objc_msgSend(*(id *)(a1 + 32), "setHidden:", 1);
  }
  objc_msgSend(*(id *)(a1 + 32), "didFinishShowing");
  return objc_msgSend(*(id *)(a1 + 32), "updateHiddenAnimated:completion:", 1, *(_QWORD *)(a1 + 40));
}

id sub_10090FB54(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateVenueAndBuildingsAnimated:forced:", 1, *(unsigned __int8 *)(a1 + 40));
}

id sub_10090FB68(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "updateDisplayedFloor");
}

uint64_t sub_10090FB70(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10090FFA4(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "venuesManager"));
  v3 = objc_msgSend(*(id *)(a1 + 40), "shortValue");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "venue"));
  objc_msgSend(v2, "setDisplayedFloorOrdinal:forBuildingsInVenue:", v3, v4);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "venuesManager"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "mapView"));
  objc_msgSend(v6, "setUserTrackingMode:", 0);

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "floorPicker"));
  objc_msgSend(v7, "setTitle:forState:", *(_QWORD *)(a1 + 48), 0);

}

void sub_100910704(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSMutableCharacterSet characterSetWithRange:](NSMutableCharacterSet, "characterSetWithRange:", 1536, 384));
  v2 = (void *)qword_1014D39A8;
  qword_1014D39A8 = v1;

  _objc_msgSend((id)qword_1014D39A8, "addCharactersInRange:", 2208, 96);
}

void sub_100911070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100911098(uint64_t result)
{
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24);
  return result;
}

uint64_t sub_1009110B0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  uint64_t v7;

  v7 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
  *(_QWORD *)(v7 + 32) = a3;
  *(_QWORD *)(v7 + 40) = a4;
  *a7 = 1;
  return result;
}

void sub_100911550(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  double v15;
  double v16;
  id v17;
  unint64_t v18;
  void *v19;
  void *v20;
  id v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  double v26;
  double v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  double v37;
  double v38;
  id v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  double v48;
  double v49;
  id v50;
  void *v51;
  void *v52;
  void *v53;
  id v54;
  double v55;
  double v56;
  double v57;
  id v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  id v65;
  NSObject *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  void *v71;
  void *v72;
  void *v73;
  _QWORD v74[4];
  id v75;
  id v76;
  id v77;
  id v78;
  _QWORD v79[4];
  id v80;
  _QWORD v81[4];
  id v82;
  _QWORD v83[4];
  id v84;
  _QWORD v85[4];
  id v86;
  uint8_t buf[4];
  uint64_t v88;
  __int16 v89;
  uint64_t v90;

  v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "screen"));
  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "traitCollection"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIGraphicsImageRendererFormat formatForTraitCollection:](UIGraphicsImageRendererFormat, "formatForTraitCollection:", v3));

  }
  else
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIGraphicsImageRendererFormat preferredFormat](UIGraphicsImageRendererFormat, "preferredFormat"));
  }

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v6 = objc_msgSend(v5, "BOOLForKey:", CFSTR("__internal_VisualizeChromeLayoutGuidesDebug"));

  v70 = +[DebugViewFrameHighlighter frameHighlightingEnabled](DebugViewFrameHighlighter, "frameHighlightingEnabled");
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v69 = objc_msgSend(v7, "BOOLForKey:", CFSTR("CarInternalShowDeactivationReasons"));

  if ((*(_BYTE *)(a1 + 64) & 1) != 0
    && GEOConfigGetBOOL(MapsConfig_EnableTapToRadarScreenshotAttachmentProvider, off_1014B4BB8))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    objc_msgSend(v8, "setBool:forKey:", 0, CFSTR("__internal_VisualizeChromeLayoutGuidesDebug"));

    +[DebugViewFrameHighlighter setFrameHighlightingEnabled:persistToDefaults:](DebugViewFrameHighlighter, "setFrameHighlightingEnabled:persistToDefaults:", 0, 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    objc_msgSend(v9, "setBool:forKey:", 0, CFSTR("CarInternalShowDeactivationReasons"));

    v10 = sub_100911EF0();
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      v12 = *(_QWORD *)(a1 + 72);
      v13 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 134349314;
      v88 = v12;
      v89 = 2112;
      v90 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[%{public}p] Generating normal screenshot attachment for name: %@", buf, 0x16u);
    }

    v14 = objc_alloc((Class)UIGraphicsImageRenderer);
    objc_msgSend(*(id *)(a1 + 32), "bounds");
    v17 = objc_msgSend(v14, "initWithSize:format:", v4, v15, v16);
    v85[0] = _NSConcreteStackBlock;
    v85[1] = 3221225472;
    v85[2] = sub_100911F30;
    v85[3] = &unk_1011B4110;
    v86 = *(id *)(a1 + 32);
    v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "imageWithActions:", v85));

    v18 = 1;
  }
  else
  {
    v18 = 0;
    v72 = 0;
  }
  if ((*(_BYTE *)(a1 + 64) & 2) != 0
    && GEOConfigGetBOOL(MapsConfig_EnableTapToRadarDebugViewFramesScreenshotAttachmentProvider, off_1014B4BC8))
  {
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    objc_msgSend(v19, "setBool:forKey:", 0, CFSTR("__internal_VisualizeChromeLayoutGuidesDebug"));

    +[DebugViewFrameHighlighter setFrameHighlightingEnabled:persistToDefaults:](DebugViewFrameHighlighter, "setFrameHighlightingEnabled:persistToDefaults:", 1, 0);
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    objc_msgSend(v20, "setBool:forKey:", 0, CFSTR("CarInternalShowDeactivationReasons"));

    v21 = sub_100911EF0();
    v22 = objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      v23 = *(_QWORD *)(a1 + 72);
      v24 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 134349314;
      v88 = v23;
      v89 = 2112;
      v90 = v24;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "[%{public}p] Generating debug view frames screenshot attachment for name: %@", buf, 0x16u);
    }

    v25 = objc_alloc((Class)UIGraphicsImageRenderer);
    objc_msgSend(*(id *)(a1 + 32), "bounds");
    v28 = objc_msgSend(v25, "initWithSize:format:", v4, v26, v27);
    v83[0] = _NSConcreteStackBlock;
    v83[1] = 3221225472;
    v83[2] = sub_100911F5C;
    v83[3] = &unk_1011B4110;
    v84 = *(id *)(a1 + 32);
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "imageWithActions:", v83));
    ++v18;

  }
  else
  {
    v29 = 0;
  }
  if ((*(_BYTE *)(a1 + 64) & 4) != 0
    && GEOConfigGetBOOL(MapsConfig_EnableTapToRadarDebugChromeLayoutGuidesScreenshotAttachmentProvider, off_1014B4EB8))
  {
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    objc_msgSend(v30, "setBool:forKey:", 1, CFSTR("__internal_VisualizeChromeLayoutGuidesDebug"));

    +[DebugViewFrameHighlighter setFrameHighlightingEnabled:persistToDefaults:](DebugViewFrameHighlighter, "setFrameHighlightingEnabled:persistToDefaults:", 0, 0);
    v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    objc_msgSend(v31, "setBool:forKey:", 0, CFSTR("CarInternalShowDeactivationReasons"));

    v32 = sub_100911EF0();
    v33 = objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
      v34 = *(_QWORD *)(a1 + 72);
      v35 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 134349314;
      v88 = v34;
      v89 = 2112;
      v90 = v35;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "[%{public}p] Generating debug chrome layout guides screenshot attachment for name: %@", buf, 0x16u);
    }

    v36 = objc_alloc((Class)UIGraphicsImageRenderer);
    objc_msgSend(*(id *)(a1 + 32), "bounds");
    v39 = objc_msgSend(v36, "initWithSize:format:", v4, v37, v38);
    v81[0] = _NSConcreteStackBlock;
    v81[1] = 3221225472;
    v81[2] = sub_100911F88;
    v81[3] = &unk_1011B4110;
    v82 = *(id *)(a1 + 32);
    v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "imageWithActions:", v81));
    ++v18;

  }
  else
  {
    v40 = 0;
  }
  if ((*(_BYTE *)(a1 + 64) & 8) != 0
    && GEOConfigGetBOOL(MapsConfig_EnableTapToRadarDebugChromeInactiveReasonsScreenshotAttachmentProvider, off_1014B50C8))
  {
    v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    objc_msgSend(v41, "setBool:forKey:", 0, CFSTR("__internal_VisualizeChromeLayoutGuidesDebug"));

    +[DebugViewFrameHighlighter setFrameHighlightingEnabled:persistToDefaults:](DebugViewFrameHighlighter, "setFrameHighlightingEnabled:persistToDefaults:", 0, 0);
    v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    objc_msgSend(v42, "setBool:forKey:", 1, CFSTR("CarInternalShowDeactivationReasons"));

    v43 = sub_100911EF0();
    v44 = objc_claimAutoreleasedReturnValue(v43);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
    {
      v45 = *(_QWORD *)(a1 + 72);
      v46 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 134349314;
      v88 = v45;
      v89 = 2112;
      v90 = v46;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "[%{public}p] Generating inactive reasons screenshot attachment for name: %@", buf, 0x16u);
    }

    v47 = objc_alloc((Class)UIGraphicsImageRenderer);
    objc_msgSend(*(id *)(a1 + 32), "bounds");
    v50 = objc_msgSend(v47, "initWithSize:format:", v4, v48, v49);
    v79[0] = _NSConcreteStackBlock;
    v79[1] = 3221225472;
    v79[2] = sub_100911FB4;
    v79[3] = &unk_1011B4110;
    v80 = *(id *)(a1 + 32);
    v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "imageWithActions:", v79));
    ++v18;

  }
  else
  {
    v51 = 0;
  }
  v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v52, "setBool:forKey:", v6, CFSTR("__internal_VisualizeChromeLayoutGuidesDebug"));

  +[DebugViewFrameHighlighter setFrameHighlightingEnabled:persistToDefaults:](DebugViewFrameHighlighter, "setFrameHighlightingEnabled:persistToDefaults:", v70, 0);
  v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v53, "setBool:forKey:", v69, CFSTR("CarInternalShowDeactivationReasons"));

  if (v18)
  {
    v54 = objc_alloc((Class)UIGraphicsImageRenderer);
    objc_msgSend(*(id *)(a1 + 32), "bounds");
    v56 = v55 * (double)v18;
    objc_msgSend(*(id *)(a1 + 32), "bounds");
    v58 = objc_msgSend(v54, "initWithSize:format:", v4, v56, v57);
    v74[0] = _NSConcreteStackBlock;
    v74[1] = 3221225472;
    v74[2] = sub_100911FE0;
    v74[3] = &unk_1011DBDB8;
    v75 = v72;
    v76 = v29;
    v77 = v40;
    v78 = v51;
    v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "imageWithActions:", v74));
    if (qword_1014D39B0 != -1)
      dispatch_once(&qword_1014D39B0, &stru_1011DBDD8);
    v60 = (void *)qword_1014D39B8;
    v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "stringFromDate:", v61));

    v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("screenshot.%@.%@"), v62, *(_QWORD *)(a1 + 40)));
    v64 = (void *)objc_claimAutoreleasedReturnValue(+[MapsRadarImageAttachment attachmentWithFileName:image:](MapsRadarImageAttachment, "attachmentWithFileName:image:", v63, v59));

    objc_msgSend(v73, "addObject:", v64);
  }
  v65 = sub_100911EF0();
  v66 = objc_claimAutoreleasedReturnValue(v65);
  if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
  {
    v67 = *(_QWORD *)(a1 + 72);
    v68 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 134349314;
    v88 = v67;
    v89 = 2112;
    v90 = v68;
    _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "[%{public}p] Finished generating radar attachments for name: %@", buf, 0x16u);
  }

  objc_msgSend(*(id *)(a1 + 48), "addAttachments:", v71);
  objc_msgSend(*(id *)(a1 + 48), "addScreenshots:", v73);
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

id sub_100911EF0()
{
  if (qword_1014D39C8 != -1)
    dispatch_once(&qword_1014D39C8, &stru_1011DBDF8);
  return (id)qword_1014D39C0;
}

id sub_100911F30(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 32);
  objc_msgSend(v1, "bounds");
  return objc_msgSend(v1, "drawViewHierarchyInRect:afterScreenUpdates:", 1);
}

id sub_100911F5C(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 32);
  objc_msgSend(v1, "bounds");
  return objc_msgSend(v1, "drawViewHierarchyInRect:afterScreenUpdates:", 1);
}

id sub_100911F88(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 32);
  objc_msgSend(v1, "bounds");
  return objc_msgSend(v1, "drawViewHierarchyInRect:afterScreenUpdates:", 1);
}

id sub_100911FB4(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 32);
  objc_msgSend(v1, "bounds");
  return objc_msgSend(v1, "drawViewHierarchyInRect:afterScreenUpdates:", 1);
}

void sub_100911FE0(id *a1, void *a2)
{
  id v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  id v9;
  double v10;
  double v11;
  double v12;
  double v13;
  id v14;
  double v15;
  double v16;
  double v17;
  double v18;
  id v19;
  double v20;
  double v21;
  double v22;
  id v23;

  v23 = a2;
  v3 = a1[4];
  if (v3)
  {
    objc_msgSend(a1[4], "size");
    v5 = v4;
    objc_msgSend(a1[4], "size");
    objc_msgSend(v3, "drawInRect:", 0.0, 0.0, v5, v6);
    objc_msgSend(a1[4], "size");
    v8 = v7 + 0.0;
  }
  else
  {
    v8 = 0.0;
  }
  v9 = a1[5];
  if (v9)
  {
    objc_msgSend(a1[5], "size");
    v11 = v10;
    objc_msgSend(a1[5], "size");
    objc_msgSend(v9, "drawInRect:", v8, 0.0, v11, v12);
    objc_msgSend(a1[5], "size");
    v8 = v8 + v13;
  }
  v14 = a1[6];
  if (v14)
  {
    objc_msgSend(a1[6], "size");
    v16 = v15;
    objc_msgSend(a1[6], "size");
    objc_msgSend(v14, "drawInRect:", v8, 0.0, v16, v17);
    objc_msgSend(a1[6], "size");
    v8 = v8 + v18;
  }
  v19 = a1[7];
  if (v19)
  {
    objc_msgSend(a1[7], "size");
    v21 = v20;
    objc_msgSend(a1[7], "size");
    objc_msgSend(v19, "drawInRect:", v8, 0.0, v21, v22);
    objc_msgSend(a1[7], "size");
  }

}

void sub_100912120(id a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_1014D39B8;
  qword_1014D39B8 = (uint64_t)v1;

  objc_msgSend((id)qword_1014D39B8, "setDateFormat:", CFSTR("yyyy-MM-dd HH:mm:ss.SSSSSSZZZ"));
  v3 = objc_msgSend(objc_alloc((Class)NSLocale), "initWithLocaleIdentifier:", CFSTR("en_US_POSIX"));
  objc_msgSend((id)qword_1014D39B8, "setLocale:", v3);

}

void sub_100912198(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "MapsRadarScreenshotAttachmentHelper");
  v2 = (void *)qword_1014D39C0;
  qword_1014D39C0 = (uint64_t)v1;

}

void sub_1009125F0(id a1)
{
  MapsARSessionManager *v1;
  void *v2;

  v1 = objc_alloc_init(MapsARSessionManager);
  v2 = (void *)qword_1014D39D0;
  qword_1014D39D0 = (uint64_t)v1;

}

void sub_100912954(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100912970()
{
  if (qword_1014D39E8 != -1)
    dispatch_once(&qword_1014D39E8, &stru_1011DBE38);
  return (id)qword_1014D39E0;
}

void sub_100912C84(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100912D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  void *v10;

  objc_sync_exit(v10);
  _Unwind_Resume(a1);
}

void sub_100912E2C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100912EA4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "MapsARSessionManager");
  v2 = (void *)qword_1014D39E0;
  qword_1014D39E0 = (uint64_t)v1;

}

id sub_1009140B4(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  void *v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainVKMapView"));
  v3 = objc_msgSend(v2, "isFullyDrawn");

  v4 = *(void **)(a1 + 32);
  if (v3)
    return _objc_msgSend(v4, "onFullyDrawn:", 0);
  else
    return objc_msgSend(v4, "setupFullyDrawnNotification:", "onFullyDrawn:");
}

id sub_100914894(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "startedSubTest:withMetrics:", CFSTR("manifestUpdate"), &off_101273F20);
}

id sub_100914904(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("manifestUpdate"));
}

id sub_10091496C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "startedSubTest:withMetrics:", CFSTR("manifestUpdate:setupConnection"), &off_101273F38);
}

id sub_1009149DC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("manifestUpdate:setupConnection"));
}

id sub_100914A44(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "startedSubTest:withMetrics:", CFSTR("manifestUpdate:updateIfNecessary"), &off_101273F50);
}

id sub_100914AB4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("manifestUpdate:updateIfNecessary"));
}

id sub_100914B1C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "startedSubTest:withMetrics:", CFSTR("manifestUpdate:forcedUpdate"), &off_101273F68);
}

id sub_100914B8C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("manifestUpdate:forcedUpdate"));
}

id sub_100914BF4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "startedSubTest:withMetrics:", CFSTR("manifestUpdate:getResourceManifest"), &off_101273F80);
}

id sub_100914C64(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("manifestUpdate:getResourceManifest"));
}

id sub_100914CCC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "startedSubTest:withMetrics:", CFSTR("manifestUpdate:setManifestToken"), &off_101273F98);
}

id sub_100914D3C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("manifestUpdate:setManifestToken"));
}

id sub_100914DA4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "startedSubTest:withMetrics:", CFSTR("manifestUpdate:setActiveTileGroup"), &off_101273FB0);
}

id sub_100914E14(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("manifestUpdate:setActiveTileGroup"));
}

id sub_100914E7C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "startedSubTest:withMetrics:", CFSTR("manifestUpdate:resetActiveTileGroup"), &off_101273FC8);
}

id sub_100914EEC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("manifestUpdate:resetActiveTileGroup"));
}

id sub_100914F54(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "startedSubTest:withMetrics:", CFSTR("manifestUpdate:handleMessage"), &off_101273FE0);
}

id sub_100914FC4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("manifestUpdate:handleMessage"));
}

UIFont *__cdecl sub_100916854(id a1)
{
  return +[UIFont preferredFontForTextStyle:](UIFont, "preferredFontForTextStyle:", UIFontTextStyleBody);
}

UIFont *__cdecl sub_10091686C(id a1)
{
  return +[UIFont preferredFontForTextStyle:](UIFont, "preferredFontForTextStyle:", UIFontTextStyleBody);
}

id sub_100916C90()
{
  if (qword_1014D3A00 != -1)
    dispatch_once(&qword_1014D3A00, &stru_1011DBE98);
  return (id)qword_1014D39F8;
}

void sub_1009177A8(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionsCarousel"));
  objc_msgSend(v1, "resetCollectionsLayout");

}

void sub_100917B30(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CuratedCollectionsListViewController");
  v2 = (void *)qword_1014D39F8;
  qword_1014D39F8 = (uint64_t)v1;

}

void sub_100917D10(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  _UNKNOWN **v5;
  id v6;

  v4 = *(void **)(a1 + 32);
  v6 = a3;
  if (objc_msgSend(v4, "_propertyIsEnum:"))
    v5 = &off_10126FBC8;
  else
    v5 = 0;
  objc_msgSend(*(id *)(a1 + 32), "setValue:forKey:", v5, v6);

}

void sub_100917E2C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  NSMutableArray *v6;
  uint64_t v7;
  BOOL v8;
  NSMutableArray *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  NSMutableArray *v13;
  id v14;
  id v15;
  uint64_t v16;
  void *i;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];

  v5 = a2;
  v6 = (NSMutableArray *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "valueForKey:", a3));
  v7 = objc_opt_class(NSNumber);
  if ((objc_opt_isKindOfClass(v6, v7) & 1) != 0)
  {
    v8 = -[NSMutableArray integerValue](v6, "integerValue") == (id)0xFFFF || v6 == 0;
    v9 = v6;
    if (!v8)
      goto LABEL_6;
  }
  else
  {
    v10 = objc_opt_class(NSArray);
    if ((objc_opt_isKindOfClass(v6, v10) & 1) == 0
      || (v11 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray firstObject](v6, "firstObject")),
          v12 = (void *)objc_opt_class(v11),
          v11,
          !objc_msgSend(v12, "isSubclassOfClass:", objc_opt_class(CarClusterUpdate))))
    {
      v9 = v6;
      if (!v6)
        goto LABEL_7;
      goto LABEL_6;
    }
    v9 = objc_opt_new(NSMutableArray);
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v13 = v6;
    v14 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v13, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)v20;
      do
      {
        for (i = 0; i != v15; i = (char *)i + 1)
        {
          if (*(_QWORD *)v20 != v16)
            objc_enumerationMutation(v13);
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)i), "accNavFormat", (_QWORD)v19));
          -[NSMutableArray addObject:](v9, "addObject:", v18);

        }
        v15 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v13, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
      }
      while (v15);
    }

    if (v6)
LABEL_6:
      objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v9, v5, (_QWORD)v19);
  }
LABEL_7:

}

void sub_100918080(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;

  v4 = *(void **)(a1 + 32);
  v5 = a3;
  v6 = a2;
  v7 = objc_msgSend((id)objc_opt_class(v4), "_integersKeyed");
  v9 = (id)objc_claimAutoreleasedReturnValue(v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v6));

  objc_msgSend(v4, "setValue:forKey:", v5, v8);
}

void sub_1009181D8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  NSMutableArray *v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  void *j;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  id v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];
  _BYTE v39[128];

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "valueForKey:", v4));
  v6 = objc_opt_class(NSArray);
  if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
    v8 = (void *)objc_opt_class(v7);

    if (objc_msgSend(v8, "isSubclassOfClass:", objc_opt_class(NSArray)))
    {
      v9 = objc_opt_new(NSMutableArray);
      v34 = 0u;
      v35 = 0u;
      v36 = 0u;
      v37 = 0u;
      v10 = v5;
      v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v34, v39, 16);
      if (v11)
      {
        v12 = v11;
        v27 = v5;
        v28 = a1;
        v29 = v4;
        v13 = *(_QWORD *)v35;
        do
        {
          for (i = 0; i != v12; i = (char *)i + 1)
          {
            if (*(_QWORD *)v35 != v13)
              objc_enumerationMutation(v10);
            v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v34 + 1) + 8 * (_QWORD)i), "componentsJoinedByString:", CFSTR(", ")));
            v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("[%@]"), v15));
            -[NSMutableArray addObject:](v9, "addObject:", v16);

          }
          v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v34, v39, 16);
        }
        while (v12);
LABEL_21:
        a1 = v28;
        v4 = v29;
        v5 = v27;
      }
    }
    else
    {
      if (!objc_msgSend(v8, "isSubclassOfClass:", objc_opt_class(CarClusterUpdate)))
      {
LABEL_23:
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "componentsJoinedByString:", CFSTR(", ")));
        v18 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("[%@]"), v26));

        goto LABEL_24;
      }
      v9 = objc_opt_new(NSMutableArray);
      v30 = 0u;
      v31 = 0u;
      v32 = 0u;
      v33 = 0u;
      v19 = v5;
      v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
      if (v20)
      {
        v21 = v20;
        v27 = v5;
        v28 = a1;
        v29 = v4;
        v22 = *(_QWORD *)v31;
        do
        {
          for (j = 0; j != v21; j = (char *)j + 1)
          {
            if (*(_QWORD *)v31 != v22)
              objc_enumerationMutation(v19);
            v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v30 + 1) + 8 * (_QWORD)j), "logFormat"));
            v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "stringByReplacingOccurrencesOfString:withString:", CFSTR("\t"), CFSTR("\t\t")));
            -[NSMutableArray addObject:](v9, "addObject:", v25);

          }
          v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
        }
        while (v21);
        goto LABEL_21;
      }
    }

    v5 = v9;
    goto LABEL_23;
  }
  v17 = objc_opt_class(NSNumber);
  if ((objc_opt_isKindOfClass(v5, v17) & 1) != 0)
  {
    v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_debugDescriptionForProperty:withValue:", v4, v5));

LABEL_24:
    v5 = (void *)v18;
  }
  objc_msgSend(*(id *)(a1 + 40), "appendFormat:", CFSTR("\n\t%@: %@"), v4, v5);

}

id sub_100919818(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "setHost:", *(_QWORD *)(a1 + 32));
}

void sub_100919834(id a1, ChromeOverlay *a2, unint64_t a3, BOOL *a4)
{
  -[ChromeOverlay setHost:](a2, "setHost:", 0, a4);
}

BOOL sub_100919DC8(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  unsigned int v6;
  int v7;

  v6 = objc_msgSend(a2, "isActive");
  v7 = *(unsigned __int8 *)(a1 + 32);
  if (v7 == v6)
    *a4 = 1;
  return v7 == v6;
}

id sub_10091B27C()
{
  if (qword_1014D3A10 != -1)
    dispatch_once(&qword_1014D3A10, &stru_1011DBFF0);
  return (id)qword_1014D3A08;
}

VKARWalkingFeature *__cdecl sub_10091B67C(id a1, PedestrianARVKFeatureMapEntry *a2, unint64_t a3)
{
  return -[PedestrianARVKFeatureMapEntry feature](a2, "feature", a3);
}

uint64_t sub_10091BF14(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "feature"));
  v4 = v3;
  if (v3 == *(void **)(a1 + 32))
    v5 = 1;
  else
    v5 = (uint64_t)objc_msgSend(v3, "isEqual:");

  return v5;
}

uint64_t sub_10091C150(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "feature"));
  v4 = v3;
  if (v3 == *(void **)(a1 + 32))
    v5 = 1;
  else
    v5 = (uint64_t)objc_msgSend(v3, "isEqual:");

  return v5;
}

VKARWalkingFeature *__cdecl sub_10091C3A4(id a1, PedestrianARVKFeatureMapEntry *a2, unint64_t a3)
{
  return -[PedestrianARVKFeatureMapEntry feature](a2, "feature", a3);
}

void sub_10091C688(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "PedestrianARVKMapViewMapDelegate");
  v2 = (void *)qword_1014D3A08;
  qword_1014D3A08 = (uint64_t)v1;

}

void sub_10091CAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10091CACC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t Log;
  NSObject *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *i;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  void *v18;
  unsigned int v19;
  id v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint8_t buf[16];
  _BYTE v26[128];

  v5 = a2;
  v6 = v5;
  if (a3)
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "OfflineService");
    v8 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Error fetching subscriptions", buf, 2u);
    }

    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }
  else
  {
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v20 = v5;
    v9 = v5;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v22;
      v13 = MapsSuggestionsLoggingSubsystem;
      while (2)
      {
        for (i = 0; i != v11; i = (char *)i + 1)
        {
          if (*(_QWORD *)v22 != v12)
            objc_enumerationMutation(v9);
          v15 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)i);
          if ((objc_msgSend(v15, "dataTypes") & 0x400) != 0)
          {
            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "region"));
            v19 = objc_msgSend(v18, "containsCoordinate:", *(double *)(a1 + 48), *(double *)(a1 + 56));

            if (v19)
            {
              *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
              dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

              goto LABEL_19;
            }
          }
          else
          {
            v16 = GEOFindOrCreateLog(v13, "OfflineService");
            v17 = objc_claimAutoreleasedReturnValue(v16);
            if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Subscription is not of type offline, skipping.", buf, 2u);
            }

          }
        }
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
        if (v11)
          continue;
        break;
      }
    }

    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
LABEL_19:
    v6 = v20;
  }

}

__CFString *sub_10091DA14(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  __CFString *v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  id v10;
  NSObject *v11;
  char *v12;
  int v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  int v19;

  v3 = a2;
  v4 = objc_opt_class(_TtC4Maps16MapsFavoriteItem);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifierCache"));
    v6 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifierForObject:", v3));

  }
  else
  {
    v7 = objc_opt_class(NSString);
    if ((objc_opt_isKindOfClass(v3, v7) & 1) == 0
      || (v6 = CFSTR("kLibraryCellIdentifier"),
          (objc_msgSend(v3, "isEqualToString:", CFSTR("kLibraryCellIdentifier")) & 1) == 0))
    {
      v8 = sub_1004318FC();
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v14 = 136315650;
        v15 = "-[HomeOutlineFavoritesSectionController itemSnapshots]_block_invoke";
        v16 = 2080;
        v17 = "HomeOutlineFavoritesSectionController.m";
        v18 = 1024;
        v19 = 137;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%s [%s:%d] Assertion reached unexpectedly!", (uint8_t *)&v14, 0x1Cu);
      }

      if (sub_100A70734())
      {
        v10 = sub_1004318FC();
        v11 = objc_claimAutoreleasedReturnValue(v10);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          v12 = (char *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
          v14 = 138412290;
          v15 = v12;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&v14, 0xCu);

        }
      }
      v6 = 0;
    }
  }

  return v6;
}

TwoLinesMapsFavoriteItemOutlineCellModel *sub_10091DBE4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  SidebarOutlineCellBackgroundModel *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  SidebarOutlineCellBackgroundModel *v12;
  void *v13;
  TwoLineOutlineCellButtonAccessoryModel *v14;
  TwoLinesMapsFavoriteItemOutlineCellModel *v15;
  uint64_t v16;
  void *v17;
  id v18;
  NSObject *v19;
  id v20;
  NSObject *v21;
  char *v22;
  int v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  int v29;
  TwoLineOutlineCellButtonAccessoryModel *v30;

  v3 = a2;
  v4 = objc_opt_class(_TtC4Maps16MapsFavoriteItem);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    v5 = v3;
    v6 = [SidebarOutlineCellBackgroundModel alloc];
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    v8 = objc_msgSend(v7, "isCollectionViewFocusedWithSectionController:", *(_QWORD *)(a1 + 32));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    v10 = objc_msgSend(v9, "isCollectionViewProxyFocusedWithSectionController:", *(_QWORD *)(a1 + 32));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    v12 = -[SidebarOutlineCellBackgroundModel initWithStyle:dropStyle:grouping:collectionViewFocused:collectionViewProxyFocused:collectionViewHasDropSession:](v6, "initWithStyle:dropStyle:grouping:collectionViewFocused:collectionViewProxyFocused:collectionViewHasDropSession:", 0, 0, 1, v8, v10, objc_msgSend(v11, "hasCollectionViewDropSessionWithSectionController:", *(_QWORD *)(a1 + 32)));

    v13 = 0;
    if (objc_msgSend(*(id *)(a1 + 32), "_shouldShowAccessoryForFavorite:", v5))
    {
      v14 = -[TwoLineOutlineCellButtonAccessoryModel initWithAccessoryType:visibility:delegate:]([TwoLineOutlineCellButtonAccessoryModel alloc], "initWithAccessoryType:visibility:delegate:", 1, objc_msgSend(*(id *)(a1 + 32), "_accessoryVisiblityForFavorite:", v5), *(_QWORD *)(a1 + 32));
      v30 = v14;
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v30, 1));

    }
    v15 = -[TwoLinesMapsFavoriteItemOutlineCellModel initWithMapsFavoriteItem:accessoryModels:backgroundModel:]([TwoLinesMapsFavoriteItemOutlineCellModel alloc], "initWithMapsFavoriteItem:accessoryModels:backgroundModel:", v5, v13, v12);

  }
  else
  {
    v16 = objc_opt_class(NSString);
    if ((objc_opt_isKindOfClass(v3, v16) & 1) != 0
      && objc_msgSend(v3, "isEqualToString:", CFSTR("kLibraryCellIdentifier")))
    {
      v15 = objc_alloc_init(_TtC4Maps27LibraryLinkOutlineCellModel);
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "counts"));
      -[TwoLinesMapsFavoriteItemOutlineCellModel setLibraryItemsCount:](v15, "setLibraryItemsCount:", v17);

    }
    else
    {
      v18 = sub_1004318FC();
      v19 = objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        v24 = 136315650;
        v25 = "-[HomeOutlineFavoritesSectionController itemSnapshots]_block_invoke";
        v26 = 2080;
        v27 = "HomeOutlineFavoritesSectionController.m";
        v28 = 1024;
        v29 = 169;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%s [%s:%d] Assertion reached unexpectedly!", (uint8_t *)&v24, 0x1Cu);
      }

      if (sub_100A70734())
      {
        v20 = sub_1004318FC();
        v21 = objc_claimAutoreleasedReturnValue(v20);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          v22 = (char *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
          v24 = 138412290;
          v25 = v22;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&v24, 0xCu);

        }
      }
      v15 = 0;
    }
  }

  return v15;
}

NSArray *__cdecl sub_10091DF14(id a1, id a2, HomeOutlineSectionBuilderStack *a3)
{
  return (NSArray *)&__NSArray0__struct;
}

BOOL sub_10091DF20(id a1, id a2, HomeOutlineSectionBuilderStack *a3)
{
  return 0;
}

id sub_10091DF28(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "identifierCache"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifierForObject:", v3));

  return v5;
}

TwoLinesMapsSuggestionsEntryOutlineCellModel *sub_10091DF80(uint64_t a1, void *a2)
{
  id v3;
  SidebarOutlineCellBackgroundModel *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  SidebarOutlineCellBackgroundModel *v10;
  void *v11;
  TwoLineOutlineCellButtonAccessoryModel *v12;
  TwoLinesMapsSuggestionsEntryOutlineCellModel *v13;
  TwoLineOutlineCellButtonAccessoryModel *v15;

  v3 = a2;
  v4 = [SidebarOutlineCellBackgroundModel alloc];
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v6 = objc_msgSend(v5, "isCollectionViewFocusedWithSectionController:", *(_QWORD *)(a1 + 32));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v8 = objc_msgSend(v7, "isCollectionViewProxyFocusedWithSectionController:", *(_QWORD *)(a1 + 32));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v10 = -[SidebarOutlineCellBackgroundModel initWithStyle:dropStyle:grouping:collectionViewFocused:collectionViewProxyFocused:collectionViewHasDropSession:](v4, "initWithStyle:dropStyle:grouping:collectionViewFocused:collectionViewProxyFocused:collectionViewHasDropSession:", 0, 0, 1, v6, v8, objc_msgSend(v9, "hasCollectionViewDropSessionWithSectionController:", *(_QWORD *)(a1 + 32)));

  v11 = 0;
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldShowAccessoryForEntry:", v3))
  {
    v12 = -[TwoLineOutlineCellButtonAccessoryModel initWithAccessoryType:visibility:delegate:]([TwoLineOutlineCellButtonAccessoryModel alloc], "initWithAccessoryType:visibility:delegate:", 1, objc_msgSend(*(id *)(a1 + 32), "_accessoryVisiblityForEntry:", v3), *(_QWORD *)(a1 + 32));
    v15 = v12;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v15, 1));

  }
  v13 = -[TwoLinesMapsSuggestionsEntryOutlineCellModel initWithMapsSuggestionsEntry:accessoryModels:backgroundModel:]([TwoLinesMapsSuggestionsEntryOutlineCellModel alloc], "initWithMapsSuggestionsEntry:accessoryModels:backgroundModel:", v3, v11, v10);

  return v13;
}

NSArray *__cdecl sub_10091E11C(id a1, id a2, HomeOutlineSectionBuilderStack *a3)
{
  return (NSArray *)&__NSArray0__struct;
}

BOOL sub_10091E128(id a1, id a2, HomeOutlineSectionBuilderStack *a3)
{
  return 0;
}

void sub_10091E844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *a11, id *location, uint64_t a13, uint64_t a14, id *a15)
{
  id *v15;
  uint64_t v16;

  objc_destroyWeak(v15);
  objc_destroyWeak(location);
  objc_destroyWeak(a11);
  objc_destroyWeak(a15);
  objc_destroyWeak((id *)(v16 - 168));
  _Unwind_Resume(a1);
}

void sub_10091E910(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_deleteSnapshot:", *(_QWORD *)(a1 + 32));

}

void sub_10091E94C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_deleteSnapshot:", *(_QWORD *)(a1 + 32));

}

void sub_10091E988(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_editEntrySnapshot:", *(_QWORD *)(a1 + 32));

}

void sub_10091E9C4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_openSnapshot:inNewTab:", *(_QWORD *)(a1 + 32), 1);

}

void sub_10091EA04(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_openSnapshot:inNewTab:", *(_QWORD *)(a1 + 32), 0);

}

void sub_10091EA44(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_deleteSnapshot:", *(_QWORD *)(a1 + 32));

}

void sub_10091F64C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10091F66C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_endEditSession");

}

void sub_100920000(uint64_t a1, uint64_t a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  int v7;
  uint64_t v8;

  if (a2)
  {
    v3 = sub_100432EDC();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v7 = 138412290;
      v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Error moving shortcut: %@", (uint8_t *)&v7, 0xCu);
    }

  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "delegate"));
  objc_msgSend(v6, "sectionController:setNeedsApplySnapshotAnimated:", *(_QWORD *)(a1 + 40), 1);

}

void sub_1009200C8(uint64_t a1, char a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  if ((a2 & 1) == 0)
  {
    v3 = sub_100432EDC();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = 138412290;
      v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Error moving shortcut: %@", (uint8_t *)&v6, 0xCu);
    }

  }
}

uint64_t sub_10092046C(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "shortcutIdentifier"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
  if (v3 == v4)
    v5 = 1;
  else
    v5 = (uint64_t)objc_msgSend(v3, "isEqual:", v4);

  return v5;
}

uint64_t sub_1009204DC(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "shortcutIdentifier"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
  if (v3 == v4)
    v5 = 1;
  else
    v5 = (uint64_t)objc_msgSend(v3, "isEqual:", v4);

  return v5;
}

void sub_10092070C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100920730(uint64_t a1, char a2)
{
  id *WeakRetained;
  id v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    if ((a2 & 1) == 0)
    {
      v5 = sub_100432EDC();
      v6 = objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 138412290;
        v9 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Error creating shortcut for map item: %@", (uint8_t *)&v8, 0xCu);
      }

    }
    objc_msgSend(WeakRetained[16], "removeObject:", *(_QWORD *)(a1 + 40));
  }

}

void sub_100920C38(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_100920C74(uint64_t a1, void *a2)
{
  id v3;
  id *WeakRetained;
  void *v5;
  uint64_t v6;

  v3 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    if (v3)
    {
      v6 = *(_QWORD *)(a1 + 32);
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v6, 1));
      objc_msgSend(WeakRetained, "endFailedDeletions:error:", v5, v3);

    }
    objc_msgSend(WeakRetained[17], "removeObject:", *(_QWORD *)(a1 + 40));
  }

}

void sub_100920D3C(uint64_t a1, char a2)
{
  id *WeakRetained;
  void *v5;
  uint64_t v6;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    if ((a2 & 1) == 0)
    {
      v6 = *(_QWORD *)(a1 + 32);
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v6, 1));
      objc_msgSend(WeakRetained, "endFailedDeletions:error:", v5, 0);

    }
    objc_msgSend(WeakRetained[17], "removeObject:", *(_QWORD *)(a1 + 40));
  }

}

void sub_10092228C(uint64_t a1)
{
  NavigationCustomFeaturesSource *v2;
  void *v3;
  void *v4;
  NavigationCustomFeaturesSource *v5;
  uint64_t v6;
  void *v7;
  id v8;

  v2 = [NavigationCustomFeaturesSource alloc];
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "carChromeViewController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "navigationDisplay"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "cameraController"));
  v5 = -[NavigationCustomFeaturesSource initWithPointsFramer:](v2, "initWithPointsFramer:", v4);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(void **)(v6 + 16);
  *(_QWORD *)(v6 + 16) = v5;

}

void sub_1009223BC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id *v8;
  id v9;

  if (!objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "count"))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "category"));

    if (v2)
      objc_msgSend(*(id *)(a1 + 32), "_fetchCategoryResults");
  }
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chromeViewController"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "mapView"));
  objc_msgSend(v4, "_setApplicationState:", 2);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chromeViewController"));
  objc_msgSend(v5, "setHardwareBackButtonBehavior:forContext:", 0, *(_QWORD *)(a1 + 32));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "category"));
  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[MKLocationManager sharedLocationManager](MKLocationManager, "sharedLocationManager"));
    objc_msgSend(v7, "startLocationUpdateWithObserver:", *(_QWORD *)(a1 + 32));

  }
  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "count") == (id)1)
  {
    v8 = *(id **)(a1 + 32);
    v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v8[4], "firstObject"));
    objc_msgSend(v8, "_displayPlaceCardForSearchResult:", v9);

  }
}

void sub_1009224E8(uint64_t a1)
{
  id v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchSession"));
  if ((objc_msgSend(v3, "isLoading") & 1) != 0)
  {

  }
  else
  {
    v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "count");

    if (v2)
      _objc_msgSend(*(id *)(a1 + 32), "_displayMapItems");
  }
}

void sub_100922A28(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_100922A54(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  NSObject *v5;
  id v6;
  id v7;
  id v8;
  NSObject *v9;
  void *v10;
  int v11;
  id v12;

  v3 = a2;
  if (v3)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_labelMarkerForCustomFeatureAnnotation:", v3));

    if (v5)
    {
      v6 = objc_loadWeakRetained((id *)(a1 + 40));
      objc_msgSend(v6, "_selectLabelMarker:animated:", v5, 1);
LABEL_6:

      goto LABEL_10;
    }
    v8 = sub_10043364C();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "name"));
      v11 = 138477827;
      v12 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "SAR: tried to highlight mapItem %{private}@, but labelMarker for annotation was nil.", (uint8_t *)&v11, 0xCu);

    }
    v5 = 0;
  }
  else
  {
    v7 = sub_10043364C();
    v5 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "name"));
      v11 = 138477827;
      v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "SAR: tried to highlight mapItem %{private}@, but its annotation was nil.", (uint8_t *)&v11, 0xCu);
      goto LABEL_6;
    }
  }
LABEL_10:

}

void sub_1009234D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100923500(uint64_t a1, int a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  unsigned __int8 v8;
  void *v9;
  const __CFString *v10;
  void *v11;
  id v12;
  NSObject *v13;
  __CFString *v14;
  __CFString *v15;
  NSObject *v16;
  id v17;
  const __CFString *v18;
  id v19;
  void *v20;
  int v21;
  const __CFString *v22;
  __int16 v23;
  id v24;

  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "chromeViewController"));
  v8 = objc_msgSend(v7, "isCurrentContext:", WeakRetained);

  if ((v8 & 1) != 0)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "chromeViewController"));
    v10 = sub_10052CA34(v5);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    objc_msgSend(v9, "captureUserAction:onTarget:eventValue:", 9020, 1009, v11);

    v12 = sub_10043364C();
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v14 = CFSTR("NO");
      if (a2)
        v14 = CFSTR("YES");
      v15 = v14;
      v21 = 138412546;
      v22 = v15;
      v23 = 2112;
      v24 = v5;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "SAR: handoff complete with success: %@, error: %@", (uint8_t *)&v21, 0x16u);

    }
    if (a2)
    {
      v16 = objc_claimAutoreleasedReturnValue(+[CarChromeModeCoordinator sharedInstance](CarChromeModeCoordinator, "sharedInstance"));
      -[NSObject displayMapBrowsing](v16, "displayMapBrowsing");
    }
    else
    {
      v16 = objc_claimAutoreleasedReturnValue(+[UIApplication sharedMapsDelegate](UIApplication, "sharedMapsDelegate"));
      v19 = CarInterruptionUserInfoForDestinationHandoffFailure(*(void **)(a1 + 32), v5);
      v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
      -[NSObject interruptApplicationWithKind:userInfo:completionHandler:](v16, "interruptApplicationWithKind:userInfo:completionHandler:", 3, v20, 0);

    }
  }
  else
  {
    v17 = sub_10043364C();
    v16 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v18 = CFSTR("stopped being currentMode.");
      if (!WeakRetained)
        v18 = CFSTR("deallocated");
      v21 = 138412290;
      v22 = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "SAR: mode %@ in the middle of destination handoff. Ignoring the handoff completion.", (uint8_t *)&v21, 0xCu);
    }
  }

}

void sub_1009239D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1009239EC(uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  if (*(_QWORD *)(result + 32) == a2)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = a3;
    *a4 = 1;
  }
  return result;
}

void sub_100923D2C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 32));
  _Unwind_Resume(a1);
}

void sub_100923D50(uint64_t a1)
{
  id *v1;
  void *v2;
  id v3;
  id WeakRetained;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "chromeViewController"));
  v3 = objc_loadWeakRetained(v1);
  objc_msgSend(v2, "setHardwareBackButtonBehavior:forContext:", 0, v3);

}

id sub_100924E24(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "captureStartNavigationIntent");
}

uint64_t sub_10092582C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;

  v5 = a2;
  v6 = a3;
  v7 = objc_opt_class(MKMapItem);
  if ((objc_opt_isKindOfClass(v5, v7) & 1) != 0)
  {
    v8 = objc_opt_class(MKMapItem);
    v9 = -1;
    if ((objc_opt_isKindOfClass(v6, v8) & 1) != 0)
    {
      v10 = v6;
      v11 = objc_msgSend(v5, "_coordinate");
      v14 = GEOCalculateDistance(v11, *(double *)(a1 + 32), *(double *)(a1 + 40), v12, v13);
      objc_msgSend(v10, "_coordinate");
      v16 = v15;
      v18 = v17;

      if (v14 >= GEOCalculateDistance(v19, *(double *)(a1 + 32), *(double *)(a1 + 40), v16, v18))
        v9 = 1;
    }
  }
  else
  {
    v9 = -1;
  }

  return v9;
}

int64_t sub_100925918(id a1, id a2, id a3)
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  int64_t v11;

  v4 = a2;
  v5 = a3;
  v6 = objc_opt_class(MKMapItem);
  if ((objc_opt_isKindOfClass(v4, v6) & 1) != 0
    && (v7 = objc_opt_class(MKMapItem), (objc_opt_isKindOfClass(v5, v7) & 1) != 0))
  {
    v8 = v5;
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "name"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "name"));

    v11 = (int64_t)objc_msgSend(v9, "localizedCaseInsensitiveCompare:", v10);
  }
  else
  {
    v11 = -1;
  }

  return v11;
}

void sub_100925DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a30);
  _Unwind_Resume(a1);
}

void sub_100925DFC(uint64_t a1, void *a2)
{
  id WeakRetained;
  id v4;

  v4 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (v4)
    {
      objc_msgSend(WeakRetained, "setHasDefaultImage:", 0);
      objc_msgSend(WeakRetained, "setCachedImage:", v4);
      objc_msgSend(WeakRetained, "notifyObserversInfoUpdated");
    }
    else
    {
      objc_msgSend(WeakRetained, "loadDefaultImage");
    }
  }

}

void sub_100925E74(uint64_t a1, uint64_t a2)
{
  id WeakRetained;

  if (a2)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(WeakRetained, "loadDefaultImage");

  }
}

id sub_10092601C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  objc_msgSend(v3, "setHasDefaultImage:", 1);
  objc_msgSend(*(id *)(a1 + 32), "setCachedImage:", v4);

  return objc_msgSend(*(id *)(a1 + 32), "notifyObserversInfoUpdated");
}

int64_t sub_100926850(id a1, MSCollectionItem *a2, MSCollectionItem *a3)
{
  MSCollectionItem *v4;
  void *v5;
  void *v6;
  id v7;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[MSCollectionItem createTime](a2, "createTime"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[MSCollectionItem createTime](v4, "createTime"));

  v7 = objc_msgSend(v5, "compare:", v6);
  return (int64_t)v7;
}

void sub_100926A24(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];

  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 8);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * (_QWORD)v6), "collectionHandlerInfoUpdated:", *(_QWORD *)(a1 + 32), (_QWORD)v7);
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

}

void sub_100926B84(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];

  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 8);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * (_QWORD)v6), "collectionHandlerContentUpdated:", *(_QWORD *)(a1 + 32), (_QWORD)v7);
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

}

id sub_100927C98(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setImage:", a2);
}

id sub_100927CB0(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setImage:", a2);
}

id sub_100927CC8(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "setImage:", a2);
}

void sub_1009299F4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;

  v5 = a2;
  v6 = objc_msgSend(a3, "copy");
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v6, v5);

}

void sub_10092A27C(uint64_t a1, void *a2)
{
  id WeakRetained;
  uint64_t v4;
  id v5;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_updateCommitBarItem");

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);

}

id sub_10092B5E8(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "selectAnnotation:animated:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 168), 1);
}

void sub_10092CC44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10092CC6C(uint64_t a1, void *a2)
{
  _QWORD *WeakRetained;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v8 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = WeakRetained + 8;
    objc_msgSend(v8, "selectedCoordinate");
    *v5 = v6;
    v4[9] = v7;
    objc_msgSend(v4, "_updateDoneBarItem");
  }

}

void sub_10092D4F8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 64));
  _Unwind_Resume(a1);
}

void sub_10092D518(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 8));
  objc_msgSend(WeakRetained, "callToActionViewProviderDidFinishResolvingEditState:", *(_QWORD *)(a1 + 32));

}

void sub_10092D558(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  _QWORD *WeakRetained;
  _QWORD *v7;
  id v8;
  NSObject *v9;
  void ***v10;
  id v11;
  NSObject *v12;
  void **v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  void *v16;
  _QWORD *v17;
  void **v18;
  uint64_t v19;
  void (*v20)(uint64_t);
  void *v21;
  _QWORD *v22;
  uint8_t buf[16];

  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v7 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "setHasUserAlreadyRatedThisPlace:", a2);
    if (objc_msgSend(v7, "hasUserAlreadyRatedThisPlace"))
    {
      v8 = sub_10043310C();
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "The user has reviewed this POI", buf, 2u);
      }

      if (!objc_msgSend(v5, "hasCachedValues")
        || (objc_msgSend(v7, "alwaysRefinesUserSubmission") & 1) != 0)
      {
        objc_msgSend(v7, "refineUserSubmissionForMapItem:", v7[2]);
        goto LABEL_10;
      }
      v11 = sub_10043310C();
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "We have valid cached values for this POI.  Early return.", buf, 2u);
      }

      objc_msgSend(v7, "setNumberOfPhotosAddedForSubmission:", objc_msgSend(v5, "numberOfPhotosAdded"));
      objc_msgSend(v7, "setCurrentRatingCategoryState:", objc_msgSend(v5, "recommendState"));
      v18 = _NSConcreteStackBlock;
      v19 = 3221225472;
      v20 = sub_10092D70C;
      v21 = &unk_1011AC860;
      v22 = v7;
      v10 = &v18;
    }
    else
    {
      v13 = _NSConcreteStackBlock;
      v14 = 3221225472;
      v15 = sub_10092D74C;
      v16 = &unk_1011AC860;
      v17 = v7;
      v10 = &v13;
    }
    objc_msgSend(v7, "_finishResolvingWithBlock:", v10, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  }
LABEL_10:

}

void sub_10092D70C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 8));
  objc_msgSend(WeakRetained, "callToActionViewProviderInitialLoadingStateDidChange:", *(_QWORD *)(a1 + 32));

}

void sub_10092D74C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 8));
  objc_msgSend(WeakRetained, "callToActionViewProviderDidFinishResolvingEditState:", *(_QWORD *)(a1 + 32));

}

void sub_10092D78C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  _QWORD *WeakRetained;
  _QWORD *v7;
  id v8;
  NSObject *v9;
  void ***v10;
  id v11;
  NSObject *v12;
  void **v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  void *v16;
  _QWORD *v17;
  void **v18;
  uint64_t v19;
  void (*v20)(uint64_t);
  void *v21;
  _QWORD *v22;
  uint8_t buf[16];

  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v7 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "setHasUserAlreadyRatedThisPlace:", a2);
    if (objc_msgSend(v7, "hasUserAlreadyRatedThisPlace"))
    {
      v8 = sub_10043310C();
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "The user has reviewed this POI", buf, 2u);
      }

      if (!objc_msgSend(v5, "hasCachedValues")
        || (objc_msgSend(v7, "alwaysRefinesUserSubmission") & 1) != 0)
      {
        objc_msgSend(v7, "refineUserSubmissionForMapItem:", v7[2]);
        goto LABEL_10;
      }
      v11 = sub_10043310C();
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "We have valid cached values for this POI.  Early return.", buf, 2u);
      }

      objc_msgSend(v7, "setNumberOfPhotosAddedForSubmission:", objc_msgSend(v5, "numberOfPhotosAdded"));
      objc_msgSend(v7, "setCurrentRatingCategoryState:", objc_msgSend(v5, "recommendState"));
      v18 = _NSConcreteStackBlock;
      v19 = 3221225472;
      v20 = sub_10092D940;
      v21 = &unk_1011AC860;
      v22 = v7;
      v10 = &v18;
    }
    else
    {
      v13 = _NSConcreteStackBlock;
      v14 = 3221225472;
      v15 = sub_10092D980;
      v16 = &unk_1011AC860;
      v17 = v7;
      v10 = &v13;
    }
    objc_msgSend(v7, "_finishResolvingWithBlock:", v10, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  }
LABEL_10:

}

void sub_10092D940(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 8));
  objc_msgSend(WeakRetained, "callToActionViewProviderInitialLoadingStateDidChange:", *(_QWORD *)(a1 + 32));

}

void sub_10092D980(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 8));
  objc_msgSend(WeakRetained, "callToActionViewProviderDidFinishResolvingEditState:", *(_QWORD *)(a1 + 32));

}

void sub_10092DB00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10092DB24(uint64_t a1, char a2, void *a3)
{
  id v5;
  uint64_t v6;
  id v7;
  id WeakRetained;
  _QWORD v9[4];
  id v10;
  id v11;
  id v12;
  char v13;

  v5 = a3;
  if ((MapsFeature_IsEnabled_SydneyARP(v5, v6) & 1) == 0)
    goto LABEL_7;
  if (!objc_msgSend(v5, "numberOfPhotosAdded"))
  {
    WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 8));
    objc_msgSend(WeakRetained, "callToActionViewProviderDidUpdateWithPreferredUserUploadedPhoto:photoID:numberOfPhotos:", 0, 0, 0);

LABEL_7:
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    goto LABEL_8;
  }
  v7 = objc_loadWeakRetained((id *)(a1 + 48));
  if (v7)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10092DC60;
    v9[3] = &unk_1011DC310;
    objc_copyWeak(&v12, (id *)(a1 + 48));
    v11 = *(id *)(a1 + 40);
    v13 = a2;
    v10 = v5;
    objc_msgSend(v7, "_retrievePhotoURLWithCompletion:", v9);

    objc_destroyWeak(&v12);
  }

LABEL_8:
}

void sub_10092DC4C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10092DC60(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id *WeakRetained;
  id v9;
  id v10;

  v10 = a2;
  v7 = a3;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    if (v10)
    {
      v9 = objc_loadWeakRetained(WeakRetained + 1);
      objc_msgSend(v9, "callToActionViewProviderDidUpdateWithPreferredUserUploadedPhoto:photoID:numberOfPhotos:", v10, v7, a4);

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

void sub_10092E024(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_10092E058(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  _QWORD block[4];
  id v10;
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10092E11C;
  block[3] = &unk_1011AFF10;
  objc_copyWeak(&v12, (id *)(a1 + 32));
  v10 = v5;
  v11 = v6;
  v7 = v6;
  v8 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  objc_destroyWeak(&v12);
}

void sub_10092E11C(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "_handleLookupSubmissionCompletion:lookupError:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    WeakRetained = v3;
  }

}

void sub_10092E15C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  _QWORD block[4];
  id v10;
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10092E220;
  block[3] = &unk_1011AFF10;
  objc_copyWeak(&v12, (id *)(a1 + 32));
  v10 = v5;
  v11 = v6;
  v7 = v6;
  v8 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  objc_destroyWeak(&v12);
}

void sub_10092E220(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "_handleLookupSubmissionCompletion:lookupError:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    WeakRetained = v3;
  }

}

void sub_10092E31C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 8));
  objc_msgSend(WeakRetained, "callToActionViewProviderDidFinishResolvingEditState:", *(_QWORD *)(a1 + 32));

}

void sub_10092E35C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 8));
  objc_msgSend(WeakRetained, "callToActionViewProviderDidFinishResolvingEditState:", *(_QWORD *)(a1 + 32));

}

void sub_10092E704(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10092E720(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  NSObject *v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  int v23;
  void *v24;

  v5 = a2;
  if (a3)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    v7 = WeakRetained;
    if (WeakRetained)
    {
      objc_msgSend(WeakRetained, "setLookupResult:", v5);
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "previousSubmission"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "images"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectAtIndexedSubscript:", 0));

      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "previousSubmission"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "images"));
      v13 = objc_msgSend(v12, "count");

      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "url"));
      v15 = objc_msgSend(v14, "length");

      if (v15)
      {
        v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "url"));
        v17 = objc_msgSend(objc_alloc((Class)NSURL), "initWithString:", v16);
        objc_msgSend(v7, "setFirstPhotoURL:", v17);

      }
      else
      {
        v18 = sub_10043310C();
        v16 = objc_claimAutoreleasedReturnValue(v18);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          v23 = 138412290;
          v24 = v10;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Image contains a nil or empty URL. Image: %@.", (uint8_t *)&v23, 0xCu);
        }
      }

      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "imageId"));
      objc_msgSend(v7, "setFirstPhotoID:", v19);

      v20 = *(_QWORD *)(a1 + 32);
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "firstPhotoURL"));
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "imageId"));
      (*(void (**)(uint64_t, void *, void *, id))(v20 + 16))(v20, v21, v22, v13);

    }
  }

}

uint64_t sub_10092F4C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100932A08(id a1, NSString *a2, NSDictionary *a3, BOOL *a4)
{
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(-[NSDictionary allValues](a3, "allValues"));
  +[NSLayoutConstraint deactivateConstraints:](NSLayoutConstraint, "deactivateConstraints:", v4);

}

void sub_10093594C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100935970(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *WeakRetained;
  id v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  _QWORD block[4];
  id v23;
  id v24;
  id v25;
  uint8_t buf[4];
  id v27;
  __int16 v28;
  uint64_t v29;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (v6)
    {
      v8 = sub_1004325AC();
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "description"));
        v11 = WeakRetained[1];
        *(_DWORD *)buf = 138412546;
        v27 = v10;
        v28 = 2112;
        v29 = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Error %@ for stationId %@", buf, 0x16u);

      }
    }
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "_transitInfo"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "departureSequences"));

    v15 = sub_1004325AC();
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      v17 = objc_msgSend(v14, "count");
      v18 = WeakRetained[1];
      *(_DWORD *)buf = 134218242;
      v27 = v17;
      v28 = 2112;
      v29 = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Received %lu departureSequences for stationId %@", buf, 0x16u);
    }

    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100935B90;
    block[3] = &unk_1011B5ED8;
    v19 = *(id *)(a1 + 32);
    v24 = v14;
    v25 = v19;
    v23 = v12;
    v20 = v14;
    v21 = v12;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  }
}

void sub_100935B90(uint64_t a1)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_transitInfo"));
  (*(void (**)(uint64_t, id, _QWORD))(v2 + 16))(v2, v3, *(_QWORD *)(a1 + 40));

}

void sub_100935D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100935D44(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id *WeakRetained;
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  int v12;
  id v13;
  __int16 v14;
  id v15;
  __int16 v16;
  void *v17;

  v4 = a3;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (objc_msgSend(v4, "count"))
    {
      objc_msgSend(WeakRetained, "setRemoteNetworkState:", 1);
      objc_msgSend(WeakRetained, "processDeparturesFromDepartureSequences:animatingDifferences:", v4, 0);
      objc_msgSend(WeakRetained, "selectNextIncomingDeparture");
    }
    else
    {
      v6 = WeakRetained[2];
      v7 = WeakRetained[3];
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "scheduleWindowStartDate"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "description"));

      v10 = sub_1004325AC();
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        v12 = 134218498;
        v13 = v7;
        v14 = 2112;
        v15 = v6;
        v16 = 2112;
        v17 = v9;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "No departures for lineId %llu from %@ at %@", (uint8_t *)&v12, 0x20u);
      }

      objc_msgSend(WeakRetained, "setRemoteNetworkState:", 3);
    }
  }

}

uint64_t sub_100936020(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  double v7;
  double v8;
  uint64_t v9;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "departures"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "firstObject"));

  if (v5
    && (v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "departureDate")),
        objc_msgSend(v6, "timeIntervalSinceDate:", *(_QWORD *)(a1 + 32)),
        v8 = v7,
        v6,
        v8 < 0.0))
  {
    v9 = 1;
  }
  else
  {
    v9 = (uint64_t)objc_msgSend(v3, "isValidForDate:inTimeZone:", *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 72));
  }

  return v9;
}

void sub_100936374(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *i;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  void *j;
  void *v24;
  void *v25;
  unsigned __int8 v26;
  id v27;
  id v28;
  NSObject *v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  id v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  void *v55;
  uint8_t buf[4];
  void *v57;
  _BYTE v58[128];
  _BYTE v59[128];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "headsign"));

  if (v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "departures"));
    v6 = *(void **)(*(_QWORD *)(a1 + 32) + 48);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "headsign"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", v7));

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
    v10 = objc_msgSend(v9, "liveStatus");

    if (v10 == (id)1)
    {
      v46 = v3;
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
      v51 = 0u;
      v52 = 0u;
      v53 = 0u;
      v54 = 0u;
      v45 = v5;
      v12 = v5;
      v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v51, v59, 16);
      if (v13)
      {
        v14 = v13;
        v15 = *(_QWORD *)v52;
        do
        {
          for (i = 0; i != v14; i = (char *)i + 1)
          {
            if (*(_QWORD *)v52 != v15)
              objc_enumerationMutation(v12);
            v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(*(id *)(*((_QWORD *)&v51 + 1) + 8 * (_QWORD)i), "tripIdentifier")));
            objc_msgSend(v11, "addObject:", v17);

          }
          v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v51, v59, 16);
        }
        while (v14);
      }
      v44 = v12;

      v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
      v47 = 0u;
      v48 = 0u;
      v49 = 0u;
      v50 = 0u;
      v19 = v8;
      v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v47, v58, 16);
      if (v20)
      {
        v21 = v20;
        v22 = *(_QWORD *)v48;
        do
        {
          for (j = 0; j != v21; j = (char *)j + 1)
          {
            if (*(_QWORD *)v48 != v22)
              objc_enumerationMutation(v19);
            v24 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * (_QWORD)j);
            v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v24, "tripIdentifier", v44)));
            v26 = objc_msgSend(v11, "containsObject:", v25);

            if ((v26 & 1) == 0)
              objc_msgSend(v18, "addObject:", v24);
          }
          v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v47, v58, 16);
        }
        while (v21);
      }

      v27 = objc_msgSend(v18, "count");
      v28 = sub_1004325AC();
      v29 = objc_claimAutoreleasedReturnValue(v28);
      v30 = os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG);
      v3 = v46;
      if (v27)
      {
        v31 = a1;
        if (v30)
        {
          *(_DWORD *)buf = 138412290;
          v57 = v18;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "Merging past departures %@", buf, 0xCu);
        }

        v32 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "arrayByAddingObject:", v46));
        v33 = *(_QWORD *)(a1 + 32);
        v34 = *(void **)(v33 + 40);
        *(_QWORD *)(v33 + 40) = v32;

        v35 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "arrayByAddingObjectsFromArray:", v44));
      }
      else
      {
        v31 = a1;
        if (v30)
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "No past departures to merge; using server values",
            buf,
            2u);
        }

        v55 = v46;
        v39 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v55, 1));
        v40 = *(_QWORD *)(a1 + 32);
        v41 = *(void **)(v40 + 40);
        *(_QWORD *)(v40 + 40) = v39;

        v35 = objc_msgSend(v44, "copy");
      }
      v8 = v35;

      v42 = *(void **)(*(_QWORD *)(v31 + 32) + 48);
      v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "headsign"));
      objc_msgSend(v42, "setObject:forKeyedSubscript:", v8, v43);

      v5 = v45;
    }
    else
    {
      v36 = objc_msgSend(v5, "copy");
      v37 = *(void **)(*(_QWORD *)(a1 + 32) + 48);
      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "headsign"));
      objc_msgSend(v37, "setObject:forKeyedSubscript:", v36, v38);

    }
  }

}

void sub_100936A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100936A68(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100936A78(uint64_t a1)
{

}

void sub_100936A80(uint64_t a1, void *a2, uint64_t a3, BOOL *a4)
{
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  uint64_t v13;

  v6 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "departures"));
  v10[0] = _NSConcreteStackBlock;
  v10[2] = sub_100936B38;
  v10[3] = &unk_1011DC4A8;
  v8 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = v8;
  v10[1] = 3221225472;
  v11 = v6;
  v9 = v6;
  objc_msgSend(v7, "enumerateObjectsUsingBlock:", v10);

  *a4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) != 0;
}

void sub_100936B38(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  if (objc_msgSend(a2, "tripIdentifier") == *(id *)(a1 + 48))
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(a1 + 32));
    *a4 = 1;
  }
}

uint64_t sub_100936C64(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v3 = a2;
  if (objc_msgSend(v3, "tripIdentifier") == *(id *)(a1 + 40))
  {
    if (*(_QWORD *)(a1 + 32))
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "scheduledDepartureDate"));
      if (v4)
      {
        v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "scheduledDepartureDate"));
        v6 = (uint64_t)objc_msgSend(v5, "isEqualToDate:", *(_QWORD *)(a1 + 32));

      }
      else
      {
        v6 = 1;
      }

    }
    else
    {
      v6 = 1;
    }
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_100936E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100936E90(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id result;

  result = objc_msgSend(a2, "isPastDeparture");
  if ((result & 1) == 0)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a3;
    *a4 = 1;
  }
  return result;
}

void sub_100937040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100937058(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v7;
  id v8;
  void *v9;
  void *v10;

  v7 = *(void **)(a1 + 32);
  v8 = a2;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "headsign"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "headsign"));

  LODWORD(v8) = objc_msgSend(v9, "isEqualToString:", v10);
  if ((_DWORD)v8)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a3;
    *a4 = 1;
  }
}

id sub_10093874C(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v4, "length"))
  {
    v5 = v4;
  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "addressObject"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "parkingDisplayName"));

    if (objc_msgSend(v7, "length"))
      v8 = v7;
    else
      v8 = 0;
    v5 = v8;

  }
  return v5;
}

id sub_10093939C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
}

BOOL sub_10093B27C(id a1, GEOTransitStep *a2, unint64_t a3, BOOL *a4)
{
  return -[GEOTransitStep maneuverType](a2, "maneuverType", a3, a4) == 1;
}

void sub_10093D2D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location,id a21)
{
  id *v21;
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a21);
  _Unwind_Resume(a1);
}

void sub_10093D30C(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;

  v9 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v5 = objc_loadWeakRetained((id *)(a1 + 48));

    if (v5)
    {
      v6 = objc_loadWeakRetained((id *)(a1 + 40));
      v7 = objc_loadWeakRetained((id *)(a1 + 48));
      objc_msgSend(v7, "setupWithModel:cellStyle:", v9, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32));

      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "searchResultTableView"));
      objc_msgSend(v8, "reloadData");

    }
  }

}

void sub_10093D588(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  id v22;
  _QWORD block[4];
  id v24;
  id v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];

  v4 = a2;
  v22 = a3;
  v5 = objc_alloc_init((Class)NSMutableArray);
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v6 = v4;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v27;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v27 != v9)
          objc_enumerationMutation(v6);
        v11 = *(id *)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)v10);
        if (objc_msgSend(v11, "conformsToProtocol:", &OBJC_PROTOCOL___MSPHistoryEntryRoute))
          v12 = v11;
        else
          v12 = 0;
        v13 = v12;

        if (v13)
        {
          v14 = objc_alloc(*(Class *)(a1 + 40));
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "storageIdentifier"));
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "objectForKeyedSubscript:", v15));
          v17 = objc_msgSend(v14, "initWithHistoryItem:recording:", v13, v16);

          objc_msgSend(v5, "addObject:", v17);
        }

        v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
    }
    while (v8);
  }
  v18 = v6;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10093D7AC;
  block[3] = &unk_1011ACAD0;
  v19 = *(id *)(a1 + 32);
  v24 = v5;
  v25 = v19;
  v20 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

uint64_t sub_10093D7AC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_10093DAEC(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  HistoryRAPUserDirectionRequest *v15;
  void *v16;
  void *v17;
  HistoryRAPUserDirectionRequest *v18;
  id v19;
  id v20;
  uint64_t v21;
  id v22;
  _QWORD block[4];
  id v24;
  id v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];

  v21 = a1;
  v4 = a2;
  v22 = a3;
  v5 = objc_alloc_init((Class)NSMutableArray);
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v6 = v4;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v27;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v27 != v9)
          objc_enumerationMutation(v6);
        v11 = *(id *)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)v10);
        if (objc_msgSend(v11, "conformsToProtocol:", &OBJC_PROTOCOL___MSPHistoryEntryRoute, v21))
          v12 = v11;
        else
          v12 = 0;
        v13 = v12;

        if ((char *)objc_msgSend(v13, "transportType") - 6 >= (char *)0xFFFFFFFFFFFFFFFBLL && v13 != 0)
        {
          v15 = [HistoryRAPUserDirectionRequest alloc];
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "storageIdentifier"));
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "objectForKeyedSubscript:", v16));
          v18 = -[HistoryRAPUserDirectionRequest initWithHistoryItem:recording:](v15, "initWithHistoryItem:recording:", v13, v17);

          objc_msgSend(v5, "addObject:", v18);
        }

        v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
    }
    while (v8);
  }

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10093DD20;
  block[3] = &unk_1011ACAD0;
  v19 = *(id *)(v21 + 32);
  v24 = v5;
  v25 = v19;
  v20 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

uint64_t sub_10093DD20(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_10093E1B8(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  HistoryEntryRecentsItem *v14;
  uint64_t v15;
  HistoryRAPUserSearch *v16;
  void *v17;
  HistoryRAPUserSearch *v18;
  id v19;
  id v20;
  id v22;
  id obj;
  _QWORD block[4];
  id v25;
  id v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];

  v4 = a2;
  v5 = a3;
  v22 = objc_alloc_init((Class)NSMutableArray);
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  obj = v4;
  v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v28;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v28 != v8)
          objc_enumerationMutation(obj);
        v10 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)i);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "storageIdentifier"));
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", v11));

        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "correctedSearchTemplate"));
        if (objc_msgSend(v13, "containsReportableData"))
        {
          v14 = -[HistoryEntryRecentsItem initWithHistoryEntry:]([HistoryEntryRecentsItem alloc], "initWithHistoryEntry:", v10);
          if (objc_msgSend(v12, "hasOriginatingAuxiliaryControlIndex"))
            v15 = (uint64_t)objc_msgSend(v12, "originatingAuxiliaryControlIndex");
          else
            v15 = 0x7FFFFFFFFFFFFFFFLL;
          v16 = [HistoryRAPUserSearch alloc];
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "auxiliaryControls"));
          v18 = -[HistoryRAPUserSearch initWithHistoryItem:correctedSearchTemplate:auxiliaryControls:originatingIndex:](v16, "initWithHistoryItem:correctedSearchTemplate:auxiliaryControls:originatingIndex:", v14, v13, v17, v15);

          objc_msgSend(v22, "addObject:", v18);
        }

      }
      v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
    }
    while (v7);
  }

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10093E41C;
  block[3] = &unk_1011ACAD0;
  v19 = *(id *)(a1 + 32);
  v25 = v22;
  v26 = v19;
  v20 = v22;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

uint64_t sub_10093E41C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

id sub_10093F41C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateGlyphAppearance");
}

id sub_1009400F8(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "glyph"));
  objc_msgSend(v2, "setHidden:", 0);

  objc_msgSend(*(id *)(a1 + 40), "removeFromSuperlayer");
  objc_msgSend(*(id *)(a1 + 32), "setAnimationLayer:", 0);
  return objc_msgSend(*(id *)(a1 + 32), "setContentLayer:", 0);
}

uint64_t sub_10094014C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_1009409A4(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "glyph"));
  objc_msgSend(v2, "setHidden:", 0);

  objc_msgSend(*(id *)(a1 + 40), "removeFromSuperlayer");
  objc_msgSend(*(id *)(a1 + 32), "setAnimationLayer:", 0);
  return objc_msgSend(*(id *)(a1 + 32), "setContentLayer:", 0);
}

uint64_t sub_1009409F8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100941264(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100941280(uint64_t a1)
{
  _QWORD *WeakRetained;
  _QWORD *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    (*(void (**)(void))(WeakRetained[1] + 16))();
    WeakRetained = v2;
  }

}

void sub_100941FF4(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "traitCollection"));
  v3 = objc_msgSend(v2, "userInterfaceIdiom");

  if (v3 != (id)5)
  {
    v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "navigationItem"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "searchController"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "searchBar"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "searchTextField"));
    objc_msgSend(v6, "becomeFirstResponder");

  }
}

void sub_100942348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100942364(uint64_t a1, void *a2)
{
  RAPSearchAutocompleteResult *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id WeakRetained;
  id v9;
  id v10;

  v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "firstObject"));
  v3 = objc_alloc_init(RAPSearchAutocompleteResult);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "navigationItem"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "searchController"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "searchBar"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "text"));
  -[RAPSearchAutocompleteResult setSearchBarText:](v3, "setSearchBarText:", v7);

  -[RAPSearchAutocompleteResult setSelectedMapItem:](v3, "setSelectedMapItem:", v10);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v9 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 64));
    objc_msgSend(v9, "rapSearchAutocompleteViewController:finishedPickingAutocompleteResult:isAutocompleteResult:", *(_QWORD *)(a1 + 32), v3, 1);

    objc_msgSend(*(id *)(a1 + 32), "_dismissViewController");
  }

}

id sub_100943090()
{
  if (qword_1014D3A20 != -1)
    dispatch_once(&qword_1014D3A20, &stru_1011DC6B0);
  return (id)qword_1014D3A18;
}

void sub_100943F0C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFScanningInstructionLabel");
  v2 = (void *)qword_1014D3A18;
  qword_1014D3A18 = (uint64_t)v1;

}

void sub_100944A7C(uint64_t a1)
{
  double v2;
  double v3;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint8_t buf[4];
  void *v12;
  __int16 v13;
  double v14;

  objc_msgSend(*(id *)(a1 + 32), "timeIntervalSinceReferenceDate");
  v3 = v2;
  v4 = sub_100432A7C();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "debugString"));
    *(_DWORD *)buf = 138412546;
    v12 = v6;
    v13 = 2048;
    v14 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Logging element did enter %@ with start date %f", buf, 0x16u);

  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "customData"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "sessionIdentifier"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "query"));
  LODWORD(v10) = 1;
  +[GEOAPPortal captureSearchResultImpressionEventWithImpressionObjectId:query:businessId:localSearchProviderId:elementIndex:isEnriched:impressionEvent:impressionVisibleTimestamp:impressionNonvisibleTimestamp:](GEOAPPortal, "captureSearchResultImpressionEventWithImpressionObjectId:query:businessId:localSearchProviderId:elementIndex:isEnriched:impressionEvent:impressionVisibleTimestamp:impressionNonvisibleTimestamp:", v8, v9, objc_msgSend(v7, "businessId"), objc_msgSend(v7, "localSearchProviderId"), objc_msgSend(v7, "resultIndex"), objc_msgSend(v7, "isEnriched"), v3, 0.0, v10);

}

void sub_100944CDC(id *a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint8_t buf[4];
  void *v14;
  __int16 v15;
  double v16;
  __int16 v17;
  double v18;

  objc_msgSend(a1[4], "timeIntervalSinceReferenceDate");
  v3 = v2;
  objc_msgSend(a1[5], "timeIntervalSinceReferenceDate");
  v5 = v4;
  v6 = sub_100432A7C();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "debugString"));
    *(_DWORD *)buf = 138412802;
    v14 = v8;
    v15 = 2048;
    v16 = v3;
    v17 = 2048;
    v18 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Logging element did exit %@ with start date %f, end date %f", buf, 0x20u);

  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "customData"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "sessionIdentifier"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "query"));
  LODWORD(v12) = 2;
  +[GEOAPPortal captureSearchResultImpressionEventWithImpressionObjectId:query:businessId:localSearchProviderId:elementIndex:isEnriched:impressionEvent:impressionVisibleTimestamp:impressionNonvisibleTimestamp:](GEOAPPortal, "captureSearchResultImpressionEventWithImpressionObjectId:query:businessId:localSearchProviderId:elementIndex:isEnriched:impressionEvent:impressionVisibleTimestamp:impressionNonvisibleTimestamp:", v10, v11, objc_msgSend(v9, "businessId"), objc_msgSend(v9, "localSearchProviderId"), objc_msgSend(v9, "resultIndex"), objc_msgSend(v9, "isEnriched"), v3, v5, v12);

}

uint64_t sub_100945BAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100945BBC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100945C7C(id a1, NSMutableArray *a2, NSString *a3, NSString *a4)
{
  NSString *v6;
  NSString *v7;
  void *v8;
  NSMutableArray *v9;

  v9 = a2;
  v6 = a3;
  v7 = a4;
  if (-[NSString length](v7, "length"))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSURLQueryItem queryItemWithName:value:](NSURLQueryItem, "queryItemWithName:value:", v6, v7));
    -[NSMutableArray addObject:](v9, "addObject:", v8);

  }
}

uint64_t sub_100945D04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), a2, a3);
}

id sub_1009473F0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  unsigned int v7;
  void *v8;
  void *v9;
  RidesharingFareLineItem *v10;
  void *v11;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "currencyCode"));
  if (!v4 || (objc_msgSend(*(id *)(a1 + 32), "containsObject:", v4) & 1) != 0)
    goto LABEL_3;
  if ((objc_msgSend(*(id *)(a1 + 40), "containsObject:", v4) & 1) == 0)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSLocale ISOCurrencyCodes](NSLocale, "ISOCurrencyCodes"));
    v7 = objc_msgSend(v6, "containsObject:", v4);

    if (!v7)
    {
      objc_msgSend(*(id *)(a1 + 32), "addObject:", v4);
LABEL_3:
      v5 = 0;
      goto LABEL_15;
    }
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v4);
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "price"));
  if (v8)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString _navigation_formattedStringForPriceValueWithAmount:currencyCode:](NSString, "_navigation_formattedStringForPriceValueWithAmount:currencyCode:", v8, v4));
    if (v9)
    {
      v10 = [RidesharingFareLineItem alloc];
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "title"));
      v5 = -[RidesharingFareLineItem _initWithTitle:details:](v10, "_initWithTitle:details:", v11, v9);

    }
    else
    {
      v5 = 0;
    }

  }
  else
  {
    v5 = 0;
  }

LABEL_15:
  return v5;
}

void sub_1009486F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1009487DC(uint64_t a1)
{
  id WeakRetained;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = *(unsigned int *)(a1 + 40);
    v6 = WeakRetained;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "preferences"));
    objc_msgSend(v4, "setSortOption:", v3);

    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "delegate"));
    objc_msgSend(v5, "updatedRefinementModel:", v6);

    WeakRetained = v6;
  }

}

void sub_10094884C(uint64_t a1)
{
  _DWORD *WeakRetained;
  void *v2;
  void *v3;
  _DWORD *v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "preferences"));
    objc_msgSend(v2, "setShowICFares:", 1);

    v4[4] = 3032;
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "delegate"));
    objc_msgSend(v3, "updatedRefinementModel:", v4);

    WeakRetained = v4;
  }

}

void sub_1009488C0(uint64_t a1)
{
  _DWORD *WeakRetained;
  void *v2;
  void *v3;
  _DWORD *v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "preferences"));
    objc_msgSend(v2, "setShowICFares:", 0);

    v4[4] = 3033;
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "delegate"));
    objc_msgSend(v3, "updatedRefinementModel:", v4);

    WeakRetained = v4;
  }

}

void sub_100948934(uint64_t a1)
{
  id WeakRetained;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v6 = WeakRetained;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "preferences"));
    objc_msgSend(v4, "setSurchargeOption:", v3);

    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "delegate"));
    objc_msgSend(v5, "updatedRefinementModel:", v6);

    WeakRetained = v6;
  }

}

id sub_100949148()
{
  if (qword_1014D3A40 != -1)
    dispatch_once(&qword_1014D3A40, &stru_1011DC8C0);
  return (id)qword_1014D3A38;
}

uint64_t sub_100949554(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100949D58(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Block_object_dispose((const void *)(v1 - 240), 8);
  _Unwind_Resume(a1);
}

id sub_100949DB0(uint64_t a1, uint64_t a2)
{
  id result;

  result = objc_retainBlock(*(id *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_100949DD8(uint64_t a1)
{

}

void sub_100949DE0(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_currentInterruptionHandle"));
  v5 = *(void **)(a1 + 40);

  if (v4 == v5)
    objc_msgSend(*(id *)(a1 + 32), "_setCurrentInterruptionHandle:", 0);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  if (!*(_BYTE *)(v6 + 24))
  {
    *(_BYTE *)(v6 + 24) = 1;
    if (objc_msgSend(*(id *)(a1 + 48), "count") && (unint64_t)objc_msgSend(*(id *)(a1 + 48), "count") > a2)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectAtIndexedSubscript:", a2));
      objc_msgSend(v7, "fire");

    }
    v8 = *(_QWORD *)(a1 + 72);
    if (v8)
      (*(void (**)(uint64_t, unint64_t))(v8 + 16))(v8, a2);
    objc_msgSend(*(id *)(a1 + 56), "setDismissalBlock:", 0);
    objc_msgSend(*(id *)(a1 + 64), "setDismissalBlock:", 0);
  }
}

void sub_100949EBC(uint64_t a1, uint64_t a2)
{
  void (**v4)(_QWORD, _QWORD);
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void (**v8)(id, _QWORD);

  v8 = (void (**)(id, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dismissalBlock"));
  v4 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "dismissalBlock"));
  if (v8)
    v8[2](v8, a2);
  if (v4)
    v4[2](v4, a2);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  if (v5)
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v5, qword_1014B79F8);
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = 0;

  }
}

void sub_100949F74(uint64_t a1, uint64_t a2)
{
  void (**v4)(_QWORD, _QWORD);
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void (**v8)(_QWORD, _QWORD);

  v4 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dismissalBlock"));
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  v8 = v4;
  if (v5)
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v5, a2);
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = 0;

    v4 = v8;
  }
  if (v4)
  {
    v4[2](v4, 1);
    v4 = v8;
  }

}

void sub_100949FFC(uint64_t a1, uint64_t a2)
{
  void (**v4)(_QWORD, _QWORD);
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void (**v8)(_QWORD, _QWORD);

  v4 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dismissalBlock"));
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  v8 = v4;
  if (v5)
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v5, a2);
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = 0;

    v4 = v8;
  }
  if (v4)
  {
    v4[2](v4, 1);
    v4 = v8;
  }

}

void sub_10094A1F8(uint64_t a1)
{
  objc_setAssociatedObject(*(id *)(a1 + 32), off_1014B7A00, &__kCFBooleanFalse, (void *)3);
}

uint64_t sub_10094A348(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t result;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MKLocationManager sharedLocationManager](MKLocationManager, "sharedLocationManager"));
  v3 = objc_msgSend(v2, "isLocationServicesApproved");

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, id))(result + 16))(result, v3);
  return result;
}

void sub_10094A9F8(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v1);
  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v3 - 120));
  _Unwind_Resume(a1);
}

void sub_10094AA2C(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  id v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_cleanupAfterLocationServicesAlertController");

  if (*(_DWORD *)(a1 + 48))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
    objc_msgSend(v3, "captureUserAction:onTarget:eventValue:", 62, *(unsigned int *)(a1 + 48), 0);

  }
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_mapkit_locationErrorSettingsURL"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  objc_msgSend(v4, "_maps_openURL:options:completionHandler:", v5, 0, 0);

}

void sub_10094AAD0(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_cleanupAfterLocationServicesAlertController");

  if (*(_DWORD *)(a1 + 40))
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
    objc_msgSend(v3, "captureUserAction:onTarget:eventValue:", 59, *(unsigned int *)(a1 + 40), 0);

  }
}

void sub_10094AEAC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_10094AEF8(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_cleanupAfterLocationServicesAlertController");

  v2 = (id)objc_claimAutoreleasedReturnValue(+[MKLocationManager sharedLocationManager](MKLocationManager, "sharedLocationManager"));
  objc_msgSend(v2, "requestTemporaryPreciseLocationAuthorizationWithPurposeKey:completion:", CFSTR("AppInfoTemporaryPreciseLocationAuthorizationForMapBrowsingPurposeKey"), 0);

}

void sub_10094AF58(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  id v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_cleanupAfterLocationServicesAlertController");

  if (*(_DWORD *)(a1 + 48))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
    objc_msgSend(v3, "captureUserAction:onTarget:eventValue:", 62, *(unsigned int *)(a1 + 48), 0);

  }
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_mapkit_locationErrorSettingsURL"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  objc_msgSend(v4, "_maps_openURL:options:completionHandler:", v5, 0, 0);

}

void sub_10094AFFC(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_cleanupAfterLocationServicesAlertController");

  if (*(_DWORD *)(a1 + 40))
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
    objc_msgSend(v3, "captureUserAction:onTarget:eventValue:", 59, *(unsigned int *)(a1 + 40), 0);

  }
}

void sub_10094B0E0(uint64_t a1)
{
  void *v2;
  NPSManager *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  id v12;

  v12 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  if ((objc_msgSend(v12, "BOOLForKey:", CFSTR("HasShownNavModeAdvisory2020")) & 1) == 0)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedMapsDelegate](UIApplication, "sharedMapsDelegate"));
    objc_msgSend(v2, "interruptApplicationWithKind:userInfo:completionHandler:", 1, 0, 0);

    objc_msgSend(v12, "setBool:forKey:", 1, CFSTR("HasShownNavModeAdvisory2020"));
    objc_msgSend(v12, "synchronize");
    v3 = objc_opt_new(NPSManager);
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](NSSet, "setWithObject:", CFSTR("HasShownNavModeAdvisory2020")));
    -[NPSManager synchronizeUserDefaultsDomain:keys:container:](v3, "synchronizeUserDefaultsDomain:keys:container:", CFSTR("com.apple.Maps"), v4, CFSTR("com.apple.Maps"));

    v5 = (void *)objc_claimAutoreleasedReturnValue(+[IPCServer sharedServer](IPCServer, "sharedServer"));
    objc_msgSend(v5, "setNeedsToDisplaySafetyWarning");

    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "platformController"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "currentSession"));

    v8 = objc_opt_class(RoutePlanningSession);
    if ((objc_opt_isKindOfClass(v7, v8) & 1) != 0)
      v9 = v7;
    else
      v9 = 0;
    v10 = v9;

    if (v10)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "navigationStateMonitoringTask"));
      objc_msgSend(v11, "cancelNavigationAutoLaunchIfNeccessary");

    }
  }

}

_QWORD *sub_10094B698(_QWORD *result, uint64_t a2)
{
  if (a2 == 1)
    return +[MapsSavedRoutesManager deleteRouteStorageID:completion:](MapsSavedRoutesManager, "deleteRouteStorageID:completion:", result[4], 0);
  return result;
}

void sub_10094C094(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "MapsInterruptionDisplay");
  v2 = (void *)qword_1014D3A38;
  qword_1014D3A38 = (uint64_t)v1;

}

void sub_10094C468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10094C494(uint64_t a1)
{
  _QWORD *WeakRetained;
  RideBookingRideStatusObserverProxy *v2;
  void *v3;
  uint64_t Log;
  NSObject *v5;
  int v6;
  char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = -[RideBookingRideStatusObserverProxy initWithDelegate:]([RideBookingRideStatusObserverProxy alloc], "initWithDelegate:", WeakRetained);
    v3 = (void *)WeakRetained[6];
    WeakRetained[6] = v2;

  }
  else
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RidesharingSource");
    v5 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = 136446722;
      v7 = "MapsSuggestionsRidesharingSource.m";
      v8 = 1026;
      v9 = 67;
      v10 = 2082;
      v11 = "-[MapsSuggestionsRidesharingSource initFromResourceDepot:name:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", (uint8_t *)&v6, 0x1Cu);
    }

  }
}

void sub_10094C5B8(uint64_t a1)
{
  id WeakRetained;
  uint64_t Log;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  char *v7;
  id v8;
  NSObject *v9;
  int v10;
  char *v11;
  __int16 v12;
  _QWORD v13[3];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RidesharingSource");
  v3 = objc_claimAutoreleasedReturnValue(Log);
  v4 = v3;
  if (WeakRetained)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      LOWORD(v10) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Executing _updateRideBookingRideStatuses because a cancellation triggered this", (uint8_t *)&v10, 2u);
    }

    v5 = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsRidesharingSource.m");
      v8 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Force-Executing _updateRideBookingRideStatuses from MSgRideSharingSource because a cancellation triggered this"));
      v10 = 136315394;
      v11 = v7;
      v12 = 2112;
      v13[0] = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", (uint8_t *)&v10, 0x16u);

    }
    sub_10094C7A4(WeakRetained);
  }
  else
  {
    v9 = v3;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = 136446722;
      v11 = "MapsSuggestionsRidesharingSource.m";
      v12 = 1026;
      LODWORD(v13[0]) = 72;
      WORD2(v13[0]) = 2082;
      *(_QWORD *)((char *)v13 + 6) = "-[MapsSuggestionsRidesharingSource initFromResourceDepot:name:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", (uint8_t *)&v10, 0x1Cu);
    }

  }
}

void sub_10094C7A4(void *a1)
{
  uint64_t v2;
  uint64_t Log;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  _QWORD *v13;
  NSObject *v14;
  _QWORD block[4];
  id v16;
  uint8_t buf[4];
  void *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  void *v22;

  v2 = MapsSuggestionsLoggingSubsystem;
  Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RidesharingSource");
  v4 = objc_claimAutoreleasedReturnValue(Log);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "uniqueName"));
    v6 = NSStringFromMapsSuggestionsCurrentBestLocation();
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    *(_DWORD *)buf = 138412802;
    v18 = v5;
    v19 = 2112;
    v20 = CFSTR("ALL");
    v21 = 2112;
    v22 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{MSgDebug} UPDATING SOURCE{%@} for TYPE{%@} at LATLONG{%@}", buf, 0x20u);

  }
  v8 = GEOFindOrCreateLog(v2, "RidesharingSource");
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "uniqueName"));
    *(_DWORD *)buf = 138412546;
    v18 = v10;
    v19 = 2080;
    v20 = "_updateRideBookingRideStatuses";
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s BEGIN", buf, 0x16u);

  }
  v11 = GEOFindOrCreateLog(v2, "RidesharingSource");
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_signpost_enabled(v12))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "_updateRideBookingRideStatuses", "", buf, 2u);
  }

  v13 = a1;
  objc_sync_enter(v13);
  objc_msgSend(v13, "setRefreshing:", 1);
  objc_sync_exit(v13);

  objc_initWeak((id *)buf, v13);
  v14 = v13[5];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10094D4FC;
  block[3] = &unk_1011AD260;
  objc_copyWeak(&v16, (id *)buf);
  dispatch_async(v14, block);
  objc_destroyWeak(&v16);
  objc_destroyWeak((id *)buf);
}

void sub_10094CA28(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10094CB2C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10094CBF4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10094CF6C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 64));
  _Unwind_Resume(a1);
}

void sub_10094CFAC(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Log;
  NSObject *v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  char *v13;
  __int16 v14;
  _QWORD v15[3];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "addOrUpdateMySuggestionEntries:", &__NSArray0__struct);
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
      (*(void (**)(void))(v4 + 16))();
    v5 = MapsSuggestionsLoggingSubsystem;
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RidesharingSource");
    v7 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      v8 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uniqueName"));
      v12 = 138412546;
      v13 = v8;
      v14 = 2080;
      v15[0] = "updateSuggestionEntries";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s END", (uint8_t *)&v12, 0x16u);

    }
    v9 = GEOFindOrCreateLog(v5, "RidesharingSource");
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_signpost_enabled(v10))
    {
      LOWORD(v12) = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "updateSuggestionEntries", "", (uint8_t *)&v12, 2u);
    }
  }
  else
  {
    v11 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RidesharingSource");
    v10 = (id)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v12 = 136446722;
      v13 = "MapsSuggestionsRidesharingSource.m";
      v14 = 1026;
      LODWORD(v15[0]) = 144;
      WORD2(v15[0]) = 2082;
      *(_QWORD *)((char *)v15 + 6) = "-[MapsSuggestionsRidesharingSource updateSuggestionEntriesWithHandler:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", (uint8_t *)&v12, 0x1Cu);
    }

  }
}

void sub_10094D1C0(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Log;
  NSObject *v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  char *v13;
  __int16 v14;
  _QWORD v15[3];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "addOrUpdateMySuggestionEntries:", &__NSArray0__struct);
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
      (*(void (**)(void))(v4 + 16))();
    v5 = MapsSuggestionsLoggingSubsystem;
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RidesharingSource");
    v7 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      v8 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uniqueName"));
      v12 = 138412546;
      v13 = v8;
      v14 = 2080;
      v15[0] = "updateSuggestionEntries";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s END", (uint8_t *)&v12, 0x16u);

    }
    v9 = GEOFindOrCreateLog(v5, "RidesharingSource");
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_signpost_enabled(v10))
    {
      LOWORD(v12) = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "updateSuggestionEntries", "", (uint8_t *)&v12, 2u);
    }
  }
  else
  {
    v11 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RidesharingSource");
    v10 = (id)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v12 = 136446722;
      v13 = "MapsSuggestionsRidesharingSource.m";
      v14 = 1026;
      LODWORD(v15[0]) = 149;
      WORD2(v15[0]) = 2082;
      *(_QWORD *)((char *)v15 + 6) = "-[MapsSuggestionsRidesharingSource updateSuggestionEntriesWithHandler:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", (uint8_t *)&v12, 0x1Cu);
    }

  }
}

void sub_10094D3D4(uint64_t a1)
{
  _QWORD *WeakRetained;
  void *v3;
  id v4;
  void *v5;
  uint64_t Log;
  NSObject *v7;
  int v8;
  char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  const char *v13;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = *(void **)(a1 + 32);
    if (v3)
    {
      v4 = objc_msgSend(v3, "copy");
      v5 = (void *)WeakRetained[2];
      WeakRetained[2] = v4;

    }
    sub_10094C7A4(WeakRetained);
  }
  else
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RidesharingSource");
    v7 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = 136446722;
      v9 = "MapsSuggestionsRidesharingSource.m";
      v10 = 1026;
      v11 = 163;
      v12 = 2082;
      v13 = "-[MapsSuggestionsRidesharingSource updateSuggestionEntriesWithHandler:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", (uint8_t *)&v8, 0x1Cu);
    }

  }
}

void sub_10094D4FC(uint64_t a1)
{
  id *WeakRetained;
  id *v2;
  uint64_t Log;
  NSObject *v4;
  int v5;
  char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained[6], "updateRideStatusMap");
  }
  else
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RidesharingSource");
    v4 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = 136446722;
      v6 = "MapsSuggestionsRidesharingSource.m";
      v7 = 1026;
      v8 = 186;
      v9 = 2082;
      v10 = "-[MapsSuggestionsRidesharingSource _updateRideBookingRideStatuses]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", (uint8_t *)&v5, 0x1Cu);
    }

  }
}

void sub_10094D8A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10094D8D0(uint64_t a1)
{
  _QWORD *WeakRetained;
  id v3;
  id v4;
  id v5;
  id v6;
  int *v7;
  _UNKNOWN **v8;
  void *i;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  double Double;
  void *v25;
  id v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  double v33;
  uint64_t v34;
  void *v35;
  double v36;
  double v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  void *v44;
  void *v45;
  id v46;
  void *v47;
  id v48;
  void *v49;
  void *v50;
  void *v51;
  double v52;
  double v53;
  double v54;
  double v55;
  void *v56;
  void *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t Log;
  NSObject *v62;
  void *v63;
  uint64_t v64;
  NSObject *v65;
  uint64_t v66;
  NSObject *v67;
  NSMutableArray *v68;
  void *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _BYTE buf[12];
  __int16 v78;
  const char *v79;
  uint8_t v80[4];
  char *v81;
  __int16 v82;
  int v83;
  __int16 v84;
  const char *v85;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allValues"));
    v68 = objc_opt_new(NSMutableArray);
    v73 = 0u;
    v74 = 0u;
    v75 = 0u;
    v76 = 0u;
    v4 = v3;
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v73, v80, 16);
    if (v5)
    {
      v6 = v5;
      v7 = &OBJC_IVAR___CarCardTestModeController__pushButton;
      v8 = MKPlaceCollectionsLogicController_ptr;
      v72 = *(_QWORD *)v74;
      do
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(_QWORD *)v74 != v72)
            objc_enumerationMutation(v4);
          v10 = *(void **)(*((_QWORD *)&v73 + 1) + 8 * (_QWORD)i);
          v11 = *(void **)((char *)WeakRetained + v7[431]);
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "application"));
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "identifier"));
          objc_msgSend(v11, "registerBundleID:withSource:", v13, WeakRetained);

          v14 = *(void **)((char *)WeakRetained + v7[431]);
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "application"));
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "identifier"));
          LOBYTE(v14) = objc_msgSend(v14, "isBundleIDLocked:forSource:", v16, WeakRetained);

          if ((v14 & 1) == 0)
          {
            v17 = v8[296];
            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "application"));
            v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "identifier"));
            LODWORD(v17) = objc_msgSend(v17, "canLearnFromBundleID:", v19);

            if ((_DWORD)v17)
            {
              if (objc_msgSend(v10, "isValidRide"))
              {
                v20 = v10;
                if (objc_msgSend(v20, "isCanceledByUser"))
                {

                  v21 = 0;
                }
                else
                {
                  v22 = objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "trayTitle"));
                  v23 = objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "traySubtitle"));
                  Double = GEOConfigGetDouble(GEOConfigMapsSuggestionsRidesharingInitialWeight[0], GEOConfigMapsSuggestionsRidesharingInitialWeight[1]);
                  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "estimatedDropOffDate"));
                  v26 = objc_msgSend(v25, "dateByAddingTimeInterval:", GEOConfigGetDouble(GEOConfigMapsSuggestionsRidesharingExpirationOverflowInSeconds[0], GEOConfigMapsSuggestionsRidesharingExpirationOverflowInSeconds[1]));
                  v27 = objc_claimAutoreleasedReturnValue(v26);

                  if (!v27)
                  {
                    v28 = GEOConfigGetDouble(GEOConfigMapsSuggestionsRidesharingExpirationOverflowInSeconds[0], GEOConfigMapsSuggestionsRidesharingExpirationOverflowInSeconds[1]);
                    v29 = MapsSuggestionsNowWithOffset(v28);
                    v27 = objc_claimAutoreleasedReturnValue(v29);
                  }
                  v69 = (void *)v27;
                  v70 = (void *)v23;
                  v21 = (void *)objc_claimAutoreleasedReturnValue(+[MapsSuggestionsEntry entryWithType:title:subtitle:weight:expires:sourceSpecificInfo:](MapsSuggestionsEntry, "entryWithType:title:subtitle:weight:expires:sourceSpecificInfo:", 9, v22, v23, v27, 0, Double));
                  if (objc_msgSend(v20, "isScheduledRide"))
                  {
                    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar autoupdatingCurrentCalendar](NSCalendar, "autoupdatingCurrentCalendar"));
                    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "scheduledPickupWindowStartDateComponents"));
                    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "dateFromComponents:", v31));

                    v33 = GEOConfigGetDouble(GEOConfigMapsSuggestionsRidesharingUpcomingIntervalInSeconds[0], GEOConfigMapsSuggestionsRidesharingUpcomingIntervalInSeconds[1]);
                    v34 = MapsSuggestionsNow();
                    v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
                    objc_msgSend(v35, "timeIntervalSinceDate:", v32);
                    v37 = v36;

                    if (v37 >= v33)
                    {
                      objc_msgSend(v21, "setWeight:", GEOConfigGetDouble(GEOConfigMapsSuggestionsRidesharingDistantInitialWeight[0], GEOConfigMapsSuggestionsRidesharingDistantInitialWeight[1]));
                      objc_msgSend(v21, "setBoolean:forKey:", 1, CFSTR("MapsSuggestionsIsNotADestinationKey"));
                    }
                    else
                    {
                      objc_msgSend(v21, "setWeight:", GEOConfigGetDouble(GEOConfigMapsSuggestionsRidesharingUpcomingInitialWeight[0], GEOConfigMapsSuggestionsRidesharingUpcomingInitialWeight[1]));
                    }

                    v7 = &OBJC_IVAR___CarCardTestModeController__pushButton;
                  }
                  v71 = (void *)v22;
                  objc_msgSend(v21, "setNumber:forKey:", &off_10126FCB8, CFSTR("MapsSuggestionsGEOMapItemOriginKey"));
                  v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "identifier"));
                  objc_msgSend(v21, "setString:forKey:", v38, CFSTR("MapsSuggestionsRideBookingRideIDKey"));

                  v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "application"));
                  v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "identifier"));
                  objc_msgSend(v21, "setString:forKey:", v40, CFSTR("MapsSuggestionsOriginBundleIDKey"));

                  objc_msgSend(v21, "setString:forKey:", CFSTR("MapsSuggestionsOriginBundleIDKey"), CFSTR("MapsSuggestionsPrimaryKey"));
                  objc_msgSend(v21, "setBoolean:forKey:", objc_msgSend(v20, "isActiveRide"), CFSTR("MapsSuggestionsRidesharingIsActiveRideKey"));
                  v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "application"));
                  v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "identifier"));

                  if (v42)
                  {
                    v43 = objc_alloc((Class)NSSet);
                    v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "application"));
                    v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "identifier"));
                    *(_QWORD *)buf = v45;
                    v46 = v4;
                    v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", buf, 1));
                    v48 = objc_msgSend(v43, "initWithArray:", v47);

                    v4 = v46;
                    v7 = &OBJC_IVAR___CarCardTestModeController__pushButton;

                    objc_msgSend(v21, "setSet:forKey:", v48, CFSTR("MapsSuggestionsAssociatedBundleIDsKey"));
                  }
                  if ((objc_msgSend(v20, "isActiveRide") & 1) == 0)
                  {
                    objc_msgSend(v21, "setBoolean:forKey:", 1, CFSTR("MapsSuggestionsIsNotADestinationKey"));
                    objc_msgSend(v21, "setWeight:", GEOConfigGetDouble(GEOConfigMapsSuggestionsRidesharingCompletedWeight[0], GEOConfigMapsSuggestionsRidesharingCompletedWeight[1]));
                  }
                  v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "pickupLocation"));

                  if (v49)
                  {
                    v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "pickupLocation"));
                    v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "location"));
                    objc_msgSend(v51, "coordinate");
                    v53 = v52;
                    v55 = v54;

                    v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v53));
                    objc_msgSend(v21, "setNumber:forKey:", v56, CFSTR("MapsSuggestionsRidesharingPickupLocationLatitudeKey"));

                    v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v55));
                    objc_msgSend(v21, "setNumber:forKey:", v57, CFSTR("MapsSuggestionsRidesharingPickupLocationLongitudeKey"));

                  }
                  if (v21)
                    -[NSMutableArray addObject:](v68, "addObject:", v21);
                }

                v8 = MKPlaceCollectionsLogicController_ptr;
              }
            }
          }
        }
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v73, v80, 16);
      }
      while (v6);
    }

    objc_msgSend(WeakRetained, "addOrUpdateMySuggestionEntries:", v68);
    v58 = WeakRetained[2];
    if (v58)
    {
      (*(void (**)(void))(v58 + 16))();
      v59 = (void *)WeakRetained[2];
      WeakRetained[2] = 0;

    }
    v60 = MapsSuggestionsLoggingSubsystem;
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RidesharingSource");
    v62 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
    {
      v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "uniqueName"));
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v63;
      v78 = 2080;
      v79 = "_updateRideBookingRideStatuses";
      _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s END", buf, 0x16u);

    }
    v64 = GEOFindOrCreateLog(v60, "RidesharingSource");
    v65 = objc_claimAutoreleasedReturnValue(v64);
    if (os_signpost_enabled(v65))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v65, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "_updateRideBookingRideStatuses", "", buf, 2u);
    }

  }
  else
  {
    v66 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RidesharingSource");
    v67 = (id)objc_claimAutoreleasedReturnValue(v66);
    if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v80 = 136446722;
      v81 = "MapsSuggestionsRidesharingSource.m";
      v82 = 1026;
      v83 = 236;
      v84 = 2082;
      v85 = "-[MapsSuggestionsRidesharingSource rideStatusMapDidChange:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", v80, 0x1Cu);
    }

  }
}

id sub_10094EC28()
{
  return +[UIFont system17](UIFont, "system17");
}

id sub_10094EC34()
{
  return +[UIFont system15](UIFont, "system15");
}

UIImageSymbolConfiguration *sub_10094EC40()
{
  return +[UIImageSymbolConfiguration configurationWithPointSize:weight:scale:](UIImageSymbolConfiguration, "configurationWithPointSize:weight:scale:", 4, 2, 15.0);
}

id sub_10094EC58()
{
  void *v0;
  void *v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[UIImageSymbolConfiguration configurationWithPointSize:weight:scale:](UIImageSymbolConfiguration, "configurationWithPointSize:weight:scale:", 7, 1, 15.0));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage systemImageNamed:withConfiguration:](UIImage, "systemImageNamed:withConfiguration:", CFSTR("chevron.forward"), v0));

  return v1;
}

UIColor *sub_10094ECBC()
{
  return +[UIColor tertiaryLabelColor](UIColor, "tertiaryLabelColor");
}

UIColor *sub_10094ECC8()
{
  return +[UIColor whiteColor](UIColor, "whiteColor");
}

id sub_10094F194(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "identifierCache"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifierForObject:", v3));

  return v5;
}

MapsUIDiffableDataSourceViewModel *__cdecl sub_10094F1EC(id a1, id a2, HomeOutlineSectionBuilderStack *a3)
{
  return (MapsUIDiffableDataSourceViewModel *)a2;
}

NSArray *__cdecl sub_10094F1F4(id a1, id a2, HomeOutlineSectionBuilderStack *a3)
{
  return (NSArray *)&__NSArray0__struct;
}

BOOL sub_10094F200(id a1, id a2, HomeOutlineSectionBuilderStack *a3)
{
  return 0;
}

void sub_100950070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1009500A8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1009500B8(uint64_t a1)
{

}

void sub_1009500C0(uint64_t a1, uint64_t a2)
{
  id obj;

  obj = 0;
  +[SearchResult newStartWaypointSearchResult:endWaypointSearchResult:forRouteHistoryEntry:](SearchResult, "newStartWaypointSearchResult:endWaypointSearchResult:forRouteHistoryEntry:", 0, &obj, a2);
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), obj);
}

void sub_100950114(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "geoMapItem"));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

id sub_1009523A4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t Log;
  const char *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t v21[24];

  v3 = a2;
  if ((objc_msgSend(v3, "hasAttributes") & 1) == 0)
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "Entry+MapsAppHelper");
    v11 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)v21 = 138543362;
      *(_QWORD *)&v21[4] = v3;
      v16 = "No attributes available; returning nil: %{public}@";
      v17 = v11;
      v18 = OS_LOG_TYPE_INFO;
LABEL_22:
      _os_log_impl((void *)&_mh_execute_header, v17, v18, v16, v21, 0xCu);
      goto LABEL_23;
    }
    goto LABEL_23;
  }
  if (GEOConfigGetBOOL(MapsConfig_OverrideTransitNodeCustomPOIType, off_1014B2FC8)
    && objc_msgSend(v3, "poiType") == 225)
  {
    v4 = objc_msgSend(v3, "copy", 0x7F00000006);

    objc_msgSend(v4, "replaceAttributes:count:", v21, 1);
    v3 = v4;
  }
  v5 = MapsSuggestionsLoggingSubsystem;
  v6 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "Entry+MapsAppHelper");
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v21 = 138543362;
    *(_QWORD *)&v21[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Will fetch image for attributes: %{public}@", v21, 0xCu);
  }

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[MKIconManager imageForStyle:size:forScale:format:transparent:nightMode:](MKIconManager, "imageForStyle:size:forScale:format:transparent:nightMode:", v3, 4, 0, *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 41), *(double *)(a1 + 32)));
  v9 = GEOFindOrCreateLog(v5, "Entry+MapsAppHelper");
  v10 = objc_claimAutoreleasedReturnValue(v9);
  v11 = v10;
  if (!v8)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v21 = 138543362;
      *(_QWORD *)&v21[4] = v3;
      v16 = "Failed to fetch image for attributes: %{public}@";
LABEL_21:
      v17 = v11;
      v18 = OS_LOG_TYPE_ERROR;
      goto LABEL_22;
    }
LABEL_23:

    v8 = 0;
    goto LABEL_24;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)v21 = 138543362;
    *(_QWORD *)&v21[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Successfully fetched image for attributes: %{public}@", v21, 0xCu);
  }

  if (*(_BYTE *)(a1 + 40))
  {
    v12 = GEOFindOrCreateLog(v5, "Entry+MapsAppHelper");
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v21 = 138543362;
      *(_QWORD *)&v21[4] = v3;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Will invert image for attributes: %{public}@", v21, 0xCu);
    }

    v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "_maps_invertedImage"));
    if (v14)
    {
      v8 = (void *)v14;
      goto LABEL_24;
    }
    v19 = GEOFindOrCreateLog(v5, "Entry+MapsAppHelper");
    v11 = objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v21 = 138543362;
      *(_QWORD *)&v21[4] = v3;
      v16 = "Image inverting failed for attributes: %{public}@";
      goto LABEL_21;
    }
    goto LABEL_23;
  }
LABEL_24:

  return v8;
}

id sub_1009526D4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "drawAtPoint:", CGPointZero.x, CGPointZero.y);
}

id sub_1009526E8(uint64_t a1)
{
  double v2;
  double v3;
  void *v4;
  double v5;
  double v6;
  double v7;

  objc_msgSend(*(id *)(a1 + 32), "drawAtPoint:", CGPointZero.x, CGPointZero.y);
  v2 = *(double *)(a1 + 48);
  v3 = *(double *)(a1 + 56);
  v4 = *(void **)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 32), "size");
  v6 = v5 - *(double *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "size");
  return objc_msgSend(v4, "drawInRect:", v2, v3, v6, v7 - *(double *)(a1 + 56));
}

void sub_10095275C(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  id v4;
  id v5;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "layer"));
  v4 = objc_msgSend(v3, "CGContext");

  objc_msgSend(v5, "renderInContext:", v4);
}

id sub_1009527B8(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "drawAtPoint:", CGPointZero.x, CGPointZero.y);
  return objc_msgSend(*(id *)(a1 + 40), "drawInRect:", *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 64));
}

UIFont *__cdecl sub_100952C44(id a1)
{
  return (UIFont *)+[UIFont _mapkit_preferredFontForTextStyleInTableViewCell:addingSymbolicTraits:](UIFont, "_mapkit_preferredFontForTextStyleInTableViewCell:addingSymbolicTraits:", UIFontTextStyleBody, 0);
}

BOOL sub_100953750(id a1, CollectionHandler *a2, unint64_t a3, BOOL *a4)
{
  return !-[CollectionHandler loadingData](a2, "loadingData", a3, a4);
}

void sub_10095473C(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "offlineMapProviderUpdated:", WeakRetained);
    WeakRetained = v3;
  }

}

void sub_1009547E8(id a1)
{
  void *v1;

  v1 = (void *)qword_1014D3A50;
  qword_1014D3A50 = (uint64_t)&off_101274088;

}

void sub_100955734(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  id v4;

  v3 = *(void **)(a1 + 32);
  v4 = objc_msgSend(a3, "copy");
  objc_msgSend(v3, "addObject:", v4);

}

id sub_100955774(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updatePreferredContentSize");
}

void sub_100955968(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_100955984(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  double v11;
  double v12;
  id v13;

  v13 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "artwork"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage _mapkit_transitArtworkImageWithDataSource:size:scale:](UIImage, "_mapkit_transitArtworkImageWithDataSource:size:scale:", v3, *(_QWORD *)(a1 + 48), *(double *)(a1 + 56)));

  if (v4)
  {
    v5 = *(void **)(a1 + 32);
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v13, "muid")));
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v4, v6);

  }
  v7 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  objc_msgSend(v4, "size");
  v8 = MKTransitArtworkIncidentBadgeTrailingOffset;
  if (v7 <= v9 + MKTransitArtworkIncidentBadgeTrailingOffset)
  {
    objc_msgSend(v4, "size");
    v11 = v8 + v12;
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  }
  else
  {
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v11 = *(double *)(v10 + 24);
  }
  *(double *)(v10 + 24) = v11;

}

void sub_100955A90(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  unsigned int v8;
  void *v9;
  void *v10;
  void *v11;
  double v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v19 = v3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v3, "muid")));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v5));

  if (!v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "artwork"));
    v8 = objc_msgSend(v7, "hasRoutingIncidentBadge");

    v9 = *(void **)(a1 + 32);
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v19, "muid")));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v10));
    v12 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    if (v8)
    {
      v13 = MKTransitIncidentIcon(*(double *)(a1 + 48));
      v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage _compositeImageFromImage:paddedToWidth:badge:badgeOffset:](UIImage, "_compositeImageFromImage:paddedToWidth:badge:badgeOffset:", v11, v14, v12, MKTransitArtworkIncidentBadgeTrailingOffset, MKTransitArtworkIncidentBadgeBottomOffset));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "imageWithRenderingMode:", 1));

    if (v8)
    v17 = *(void **)(a1 + 32);
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v19, "muid")));
    objc_msgSend(v17, "setObject:forKeyedSubscript:", v16, v18);

  }
}

void sub_100956B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id location)
{
  id *v30;

  objc_destroyWeak(v30);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100956BDC(uint64_t a1)
{
  id WeakRetained;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "setIssueType:", objc_msgSend(*(id *)(a1 + 40), "type"));
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "_invokeCompletionHandlerWithShouldSubmit:", 1);

}

void sub_100956C30(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_invokeCompletionHandlerWithShouldSubmit:", 0);

}

void sub_100957A4C(uint64_t a1)
{
  NSObject *v2;
  id v3;
  void *v4;
  objc_class *v5;
  NSString *v6;
  void *v7;
  void *v8;
  void *v9;
  __CFString *v10;
  void *v11;
  __CFString *v12;
  void *v13;
  void *v14;
  uint8_t buf[4];
  __CFString *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  void *v20;

  if (qword_1014D3A68 != -1)
    dispatch_once(&qword_1014D3A68, &stru_1011DCB80);
  v2 = (id)qword_1014D3A60;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
  {
    v3 = *(id *)(a1 + 32);
    v4 = v3;
    if (!v3)
    {
      v10 = CFSTR("<nil>");
      goto LABEL_12;
    }
    v5 = (objc_class *)objc_opt_class(v3);
    v6 = NSStringFromClass(v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    if ((objc_opt_respondsToSelector(v4, "accessibilityIdentifier") & 1) != 0)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "performSelector:", "accessibilityIdentifier"));
      v9 = v8;
      if (v8 && !objc_msgSend(v8, "isEqualToString:", v7))
      {
        v10 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v7, v4, v9));

        goto LABEL_10;
      }

    }
    v10 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v7, v4));
LABEL_10:

LABEL_12:
    v11 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
    v12 = v10;
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "window"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "recursiveDescription"));
    *(_DWORD *)buf = 138543874;
    v16 = v10;
    v17 = 2112;
    v18 = v11;
    v19 = 2112;
    v20 = v14;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "[%{public}@] Detected eta label is truncated (%@): %@", buf, 0x20u);

  }
}

void sub_10095803C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10063EF6C(v1);
  _Unwind_Resume(a1);
}

void sub_1009582E8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CarMapWidgetETACardViewController");
  v2 = (void *)qword_1014D3A60;
  qword_1014D3A60 = (uint64_t)v1;

}

id sub_100959230(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "addObserver:selector:name:object:", *(_QWORD *)(a1 + 32), "locationManagerApprovalDidChange:", MKLocationManagerApprovalDidChangeNotification, 0);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "shortcutsCardController"));
  objc_msgSend(v3, "setExpanded:", 0);

  return objc_msgSend(*(id *)(a1 + 32), "_offerVehicleDisambiguationIfNeeded");
}

void sub_1009592A8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  double v8;
  int v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  if (*(_BYTE *)(a1 + 56)
    && (v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter")),
        objc_msgSend(v2, "postNotificationName:object:", CFSTR("MapsTestingDidEndGuidanceOrStepping"), *(_QWORD *)(a1 + 32)), v2, *(_BYTE *)(a1 + 56))|| *(_BYTE *)(a1 + 57))
  {
    objc_msgSend(*(id *)(a1 + 40), "invalidate");
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "carChromeViewController"));
    v13 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "defaultMapSettings"));

    if (!objc_msgSend(v13, "trackingMode"))
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chromeViewController"));
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "navigationDisplay"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "configuration"));
      if (objc_msgSend(v6, "cameraStyle") == (id)2)
        v7 = 1;
      else
        v7 = 2;

      objc_msgSend(v13, "setTrackingMode:", v7);
    }
    objc_msgSend(v13, "zoomLevel");
    if (v8 < 19.0)
      objc_msgSend(v13, "zoomLevel");
    objc_msgSend(v13, "setZoomLevel:");
    objc_msgSend(v13, "applyToMapViewAnimated:duration:completion:", *(unsigned __int8 *)(a1 + 58), 0, -1.0);

  }
  else
  {
    if (*(_QWORD *)(a1 + 48))
    {
      v9 = *(unsigned __int8 *)(a1 + 59);
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "carChromeViewController"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "defaultMapSettings"));
      v12 = v11;
      if (v9)
        objc_msgSend(v11, "readFromMapView");
      else
        objc_msgSend(v11, "applyToMapViewAnimated:duration:completion:", *(unsigned __int8 *)(a1 + 58), 0, -1.0);

    }
    _objc_msgSend(*(id *)(a1 + 32), "setInitialTrackingIfNeededAndPossible");
  }
}

void sub_10095A508(id a1, id a2, id a3)
{
  _objc_msgSend(a3, "setNeedsTablePartsUpdateWithSender:", a2);
}

void sub_10095AA14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  id *v25;
  id *v26;

  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10095AA90(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id WeakRetained;

  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "selectedValue"));
  objc_msgSend(v5, "setSelectedValue:", v6);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_instrumentSelectingRoute");

}

void sub_10095AB00(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "proceedToNextQuestion:", v3);

}

void sub_10095AB48(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "proceedToNextQuestion:", v3);

}

void sub_10095B224(id a1, id a2, RAPReportComposerBadRouteSuggestionSection *a3)
{
  -[RAPTablePartSection didChange](a3, "didChange");
}

void sub_10095B430(id a1, id a2, RAPReportComposerDirectionsSubcategorySection *a3)
{
  -[RAPTablePartSection didChange](a3, "didChange");
}

void sub_10095C3E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a24);
  _Unwind_Resume(a1);
}

void sub_10095C410(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  id v9;
  id v10;

  v10 = a2;
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "setComposedWaypoint:", v10);

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "geoMapItem"));
  if (v7)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "geoMapItem"));
    v9 = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(v9, "setGeoMapItem:", v8);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_10095C4CC(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  const __CFString *v10;
  void *v11;

  v10 = CFSTR("waypointInfo");
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "description"));
  v11 = v2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", NSLocalizedDescriptionKey));

  v5 = v3;
  if (!v4)
  {
    v6 = sub_1008EFB10(4);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v5 = v3;
    if (v7)
    {
      v8 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithDictionary:", v3);
      objc_msgSend(v8, "setObject:forKeyedSubscript:", v7, NSLocalizedDescriptionKey);
      v5 = objc_msgSend(v8, "copy");

    }
  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NanoRoutePlanningSession"), 4, v5));

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

id *sub_10095CD04(id *result, uint64_t a2, uint64_t a3)
{
  if (a3)
    return (id *)objc_msgSend(result[4], "addObject:", a2);
  return result;
}

void sub_10095CFDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v4;

  if (a3)
  {
    v3 = *(void **)(a1 + 32);
    v4 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: %@"), a2, a3));
    objc_msgSend(v3, "addObject:", v4);

  }
}

void sub_10095E0C8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  objc_class *v10;
  NSString *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;

  v17 = a2;
  v5 = a3;
  if (v5)
  {
    v6 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0
      || (v7 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v5, v7) & 1) != 0))
    {
      v8 = v5;
LABEL_11:
      v15 = *(void **)(a1 + 32);
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: %@"), v17, v8));
      objc_msgSend(v15, "addObject:", v16);

      goto LABEL_12;
    }
    v9 = v5;
    v10 = (objc_class *)objc_opt_class(v9);
    v11 = NSStringFromClass(v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    if ((objc_opt_respondsToSelector(v9, "accessibilityIdentifier") & 1) != 0)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "performSelector:", "accessibilityIdentifier"));
      v14 = v13;
      if (v13 && !objc_msgSend(v13, "isEqualToString:", v12))
      {
        v8 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v12, v9, v14));

        goto LABEL_10;
      }

    }
    v8 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v12, v9));
LABEL_10:

    goto LABEL_11;
  }
LABEL_12:

}

void sub_10095E248(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v4;

  if (a3)
  {
    v3 = *(void **)(a1 + 32);
    v4 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: %@"), a2, a3));
    objc_msgSend(v3, "addObject:", v4);

  }
}

id sub_10095EF90(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  NSObject *v8;
  uint8_t v10[16];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v3));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "applicationRecord"));

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "localizedName"));
  if (!v6)
  {
    v7 = sub_10043173C();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to get partner app name. Using bundle ID instead", v10, 2u);
    }

    v6 = v3;
  }

  return v6;
}

void sub_10095FE40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10095FE5C(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_updateLastUpdatedLabel");
    WeakRetained = v2;
  }

}

id sub_1009604A8()
{
  if (qword_1014D3A78 != -1)
    dispatch_once(&qword_1014D3A78, &stru_1011DCD28);
  return (id)qword_1014D3A70;
}

void sub_1009604E8(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v2 = sub_1009604A8();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = 134349056;
    v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%{public}p] Lens position has been locked", (uint8_t *)&v5, 0xCu);
  }

}

void sub_10096058C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "ARSessionPedestrianAR");
  v2 = (void *)qword_1014D3A70;
  qword_1014D3A70 = (uint64_t)v1;

}

void sub_100960860(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cardPresentationController"));
  objc_msgSend(v2, "sheetContentSize");
  objc_msgSend(*(id *)(a1 + 32), "setPreferredContentSize:");

  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "cardPresentationController"));
  objc_msgSend(v4, "contentAlpha");
  objc_msgSend(v3, "applyAlphaToContent:");

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cardPresentationController"));
  objc_msgSend(v5, "updateDimmingBehavior");

}

void sub_10096192C(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  unsigned __int8 v5;
  void *v6;
  void *v7;
  id v8;

  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapView"));
  *(_BYTE *)(*(_QWORD *)(a1 + 40) + 8) = objc_msgSend(v8, "showsCompass");
  *(_BYTE *)(*(_QWORD *)(a1 + 40) + 9) = objc_msgSend(v8, "showsScale");
  *(_BYTE *)(*(_QWORD *)(a1 + 40) + 10) = objc_msgSend(v8, "showsUserLocation");
  objc_msgSend(v8, "setPitchEnabled:", 1);
  objc_msgSend(v8, "setZoomEnabled:", 1);
  objc_msgSend(v8, "setScrollEnabled:", 1);
  objc_msgSend(v8, "setShowsCompass:", 0);
  objc_msgSend(v8, "setShowsScale:", 0);
  objc_msgSend(v8, "setShowsUserLocation:", 0);
  objc_msgSend(v8, "_deselectLabelMarkerAnimated:", 0);
  v2 = *(id *)(*(_QWORD *)(a1 + 40) + 16);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[VKPlatform sharedPlatform](VKPlatform, "sharedPlatform"));
  if ((objc_msgSend(v3, "supportsARMode") & 1) == 0)
  {

    goto LABEL_5;
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "_mapLayer"));
  v5 = objc_msgSend(v4, "isFlyoverUnificationEnabled");

  if ((v5 & 1) != 0)
  {
LABEL_5:
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_flyover"));
    objc_msgSend(v8, "_performFlyoverAnimation:", v6);

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "_mapLayer"));
    objc_msgSend(v7, "setFlyoverMode:", 1);

    goto LABEL_6;
  }
  objc_msgSend(v8, "_enterARModeWithLocation:", v2);
LABEL_6:

}

void sub_100961B0C(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  void *v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "actionCoordinator"));
  v3 = objc_msgSend(v2, "isFlyoverRunning");

  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "actionCoordinator"));
    objc_msgSend(v4, "viewControllerEndFlyover:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32));

  }
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "mapView"));
  objc_msgSend(v5, "setShowsCompass:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 8));
  objc_msgSend(v5, "setShowsScale:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 9));
  objc_msgSend(v5, "setShowsUserLocation:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 10));

}

id sub_100962C8C(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  id v7;
  objc_class *v8;
  NSString *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  _BOOL8 v14;
  char *v15;

  v5 = *(void **)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = a2;
  v8 = (objc_class *)objc_opt_class(MapsDebugCollectionHeaderFooterView);
  v9 = NSStringFromClass(v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath:", v6, v10, *(_QWORD *)(a1 + 48)));

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "textLabel"));
  objc_msgSend(v12, "setText:", v7);

  objc_msgSend(v11, "setFooter:", a3);
  v13 = objc_msgSend(v7, "length");

  if (v13)
  {
    v14 = 0;
  }
  else
  {
    v15 = (char *)objc_msgSend(*(id *)(a1 + 32), "numberOfSections");
    v14 = v15 != (char *)objc_msgSend(*(id *)(a1 + 48), "section") + 1;
  }
  objc_msgSend(v11, "setHidden:", v14);
  return v11;
}

id sub_1009631B0()
{
  if (qword_1014D3A88 != -1)
    dispatch_once(&qword_1014D3A88, &stru_1011DCD98);
  return (id)qword_1014D3A80;
}

uint64_t sub_100963418(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, void *))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), &__NSArray0__struct);
}

void sub_100963430(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  _RouteTrafficFeatureCalculatorCompletionStructure *v6;
  _QWORD block[4];
  id v8;
  id v9;
  id v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cachedTrafficFeaturesForRoute:", *(_QWORD *)(a1 + 40)));
  if (v2)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10096351C;
    block[3] = &unk_1011B5ED8;
    v3 = *(NSObject **)(a1 + 48);
    v10 = *(id *)(a1 + 56);
    v8 = *(id *)(a1 + 40);
    v9 = v2;
    dispatch_async(v3, block);

  }
  else
  {
    v4 = *(void **)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = -[_RouteTrafficFeatureCalculatorCompletionStructure initWithQueue:handler:]([_RouteTrafficFeatureCalculatorCompletionStructure alloc], "initWithQueue:handler:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    objc_msgSend(v4, "_startCalculationTaskForRoute:completion:", v5, v6);

  }
}

uint64_t sub_10096351C(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_10096382C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v3 = a2;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v8, "trafficFeatureType") == (id)3)
          objc_msgSend(*(id *)(a1 + 32), "addObject:", v8);
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v5);
  }

}

void sub_100963934(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100963964(uint64_t a1)
{
  id v2;
  void *v3;
  NSObject *v4;
  id v5;
  _QWORD block[4];
  id v7;
  id v8;
  id v9;

  v2 = objc_msgSend(*(id *)(a1 + 32), "copy");
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "sharedFeatureCache"));
  objc_msgSend(v3, "setObject:forKey:", v2, *(_QWORD *)(a1 + 48));

  v4 = *(NSObject **)(a1 + 56);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100963A34;
  block[3] = &unk_1011B5ED8;
  v9 = *(id *)(a1 + 72);
  v7 = *(id *)(a1 + 64);
  v8 = v2;
  v5 = v2;
  dispatch_async(v4, block);

}

uint64_t sub_100963A34(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1009641C4(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "completionHandler"));
  (*((void (**)(id, _QWORD, _QWORD))v2 + 2))(v2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_100964374(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "RouteTrafficFeatureCalculator");
  v2 = (void *)qword_1014D3A80;
  qword_1014D3A80 = (uint64_t)v1;

}

id sub_1009644F0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finishedTest");
}

void sub_1009673A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1009673B8(uint64_t a1, void *a2)
{
  void *v3;
  unsigned int v4;
  void *v5;
  unsigned int v6;
  id v7;

  v7 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "name"));
  v4 = objc_msgSend(v3, "isEqualToString:", CFSTR("address"));

  if (v4)
    objc_msgSend(*(id *)(a1 + 32), "removeObject:", v7);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "name"));
  v6 = objc_msgSend(v5, "isEqualToString:", CFSTR("ll"));

  if (v6)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;

}

void sub_100969160(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "SearchResult");
  v2 = (void *)qword_1014D3A90;
  qword_1014D3A90 = (uint64_t)v1;

}

UIFont *__cdecl sub_100969190(id a1)
{
  void *v1;
  void *v2;
  void *v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[MKFontManager sharedManager](MKFontManager, "sharedManager"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "subtitleFont"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont _maps_cappedFont:withMaxPoint:](UIFont, "_maps_cappedFont:withMaxPoint:", v2, 30.0));

  return (UIFont *)v3;
}

id sub_10096A600(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  double v4;
  const __CFString *v5;

  v3 = a1 + 32;
  v2 = *(void **)(a1 + 32);
  v4 = 1.0;
  if (!*(_QWORD *)(v3 + 8))
    v4 = 0.0;
  objc_msgSend(v2, "setAlpha:", v4);
  if (*(_QWORD *)(a1 + 40))
    v5 = *(const __CFString **)(a1 + 40);
  else
    v5 = &stru_1011EB268;
  return objc_msgSend(*(id *)(a1 + 32), "setText:", v5);
}

id sub_10096AF38(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "frame");
  objc_msgSend(*(id *)(a1 + 32), "setFrame:", 0.0, 0.0, 160.0);
  return objc_msgSend(*(id *)(a1 + 32), "setCenter:", *(double *)(a1 + 40), *(double *)(a1 + 48));
}

id sub_10096B3CC(id *a1)
{
  void *v2;
  _QWORD v4[5];
  _QWORD v5[4];
  id v6;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10096B490;
  v5[3] = &unk_1011AC860;
  v6 = a1[4];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10096B548;
  v4[3] = &unk_1011AE8F8;
  v4[4] = v6;
  +[UIView animateWithDuration:animations:completion:](UIView, "animateWithDuration:animations:completion:", v5, v4, 0.3);
  objc_msgSend(a1[5], "stopAnimating");
  objc_msgSend(a1[5], "removeFromSuperview");
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "parentController"));
  objc_msgSend(v2, "rebuildSections");

  return objc_msgSend(a1[6], "clearDefaultRecorder");
}

void sub_10096B490(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  void *v6;
  id v7;

  objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 0.0);
  objc_msgSend(*(id *)(a1 + 32), "center");
  v3 = v2;
  objc_msgSend(*(id *)(a1 + 32), "center");
  v5 = v4;
  objc_msgSend(*(id *)(a1 + 32), "frame");
  objc_msgSend(*(id *)(a1 + 32), "setFrame:", 0.0, 0.0, 40.0);
  objc_msgSend(*(id *)(a1 + 32), "setCenter:", v3, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapIcon"));
  objc_msgSend(v6, "setAlpha:", 0.0);

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "redView"));
  objc_msgSend(v7, "setAlpha:", 0.0);

}

id sub_10096B548(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "removeFromSuperview");
}

void sub_10096BB58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  id *v25;
  id *v26;
  id *v27;

  objc_destroyWeak(v27);
  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10096BBA0(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_addPhotosUsingSourceType:", 1);
    WeakRetained = v2;
  }

}

void sub_10096BBD4(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_addPhotosUsingSourceType:", 2);
    WeakRetained = v2;
  }

}

void sub_10096BC08(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_addPhotosUsingSourceType:", 2);
    WeakRetained = v2;
  }

}

void sub_10096C718(uint64_t a1)
{
  id v2;
  id v3;

  if (*(_BYTE *)(a1 + 40))
    v2 = sub_1006E6768();
  else
    v2 = sub_1006E67DC();
  v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "setOverlayColor:", v3);

}

void sub_10096DC18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  id *v20;
  uint64_t v21;

  objc_destroyWeak(v20);
  _Block_object_dispose(&a20, 8);
  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v21 - 136));
  _Unwind_Resume(a1);
}

void sub_10096DC64(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "_deleteContact:", *(_QWORD *)(a1 + 32));
    WeakRetained = v3;
  }

}

uint64_t sub_10096DCA4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10096DCB4(uint64_t a1)
{

}

void sub_10096DCBC(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  id v5;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v4 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    if (v4)
      objc_msgSend(v4, "setImage:", v5);
    else
      objc_msgSend(WeakRetained, "_updateImage:forContact:", v5, *(_QWORD *)(a1 + 32));
  }

}

void sub_10096DF40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10096DF64(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  id v5;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
    objc_msgSend(WeakRetained, "_addContact:", v5);

}

id sub_10096E668()
{
  if (qword_1014D3AA8 != -1)
    dispatch_once(&qword_1014D3AA8, &stru_1011DCE78);
  return (id)qword_1014D3AA0;
}

id sub_10096F210(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v6;
  id v7;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "groupIdentifier"));
  v7 = objc_msgSend(v6, "isEqualToString:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));

  if ((_DWORD)v7)
    *a4 = 1;
  return v7;
}

void sub_10096F3D8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "SharedTripsContext");
  v2 = (void *)qword_1014D3AA0;
  qword_1014D3AA0 = (uint64_t)v1;

}

void sub_10096F54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_10096F564(uint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  id v5;
  void *v6;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  v5 = objc_msgSend(*(id *)(a1 + 32), "count");
  if (v4 < (unint64_t)v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24)));
    *a2 = objc_msgSend(v6, "intValue");

    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  }
  return v4 < (unint64_t)v5;
}

void sub_10096F770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_10096F788(uint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  id v5;
  void *v6;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  v5 = objc_msgSend(*(id *)(a1 + 32), "count");
  if (v4 < (unint64_t)v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24)));
    *a2 = objc_msgSend(v6, "intValue");

    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  }
  return v4 < (unint64_t)v5;
}

void sub_10096FDF4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_10096FE3C(uint64_t a1)
{
  id *WeakRetained;
  id v3;
  id *v4;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    objc_msgSend(WeakRetained, "_captureUserAction:", 2146);
    v3 = objc_loadWeakRetained(v4 + 4);
    objc_msgSend(v3, "photoOptionsPickerDidSelectTakePhoto:", *(_QWORD *)(a1 + 32));

    WeakRetained = v4;
  }

}

void sub_10096FE98(uint64_t a1)
{
  id *WeakRetained;
  id v3;
  id *v4;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    objc_msgSend(WeakRetained, "_captureUserAction:", 2145);
    v3 = objc_loadWeakRetained(v4 + 4);
    objc_msgSend(v3, "photoOptionsPickerDidSelectAddFromLibrary:", *(_QWORD *)(a1 + 32));

    WeakRetained = v4;
  }

}

void sub_10096FEF4(uint64_t a1)
{
  id WeakRetained;
  id v3;
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    objc_msgSend(WeakRetained, "_captureUserAction:", 2134);
    v3 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 32));
    objc_msgSend(v3, "photoOptionsPickerDidCancel:", *(_QWORD *)(a1 + 32));

    WeakRetained = v4;
  }

}

void sub_100970454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100970478(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  if (a2)
  {
    v2 = (id *)(a1 + 32);
    v3 = a2;
    WeakRetained = objc_loadWeakRetained(v2);
    objc_msgSend(WeakRetained, "setPublisherImage:", v3);

    objc_msgSend(WeakRetained, "notifyObserversInfoUpdated");
  }
}

uint64_t sub_1009708B0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  return result;
}

void sub_100970A30(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  id v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = objc_alloc_init((Class)NSMutableArray);
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v11 = v8;
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v20;
    do
    {
      v15 = 0;
      do
      {
        if (*(_QWORD *)v20 != v14)
          objc_enumerationMutation(v11);
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)v15), "mapItem", (_QWORD)v19));
        objc_msgSend(v10, "addObject:", v16);

        v15 = (char *)v15 + 1;
      }
      while (v13 != v15);
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v13);
  }

  v17 = *(_QWORD *)(a1 + 32);
  if (v17)
  {
    v18 = objc_msgSend(v10, "copy");
    (*(void (**)(uint64_t, id, id, id))(v17 + 16))(v17, v7, v18, v9);

  }
}

void sub_100970BF0(id a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v1 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localizedStringForKey:value:table:", CFSTR(" · [List view details separator]"), CFSTR("localized string not found"), 0));
  v2 = (void *)qword_1014D3AB0;
  qword_1014D3AB0 = v1;

}

void sub_100971228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100971358(id a1)
{
  MapsThermalPressureController *v1;
  void *v2;

  v1 = objc_opt_new(MapsThermalPressureController);
  v2 = (void *)qword_1014D3AC0;
  qword_1014D3AC0 = (uint64_t)v1;

}

void sub_1009713C0(id a1)
{
  void *v1;

  v1 = (void *)qword_1014D3AD0;
  qword_1014D3AD0 = (uint64_t)&off_101274890;

}

void sub_100971714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a26);
  _Unwind_Resume(a1);
}

void sub_100971744(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_handleNotifyCallback");

}

id sub_100971770()
{
  if (qword_1014D3AE8 != -1)
    dispatch_once(&qword_1014D3AE8, &stru_1011DCF88);
  return (id)qword_1014D3AE0;
}

void sub_100971A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100971A40(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(result + 32) + 32);
  return result;
}

void sub_100971B2C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  id WeakRetained;
  void *v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;

  v2 = sub_100971770();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    v8 = 138412546;
    v9 = v4;
    v10 = 2112;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Add mitigation observer: %@ for mitigation: %@", (uint8_t *)&v8, 0x16u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_observersOfMitigationNamed:", *(_QWORD *)(a1 + 40)));
  objc_msgSend(v7, "registerObserver:", *(_QWORD *)(a1 + 32));

}

void sub_100971CE8(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  id WeakRetained;
  void *v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;

  v2 = sub_100971770();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    v8 = 138412546;
    v9 = v4;
    v10 = 2112;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Remove mitigation observer: %@ for mitigation: %@", (uint8_t *)&v8, 0x16u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_observersOfMitigationNamed:", *(_QWORD *)(a1 + 40)));
  objc_msgSend(v7, "unregisterObserver:", *(_QWORD *)(a1 + 32));

}

id sub_100971EC4(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  int v6;
  uint64_t v7;

  v2 = sub_100971770();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v6 = 138412290;
    v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Adding thermal pressure observer: %@", (uint8_t *)&v6, 0xCu);
  }

  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "registerObserver:", *(_QWORD *)(a1 + 32));
}

id sub_10097206C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  int v6;
  uint64_t v7;

  v2 = sub_100971770();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v6 = 138412290;
    v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Remove thermal pressure observer: %@", (uint8_t *)&v6, 0xCu);
  }

  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "unregisterObserver:", *(_QWORD *)(a1 + 32));
}

void sub_10097227C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  id WeakRetained;
  int v6;
  uint64_t v7;

  v2 = sub_100971770();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v6 = 138412290;
    v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Mitigation changed: %@", (uint8_t *)&v6, 0xCu);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_updateObserversOfMitigationNamed:", *(_QWORD *)(a1 + 32));

}

void sub_100972478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100972490(uint64_t a1)
{
  uint64_t Integer;
  void *v3;
  void *v4;
  id v5;

  if (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", CFSTR("NavigationDisableLockScreen")))
  {
    Integer = GEOConfigGetInteger(MapsConfig_LockscreenThermalMitigationThreshold, off_1014B5128);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = Integer <= 0
                                                              || (unint64_t)Integer < 0x3E8
                                                              && *(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) >= (unint64_t)Integer;
  }
  else
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stringForKey:", *(_QWORD *)(a1 + 32)));

    v4 = v5;
    if (v5)
    {
      if (objc_msgSend(v5, "isEqualToString:", CFSTR("Disable")))
      {
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
      }
      else if (objc_msgSend(v5, "isEqualToString:", CFSTR("Enable")))
      {
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) >= (unint64_t)objc_msgSend(v5, "longLongValue");
      }
      v4 = v5;
    }

  }
}

void sub_100972990(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "MapsThermalPressureController");
  v2 = (void *)qword_1014D3AE0;
  qword_1014D3AE0 = (uint64_t)v1;

}

void sub_100972CA4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  id *v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  _QWORD v16[4];
  id v17;
  id v18;
  _QWORD v19[4];
  id v20;
  uint8_t buf[8];
  _QWORD block[4];
  id v23;
  id v24;
  id v25;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (v8 | v9)
  {
    v10 = *(void **)(a1 + 32);
    if (v10)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100972E88;
      block[3] = &unk_1011B5ED8;
      v11 = &v25;
      v25 = v10;
      v23 = (id)v8;
      v24 = (id)v9;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

      v12 = v23;
LABEL_6:

LABEL_7:
    }
  }
  else
  {
    if (v7)
    {
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_100972F00;
      v16[3] = &unk_1011ACAD0;
      v11 = &v18;
      v18 = *(id *)(a1 + 40);
      v17 = v7;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, v16);
      v12 = v17;
      goto LABEL_6;
    }
    v13 = sub_100431C0C();
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "No route or error returned", buf, 2u);
    }

    v15 = *(void **)(a1 + 32);
    if (v15)
    {
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472;
      v19[2] = sub_100972E9C;
      v19[3] = &unk_1011ADA00;
      v11 = &v20;
      v20 = v15;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, v19);
      goto LABEL_7;
    }
  }

}

uint64_t sub_100972E88(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_100972E9C(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", MNErrorDomain, 2, 0));
  (*(void (**)(uint64_t, id, _QWORD))(v1 + 16))(v1, v2, 0);

}

uint64_t sub_100972F00(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_1009733FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100973420()
{
  if (qword_1014D3AF8 != -1)
    dispatch_once(&qword_1014D3AF8, &stru_1011DCFD0);
  return (id)qword_1014D3AF0;
}

void sub_100973460(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id *v4;
  id WeakRetained;
  id v6;
  uint8_t v7[16];

  v2 = sub_100973420();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "VLF localization freshness period passed; unsetting hasVLFSessionLocalized flag",
      v7,
      2u);
  }

  v4 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend(WeakRetained, "setHasVLFLocalizedRecently:", 0);

  v6 = objc_loadWeakRetained(v4);
  objc_msgSend(v6, "setVlfLocalizationFreshnessTimer:", 0);

}

void sub_100973680(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFSessionAnalyticsTracker");
  v2 = (void *)qword_1014D3AF0;
  qword_1014D3AF0 = (uint64_t)v1;

}

UIColor *__cdecl sub_10097496C(id a1, UITraitCollection *a2)
{
  void *v2;

  if ((id)-[UITraitCollection userInterfaceStyle](a2, "userInterfaceStyle") == (id)2)
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor secondarySystemGroupedBackgroundColor](UIColor, "secondarySystemGroupedBackgroundColor"));
  else
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemWhiteColor](UIColor, "systemWhiteColor"));
  return (UIColor *)v2;
}

double sub_1009749AC(id a1, double result, NSArray *a3)
{
  if (result < 48.0)
    return 48.0;
  return result;
}

UIColor *__cdecl sub_1009749C0(id a1, UITraitCollection *a2)
{
  void *v2;

  if ((id)-[UITraitCollection userInterfaceStyle](a2, "userInterfaceStyle") == (id)2)
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemWhiteColor](UIColor, "systemWhiteColor"));
  else
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemBlueColor](UIColor, "systemBlueColor"));
  return (UIColor *)v2;
}

void sub_100974B84(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100974BA8(uint64_t a1)
{
  dispatch_time_t v2;
  _QWORD block[4];
  id v4;

  v2 = dispatch_time(0, 1000000000);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100974C44;
  block[3] = &unk_1011AD260;
  objc_copyWeak(&v4, (id *)(a1 + 32));
  dispatch_after(v2, (dispatch_queue_t)&_dispatch_main_q, block);
  objc_destroyWeak(&v4);
}

void sub_100974C44(uint64_t a1)
{
  id *WeakRetained;
  id *v2;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained[14], "setEnabled:", 1);
    WeakRetained = v2;
  }

}

void sub_100974D38(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100974D5C(uint64_t a1)
{
  dispatch_time_t v2;
  _QWORD block[4];
  id v4;

  v2 = dispatch_time(0, 1000000000);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100974DF8;
  block[3] = &unk_1011AD260;
  objc_copyWeak(&v4, (id *)(a1 + 32));
  dispatch_after(v2, (dispatch_queue_t)&_dispatch_main_q, block);
  objc_destroyWeak(&v4);
}

void sub_100974DF8(uint64_t a1)
{
  id *WeakRetained;
  id *v2;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained[14], "setEnabled:", 1);
    WeakRetained = v2;
  }

}

id sub_100975A04(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = objc_msgSend(a2, "mutableCopy");
  objc_msgSend(v3, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 32), NSFontAttributeName);
  v4 = objc_msgSend(v3, "copy");

  return v4;
}

void sub_100975D80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100975DA8(uint64_t a1, void *a2)
{
  id WeakRetained;
  id v4;

  v4 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (v4 && WeakRetained)
    objc_msgSend(WeakRetained, "_updateDirectionsButtonWithSuggestedMode:", objc_msgSend(*(id *)(a1 + 32), "suggestedNavigationModeForLocation:context:ignoreDeviceNavigability:", v4, 1, 0));

}

void sub_100976AD0(id a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v3[10];

  v3[0] = UIContentSizeCategoryUnspecified;
  v3[1] = UIContentSizeCategoryExtraSmall;
  v3[2] = UIContentSizeCategorySmall;
  v3[3] = UIContentSizeCategoryMedium;
  v3[4] = UIContentSizeCategoryLarge;
  v3[5] = UIContentSizeCategoryExtraLarge;
  v3[6] = UIContentSizeCategoryExtraExtraLarge;
  v3[7] = UIContentSizeCategoryExtraExtraExtraLarge;
  v3[8] = UIContentSizeCategoryAccessibilityMedium;
  v3[9] = UIContentSizeCategoryAccessibilityLarge;
  v1 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v3, 10));
  v2 = (void *)qword_1014D3B00;
  qword_1014D3B00 = v1;

}

void sub_100976C38(id a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v3[7];

  v3[0] = UIContentSizeCategoryUnspecified;
  v3[1] = UIContentSizeCategoryExtraSmall;
  v3[2] = UIContentSizeCategorySmall;
  v3[3] = UIContentSizeCategoryMedium;
  v3[4] = UIContentSizeCategoryLarge;
  v3[5] = UIContentSizeCategoryExtraLarge;
  v3[6] = UIContentSizeCategoryExtraExtraLarge;
  v1 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v3, 7));
  v2 = (void *)qword_1014D3B10;
  qword_1014D3B10 = v1;

}

void sub_100976E74(id a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v3[3];

  v3[0] = UIContentSizeCategoryAccessibilityExtraLarge;
  v3[1] = UIContentSizeCategoryAccessibilityExtraExtraLarge;
  v3[2] = UIContentSizeCategoryAccessibilityExtraExtraExtraLarge;
  v1 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v3, 3));
  v2 = (void *)qword_1014D3B20;
  qword_1014D3B20 = v1;

}

void sub_10097755C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100977588(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  MapsDebugTableSection *v4;

  v4 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v4, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Hide Restaraunt Reservations"), CFSTR("__internal__HideTableBookingButton"));
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v4, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Map OpenTable POIs to PenTable app"), CFSTR("RestaurantReservationAppBundleIDs"));

}

void sub_1009775E8(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:](a2, "addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:", CFSTR("Enable Vehicle Advertisement Suppression"), MapsConfig_VehicleSetupSuppression, off_1014B36B8, 1, 0);
}

void sub_100977624(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  _QWORD block[5];
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10097775C;
  v14[3] = &unk_1011DD140;
  v7 = v5;
  v15 = v7;
  v8 = v6;
  v16 = v8;
  objc_msgSend(v3, "enumerateObjectsUsingBlock:", v14);

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1009777AC;
  block[3] = &unk_1011AD238;
  block[4] = WeakRetained;
  v12 = v8;
  v13 = v7;
  v9 = v7;
  v10 = v8;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_10097775C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "type");
  v4 = 40;
  if (v3 == (id)1)
    v4 = 32;
  objc_msgSend(*(id *)(a1 + v4), "addObject:", v5);

}

void sub_1009777AC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  _QWORD v4[2];
  _QWORD v5[2];

  v4[0] = kMapsExtensionPointNameServices;
  v4[1] = kMapsExtensionPointNameServicesUI;
  v2 = *(_QWORD *)(a1 + 48);
  v5[0] = *(_QWORD *)(a1 + 40);
  v5[1] = v2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 2));
  objc_msgSend(*(id *)(a1 + 32), "setExtensions:", v3);

}

id sub_100977850(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_addSectionWithMapsExtensionPointName:", a2);
}

void sub_10097793C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100977958(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  id WeakRetained;
  _QWORD v8[4];
  id v9;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "extensions"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32)));

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100977A10;
  v8[3] = &unk_1011DD190;
  v9 = v3;
  v6 = v3;
  objc_msgSend(v5, "enumerateObjectsUsingBlock:", v8);

}

void sub_100977A10(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  _QWORD v13[4];
  id v14;
  _QWORD v15[4];
  id v16;
  _QWORD v17[4];
  id v18;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "displayName"));
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_100977BB8;
  v17[3] = &unk_1011AEB50;
  v18 = v3;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100977BF0;
  v15[3] = &unk_1011AE8F8;
  v6 = v18;
  v16 = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "addSwitchRowWithTitle:get:set:", v5, v17, v15));

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "capabilities"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "allObjects"));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100977C00;
  v13[3] = &unk_1011DD168;
  v11 = v8;
  v14 = v11;
  objc_msgSend(v10, "enumerateObjectsUsingBlock:", v13);

  if (objc_msgSend(v11, "count"))
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "componentsJoinedByString:", CFSTR(" ")));
    objc_msgSend(v7, "setSubtitle:", v12);

  }
  else
  {
    objc_msgSend(v7, "setSubtitle:", CFSTR("none"));
  }

}

id sub_100977BB8(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "extension"));
  v2 = objc_msgSend(v1, "optedIn");

  return v2;
}

id sub_100977BF0(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_setEnabled:error:", a2, 0);
}

void sub_100977C00(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "stringByReplacingOccurrencesOfString:withString:", CFSTR("MXExtensionCapability"), &stru_1011EB268));
  objc_msgSend(v2, "addObject:", v3);

}

const __CFString *sub_100979130(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 5)
    return CFSTR("RAPLookAroundCategoryTypeImageQuality");
  else
    return off_1011DD1B0[a1 - 1];
}

void sub_100979C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100979C48(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100979C58(uint64_t a1)
{

}

void sub_100979C60(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  unsigned int v7;
  GEOComposedWaypointRequest *v8;
  GEOComposedWaypointRequest *v9;
  RoutePlanningWaypointRequest *v10;
  void *v11;
  RoutePlanningWaypointRequest *v12;
  uint64_t v13;
  void *v14;
  id v15;

  v15 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "waypointRequest"));
  v7 = objc_msgSend(v15, "isEquivalentToOtherRequest:", v6);

  if (v7)
  {
    if (objc_msgSend(v15, "hasCachedResult"))
      v8 = (GEOComposedWaypointRequest *)v15;
    else
      v8 = -[GEOComposedWaypointRequest initWithComposedWaypoint:]([GEOComposedWaypointRequest alloc], "initWithComposedWaypoint:", v5);
    v9 = v8;
    v10 = [RoutePlanningWaypointRequest alloc];
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "waypointPlaceholder"));
    v12 = -[RoutePlanningWaypointRequest initWithWaypointPlaceholder:request:preferredNameSource:](v10, "initWithWaypointPlaceholder:request:preferredNameSource:", v11, v9, objc_msgSend(*(id *)(a1 + 32), "preferredNameSource"));
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v14 = *(void **)(v13 + 40);
    *(_QWORD *)(v13 + 40) = v12;

  }
}

void sub_10097D024(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD v14[4];
  _QWORD *v15;
  _QWORD v16[4];
  id v17;
  _QWORD *v18;
  _QWORD v19[4];
  id v20;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v4)
  {
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_10097D214;
    v19[3] = &unk_1011DD210;
    v6 = v4;
    v20 = v6;
    v7 = objc_retainBlock(v19);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "mapKitHandle"));

    if (v8)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "mapKitHandle"));
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_10097D300;
      v16[3] = &unk_1011DD238;
      v18 = v7;
      v17 = v3;
      +[MKMapItem _mapItemFromHandle:completionHandler:](MKMapItem, "_mapItemFromHandle:completionHandler:", v9, v16);

    }
    else
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "title"));

      if (v10 && !byte_1014D3B38)
      {
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "title"));
        v12 = (void *)objc_claimAutoreleasedReturnValue(+[GEOMapService sharedService](GEOMapService, "sharedService"));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "ticketForCanonicalLocationSearchQueryString:traits:", v11, 0));

        v14[0] = _NSConcreteStackBlock;
        v14[1] = 3221225472;
        v14[2] = sub_10097D364;
        v14[3] = &unk_1011AE268;
        v15 = v7;
        objc_msgSend(v13, "submitWithHandler:networkActivity:", v14, 0);

      }
      else
      {
        (*((void (**)(id, _QWORD, _QWORD))v6 + 2))(v6, 0, 0);
      }
    }

  }
}

void sub_10097D214(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  unsigned __int8 v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v3 = a2;
  v10 = v3;
  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "_styleAttributes"));
    if (objc_msgSend(v4, "isLabelPOI"))
    {

    }
    else
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "_styleAttributes"));
      v6 = objc_msgSend(v5, "isLandmarkPOI");

      if ((v6 & 1) == 0)
      {
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "_geoAddress"));
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "structuredAddress"));

        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "fullThoroughfare"));
        objc_msgSend(v9, "length");

      }
    }
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_10097D300(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  id v5;

  v5 = a3;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  v4 = v5;
  if (v5)
  {
    NSLog(CFSTR("Error %@ resolving mapkit handle for: %@"), v5, *(_QWORD *)(a1 + 32));
    v4 = v5;
  }

}

void sub_10097D364(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;

  v9 = a2;
  v5 = objc_msgSend(v9, "count");
  v6 = 0;
  if (!a3 && v5)
  {
    v7 = objc_alloc((Class)MKMapItem);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "firstObject"));
    v6 = objc_msgSend(v7, "initWithGeoMapItem:isPlaceHolderPlace:", v8, 0);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_10097DF24(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_1014D3B40;
  qword_1014D3B40 = (uint64_t)v1;

  objc_msgSend((id)qword_1014D3B40, "setTimeStyle:", 1);
  objc_msgSend((id)qword_1014D3B40, "setDateStyle:", 1);
  objc_msgSend((id)qword_1014D3B40, "setDoesRelativeDateFormatting:", 1);
}

void sub_10097DFD4(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v1, "registerDefaults:", &off_1012748B8);

}

uint64_t sub_10097E5BC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10097E5CC(uint64_t a1)
{

}

void sub_10097E5D4(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "copy");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

id sub_10097E840(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_updateCalendarItems");
}

void sub_10097ED40(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = &__NSArray0__struct;

}

id sub_10097ED60(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_notifyObserversItemsDidChange");
}

void sub_10097ED68(uint64_t a1, void *a2, void *a3, char a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  NSObject *v13;
  CalendarItemSourceMapItem *v14;
  uint64_t v15;
  void *v16;
  CalendarItemSourceMapItem *v17;
  _QWORD block[4];
  CalendarItemSourceMapItem *v19;
  uint64_t v20;
  id v21;
  char v22;

  v7 = a3;
  v8 = a2;
  v17 = -[CalendarItemSourceMapItem initWithCalendarItem:mapItem:]([CalendarItemSourceMapItem alloc], "initWithCalendarItem:mapItem:", v8, v7);

  v9 = (void *)objc_claimAutoreleasedReturnValue(-[CalendarItemSourceMapItem keys](v17, "keys"));
  v10 = v9;
  if (v9)
    v11 = v9;
  else
    v11 = (id)objc_claimAutoreleasedReturnValue(+[NSSet set](NSSet, "set"));
  v12 = v11;

  if ((objc_msgSend(*(id *)(a1 + 32), "intersectsSet:", v12) & 1) == 0)
  {
    v13 = *(NSObject **)(a1 + 40);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10097EE90;
    block[3] = &unk_1011AED08;
    v14 = v17;
    v15 = *(_QWORD *)(a1 + 48);
    v16 = *(void **)(a1 + 56);
    v19 = v14;
    v20 = v15;
    v22 = a4;
    v21 = v16;
    dispatch_sync(v13, block);

  }
}

id sub_10097EE90(uint64_t a1)
{
  id result;

  result = *(id *)(a1 + 32);
  if (result)
  {
    objc_msgSend(result, "setSource:", *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 32), "setShouldBeHiddenFromMap:", *(_BYTE *)(a1 + 56) == 0);
    return objc_msgSend(*(id *)(a1 + 48), "addObject:", *(_QWORD *)(a1 + 32));
  }
  return result;
}

void sub_10097EEE4(uint64_t a1, uint64_t a2)
{
  void *v3;

  if (a2)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  else
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "title"));
    NSLog(CFSTR("Calendar event '%@' has no location and will not be shown on map."), v3);

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_10097EF50(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *i;
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *j;
  void *v12;
  void *v13;
  void *v14;
  id obj;
  uint64_t v16;
  _QWORD v17[5];
  id v18;
  id v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  _BYTE v29[128];

  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  obj = a2;
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
  if (v3)
  {
    v4 = v3;
    v16 = *(_QWORD *)v25;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v25 != v16)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)i);
        v20 = 0u;
        v21 = 0u;
        v22 = 0u;
        v23 = 0u;
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "alarms"));
        v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
        if (v8)
        {
          v9 = v8;
          v10 = *(_QWORD *)v21;
          while (2)
          {
            for (j = 0; j != v9; j = (char *)j + 1)
            {
              if (*(_QWORD *)v21 != v10)
                objc_enumerationMutation(v7);
              v12 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)j);
              v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "structuredLocation"));

              if (v13)
              {
                dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
                v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "structuredLocation"));
                v17[0] = _NSConcreteStackBlock;
                v17[1] = 3221225472;
                v17[2] = sub_10097F190;
                v17[3] = &unk_1011DD2C8;
                v19 = *(id *)(a1 + 40);
                v17[4] = v6;
                v18 = *(id *)(a1 + 32);
                sub_10097D024(v14, v17);

                goto LABEL_16;
              }
            }
            v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
            if (v9)
              continue;
            break;
          }
        }
LABEL_16:

      }
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
    }
    while (v4);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_10097F190(uint64_t a1, uint64_t a2)
{
  void *v3;

  if (a2)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  else
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "title"));
    NSLog(CFSTR("Alarm for reminder '%@' has a structured location that will not be shown on the map!"), v3);

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_10097F1FC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  NSObject *v4;
  void **v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  void *v8;
  uint64_t v9;
  id v10;

  v5 = _NSConcreteStackBlock;
  v7 = sub_10097F284;
  v8 = &unk_1011AC8B0;
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(a1 + 40);
  v4 = *(NSObject **)(v2 + 64);
  v6 = 3221225472;
  v9 = v2;
  v10 = v3;
  dispatch_sync(v4, &v5);
  objc_msgSend(*(id *)(a1 + 32), "_notifyObserversItemsDidChange", v5, v6, v7, v8, v9);

}

void sub_10097F284(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = objc_msgSend(*(id *)(a1 + 40), "copy");
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 32);
  *(_QWORD *)(v3 + 32) = v2;

}

void sub_10097F7F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_10097F824()
{
  if (qword_1014D3B58 != -1)
    dispatch_once(&qword_1014D3B58, &stru_1011DD398);
  return (id)qword_1014D3B50;
}

void sub_10097F864(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_createAuxiliaryTasksIfNecessaryForPreference:", 1);

}

void sub_10097F894(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v1, "removeObserver:name:object:", WeakRetained, VKMapViewDidBecomeFullyDrawnNotification, 0);

    objc_msgSend(WeakRetained, "_createAuxiliaryTasksIfNecessaryForPreference:", 2);
  }

}

void sub_100980D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100980D30(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_handleInitialRouteLoaded:", v3);

}

id sub_100980E10(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "withValue:orError:", &stru_1011DD310, &stru_1011DD330);
}

void sub_100980E28(id a1, RouteCollection *a2)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[IPCServer sharedServer](IPCServer, "sharedServer"));
  objc_msgSend(v2, "navigationStateDidChangeTo:reason:", 0, CFSTR("The directions are now loaded and we're ready for nav"));

}

void sub_100980E68(id a1, NSError *a2)
{
  NSError *v2;
  void *v3;
  id v4;

  v2 = a2;
  v4 = (id)objc_claimAutoreleasedReturnValue(+[IPCServer sharedServer](IPCServer, "sharedServer"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(-[NSError localizedDescription](v2, "localizedDescription"));
  objc_msgSend(v4, "navigationStateDidChangeTo:reason:error:", 2, v3, v2);

}

uint64_t sub_100980FC4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100980FD4(uint64_t a1)
{

}

void sub_100980FDC(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stack"));
  v2 = objc_msgSend(v5, "copy");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1009811BC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void **v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  void *v15;
  uint64_t v16;
  id v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  void *v21;

  v12 = _NSConcreteStackBlock;
  v14 = sub_10098131C;
  v15 = &unk_1011AC8B0;
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(a1 + 40);
  v4 = *(NSObject **)(v2 + 8);
  v13 = 3221225472;
  v16 = v2;
  v17 = v3;
  dispatch_sync(v4, &v12);
  objc_msgSend(*(id *)(a1 + 40), "setPlatformController:", *(_QWORD *)(a1 + 32), v12, v13, v14, v15, v16);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observers"));
  objc_msgSend(v5, "platformController:didChangeCurrentSessionFromSession:toSession:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));

  objc_msgSend(*(id *)(a1 + 40), "resume");
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(void **)(v6 + 48);
  *(_QWORD *)(v6 + 48) = 0;

  v8 = sub_10097F824();
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    v10 = *(void **)(a1 + 32);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "sessionStack"));
    *(_DWORD *)buf = 134349314;
    v19 = v10;
    v20 = 2112;
    v21 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "[%{public}p] Current session stack: %@", buf, 0x16u);

  }
}

void sub_10098131C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stack"));
  objc_msgSend(v2, "addObject:", *(_QWORD *)(a1 + 40));

}

void sub_100981470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_100981490(uint64_t a1)
{
  return ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) > 1uLL;
}

void sub_100981A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100981AA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stack"));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "lastObject"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_100981AF8(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observers"));
  v3 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "currentSession"));
  objc_msgSend(v2, "platformController:didChangeCurrentSessionFromSession:toSession:", v3, v4, v5);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentSession"));
  objc_msgSend(v6, "resume");

  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(void **)(v7 + 48);
  *(_QWORD *)(v7 + 48) = 0;

}

void sub_100981DAC(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stack"));
  objc_msgSend(v2, "removeObject:", *(_QWORD *)(a1 + 40));

}

BOOL sub_100981EB0(id a1, MapsSession *a2)
{
  return 0;
}

void sub_1009827CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

void sub_1009827F8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stack"));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "lastObject"));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stack"));
  objc_msgSend(v6, "removeLastObject");

  v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stack"));
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "lastObject"));
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

}

void sub_100982894(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stack"));
  objc_msgSend(v2, "addObject:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));

}

void sub_1009829A8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_createAuxiliaryTasksIfNecessaryForPreference:", 2);

}

void sub_100982AF0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "PlatformController");
  v2 = (void *)qword_1014D3B50;
  qword_1014D3B50 = (uint64_t)v1;

}

id sub_100983360(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setAlpha:", 1.0);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "setAlpha:", 1.0);
}

id sub_1009834F4(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setAlpha:", 0.0);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "setAlpha:", 0.0);
}

uint64_t sub_100983544(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_100983CB0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  SearchAddressBookOperationMatch *v9;

  v3 = a2;
  v9 = -[SearchAddressBookOperationMatch initWithContact:context:]([SearchAddressBookOperationMatch alloc], "initWithContact:context:", v3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));

  if (-[SearchAddressBookOperationMatch isGoodMatch](v9, "isGoodMatch"))
  {
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v9);
    v4 = (void *)objc_claimAutoreleasedReturnValue(-[SearchAddressBookOperationMatch contact](v9, "contact"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));

    if (v5)
      objc_msgSend(*(id *)(a1 + 48), "setObject:forKeyedSubscript:", v9, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue(-[SearchAddressBookOperationMatch contact](v9, "contact"));
    v7 = objc_msgSend(v6, "iOSLegacyIdentifier");

    if ((int)v7 >= 1)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), v7));
      objc_msgSend(*(id *)(a1 + 56), "setObject:forKeyedSubscript:", v9, v8);

    }
  }

}

void sub_100983DC0(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  AddressBookAddress *v13;
  void *v14;
  AutocompleteItem *v15;
  id v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];

  v16 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "contact"));
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "postalAddresses"));
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v18;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v18 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)i);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "value"));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "street"));
        v12 = objc_msgSend(v11, "length");

        if (v12)
        {
          v13 = -[AddressBookAddress initWithContact:addressValue:]([AddressBookAddress alloc], "initWithContact:addressValue:", v3, v9);
          if (-[AddressBookAddress isValid](v13, "isValid"))
          {
            v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "autocompleteMatchInfo"));
            objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setMatchInfo:forObject:", v14, v13);
            v15 = -[AutocompleteItem initWithLocalCompletion:sourceType:sourceSubtype:matchInfo:]([AutocompleteItem alloc], "initWithLocalCompletion:sourceType:sourceSubtype:matchInfo:", v13, 4, 0, v14);
            objc_msgSend(*(id *)(a1 + 40), "addObject:", v15);

          }
        }
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    }
    while (v6);
  }

}

id sub_10098463C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *i;
  void *v12;
  id v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];

  v3 = a2;
  v4 = v3;
  if (v3 && objc_msgSend(v3, "length"))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "stringByTrimmingCharactersInSet:", *(_QWORD *)(a1 + 32)));

    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "componentsSeparatedByCharactersInSet:", *(_QWORD *)(a1 + 32)));
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v7)
    {
      v8 = v7;
      v9 = 0;
      v10 = *(_QWORD *)v16;
      do
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(_QWORD *)v16 != v10)
            objc_enumerationMutation(v6);
          v12 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)i);
          if (objc_msgSend(v12, "length"))
          {
            if (!v9)
              v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
            objc_msgSend(v9, "addObject:", v12);
          }
        }
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      }
      while (v8);
    }
    else
    {
      v9 = 0;
    }

    v4 = v5;
  }
  else
  {
    v9 = 0;
  }
  v13 = objc_msgSend(v9, "copy");

  return v13;
}

void sub_1009847CC(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", a2));
  if (v3)
  {
    v4 = v3;
    objc_msgSend(*(id *)(a1 + 40), "addObjectsFromArray:", v3);
    v3 = v4;
  }

}

id sub_100984F68(uint64_t a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[MKRatingStringBuilder ratingSymbolNameForMapItem:](MKRatingStringBuilder, "ratingSymbolNameForMapItem:", a1));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage _mapsCar_systemImageNamed:pointSize:weight:](UIImage, "_mapsCar_systemImageNamed:pointSize:weight:", v1, 6, 8.5));

  return v2;
}

id sub_100984FC0(uint64_t a1)
{
  void *v1;

  if (a1)
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[MKRatingStringBuilder ratingColorForMapItem:](MKRatingStringBuilder, "ratingColorForMapItem:", a1));
  else
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemOrangeColor](UIColor, "systemOrangeColor"));
  return v1;
}

void sub_100986960(uint64_t a1)
{
  _BYTE *WeakRetained;
  _BYTE *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    WeakRetained[88] = 0;
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_updateAppearance");
    WeakRetained = v2;
  }

}

BOOL sub_1009871AC(id a1, MapsSuggestionsEntry *a2)
{
  MapsSuggestionsEntry *v2;
  MapsSuggestionsOfflineService *v3;
  unsigned __int8 v4;

  v2 = a2;
  v3 = objc_alloc_init(MapsSuggestionsOfflineService);
  v4 = -[MapsSuggestionsOfflineService shouldKeepEntryWhenOffline:](v3, "shouldKeepEntryWhenOffline:", v2);

  return v4;
}

BOOL sub_100987200(id a1, MapsSuggestionsEntry *a2)
{
  unint64_t v2;

  v2 = (unint64_t)-[MapsSuggestionsEntry type](a2, "type");
  return (v2 > 0x16) | (0xFFD3Fu >> v2) & 1;
}

void sub_10098735C(uint64_t a1)
{
  id *v1;
  _QWORD *WeakRetained;
  void *v3;
  _QWORD v4[4];
  id v5;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    if (WeakRetained[1])
    {
      objc_msgSend(WeakRetained, "setSinkAttached:", 1);
    }
    else
    {
      v4[0] = _NSConcreteStackBlock;
      v4[1] = 3221225472;
      v4[2] = sub_10098741C;
      v4[3] = &unk_1011DD478;
      objc_copyWeak(&v5, v1);
      objc_msgSend(v3, "_createMapsSuggestionEngineWithCallBack:", v4);
      objc_destroyWeak(&v5);
    }
  }

}

void sub_100987408(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10098741C(uint64_t a1, void *a2)
{
  id *WeakRetained;
  id *v5;
  id v6;

  v6 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    objc_storeStrong(WeakRetained + 1, a2);
    objc_msgSend(v5, "setSinkAttached:", 1);
  }

}

void sub_10098750C(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "setSinkAttached:", 0);
    WeakRetained = v2;
  }

}

void sub_10098769C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1009876B8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v7 = WeakRetained;
  if (WeakRetained)
    objc_msgSend(WeakRetained, "_processTopSuggestions:error:", v8, v5);

}

void sub_10098787C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100987898(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1009878A8(uint64_t a1)
{

}

void sub_1009878B4(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

BOOL sub_1009878C4(id a1, id a2, NSDictionary *a3)
{
  return objc_msgSend(a2, "isShortcutForSetup", a3) ^ 1;
}

void sub_1009878E0(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  id WeakRetained;

  v2 = objc_msgSend(*(id *)(a1 + 40), "copy");
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 48);
  *(_QWORD *)(v3 + 48) = v2;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 56));
  objc_msgSend(WeakRetained, "shortcutsProviderUpdated:", *(_QWORD *)(a1 + 32));

}

void sub_1009879DC(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_fetchSuggestions");
    WeakRetained = v2;
  }

}

void sub_100988CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100988D14(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100988D24(uint64_t a1)
{

}

void sub_100988D2C(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "locationDisplayString"));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

id sub_100989DB8(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "conformsToProtocol:", *(_QWORD *)(a1 + 32));
}

void sub_100989EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100989ED0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100989EE0(uint64_t a1)
{

}

void sub_100989EE8(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v7;

  v7 = a2;
  if ((*(unsigned int (**)(void))(*(_QWORD *)(a1 + 32) + 16))())
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
    *a4 = 1;
  }

}

void sub_10098A62C(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  _QWORD v6[4];
  id v7;
  id location;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainMKMapView"));
  objc_msgSend(v2, "_setLocationPulseEnabled:", 0);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainVKMapView"));
  v4 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a1 + 40))
    objc_msgSend((id)v4, "performSelector:");
  else
    objc_msgSend(v3, "_mapstest_jumpToCoords:pitch:yaw:altitudeIsRegionSize:", *(unsigned __int8 *)(v4 + 73), *(double *)(v4 + 104), *(double *)(v4 + 112), *(double *)(v4 + 120), *(double *)(v4 + 88), *(double *)(v4 + 96));
  objc_msgSend(*(id *)(a1 + 32), "startedTest");
  objc_msgSend(*(id *)(a1 + 32), "startedSubTest:", CFSTR("loadingScene"));
  objc_msgSend(v3, "enableTestStatistics");
  objc_msgSend(v3, "enableTileStatistics");
  objc_initWeak(&location, *(id *)(a1 + 32));
  v5 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10098A778;
  v6[3] = &unk_1011AD260;
  objc_copyWeak(&v7, &location);
  objc_msgSend(v5, "addFullyDrawnCallback:", v6);
  objc_destroyWeak(&v7);
  objc_destroyWeak(&location);

}

void sub_10098A75C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10098A778(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "didFinishJumping");

}

id sub_10098AA7C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "startTimingFps");
}

void sub_10098AE94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10098AEBC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "finishedTest");

}

void sub_10098B168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10098B184(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "didFinishJumping");

}

void sub_10098B28C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_10098B2A8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "finishedSubTest:", CFSTR("extendedSwitch"));
  objc_msgSend(WeakRetained, "finishedTest");

}

id sub_10098B400(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fullyDrawnCallbacks"));
  v3 = objc_msgSend(*(id *)(a1 + 40), "copy");
  v4 = objc_retainBlock(v3);
  objc_msgSend(v2, "addObject:", v4);

  return objc_msgSend(*(id *)(a1 + 32), "setupFullyDrawnNotification:", "onFullyDrawn:");
}

void sub_10098BA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10098BA70(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "_accessoryButtonTapped:", *(_QWORD *)(a1 + 32));
    WeakRetained = v3;
  }

}

void sub_10098BBB0(uint64_t a1)
{
  id v1;
  uint64_t v2;
  void *v3;

  v1 = objc_msgSend(*(id *)(a1 + 32), "registrationWithCellClass:configurationHandler:", objc_opt_class(SectionHeaderOutlineCell), &stru_1011DD548);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)qword_1014D3B60;
  qword_1014D3B60 = v2;

}

void sub_10098BBFC(id a1, SectionHeaderOutlineCell *a2, NSIndexPath *a3, MapsUIDiffableDataSourceOutlineNodeSnapshot *a4)
{
  void *v5;
  void *v6;
  id v7;
  SectionHeaderOutlineCell *v8;

  v8 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[MapsUIDiffableDataSourceOutlineNodeSnapshot viewModel](a4, "viewModel"));
  if (objc_msgSend(v5, "conformsToProtocol:", &OBJC_PROTOCOL___SectionHeaderOutlineCellModel))
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  -[SectionHeaderOutlineCell setCellModel:](v8, "setCellModel:", v7);
}

void sub_10098D630(id a1, RAPCommentQuestion *a2, RAPReportComposerCommentSection *a3)
{
  RAPReportComposerCommentSection *v4;
  RAPCommentQuestion *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;

  v4 = a3;
  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[RAPReportComposerCommentSection headerView](v4, "headerView"));
  objc_msgSend(v6, "updateRemainingCharacters");

  v12 = (id)objc_claimAutoreleasedReturnValue(+[NSIndexPath indexPathForRow:inSection:](NSIndexPath, "indexPathForRow:inSection:", 0, -[RAPTablePartSection sectionIndex](v4, "sectionIndex")));
  v7 = (void *)objc_claimAutoreleasedReturnValue(-[RAPTablePartSection tableView](v4, "tableView"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "cellForRowAtIndexPath:", v12));
  v9 = objc_opt_class(RAPReportComposerCommentTableViewCell);
  if ((objc_opt_isKindOfClass(v8, v9) & 1) != 0)
    v10 = v8;
  else
    v10 = 0;
  v11 = v10;

  objc_msgSend(v11, "setPropertiesFromQuestion:", v5);
}

id sub_10098D824(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "setComment:", a2);
}

void sub_10098D920(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tableView"));
  objc_msgSend(v2, "scrollToRowAtIndexPath:atScrollPosition:animated:", *(_QWORD *)(a1 + 40), 1, 1);

}

void sub_10098D968(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tableView"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "cellForRowAtIndexPath:", *(_QWORD *)(a1 + 40)));

  v4 = objc_opt_class(RAPReportComposerCommentTableViewCell);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
    v5 = v3;
  else
    v5 = 0;
  v6 = v5;

  objc_msgSend(v6, "beginEditingCommentIfPossible");
}

void sub_10098E160(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "photo"));

  if (v3)
  {
    v4 = *(void **)(a1 + 32);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "photo"));
    objc_msgSend(v4, "addPhoto:", v5);

    v6 = *(void **)(a1 + 40);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "photo"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "photo"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "photo"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_maps_diffableDataSourceIdentifier"));
    objc_msgSend(v6, "addImage:forIdentifier:", v8, v10);

    objc_msgSend(v11, "clearSelectedPhoto");
  }

}

void sub_10098EE9C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  _QWORD block[4];
  id v8;
  uint64_t v9;
  id v10;

  v3 = a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10098EF30;
  block[3] = &unk_1011AECC0;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  v8 = v3;
  v9 = v4;
  v10 = v5;
  v6 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_10098EF30(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void (**v5)(id, _QWORD);

  if (!*(_QWORD *)(a1 + 32))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
    objc_msgSend(*(id *)(a1 + 40), "setSelectedObjectSet:", v2);

  }
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    (*(void (**)(uint64_t, _QWORD))(v3 + 16))(v3, *(_QWORD *)(a1 + 32));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "resultBlock"));

  if (v4)
  {
    v5 = (void (**)(id, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "resultBlock"));
    v5[2](v5, *(_QWORD *)(a1 + 32));

  }
}

void sub_10098F298(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  _QWORD block[4];
  id v13;
  uint64_t v14;
  id v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];

  v3 = a2;
  if ((objc_msgSend(*(id *)(a1 + 32), "suppressAnalytics") & 1) == 0)
  {
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectedObjectSet"));
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v17;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v17 != v7)
            objc_enumerationMutation(v4);
          objc_msgSend(*(id *)(a1 + 32), "_instrumentSaveOrRemoveFromCollectionWithMapItem:instrumentSave:", *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)v8), 0);
          v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
      }
      while (v6);
    }

  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10098F414;
  block[3] = &unk_1011AECC0;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(void **)(a1 + 40);
  v13 = v3;
  v14 = v9;
  v15 = v10;
  v11 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_10098F414(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void (**v5)(id, _QWORD);

  if (!*(_QWORD *)(a1 + 32))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
    objc_msgSend(*(id *)(a1 + 40), "setSelectedObjectSet:", v2);

  }
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    (*(void (**)(uint64_t, _QWORD))(v3 + 16))(v3, *(_QWORD *)(a1 + 32));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "resultBlock"));

  if (v4)
  {
    v5 = (void (**)(id, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "resultBlock"));
    v5[2](v5, *(_QWORD *)(a1 + 32));

  }
}

void sub_10098F4C0(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  _QWORD block[4];
  id v8;
  uint64_t v9;
  id v10;

  v3 = a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10098F554;
  block[3] = &unk_1011AECC0;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  v8 = v3;
  v9 = v4;
  v10 = v5;
  v6 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_10098F554(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void (**v5)(id, _QWORD);

  if (!*(_QWORD *)(a1 + 32))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
    objc_msgSend(*(id *)(a1 + 40), "setSelectedObjectSet:", v2);

  }
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    (*(void (**)(uint64_t, _QWORD))(v3 + 16))(v3, *(_QWORD *)(a1 + 32));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "resultBlock"));

  if (v4)
  {
    v5 = (void (**)(id, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "resultBlock"));
    v5[2](v5, *(_QWORD *)(a1 + 32));

  }
}

void sub_10098F7B4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  _QWORD block[4];
  id v8;
  uint64_t v9;
  id v10;

  v3 = a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10098F848;
  block[3] = &unk_1011AECC0;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  v8 = v3;
  v9 = v4;
  v10 = v5;
  v6 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_10098F848(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void (**v5)(id, _QWORD);

  if (!*(_QWORD *)(a1 + 32))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
    objc_msgSend(*(id *)(a1 + 40), "setSelectedObjectSet:", v2);

  }
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    (*(void (**)(uint64_t, _QWORD))(v3 + 16))(v3, *(_QWORD *)(a1 + 32));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "resultBlock"));

  if (v4)
  {
    v5 = (void (**)(id, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "resultBlock"));
    v5[2](v5, *(_QWORD *)(a1 + 32));

  }
}

void sub_100990240(uint64_t a1, uint64_t a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  NSObject *WeakRetained;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  int v11;
  void *v12;

  if (a2 == 1)
  {
    v3 = sub_100431A4C();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "shortDescription"));
      v11 = 138412290;
      v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "MapsActionController : user stopped navigation for %@", (uint8_t *)&v11, 0xCu);

    }
    WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 40) + 24));
    -[NSObject endNavigationAndReturnToRoutePlanning:](WeakRetained, "endNavigationAndReturnToRoutePlanning:", 0);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 40);
    v8 = *(void **)(v7 + 8);
    *(_QWORD *)(v7 + 8) = 0;

    v9 = sub_100431A4C();
    WeakRetained = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(WeakRetained, OS_LOG_TYPE_INFO))
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "shortDescription"));
      v11 = 138412290;
      v12 = v10;
      _os_log_impl((void *)&_mh_execute_header, WeakRetained, OS_LOG_TYPE_INFO, "MapsActionController : user discard %@", (uint8_t *)&v11, 0xCu);

    }
  }

}

void sub_1009904B8(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  objc_msgSend(*(id *)(a1 + 32), "applyRichMapsActivityOrWaitForLocation:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;

}

void sub_1009907D0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  NSObject *v6;
  _BOOL4 v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  void *v19;

  v4 = a3;
  v5 = sub_100431A4C();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
  if (v4)
  {
    if (v7)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedDescription"));
      v9 = *(_QWORD *)(a1 + 48);
      v10 = *(_QWORD *)(a1 + 56);
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "shortDescription"));
      v12 = 138413058;
      v13 = v8;
      v14 = 2048;
      v15 = v9;
      v16 = 2048;
      v17 = v10;
      v18 = 2112;
      v19 = v11;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "MapsActionController : error %@ waiting location (timeout %f, maxage: %f)for action %@ ", (uint8_t *)&v12, 0x2Au);

LABEL_6:
    }
  }
  else if (v7)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "shortDescription"));
    v12 = 138412290;
    v13 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "MapsActionController : got user location for %@ ", (uint8_t *)&v12, 0xCu);
    goto LABEL_6;
  }

  objc_msgSend(*(id *)(a1 + 40), "applyRichMapsActivity:", *(_QWORD *)(a1 + 32));
}

void sub_100990DB0(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;

  v2 = sub_100431A4C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = 138412546;
    v7 = v4;
    v8 = 2112;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "(tag %@) %@", (uint8_t *)&v6, 0x16u);
  }

}

void sub_100991E34(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  id v5;
  void *v6;
  id v7;

  v5 = objc_msgSend(*(id *)(a1 + 32), "_visibleCarIndexForCar:", a2);
  if (v5 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    *a3 = 1;
  }
  else
  {
    v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "objectAtIndexedSubscript:", v5));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor labelColor](UIColor, "labelColor"));
    objc_msgSend(v7, "setTintColor:", v6);

  }
}

id sub_100992414(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setCamera:", *(_QWORD *)(a1 + 40));
}

void sub_100992868(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "allItems"));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 32);
  *(_QWORD *)(v3 + 32) = v2;

}

id sub_100992924(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;

  return objc_msgSend(*(id *)(a1 + 32), "_notifyObserversItemsDidChange");
}

void sub_100992AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100992B08(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100992B18(uint64_t a1)
{

}

void sub_100992B20(uint64_t a1)
{
  uint64_t v1;
  id v2;
  id *v3;
  unsigned int v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  _QWORD *v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  AutocompleteStringMatcher *v29;
  char v30;
  id v31;
  NSObject *v32;
  id v33;
  id v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  id v38;
  id v39;
  uint64_t v40;
  id v41;
  id v42;
  void *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD v52[4];
  id v53;
  void *v54;
  id v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _BYTE v60[128];
  uint8_t v61[128];
  uint8_t buf[4];
  void *v63;
  _BYTE v64[128];

  v1 = a1;
  v41 = *(id *)(*(_QWORD *)(a1 + 32) + 72);
  v2 = objc_msgSend(v41, "length");
  v3 = *(id **)(v1 + 32);
  if (!v3[5])
  {
    if (v2 || (v4 = objc_msgSend(v3, "hasItemsWhenSearchStringIsEmpty"), v3 = *(id **)(v1 + 32), v4))
    {
      v5 = v3[4];
      v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
      v56 = 0u;
      v57 = 0u;
      v58 = 0u;
      v59 = 0u;
      v6 = v5;
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v56, v64, 16);
      if (v7)
      {
        v8 = v7;
        v9 = *(_QWORD *)v57;
        v39 = v2;
        v40 = v1;
        v37 = *(_QWORD *)v57;
        v38 = v6;
        do
        {
          v10 = 0;
          v42 = v8;
          do
          {
            if (*(_QWORD *)v57 != v9)
              objc_enumerationMutation(v6);
            v11 = *(void **)(*((_QWORD *)&v56 + 1) + 8 * (_QWORD)v10);
            if ((objc_msgSend(*(id *)(v1 + 32), "itemIsAllowed:", v11) & 1) != 0)
            {
              if ((objc_msgSend(v11, "hidden") & 1) == 0)
              {
                if (v2)
                {
                  v52[0] = _NSConcreteStackBlock;
                  v52[1] = 3221225472;
                  v52[2] = sub_100992FA0;
                  v52[3] = &unk_1011DD648;
                  v53 = v41;
                  v54 = v11;
                  v55 = v43;
                  v12 = objc_retainBlock(v52);
                  v48 = 0u;
                  v49 = 0u;
                  v50 = 0u;
                  v51 = 0u;
                  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "autocompletionStrings"));
                  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v48, v61, 16);
                  if (v14)
                  {
                    v15 = v14;
                    v16 = *(_QWORD *)v49;
LABEL_14:
                    v17 = 0;
                    while (1)
                    {
                      if (*(_QWORD *)v49 != v16)
                        objc_enumerationMutation(v13);
                      if ((((uint64_t (*)(_QWORD *, _QWORD))v12[2])(v12, *(_QWORD *)(*((_QWORD *)&v48 + 1) + 8 * v17)) & 1) != 0)break;
                      if (v15 == (id)++v17)
                      {
                        v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v48, v61, 16);
                        if (v15)
                          goto LABEL_14;
                        break;
                      }
                    }
                  }

                  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "searchResult"));
                  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "mapItem"));
                  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "_geoMapItem"));
                  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "_alternateSearchableNames"));

                  v46 = 0u;
                  v47 = 0u;
                  v44 = 0u;
                  v45 = 0u;
                  v22 = v21;
                  v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v44, v60, 16);
                  if (v23)
                  {
                    v24 = v23;
                    v25 = *(_QWORD *)v45;
LABEL_22:
                    v26 = 0;
                    while (1)
                    {
                      if (*(_QWORD *)v45 != v25)
                        objc_enumerationMutation(v22);
                      v27 = *(_QWORD *)(*((_QWORD *)&v44 + 1) + 8 * v26);
                      v28 = (void *)objc_claimAutoreleasedReturnValue(+[AutocompleteMatchInfo matchInfoWithType:](AutocompleteMatchInfo, "matchInfoWithType:", 1));
                      v29 = -[AutocompleteStringMatcher initWithString:requiredMatchLength:matchInfo:]([AutocompleteStringMatcher alloc], "initWithString:requiredMatchLength:matchInfo:", v27, 1, v28);
                      v30 = ((uint64_t (*)(_QWORD *, AutocompleteStringMatcher *))v12[2])(v12, v29);

                      if ((v30 & 1) != 0)
                        break;
                      if (v24 == (id)++v26)
                      {
                        v24 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v44, v60, 16);
                        if (v24)
                          goto LABEL_22;
                        break;
                      }
                    }
                  }

                  v2 = v39;
                  v1 = v40;
                  v9 = v37;
                  v6 = v38;
                  v8 = v42;
                }
                else
                {
                  objc_msgSend(v43, "addObject:", v11);
                }
              }
            }
            else
            {
              v31 = sub_10043222C();
              v32 = objc_claimAutoreleasedReturnValue(v31);
              if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 138412290;
                v63 = v11;
                _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "PersonalizedItemAutocompleteFilter - Skipped personalized item because not allowed: %@", buf, 0xCu);
              }

            }
            v10 = (char *)v10 + 1;
          }
          while (v10 != v8);
          v33 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v56, v64, 16);
          v8 = v33;
        }
        while (v33);
      }

      v34 = objc_msgSend(v43, "copy");
      v35 = *(_QWORD *)(v1 + 32);
      v36 = *(void **)(v35 + 40);
      *(_QWORD *)(v35 + 40) = v34;

      v3 = *(id **)(v1 + 32);
    }
  }
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) + 40), v3[5]);

}

BOOL sub_100992FA0(uint64_t a1, void *a2)
{
  void *v3;
  AutocompleteItem *v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "matchForAutocompleteSearchString:", *(_QWORD *)(a1 + 32)));
  if (v3)
  {
    v4 = -[AutocompleteItem initWithPersonalizedItem:matchInfo:]([AutocompleteItem alloc], "initWithPersonalizedItem:matchInfo:", *(_QWORD *)(a1 + 40), v3);
    objc_msgSend(*(id *)(a1 + 48), "addObject:", v4);

  }
  return v3 != 0;
}

void sub_100993184(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 32), *(id *)(a1 + 40));
}

void sub_100993440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10099345C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "didFinishJumping");

}

void sub_1009935BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1009935DC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "didShowPlaceCard");

}

void sub_100993A84(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSOrderedSet orderedSetWithObject:](NSOrderedSet, "orderedSetWithObject:", &OBJC_PROTOCOL___MKMapViewDelegatePrivate));
  v2 = (void *)qword_1014D3B70;
  qword_1014D3B70 = v1;

}

uint64_t sub_1009940FC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10099410C(uint64_t a1)
{

}

void sub_100994114(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "beginShowingLoadingIndicator"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

id sub_10099414C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_didInvalidateLoadingToken");
}

id sub_1009941D8(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 16) = 0;
  return objc_msgSend(*(id *)(a1 + 32), "_updateLoadingIndicator");
}

id sub_100994E50()
{
  if (qword_1014D3B90 != -1)
    dispatch_once(&qword_1014D3B90, &stru_1011DD6B0);
  return (id)qword_1014D3B88;
}

void sub_100995670(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained && (objc_msgSend(WeakRetained, "gotFirstFrame") & 1) == 0)
  {
    v3 = sub_100994E50();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      v7 = 134349056;
      v8 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[%{public}p] Passing ARSession to VKMapView", (uint8_t *)&v7, 0xCu);
    }

    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "vkMapView"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "session"));
    objc_msgSend(v5, "setARSession:", v6);

    objc_msgSend(v2, "setGotFirstFrame:", 1);
  }

}

void sub_1009959E4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "PedestrianARRenderingView");
  v2 = (void *)qword_1014D3B88;
  qword_1014D3B88 = (uint64_t)v1;

}

UIColor *__cdecl sub_1009968E0(id a1, UITraitCollection *a2)
{
  void *v2;

  if ((id)-[UITraitCollection userInterfaceStyle](a2, "userInterfaceStyle") == (id)2)
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor secondarySystemGroupedBackgroundColor](UIColor, "secondarySystemGroupedBackgroundColor"));
  else
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemWhiteColor](UIColor, "systemWhiteColor"));
  return (UIColor *)v2;
}

double sub_100996920(id a1, double result, NSArray *a3)
{
  if (result < 48.0)
    return 48.0;
  return result;
}

id sub_100996C54(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 96), "setEnabled:", 1);
}

id sub_100997B78(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = objc_msgSend(a2, "mutableCopy");
  objc_msgSend(v3, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 32), NSFontAttributeName);
  v4 = objc_msgSend(v3, "copy");

  return v4;
}

void sub_100997F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100997F80(uint64_t a1)
{
  id *WeakRetained;
  id v3;
  void *v4;
  void *v5;
  const __CFString *v6;
  void *v7;
  id *v8;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v8 = WeakRetained;
    v3 = objc_msgSend(WeakRetained[3], "source");
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v5 = v4;
    if (v3 == (id)3)
      v6 = CFSTR("[Route Creation] Save");
    else
      v6 = CFSTR("[Route Creation] Add to Library");
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedStringForKey:value:table:", v6, CFSTR("localized string not found"), 0));

    objc_msgSend(v8[13], "setTitle:forState:", v7, 0);
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v8[13]);

    WeakRetained = v8;
  }

}

void sub_10099845C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100998484(uint64_t a1, void *a2)
{
  id WeakRetained;
  id v4;

  v4 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (v4 && WeakRetained)
    objc_msgSend(WeakRetained, "_updateDirectionsButtonWithSuggestedMode:", objc_msgSend(*(id *)(a1 + 32), "suggestedNavigationModeForLocation:context:", v4, 1));

}

void sub_100998D40(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_100998D78(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_pressedOfflineDownloadButton");
    WeakRetained = v2;
  }

}

NSDictionary *__cdecl sub_100998DA8(id a1, NSDictionary *a2)
{
  id v2;
  void *v3;
  void *v4;
  id v5;

  v2 = -[NSDictionary mutableCopy](a2, "mutableCopy");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont _preferredFontForTextStyle:weight:](UIFont, "_preferredFontForTextStyle:weight:", UIFontTextStyleBody, UIFontWeightSemibold));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "_maps_fontWithMonospacedNumbers"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v4, NSFontAttributeName);

  v5 = objc_msgSend(v2, "copy");
  return (NSDictionary *)v5;
}

void sub_100998E40(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_pressedOfflineDownloadButton");
    WeakRetained = v2;
  }

}

void sub_100998FC8(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_updateOfflineButtonIfNecessary");
    WeakRetained = v2;
  }

}

uint64_t sub_10099B16C(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  uint64_t v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  unint64_t v11;
  BOOL v12;
  _BOOL8 v13;

  v5 = *(void **)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = a3;
  v8 = *(_QWORD *)(v6 + 8 * (_QWORD)objc_msgSend(v5, "indexOfObject:", a2));
  v9 = *(_QWORD *)(a1 + 40);
  v10 = objc_msgSend(*(id *)(a1 + 32), "indexOfObject:", v7);

  v11 = *(_QWORD *)(v9 + 8 * (_QWORD)v10);
  v12 = v8 >= v11;
  v13 = v8 > v11;
  if (v12)
    return v13;
  else
    return -1;
}

id sub_10099B6C4()
{
  if (qword_1014D3BA0 != -1)
    dispatch_once(&qword_1014D3BA0, &stru_1011DD770);
  return (id)qword_1014D3B98;
}

void sub_10099BA34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10099BA58(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id *v4;
  id WeakRetained;
  id v6;
  uint8_t v7[16];

  v2 = sub_10099B6C4();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Delay timer fired; updating state now", v7, 2u);
  }

  v4 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend(WeakRetained, "updateStateForCurrentPreciseLocationAuthorizationStatus");

  v6 = objc_loadWeakRetained(v4);
  objc_msgSend(v6, "setAuthorizedDelayTimer:", 0);

}

void sub_10099BE18(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFSessionCoarseLocationMonitor");
  v2 = (void *)qword_1014D3B98;
  qword_1014D3B98 = (uint64_t)v1;

}

void sub_10099C194(uint64_t a1, void *a2)
{
  id v3;
  _QWORD block[4];
  id v5;
  id v6;
  int v7;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10099C230;
  block[3] = &unk_1011AE308;
  v5 = a2;
  v7 = *(_DWORD *)(a1 + 40);
  v6 = *(id *)(a1 + 32);
  v3 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_10099C230(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  void *i;
  void *v6;
  void *v7;
  void *v8;
  TrafficIncidentReport *v9;
  void *v10;
  unsigned int v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];

  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v17;
    while (2)
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(_QWORD *)v17 != v4)
          objc_enumerationMutation(v2);
        v6 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v6, "incidentType", (_QWORD)v16) == *(_DWORD *)(a1 + 48))
        {
          v3 = v6;
          goto LABEL_11;
        }
      }
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
      if (v3)
        continue;
      break;
    }
  }
LABEL_11:

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[MKLocationManager sharedLocationManager](MKLocationManager, "sharedLocationManager"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "currentLocation"));

  v9 = -[TrafficIncidentReport initWithUserLocation:type:userPath:]([TrafficIncidentReport alloc], "initWithUserLocation:type:userPath:", v8, objc_msgSend(v3, "incidentType"), 1);
  -[TrafficIncidentReport setSiriContext:](v9, "setSiriContext:", 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[CarDisplayController sharedInstance](CarDisplayController, "sharedInstance"));
  v11 = objc_msgSend(v10, "isCurrentlyConnectedToAnyCarScene");

  if (v11)
  {
    -[TrafficIncidentReport setReportedFromCarplay:](v9, "setReportedFromCarplay:", 1);
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[CarChromeModeCoordinator sharedInstance](CarChromeModeCoordinator, "sharedInstance"));
  }
  else
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "navActionCoordinator"));

    v14 = *(void **)(a1 + 40);
    if (v13)
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "navActionCoordinator"));
    else
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "appCoordinator"));
  }
  v15 = v12;
  objc_msgSend(v12, "displayIncidentReportSubmissionWithItem:report:", v3, v9, (_QWORD)v16);

}

void sub_10099D398(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  dispatch_assert_queue_V2((dispatch_queue_t)&_dispatch_main_q);
  objc_msgSend(*(id *)(a1 + 32), "setImage:", v3);

}

id sub_10099D43C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "invalidateIfNeeded");
}

void sub_10099DA08(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  id v15;
  double v16;
  BOOL v17;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  void *j;
  void *v24;
  void *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  id v31;
  double v32;
  id v33;
  void *v34;
  id v35;
  _QWORD v36[4];
  id v37;
  id v38;
  _QWORD block[4];
  id v40;
  id v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[128];
  _BYTE v51[128];

  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v46, v51, 16);
  if (v3)
  {
    v4 = v3;
    v5 = 0;
    v6 = *(_QWORD *)v47;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v47 != v6)
          objc_enumerationMutation(v2);
        v8 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage _mapkit_transitArtworkImageWithDataSource:size:scale:](UIImage, "_mapkit_transitArtworkImageWithDataSource:size:scale:", *(_QWORD *)(*((_QWORD *)&v46 + 1) + 8 * (_QWORD)i), 8, *(double *)(a1 + 64)));
        v9 = v8;
        if (!v5 || v8 && (objc_msgSend(v8, "size"), v12 = v10 * v11, objc_msgSend(v5, "size"), v12 > v13 * v14))
        {
          v15 = v9;

          v5 = v15;
        }

      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v46, v51, 16);
    }
    while (v4);
  }
  else
  {
    v5 = 0;
  }

  objc_msgSend(v5, "size");
  if (v5)
    v17 = 0;
  else
    v17 = *(_DWORD *)(a1 + 72) == 6;
  if (v17 || v16 < 20.0)
  {
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v19 = *(id *)(a1 + 32);
    v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v42, v50, 16);
    if (v20)
    {
      v21 = v20;
      v22 = *(_QWORD *)v43;
      do
      {
        for (j = 0; j != v21; j = (char *)j + 1)
        {
          if (*(_QWORD *)v43 != v22)
            objc_enumerationMutation(v19);
          v24 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage _mapkit_transitArtworkImageWithDataSource:size:scale:](UIImage, "_mapkit_transitArtworkImageWithDataSource:size:scale:", *(_QWORD *)(*((_QWORD *)&v42 + 1) + 8 * (_QWORD)j), 8, *(double *)(a1 + 64)));
          v25 = v24;
          if (!v5 || v24 && (objc_msgSend(v24, "size"), v28 = v26 * v27, objc_msgSend(v5, "size"), v28 > v29 * v30))
          {
            v31 = v25;

            v5 = v31;
          }

        }
        v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v42, v50, 16);
      }
      while (v21);
    }

  }
  objc_msgSend(v5, "size");
  if (v5 && v32 >= 20.0)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10099DD64;
    block[3] = &unk_1011ACAD0;
    v41 = *(id *)(a1 + 56);
    v40 = v5;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

    v33 = v41;
  }
  else
  {
    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_imageForStyleAttributes:screenScale:isNightMode:", *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 76), *(double *)(a1 + 64)));
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472;
    v36[2] = sub_10099DD74;
    v36[3] = &unk_1011ACAD0;
    v35 = *(id *)(a1 + 56);
    v37 = v34;
    v38 = v35;
    v33 = v34;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v36);

  }
}

uint64_t sub_10099DD64(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

uint64_t sub_10099DD74(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_10099E5D0(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_1014D3BA8;
  qword_1014D3BA8 = (uint64_t)v1;

  objc_msgSend((id)qword_1014D3BA8, "setDateStyle:", 0);
  objc_msgSend((id)qword_1014D3BA8, "setTimeStyle:", 1);
}

id sub_10099FC84(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_cleanUp");
}

void sub_1009A0300(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_1009A0330(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  uint8_t v6[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    v3 = (void *)*((_QWORD *)WeakRetained + 9);
    *((_QWORD *)WeakRetained + 9) = 0;

    v4 = sub_10043173C();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Nilling out _strongself as a fallback in EVOnboardingController.", v6, 2u);
    }

  }
}

uint64_t sub_1009A191C(uint64_t a1, void *a2, uint64_t a3)
{
  void *v4;
  id v5;
  void *v6;
  void *v7;
  unsigned int v8;
  id v10;
  NSObject *v11;
  id v12;
  NSObject *v13;
  char *v14;
  int v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  const char *v22;

  v4 = *(void **)(a1 + 32);
  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));

  v8 = objc_msgSend(v6, "isEqual:", v7);
  if (a3 && v8)
  {
    v10 = sub_1004318FC();
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v15 = 136315906;
      v16 = "-[EVOnboardingController _finishConfiguringVehicle:]_block_invoke";
      v17 = 2080;
      v18 = "EVOnboardingController.m";
      v19 = 1024;
      v20 = 411;
      v21 = 2080;
      v22 = "index == 0";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%s [%s:%d] Assertion: (%s)", (uint8_t *)&v15, 0x26u);
    }

    if (sub_100A70734())
    {
      v12 = sub_1004318FC();
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v14 = (char *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
        v15 = 138412290;
        v16 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&v15, 0xCu);

      }
    }
  }
  return v8 ^ 1;
}

void sub_1009A1C0C(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(v1 + 72);
  *(_QWORD *)(v1 + 72) = 0;

}

void sub_1009A26D0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "UGCInlinePOIEnrichmentViewController");
  v2 = (void *)qword_1014D3BB8;
  qword_1014D3BB8 = (uint64_t)v1;

}

void sub_1009A2970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

NSString *__cdecl sub_1009A2998(id a1, MSPSharedTripContact *a2, unint64_t a3)
{
  return (NSString *)-[MSPSharedTripContact stringValue](a2, "stringValue", a3);
}

void sub_1009A29A0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id *v5;
  id v6;
  id WeakRetained;
  void (**v8)(void);

  v5 = (id *)(a1 + 32);
  v8 = a4;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained(v5);
  objc_msgSend(WeakRetained, "_updateSearchResults:", v6);

  v8[2]();
}

void sub_1009A2C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1009A2C88(uint64_t a1, void *a2)
{
  id *v4;
  id WeakRetained;
  id *v6;
  id v7;

  v7 = a2;
  v4 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained(v4);

  if (WeakRetained)
  {
    v6 = (id *)objc_loadWeakRetained(v4);
    objc_storeStrong(v6 + 3, a2);

  }
}

void sub_1009A346C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1009A3488(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "dismissHandler"));

  v2 = v3;
  if (v3)
  {
    (*((void (**)(id))v3 + 2))(v3);
    v2 = v3;
  }

}

void sub_1009A3AD0(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "tableFooterView"));
  objc_msgSend(v2, "frame");
  objc_msgSend(v1, "scrollRectToVisible:animated:", 1);

}

void sub_1009A3E2C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 104));
  _Unwind_Resume(a1);
}

void sub_1009A3E5C(uint64_t a1)
{
  _QWORD *WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v8 = WeakRetained;
    objc_msgSend(WeakRetained, "_cancelDismiss");
    v3 = (void *)v8[7];
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stringValue"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", v4));

    objc_msgSend(v5, "setSharingState:animated:", 1, 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "keyboardMode"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "chromeViewController"));
    objc_msgSend(v7, "captureUserAction:", 9025);

    WeakRetained = v8;
  }

}

void sub_1009A3F18(uint64_t a1, int a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id WeakRetained;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  NSObject *v19;
  id v20;
  void *v21;
  objc_class *v22;
  NSString *v23;
  void *v24;
  void *v25;
  void *v26;
  __CFString *v27;
  _QWORD v28[4];
  id v29;
  uint64_t v30;
  id v31;
  id v32;
  uint8_t buf[4];
  __CFString *v34;
  __int16 v35;
  id v36;

  v7 = a3;
  v8 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v10 = WeakRetained;
  if (v8 || !WeakRetained)
  {
    v18 = sub_10043237C();
    v19 = objc_claimAutoreleasedReturnValue(v18);
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
LABEL_16:

      goto LABEL_17;
    }
    v20 = *(id *)(a1 + 32);
    v21 = v20;
    if (!v20)
    {
      v27 = CFSTR("<nil>");
      goto LABEL_15;
    }
    v22 = (objc_class *)objc_opt_class(v20);
    v23 = NSStringFromClass(v22);
    v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
    if ((objc_opt_respondsToSelector(v21, "accessibilityIdentifier") & 1) != 0)
    {
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "performSelector:", "accessibilityIdentifier"));
      v26 = v25;
      if (v25 && !objc_msgSend(v25, "isEqualToString:", v24))
      {
        v27 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v24, v21, v26));

        goto LABEL_12;
      }

    }
    v27 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v24, v21));
LABEL_12:

LABEL_15:
    *(_DWORD *)buf = 138543618;
    v34 = v27;
    v35 = 2112;
    v36 = v8;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "[%{public}@] CarPlay failed to fetch requiresUserConfirmation flag: %@", buf, 0x16u);

    goto LABEL_16;
  }
  if (a2)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "name"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "handle"));
    v13 = CarInterruptionUserInfoForSharedTripSenderInfo(v11, v12);
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);

    v15 = *(void **)(a1 + 48);
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472;
    v28[2] = sub_1009A41F4;
    v28[3] = &unk_1011DD908;
    v16 = v14;
    v29 = v16;
    objc_copyWeak(&v32, (id *)(a1 + 64));
    v30 = *(_QWORD *)(a1 + 32);
    v31 = *(id *)(a1 + 56);
    v17 = objc_msgSend(v15, "presentInterruptionOfKind:userInfo:completionHandler:", 14, v16, v28);

    objc_destroyWeak(&v32);
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
LABEL_17:

}

void sub_1009A41D8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1009A41F4(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  _QWORD v6[5];
  id v7;
  id v8;

  if (a2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("kMapsInterruptionSharedTripSenderHandle")));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[MSPSharedTripService sharedInstance](MSPSharedTripService, "sharedInstance"));
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1009A42DC;
    v6[3] = &unk_1011BACE8;
    objc_copyWeak(&v8, (id *)(a1 + 56));
    v5 = *(void **)(a1 + 48);
    v6[4] = *(_QWORD *)(a1 + 40);
    v7 = v5;
    objc_msgSend(v4, "reportUserConfirmationOfSharingIdentity:completion:", v3, v6);

    objc_destroyWeak(&v8);
  }
}

void sub_1009A42C8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1009A42DC(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  id v8;
  void *v9;
  objc_class *v10;
  NSString *v11;
  void *v12;
  void *v13;
  void *v14;
  __CFString *v15;
  uint8_t buf[4];
  __CFString *v17;
  __int16 v18;
  id v19;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v5 = WeakRetained;
  if (v3 || !WeakRetained)
  {
    v6 = sub_10043237C();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
LABEL_14:

      goto LABEL_15;
    }
    v8 = *(id *)(a1 + 32);
    v9 = v8;
    if (!v8)
    {
      v15 = CFSTR("<nil>");
      goto LABEL_13;
    }
    v10 = (objc_class *)objc_opt_class(v8);
    v11 = NSStringFromClass(v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    if ((objc_opt_respondsToSelector(v9, "accessibilityIdentifier") & 1) != 0)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "performSelector:", "accessibilityIdentifier"));
      v14 = v13;
      if (v13 && !objc_msgSend(v13, "isEqualToString:", v12))
      {
        v15 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v12, v9, v14));

        goto LABEL_11;
      }

    }
    v15 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v12, v9));
LABEL_11:

LABEL_13:
    *(_DWORD *)buf = 138543618;
    v17 = v15;
    v18 = 2112;
    v19 = v3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[%{public}@] CarPlay failed to report requiresUserConfirmation: %@", buf, 0x16u);

    goto LABEL_14;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
LABEL_15:

}

void sub_1009A4BBC(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "contactsFromCNContact:", a2));
  objc_msgSend(v2, "addObjectsFromArray:", v3);

}

id sub_1009A4C90(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  void *v4;
  void *v5;

  v3 = *(void **)(a1 + 32);
  if (a2)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_loadingSection"));
  }
  else
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "traitCollection"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "_thumbnailGalleryLayoutForTraitCollection:", v5));

  }
  return v4;
}

void sub_1009A6230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1009A6254(uint64_t a1, int a2)
{
  id WeakRetained;

  if (a2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    objc_msgSend(WeakRetained, "_updateState:", *(_QWORD *)(a1 + 40));

  }
}

void sub_1009A6370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1009A6394(uint64_t a1, int a2)
{
  id WeakRetained;

  if (a2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    objc_msgSend(WeakRetained, "_updateState:", *(_QWORD *)(a1 + 40));

  }
}

void sub_1009A6B00(uint64_t a1, void *a2)
{
  id v3;
  TransitRequestInfoProvider *v4;
  uint64_t v5;
  void *v6;
  TransitRequestInfoProvider *v7;
  DrivingRequestInfoProvider *v8;
  void *v9;
  void *v10;
  DrivingRequestInfoProvider *v11;
  id v12;

  v3 = a2;
  v4 = [TransitRequestInfoProvider alloc];
  v5 = *(_QWORD *)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_timing:forTransportType:", *(_QWORD *)(a1 + 48), 3));
  v7 = -[TransitRequestInfoProvider initWithPreferences:timing:](v4, "initWithPreferences:timing:", v5, v6);
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v7, &off_10126FDC0);

  v12 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", &off_10126FDD8));
  v8 = [DrivingRequestInfoProvider alloc];
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "drivePreferences"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_timing:forTransportType:", *(_QWORD *)(a1 + 48), 1));
  v11 = -[DrivingRequestInfoProvider initWithPreferences:timing:](v8, "initWithPreferences:timing:", v9, v10);
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v11, &off_10126FDD8);

}

void sub_1009A6CD0(uint64_t a1, void *a2)
{
  id v3;
  DrivingRequestInfoProvider *v4;
  uint64_t v5;
  void *v6;
  DrivingRequestInfoProvider *v7;
  TransitRequestInfoProvider *v8;
  void *v9;
  void *v10;
  TransitRequestInfoProvider *v11;
  id v12;

  v3 = a2;
  v4 = [DrivingRequestInfoProvider alloc];
  v5 = *(_QWORD *)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_timing:forTransportType:", *(_QWORD *)(a1 + 48), 1));
  v7 = -[DrivingRequestInfoProvider initWithPreferences:timing:](v4, "initWithPreferences:timing:", v5, v6);
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v7, &off_10126FDD8);

  v12 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", &off_10126FDC0));
  v8 = [TransitRequestInfoProvider alloc];
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "transitPreferences"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_timing:forTransportType:", *(_QWORD *)(a1 + 48), 3));
  v11 = -[TransitRequestInfoProvider initWithPreferences:timing:](v8, "initWithPreferences:timing:", v9, v10);
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v11, &off_10126FDC0);

}

void sub_1009A6EA0(uint64_t a1, void *a2)
{
  id v3;
  WalkingRequestInfoProvider *v4;
  uint64_t v5;
  WalkingRequestInfoProvider *v6;
  id v7;

  v3 = a2;
  v4 = [WalkingRequestInfoProvider alloc];
  v5 = *(_QWORD *)(a1 + 32);
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_timing:forTransportType:", *(_QWORD *)(a1 + 48), 2));
  v6 = -[WalkingRequestInfoProvider initWithPreferences:timing:](v4, "initWithPreferences:timing:", v5, v7);
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v6, &off_10126FDF0);

}

void sub_1009A6FE4(uint64_t a1, void *a2)
{
  id v3;
  CyclingRequestInfoProvider *v4;
  uint64_t v5;
  CyclingRequestInfoProvider *v6;
  id v7;

  v3 = a2;
  v4 = [CyclingRequestInfoProvider alloc];
  v5 = *(_QWORD *)(a1 + 32);
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_timing:forTransportType:", *(_QWORD *)(a1 + 48), 5));
  v6 = -[CyclingRequestInfoProvider initWithPreferences:timing:](v4, "initWithPreferences:timing:", v5, v7);
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v6, &off_10126FE08);

}

void sub_1009A7924(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  unsigned __int8 v7;
  int v8;
  uint64_t v9;

  v2 = sub_10043188C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v8 = 138477827;
    v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "updateUserActivity %{private}@", (uint8_t *)&v8, 0xCu);
  }

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_mapsUserActivity"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "title"));
  v7 = objc_msgSend(v6, "isEqualToString:", *(_QWORD *)(a1 + 32));

  if ((v7 & 1) == 0)
    objc_msgSend(v5, "setTitle:", *(_QWORD *)(a1 + 32));
  objc_msgSend(v5, "becomeCurrent");
  objc_msgSend(v5, "setNeedsSave:", 1);

}

void sub_1009A7E44(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  const __CFString *v13;
  const __CFString *v14;
  const __CFString *v15;
  const __CFString *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  __int16 v21;
  void *v22;
  __int16 v23;
  const __CFString *v24;
  __int16 v25;
  const __CFString *v26;
  __int16 v27;
  const __CFString *v28;
  __int16 v29;
  const __CFString *v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  void *v34;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_cachedMapsActivityDataDictionary"));
  v3 = v2;
  if (v2)
  {
    v4 = *(void **)(a1 + 32);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("f")));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("c")));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("t")));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("x")));
    objc_msgSend(v4, "_updateUserActivityWithMapsActivityAtFullFidelity:atCompactFidelity:title:expirationDate:", v5, v6, v7, v8);

  }
  v9 = sub_10043188C();
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    v11 = *(void **)(a1 + 40);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "title"));
    v13 = CFSTR("YES");
    if (objc_msgSend(*(id *)(a1 + 40), "isEligibleForSearch"))
      v14 = CFSTR("YES");
    else
      v14 = CFSTR("NO");
    if (objc_msgSend(*(id *)(a1 + 40), "isEligibleForPrediction"))
      v15 = CFSTR("YES");
    else
      v15 = CFSTR("NO");
    if (objc_msgSend(*(id *)(a1 + 40), "isEligibleForHandoff"))
      v16 = CFSTR("YES");
    else
      v16 = CFSTR("NO");
    if (!objc_msgSend(*(id *)(a1 + 40), "isEligibleForPublicIndexing"))
      v13 = CFSTR("NO");
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "userInfo"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "contentAttributeSet"));
    v19 = 138414083;
    v20 = v11;
    v21 = 2113;
    v22 = v12;
    v23 = 2112;
    v24 = v14;
    v25 = 2112;
    v26 = v15;
    v27 = 2112;
    v28 = v16;
    v29 = 2112;
    v30 = v13;
    v31 = 2112;
    v32 = v17;
    v33 = 2112;
    v34 = v18;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "userActivityWillSave %@ title %{private}@ search %@ prediction %@ handoff %@ publicIndexing %@ userInfo %@ contentAttributeSet %@", (uint8_t *)&v19, 0x52u);

  }
}

void sub_1009A8444(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "appCoordinator"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "mapsSceneDelegate"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "window"));
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "windowScene"));

  if (!objc_msgSend(v6, "activationState") || objc_msgSend(v6, "activationState") == (id)1)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
    objc_msgSend(v5, "_saveRestorationUserActivityStateForScene:", v6);

  }
}

void sub_1009A84FC(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;

  v2 = sub_10043188C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = 138412547;
    v7 = v4;
    v8 = 2113;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Archiving MapsActivity (tag %@): %{private}@", (uint8_t *)&v6, 0x16u);
  }

}

void sub_1009A8B98(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf)
{
  id v11;
  id v12;
  NSObject *v13;
  void *v14;

  if (a2 == 1)
  {
    v11 = objc_begin_catch(a1);
    v12 = sub_10043188C();
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "description"));
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&buf, 0xCu);

    }
    objc_end_catch();
    JUMPOUT(0x1009A8B44);
  }
  _Unwind_Resume(a1);
}

void sub_1009A8C50(id a1)
{
  void *v1;
  NSString *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  NSObject *v8;
  int v9;
  uint64_t v10;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager _maps_globalCachesURL](NSFileManager, "_maps_globalCachesURL"));
  if (!v1)
  {
    v2 = NSHomeDirectory();
    v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", v3));

  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "URLByAppendingPathComponent:", CFSTR("state.txt")));
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "path"));
  v6 = (void *)qword_1014D3BC8;
  qword_1014D3BC8 = v5;

  v7 = sub_10043188C();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    v9 = 138412290;
    v10 = qword_1014D3BC8;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "TEST_MODE  write state at %@", (uint8_t *)&v9, 0xCu);
  }

}

id sub_1009A9884()
{
  void *v0;
  void *v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "localizedStringForKey:value:table:", CFSTR("Clear [Modal Card Header]"), CFSTR("localized string not found"), 0));

  return v1;
}

id sub_1009A98D8()
{
  void *v0;
  void *v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "localizedStringForKey:value:table:", CFSTR("Cancel [Modal Card Header]"), CFSTR("localized string not found"), 0));

  return v1;
}

id sub_1009A992C()
{
  void *v0;
  void *v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "localizedStringForKey:value:table:", CFSTR("Done [Modal Card Header]"), CFSTR("localized string not found"), 0));

  return v1;
}

id sub_1009A9980()
{
  void *v0;
  void *v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "localizedStringForKey:value:table:", CFSTR("End [Modal Card Header Carplay Mode]"), CFSTR("localized string not found"), 0));

  return v1;
}

id sub_1009A99D4()
{
  void *v0;
  void *v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "localizedStringForKey:value:table:", CFSTR("Apply [Modal Card Header]"), CFSTR("localized string not found"), 0));

  return v1;
}

id sub_1009AAA38(uint64_t a1)
{
  return +[UIFont _maps_boldSystemFontWithFixedSize:](UIFont, "_maps_boldSystemFontWithFixedSize:", *(double *)(a1 + 32));
}

id sub_1009AAA4C(uint64_t a1)
{
  return +[UIFont _maps_boldSystemFontWithFixedSize:adaptiveFont:](UIFont, "_maps_boldSystemFontWithFixedSize:adaptiveFont:", 1, *(double *)(a1 + 32));
}

id sub_1009AAA64(uint64_t a1)
{
  return +[UIFont _maps_systemFontWithFixedSize:](UIFont, "_maps_systemFontWithFixedSize:", *(double *)(a1 + 32));
}

id sub_1009AAA78(uint64_t a1)
{
  return +[UIFont _maps_systemFontWithFixedSize:adaptiveFont:](UIFont, "_maps_systemFontWithFixedSize:adaptiveFont:", 1, *(double *)(a1 + 32));
}

id sub_1009AAA90(uint64_t a1)
{
  return +[UIFont _maps_boldSystemFontWithFixedSize:](UIFont, "_maps_boldSystemFontWithFixedSize:", *(double *)(a1 + 32));
}

id sub_1009AAAA4(uint64_t a1)
{
  return +[UIFont _maps_boldSystemFontWithFixedSize:adaptiveFont:](UIFont, "_maps_boldSystemFontWithFixedSize:adaptiveFont:", 1, *(double *)(a1 + 32));
}

id sub_1009AAABC(uint64_t a1)
{
  return +[UIFont _maps_boldSystemFontWithFixedSize:](UIFont, "_maps_boldSystemFontWithFixedSize:", *(double *)(a1 + 32));
}

UIFont *__cdecl sub_1009AABA4(id a1)
{
  return (UIFont *)+[UIFont _maps_boldSystemFontWithFixedSize:](UIFont, "_maps_boldSystemFontWithFixedSize:", 22.0);
}

UIFont *__cdecl sub_1009AABB4(id a1)
{
  return (UIFont *)+[UIFont _maps_systemFontWithFixedSize:](UIFont, "_maps_systemFontWithFixedSize:", 22.0);
}

UIFont *__cdecl sub_1009AABC4(id a1)
{
  return (UIFont *)+[UIFont _maps_boldSystemFontWithFixedSize:](UIFont, "_maps_boldSystemFontWithFixedSize:", 22.0);
}

UIFont *__cdecl sub_1009AABD4(id a1)
{
  return (UIFont *)+[UIFont _maps_boldSystemFontWithFixedSize:](UIFont, "_maps_boldSystemFontWithFixedSize:", 22.0);
}

UIFont *__cdecl sub_1009AAC94(id a1)
{
  return (UIFont *)+[UIFont _maps_boldSystemFontWithFixedSize:](UIFont, "_maps_boldSystemFontWithFixedSize:", 22.0);
}

UIFont *__cdecl sub_1009AACA4(id a1)
{
  return (UIFont *)+[UIFont _maps_systemFontWithFixedSize:](UIFont, "_maps_systemFontWithFixedSize:", 22.0);
}

UIFont *__cdecl sub_1009AACB4(id a1)
{
  return (UIFont *)+[UIFont _maps_boldSystemFontWithFixedSize:](UIFont, "_maps_boldSystemFontWithFixedSize:", 22.0);
}

UIFont *__cdecl sub_1009AACC4(id a1)
{
  return (UIFont *)+[UIFont _maps_boldSystemFontWithFixedSize:](UIFont, "_maps_boldSystemFontWithFixedSize:", 22.0);
}

UIFont *__cdecl sub_1009AAD6C(id a1)
{
  return (UIFont *)+[UIFont _maps_boldSystemFontWithFixedSize:](UIFont, "_maps_boldSystemFontWithFixedSize:", 22.0);
}

UIFont *__cdecl sub_1009AAD7C(id a1)
{
  return (UIFont *)+[UIFont _maps_systemFontWithFixedSize:](UIFont, "_maps_systemFontWithFixedSize:", 22.0);
}

UIFont *__cdecl sub_1009AAD8C(id a1)
{
  return (UIFont *)+[UIFont _maps_boldSystemFontWithFixedSize:](UIFont, "_maps_boldSystemFontWithFixedSize:", 22.0);
}

id sub_1009AAF50(uint64_t a1)
{
  return +[UIFont _maps_boldSystemFontWithFixedSize:](UIFont, "_maps_boldSystemFontWithFixedSize:", *(double *)(a1 + 32));
}

id sub_1009AAF64(uint64_t a1)
{
  return +[UIFont _maps_boldSystemFontWithFixedSize:adaptiveFont:](UIFont, "_maps_boldSystemFontWithFixedSize:adaptiveFont:", 1, *(double *)(a1 + 32));
}

id sub_1009AAF7C(uint64_t a1)
{
  return +[UIFont _maps_systemFontWithFixedSize:](UIFont, "_maps_systemFontWithFixedSize:", *(double *)(a1 + 32));
}

id sub_1009AAF90(uint64_t a1)
{
  return +[UIFont _maps_systemFontWithFixedSize:adaptiveFont:](UIFont, "_maps_systemFontWithFixedSize:adaptiveFont:", 1, *(double *)(a1 + 32));
}

id sub_1009AAFA8(uint64_t a1)
{
  return +[UIFont _maps_boldSystemFontWithFixedSize:](UIFont, "_maps_boldSystemFontWithFixedSize:", *(double *)(a1 + 32));
}

id sub_1009AAFBC(uint64_t a1)
{
  return +[UIFont _maps_boldSystemFontWithFixedSize:adaptiveFont:](UIFont, "_maps_boldSystemFontWithFixedSize:adaptiveFont:", 1, *(double *)(a1 + 32));
}

id sub_1009AAFD4(uint64_t a1)
{
  return +[UIFont _maps_boldSystemFontWithFixedSize:](UIFont, "_maps_boldSystemFontWithFixedSize:", *(double *)(a1 + 32));
}

UIFont *__cdecl sub_1009AB054(id a1)
{
  return (UIFont *)+[UIFont _maps_boldSystemFontWithFixedSize:](UIFont, "_maps_boldSystemFontWithFixedSize:", 20.0);
}

UIFont *__cdecl sub_1009AB0B4(id a1)
{
  return (UIFont *)+[UIFont system17SemiBold](UIFont, "system17SemiBold");
}

int64_t sub_1009AB80C(id a1, VGChargingNetwork *a2, VGChargingNetwork *a3)
{
  VGChargingNetwork *v4;
  void *v5;
  void *v6;
  id v7;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[VGChargingNetwork name](a2, "name"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[VGChargingNetwork name](v4, "name"));

  v7 = objc_msgSend(v5, "compare:", v6);
  return (int64_t)v7;
}

VehicleLabelCell *__cdecl sub_1009AB878(id a1, VGChargingNetwork *a2, unint64_t a3)
{
  VGChargingNetwork *v3;
  void *v4;
  VehicleLabelCell *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  int v12;
  VGChargingNetwork *v13;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[VGChargingNetwork name](v3, "name"));

  if (v4)
  {
    v5 = objc_opt_new(VehicleLabelCell);
    v6 = (void *)objc_claimAutoreleasedReturnValue(-[VGChargingNetwork name](v3, "name"));
    -[VehicleLabelCell setAccessibilityIdentifier:](v5, "setAccessibilityIdentifier:", v6);

    v7 = (void *)objc_claimAutoreleasedReturnValue(-[VGChargingNetwork name](v3, "name"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(-[VehicleLabelCell label](v5, "label"));
    objc_msgSend(v8, "setText:", v7);

    -[VehicleLabelCell setSelectionStyle:](v5, "setSelectionStyle:", 0);
  }
  else
  {
    v9 = sub_1004326FC();
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v12 = 138412290;
      v13 = v3;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed to create a cell for network: %@", (uint8_t *)&v12, 0xCu);
    }

    v5 = 0;
  }

  return v5;
}

NSString *__cdecl sub_1009ADE70(id a1, NSNumber *a2, unint64_t a3)
{
  return (NSString *)sub_1006EA788(-[NSNumber unsignedIntegerValue](a2, "unsignedIntegerValue", a3));
}

void sub_1009AE04C(uint64_t a1)
{
  void *v2;
  void *v3;
  dispatch_time_t v4;
  _QWORD v5[4];
  id v6;
  id location;

  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 16), *(id *)(a1 + 32));
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 24) = 1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "vehicleDetailViewController:deleteVehicle:", *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentingViewController"));
  objc_msgSend(v3, "dismissViewControllerAnimated:completion:", 1, &stru_1011DDC20);

  objc_initWeak(&location, *(id *)(a1 + 32));
  v4 = dispatch_time(0, 1000000000);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1009AE170;
  v5[3] = &unk_1011AD260;
  objc_copyWeak(&v6, &location);
  dispatch_after(v4, (dispatch_queue_t)&_dispatch_main_q, v5);
  objc_destroyWeak(&v6);
  objc_destroyWeak(&location);
}

void sub_1009AE170(uint64_t a1)
{
  _QWORD *WeakRetained;
  void *v2;
  _QWORD *v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = (void *)WeakRetained[2];
    WeakRetained[2] = 0;
    v3 = WeakRetained;

    WeakRetained = v3;
  }

}

void sub_1009AE24C(uint64_t a1)
{
  id v2;

  if (objc_msgSend(*(id *)(a1 + 32), "_isMinimumViableVehicle"))
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    objc_msgSend(v2, "vehicleDetailViewController:saveVehicleEdit:", *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));

  }
}

void sub_1009AEBD0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  unsigned int v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  _QWORD v13[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "vehicles"));
  objc_msgSend(*(id *)(a1 + 32), "setVehicleCount:", objc_msgSend(v2, "count"));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "vehicleBatteryView"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "vehicle"));
  v5 = objc_msgSend(v4, "isPureElectricVehicle");

  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "vehicles"));
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1009AED08;
    v13[3] = &unk_1011B87C0;
    v13[4] = *(_QWORD *)(a1 + 32);
    v7 = sub_10039E1FC(v6, v13);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "vehicleBatteryView"));
    objc_msgSend(v9, "setVehicle:", v8);

  }
  objc_msgSend(*(id *)(a1 + 32), "_updateContent");
  objc_msgSend(*(id *)(a1 + 32), "setTableStructure:", 0);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tableView"));
  objc_msgSend(v10, "reloadData");

  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(void **)(v11 + 16);
  *(_QWORD *)(v11 + 16) = 0;

}

id sub_1009AED08(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v5 = *(void **)(a1 + 32);
  v6 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "vehicleBatteryView"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "vehicle"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));

  v11 = objc_msgSend(v9, "isEqualToString:", v10);
  if ((_DWORD)v11)
    *a4 = 1;
  return v11;
}

const __CFString *sub_1009AF070(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("Nominal");
  else
    return off_1011DDC40[a1 - 1];
}

void sub_1009B0AC4(uint64_t a1)
{
  double *v2;
  double *v3;
  void *v4;
  void *v5;
  double v6;
  id v7;

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapView"));
  v2 = *(double **)(a1 + 32);
  v3 = v2 + 3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "view"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "safeAreaLayoutGuide"));
  objc_msgSend(v5, "layoutFrame");
  objc_msgSend(v7, "setVisibleMapRect:edgePadding:animated:", 0, *v3, v3[1], v3[2], v3[3], v6 + 20.0, 20.0, 20.0, 20.0);

}

void sub_1009B1474(uint64_t a1)
{
  void *v2;
  void *v3;
  unsigned int v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  double v15;
  CLLocationDegrees v16;
  void *v17;
  void *v18;
  void *v19;
  CLLocationDegrees v20;
  CLLocationCoordinate2D v21;
  id v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  RAPAnnotation *v28;
  id v29;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "problemStatus"));
  v29 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectAtIndexedSubscript:", 0));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "details"));
  v4 = objc_msgSend(v3, "displayStyle");

  v5 = v29;
  if (v4 == 4)
  {
    v6 = *(void **)(a1 + 32);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "details"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "label"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "localizedText"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "labelMarkerOnMapViewWithText:", v9));

    if (v10)
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "_selectLabelMarker:animated:", v10, 1);
    }
    else
    {
      v11 = objc_alloc((Class)MKPlacemark);
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "details"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "label"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "center"));
      objc_msgSend(v14, "lat");
      v16 = v15;
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "details"));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "label"));
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "center"));
      objc_msgSend(v19, "lng");
      v21 = CLLocationCoordinate2DMake(v16, v20);
      v22 = objc_msgSend(v11, "initWithCoordinate:addressDictionary:", 0, v21.latitude, v21.longitude);

      v23 = objc_msgSend(objc_alloc((Class)MKMapItem), "initWithPlacemark:", v22);
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "details"));
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "label"));
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "localizedText"));
      objc_msgSend(v23, "setName:", v26);

      v27 = *(_QWORD *)(a1 + 32);
      if (*(_QWORD *)(v27 + 16))
        objc_msgSend(*(id *)(v27 + 136), "removeAnnotation:");
      v28 = -[RAPAnnotation initWithMapItem:]([RAPAnnotation alloc], "initWithMapItem:", v23);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "addAnnotation:", v28);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "selectAnnotation:animated:", v28, 1);

    }
    v5 = v29;
  }

}

uint64_t sub_1009B2F18(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1009B3E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a28);
  _Unwind_Resume(a1);
}

void sub_1009B3E58(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  void *v4;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "sender"));

  objc_msgSend(WeakRetained, "handleDismissAction:", v4);
}

void sub_1009B47B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1009B4800(uint64_t a1, void *a2, unint64_t a3, char *a4)
{
  unint64_t v7;
  void *v8;
  char *v9;
  char *v11;
  uint64_t v12;
  RelatedSearchSuggestionComponent *v13;
  id v14;

  v14 = a2;
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  if (v7 >= (unint64_t)objc_msgSend(*(id *)(a1 + 32), "count"))
  {
LABEL_8:
    v8 = 0;
  }
  else
  {
    while (1)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", v7));
      v9 = (char *)objc_msgSend(v8, "range");
      if ((unint64_t)v9 >= a3 && &v9[-a3] < a4)
      {
        v11 = (char *)objc_msgSend(v8, "range");
        if (&v11[v12] <= &a4[a3])
          break;
      }
      ++v7;

      if (v7 >= (unint64_t)objc_msgSend(*(id *)(a1 + 32), "count"))
        goto LABEL_8;
    }
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v7 + 1;
  }
  v13 = -[RelatedSearchSuggestionComponent initWithDisplayText:substitute:]([RelatedSearchSuggestionComponent alloc], "initWithDisplayText:substitute:", v14, v8);
  objc_msgSend(*(id *)(a1 + 40), "addObject:", v13);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) += objc_msgSend(v14, "length");

}

void sub_1009B5800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1009B581C(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  id v4;

  v2 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "startedTest");

  v4 = objc_loadWeakRetained(v2);
  objc_msgSend(v4, "runStepZoomTest:", *(double *)(a1 + 40));

}

void sub_1009B5968(id a1, unint64_t a2)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[GEOTileLoader modernLoader](GEOTileLoader, "modernLoader"));
  objc_msgSend(v2, "clearAllCaches");

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v3, "postNotificationName:object:", VKShouldFlushTileCachesNotification, 0);

}

void sub_1009B59D0(uint64_t a1)
{
  void *v2;
  MapsAppTestCirclePan *v3;
  void *v4;
  MapsAppTestCirclePan *v5;
  uint64_t v6;
  void *v7;
  double *v8;
  double v9;
  double v10;
  id v11;
  double v12;
  void *v13;
  void *v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18[2];
  id location;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("stepZoom:zoom%02d"), (int)*(double *)(a1 + 40)));
  objc_msgSend(*(id *)(a1 + 32), "startedSubTest:", v2);
  v3 = [MapsAppTestCirclePan alloc];
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "app"));
  v5 = -[MapsAppTestCirclePan initWithApplication:testName:options:](v3, "initWithApplication:testName:options:", v4, v2, 0);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(void **)(v6 + 64);
  *(_QWORD *)(v6 + 64) = v5;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "setPitch:", 0.0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "setYaw:", 0.0);
  v8 = *(double **)(a1 + 32);
  v9 = v8[13];
  v10 = v8[14];
  v11 = objc_msgSend(v8, "_regionSizeForZoom:", *(double *)(a1 + 40));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "setEndPoint:", VKLocationCoordinate3DMake(v11, v9, v10, v12));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "setAltitudeIsRegionSize:", 1);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "setAnimationDuration:", *(double *)(*(_QWORD *)(a1 + 32) + 96));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "setUseTestNameInResults:", 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "results"));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "setResults:", v13);

  objc_initWeak(&location, *(id *)(a1 + 32));
  v14 = *(void **)(*(_QWORD *)(a1 + 32) + 64);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1009B5BFC;
  v16[3] = &unk_1011B9268;
  objc_copyWeak(v18, &location);
  v15 = v2;
  v17 = v15;
  v18[1] = *(id *)(a1 + 40);
  objc_msgSend(v14, "setTestFinshdCallback:", v16);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "runTest");

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);

}

void sub_1009B5BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1009B5BFC(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  id v4;
  double v5;
  id v6;

  v2 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "stepLoadCompleted:", *(_QWORD *)(a1 + 32));

  v4 = objc_loadWeakRetained(v2);
  v5 = *(double *)(a1 + 48);
  v6 = v4;
  objc_msgSend(v6, "runStepZoomTest:", v5 + (double)(uint64_t)objc_msgSend(v6, "_zoomAmount"));

}

id sub_1009B5EEC(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  void *v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainVKMapView"));
  v3 = objc_msgSend(v2, "isFullyDrawn");

  v4 = *(void **)(a1 + 32);
  if (v3)
    return _objc_msgSend(v4, "onFullyDrawn:", 0);
  else
    return objc_msgSend(v4, "setupFullyDrawnNotification:", "onFullyDrawn:");
}

SearchResult *sub_1009B6E90(uint64_t a1, void *a2, unint64_t a3)
{
  SearchResult *v3;
  void *v4;

  if (*(_QWORD *)(a1 + 32) <= a3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "mapItemStorage"));
    if (v4)
      v3 = -[SearchResult initWithGEOMapItem:]([SearchResult alloc], "initWithGEOMapItem:", v4);
    else
      v3 = 0;

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

void sub_1009B7E30(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  uint64_t v5;

  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v5 - 88));
  _Unwind_Resume(a1);
}

void sub_1009B7E7C()
{
  JUMPOUT(0x1009B7E64);
}

void sub_1009B7E84(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  GeoCellDataSaverHistoryTableViewController *v4;

  v4 = objc_alloc_init(GeoCellDataSaverHistoryTableViewController);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "navigationController"));
  objc_msgSend(v3, "pushViewController:animated:", v4, 1);

}

void sub_1009B7EE8(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  GeoRequestCounterTableViewController *v4;

  v4 = -[GeoRequestCounterTableViewController initWithStyle:]([GeoRequestCounterTableViewController alloc], "initWithStyle:", 1);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "navigationController"));
  objc_msgSend(v3, "pushViewController:animated:", v4, 1);

}

void sub_1009B7F54(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  GeoRequestResponseLogTableViewController *v4;

  v4 = -[GeoRequestResponseLogTableViewController initWithStyle:]([GeoRequestResponseLogTableViewController alloc], "initWithStyle:", 1);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "navigationController"));
  objc_msgSend(v3, "pushViewController:animated:", v4, 1);

}

void sub_1009B7FC0(id a1, MapsDebugValuesViewController *a2)
{
  id v2;

  v2 = -[MapsDebugValuesViewController addSectionWithTitle:content:](a2, "addSectionWithTitle:content:", 0, &stru_1011DDCE0);
}

void sub_1009B7FEC(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  MapsDebugTableSection *v4;

  v4 = a2;
  v2 = -[MapsDebugTableSection addNavigationRowForViewControllerClass:](v4, "addNavigationRowForViewControllerClass:", objc_opt_class(GeodDebugViewController));
  v3 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v4, "addButtonRowWithTitle:action:", CFSTR("Clear PlaceData cache"), &stru_1011DDD00);

}

void sub_1009B8050(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[GEOPlaceCardRequester sharedRequester](GEOPlaceCardRequester, "sharedRequester"));
  objc_msgSend(v1, "clearCache");

}

void sub_1009B8084(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  MapDataSubscriptionsDebugViewController *v4;

  v4 = -[MapDataSubscriptionsDebugViewController initWithStyle:]([MapDataSubscriptionsDebugViewController alloc], "initWithStyle:", 2);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "navigationController"));
  objc_msgSend(v3, "pushViewController:animated:", v4, 1);

}

void sub_1009B80F0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  _QWORD v15[5];
  _QWORD v16[5];
  id v17;
  id location;
  _QWORD v19[4];
  id v20;

  v3 = a2;
  v4 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Offline"), &stru_1011DDD20);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithPath:](NSBundle, "bundleWithPath:", CFSTR("/System/Library/PrivateFrameworks/GeoServices.framework/MapsOfflineService.bundle")));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "infoDictionary"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("CFBundleVersion")));

  if (v7)
  {
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_1009B8380;
    v19[3] = &unk_1011B4BC0;
    v20 = v7;
    v8 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Offline Services Version"), v19);

  }
  objc_initWeak(&location, v3);
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[GEOOfflineDataAccess sharedInstance](GEOOfflineDataAccess, "sharedInstance"));
  v10 = &_dispatch_main_q;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1009B83A8;
  v16[3] = &unk_1011DDD48;
  v16[4] = *(_QWORD *)(a1 + 32);
  objc_copyWeak(&v17, &location);
  objc_msgSend(v9, "getOfflineVersionMetadataWithCallbackQueue:callback:", &_dispatch_main_q, v16);

  v11 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Offline Tips"), &stru_1011DDD68);
  v12 = objc_msgSend(v3, "addSectionWithTitle:content:", 0, &stru_1011DDDE8);
  v13 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v13 + 112))
  {
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_1009B86AC;
    v15[3] = &unk_1011B4BC0;
    v15[4] = v13;
    v14 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Offline Data Versions"), v15);
  }
  objc_destroyWeak(&v17);
  objc_destroyWeak(&location);

}

void sub_1009B8324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1009B834C(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](a2, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Debug Logs Enabled"), GeoOfflineConfig_DebugLogsEnabled[0], GeoOfflineConfig_DebugLogsEnabled[1]);
}

id sub_1009B8380(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "addReadOnlyRowWithTitle:value:", *(_QWORD *)(a1 + 32), 0);
}

void sub_1009B83A8(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id WeakRetained;
  id v8;

  v8 = a2;
  v6 = a3;
  if (v8 && *(id *)(*(_QWORD *)(a1 + 32) + 112) != v8 && (objc_msgSend(v8, "isEqual:") & 1) == 0)
  {
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 112), a2);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(WeakRetained, "rebuildSections");

  }
}

void sub_1009B8444(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugTableSection *v5;

  v5 = a2;
  v2 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v5, "addButtonRowWithTitle:action:", CFSTR("Clear Pre-Arrival and Airport Arrival Tip Dismissal History"), &stru_1011DDD88);
  v3 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v5, "addButtonRowWithTitle:action:", CFSTR("Simulate an Offline Maps Welcome Screen \"Remind Me Later\" tap now. (Also clears dismissal history)"), &stru_1011DDDA8);
  v4 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v5, "addButtonRowWithTitle:action:", CFSTR("Simulate an Offline Maps Welcome Screen \"Remind Me Later\" tap 15 days ago. (Also clears dismissal history)"), &stru_1011DDDC8);
  -[MapsDebugTableSection setFooter:](v5, "setFooter:", CFSTR("This will set the \"Remind Me Later\" tap date to a little more than two weeks in the past, which in practice means the Home Area tip will just show up. You will need to quit and relaunch Maps to see the tip."));

}

void sub_1009B84D4(id a1)
{
  GEOConfigSetDate(MapsConfig_OfflineMapsPreArrivalTipDismissalDate, off_1014B44F8, 0);
  GEOConfigSetDate(MapsConfig_OfflineMapsPreArrivalTipFirstDisplayDate, off_1014B4508, 0);
}

void sub_1009B8508(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  GEOConfigSetDate(MapsConfig_OfflineMapsHomeAreaTipRemindMeLaterDate, off_1014B4538, v1);
  GEOConfigSetDate(MapsConfig_OfflineMapsHomeAreaTipDismissalDate, off_1014B4558, 0);
  GEOConfigSetDate(MapsConfig_OfflineMapsHomeAreaTipFirstDisplayDate, off_1014B4568, 0);

}

void sub_1009B8574(id a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v1 = objc_alloc_init((Class)NSDateComponents);
  objc_msgSend(v1, "setDay:", -15);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar currentCalendar](NSCalendar, "currentCalendar"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "dateByAddingComponents:toDate:options:", v1, v4, 0));

  GEOConfigSetDate(MapsConfig_OfflineMapsHomeAreaTipRemindMeLaterDate, off_1014B4538, v3);
  GEOConfigSetDate(MapsConfig_OfflineMapsHomeAreaTipDismissalDate, off_1014B4558, 0);
  GEOConfigSetDate(MapsConfig_OfflineMapsHomeAreaTipFirstDisplayDate, off_1014B4568, 0);

}

void sub_1009B8640(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addButtonRowWithTitle:action:](a2, "addButtonRowWithTitle:action:", CFSTR("Reset Autoupdate Disclaimer Shown"), &stru_1011DDE08);
}

void sub_1009B8670(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v1, "removeObjectForKey:", CFSTR("OfflineMapsAutoUpdateDisclaimerDisplayed"));

}

void sub_1009B86AC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;

  v3 = a2;
  v4 = *(void **)(*(_QWORD *)(a1 + 32) + 112);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1009B8734;
  v6[3] = &unk_1011DDE30;
  v7 = v3;
  v5 = v3;
  objc_msgSend(v4, "enumerateLayerVersions:", v6);

}

void sub_1009B8734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  __CFString *v5;
  void *v6;
  id v7;
  __CFString *v8;

  v4 = *(void **)(a1 + 32);
  if (a2 >= 0x15)
    v5 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), a2));
  else
    v5 = off_1011DE650[(int)a2];
  v8 = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%llu"), a3));
  v7 = objc_msgSend(v4, "addReadOnlyRowWithTitle:value:", v8, v6);

}

void sub_1009B8880(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1009B889C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  uint64_t String;
  void *v8;
  uint64_t v9;
  void *v10;
  const __CFString *v11;
  id v12;
  const __CFString *v13;
  id v14;
  void **v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  void *v18;
  id v19;
  _QWORD v20[4];
  id v21;

  v3 = a2;
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_1009B8A84;
  v20[3] = &unk_1011AD260;
  objc_copyWeak(&v21, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Prompt Apple Connect Auth"), v20);
  v15 = _NSConcreteStackBlock;
  v16 = 3221225472;
  v17 = sub_1009B8B1C;
  v18 = &unk_1011AD260;
  objc_copyWeak(&v19, (id *)(a1 + 32));
  v5 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Refresh Maps Auth Tokens"), &v15);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Delete Maps Auth Tokens"), &stru_1011DDE50, v15, v16, v17, v18));
  objc_msgSend(v6, "setIsDestructive:", 1);

  String = GEOConfigGetString(GeoServicesConfig_MapsAuthToken[0], GeoServicesConfig_MapsAuthToken[1]);
  v8 = (void *)objc_claimAutoreleasedReturnValue(String);
  v9 = GEOConfigGetString(GeoServicesConfig_MapsRefreshToken[0], GeoServicesConfig_MapsRefreshToken[1]);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  if (v8)
    v11 = CFSTR("Yes");
  else
    v11 = CFSTR("No");
  v12 = objc_msgSend(v3, "addReadOnlyRowWithTitle:value:", CFSTR("Has MAT"), v11);
  if (v10)
    v13 = CFSTR("Yes");
  else
    v13 = CFSTR("No");
  v14 = objc_msgSend(v3, "addReadOnlyRowWithTitle:value:", CFSTR("Has MRT"), v13);

  objc_destroyWeak(&v19);
  objc_destroyWeak(&v21);

}

void sub_1009B8A54(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1009B8A84(id *a1)
{
  void *v2;
  id WeakRetained;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[GEOMapsAuthServiceHelper sharedAuthHelper](GEOMapsAuthServiceHelper, "sharedAuthHelper"));
  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  objc_msgSend(v2, "addMapsAuthDidFinishObserver:forRequestType:", WeakRetained, GEOMapsAuthACToken);

  v4 = objc_loadWeakRetained(a1);
  +[MapsAppleConnectAuthViewController presentAppleConnectAuthControllerFrom:withProxyURL:](MapsAppleConnectAuthViewController, "presentAppleConnectAuthControllerFrom:withProxyURL:", v4, 0);

}

void sub_1009B8B1C(uint64_t a1)
{
  void *v2;
  id WeakRetained;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[GEOMapsAuthServiceHelper sharedAuthHelper](GEOMapsAuthServiceHelper, "sharedAuthHelper"));
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(v2, "addMapsAuthDidFinishObserver:forRequestType:", WeakRetained, GEOMapsAuthMRT);

  v4 = (id)objc_claimAutoreleasedReturnValue(+[GEOMapsAuthServiceHelper sharedAuthHelper](GEOMapsAuthServiceHelper, "sharedAuthHelper"));
  objc_msgSend(v4, "renewMapsAuthProxyToken:fromToken:authProxyURL:suppressNotification:", 1, 0, 0, 1);

}

void sub_1009B8BB0(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[GEOMapsAuthServiceHelper sharedAuthHelper](GEOMapsAuthServiceHelper, "sharedAuthHelper"));
  objc_msgSend(v1, "invalidateTokens");

}

void sub_1009B8D68(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1009B8D88(id *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void **v6;
  uint64_t v7;
  void (*v8)(uint64_t, void *);
  void *v9;
  id v10;
  id v11;

  v3 = a2;
  objc_msgSend(a1[4], "addObject:", v3);
  objc_msgSend(a1[5], "addObject:", v3);
  v4 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Current Environment"), &stru_1011DDE70);
  v6 = _NSConcreteStackBlock;
  v7 = 3221225472;
  v8 = sub_1009B8F18;
  v9 = &unk_1011B4F90;
  objc_copyWeak(&v11, a1 + 8);
  v10 = a1[6];
  v5 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Flags"), &v6);
  objc_msgSend(a1[7], "_addAuthTokenSectionTo:", v3, v6, v7, v8, v9);

  objc_destroyWeak(&v11);
}

void sub_1009B8E7C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1009B8E94(id a1, MapsDebugTableSection *a2)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  MapsDebugTableSection *v6;

  v6 = a2;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[GEOResourceManifestManager modernManager](GEOResourceManifestManager, "modernManager"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "activeTileGroup"));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "environment"));
  v5 = -[MapsDebugTableSection addReadOnlyRowWithTitle:value:](v6, "addReadOnlyRowWithTitle:value:", v4, &stru_1011EB268);

}

void sub_1009B8F18(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  void *v11;
  id v12;
  _QWORD v13[5];
  _QWORD v14[5];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD v19[4];
  id v20;
  _BYTE v21[128];

  v3 = a2;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_1009B9150;
  v19[3] = &unk_1011AD260;
  objc_copyWeak(&v20, (id *)(a1 + 40));
  v4 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Get / Update Feature Flags"), v19);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Delete Feature Flags"), &stru_1011DDE90));
  objc_msgSend(v5, "setIsDestructive:", 1);

  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "features"));
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v15, v21, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v16 != v8)
          objc_enumerationMutation(v6);
        v10 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)i);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "name"));
        v13[4] = v10;
        v14[0] = _NSConcreteStackBlock;
        v14[1] = 3221225472;
        v14[2] = sub_1009B9208;
        v14[3] = &unk_1011AEB50;
        v14[4] = v10;
        v13[0] = _NSConcreteStackBlock;
        v13[1] = 3221225472;
        v13[2] = sub_1009B9228;
        v13[3] = &unk_1011AE8F8;
        v12 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", v11, v14, v13);

      }
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v15, v21, 16);
    }
    while (v7);
  }

  objc_destroyWeak(&v20);
}

void sub_1009B9124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location)
{
  objc_destroyWeak(location);
  _Unwind_Resume(a1);
}

void sub_1009B9150(uint64_t a1)
{
  void *v2;
  id WeakRetained;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[GEOMapsAuthServiceHelper sharedAuthHelper](GEOMapsAuthServiceHelper, "sharedAuthHelper"));
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(v2, "addMapsAuthDidFinishObserver:forRequestType:", WeakRetained, GEOMapsAuthFeatureFlags);

  v4 = (id)objc_claimAutoreleasedReturnValue(+[GEOMapsAuthServiceHelper sharedAuthHelper](GEOMapsAuthServiceHelper, "sharedAuthHelper"));
  objc_msgSend(v4, "requestFeatureFlagsWithURL:suppressNotification:", 0, 1);

}

void sub_1009B91DC(id a1)
{
  _GEOConfigRemoveValue(GeoServicesConfig_ClientAuthFeatureFlags[0], GeoServicesConfig_ClientAuthFeatureFlags[1]);
  _GEOConfigRemoveValue(GeoServicesConfig_ClientAuthFeatureFlagsStateInfo[0], GeoServicesConfig_ClientAuthFeatureFlagsStateInfo[1]);
}

BOOL sub_1009B9208(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "state") == (id)1;
}

id sub_1009B9228(uint64_t a1, int a2)
{
  void *v2;
  uint64_t v3;

  v2 = *(void **)(a1 + 32);
  if (a2)
    v3 = 1;
  else
    v3 = 2;
  return objc_msgSend(v2, "setState:", v3);
}

void sub_1009B936C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1009B9388(id *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  unsigned int v7;
  id v8;
  id v9;
  id v10;
  id v11;
  void **v12;
  uint64_t v13;
  void (*v14)(uint64_t, void *);
  void *v15;
  id v16;
  _QWORD v17[4];
  id v18;

  v3 = a2;
  objc_msgSend(a1[4], "addObject:", v3);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_1009B9540;
  v17[3] = &unk_1011B4BC0;
  v18 = a1[5];
  v4 = objc_msgSend(v3, "addSectionWithTitle:content:", 0, v17);
  v12 = _NSConcreteStackBlock;
  v13 = 3221225472;
  v14 = sub_1009BA468;
  v15 = &unk_1011AEAC8;
  objc_copyWeak(&v16, a1 + 7);
  v5 = objc_msgSend(v3, "addSectionWithTitle:content:", 0, &v12);
  objc_msgSend(a1[6], "_addAuthTokenSectionTo:", v3, v12, v13, v14, v15);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GEOPlatform sharedPlatform](GEOPlatform, "sharedPlatform"));
  v7 = objc_msgSend(v6, "isInternalInstall");

  if (v7)
  {
    v8 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Test auth push notifications"), &stru_1011DE0F8);
    v9 = objc_msgSend(v3, "addSectionWithTitle:content:", 0, &stru_1011DE1F8);
  }
  v10 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Debug Service Flags"), &stru_1011DE258);
  v11 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Show Environment on Map"), &stru_1011DE2B8);
  objc_destroyWeak(&v16);

}

void sub_1009B9528(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1009B9540(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;

  v3 = a2;
  v4 = objc_msgSend(v3, "addNavigationRowForViewControllerClass:", objc_opt_class(CurrentURLsDebugController));
  v5 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Active Tile Group"), &stru_1011DDED8);
  v6 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Update Resource Manifest"), &stru_1011DDEF8);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1009BA080;
  v8[3] = &unk_1011B7F10;
  v9 = *(id *)(a1 + 32);
  v7 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Resource Filters"), v8);

}

void sub_1009B962C(id a1, MapsDebugValuesViewController *a2)
{
  MapsDebugValuesViewController *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[GEOResourceManifestManager modernManager](GEOResourceManifestManager, "modernManager"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "activeTileGroup"));

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1009B96E0;
  v7[3] = &unk_1011B4BC0;
  v8 = v4;
  v5 = v4;
  v6 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", 0, v7);

}

void sub_1009B96E0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;

  v3 = a2;
  v4 = objc_msgSend(v3, "addReadOnlyRowWithTitle:valueFormat:", CFSTR("Tile Group Id"), CFSTR("%u"), objc_msgSend(*(id *)(a1 + 32), "identifier"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1009B9798;
  v6[3] = &unk_1011B7F10;
  v7 = *(id *)(a1 + 32);
  v5 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Tile Sets"), v6);

}

void sub_1009B9798(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  id v10;
  __CFString *v11;
  id v12;
  _QWORD v13[5];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  v3 = a2;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tileSets"));
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v15;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v15 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)i);
        v10 = objc_msgSend(v9, "style");
        v11 = CFSTR("RASTER_STANDARD");
        switch((int)v10)
        {
          case 0:
            break;
          case 1:
            v11 = CFSTR("VECTOR_STANDARD");
            break;
          case 2:
            v11 = CFSTR("VECTOR_TRAFFIC_SEGMENTS_FOR_RASTER");
            break;
          case 3:
            v11 = CFSTR("VECTOR_TRAFFIC_INCIDENTS_FOR_RASTER");
            break;
          case 4:
            v11 = CFSTR("VECTOR_TRAFFIC_SEGMENTS_AND_INCIDENTS_FOR_RASTER");
            break;
          case 5:
            v11 = CFSTR("RASTER_STANDARD_BACKGROUND");
            break;
          case 6:
            v11 = CFSTR("RASTER_HYBRID");
            break;
          case 7:
            v11 = CFSTR("RASTER_SATELLITE");
            break;
          case 8:
            v11 = CFSTR("RASTER_TERRAIN");
            break;
          case 11:
            v11 = CFSTR("VECTOR_BUILDINGS");
            break;
          case 12:
            v11 = CFSTR("VECTOR_TRAFFIC");
            break;
          case 13:
            v11 = CFSTR("VECTOR_POI");
            break;
          case 14:
            v11 = CFSTR("SPUTNIK_METADATA");
            break;
          case 15:
            v11 = CFSTR("SPUTNIK_C3M");
            break;
          case 16:
            v11 = CFSTR("SPUTNIK_DSM");
            break;
          case 17:
            v11 = CFSTR("SPUTNIK_DSM_GLOBAL");
            break;
          case 18:
            v11 = CFSTR("VECTOR_REALISTIC");
            break;
          case 19:
            v11 = CFSTR("VECTOR_LEGACY_REALISTIC");
            break;
          case 20:
            v11 = CFSTR("VECTOR_ROADS");
            break;
          case 21:
            v11 = CFSTR("RASTER_VEGETATION");
            break;
          case 22:
            v11 = CFSTR("VECTOR_TRAFFIC_SKELETON");
            break;
          case 23:
            v11 = CFSTR("RASTER_COASTLINE_MASK");
            break;
          case 24:
            v11 = CFSTR("RASTER_HILLSHADE");
            break;
          case 25:
            v11 = CFSTR("VECTOR_TRAFFIC_WITH_GREEN");
            break;
          case 26:
            v11 = CFSTR("VECTOR_TRAFFIC_STATIC");
            break;
          case 27:
            v11 = CFSTR("RASTER_COASTLINE_DROP_MASK");
            break;
          case 28:
            v11 = CFSTR("VECTOR_TRAFFIC_SKELETON_WITH_HISTORICAL");
            break;
          case 29:
            v11 = CFSTR("VECTOR_SPEED_PROFILES");
            break;
          case 30:
            v11 = CFSTR("VECTOR_VENUES");
            break;
          case 31:
            v11 = CFSTR("RASTER_DOWN_SAMPLED");
            break;
          case 32:
            v11 = CFSTR("RASTER_COLOR_BALANCED");
            break;
          case 33:
            v11 = CFSTR("RASTER_SATELLITE_NIGHT");
            break;
          case 34:
            v11 = CFSTR("SPUTNIK_VECTOR_BORDER");
            break;
          case 35:
            v11 = CFSTR("RASTER_SATELLITE_DIGITIZE");
            break;
          case 36:
            v11 = CFSTR("RASTER_HILLSHADE_PARKS");
            break;
          case 37:
            v11 = CFSTR("VECTOR_TRANSIT");
            break;
          case 38:
            v11 = CFSTR("RASTER_STANDARD_BASE");
            break;
          case 39:
            v11 = CFSTR("RASTER_STANDARD_LABELS");
            break;
          case 40:
            v11 = CFSTR("RASTER_HYBRID_ROADS");
            break;
          case 41:
            v11 = CFSTR("RASTER_HYBRID_LABELS");
            break;
          case 42:
            v11 = CFSTR("FLYOVER_C3M_MESH");
            break;
          case 43:
            v11 = CFSTR("FLYOVER_C3M_JPEG_TEXTURE");
            break;
          case 44:
            v11 = CFSTR("FLYOVER_C3M_ASTC_TEXTURE");
            break;
          case 45:
            v11 = CFSTR("RASTER_SATELLITE_ASTC");
            break;
          case 46:
            v11 = CFSTR("RASTER_HYBRID_ROADS_AND_LABELS");
            break;
          case 47:
            v11 = CFSTR("VECTOR_TRANSIT_SELECTION");
            break;
          case 48:
            v11 = CFSTR("VECTOR_COVERAGE");
            break;
          case 52:
            v11 = CFSTR("FLYOVER_METADATA");
            break;
          case 53:
            v11 = CFSTR("VECTOR_ROAD_NETWORK");
            break;
          case 54:
            v11 = CFSTR("VECTOR_LAND_COVER");
            break;
          case 55:
            v11 = CFSTR("VECTOR_DEBUG");
            break;
          case 56:
            v11 = CFSTR("VECTOR_STREET_POI");
            break;
          case 57:
            v11 = CFSTR("MUNIN_METADATA");
            break;
          case 58:
            v11 = CFSTR("VECTOR_SPR_MERCATOR");
            break;
          case 59:
            v11 = CFSTR("VECTOR_SPR_MODELS");
            break;
          case 60:
            v11 = CFSTR("VECTOR_SPR_MATERIALS");
            break;
          case 61:
            v11 = CFSTR("VECTOR_SPR_METADATA");
            break;
          case 62:
            v11 = CFSTR("VECTOR_TRACKS");
            break;
          case 63:
            v11 = CFSTR("VECTOR_RESERVED_2");
            break;
          case 64:
            v11 = CFSTR("VECTOR_STREET_LANDMARKS");
            break;
          case 65:
            v11 = CFSTR("COARSE_LOCATION_POLYGONS");
            break;
          case 66:
            v11 = CFSTR("VECTOR_SPR_ROADS");
            break;
          case 67:
            v11 = CFSTR("VECTOR_SPR_STANDARD");
            break;
          case 68:
            v11 = CFSTR("VECTOR_POI_V2");
            break;
          case 69:
            v11 = CFSTR("VECTOR_POLYGON_SELECTION");
            break;
          case 70:
            v11 = CFSTR("VL_METADATA");
            break;
          case 71:
            v11 = CFSTR("VL_DATA");
            break;
          case 72:
            v11 = CFSTR("PROACTIVE_APP_CLIP");
            break;
          case 73:
            v11 = CFSTR("VECTOR_BUILDINGS_V2");
            break;
          case 74:
            v11 = CFSTR("POI_BUSYNESS");
            break;
          case 75:
            v11 = CFSTR("POI_DP_BUSYNESS");
            break;
          case 76:
            v11 = CFSTR("SMART_INTERFACE_SELECTION");
            break;
          case 77:
            v11 = CFSTR("VECTOR_ASSETS");
            break;
          case 78:
            v11 = CFSTR("SPR_ASSET_METADATA");
            break;
          case 79:
            v11 = CFSTR("VECTOR_SPR_POLAR");
            break;
          case 80:
            v11 = CFSTR("SMART_DATA_MODE");
            break;
          case 81:
            v11 = CFSTR("CELLULAR_PERFORMANCE_SCORE");
            break;
          case 82:
            v11 = CFSTR("VECTOR_SPR_MODELS_OCCLUSION");
            break;
          case 83:
            v11 = CFSTR("VECTOR_TOPOGRAPHIC");
            break;
          case 84:
            v11 = CFSTR("VECTOR_POI_V2_UPDATE");
            break;
          case 85:
            v11 = CFSTR("VECTOR_LIVE_DATA_UPDATES");
            break;
          case 86:
            v11 = CFSTR("VECTOR_TRAFFIC_V2");
            break;
          case 87:
            v11 = CFSTR("VECTOR_ROAD_SELECTION");
            break;
          case 88:
            v11 = CFSTR("VECTOR_REGION_METADATA");
            break;
          case 89:
            v11 = CFSTR("RAY_TRACING");
            break;
          case 90:
            v11 = CFSTR("VECTOR_CONTOURS");
            break;
          case 91:
            v11 = CFSTR("RASTER_SATELLITE_POLAR");
            break;
          case 92:
            v11 = CFSTR("VMAP4_ELEVATION");
            break;
          case 93:
            v11 = CFSTR("VMAP4_ELEVATION_POLAR");
            break;
          case 94:
            v11 = CFSTR("CELLULAR_COVERAGE_PLMN");
            break;
          case 95:
            v11 = CFSTR("RASTER_SATELLITE_POLAR_NIGHT");
            break;
          case 96:
            v11 = CFSTR("UNUSED_96");
            break;
          case 97:
            v11 = CFSTR("UNUSED_97");
            break;
          case 98:
            v11 = CFSTR("UNUSED_98");
            break;
          case 99:
            v11 = CFSTR("UNUSED_99");
            break;
          case 100:
            v11 = CFSTR("UNUSED_100");
            break;
          case 101:
            v11 = CFSTR("UNUSED_101");
            break;
          case 102:
            v11 = CFSTR("UNUSED_102");
            break;
          case 103:
            v11 = CFSTR("UNUSED_103");
            break;
          case 104:
            v11 = CFSTR("UNUSED_104");
            break;
          case 105:
            v11 = CFSTR("UNUSED_105");
            break;
          case 106:
            v11 = CFSTR("UNUSED_106");
            break;
          case 107:
            v11 = CFSTR("UNUSED_107");
            break;
          case 108:
            v11 = CFSTR("UNUSED_108");
            break;
          case 109:
            v11 = CFSTR("UNUSED_109");
            break;
          case 110:
            v11 = CFSTR("UNUSED_110");
            break;
          case 111:
            v11 = CFSTR("UNUSED_111");
            break;
          case 112:
            v11 = CFSTR("UNUSED_112");
            break;
          case 113:
            v11 = CFSTR("UNUSED_113");
            break;
          case 114:
            v11 = CFSTR("UNUSED_114");
            break;
          case 115:
            v11 = CFSTR("UNUSED_115");
            break;
          case 116:
            v11 = CFSTR("UNUSED_116");
            break;
          case 117:
            v11 = CFSTR("UNUSED_117");
            break;
          case 118:
            v11 = CFSTR("UNUSED_118");
            break;
          case 119:
            v11 = CFSTR("UNUSED_119");
            break;
          default:
            v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), v10));
            break;
        }
        v13[0] = _NSConcreteStackBlock;
        v13[1] = 3221225472;
        v13[2] = sub_1009B9EA4;
        v13[3] = &unk_1011B4BC0;
        v13[4] = v9;
        v12 = objc_msgSend(v3, "addSectionWithTitle:content:", v11, v13);

      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v6);
  }

}

void sub_1009B9EA4(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  id v5;
  id v6;
  __CFString *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  id v15;

  v15 = a2;
  v3 = objc_msgSend(*(id *)(a1 + 32), "size");
  if (v3 >= 3)
    v4 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), v3));
  else
    v4 = off_1011DE6F8[(int)v3];
  v5 = objc_msgSend(v15, "addReadOnlyRowWithTitle:value:", CFSTR("Size"), v4);

  v6 = objc_msgSend(*(id *)(a1 + 32), "scale");
  if (v6 >= 3)
    v7 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), v6));
  else
    v7 = off_1011DE710[(int)v6];
  v8 = objc_msgSend(v15, "addReadOnlyRowWithTitle:value:", CFSTR("Scale"), v7);

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%i"), objc_msgSend(*(id *)(a1 + 32), "version")));
  v10 = objc_msgSend(v15, "addReadOnlyRowWithTitle:value:", CFSTR("Version"), v9);

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "baseURL"));
  v12 = objc_msgSend(v15, "addReadOnlyRowWithTitle:subtitle:", CFSTR("Base URL"), v11);

  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "localizationURL"));
  v14 = objc_msgSend(v15, "addReadOnlyRowWithTitle:subtitle:", CFSTR("Localization URL"), v13);

}

void sub_1009BA048(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[GEOResourceManifestManager modernManager](GEOResourceManifestManager, "modernManager"));
  objc_msgSend(v1, "updateManifest:", 0);

}

void sub_1009BA080(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;

  v5 = a2;
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v5);
  v3 = objc_msgSend(v5, "addSectionWithTitle:content:", CFSTR("Scales"), &stru_1011DDF18);
  v4 = objc_msgSend(v5, "addSectionWithTitle:content:", CFSTR("Scenarios"), &stru_1011DDF78);

}

void sub_1009BA0FC(id a1, MapsDebugTableSection *a2)
{
  MapsDebugTableSection *v2;
  uint64_t v3;
  void *v4;
  int v5;
  __CFString *v6;
  void *v7;
  _QWORD v8[4];
  int v9;
  _QWORD v10[4];
  int v11;
  BOOL v12;

  v2 = a2;
  v3 = 0;
  do
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
    v5 = GEOResourceFilterScaleForScale(objc_msgSend(v4, "scale"));

    if ((v3 + 1) >= 4)
      v6 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), v3 + 1));
    else
      v6 = off_1011DE728[v3];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1009BA254;
    v10[3] = &unk_1011DDF38;
    v12 = (_DWORD)v3 + 1 == v5;
    v11 = v3 + 1;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1009BA2FC;
    v8[3] = &unk_1011DDF58;
    v9 = v3 + 1;
    v7 = (void *)objc_claimAutoreleasedReturnValue(-[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v2, "addSwitchRowWithTitle:get:set:", v6, v10, v8));

    if ((_DWORD)v3 + 1 == v5)
      objc_msgSend(v7, "setEnabled:", 0);

    ++v3;
  }
  while ((_DWORD)v3 != 3);

}

uint64_t sub_1009BA254(uint64_t a1)
{
  _BOOL8 v1;
  void *v3;
  void *v4;
  unint64_t v5;
  unsigned int v6;
  int v7;

  if (*(_BYTE *)(a1 + 36))
    return 1;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[GEOResourceManifestManager modernManager](GEOResourceManifestManager, "modernManager"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "activeTileGroup"));

  if (objc_msgSend(v4, "activeScalesCount"))
  {
    v5 = 0;
    do
    {
      v6 = objc_msgSend(v4, "activeScaleAtIndex:", v5);
      v7 = *(_DWORD *)(a1 + 32);
      v1 = v6 == v7;
      if (v6 == v7)
        break;
      ++v5;
    }
    while (v5 < (unint64_t)objc_msgSend(v4, "activeScalesCount"));
  }
  else
  {
    v1 = 0;
  }

  return v1;
}

void sub_1009BA2FC(uint64_t a1, int a2)
{
  void *v4;
  uint64_t v5;
  id v6;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GEOResourceManifestManager modernManager](GEOResourceManifestManager, "modernManager"));
  v5 = *(unsigned int *)(a1 + 32);
  v6 = v4;
  if (a2)
    objc_msgSend(v4, "activateResourceScale:", v5);
  else
    objc_msgSend(v4, "deactivateResourceScale:", v5);

}

void sub_1009BA350(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](a2, "addSwitchRowWithTitle:get:set:", CFSTR("RESOURCE_FILTER_SCENARIO_CARPLAY"), &stru_1011DDF98, &stru_1011DDFB8);
}

BOOL sub_1009BA388(id a1)
{
  void *v1;
  void *v2;
  unint64_t v3;
  unsigned int v4;
  BOOL v5;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[GEOResourceManifestManager modernManager](GEOResourceManifestManager, "modernManager"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "activeTileGroup"));

  if (objc_msgSend(v2, "activeScenariosCount"))
  {
    v3 = 0;
    do
    {
      v4 = objc_msgSend(v2, "activeScenarioAtIndex:", v3);
      v5 = v4 == 1;
      if (v4 == 1)
        break;
      ++v3;
    }
    while (v3 < (unint64_t)objc_msgSend(v2, "activeScenariosCount"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_1009BA418(id a1, BOOL a2)
{
  _BOOL4 v2;
  void *v3;
  id v4;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[GEOResourceManifestManager modernManager](GEOResourceManifestManager, "modernManager"));
  v4 = v3;
  if (v2)
    objc_msgSend(v3, "activateResourceScenario:", 1);
  else
    objc_msgSend(v3, "deactivateResourceScenario:", 1);

}

void sub_1009BA468(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;

  v3 = a2;
  v4 = objc_msgSend(v3, "addNavigationRowForViewControllerClass:", objc_opt_class(MapsCountryCodeDebugController));
  v5 = objc_msgSend(v3, "addNavigationRowForViewControllerClass:", objc_opt_class(ServiceURLsDebugController));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1009BA5BC;
  v10[3] = &unk_1011AD260;
  objc_copyWeak(&v11, (id *)(a1 + 32));
  v6 = objc_msgSend(v3, "addNavigationRowWithTitle:action:", CFSTR("Test Environments"), v10);
  v7 = objc_msgSend(v3, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Environment in Settings"), CFSTR("ShowEnvironmentInfoInSettings"));
  v8 = objc_msgSend(v3, "addNavigationRowForViewControllerClass:", objc_opt_class(ExperimentsDebugController));
  v9 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("MPTCP"), &stru_1011DDFD8);
  objc_destroyWeak(&v11);

}

void sub_1009BA5A4(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1009BA5BC(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  EnvironmentsViewController *v4;

  v4 = -[EnvironmentsViewController initWithStyle:]([EnvironmentsViewController alloc], "initWithStyle:", 1);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "navigationController"));
  objc_msgSend(v3, "pushViewController:animated:", v4, 1);

}

void sub_1009BA628(id a1, MapsDebugValuesViewController *a2)
{
  id v2;
  id v3;
  MapsDebugValuesViewController *v4;

  v4 = a2;
  v2 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v4, "addSectionWithTitle:content:", CFSTR("Search/AC Mode"), &stru_1011DDFF8);
  v3 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v4, "addSectionWithTitle:content:", CFSTR("Directions Mode"), &stru_1011DE078);

}

void sub_1009BA688(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addCheckmarkRowsGroupForConfigKey:content:get:set:change:](a2, "addCheckmarkRowsGroupForConfigKey:content:get:set:change:", GeoServicesConfig_SearchACMPTCPServiceType[0], GeoServicesConfig_SearchACMPTCPServiceType[1], &stru_1011DE018, &stru_1011DE038, &stru_1011DE058, 0);
}

void sub_1009BA6D0(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  MapsDebugCheckmarkRowsGroup *v6;

  v6 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v6, "addRowWithTitle:value:", CFSTR("Default"), 0);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v6, "addRowWithTitle:value:", CFSTR("Handover"), &off_10126FE98);
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v6, "addRowWithTitle:value:", CFSTR("Interactive"), &off_10126FEB0);
  v5 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v6, "addRowWithTitle:value:", CFSTR("Aggregate"), &off_10126FEC8);

}

id sub_1009BA76C(id a1)
{
  uint64_t Integer;
  void *v2;

  Integer = GEOConfigGetInteger(GeoServicesConfig_SearchACMPTCPServiceType[0], GeoServicesConfig_SearchACMPTCPServiceType[1]);
  if (Integer < 1)
    v2 = 0;
  else
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", Integer));
  return v2;
}

void sub_1009BA7B0(id a1, id a2)
{
  id v2;

  if (a2)
  {
    v2 = objc_msgSend(a2, "integerValue");
    GEOConfigSetInteger(GeoServicesConfig_SearchACMPTCPServiceType[0], GeoServicesConfig_SearchACMPTCPServiceType[1], v2);
  }
  else
  {
    _GEOConfigRemoveValue(GeoServicesConfig_SearchACMPTCPServiceType[0], GeoServicesConfig_SearchACMPTCPServiceType[1]);
  }
}

void sub_1009BA7F0(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addCheckmarkRowsGroupForConfigKey:content:get:set:change:](a2, "addCheckmarkRowsGroupForConfigKey:content:get:set:change:", GeoServicesConfig_DirectionsMPTCPServiceType[0], GeoServicesConfig_DirectionsMPTCPServiceType[1], &stru_1011DE098, &stru_1011DE0B8, &stru_1011DE0D8, 0);
}

void sub_1009BA838(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  MapsDebugCheckmarkRowsGroup *v6;

  v6 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v6, "addRowWithTitle:value:", CFSTR("Default"), 0);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v6, "addRowWithTitle:value:", CFSTR("Handover"), &off_10126FE98);
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v6, "addRowWithTitle:value:", CFSTR("Interactive"), &off_10126FEB0);
  v5 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v6, "addRowWithTitle:value:", CFSTR("Aggregate"), &off_10126FEC8);

}

id sub_1009BA8D4(id a1)
{
  uint64_t Integer;
  void *v2;

  Integer = GEOConfigGetInteger(GeoServicesConfig_DirectionsMPTCPServiceType[0], GeoServicesConfig_DirectionsMPTCPServiceType[1]);
  if (Integer < 1)
    v2 = 0;
  else
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", Integer));
  return v2;
}

void sub_1009BA918(id a1, id a2)
{
  id v2;

  if (a2)
  {
    v2 = objc_msgSend(a2, "integerValue");
    GEOConfigSetInteger(GeoServicesConfig_DirectionsMPTCPServiceType[0], GeoServicesConfig_DirectionsMPTCPServiceType[1], v2);
  }
  else
  {
    _GEOConfigRemoveValue(GeoServicesConfig_DirectionsMPTCPServiceType[0], GeoServicesConfig_DirectionsMPTCPServiceType[1]);
  }
}

void sub_1009BA958(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  MapsDebugTableSection *v4;

  v4 = a2;
  v2 = -[MapsDebugTableSection addCheckmarkRowsGroupWithContent:get:set:](v4, "addCheckmarkRowsGroupWithContent:get:set:", &stru_1011DE118, &stru_1011DE138, &stru_1011DE158);
  v3 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v4, "addButtonRowWithTitle:action:", CFSTR("Send auth push notification"), &stru_1011DE178);

}

void sub_1009BA9C0(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  MapsDebugCheckmarkRowsGroup *v7;

  v7 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v7, "addRowWithTitle:value:", CFSTR("Invalid"), &off_10126FEE0);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v7, "addRowWithTitle:value:", CFSTR("Unknown"), &off_10126FEF8);
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v7, "addRowWithTitle:value:", CFSTR("Bad MAT"), &off_10126FF10);
  v5 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v7, "addRowWithTitle:value:", CFSTR("Bad MRT"), &off_10126FF28);
  v6 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v7, "addRowWithTitle:value:", CFSTR("Bad AC"), &off_10126FF40);

}

id sub_1009BAA80(id a1)
{
  return +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", qword_1014B82D8);
}

void sub_1009BAA94(id a1, id a2)
{
  qword_1014B82D8 = (uint64_t)objc_msgSend(a2, "integerValue");
}

void sub_1009BAAB4(id a1)
{
  +[MapsDebugController debug_withMapsPushDaemon:errorHandler:](MapsDebugController, "debug_withMapsPushDaemon:errorHandler:", &stru_1011DE1B8, &stru_1011DE1D8);
}

void sub_1009BAAD0(id a1, GEOUserNotificationProvider *a2)
{
  -[GEOUserNotificationProvider proxyAuthFailed:](a2, "proxyAuthFailed:", qword_1014B82D8);
}

void sub_1009BAAE0(id a1, NSError *a2)
{
  NSLog(CFSTR("Error communicting with mapspushd: %@"), a2);
}

void sub_1009BAB08(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](a2, "addSwitchRowWithTitle:get:set:", CFSTR("Allow non-EV Certs"), &stru_1011DE218, &stru_1011DE238);
}

BOOL sub_1009BAB40(id a1)
{
  return GEOConfigGetBOOL(GeoServicesConfig_AllowNonEVCerts[0], GeoServicesConfig_AllowNonEVCerts[1]);
}

void sub_1009BAB50(id a1, BOOL a2)
{
  GEOConfigSetBOOL(GeoServicesConfig_AllowNonEVCerts[0], GeoServicesConfig_AllowNonEVCerts[1], a2);
}

void sub_1009BAB64(id a1, MapsDebugTableSection *a2)
{
  MapsDebugTableSection *v2;
  id v3;
  id v4;
  _QWORD v5[4];
  __CFString *v6;
  _QWORD v7[4];
  __CFString *v8;

  v2 = a2;
  v3 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v2, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Dispatcher Debug Overlay"), 0, 0, &stru_1011DE278, &stru_1011DE298);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1009BACAC;
  v7[3] = &unk_1011B4F08;
  v8 = CFSTR("?internalmodes.enable=");
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1009BAD14;
  v5[3] = &unk_1011AE420;
  v6 = CFSTR("?internalmodes.enable=");
  v4 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v2, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Routing Service Internal Modes"), &stru_1011EB268, 3, v7, v5);

}

NSString *__cdecl sub_1009BAC50(id a1)
{
  return (NSString *)GEOConfigGetString(GeoServicesConfig_PlaceDataDebugAPI[0], GeoServicesConfig_PlaceDataDebugAPI[1]);
}

void sub_1009BAC60(id a1, NSString *a2)
{
  NSUInteger v2;
  uint64_t v3;
  NSString *v4;

  v4 = a2;
  v2 = -[NSString length](v4, "length");
  v3 = GeoServicesConfig_PlaceDataDebugAPI[1];
  if (v2)
    GEOConfigSetString(GeoServicesConfig_PlaceDataDebugAPI[0], v3, v4);
  else
    _GEOConfigRemoveValue(GeoServicesConfig_PlaceDataDebugAPI[0], v3);

}

id sub_1009BACAC(uint64_t a1)
{
  uint64_t String;
  void *v3;
  uint64_t v4;

  String = GEOConfigGetString(GeoServicesConfig_ExperimentalDirectionsService[0], GeoServicesConfig_ExperimentalDirectionsService[1]);
  v3 = (void *)objc_claimAutoreleasedReturnValue(String);
  if (objc_msgSend(v3, "hasPrefix:", *(_QWORD *)(a1 + 32)))
  {
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "substringFromIndex:", objc_msgSend(*(id *)(a1 + 32), "length")));

    v3 = (void *)v4;
  }
  return v3;
}

void sub_1009BAD14(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if (objc_msgSend(v4, "length"))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stringByAppendingString:", v4));
    GEOConfigSetString(GeoServicesConfig_ExperimentalDirectionsService[0], GeoServicesConfig_ExperimentalDirectionsService[1], v3);

  }
  else
  {
    _GEOConfigRemoveValue(GeoServicesConfig_ExperimentalDirectionsService[0], GeoServicesConfig_ExperimentalDirectionsService[1]);
  }

}

void sub_1009BAD8C(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addCheckmarkRowsGroupForConfigKey:content:](a2, "addCheckmarkRowsGroupForConfigKey:content:", MapsConfig_ShowEnvironmentNameRule, off_1014B2DA8, &stru_1011DE2D8);
}

void sub_1009BADC0(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugCheckmarkRowsGroup *v5;

  v5 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("Never"), &off_10126FEF8);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("When non-default"), &off_10126FF10);
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("Always"), &off_10126FF28);

}

void sub_1009BAEB8(id a1, MapsDebugTableSection *a2)
{
  id v2;
  MapsDebugTableSection *v3;

  v3 = a2;
  v2 = -[MapsDebugTableSection addNavigationRowForViewControllerClass:](v3, "addNavigationRowForViewControllerClass:", objc_opt_class(WatchDebugController));

}

void sub_1009BAFA4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1009BAFC0(uint64_t a1)
{
  unsigned __int8 v2;
  id v3;
  void *v4;
  void *v5;
  __CFString *v6;
  void *v7;
  void *v8;
  id WeakRetained;
  uint64_t v10;
  id v11;

  v10 = 0;
  v11 = 0;
  v2 = +[MapsRadarAttachmentProviderTask getCurrentTileStateSnapshotWithDirectoryURL:debugTreeURLs:mapsActivityDataPath:error:](MapsRadarAttachmentProviderTask, "getCurrentTileStateSnapshotWithDirectoryURL:debugTreeURLs:mapsActivityDataPath:error:", &v11, 0, 0, &v10);
  v3 = v11;
  v4 = v3;
  if ((v2 & 1) != 0)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "path"));
    NSLog(CFSTR("Logged tile state to %@"), v5);
    v6 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Logged Tile State to %@"), v5));

  }
  else
  {
    NSLog(CFSTR("State snapshot creation failed"));
    v6 = CFSTR("State snapshot creation failed with Error");
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", CFSTR("State Snapshot"), v6, 1));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", CFSTR("OK"), 0, &stru_1011DE340));
  objc_msgSend(v7, "addAction:", v8);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "presentViewController:animated:completion:", v7, 1, 0);

}

void sub_1009BB1D4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1009BB1F0(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  char *v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  NSString *v24;
  void *v25;
  void *v26;
  void *v27;
  NSString *v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  MapsDebugFileExportController *v33;
  void *v34;
  id v36;
  uint64_t v37;
  _QWORD v38[4];
  id v39;
  id v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[128];

  v1 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v4 = objc_loadWeakRetained(v1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "allVisibleMapViewsForDebugController:", v4));

  v6 = objc_alloc_init((Class)NSMutableString);
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v7 = v5;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v41, v45, 16);
  if (v8)
  {
    v9 = v8;
    v37 = 0;
    v10 = *(_QWORD *)v42;
    do
    {
      v11 = 0;
      v36 = v9;
      do
      {
        if (*(_QWORD *)v42 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * (_QWORD)v11);
        if ((unint64_t)objc_msgSend(v7, "count") >= 2)
        {
          v13 = v10;
          v14 = v7;
          v15 = (char *)v11 + v37;
          v16 = v6;
          v17 = v6;
          v18 = v12;
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "window"));
          objc_msgSend(v19, "frame");
          if (v19)
          {
            v24 = NSStringFromCGRect(*(CGRect *)&v20);
            v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
            objc_msgSend(v17, "appendFormat:", CFSTR(" ===== Map view %@ (#%lu, in window %p, at %@)"), v18, v15, v19, v25);

          }
          else
          {
            objc_msgSend(v17, "appendFormat:", CFSTR(" ===== Map view %@ (#%lu, not in a window)"), v18, v15);
          }

          v6 = v16;
          v7 = v14;
          v10 = v13;
          v9 = v36;
        }
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "_mapLayer"));
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "detailedDescription"));
        objc_msgSend(v6, "appendString:", v27);

        v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v41, v45, 16);
      v37 += (uint64_t)v11;
    }
    while (v9);
  }

  v28 = NSTemporaryDirectory();
  v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "stringByAppendingPathComponent:", CFSTR("Diagnostics.txt")));
  v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", v30));

  v40 = 0;
  objc_msgSend(v6, "writeToURL:atomically:encoding:error:", v31, 1, 4, &v40);
  v32 = v40;
  if (!v32)
  {
    v33 = -[MapsDebugFileExportController initWithFileAtURL:presentingViewController:]([MapsDebugFileExportController alloc], "initWithFileAtURL:presentingViewController:", v31, *(_QWORD *)(a1 + 32));
    v38[0] = _NSConcreteStackBlock;
    v38[1] = 3221225472;
    v38[2] = sub_1009BB540;
    v38[3] = &unk_1011AC860;
    v39 = v31;
    -[MapsDebugFileExportController startWithCompletion:](v33, "startWithCompletion:", v38);

  }
  v34 = (void *)objc_claimAutoreleasedReturnValue(+[UIPasteboard generalPasteboard](UIPasteboard, "generalPasteboard"));
  objc_msgSend(v34, "setString:", v6);

  NSLog(CFSTR("Diagnostic String: %@"), v6);
}

void sub_1009BB540(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  objc_msgSend(v2, "removeItemAtURL:error:", *(_QWORD *)(a1 + 32), 0);

}

void sub_1009BB5B8(id a1, MapsDebugValuesViewController *a2)
{
  id v2;
  id v3;
  MapsDebugValuesViewController *v4;

  v4 = a2;
  -[MapsDebugValuesViewController setTitle:](v4, "setTitle:", CFSTR("Tap-To-Radar"));
  v2 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v4, "addSectionWithTitle:content:", CFSTR("Allow Maps Attachments"), &stru_1011DE380);
  v3 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v4, "addSectionWithTitle:content:", CFSTR("Log archive type"), &stru_1011DE3A0);

}

void sub_1009BB628(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  MapsDebugTableSection *v14;

  v14 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v14, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Floating control button"), MapsConfig_EnableTapToRadarFloatingControlButton, off_1014B4B48);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v14, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("UIViewController descriptions attachments"), MapsConfig_EnableTapToRadarUIViewControllerDescriptionsAttachmentProvider, off_1014B4B58);
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v14, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("State attachments"), MapsConfig_EnableTapToRadarStateAttachmentProvider, off_1014B4B68);
  v5 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v14, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("MSg attachments"), MapsConfig_EnableTapToRadarMSgAttachmentProvider, off_1014B4B78);
  v6 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v14, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("MSP attachments"), MapsConfig_EnableTapToRadarMSPAttachmentProvider, off_1014B4B88);
  v7 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v14, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("NSUserDefaults attachments"), MapsConfig_EnableTapToRadarUserDefaultsAttachmentProvider, off_1014B4B98);
  v8 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v14, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Screenshot attachment"), MapsConfig_EnableTapToRadarScreenshotAttachmentProvider, off_1014B4BB8);
  v9 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v14, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Debug view frames screenshot attachment"), MapsConfig_EnableTapToRadarDebugViewFramesScreenshotAttachmentProvider, off_1014B4BC8);
  v10 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v14, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Debug layout guides screenshot attachment"), MapsConfig_EnableTapToRadarDebugChromeLayoutGuidesScreenshotAttachmentProvider, off_1014B4EB8);
  v11 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v14, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Inactive reasons screenshot attachment"), MapsConfig_EnableTapToRadarDebugChromeInactiveReasonsScreenshotAttachmentProvider, off_1014B50C8);
  v12 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v14, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("VKMapView detailed description attachment"), MapsConfig_EnableTapToRadarVKMapViewDetailedDescriptionAttachmentProvider, off_1014B4BA8);
  v13 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v14, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Window view hierarchy attachments"), MapsConfig_EnableTapToRadarViewHierarchyAttachmentProvider, off_1014B50B8);

}

void sub_1009BB7F8(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](a2, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Full log archive"), MapsConfig_EnableTapToRadarLogArchiveFull, off_1014B4BD8);
}

void sub_1009BB924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1009BB948(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  _QWORD v3[4];
  id v4;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1009BB9F0;
  v3[3] = &unk_1011AD260;
  objc_copyWeak(&v4, v1);
  objc_msgSend(WeakRetained, "dismissViewControllerAnimated:completion:", 1, v3);

  objc_destroyWeak(&v4);
}

void sub_1009BB9DC(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1009BB9F0(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  void *v5;
  objc_class *v6;
  NSString *v7;
  void *v8;
  void *v9;
  void *v10;
  __CFString *v11;
  void *v12;
  uint8_t buf[4];
  __CFString *v14;

  v2 = sub_1004319DC();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = objc_loadWeakRetained((id *)(a1 + 32));
    v5 = v4;
    if (!v4)
    {
      v11 = CFSTR("<nil>");
      goto LABEL_10;
    }
    v6 = (objc_class *)objc_opt_class(v4);
    v7 = NSStringFromClass(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if ((objc_opt_respondsToSelector(v5, "accessibilityIdentifier") & 1) != 0)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "performSelector:", "accessibilityIdentifier"));
      v10 = v9;
      if (v9 && !objc_msgSend(v9, "isEqualToString:", v8))
      {
        v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v8, v5, v10));

        goto LABEL_8;
      }

    }
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v8, v5));
LABEL_8:

LABEL_10:
    *(_DWORD *)buf = 138543362;
    v14 = v11;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[%{public}@] Launching TTR from debug panel", buf, 0xCu);

  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[MapsRadarController sharedInstance](MapsRadarController, "sharedInstance"));
  objc_msgSend(v12, "launchTTR");

}

void sub_1009BBBC4(id a1, MapsDebugValuesViewController *a2)
{
  id v2;
  MapsDebugValuesViewController *v3;

  v3 = a2;
  -[MapsDebugValuesViewController setTitle:](v3, "setTitle:", CFSTR("Logging"));
  v2 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v3, "addSectionWithTitle:content:", CFSTR("Log types enabled"), &stru_1011DE3E0);

}

void sub_1009BBC14(id a1, MapsDebugTableSection *a2)
{
  id v2;
  NSObject *v3;
  _BOOL4 v4;
  const __CFString *v5;
  id v6;
  id v7;
  NSObject *v8;
  _BOOL4 v9;
  const __CFString *v10;
  id v11;
  id v12;
  NSObject *v13;
  _BOOL4 v14;
  const __CFString *v15;
  id v16;
  id v17;
  NSObject *v18;
  _BOOL4 v19;
  const __CFString *v20;
  id v21;
  id v22;
  NSObject *v23;
  _BOOL4 v24;
  const __CFString *v25;
  id v26;
  MapsDebugTableSection *v27;

  v27 = a2;
  v2 = sub_1004319DC();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG);

  if (v4)
    v5 = CFSTR("YES");
  else
    v5 = CFSTR("NO");
  v6 = -[MapsDebugTableSection addReadOnlyRowWithTitle:value:](v27, "addReadOnlyRowWithTitle:value:", CFSTR("DEBUG"), v5);
  v7 = sub_1004319DC();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);

  if (v9)
    v10 = CFSTR("YES");
  else
    v10 = CFSTR("NO");
  v11 = -[MapsDebugTableSection addReadOnlyRowWithTitle:value:](v27, "addReadOnlyRowWithTitle:value:", CFSTR("INFO"), v10);
  v12 = sub_1004319DC();
  v13 = objc_claimAutoreleasedReturnValue(v12);
  v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);

  if (v14)
    v15 = CFSTR("YES");
  else
    v15 = CFSTR("NO");
  v16 = -[MapsDebugTableSection addReadOnlyRowWithTitle:value:](v27, "addReadOnlyRowWithTitle:value:", CFSTR("DEFAULT"), v15);
  v17 = sub_1004319DC();
  v18 = objc_claimAutoreleasedReturnValue(v17);
  v19 = os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);

  if (v19)
    v20 = CFSTR("YES");
  else
    v20 = CFSTR("NO");
  v21 = -[MapsDebugTableSection addReadOnlyRowWithTitle:value:](v27, "addReadOnlyRowWithTitle:value:", CFSTR("ERROR"), v20);
  v22 = sub_1004319DC();
  v23 = objc_claimAutoreleasedReturnValue(v22);
  v24 = os_log_type_enabled(v23, OS_LOG_TYPE_FAULT);

  if (v24)
    v25 = CFSTR("YES");
  else
    v25 = CFSTR("NO");
  v26 = -[MapsDebugTableSection addReadOnlyRowWithTitle:value:](v27, "addReadOnlyRowWithTitle:value:", CFSTR("FAULT"), v25);

}

void sub_1009BBDE0(id a1, MapsDebugTableSection *a2)
{
  MapsDebugTableSection *v2;
  MapsDebugTableRow *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  MapsDebugTableRow *v8;

  v2 = a2;
  v3 = objc_alloc_init(MapsDebugTableRow);
  -[MapsDebugTableRow setTitle:](v3, "setTitle:", CFSTR("App bundle path:"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "bundlePath"));
  -[MapsDebugTableRow setSubtitle:](v3, "setSubtitle:", v5);

  -[MapsDebugTableRow setConfigureBlock:](v3, "setConfigureBlock:", &stru_1011DE440);
  -[MapsDebugTableSection addRow:](v2, "addRow:", v3);
  v8 = objc_alloc_init(MapsDebugTableRow);

  -[MapsDebugTableRow setTitle:](v8, "setTitle:", CFSTR("Data bundle path:"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[MSPMapsPaths pathsAtLocation:](MSPMapsPaths, "pathsAtLocation:", 0));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "homeDirectory"));
  -[MapsDebugTableRow setSubtitle:](v8, "setSubtitle:", v7);

  -[MapsDebugTableRow setConfigureBlock:](v8, "setConfigureBlock:", &stru_1011DE460);
  -[MapsDebugTableSection addRow:](v2, "addRow:", v8);

}

void sub_1009BBF04(id a1, UITableViewCell *a2, UIListContentConfiguration *a3)
{
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(-[UIListContentConfiguration secondaryTextProperties](a3, "secondaryTextProperties"));
  objc_msgSend(v3, "setNumberOfLines:", 4);

}

void sub_1009BBF38(id a1, UITableViewCell *a2, UIListContentConfiguration *a3)
{
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(-[UIListContentConfiguration secondaryTextProperties](a3, "secondaryTextProperties"));
  objc_msgSend(v3, "setNumberOfLines:", 4);

}

void sub_1009BBF6C(id a1, MapsDebugTableSection *a2)
{
  MapsDebugTableSection *v2;
  _QWORD v3[4];
  MapsDebugTableSection *v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1009BBFD4;
  v3[3] = &unk_1011DE4C8;
  v4 = a2;
  v2 = v4;
  sub_1003303F4(v3);

}

void sub_1009BBFD4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  MapsDebugTableRow *v8;
  void *v9;
  void *v10;
  void *v11;
  __CFString *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  __CFString *v16;
  void *v17;
  void *v18;
  id v19;

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithIdentifier:](NSBundle, "bundleWithIdentifier:", v5));
  if (!v7)
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithPath:](NSBundle, "bundleWithPath:", v6));
  v8 = objc_alloc_init(MapsDebugTableRow);
  v19 = v5;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "infoDictionary"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("CFBundleVersion")));
  v11 = v10;
  if (v10)
  {
    v12 = v10;
  }
  else
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "infoDictionary"));
    v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("CFBundleShortVersionString")));
    v15 = (void *)v14;
    v16 = CFSTR("???");
    if (!v7)
      v16 = CFSTR("Not Found");
    if (v14)
      v16 = (__CFString *)v14;
    v12 = v16;

  }
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ - %@"), v19, v12));

  -[MapsDebugTableRow setTitle:](v8, "setTitle:", v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "bundlePath"));
  -[MapsDebugTableRow setSubtitle:](v8, "setSubtitle:", v18);

  -[MapsDebugTableRow setConfigureBlock:](v8, "setConfigureBlock:", &stru_1011DE4A0);
  objc_msgSend(*(id *)(a1 + 32), "addRow:", v8);

}

void sub_1009BC190(id a1, UITableViewCell *a2, UIListContentConfiguration *a3)
{
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(-[UIListContentConfiguration secondaryTextProperties](a3, "secondaryTextProperties"));
  objc_msgSend(v3, "setNumberOfLines:", 4);

}

void sub_1009BC3B4(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 72));
  _Unwind_Resume(a1);
}

void sub_1009BC404(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  void **v10;
  uint64_t v11;
  void (*v12)(uint64_t, void *);
  void *v13;
  id v14;
  id v15;

  v3 = a2;
  v4 = objc_msgSend(v3, "addNavigationRowForViewControllerClass:", objc_opt_class(MapsApplicationDebugController));
  v5 = objc_msgSend(v3, "addNavigationRowForViewControllerClass:", objc_opt_class(MapKitDebugController));
  v6 = objc_msgSend(v3, "addNavigationRowForViewControllerClass:", objc_opt_class(NavigationSettingsController));
  v10 = _NSConcreteStackBlock;
  v11 = 3221225472;
  v12 = sub_1009BC54C;
  v13 = &unk_1011BF940;
  v14 = *(id *)(a1 + 32);
  objc_copyWeak(&v15, (id *)(a1 + 40));
  v7 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("GeoServices"), &v10);
  v8 = objc_opt_class(MapsMapDisplayDebugController);
  v9 = objc_msgSend(v3, "addNavigationRowForViewControllerClass:", v8, v10, v11, v12, v13);
  objc_destroyWeak(&v15);

}

void sub_1009BC534(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1009BC54C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  unsigned int v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void **v12;
  uint64_t v13;
  void (*v14)(uint64_t, void *);
  void *v15;
  id v16;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);
  objc_msgSend(v3, "setTitle:", CFSTR("GeoSvc"));
  v12 = _NSConcreteStackBlock;
  v13 = 3221225472;
  v14 = sub_1009BC6D4;
  v15 = &unk_1011AEAC8;
  objc_copyWeak(&v16, (id *)(a1 + 40));
  v4 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("GeoServices"), &v12);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[GEOPlatform sharedPlatform](GEOPlatform, "sharedPlatform"));
  v6 = objc_msgSend(v5, "isInternalInstall");

  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Route")));
    v8 = objc_msgSend(v3, "addSectionWithTitle:content:", v7, &stru_1011DE4E8);

    v9 = (void *)objc_claimAutoreleasedReturnValue(+[GEOAddressObject libraryVersion](GEOAddressObject, "libraryVersion"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("AddressObject Library (ver. %@)"), v9, v12, v13, v14, v15));
    v11 = objc_msgSend(v3, "addSectionWithTitle:content:", v10, &stru_1011DE548);

  }
  objc_destroyWeak(&v16);

}

void sub_1009BC6BC(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1009BC6D4(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_addGeoServicesSettingsToSection:", v3);

}

void sub_1009BC71C(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  MapsDebugTableSection *v4;

  v4 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v4, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enable Lane Flowlines"), MapsConfig_EnableLaneFlowline, off_1014B3D68);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v4, "addSwitchRowWithTitle:get:set:", CFSTR("Hide Invalid Route Elevation"), &stru_1011DE508, &stru_1011DE528);

}

BOOL sub_1009BC788(id a1)
{
  return GEOConfigGetBOOL(GeoServicesConfig_HideInvalidRouteElevation[0], GeoServicesConfig_HideInvalidRouteElevation[1]);
}

void sub_1009BC798(id a1, BOOL a2)
{
  GEOConfigSetBOOL(GeoServicesConfig_HideInvalidRouteElevation[0], GeoServicesConfig_HideInvalidRouteElevation[1], a2);
}

void sub_1009BC7AC(id a1, MapsDebugTableSection *a2)
{
  MapsDebugTableSection *v2;
  id v3;
  id v4;
  id v5;

  v2 = a2;
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v2, "addSwitchRowWithTitle:get:set:", CFSTR("Enable Debug-level logging"), &stru_1011DE568, &stru_1011DE588);
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v2, "addSwitchRowWithTitle:get:set:", CFSTR("Mark AddressObject Strings"), &stru_1011DE5A8, &stru_1011DE5C8);
  v5 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("For marking strings: \n- ‘<>’ - created through fromContact \n-  ‘{}’  - created through fromLegacy \n- ‘><’ - created through InternalAddressObjectFactory::create() \n-  '!!'  - created during construction or modification of a VenueInfo object \n-  ‘()’  - returned from legacy accessors (getName, getAddress) \n-  ‘[]’  - returned from formatters; e.g. getFullAddress, getShortAddress, etc.")));
  -[MapsDebugTableSection setFooter:](v2, "setFooter:", v5);

}

BOOL sub_1009BC850(id a1)
{
  return +[GEOAddressObject isLoggingDebug](GEOAddressObject, "isLoggingDebug");
}

void sub_1009BC85C(id a1, BOOL a2)
{
  +[GEOAddressObject setLoggingDebug:](GEOAddressObject, "setLoggingDebug:", a2);
}

BOOL sub_1009BC86C(id a1)
{
  return +[GEOAddressObject isMarkingMMStrings](GEOAddressObject, "isMarkingMMStrings");
}

void sub_1009BC878(id a1, BOOL a2)
{
  +[GEOAddressObject markMMStrings:](GEOAddressObject, "markMMStrings:", a2);
}

void sub_1009BC888(id *a1, void *a2)
{
  id WeakRetained;
  id v4;
  id v5;
  id v6;

  v6 = a2;
  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  objc_msgSend(WeakRetained, "_addFeatureFlagsSettingsToSection:", v6);

  v4 = objc_loadWeakRetained(a1);
  objc_msgSend(v4, "_addServerConfigSettingsToSection:", v6);

  v5 = objc_msgSend(v6, "addNavigationRowForViewControllerClass:", objc_opt_class(GEOConfigDebugController));
}

void sub_1009BC90C(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;
  id v5;
  id v6;
  id v7;
  id v8;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_addRadarEntriesToSection:", v3);

  v5 = objc_loadWeakRetained(v2);
  objc_msgSend(v5, "_addStateSnapshotToSection:", v3);

  v6 = objc_loadWeakRetained(v2);
  objc_msgSend(v6, "_addCopyDiagnosticsToSection:", v3);

  v7 = objc_loadWeakRetained(v2);
  objc_msgSend(v7, "_addTapToRadarAllowAttachmentsOptionToSection:", v3);

  v8 = objc_loadWeakRetained(v2);
  objc_msgSend(v8, "_addLoggingEntriesToSection:", v3);

}

id sub_1009BCDF4(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[GEOMapsAuthServiceHelper sharedAuthHelper](GEOMapsAuthServiceHelper, "sharedAuthHelper"));
  objc_msgSend(v2, "addMapsAuthDidFinishObserver:forRequestType:", *(_QWORD *)(a1 + 32), GEOMapsAuthACToken);

  return +[MapsAppleConnectAuthViewController presentAppleConnectAuthControllerFrom:withProxyURL:](MapsAppleConnectAuthViewController, "presentAppleConnectAuthControllerFrom:withProxyURL:", *(_QWORD *)(a1 + 32), 0);
}

id sub_1009BCE4C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "presentViewController:animated:completion:", *(_QWORD *)(a1 + 40), 1, 0);
}

void sub_1009BD0E8(id a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = objc_msgSend(objc_alloc((Class)NSXPCConnection), "initWithMachServiceName:options:", CFSTR("com.apple.Maps.mapspushd.geoservices"), 0);
  v2 = (void *)qword_1014D3BD8;
  qword_1014D3BD8 = (uint64_t)v1;

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCInterface geo_MapsNotificationDaemonFromGeodInterface](NSXPCInterface, "geo_MapsNotificationDaemonFromGeodInterface"));
  objc_msgSend((id)qword_1014D3BD8, "setRemoteObjectInterface:", v3);

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___NSObject));
  objc_msgSend((id)qword_1014D3BD8, "setExportedInterface:", v4);

  objc_msgSend((id)qword_1014D3BD8, "setExportedObject:", objc_opt_class(NSObject));
  objc_msgSend((id)qword_1014D3BD8, "resume");
}

void sub_1009BD260(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  NSLog(CFSTR("Error sending message to mapspushd: %@"), v3);
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_1009BD91C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1009BD938(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "updateWaypointsList");

}

void sub_1009BDB2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1009BDB48(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "updateRefinements");

}

void sub_1009BEC10(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  objc_class *v10;
  NSString *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;

  v17 = a2;
  v5 = a3;
  if (v5)
  {
    v6 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0
      || (v7 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v5, v7) & 1) != 0))
    {
      v8 = v5;
LABEL_11:
      v15 = *(void **)(a1 + 32);
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: %@"), v17, v8));
      objc_msgSend(v15, "addObject:", v16);

      goto LABEL_12;
    }
    v9 = v5;
    v10 = (objc_class *)objc_opt_class(v9);
    v11 = NSStringFromClass(v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    if ((objc_opt_respondsToSelector(v9, "accessibilityIdentifier") & 1) != 0)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "performSelector:", "accessibilityIdentifier"));
      v14 = v13;
      if (v13 && !objc_msgSend(v13, "isEqualToString:", v12))
      {
        v8 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v12, v9, v14));

        goto LABEL_10;
      }

    }
    v8 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v12, v9));
LABEL_10:

    goto LABEL_11;
  }
LABEL_12:

}

void sub_1009BED90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v4;

  if (a3)
  {
    v3 = *(void **)(a1 + 32);
    v4 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: %@"), a2, a3));
    objc_msgSend(v3, "addObject:", v4);

  }
}

uint64_t sub_1009BF684(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1009BF694(uint64_t a1)
{

}

void sub_1009BF69C(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "copy");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1009BF830(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;

}

void sub_1009BF848(uint64_t a1, void *a2)
{
  id v3;
  SearchDotPlacePersonalizedItem *v4;

  v3 = a2;
  v4 = -[SearchDotPlacePersonalizedItem initWithSearchDotPlace:]([SearchDotPlacePersonalizedItem alloc], "initWithSearchDotPlace:", v3);

  -[SearchDotPlacePersonalizedItem setSource:](v4, "setSource:", *(_QWORD *)(a1 + 32));
  -[SearchDotPlacePersonalizedItem setShouldBeHiddenFromMap:](v4, "setShouldBeHiddenFromMap:", objc_msgSend(*(id *)(a1 + 32), "shouldHideSearchDotPlaces"));
  objc_msgSend(*(id *)(a1 + 40), "addObject:", v4);

}

void sub_1009BF8CC(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = objc_msgSend(*(id *)(a1 + 40), "copy");
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1009C07DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1009C07F8(uint64_t a1)
{
  _QWORD *WeakRetained;
  _QWORD *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_updateArrivalOverlaysWithRoute:", WeakRetained[3]);
    WeakRetained = v2;
  }

}

RoutePlanningSession *sub_1009C26BC(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  void *j;
  id v25;
  void *v26;
  RideBookingPlanningSession *v27;
  id v28;
  RoutePlanningSession *v29;
  id v30;
  id v31;
  id v32;
  id v33;
  void *v34;
  void *v35;
  DrivePreferences *v36;
  void *v37;
  void *v38;
  void *v39;
  TransitPreferences *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  id v47;
  id v48;
  void *v49;
  uint64_t v50;
  void *v51;
  void *v52;
  id v53;
  uint64_t v54;
  void *v55;
  void *v56;
  CyclePreferences *v57;
  void *v58;
  void *v59;
  void *v60;
  WalkPreferences *v61;
  void *v62;
  id v63;
  void *v64;
  id v65;
  void *v66;
  id v67;
  id v68;
  uint64_t v69;
  void *i;
  void *v71;
  void *v72;
  unsigned __int8 v73;
  id v74;
  void *v75;
  WalkingRequestInfoProvider *v76;
  DrivingRequestInfoProvider *v77;
  TransitRequestInfoProvider *v78;
  CyclingRequestInfoProvider *v79;
  RequestTransportTypeInformation *v80;
  void *v81;
  RequestTransportTypeInformation *v82;
  void *v83;
  id v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  NavdRouteLoadingTaskFactory *v89;
  void *v90;
  void *v91;
  void *v92;
  id v93;
  id v94;
  RoutePlanningSessionConfiguration *v95;
  void *v96;
  RoutePlanningSessionConfiguration *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  id v107;
  id v108;
  NSObject *v109;
  id v110;
  void *v111;
  __CFString *v112;
  void *v113;
  void *v114;
  id v115;
  uint64_t v116;
  void *v117;
  void *v118;
  id v119;
  NSObject *v120;
  id v121;
  NSObject *v122;
  char *v123;
  id v124;
  NSObject *v125;
  id v126;
  NSObject *v127;
  char *v128;
  id v129;
  NSObject *v130;
  id v131;
  NSObject *v132;
  char *v133;
  id v134;
  NSObject *v135;
  id v136;
  NSObject *v137;
  char *v138;
  id v139;
  NSObject *v140;
  id v141;
  NSObject *v142;
  char *v143;
  id v144;
  NSObject *v145;
  id v146;
  NSObject *v147;
  char *v148;
  id v149;
  NSObject *v150;
  id v151;
  NSObject *v152;
  char *v153;
  id v154;
  NSObject *v155;
  id v156;
  NSObject *v157;
  char *v158;
  id v159;
  NSObject *v160;
  id v161;
  NSObject *v162;
  char *v163;
  id v164;
  NSObject *v165;
  id v166;
  NSObject *v167;
  char *v168;
  void *v170;
  const char *v171;
  void *v172;
  void *v173;
  void *v174;
  CyclingRequestInfoProvider *v175;
  TransitRequestInfoProvider *v176;
  WalkingRequestInfoProvider *v177;
  id v178;
  DrivingRequestInfoProvider *v179;
  id v180;
  NavdRouteLoadingTaskFactory *v181;
  RequestTransportTypeInformation *v182;
  WalkPreferences *v183;
  CyclePreferences *v184;
  DrivePreferences *v185;
  id v186;
  id v187;
  TransitPreferences *v188;
  id v189;
  id v190;
  id v191;
  id v192;
  id v193;
  id v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  uint8_t buf[4];
  const char *v200;
  __int16 v201;
  const char *v202;
  __int16 v203;
  int v204;
  __int16 v205;
  const char *v206;
  _QWORD v207[4];
  _QWORD v208[4];
  uint8_t v209[4];
  const char *v210;
  __int16 v211;
  const char *v212;
  __int16 v213;
  int v214;
  __int16 v215;
  const char *v216;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  if (!v7)
  {
    v119 = sub_1004318FC();
    v120 = objc_claimAutoreleasedReturnValue(v119);
    if (os_log_type_enabled(v120, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v209 = 136315906;
      v210 = "id<MapsSession>  _Nonnull RoutePlanningSessionForDirectionItem(DirectionItem * _Nonnull __strong, GEOMapSer"
             "viceTraits * _Nonnull __strong, NSDictionary<id<WaypointRequest>,GEOComposedWaypoint *> * _Nullable __stron"
             "g, NSDictionary<NSString *,id> * _Nullable __strong)";
      v211 = 2080;
      v212 = "RoutePlanningSessionBuilder.m";
      v213 = 1024;
      v214 = 85;
      v215 = 2080;
      v216 = "directionItem != nil";
      _os_log_impl((void *)&_mh_execute_header, v120, OS_LOG_TYPE_ERROR, "%s [%s:%d] Assertion: (%s)", v209, 0x26u);
    }

    if (sub_100A70734())
    {
      v121 = sub_1004318FC();
      v122 = objc_claimAutoreleasedReturnValue(v121);
      if (os_log_type_enabled(v122, OS_LOG_TYPE_ERROR))
      {
        v123 = (char *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
        *(_DWORD *)v209 = 138412290;
        v210 = v123;
        _os_log_impl((void *)&_mh_execute_header, v122, OS_LOG_TYPE_ERROR, "%@", v209, 0xCu);

      }
    }
  }
  if (!v8)
  {
    v124 = sub_1004318FC();
    v125 = objc_claimAutoreleasedReturnValue(v124);
    if (os_log_type_enabled(v125, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v209 = 136315906;
      v210 = "id<MapsSession>  _Nonnull RoutePlanningSessionForDirectionItem(DirectionItem * _Nonnull __strong, GEOMapSer"
             "viceTraits * _Nonnull __strong, NSDictionary<id<WaypointRequest>,GEOComposedWaypoint *> * _Nullable __stron"
             "g, NSDictionary<NSString *,id> * _Nullable __strong)";
      v211 = 2080;
      v212 = "RoutePlanningSessionBuilder.m";
      v213 = 1024;
      v214 = 86;
      v215 = 2080;
      v216 = "traits != nil";
      _os_log_impl((void *)&_mh_execute_header, v125, OS_LOG_TYPE_ERROR, "%s [%s:%d] Assertion: (%s)", v209, 0x26u);
    }

    if (sub_100A70734())
    {
      v126 = sub_1004318FC();
      v127 = objc_claimAutoreleasedReturnValue(v126);
      if (os_log_type_enabled(v127, OS_LOG_TYPE_ERROR))
      {
        v128 = (char *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
        *(_DWORD *)v209 = 138412290;
        v210 = v128;
        _os_log_impl((void *)&_mh_execute_header, v127, OS_LOG_TYPE_ERROR, "%@", v209, 0xCu);

      }
    }
  }
  v11 = (uint64_t)objc_msgSend(v7, "transportType");
  if (v11 == 4)
  {
    if (sub_10048286C())
      v11 = 4;
    else
      v11 = 1;
  }
  if (!v8)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedMapsDelegate](UIApplication, "sharedMapsDelegate"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "chromeViewController"));
    v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "currentTraits"));

  }
  objc_msgSend(v8, "useOnlineToOfflineFailoverRequestModeIfAllowed");
  if (v11 != 4)
  {
    v30 = v7;
    v194 = v8;
    v31 = v8;
    v32 = v9;
    v192 = v10;
    v33 = v10;
    if (!v7)
    {
      v144 = sub_1004318FC();
      v145 = objc_claimAutoreleasedReturnValue(v144);
      if (os_log_type_enabled(v145, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v209 = 136315906;
        v210 = "RoutePlanningSession * _Nonnull _RoutePlanningSessionFromDirectionItem(DirectionItem * _Nonnull __strong,"
               " GEOMapServiceTraits * _Nonnull __strong, NSDictionary<id<WaypointRequest>,GEOComposedWaypoint *> * _Null"
               "able __strong, NSDictionary<NSString *,id> * _Nullable __strong)";
        v211 = 2080;
        v212 = "RoutePlanningSessionBuilder.m";
        v213 = 1024;
        v214 = 129;
        v215 = 2080;
        v216 = "directionItem != nil";
        _os_log_impl((void *)&_mh_execute_header, v145, OS_LOG_TYPE_ERROR, "%s [%s:%d] Assertion: (%s)", v209, 0x26u);
      }

      if (sub_100A70734())
      {
        v146 = sub_1004318FC();
        v147 = objc_claimAutoreleasedReturnValue(v146);
        if (os_log_type_enabled(v147, OS_LOG_TYPE_ERROR))
        {
          v148 = (char *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
          *(_DWORD *)v209 = 138412290;
          v210 = v148;
          _os_log_impl((void *)&_mh_execute_header, v147, OS_LOG_TYPE_ERROR, "%@", v209, 0xCu);

        }
      }
    }
    if (!v31)
    {
      v149 = sub_1004318FC();
      v150 = objc_claimAutoreleasedReturnValue(v149);
      if (os_log_type_enabled(v150, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v209 = 136315906;
        v210 = "RoutePlanningSession * _Nonnull _RoutePlanningSessionFromDirectionItem(DirectionItem * _Nonnull __strong,"
               " GEOMapServiceTraits * _Nonnull __strong, NSDictionary<id<WaypointRequest>,GEOComposedWaypoint *> * _Null"
               "able __strong, NSDictionary<NSString *,id> * _Nullable __strong)";
        v211 = 2080;
        v212 = "RoutePlanningSessionBuilder.m";
        v213 = 1024;
        v214 = 130;
        v215 = 2080;
        v216 = "traits != nil";
        _os_log_impl((void *)&_mh_execute_header, v150, OS_LOG_TYPE_ERROR, "%s [%s:%d] Assertion: (%s)", v209, 0x26u);
      }

      if (sub_100A70734())
      {
        v151 = sub_1004318FC();
        v152 = objc_claimAutoreleasedReturnValue(v151);
        if (os_log_type_enabled(v152, OS_LOG_TYPE_ERROR))
        {
          v153 = (char *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
          *(_DWORD *)v209 = 138412290;
          v210 = v153;
          _os_log_impl((void *)&_mh_execute_header, v152, OS_LOG_TYPE_ERROR, "%@", v209, 0xCu);

        }
      }
    }
    if (objc_msgSend(v30, "transportType") == (id)4)
    {
      v154 = sub_1004318FC();
      v155 = objc_claimAutoreleasedReturnValue(v154);
      if (os_log_type_enabled(v155, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v209 = 136315906;
        v210 = "RoutePlanningSession * _Nonnull _RoutePlanningSessionFromDirectionItem(DirectionItem * _Nonnull __strong,"
               " GEOMapServiceTraits * _Nonnull __strong, NSDictionary<id<WaypointRequest>,GEOComposedWaypoint *> * _Null"
               "able __strong, NSDictionary<NSString *,id> * _Nullable __strong)";
        v211 = 2080;
        v212 = "RoutePlanningSessionBuilder.m";
        v213 = 1024;
        v214 = 131;
        v215 = 2080;
        v216 = "directionItem.transportType != TransportTypeRideshare";
        _os_log_impl((void *)&_mh_execute_header, v155, OS_LOG_TYPE_ERROR, "%s [%s:%d] Assertion: (%s)", v209, 0x26u);
      }

      if (sub_100A70734())
      {
        v156 = sub_1004318FC();
        v157 = objc_claimAutoreleasedReturnValue(v156);
        if (os_log_type_enabled(v157, OS_LOG_TYPE_ERROR))
        {
          v158 = (char *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
          *(_DWORD *)v209 = 138412290;
          v210 = v158;
          _os_log_impl((void *)&_mh_execute_header, v157, OS_LOG_TYPE_ERROR, "%@", v209, 0xCu);

        }
      }
    }
    if (objc_msgSend(v30, "transportType") == (id)4)
    {
      v29 = 0;
LABEL_151:

      v10 = v192;
      v8 = v194;
      goto LABEL_152;
    }
    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "drivePreferences"));
    v35 = v34;
    if (v34)
    {
      v185 = v34;
    }
    else
    {
      v36 = [DrivePreferences alloc];
      v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
      v185 = -[DrivePreferences initWithDefaults:](v36, "initWithDefaults:", v37);

    }
    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "transitPreferences"));
    v39 = v38;
    if (v38)
    {
      v188 = v38;
    }
    else
    {
      v40 = [TransitPreferences alloc];
      v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
      v188 = -[WatchSyncedPreferences initWithDefaults:](v40, "initWithDefaults:", v41);

    }
    v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "timing"));
    v43 = v42;
    v180 = v30;
    v186 = v31;
    if (v42)
    {
      v187 = v42;
    }
    else
    {
      v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "startMapItem"));
      v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "timeZone"));
      v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "endMapItem"));
      v47 = v9;
      v48 = v7;
      v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "timeZone"));
      v187 = (id)objc_claimAutoreleasedReturnValue(+[RoutePlanningTiming timingWithDepartureDate:departureTimeZone:arrivalTimeZone:](RoutePlanningTiming, "timingWithDepartureDate:departureTimeZone:arrivalTimeZone:", 0, v45, v49));

      v7 = v48;
      v9 = v47;
      v30 = v180;

    }
    if (v33)
    {
      v50 = objc_claimAutoreleasedReturnValue(+[RoutePlanningTiming timingWithUserInfo:](RoutePlanningTiming, "timingWithUserInfo:", v33));
      v51 = (void *)v50;
      if (v50)
        v52 = (void *)v50;
      else
        v52 = v187;
      v53 = v52;

      v54 = objc_claimAutoreleasedReturnValue(-[TransitPreferences transitPreferencesByOverridingPropertiesWithUserInfo:](v188, "transitPreferencesByOverridingPropertiesWithUserInfo:", v33));
      v187 = v53;
      v188 = (TransitPreferences *)v54;
    }
    v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "cyclePreferences"));
    v56 = v55;
    if (v55)
    {
      v184 = v55;
    }
    else
    {
      v57 = [CyclePreferences alloc];
      v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
      v184 = -[CyclePreferences initWithDefaults:](v57, "initWithDefaults:", v58);

    }
    v190 = v9;

    v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "walkPreferences"));
    v60 = v59;
    v178 = v7;
    if (v59)
    {
      v183 = v59;
    }
    else
    {
      v61 = [WalkPreferences alloc];
      v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
      v183 = -[WalkPreferences initWithDefaults:](v61, "initWithDefaults:", v62);

    }
    v63 = objc_alloc((Class)NSMutableArray);
    v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "items"));
    v65 = objc_msgSend(v63, "initWithCapacity:", objc_msgSend(v64, "count"));

    v197 = 0u;
    v198 = 0u;
    v195 = 0u;
    v196 = 0u;
    v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "items"));
    v67 = objc_msgSend(v66, "countByEnumeratingWithState:objects:count:", &v195, v209, 16);
    if (v67)
    {
      v68 = v67;
      v69 = *(_QWORD *)v196;
      do
      {
        for (i = 0; i != v68; i = (char *)i + 1)
        {
          if (*(_QWORD *)v196 != v69)
            objc_enumerationMutation(v66);
          v71 = *(void **)(*((_QWORD *)&v195 + 1) + 8 * (_QWORD)i);
          v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v71, "composedWaypoint"));
          v73 = objc_msgSend(v72, "isServerProvidedWaypoint");

          if ((v73 & 1) == 0)
          {
            v74 = sub_1009C3E7C(v71, v32);
            v75 = (void *)objc_claimAutoreleasedReturnValue(v74);
            objc_msgSend(v65, "addObject:", v75);

          }
        }
        v68 = objc_msgSend(v66, "countByEnumeratingWithState:objects:count:", &v195, v209, 16);
      }
      while (v68);
    }

    v76 = -[WalkingRequestInfoProvider initWithPreferences:timing:]([WalkingRequestInfoProvider alloc], "initWithPreferences:timing:", v183, v187);
    v77 = -[DrivingRequestInfoProvider initWithPreferences:timing:]([DrivingRequestInfoProvider alloc], "initWithPreferences:timing:", v185, v187);
    v78 = -[TransitRequestInfoProvider initWithPreferences:timing:]([TransitRequestInfoProvider alloc], "initWithPreferences:timing:", v188, v187);
    v79 = -[CyclingRequestInfoProvider initWithPreferences:timing:]([CyclingRequestInfoProvider alloc], "initWithPreferences:timing:", v184, v187);
    v80 = [RequestTransportTypeInformation alloc];
    v207[0] = &off_101270030;
    v207[1] = &off_101270048;
    v176 = v78;
    v177 = v76;
    v208[0] = v76;
    v208[1] = v77;
    v179 = v77;
    v207[2] = &off_101270060;
    v207[3] = &off_101270078;
    v208[2] = v78;
    v208[3] = v79;
    v175 = v79;
    v81 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v208, v207, 4));
    v82 = -[RequestTransportTypeInformation initWithDictionary:](v80, "initWithDictionary:", v81);

    v9 = v190;
    v182 = v82;
    if (!v82)
    {
      v159 = sub_1004318FC();
      v160 = objc_claimAutoreleasedReturnValue(v159);
      if (os_log_type_enabled(v160, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        v200 = "RoutePlanningSession * _Nonnull _RoutePlanningSessionFromDirectionItem(DirectionItem * _Nonnull __strong,"
               " GEOMapServiceTraits * _Nonnull __strong, NSDictionary<id<WaypointRequest>,GEOComposedWaypoint *> * _Null"
               "able __strong, NSDictionary<NSString *,id> * _Nullable __strong)";
        v201 = 2080;
        v202 = "RoutePlanningSessionBuilder.m";
        v203 = 1024;
        v204 = 168;
        v205 = 2080;
        v206 = "transportTypeInfos != nil";
        _os_log_impl((void *)&_mh_execute_header, v160, OS_LOG_TYPE_ERROR, "%s [%s:%d] Assertion: (%s)", buf, 0x26u);
      }

      if (sub_100A70734())
      {
        v161 = sub_1004318FC();
        v162 = objc_claimAutoreleasedReturnValue(v161);
        if (os_log_type_enabled(v162, OS_LOG_TYPE_ERROR))
        {
          v163 = (char *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
          *(_DWORD *)buf = 138412290;
          v200 = v163;
          _os_log_impl((void *)&_mh_execute_header, v162, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);

        }
      }
    }
    v83 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKeyedSubscript:", CFSTR("DirectionsIsResumedNavigationSessionKey")));
    v84 = objc_msgSend(v83, "BOOLValue");

    v85 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKeyedSubscript:", CFSTR("DirectionsResumeRouteHandleStorageKey")));
    v86 = objc_opt_class(GEOStorageResumeRouteHandle);
    if ((objc_opt_isKindOfClass(v85, v86) & 1) != 0)
    {
      v87 = objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKeyedSubscript:", CFSTR("DirectionsResumeRouteHandleStorageKey")));

      v30 = v180;
      if (v87)
      {
        v174 = (void *)v87;
        v88 = objc_msgSend(objc_alloc((Class)GEOResumeRouteHandle), "initWithGEOStorageResumeRouteHandle:", v87);
      }
      else
      {
        v88 = 0;
        v174 = 0;
      }
    }
    else
    {

      v88 = 0;
      v174 = 0;
      v30 = v180;
    }
    v89 = [NavdRouteLoadingTaskFactory alloc];
    v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "persistentData"));
    v181 = -[NavdRouteLoadingTaskFactory initWithTransportTypes:traits:isResumingMultipointRoute:resumeRouteHandle:persistentData:](v89, "initWithTransportTypes:traits:isResumingMultipointRoute:resumeRouteHandle:persistentData:", v182, v186, v84, v88, v90);

    v91 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKeyedSubscript:", CFSTR("DirectionsCompanionRouteContextKey")));
    v92 = v91;
    if (v91)
      v93 = v91;
    else
      v93 = (id)objc_claimAutoreleasedReturnValue(+[GEOCompanionRouteContext context](GEOCompanionRouteContext, "context"));
    v94 = v93;

    v95 = [RoutePlanningSessionConfiguration alloc];
    v96 = (void *)objc_claimAutoreleasedReturnValue(+[MKLocationManager sharedLocationManager](MKLocationManager, "sharedLocationManager"));
    v97 = -[RoutePlanningSessionConfiguration initWithWaypointRequests:routeLoadingTaskFactory:traits:companionContext:locationManager:](v95, "initWithWaypointRequests:routeLoadingTaskFactory:traits:companionContext:locationManager:", v65, v181, v186, v94, v96);

    v98 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKey:", CFSTR("DirectionsNavigationAutoLaunchDelayKey")));
    -[RoutePlanningSessionConfiguration setNavigationAutoLaunchDelay:](v97, "setNavigationAutoLaunchDelay:", v98);

    -[RoutePlanningSessionConfiguration setIgnoreMapType:](v97, "setIgnoreMapType:", objc_msgSend(v30, "ignoreMapType"));
    -[RoutePlanningSessionConfiguration setInitialTransportType:](v97, "setInitialTransportType:", objc_msgSend(v30, "transportType"));
    v99 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKeyedSubscript:", CFSTR("ShortcutIdentifier")));
    -[RoutePlanningSessionConfiguration setShortcutIdentifier:](v97, "setShortcutIdentifier:", v99);

    v100 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKeyedSubscript:", CFSTR("DirectionsRestoreCamera")));
    -[RoutePlanningSessionConfiguration setShouldRestoreCamera:](v97, "setShouldRestoreCamera:", objc_msgSend(v100, "BOOLValue"));

    v101 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKey:", CFSTR("DirectionsShouldRestoreLowGuidanceKey")));
    -[RoutePlanningSessionConfiguration setShouldRestoreToLowGuidance:](v97, "setShouldRestoreToLowGuidance:", objc_msgSend(v101, "BOOLValue"));

    v102 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKeyedSubscript:", CFSTR("DirectionsRouteUUIDKey")));
    -[RoutePlanningSessionConfiguration setOriginalHistoryEntryIdentifier:](v97, "setOriginalHistoryEntryIdentifier:", v102);

    v103 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKeyedSubscript:", CFSTR("DirectionsStartShortestRouteKey")));
    -[RoutePlanningSessionConfiguration setShouldStartShortestRoute:](v97, "setShouldStartShortestRoute:", objc_msgSend(v103, "BOOLValue"));

    v104 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKeyedSubscript:", CFSTR("DirectionsStartFastestRouteKey")));
    -[RoutePlanningSessionConfiguration setShouldStartFastestRoute:](v97, "setShouldStartFastestRoute:", objc_msgSend(v104, "BOOLValue"));

    v105 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKeyedSubscript:", CFSTR("DirectionsRoutePlanningSessionSourceKey")));
    -[RoutePlanningSessionConfiguration setSource:](v97, "setSource:", objc_msgSend(v105, "integerValue"));

    v106 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKeyedSubscript:", CFSTR("DirectionsPreviousContactsForTripSharing")));
    v172 = v94;
    if (objc_msgSend(v106, "count"))
    {
      v107 = v88;
      v108 = sub_10043214C();
      v109 = objc_claimAutoreleasedReturnValue(v108);
      if (os_log_type_enabled(v109, OS_LOG_TYPE_INFO))
      {
        v171 = (const char *)objc_msgSend(v106, "count");
        v110 = v106;
        v111 = v110;
        if (v110)
        {
          if (objc_msgSend(v110, "count"))
          {
            v170 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v111, "componentsJoinedByString:", CFSTR(", ")));
            v112 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<%p> [%@]"), v111, v170));

          }
          else
          {
            v112 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<%p> (empty)"), v111));
          }
        }
        else
        {
          v112 = CFSTR("<nil>");
        }

        *(_DWORD *)buf = 134218243;
        v200 = v171;
        v201 = 2113;
        v202 = (const char *)v112;
        _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_INFO, "DirectionItem has %lu autosharing contacts: %{private}@", buf, 0x16u);

      }
      -[RoutePlanningSessionConfiguration setAutomaticSharingContacts:](v97, "setAutomaticSharingContacts:", v106);
      v88 = v107;
      v9 = v190;
    }
    v113 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKey:", CFSTR("DirectionsSourceKey")));

    v173 = v88;
    if (v113)
    {
      v114 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKey:", CFSTR("DirectionsSourceKey")));
      v115 = objc_msgSend(v114, "integerValue");

      v116 = 5;
      switch((unint64_t)v115)
      {
        case 0uLL:
        case 1uLL:
          goto LABEL_143;
        case 3uLL:
          v116 = 7;
          break;
        case 4uLL:
          goto LABEL_81;
        case 5uLL:
          v116 = 4;
          break;
        case 6uLL:
          v116 = 8;
          break;
        default:
          goto LABEL_150;
      }
      goto LABEL_150;
    }
    v117 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKey:", CFSTR("DirectionsSessionInitiatorKey")));

    if (v117)
    {
      v118 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKey:", CFSTR("DirectionsSessionInitiatorKey")));
      v116 = (uint64_t)objc_msgSend(v118, "unsignedIntegerValue");

      if (v116 == 6)
      {
LABEL_81:
        if (-[RoutePlanningSessionConfiguration shouldAutoLaunchNavigation](v97, "shouldAutoLaunchNavigation"))
          -[DrivingRequestInfoProvider setMaximumRouteCountOverride:](v179, "setMaximumRouteCountOverride:", &off_101270090);
        v116 = 6;
        goto LABEL_150;
      }
      if (v116 == 3)
      {
        -[RoutePlanningSessionConfiguration setInitialRoutesBeingFetchedExternally:](v97, "setInitialRoutesBeingFetchedExternally:", GEOConfigGetBOOL(MapsConfig_NanoUseMapsForCompanionRoutePlanning, off_1014B48F8) ^ 1);
LABEL_150:
        v29 = -[RoutePlanningSession initWithInitiator:configuration:]([RoutePlanningSession alloc], "initWithInitiator:configuration:", v116, v97);

        v7 = v178;
        v31 = v186;
        goto LABEL_151;
      }
      if (v116)
        goto LABEL_150;
    }
LABEL_143:
    v164 = sub_1004318FC();
    v165 = objc_claimAutoreleasedReturnValue(v164);
    if (os_log_type_enabled(v165, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v200 = "RoutePlanningSession * _Nonnull _RoutePlanningSessionFromDirectionItem(DirectionItem * _Nonnull __strong, G"
             "EOMapServiceTraits * _Nonnull __strong, NSDictionary<id<WaypointRequest>,GEOComposedWaypoint *> * _Nullable"
             " __strong, NSDictionary<NSString *,id> * _Nullable __strong)";
      v201 = 2080;
      v202 = "RoutePlanningSessionBuilder.m";
      v203 = 1024;
      v204 = 211;
      v205 = 2080;
      v206 = "initiator != MapsSessionInitiatorUnknown";
      _os_log_impl((void *)&_mh_execute_header, v165, OS_LOG_TYPE_ERROR, "%s [%s:%d] Assertion: (%s)", buf, 0x26u);
    }

    if (sub_100A70734())
    {
      v166 = sub_1004318FC();
      v167 = objc_claimAutoreleasedReturnValue(v166);
      if (os_log_type_enabled(v167, OS_LOG_TYPE_ERROR))
      {
        v168 = (char *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
        *(_DWORD *)buf = 138412290;
        v200 = v168;
        _os_log_impl((void *)&_mh_execute_header, v167, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);

      }
    }
    v116 = 0;
    goto LABEL_150;
  }
  v14 = v7;
  v15 = v8;
  v16 = v9;
  if (!v7)
  {
    v129 = sub_1004318FC();
    v130 = objc_claimAutoreleasedReturnValue(v129);
    if (os_log_type_enabled(v130, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v209 = 136315906;
      v210 = "RideBookingPlanningSession * _Nonnull _RideBookingPlanningSessionFromDirectionItem(DirectionItem * _Nonnull"
             " __strong, GEOMapServiceTraits * _Nonnull __strong, NSDictionary<id<WaypointRequest>,GEOComposedWaypoint *>"
             " * _Nullable __strong)";
      v211 = 2080;
      v212 = "RoutePlanningSessionBuilder.m";
      v213 = 1024;
      v214 = 111;
      v215 = 2080;
      v216 = "directionItem != nil";
      _os_log_impl((void *)&_mh_execute_header, v130, OS_LOG_TYPE_ERROR, "%s [%s:%d] Assertion: (%s)", v209, 0x26u);
    }

    if (sub_100A70734())
    {
      v131 = sub_1004318FC();
      v132 = objc_claimAutoreleasedReturnValue(v131);
      if (os_log_type_enabled(v132, OS_LOG_TYPE_ERROR))
      {
        v133 = (char *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
        *(_DWORD *)v209 = 138412290;
        v210 = v133;
        _os_log_impl((void *)&_mh_execute_header, v132, OS_LOG_TYPE_ERROR, "%@", v209, 0xCu);

      }
    }
  }
  if (objc_msgSend(v14, "transportType") != (id)4)
  {
    v134 = sub_1004318FC();
    v135 = objc_claimAutoreleasedReturnValue(v134);
    if (os_log_type_enabled(v135, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v209 = 136315906;
      v210 = "RideBookingPlanningSession * _Nonnull _RideBookingPlanningSessionFromDirectionItem(DirectionItem * _Nonnull"
             " __strong, GEOMapServiceTraits * _Nonnull __strong, NSDictionary<id<WaypointRequest>,GEOComposedWaypoint *>"
             " * _Nullable __strong)";
      v211 = 2080;
      v212 = "RoutePlanningSessionBuilder.m";
      v213 = 1024;
      v214 = 112;
      v215 = 2080;
      v216 = "directionItem.transportType == TransportTypeRideshare";
      _os_log_impl((void *)&_mh_execute_header, v135, OS_LOG_TYPE_ERROR, "%s [%s:%d] Assertion: (%s)", v209, 0x26u);
    }

    if (sub_100A70734())
    {
      v136 = sub_1004318FC();
      v137 = objc_claimAutoreleasedReturnValue(v136);
      if (os_log_type_enabled(v137, OS_LOG_TYPE_ERROR))
      {
        v138 = (char *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
        *(_DWORD *)v209 = 138412290;
        v210 = v138;
        _os_log_impl((void *)&_mh_execute_header, v137, OS_LOG_TYPE_ERROR, "%@", v209, 0xCu);

      }
    }
  }
  if (!v15)
  {
    v139 = sub_1004318FC();
    v140 = objc_claimAutoreleasedReturnValue(v139);
    if (os_log_type_enabled(v140, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v209 = 136315906;
      v210 = "RideBookingPlanningSession * _Nonnull _RideBookingPlanningSessionFromDirectionItem(DirectionItem * _Nonnull"
             " __strong, GEOMapServiceTraits * _Nonnull __strong, NSDictionary<id<WaypointRequest>,GEOComposedWaypoint *>"
             " * _Nullable __strong)";
      v211 = 2080;
      v212 = "RoutePlanningSessionBuilder.m";
      v213 = 1024;
      v214 = 113;
      v215 = 2080;
      v216 = "traits != nil";
      _os_log_impl((void *)&_mh_execute_header, v140, OS_LOG_TYPE_ERROR, "%s [%s:%d] Assertion: (%s)", v209, 0x26u);
    }

    if (sub_100A70734())
    {
      v141 = sub_1004318FC();
      v142 = objc_claimAutoreleasedReturnValue(v141);
      if (os_log_type_enabled(v142, OS_LOG_TYPE_ERROR))
      {
        v143 = (char *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
        *(_DWORD *)v209 = 138412290;
        v210 = v143;
        _os_log_impl((void *)&_mh_execute_header, v142, OS_LOG_TYPE_ERROR, "%@", v209, 0xCu);

      }
    }
  }
  if (objc_msgSend(v14, "transportType") == (id)4)
  {
    v191 = v10;
    v193 = v8;
    v189 = v9;
    v17 = objc_alloc((Class)NSMutableArray);
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "items"));
    v19 = objc_msgSend(v17, "initWithCapacity:", objc_msgSend(v18, "count"));

    v197 = 0u;
    v198 = 0u;
    v195 = 0u;
    v196 = 0u;
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "items"));
    v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v195, v209, 16);
    if (v21)
    {
      v22 = v21;
      v23 = *(_QWORD *)v196;
      do
      {
        for (j = 0; j != v22; j = (char *)j + 1)
        {
          if (*(_QWORD *)v196 != v23)
            objc_enumerationMutation(v20);
          v25 = sub_1009C3E7C(*(void **)(*((_QWORD *)&v195 + 1) + 8 * (_QWORD)j), v16);
          v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
          objc_msgSend(v19, "addObject:", v26);

        }
        v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v195, v209, 16);
      }
      while (v22);
    }

    v27 = [RideBookingPlanningSession alloc];
    v28 = objc_msgSend(v19, "copy");
    v29 = -[RideBookingPlanningSession initWithInitiator:waypointRequests:traits:](v27, "initWithInitiator:waypointRequests:traits:", 1, v28, v15);

    v9 = v189;
    v10 = v191;
    v8 = v193;
  }
  else
  {
    v29 = 0;
  }

LABEL_152:
  return v29;
}

id sub_1009C3E7C(void *a1, void *a2)
{
  id v3;
  id v4;
  RoutePlanningWaypointRequest *v5;
  void *v6;
  void *v7;
  id v8;
  _QWORD v10[4];
  id v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  id v18;

  v3 = a1;
  v4 = a2;
  v5 = RoutePlanningWaypointRequestFromSearchFieldItem(v3);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v13 = 0;
  v14 = &v13;
  v15 = 0x3032000000;
  v16 = sub_1009C4364;
  v17 = sub_1009C4374;
  v18 = 0;
  if (GEOConfigGetBOOL(MapsConfig_ShouldCacheRoutePlanningWaypointRequests, off_1014B4A68))
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1009C437C;
    v10[3] = &unk_1011DD1E8;
    v11 = v6;
    v12 = &v13;
    objc_msgSend(v4, "enumerateKeysAndObjectsUsingBlock:", v10);

  }
  v7 = (void *)v14[5];
  if (!v7)
    v7 = v6;
  v8 = v7;
  _Block_object_dispose(&v13, 8);

  return v8;
}

void sub_1009C3F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

RoutePlanningSession *sub_1009C3FA8(void *a1, uint64_t a2, int a3, _QWORD *a4)
{
  id v7;
  id v8;
  void *v9;
  TraceRouteLoadingTaskFactory *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  RoutePlanningSessionConfiguration *v18;
  void *v19;
  RoutePlanningSessionConfiguration *v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  double v26;
  double v27;
  void *v28;
  RoutePlanningSession *v29;
  uint64_t v31;
  _QWORD v32[5];
  id v33;

  v7 = a1;
  v8 = objc_alloc_init((Class)GEOMapServiceTraits);
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[GEOCompanionRouteContext context](GEOCompanionRouteContext, "context"));
  v33 = 0;
  v10 = -[TraceRouteLoadingTaskFactory initWithTracePath:outError:]([TraceRouteLoadingTaskFactory alloc], "initWithTracePath:outError:", v7, &v33);

  v11 = v33;
  v12 = v11;
  if (v11 || !v10)
  {
    v29 = 0;
    if (a4)
      *a4 = objc_retainAutorelease(v11);
  }
  else
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(-[TraceRouteLoadingTaskFactory waypointRequests](v10, "waypointRequests"));
    v14 = objc_msgSend(v13, "count");

    v15 = (void *)objc_claimAutoreleasedReturnValue(-[TraceRouteLoadingTaskFactory waypointRequests](v10, "waypointRequests"));
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    v32[2] = sub_1009C4230;
    v32[3] = &unk_1011DE768;
    v32[4] = v14;
    v16 = sub_10039DCD4(v15, v32);
    v17 = (void *)objc_claimAutoreleasedReturnValue(v16);

    v18 = [RoutePlanningSessionConfiguration alloc];
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[MKLocationManager sharedLocationManager](MKLocationManager, "sharedLocationManager"));
    v20 = -[RoutePlanningSessionConfiguration initWithWaypointRequests:routeLoadingTaskFactory:traits:companionContext:locationManager:](v18, "initWithWaypointRequests:routeLoadingTaskFactory:traits:companionContext:locationManager:", v17, v10, v8, v9, v19);

    if (a3)
    {
      v21 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", 5.0));
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
      v31 = a2;
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "objectForKey:", CFSTR("NavigationAutoLaunchDelayKey")));

      if (v23)
        v24 = v23;
      else
        v24 = v21;
      v25 = v24;

      objc_msgSend(v25, "doubleValue");
      v27 = v26;

      v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v27));
      -[RoutePlanningSessionConfiguration setNavigationAutoLaunchDelay:](v20, "setNavigationAutoLaunchDelay:", v28);

      a2 = v31;
    }
    -[RoutePlanningSessionConfiguration setInitialTransportType:](v20, "setInitialTransportType:", -[TraceRouteLoadingTaskFactory traceTransportType](v10, "traceTransportType"));
    v29 = -[RoutePlanningSession initWithInitiator:configuration:]([RoutePlanningSession alloc], "initWithInitiator:configuration:", a2, v20);

  }
  return v29;
}

id sub_1009C4230(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const __CFString *v10;
  const __CFString *v11;
  __CFString *v12;
  RoutePlanningWaypointRequest *v13;
  void *v14;

  v5 = a2;
  v6 = v5;
  if (a3)
  {
    v7 = *(_QWORD *)(a1 + 32) - 1;
    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "waypointName"));
    v9 = (void *)v8;
    v10 = CFSTR("Waypoint");
    if (v8)
      v10 = (const __CFString *)v8;
    v11 = CFSTR("Destination");
    if (v8)
      v11 = (const __CFString *)v8;
    if (v7 == a3)
      v12 = (__CFString *)v11;
    else
      v12 = (__CFString *)v10;
  }
  else
  {
    v12 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "waypointName"));
    v9 = v12;
    if (!v12)
      v12 = CFSTR("Origin");
  }
  v13 = sub_1009C42E0(v12, v6);
  v14 = (void *)objc_claimAutoreleasedReturnValue(v13);

  return v14;
}

RoutePlanningWaypointRequest *sub_1009C42E0(void *a1, void *a2)
{
  id v3;
  id v4;
  WaypointPlaceholder *v5;
  RoutePlanningWaypointRequest *v6;

  v3 = a2;
  v4 = a1;
  v5 = -[WaypointPlaceholder initWithName:displayableMarker:]([WaypointPlaceholder alloc], "initWithName:displayableMarker:", v4, 0);

  v6 = -[RoutePlanningWaypointRequest initWithWaypointPlaceholder:request:preferredNameSource:]([RoutePlanningWaypointRequest alloc], "initWithWaypointPlaceholder:request:preferredNameSource:", v5, v3, 1);
  return v6;
}

uint64_t sub_1009C4364(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1009C4374(uint64_t a1)
{

}

void sub_1009C437C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  unsigned int v7;
  GEOComposedWaypointRequest *v8;
  GEOComposedWaypointRequest *v9;
  RoutePlanningWaypointRequest *v10;
  void *v11;
  RoutePlanningWaypointRequest *v12;
  uint64_t v13;
  void *v14;
  id v15;

  v15 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "waypointRequest"));
  v7 = objc_msgSend(v15, "isEquivalentToOtherRequest:", v6);

  if (v7)
  {
    if (objc_msgSend(v15, "hasCachedResult"))
      v8 = (GEOComposedWaypointRequest *)v15;
    else
      v8 = -[GEOComposedWaypointRequest initWithComposedWaypoint:]([GEOComposedWaypointRequest alloc], "initWithComposedWaypoint:", v5);
    v9 = v8;
    v10 = [RoutePlanningWaypointRequest alloc];
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "waypointPlaceholder"));
    v12 = -[RoutePlanningWaypointRequest initWithWaypointPlaceholder:request:preferredNameSource:](v10, "initWithWaypointPlaceholder:request:preferredNameSource:", v11, v9, objc_msgSend(*(id *)(a1 + 32), "preferredNameSource"));
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v14 = *(void **)(v13 + 40);
    *(_QWORD *)(v13 + 40) = v12;

  }
}

void sub_1009C5C7C(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSMutableDictionary);
  v2 = (void *)qword_1014D3BE8;
  qword_1014D3BE8 = (uint64_t)v1;

}

void sub_1009C5D44(void *a1)
{
  id v1;
  void *v2;
  id v3;

  if (a1)
  {
    v1 = a1;
    v3 = objc_msgSend(objc_alloc((Class)_UIFocusUpdateRequest), "initWithEnvironment:", v1);
    objc_msgSend(v3, "setAllowsDeferral:", 0);
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIFocusSystem focusSystemForEnvironment:](UIFocusSystem, "focusSystemForEnvironment:", v1));

    objc_msgSend(v2, "_requestFocusUpdate:", v3);
  }
}

void sub_1009C8BEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1009C8C04(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  os_signpost_id_t v6;
  NSObject *v7;
  NSObject *v8;
  os_signpost_id_t v9;
  uint64_t Log;
  NSObject *v11;
  NSObject *v12;
  os_signpost_id_t v13;
  int v14;
  id v15;

  v3 = a2;
  v4 = *(id *)(a1 + 32);
  v5 = v4;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
  {
    LOWORD(v14) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_INTERVAL_END, v6, "MigratePreCrystalFavoritesDuration", "", (uint8_t *)&v14, 2u);
  }

  v7 = *(id *)(a1 + 32);
  v8 = v7;
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  if (v3)
  {
    if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
    {
      LOWORD(v14) = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, v9, "MigratePreCrystalFavoritesError", "", (uint8_t *)&v14, 2u);
    }

    Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "MapsLegacyDataMigrator");
    v8 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v14 = 138412290;
      v15 = v3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Favorites migration failed: %@", (uint8_t *)&v14, 0xCu);
    }
  }
  else if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    LOWORD(v14) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, v9, "MigratePreCrystalFavoritesSuccess", "", (uint8_t *)&v14, 2u);
  }

  v11 = *(id *)(a1 + 32);
  v12 = v11;
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    LOWORD(v14) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, v13, "MigratePreCrystalFavoritesFinished", "", (uint8_t *)&v14, 2u);
  }

}

void sub_1009CA600(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1009CA618(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  void *v8;
  id v9;
  void *v10;
  AutocompleteStringMatcher *v11;
  id v12;

  v7 = a2;
  v8 = v7;
  if (v7)
  {
    v12 = v7;
    v9 = objc_msgSend(v7, "length");
    v8 = v12;
    if (v9)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[AutocompleteMatchInfo matchInfoWithType:](AutocompleteMatchInfo, "matchInfoWithType:", a4));
      v11 = -[AutocompleteStringMatcher initWithString:requiredMatchLength:matchInfo:]([AutocompleteStringMatcher alloc], "initWithString:requiredMatchLength:matchInfo:", v12, a3, v10);
      objc_msgSend(*(id *)(a1 + 32), "addObject:", v11);

      v8 = v12;
    }
  }

}

uint64_t sub_1009CA9E4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1009CA9F4(uint64_t a1)
{

}

void sub_1009CA9FC(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "copy");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1009CAD88(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;

}

void sub_1009CB0A8(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = objc_msgSend(*(id *)(a1 + 40), "copy");
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 32);
  *(_QWORD *)(v3 + 32) = v2;

}

void sub_1009CC0A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a16);
  _Unwind_Resume(a1);
}

void sub_1009CC0C8(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_handleEvent:", v3);

}

void sub_1009CD054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1009CD070(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setExpanded:", 0);

}

void sub_1009CD1DC(uint64_t a1)
{
  void *v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "superview"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "superview"));
  objc_msgSend(v1, "layoutIfNeeded");

}

void sub_1009CD224(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "_updateContent");
  objc_msgSend(*(id *)(a1 + 32), "invalidateIntrinsicContentSize");
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "superview"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "superview"));
  objc_msgSend(v2, "layoutIfNeeded");

}

void sub_1009CD280(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  void *v5;
  objc_class *v6;
  NSString *v7;
  void *v8;
  void *v9;
  void *v10;
  __CFString *v11;
  uint8_t buf[4];
  __CFString *v13;

  v2 = sub_100432E6C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(id *)(a1 + 32);
    v5 = v4;
    if (!v4)
    {
      v11 = CFSTR("<nil>");
      goto LABEL_10;
    }
    v6 = (objc_class *)objc_opt_class(v4);
    v7 = NSStringFromClass(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if ((objc_opt_respondsToSelector(v5, "accessibilityIdentifier") & 1) != 0)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "performSelector:", "accessibilityIdentifier"));
      v10 = v9;
      if (v9 && !objc_msgSend(v9, "isEqualToString:", v8))
      {
        v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v8, v5, v10));

        goto LABEL_8;
      }

    }
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v8, v5));
LABEL_8:

LABEL_10:
    *(_DWORD *)buf = 138543362;
    v13 = v11;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%{public}@] _animateContentUpdate completed", buf, 0xCu);

  }
}

void sub_1009CDD34(id a1)
{
  MapsSiriContextProvider *v1;
  void *v2;

  v1 = objc_alloc_init(MapsSiriContextProvider);
  v2 = (void *)qword_1014D3BF8;
  qword_1014D3BF8 = (uint64_t)v1;

}

void sub_1009CEE88(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentingViewController"));
  objc_msgSend(v2, "presentViewController:animated:completion:", *(_QWORD *)(a1 + 40), 1, 0);

}

id sub_1009CF178(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  RAPPhoto *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  _QWORD v13[5];

  v5 = a3;
  v6 = a2;
  v7 = -[RAPPhoto initWithPhoto:date:location:]([RAPPhoto alloc], "initWithPhoto:date:location:", *(_QWORD *)(a1 + 40), v5, v6);

  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(void **)(v8 + 56);
  *(_QWORD *)(v8 + 56) = v7;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 32) = 0;
  objc_msgSend(*(id *)(a1 + 32), "_invokeChangeHandlers");
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(void **)(v10 + 16);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1009CF248;
  v13[3] = &unk_1011AC860;
  v13[4] = v10;
  return objc_msgSend(v11, "dismissViewControllerAnimated:completion:", 1, v13);
}

id sub_1009CF248(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_clearImagePicker");
}

uint64_t sub_1009CF250(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), a2, *(_QWORD *)(a1 + 32));
}

id sub_1009CF2F8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_clearImagePicker");
}

id sub_1009CF358(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_proceedWithSourceType:", 1);
}

id sub_1009CF3BC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_proceedWithSourceType:", 0);
}

id sub_1009CF420(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_cancel");
}

uint64_t sub_1009CF4D0(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if (objc_msgSend(v1, "hasRecommended"))
  {
    if (objc_msgSend(v1, "hasRecommended"))
      v2 = 2;
    else
      v2 = 1;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id sub_1009D0F60(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = objc_msgSend(a2, "mutableCopy");
  objc_msgSend(v3, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 32), NSFontAttributeName);
  v4 = objc_msgSend(v3, "copy");

  return v4;
}

void sub_1009D14C8(uint64_t a1)
{
  _QWORD *WeakRetained;
  uint64_t v3;
  void *v4;
  _QWORD *v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v5 = WeakRetained;
    if ((objc_msgSend(WeakRetained, "isRepeating") & 1) != 0)
    {
      v3 = objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", *(double *)(a1 + 48)));
      v4 = (void *)v5[3];
      v5[3] = v3;

    }
    else
    {
      objc_msgSend(v5, "invalidate");
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    WeakRetained = v5;
  }

}

uint64_t sub_1009D18E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1009D1A90(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1009D3064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *a11, id *location, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,id a58)
{
  objc_destroyWeak(location);
  objc_destroyWeak(a11);
  objc_destroyWeak(&a58);
  _Unwind_Resume(a1);
}

void sub_1009D30A4(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id WeakRetained;
  MapsRadarDraft *v5;
  void *v6;
  int v7;
  id v8;

  v2 = sub_100432E6C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v7 = 134349056;
    v8 = WeakRetained;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[%{public}p] Launching TTR from floating control with full archive", (uint8_t *)&v7, 0xCu);

  }
  v5 = objc_opt_new(MapsRadarDraft);
  -[MapsRadarDraft setCollectFullLogArchive:](v5, "setCollectFullLogArchive:", 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[MapsRadarController sharedInstance](MapsRadarController, "sharedInstance"));
  objc_msgSend(v6, "launchTTRWithRadar:", v5);

}

void sub_1009D3190(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id WeakRetained;
  MapsRadarDraft *v5;
  void *v6;
  int v7;
  id v8;

  v2 = sub_100432E6C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v7 = 134349056;
    v8 = WeakRetained;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[%{public}p] Launching TTR from floating control with regular archive", (uint8_t *)&v7, 0xCu);

  }
  v5 = objc_opt_new(MapsRadarDraft);
  -[MapsRadarDraft setCollectFullLogArchive:](v5, "setCollectFullLogArchive:", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[MapsRadarController sharedInstance](MapsRadarController, "sharedInstance"));
  objc_msgSend(v6, "launchTTRWithRadar:", v5);

}

id sub_1009D34C0(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  uint64_t v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "traitCollection"));
  v3 = objc_msgSend(v2, "isLuminanceReduced");

  if (v3)
    v4 = 2;
  else
    v4 = 0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 96), "setOverrideUserInterfaceStyle:", v4);
  return objc_msgSend(*(id *)(a1 + 32), "_updateContent");
}

id sub_1009D3804(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setAlpha:", *(double *)(a1 + 40));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "setAlpha:", *(double *)(a1 + 40));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "setAlpha:", *(double *)(a1 + 40));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "setAlpha:", *(double *)(a1 + 40));
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "setAlpha:", *(double *)(a1 + 40));
}

id sub_1009D39F8(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_compassViewAlpha");
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setAlpha:");
}

id sub_1009D4000(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setFrame:", 16.0, 16.0, 60.0, 60.0);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "layoutIfNeeded");
}

id sub_1009D4BC4(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setConfiguration:", *(_QWORD *)(a1 + 40));
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "layoutBelowIfNeeded");
}

id sub_1009D581C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_updateAudioPreferences");
}

void sub_1009D5A8C(uint64_t a1)
{
  int v1;
  _QWORD *v2;
  void *v3;

  v1 = *(unsigned __int8 *)(a1 + 40);
  v2 = *(_QWORD **)(a1 + 32);
  if (v1)
  {
    _objc_msgSend(v2, "_scheduleTimerToDismissCompass");
  }
  else
  {
    v3 = (void *)v2[8];
    v2[8] = 0;

  }
}

void sub_1009D5AB0(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "_compassViewAlpha");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setAlpha:");
  objc_msgSend(*(id *)(a1 + 32), "_insertCompassView");
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "superview"));
  objc_msgSend(v2, "layoutIfNeeded");

}

uint64_t sub_1009D5B20(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1009D5C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1009D5C40(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_animateOutCompassIfNeeded");

}

void sub_1009D5D28(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "_compassViewAlpha");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setAlpha:");
  objc_msgSend(*(id *)(a1 + 32), "_removeCompassView");
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "superview"));
  objc_msgSend(v2, "layoutIfNeeded");

}

id sub_1009D5D98(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "removeFromSuperview");
}

id sub_1009D5FD0(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 96), "setAlpha:", *(double *)(a1 + 40));
}

void sub_1009D6238(id a1, MapsDebugTableSection *a2)
{
  id v2;
  double v3;
  double v4;
  id v5;
  double v6;
  double v7;
  id v8;
  id v9;
  MapsDebugTableSection *v10;

  v10 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v10, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enable New Design"), MapKitConfig_NewPuckEnabled[0], MapKitConfig_NewPuckEnabled[1]);
  LODWORD(v3) = 1117782016;
  LODWORD(v4) = 11.0;
  v5 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:](v10, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Min Accuracy Radius"), CFSTR("%.1f points"), &stru_1011DE9C0, &stru_1011DE9E0, v4, v3);
  LODWORD(v6) = 1112014848;
  LODWORD(v7) = 10.0;
  v8 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:](v10, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Min Accuracy Uncertainty"), CFSTR("%.1f meters"), &stru_1011DEA00, &stru_1011DEA20, v7, v6);
  v9 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v10, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Disable Location Pulse"), CFSTR("DisableLocationPulse"));

}

float sub_1009D6314(id a1)
{
  return GEOConfigGetDouble(MapKitConfig_UserLocation_MinAccuracyRadius[0], MapKitConfig_UserLocation_MinAccuracyRadius[1]);
}

void sub_1009D6338(id a1, float a2)
{
  GEOConfigSetDouble(MapKitConfig_UserLocation_MinAccuracyRadius[0], MapKitConfig_UserLocation_MinAccuracyRadius[1], a2);
}

float sub_1009D634C(id a1)
{
  return GEOConfigGetDouble(MapKitConfig_UserLocation_MinAccuracyUncertainty[0], MapKitConfig_UserLocation_MinAccuracyUncertainty[1]);
}

void sub_1009D6370(id a1, float a2)
{
  GEOConfigSetDouble(MapKitConfig_UserLocation_MinAccuracyUncertainty[0], MapKitConfig_UserLocation_MinAccuracyUncertainty[1], a2);
}

void sub_1009D6384(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](a2, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Force Elevated Terrain for Standard Map"), MapKitConfig_ForceElevatedTerrainForStandardMap[0], MapKitConfig_ForceElevatedTerrainForStandardMap[1]);
}

void sub_1009D67F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;

  v2 = *(_QWORD *)(a1 + 40);
  if ((unint64_t)(v2 - 1) > 4)
    v3 = 0;
  else
    v3 = (uint64_t)*(&off_1011DEAB0 + v2 - 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "traitCollection"));
  if (objc_msgSend(v4, "userInterfaceIdiom") == (id)5)
  {
    v5 = objc_claimAutoreleasedReturnValue(+[UIImageSymbolConfiguration configurationWithTextStyle:](UIImageSymbolConfiguration, "configurationWithTextStyle:", UIFontTextStyleTitle3));
  }
  else
  {
    if (v2 == 5)
      v6 = 6;
    else
      v6 = 4;
    v5 = objc_claimAutoreleasedReturnValue(+[UIImageSymbolConfiguration configurationWithPointSize:weight:](UIImageSymbolConfiguration, "configurationWithPointSize:weight:", v6, 18.0));
  }
  v7 = (void *)v5;
  v19 = (id)objc_claimAutoreleasedReturnValue(+[UIImage systemImageNamed:withConfiguration:](UIImage, "systemImageNamed:withConfiguration:", v3, v5));

  v8 = *(_QWORD *)(a1 + 40);
  if ((unint64_t)(v8 - 1) > 4)
    v9 = 0;
  else
    v9 = (uint64_t)*(&off_1011DEAB0 + v8 - 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "traitCollection"));
  if (objc_msgSend(v10, "userInterfaceIdiom") == (id)5)
  {
    v11 = objc_claimAutoreleasedReturnValue(+[UIImageSymbolConfiguration configurationWithTextStyle:](UIImageSymbolConfiguration, "configurationWithTextStyle:", UIFontTextStyleTitle3));
  }
  else
  {
    if (v8 == 5)
      v12 = 6;
    else
      v12 = 4;
    v11 = objc_claimAutoreleasedReturnValue(+[UIImageSymbolConfiguration configurationWithPointSize:weight:](UIImageSymbolConfiguration, "configurationWithPointSize:weight:", v12, 40.0));
  }
  v13 = (void *)v11;
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage systemImageNamed:withConfiguration:](UIImage, "systemImageNamed:withConfiguration:", v9, v11));

  v15 = *(_QWORD *)(a1 + 40);
  if (v15 == 5 || v15 == 2)
  {
    v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "imageFlippedForRightToLeftLayoutDirection"));

    v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "imageFlippedForRightToLeftLayoutDirection"));
    v18 = (id)v16;
    v14 = (void *)v17;
  }
  else
  {
    v18 = v19;
  }
  v20 = v18;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "setImage:", v18);
  objc_msgSend(*(id *)(a1 + 32), "setLargeContentImage:", v14);

}

id sub_1009D77C8(uint64_t a1, void *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  const __CFString *v15;
  void *v16;

  v3 = (char *)objc_msgSend(a2, "integerValue");
  v4 = v3 - 1;
  if ((unint64_t)(v3 - 1) > 4)
    v5 = 0;
  else
    v5 = (uint64_t)*(&off_1011DEAB0 + (_QWORD)v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "traitCollection"));
  if (objc_msgSend(v6, "userInterfaceIdiom") == (id)5)
  {
    v7 = objc_claimAutoreleasedReturnValue(+[UIImageSymbolConfiguration configurationWithTextStyle:](UIImageSymbolConfiguration, "configurationWithTextStyle:", UIFontTextStyleTitle3));
  }
  else
  {
    if (v3 == (char *)5)
      v8 = 6;
    else
      v8 = 4;
    v7 = objc_claimAutoreleasedReturnValue(+[UIImageSymbolConfiguration configurationWithPointSize:weight:](UIImageSymbolConfiguration, "configurationWithPointSize:weight:", v8, 18.0));
  }
  v9 = (void *)v7;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage systemImageNamed:withConfiguration:](UIImage, "systemImageNamed:withConfiguration:", v5, v7));

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "imageWithRenderingMode:", 2));
  v12 = v11;
  switch((unint64_t)v4)
  {
    case 0uLL:
      objc_msgSend(v11, "setAccessibilityIdentifier:", CFSTR("DriveButton"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v14 = v13;
      v15 = CFSTR("Drive [Transport Type Picker, Accessibility]");
      goto LABEL_17;
    case 1uLL:
      objc_msgSend(v11, "setAccessibilityIdentifier:", CFSTR("WalkButton"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v14 = v13;
      v15 = CFSTR("Walk [Transport Type Picker, Accessibility]");
      goto LABEL_17;
    case 2uLL:
      objc_msgSend(v11, "setAccessibilityIdentifier:", CFSTR("TransitButton"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v14 = v13;
      v15 = CFSTR("Transit [Transport Type Picker, Accessibility]");
      goto LABEL_17;
    case 3uLL:
      objc_msgSend(v11, "setAccessibilityIdentifier:", CFSTR("RideshareButton"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v14 = v13;
      v15 = CFSTR("Ride [Transport Type Picker, Accessibility]");
      goto LABEL_17;
    case 4uLL:
      objc_msgSend(v11, "setAccessibilityIdentifier:", CFSTR("CyclingButton"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v14 = v13;
      v15 = CFSTR("Cycle [Transport Type Picker, Accessibility]");
LABEL_17:
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "localizedStringForKey:value:table:", v15, CFSTR("localized string not found"), 0));

      break;
    default:
      objc_msgSend(v11, "setAccessibilityIdentifier:", 0);
      v16 = 0;
      break;
  }
  objc_msgSend(v12, "setAccessibilityLabel:", v16);

  return v12;
}

id sub_1009D7A14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "insertSegmentWithImage:atIndex:animated:", a2, a3, 0);
}

void sub_1009D7A34(uint64_t a1, void *a2)
{
  id v3;
  TransportTypeSegment *v4;

  v3 = objc_msgSend(a2, "integerValue");
  v4 = -[TransportTypeSegment initWithTransportType:]([TransportTypeSegment alloc], "initWithTransportType:", v3);
  -[TransportTypeSegment setSelected:](v4, "setSelected:", v3 == *(id *)(*(_QWORD *)(a1 + 32) + 40));
  -[TransportTypeSegment setTranslatesAutoresizingMaskIntoConstraints:](v4, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  -[TransportTypeSegment addTarget:action:forControlEvents:](v4, "addTarget:action:forControlEvents:", *(_QWORD *)(a1 + 32), "_didSelectSegment:", 64);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "addObject:", v4);

}

void sub_1009D9228(uint64_t a1)
{
  id v1;
  uint64_t v2;
  void *v3;

  v1 = objc_msgSend(*(id *)(a1 + 32), "registrationWithCellClass:configurationHandler:", objc_opt_class(SmallButtonOutlineCell), &stru_1011DEAF8);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)qword_1014D3C08;
  qword_1014D3C08 = v2;

}

void sub_1009D9274(id a1, SmallButtonOutlineCell *a2, NSIndexPath *a3, MapsUIDiffableDataSourceOutlineNodeSnapshot *a4)
{
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  SmallButtonOutlineCell *v9;

  v9 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[MapsUIDiffableDataSourceOutlineNodeSnapshot viewModel](a4, "viewModel"));
  v6 = objc_opt_class(SmallButtonOutlineCellModel);
  if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0)
    v7 = v5;
  else
    v7 = 0;
  v8 = v7;

  -[SmallButtonOutlineCell setCellModel:](v9, "setCellModel:", v8);
}

void sub_1009D95C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1009D95EC(uint64_t a1, void *a2)
{
  id v3;
  id *WeakRetained;
  id *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  void *v28;
  id *v29;
  id obj;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];

  v3 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = WeakRetained;
    obj = WeakRetained[11];
    v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v32;
      do
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(_QWORD *)v32 != v8)
            objc_enumerationMutation(obj);
          v10 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)i);
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("latitude")));
          objc_msgSend(v11, "doubleValue");
          v13 = v12;

          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("longitude")));
          objc_msgSend(v14, "doubleValue");
          v16 = v15;

          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("heading")));
          objc_msgSend(v17, "doubleValue");
          v19 = v18;

          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("pitch")));
          objc_msgSend(v20, "doubleValue");
          v22 = v21;

          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("zoom")));
          objc_msgSend(v23, "doubleValue");
          v25 = v24;

          v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%0.4f %0.4f Z:%0.2f P:%0.2f H:%0.2f"), v13, v16, v25, v22, v19));
          v27 = objc_msgSend(v3, "addReadOnlyRowWithTitle:value:", v26, &stru_1011EB268);

        }
        v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
      }
      while (v7);
    }

    v5 = v29;
    v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Path: %@"), v29[12]));
    objc_msgSend(v3, "setFooter:", v28);

  }
}

void sub_1009D9878(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  _QWORD v11[4];
  id v12;
  _QWORD v13[4];
  id v14;
  _QWORD v15[4];
  id v16;
  _QWORD v17[4];
  id v18;

  v3 = a2;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_1009D9ABC;
  v17[3] = &unk_1011AD260;
  objc_copyWeak(&v18, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Clear All Locations"), v17);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1009D9C08;
  v15[3] = &unk_1011AD260;
  objc_copyWeak(&v16, (id *)(a1 + 32));
  v5 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Add Current Framing"), v15);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1009D9F3C;
  v13[3] = &unk_1011AD260;
  objc_copyWeak(&v14, (id *)(a1 + 32));
  v6 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Share key frame File"), v13);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1009DA050;
  v11[3] = &unk_1011AD260;
  objc_copyWeak(&v12, (id *)(a1 + 32));
  v7 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Copy key frame file path"), v11);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1009DA0B4;
  v9[3] = &unk_1011AD260;
  objc_copyWeak(&v10, (id *)(a1 + 32));
  v8 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Play Animation"), v9);
  objc_destroyWeak(&v10);
  objc_destroyWeak(&v12);
  objc_destroyWeak(&v14);
  objc_destroyWeak(&v16);
  objc_destroyWeak(&v18);

}

void sub_1009D9A68(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  id *v5;

  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1009D9ABC(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  void *v4;
  _QWORD v5[5];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", CFSTR("Alert"), CFSTR("Do you want to clear list"), 1));
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1009D9BD0;
    v5[3] = &unk_1011AD938;
    v5[4] = WeakRetained;
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", CFSTR("Yes"), 0, v5));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", CFSTR("Cancel"), 0, &stru_1011DEB18));
    objc_msgSend(v2, "addAction:", v3);
    objc_msgSend(v2, "addAction:", v4);
    objc_msgSend(WeakRetained, "presentViewController:animated:completion:", v2, 1, 0);

  }
}

id sub_1009D9BD0(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "removeAllObjects");
  return objc_msgSend(*(id *)(a1 + 32), "saveFileAndReload");
}

void sub_1009D9C08(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  void *v4;
  _QWORD v5[5];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", CFSTR("Alert"), CFSTR("Do you want to add yoru current map view to list?"), 1));
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1009D9D1C;
    v5[3] = &unk_1011AD938;
    v5[4] = WeakRetained;
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", CFSTR("Yes"), 0, v5));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", CFSTR("Cancel"), 0, &stru_1011DEB38));
    objc_msgSend(v2, "addAction:", v3);
    objc_msgSend(v2, "addAction:", v4);
    objc_msgSend(WeakRetained, "presentViewController:animated:completion:", v2, 1, 0);

  }
}

void sub_1009D9D1C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  double v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD v14[6];
  _QWORD v15[6];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "allVisibleMapViewsForDebugController:", *(_QWORD *)(a1 + 32)));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "firstObject"));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "camera"));
  v14[0] = CFSTR("latitude");
  objc_msgSend(v5, "centerCoordinate");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
  v15[0] = v6;
  v14[1] = CFSTR("longitude");
  objc_msgSend(v5, "centerCoordinate");
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v7));
  v15[1] = v8;
  v14[2] = CFSTR("heading");
  objc_msgSend(v5, "heading");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
  v15[2] = v9;
  v14[3] = CFSTR("pitch");
  objc_msgSend(v5, "pitch");
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
  v15[3] = v10;
  v14[4] = CFSTR("zoom");
  objc_msgSend(v5, "centerCoordinateDistance");
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
  v15[4] = v11;
  v14[5] = CFSTR("animationDuration");
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", 10.0));
  v15[5] = v12;
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v15, v14, 6));

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "addObject:", v13);
  objc_msgSend(*(id *)(a1 + 32), "saveFileAndReload");

}

void sub_1009D9F3C(uint64_t a1)
{
  _QWORD *WeakRetained;
  void *v2;
  MapsDebugFileExportController *v3;
  id v4;
  _QWORD v5[4];
  id v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", WeakRetained[12]));
    v3 = -[MapsDebugFileExportController initWithFileAtURL:presentingViewController:]([MapsDebugFileExportController alloc], "initWithFileAtURL:presentingViewController:", v2, WeakRetained);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1009DA008;
    v5[3] = &unk_1011AC860;
    v6 = v2;
    v4 = v2;
    -[MapsDebugFileExportController startWithCompletion:](v3, "startWithCompletion:", v5);

  }
}

void sub_1009DA008(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  objc_msgSend(v2, "removeItemAtURL:error:", *(_QWORD *)(a1 + 32), 0);

}

void sub_1009DA050(uint64_t a1)
{
  void *v1;
  _QWORD *WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIPasteboard generalPasteboard](UIPasteboard, "generalPasteboard"));
    objc_msgSend(v1, "setString:", WeakRetained[12]);

  }
}

void sub_1009DA0B4(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_animationToIndex:", 0);
    objc_msgSend(v2, "dismissViewControllerAnimated:completion:", 1, 0);
    WeakRetained = v2;
  }

}

void sub_1009DA380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1009DA39C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setCamera:", *(_QWORD *)(a1 + 40));
}

void sub_1009DA3A8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_animationToIndex:", *(_QWORD *)(a1 + 40) + 1);

}

id sub_1009DB8EC(id a1, TransitDirectionsBoardingInfoView *a2, unint64_t a3)
{
  void *v3;

  v3 = -[TransitDirectionsBoardingInfoView resolvedLayout](a2, "resolvedLayout", a3);
  if (v3)
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v3));
  return v3;
}

void sub_1009DB91C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  id WeakRetained;
  id v8;

  v8 = a2;
  objc_msgSend(v8, "setForceVerticalAxis:", *(unsigned __int8 *)(a1 + 48));
  objc_msgSend(v8, "setUseAlternativeInstruction:", a3 == 0);
  objc_msgSend(v8, "setSeparatorHidden:", *(_QWORD *)(a1 + 40) == a3);
  if (*(_QWORD *)(a1 + 40) == a3)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)(v5 + 72);
    WeakRetained = objc_loadWeakRetained((id *)(v5 + 80));
    objc_msgSend(v8, "setButtonTitle:target:action:", v6, WeakRetained, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 88));

  }
  else
  {
    objc_msgSend(v8, "setButtonTitle:target:action:", 0, 0, 0);
  }

}

void sub_1009DBD9C(uint64_t a1, void *a2, unint64_t a3)
{
  id v5;
  double v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;

  v5 = a2;
  v6 = 0.0;
  if (!*(_BYTE *)(a1 + 56))
  {
    if (*(_QWORD *)(a1 + 48) - 1 <= a3)
      v6 = 0.0;
    else
      v6 = -78.0;
  }
  v14 = v5;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "fixedWidthConstraint"));

  if (!v7)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "widthAnchor"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "widthAnchor"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "constraintEqualToAnchor:multiplier:", v9, 1.0));
    objc_msgSend(v14, "setFixedWidthConstraint:", v10);

  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "fixedWidthConstraint"));
  objc_msgSend(v11, "setConstant:", v6);

  v12 = *(void **)(a1 + 40);
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "fixedWidthConstraint"));
  objc_msgSend(v12, "addObject:", v13);

}

BOOL sub_1009DCF90(uint64_t a1, uint64_t a2)
{
  return (*(_QWORD *)(a1 + 32) & a2) != 0;
}

void sub_1009DDA3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v6;
  id v7;

  v5 = 40;
  if (!a3)
    v5 = 32;
  v6 = *(id *)(a1 + v5);
  v7 = (id)objc_claimAutoreleasedReturnValue(+[NSAttributedString _mapkit_attributedStringForComposedString:defaultAttributes:](NSAttributedString, "_mapkit_attributedStringForComposedString:defaultAttributes:", a2, v6));
  objc_msgSend(*(id *)(a1 + 48), "addObject:", v7);

}

id sub_1009DE114()
{
  if (qword_1014D3C20 != -1)
    dispatch_once(&qword_1014D3C20, &stru_1011DEC58);
  return (id)qword_1014D3C18;
}

void sub_1009DEBE0(uint64_t a1, void *a2, unint64_t a3)
{
  id v5;
  void *v6;
  _BOOL8 v7;
  __int128 v8;
  _OWORD v9[3];
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v5 = a2;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 40) > a3 || *(_QWORD *)(a1 + 48) < a3;
  objc_msgSend(v5, "setHidden:", v7);
  objc_msgSend(v6, "setDrawingScale:", *(double *)(a1 + 56));
  objc_msgSend(v6, "setVerticalOffset:", *(double *)(a1 + 64));
  if (objc_msgSend(*(id *)(a1 + 32), "shouldTransformWithVerticalScale"))
  {
    objc_msgSend(*(id *)(a1 + 32), "verticalScale");
    if (v6)
    {
      objc_msgSend(v6, "_maps_transformScaledToTopAtScale:");
    }
    else
    {
      v11 = 0u;
      v12 = 0u;
      v10 = 0u;
    }
  }
  else
  {
    v8 = *(_OWORD *)&CGAffineTransformIdentity.c;
    v10 = *(_OWORD *)&CGAffineTransformIdentity.a;
    v11 = v8;
    v12 = *(_OWORD *)&CGAffineTransformIdentity.tx;
  }
  v9[0] = v10;
  v9[1] = v11;
  v9[2] = v12;
  objc_msgSend(v6, "setTransform:", v9);

}

void sub_1009DFF64(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "NavSignLaneGuidanceView");
  v2 = (void *)qword_1014D3C18;
  qword_1014D3C18 = (uint64_t)v1;

}

void sub_1009E0160(id a1, RAPDirectionInstructionsIncorrectQuestion *a2, RAPReportComposerDirectionInstructionsIncorrectViewController *a3)
{
  _BOOL8 v4;
  void *v5;
  RAPReportComposerDirectionInstructionsIncorrectViewController *v6;

  v6 = a3;
  v4 = -[RAPDirectionInstructionsIncorrectQuestion isComplete](a2, "isComplete");
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[RAPReportViewController sendButtonItem](v6, "sendButtonItem"));
  objc_msgSend(v5, "setEnabled:", v4);

  -[RAPReportComposerDirectionInstructionsIncorrectViewController _reloadTableViews](v6, "_reloadTableViews");
}

void sub_1009E0F54(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1009E0FCC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1009E16EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1009E1714(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1009E1724(uint64_t a1)
{

}

void sub_1009E172C(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_1009E173C(id a1, NSError *a2)
{
  id v2;
  NSObject *v3;
  id v4;
  NSObject *v5;
  char *v6;
  int v7;
  const char *v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  int v12;

  v2 = sub_1004318FC();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v7 = 136315650;
    v8 = "-[RoutePlanningAnalyticsTask routePlanningSession:didUpdateRouteCollectionResult:forTransportType:]_block_invoke_2";
    v9 = 2080;
    v10 = "RoutePlanningAnalyticsTask.m";
    v11 = 1024;
    v12 = 87;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%s [%s:%d] Assertion reached unexpectedly!", (uint8_t *)&v7, 0x1Cu);
  }

  if (sub_100A70734())
  {
    v4 = sub_1004318FC();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = (char *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
      v7 = 138412290;
      v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&v7, 0xCu);

    }
  }
}

void sub_1009E1A30(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "title"));

  if (v4)
  {
    v5 = *(void **)(a1 + 32);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "title"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString _navigation_stringForServerFormattedString:](NSString, "_navigation_stringForServerFormattedString:", v6));
    objc_msgSend(v5, "addObject:", v7);

  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "messageStrings"));

  if (v8)
  {
    v9 = objc_alloc_init((Class)NSMutableArray);
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "messageStrings", 0));
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v19;
      do
      {
        v14 = 0;
        do
        {
          if (*(_QWORD *)v19 != v13)
            objc_enumerationMutation(v10);
          v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString _navigation_stringForServerFormattedString:](NSString, "_navigation_stringForServerFormattedString:", *(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)v14)));
          objc_msgSend(v9, "addObject:", v15);

          v14 = (char *)v14 + 1;
        }
        while (v12 != v14);
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      }
      while (v12);
    }

    v16 = *(void **)(a1 + 32);
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "componentsJoinedByString:", CFSTR("\n")));
    objc_msgSend(v16, "addObject:", v17);

  }
}

void sub_1009E20C0(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_updateConstraints");
  objc_msgSend(*(id *)(a1 + 32), "setNeedsLayout");
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "containerLayoutDelegate"));
  objc_msgSend(v2, "layoutNavContainer");

}

void sub_1009E3998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1009E39B8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1009E39C8(uint64_t a1)
{

}

void sub_1009E39D0(uint64_t a1, void *a2)
{
  uint64_t v4;
  char isKindOfClass;
  void *v6;
  id v7;
  void *v8;
  double v9;
  double v10;
  void *v11;
  double v12;
  double v13;
  id v14;

  v14 = a2;
  v4 = objc_opt_class(NSTextAttachment);
  isKindOfClass = objc_opt_isKindOfClass(v14, v4);
  v6 = v14;
  if ((isKindOfClass & 1) != 0)
  {
    v7 = v14;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "image"));
    objc_msgSend(v8, "size");
    v10 = v9;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "image"));
    objc_msgSend(v11, "size");
    v13 = v12;

    if (v10 > v13)
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);

    v6 = v14;
  }

}

id sub_1009E3F9C(void *a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  NSSet *v5;
  void *v6;
  void *v7;

  if (a2)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "objectForKeyedSubscript:", a2));
    v3 = objc_opt_class(NSData);
    if ((objc_opt_isKindOfClass(v2, v3) & 1) != 0)
    {
      v4 = objc_opt_class(NSArray);
      v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(MKServerFormattedString), 0);
      v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClasses:fromData:error:", v6, v2, 0));

    }
    else
    {
      v7 = 0;
    }

  }
  else
  {
    v7 = 0;
  }
  return v7;
}

void sub_1009E4888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1009E48A0(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v7;
  id v8;
  void *v9;
  void *v10;
  unsigned int v11;
  unsigned int v12;

  v7 = *(void **)(a1 + 32);
  v8 = a2;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "toggles"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectAtIndexedSubscript:", a3));
  v11 = objc_msgSend(v10, "isSelected");
  v12 = objc_msgSend(v8, "isSelected");

  if (v11 != v12)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
    *a4 = 1;
  }
}

void sub_1009E4978(id a1, AllRefinementsViewModelToggle *a2, unint64_t a3, BOOL *a4)
{
  -[AllRefinementsViewModelToggle setIsSelected:](a2, "setIsSelected:", 0, a4);
}

void sub_1009E4C30(id a1, AllRefinementsViewModelMultiSelectElement *a2, unint64_t a3, BOOL *a4)
{
  -[AllRefinementsViewModelMultiSelectElement setIsSelected:](a2, "setIsSelected:", 0, a4);
}

void sub_1009E4D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1009E4D70(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v7;
  id v8;
  void *v9;
  void *v10;
  unsigned int v11;
  unsigned int v12;

  v7 = *(void **)(a1 + 32);
  v8 = a2;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "elements"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectAtIndexedSubscript:", a3));
  v11 = objc_msgSend(v10, "isSelected");
  v12 = objc_msgSend(v8, "isSelected");

  if (v11 != v12)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
    *a4 = 1;
  }
}

void sub_1009E5EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1009E5F1C(uint64_t a1, void *a2, void *a3, int a4)
{
  id v7;
  id v8;
  id *v9;
  id WeakRetained;
  void *v11;
  void *v12;
  double v13;
  id v14;
  void *v15;
  _QWORD v16[4];
  id v17;
  id v18;

  v7 = a2;
  v8 = a3;
  if (!v8)
  {
    v9 = (id *)(a1 + 40);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "model"));
    v12 = *(void **)(a1 + 32);

    if (v11 == v12)
    {
      if (a4)
        v13 = 0.0;
      else
        v13 = 0.300000012;
      v14 = objc_loadWeakRetained(v9);
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "itemImageView"));
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_1009E607C;
      v16[3] = &unk_1011AD1E8;
      objc_copyWeak(&v18, v9);
      v17 = v7;
      +[UIView transitionWithView:duration:options:animations:completion:](UIView, "transitionWithView:duration:options:animations:completion:", v15, 5242882, v16, 0, v13);

      objc_destroyWeak(&v18);
    }
  }

}

void sub_1009E6068(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1009E607C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id WeakRetained;

  v1 = *(_QWORD *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "itemImageView"));
  objc_msgSend(v2, "setImage:", v1);

}

void sub_1009E61D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1009E61FC(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = *(void **)(a1 + 32);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "model"));
    objc_msgSend(v5, "isEqual:", v6);

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "poiIconImageView"));
    objc_msgSend(v7, "setImage:");

  }
}

void sub_1009E7578(uint64_t a1)
{
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  id location;

  v1 = *(void **)(a1 + 32);
  v2 = objc_initWeak(&location, v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "menuForAddButton"));

  v4 = objc_loadWeakRetained(&location);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "addToLibraryOrUserCollectionsButton"));
  if (v3)
    objc_msgSend(v5, "setMenu:", v3);
  else
    objc_msgSend(v5, "setEnabled:", 0);

  objc_destroyWeak(&location);
}

void sub_1009E7624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1009E78EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1009E793C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_tappedAddToUserCollection:", *(_QWORD *)(a1 + 32));

}

BOOL sub_1009E8520(id a1, GEOMapItemIdentifier *a2, NSDate *a3, BOOL *a4)
{
  double v4;

  -[NSDate timeIntervalSinceNow](a3, "timeIntervalSinceNow");
  return fabs(v4) >= 86100.0;
}

id sub_1009E854C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "scheduleEviction");
}

BOOL sub_1009E8D24(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  _BOOL8 v6;

  v2 = *(__int16 *)(a1 + 32);
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", v2));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "floorOrdinal"));

  v6 = +[NSNumber number:isEqualToNumber:](NSNumber, "number:isEqualToNumber:", v4, v5);
  return v6;
}

BOOL sub_1009E8DAC(id a1, VenueAreaIdentifier *a2)
{
  void *v2;
  BOOL v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[VenueAreaIdentifier floorOrdinal](a2, "floorOrdinal"));
  v3 = v2 != 0;

  return v3;
}

BOOL sub_1009E9520(id a1, VenueAreaIdentifier *a2)
{
  return 1;
}

void sub_1009E9DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1009E9DF0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;
  id WeakRetained;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v5 = a2;
  v6 = v5;
  if (!a3)
  {
    v13 = v5;
    v7 = objc_msgSend(v5, "count");
    v6 = v13;
    if (v7)
    {
      WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
      if (WeakRetained)
      {
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "firstObject"));
        if (*(_BYTE *)(a1 + 48))
        {
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "actionCoordinator"));
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "mapCameraController"));
          objc_msgSend(v11, "frameMapItem:animated:completion:", v9, 1, 0);

        }
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "actionCoordinator"));
        objc_msgSend(v12, "viewController:selectMapItem:address:addToHistory:source:", 0, v9, 0, *(unsigned __int8 *)(a1 + 49), *(_QWORD *)(a1 + 40));

      }
      v6 = v13;
    }
  }

}

void sub_1009EA014(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "venueFloorViewController"));
  objc_msgSend(v1, "setOpen:animated:", 0, 1);

}

void sub_1009EA874(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "venueFloorViewController"));
  objc_msgSend(v1, "setOpen:animated:", 0, 1);

}

void sub_1009EBB24(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CRSUIDashboardWidgetWindowMapsExtras");
  v2 = (void *)qword_1014D3C28;
  qword_1014D3C28 = (uint64_t)v1;

}

void sub_1009ED9BC(id a1)
{
  NavigationFeedbackCollector *v1;
  NavigationFeedbackCollector *v2;
  void *v3;
  id v4;

  v1 = [NavigationFeedbackCollector alloc];
  v4 = (id)objc_claimAutoreleasedReturnValue(+[MNNavigationService sharedService](MNNavigationService, "sharedService"));
  v2 = -[NavigationFeedbackCollector initWithNavigationService:](v1, "initWithNavigationService:", v4);
  v3 = (void *)qword_1014D3C38;
  qword_1014D3C38 = (uint64_t)v2;

}

void sub_1009EDE2C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 32));
  _Unwind_Resume(a1);
}

void sub_1009EDE50(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  uint64_t Log;
  _QWORD v12[4];
  NSObject *v13;
  uint8_t buf[4];
  id v15;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (!v5 || v6)
    {
      Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "NavigationFeedbackCollector");
      v10 = objc_claimAutoreleasedReturnValue(Log);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v15 = v6;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed to get virtualGarage with error: %@.", buf, 0xCu);
      }
    }
    else
    {
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_1009EDFB0;
      v12[3] = &unk_1011DEF00;
      v8 = v5;
      v13 = v8;
      objc_msgSend(WeakRetained, "_runAsyncBlockOnLocalQueue:", v12);
      v9 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject vehicles](v8, "vehicles"));
      objc_msgSend(WeakRetained, "_captureVirtualGarageAnalytics:", v9);

      v10 = v13;
    }

  }
}

void sub_1009EDFB0(uint64_t a1, void *a2)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  id v5;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "selectedVehicle"));
  v5 = (id)v3[18];
  v3[18] = v4;

}

void sub_1009EE230(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
  if (v2)
  {
    v7 = v2;
    v3 = *(void **)(*(_QWORD *)(a1 + 32) + 32);
    if (!v3)
    {
      v4 = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
      v5 = *(_QWORD *)(a1 + 32);
      v6 = *(void **)(v5 + 32);
      *(_QWORD *)(v5 + 32) = v4;

      v3 = *(void **)(*(_QWORD *)(a1 + 32) + 32);
    }
    objc_msgSend(v3, "addObject:", *(_QWORD *)(a1 + 40));
    v2 = v7;
  }

}

void sub_1009EE2D4(id a1, NavigationFeedbackCollector *a2)
{
  NavigationFeedbackCollector *v2;
  _BOOL8 wasEverConnectedToCarplay;
  id v4;

  v2 = a2;
  v4 = (id)objc_claimAutoreleasedReturnValue(-[NavigationFeedbackCollector feedbackCollector](v2, "feedbackCollector"));
  wasEverConnectedToCarplay = v2->_wasEverConnectedToCarplay;

  objc_msgSend(v4, "setWasEverConnectedToCarplay:", wasEverConnectedToCarplay);
}

void sub_1009EE3D0(id a1, NavigationFeedbackCollector *a2)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(-[NavigationFeedbackCollector feedbackCollector](a2, "feedbackCollector"));
  objc_msgSend(v2, "setIsEVRoute:", 1);

}

void sub_1009EE410(id a1, NavigationFeedbackCollector *a2)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(-[NavigationFeedbackCollector feedbackCollector](a2, "feedbackCollector"));
  objc_msgSend(v2, "setDidSuggestWalkingRoute:", 1);

}

void sub_1009EE450(id a1, NavigationFeedbackCollector *a2)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(-[NavigationFeedbackCollector feedbackCollector](a2, "feedbackCollector"));
  objc_msgSend(v2, "setUserDidAcceptWalkingRoute:", 1);

}

void sub_1009EE490(id a1, NavigationFeedbackCollector *a2)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(-[NavigationFeedbackCollector feedbackCollector](a2, "feedbackCollector"));
  objc_msgSend(v2, "setDidSuggestFindMy:", 1);

}

void sub_1009EE4D0(id a1, NavigationFeedbackCollector *a2)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(-[NavigationFeedbackCollector feedbackCollector](a2, "feedbackCollector"));
  objc_msgSend(v2, "setUserDidLaunchFindMy:", 1);

}

void sub_1009EE660(id a1, NavigationFeedbackCollector *a2)
{
  NavigationFeedbackCollector *v2;
  NSArray *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  v2 = a2;
  -[GEOStepFeedback setRoutePaused:](v2->_stepFeedback, "setRoutePaused:", 1);
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = v2->_chargingSteps;
  v4 = -[NSArray countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = 0;
    v7 = *(_QWORD *)v12;
    while (2)
    {
      v8 = 0;
      v9 = v6;
      do
      {
        if (*(_QWORD *)v12 != v7)
          objc_enumerationMutation(v3);
        v10 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)v8);
        if (!objc_msgSend(v10, "arrivedAtChargeLocation", (_QWORD)v11))
        {
          v6 = v9;
          goto LABEL_12;
        }
        v6 = v10;

        v8 = (char *)v8 + 1;
        v9 = v6;
      }
      while (v5 != v8);
      v5 = -[NSArray countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v5)
        continue;
      break;
    }
  }
  else
  {
    v6 = 0;
  }
LABEL_12:

  objc_msgSend(v6, "setRoutePaused:", 1);
}

void sub_1009EE7B4(id a1, NavigationFeedbackCollector *a2)
{
  id v2;

  a2->_batteryDied = 1;
  v2 = (id)objc_claimAutoreleasedReturnValue(-[NavigationFeedbackCollector feedbackCollector](a2, "feedbackCollector"));
  objc_msgSend(v2, "setBatteryDied:", 1);

}

void sub_1009EE870(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id *v13;

  v13 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentRoute"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "waypoints"));
  v5 = objc_msgSend(v4, "count");
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "waypoints"));
  v7 = objc_msgSend(v6, "count");

  if (v5 >= v7)
  {
    v11 = (void *)objc_opt_new(GEODodgeballDetails);
    v9 = v11;
    if (*(_BYTE *)(a1 + 48))
      v12 = 1;
    else
      v12 = 2;
    objc_msgSend(v11, "setDodgeballAction:", v12);
    objc_msgSend(v13[14], "addObject:", v9);
  }
  else
  {
    v8 = (void *)objc_opt_new(GEOStopAddedDetails);
    v9 = v8;
    if (*(_BYTE *)(a1 + 48))
      v10 = 1;
    else
      v10 = 2;
    objc_msgSend(v8, "setStopAddedAction:", v10);
    objc_msgSend(v13[13], "addObject:", v9);
    if (*(_BYTE *)(a1 + 48))
      objc_msgSend(v13[27], "setChargingStopAdded:", 1);
  }

}

BOOL sub_1009EEA30(id a1, GEOComposedWaypoint *a2, unint64_t a3, BOOL *a4)
{
  void *v5;

  v5 = (void *)objc_claimAutoreleasedReturnValue(-[GEOComposedWaypoint chargingInfo](a2, "chargingInfo", a3));

  if (v5)
    *a4 = 1;
  return v5 != 0;
}

void sub_1009EEB9C(id a1, NavigationFeedbackCollector *a2)
{
  NavigationFeedbackCollector *v2;
  void *v3;
  unsigned int v4;
  uint64_t v5;
  NSNumber *initialStateOfCharge;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  NSNumber *expectedFinalStateOfCharge;
  uint64_t Log;
  NSObject *v17;
  uint8_t v18[16];

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(-[NavigationFeedbackCollector currentRoute](v2, "currentRoute"));
  v4 = objc_msgSend(v3, "isEVRoute");

  if (v4)
  {
    -[NavigationEVBadTripFeedbackCollector startRecording](v2->_badTripCollector, "startRecording");
    v5 = objc_claimAutoreleasedReturnValue(-[NavigationFeedbackCollector _stateOfChargeOfCurrentVehicle](v2, "_stateOfChargeOfCurrentVehicle"));
    initialStateOfCharge = v2->_initialStateOfCharge;
    v2->_initialStateOfCharge = (NSNumber *)v5;

    v7 = (void *)objc_claimAutoreleasedReturnValue(-[NavigationFeedbackCollector currentRoute](v2, "currentRoute"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "steps"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "lastObject"));

    v10 = objc_opt_class(GEOComposedRouteStep);
    if ((objc_opt_isKindOfClass(v9, v10) & 1) != 0)
      v11 = v9;
    else
      v11 = 0;
    v12 = v11;

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "evInfo"));
    if (v13)
    {
      v14 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v13, "remainingBatteryCharge")));
      expectedFinalStateOfCharge = v2->_expectedFinalStateOfCharge;
      v2->_expectedFinalStateOfCharge = (NSNumber *)v14;

    }
    else
    {
      Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "NavigationFeedbackCollector");
      v17 = objc_claimAutoreleasedReturnValue(Log);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "_saveExpectedFinalStateOfChargeIfNeeded: EV route didn't have a step info in the last step.", v18, 2u);
      }

    }
  }

}

GEOWaypointInfo *__cdecl sub_1009EEF98(id a1, GEOComposedRouteLeg *a2, unint64_t a3)
{
  GEOComposedRouteLeg *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  double v10;
  double v11;
  double v12;

  v3 = a2;
  v4 = objc_alloc_init((Class)GEOWaypointInfo);
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[GEOComposedRouteLeg destination](v3, "destination"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "latLng"));
  objc_msgSend(v4, "setPosition:", v6);

  v7 = (void *)objc_claimAutoreleasedReturnValue(-[GEOComposedRouteLeg chargingStationInfo](v3, "chargingStationInfo"));
  if (v7)
  {
    objc_msgSend(v4, "setMuid:", objc_msgSend(v7, "muid"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "name"));
    objc_msgSend(v4, "setName:", v8);

    v9 = objc_alloc_init((Class)GEOEVChargingInfo);
    objc_msgSend(v7, "batteryChargeAfterCharging");
    objc_msgSend(v9, "setBatteryChargeAfterCharging:", v10);
    objc_msgSend(v7, "batteryPercentageAfterCharging");
    objc_msgSend(v9, "setBatteryPercentageAfterCharging:", v11);
    objc_msgSend(v7, "chargingTime");
    objc_msgSend(v9, "setChargingTime:", v12);
    objc_msgSend(v4, "setEvChargingInfo:", v9);

  }
  return (GEOWaypointInfo *)v4;
}

void sub_1009EF0C0(id a1, NavigationFeedbackCollector *a2)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  NSArray *chargingSteps;
  NavigationFeedbackCollector *v10;

  v10 = a2;
  v2 = (void *)objc_claimAutoreleasedReturnValue(-[NavigationFeedbackCollector currentRoute](v10, "currentRoute"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "chargingStationInfos"));
  v4 = objc_msgSend(v3, "count");

  if (v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(-[NavigationFeedbackCollector currentRoute](v10, "currentRoute"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "chargingStationInfos"));
    v7 = sub_10039DCD4(v6, &stru_1011DF150);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    chargingSteps = v10->_chargingSteps;
    v10->_chargingSteps = (NSArray *)v8;

  }
}

GEOChargeLocationDetails *__cdecl sub_1009EF164(id a1, GEOComposedRouteStep *a2, unint64_t a3)
{
  return (GEOChargeLocationDetails *)objc_alloc_init((Class)GEOChargeLocationDetails);
}

void sub_1009EF1F8(uint64_t a1, void *a2)
{
  id *v3;
  void *v4;
  unsigned int v5;
  void *v6;
  void *v7;
  unint64_t v8;
  NSObject *v9;
  uint64_t Log;
  void *v11;
  void **v12;
  uint64_t v13;
  void (*v14)(uint64_t, void *, uint64_t, _BYTE *);
  void *v15;
  id v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t buf[4];
  void *v23;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "currentRoute"));
  v5 = objc_msgSend(v4, "isEVRoute");

  if (v5)
  {
    v18 = 0;
    v19 = &v18;
    v20 = 0x2020000000;
    v21 = 0x7FFFFFFFFFFFFFFFLL;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "currentRoute"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "chargingStationInfos"));
    v12 = _NSConcreteStackBlock;
    v13 = 3221225472;
    v14 = sub_1009EF404;
    v15 = &unk_1011DF178;
    v16 = *(id *)(a1 + 32);
    v17 = &v18;
    objc_msgSend(v7, "enumerateObjectsUsingBlock:", &v12);

    v8 = v19[3];
    if (v8 == 0x7FFFFFFFFFFFFFFFLL || v8 >= (unint64_t)objc_msgSend(v3[12], "count", v12, v13, v14, v15))
    {
      Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "NavigationFeedbackCollector");
      v9 = (id)objc_claimAutoreleasedReturnValue(Log);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "shortDescription"));
        *(_DWORD *)buf = 138412290;
        v23 = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "_captureArrivalAtWaypoint: %@, couldn't find correct charging step", buf, 0xCu);

      }
    }
    else
    {
      v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3[12], "objectAtIndexedSubscript:", v19[3]));
      -[NSObject setArrivedAtChargeLocation:](v9, "setArrivedAtChargeLocation:", 1);
    }

    _Block_object_dispose(&v18, 8);
  }

}

void sub_1009EF3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1009EF404(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;

  v11 = a2;
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chargingInfo"));
  if (v7 == v11)
  {

  }
  else
  {
    v8 = objc_msgSend(v11, "muid");
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chargingInfo"));
    v10 = objc_msgSend(v9, "muid");

    if (v8 != v10)
      goto LABEL_6;
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a3;
  *a4 = 1;
LABEL_6:

}

void sub_1009EF5E0(uint64_t a1)
{
  id WeakRetained;
  uint64_t Log;
  NSObject *v4;
  NSString *v5;
  void *v6;
  int v7;
  void *v8;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "NavigationFeedbackCollector");
    v4 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = NSStringFromSelector(*(SEL *)(a1 + 48));
      v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      v7 = 138412290;
      v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "NavigationFeedbackCollector was deallocated in %@ before executing feedback collection block.", (uint8_t *)&v7, 0xCu);

    }
  }

}

void sub_1009EF7E0(uint64_t a1)
{
  id WeakRetained;
  uint64_t Log;
  NSObject *v4;
  NSString *v5;
  void *v6;
  int v7;
  void *v8;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "NavigationFeedbackCollector");
    v4 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = NSStringFromSelector(*(SEL *)(a1 + 48));
      v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      v7 = 138412290;
      v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "NavigationFeedbackCollector was deallocated in %@ before executing feedback collection block.", (uint8_t *)&v7, 0xCu);

    }
  }

}

int64_t sub_1009F0810(id a1, MNGuidanceEventFeedback *a2, MNGuidanceEventFeedback *a3)
{
  MNGuidanceEventFeedback *v4;
  MNGuidanceEventFeedback *v5;
  double v6;
  double v7;
  double v8;
  int64_t v9;
  double v10;
  double v11;
  double v12;

  v4 = a2;
  v5 = a3;
  -[MNGuidanceEventFeedback startTime](v4, "startTime");
  v7 = v6;
  -[MNGuidanceEventFeedback startTime](v5, "startTime");
  if (v7 >= v8)
  {
    -[MNGuidanceEventFeedback startTime](v4, "startTime");
    v11 = v10;
    -[MNGuidanceEventFeedback startTime](v5, "startTime");
    v9 = v11 > v12;
  }
  else
  {
    v9 = -1;
  }

  return v9;
}

void sub_1009F0A74(uint64_t a1)
{
  NSDateFormatter *v1;
  void *v2;
  void *i;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  __CFString *v9;
  __CFString *v10;
  void *v11;
  NSDateFormatter *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  NSDateFormatter *v18;
  MapsRadarDraft *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  NSObject *v24;
  uint64_t v25;
  id v26;
  void *v27;
  objc_class *v28;
  NSString *v29;
  void *v30;
  void *v31;
  void *v32;
  __CFString *v33;
  id v34;
  id v35;
  void *v36;
  objc_class *v37;
  NSString *v38;
  void *v39;
  void *v40;
  void *v41;
  __CFString *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  id obj;
  uint64_t v49;
  id v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint8_t buf[4];
  __CFString *v56;
  __int16 v57;
  void *v58;
  _BYTE v59[128];

  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  obj = *(id *)(*(_QWORD *)(a1 + 32) + 152);
  v50 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v51, v59, 16);
  v1 = 0;
  v2 = 0;
  if (v50)
  {
    v49 = *(_QWORD *)v52;
    do
    {
      for (i = 0; i != v50; i = (char *)i + 1)
      {
        if (*(_QWORD *)v52 != v49)
          objc_enumerationMutation(obj);
        v4 = *(void **)(*((_QWORD *)&v51 + 1) + 8 * (_QWORD)i);
        v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "error"));
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "_geo_directionsErrorInfo"));

        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "error"));
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "_geo_etaTrafficUpdateErrorInfo"));

        if ((objc_msgSend(v6, "shouldPromptForRadar") & 1) != 0
          || objc_msgSend(v8, "shouldPromptForRadar"))
        {
          if (v2)
          {
            if (v1)
            {
LABEL_10:
              v9 = CFSTR("Directions");
              if (!v6)
                v9 = CFSTR("ETAU");
              v10 = v9;
              v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "date"));
              v12 = v1;
              v13 = (void *)objc_claimAutoreleasedReturnValue(-[NSDateFormatter stringFromDate:](v1, "stringFromDate:", v11));
              v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString stringWithFormat:](NSMutableString, "stringWithFormat:", CFSTR("• %@ (%@)"), v13, v10));

              if (v6)
                v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "internalServerErrors"));
              else
                v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "internalErrors"));
              v16 = v15;
              v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "componentsJoinedByString:", CFSTR("\n   ")));
              objc_msgSend(v14, "appendFormat:", CFSTR("\n   %@"), v17);

              objc_msgSend(v2, "addObject:", v14);
              v1 = v12;
              goto LABEL_18;
            }
          }
          else
          {
            v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
            if (v1)
              goto LABEL_10;
          }
          v1 = objc_opt_new(NSDateFormatter);
          -[NSDateFormatter setDateFormat:](v1, "setDateFormat:", CFSTR("YYYY-MM-dd HH:mm:ssZ"));
          goto LABEL_10;
        }
LABEL_18:

      }
      v50 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v51, v59, 16);
    }
    while (v50);
  }

  if (objc_msgSend(v2, "count"))
  {
    v18 = v1;
    if (GEOConfigGetBOOL(NavigationConfig_ShouldShowRadarPromptForRoutingServiceErrors[0], NavigationConfig_ShouldShowRadarPromptForRoutingServiceErrors[1]))
    {
      v19 = objc_opt_new(MapsRadarDraft);
      -[MapsRadarDraft setTitle:](v19, "setTitle:", CFSTR("Routing service errors detected"));
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "componentsJoinedByString:", CFSTR("\n\n")));
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@\n"), v20));
      -[MapsRadarDraft setDescriptionText:](v19, "setDescriptionText:", v21);

      -[MapsRadarDraft setClassification:](v19, "setClassification:", 7);
      -[MapsRadarDraft setReproducibility:](v19, "setReproducibility:", 5);
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[MapsRadarComponent mapsNavFrameworkComponent](MapsRadarComponent, "mapsNavFrameworkComponent"));
      -[MapsRadarDraft setComponent:](v19, "setComponent:", v22);

      v23 = sub_100431C0C();
      v24 = objc_claimAutoreleasedReturnValue(v23);
      v25 = a1;
      if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
LABEL_40:

        v43 = (void *)objc_claimAutoreleasedReturnValue(+[MapsRadarController sharedInstance](MapsRadarController, "sharedInstance"));
        objc_msgSend(v43, "launchTTRWithRadar:promptTitle:fromViewController:", v19, CFSTR("Routing service errors were detected during navigation. Please file a Radar with a sysdiagnose."), 0);

        goto LABEL_43;
      }
      v26 = *(id *)(a1 + 32);
      v27 = v26;
      if (!v26)
      {
        v33 = CFSTR("<nil>");
        goto LABEL_39;
      }
      v28 = (objc_class *)objc_opt_class(v26);
      v29 = NSStringFromClass(v28);
      v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
      if ((objc_opt_respondsToSelector(v27, "accessibilityIdentifier") & 1) != 0)
      {
        v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "performSelector:", "accessibilityIdentifier"));
        v32 = v31;
        if (v31 && !objc_msgSend(v31, "isEqualToString:", v30))
        {
          v33 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v30, v27, v32));

          goto LABEL_29;
        }

      }
      v33 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v30, v27));
LABEL_29:

LABEL_39:
      *(_DWORD *)buf = 138543362;
      v56 = v33;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "[%{public}@] Launching TTR for Routing service errors.", buf, 0xCu);

      goto LABEL_40;
    }
    v34 = sub_100431C0C();
    v19 = (MapsRadarDraft *)objc_claimAutoreleasedReturnValue(v34);
    v25 = a1;
    if (!os_log_type_enabled(&v19->super, OS_LOG_TYPE_DEFAULT))
    {
LABEL_43:

      v45 = *(_QWORD *)(v25 + 32);
      v46 = *(void **)(v45 + 152);
      *(_QWORD *)(v45 + 152) = 0;

      v1 = v18;
      goto LABEL_44;
    }
    v35 = *(id *)(a1 + 32);
    v36 = v35;
    if (!v35)
    {
      v42 = CFSTR("<nil>");
      goto LABEL_42;
    }
    v37 = (objc_class *)objc_opt_class(v35);
    v38 = NSStringFromClass(v37);
    v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
    if ((objc_opt_respondsToSelector(v36, "accessibilityIdentifier") & 1) != 0)
    {
      v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "performSelector:", "accessibilityIdentifier"));
      v41 = v40;
      if (v40 && !objc_msgSend(v40, "isEqualToString:", v39))
      {
        v42 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v39, v36, v41));

        goto LABEL_37;
      }

    }
    v42 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v39, v36));
LABEL_37:

LABEL_42:
    v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "componentsJoinedByString:", CFSTR("\n\n")));
    *(_DWORD *)buf = 138543618;
    v56 = v42;
    v57 = 2112;
    v58 = v44;
    _os_log_impl((void *)&_mh_execute_header, &v19->super, OS_LOG_TYPE_DEFAULT, "[%{public}@] Routing service errors were detected, but not asking for Radar. Errors:\n\n%@\n", buf, 0x16u);

    goto LABEL_43;
  }
LABEL_44:

}

void sub_1009F10D0(uint64_t a1, void *a2)
{
  _QWORD *v3;
  void *v4;
  id v5;
  uint64_t Log;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  unsigned int v22;
  void *v23;
  void *v24;
  uint8_t v25[16];

  v3 = a2;
  objc_msgSend(v3, "reset");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MNNavigationService sharedService](MNNavigationService, "sharedService"));
  v5 = objc_msgSend(v4, "navigationTransportType");
  if ((_DWORD)v5 == 4)
  {
    Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "NavigationFeedbackCollector");
    v7 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "At the start of navigation there wasn't a transport type.", v25, 2u);
    }

    v5 = objc_msgSend(v4, "desiredTransportType");
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "feedbackCollector"));
  objc_msgSend(v8, "setTransportType:", v5);

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "route"));
  if (v9)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "currentResponse"));
    v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "directionsResponseID"));
    v12 = (void *)v3[1];
    v3[1] = v11;

    objc_msgSend(v3, "setCurrentRoute:", v9);
    if (objc_msgSend(v9, "isEVRoute"))
      objc_msgSend(v3, "_captureInitialEVRouteState");
    v13 = objc_msgSend(v3, "_navigationModeTypeForState:", *(_QWORD *)(a1 + 32));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "feedbackCollector"));
    objc_msgSend(v14, "startFeedbackSessionForResponseID:withNavigationType:", v3[1], v13);

    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "steps"));
    v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "firstObject"));
    v17 = (void *)v3[28];
    v3[28] = v16;

    objc_msgSend(v3, "_openNewStepFeedbackWithRoute:step:", v9, v3[28]);
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "feedbackCollector"));
    objc_msgSend(v18, "setOriginalExpectedTime:", (double)objc_msgSend(v9, "expectedTime"));

  }
  objc_msgSend(v3, "_runAsyncBlockOnMainQueue:", &stru_1011DF1D8);
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "currentRequest"));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "currentResponse"));
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[GEOUserSession sharedInstance](GEOUserSession, "sharedInstance"));
  v22 = objc_msgSend(v20, "hasDirectionsResponseID");
  if (v22)
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "directionsResponseID"));
  else
    v23 = 0;
  if ((objc_msgSend(v19, "hasOriginalDirectionsResponseID") & 1) != 0)
  {
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "originalDirectionsResponseID"));
    objc_msgSend(v21, "startNavigationSessionWithDirectionsID:originalDirectionsID:", v23, v24);

    if (!v22)
      goto LABEL_17;
    goto LABEL_16;
  }
  objc_msgSend(v21, "startNavigationSessionWithDirectionsID:originalDirectionsID:", v23, 0);
  if (v22)
LABEL_16:

LABEL_17:
}

void sub_1009F1384(id a1, NavigationFeedbackCollector *a2)
{
  NavigationFeedbackCollector *v2;
  NavigationAudioFeedbackCollector *v3;
  id v4;

  v2 = a2;
  v3 = objc_alloc_init(NavigationAudioFeedbackCollector);
  -[NavigationFeedbackCollector setAudioFeedbackCollector:](v2, "setAudioFeedbackCollector:", v3);

  v4 = (id)objc_claimAutoreleasedReturnValue(-[NavigationFeedbackCollector audioFeedbackCollector](v2, "audioFeedbackCollector"));
  objc_msgSend(v4, "startSession");

}

void sub_1009F1448(uint64_t a1, void *a2)
{
  id *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  unsigned int v12;
  void *v13;
  void *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  unsigned int v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  uint64_t Log;
  NSObject *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;

  v3 = a2;
  if (objc_msgSend(v3[26], "isEVRoute"))
  {
    objc_msgSend(v3, "_updateFeedbackCollectorWithEVData");
    objc_msgSend(v3, "_captureSessionlessEVRouteMessageIfNeeded");
  }
  if (v3[6])
    objc_msgSend(v3, "_completeCurrentStepFeedback:", 0);
  objc_msgSend(v3, "_flushModalitiesFeedback");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "lastLocation"));

  if (v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "feedbackCollector"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "lastLocation"));
    objc_msgSend(v5, "setFinalLocation:asArrival:", v6, objc_msgSend(v3, "didArrive"));

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "feedbackCollector"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "parkingDetectionLocation"));

    if (!v8)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "lastLocation"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "feedbackCollector"));
      objc_msgSend(v10, "setParkingDetectionLocation:", v9);

    }
  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "feedbackCollector"));
  v12 = objc_msgSend(v11, "userDidAcceptWalkingRoute");

  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "feedbackCollector"));
  v14 = v13;
  if (v12)
  {
    v15 = 3;
  }
  else
  {
    v16 = objc_msgSend(v13, "userDidLaunchFindMy");

    if (v16)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "feedbackCollector"));
      v14 = v13;
      v15 = 4;
    }
    else if (v3[22])
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "feedbackCollector"));
      v14 = v13;
      v15 = 2;
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 32);
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "feedbackCollector"));
      v14 = v13;
      v15 = v17;
    }
  }
  objc_msgSend(v13, "setEndReason:", v15);

  v18 = (void *)objc_claimAutoreleasedReturnValue(+[PedestrianARSessionUsageTracker sharedInstance](PedestrianARSessionUsageTracker, "sharedInstance"));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3[26], "uniqueRouteID"));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "UUIDString"));
  v21 = objc_msgSend(v18, "hasUserEnteredARForRoute:entryPoint:", v20, 1);

  if (v21)
  {
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "feedbackCollector"));
    objc_msgSend(v22, "setARWalkingUsedInNavigation:", 1);

  }
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "audioFeedbackCollector"));
  objc_msgSend(v23, "endSession");

  objc_msgSend(v3, "setAudioFeedbackCollector:", 0);
  v24 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "audioFeedbackCollector")));
  v25 = objc_msgSend(v24, "audioFeedback");

  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "feedbackCollector"));
  objc_msgSend(v26, "setAudioFeedback:", v25);

  objc_msgSend(v3, "_addGuidance");
  objc_msgSend(v3, "_addArrival");
  if (objc_msgSend(v3, "_shouldSendFeedback"))
  {
    Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "NavigationFeedbackCollector");
    v28 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
    {
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "feedbackCollector"));
      v32 = 138477827;
      v33 = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "Ending feedback session: %{private}@", (uint8_t *)&v32, 0xCu);

    }
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "feedbackCollector"));
    objc_msgSend(v30, "endFeedbackSessionWithTracePath:", v3[2]);
  }
  else
  {
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "feedbackCollector"));
    objc_msgSend(v30, "reset");
  }

  v31 = (void *)objc_claimAutoreleasedReturnValue(+[GEOUserSession sharedInstance](GEOUserSession, "sharedInstance"));
  objc_msgSend(v31, "endNavigationSession");

}

void sub_1009F1868(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  unsigned int v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  unsigned __int8 v17;
  void *v18;
  void *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t Log;
  NSObject *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  NSObject *v31;
  int v32;
  _BYTE v33[10];
  void *v34;

  v3 = a2;
  v4 = objc_alloc((Class)GEOLocation);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "rawLocation"));
  v6 = objc_msgSend(v4, "initWithCLLocation:", v5);

  objc_msgSend(v3, "_setLastLocation:", v6);
  if ((objc_msgSend(v3, "didArrive") & 1) == 0)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "routeMatch"));
    v8 = objc_msgSend(v7, "isGoodMatch");

    if (v8)
    {
      v9 = objc_msgSend(*(id *)(a1 + 32), "stepIndex");
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "routeMatch"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "route"));

      if (!v11)
        goto LABEL_21;
      if (v9 == (id)0x7FFFFFFFFFFFFFFFLL)
        goto LABEL_21;
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "steps"));
      v13 = objc_msgSend(v12, "count");

      if (v9 >= v13)
        goto LABEL_21;
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "stepAtIndex:", v9));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "uniqueRouteID"));
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 208), "uniqueRouteID"));
      v17 = objc_msgSend(v15, "isEqual:", v16);

      if ((v17 & 1) != 0)
      {
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "prevStep"));

        if (v18)
        {
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "prevStep"));
          v20 = objc_msgSend(v19, "stepID");
          v21 = objc_msgSend(v14, "stepID");

          if (v20 == v21)
          {
LABEL_20:

LABEL_21:
            goto LABEL_22;
          }
          Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "NavigationFeedbackCollector");
          v23 = objc_claimAutoreleasedReturnValue(Log);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
          {
            v24 = objc_msgSend(v3[28], "stepID");
            v32 = 67109376;
            *(_DWORD *)v33 = v24;
            *(_WORD *)&v33[4] = 1024;
            *(_DWORD *)&v33[6] = objc_msgSend(v14, "stepID");
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "New step: %u => %u", (uint8_t *)&v32, 0xEu);
          }

          v25 = 1;
LABEL_19:
          objc_msgSend(v3, "_completeCurrentStepFeedback:", v25);
          objc_msgSend(v3, "_openNewStepFeedbackWithRoute:step:", v11, v14);
          objc_storeStrong(v3 + 28, v14);
          goto LABEL_20;
        }
        v30 = GEOFindOrCreateLog(DefaultLoggingSubsystem, "NavigationFeedbackCollector");
        v31 = objc_claimAutoreleasedReturnValue(v30);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          v32 = 134217984;
          *(_QWORD *)v33 = objc_msgSend(v14, "stepID");
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "New start step: %lu", (uint8_t *)&v32, 0xCu);
        }

      }
      else
      {
        v26 = GEOFindOrCreateLog(DefaultLoggingSubsystem, "NavigationFeedbackCollector");
        v27 = objc_claimAutoreleasedReturnValue(v26);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3[26], "uniqueRouteID"));
          v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "uniqueRouteID"));
          v32 = 138412546;
          *(_QWORD *)v33 = v28;
          *(_WORD *)&v33[8] = 2112;
          v34 = v29;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "New route outside of reroute: %@ => %@", (uint8_t *)&v32, 0x16u);

        }
        objc_msgSend(v3, "setCurrentRoute:", v11);
      }
      v25 = 0;
      goto LABEL_19;
    }
  }
LABEL_22:

}

void sub_1009F1F5C(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;
  id v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = a2;
  v4 = objc_msgSend(v3, "_navigationModeTypeForState:", v2);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "feedbackCollector"));

  objc_msgSend(v5, "changeNavigationType:", v4);
}

void sub_1009F1FB8(id a1, NavigationFeedbackCollector *a2)
{
  _BOOL8 v2;
  void *v3;
  NavigationFeedbackCollector *v4;

  v4 = a2;
  if (-[GEOComposedRoute isEVRoute](v4->_currentRoute, "isEVRoute"))
  {
    v2 = -[NavigationEVBadTripFeedbackCollector isBadTrip](v4->_badTripCollector, "isBadTrip");
    v3 = (void *)objc_claimAutoreleasedReturnValue(-[NavigationFeedbackCollector feedbackCollector](v4, "feedbackCollector"));
    objc_msgSend(v3, "setIsBadEvExperience:", v2);

    -[NavigationEVBadTripFeedbackCollector stopRecording](v4->_badTripCollector, "stopRecording");
  }

}

void sub_1009F2178(uint64_t a1, void *a2)
{
  void *v3;
  unsigned __int8 v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "route"));
  v4 = objc_msgSend(v3, "isLegIndexOfLastLeg:", *(_QWORD *)(a1 + 48));

  if ((v4 & 1) != 0
    || (v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "chargingInfo")),
        v5,
        !v5))
  {
    objc_msgSend(v9, "setDidArrive:", 1);
    objc_msgSend(v9, "_completeCurrentStepFeedback:", 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "lastLocation"));

    if (v6)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "feedbackCollector"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "lastLocation"));
      objc_msgSend(v7, "setFinalLocation:asArrival:", v8, 1);

    }
  }
  else
  {
    objc_msgSend(v9, "_captureArrivalAtWaypoint:", *(_QWORD *)(a1 + 40));
  }

}

void sub_1009F2270(id a1, NavigationFeedbackCollector *a2)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(-[NavigationFeedbackCollector feedbackCollector](a2, "feedbackCollector"));
  objc_msgSend(v2, "setHasEnteredPreArrivalMode:", 1);

}

void sub_1009F22BC(id a1, NavigationFeedbackCollector *a2)
{
  -[NavigationFeedbackCollector _routePaused](a2, "_routePaused");
}

void sub_1009F237C(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned int v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  double v16;
  double v17;
  unint64_t v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  double v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  uint64_t v32;
  id v33;
  id *v34;

  v34 = a2;
  objc_msgSend(v34, "_completeCurrentStepFeedback:", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentResponse"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "directionsResponseID"));

  if (v4 && (objc_msgSend(v4, "isEqualToData:", v34[1]) & 1) == 0)
  {
    objc_msgSend(v34, "_flushModalitiesFeedback");
    objc_storeStrong(v34 + 1, v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "feedbackCollector"));
    objc_msgSend(v5, "setupFeedbackSessionWithResponseID:", v34[1]);

  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "steps"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "firstObject"));

  objc_msgSend(v34, "_openNewStepFeedbackWithRoute:step:", *(_QWORD *)(a1 + 40), v7);
  objc_msgSend(v34, "setPrevStep:", v7);
  if (objc_msgSend(v34[8], "containsObject:", *(_QWORD *)(a1 + 40)))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "alternateRoutes"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "currentRoute"));
    v10 = objc_msgSend(v8, "containsObject:", v9);

    v11 = objc_alloc_init((Class)GEOTrafficRerouteFeedback);
    objc_msgSend(v11, "setRerouteType:", 1);
    if (v10)
      v12 = 1;
    else
      v12 = 5;
    objc_msgSend(v11, "setActionType:", v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "serverRouteID"));
    objc_msgSend(v11, "setReroutedRouteID:", v13);

    objc_msgSend(v11, "setBackgrounded:", *(unsigned __int8 *)(a1 + 48));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "etaRouteForRoute:", *(_QWORD *)(a1 + 40)));
    v15 = v14;
    if (v14)
    {
      objc_msgSend(v14, "travelDuration");
      objc_msgSend(v11, "setReroutedRouteTravelTime:", v16);
      objc_msgSend(v15, "historicTravelDuration");
      v18 = v17;
    }
    else
    {
      objc_msgSend(v11, "setReroutedRouteTravelTime:", objc_msgSend(*(id *)(a1 + 40), "expectedTime"));
      v18 = (unint64_t)objc_msgSend(*(id *)(a1 + 40), "historicTravelTime");
    }
    objc_msgSend(v11, "setReroutedRouteHistoricTravelTime:", v18);
    v19 = v34[7];
    if (v19)
    {
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "routes"));
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "firstObject"));

      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "routeID"));
      objc_msgSend(v11, "setOldRouteID:", v22);

      objc_msgSend(v21, "expectedTime");
      objc_msgSend(v11, "setOldRouteTravelTime:", v23);
      objc_msgSend(v11, "setOldRouteHistoricTravelTime:", objc_msgSend(v21, "historicTravelTime"));
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "incidentsOnETARoutes"));
      objc_msgSend(v11, "setOldRouteIncidents:", v24);

      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34[7], "responseId"));
      objc_msgSend(v11, "setResponseId:", v25);

    }
    if (v10)
    {
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "previousAlert"));

      if (v26)
      {
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "previousAlert"));
        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "bannerID"));
        v29 = objc_msgSend(v28, "copy");
        objc_msgSend(v11, "setDisplayedBannerId:", v29);

        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "previousAlert"));
        objc_msgSend(v30, "distanceToDestination");
        objc_msgSend(v11, "setDistanceToDestination:");

        objc_msgSend(v34, "setPreviousAlert:", 0);
      }
    }
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "feedbackCollector"));
    objc_msgSend(v31, "addTrafficRerouteFeedback:", v11);

  }
  objc_msgSend(v34, "setCurrentRoute:", *(_QWORD *)(a1 + 40));
  v32 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "alternateRoutes"));
  v33 = v34[8];
  v34[8] = (id)v32;

}

void sub_1009F2784(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(a2 + 64), *(id *)(a1 + 32));
}

void sub_1009F2838(uint64_t a1, void *a2)
{
  id *v3;
  void *v4;
  void *v5;
  id *v6;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v6 = v3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "currentRoute"));

  if (v4 == v5)
    objc_storeStrong(v6 + 7, *(id *)(a1 + 40));

}

void sub_1009F2924(uint64_t a1, void *a2)
{
  id *v3;
  id *v4;
  id *v5;

  v3 = a2;
  if (v3[6] && !*((_BYTE *)v3 + 40))
  {
    v4 = v3;
    objc_msgSend(v3[6], "setLightGuidance:", objc_msgSend(*(id *)(a1 + 32), "state") == (id)5);
    v3 = v4;
  }
  if (*(double *)(a1 + 40) <= 0.0)
  {
    if (!*((_BYTE *)v3 + 40))
    {
      *((_BYTE *)v3 + 40) = 1;
      v5 = v3;
      objc_msgSend(v3, "_didStartManeuver");
      v3 = v5;
    }
  }
  else
  {
    *((_BYTE *)v3 + 40) = 0;
  }

}

void sub_1009F2A28(uint64_t a1, void *a2)
{
  void *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  id v6;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v6 = objc_msgSend(v2, "copy");
  v4 = (void *)v3[3];

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "uniqueID"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v6, v5);

}

void sub_1009F2B08(uint64_t a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  _QWORD *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;

  v4 = (void *)a2[3];
  v5 = *(void **)(a1 + 32);
  v6 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "uniqueID"));
  v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", v7));

  v8 = objc_msgSend(*(id *)(a1 + 32), "copy");
  v9 = (void *)a2[3];

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "uniqueID"));
  objc_msgSend(v9, "setObject:forKeyedSubscript:", v8, v10);

  if (v11)
  {
    objc_msgSend(v8, "setSelectedPrimaryStringIndex:", objc_msgSend(v11, "selectedPrimaryStringIndex"));
    objc_msgSend(v8, "setSelectedSecondaryStringIndex:", objc_msgSend(v11, "selectedSecondaryStringIndex"));
    objc_msgSend(v11, "maneuverTime");
    objc_msgSend(v8, "setManeuverTime:");
  }

}

void sub_1009F2EC0(id a1, NavigationFeedbackCollector *a2)
{
  -[NavigationFeedbackCollector updateAudioPreferences](a2, "updateAudioPreferences");
}

void sub_1009F2F18(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned int v5;
  _BOOL8 v6;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;

  v15 = a2;
  v3 = objc_alloc_init((Class)GEOModality);
  +[NSDate timeIntervalSinceReferenceDate](NSDate, "timeIntervalSinceReferenceDate");
  objc_msgSend(v3, "setTimestamp:");
  objc_msgSend(v3, "setNotMoving:", (*(_QWORD *)(a1 + 32) & 1) == 0);
  v4 = (void *)*((_QWORD *)v15 + 26);
  if (v4)
  {
    v5 = objc_msgSend(v4, "transportType");
    v6 = 0;
    v7 = 16;
    switch(v5)
    {
      case 0u:
        goto LABEL_6;
      case 1u:
      case 4u:
      case 5u:
      case 6u:
        goto LABEL_7;
      case 2u:
        v7 = 6;
        goto LABEL_6;
      case 3u:
        v7 = 8;
LABEL_6:
        v6 = (*(_QWORD *)(a1 + 32) & v7) != 0;
        goto LABEL_7;
      default:
        goto LABEL_8;
    }
  }
  v6 = 0;
LABEL_7:
  objc_msgSend(v3, "setExpectedModality:", v6);
LABEL_8:
  if (*(_QWORD *)(a1 + 40) <= 2uLL)
    objc_msgSend(v3, "setConfidence:");
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)v15 + 9), "lastObject"));
  if (!v8
    || (v9 = objc_msgSend(v3, "confidence"), v9 != objc_msgSend(v8, "confidence"))
    || (v10 = objc_msgSend(v3, "expectedModality"),
        v10 != objc_msgSend(v8, "expectedModality"))
    || (v11 = objc_msgSend(v3, "notMoving"), v11 != objc_msgSend(v8, "notMoving")))
  {
    v12 = (void *)*((_QWORD *)v15 + 9);
    if (!v12)
    {
      v13 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
      v14 = (void *)*((_QWORD *)v15 + 9);
      *((_QWORD *)v15 + 9) = v13;

      v12 = (void *)*((_QWORD *)v15 + 9);
    }
    objc_msgSend(v12, "addObject:", v3);
  }

}

void sub_1009F3128(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(a2 + 16), *(id *)(a1 + 32));
}

void sub_1009F3144(id a1, NavigationFeedbackCollector *a2)
{
  -[NavigationFeedbackCollector setIsPlayingTrace:](a2, "setIsPlayingTrace:", 1);
}

void sub_1009F315C(id a1, NavigationFeedbackCollector *a2)
{
  -[GEOStepFeedback setRouteResumed:](a2->_stepFeedback, "setRouteResumed:", 1);
}

void sub_1009F31F0(uint64_t a1, void *a2)
{
  void *v3;
  unsigned int v4;
  void *v5;
  _BYTE *v6;

  v6 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "currentRoute"));
  v4 = objc_msgSend(v3, "isEVRoute");

  if (v4)
  {
    if ((((unint64_t)objc_msgSend(*(id *)(a1 + 32), "alertType") - 1) & 0xFFFFFFFFFFFFFFFALL) == 0)
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "alternateRoute"));

      if (v5)
        v6[89] = 1;
    }
  }

}

id sub_1009F3474(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "_didSelectAlternate:forPrimaryString:inSign:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 32));
}

id sub_1009F3510(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "_didSelectAlternate:forPrimaryString:inSign:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 32));
}

void sub_1009F3598(uint64_t a1, void *a2)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  id v5;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "selectedVehicle"));
  v5 = (id)v3[18];
  v3[18] = v4;

}

void sub_1009F39EC(id a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v3 = objc_msgSend(objc_alloc((Class)LSApplicationRecord), "initWithBundleIdentifier:allowPlaceholder:error:", CFSTR("com.apple.Maps"), 0, 0);
  v1 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dataContainerURL"));
  v2 = (void *)qword_1014D3C48;
  qword_1014D3C48 = v1;

}

id sub_1009F3D68(uint64_t a1, void *a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "setEnabled:", objc_msgSend(a2, "canCreateSubmittableProblem"));
}

id *sub_1009F3E34(id *result, int a2)
{
  if (a2)
    return (id *)objc_msgSend(result[4], "invokeCompletionWithOutcome:", 1);
  return result;
}

void sub_1009F40DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1009F4100(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  id v8;

  v5 = a2;
  if (a3 == 1)
  {
    v8 = v5;
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[RAPAcknowledgementOptions defaultOptions](RAPAcknowledgementOptions, "defaultOptions"));
    objc_msgSend(WeakRetained, "_sendWithFinalOutcome:acknowledgementOptions:", 1, v7);

    goto LABEL_5;
  }
  if (!a3)
  {
    v8 = v5;
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    objc_msgSend(WeakRetained, "_cancelWithAnalyticsTarget:", 603);
LABEL_5:

    v5 = v8;
  }

}

void sub_1009F445C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1009F4480(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  id v8;

  v5 = a2;
  if (a3 == 1)
  {
    v8 = v5;
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[RAPAcknowledgementOptions defaultOptions](RAPAcknowledgementOptions, "defaultOptions"));
    objc_msgSend(WeakRetained, "_sendWithFinalOutcome:acknowledgementOptions:", 1, v7);

    goto LABEL_5;
  }
  if (!a3)
  {
    v8 = v5;
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    objc_msgSend(WeakRetained, "_cancelWithAnalyticsTarget:", 1151);
LABEL_5:

    v5 = v8;
  }

}

void sub_1009F47C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location)
{
  id *v26;

  objc_destroyWeak(v26);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1009F47E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained;
  void *v6;
  id v7;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (a3 == 1)
    {
      v7 = WeakRetained;
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[RAPAcknowledgementOptions defaultOptions](RAPAcknowledgementOptions, "defaultOptions"));
      objc_msgSend(v7, "_sendWithFinalOutcome:acknowledgementOptions:", 1, v6);

      goto LABEL_6;
    }
    if (!a3)
    {
      v7 = WeakRetained;
      objc_msgSend(WeakRetained, "_cancelWithAnalyticsTarget:", objc_msgSend(*(id *)(a1 + 32), "analyticTarget"));
LABEL_6:
      WeakRetained = v7;
    }
  }

}

uint64_t sub_1009F4874(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1009F4880(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1009F4A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1009F4AB0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  id v8;

  v5 = a2;
  if (a3 == 1)
  {
    v8 = v5;
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[RAPAcknowledgementOptions defaultOptions](RAPAcknowledgementOptions, "defaultOptions"));
    objc_msgSend(WeakRetained, "_sendWithFinalOutcome:acknowledgementOptions:", 1, v7);

    goto LABEL_5;
  }
  if (!a3)
  {
    v8 = v5;
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    objc_msgSend(WeakRetained, "_cancelWithAnalyticsTarget:", 0);
LABEL_5:

    v5 = v8;
  }

}

void sub_1009F52A0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_1009F52D8(uint64_t a1)
{
  _QWORD *WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  +[RAPAnalyticsManager captureRAPAcknowledgementDoneActionFromReport:](RAPAnalyticsManager, "captureRAPAcknowledgementDoneActionFromReport:", WeakRetained[2]);
  objc_msgSend(WeakRetained, "_invokeCompletionWithOutcome:", *(_QWORD *)(a1 + 40));

}

void sub_1009F5334(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  _QWORD v18[4];
  id v19;
  _QWORD v20[4];
  id v21;

  v3 = a3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("Report an Issue"), CFSTR("localized string not found"), 0));
  v6 = sub_1003DDB30();
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", v5, v7, 1));

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "localizedStringForKey:value:table:", CFSTR("RAP_Cancel"), CFSTR("localized string not found"), 0));
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_1009F5550;
  v20[3] = &unk_1011AD960;
  v11 = v3;
  v21 = v11;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v10, 1, v20));
  objc_msgSend(v8, "addAction:", v12);

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "localizedStringForKey:value:table:", CFSTR("OK"), CFSTR("localized string not found"), 0));
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_1009F5560;
  v18[3] = &unk_1011AD960;
  v19 = v11;
  v15 = v11;
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v14, 0, v18));
  objc_msgSend(v8, "addAction:", v16);

  objc_msgSend(*(id *)(a1 + 32), "presentViewController:animated:completion:", v8, 1, 0);
}

uint64_t sub_1009F5550(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1009F5560(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1009F5570(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = sub_10085876C();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    v4 = *(_QWORD *)(a1 + 40);
    v5 = *(void **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = v3;

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 40), "startAnimating");
    v6 = *(_QWORD **)(a1 + 40);
    v7 = v6[5];
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "topViewController"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "navigationItem"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "rightBarButtonItem"));
    objc_msgSend(v10, "setCustomView:", v7);

    v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "navigationBar"));
    objc_msgSend(v11, "setUserInteractionEnabled:", 0);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "_invokeCompletionWithOutcome:", *(_QWORD *)(a1 + 48));
  }
}

void sub_1009F5650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  RAPSendingTitleView *v12;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "stopAnimating");
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "navigationBar"));
  objc_msgSend(v5, "setUserInteractionEnabled:", 1);

  if (a3 || !*(_QWORD *)(a1 + 40))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "topViewController"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "navigationItem"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "rightBarButtonItem"));
    objc_msgSend(v8, "setCustomView:", 0);

    v9 = sub_1008587A8();
    v12 = (RAPSendingTitleView *)objc_claimAutoreleasedReturnValue(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "topViewController"));
    objc_msgSend(v10, "presentViewController:animated:completion:", v12, 1, 0);

  }
  else
  {
    v12 = objc_alloc_init(RAPSendingTitleView);
    -[RAPSendingTitleView sizeToFit](v12, "sizeToFit");
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[RAPSendingTitleView localizedSendingTitle](RAPSendingTitleView, "localizedSendingTitle"));
    objc_msgSend(*(id *)(a1 + 48), "setTitle:", v11);

    objc_msgSend(*(id *)(a1 + 48), "setBackBarButtonItem:", 0);
    objc_msgSend(*(id *)(a1 + 48), "setTitleView:", v12);
    objc_msgSend(*(id *)(a1 + 48), "setPrompt:", 0);
    objc_msgSend(*(id *)(a1 + 48), "setLeftItemsSupplementBackButton:", 0);
    objc_msgSend(*(id *)(a1 + 48), "setRightBarButtonItems:", &__NSArray0__struct);
    objc_msgSend(*(id *)(a1 + 32), "pushViewController:animated:", *(_QWORD *)(a1 + 40), 1);
    objc_msgSend(*(id *)(a1 + 56), "setValuesOnNavigationItem:animated:", *(_QWORD *)(a1 + 48), 0);
    objc_msgSend(*(id *)(a1 + 64), "setUserInteractionEnabled:", 1);
  }

}

id *sub_1009F6B1C(id *result, int a2)
{
  if (a2)
    return (id *)objc_msgSend(result[4], "invokeCompletionWithOutcome:", 1);
  return result;
}

id *sub_1009F7064(id *result, int a2)
{
  if (a2)
    return (id *)objc_msgSend(result[4], "invokeCompletionWithOutcome:", 1);
  return result;
}

void sub_1009F78A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id location)
{
  id *v34;

  objc_destroyWeak(v34);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1009F78E4(uint64_t a1)
{
  RAPReportComposerCategoryPart *v2;
  uint64_t v3;
  uint64_t v4;
  RAPReportComposerCategoryPart *v5;
  uint64_t v6;
  void *v7;
  _QWORD v8[5];

  v2 = [RAPReportComposerCategoryPart alloc];
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(v3 + 72);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1009F79A0;
  v8[3] = &unk_1011DF4F0;
  v8[4] = v3;
  v5 = -[RAPReportComposerCategoryPart initWithCategoryQuestion:selection:](v2, "initWithCategoryQuestion:selection:", v4, v8);
  objc_msgSend(*(id *)(a1 + 40), "addObject:", v5);
  dispatch_assert_queue_V2((dispatch_queue_t)&_dispatch_main_q);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataSource"));
  objc_msgSend(v7, "setTableParts:", v6);

}

id sub_1009F79A0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "proceedToNextQuestion:");
}

void sub_1009F79A8(uint64_t a1, void *a2)
{
  id *WeakRetained;
  id *v4;
  id v5;

  v5 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained[7], "mergeWithTrafficIncidentsLayout:", v5);
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }

}

void sub_1009F7A08(uint64_t a1, void *a2, uint64_t a3)
{
  id *WeakRetained;
  id *v6;
  id v7;

  v7 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  v6 = WeakRetained;
  if (WeakRetained)
  {
    if (!a3)
      objc_msgSend(WeakRetained[7], "mergeWithServerConfig:", v7);
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }

}

void sub_1009F7A78(uint64_t a1)
{
  id *WeakRetained;
  id *v3;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained[8], "stopAnimating");
    objc_msgSend(v3[9], "updateCategoriesFromLayoutManager:", v3[7]);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    WeakRetained = v3;
  }

}

void sub_1009F8518(uint64_t a1, char a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  char isKindOfClass;
  void *v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  id v11;
  uint8_t buf[4];
  uint64_t v13;

  if ((a2 & 1) != 0)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "question"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "parentQuestion"));
    v5 = objc_opt_class(RAPPersonalPlaceCorrectionsWhichOneQuestion);
    isKindOfClass = objc_opt_isKindOfClass(v4, v5);

    if ((isKindOfClass & 1) != 0)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "question"));
      v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "parentQuestion"));

      objc_msgSend(v11, "refreshMainMenuItemsWithCallback:", &stru_1011DF560);
    }
  }
  else
  {
    v8 = sub_1009F866C();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v13 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to save shortcut %@. with refined coordinate", buf, 0xCu);
    }

  }
}

id sub_1009F866C()
{
  if (qword_1014D3C60 != -1)
    dispatch_once(&qword_1014D3C60, &stru_1011DF580);
  return (id)qword_1014D3C58;
}

void sub_1009F86AC(id a1)
{
  id v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = sub_1009F866C();
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Finished refreshing shortcuts", v3, 2u);
  }

}

void sub_1009F8A08(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "HomeWorkShortcutMainMenu");
  v2 = (void *)qword_1014D3C58;
  qword_1014D3C58 = (uint64_t)v1;

}

void sub_1009F9268(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  _Unwind_Resume(a1);
}

void sub_1009F9DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,void *a34)
{

  _Unwind_Resume(a1);
}

void sub_1009FA390(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1009FB4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24)
{

  _Unwind_Resume(a1);
}

void sub_1009FBF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{

  _Unwind_Resume(a1);
}

void sub_1009FC420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{

  _Unwind_Resume(a1);
}

void sub_1009FC97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{

  _Unwind_Resume(a1);
}

void sub_1009FDDC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{

  _Unwind_Resume(a1);
}

void sub_1009FDE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{

  _Unwind_Resume(a1);
}

void sub_1009FE008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{

  _Unwind_Resume(a1);
}

void sub_1009FF108(uint64_t a1, uint64_t a2, void *a3)
{
  id *v3;
  id v4;
  void *v5;
  id WeakRetained;

  v3 = (id *)(*(_QWORD *)(a1 + 32) + 48);
  v4 = a3;
  WeakRetained = objc_loadWeakRetained(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "cardView"));

  objc_msgSend(v5, "setDelegate:", WeakRetained);
}

BOOL sub_1009FF248(id a1, CarCardConfiguration *a2, unint64_t a3, BOOL *a4)
{
  unsigned __int8 v5;

  v5 = -[CarCardConfiguration isHidden](a2, "isHidden", a3);
  if ((v5 & 1) == 0)
    *a4 = 1;
  return v5 ^ 1;
}

id sub_1009FF364(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "_setShowContainerVisualisation:", *(unsigned __int8 *)(a1 + 32));
}

void sub_1009FF8B8(id a1, NSString *a2, CarCardConfiguration *a3, BOOL *a4)
{
  -[CarCardConfiguration reset](a3, "reset");
}

id sub_1009FF9DC(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "layoutInHost:withLayoutGuide:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_1009FF9EC(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contentView"));
  objc_msgSend(v1, "layoutIfNeeded");

}

void sub_1009FFE04(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_batchedUpdates"));
  objc_msgSend(v2, "reloadCardConfiguration:block:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_100A001E0(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_batchedUpdates"));
  objc_msgSend(v2, "insertCardConfiguration:block:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

id sub_100A004F8(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "configurationsByKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v3));

  return v5;
}

void sub_100A00550(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v10;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v2);
        v7 = *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v6);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_batchedUpdates", (_QWORD)v9));
        objc_msgSend(v8, "insertCardConfiguration:block:", v7, 0);

        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v4);
  }

}

void sub_100A008C4(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_batchedUpdates"));
  objc_msgSend(v2, "deleteCardConfiguration:", *(_QWORD *)(a1 + 40));

}

void sub_100A009B4(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cardView"));
  objc_msgSend(v1, "setHidden:", 1);

}

void sub_100A00A98(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cardView"));
  objc_msgSend(v1, "setHidden:", 0);

}

void sub_100A00DA8(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v10;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v2);
        v7 = *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v6);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_batchedUpdates", (_QWORD)v9));
        objc_msgSend(v8, "deleteCardConfiguration:", v7);

        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v4);
  }

}

uint64_t sub_100A01474(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100A01A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100A01A30(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  v1 = *(void **)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(v1, "_updateDidComplete:", WeakRetained);

}

BOOL sub_100A01E48(uint64_t a1, unint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  id v15;
  void *v16;
  objc_class *v17;
  NSString *v18;
  void *v19;
  void *v20;
  void *v21;
  __CFString *v22;
  uint64_t v23;
  const __CFString *v24;
  uint8_t buf[4];
  __CFString *v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  void *v31;
  __int16 v32;
  const __CFString *v33;

  v7 = a4;
  v8 = a3;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "key"));
  v10 = *(void **)(a1 + 32);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "key"));

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "_configurationForKey:createIfNeeded:", v11, 0));
  if (!v12)
  {
    v13 = sub_10043333C();
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
LABEL_21:

      goto LABEL_22;
    }
    v15 = *(id *)(a1 + 32);
    v16 = v15;
    if (!v15)
    {
      v22 = CFSTR("<nil>");
      goto LABEL_17;
    }
    v17 = (objc_class *)objc_opt_class(v15);
    v18 = NSStringFromClass(v17);
    v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    if ((objc_opt_respondsToSelector(v16, "accessibilityIdentifier") & 1) != 0)
    {
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "performSelector:", "accessibilityIdentifier"));
      v21 = v20;
      if (v20 && !objc_msgSend(v20, "isEqualToString:", v19))
      {
        v22 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v19, v16, v21));

        goto LABEL_13;
      }

    }
    v22 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v19, v16));
LABEL_13:

LABEL_17:
    v23 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
    if (a2 > 2)
      v24 = CFSTR("unknown");
    else
      v24 = off_1011DF8D8[a2];
    *(_DWORD *)buf = 138544130;
    v27 = v22;
    v28 = 2048;
    v29 = v23;
    v30 = 2112;
    v31 = v9;
    v32 = 2112;
    v33 = v24;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "[%{public}@] %p | %@'s configuration has been deleted, cancelling %@", buf, 0x2Au);

    goto LABEL_21;
  }
  switch(a2)
  {
    case 2uLL:
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "insertCardConfiguration:block:", v12, v7);
      break;
    case 1uLL:
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "reloadCardConfiguration:block:", v12, v7);
      break;
    case 0uLL:
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "deleteCardConfiguration:", v12);
      break;
  }
LABEL_22:

  return v12 != 0;
}

void sub_100A026FC(_QWORD *a1, uint64_t a2, void *a3)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a3;
  if ((objc_msgSend(v10, "isHidden") & 1) == 0)
  {
    v4 = (void *)a1[4];
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "viewportConstraints"));
    objc_msgSend(v4, "addObjectsFromArray:", v5);

    v6 = (void *)a1[5];
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "mapInsetsConstraints"));
    objc_msgSend(v6, "addObjectsFromArray:", v7);

    v8 = (void *)a1[6];
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "collisionConstraints"));
    objc_msgSend(v8, "addObjectsFromArray:", v9);

  }
}

void sub_100A02AF8(id a1, CarCardConfiguration *a2, unint64_t a3, BOOL *a4)
{
  -[CarCardConfiguration reset](a2, "reset", a3, a4);
}

id sub_100A03214(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  id v16;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  v7 = a2;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "configurationKeys"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "key"));

  v10 = objc_msgSend(v8, "indexOfObject:", v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configurationKeys"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "key"));

  v13 = objc_msgSend(v11, "indexOfObject:", v12);
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v10));
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v13));
  v16 = objc_msgSend(v14, "compare:", v15);

  return v16;
}

void sub_100A034E8(id a1, NSString *a2, CarCardConfiguration *a3, BOOL *a4)
{
  CarCardConfiguration *v4;
  void *v5;
  void *v6;
  id v7;

  v4 = a3;
  -[CarCardConfiguration _updateAvailableCardSize](v4, "_updateAvailableCardSize");
  v7 = (id)objc_claimAutoreleasedReturnValue(-[CarCardConfiguration content](v4, "content"));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "view"));
  objc_msgSend(v5, "setNeedsLayout");

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "view"));
  objc_msgSend(v6, "layoutIfNeeded");

}

int64_t sub_100A03A9C(id a1, CarCardConfiguration *a2, CarCardConfiguration *a3)
{
  CarCardConfiguration *v4;
  CarCardConfiguration *v5;
  id v6;
  int64_t v7;
  id v8;

  v4 = a2;
  v5 = a3;
  v6 = -[CarCardConfiguration focusSortValue](v4, "focusSortValue");
  if (v6 <= (id)-[CarCardConfiguration focusSortValue](v5, "focusSortValue"))
  {
    v8 = -[CarCardConfiguration focusSortValue](v4, "focusSortValue");
    if (v8 >= (id)-[CarCardConfiguration focusSortValue](v5, "focusSortValue"))
      v7 = 0;
    else
      v7 = -1;
  }
  else
  {
    v7 = 1;
  }

  return v7;
}

id sub_100A040E4()
{
  if (qword_1014D3C70 != -1)
    dispatch_once(&qword_1014D3C70, &stru_1011DF8B8);
  return (id)qword_1014D3C68;
}

void sub_100A04840(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_100A04860(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  id v13;

  v13 = a2;
  v6 = a1[5];
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 40), "objectForKey:", v13));
  LOBYTE(v6) = (*(uint64_t (**)(uint64_t, _QWORD, id, void *, uint64_t))(v6 + 16))(v6, 0, v13, v7, a4);

  if ((v6 & 1) == 0)
  {
    v8 = *(void **)(a1[4] + 16);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "key"));
    objc_msgSend(v8, "removeObjectForKey:", v9);

  }
  v10 = *(_QWORD *)(a1[6] + 8);
  if (a4)
    v11 = 0;
  else
    v11 = *(_BYTE *)(v10 + 24) == 0;
  v12 = !v11;
  *(_BYTE *)(v10 + 24) = v12;

}

void sub_100A04920(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  id v13;

  v13 = a2;
  v6 = a1[5];
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 40), "objectForKey:", v13));
  LOBYTE(v6) = (*(uint64_t (**)(uint64_t, uint64_t, id, void *, uint64_t))(v6 + 16))(v6, 1, v13, v7, a4);

  if ((v6 & 1) == 0)
  {
    objc_msgSend(*(id *)(a1[4] + 40), "removeObjectForKey:", v13);
    v8 = *(void **)(a1[4] + 24);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "key"));
    objc_msgSend(v8, "removeObjectForKey:", v9);

  }
  v10 = *(_QWORD *)(a1[6] + 8);
  if (a4)
    v11 = 0;
  else
    v11 = *(_BYTE *)(v10 + 24) == 0;
  v12 = !v11;
  *(_BYTE *)(v10 + 24) = v12;

}

void sub_100A049F0(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  id v13;

  v13 = a2;
  v6 = a1[5];
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 40), "objectForKey:", v13));
  LOBYTE(v6) = (*(uint64_t (**)(uint64_t, uint64_t, id, void *, uint64_t))(v6 + 16))(v6, 2, v13, v7, a4);

  if ((v6 & 1) == 0)
  {
    objc_msgSend(*(id *)(a1[4] + 40), "removeObjectForKey:", v13);
    v8 = *(void **)(a1[4] + 32);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "key"));
    objc_msgSend(v8, "removeObjectForKey:", v9);

  }
  v10 = *(_QWORD *)(a1[6] + 8);
  if (a4)
    v11 = 0;
  else
    v11 = *(_BYTE *)(v10 + 24) == 0;
  v12 = !v11;
  *(_BYTE *)(v10 + 24) = v12;

}

void sub_100A06D78(id *a1, int a2)
{
  id v4;
  NSObject *v5;
  id v6;
  void *v7;
  objc_class *v8;
  NSString *v9;
  void *v10;
  void *v11;
  void *v12;
  __CFString *v13;
  id v14;
  NSObject *v15;
  id v16;
  void *v17;
  objc_class *v18;
  NSString *v19;
  void *v20;
  void *v21;
  void *v22;
  __CFString *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  NSObject *v28;
  id v29;
  void *v30;
  objc_class *v31;
  NSString *v32;
  void *v33;
  void *v34;
  void *v35;
  __CFString *v36;
  id v37;
  void *v38;
  id v39;
  uint8_t buf[4];
  __CFString *v41;
  __int16 v42;
  id v43;

  if (objc_msgSend(a1[4], "count"))
    objc_msgSend(a1[4], "removeObjectAtIndex:", 0);
  if (a2)
  {
    if (objc_msgSend(a1[4], "count"))
    {
      v39 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "firstObject"));
      objc_msgSend(v39, "runWithCurrentOptions");

      return;
    }
LABEL_25:
    if (objc_msgSend(a1[6], "count"))
    {
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "delegate"));
      objc_msgSend(v24, "cardsUpdate:finalizeUpdate:withCardConfigurations:", a1[5], 0, a1[6]);

    }
    if (objc_msgSend(a1[7], "count"))
    {
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "delegate"));
      objc_msgSend(v25, "cardsUpdate:finalizeUpdate:withCardConfigurations:", a1[5], 1, a1[7]);

    }
    if (objc_msgSend(a1[8], "count"))
    {
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "delegate"));
      objc_msgSend(v26, "cardsUpdate:finalizeUpdate:withCardConfigurations:", a1[5], 2, a1[8]);

    }
    v27 = sub_100A040E4();
    v28 = objc_claimAutoreleasedReturnValue(v27);
    if (!os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      goto LABEL_41;
    v29 = a1[5];
    v30 = v29;
    if (!v29)
    {
      v36 = CFSTR("<nil>");
      goto LABEL_40;
    }
    v31 = (objc_class *)objc_opt_class(v29);
    v32 = NSStringFromClass(v31);
    v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
    if ((objc_opt_respondsToSelector(v30, "accessibilityIdentifier") & 1) != 0)
    {
      v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "performSelector:", "accessibilityIdentifier"));
      v35 = v34;
      if (v34 && !objc_msgSend(v34, "isEqualToString:", v33))
      {
        v36 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v33, v30, v35));

        goto LABEL_38;
      }

    }
    v36 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v33, v30));
LABEL_38:

LABEL_40:
    *(_DWORD *)buf = 138543362;
    v41 = v36;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "[%{public}@] Updates completed, running completion blocks.", buf, 0xCu);

LABEL_41:
    objc_msgSend(a1[5], "runCompletionBlocks");
    return;
  }
  v4 = sub_100A040E4();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v6 = a1[5];
    v7 = v6;
    if (!v6)
    {
      v13 = CFSTR("<nil>");
      goto LABEL_15;
    }
    v8 = (objc_class *)objc_opt_class(v6);
    v9 = NSStringFromClass(v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    if ((objc_opt_respondsToSelector(v7, "accessibilityIdentifier") & 1) != 0)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "performSelector:", "accessibilityIdentifier"));
      v12 = v11;
      if (v11 && !objc_msgSend(v11, "isEqualToString:", v10))
      {
        v13 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v10, v7, v12));

        goto LABEL_13;
      }

    }
    v13 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v10, v7));
LABEL_13:

LABEL_15:
    *(_DWORD *)buf = 138543362;
    v41 = v13;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[%{public}@] Batch updates interrupted!", buf, 0xCu);

  }
  if (!objc_msgSend(a1[4], "count"))
    goto LABEL_25;
  v14 = sub_100A040E4();
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    v16 = a1[5];
    v17 = v16;
    if (!v16)
    {
      v23 = CFSTR("<nil>");
      goto LABEL_43;
    }
    v18 = (objc_class *)objc_opt_class(v16);
    v19 = NSStringFromClass(v18);
    v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
    if ((objc_opt_respondsToSelector(v17, "accessibilityIdentifier") & 1) != 0)
    {
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "performSelector:", "accessibilityIdentifier"));
      v22 = v21;
      if (v21 && !objc_msgSend(v21, "isEqualToString:", v20))
      {
        v23 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v20, v17, v22));

        goto LABEL_24;
      }

    }
    v23 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v20, v17));
LABEL_24:

LABEL_43:
    v37 = objc_msgSend(a1[4], "count");
    *(_DWORD *)buf = 138543618;
    v41 = v23;
    v42 = 2048;
    v43 = v37;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "[%{public}@] Will execute remaining %lu updates without animation.", buf, 0x16u);

  }
  v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "firstObject"));
  objc_msgSend(v38, "runWithoutAnimation");

}

id sub_100A07270(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  void *v5;
  objc_class *v6;
  NSString *v7;
  void *v8;
  void *v9;
  void *v10;
  __CFString *v11;
  void *v12;
  uint8_t buf[4];
  __CFString *v15;
  __int16 v16;
  void *v17;

  v2 = sub_100A040E4();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(id *)(a1 + 32);
    v5 = v4;
    if (!v4)
    {
      v11 = CFSTR("<nil>");
      goto LABEL_10;
    }
    v6 = (objc_class *)objc_opt_class(v4);
    v7 = NSStringFromClass(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if ((objc_opt_respondsToSelector(v5, "accessibilityIdentifier") & 1) != 0)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "performSelector:", "accessibilityIdentifier"));
      v10 = v9;
      if (v9 && !objc_msgSend(v9, "isEqualToString:", v8))
      {
        v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v8, v5, v10));

        goto LABEL_8;
      }

    }
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v8, v5));
LABEL_8:

LABEL_10:
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "valueForKey:", CFSTR("key")));
    *(_DWORD *)buf = 138543618;
    v15 = v11;
    v16 = 2112;
    v17 = v12;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%{public}@] The following visible cards will begin transitioning: %@", buf, 0x16u);

  }
  return objc_msgSend(*(id *)(a1 + 32), "_markConfigurations:asTransitioning:", *(_QWORD *)(a1 + 40), 1);
}

id sub_100A07420(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  void *v5;
  objc_class *v6;
  NSString *v7;
  void *v8;
  void *v9;
  void *v10;
  __CFString *v11;
  id v12;
  uint8_t buf[4];
  __CFString *v15;
  __int16 v16;
  id v17;

  v2 = sub_100A040E4();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(id *)(a1 + 32);
    v5 = v4;
    if (!v4)
    {
      v11 = CFSTR("<nil>");
      goto LABEL_10;
    }
    v6 = (objc_class *)objc_opt_class(v4);
    v7 = NSStringFromClass(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if ((objc_opt_respondsToSelector(v5, "accessibilityIdentifier") & 1) != 0)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "performSelector:", "accessibilityIdentifier"));
      v10 = v9;
      if (v9 && !objc_msgSend(v9, "isEqualToString:", v8))
      {
        v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v8, v5, v10));

        goto LABEL_8;
      }

    }
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v8, v5));
LABEL_8:

LABEL_10:
    v12 = objc_msgSend(*(id *)(a1 + 40), "count");
    *(_DWORD *)buf = 138543618;
    v15 = v11;
    v16 = 2048;
    v17 = v12;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%{public}@] %lu content reloads will apply and layout", buf, 0x16u);

  }
  return objc_msgSend(*(id *)(a1 + 32), "_applyAndPerformLayoutForConfigurations:allowAnimations:", *(_QWORD *)(a1 + 40), 1);
}

id sub_100A075BC(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  void *v5;
  objc_class *v6;
  NSString *v7;
  void *v8;
  void *v9;
  void *v10;
  __CFString *v11;
  void *v12;
  uint8_t buf[4];
  __CFString *v15;
  __int16 v16;
  void *v17;

  v2 = sub_100A040E4();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(id *)(a1 + 32);
    v5 = v4;
    if (!v4)
    {
      v11 = CFSTR("<nil>");
      goto LABEL_10;
    }
    v6 = (objc_class *)objc_opt_class(v4);
    v7 = NSStringFromClass(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if ((objc_opt_respondsToSelector(v5, "accessibilityIdentifier") & 1) != 0)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "performSelector:", "accessibilityIdentifier"));
      v10 = v9;
      if (v9 && !objc_msgSend(v9, "isEqualToString:", v8))
      {
        v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v8, v5, v10));

        goto LABEL_8;
      }

    }
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v8, v5));
LABEL_8:

LABEL_10:
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "valueForKey:", CFSTR("key")));
    *(_DWORD *)buf = 138543618;
    v15 = v11;
    v16 = 2112;
    v17 = v12;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%{public}@] The following visible cards will temporarily hide: %@", buf, 0x16u);

  }
  objc_msgSend(*(id *)(a1 + 40), "enumerateObjectsUsingBlock:", &stru_1011DF878);
  return objc_msgSend(*(id *)(a1 + 32), "_performLayoutAllowingAnimations:", 1);
}

void sub_100A0777C(id a1, CarCardConfiguration *a2, unint64_t a3, BOOL *a4)
{
  CarCardConfiguration *v4;

  v4 = a2;
  -[CarCardConfiguration setTransitioning:](v4, "setTransitioning:", 1);
  -[CarCardConfiguration setHidden:](v4, "setHidden:", 1);

}

id sub_100A077B4(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  void *v5;
  objc_class *v6;
  NSString *v7;
  void *v8;
  void *v9;
  void *v10;
  __CFString *v11;
  id v12;
  uint8_t buf[4];
  __CFString *v15;
  __int16 v16;
  id v17;

  objc_msgSend(*(id *)(a1 + 32), "_markConfigurations:asTransitioning:", *(_QWORD *)(a1 + 40), 0);
  v2 = sub_100A040E4();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(id *)(a1 + 32);
    v5 = v4;
    if (!v4)
    {
      v11 = CFSTR("<nil>");
      goto LABEL_10;
    }
    v6 = (objc_class *)objc_opt_class(v4);
    v7 = NSStringFromClass(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if ((objc_opt_respondsToSelector(v5, "accessibilityIdentifier") & 1) != 0)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "performSelector:", "accessibilityIdentifier"));
      v10 = v9;
      if (v9 && !objc_msgSend(v9, "isEqualToString:", v8))
      {
        v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v8, v5, v10));

        goto LABEL_8;
      }

    }
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v8, v5));
LABEL_8:

LABEL_10:
    v12 = objc_msgSend(*(id *)(a1 + 40), "count");
    *(_DWORD *)buf = 138543618;
    v15 = v11;
    v16 = 2048;
    v17 = v12;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%{public}@] %lu layout reloads will apply and layout", buf, 0x16u);

  }
  return objc_msgSend(*(id *)(a1 + 32), "_applyAndPerformLayoutForConfigurations:allowAnimations:", *(_QWORD *)(a1 + 40), 0);
}

id sub_100A07960(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  void *v5;
  objc_class *v6;
  NSString *v7;
  void *v8;
  void *v9;
  void *v10;
  __CFString *v11;
  id v12;
  uint8_t buf[4];
  __CFString *v15;
  __int16 v16;
  id v17;

  v2 = sub_10043333C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(id *)(a1 + 32);
    v5 = v4;
    if (!v4)
    {
      v11 = CFSTR("<nil>");
      goto LABEL_10;
    }
    v6 = (objc_class *)objc_opt_class(v4);
    v7 = NSStringFromClass(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if ((objc_opt_respondsToSelector(v5, "accessibilityIdentifier") & 1) != 0)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "performSelector:", "accessibilityIdentifier"));
      v10 = v9;
      if (v9 && !objc_msgSend(v9, "isEqualToString:", v8))
      {
        v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v8, v5, v10));

        goto LABEL_8;
      }

    }
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v8, v5));
LABEL_8:

LABEL_10:
    v12 = objc_msgSend(*(id *)(a1 + 40), "count");
    *(_DWORD *)buf = 138543618;
    v15 = v11;
    v16 = 2048;
    v17 = v12;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%{public}@] %lu other reloads will apply and layout", buf, 0x16u);

  }
  return objc_msgSend(*(id *)(a1 + 32), "_applyAndPerformLayoutForConfigurations:allowAnimations:", *(_QWORD *)(a1 + 40), 0);
}

void sub_100A07AFC(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  void *v5;
  objc_class *v6;
  NSString *v7;
  void *v8;
  void *v9;
  void *v10;
  __CFString *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  void *i;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint8_t v23[128];
  uint8_t buf[4];
  __CFString *v25;
  __int16 v26;
  id v27;

  v2 = sub_100A040E4();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(id *)(a1 + 32);
    v5 = v4;
    if (!v4)
    {
      v11 = CFSTR("<nil>");
      goto LABEL_10;
    }
    v6 = (objc_class *)objc_opt_class(v4);
    v7 = NSStringFromClass(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if ((objc_opt_respondsToSelector(v5, "accessibilityIdentifier") & 1) != 0)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "performSelector:", "accessibilityIdentifier"));
      v10 = v9;
      if (v9 && !objc_msgSend(v9, "isEqualToString:", v8))
      {
        v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v8, v5, v10));

        goto LABEL_8;
      }

    }
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v8, v5));
LABEL_8:

LABEL_10:
    v12 = objc_msgSend(*(id *)(a1 + 40), "count");
    *(_DWORD *)buf = 138543618;
    v25 = v11;
    v26 = 2048;
    v27 = v12;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%{public}@] %lu deletions will hide", buf, 0x16u);

  }
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v13 = *(id *)(a1 + 40);
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v15; i = (char *)i + 1)
      {
        if (*(_QWORD *)v20 != v16)
          objc_enumerationMutation(v13);
        objc_msgSend(*(id *)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)i), "setHidden:", 1);
      }
      v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v15);
  }

  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v18, "cardsUpdate:applyConfigurations:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_100A07D44(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  void *v5;
  objc_class *v6;
  NSString *v7;
  void *v8;
  void *v9;
  void *v10;
  __CFString *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  void *i;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint8_t v22[128];
  uint8_t buf[4];
  __CFString *v24;
  __int16 v25;
  id v26;

  v2 = sub_100A040E4();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(id *)(a1 + 32);
    v5 = v4;
    if (!v4)
    {
      v11 = CFSTR("<nil>");
      goto LABEL_10;
    }
    v6 = (objc_class *)objc_opt_class(v4);
    v7 = NSStringFromClass(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if ((objc_opt_respondsToSelector(v5, "accessibilityIdentifier") & 1) != 0)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "performSelector:", "accessibilityIdentifier"));
      v10 = v9;
      if (v9 && !objc_msgSend(v9, "isEqualToString:", v8))
      {
        v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v8, v5, v10));

        goto LABEL_8;
      }

    }
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v8, v5));
LABEL_8:

LABEL_10:
    v12 = objc_msgSend(*(id *)(a1 + 40), "count");
    *(_DWORD *)buf = 138543618;
    v24 = v11;
    v25 = 2048;
    v26 = v12;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%{public}@] %lu deletions will be reset", buf, 0x16u);

  }
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v13 = *(id *)(a1 + 40);
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v19;
    do
    {
      for (i = 0; i != v15; i = (char *)i + 1)
      {
        if (*(_QWORD *)v19 != v16)
          objc_enumerationMutation(v13);
        objc_msgSend(*(id *)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i), "reset");
      }
      v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v15);
  }

}

id sub_100A07F6C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  void *v5;
  objc_class *v6;
  NSString *v7;
  void *v8;
  void *v9;
  void *v10;
  __CFString *v11;
  void *v12;
  uint8_t buf[4];
  __CFString *v15;
  __int16 v16;
  void *v17;

  v2 = sub_100A040E4();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(id *)(a1 + 32);
    v5 = v4;
    if (!v4)
    {
      v11 = CFSTR("<nil>");
      goto LABEL_10;
    }
    v6 = (objc_class *)objc_opt_class(v4);
    v7 = NSStringFromClass(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if ((objc_opt_respondsToSelector(v5, "accessibilityIdentifier") & 1) != 0)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "performSelector:", "accessibilityIdentifier"));
      v10 = v9;
      if (v9 && !objc_msgSend(v9, "isEqualToString:", v8))
      {
        v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v8, v5, v10));

        goto LABEL_8;
      }

    }
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v8, v5));
LABEL_8:

LABEL_10:
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "valueForKey:", CFSTR("key")));
    *(_DWORD *)buf = 138543618;
    v15 = v11;
    v16 = 2112;
    v17 = v12;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%{public}@] The following visible cards will end temporary hiding: %@", buf, 0x16u);

  }
  return objc_msgSend(*(id *)(a1 + 40), "enumerateObjectsUsingBlock:", &stru_1011DF898);
}

void sub_100A08120(id a1, CarCardConfiguration *a2, unint64_t a3, BOOL *a4)
{
  -[CarCardConfiguration setHidden:](a2, "setHidden:", 0, a4);
}

void sub_100A0812C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  void *v5;
  objc_class *v6;
  NSString *v7;
  void *v8;
  void *v9;
  void *v10;
  __CFString *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  void *i;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint8_t v23[128];
  uint8_t buf[4];
  __CFString *v25;
  __int16 v26;
  id v27;

  v2 = sub_100A040E4();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(id *)(a1 + 32);
    v5 = v4;
    if (!v4)
    {
      v11 = CFSTR("<nil>");
      goto LABEL_10;
    }
    v6 = (objc_class *)objc_opt_class(v4);
    v7 = NSStringFromClass(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if ((objc_opt_respondsToSelector(v5, "accessibilityIdentifier") & 1) != 0)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "performSelector:", "accessibilityIdentifier"));
      v10 = v9;
      if (v9 && !objc_msgSend(v9, "isEqualToString:", v8))
      {
        v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v8, v5, v10));

        goto LABEL_8;
      }

    }
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v8, v5));
LABEL_8:

LABEL_10:
    v12 = objc_msgSend(*(id *)(a1 + 40), "count");
    *(_DWORD *)buf = 138543618;
    v25 = v11;
    v26 = 2048;
    v27 = v12;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%{public}@] %lu insertions will unhide", buf, 0x16u);

  }
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v13 = *(id *)(a1 + 40);
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v15; i = (char *)i + 1)
      {
        if (*(_QWORD *)v20 != v16)
          objc_enumerationMutation(v13);
        objc_msgSend(*(id *)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)i), "setHidden:", 0);
      }
      v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v15);
  }

  if (objc_msgSend(*(id *)(a1 + 40), "count"))
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    objc_msgSend(v18, "cardsUpdate:applyConfigurations:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

  }
}

id sub_100A08380(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_performLayoutAllowingAnimations:", 1);
}

id sub_100A0838C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  void *v5;
  objc_class *v6;
  NSString *v7;
  void *v8;
  void *v9;
  void *v10;
  __CFString *v11;
  void *v12;
  uint8_t buf[4];
  __CFString *v15;
  __int16 v16;
  void *v17;

  v2 = sub_100A040E4();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(id *)(a1 + 32);
    v5 = v4;
    if (!v4)
    {
      v11 = CFSTR("<nil>");
      goto LABEL_10;
    }
    v6 = (objc_class *)objc_opt_class(v4);
    v7 = NSStringFromClass(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if ((objc_opt_respondsToSelector(v5, "accessibilityIdentifier") & 1) != 0)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "performSelector:", "accessibilityIdentifier"));
      v10 = v9;
      if (v9 && !objc_msgSend(v9, "isEqualToString:", v8))
      {
        v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v8, v5, v10));

        goto LABEL_8;
      }

    }
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v8, v5));
LABEL_8:

LABEL_10:
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "valueForKey:", CFSTR("key")));
    *(_DWORD *)buf = 138543618;
    v15 = v11;
    v16 = 2112;
    v17 = v12;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%{public}@] The following cards will end transitioning: %@", buf, 0x16u);

  }
  return objc_msgSend(*(id *)(a1 + 32), "_markConfigurations:asTransitioning:", *(_QWORD *)(a1 + 40), 0);
}

void sub_100A0853C(uint64_t a1, int a2)
{
  id v4;
  NSObject *v5;
  id v6;
  void *v7;
  objc_class *v8;
  NSString *v9;
  void *v10;
  void *v11;
  void *v12;
  __CFString *v13;
  uint64_t v14;
  void *v15;
  const __CFString *v16;
  uint8_t buf[4];
  __CFString *v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  const __CFString *v22;

  if ((a2 & 1) == 0)
    objc_msgSend(*(id *)(a1 + 32), "_markConfigurations:asTransitioning:", *(_QWORD *)(a1 + 40), 0);
  v4 = sub_100A040E4();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v6 = *(id *)(a1 + 32);
    v7 = v6;
    if (!v6)
    {
      v13 = CFSTR("<nil>");
      goto LABEL_12;
    }
    v8 = (objc_class *)objc_opt_class(v6);
    v9 = NSStringFromClass(v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    if ((objc_opt_respondsToSelector(v7, "accessibilityIdentifier") & 1) != 0)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "performSelector:", "accessibilityIdentifier"));
      v12 = v11;
      if (v11 && !objc_msgSend(v11, "isEqualToString:", v10))
      {
        v13 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v10, v7, v12));

        goto LABEL_10;
      }

    }
    v13 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v10, v7));
LABEL_10:

LABEL_12:
    v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "valueForKey:", CFSTR("key")));
    v15 = (void *)v14;
    v16 = CFSTR("was");
    *(_DWORD *)buf = 138543874;
    v18 = v13;
    v19 = 2112;
    if (a2)
      v16 = CFSTR("wasn't");
    v20 = v14;
    v21 = 2112;
    v22 = v16;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[%{public}@] The following cards did end transitioning: %@. Animation %@ interrupted.", buf, 0x20u);

  }
}

void sub_100A0871C(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "firstObject"));
  objc_msgSend(v1, "runWithCurrentOptions");

}

void sub_100A08934(id *a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  void (**v8)(_QWORD, _QWORD);
  unsigned __int8 v9;
  id *v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v2 = a1[4];
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v14 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i);
        v8 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)a1[5] + 5), "objectForKey:", v7, (_QWORD)v13));
        if (v8)
        {
          if (objc_msgSend(a1[5], "_shouldClearConfiguration:beforeUpdate:", v7, v8))
            objc_msgSend(v7, "clear");
          ((void (**)(_QWORD, void *))v8)[2](v8, v7);
        }
        if (a1[6] && (v9 = objc_msgSend(v7, "invalidationState"), v10 = a1 + 6, (v9 & 1) != 0)
          || a1[7] && (v11 = objc_msgSend(v7, "invalidationState"), v10 = a1 + 7, (v11 & 2) != 0)
          || a1[8] && (v12 = objc_msgSend(v7, "invalidationState"), v10 = a1 + 8, (v12 & 4) != 0))
        {
          objc_msgSend(*v10, "addObject:", v7);
        }

      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v4);
  }

}

void sub_100A08C1C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "cardsUpdateWantsLayout:", *(_QWORD *)(a1 + 32));

}

void sub_100A08D0C(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "cardsUpdate:applyConfigurations:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v3, "cardsUpdateWantsLayout:", *(_QWORD *)(a1 + 32));

}

void sub_100A08FF4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CarCardsUpdate");
  v2 = (void *)qword_1014D3C68;
  qword_1014D3C68 = (uint64_t)v1;

}

void sub_100A0A724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100A0A740(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  void *v4;
  id v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v5 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_maps_mapsSceneDelegate"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "appCoordinator"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "baseActionCoordinator"));

    objc_msgSend(v4, "viewControllerShowOfflineMaps:", v5);
    WeakRetained = v5;
  }

}

void sub_100A0A9A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100A0A9C4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "didTapOnAddAPlace");

}

void sub_100A0B80C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100A0B838(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "contentView"));
  else
    v3 = 0;

  return v3;
}

void sub_100A0D054(uint64_t a1, void *a2, id a3)
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "unsignedLongValue") == a3)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[GEORefinementsFactory barMultiSelectResultRefinementsWith:](_TtC4Maps21GEORefinementsFactory, "barMultiSelectResultRefinementsWith:", *(_QWORD *)(a1 + 40)));
    v6 = v5;
    if (v5)
    {
      v7 = *(void **)(a1 + 48);
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "convertToGEOPDResultRefinement"));
      objc_msgSend(v7, "addRefinement:", v8);

    }
  }
  else
  {
    v9 = *(void **)(a1 + 48);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "convertToGEOPDResultRefinement"));
    objc_msgSend(v9, "addRefinement:", v6);
  }

}

void sub_100A0D444(uint64_t a1, void *a2, id a3)
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "unsignedLongValue") == a3)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[GEORefinementsFactory updatedOpenOptionResultRefinementWith:](_TtC4Maps21GEORefinementsFactory, "updatedOpenOptionResultRefinementWith:", *(_QWORD *)(a1 + 40)));
    v6 = v5;
    if (v5)
    {
      v7 = *(void **)(a1 + 48);
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "convertToGEOPDResultRefinement"));
      objc_msgSend(v7, "addRefinement:", v8);

    }
  }
  else
  {
    v9 = *(void **)(a1 + 48);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "convertToGEOPDResultRefinement"));
    objc_msgSend(v9, "addRefinement:", v6);
  }

}

void sub_100A0E978(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  id v5;
  id v6;
  id v7;

  v4 = *(void **)(a1 + 32);
  v5 = a3;
  v6 = a2;
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "delegate"));
  objc_msgSend(v7, "presentRouteLibraryWithAvailableRoutes:unavailableRoutes:", v6, v5);

}

uint64_t sub_100A110B4(uint64_t a1, void *a2)
{
  objc_msgSend(a2, "CGContext");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100A110F0(id a1, UIView *a2, CGContext *a3)
{
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(-[UIView layer](a2, "layer"));
  objc_msgSend(v4, "renderInContext:", a3);

}

void sub_100A11AC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100A11AE4(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  uint64_t v5;
  _QWORD v6[6];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v4 = (void *)*((_QWORD *)WeakRetained + 7);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100A11B60;
    v6[3] = &unk_1011AC8B0;
    v5 = *(_QWORD *)(a1 + 32);
    v6[4] = v3;
    v6[5] = v5;
    objc_msgSend(v4, "dismissViewControllerAnimated:completion:", 1, v6);
  }

}

uint64_t sub_100A11B60(uint64_t a1)
{
  uint64_t result;

  result = objc_opt_respondsToSelector(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), "refinementCoordinatorRequestsChangeAddress:withShortcut:");
  if ((result & 1) != 0)
    return (uint64_t)_objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "refinementCoordinatorRequestsChangeAddress:withShortcut:");
  return result;
}

void sub_100A12004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100A12030(uint64_t a1, double a2, double a3)
{
  _BYTE *WeakRetained;
  double v7;
  double Double;
  void *v9;
  id v10;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (!WeakRetained[32])
    {
      v10 = WeakRetained;
      v7 = GEOCalculateDistance(WeakRetained, *(double *)(a1 + 40), *(double *)(a1 + 48), a2, a3);
      Double = GEOConfigGetDouble(MapsConfig_ThresholdForPromptingHomeWorkChangeAddressDialogInMeters, off_1014B3408);
      WeakRetained = v10;
      if (v7 >= Double)
      {
        *((_BYTE *)v10 + 32) = 1;
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "_refinementAlertController"));
        if (v9)
          objc_msgSend(*((id *)v10 + 7), "presentViewController:animated:completion:", v9, 1, 0);

        WeakRetained = v10;
      }
    }
  }

}

void sub_100A121DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100A121F8(uint64_t a1)
{
  id *WeakRetained;
  id *v2;
  char v3;
  id *v4;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v3 = objc_opt_respondsToSelector(WeakRetained[3], "refinementCoordinatorDidComplete:");
    v2 = v4;
    if ((v3 & 1) != 0)
    {
      objc_msgSend(v4[3], "refinementCoordinatorDidComplete:", v4);
      v2 = v4;
    }
  }

}

void sub_100A123DC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100A12400(uint64_t a1)
{
  id *WeakRetained;
  id *v2;
  char v3;
  id *v4;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v3 = objc_opt_respondsToSelector(WeakRetained[3], "refinementCoordinatorDidComplete:");
    v2 = v4;
    if ((v3 & 1) != 0)
    {
      objc_msgSend(v4[3], "refinementCoordinatorDidComplete:", v4);
      v2 = v4;
    }
  }

}

id sub_100A128AC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "reloadData");
}

void sub_100A12B78(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Block_object_dispose((const void *)(v4 - 152), 8);
  objc_destroyWeak((id *)(v4 - 104));
  _Unwind_Resume(a1);
}

uint64_t sub_100A12BD0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100A12BE0(uint64_t a1)
{

}

void sub_100A12BE8(uint64_t a1, void *a2)
{
  id v3;
  MapsCountryCodeCheckmarkRow *v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  MapsCountryCodeCheckmarkRow *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];

  v3 = a2;
  v4 = objc_alloc_init(MapsCountryCodeCheckmarkRow);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "setTitle:", CFSTR("Default"));
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "setSubtitle:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 88));
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "setValue:", 0);
  objc_msgSend(v3, "addRow:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40));
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v7 = *(id *)(a1 + 40);
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v8)
  {
    v9 = v8;
    v10 = 0;
    v11 = *(_QWORD *)v17;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v17 != v11)
          objc_enumerationMutation(v7);
        v13 = *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)v12);
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectAtIndexedSubscript:", (char *)v12 + v10, (_QWORD)v16));
        v15 = objc_alloc_init(MapsCountryCodeCheckmarkRow);
        -[MapsDebugTableRow setTitle:](v15, "setTitle:", v14);
        -[MapsDebugTableRow setSubtitle:](v15, "setSubtitle:", v13);
        -[MapsDebugCheckmarkRow setValue:](v15, "setValue:", v13);
        objc_msgSend(v3, "addRow:", v15);
        objc_msgSend(*(id *)(a1 + 56), "addObject:", v15);

        v12 = (char *)v12 + 1;
      }
      while (v9 != v12);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
      v10 += (uint64_t)v12;
    }
    while (v9);
  }

}

id sub_100A12DD8(uint64_t a1)
{
  id WeakRetained;
  void *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_countryCode"));

  return v2;
}

void sub_100A12E10(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_setCountryCode:", v3);

}

id sub_100A12E58(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "addRow:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
}

void sub_100A12E6C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v3 = a2;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v4 = *(id *)(a1 + 32);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v10;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v10 != v7)
          objc_enumerationMutation(v4);
        objc_msgSend(v3, "addRow:", *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v8), (_QWORD)v9);
        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v6);
  }

}

void sub_100A12F68(uint64_t a1, void *a2)
{
  id v3;
  id *v4;
  void *v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  _QWORD v10[4];
  id v11;
  _QWORD v12[4];
  id v13;

  v3 = a2;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100A13104;
  v12[3] = &unk_1011DFA40;
  v4 = (id *)(a1 + 32);
  objc_copyWeak(&v13, (id *)(a1 + 32));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Custom"), CFSTR("XX"), 3, v12, &stru_1011DFA60));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet characterSetWithCharactersInString:](NSCharacterSet, "characterSetWithCharactersInString:", CFSTR("ABCDEFGHIJKLMNOPQRSTUVWXYZ")));
  objc_msgSend(v5, "setMaximumNumberOfCharacters:", 2);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100A13140;
  v10[3] = &unk_1011DFA88;
  v7 = v6;
  v11 = v7;
  objc_msgSend(v5, "setFilter:", v10);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100A131C4;
  v8[3] = &unk_1011C8038;
  objc_copyWeak(&v9, v4);
  objc_msgSend(v5, "setDone:", v8);
  objc_destroyWeak(&v9);

  objc_destroyWeak(&v13);
}

void sub_100A130DC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

id sub_100A13104(uint64_t a1)
{
  id WeakRetained;
  void *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_countryCode"));

  return v2;
}

BOOL sub_100A13140(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  _BOOL8 v8;

  v3 = a2;
  if (objc_msgSend(v3, "length"))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uppercaseString"));
    v5 = objc_msgSend(v4, "rangeOfCharacterFromSet:", *(_QWORD *)(a1 + 32));
    v7 = v6;

    if (v5)
      v8 = 0;
    else
      v8 = v7 == objc_msgSend(v3, "length");
  }
  else
  {
    v8 = 1;
  }

  return v8;
}

void sub_100A131C4(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  void *v4;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uppercaseString"));

  objc_msgSend(WeakRetained, "_setCountryCode:", v4);
}

void sub_100A133C4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v9;
  id v10;

  v9 = a1;
  if (qword_1014D3C80 != -1)
    dispatch_once(&qword_1014D3C80, &stru_1011DFAA8);
  if (byte_1014D3C78)
  {
    v10 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:arguments:", v9, &a9);
    NSLog(CFSTR("RoutingApps: %@"), v10);

  }
}

void sub_100A1345C(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  byte_1014D3C78 = objc_msgSend(v1, "BOOLForKey:", CFSTR("__internal__RoutingAppsLogging"));

}

int64_t sub_100A135F8(id a1, FeatureDiscoverySource *a2, FeatureDiscoverySource *a3)
{
  FeatureDiscoverySource *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", -[FeatureDiscoverySource priority](a2, "priority")));
  v6 = -[FeatureDiscoverySource priority](v4, "priority");

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v6));
  v8 = objc_msgSend(v5, "compare:", v7);

  return (int64_t)v8;
}

uint64_t sub_100A13B74(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

FeatureDiscoveryModel *__cdecl sub_100A13BC8(id a1, FeatureDiscoverySource *a2, unint64_t a3)
{
  FeatureDiscoverySource *v3;
  void *v4;

  v3 = a2;
  if (-[FeatureDiscoverySource isAvailable](v3, "isAvailable"))
    v4 = (void *)objc_claimAutoreleasedReturnValue(-[FeatureDiscoverySource model](v3, "model"));
  else
    v4 = 0;

  return (FeatureDiscoveryModel *)v4;
}

void sub_100A13E80(id a1, FeatureDiscoverySource *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v5;
  char isKindOfClass;
  FeatureDiscoverySource *v7;
  FeatureDiscoverySource *v8;
  FeatureDiscoverySource *v9;

  v9 = a2;
  v5 = objc_opt_class(EnvironmentalFeatureDiscoverySource);
  isKindOfClass = objc_opt_isKindOfClass(v9, v5);
  v7 = v9;
  if ((isKindOfClass & 1) != 0)
  {
    v8 = v9;
    if (-[FeatureDiscoverySource isAvailable](v8, "isAvailable"))
      -[FeatureDiscoverySource markAsShown](v8, "markAsShown");
    *a4 = 1;

    v7 = v9;
  }

}

void sub_100A15A4C(uint64_t a1)
{
  double v1;
  void *v2;
  id v3;

  if (*(_BYTE *)(a1 + 40))
    v1 = 1.0;
  else
    v1 = 0.0;
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "titleHeaderView"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "titleLabel"));
  objc_msgSend(v2, "setAlpha:", v1);

}

void sub_100A15EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100A15F08(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "subscriptionManager"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "subscription"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "identifier"));
    v9 = &_dispatch_main_q;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100A16044;
    v10[3] = &unk_1011B6E58;
    objc_copyWeak(&v12, (id *)(a1 + 40));
    v11 = *(id *)(a1 + 32);
    objc_msgSend(v6, "removeSubscriptionWithIdentifier:callbackQueue:completionHandler:", v8, &_dispatch_main_q, v10);

    objc_destroyWeak(&v12);
  }

}

void sub_100A16030(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100A16044(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id WeakRetained;
  id v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  id v13;

  v4 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (v4)
    {
      v6 = sub_100431D5C();
      v7 = objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        v8 = *(_QWORD *)(a1 + 32);
        v10 = 138412546;
        v11 = v8;
        v12 = 2112;
        v13 = v4;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Error removing subscriptionInfo: %@, error: %@", (uint8_t *)&v10, 0x16u);
      }

    }
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
    objc_msgSend(v9, "closeOfflineMapDetails");

  }
}

void sub_100A16330(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  id v10;

  v3 = a2;
  if (v3)
  {
    v4 = sub_100431D5C();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = *(_QWORD *)(a1 + 32);
      v7 = 138412546;
      v8 = v6;
      v9 = 2112;
      v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Error adding subscription to paired device: %@, error: %@", (uint8_t *)&v7, 0x16u);
    }

  }
}

void sub_100A164C4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  id v10;

  v3 = a2;
  if (v3)
  {
    v4 = sub_100431D5C();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = *(_QWORD *)(a1 + 32);
      v7 = 138412546;
      v8 = v6;
      v9 = 2112;
      v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Error removing subscription from paired device: %@, error: %@", (uint8_t *)&v7, 0x16u);
    }

  }
}

uint64_t sub_100A16940()
{
  void *v0;
  uint64_t v1;
  void *v3;
  void *v4;
  unsigned int v5;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"));
  if (!objc_msgSend(v0, "isOnDeviceAppInstallationAllowed")
    || objc_msgSend(v0, "userMode") == 1
    || (objc_msgSend(v0, "isEphemeralMultiUser") & 1) != 0)
  {
    v1 = 0;
  }
  else
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](ACAccountStore, "ams_sharedAccountStore"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "ams_activeiTunesAccount"));
    v5 = objc_msgSend(v4, "ams_isManagedAppleID");

    v1 = v5 ^ 1;
  }

  return v1;
}

void sub_100A16A50(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_1014D3C88;
  qword_1014D3C88 = (uint64_t)v1;

}

void sub_100A16B4C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100A16B70(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend(v3, "copy");

    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100A16C24;
    v7[3] = &unk_1011AD1E8;
    objc_copyWeak(&v9, (id *)(a1 + 32));
    v8 = v5;
    v6 = v5;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v7);

    objc_destroyWeak(&v9);
  }
}

void sub_100A16C24(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_updateMeCard:", *(_QWORD *)(a1 + 32));

}

id sub_100A16E74(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateMeCard:", *(_QWORD *)(a1 + 40));
}

void sub_100A16FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100A16FCC(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_touchMapsSuggestionsEngine");

}

id sub_100A180D8()
{
  if (qword_1014D3CA0 != -1)
    dispatch_once(&qword_1014D3CA0, &stru_1011DFBD8);
  return (id)qword_1014D3C98;
}

void sub_100A1940C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFPuckModeCircleView");
  v2 = (void *)qword_1014D3C98;
  qword_1014D3C98 = (uint64_t)v1;

}

id sub_100A19E74(uint64_t a1)
{
  uint64_t v1;
  double v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = 0.0;
  if (!*(_BYTE *)(v1 + 57))
    v2 = 1.0;
  return objc_msgSend(*(id *)(v1 + 24), "setAlpha:", v2);
}

void sub_100A19EA4(uint64_t a1)
{
  id v2;

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "superview"));
  objc_msgSend(v2, "layoutIfNeeded");

}

id sub_100A19F7C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "hideShareETASuggestion");
}

void sub_100A1AB48(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100A1AB64(uint64_t a1, int a2)
{
  id WeakRetained;

  if (a2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(WeakRetained, "_removeImageForIdentifier:", *(_QWORD *)(a1 + 32));

  }
}

void sub_100A1B158(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  id v12;
  id v13;

  v5 = a2;
  v6 = a3;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100A1B228;
  v9[3] = &unk_1011AF1B0;
  v10 = *(id *)(a1 + 32);
  v11 = *(id *)(a1 + 40);
  v12 = v6;
  v13 = v5;
  v7 = v5;
  v8 = v6;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v9);

}

void sub_100A1B228(uint64_t a1)
{
  void *v2;
  void *v3;
  unsigned int v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "identifier"));
  v4 = objc_msgSend(v2, "isEqualToString:", v3);

  if (v4)
  {
    objc_msgSend(*(id *)(a1 + 32), "endAnimatingActivityIndicatorWithError:", *(_QWORD *)(a1 + 48));
    if (*(_QWORD *)(a1 + 56))
      objc_msgSend(*(id *)(a1 + 32), "setImage:");
  }
}

void sub_100A1BB78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100A1BB94(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  uint64_t v3;
  char isKindOfClass;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v8 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "tableViewCell"));
    v3 = objc_opt_class(MKTableViewCell);
    isKindOfClass = objc_opt_isKindOfClass(v2, v3);

    if ((isKindOfClass & 1) != 0)
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "tableViewCell"));
      objc_msgSend(v5, "set_mapkit_forceSeparatorFrameToCGRectZero:", 0);

    }
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "tableViewCell"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "contentView"));
    objc_msgSend(v7, "setBackgroundColor:", 0);

    WeakRetained = v8;
  }

}

void sub_100A1C00C(id a1)
{
  MapsXPCConnectionsManager *v1;
  void *v2;

  v1 = objc_alloc_init(MapsXPCConnectionsManager);
  v2 = (void *)qword_1014D3CA8;
  qword_1014D3CA8 = (uint64_t)v1;

}

void sub_100A1C1AC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_100A1C1DC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_handleConnectionInvalidated");

}

void sub_100A1C208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  id WeakRetained;

  sub_100B0AAF0(OS_LOG_TYPE_INFO, CFSTR("MapsXPCConnectionsManager Maps broker connection interrupted."), a3, a4, a5, a6, a7, a8, v9);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_fetchListenerEndpoints");

}

void sub_100A1C390(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_100A1C3AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    sub_100B0AAF0(OS_LOG_TYPE_INFO, CFSTR("MapsXPCConnectionsManager Maps broker connection invalidated."), v1, v2, v3, v4, v5, v6, v8);
    v7 = (void *)WeakRetained[1];
    WeakRetained[1] = 0;

  }
}

uint64_t sub_100A1C3F8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100A1C4FC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_100A1C518(uint64_t a1)
{
  id WeakRetained;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v8 = WeakRetained;
  if (WeakRetained)
  {
    v9 = (void *)*((_QWORD *)WeakRetained + 1);
    v18 = v8;
    if (v9)
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "remoteObjectProxy"));
      if (v16)
      {
        sub_100B0AAF0(OS_LOG_TYPE_INFO, CFSTR("MapsXPCConnectionsManager Maps broker fetching endpoints."), v10, v11, v12, v13, v14, v15, v17);
        objc_msgSend(v16, "listenerEndpointForIdentifer:reply:", CFSTR("kSiriPluginXPCEndpointIdentifier"), &stru_1011DFC38);
        objc_msgSend(v16, "listenerEndpointForIdentifer:reply:", CFSTR("kCompanionDaemonXPCEndpointIdentifier"), &stru_1011DFC58);
        objc_msgSend(v16, "listenerEndpointForIdentifer:reply:", CFSTR("kPushDaemonXPCEndpointIdentifier"), &stru_1011DFC78);
      }
      else
      {
        sub_100B0AAF0(OS_LOG_TYPE_INFO, CFSTR("MapsXPCConnectionsManager Maps broker connection remote object is nil, unable to fetch endpoints."), v10, v11, v12, v13, v14, v15, v17);
      }

    }
    else
    {
      sub_100B0AAF0(OS_LOG_TYPE_INFO, CFSTR("MapsXPCConnectionsManager Maps broker connection is nil, unable to fetch endpoints."), v2, v3, v4, v5, v6, v7, v17);
    }
    v8 = v18;
  }

}

void sub_100A1C5EC(id a1, NSXPCListenerEndpoint *a2)
{
  NSXPCListenerEndpoint *v2;
  _QWORD block[4];
  NSXPCListenerEndpoint *v4;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100A1C664;
  block[3] = &unk_1011AC860;
  v4 = a2;
  v2 = v4;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_100A1C664(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[IPCServer sharedServer](IPCServer, "sharedServer"));
  objc_msgSend(v2, "setSiriPluginListenerEndpoint:", v1);

}

void sub_100A1C6A8(id a1, NSXPCListenerEndpoint *a2)
{
  NSXPCListenerEndpoint *v2;
  _QWORD block[4];
  NSXPCListenerEndpoint *v4;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100A1C720;
  block[3] = &unk_1011AC860;
  v4 = a2;
  v2 = v4;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_100A1C720(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[IPCServer sharedServer](IPCServer, "sharedServer"));
  objc_msgSend(v2, "setCompanionDaemonListenerEndpoint:", v1);

}

void sub_100A1C764(id a1, NSXPCListenerEndpoint *a2)
{
  NSXPCListenerEndpoint *v2;
  _QWORD block[4];
  NSXPCListenerEndpoint *v4;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100A1C7DC;
  block[3] = &unk_1011AC860;
  v4 = a2;
  v2 = v4;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_100A1C7DC(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[IPCServer sharedServer](IPCServer, "sharedServer"));
  objc_msgSend(v2, "setPushDaemonListenerEndpoint:", v1);

}

uint64_t sub_100A1C820(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100A1C950(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[IPCServer sharedServer](IPCServer, "sharedServer"));
  objc_msgSend(v2, "setSiriPluginListenerEndpoint:", v1);

}

void sub_100A1C994(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[IPCServer sharedServer](IPCServer, "sharedServer"));
  objc_msgSend(v2, "setCompanionDaemonListenerEndpoint:", v1);

}

void sub_100A1C9D8(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[IPCServer sharedServer](IPCServer, "sharedServer"));
  objc_msgSend(v2, "setPushDaemonListenerEndpoint:", v1);

}

CarAdvisoryView *sub_100A1E394(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  id v6;
  void *v7;
  objc_class *v8;
  NSString *v9;
  void *v10;
  void *v11;
  void *v12;
  __CFString *v13;
  CarAdvisoryView *v14;
  void *v15;
  uint8_t buf[4];
  __CFString *v18;
  __int16 v19;
  id v20;

  v3 = a2;
  if (objc_msgSend(v3, "isClickable"))
  {
    v4 = sub_10043364C();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
LABEL_13:

      v14 = 0;
      goto LABEL_14;
    }
    v6 = *(id *)(a1 + 32);
    v7 = v6;
    if (!v6)
    {
      v13 = CFSTR("<nil>");
      goto LABEL_12;
    }
    v8 = (objc_class *)objc_opt_class(v6);
    v9 = NSStringFromClass(v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    if ((objc_opt_respondsToSelector(v7, "accessibilityIdentifier") & 1) != 0)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "performSelector:", "accessibilityIdentifier"));
      v12 = v11;
      if (v11 && !objc_msgSend(v11, "isEqualToString:", v10))
      {
        v13 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v10, v7, v12));

        goto LABEL_9;
      }

    }
    v13 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v10, v7));
LABEL_9:

LABEL_12:
    *(_DWORD *)buf = 138543618;
    v18 = v13;
    v19 = 2112;
    v20 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[%{public}@] CarAdvisoriesView - skipping a clickable advisory %@.", buf, 0x16u);

    goto LABEL_13;
  }
  v14 = -[CarAdvisoryView initWithAdvisory:]([CarAdvisoryView alloc], "initWithAdvisory:", v3);
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
  objc_msgSend(v15, "captureUserAction:onTarget:forAdvisory:", 247, 1007, v3);

  -[CarAdvisoryView setTranslatesAutoresizingMaskIntoConstraints:](v14, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
LABEL_14:

  return v14;
}

void sub_100A1E78C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  int v15;
  id v16;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = sub_100431A4C();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v15 = 138412290;
      v16 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "ReverseGeocodeAction resolveMapItem: %@", (uint8_t *)&v15, 0xCu);
    }

  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "placemark"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "mkPostalAddressDictionary"));

  v12 = objc_msgSend(objc_alloc((Class)MKPlacemark), "initWithCoordinate:addressDictionary:", v11, *(double *)(a1 + 48), *(double *)(a1 + 56));
  v13 = objc_msgSend(objc_alloc((Class)MKMapItem), "initWithPlacemark:", v12);

  if (*(_QWORD *)(a1 + 32))
    objc_msgSend(v13, "setName:");
  v14 = *(_QWORD *)(a1 + 40);
  if (v14)
    (*(void (**)(uint64_t, id))(v14 + 16))(v14, v13);

}

uint64_t sub_100A1F244(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100A1F328(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 32));
  _Unwind_Resume(a1);
}

void sub_100A1F344(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "applySnapshot");
    WeakRetained = v2;
  }

}

void sub_100A1F640(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "apiController"));
    v3 = objc_msgSend(v2, "currentState");

    WeakRetained = v4;
    if (v3 == (id)1)
    {
      objc_msgSend(v4, "clearGuidesFromSnapshot");
      WeakRetained = v4;
    }
  }

}

void sub_100A1FCAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_100A1FFB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100A1FFD8(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "collectionView"));
  v4 = sub_1002A8AA0(v3);

  if (v4 == 5)
  {
    v5 = objc_loadWeakRetained(v1);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "apiController"));
    v14 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "allCollectionViewFilters"));

    v7 = objc_loadWeakRetained(v1);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "filterMenu"));
    v9 = objc_loadWeakRetained(v1);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "selectedFilterIndexPath"));
    v11 = objc_loadWeakRetained(v1);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "apiController"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "allCollectionViewIdentifiers"));
    objc_msgSend(v8, "configureForAllCollectionsWithRoutingDelegate:withAllCollectionsResultFilters:withSelectedFilterIndex:selectedFilterResultsCount:", v9, v14, v10, objc_msgSend(v13, "count"));

  }
}

void sub_100A20220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100A20244(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "collectionView"));
  v4 = sub_1002A8AA0(v3);

  if (v4 == 5)
  {
    v5 = objc_loadWeakRetained(v1);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "apiController"));
    v14 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "allCollectionViewFilters"));

    v7 = objc_loadWeakRetained(v1);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "filterMenu"));
    v9 = objc_loadWeakRetained(v1);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "selectedFilterIndexPath"));
    v11 = objc_loadWeakRetained(v1);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "apiController"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "allCollectionViewIdentifiers"));
    objc_msgSend(v8, "configureForAllCollectionsWithRoutingDelegate:withAllCollectionsResultFilters:withSelectedFilterIndex:selectedFilterResultsCount:", v9, v14, v10, objc_msgSend(v13, "count"));

  }
}

id sub_100A21074()
{
  if (qword_1014D3CC0 != -1)
    dispatch_once(&qword_1014D3CC0, &stru_1011DFCE8);
  return (id)qword_1014D3CB8;
}

void sub_100A21188(id a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc((Class)NSCalendar), "initWithCalendarIdentifier:", NSCalendarIdentifierGregorian);
  v2 = (void *)qword_1014D3CB8;
  qword_1014D3CB8 = (uint64_t)v1;

}

void sub_100A236DC(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  id v4;

  v2 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "cleanUp");

  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 8) = 21;
  v4 = objc_loadWeakRetained(v2);
  objc_msgSend(v4, "logEvent");

}

void sub_100A23840(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_100A2397C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100A23A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_100A23B28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100A23D2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_100A23DE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100A23EC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_100A24030(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_100A244A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_100A244C8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  NSObject *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  NSObject *v26;
  void *v27;
  _QWORD v28[4];
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint8_t buf[4];
  void *v35;
  __int16 v36;
  void *v37;

  v5 = a2;
  v6 = *(NSObject **)(a1 + 32);
  v7 = a3;
  dispatch_group_enter(v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "imageUploadUrl"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", v8));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableURLRequest requestWithURL:](NSMutableURLRequest, "requestWithURL:", v9));

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "imageUploadHttpMethod"));
  objc_msgSend(v10, "setHTTPMethod:", v11);

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("--data-binary")));
  objc_msgSend(v10, "setValue:forHTTPHeaderField:", v12, CFSTR("Content-Type"));
  v13 = sub_100431FFC();
  v14 = objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "clientImageUuid"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "imageUploadUrl"));
    *(_DWORD *)buf = 138412546;
    v35 = v15;
    v36 = 2112;
    v37 = v16;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Submitting photo with client image identifier %@ to url %@", buf, 0x16u);

  }
  v17 = *(void **)(*(_QWORD *)(a1 + 40) + 8);
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "rawImageData"));

  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472;
  v28[2] = sub_100A247D8;
  v28[3] = &unk_1011DFDC8;
  v19 = v5;
  v29 = v19;
  v30 = *(id *)(a1 + 48);
  v20 = *(id *)(a1 + 56);
  v21 = *(_QWORD *)(a1 + 72);
  v31 = v20;
  v33 = v21;
  v32 = *(id *)(a1 + 32);
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "uploadTaskWithRequest:fromData:completionHandler:", v10, v18, v28));

  v23 = *(void **)(a1 + 64);
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "progress"));
  objc_msgSend(v23, "addChild:withPendingUnitCount:", v24, 1);

  v25 = sub_100431FFC();
  v26 = objc_claimAutoreleasedReturnValue(v25);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
  {
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "imageUploadUrl"));
    *(_DWORD *)buf = 138412290;
    v35 = v27;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "Starting image upload to url %@", buf, 0xCu);

  }
  objc_msgSend(v22, "resume");

}

void sub_100A247D8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  __int128 v14;
  _QWORD block[4];
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  __int128 v22;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100A24904;
  block[3] = &unk_1011DFDA0;
  v16 = v8;
  v17 = *(id *)(a1 + 32);
  v18 = v9;
  v19 = *(id *)(a1 + 40);
  v20 = v7;
  v21 = *(id *)(a1 + 48);
  v14 = *(_OWORD *)(a1 + 56);
  v10 = (id)v14;
  v22 = v14;
  v11 = v7;
  v12 = v9;
  v13 = v8;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_100A24904(uint64_t a1)
{
  id v2;
  id v3;
  NSObject *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  int v14;
  void *v15;
  __int16 v16;
  id v17;
  __int16 v18;
  id v19;

  v2 = *(id *)(a1 + 32);
  v3 = sub_100431FFC();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "imageUploadUrl"));
    v14 = 138412802;
    v15 = v5;
    v16 = 2048;
    v17 = objc_msgSend(v2, "statusCode");
    v18 = 2112;
    v19 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Received response with for url %@ with status code %ld and body %@", (uint8_t *)&v14, 0x20u);

  }
  if (*(_QWORD *)(a1 + 48))
  {
    v6 = sub_100431FFC();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientImageUuid"));
      v14 = 138412290;
      v15 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to submit image with client image identifier %@", (uint8_t *)&v14, 0xCu);

    }
    objc_msgSend(*(id *)(a1 + 56), "addObject:", *(_QWORD *)(a1 + 48));
  }
  else if (+[FeedbackSubmissionManager isStatusCodeSuccess:](FeedbackSubmissionManager, "isStatusCodeSuccess:", objc_msgSend(v2, "statusCode"))&& *(_QWORD *)(a1 + 64))
  {
    v9 = sub_100431FFC();
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientImageUuid"));
      v14 = 138412290;
      v15 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Successfully submitted image with client image identifier %@", (uint8_t *)&v14, 0xCu);

    }
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientImageUuid"));
    v13 = +[GEORPImageUpdate newImageUpdateWithClientImageId:responseData:](GEORPImageUpdate, "newImageUpdateWithClientImageId:responseData:", v12, *(_QWORD *)(a1 + 64));

    objc_msgSend(*(id *)(a1 + 72), "addObject:", v13);
    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24);

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 80));

}

void sub_100A24B50(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  id *WeakRetained;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id *v16;
  _QWORD v17[5];
  id v18;
  id v19;
  id v20;
  uint8_t buf[4];
  id v22;
  __int16 v23;
  uint64_t v24;

  v2 = *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "imageUploadInfos"));
  v4 = objc_msgSend(v3, "count");

  if (v2 == v4)
  {
    WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 96));
    if (WeakRetained)
    {
      v16 = WeakRetained;
      v6 = objc_loadWeakRetained(WeakRetained + 3);
      v7 = *(_QWORD *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 56);
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_100A24D5C;
      v17[3] = &unk_1011DFE18;
      v17[4] = v16;
      v18 = *(id *)(a1 + 64);
      v19 = *(id *)(a1 + 72);
      v20 = *(id *)(a1 + 80);
      objc_msgSend(v6, "finishedUploadingImagesWithImageUpdate:correctionsRequest:completion:", v7, v8, v17);

      WeakRetained = v16;
    }

  }
  else
  {
    v9 = sub_100431FFC();
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "imageUploadInfos"));
      v12 = objc_msgSend(v11, "count");
      v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24);
      *(_DWORD *)buf = 134218240;
      v22 = v12;
      v23 = 2048;
      v24 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "We have a mismatch, expected %lu uploads but only did %lu uploads", buf, 0x16u);

    }
    v14 = *(_QWORD *)(a1 + 80);
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "firstObject"));
    (*(void (**)(uint64_t, _QWORD, void *))(v14 + 16))(v14, 0, v15);

  }
}

id sub_100A24D5C(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_submitCorrectionsRequest:traits:parentProgress:completion:", a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

void sub_100A24F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100A24FB0(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  id *WeakRetained;
  id v9;
  NSObject *v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  os_log_type_t v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  id v19;
  uint64_t v20;
  int v21;
  id v22;

  v6 = a2;
  v7 = a4;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 56));
  if (!WeakRetained)
    goto LABEL_14;
  v9 = sub_100431FFC();
  v10 = objc_claimAutoreleasedReturnValue(v9);
  v11 = v10;
  if (v7)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v21 = 138412290;
      v22 = v7;
      v12 = "Failed to submit corrections with error %@";
      v13 = v11;
      v14 = OS_LOG_TYPE_ERROR;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v13, v14, v12, (uint8_t *)&v21, 0xCu);
    }
  }
  else if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    v15 = *(void **)(a1 + 32);
    v21 = 138412290;
    v22 = v15;
    v12 = "Successfully submitted corrections for identifier %@";
    v13 = v11;
    v14 = OS_LOG_TYPE_INFO;
    goto LABEL_7;
  }

  if (v6)
  {
    v16 = sub_100431FFC();
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "statusAsString:", objc_msgSend(v6, "status")));
      v21 = 138412290;
      v22 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Received response with status code %@", (uint8_t *)&v21, 0xCu);

    }
  }
  v19 = objc_loadWeakRetained(WeakRetained + 3);
  objc_msgSend(v19, "finishedCorrectionsUploadWithResponse:request:error:", v6, *(_QWORD *)(a1 + 40), v7);

  v20 = *(_QWORD *)(a1 + 48);
  if (v20)
    (*(void (**)(uint64_t, id, id))(v20 + 16))(v20, v6, v7);
LABEL_14:

}

BOOL sub_100A257A0(id a1, CollectionHandler *a2, unint64_t a3, BOOL *a4)
{
  _BOOL4 v5;

  v5 = -[CollectionHandler isFavoriteCollection](a2, "isFavoriteCollection", a3);
  if (v5)
    *a4 = 1;
  return v5;
}

id sub_100A25928(uint64_t a1)
{
  double v2;
  CGFloat Height;
  double v4;
  __int128 v5;
  void *v6;
  CGAffineTransform v8;
  CGAffineTransform v9;
  objc_super v10;
  CGRect v11;

  v2 = *(double *)(a1 + 40);
  v10.receiver = *(id *)(a1 + 32);
  v10.super_class = (Class)RelatedSearchSuggestionView;
  objc_msgSendSuper2(&v10, "setAlpha:", v2);
  objc_msgSend(*(id *)(a1 + 32), "frame");
  Height = CGRectGetHeight(v11);
  objc_msgSend(*(id *)(a1 + 32), "alpha");
  if (v4 == 0.0)
  {
    CGAffineTransformMakeTranslation(&v9, 0.0, Height);
  }
  else
  {
    v5 = *(_OWORD *)&CGAffineTransformIdentity.c;
    *(_OWORD *)&v9.a = *(_OWORD *)&CGAffineTransformIdentity.a;
    *(_OWORD *)&v9.c = v5;
    *(_OWORD *)&v9.tx = *(_OWORD *)&CGAffineTransformIdentity.tx;
  }
  v6 = *(void **)(a1 + 32);
  v8 = v9;
  return objc_msgSend(v6, "setTransform:", &v8);
}

id sub_100A259E0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setUserInteractionEnabled:", 1);
}

id sub_100A259EC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
}

id sub_100A266D8(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "identifierCache"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifierForObject:", v3));

  return v5;
}

TwoLinesHistoryEntryRecentsItemOutlineCellModel *sub_100A26730(uint64_t a1, void *a2)
{
  id v3;
  SidebarOutlineCellBackgroundModel *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  SidebarOutlineCellBackgroundModel *v10;
  uint64_t v11;
  id v12;
  __objc2_prot *v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  unsigned int v19;
  id v20;
  uint64_t v21;
  TwoLinesRecentContactOutlineCellModel *v22;
  TwoLineOutlineCellButtonAccessoryModel *v23;
  TwoLinesHistoryEntryRecentsItemOutlineCellModel *v24;
  void *v25;
  TwoLinesHistoryEntryRecentsItemOutlineCellModel *v26;
  uint64_t v27;
  TwoLineOutlineCellButtonAccessoryModel *v29;

  v3 = a2;
  v4 = [SidebarOutlineCellBackgroundModel alloc];
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v6 = objc_msgSend(v5, "isCollectionViewFocusedWithSectionController:", *(_QWORD *)(a1 + 32));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v8 = objc_msgSend(v7, "isCollectionViewProxyFocusedWithSectionController:", *(_QWORD *)(a1 + 32));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v10 = -[SidebarOutlineCellBackgroundModel initWithStyle:dropStyle:grouping:collectionViewFocused:collectionViewProxyFocused:collectionViewHasDropSession:](v4, "initWithStyle:dropStyle:grouping:collectionViewFocused:collectionViewProxyFocused:collectionViewHasDropSession:", 0, 0, 1, v6, v8, objc_msgSend(v9, "hasCollectionViewDropSessionWithSectionController:", *(_QWORD *)(a1 + 32)));

  v11 = objc_opt_class(HistoryEntryRecentsItem);
  if ((objc_opt_isKindOfClass(v3, v11) & 1) == 0)
  {
    v21 = objc_opt_class(CRRecentContact);
    if ((objc_opt_isKindOfClass(v3, v21) & 1) != 0)
    {
      v22 = -[TwoLinesRecentContactOutlineCellModel initWithRecentContact:backgroundModel:]([TwoLinesRecentContactOutlineCellModel alloc], "initWithRecentContact:backgroundModel:", v3, v10);
    }
    else
    {
      v27 = objc_opt_class(SearchResult);
      if ((objc_opt_isKindOfClass(v3, v27) & 1) == 0)
      {
        v26 = 0;
        goto LABEL_19;
      }
      v22 = -[TwoLinesSearchResultOutlineCellModel initWithSearchResult:backgroundModel:]([TwoLinesSearchResultOutlineCellModel alloc], "initWithSearchResult:backgroundModel:", v3, v10);
    }
    goto LABEL_18;
  }
  v12 = v3;
  v13 = &OBJC_PROTOCOL___MSPHistoryEntryTransitLineItem;
  v14 = objc_opt_class(HistoryEntryRecentsItem);
  v15 = v12;
  if ((objc_opt_isKindOfClass(v15, v14) & 1) != 0)
    v16 = v15;
  else
    v16 = 0;
  v17 = v16;

  if (v17
    && (v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "historyEntry")),
        v19 = objc_msgSend(v18, "conformsToProtocol:", v13),
        v18,
        v19))
  {
    v20 = v15;
  }
  else
  {
    v20 = 0;
  }

  if (!v20)
  {
    v24 = [TwoLinesHistoryEntryRecentsItemOutlineCellModel alloc];
    goto LABEL_17;
  }
  v23 = -[TwoLineOutlineCellButtonAccessoryModel initWithAccessoryType:visibility:delegate:]([TwoLineOutlineCellButtonAccessoryModel alloc], "initWithAccessoryType:visibility:delegate:", 1, 1, *(_QWORD *)(a1 + 32));
  v24 = [TwoLinesHistoryEntryRecentsItemOutlineCellModel alloc];
  if (!v23)
  {
LABEL_17:
    v22 = -[TwoLinesHistoryEntryRecentsItemOutlineCellModel initWithHistoryEntryRecentsItem:accessoryModels:backgroundModel:](v24, "initWithHistoryEntryRecentsItem:accessoryModels:backgroundModel:", v15, &__NSArray0__struct, v10);
LABEL_18:
    v26 = (TwoLinesHistoryEntryRecentsItemOutlineCellModel *)v22;
    goto LABEL_19;
  }
  v29 = v23;
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v29, 1));
  v26 = -[TwoLinesHistoryEntryRecentsItemOutlineCellModel initWithHistoryEntryRecentsItem:accessoryModels:backgroundModel:](v24, "initWithHistoryEntryRecentsItem:accessoryModels:backgroundModel:", v15, v25, v10);

LABEL_19:
  return v26;
}

NSArray *__cdecl sub_100A26A08(id a1, id a2, HomeOutlineSectionBuilderStack *a3)
{
  return (NSArray *)&__NSArray0__struct;
}

BOOL sub_100A26A14(id a1, id a2, HomeOutlineSectionBuilderStack *a3)
{
  return 0;
}

void sub_100A26B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100A26BCC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_deleteSnapshot:", *(_QWORD *)(a1 + 32));

}

void sub_100A27198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100A271C0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deletions"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifierPath"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v5));

  if (v6)
    v7 = 0;
  else
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deletionWithSnapshot:", v3));

  return v7;
}

id sub_100A2725C(id a1, HomeDeletion *a2, unint64_t a3)
{
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;

  v3 = (void *)objc_claimAutoreleasedReturnValue(-[HomeDeletion object](a2, "object", a3));
  v4 = objc_opt_class(MapsUIDiffableDataSourceOutlineNodeSnapshot);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
    v5 = v3;
  else
    v5 = 0;
  v6 = v5;

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "viewModel"));
  if (objc_msgSend(v7, "conformsToProtocol:", &OBJC_PROTOCOL___HomeRecentsItemCellModel))
    v8 = v7;
  else
    v8 = 0;
  v9 = v8;

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "homeRecentsItem"));
  if (v10)
    v11 = v10;

  return v10;
}

void sub_100A2730C(uint64_t a1, void *a2)
{
  id WeakRetained;
  id v4;

  v4 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (v4 && WeakRetained)
    objc_msgSend(WeakRetained, "endFailedDeletions:error:", *(_QWORD *)(a1 + 32), v4);

}

void sub_100A27368(uint64_t a1, void *a2)
{
  id WeakRetained;
  id v4;

  v4 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (v4 && WeakRetained)
    objc_msgSend(WeakRetained, "endFailedDeletions:error:", *(_QWORD *)(a1 + 32), v4);

}

void sub_100A27B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100A27B3C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100A27B4C(uint64_t a1)
{

}

void sub_100A27B54(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

BOOL sub_100A27C3C(id a1, GEOMapsHomeSection *a2, unint64_t a3, BOOL *a4)
{
  return -[GEOMapsHomeSection sectionType](a2, "sectionType", a3, a4) == (id)1;
}

BOOL sub_100A27CF0(id a1, GEOMapsHomeSection *a2, unint64_t a3, BOOL *a4)
{
  return -[GEOMapsHomeSection sectionType](a2, "sectionType", a3, a4) == (id)1;
}

id sub_100A27D10(id a1, GEOCollectionResult *a2, unint64_t a3)
{
  return -[GEOCollectionResult collection](a2, "collection", a3);
}

BOOL sub_100A27D94(id a1, GEOMapsHomeSection *a2, unint64_t a3, BOOL *a4)
{
  return -[GEOMapsHomeSection sectionType](a2, "sectionType", a3, a4) == (id)1;
}

void sub_100A280C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100A280E4(uint64_t a1)
{
  id WeakRetained;
  void *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "currentTraits"));

  return v2;
}

id sub_100A28F10(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "updateComponentsIfNeededWithAnimation:", *(_QWORD *)(a1 + 40));
  return _objc_msgSend(*(id *)(a1 + 40), "runInCurrentContext");
}

uint64_t sub_100A28F3C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100A29110(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cardsOverlay"));
  objc_msgSend(v1, "beginDeferringPresentingMapPopovers");

}

void sub_100A29140(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cardsOverlay"));
  objc_msgSend(v1, "endDeferringPresentingMapPopovers");

}

void sub_100A29378(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  _QWORD *v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  uint64_t v33;

  v2 = objc_msgSend(*(id *)(a1 + 32), "_internal_topContextWantsCompassLayoutControl") ^ 1;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "floatingControlsOverlay"));
  objc_msgSend(v3, "setAutomaticallyUpdateCompassInsets:", v2);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "floatingControlsOverlay"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "mapViewDelegate"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapView"));
  objc_msgSend(v5, "mapView:regionDidChangeAnimated:", v6, 0);

  v7 = sub_10043196C();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    v9 = *(_QWORD *)(a1 + 40);
    v32 = 134217984;
    v33 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "IOSChrome floating controls -> %lu", (uint8_t *)&v32, 0xCu);
  }

  objc_msgSend(*(id *)(a1 + 32), "_updateFloatingControlsDidChangePitching:animated:", 0, 0);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "overlayController"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "floatingControlsOverlay"));
  if (v10 < 1)
  {
    objc_msgSend(v11, "setViewportConstraintsEnabled:forOverlay:", 0, v12);

    v17 = *(_QWORD **)(a1 + 32);
    v18 = (void *)v17[3];
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "floatingControlsOverlay"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "mapViewDelegate"));
    objc_msgSend(v18, "removeAdditionalDelegate:forProtocol:", v16, 0);
  }
  else
  {
    objc_msgSend(v11, "setViewportConstraintsEnabled:forOverlay:", 1, v12);

    v13 = *(_QWORD **)(a1 + 32);
    v14 = (void *)v13[3];
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "floatingControlsOverlay"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "mapViewDelegate"));
    objc_msgSend(v14, "addAdditionalDelegate:forProtocol:", v16, 0);
  }

  if ((*(_BYTE *)(a1 + 41) & 1) != 0)
  {
    if (+[PedestrianARSessionTask isPedestrianARModeSupported](PedestrianARSessionTask, "isPedestrianARModeSupported"))
    {
      v22 = *(_QWORD **)(a1 + 32);
      if (!v22[97])
      {
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "appCoordinator"));
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "platformController"));
        v25 = objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "pedestrianARSessionStateManager"));
        v26 = *(_QWORD *)(a1 + 32);
        v27 = *(void **)(v26 + 776);
        *(_QWORD *)(v26 + 776) = v25;

        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 776), "addObserver:");
      }
    }
  }
  else
  {
    v19 = *(void **)(*(_QWORD *)(a1 + 32) + 776);
    if (v19)
    {
      objc_msgSend(v19, "removeObserver:");
      v20 = *(_QWORD *)(a1 + 32);
      v21 = *(void **)(v20 + 776);
      *(_QWORD *)(v20 + 776) = 0;

    }
  }
  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "baseModeController"));
  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "actionCoordinator"));
  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "venuesManager"));

  v31 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
  if ((*(_BYTE *)(a1 + 40) & 0x40) != 0)
    objc_msgSend(v31, "addAdditionalDelegate:forProtocol:", v30, 0);
  else
    objc_msgSend(v31, "removeAdditionalDelegate:forProtocol:", v30, 0);

}

void sub_100A29678(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "floatingControlsOverlay"));
  objc_msgSend(v2, "setHidden:animated:", *(_QWORD *)(a1 + 40) == 0, *(unsigned __int8 *)(a1 + 48));

}

void sub_100A296C4(uint64_t a1)
{
  void *v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "overlayController"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "overlayContentView"));
  objc_msgSend(v1, "layoutIfNeeded");

}

id sub_100A29C9C(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 712), "setStyle:", *(_QWORD *)(a1 + 40));
}

id sub_100A29CB0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setNeedsStatusBarAppearanceUpdate");
}

void sub_100A29DAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_100A29DC4(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_currentContainerViewController"));
  v2 = objc_msgSend(v6, "containerStyle");
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "weatherOverlay"));
  v4 = objc_msgSend(v3, "containerStyle");

  if (v4 != v2)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "weatherOverlay"));
    objc_msgSend(v5, "setContainerStyle:", v2);

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  }

}

void sub_100A29E5C(uint64_t a1)
{
  unsigned int v2;
  id v3;

  v2 = objc_msgSend(*(id *)(a1 + 32), "_canShowWeather");
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "weatherOverlay"));
  objc_msgSend(v3, "setHidden:animated:", v2 ^ 1, *(unsigned __int8 *)(a1 + 40));

}

void sub_100A2A3E8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 728), "setActive:", *(_QWORD *)(a1 + 40) != 0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 736), "setActive:", *(_QWORD *)(a1 + 40) == 0);
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "window"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 712), "window"));

    if (v3 == v4)
    {
      +[NSLayoutConstraint deactivateConstraints:](NSLayoutConstraint, "deactivateConstraints:", *(_QWORD *)(a1 + 48));
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "constraintsForPositionInStatusBarBackgroundView:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 712)));
      +[NSLayoutConstraint activateConstraints:](NSLayoutConstraint, "activateConstraints:", v5);

    }
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v6, "layoutIfNeeded");

  v7 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v7, "postNotificationName:object:", CFSTR("IOSBasedChromeStatusBarHeightDidUpdateNotification"), *(_QWORD *)(a1 + 32));

}

void sub_100A2A9A4(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "coordinator"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "containerViewController"));
  v3 = objc_msgSend(v2, "containerStyle");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lookAroundOverlay"));
  objc_msgSend(v4, "setContainerStyle:", v3);

}

void sub_100A2AA18(uint64_t a1)
{
  unsigned int v2;
  void *v3;
  unsigned int v4;
  unsigned int v5;
  _BOOL8 v6;
  void *v7;
  void *v8;
  id v9;

  v2 = objc_msgSend(*(id *)(a1 + 32), "_canShowLookAroundButton");
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_lookAroundButtonMapItem"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lookAroundOverlay"));
  v4 = objc_msgSend(v3, "isHidden");

  if (v2)
  {
    if (v9)
      v5 = v4;
    else
      v5 = 0;
    v6 = v5 == 1
      && +[LookAroundButtonContainerViewController isIncompleteMapItem:](LookAroundButtonContainerViewController, "isIncompleteMapItem:", v9);
  }
  else
  {
    v6 = 1;
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lookAroundOverlay"));
  objc_msgSend(v7, "showLookAroundPreviewForMapItem:willChangeHidden:animated:", v9, v4 ^ v6, *(unsigned __int8 *)(a1 + 40));

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lookAroundOverlay"));
  objc_msgSend(v8, "setHidden:animated:", v6, *(unsigned __int8 *)(a1 + 40));

}

void sub_100A2AC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;
  uint64_t v22;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Block_object_dispose((const void *)(v22 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_100A2AC74(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  void *v4;
  id v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v5 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "redoSearchOverlay"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "coordinator"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "containerViewController"));
    objc_msgSend(v2, "updateContainerStyle:", objc_msgSend(v4, "containerStyle"));

    WeakRetained = v5;
  }

}

void sub_100A2ACF4(uint64_t a1)
{
  id WeakRetained;
  unsigned int v3;
  void *v4;
  id v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v5 = WeakRetained;
    v3 = objc_msgSend(WeakRetained, "_shouldShowSearchFloatingControl");
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "redoSearchOverlay"));
    objc_msgSend(v4, "setHidden:animated:", v3 ^ 1, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));

    WeakRetained = v5;
  }

}

NSString *__cdecl sub_100A2B294(id a1)
{
  int BOOL;
  const __CFString *v2;

  BOOL = GEOConfigGetBOOL(NavigationConfig_UseCLPedestrianMapMatchedLocations[0], NavigationConfig_UseCLPedestrianMapMatchedLocations[1]);
  v2 = CFSTR("OFF");
  if (BOOL)
    v2 = CFSTR("ON");
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("CL-PedMM: %@"), v2);
}

void sub_100A2CC60(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  void *v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contexts", 0));
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)i);
        if ((objc_opt_respondsToSelector(v7, "desiredCards") & 1) != 0)
        {
          v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "desiredCards"));
          objc_msgSend(*(id *)(a1 + 40), "addObjectsFromArray:", v8);

        }
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v4);
  }

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cardsOverlay"));
  objc_msgSend(v9, "setControllerStack:animated:completion:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 48));

}

void sub_100A2CDB4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  id v6;
  void *v7;
  objc_class *v8;
  NSString *v9;
  void *v10;
  void *v11;
  void *v12;
  __CFString *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint8_t buf[4];
  __CFString *v21;
  __int16 v22;
  void *v23;

  v3 = a2;
  v4 = sub_10043196C();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v6 = *(id *)(a1 + 32);
    v7 = v6;
    if (!v6)
    {
      v13 = CFSTR("<nil>");
      goto LABEL_10;
    }
    v8 = (objc_class *)objc_opt_class(v6);
    v9 = NSStringFromClass(v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    if ((objc_opt_respondsToSelector(v7, "accessibilityIdentifier") & 1) != 0)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "performSelector:", "accessibilityIdentifier"));
      v12 = v11;
      if (v11 && !objc_msgSend(v11, "isEqualToString:", v10))
      {
        v13 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v10, v7, v12));

        goto LABEL_8;
      }

    }
    v13 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v10, v7));
LABEL_8:

LABEL_10:
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "object"));
    *(_DWORD *)buf = 138543618;
    v21 = v13;
    v22 = 2114;
    v23 = v14;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[%{public}@] notified external container did appear %{public}@", buf, 0x16u);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v15, "removeObserver:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 792));

  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(void **)(v16 + 792);
  *(_QWORD *)(v16 + 792) = 0;

  v18 = *(_QWORD *)(a1 + 32);
  v19 = *(void **)(v18 + 800);
  *(_QWORD *)(v18 + 800) = 0;

}

void sub_100A2CFC8(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cardsOverlay"));
  objc_msgSend(v2, "setContaineesHidden:", 1);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cardsOverlay"));
  objc_msgSend(v3, "setChromeContext:", 0);

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cardsOverlay"));
  objc_msgSend(v4, "reset");

}

id sub_100A2D3D4(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[6];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100A2D434;
  v3[3] = &unk_1011AD518;
  v1 = *(_QWORD *)(a1 + 40);
  v3[4] = *(_QWORD *)(a1 + 32);
  v3[5] = v1;
  return +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v3);
}

void sub_100A2D434(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "settingsController"));
  objc_msgSend(v2, "setMapViewMode:animated:", *(_QWORD *)(a1 + 40), 0);

}

id sub_100A2D5E0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  objc_msgSend(*(id *)(a1 + 32), "setCompassEnabled:", 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
  objc_msgSend(v2, "captureUserAction:onTarget:eventValue:", 4, 601, 0);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "cardsOverlay"));
  objc_msgSend(v3, "setUseBackdropFullScreen:", 0);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "cardsOverlay"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "view"));
  objc_msgSend(v5, "setNeedsLayout");

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "cardsOverlay"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "view"));
  objc_msgSend(v7, "layoutIfNeeded");

  objc_msgSend(*(id *)(a1 + 40), "setNeedsUpdateComponent:animated:", CFSTR("lookAroundButton"), 1);
  objc_msgSend(*(id *)(a1 + 40), "setNeedsUpdateComponent:animated:", CFSTR("weatherOverlay"), 1);
  return objc_msgSend(*(id *)(a1 + 40), "setNeedsUpdateComponent:animated:", CFSTR("floatingControls"), 1);
}

id sub_100A2EE4C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_freezeInnerLayoutGuide");
}

void sub_100A2EF78(uint64_t a1)
{
  char v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  objc_msgSend(*(id *)(a1 + 32), "_updateInnerLayoutGuideWithTopViewController:", *(_QWORD *)(a1 + 40));
  if (sub_1002A8AA0(*(void **)(a1 + 32)) == 5)
    objc_msgSend(*(id *)(a1 + 32), "setNeedsUpdateComponent:animated:", CFSTR("weatherOverlay"), 1);
  objc_msgSend(*(id *)(a1 + 32), "updateMapViewFrameRate");
  if ((objc_opt_respondsToSelector(*(_QWORD *)(a1 + 48), "viewReady") & 1) != 0)
    objc_msgSend(*(id *)(a1 + 48), "viewReady");
  v2 = objc_opt_respondsToSelector(*(_QWORD *)(a1 + 48), "mapViewResponder");
  v3 = *(void **)(a1 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "mapViewResponder"));
    objc_msgSend(v3, "_updateMapViewResponderTargetForObject:", v4);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "_updateMapViewResponderTargetForObject:", *(_QWORD *)(a1 + 40));
  }
  objc_msgSend(*(id *)(a1 + 32), "updateThemeViewAndControllers");
  objc_msgSend(*(id *)(a1 + 32), "setNeedsUserActivityUpdate");
  objc_msgSend(*(id *)(a1 + 32), "setNeedsUpdateOfSupportedInterfaceOrientations");
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_maps_mapsSceneDelegate"));
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "appCoordinator"));

  objc_msgSend(v6, "displayAnyEnqueuedFixedProblemNotification");
}

void sub_100A2FF6C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100A2FF90(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  _QWORD v7[4];
  id v8;
  id v9;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && v5 && !a3)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100A30034;
    v7[3] = &unk_1011AC8B0;
    v8 = v5;
    v9 = WeakRetained;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v7);

  }
}

void sub_100A30034(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  unsigned int v4;
  void *v5;
  id v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (**v11)(_QWORD, _QWORD);
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _QWORD v27[4];
  id v28;
  _BYTE v29[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectedVehicle"));
  v3 = objc_msgSend(v2, "isLPRWithElectricEngine");
  if (v2)
  {
    v4 = 0;
  }
  else
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[MapsExternalDevice sharedInstance](MapsExternalDevice, "sharedInstance"));
    v4 = (objc_msgSend(v5, "engineTypes") >> 16) & 1;

  }
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = sub_100A30288;
  v27[3] = &unk_1011B7B30;
  v6 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v28 = v6;
  v7 = objc_retainBlock(v27);
  v11 = (void (**)(_QWORD, _QWORD))v7;
  if ((v3 | v4) == 1)
  {
    v12 = VGChargingConnectorTypeOptionsList(v7, v8, v9, v10);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    ((void (**)(_QWORD, void *))v11)[2](v11, v13);
  }
  else
  {
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "vehicles", 0));
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v23, v29, 16);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)v24;
      do
      {
        v17 = 0;
        do
        {
          if (*(_QWORD *)v24 != v16)
            objc_enumerationMutation(v13);
          v18 = VGChargingConnectorTypeOptionsUnpacked(objc_msgSend(*(id *)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)v17), "supportedConnectors"));
          v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
          ((void (**)(_QWORD, void *))v11)[2](v11, v19);

          v17 = (char *)v17 + 1;
        }
        while (v15 != v17);
        v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v23, v29, 16);
      }
      while (v15);
    }
  }

  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "allObjects"));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "mapView"));
  objc_msgSend(v21, "setShowsLiveEVData:", objc_msgSend(v20, "count") != 0);

  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "mapView"));
  objc_msgSend(v22, "setSupportedEVConnectorTypes:", v20);

}

void sub_100A30288(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v13;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v13 != v8)
          objc_enumerationMutation(v5);
        v10 = GEOEvChargingConnectorTypeFromVGConnectorType(objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)v9), "unsignedIntegerValue", (_QWORD)v12));
        if ((_DWORD)v10)
        {
          v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v10));
          objc_msgSend(v4, "addObject:", v11);

        }
        v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v7);
  }

  if (objc_msgSend(v4, "count"))
    objc_msgSend(*(id *)(a1 + 32), "addObjectsFromArray:", v4);

}

id sub_100A30444(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateMapViewWithEVChargingConfig");
}

void sub_100A30520(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[MapsLightLevelController sharedController](MapsLightLevelController, "sharedController"));
  objc_msgSend(v1, "updateLightLevelAnimated:lightLevel:", 0, objc_msgSend(v2, "currentLightLevel"));

}

void sub_100A30BA8(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(unsigned __int8 *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapView"));
  objc_msgSend(v2, "_setShowsNightMode:", v1);

}

id sub_100A30CE8(uint64_t a1)
{
  +[MapsAnalyticStateProvider updateMapSettingsInformationLabels:traffic:](MapsAnalyticStateProvider, "updateMapSettingsInformationLabels:traffic:", *(unsigned __int8 *)(a1 + 32), *(unsigned __int8 *)(a1 + 33));
  return +[MapsAnalyticStateProvider updateSettingsInformation](MapsAnalyticStateProvider, "updateSettingsInformation");
}

void sub_100A30F1C(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 616), a2);
}

void sub_100A312FC(uint64_t a1)
{
  void *v2;
  int v3;
  uint64_t v4;
  RoutePlanningSession *v5;
  void *v6;
  id v7;
  BOOL v8;
  void *v9;
  unsigned int v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;

  v2 = *(void **)(a1 + 32);
  v3 = *(unsigned __int8 *)(a1 + 48);
  if (*(_BYTE *)(a1 + 48))
    v4 = 6;
  else
    v4 = 1;
  v16 = 0;
  v5 = sub_1009C3FA8(v2, v4, v3, &v16);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = v16;
  if (v7)
    v8 = 1;
  else
    v8 = v6 == 0;
  if (!v8)
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_maps_platformController"));
    objc_msgSend(v15, "pushSession:", v6);
LABEL_11:

    goto LABEL_12;
  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[GEOPlatform sharedPlatform](GEOPlatform, "sharedPlatform"));
  v10 = objc_msgSend(v9, "isInternalInstall");

  if (v10)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "localizedDescription"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", CFSTR("Error Loading Trace"), v11, 1));

    v12 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", CFSTR("OK"), 1, 0));
    objc_msgSend(v15, "addAction:", v12);

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_maps_mapsSceneDelegate"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "topMostPresentedViewController"));
    objc_msgSend(v14, "presentViewController:animated:completion:", v15, 1, 0);

    goto LABEL_11;
  }
LABEL_12:

}

id sub_100A31C10(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_teardownViewHierarchyWithActionCoordinator:shouldAnimate:", *(_QWORD *)(a1 + 40), 0);
}

id sub_100A31E3C(uint64_t a1)
{
  _QWORD v2[5];

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100A31E9C;
  v2[3] = &unk_1011AC860;
  v2[4] = *(_QWORD *)(a1 + 32);
  return +[UIViewController _performWithoutDeferringTransitions:](UIViewController, "_performWithoutDeferringTransitions:", v2);
}

void sub_100A31E9C(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_teardownViewHierarchyForTesting");
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "coordinator"));
  objc_msgSend(v2, "endSearchForTesting");

}

void sub_100A31EE0(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "coordinator"));
  objc_msgSend(v1, "setViewMode:animated:", 0, 0);
  objc_msgSend(v1, "exit3dMode");

}

void sub_100A31F20(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "coordinator"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapView"));
  objc_msgSend(v2, "setUserTrackingMode:animated:", 1, 1);

  objc_msgSend(v7, "defaultZoom");
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "floatingControlsOverlay"));
  objc_msgSend(v3, "setAlpha:", 1.0);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lookAroundOverlay"));
  objc_msgSend(v4, "setAlpha:", 1.0);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "redoSearchOverlay"));
  objc_msgSend(v5, "setAlpha:", 1.0);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "weatherOverlay"));
  objc_msgSend(v6, "setAlpha:", 1.0);

}

void sub_100A32144(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  uint8_t v6[16];

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "coordinator"));
  objc_msgSend(v1, "viewControllerPresentSearchEndEditingAnimated:", 0);
  objc_msgSend(v1, "viewControllerClosed:animated:", 0, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "searchPinsManager"));
  objc_msgSend(v2, "clearSearchPins");

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "searchPinsManager"));
  objc_msgSend(v3, "clearDirectionsPins");

  objc_msgSend(v1, "clearMapSelection");
  v4 = sub_100431A4C();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "_teardownViewHierarchyForTesting completed popToRootContextAnimated:NO", v6, 2u);
  }

}

uint64_t sub_100A32E3C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100A331F8(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  id v5;

  if (a2)
  {
    v3 = *(void **)(a1 + 32);
    v4 = a2;
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "coordinator"));
    objc_msgSend(v5, "viewController:selectParkedCar:andPerformAction:", *(_QWORD *)(a1 + 32), v4, *(_QWORD *)(a1 + 40));

  }
}

id sub_100A3605C(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKey:", *(_QWORD *)(a1 + 40)));

  if (v2)
    return objc_msgSend(*(id *)(a1 + 32), "BOOLForKey:", *(_QWORD *)(a1 + 40));
  else
    return (id)*(unsigned __int8 *)(a1 + 48);
}

uint64_t sub_100A360A8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "setBool:forKey:", a2, *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "synchronize");
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  return result;
}

uint64_t sub_100A36174(uint64_t a1)
{
  return GEOConfigGetBOOL(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t sub_100A36180(uint64_t a1, uint64_t a2)
{
  return GEOConfigSetBOOL(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), a2);
}

uint64_t sub_100A36264(uint64_t a1)
{
  if ((_GEOConfigHasValue(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)) & 1) != 0)
    return GEOConfigGetBOOL(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  else
    return *(unsigned __int8 *)(a1 + 48);
}

uint64_t sub_100A362A4(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  GEOConfigSetBOOL(a1[5], a1[6], a2);
  result = a1[4];
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  return result;
}

id sub_100A36570(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 32);
  v4 = 0;
  return (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithValidatedFormat:validFormatSpecifiers:error:](NSString, "stringWithValidatedFormat:validFormatSpecifiers:error:", v2, CFSTR("%f"), &v4, a2));
}

float sub_100A366E0(uint64_t a1)
{
  void *v2;
  void *v3;
  float v4;
  float v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", *(_QWORD *)(a1 + 32)));

  if (v3)
  {
    objc_msgSend(v2, "floatForKey:", *(_QWORD *)(a1 + 32));
    if (v4 >= *(float *)(a1 + 44))
      v4 = *(float *)(a1 + 44);
    if (v4 <= *(float *)(a1 + 48))
      v5 = *(float *)(a1 + 48);
    else
      v5 = v4;
  }
  else
  {
    v5 = *(float *)(a1 + 40);
  }

  return v5;
}

void sub_100A36768(uint64_t a1, float a2)
{
  double v4;
  void *v5;
  uint64_t v6;
  id v7;

  v7 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  *(float *)&v4 = a2;
  objc_msgSend(v7, "setFloat:forKey:", *(_QWORD *)(a1 + 32), v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v5, "synchronize");

  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
    (*(void (**)(float))(v6 + 16))(a2);

}

float sub_100A368F8(_QWORD *a1)
{
  uint64_t Integer;
  uint64_t v3;

  Integer = GEOConfigGetInteger(a1[4], a1[5]);
  v3 = a1[6];
  if (Integer > v3)
    v3 = Integer;
  if (v3 >= a1[7])
    return (float)(uint64_t)a1[7];
  return (float)v3;
}

uint64_t sub_100A36938(_QWORD *a1, float a2)
{
  int64_t v3;
  int64_t v4;
  uint64_t result;

  v3 = llroundf(a2);
  if (a1[5] > v3)
    v3 = a1[5];
  if (v3 >= a1[6])
    v4 = a1[6];
  else
    v4 = v3;
  GEOConfigSetInteger(a1[7], a1[8], v4);
  result = a1[4];
  if (result)
    return (*(uint64_t (**)(uint64_t, int64_t))(result + 16))(result, v4);
  return result;
}

float sub_100A36998(id a1, float a2)
{
  return roundf(a2);
}

float sub_100A36AB0(_QWORD *a1)
{
  unint64_t UInteger;
  unint64_t v3;

  UInteger = GEOConfigGetUInteger(a1[4], a1[5]);
  v3 = a1[6];
  if (UInteger > v3)
    v3 = UInteger;
  if (v3 >= a1[7])
    return (float)(unint64_t)a1[7];
  return (float)v3;
}

uint64_t sub_100A36AF0(_QWORD *a1, float a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t result;

  v3 = vcvtas_u32_f32(a2);
  if (a1[5] > v3)
    v3 = a1[5];
  if (v3 >= a1[6])
    v4 = a1[6];
  else
    v4 = v3;
  GEOConfigSetUInteger(a1[7], a1[8], v4);
  result = a1[4];
  if (result)
    return (*(uint64_t (**)(uint64_t, unint64_t))(result + 16))(result, v4);
  return result;
}

float sub_100A36B50(id a1, float a2)
{
  return roundf(a2);
}

float sub_100A36C68(_QWORD *a1)
{
  unint64_t Uint64;
  unint64_t v3;

  Uint64 = GEOConfigGetUint64(a1[4], a1[5]);
  v3 = a1[6];
  if (Uint64 > v3)
    v3 = Uint64;
  if (v3 >= a1[7])
    return (float)(unint64_t)a1[7];
  return (float)v3;
}

uint64_t sub_100A36CA8(_QWORD *a1, float a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t result;

  v3 = vcvtas_u32_f32(a2);
  if (a1[5] > v3)
    v3 = a1[5];
  if (v3 >= a1[6])
    v4 = a1[6];
  else
    v4 = v3;
  GEOConfigSetUint64(a1[7], a1[8], v4);
  result = a1[4];
  if (result)
    return (*(uint64_t (**)(uint64_t, unint64_t))(result + 16))(result, v4);
  return result;
}

float sub_100A36D08(id a1, float a2)
{
  return roundf(a2);
}

float sub_100A36E14(uint64_t a1)
{
  double Double;

  Double = GEOConfigGetDouble(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  if (Double <= *(double *)(a1 + 48))
    Double = *(double *)(a1 + 48);
  if (Double >= *(double *)(a1 + 56))
    return *(double *)(a1 + 56);
  return Double;
}

uint64_t sub_100A36E54(uint64_t a1, float a2)
{
  double v3;
  double v4;
  uint64_t result;

  v3 = a2;
  if (*(double *)(a1 + 40) >= v3)
    v3 = *(double *)(a1 + 40);
  if (v3 >= *(double *)(a1 + 48))
    v4 = *(double *)(a1 + 48);
  else
    v4 = v3;
  GEOConfigSetDouble(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), v4);
  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(double))(result + 16))(v4);
  return result;
}

float sub_100A36FC8(uint64_t a1)
{
  double Double;

  Double = GEOConfigGetDouble(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  if (Double <= *(double *)(a1 + 48))
    Double = *(double *)(a1 + 48);
  if (Double >= *(double *)(a1 + 56))
    return *(double *)(a1 + 56);
  return Double;
}

uint64_t sub_100A37008(uint64_t a1, float a2)
{
  double v3;
  double v4;
  uint64_t result;

  v3 = a2;
  if (*(double *)(a1 + 40) >= v3)
    v3 = *(double *)(a1 + 40);
  if (v3 >= *(double *)(a1 + 48))
    v4 = *(double *)(a1 + 48);
  else
    v4 = v3;
  GEOConfigSetDouble(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), v4);
  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(double))(result + 16))(v4);
  return result;
}

id sub_100A37228(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", *(_QWORD *)(a1 + 32)));

  if (v3)
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "stringForKey:", *(_QWORD *)(a1 + 32)));
  else
    v4 = 0;

  return v4;
}

void sub_100A3729C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  v5 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v5, "setObject:forKey:", v3, *(_QWORD *)(a1 + 32));

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v4, "synchronize");

}

uint64_t sub_100A3738C(uint64_t a1)
{
  return GEOConfigGetString(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t sub_100A37398(uint64_t a1, uint64_t a2)
{
  return GEOConfigSetString(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), a2);
}

id sub_100A37420(uint64_t a1)
{
  NSNumber *v1;
  void *v2;
  void *v3;

  v1 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", GEOConfigGetInteger(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "stringValue"));

  return v3;
}

uint64_t sub_100A37474(uint64_t a1, void *a2)
{
  return GEOConfigSetInteger(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), objc_msgSend(a2, "integerValue"));
}

id sub_100A37518(uint64_t a1)
{
  NSNumber *v1;
  void *v2;
  void *v3;

  v1 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", GEOConfigGetUInteger(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "stringValue"));

  return v3;
}

uint64_t sub_100A3756C(uint64_t a1, void *a2)
{
  return GEOConfigSetUInteger(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), objc_msgSend(a2, "longLongValue"));
}

id sub_100A37610(uint64_t a1)
{
  NSNumber *v1;
  void *v2;
  void *v3;

  v1 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", GEOConfigGetUint64(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "stringValue"));

  return v3;
}

uint64_t sub_100A37664(uint64_t a1, void *a2)
{
  return GEOConfigSetUint64(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), objc_msgSend(a2, "longLongValue"));
}

id sub_100A37708(uint64_t a1)
{
  NSNumber *v1;
  void *v2;
  void *v3;

  v1 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", GEOConfigGetDouble(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "stringValue"));

  return v3;
}

uint64_t sub_100A37758(uint64_t a1, void *a2)
{
  double v3;

  objc_msgSend(a2, "doubleValue");
  return GEOConfigSetDouble(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v3);
}

uint64_t sub_100A377F8(uint64_t a1)
{
  return GEOConfigGetDate(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t sub_100A37804(uint64_t a1, uint64_t a2)
{
  return GEOConfigSetDate(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), a2);
}

id sub_100A37C90(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", *(_QWORD *)(a1 + 32)));

  v4 = v3;
  if (!v3)
    v4 = *(void **)(a1 + 40);
  v5 = v4;

  return v5;
}

void sub_100A37CF8(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;

  v9 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 32);
  if (v9)
    objc_msgSend(v3, "setObject:forKey:", v9, v5);
  else
    objc_msgSend(v3, "removeObjectForKey:", v5);

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v6, "synchronize");

  v7 = *(_QWORD *)(a1 + 40);
  v8 = v9;
  if (v7)
  {
    (*(void (**)(uint64_t, id))(v7 + 16))(v7, v9);
    v8 = v9;
  }

}

void sub_100A380A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100A380CC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t DecodedValueWithSource;

  v2 = a1[4];
  if (v2)
    DecodedValueWithSource = (*(uint64_t (**)(void))(v2 + 16))();
  else
    DecodedValueWithSource = _GEOConfigGetDecodedValueWithSource(a1[5], a1[6], 0, 0);
  return (id)objc_claimAutoreleasedReturnValue(DecodedValueWithSource);
}

void sub_100A3810C(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  id v5;

  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "value"));
  v4 = a1[4];
  v5 = (id)v3;
  if (v4)
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v4, v3);
  else
    _GEOConfigSetEncodedValue(a1[5], a1[6], v3);

}

void sub_100A38168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t DecodedValueWithSource;
  void *v6;
  id WeakRetained;

  if (*(_QWORD *)(a1 + 32))
  {
    v4 = *(_QWORD *)(a1 + 40);
    if (v4)
      DecodedValueWithSource = (*(uint64_t (**)(void))(v4 + 16))();
    else
      DecodedValueWithSource = _GEOConfigGetDecodedValueWithSource(a2, a3, 0, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue(DecodedValueWithSource);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "update");

}

void sub_100A39A74(id a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  _QWORD v11[4];
  _QWORD v12[4];
  _QWORD v13[4];
  _QWORD v14[4];

  v13[0] = NSFontAttributeName;
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont boldSystemFontOfSize:](UIFont, "boldSystemFontOfSize:", 20.0));
  v14[0] = v1;
  v13[1] = NSForegroundColorAttributeName;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor labelColor](UIColor, "labelColor"));
  v3 = MKServerFormattedStringArtworkFeatureTypeAttributeKey;
  v14[1] = v2;
  v14[2] = &off_101270408;
  v4 = MKServerFormattedStringArtworkSizeAttributeKey;
  v13[2] = MKServerFormattedStringArtworkFeatureTypeAttributeKey;
  v13[3] = MKServerFormattedStringArtworkSizeAttributeKey;
  v14[3] = &off_101270420;
  v5 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v14, v13, 4));
  v6 = (void *)qword_1014D3CD0;
  qword_1014D3CD0 = v5;

  v11[0] = NSFontAttributeName;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont systemFontOfSize:](UIFont, "systemFontOfSize:", 13.0));
  v12[0] = v7;
  v11[1] = NSForegroundColorAttributeName;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor labelColor](UIColor, "labelColor"));
  v12[1] = v8;
  v12[2] = &off_101270408;
  v11[2] = v3;
  v11[3] = v4;
  v12[3] = &off_101270420;
  v9 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v12, v11, 4));
  v10 = (void *)qword_1014D3CD8;
  qword_1014D3CD8 = v9;

}

void sub_100A3A640(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100A3A65C(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id WeakRetained;

  if (a2)
  {
    v2 = (id *)(a1 + 32);
    v3 = a2;
    WeakRetained = objc_loadWeakRetained(v2);
    v4 = objc_msgSend(v3, "mutableCopy");

    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "sortedArrayUsingSelector:", "localizedCaseInsensitiveCompare:"));
    objc_msgSend(WeakRetained, "setFullCategoryList:", v5);

    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "fullCategoryList"));
    v7 = objc_msgSend(v6, "copy");
    objc_msgSend(WeakRetained, "setPartialCategoryList:", v7);

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "searchBarDefaultPlaceholder"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "navigationItem"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "searchController"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "searchBar"));
    objc_msgSend(v11, "setPlaceholder:", v8);

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "selectedCategoryNames"));
    objc_msgSend(WeakRetained, "updateSelectedCategoryNames:", v12);

  }
}

void sub_100A3ACD0(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "traitCollection"));
  v3 = objc_msgSend(v2, "userInterfaceIdiom");

  if (v3 != (id)5)
  {
    v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "navigationItem"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "searchController"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "searchBar"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "searchTextField"));
    objc_msgSend(v6, "becomeFirstResponder");

  }
}

void sub_100A3BD14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100A3BD4C(id a1, MapsDebugTableSection *a2)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  MapsDebugTableSection *v6;

  v6 = a2;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MSPSharedTripService sharedInstance](MSPSharedTripService, "sharedInstance"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "sharingIdentity"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "description"));
  v5 = -[MapsDebugTableSection addReadOnlyRowWithTitle:value:](v6, "addReadOnlyRowWithTitle:value:", CFSTR("Sharing not available"), v4);

}

MSPSharedTripContact *__cdecl sub_100A3BDD4(id a1, MSPSharedTripContact *a2, unint64_t a3)
{
  MSPSharedTripContact *v3;
  MSPSharedTripContact *v4;

  v3 = a2;
  if (+[MSPSharedTripContact isVirtualReceiver:](MSPSharedTripContact, "isVirtualReceiver:", v3))v4 = v3;
  else
    v4 = 0;

  return v4;
}

void sub_100A3BE20(id a1, MapsDebugTableSection *a2)
{
  -[MapsDebugTableSection setFooter:](a2, "setFooter:", CFSTR("No virtual receivers, add some below"));
}

void sub_100A3BE30(uint64_t a1, void *a2)
{
  unint64_t v2;
  const __CFString *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *i;
  unint64_t v10;
  unint64_t v11;
  const __CFString *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id obj;
  uint64_t v24;
  id v26;
  _QWORD v27[5];
  id v28;
  _QWORD v29[4];
  id v30;
  _QWORD v31[6];
  _QWORD v32[6];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _QWORD v37[2];
  _BYTE v38[128];

  v26 = a2;
  v2 = (unint64_t)+[MSPSharedTripContact capabilityTypeForVirtualReceiver:](MSPSharedTripContact, "capabilityTypeForVirtualReceiver:", *(_QWORD *)(a1 + 32));
  if (v2 > 4)
    v3 = CFSTR("Unknown");
  else
    v3 = off_1011E0720[v2];
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Sharing via %@"), v3));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "handleForIDS"));
  v6 = objc_msgSend(v26, "addReadOnlyRowWithTitle:value:", v4, v5);

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[MSPSharedTripContact capabilityVersionsForVirtualReceiver:](MSPSharedTripContact, "capabilityVersionsForVirtualReceiver:", *(_QWORD *)(a1 + 32)));
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  obj = v7;
  v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
  if (v8)
  {
    v24 = *(_QWORD *)v34;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(_QWORD *)v34 != v24)
          objc_enumerationMutation(obj);
        v10 = (unint64_t)objc_msgSend(*(id *)(*((_QWORD *)&v33 + 1) + 8 * (_QWORD)i), "unsignedIntegerValue");
        v11 = v10;
        v12 = CFSTR("Unknown");
        if (v10 <= 2)
          v12 = off_1011E0708[v10];
        v32[0] = _NSConcreteStackBlock;
        v32[1] = 3221225472;
        v32[2] = sub_100A3C238;
        v32[3] = &unk_1011E0508;
        v32[4] = *(_QWORD *)(a1 + 32);
        v32[5] = v10;
        v13 = (void *)objc_claimAutoreleasedReturnValue(+[UIAction actionWithTitle:image:identifier:handler:](UIAction, "actionWithTitle:image:identifier:handler:", CFSTR("Start"), 0, 0, v32));
        v37[0] = v13;
        v31[0] = _NSConcreteStackBlock;
        v31[1] = 3221225472;
        v31[2] = sub_100A3C244;
        v31[3] = &unk_1011E0508;
        v31[4] = *(_QWORD *)(a1 + 32);
        v31[5] = v11;
        v14 = (void *)objc_claimAutoreleasedReturnValue(+[UIAction actionWithTitle:image:identifier:handler:](UIAction, "actionWithTitle:image:identifier:handler:", CFSTR("Stop"), 0, 0, v31));
        v37[1] = v14;
        v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v37, 2));
        v16 = (void *)objc_claimAutoreleasedReturnValue(+[UIMenu menuWithTitle:children:](UIMenu, "menuWithTitle:children:", CFSTR("Live Updates"), v15));

        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "addMenuRowWithTitle:menu:", v12, v16));
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "handleForDeviceVersion:", v11));
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "componentsSeparatedByString:", CFSTR("/")));
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "firstObject"));

        v29[0] = _NSConcreteStackBlock;
        v29[1] = 3221225472;
        v29[2] = sub_100A3C250;
        v29[3] = &unk_1011E0530;
        v30 = v20;
        v21 = v20;
        objc_msgSend(v17, "setConfigureBlock:", v29);

      }
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
    }
    while (v8);
  }

  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = sub_100A3C2CC;
  v27[3] = &unk_1011AEAA0;
  v27[4] = *(_QWORD *)(a1 + 32);
  objc_copyWeak(&v28, (id *)(a1 + 40));
  v22 = objc_msgSend(v26, "addButtonRowWithTitle:action:", CFSTR("Stop Sharing"), v27);
  objc_destroyWeak(&v28);

}

void sub_100A3C21C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

id sub_100A3C238(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "startLiveUpdatesForCapabilityVersion:", *(_QWORD *)(a1 + 40));
}

id sub_100A3C244(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "stopLiveUpdatesForCapabilityVersion:", *(_QWORD *)(a1 + 40));
}

void sub_100A3C250(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  id v4;
  void *v5;
  id v6;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a3;
  objc_msgSend(v4, "setSecondaryText:", v3);
  v6 = (id)objc_claimAutoreleasedReturnValue(+[UIFont preferredFontForTextStyle:](UIFont, "preferredFontForTextStyle:", UIFontTextStyleCaption1));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "secondaryTextProperties"));

  objc_msgSend(v5, "setFont:", v6);
}

void sub_100A3C2CC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  _QWORD v4[4];
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MSPSharedTripService sharedInstance](MSPSharedTripService, "sharedInstance"));
  v3 = *(_QWORD *)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100A3C380;
  v4[3] = &unk_1011E0558;
  objc_copyWeak(&v5, (id *)(a1 + 40));
  objc_msgSend(v2, "stopSharingWithContact:completion:", v3, v4);

  objc_destroyWeak(&v5);
}

void sub_100A3C36C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100A3C380(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "rebuildSections");
    WeakRetained = v2;
  }

}

MSPSharedTripContact *__cdecl sub_100A3C3B0(id a1, NSString *a2, NSArray *a3)
{
  return (MSPSharedTripContact *)+[MSPSharedTripContact mapsVirtualReceiverWithName:receiverCapabilityVersion:](MSPSharedTripContact, "mapsVirtualReceiverWithName:receiverCapabilityVersion:", a2, a3);
}

MSPSharedTripContact *__cdecl sub_100A3C3C4(id a1, NSString *a2, NSArray *a3)
{
  return (MSPSharedTripContact *)+[MSPSharedTripContact iMessageVirtualReceiverWithName:](MSPSharedTripContact, "iMessageVirtualReceiverWithName:", a2);
}

MSPSharedTripContact *__cdecl sub_100A3C3D4(id a1, NSString *a2, NSArray *a3)
{
  return (MSPSharedTripContact *)+[MSPSharedTripContact smsVirtualReceiverWithName:](MSPSharedTripContact, "smsVirtualReceiverWithName:", a2);
}

void sub_100A3C4E8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_100A3C504(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  _QWORD *v11;
  _QWORD *v12;
  id v13;
  _QWORD v14[5];
  _QWORD v15[5];
  _QWORD v16[5];
  id v17;
  _QWORD v18[5];
  _QWORD v19[5];
  _QWORD v20[5];
  id v21;

  v3 = a2;
  v20[0] = 0;
  v20[1] = v20;
  v20[2] = 0x3032000000;
  v20[3] = sub_100A3C768;
  v20[4] = sub_100A3C778;
  v21 = 0;
  v4 = *(_QWORD *)(a1 + 32);
  v18[4] = v20;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_100A3C780;
  v19[3] = &unk_1011E0600;
  v19[4] = v20;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_100A3C790;
  v18[3] = &unk_1011E0628;
  v5 = objc_msgSend(v3, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Name"), v4, 0, v19, v18);
  v16[0] = 0;
  v16[1] = v16;
  v16[2] = 0x3032000000;
  v16[3] = sub_100A3C768;
  v16[4] = sub_100A3C778;
  v17 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  if (*(_BYTE *)(a1 + 56))
  {
    v15[1] = 3221225472;
    v15[2] = sub_100A3C850;
    v15[3] = &unk_1011E0670;
    v15[4] = v16;
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100A3C860;
    v14[3] = &unk_1011B8310;
    v14[4] = v16;
    v15[0] = _NSConcreteStackBlock;
    v6 = objc_msgSend(v3, "addCheckmarkRowsGroupWithContent:get:set:", &stru_1011E0648, v15, v14);
  }
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100A3C8D0;
  v8[3] = &unk_1011E06C0;
  v11 = v20;
  v9 = *(id *)(a1 + 32);
  v10 = *(id *)(a1 + 40);
  v12 = v16;
  objc_copyWeak(&v13, (id *)(a1 + 48));
  v7 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Start Sharing"), v8);
  objc_destroyWeak(&v13);

  _Block_object_dispose(v16, 8);
  _Block_object_dispose(v20, 8);

}

void sub_100A3C728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100A3C768(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100A3C778(uint64_t a1)
{

}

id sub_100A3C780(uint64_t a1)
{
  return *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
}

void sub_100A3C790(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_100A3C7A0(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugCheckmarkRowsGroup *v5;

  v5 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:subtitle:value:](v5, "addRowWithTitle:subtitle:value:", CFSTR("iOS 16+"), CFSTR("RoutingPathLegs, MSR"), &off_101270438);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:subtitle:value:](v5, "addRowWithTitle:subtitle:value:", CFSTR("iOS 15"), CFSTR("RoutingPathLegs, no MSR"), &off_101270450);
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:subtitle:value:](v5, "addRowWithTitle:subtitle:value:", CFSTR("iOS 13-14"), CFSTR("No RoutingPathLegs, no MSR"), &off_101270468);
  -[MapsDebugCheckmarkRowsGroup setAllowMultipleSelection:](v5, "setAllowMultipleSelection:", 1);
  -[MapsDebugCheckmarkRowsGroup setMinimumSelectionCount:](v5, "setMinimumSelectionCount:", 0);

}

id sub_100A3C850(uint64_t a1)
{
  return *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
}

void sub_100A3C860(uint64_t a1, void *a2)
{
  void *v3;
  unsigned int v4;
  void *v5;
  id v6;

  v3 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v6 = a2;
  v4 = objc_msgSend(v3, "containsObject:");
  v5 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  if (v4)
    objc_msgSend(v5, "removeObject:", v6);
  else
    objc_msgSend(v5, "addObject:", v6);

}

void sub_100A3C8D0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  id WeakRetained;
  void *v16;
  void *v17;
  void *v18;
  _QWORD v19[4];
  id v20;
  id v21;
  _QWORD v22[4];
  id v23;
  uint8_t buf[4];
  void *v25;

  v2 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  if (!v2)
    v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet whitespaceAndNewlineCharacterSet](NSCharacterSet, "whitespaceAndNewlineCharacterSet"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "stringByTrimmingCharactersInSet:", v3));

  v5 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[MSPSharedTripService sharedInstance](MSPSharedTripService, "sharedInstance"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "receivers"));
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_100A3CBCC;
  v22[3] = &unk_1011D8ED8;
  v9 = v4;
  v23 = v9;
  v10 = objc_msgSend(v8, "indexOfObjectPassingTest:", v22);

  if (v10 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    v11 = sub_10043237C();
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "handleForIDS"));
      *(_DWORD *)buf = 138543362;
      v25 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "DEBUG PANEL: will attempt to share with virtual receiver %{public}@", buf, 0xCu);

    }
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[MSPSharedTripService sharedInstance](MSPSharedTripService, "sharedInstance"));
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_100A3CC24;
    v19[3] = &unk_1011E0698;
    objc_copyWeak(&v21, (id *)(a1 + 64));
    v20 = v6;
    objc_msgSend(v14, "startSharingWithContact:completion:", v20, v19);

    objc_destroyWeak(&v21);
  }
  else
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
    if (WeakRetained)
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("'%@' Already Exists"), v6));
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", v16, CFSTR("Choose a different name for your new Virtual Receiver"), 1));

      v18 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", CFSTR("OK"), 1, 0));
      objc_msgSend(v17, "addAction:", v18);

      objc_msgSend(WeakRetained, "presentViewController:animated:completion:", v17, 1, 0);
    }

  }
}

void sub_100A3CBB0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

id sub_100A3CBCC(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v6;
  id v7;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "displayName"));
  v7 = objc_msgSend(v6, "isEqualToString:", *(_QWORD *)(a1 + 32));

  if ((_DWORD)v7)
    *a4 = 1;
  return v7;
}

void sub_100A3CC24(uint64_t a1, unint64_t a2, void *a3)
{
  __CFString *v5;
  id WeakRetained;
  id v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  const __CFString *v18;
  _QWORD v19[4];
  id v20;
  uint8_t buf[4];
  uint64_t v22;
  __int16 v23;
  const __CFString *v24;

  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v7 = sub_10043237C();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    v9 = v8;
    if (v5)
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "handleForIDS"));
        *(_DWORD *)buf = 138543618;
        v22 = (uint64_t)v10;
        v23 = 2114;
        v24 = v5;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "DEBUG PANEL: error sharing with virtual receiver %{public}@: %{public}@", buf, 0x16u);

      }
      v11 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString debugDescription](v5, "debugDescription"));
      v12 = objc_msgSend(v11, "copy");
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", CFSTR("Error Sharing"), v12, 1));

      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472;
      v19[2] = sub_100A3CE84;
      v19[3] = &unk_1011AD938;
      v20 = v13;
      v14 = v13;
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", CFSTR("OK"), 1, v19));
      objc_msgSend(v14, "addAction:", v15);

      objc_msgSend(WeakRetained, "presentViewController:animated:completion:", v14, 1, 0);
    }
    else
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "handleForIDS"));
        v17 = (void *)v16;
        if (a2 > 4)
          v18 = CFSTR("Unknown");
        else
          v18 = off_1011E0720[a2];
        *(_DWORD *)buf = 138543618;
        v22 = v16;
        v23 = 2114;
        v24 = v18;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "DEBUG PANEL: sharing with virtual receiver %{public}@ via %{public}@", buf, 0x16u);

      }
      objc_msgSend(WeakRetained, "rebuildSections");
    }
  }

}

id sub_100A3CE84(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dismissViewControllerAnimated:completion:", 1, 0);
}

id sub_100A3CEB8(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  _QWORD v7[4];
  id v8;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("RowSwipe_Delete"), CFSTR("localized string not found"), 0));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100A3CF90;
  v7[3] = &unk_1011E0750;
  v8 = v1;
  v4 = v1;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIContextualAction contextualActionWithStyle:title:handler:](UIContextualAction, "contextualActionWithStyle:title:handler:", 1, v3, v7));

  return v5;
}

uint64_t sub_100A3CF90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a4);
  return result;
}

id sub_100A3CFA8(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  _QWORD v8[4];
  id v9;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("Edit Location [Proactive Tray]"), CFSTR("localized string not found"), 0));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100A3D0A4;
  v8[3] = &unk_1011E0750;
  v9 = v1;
  v4 = v1;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIContextualAction contextualActionWithStyle:title:handler:](UIContextualAction, "contextualActionWithStyle:title:handler:", 0, v3, v8));

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemOrangeColor](UIColor, "systemOrangeColor"));
  objc_msgSend(v5, "setBackgroundColor:", v6);

  return v5;
}

uint64_t sub_100A3D0A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a4);
  return result;
}

id sub_100A3D0BC(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  _QWORD v8[4];
  id v9;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("RowSwipe_Share"), CFSTR("localized string not found"), 0));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100A3D1B8;
  v8[3] = &unk_1011E0750;
  v9 = v1;
  v4 = v1;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIContextualAction contextualActionWithStyle:title:handler:](UIContextualAction, "contextualActionWithStyle:title:handler:", 0, v3, v8));

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemBlueColor](UIColor, "systemBlueColor"));
  objc_msgSend(v5, "setBackgroundColor:", v6);

  return v5;
}

uint64_t sub_100A3D1B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a4);
  return result;
}

id sub_100A3D1D0(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  _QWORD v8[4];
  id v9;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("RowSwipe_Rename"), CFSTR("localized string not found"), 0));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100A3D2CC;
  v8[3] = &unk_1011E0750;
  v9 = v1;
  v4 = v1;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIContextualAction contextualActionWithStyle:title:handler:](UIContextualAction, "contextualActionWithStyle:title:handler:", 0, v3, v8));

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemGrayColor](UIColor, "systemGrayColor"));
  objc_msgSend(v5, "setBackgroundColor:", v6);

  return v5;
}

uint64_t sub_100A3D2CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a4);
  return result;
}

void sub_100A3DC68(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100A3DC8C(uint64_t a1, void *a2)
{
  _BYTE *WeakRetained;
  _BYTE *v4;
  void *v5;
  id v6;

  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = (void *)*((_QWORD *)WeakRetained + 4);
    if (v5 == *(void **)(a1 + 32) || objc_msgSend(v5, "isEqual:"))
    {
      v4[40] = 0;
      objc_msgSend(v4, "_setBrandIcon:fallbackToMapItemIcon:", v6, 1);
    }
  }

}

void sub_100A3E6AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *location)
{
  uint64_t v12;

  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v12 - 144));
  _Unwind_Resume(a1);
}

id sub_100A3E6E8(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  NSAttributedStringKey v8;
  void *v9;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont preferredFontForTextStyle:](UIFont, "preferredFontForTextStyle:", UIFontTextStyleSubheadline));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "_mapkit_fontWithWeight:", UIFontWeightBold));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "_fontAdjustedForContentSizeCategoryCompatibleWithTraitCollection:", *(_QWORD *)(a1 + 32)));

    v8 = NSFontAttributeName;
    v9 = v5;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1));

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_100A3E7EC(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_addPhotosWithEntryPoint:", 1);
    WeakRetained = v2;
  }

}

void sub_100A3E820(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_addPhotosWithEntryPoint:", 2);
    WeakRetained = v2;
  }

}

void sub_100A451D4(id a1)
{
  BatteryMonitorController *v1;
  void *v2;

  v1 = objc_alloc_init(BatteryMonitorController);
  v2 = (void *)qword_1014D3CE8;
  qword_1014D3CE8 = (uint64_t)v1;

}

void sub_100A455F8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 8));
  objc_msgSend(WeakRetained, "batteryMonitorTokenWitnessedChangeInBatteryState:", *(_QWORD *)(a1 + 32));

}

void sub_100A45690(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 8));
  objc_msgSend(WeakRetained, "batteryMonitorTokenWitnessedChangeInBatteryLevel:", *(_QWORD *)(a1 + 32));

}

id sub_100A45FE4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "startAtLocation:", *(double *)(a1 + 40), *(double *)(a1 + 48));
}

id sub_100A460C8(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "startedTest");
  return _objc_msgSend(*(id *)(a1 + 32), "doAfterStartedTestAtLocation:", *(double *)(a1 + 40), *(double *)(a1 + 48));
}

id sub_100A46874(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_startRatingsAndPhotosFlowWithInformedConsentIfNeeded");
}

void sub_100A46A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100A46A48(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  id v5;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "setPresentingViewController:", v5);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

void sub_100A46BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100A46BF0(uint64_t a1, uint64_t a2, int a3)
{
  id WeakRetained;
  void *v6;
  id v7;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v7 = WeakRetained;
    if (a3)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "submissionStatusDelegate"));
      objc_msgSend(v6, "poiEnrichmentCoordinator:didUpdateUserConsent:", v7, a2);

    }
    if ((a2 & 1) != 0)
      objc_msgSend(v7, "_startRatingsAndPhotosFlowDependentUponReviewedPlaceLookup");
    else
      objc_msgSend(v7, "invokeCompletion");
    WeakRetained = v7;
  }

}

void sub_100A46D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100A46D90(uint64_t a1, char a2)
{
  id WeakRetained;
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    if ((a2 & 1) != 0)
      objc_msgSend(WeakRetained, "_startRatingsAndPhotosFlowWithSubmissionLookup");
    else
      objc_msgSend(WeakRetained, "_startPOIEnrichmentFlow");
    WeakRetained = v4;
  }

}

void sub_100A470B4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_100A470E4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v7 = WeakRetained;
  if (WeakRetained)
    objc_msgSend(WeakRetained, "_handleLookupSubmissionCompletion:lookupError:", v8, v5);

}

void sub_100A47148(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v7 = WeakRetained;
  if (WeakRetained)
    objc_msgSend(WeakRetained, "_handleLookupSubmissionCompletion:lookupError:", v8, v5);

}

void sub_100A47BC4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 104));
  _Unwind_Resume(a1);
}

id sub_100A47BE4(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "willBeginSubmissionWithProgress:", a2);
}

void sub_100A47BF0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v7 = WeakRetained;
  if (WeakRetained)
    objc_msgSend(WeakRetained, "submissionCompletionWithViewController:enrichmentForm:policy:newReviewedPlace:response:error:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 48), v8, v5);

}

id sub_100A47C68(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "willBeginSubmissionWithProgress:", a2);
}

void sub_100A47C74(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v7 = WeakRetained;
  if (WeakRetained)
    objc_msgSend(WeakRetained, "submissionCompletionWithViewController:enrichmentForm:policy:newReviewedPlace:response:error:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 48), v8, v5);

}

void sub_100A48018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100A48044(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentingViewController"));
  objc_msgSend(v2, "dismissViewControllerAnimated:completion:", 1, 0);

  objc_msgSend(*(id *)(a1 + 32), "_presentPushNotificationPromptIfNecessary");
  objc_msgSend(*(id *)(a1 + 32), "_presentThirdPartyPhotoSharePromptIfNecessaryForReviewedPlace:", *(_QWORD *)(a1 + 40));
  return objc_msgSend(*(id *)(a1 + 32), "invokeCompletion");
}

void sub_100A48094(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;
  id v5;

  v2 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100A48144;
  v3[3] = &unk_1011AD1E8;
  objc_copyWeak(&v5, (id *)(a1 + 48));
  v4 = *(id *)(a1 + 40);
  objc_msgSend(v2, "dismissViewControllerAnimated:completion:", 1, v3);

  objc_destroyWeak(&v5);
}

void sub_100A48130(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100A48144(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "presentingViewController"));
    objc_msgSend(v3, "dismissViewControllerAnimated:completion:", 1, 0);

    objc_msgSend(v4, "_presentPushNotificationPromptIfNecessary");
    objc_msgSend(v4, "_presentThirdPartyPhotoSharePromptIfNecessaryForReviewedPlace:", *(_QWORD *)(a1 + 32));
    objc_msgSend(v4, "invokeCompletion");
    WeakRetained = v4;
  }

}

void sub_100A481B4(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "_presentPushNotificationPromptIfNecessary");
    objc_msgSend(v3, "_presentThirdPartyPhotoSharePromptIfNecessaryForReviewedPlace:", *(_QWORD *)(a1 + 32));
    objc_msgSend(v3, "invokeCompletion");
    WeakRetained = v3;
  }

}

void sub_100A4870C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

BOOL sub_100A48730(uint64_t a1, _QWORD *a2, BOOL *a3)
{
  unint64_t v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allRatingCategories"));
  v8 = objc_msgSend(v7, "count");

  if (v6 < (unint64_t)v8)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allRatingCategories"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectAtIndexedSubscript:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24)));
    *a3 = objc_msgSend(v10, "currentState") == (id)2;

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allRatingCategories"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectAtIndexedSubscript:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24)));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "geoCategoryRating"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "value"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "categoryName"));
    *a2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "stringValue"));

    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  }
  return v6 < (unint64_t)v8;
}

BOOL sub_100A4886C(uint64_t a1, _QWORD *a2, BOOL *a3)
{
  unint64_t v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allRatingCategories"));
  v8 = objc_msgSend(v7, "count");

  if (v6 < (unint64_t)v8)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allRatingCategories"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectAtIndexedSubscript:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24)));
    *a3 = objc_msgSend(v10, "currentState") == (id)2;

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allRatingCategories"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectAtIndexedSubscript:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24)));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "geoCategoryRating"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "value"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "categoryName"));
    *a2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "stringValue"));

    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  }
  return v6 < (unint64_t)v8;
}

void sub_100A489D4(id a1, BOOL a2, int64_t a3)
{
  PushNotificationPrompt *v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v7[5];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  void (*v12)(uint64_t);
  id v13;

  if (a2)
  {
    v8 = 0;
    v9 = &v8;
    v10 = 0x3032000000;
    v11 = sub_100A48AEC;
    v12 = sub_100A48AFC;
    v13 = 0;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100A48B04;
    v7[3] = &unk_1011AFF60;
    v7[4] = &v8;
    v3 = -[PushNotificationPrompt initWithReason:authorizationStatus:completion:]([PushNotificationPrompt alloc], "initWithReason:authorizationStatus:completion:", 3, a3, v7);
    v4 = (void *)v9[5];
    v9[5] = (uint64_t)v3;

    v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedMapsDelegate](UIApplication, "sharedMapsDelegate"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "chromeViewController"));
    objc_msgSend(v6, "_maps_topMostPresentViewController:animated:completion:", v9[5], 1, 0);

    _Block_object_dispose(&v8, 8);
  }
}

void sub_100A48AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100A48AEC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100A48AFC(uint64_t a1)
{

}

void sub_100A48B04(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "presentingViewController"));
  objc_msgSend(v1, "dismissViewControllerAnimated:completion:", 1, 0);

}

void sub_100A48B90(id a1, BOOL a2, GEORPThirdPartyPhotoSharingPreference *a3)
{
  GEORPThirdPartyPhotoSharingPreference *v3;
  void *v4;
  void *v5;
  UGCThirdPartyPhotoSharingSplashViewController *v6;

  if (a2)
  {
    v3 = a3;
    v6 = objc_alloc_init(UGCThirdPartyPhotoSharingSplashViewController);
    -[UGCThirdPartyPhotoSharingSplashViewController setModalPresentationStyle:](v6, "setModalPresentationStyle:", 2);
    -[UGCThirdPartyPhotoSharingSplashViewController setThirdPartyPhotoSharingPreference:](v6, "setThirdPartyPhotoSharingPreference:", v3);

    v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedMapsDelegate](UIApplication, "sharedMapsDelegate"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "chromeViewController"));
    objc_msgSend(v5, "_maps_topMostPresentViewController:animated:completion:", v6, 1, 0);

  }
}

id sub_100A48C84(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "invokeCompletion");
}

void sub_100A48D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100A48D54(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "invokeCompletion");
    WeakRetained = v2;
  }

}

void sub_100A48E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100A48E5C(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_presentPOIEnrichmentViewController");
    WeakRetained = v2;
  }

}

void sub_100A48F10(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD v5[4];
  id v6;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 160);
  *(_QWORD *)(v2 + 160) = 0;

  if (objc_msgSend(*(id *)(a1 + 32), "hasPhotoPickerEmphasis")
    && objc_msgSend(*(id *)(a1 + 32), "shouldDismissPlacecard"))
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100A48FC8;
    v5[3] = &unk_1011ADA00;
    v4 = *(void **)(a1 + 32);
    v6 = *(id *)(a1 + 40);
    objc_msgSend(v4, "_dismissPlacecardWithCompletion:", v5);

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
}

uint64_t sub_100A48FC8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100A49090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100A490B4(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "invokeCompletion");
    WeakRetained = v2;
  }

}

void sub_100A4917C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100A49198(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "invokeCompletion");
    WeakRetained = v2;
  }

}

uint64_t sub_100A49414(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 144);
  *(_QWORD *)(v2 + 144) = 0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_100A49450(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "containeeDelegate"));
  objc_msgSend(v2, "containeeViewControllerGoToPreviousState:withSender:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 144), 0);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100A49A38(id a1)
{
  *(double *)&qword_1014D3CF8 = (double)GEOConfigGetInteger(MapsConfig_BannerAccessoryViewLeadingInset, off_1014B4AC8);
}

void sub_100A49AA4(id a1)
{
  *(double *)&qword_1014D3D08 = (double)GEOConfigGetInteger(MapsConfig_BannerAccessoryViewTrailingInset, off_1014B4AD8);
}

id sub_100A4A608(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
}

void sub_100A4AFB4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "beginningOfDocument"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "endOfDocument"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "textRangeFromPosition:toPosition:", v5, v3));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setSelectedTextRange:", v4);

}

void sub_100A4B940(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_markAsEditing");
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "cell:didReceiveMapItem:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

id sub_100A4C65C(void *a1)
{
  unint64_t v1;
  id v2;
  void *i;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id obj;
  uint64_t v21;
  id v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];

  v2 = a1;
  v22 = objc_alloc_init((Class)NSMutableArray);
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  obj = v2;
  v23 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
  if (v23)
  {
    v21 = *(_QWORD *)v29;
    do
    {
      for (i = 0; i != v23; i = (char *)i + 1)
      {
        if (*(_QWORD *)v29 != v21)
          objc_enumerationMutation(obj);
        v4 = *(id *)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)i);
        v5 = objc_alloc_init((Class)NSMutableArray);
        v6 = objc_msgSend(v4, "copy");
        objc_msgSend(v6, "clearTimeRanges");
        if (objc_msgSend(v4, "timeRangesCount"))
        {
          v24 = i;
          v25 = 0;
          v7 = 0;
          v8 = 0;
          v9 = 0;
          v26 = 0;
          v27 = 0;
          while (1)
          {
            v10 = (unint64_t)objc_msgSend(v4, "timeRangeAtIndex:", v7);
            v11 = v10;
            v13 = v12;
            v14 = HIDWORD(v10);
            if (!(_DWORD)v10 && v14 == 86400)
              break;
            if ((_DWORD)v10)
            {
              if (v14 == 86400)
              {
                v25 = 86400;
                v26 = v10;
                v27 = 3;
              }
              else
              {
                v15 = objc_msgSend(v6, "copy");
                v1 = v1 & 0xFFFFFFFF00000000 | v13;
                objc_msgSend(v15, "addTimeRange:", v11, v1);
                objc_msgSend(v5, "addObject:", v15);

              }
            }
            else
            {
              v9 = HIDWORD(v10);
              v8 = 3;
            }
            if (++v7 >= (unint64_t)objc_msgSend(v4, "timeRangesCount"))
              goto LABEL_19;
          }
          objc_msgSend(v5, "addObject:", v4);
LABEL_19:
          v17 = objc_msgSend(v6, "copy");
          v16 = v17;
          if ((~(_DWORD)v8 & 3) == 0)
            objc_msgSend(v17, "addTimeRange:", v9 << 32, v8);
          if ((~v27 & 3) == 0)
            objc_msgSend(v16, "addTimeRange:", v26 | (v25 << 32));
          i = v24;
        }
        else
        {
          v16 = objc_msgSend(v6, "copy");
        }
        if (objc_msgSend(v16, "timeRangesCount"))
          objc_msgSend(v5, "addObject:", v16);
        v18 = objc_msgSend(v5, "copy");

        objc_msgSend(v22, "addObjectsFromArray:", v18);
      }
      v23 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
    }
    while (v23);
  }

  return v22;
}

void sub_100A4D318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100A4D344(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  uint8_t buf[4];
  void *v15;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v5 || v6)
  {
    v8 = sub_100431C0C();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v15 = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to get virtual garage. Error: %@", buf, 0xCu);
    }

  }
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100A4D47C;
  v11[3] = &unk_1011AD1E8;
  objc_copyWeak(&v13, (id *)(a1 + 32));
  v12 = v5;
  v10 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v11);

  objc_destroyWeak(&v13);
}

void sub_100A4D47C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "updateVirtualGarage:", *(_QWORD *)(a1 + 32));

}

id sub_100A4D798(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_notifyDidUpdateWaypointSet");
}

id sub_100A4D7A0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_notifyResultRouteCollectionChangeForCurrentTransportType");
}

id sub_100A4D840(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_notifyDidUpdateRoutes:", a2);
}

id sub_100A4D948(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_notifyDidUpdateWaypointSet");
}

id sub_100A4D950(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_notifyResultRouteCollectionChangeForCurrentTransportType");
}

void sub_100A4DC1C(uint64_t a1)
{
  DrivePreferences *v2;
  void *v3;
  DrivePreferences *v4;
  void *v5;
  unsigned __int8 v6;
  WalkPreferences *v7;
  void *v8;
  WalkPreferences *v9;
  void *v10;
  unsigned __int8 v11;
  TransitPreferences *v12;
  void *v13;
  TransitPreferences *v14;
  void *v15;
  unsigned __int8 v16;
  CyclePreferences *v17;
  uint64_t v18;
  void *v19;
  CyclePreferences *v20;

  if (objc_msgSend(&off_101274100, "containsObject:", *(_QWORD *)(a1 + 32)))
  {
    v2 = [DrivePreferences alloc];
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    v4 = -[DrivePreferences initWithDefaults:](v2, "initWithDefaults:", v3);

    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "drivePreferences"));
    v6 = objc_msgSend(v5, "isEqual:", v4);

    if ((v6 & 1) == 0)
      objc_msgSend(*(id *)(a1 + 40), "_reloadUsingNewDrivePreferences:", v4);

  }
  if (objc_msgSend(&off_1012742C8, "containsObject:", *(_QWORD *)(a1 + 32)))
  {
    v7 = [WalkPreferences alloc];
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    v9 = -[WalkPreferences initWithDefaults:](v7, "initWithDefaults:", v8);

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "walkPreferences"));
    v11 = -[WatchSyncedPreferences isEqual:](v9, "isEqual:", v10);

    if ((v11 & 1) == 0)
      objc_msgSend(*(id *)(a1 + 40), "_reloadUsingNewWalkPreferences:", v9);

  }
  if (objc_msgSend(&off_101274358, "containsObject:", *(_QWORD *)(a1 + 32)))
  {
    v12 = [TransitPreferences alloc];
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    v14 = -[WatchSyncedPreferences initWithDefaults:](v12, "initWithDefaults:", v13);

    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "transitPreferences"));
    v16 = -[WatchSyncedPreferences isEqual:](v14, "isEqual:", v15);

    if ((v16 & 1) == 0)
      objc_msgSend(*(id *)(a1 + 40), "_reloadUsingNewTransitPreferences:", v14);

  }
  if (objc_msgSend(&off_101273158, "containsObject:", *(_QWORD *)(a1 + 32)))
  {
    v17 = [CyclePreferences alloc];
    v18 = objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    v20 = -[CyclePreferences initWithDefaults:](v17, "initWithDefaults:", v18);

    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "cyclePreferences"));
    LOBYTE(v18) = objc_msgSend(v19, "isEqual:", v20);

    if ((v18 & 1) == 0)
      objc_msgSend(*(id *)(a1 + 40), "_reloadUsingNewCyclePreferences:", v20);

  }
}

void sub_100A4EACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100A4EAE4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100A4EAF4(uint64_t a1)
{

}

void sub_100A4EB00(uint64_t a1, void *a2)
{
  id v3;
  RoutePlanningError *v4;
  unint64_t v5;
  uint64_t v6;
  RoutePlanningError *v7;
  uint64_t v8;
  void *v9;

  v3 = a2;
  v4 = [RoutePlanningError alloc];
  v5 = (unint64_t)objc_msgSend(*(id *)(a1 + 32), "transportType");
  if (v5 > 5)
    v6 = 1;
  else
    v6 = qword_100E3D110[v5];
  v7 = -[RoutePlanningError initWithError:transportType:origin:destination:](v4, "initWithError:transportType:origin:destination:", v3, v6, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

}

BOOL sub_100A4F954(id a1, MapsSession *a2, unint64_t a3, BOOL *a4)
{
  MapsSession *v4;
  uint64_t v5;
  char isKindOfClass;

  v4 = a2;
  v5 = objc_opt_class(RoutePlanningSession);
  isKindOfClass = objc_opt_isKindOfClass(v4, v5);

  return isKindOfClass & 1;
}

void sub_100A511D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100A511F4(uint64_t a1, uint64_t a2, void *a3)
{
  id result;

  result = objc_msgSend(a3, "isServerProvidedWaypoint");
  if ((result & 1) == 0)
    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_100A51538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100A5155C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  uint8_t buf[4];
  void *v15;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v5 || v6)
  {
    v8 = sub_100431C0C();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v15 = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to get virtual garage. Error: %@", buf, 0xCu);
    }

  }
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100A51694;
  v11[3] = &unk_1011AD1E8;
  objc_copyWeak(&v13, (id *)(a1 + 32));
  v12 = v5;
  v10 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v11);

  objc_destroyWeak(&v13);
}

void sub_100A51694(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "updateVirtualGarage:", *(_QWORD *)(a1 + 32));

}

id sub_100A52EF8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateVirtualGarage:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_100A545B4(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  char v25;
  id v26;
  uint64_t v27;
  _QWORD v28[2];

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    switch((v6 >> 3))
    {
      case 1u:
        v12 = 0;
        v13 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 28) |= 1u;
        while (1)
        {
          v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0)
            goto LABEL_45;
          v12 += 7;
          v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_47;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_45:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_47:
        v27 = 16;
        goto LABEL_56;
      case 2u:
        v18 = 0;
        v19 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 28) |= 2u;
        while (2)
        {
          v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v21 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_51;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_51:
        v27 = 20;
        goto LABEL_56;
      case 3u:
        v22 = 0;
        v23 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 28) |= 4u;
        while (2)
        {
          v24 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
            v14 |= (unint64_t)(v25 & 0x7F) << v22;
            if (v25 < 0)
            {
              v22 += 7;
              v9 = v23++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_55;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_55:
        v27 = 24;
LABEL_56:
        *(_DWORD *)(a1 + v27) = v14;
        goto LABEL_57;
      case 4u:
        v26 = objc_alloc_init((Class)GEOLatLng);
        objc_storeStrong((id *)(a1 + 8), v26);
        v28[0] = 0;
        v28[1] = 0;
        if (PBReaderPlaceMark(a2, v28) && (objc_msgSend(v26, "readFrom:", a2) & 1) != 0)
        {
          PBReaderRecallMark(a2, v28);

LABEL_57:
          if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          continue;
        }

        return 0;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        goto LABEL_57;
    }
  }
}

void sub_100A552E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100A55300(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100A55310(uint64_t a1)
{

}

void sub_100A55318(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;

  v3 = a2;
  v4 = objc_alloc((Class)MKMapItem);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "geoMapItem"));

  v6 = objc_msgSend(v4, "initWithGeoMapItem:isPlaceHolderPlace:", v5, 0);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

}

void sub_100A55518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100A55530(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "geoMapItem"));
  v3 = objc_msgSend(objc_alloc((Class)MKMapItem), "initWithGeoMapItem:isPlaceHolderPlace:", v6, 0);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_100A55648(id a1, NSError *a2)
{
  NSError *v2;
  id v3;
  NSObject *v4;
  int v5;
  NSError *v6;

  v2 = a2;
  if (v2)
  {
    v3 = sub_1004315EC();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Error deleting recents: %@", (uint8_t *)&v5, 0xCu);
    }

  }
}

BOOL sub_100A56770(id a1, id a2, NSDictionary *a3)
{
  id v3;
  __objc2_prot *v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  unsigned int v10;
  id v11;
  BOOL v12;
  id v13;
  __objc2_prot *v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  unsigned int v20;
  id v21;

  v3 = a2;
  v4 = &OBJC_PROTOCOL___MSPHistoryEntryTransitLineItem;
  v5 = objc_opt_class(HistoryEntryRecentsItem);
  v6 = v3;
  if ((objc_opt_isKindOfClass(v6, v5) & 1) != 0)
    v7 = v6;
  else
    v7 = 0;
  v8 = v7;

  if (v8
    && (v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "historyEntry")),
        v10 = objc_msgSend(v9, "conformsToProtocol:", v4),
        v9,
        v10))
  {
    v11 = v6;
  }
  else
  {
    v11 = 0;
  }

  if (v11)
  {
    v12 = 0;
  }
  else
  {
    v13 = v6;
    v14 = &OBJC_PROTOCOL___CuratedCollectionHistoryEntry;
    v15 = objc_opt_class(HistoryEntryRecentsItem);
    v16 = v13;
    if ((objc_opt_isKindOfClass(v16, v15) & 1) != 0)
      v17 = v16;
    else
      v17 = 0;
    v18 = v17;

    if (v18
      && (v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "historyEntry")),
          v20 = objc_msgSend(v19, "conformsToProtocol:", v14),
          v19,
          v20))
    {
      v21 = v16;
    }
    else
    {
      v21 = 0;
    }

    v12 = v21 == 0;
  }

  return v12;
}

id sub_100A5973C()
{
  if (qword_1014D3D20 != -1)
    dispatch_once(&qword_1014D3D20, &stru_1011E0AB8);
  return (id)qword_1014D3D18;
}

void sub_100A59AFC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100A59B74(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFSessionIndoorOutdoorAnalyticsRecorder");
  v2 = (void *)qword_1014D3D18;
  qword_1014D3D18 = (uint64_t)v1;

}

uint64_t sub_100A59E84(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  int v11;
  char v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t String;
  uint64_t v26;
  void *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v10 = v5++ >= 9;
      if (v10)
      {
        v6 = 0;
        v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v11 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v13 = 0;
        v14 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + 32) |= 4u;
        while (1)
        {
          v16 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v17 = v16 + 1;
          if (v16 == -1 || v17 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v18 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17;
          v15 |= (unint64_t)(v18 & 0x7F) << v13;
          if ((v18 & 0x80) == 0)
            goto LABEL_39;
          v13 += 7;
          v10 = v14++ >= 9;
          if (v10)
          {
            LODWORD(v15) = 0;
            goto LABEL_41;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_39:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_41:
        v30 = 20;
        goto LABEL_46;
      case 2u:
        v20 = 0;
        v21 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + 32) |= 2u;
        break;
      case 3u:
        String = PBReaderReadString(a2);
        v26 = objc_claimAutoreleasedReturnValue(String);
        v27 = *(void **)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v26;

        continue;
      case 4u:
        *(_BYTE *)(a1 + 32) |= 1u;
        v28 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v29 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v29 = 0;
        }
        *(_QWORD *)(a1 + 8) = v29;
        continue;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v22 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v23 = v22 + 1;
      if (v22 == -1 || v23 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v24 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23;
      v15 |= (unint64_t)(v24 & 0x7F) << v20;
      if ((v24 & 0x80) == 0)
        goto LABEL_43;
      v20 += 7;
      v10 = v21++ >= 9;
      if (v10)
      {
        LODWORD(v15) = 0;
        goto LABEL_45;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_43:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v15) = 0;
LABEL_45:
    v30 = 16;
LABEL_46:
    *(_DWORD *)(a1 + v30) = v15;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100A5BCC8(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_1014D3D28;
  qword_1014D3D28 = (uint64_t)v1;

}

void sub_100A5BDD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100A5BDF0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  id v7;
  _QWORD v8[5];
  id v9;

  v5 = a2;
  if (a3)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100A5BEAC;
    v8[3] = &unk_1011E0AE0;
    v7 = *(id *)(a1 + 40);
    v8[4] = *(_QWORD *)(a1 + 32);
    v9 = v7;
    objc_msgSend(WeakRetained, "_fetchAppDataForAppIDs:withCompletion:", v5, v8);

  }
}

void sub_100A5BEAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4;

  if (a3)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "partitionedApplicationSuggestionsFromSuggestions:", a2));
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

  }
}

void sub_100A5C0E8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;
  id v14;

  v5 = a2;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100A5C1AC;
  v10[3] = &unk_1011B5C28;
  v11 = a3;
  v6 = *(id *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 32);
  v12 = v5;
  v13 = v7;
  v14 = v6;
  v8 = v5;
  v9 = v11;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v10);

}

void sub_100A5C1AC(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  NSErrorUserInfoKey v17;
  const __CFString *v18;
  NSErrorUserInfoKey v19;
  const __CFString *v20;

  if (*(_QWORD *)(a1 + 32))
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), 0);
  }
  else
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "bodyData"));
    v16 = 0;
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSJSONSerialization JSONObjectWithData:options:error:](NSJSONSerialization, "JSONObjectWithData:options:error:", v2, 0, &v16));
    v4 = v16;

    if (v4)
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
    }
    else
    {
      v5 = objc_opt_class(NSDictionary);
      if ((objc_opt_isKindOfClass(v3, v5) & 1) != 0)
      {
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "valueForKeyPath:", CFSTR("pageData.bubbles.results")));
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "firstObject"));

        v8 = objc_opt_class(NSArray);
        if ((objc_opt_isKindOfClass(v7, v8) & 1) != 0)
        {
          v9 = v7;
          if ((unint64_t)objc_msgSend(v9, "count") >= 0xB)
          {
            v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "subarrayWithRange:", 0, 10));

            v9 = (id)v10;
          }
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "valueForKey:", CFSTR("id")));
          (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

        }
        else
        {
          v14 = *(void **)(a1 + 48);
          v17 = NSLocalizedDescriptionKey;
          v18 = CFSTR("Expected array as value for SSURLConnectionRequestResultsKeyJSON but didn't get one.");
          v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1));
          v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "_searchErrorWithUserInfo:", v15));

          (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
        }

      }
      else
      {
        v12 = *(void **)(a1 + 48);
        v19 = NSLocalizedDescriptionKey;
        v20 = CFSTR("Expected dictionary as root JSON object and didn't get one.");
        v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v20, &v19, 1));
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "_searchErrorWithUserInfo:", v13));

        (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
      }

    }
  }
}

uint64_t sub_100A5C548(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100A5CC9C(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  int v11;
  SearchResult *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t Data;
  uint64_t v17;
  uint64_t v18;
  uint64_t String;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD v32[2];

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v10 = v5++ >= 9;
      if (v10)
      {
        v6 = 0;
        v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v11 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    switch((v6 >> 3))
    {
      case 1u:
        v13 = objc_alloc_init(SearchResult);
        v14 = 48;
        goto LABEL_22;
      case 2u:
        v13 = objc_alloc_init(SearchResult);
        v14 = 32;
LABEL_22:
        objc_storeStrong((id *)(a1 + v14), v13);
        v32[0] = 0;
        v32[1] = 0;
        if (PBReaderPlaceMark(a2, v32) && -[SearchResult readFrom:](v13, "readFrom:", a2))
        {
          PBReaderRecallMark(a2, v32);

LABEL_51:
          if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          continue;
        }

        return 0;
      case 3u:
        Data = PBReaderReadData(a2);
        v17 = objc_claimAutoreleasedReturnValue(Data);
        v18 = 24;
        goto LABEL_28;
      case 4u:
        String = PBReaderReadString(a2);
        v17 = objc_claimAutoreleasedReturnValue(String);
        v18 = 40;
        goto LABEL_28;
      case 5u:
        v20 = PBReaderReadString(a2);
        v17 = objc_claimAutoreleasedReturnValue(v20);
        v18 = 56;
LABEL_28:
        v21 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_51;
      case 6u:
        *(_BYTE *)(a1 + 68) |= 1u;
        v22 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v23 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v23 = 0;
        }
        v31 = 8;
        goto LABEL_50;
      case 7u:
        v24 = 0;
        v25 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 68) |= 4u;
        while (2)
        {
          v27 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v28 = v27 + 1;
          if (v27 == -1 || v28 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28;
            v26 |= (unint64_t)(v29 & 0x7F) << v24;
            if (v29 < 0)
            {
              v24 += 7;
              v10 = v25++ >= 9;
              if (v10)
              {
                LODWORD(v26) = 0;
                goto LABEL_45;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v26) = 0;
LABEL_45:
        *(_DWORD *)(a1 + 64) = v26;
        goto LABEL_51;
      case 8u:
        *(_BYTE *)(a1 + 68) |= 2u;
        v30 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v23 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v23 = 0;
        }
        v31 = 16;
LABEL_50:
        *(_QWORD *)(a1 + v31) = v23;
        goto LABEL_51;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        goto LABEL_51;
    }
  }
}

void sub_100A5DA88(id a1)
{
  DeviceRecentLocations *v1;
  void *v2;

  v1 = objc_alloc_init(DeviceRecentLocations);
  v2 = (void *)qword_1014D3D38;
  qword_1014D3D38 = (uint64_t)v1;

}

void sub_100A5DC18(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  _QWORD v4[5];
  id v5;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  v3 = *(void **)(v1 + 16);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100A5DC8C;
  v4[3] = &unk_1011DB7A8;
  v4[4] = v1;
  v5 = v2;
  objc_msgSend(v3, "requestRecentLocationsWithResponse:", v4);

}

void sub_100A5DC8C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned int v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  _QWORD block[5];
  id v11;
  id v12;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MKLocationManager sharedLocationManager](MKLocationManager, "sharedLocationManager"));
  v5 = objc_msgSend(v4, "isAuthorizedForPreciseLocation");

  v6 = &__NSArray0__struct;
  if (v5)
    v6 = v3;
  v7 = v6;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100A5DD68;
  block[3] = &unk_1011AECC0;
  v8 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v11 = v7;
  v12 = v8;
  v9 = v7;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

uint64_t sub_100A5DD68(uint64_t a1)
{
  uint64_t result;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "lock");
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 24), *(id *)(a1 + 40));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "unlock");
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 40));
  return result;
}

void sub_100A5EA70(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[CardAnimation animationUsingDefaultSpringWithInitialVelocity:delay:](CardAnimation, "animationUsingDefaultSpringWithInitialVelocity:delay:", 0.0, 0.0));
  v2 = (void *)qword_1014D3D48;
  qword_1014D3D48 = v1;

}

uint64_t sub_100A5ED6C(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 8) = a2;
  return result;
}

void sub_100A5EE30(uint64_t a1, int a2)
{
  void *v4;
  void *v5;
  _BOOL8 v6;
  id v7;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapView"));
  objc_msgSend(v4, "setUserTrackingMode:", 0);

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapView"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapView"));
  objc_msgSend(v5, "regionThatFits:", *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64));
  if (a2)
    v6 = *(_BYTE *)(a1 + 72) != 0;
  else
    v6 = 0;
  objc_msgSend(v7, "setRegion:animated:", v6);

}

void sub_100A5EF88(uint64_t a1, int a2)
{
  void *v4;
  _BOOL8 v5;
  id v6;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapView"));
  if (a2)
    v5 = *(_BYTE *)(a1 + 48) != 0;
  else
    v5 = 0;
  v6 = v4;
  objc_msgSend(v4, "setCamera:animated:", *(_QWORD *)(a1 + 40), v5);

}

void sub_100A5F084(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _OWORD v10[3];
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chromeViewController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "mapView"));
  objc_msgSend(v3, "_setApplicationState:", 0);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trackingController"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chromeViewController"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "mapView"));
  objc_msgSend(v4, "setMapView:", v6);

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chromeViewController"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "mapView"));

  objc_msgSend(v8, "_setAlwaysShowHeadingIndicatorIfSupported:", 1);
  objc_msgSend(v8, "setShowsTraffic:", 1);
  v15 = 0;
  v13 = 0u;
  v14 = 0u;
  v12 = 0u;
  if (v8)
    objc_msgSend(v8, "_cartographicConfiguration");
  *((_QWORD *)&v12 + 1) = 2;
  *(_QWORD *)&v14 = 0;
  v11 = v15;
  v10[1] = v13;
  v10[2] = v14;
  v10[0] = v12;
  objc_msgSend(v8, "_setCartographicConfiguration:", v10);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "_mapLayer"));
  objc_msgSend(v9, "setDesiredMapMode:", 0);

}

void sub_100A5F21C(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trackingController"));
  objc_msgSend(v1, "setMapView:", 0);

}

id sub_100A60460(uint64_t a1, int a2)
{
  CGFloat v4;
  CGFloat v5;
  void *v6;
  void *v7;
  CGFloat v8;
  __int128 v9;
  CGFloat m33;
  __int128 v11;
  __int128 v12;
  CGFloat m34;
  void *v14;
  id result;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[5];
  CGFloat v21;
  CGFloat v22;
  __int128 v23;
  __int128 v24;
  CATransform3D a;
  CATransform3D v26;
  CATransform3D v27;
  __int128 v28;
  __int128 v29;
  CGAffineTransform v30;
  CGAffineTransform v31;
  CGAffineTransform v32;
  CGAffineTransform v33;
  CGAffineTransform v34;
  CGAffineTransform v35;
  CGAffineTransform v36;
  CGAffineTransform v37;

  v18 = *(_OWORD *)&CGAffineTransformIdentity.c;
  v19 = *(_OWORD *)&CGAffineTransformIdentity.a;
  *(_OWORD *)&v37.a = *(_OWORD *)&CGAffineTransformIdentity.a;
  *(_OWORD *)&v37.c = v18;
  v17 = *(_OWORD *)&CGAffineTransformIdentity.tx;
  *(_OWORD *)&v37.tx = v17;
  memset(&v36, 0, sizeof(v36));
  CGAffineTransformMakeScale(&v36, *(CGFloat *)(a1 + 72), *(CGFloat *)(a1 + 72));
  if (a2)
  {
    v4 = *(double *)(a1 + 80);
    *(_OWORD *)&v27.m11 = v19;
    *(_OWORD *)&v27.m13 = v18;
    *(_OWORD *)&v27.m21 = v17;
    CGAffineTransformRotate(&v37, (CGAffineTransform *)&v27, v4);
    v5 = *(double *)(a1 + 88);
    *(_OWORD *)&v26.m11 = *(_OWORD *)&v36.a;
    *(_OWORD *)&v26.m13 = *(_OWORD *)&v36.c;
    *(_OWORD *)&v26.m21 = *(_OWORD *)&v36.tx;
    CGAffineTransformRotate((CGAffineTransform *)&v27, (CGAffineTransform *)&v26, v5);
    *(_OWORD *)&v36.a = *(_OWORD *)&v27.m11;
    *(_OWORD *)&v36.c = *(_OWORD *)&v27.m13;
    *(_OWORD *)&v36.tx = *(_OWORD *)&v27.m21;
  }
  v35 = v37;
  objc_msgSend(*(id *)(a1 + 32), "setTransform:", &v35, v17, v18, v19);
  CGAffineTransformMakeScale(&v34, *(CGFloat *)(a1 + 96), 1.0);
  v6 = *(void **)(a1 + 40);
  v33 = v34;
  objc_msgSend(v6, "setTransform:", &v33);
  objc_msgSend(*(id *)(a1 + 40), "setAlpha:", *(double *)(a1 + 104));
  CGAffineTransformMakeScale(&v32, *(CGFloat *)(a1 + 72), *(CGFloat *)(a1 + 72));
  v7 = *(void **)(a1 + 48);
  v31 = v32;
  objc_msgSend(v7, "setTransform:", &v31);
  objc_msgSend(*(id *)(a1 + 48), "setAlpha:", *(double *)(a1 + 112));
  v30 = v36;
  objc_msgSend(*(id *)(a1 + 56), "setTransform:", &v30);
  objc_msgSend(*(id *)(a1 + 56), "setAlpha:", *(double *)(a1 + 112));
  v8 = *(double *)(a1 + 120);
  v9 = *(_OWORD *)&CATransform3DIdentity.m23;
  *(_OWORD *)&v26.m21 = *(_OWORD *)&CATransform3DIdentity.m21;
  *(_OWORD *)&v26.m23 = v9;
  *(_OWORD *)&v26.m31 = *(_OWORD *)&CATransform3DIdentity.m31;
  m33 = CATransform3DIdentity.m33;
  v11 = *(_OWORD *)&CATransform3DIdentity.m13;
  *(_OWORD *)&v26.m11 = *(_OWORD *)&CATransform3DIdentity.m11;
  *(_OWORD *)&v26.m13 = v11;
  v26.m33 = m33;
  v26.m34 = -0.00025;
  v12 = *(_OWORD *)&CATransform3DIdentity.m43;
  *(_OWORD *)&v26.m41 = *(_OWORD *)&CATransform3DIdentity.m41;
  *(_OWORD *)&v26.m43 = v12;
  CATransform3DRotate(&v27, &v26, v8, 1.0, 0.0, 0.0);
  *(_OWORD *)&v26.m21 = *(_OWORD *)&v27.m21;
  *(_OWORD *)&v26.m23 = *(_OWORD *)&v27.m23;
  *(_OWORD *)&v26.m31 = *(_OWORD *)&v27.m31;
  v26.m33 = v27.m33;
  *(_OWORD *)&v26.m11 = *(_OWORD *)&v27.m11;
  *(_OWORD *)&v26.m13 = *(_OWORD *)&v27.m13;
  m34 = v27.m34;
  v28 = *(_OWORD *)&v27.m41;
  v29 = *(_OWORD *)&v27.m43;
  v14 = *(void **)(a1 + 64);
  if (v14)
    objc_msgSend(v14, "transform3D");
  else
    memset(&a, 0, sizeof(a));
  *(_OWORD *)&v27.m21 = *(_OWORD *)&v26.m21;
  *(_OWORD *)&v27.m23 = *(_OWORD *)&v26.m23;
  *(_OWORD *)&v27.m31 = *(_OWORD *)&v26.m31;
  v27.m33 = v26.m33;
  *(_OWORD *)&v27.m11 = *(_OWORD *)&v26.m11;
  *(_OWORD *)&v27.m13 = *(_OWORD *)&v26.m13;
  v27.m34 = m34;
  *(_OWORD *)&v27.m41 = v28;
  *(_OWORD *)&v27.m43 = v29;
  result = (id)CATransform3DEqualToTransform(&a, &v27);
  if ((result & 1) == 0)
  {
    v20[2] = *(_OWORD *)&v26.m21;
    v20[3] = *(_OWORD *)&v26.m23;
    v20[4] = *(_OWORD *)&v26.m31;
    v21 = v26.m33;
    v20[0] = *(_OWORD *)&v26.m11;
    v20[1] = *(_OWORD *)&v26.m13;
    v23 = v28;
    v24 = v29;
    v16 = *(void **)(a1 + 64);
    v22 = m34;
    return objc_msgSend(v16, "setTransform3D:", v20);
  }
  return result;
}

uint64_t sub_100A60700(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, BOOL))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40) == 0);
}

uint64_t sub_100A6071C(uint64_t result)
{
  if (!*(_BYTE *)(result + 40))
  {
    result = *(_QWORD *)(result + 32);
    if (result)
      return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_100A60738(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100A60BFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD block[9];

  if (!a3)
  {
    block[7] = v3;
    block[8] = v4;
    objc_msgSend(*(id *)(a1 + 32), "setAppRequestDict:", a2);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100A60C78;
    block[3] = &unk_1011AC860;
    block[4] = *(_QWORD *)(a1 + 32);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  }
}

void sub_100A60C78(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tableView"));
  objc_msgSend(v1, "reloadData");

}

void sub_100A60DF8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;

  v6 = a2;
  v5 = a3;
  if ((*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) & (unint64_t)objc_msgSend(v5, "usedInterfaces")) != 0)
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v5, v6);

}

void sub_100A60EE0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *i;
  void *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  uint64_t v30;
  void *v31;
  id obj;
  uint64_t v33;
  id v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD block[5];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _QWORD v45[3];
  _QWORD v46[3];
  _BYTE v47[128];

  v5 = a2;
  v6 = v5;
  if (!a3)
  {
    v7 = objc_msgSend(v5, "copy");
    v30 = a1;
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(void **)(v8 + 16);
    *(_QWORD *)(v8 + 16) = v7;

    v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    v41 = 0u;
    v42 = 0u;
    v43 = 0u;
    v44 = 0u;
    v31 = v6;
    obj = v6;
    v34 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v41, v47, 16);
    if (v34)
    {
      v38 = 0;
      v39 = 0;
      v10 = 0;
      v33 = *(_QWORD *)v42;
      do
      {
        for (i = 0; i != v34; i = (char *)i + 1)
        {
          if (*(_QWORD *)v42 != v33)
            objc_enumerationMutation(obj);
          v37 = v10;
          v12 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * (_QWORD)i);
          v13 = objc_msgSend(v12, "cacheHitCount");
          v14 = objc_msgSend(v12, "cacheMissCount");
          v15 = objc_msgSend(v12, "cacheExpiredCount");
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "appId"));
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "objectForKeyedSubscript:", v16));

          if (!v17)
          {
            v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "appId"));
            objc_msgSend(v36, "setObject:forKeyedSubscript:", v17, v18);

          }
          objc_msgSend(v17, "addObject:", v12);
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "appId"));
          v20 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "objectForKeyedSubscript:", v19));

          if (!v20)
          {
            v45[0] = &off_101270480;
            v45[1] = &off_1012704B0;
            v46[0] = &off_101270498;
            v46[1] = &off_101270498;
            v45[2] = &off_1012704C8;
            v46[2] = &off_101270498;
            v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v46, v45, 3));
            v20 = objc_msgSend(v21, "mutableCopy");

            v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "appId"));
            objc_msgSend(v35, "setObject:forKeyedSubscript:", v20, v22);

          }
          v38 += v13;
          v39 += v14;
          v10 = v37 + v15;
          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectForKeyedSubscript:", &off_101270480));
          v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", (char *)objc_msgSend(v23, "unsignedIntegerValue")+ objc_msgSend(v12, "cacheHitCount")));
          objc_msgSend(v20, "setObject:forKeyedSubscript:", v24, &off_101270480);

          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectForKeyedSubscript:", &off_1012704B0));
          v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", (char *)objc_msgSend(v25, "unsignedIntegerValue")+ objc_msgSend(v12, "cacheMissCount")));
          objc_msgSend(v20, "setObject:forKeyedSubscript:", v26, &off_1012704B0);

          v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectForKeyedSubscript:", &off_1012704C8));
          v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", (char *)objc_msgSend(v27, "unsignedIntegerValue")+ objc_msgSend(v12, "cacheExpiredCount")));
          objc_msgSend(v20, "setObject:forKeyedSubscript:", v28, &off_1012704C8);

        }
        v34 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v41, v47, 16);
      }
      while (v34);
    }
    else
    {
      v38 = 0;
      v39 = 0;
      v10 = 0;
    }

    *(_QWORD *)(*(_QWORD *)(v30 + 32) + 56) = v38;
    *(_QWORD *)(*(_QWORD *)(v30 + 32) + 64) = v39;
    *(_QWORD *)(*(_QWORD *)(v30 + 32) + 72) = v10;
    objc_msgSend(*(id *)(v30 + 32), "setPlaceCacheResultsDict:", v36);
    v29 = objc_msgSend(v35, "copy");
    objc_msgSend(*(id *)(v30 + 32), "setPlaceCachePerAppCountsDict:", v29);

    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100A6138C;
    block[3] = &unk_1011AC860;
    block[4] = *(_QWORD *)(v30 + 32);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

    v6 = v31;
  }

}

void sub_100A6138C(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tableView"));
  objc_msgSend(v1, "reloadData");

}

void sub_100A61668(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  _QWORD block[4];
  id v11;
  id v12;
  _QWORD v13[5];

  v3 = a2;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100A61770;
  v13[3] = &unk_1011E0C98;
  v13[4] = *(_QWORD *)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithBlock:](NSPredicate, "predicateWithBlock:", v13));
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "filteredArrayUsingPredicate:", v4));
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100A617AC;
  block[3] = &unk_1011ACAD0;
  v8 = *(id *)(a1 + 40);
  v11 = v3;
  v12 = v8;
  v9 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

BOOL sub_100A61770(uint64_t a1, void *a2)
{
  return (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) & (unint64_t)objc_msgSend(a2, "usedInterfaceTypes")) != 0;
}

uint64_t sub_100A617AC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_100A61894(uint64_t a1, uint64_t a2)
{
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "setRoutePreloadSessions:", a2);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tableView"));
  objc_msgSend(v3, "reloadData");

}

void sub_100A627F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100A62810(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  id result;

  for (i = 0; i != 5; ++i)
  {
    result = objc_msgSend(*(id *)(a1 + 32), "numberOfRequestsForType:result:", a2, i);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) += result;
  }
  return result;
}

void sub_100A62E74(id a1)
{
  SunsetSunriseCalculator *v1;
  void *v2;

  v1 = objc_opt_new(SunsetSunriseCalculator);
  v2 = (void *)qword_1014D3D58;
  qword_1014D3D58 = (uint64_t)v1;

}

id sub_100A647F4(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  const __CFString *v4;

  v1 = 0;
  switch(a1)
  {
    case 1:
      v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v3 = v2;
      v4 = CFSTR("Bus [Long transit mode]");
      goto LABEL_6;
    case 2:
      v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v3 = v2;
      v4 = CFSTR("Subway & Light Rail [Long transit mode]");
      goto LABEL_6;
    case 4:
      v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v3 = v2;
      v4 = CFSTR("Commuter Rail [Long transit mode]");
      goto LABEL_6;
    case 8:
      v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v3 = v2;
      v4 = CFSTR("Ferry [Long transit mode]");
LABEL_6:
      v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:", v4, CFSTR("localized string not found"), 0));

      break;
    default:
      return v1;
  }
  return v1;
}

BOOL sub_100A64ACC(id *a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  PersistentSearchRequestHistoryItem *v12;
  uint64_t v14;
  uint64_t v15;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    switch((v6 >> 3))
    {
      case 0xAu:
        v12 = objc_alloc_init(PersistentSearchRequestHistoryItem);
        objc_storeStrong(a1 + 3, v12);
        v14 = 0;
        v15 = 0;
        if (PBReaderPlaceMark(a2, &v14) && (sub_100A68114((uint64_t)v12, a2) & 1) != 0)
          goto LABEL_31;
        goto LABEL_34;
      case 0xBu:
        v12 = objc_alloc_init(PersistentSearchResultHistoryItem);
        objc_storeStrong(a1 + 4, v12);
        v14 = 0;
        v15 = 0;
        if (!PBReaderPlaceMark(a2, &v14) || (sub_100A9646C((uint64_t)v12, a2) & 1) == 0)
          goto LABEL_34;
        goto LABEL_31;
      case 0xCu:
        v12 = objc_alloc_init(PersistentDirectionsHistoryItem);
        objc_storeStrong(a1 + 2, v12);
        v14 = 0;
        v15 = 0;
        if (!PBReaderPlaceMark(a2, &v14) || (sub_100A5CC9C((uint64_t)v12, a2) & 1) == 0)
          goto LABEL_34;
        goto LABEL_31;
      case 0xFu:
        v12 = objc_alloc_init(PersistentAddressBookAddress);
        objc_storeStrong(a1 + 1, v12);
        v14 = 0;
        v15 = 0;
        if (PBReaderPlaceMark(a2, &v14) && (sub_100A59E84((uint64_t)v12, a2) & 1) != 0)
        {
LABEL_31:
          PBReaderRecallMark(a2, &v14);

LABEL_32:
          if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          continue;
        }
LABEL_34:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag(a2) & 1) == 0)
          return 0;
        goto LABEL_32;
    }
  }
}

UIFont *__cdecl sub_100A65430(id a1)
{
  return +[ChildItemButton buttonTitleFont](ChildItemButton, "buttonTitleFont");
}

void sub_100A66864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100A66888()
{
  if (qword_1014D3D70 != -1)
    dispatch_once(&qword_1014D3D70, &stru_1011E0D88);
  return (id)qword_1014D3D68;
}

void sub_100A668C8(uint64_t a1, uint64_t a2, void *a3)
{
  double v4;
  id v5;
  NSObject *v6;
  id WeakRetained;
  id *v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  double v17;
  double v18;
  double Double;
  void *v20;
  void *v21;
  NSObject *v22;
  double v23;
  id v24;
  id v25;
  _QWORD v26[4];
  NSObject *v27;
  id v28;
  uint8_t buf[4];
  id v30;
  __int16 v31;
  double v32;
  __int16 v33;
  double v34;

  v4 = COERCE_DOUBLE(a3);
  v5 = sub_100A66888();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    *(_DWORD *)buf = 134349314;
    v30 = WeakRetained;
    v31 = 2112;
    v32 = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[%{public}p] Got device motion update with error: %@", buf, 0x16u);

  }
  v8 = (id *)(a1 + 32);
  v9 = objc_loadWeakRetained(v8);
  v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "motionManager"));
  objc_msgSend((id)v10, "stopDeviceMotionUpdates");

  v11 = objc_loadWeakRetained(v8);
  LOBYTE(v10) = objc_msgSend(v11, "gotDeviceMotionUpdate");

  if ((v10 & 1) == 0)
  {
    v12 = objc_loadWeakRetained(v8);
    objc_msgSend(v12, "setGotDeviceMotionUpdate:", 1);

    if (v4 != 0.0)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)&v4, "domain"));
      if (!objc_msgSend(v13, "isEqualToString:", CMErrorDomain))
      {
LABEL_15:

        goto LABEL_16;
      }
      v14 = objc_msgSend(*(id *)&v4, "code");

      if (v14 == (id)102)
      {
        v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectForKey:", off_1014B94F8));

        if (v13)
        {
          v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
          objc_msgSend(v16, "timeIntervalSinceDate:", v13);
          v18 = v17;

        }
        else
        {
          v18 = 978307200.0;
        }
        Double = GEOConfigGetDouble(MapsConfig_PedestrianARCompassCalibrationInternalAlertDisplayTimeInterval, off_1014B4908);
        if (v18 < Double)
        {
          v23 = Double;
          v24 = sub_100A66888();
          v22 = objc_claimAutoreleasedReturnValue(v24);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
          {
            v25 = objc_loadWeakRetained(v8);
            *(_DWORD *)buf = 134349568;
            v30 = v25;
            v31 = 2048;
            v32 = v18;
            v33 = 2048;
            v34 = v23;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "[%{public}p] Last showed error alert too soon (%f seconds ago < %f)", buf, 0x20u);

          }
        }
        else
        {
          v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
          v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
          objc_msgSend(v20, "setObject:forKey:", v21, off_1014B94F8);

          v26[0] = _NSConcreteStackBlock;
          v26[1] = 3221225472;
          v26[2] = sub_100A66BE0;
          v26[3] = &unk_1011AEAA0;
          v27 = *(id *)&v4;
          objc_copyWeak(&v28, v8);
          dispatch_async((dispatch_queue_t)&_dispatch_main_q, v26);
          objc_destroyWeak(&v28);
          v22 = v27;
        }

        goto LABEL_15;
      }
    }
  }
LABEL_16:

}

void sub_100A66BE0(uint64_t a1)
{
  MapsRadarDraft *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  id WeakRetained;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  int v14;
  id v15;
  void *v16;

  v2 = objc_opt_new(MapsRadarDraft);
  -[MapsRadarDraft setTitle:](v2, "setTitle:", CFSTR("[Compass Calibration Error]"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "description"));
  -[MapsRadarDraft setDescriptionText:](v2, "setDescriptionText:", v3);

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MapsRadarComponent mapsAppNavUIWalkingComponent](MapsRadarComponent, "mapsAppNavUIWalkingComponent"));
  -[MapsRadarDraft setComponent:](v2, "setComponent:", v4);

  -[MapsRadarDraft setClassification:](v2, "setClassification:", 7);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[MapsRadarKeyword keywordWithName:number:](MapsRadarKeyword, "keywordWithName:number:", CFSTR("MAPS377"), 1281664));
  v16 = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v16, 1));
  -[MapsRadarDraft addKeywords:](v2, "addKeywords:", v6);

  v7 = sub_100A66888();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    v14 = 134349056;
    v15 = WeakRetained;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[%{public}p] Will show internal TTR alert", (uint8_t *)&v14, 0xCu);

  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[MapsRadarController sharedInstance](MapsRadarController, "sharedInstance"));
  v11 = objc_loadWeakRetained((id *)(a1 + 40));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "platformController"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "chromeViewController"));
  objc_msgSend(v10, "launchTTRWithRadar:promptTitle:fromViewController:", v2, CFSTR("Maps detected an error with compass calibration. Please file a radar to Maps App Nav UI Walking | iOS"), v13);

}

void sub_100A66F08(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "DebugCoreMotionCompassAvailabilityTask");
  v2 = (void *)qword_1014D3D68;
  qword_1014D3D68 = (uint64_t)v1;

}

void sub_100A676D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100A67710(uint64_t a1)
{
  id WeakRetained;
  id v2;
  void *v3;
  id v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = objc_alloc_init((Class)objc_msgSend((id)objc_opt_class(WeakRetained), "fallbackModeControllerClass"));
  v5 = v2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v5, 1));

  return v3;
}

uint64_t sub_100A68114(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  int v11;
  id v13;
  uint64_t v14;
  uint64_t String;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD v30[2];

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        v6 = 0;
        v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v11 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    switch((v6 >> 3))
    {
      case 0xAu:
        v13 = objc_alloc_init((Class)GEOPlaceSearchRequest);
        v14 = 72;
        goto LABEL_36;
      case 0xBu:
        String = PBReaderReadString(a2);
        v16 = objc_claimAutoreleasedReturnValue(String);
        v17 = 64;
        goto LABEL_40;
      case 0xCu:
        v18 = PBReaderReadString(a2);
        v16 = objc_claimAutoreleasedReturnValue(v18);
        v17 = 56;
        goto LABEL_40;
      case 0x14u:
        *(_BYTE *)(a1 + 96) |= 1u;
        v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v21 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v21 = 0;
        }
        v29 = 8;
        goto LABEL_59;
      case 0x15u:
        *(_BYTE *)(a1 + 96) |= 4u;
        v22 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v21 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v21 = 0;
        }
        v29 = 24;
        goto LABEL_59;
      case 0x16u:
        *(_BYTE *)(a1 + 96) |= 2u;
        v23 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v21 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v21 = 0;
        }
        v29 = 16;
        goto LABEL_59;
      case 0x17u:
        *(_BYTE *)(a1 + 96) |= 8u;
        v24 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v21 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v21 = 0;
        }
        v29 = 32;
        goto LABEL_59;
      case 0x18u:
        v13 = objc_alloc_init((Class)GEOPlaceSearchResponse);
        v14 = 80;
LABEL_36:
        objc_storeStrong((id *)(a1 + v14), v13);
        v30[0] = 0;
        v30[1] = 0;
        if (PBReaderPlaceMark(a2, v30) && (objc_msgSend(v13, "readFrom:", a2) & 1) != 0)
        {
          PBReaderRecallMark(a2, v30);

LABEL_60:
          if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          continue;
        }

        return 0;
      case 0x1Au:
        v25 = PBReaderReadString(a2);
        v16 = objc_claimAutoreleasedReturnValue(v25);
        v17 = 88;
LABEL_40:
        v26 = *(void **)(a1 + v17);
        *(_QWORD *)(a1 + v17) = v16;

        goto LABEL_60;
      case 0x1Bu:
        *(_BYTE *)(a1 + 96) |= 0x10u;
        v27 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v27 <= 0xFFFFFFFFFFFFFFF7 && v27 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v21 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v21 = 0;
        }
        v29 = 40;
        goto LABEL_59;
      case 0x1Cu:
        *(_BYTE *)(a1 + 96) |= 0x20u;
        v28 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v21 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v21 = 0;
        }
        v29 = 48;
LABEL_59:
        *(_QWORD *)(a1 + v29) = v21;
        goto LABEL_60;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        goto LABEL_60;
    }
  }
}

void sub_100A6AF48(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  HomeStorageOutlineNode *v7;

  v5 = a3;
  v6 = a2;
  v7 = -[HomeStorageOutlineNode initWithDictionaryRepresentation:]([HomeStorageOutlineNode alloc], "initWithDictionaryRepresentation:", v5);

  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v7, v6);
}

void sub_100A6B0BC(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;

  v6 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "dictionaryRepresentation"));
  if (objc_msgSend(v5, "count"))
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v5, v6);

}

void sub_100A6B52C(id a1)
{
  CarChromeNavigationCameraStyleManager *v1;
  void *v2;

  v1 = objc_alloc_init(CarChromeNavigationCameraStyleManager);
  v2 = (void *)qword_1014D3D78;
  qword_1014D3D78 = (uint64_t)v1;

}

id sub_100A6B8C0()
{
  if (qword_1014D3D90 != -1)
    dispatch_once(&qword_1014D3D90, &stru_1011E0E18);
  return (id)qword_1014D3D88;
}

void sub_100A6D4D8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CarChromeNavigationCameraStyleManager");
  v2 = (void *)qword_1014D3D88;
  qword_1014D3D88 = (uint64_t)v1;

}

id sub_100A6F294(id a1, MSPSharedTripContact *a2, unint64_t a3)
{
  return -[MSPSharedTripContact stringValue](a2, "stringValue", a3);
}

void sub_100A6F29C(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  unsigned __int8 v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  _BYTE v40[128];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
  v5 = objc_msgSend(v4, "isEqualToString:", *(_QWORD *)(a1[4] + 184));

  if ((v5 & 1) == 0)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "phoneNumbers"));
    if (objc_msgSend(v6, "count"))
    {

    }
    else
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "emailAddresses"));
      v8 = objc_msgSend(v7, "count");

      if (!v8)
        goto LABEL_25;
    }
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "phoneNumbers"));
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v35, v40, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v36;
LABEL_7:
      v13 = 0;
      while (1)
      {
        if (*(_QWORD *)v36 != v12)
          objc_enumerationMutation(v9);
        v14 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * v13);
        v15 = (void *)a1[5];
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "value"));
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "stringValue"));
        LOBYTE(v15) = objc_msgSend(v15, "containsObject:", v17);

        if ((v15 & 1) != 0)
          break;
        v18 = (void *)a1[6];
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "value"));
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "stringValue"));
        LOBYTE(v18) = objc_msgSend(v18, "containsObject:", v20);

        if ((v18 & 1) != 0)
          break;
        if (v11 == (id)++v13)
        {
          v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v35, v40, 16);
          if (v11)
            goto LABEL_7;
          goto LABEL_14;
        }
      }
    }
    else
    {
LABEL_14:

      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "emailAddresses", 0));
      v21 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
      if (v21)
      {
        v22 = v21;
        v23 = *(_QWORD *)v32;
LABEL_16:
        v24 = 0;
        while (1)
        {
          if (*(_QWORD *)v32 != v23)
            objc_enumerationMutation(v9);
          v25 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * v24);
          v26 = (void *)a1[5];
          v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "value"));
          LOBYTE(v26) = objc_msgSend(v26, "containsObject:", v27);

          if ((v26 & 1) != 0)
            break;
          v28 = (void *)a1[6];
          v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "value"));
          LOBYTE(v28) = objc_msgSend(v28, "containsObject:", v29);

          if ((v28 & 1) != 0)
            break;
          if (v22 == (id)++v24)
          {
            v22 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
            if (v22)
              goto LABEL_16;
            goto LABEL_23;
          }
        }
      }
      else
      {
LABEL_23:

        v30 = (void *)a1[7];
        v9 = (void *)objc_claimAutoreleasedReturnValue(+[MSPSharedTripContact contactsFromCNContact:](MSPSharedTripContact, "contactsFromCNContact:", v3));
        objc_msgSend(v30, "addObjectsFromArray:", v9);
      }
    }

  }
LABEL_25:

}

void sub_100A6FF98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100A6FFB4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "performAutocompleteSearch");

}

void sub_100A7066C(id a1)
{
  RAPWebBundleConfigurationManager *v1;
  RAPWebBundleDownloadManager *v2;
  void *v3;
  id v4;

  v1 = objc_alloc_init(RAPWebBundleConfigurationManager);
  v4 = (id)objc_claimAutoreleasedReturnValue(-[RAPWebBundleConfigurationManager configuration](v1, "configuration"));

  v2 = -[RAPWebBundleDownloadManager initWithConfiguration:]([RAPWebBundleDownloadManager alloc], "initWithConfiguration:", v4);
  v3 = (void *)qword_1014D3DA0;
  qword_1014D3DA0 = (uint64_t)v2;

}

id sub_100A70734()
{
  void *v0;
  id v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[GEOPlatform sharedPlatform](GEOPlatform, "sharedPlatform"));
  v1 = objc_msgSend(v0, "isInternalInstall");

  return v1;
}

RAPEntryPoint *__cdecl sub_100A70AB0(id a1, GEORoadAccessPoint *a2, unint64_t a3)
{
  GEORoadAccessPoint *v3;
  RAPEntryPoint *v4;

  v3 = a2;
  v4 = -[RAPEntryPoint initWithAccessPoint:]([RAPEntryPoint alloc], "initWithAccessPoint:", v3);

  return v4;
}

id sub_100A70ED8(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "corrected"));
  v4 = objc_msgSend(v3, "isEqual:", *(_QWORD *)(a1 + 32));

  return v4;
}

id sub_100A70F28(id a1, RAPEntryPoint *a2, unint64_t a3)
{
  return -[RAPEntryPoint accessPoint](a2, "accessPoint", a3);
}

id sub_100A70F40(id a1, RAPEntryPoint *a2, unint64_t a3)
{
  return -[RAPEntryPoint accessPoint](a2, "accessPoint", a3);
}

void sub_100A72390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100A723D0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id *v5;
  id WeakRetained;
  id v7;
  void *v8;
  void *v9;
  unsigned int v10;
  void *v11;
  _QWORD v13[4];
  id v14;

  v4 = a3;
  v5 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v7 = objc_msgSend(objc_alloc((Class)UICollectionLayoutListConfiguration), "initWithAppearance:", 2);
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor clearColor](UIColor, "clearColor"));
    objc_msgSend(v7, "setBackgroundColor:", v8);

    objc_msgSend(v7, "setHeaderMode:", 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "offlineMapsDataSource"));
    v10 = objc_msgSend(v9, "canRestoreAnyMaps");

    objc_msgSend(v7, "setFooterMode:", v10);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100A72544;
    v13[3] = &unk_1011E0F90;
    objc_copyWeak(&v14, v5);
    objc_msgSend(v7, "setTrailingSwipeActionsConfigurationProvider:", v13);
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutSection sectionWithListConfiguration:layoutEnvironment:](NSCollectionLayoutSection, "sectionWithListConfiguration:layoutEnvironment:", v7, v4));
    objc_msgSend(v11, "setContentInsets:", 0.0, 16.0, 16.0, 16.0);
    objc_destroyWeak(&v14);

  }
  else
  {
    v11 = 0;
  }

  return v11;
}

void sub_100A7252C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

id sub_100A72544(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "offlineMapsDataSource"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "swipeActionsConfigurationForIndexPath:", v3));

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_100A72E74(uint64_t a1)
{
  _BOOL8 v2;
  id v3;

  v2 = *(_BYTE *)(a1 + 40) == 0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 112), "setActive:");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "setActive:", v2);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v3, "layoutIfNeeded");

}

id sub_100A7594C()
{
  if (qword_1014D3DB0 != -1)
    dispatch_once(&qword_1014D3DB0, &stru_1011E0FB0);
  return (id)qword_1014D3DA8;
}

void sub_100A75CD0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "PedestrianARSessionMapsSkyMonitor");
  v2 = (void *)qword_1014D3DA8;
  qword_1014D3DA8 = (uint64_t)v1;

}

const __CFString *sub_100A75D00(unint64_t a1)
{
  if (a1 > 4)
    return CFSTR("Unknown");
  else
    return off_1011E0FF8[a1];
}

void sub_100A77358(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  id v24;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MNNavigationService sharedService](MNNavigationService, "sharedService"));
  objc_msgSend(v2, "registerObserver:", *(_QWORD *)(a1 + 32));

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[CarRouteGeniusService sharedService](CarRouteGeniusService, "sharedService"));
  objc_msgSend(v3, "registerObserver:", *(_QWORD *)(a1 + 32));

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CarDisplayController sharedInstance](CarDisplayController, "sharedInstance"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "routeGeniusManager"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chromeViewController"));
  objc_msgSend(v5, "activateIfPossibleForChrome:", v6);

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v7, "addObserver:selector:name:object:", *(_QWORD *)(a1 + 32), "_externalDeviceUpdated:", CFSTR("MapsExternalAccessoryUpdatedNotification"), 0);

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chromeViewController"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "mapView"));
  objc_msgSend(v9, "_setApplicationState:", 1);

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chromeViewController"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "searchPinsManager"));
  objc_msgSend(v11, "addPOIShapeLoadingObserver:", *(_QWORD *)(a1 + 32));

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chromeViewController"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "transientMapSettings"));
  objc_msgSend(*(id *)(a1 + 32), "setRouteGeniusMapSettings:", v13);

  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "routeGeniusMapSettings"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "carChromeViewController"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "defaultMapSettings"));
  objc_msgSend(v14, "readFromMapSettings:", v16);

  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "routeGeniusMapSettings"));
  if (!objc_msgSend(v17, "hasTrackingMode"))
    goto LABEL_4;
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "routeGeniusMapSettings"));
  v19 = objc_msgSend(v18, "trackingMode");

  if (v19 == (id)2)
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "routeGeniusMapSettings"));
    objc_msgSend(v17, "setTrackingMode:", 1);
LABEL_4:

  }
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chromeViewController"));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "mapView"));
  objc_msgSend(v21, "_setShouldSplitRouteLine:", 1);

  v22 = objc_msgSend(*(id *)(a1 + 32), "wantsNavigationDisplay");
  v24 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chromeViewController"));
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "mapView"));
  objc_msgSend(v23, "_setShouldAnimatePositionWithRouteMatch:", v22);

}

void sub_100A775CC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "previousTopContext"));
  v2 = objc_opt_class(CarMapPanningModeController);
  if ((objc_opt_isKindOfClass(v7, v2) & 1) == 0)
    objc_msgSend(*(id *)(a1 + 40), "_clearAnnotations");
  v3 = *(void **)(a1 + 40);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CarRouteGeniusService sharedService](CarRouteGeniusService, "sharedService"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "suggestion"));
  objc_msgSend(v3, "setCurrentSuggestion:", v5);

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[MapsExternalDevice sharedInstance](MapsExternalDevice, "sharedInstance"));
  objc_msgSend(*(id *)(a1 + 40), "setNavigationAidedDrivingEnabled:", objc_msgSend(v6, "isNavigationAidedDrivingEnabled"));

  objc_msgSend(*(id *)(a1 + 40), "_updateForCurrentRoute");
}

void sub_100A77698(uint64_t a1)
{
  double Double;
  id v3;
  NSObject *v4;
  id v5;
  void *v6;
  objc_class *v7;
  NSString *v8;
  void *v9;
  void *v10;
  void *v11;
  __CFString *v12;
  MapsThrottler *v13;
  void *v14;
  void *v15;
  id v16;
  MapsThrottler *v17;
  uint64_t v18;
  void *v19;
  _QWORD v20[5];
  id v21;
  uint8_t buf[4];
  __CFString *v23;
  __int16 v24;
  double v25;

  Double = GEOConfigGetDouble(MapsConfig_RouteGeniusMaximumLocationUpdateReframingInterval, off_1014B4C78);
  v3 = sub_1004336BC();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = *(id *)(a1 + 32);
    v6 = v5;
    if (!v5)
    {
      v12 = CFSTR("<nil>");
      goto LABEL_10;
    }
    v7 = (objc_class *)objc_opt_class(v5);
    v8 = NSStringFromClass(v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    if ((objc_opt_respondsToSelector(v6, "accessibilityIdentifier") & 1) != 0)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "performSelector:", "accessibilityIdentifier"));
      v11 = v10;
      if (v10 && !objc_msgSend(v10, "isEqualToString:", v9))
      {
        v12 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v9, v6, v11));

        goto LABEL_8;
      }

    }
    v12 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v9, v6));
LABEL_8:

LABEL_10:
    *(_DWORD *)buf = 138543618;
    v23 = v12;
    v24 = 2048;
    v25 = Double;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[%{public}@] Will throttle location-triggered reframing to max every %#.1lfs", buf, 0x16u);

  }
  objc_initWeak((id *)buf, *(id *)(a1 + 32));
  v13 = [MapsThrottler alloc];
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "mapView"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "userLocation"));
  v16 = &_dispatch_main_q;
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_100A77944;
  v20[3] = &unk_1011E0FD8;
  v20[4] = *(_QWORD *)(a1 + 32);
  objc_copyWeak(&v21, (id *)buf);
  v17 = -[MapsThrottler initWithInitialValue:throttlingInterval:queue:updateHandler:](v13, "initWithInitialValue:throttlingInterval:queue:updateHandler:", v15, &_dispatch_main_q, v20, Double);
  v18 = *(_QWORD *)(a1 + 32);
  v19 = *(void **)(v18 + 24);
  *(_QWORD *)(v18 + 24) = v17;

  objc_destroyWeak(&v21);
  objc_destroyWeak((id *)buf);
}

void sub_100A77918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100A77944(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  void (**v5)(_QWORD);
  id v6;
  NSObject *v7;
  id v8;
  void *v9;
  objc_class *v10;
  NSString *v11;
  void *v12;
  void *v13;
  void *v14;
  __CFString *v15;
  id WeakRetained;
  uint8_t buf[4];
  __CFString *v18;

  v5 = a4;
  v6 = sub_1004336BC();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    v8 = *(id *)(a1 + 32);
    v9 = v8;
    if (!v8)
    {
      v15 = CFSTR("<nil>");
      goto LABEL_10;
    }
    v10 = (objc_class *)objc_opt_class(v8);
    v11 = NSStringFromClass(v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    if ((objc_opt_respondsToSelector(v9, "accessibilityIdentifier") & 1) != 0)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "performSelector:", "accessibilityIdentifier"));
      v14 = v13;
      if (v13 && !objc_msgSend(v13, "isEqualToString:", v12))
      {
        v15 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v12, v9, v14));

        goto LABEL_8;
      }

    }
    v15 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v12, v9));
LABEL_8:

LABEL_10:
    *(_DWORD *)buf = 138543362;
    v18 = v15;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[%{public}@] Will check framing due to location update", buf, 0xCu);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "recenterCameraOnRouteAnimated:", 1);

  v5[2](v5);
}

void sub_100A77B74(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 24);
  *(_QWORD *)(v2 + 24) = 0;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v4, "removeObserver:name:object:", *(_QWORD *)(a1 + 32), CFSTR("MapsExternalAccessoryUpdatedNotification"), 0);

  v15 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "nextTopContext"));
  v5 = objc_opt_class(CarMapPanningModeController);
  if ((objc_opt_isKindOfClass(v15, v5) & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "setRouteGeniusMapSettings:", 0);
    objc_msgSend(*(id *)(a1 + 32), "_clearAnnotations");
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chromeViewController"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "mapView"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "_mapLayer"));
    objc_msgSend(v8, "setExternalTrafficFeatures:areRouteTrafficFeaturesActive:", 0, 0);

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chromeViewController"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "searchPinsManager"));
    objc_msgSend(v10, "removePOIShapeLoadingObserver:", *(_QWORD *)(a1 + 32));

    v11 = (void *)objc_claimAutoreleasedReturnValue(+[MNNavigationService sharedService](MNNavigationService, "sharedService"));
    objc_msgSend(v11, "unregisterObserver:", *(_QWORD *)(a1 + 32));

    v12 = (void *)objc_claimAutoreleasedReturnValue(+[CarDisplayController sharedInstance](CarDisplayController, "sharedInstance"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "routeGeniusManager"));
    objc_msgSend(v13, "deactivateForAllChromes");

    v14 = (void *)objc_claimAutoreleasedReturnValue(+[CarRouteGeniusService sharedService](CarRouteGeniusService, "sharedService"));
    objc_msgSend(v14, "unregisterObserver:", *(_QWORD *)(a1 + 32));

  }
}

void sub_100A78D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100A78D44(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "virtualGarageDidUpdate:", v3);

}

void sub_100A7924C(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "collectionViewLayout"));
  objc_msgSend(v3, "invalidateLayout");

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView"));
  objc_msgSend(v4, "layoutIfNeeded");

}

void sub_100A79638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100A79664(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id WeakRetained;
  void *v6;
  _BOOL8 v7;
  id v8;
  double v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  double v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  void *v20;

  v4 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v6 = WeakRetained;
  if (WeakRetained)
  {
    v7 = sub_1002A8AA0(WeakRetained) != 5;
    v8 = objc_msgSend(objc_alloc((Class)_UICollectionViewListLayoutSectionConfiguration), "initWithAppearanceStyle:layoutEnvironment:", 2 * v7, v4);
    v9 = _UICollectionViewListLayoutSectionAutomaticDimension;
    objc_msgSend(v8, "setEstimatedRowHeight:", _UICollectionViewListLayoutSectionAutomaticDimension);
    objc_msgSend(v8, "setRowHeight:", v9);
    objc_msgSend(v8, "setSeparatorStyle:", v7);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "_separatorConfiguration"));
    v11 = objc_msgSend(v10, "copy");

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "theme"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "dynamicHairlineColor"));
    objc_msgSend(v11, "_setColor:", v13);

    v14 = 0.0;
    objc_msgSend(v11, "_setInsets:", 0.0, 56.0, 0.0, 0.0);
    objc_msgSend(v8, "_setSeparatorConfiguration:", v11);
    if (sub_1002A8AA0(v6) != 5)
      v14 = 16.0;
    v15 = objc_msgSend(objc_alloc((Class)_UICollectionViewListLayoutSection), "initWithConfiguration:layoutEnvironment:", v8, v4);
    objc_msgSend(v15, "setContentInsets:", 0.0, v14, 0.0, v14);
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[RouteStepListSectionBackgroundView decorationViewKind](RouteStepListSectionBackgroundView, "decorationViewKind"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutDecorationItem backgroundDecorationItemWithElementKind:](NSCollectionLayoutDecorationItem, "backgroundDecorationItemWithElementKind:", v16));

    objc_msgSend(v17, "setContentInsets:", 0.0, v14, 0.0, v14);
    v20 = v17;
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v20, 1));
    objc_msgSend(v15, "setDecorationItems:", v18);

  }
  else
  {
    v15 = 0;
  }

  return v15;
}

void sub_100A7A380(uint64_t a1, uint64_t a2)
{
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSIndexPath indexPathForItem:inSection:](NSIndexPath, "indexPathForItem:inSection:", a2, 0));
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);

}

void sub_100A7B144(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "selectedVehicle"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataSource"));
  objc_msgSend(v2, "setVehicle:", v3);

}

id sub_100A7B7DC()
{
  if (qword_1014D3DC0 != -1)
    dispatch_once(&qword_1014D3DC0, &stru_1011E1078);
  return (id)qword_1014D3DB8;
}

id sub_100A7C690(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "setAlpha:", 1.0);
}

id sub_100A7C6AC(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "setAlpha:", 0.0);
}

void sub_100A7C940(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CardView");
  v2 = (void *)qword_1014D3DB8;
  qword_1014D3DB8 = (uint64_t)v1;

}

id sub_100A7D230()
{
  if (qword_1014D3DD0 != -1)
    dispatch_once(&qword_1014D3DD0, &stru_1011E1098);
  return (id)qword_1014D3DC8;
}

void sub_100A7ED08(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "MapsUserLocationView");
  v2 = (void *)qword_1014D3DC8;
  qword_1014D3DC8 = (uint64_t)v1;

}

void sub_100A7EDAC(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_1014D3DD8;
  qword_1014D3DD8 = (uint64_t)v1;

}

id sub_100A7F028()
{
  if (qword_1014D3DF0 != -1)
    dispatch_once(&qword_1014D3DF0, &stru_1011E10F8);
  return (id)qword_1014D3DE8;
}

void sub_100A7F068(id a1, GCDTimer *a2)
{
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  if (+[UIView areAnimationsEnabled](UIView, "areAnimationsEnabled"))
  {
    v2 = sub_100A7F028();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Found animations enabled, suppressing", v4, 2u);
    }

    +[UIView setAnimationsEnabled:](UIView, "setAnimationsEnabled:", 0);
  }
}

void sub_100A7F2B8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "AnimationSuppression");
  v2 = (void *)qword_1014D3DE8;
  qword_1014D3DE8 = (uint64_t)v1;

}

void sub_100A7FD88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100A7FDAC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "_updateSnapshotWithCollection:resolverInfo:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

id sub_100A80930()
{
  if (qword_1014D3E00 != -1)
    dispatch_once(&qword_1014D3E00, &stru_1011E1140);
  return (id)qword_1014D3DF8;
}

void sub_100A80970(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100A809CC;
  block[3] = &unk_1011AC860;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
}

id sub_100A809CC(uint64_t a1)
{
  void *v2;
  id result;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "postNotificationName:object:", CFSTR("PPTTest_CuratedCollectionView_DidDisplayCollection"), *(_QWORD *)(a1 + 32));

  result = (id)+[LibraryUIUtilities isMyPlacesEnabled](_TtC4Maps18LibraryUIUtilities, "isMyPlacesEnabled");
  if ((_DWORD)result)
    return objc_msgSend(*(id *)(a1 + 32), "_updateLibraryStatusForModels");
  return result;
}

void sub_100A81A98(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataSource"));
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "snapshot"));

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 248), "applySnapshot:animatingDifferences:", v4, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v3, "dataSource:didExpandCellAnimated:", *(_QWORD *)(a1 + 32), 1);

}

void sub_100A81CC0(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  id v6;
  void *v7;
  _QWORD v8[4];
  id v9;

  v3 = a2;
  v4 = objc_opt_class(CuratedCollectionItemCellModel);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    v5 = *(NSObject **)(a1 + 32);
    v6 = v3;
    dispatch_group_enter(v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "libraryOperationsCoordinator"));

    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100A81D8C;
    v8[3] = &unk_1011AC860;
    v9 = *(id *)(a1 + 32);
    objc_msgSend(v7, "determineSavedStateWithCompletion:", v8);

  }
}

void sub_100A81D8C(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

id sub_100A81D94(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_reconfigureSnapshot:updatedModels:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_100A81FF0(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a2;
  v3 = objc_opt_class(CuratedCollectionItemCellModel);
  if ((objc_opt_isKindOfClass(v9, v3) & 1) != 0)
  {
    v4 = *(void **)(a1 + 32);
    v5 = v9;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "collectionItem"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "mapItem"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "firstUserGuideContainingMapItem:requiresOrdering:", v7, 0));
    objc_msgSend(v5, "setIsItemInUserCollection:", v8 != 0);

  }
}

uint64_t sub_100A82140(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 120) = 0;
  return result;
}

id sub_100A823B0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateLibraryStatusForModels");
}

void sub_100A8271C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CuratedCollectionProvider");
  v2 = (void *)qword_1014D3DF8;
  qword_1014D3DF8 = (uint64_t)v1;

}

void sub_100A8349C(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "detailButton"));
  objc_msgSend(v2, "setTitle:forState:", *(_QWORD *)(a1 + 40), 0);

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "detailButton"));
  objc_msgSend(v3, "setEnabled:", *(unsigned __int8 *)(a1 + 48));

}

void sub_100A84B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100A84B84(uint64_t a1)
{
  _QWORD *WeakRetained;
  void *v3;
  void *v4;
  void *v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v5 = WeakRetained;
    objc_msgSend(*(id *)(a1 + 32), "setRoutePlanningAdvisory:", WeakRetained[2]);
    v3 = *(void **)(a1 + 32);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "advisoryDetailButton"));
    objc_msgSend(v3, "setRoutePlanningIncidentsSourceView:", v4);

    objc_msgSend(*(id *)(a1 + 32), "presentRoutePlanningViewType:", 5);
    WeakRetained = v5;
  }

}

void sub_100A85A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *a10, id *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100A85A54(id *a1)
{
  id *v2;
  id *WeakRetained;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned int v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  double v16;
  double v17;
  double v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  _QWORD v26[4];
  id v27;

  v2 = a1 + 5;
  WeakRetained = (id *)objc_loadWeakRetained(a1 + 5);
  if (WeakRetained)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
    objc_msgSend(v4, "captureUserAction:onTarget:forAdvisory:", 250, 504, a1[4]);

    v5 = a1[4];
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "advisoryItems"));
    if (objc_msgSend(v6, "count") == (id)1)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "advisoryItems"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "firstObject"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "cardAction"));
      v10 = objc_msgSend(v9, "type");

      if (v10 == 1)
      {
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "advisoryItems"));
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "firstObject"));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "cardAction"));
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "location"));

        v15 = objc_alloc((Class)GEOMapRegion);
        objc_msgSend(v14, "lat");
        v17 = v16;
        objc_msgSend(v14, "lng");
        v19 = objc_msgSend(v15, "initWithLatitude:longitude:", v17, v18);
        v20 = objc_loadWeakRetained(WeakRetained + 5);
        v26[0] = _NSConcreteStackBlock;
        v26[1] = 3221225472;
        v26[2] = sub_100A85CE0;
        v26[3] = &unk_1011E1168;
        objc_copyWeak(&v27, v2);
        objc_msgSend(v20, "viewController:showOfflineMapRegionSelectorForRegion:name:dismissalBlock:", 0, v19, 0, v26);

        objc_destroyWeak(&v27);
        goto LABEL_7;
      }
    }
    else
    {

    }
    v21 = objc_loadWeakRetained(WeakRetained + 5);
    objc_msgSend(v21, "setRoutePlanningAdvisory:", a1[4]);

    v22 = objc_loadWeakRetained(WeakRetained + 5);
    v23 = objc_loadWeakRetained(a1 + 6);
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "advisoryDetailButton"));
    objc_msgSend(v22, "setRoutePlanningIncidentsSourceView:", v24);

    v25 = objc_loadWeakRetained(WeakRetained + 5);
    objc_msgSend(v25, "presentRoutePlanningViewType:", 5);

  }
LABEL_7:

}

void sub_100A85CCC(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100A85CE0(uint64_t a1, uint64_t a2)
{
  id *WeakRetained;
  id v4;
  id *v5;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (a2 && WeakRetained)
  {
    v5 = WeakRetained;
    v4 = objc_loadWeakRetained(WeakRetained + 5);
    objc_msgSend(v4, "viewControllerShowOfflineMaps:", 0);

    WeakRetained = v5;
  }

}

id sub_100A85EAC(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "viewModelForAdvisory:", a2);
}

void sub_100A86448(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[PersonalizedItemPrioritizedStringAdornment adornmentWithString:priority:](PersonalizedItemPrioritizedStringAdornment, "adornmentWithString:priority:", &stru_1011EB268, 0));
  v2 = (void *)qword_1014D3E08;
  qword_1014D3E08 = v1;

}

void sub_100A8947C(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 32), *(id *)(a1 + 40));
}

uint64_t sub_100A895AC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100A895BC(uint64_t a1)
{

}

void sub_100A895C4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
  if (v2)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v4, 1));
  }
  else
  {
    v3 = &__NSArray0__struct;
  }
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v3);
  if (v2)

}

void sub_100A89858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100A89874(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 32));
}

void sub_100A8AC90(id a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.Maps.commute"));
  v2 = (void *)qword_1014D3E18;
  qword_1014D3E18 = (uint64_t)v1;

}

void sub_100A8AE98(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  uint64_t v11;
  int v12;
  id v13;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = sub_100431A4C();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v12 = 138412290;
      v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "PlaceRefinementAction resolveMapItem: %@", (uint8_t *)&v12, 0xCu);
    }

  }
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
  if (!v9)
  {
    v10 = objc_msgSend(objc_alloc((Class)MKPlacemark), "initWithCoordinate:addressDictionary:", 0, *(double *)(a1 + 48), *(double *)(a1 + 56));
    v9 = objc_msgSend(objc_alloc((Class)MKMapItem), "initWithPlacemark:", v10);

  }
  if (*(_QWORD *)(a1 + 32))
    objc_msgSend(v9, "setName:");
  v11 = *(_QWORD *)(a1 + 40);
  if (v11)
    (*(void (**)(uint64_t, id))(v11 + 16))(v11, v9);

}

void sub_100A8B350(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a2;
  v5 = a3;
  v6 = *(_QWORD *)(a1 + 48);
  if (v5)
  {
    if (v6)
      (*(void (**)(uint64_t, _QWORD, id))(v6 + 16))(v6, 0, v5);
  }
  else
  {
    if (v6)
      (*(void (**)(uint64_t, id, _QWORD))(v6 + 16))(v6, v10, 0);
    if (*(_BYTE *)(a1 + 56))
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "mapRegion"));

      if (v7)
      {
        v8 = *(void **)(a1 + 32);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "mapRegion"));
        objc_msgSend(v8, "_zoomToRegionForLineIfNecessary:region:withStartingRegion:startedShowingLineDate:", v10, v9, 0, *(_QWORD *)(a1 + 40));

      }
    }
  }

}

void sub_100A8B41C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  void *v14;
  void *v15;
  unsigned int v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  id v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 64);
    if (v7)
      (*(void (**)(uint64_t, _QWORD, id))(v7 + 16))(v7, 0, v6);
  }
  else
  {
    v8 = MKMapItemIdentifiersToGEOMapItemIdentifier(*(_QWORD *)(a1 + 32));
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v10 = v5;
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
    if (v11)
    {
      v21 = v5;
      v12 = *(_QWORD *)v23;
      while (2)
      {
        for (i = 0; i != v11; i = (char *)i + 1)
        {
          if (*(_QWORD *)v23 != v12)
            objc_enumerationMutation(v10);
          v14 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)i);
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "identifier"));
          v16 = objc_msgSend(v15, "isEqual:", v9);

          if (v16)
          {
            v11 = v14;
            goto LABEL_14;
          }
        }
        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
        if (v11)
          continue;
        break;
      }
LABEL_14:
      v5 = v21;
    }

    if (*(_BYTE *)(a1 + 72))
    {
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "mapRegion"));

      if (v17)
      {
        v18 = *(void **)(a1 + 40);
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "mapRegion"));
        objc_msgSend(v18, "_zoomToRegionForLineIfNecessary:region:withStartingRegion:startedShowingLineDate:", v11, v19, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));

      }
    }
    v20 = *(_QWORD *)(a1 + 64);
    if (v20)
      (*(void (**)(uint64_t, id, _QWORD))(v20 + 16))(v20, v11, 0);

  }
}

void sub_100A8B870(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;

  v11 = a2;
  v5 = a3;
  if (v5 || !objc_msgSend(v11, "count"))
  {
    v6 = *(_QWORD *)(a1 + 56);
    if (v6)
      (*(void (**)(uint64_t, _QWORD, id))(v6 + 16))(v6, 0, v5);
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "firstObject"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "mapRegion"));
    v9 = *(_QWORD *)(a1 + 56);
    if (v9)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "firstObject"));
      (*(void (**)(uint64_t, void *, _QWORD))(v9 + 16))(v9, v10, 0);

    }
    if (*(_BYTE *)(a1 + 64) && v8)
      objc_msgSend(*(id *)(a1 + 32), "_zoomToRegionForLineIfNecessary:region:withStartingRegion:startedShowingLineDate:", v7, v8, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
}

void sub_100A8BFA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, char a19)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_100A8BFD4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  _QWORD block[4];
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;

  v5 = a2;
  v6 = a3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100A8C0C0;
  block[3] = &unk_1011E12E0;
  v13 = *(_QWORD *)(a1 + 40);
  v10 = v6;
  v7 = v6;
  objc_copyWeak(&v14, (id *)(a1 + 48));
  v11 = v5;
  v12 = *(id *)(a1 + 32);
  v8 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  objc_destroyWeak(&v14);
}

void sub_100A8C0C0(uint64_t a1)
{
  void *v2;
  void *v3;
  id WeakRetained;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  _QWORD v12[4];
  id v13;
  id v14;

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
  if (*(_QWORD *)(a1 + 32))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("Line information cannot be shown at this time because of a server error."), CFSTR("localized string not found"), 0));
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "disambiguationVC"));
    objc_msgSend(v5, "setStatusMessage:", v3);

    v6 = *(_QWORD *)(a1 + 48);
    if (v6)
      (*(void (**)(uint64_t, _QWORD, _QWORD))(v6 + 16))(v6, 0, *(_QWORD *)(a1 + 32));
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 40);
    v8 = objc_loadWeakRetained((id *)(a1 + 64));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "disambiguationVC"));
    objc_msgSend(v9, "setLines:", v7);

    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100A8C264;
    v12[3] = &unk_1011E12B8;
    objc_copyWeak(&v14, (id *)(a1 + 64));
    v13 = *(id *)(a1 + 48);
    v10 = objc_loadWeakRetained((id *)(a1 + 64));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "disambiguationVC", _NSConcreteStackBlock, 3221225472, sub_100A8C264, &unk_1011E12B8));
    objc_msgSend(v11, "setLineSelectionBlock:", v12);

    objc_destroyWeak(&v14);
  }
}

void sub_100A8C250(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100A8C264(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "mapView"));
  objc_msgSend(v4, "_deselectLabelMarkerAnimated:", 1);

  v5 = objc_loadWeakRetained((id *)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "name"));
  v7 = MKMapItemIdentifierFromGEOTransitLine(v10);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  objc_msgSend(v5, "_showTransitLineWithName:identifier:mapRegion:", v6, v8, 0);

  v9 = *(_QWORD *)(a1 + 32);
  if (v9)
    (*(void (**)(uint64_t, id, _QWORD))(v9 + 16))(v9, v10, 0);

}

id sub_100A8D184()
{
  if (qword_1014D3E30 != -1)
    dispatch_once(&qword_1014D3E30, &stru_1011E1328);
  return (id)qword_1014D3E28;
}

void sub_100A8D7F0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFSessionSunsetSunriseMonitor");
  v2 = (void *)qword_1014D3E28;
  qword_1014D3E28 = (uint64_t)v1;

}

void sub_100A8DB9C(id a1)
{
  void *v1;
  unsigned int v2;
  id v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[MNNavigationService sharedService](MNNavigationService, "sharedService"));
  v2 = objc_msgSend(v1, "isInNavigatingState");

  if (v2)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(+[MNNavigationService sharedService](MNNavigationService, "sharedService"));
    objc_msgSend(v3, "stopNavigationWithReason:", 2);

  }
}

void sub_100A8DC18(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  void *v6;
  id v7;

  if (objc_msgSend(*(id *)(a1 + 32), "count"))
  {
    if ((unint64_t)objc_msgSend(*(id *)(a1 + 32), "count") > a4)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", a4));
      v7 = objc_msgSend(v6, "copy");

      objc_msgSend(v7, "fire");
    }
  }
}

CarFocusOrderItem *__cdecl sub_100A8DD78(id a1, UIFocusItem *a2, unint64_t a3)
{
  return +[CarFocusOrderItem itemWithFocusItem:](CarFocusOrderItem, "itemWithFocusItem:", a2);
}

id sub_100A8E2C4(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 0.0);
  return objc_msgSend(*(id *)(a1 + 40), "setFrame:", *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72));
}

id sub_100A8E2F8(id *a1)
{
  objc_msgSend(a1[4], "setAlpha:", 1.0);
  objc_msgSend(a1[5], "_bringNavigationBarToFront:", a1[6]);
  return objc_msgSend(a1[6], "completeTransition:", 1);
}

id sub_100A8E520(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 1.0);
  return objc_msgSend(*(id *)(a1 + 40), "setFrame:", *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72));
}

id sub_100A8E554(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_bringNavigationBarToFront:", *(_QWORD *)(a1 + 40));
  return objc_msgSend(*(id *)(a1 + 40), "completeTransition:", 1);
}

void sub_100A8EEBC(id *a1)
{
  void *v2;
  void *v3;
  id v4;

  objc_msgSend(a1[4], "setAlpha:", 1.0);
  objc_msgSend(a1[5], "setAlpha:", 0.0);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "view"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "_cardView"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "superview"));
  objc_msgSend(v3, "layoutIfNeeded");

}

void sub_100A8EF30(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  __CFString *v10;
  __CFString *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  int v15;
  __CFString *v16;
  __int16 v17;
  void *v18;

  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "incomingSign"));

  if (v4 != v5)
    objc_msgSend(*(id *)(a1 + 32), "removeFromSuperview");
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "signAnimationQueue"));
  objc_msgSend(v6, "removeObjectAtIndex:", 0);

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "incomingSign"));
  v8 = sub_10043364C();
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    v10 = CFSTR("NO");
    if ((_DWORD)a2)
      v10 = CFSTR("YES");
    v11 = v10;
    v15 = 138412546;
    v16 = v11;
    v17 = 2112;
    v18 = v7;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "etaCardVC: sign swap animation finished: %@ to sign: %@", (uint8_t *)&v15, 0x16u);

  }
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 40) + 64), v7);
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "signAnimationQueue"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "firstObject"));
  objc_msgSend(*(id *)(a1 + 40), "setIncomingSign:", v13);

  v14 = *(_QWORD *)(a1 + 48);
  if (v14)
    (*(void (**)(uint64_t, uint64_t))(v14 + 16))(v14, a2);

}

void sub_100A8FFF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100A90014(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  _QWORD v6[4];
  id v7;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "startedTest");
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100A90128;
    v6[3] = &unk_1011AD288;
    objc_copyWeak(&v7, v1);
    +[PPTNotificationCenter addOnceObserverForName:object:usingBlock:](PPTNotificationCenter, "addOnceObserverForName:object:usingBlock:", CFSTR("PPTTest_SearchHome_DidSetActive"), 0, v6);
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v4, "addObserver:selector:name:object:", v3, "didUpdateDataFetcher:", CFSTR("PPTTest_SearchHome_DidUpdateDataFetcher"), 0);

    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "testCoordinator"));
    objc_msgSend(v5, "pptTestEnterSearchMode");

    objc_destroyWeak(&v7);
  }

}

void sub_100A90110(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100A90128(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  id v5;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "object"));
    objc_msgSend(WeakRetained, "setNumberOfDataFetchers:", objc_msgSend(v4, "_ppt_numberOfDataFetchers"));
    objc_msgSend(WeakRetained, "startedSubTest:", CFSTR("collectData"));

  }
}

id sub_100A902B8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "continueAfterCollectingDataFromDataFetchers");
}

void sub_100A90510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100A90560(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 32), "finishedTest");
    WeakRetained = v3;
  }

}

void sub_100A95F3C(id a1)
{
  SearchSessionAnalyticsAggregator *v1;
  void *v2;

  v1 = objc_alloc_init(SearchSessionAnalyticsAggregator);
  v2 = (void *)qword_1014D3E38;
  qword_1014D3E38 = (uint64_t)v1;

}

void sub_100A96068(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100A961F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100A9646C(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  SearchResult *v12;
  uint64_t result;
  _QWORD v14[2];

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    if ((v6 >> 3) == 1)
    {
      v12 = objc_alloc_init(SearchResult);
      objc_storeStrong((id *)(a1 + 8), v12);
      v14[0] = 0;
      v14[1] = 0;
      if (!PBReaderPlaceMark(a2, v14) || !-[SearchResult readFrom:](v12, "readFrom:", a2))
      {

        return 0;
      }
      PBReaderRecallMark(a2, v14);

    }
    else
    {
      result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result)
        return result;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100A9B2DC(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "endSearch");
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cardPresentationController"));
  objc_msgSend(v2, "updateHeightForCurrentLayout");

}

void sub_100A9B3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100A9B414(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100A9B424(uint64_t a1)
{

}

void sub_100A9B42C(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v7;
  id v8;

  v8 = a2;
  v7 = objc_opt_class(ResultsViewController);
  if ((objc_opt_isKindOfClass(v8, v7) & 1) != 0)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
    *a4 = 1;
  }

}

id sub_100A9B584()
{
  if (qword_1014D3E50 != -1)
    dispatch_once(&qword_1014D3E50, &stru_1011E14A0);
  return (id)qword_1014D3E48;
}

void sub_100A9CEC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id location)
{
  id *v27;

  objc_destroyWeak(v27);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100A9CF10(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  NSObject *v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  unsigned int v10;
  __CFString *v11;
  __CFString *v12;
  id v13;
  int v14;
  id v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  __CFString *v19;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "object"));
  v4 = sub_100A9B584();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "host"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "overlayContentView"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "sceneIdentifierForLogging"));
    v10 = objc_msgSend(v3, "contentsHidden");
    v11 = CFSTR("NO");
    if (v10)
      v11 = CFSTR("YES");
    v12 = v11;
    v14 = 134349570;
    v15 = WeakRetained;
    v16 = 2112;
    v17 = v9;
    v18 = 2112;
    v19 = v12;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[%{public}p] [%@] Heading indicator did change visibility (contentsHidden:%@)", (uint8_t *)&v14, 0x20u);

  }
  v13 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(v13, "reloadAnimated:", 1);

}

void sub_100A9D078(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  NSObject *v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  unsigned int v10;
  __CFString *v11;
  __CFString *v12;
  id v13;
  int v14;
  id v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  __CFString *v19;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "object"));
  v4 = sub_100A9B584();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "host"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "overlayContentView"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "sceneIdentifierForLogging"));
    v10 = objc_msgSend(v3, "contentsHidden");
    v11 = CFSTR("NO");
    if (v10)
      v11 = CFSTR("YES");
    v12 = v11;
    v14 = 134349570;
    v15 = WeakRetained;
    v16 = 2112;
    v17 = v9;
    v18 = 2112;
    v19 = v12;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[%{public}p] [%@] Speed sign did change visibility (contentsHidden:%@)", (uint8_t *)&v14, 0x20u);

  }
  v13 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(v13, "reloadAnimated:", 1);

}

void sub_100A9D5A4(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "setAlpha:", *(float *)(a1 + 40));
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "host"));
  objc_msgSend(v2, "setCollisionConstraintsEnabled:forOverlay:", *(_BYTE *)(a1 + 44) == 0, *(_QWORD *)(a1 + 32));

}

void sub_100A9D8D0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CarPlayAccessoriesOverlay");
  v2 = (void *)qword_1014D3E48;
  qword_1014D3E48 = (uint64_t)v1;

}

void sub_100A9DD68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100A9DD8C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  _QWORD v8[4];
  id v9;

  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v7 = *(_QWORD *)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100A9DE5C;
  v8[3] = &unk_1011AD4F0;
  objc_copyWeak(&v9, (id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_onSuccess:setLookAroundViewEntryPointWithMapItem:orMuninMarker:andContinue:", a2, v7, v5, v8);

  objc_destroyWeak(&v9);
}

void sub_100A9DE48(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100A9DE5C(uint64_t a1, uint64_t a2)
{
  id *v3;
  id WeakRetained;
  _QWORD v5[4];
  id v6;

  v3 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100A9DF08;
  v5[3] = &unk_1011AD4F0;
  objc_copyWeak(&v6, v3);
  objc_msgSend(WeakRetained, "_onSuccess:waitForLookAroundViewToBecomeAdequatelyDrawnIfNeededAndContinue:", a2, v5);

  objc_destroyWeak(&v6);
}

void sub_100A9DEF4(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100A9DF08(uint64_t a1, uint64_t a2)
{
  id *v3;
  id WeakRetained;
  _QWORD v5[4];
  id v6;

  v3 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100A9DFB4;
  v5[3] = &unk_1011AD4F0;
  objc_copyWeak(&v6, v3);
  objc_msgSend(WeakRetained, "_onSuccess:synchronizeMapViewCenterToLookAroundViewCenterAndContinue:", a2, v5);

  objc_destroyWeak(&v6);
}

void sub_100A9DFA0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100A9DFB4(uint64_t a1, uint64_t a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_onSuccessProceedToEnterLookArounPIP:", a2);

}

void sub_100A9E330(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;
  char v12;
  uint8_t buf[4];
  uint64_t v14;
  __int16 v15;
  uint64_t v16;

  v3 = a2;
  if (v3)
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100A9E48C;
    v8[3] = &unk_1011BE4E8;
    v9 = *(id *)(a1 + 32);
    v10 = v3;
    v12 = *(_BYTE *)(a1 + 64);
    v11 = *(id *)(a1 + 40);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v8);

  }
  else
  {
    v4 = sub_100431B9C();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = *(_QWORD *)(a1 + 48);
      v7 = *(_QWORD *)(a1 + 56);
      *(_DWORD *)buf = 134218240;
      v14 = v6;
      v15 = 2048;
      v16 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Error: mapView returned a nil muninMarker at coordinate=(%g, %g)", buf, 0x16u);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

void sub_100A9E48C(uint64_t a1)
{
  void *v2;
  id v3;
  CLLocationDegrees v4;
  CLLocationDegrees v5;
  CLLocationCoordinate2D v6;
  id v7;
  NSObject *v8;
  void *v9;
  _QWORD v10[4];
  id v11;
  id v12;
  uint8_t buf[4];
  CLLocationDegrees latitude;
  __int16 v15;
  CLLocationDegrees longitude;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "camera"));
  v3 = objc_msgSend(v2, "copy");

  objc_msgSend(*(id *)(a1 + 40), "coordinate");
  v6 = CLLocationCoordinate2DMake(v4, v5);
  objc_msgSend(v3, "setCenterCoordinate:");
  v7 = sub_100431B9C();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218240;
    latitude = v6.latitude;
    v15 = 2048;
    longitude = v6.longitude;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Synchronizing mapView with muninMarker at coordinate=(%g, %g)", buf, 0x16u);
  }

  v9 = *(void **)(a1 + 32);
  if (*(_BYTE *)(a1 + 56))
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100A9E61C;
    v10[3] = &unk_1011B81A8;
    v12 = *(id *)(a1 + 48);
    v11 = *(id *)(a1 + 40);
    objc_msgSend(v9, "setCamera:animated:completionHandler:", v3, 1, v10);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setCamera:animated:", v3, 1);
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }

}

uint64_t sub_100A9E61C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 1, *(_QWORD *)(a1 + 32));
}

void sub_100A9EAEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_100A9EB18(uint64_t a1)
{
  void *v2;
  id WeakRetained;
  void *v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "lookAroundViewDidBecomeAdequatelyDrawnObserver"));
  objc_msgSend(v2, "removeObserver:", v4);

  v5 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(v5, "setLookAroundViewDidBecomeAdequatelyDrawnObserver:", 0);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100A9F060(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id WeakRetained;
  uint8_t v6[16];

  v2 = sub_100431B9C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Did exit LookAround PIP", v6, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_notifyObservers:", 5);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_100AA016C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_startMovingLookAroundViewToMapItem:orMuninMarker:heading:shouldZoom:", 0, a2, 0, *(double *)(a1 + 40));
}

id sub_100AA0794(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_startMovingLookAroundViewToMapItem:orMuninMarker:heading:shouldZoom:", 0, a2, 0, *(double *)(a1 + 40));
}

void sub_100AA086C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100AA0890(uint64_t a1, int a2, void *a3)
{
  id v5;
  void *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  id v11;
  double v12;
  double v13;
  id v14;
  double v15;
  double v16;
  id WeakRetained;
  id v18;

  v18 = a3;
  v5 = objc_loadWeakRetained((id *)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "mapView"));
  objc_msgSend(v5, "_handleMapViewPanStop:shouldMoveLookAroundView:", v6, 0);

  if (a2)
  {
    objc_msgSend(v18, "coordinate");
    v8 = v7;
    objc_msgSend(v18, "coordinate");
    v10 = v9;
    v11 = objc_msgSend(objc_alloc((Class)CLLocation), "initWithLatitude:longitude:", v8, v9);
    v12 = *(double *)(a1 + 48);
    v13 = *(double *)(a1 + 56);
    v14 = objc_msgSend(objc_alloc((Class)CLLocation), "initWithLatitude:longitude:", v12, v13);
    objc_msgSend(v11, "distanceFromLocation:", v14);
    if (v15 <= 10.0)
      v16 = *(double *)(*(_QWORD *)(a1 + 32) + 216);
    else
      v16 = GEOBearingFromCoordinateToCoordinate(v8, v10, v12, v13);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(WeakRetained, "_startMovingLookAroundViewToMapItem:orMuninMarker:heading:shouldZoom:", 0, v18, 1, v16);

  }
}

void sub_100AA0AA8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100AA0ACC(uint64_t a1, int a2, void *a3)
{
  id v5;
  void *v6;
  id WeakRetained;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  id v16;
  id v17;

  v17 = a3;
  v5 = objc_loadWeakRetained((id *)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "mapView"));
  objc_msgSend(v5, "_handleMapViewPanStop:shouldMoveLookAroundView:", v6, 0);

  if (a2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(WeakRetained, "_notifyObservers:", 23);

    objc_msgSend(v17, "coordinate");
    v9 = v8;
    objc_msgSend(v17, "coordinate");
    v11 = v10;
    objc_msgSend(*(id *)(a1 + 32), "_coordinate");
    v13 = v12;
    objc_msgSend(*(id *)(a1 + 32), "_coordinate");
    v15 = GEOBearingFromCoordinateToCoordinate(v9, v11, v13, v14);
    v16 = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(v16, "_startMovingLookAroundViewToMapItem:orMuninMarker:heading:shouldZoom:", *(_QWORD *)(a1 + 32), v17, 1, v15);

  }
}

id sub_100AA0CCC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setStateTo:", 2);
}

void sub_100AA0EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100AA0EDC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  id v12;
  id v13;

  v5 = a2;
  v6 = a3;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100AA0FB4;
  v9[3] = &unk_1011AFEC0;
  objc_copyWeak(&v13, (id *)(a1 + 40));
  v10 = v6;
  v11 = v5;
  v12 = *(id *)(a1 + 32);
  v7 = v5;
  v8 = v6;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v9);

  objc_destroyWeak(&v13);
}

void sub_100AA0FB4(uint64_t a1)
{
  id WeakRetained;
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  void *v12;
  unsigned int v13;
  const __CFString *v14;
  void *v15;
  void *v16;
  _BYTE v17[22];
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (!*(_QWORD *)(a1 + 32))
  {
    if (objc_msgSend(*(id *)(a1 + 40), "count"))
    {
      v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "firstObject"));
      -[NSObject closeUpViewCoordinate](v4, "closeUpViewCoordinate");
      v7 = v6;
      v9 = v8;
      v10 = sub_100431B9C();
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject name](v4, "name"));
        v13 = -[NSObject _hasLookAroundStorefront](v4, "_hasLookAroundStorefront");
        v14 = CFSTR("NO");
        *(_DWORD *)v17 = 138413058;
        *(_WORD *)&v17[12] = 2112;
        *(_QWORD *)&v17[4] = v12;
        if (v13)
          v14 = CFSTR("YES");
        *(_QWORD *)&v17[14] = v14;
        v18 = 2048;
        v19 = v7;
        v20 = 2048;
        v21 = v9;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Refined label marker for %@, hasLookAroundStorefront=%@, coordinate={%g, %g}", v17, 0x2Au);

      }
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "labelMarkerToRefine"));
      v16 = *(void **)(a1 + 48);

      if (v15 == v16)
        objc_msgSend(WeakRetained, "_moveLookAroundViewToMapItem:", v4);
      objc_msgSend(WeakRetained, "setLabelMarkerToRefine:", 0, *(_OWORD *)v17);
      objc_msgSend(WeakRetained, "setRefineTicket:", 0);
      goto LABEL_12;
    }
    if (!*(_QWORD *)(a1 + 32))
      goto LABEL_13;
  }
  v3 = sub_100431B9C();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v5 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)v17 = 138412290;
    *(_QWORD *)&v17[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Error: Identifier refinement ticket failed: %@", v17, 0xCu);
  }
LABEL_12:

LABEL_13:
}

void sub_100AA1868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  id *v29;

  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_100AA18BC(uint64_t a1, char a2)
{
  _QWORD block[4];
  id v5;
  id v6;
  char v7;
  char v8;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 8));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = a2;
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 8));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100AA1990;
  block[3] = &unk_1011E1568;
  v5 = *(id *)(a1 + 40);
  v7 = a2;
  objc_copyWeak(&v6, (id *)(a1 + 64));
  v8 = *(_BYTE *)(a1 + 72);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  objc_destroyWeak(&v6);

}

void sub_100AA1990(uint64_t a1)
{
  id WeakRetained;

  objc_msgSend(*(id *)(a1 + 32), "setUserInteractionEnabled:", *(unsigned __int8 *)(a1 + 48));
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_willEndMovingLookAroundView:shouldZoomIfFinished:", *(unsigned __int8 *)(a1 + 48), *(unsigned __int8 *)(a1 + 49));

}

void sub_100AA28BC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_leaveCompletionWaitDispatchGroupWithReason:", *(_QWORD *)(a1 + 32));

}

id sub_100AA2AFC()
{
  if (qword_1014D3E60 != -1)
    dispatch_once(&qword_1014D3E60, &stru_1011E15C8);
  return (id)qword_1014D3E58;
}

id sub_100AA2B3C(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 32);
  *(_QWORD *)(v2 + 32) = 0;

  return _objc_msgSend(*(id *)(a1 + 32), "_childAnimationsDidComplete");
}

void sub_100AA30C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AA30E4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100AA30F4(uint64_t a1)
{

}

void sub_100AA30FC(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v2 = *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v10;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v2);
        (*(void (**)(_QWORD))(*(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v6) + 16))(*(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v6));
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v4);
  }

  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = 0;

}

id sub_100AA3BD4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "animate");
}

id sub_100AA3BDC(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "complete:", a2);
}

id sub_100AA3E50(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "animate");
}

id sub_100AA3E58(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "complete:", a2);
}

id sub_100AA40F8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "animate");
}

id sub_100AA4100(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "complete:", a2);
}

id sub_100AA42C4(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "prepare");
  objc_msgSend(*(id *)(a1 + 32), "animate");
  return _objc_msgSend(*(id *)(a1 + 32), "complete:", 1);
}

id sub_100AA4738(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "animate");
}

id sub_100AA4740(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "complete:", a2);
}

id sub_100AA474C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "prepare");
  objc_msgSend(*(id *)(a1 + 32), "animate");
  return _objc_msgSend(*(id *)(a1 + 32), "complete:", 1);
}

void sub_100AA479C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "GroupAnimation");
  v2 = (void *)qword_1014D3E58;
  qword_1014D3E58 = (uint64_t)v1;

}

void sub_100AA4AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100AA4B24(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  char *v12;
  id WeakRetained;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t Log;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  char *v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  NSObject *v30;
  char *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  char *v37;
  uint64_t v38;
  int v39;
  char *v40;
  __int16 v41;
  _QWORD v42[3];

  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v14 = WeakRetained;
  if (WeakRetained)
  {
    v15 = *(id *)(a1 + 40);
    if (v15 == objc_msgSend(WeakRetained, "currentGuestRequestNumber"))
    {
      if (v12)
      {
        objc_msgSend(v14, "setGuestRequestError:", v12);
        v16 = MapsSuggestionsLoggingSubsystem;
        Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RestaurantReservationRequester");
        v18 = objc_claimAutoreleasedReturnValue(Log);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          v39 = 138412290;
          v40 = v12;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Error: %@", (uint8_t *)&v39, 0xCu);
        }

        v19 = GEOFindOrCreateLog(v16, "RestaurantReservationRequester");
        v20 = objc_claimAutoreleasedReturnValue(v19);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        {
          v21 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "uniqueName"));
          v39 = 138412546;
          v40 = v21;
          v41 = 2080;
          v42[0] = "requestGuest";
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s FAIL", (uint8_t *)&v39, 0x16u);

        }
        v22 = GEOFindOrCreateLog(v16, "RestaurantReservationRequester");
        v23 = objc_claimAutoreleasedReturnValue(v22);
        if (!os_signpost_enabled(v23))
          goto LABEL_25;
        LOWORD(v39) = 0;
      }
      else
      {
        objc_msgSend(v14, "setGuestResponse:", v9);
        v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "userActivity"));
        objc_msgSend(v14, "setGuestUserActivity:", v33);

        v34 = MapsSuggestionsLoggingSubsystem;
        v35 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RestaurantReservationRequester");
        v36 = objc_claimAutoreleasedReturnValue(v35);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
        {
          v37 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "uniqueName"));
          v39 = 138412546;
          v40 = v37;
          v41 = 2080;
          v42[0] = "requestGuest";
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s END", (uint8_t *)&v39, 0x16u);

        }
        v38 = GEOFindOrCreateLog(v34, "RestaurantReservationRequester");
        v23 = objc_claimAutoreleasedReturnValue(v38);
        if (!os_signpost_enabled(v23))
          goto LABEL_25;
        LOWORD(v39) = 0;
      }
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v23, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "requestGuest", "", (uint8_t *)&v39, 2u);
LABEL_25:

      objc_msgSend(v14, "setGuestRequestPending:", 0);
      goto LABEL_26;
    }
    v26 = MapsSuggestionsLoggingSubsystem;
    v27 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RestaurantReservationRequester");
    v28 = objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v39) = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "guestRequestNumber is not the same anymore", (uint8_t *)&v39, 2u);
    }

    v29 = GEOFindOrCreateLog(v26, "RestaurantReservationRequester");
    v30 = objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    {
      v31 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "uniqueName"));
      v39 = 138412546;
      v40 = v31;
      v41 = 2080;
      v42[0] = "requestGuest";
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s FAIL", (uint8_t *)&v39, 0x16u);

    }
    v32 = GEOFindOrCreateLog(v26, "RestaurantReservationRequester");
    v25 = objc_claimAutoreleasedReturnValue(v32);
    if (os_signpost_enabled(v25))
    {
      LOWORD(v39) = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v25, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "requestGuest", "", (uint8_t *)&v39, 2u);
    }
  }
  else
  {
    v24 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RestaurantReservationRequester");
    v25 = (id)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      v39 = 136446722;
      v40 = "RestaurantReservationRequester.m";
      v41 = 1026;
      LODWORD(v42[0]) = 97;
      WORD2(v42[0]) = 2082;
      *(_QWORD *)((char *)v42 + 6) = "-[RestaurantReservationRequester requestGuest]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", (uint8_t *)&v39, 0x1Cu);
    }

  }
LABEL_26:

}

void sub_100AA5434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100AA546C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  char *v12;
  id WeakRetained;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t Log;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  char *v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  NSObject *v30;
  char *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  char *v37;
  uint64_t v38;
  int v39;
  char *v40;
  __int16 v41;
  _QWORD v42[3];

  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v14 = WeakRetained;
  if (WeakRetained)
  {
    v15 = *(id *)(a1 + 40);
    if (v15 == objc_msgSend(WeakRetained, "currentReservationDefaultsNumber"))
    {
      if (v12)
      {
        objc_msgSend(v14, "setReservationDefaultsRequestError:", v12);
        v16 = MapsSuggestionsLoggingSubsystem;
        Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RestaurantReservationRequester");
        v18 = objc_claimAutoreleasedReturnValue(Log);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          v39 = 138412290;
          v40 = v12;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Error: %@", (uint8_t *)&v39, 0xCu);
        }

        v19 = GEOFindOrCreateLog(v16, "RestaurantReservationRequester");
        v20 = objc_claimAutoreleasedReturnValue(v19);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        {
          v21 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "uniqueName"));
          v39 = 138412546;
          v40 = v21;
          v41 = 2080;
          v42[0] = "requestReservationDefaults";
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s FAIL", (uint8_t *)&v39, 0x16u);

        }
        v22 = GEOFindOrCreateLog(v16, "RestaurantReservationRequester");
        v23 = objc_claimAutoreleasedReturnValue(v22);
        if (!os_signpost_enabled(v23))
          goto LABEL_25;
        LOWORD(v39) = 0;
      }
      else
      {
        objc_msgSend(v14, "setReservationDefaultsResponse:", v9);
        v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "userActivity"));
        objc_msgSend(v14, "setReservationDefaultsUserActivity:", v33);

        v34 = MapsSuggestionsLoggingSubsystem;
        v35 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RestaurantReservationRequester");
        v36 = objc_claimAutoreleasedReturnValue(v35);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
        {
          v37 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "uniqueName"));
          v39 = 138412546;
          v40 = v37;
          v41 = 2080;
          v42[0] = "requestReservationDefaults";
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s END", (uint8_t *)&v39, 0x16u);

        }
        v38 = GEOFindOrCreateLog(v34, "RestaurantReservationRequester");
        v23 = objc_claimAutoreleasedReturnValue(v38);
        if (!os_signpost_enabled(v23))
          goto LABEL_25;
        LOWORD(v39) = 0;
      }
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v23, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "requestReservationDefaults", "", (uint8_t *)&v39, 2u);
LABEL_25:

      objc_msgSend(v14, "setReservationDefaultsRequestPending:", 0);
      goto LABEL_26;
    }
    v26 = MapsSuggestionsLoggingSubsystem;
    v27 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RestaurantReservationRequester");
    v28 = objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v39) = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "reservationDefaultsNumber is not the same anymore", (uint8_t *)&v39, 2u);
    }

    v29 = GEOFindOrCreateLog(v26, "RestaurantReservationRequester");
    v30 = objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    {
      v31 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "uniqueName"));
      v39 = 138412546;
      v40 = v31;
      v41 = 2080;
      v42[0] = "requestReservationDefaults";
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s FAIL", (uint8_t *)&v39, 0x16u);

    }
    v32 = GEOFindOrCreateLog(v26, "RestaurantReservationRequester");
    v25 = objc_claimAutoreleasedReturnValue(v32);
    if (os_signpost_enabled(v25))
    {
      LOWORD(v39) = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v25, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "requestReservationDefaults", "", (uint8_t *)&v39, 2u);
    }
  }
  else
  {
    v24 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RestaurantReservationRequester");
    v25 = (id)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      v39 = 136446722;
      v40 = "RestaurantReservationRequester.m";
      v41 = 1026;
      LODWORD(v42[0]) = 169;
      WORD2(v42[0]) = 2082;
      *(_QWORD *)((char *)v42 + 6) = "-[RestaurantReservationRequester requestReservationDefaults]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", (uint8_t *)&v39, 0x1Cu);
    }

  }
LABEL_26:

}

void sub_100AA5DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100AA5E2C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  char *v12;
  id WeakRetained;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t Log;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  char *v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  NSObject *v30;
  char *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  char *v37;
  uint64_t v38;
  int v39;
  char *v40;
  __int16 v41;
  _QWORD v42[3];

  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v14 = WeakRetained;
  if (WeakRetained)
  {
    v15 = *(id *)(a1 + 40);
    if (v15 == objc_msgSend(WeakRetained, "currentUserBookingNumber"))
    {
      if (v12)
      {
        objc_msgSend(v14, "setUserCurrentBookingRequestError:", v12);
        v16 = MapsSuggestionsLoggingSubsystem;
        Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RestaurantReservationRequester");
        v18 = objc_claimAutoreleasedReturnValue(Log);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          v39 = 138412290;
          v40 = v12;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Error: %@", (uint8_t *)&v39, 0xCu);
        }

        v19 = GEOFindOrCreateLog(v16, "RestaurantReservationRequester");
        v20 = objc_claimAutoreleasedReturnValue(v19);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        {
          v21 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "uniqueName"));
          v39 = 138412546;
          v40 = v21;
          v41 = 2080;
          v42[0] = "requestUserCurrentBooking";
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s FAIL", (uint8_t *)&v39, 0x16u);

        }
        v22 = GEOFindOrCreateLog(v16, "RestaurantReservationRequester");
        v23 = objc_claimAutoreleasedReturnValue(v22);
        if (!os_signpost_enabled(v23))
          goto LABEL_25;
        LOWORD(v39) = 0;
      }
      else
      {
        objc_msgSend(v14, "setUserCurrentBookingResponse:", v9);
        v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "userActivity"));
        objc_msgSend(v14, "setUserCurrentBookingUserActivity:", v33);

        v34 = MapsSuggestionsLoggingSubsystem;
        v35 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RestaurantReservationRequester");
        v36 = objc_claimAutoreleasedReturnValue(v35);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
        {
          v37 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "uniqueName"));
          v39 = 138412546;
          v40 = v37;
          v41 = 2080;
          v42[0] = "requestUserCurrentBooking";
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s END", (uint8_t *)&v39, 0x16u);

        }
        v38 = GEOFindOrCreateLog(v34, "RestaurantReservationRequester");
        v23 = objc_claimAutoreleasedReturnValue(v38);
        if (!os_signpost_enabled(v23))
          goto LABEL_25;
        LOWORD(v39) = 0;
      }
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v23, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "requestUserCurrentBooking", "", (uint8_t *)&v39, 2u);
LABEL_25:

      objc_msgSend(v14, "setUserCurrentBookingRequestPending:", 0);
      goto LABEL_26;
    }
    v26 = MapsSuggestionsLoggingSubsystem;
    v27 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RestaurantReservationRequester");
    v28 = objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v39) = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "bookingRequestNumber is not the same anymore", (uint8_t *)&v39, 2u);
    }

    v29 = GEOFindOrCreateLog(v26, "RestaurantReservationRequester");
    v30 = objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    {
      v31 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "uniqueName"));
      v39 = 138412546;
      v40 = v31;
      v41 = 2080;
      v42[0] = "requestUserCurrentBooking";
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s FAIL", (uint8_t *)&v39, 0x16u);

    }
    v32 = GEOFindOrCreateLog(v26, "RestaurantReservationRequester");
    v25 = objc_claimAutoreleasedReturnValue(v32);
    if (os_signpost_enabled(v25))
    {
      LOWORD(v39) = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v25, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "requestUserCurrentBooking", "", (uint8_t *)&v39, 2u);
    }
  }
  else
  {
    v24 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RestaurantReservationRequester");
    v25 = (id)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      v39 = 136446722;
      v40 = "RestaurantReservationRequester.m";
      v41 = 1026;
      LODWORD(v42[0]) = 257;
      WORD2(v42[0]) = 2082;
      *(_QWORD *)((char *)v42 + 6) = "-[RestaurantReservationRequester requestUserCurrentBookingWithRelevanceWindow:reser"
                                     "vationIdentifier:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", (uint8_t *)&v39, 0x1Cu);
    }

  }
LABEL_26:

}

void sub_100AA68B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100AA68F0(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  char *v12;
  id WeakRetained;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t Log;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  char *v21;
  uint64_t v22;
  NSObject *v23;
  const char *v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  NSObject *v31;
  char *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  char *v38;
  uint64_t v39;
  int v40;
  char *v41;
  __int16 v42;
  _QWORD v43[3];

  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (v9 && (objc_msgSend(*(id *)(a1 + 32), "_maps_responseIsValid:", v9) & 1) == 0)
    {
      v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_maps_sanitizedResponseForResponse:", v9));

      v9 = (id)v14;
    }
    v15 = *(id *)(a1 + 48);
    if (v15 == objc_msgSend(WeakRetained, "currentAvailableBookingNumber"))
    {
      if (v12)
      {
        objc_msgSend(WeakRetained, "setAvailableBookingsRequestError:", v12);
        v16 = MapsSuggestionsLoggingSubsystem;
        Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RestaurantReservationRequester");
        v18 = objc_claimAutoreleasedReturnValue(Log);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          v40 = 138412290;
          v41 = v12;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Error: %@", (uint8_t *)&v40, 0xCu);
        }

        v19 = GEOFindOrCreateLog(v16, "RestaurantReservationRequester");
        v20 = objc_claimAutoreleasedReturnValue(v19);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        {
          v21 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "uniqueName"));
          v40 = 138412546;
          v41 = v21;
          v42 = 2080;
          v43[0] = "requestUserCurrentBooking";
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s FAIL", (uint8_t *)&v40, 0x16u);

        }
        v22 = GEOFindOrCreateLog(v16, "RestaurantReservationRequester");
        v23 = objc_claimAutoreleasedReturnValue(v22);
        if (!os_signpost_enabled(v23))
          goto LABEL_28;
        LOWORD(v40) = 0;
        v24 = "requestUserCurrentBooking";
      }
      else
      {
        objc_msgSend(WeakRetained, "setAvailableBookingsResponse:", v9);
        v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "userActivity"));
        objc_msgSend(WeakRetained, "setAvailableBookingsUserActivity:", v34);

        v35 = MapsSuggestionsLoggingSubsystem;
        v36 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RestaurantReservationRequester");
        v37 = objc_claimAutoreleasedReturnValue(v36);
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
        {
          v38 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "uniqueName"));
          v40 = 138412546;
          v41 = v38;
          v42 = 2080;
          v43[0] = "requestAvailableBookings";
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s END", (uint8_t *)&v40, 0x16u);

        }
        v39 = GEOFindOrCreateLog(v35, "RestaurantReservationRequester");
        v23 = objc_claimAutoreleasedReturnValue(v39);
        if (!os_signpost_enabled(v23))
          goto LABEL_28;
        LOWORD(v40) = 0;
        v24 = "requestAvailableBookings";
      }
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v23, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, v24, "", (uint8_t *)&v40, 2u);
LABEL_28:

      objc_msgSend(WeakRetained, "setAvailableBookingsRequestPending:", 0);
      goto LABEL_29;
    }
    v27 = MapsSuggestionsLoggingSubsystem;
    v28 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RestaurantReservationRequester");
    v29 = objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v40) = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "availableBookingNumber is not the same anymore", (uint8_t *)&v40, 2u);
    }

    v30 = GEOFindOrCreateLog(v27, "RestaurantReservationRequester");
    v31 = objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
    {
      v32 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "uniqueName"));
      v40 = 138412546;
      v41 = v32;
      v42 = 2080;
      v43[0] = "requestAvailableBookings";
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s FAIL", (uint8_t *)&v40, 0x16u);

    }
    v33 = GEOFindOrCreateLog(v27, "RestaurantReservationRequester");
    v26 = objc_claimAutoreleasedReturnValue(v33);
    if (os_signpost_enabled(v26))
    {
      LOWORD(v40) = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v26, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "requestAvailableBookings", "", (uint8_t *)&v40, 2u);
    }
  }
  else
  {
    v25 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RestaurantReservationRequester");
    v26 = (id)objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      v40 = 136446722;
      v41 = "RestaurantReservationRequester.m";
      v42 = 1026;
      LODWORD(v43[0]) = 344;
      WORD2(v43[0]) = 2082;
      *(_QWORD *)((char *)v43 + 6) = "-[RestaurantReservationRequester requestAvailableBookingsForPreferredTime:partySize:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", (uint8_t *)&v40, 0x1Cu);
    }

  }
LABEL_29:

}

void sub_100AA73C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100AA73FC(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  char *v12;
  id WeakRetained;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t Log;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  char *v21;
  uint64_t v22;
  NSObject *v23;
  const char *v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  NSObject *v31;
  char *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  char *v38;
  uint64_t v39;
  int v40;
  char *v41;
  __int16 v42;
  _QWORD v43[3];

  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v14 = WeakRetained;
  if (WeakRetained)
  {
    v15 = *(id *)(a1 + 40);
    if (v15 == objc_msgSend(WeakRetained, "currentBookReservationNumber"))
    {
      if (v12)
      {
        objc_msgSend(v14, "setBookReservationRequestError:", v12);
        v16 = MapsSuggestionsLoggingSubsystem;
        Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RestaurantReservationRequester");
        v18 = objc_claimAutoreleasedReturnValue(Log);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          v40 = 138412290;
          v41 = v12;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Error: %@", (uint8_t *)&v40, 0xCu);
        }

        v19 = GEOFindOrCreateLog(v16, "RestaurantReservationRequester");
        v20 = objc_claimAutoreleasedReturnValue(v19);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        {
          v21 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "uniqueName"));
          v40 = 138412546;
          v41 = v21;
          v42 = 2080;
          v43[0] = "requestUserCurrentBooking";
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s FAIL", (uint8_t *)&v40, 0x16u);

        }
        v22 = GEOFindOrCreateLog(v16, "RestaurantReservationRequester");
        v23 = objc_claimAutoreleasedReturnValue(v22);
        if (!os_signpost_enabled(v23))
          goto LABEL_25;
        LOWORD(v40) = 0;
        v24 = "requestUserCurrentBooking";
      }
      else
      {
        objc_msgSend(v14, "setBookReservationResponse:", v9);
        v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "userActivity"));
        objc_msgSend(v14, "setBookReservationUserActivity:", v34);

        v35 = MapsSuggestionsLoggingSubsystem;
        v36 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RestaurantReservationRequester");
        v37 = objc_claimAutoreleasedReturnValue(v36);
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
        {
          v38 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "uniqueName"));
          v40 = 138412546;
          v41 = v38;
          v42 = 2080;
          v43[0] = "bookRestaurantReservation";
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s END", (uint8_t *)&v40, 0x16u);

        }
        v39 = GEOFindOrCreateLog(v35, "RestaurantReservationRequester");
        v23 = objc_claimAutoreleasedReturnValue(v39);
        if (!os_signpost_enabled(v23))
          goto LABEL_25;
        LOWORD(v40) = 0;
        v24 = "bookRestaurantReservation";
      }
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v23, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, v24, "", (uint8_t *)&v40, 2u);
LABEL_25:

      objc_msgSend(v14, "setBookReservationRequestPending:", 0);
      goto LABEL_26;
    }
    v27 = MapsSuggestionsLoggingSubsystem;
    v28 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RestaurantReservationRequester");
    v29 = objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v40) = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "bookReservationNumber is not the same anymore", (uint8_t *)&v40, 2u);
    }

    v30 = GEOFindOrCreateLog(v27, "RestaurantReservationRequester");
    v31 = objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
    {
      v32 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "uniqueName"));
      v40 = 138412546;
      v41 = v32;
      v42 = 2080;
      v43[0] = "bookRestaurantReservation";
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s FAIL", (uint8_t *)&v40, 0x16u);

    }
    v33 = GEOFindOrCreateLog(v27, "RestaurantReservationRequester");
    v26 = objc_claimAutoreleasedReturnValue(v33);
    if (os_signpost_enabled(v26))
    {
      LOWORD(v40) = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v26, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "bookRestaurantReservation", "", (uint8_t *)&v40, 2u);
    }
  }
  else
  {
    v25 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RestaurantReservationRequester");
    v26 = (id)objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      v40 = 136446722;
      v41 = "RestaurantReservationRequester.m";
      v42 = 1026;
      LODWORD(v43[0]) = 434;
      WORD2(v43[0]) = 2082;
      *(_QWORD *)((char *)v43 + 6) = "-[RestaurantReservationRequester bookRestaurantReservation:guest:selectedOffer:spec"
                                     "ialRequest:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", (uint8_t *)&v40, 0x1Cu);
    }

  }
LABEL_26:

}

void sub_100AA8D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  id *v24;

  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100AA8D4C(uint64_t a1, void *a2)
{
  _QWORD *WeakRetained;
  _QWORD *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;

  v12 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "view"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "window"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "windowScene"));

    if (v7)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "mapView"));

      if (v8)
      {
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "object"));
        if (v9 == v7)
        {
          v10 = objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
          v11 = (void *)v4[35];
          v4[35] = v10;

        }
      }
    }

  }
}

id sub_100AA9378(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateDebugLayoutGuidesView");
}

BOOL sub_100AA9754(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 32) == a2;
}

id sub_100AA982C(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v6;
  void *v7;
  void *v8;
  id v9;
  unsigned __int8 v10;
  id v11;
  NSObject *v12;
  id v13;
  void *v14;
  objc_class *v15;
  NSString *v16;
  void *v17;
  void *v18;
  void *v19;
  __CFString *v20;
  id v21;
  id v22;
  void *v23;
  objc_class *v24;
  NSString *v25;
  void *v26;
  void *v27;
  void *v28;
  __CFString *v29;
  __CFString *v30;
  id v31;
  void *v32;
  objc_class *v33;
  NSString *v34;
  void *v35;
  void *v36;
  void *v37;
  __CFString *v38;
  const char *v39;
  id v40;
  void *v41;
  objc_class *v42;
  NSString *v43;
  void *v44;
  void *v45;
  void *v46;
  uint8_t buf[4];
  __CFString *v49;
  __int16 v50;
  __CFString *v51;

  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "lastObject"));
  v8 = *(void **)(a1 + 32);

  if (v7 != v8)
  {
    *a4 = *(_BYTE *)(a1 + 48);
    v9 = objc_msgSend(v6, "mutableCopy");
    if ((objc_opt_respondsToSelector(*(_QWORD *)(a1 + 32), "supportsDuplicationInStack") & 1) != 0)
      v10 = objc_msgSend(*(id *)(a1 + 32), "supportsDuplicationInStack");
    else
      v10 = 1;
    if (objc_msgSend(v9, "containsObject:", *(_QWORD *)(a1 + 32)) && (v10 & 1) == 0)
    {
      objc_msgSend(v9, "removeObject:", *(_QWORD *)(a1 + 32));
      v11 = sub_10043196C();
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        v13 = *(id *)(a1 + 40);
        v14 = v13;
        if (!v13)
        {
          v20 = CFSTR("<nil>");
LABEL_35:

          v30 = v20;
          v40 = *(id *)(a1 + 32);
          v41 = v40;
          if (!v40)
          {
            v38 = CFSTR("<nil>");
            goto LABEL_43;
          }
          v42 = (objc_class *)objc_opt_class(v40);
          v43 = NSStringFromClass(v42);
          v44 = (void *)objc_claimAutoreleasedReturnValue(v43);
          if ((objc_opt_respondsToSelector(v41, "accessibilityIdentifier") & 1) != 0)
          {
            v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "performSelector:", "accessibilityIdentifier"));
            v46 = v45;
            if (v45 && !objc_msgSend(v45, "isEqualToString:", v44))
            {
              v38 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v44, v41, v46));

              goto LABEL_41;
            }

          }
          v38 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v44, v41));
LABEL_41:

LABEL_43:
          *(_DWORD *)buf = 138543618;
          v49 = v30;
          v50 = 2112;
          v51 = v38;
          v39 = "[%{public}@] ~> %@";
          goto LABEL_44;
        }
        v15 = (objc_class *)objc_opt_class(v13);
        v16 = NSStringFromClass(v15);
        v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
        if ((objc_opt_respondsToSelector(v14, "accessibilityIdentifier") & 1) != 0)
        {
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "performSelector:", "accessibilityIdentifier"));
          v19 = v18;
          if (v18 && !objc_msgSend(v18, "isEqualToString:", v17))
          {
            v20 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v17, v14, v19));

            goto LABEL_15;
          }

        }
        v20 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v17, v14));
LABEL_15:

        goto LABEL_35;
      }
LABEL_45:

      objc_msgSend(v9, "addObject:", *(_QWORD *)(a1 + 32));
      goto LABEL_46;
    }
    v21 = sub_10043196C();
    v12 = objc_claimAutoreleasedReturnValue(v21);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      goto LABEL_45;
    v22 = *(id *)(a1 + 40);
    v23 = v22;
    if (!v22)
    {
      v29 = CFSTR("<nil>");
LABEL_25:

      v30 = v29;
      v31 = *(id *)(a1 + 32);
      v32 = v31;
      if (!v31)
      {
        v38 = CFSTR("<nil>");
        goto LABEL_33;
      }
      v33 = (objc_class *)objc_opt_class(v31);
      v34 = NSStringFromClass(v33);
      v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
      if ((objc_opt_respondsToSelector(v32, "accessibilityIdentifier") & 1) != 0)
      {
        v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "performSelector:", "accessibilityIdentifier"));
        v37 = v36;
        if (v36 && !objc_msgSend(v36, "isEqualToString:", v35))
        {
          v38 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v35, v32, v37));

          goto LABEL_31;
        }

      }
      v38 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v35, v32));
LABEL_31:

LABEL_33:
      *(_DWORD *)buf = 138543618;
      v49 = v30;
      v50 = 2112;
      v51 = v38;
      v39 = "[%{public}@] + %@";
LABEL_44:
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, v39, buf, 0x16u);

      goto LABEL_45;
    }
    v24 = (objc_class *)objc_opt_class(v22);
    v25 = NSStringFromClass(v24);
    v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
    if ((objc_opt_respondsToSelector(v23, "accessibilityIdentifier") & 1) != 0)
    {
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "performSelector:", "accessibilityIdentifier"));
      v28 = v27;
      if (v27 && !objc_msgSend(v27, "isEqualToString:", v26))
      {
        v29 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v26, v23, v28));

        goto LABEL_23;
      }

    }
    v29 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v26, v23));
LABEL_23:

    goto LABEL_25;
  }
  v9 = v6;
LABEL_46:

  return v9;
}

uint64_t sub_100AA9D10(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

id sub_100AA9DEC(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  id v12;
  void *v13;
  objc_class *v14;
  NSString *v15;
  void *v16;
  void *v17;
  void *v18;
  __CFString *v19;
  __CFString *v20;
  id v21;
  void *v22;
  objc_class *v23;
  NSString *v24;
  void *v25;
  void *v26;
  void *v27;
  __CFString *v28;
  void *v29;
  uint8_t buf[4];
  __CFString *v32;
  __int16 v33;
  __CFString *v34;

  v6 = a3;
  v7 = objc_msgSend(v6, "indexOfObject:", *(_QWORD *)(a1 + 32));
  if (v7 != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    v9 = v7;
    v10 = sub_10043196C();
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
LABEL_21:

      *a4 = *(_BYTE *)(a1 + 48);
      v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_maps_subarrayToIndex:", v9));
      goto LABEL_22;
    }
    v12 = *(id *)(a1 + 40);
    v13 = v12;
    if (!v12)
    {
      v19 = CFSTR("<nil>");
LABEL_12:

      v20 = v19;
      v21 = *(id *)(a1 + 32);
      v22 = v21;
      if (!v21)
      {
        v28 = CFSTR("<nil>");
        goto LABEL_20;
      }
      v23 = (objc_class *)objc_opt_class(v21);
      v24 = NSStringFromClass(v23);
      v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
      if ((objc_opt_respondsToSelector(v22, "accessibilityIdentifier") & 1) != 0)
      {
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "performSelector:", "accessibilityIdentifier"));
        v27 = v26;
        if (v26 && !objc_msgSend(v26, "isEqualToString:", v25))
        {
          v28 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v25, v22, v27));

          goto LABEL_18;
        }

      }
      v28 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v25, v22));
LABEL_18:

LABEL_20:
      *(_DWORD *)buf = 138543618;
      v32 = v20;
      v33 = 2112;
      v34 = v28;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "[%{public}@] %@ <=", buf, 0x16u);

      goto LABEL_21;
    }
    v14 = (objc_class *)objc_opt_class(v12);
    v15 = NSStringFromClass(v14);
    v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    if ((objc_opt_respondsToSelector(v13, "accessibilityIdentifier") & 1) != 0)
    {
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "performSelector:", "accessibilityIdentifier"));
      v18 = v17;
      if (v17 && !objc_msgSend(v17, "isEqualToString:", v16))
      {
        v19 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v16, v13, v18));

        goto LABEL_10;
      }

    }
    v19 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v16, v13));
LABEL_10:

    goto LABEL_12;
  }
  v8 = v6;
LABEL_22:
  v29 = v8;

  return v29;
}

uint64_t sub_100AAA0A4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

id sub_100AAA1F4(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  void *v10;
  objc_class *v11;
  NSString *v12;
  void *v13;
  void *v14;
  void *v15;
  __CFString *v16;
  id v17;
  __CFString *v18;
  id v19;
  void *v20;
  objc_class *v21;
  NSString *v22;
  void *v23;
  void *v24;
  void *v25;
  __CFString *v26;
  _QWORD v28[4];
  id v29;
  uint8_t buf[4];
  __CFString *v31;
  __int16 v32;
  __CFString *v33;

  v6 = a3;
  if (objc_msgSend(v6, "count") && (objc_msgSend(v6, "containsObject:", *(_QWORD *)(a1 + 32)) & 1) != 0)
  {
    v7 = sub_10043196C();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
LABEL_22:

      *a4 = *(_BYTE *)(a1 + 48);
      v17 = objc_msgSend(v6, "mutableCopy");
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472;
      v28[2] = sub_100AAA4FC;
      v28[3] = &unk_1011E16F8;
      v29 = *(id *)(a1 + 32);
      objc_msgSend(v17, "removeObjectAtIndex:", objc_msgSend(v17, "indexOfObjectWithOptions:passingTest:", 2, v28));

      goto LABEL_23;
    }
    v9 = *(id *)(a1 + 40);
    v10 = v9;
    if (!v9)
    {
      v16 = CFSTR("<nil>");
LABEL_13:

      v18 = v16;
      v19 = *(id *)(a1 + 32);
      v20 = v19;
      if (!v19)
      {
        v26 = CFSTR("<nil>");
        goto LABEL_21;
      }
      v21 = (objc_class *)objc_opt_class(v19);
      v22 = NSStringFromClass(v21);
      v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
      if ((objc_opt_respondsToSelector(v20, "accessibilityIdentifier") & 1) != 0)
      {
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "performSelector:", "accessibilityIdentifier"));
        v25 = v24;
        if (v24 && !objc_msgSend(v24, "isEqualToString:", v23))
        {
          v26 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v23, v20, v25));

          goto LABEL_19;
        }

      }
      v26 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v23, v20));
LABEL_19:

LABEL_21:
      *(_DWORD *)buf = 138543618;
      v31 = v18;
      v32 = 2112;
      v33 = v26;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[%{public}@] - %@", buf, 0x16u);

      goto LABEL_22;
    }
    v11 = (objc_class *)objc_opt_class(v9);
    v12 = NSStringFromClass(v11);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    if ((objc_opt_respondsToSelector(v10, "accessibilityIdentifier") & 1) != 0)
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "performSelector:", "accessibilityIdentifier"));
      v15 = v14;
      if (v14 && !objc_msgSend(v14, "isEqualToString:", v13))
      {
        v16 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v13, v10, v15));

        goto LABEL_10;
      }

    }
    v16 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v13, v10));
LABEL_10:

    goto LABEL_13;
  }
  v17 = v6;
LABEL_23:

  return v17;
}

BOOL sub_100AAA4FC(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4 == a2)
    *a4 = 1;
  return v4 == a2;
}

uint64_t sub_100AAA51C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

id sub_100AAA67C(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  id v6;
  NSObject *v7;
  id v8;
  void *v9;
  objc_class *v10;
  NSString *v11;
  void *v12;
  void *v13;
  void *v14;
  __CFString *v15;
  __CFString *v16;
  id v17;
  void *v18;
  void *v19;
  __CFString *v20;
  uint8_t buf[4];
  __CFString *v23;
  __int16 v24;
  __CFString *v25;

  v6 = sub_10043196C();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    goto LABEL_16;
  v8 = *(id *)(a1 + 32);
  v9 = v8;
  if (!v8)
  {
    v15 = CFSTR("<nil>");
    goto LABEL_10;
  }
  v10 = (objc_class *)objc_opt_class(v8);
  v11 = NSStringFromClass(v10);
  v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  if ((objc_opt_respondsToSelector(v9, "accessibilityIdentifier") & 1) != 0)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "performSelector:", "accessibilityIdentifier"));
    v14 = v13;
    if (v13 && !objc_msgSend(v13, "isEqualToString:", v12))
    {
      v15 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v12, v9, v14));

      goto LABEL_8;
    }

  }
  v15 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v12, v9));
LABEL_8:

LABEL_10:
  v16 = v15;
  v17 = *(id *)(a1 + 40);
  v18 = v17;
  if (v17)
  {
    if (objc_msgSend(v17, "count"))
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "componentsJoinedByString:", CFSTR(", ")));
      v20 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<%p> [%@]"), v18, v19));

    }
    else
    {
      v20 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<%p> (empty)"), v18));
    }
  }
  else
  {
    v20 = CFSTR("<nil>");
  }

  *(_DWORD *)buf = 138543618;
  v23 = v16;
  v24 = 2112;
  v25 = v20;
  _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[%{public}@] => %@", buf, 0x16u);

LABEL_16:
  *a4 = *(_BYTE *)(a1 + 48);
  return *(id *)(a1 + 40);
}

uint64_t sub_100AAA8B8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_100AAAACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100AAAAE8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100AAAAF8(uint64_t a1)
{

}

void sub_100AAAB00(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "acquireMapInsetPropagationSuspensionTokenForReason:", CFSTR("chrome is transitioning between contexts")));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_100AAAB40(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  objc_msgSend(*(id *)(a1 + 32), "_teardownContextTransition:", *(_QWORD *)(a1 + 40));
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v3 = *(void **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;

  objc_msgSend(*(id *)(a1 + 32), "setNeedsUpdateComponent:animated:", CFSTR("mapInsets"), *(unsigned __int8 *)(a1 + 56));
  v4 = (id)objc_claimAutoreleasedReturnValue(+[GroupAnimation animationForAnimatedFlag:](GroupAnimation, "animationForAnimatedFlag:", *(unsigned __int8 *)(a1 + 56)));
  objc_msgSend(*(id *)(a1 + 32), "_updateComponentsIfNeeded:forceImmediateUpdate:forTiming:withAnimation:", 1, 1, 4, v4);
  objc_msgSend(v4, "runWithoutAnimation");

}

void sub_100AAB1C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,id location)
{
  id *v42;

  objc_destroyWeak(v42);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100AAB208(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  uint64_t v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  if (objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "requiresUniqueContextIdentifiers"))
  {
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v2 = *(id *)(a1 + 40);
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v10;
      do
      {
        for (i = 0; i != v4; i = (char *)i + 1)
        {
          if (*(_QWORD *)v10 != v5)
            objc_enumerationMutation(v2);
          v7 = *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)i);
          v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uniqueIdentifierForContext:", v7, (_QWORD)v9));
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "setObject:forKey:", v7, v8);

        }
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      }
      while (v4);
    }

  }
}

void sub_100AAB344(uint64_t a1)
{
  _QWORD *WeakRetained;
  uint64_t v2;
  void *v3;
  _QWORD *v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "acquireChromeDeactivationTokenForReason:", CFSTR("top context does not show map view")));
    v3 = (void *)v4[40];
    v4[40] = v2;

    WeakRetained = v4;
  }

}

uint64_t sub_100AAB39C(uint64_t a1)
{
  uint64_t result;

  result = objc_opt_respondsToSelector(*(_QWORD *)(a1 + 32), "setChromeViewController:");
  if ((result & 1) != 0)
    return (uint64_t)objc_msgSend(*(id *)(a1 + 32), "setChromeViewController:", 0);
  return result;
}

void sub_100AAB790(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 240));
  _Unwind_Resume(a1);
}

void sub_100AAB7CC(uint64_t a1)
{
  _QWORD *WeakRetained;
  void *v2;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = (void *)WeakRetained[40];
    WeakRetained[40] = 0;
    v3 = WeakRetained;

    objc_msgSend(v3, "loadMapViewIfNeeded");
    WeakRetained = v3;
  }

}

void sub_100AAB814(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  _QWORD v5[5];
  id v6;
  char v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "objectForKey:", *(_QWORD *)(a1 + 40)));
  v4 = objc_msgSend(v2, "copy");

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "removeObjectForKey:", *(_QWORD *)(a1 + 40));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100AAB8D0;
  v5[3] = &unk_1011E1748;
  v3 = *(void **)(a1 + 40);
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v3;
  v7 = *(_BYTE *)(a1 + 48);
  objc_msgSend(v4, "enumerateKeysAndObjectsUsingBlock:", v5);

}

void sub_100AAB8D0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(id, _QWORD);
  id v7;
  NSObject *v8;
  id v9;
  void *v10;
  objc_class *v11;
  NSString *v12;
  void *v13;
  void *v14;
  void *v15;
  __CFString *v16;
  __CFString *v17;
  id v18;
  void *v19;
  objc_class *v20;
  NSString *v21;
  void *v22;
  void *v23;
  void *v24;
  __CFString *v25;
  uint8_t buf[4];
  __CFString *v27;
  __int16 v28;
  id v29;
  __int16 v30;
  __CFString *v31;

  v5 = a2;
  v6 = a3;
  v7 = sub_10043196C();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    v9 = *(id *)(a1 + 32);
    v10 = v9;
    if (!v9)
    {
      v16 = CFSTR("<nil>");
LABEL_10:

      v17 = v16;
      v18 = *(id *)(a1 + 40);
      v19 = v18;
      if (!v18)
      {
        v25 = CFSTR("<nil>");
        goto LABEL_18;
      }
      v20 = (objc_class *)objc_opt_class(v18);
      v21 = NSStringFromClass(v20);
      v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
      if ((objc_opt_respondsToSelector(v19, "accessibilityIdentifier") & 1) != 0)
      {
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "performSelector:", "accessibilityIdentifier"));
        v24 = v23;
        if (v23 && !objc_msgSend(v23, "isEqualToString:", v22))
        {
          v25 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v22, v19, v24));

          goto LABEL_16;
        }

      }
      v25 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v22, v19));
LABEL_16:

LABEL_18:
      *(_DWORD *)buf = 138543874;
      v27 = v17;
      v28 = 2114;
      v29 = v5;
      v30 = 2114;
      v31 = v25;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[%{public}@] Running deferred action '%{public}@' for %{public}@", buf, 0x20u);

      goto LABEL_19;
    }
    v11 = (objc_class *)objc_opt_class(v9);
    v12 = NSStringFromClass(v11);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    if ((objc_opt_respondsToSelector(v10, "accessibilityIdentifier") & 1) != 0)
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "performSelector:", "accessibilityIdentifier"));
      v15 = v14;
      if (v14 && !objc_msgSend(v14, "isEqualToString:", v13))
      {
        v16 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v13, v10, v15));

        goto LABEL_8;
      }

    }
    v16 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v13, v10));
LABEL_8:

    goto LABEL_10;
  }
LABEL_19:

  v6[2](v6, *(unsigned __int8 *)(a1 + 48));
}

void sub_100AABB64(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "chromeViewController:didMoveFromContextStack:toContextStack:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  if (objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "requiresUniqueContextIdentifiers"))
  {
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    v2 = *(id *)(a1 + 56);
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v9;
      do
      {
        v6 = 0;
        do
        {
          if (*(_QWORD *)v9 != v5)
            objc_enumerationMutation(v2);
          v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uniqueIdentifierForContext:", *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v6), (_QWORD)v8));
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "removeObjectForKey:", v7);

          v6 = (char *)v6 + 1;
        }
        while (v4 != v6);
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      }
      while (v4);
    }

  }
}

void sub_100AAD520(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 240), 8);
  _Unwind_Resume(a1);
}

void sub_100AAD550(uint64_t a1)
{
  int v2;
  id v3;
  NSObject *v4;
  _BOOL4 v5;
  id v6;
  void *v7;
  objc_class *v8;
  NSString *v9;
  void *v10;
  void *v11;
  void *v12;
  __CFString *v13;
  id v14;
  void *v15;
  objc_class *v16;
  NSString *v17;
  void *v18;
  void *v19;
  void *v20;
  __CFString *v21;
  void *v22;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  void *v31;
  double v32;
  double v33;
  double v34;
  double v35;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat v39;
  CGFloat v40;
  double top;
  double v42;
  double v43;
  double v44;
  double v45;
  void *v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v53;
  id v54;
  NSObject *v55;
  id v56;
  void *v57;
  objc_class *v58;
  NSString *v59;
  void *v60;
  void *v61;
  void *v62;
  __CFString *v63;
  double *v64;
  CGFloat v65;
  CGFloat v66;
  CGFloat v67;
  CGFloat v68;
  CGFloat v69;
  CGFloat v70;
  CGFloat right;
  CGFloat bottom;
  double v73;
  double v74;
  CGFloat left;
  CGFloat MinX;
  CGFloat MinY;
  uint8_t buf[4];
  __CFString *v79;
  CGRect v80;
  CGRect v81;
  CGRect v82;
  CGRect v83;
  CGRect v84;
  CGRect v85;
  CGRect v86;
  CGRect v87;
  CGRect v88;
  CGRect v89;

  v2 = *(unsigned __int8 *)(a1 + 56);
  v3 = sub_10043196C();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG);
  if (v2)
  {
    if (!v5)
    {
LABEL_20:

      +[NSLayoutConstraint activateConstraints:](NSLayoutConstraint, "activateConstraints:", *(_QWORD *)(a1 + 40));
      goto LABEL_24;
    }
    v6 = *(id *)(a1 + 32);
    v7 = v6;
    if (!v6)
    {
      v13 = CFSTR("<nil>");
      goto LABEL_19;
    }
    v8 = (objc_class *)objc_opt_class(v6);
    v9 = NSStringFromClass(v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    if ((objc_opt_respondsToSelector(v7, "accessibilityIdentifier") & 1) != 0)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "performSelector:", "accessibilityIdentifier"));
      v12 = v11;
      if (v11 && !objc_msgSend(v11, "isEqualToString:", v10))
      {
        v13 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v10, v7, v12));

        goto LABEL_9;
      }

    }
    v13 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v10, v7));
LABEL_9:

LABEL_19:
    *(_DWORD *)buf = 138543362;
    v79 = v13;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[%{public}@] Will constrain map edge insets to safe areas", buf, 0xCu);

    goto LABEL_20;
  }
  if (v5)
  {
    v14 = *(id *)(a1 + 32);
    v15 = v14;
    if (!v14)
    {
      v21 = CFSTR("<nil>");
      goto LABEL_22;
    }
    v16 = (objc_class *)objc_opt_class(v14);
    v17 = NSStringFromClass(v16);
    v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    if ((objc_opt_respondsToSelector(v15, "accessibilityIdentifier") & 1) != 0)
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "performSelector:", "accessibilityIdentifier"));
      v20 = v19;
      if (v19 && !objc_msgSend(v19, "isEqualToString:", v18))
      {
        v21 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v18, v15, v20));

        goto LABEL_17;
      }

    }
    v21 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v18, v15));
LABEL_17:

LABEL_22:
    *(_DWORD *)buf = 138543362;
    v79 = v21;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[%{public}@] Will not constrain map edge insets to safe areas", buf, 0xCu);

  }
  +[NSLayoutConstraint deactivateConstraints:](NSLayoutConstraint, "deactivateConstraints:", *(_QWORD *)(a1 + 40));
LABEL_24:
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapInsetsLayoutGuide"));
  objc_msgSend(v22, "layoutFrame");
  v24 = v23;
  v26 = v25;
  v28 = v27;
  v30 = v29;
  v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v31, "bounds");
  v69 = v33;
  v70 = v32;
  v67 = v35;
  v68 = v34;
  left = UIEdgeInsetsZero.left;
  right = UIEdgeInsetsZero.right;
  bottom = UIEdgeInsetsZero.bottom;
  y = CGRectZero.origin.y;
  width = CGRectZero.size.width;
  height = CGRectZero.size.height;
  v65 = v28;
  v66 = v24;
  v80.origin.x = v24;
  v39 = v26;
  v80.origin.y = v26;
  v80.size.width = v28;
  v40 = v30;
  v80.size.height = v30;
  v88.origin.x = CGRectZero.origin.x;
  v88.origin.y = y;
  v88.size.width = width;
  v88.size.height = height;
  if (CGRectEqualToRect(v80, v88))
  {
    v42 = left;
    top = UIEdgeInsetsZero.top;
    v44 = right;
    v43 = bottom;
  }
  else
  {
    v81.origin.y = v69;
    v81.origin.x = v70;
    v81.size.height = v67;
    v81.size.width = v68;
    v89.origin.x = CGRectZero.origin.x;
    v89.origin.y = y;
    v89.size.width = width;
    v89.size.height = height;
    v42 = left;
    top = UIEdgeInsetsZero.top;
    v44 = right;
    v43 = bottom;
    if (!CGRectEqualToRect(v81, v89))
    {
      v82.origin.x = v66;
      v82.origin.y = v39;
      v82.size.width = v65;
      v82.size.height = v40;
      MinY = CGRectGetMinY(v82);
      v83.origin.x = v66;
      v83.origin.y = v39;
      v83.size.width = v65;
      v83.size.height = v40;
      MinX = CGRectGetMinX(v83);
      v84.origin.x = v70;
      v84.origin.y = v69;
      v84.size.width = v68;
      v84.size.height = v67;
      v73 = CGRectGetHeight(v84);
      v85.origin.x = v66;
      v85.origin.y = v39;
      v85.size.width = v65;
      v85.size.height = v40;
      v74 = v73 - CGRectGetMaxY(v85);
      v86.origin.x = v70;
      top = MinY;
      v86.origin.y = v69;
      v86.size.width = v68;
      v86.size.height = v67;
      v45 = CGRectGetWidth(v86);
      v87.origin.x = v66;
      v87.origin.y = v39;
      v87.size.width = v65;
      v87.size.height = v40;
      v43 = v74;
      v42 = MinX;
      v44 = v45 - CGRectGetMaxX(v87);
    }
  }

  v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapView"));
  objc_msgSend(v46, "_edgeInsets");
  if (v42 == v50 && top == v47 && v44 == v49)
  {
    v53 = v48;

    if (v43 == v53)
      return;
  }
  else
  {

  }
  v54 = sub_10043196C();
  v55 = objc_claimAutoreleasedReturnValue(v54);
  if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
  {
    v56 = *(id *)(a1 + 32);
    v57 = v56;
    if (!v56)
    {
      v63 = CFSTR("<nil>");
      goto LABEL_46;
    }
    v58 = (objc_class *)objc_opt_class(v56);
    v59 = NSStringFromClass(v58);
    v60 = (void *)objc_claimAutoreleasedReturnValue(v59);
    if ((objc_opt_respondsToSelector(v57, "accessibilityIdentifier") & 1) != 0)
    {
      v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "performSelector:", "accessibilityIdentifier"));
      v62 = v61;
      if (v61 && !objc_msgSend(v61, "isEqualToString:", v60))
      {
        v63 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v60, v57, v62));

        goto LABEL_44;
      }

    }
    v63 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v60, v57));
LABEL_44:

LABEL_46:
    *(_DWORD *)buf = 138543362;
    v79 = v63;
    _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEBUG, "[%{public}@] - map insets did change after updating safe area constraints, will permit updating map view", buf, 0xCu);

  }
  v64 = *(double **)(*(_QWORD *)(a1 + 48) + 8);
  v64[4] = top;
  v64[5] = v42;
  v64[6] = v43;
  v64[7] = v44;
}

void sub_100AADB18(uint64_t a1)
{
  char v2;
  id v3;
  NSObject *v4;
  _BOOL4 v5;
  id v6;
  void *v7;
  objc_class *v8;
  NSString *v9;
  void *v10;
  void *v11;
  void *v12;
  __CFString *v13;
  id v14;
  void *v15;
  objc_class *v16;
  NSString *v17;
  void *v18;
  void *v19;
  void *v20;
  __CFString *v21;
  NSString *v22;
  void *v23;
  double *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  void *v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  void *v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v45;
  void *v46;
  void *v47;
  uint8_t buf[4];
  __CFString *v49;
  __int16 v50;
  void *v51;

  v2 = vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 32), UIEdgeInsetsNull[0]), (int32x4_t)vceqq_f64(*(float64x2_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48), UIEdgeInsetsNull[1]))), 0xFuLL)));
  v3 = sub_10043196C();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG);
  if ((v2 & 1) == 0)
  {
    if (!v5)
      goto LABEL_20;
    v6 = *(id *)(a1 + 32);
    v7 = v6;
    if (!v6)
    {
      v13 = CFSTR("<nil>");
      goto LABEL_19;
    }
    v8 = (objc_class *)objc_opt_class(v6);
    v9 = NSStringFromClass(v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    if ((objc_opt_respondsToSelector(v7, "accessibilityIdentifier") & 1) != 0)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "performSelector:", "accessibilityIdentifier"));
      v12 = v11;
      if (v11 && !objc_msgSend(v11, "isEqualToString:", v10))
      {
        v13 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v10, v7, v12));

        goto LABEL_9;
      }

    }
    v13 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v10, v7));
LABEL_9:

LABEL_19:
    v22 = NSStringFromUIEdgeInsets(*(UIEdgeInsets *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 32));
    v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
    *(_DWORD *)buf = 138543618;
    v49 = v13;
    v50 = 2114;
    v51 = v23;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[%{public}@] - map insets: %{public}@", buf, 0x16u);

LABEL_20:
    v24 = *(double **)(*(_QWORD *)(a1 + 40) + 8);
    v25 = v24[4];
    v26 = v24[5];
    v27 = v24[6];
    v28 = v24[7];
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapView"));
    objc_msgSend(v29, "_setEdgeInsets:", v25, v26, v27, v28);

    objc_msgSend(*(id *)(a1 + 32), "mapAttributionInsets");
    v31 = v30;
    v33 = v32;
    v35 = v34;
    v37 = v36;
    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapView"));
    objc_msgSend(v38, "_attributionInsets");
    if (v33 == v42 && v31 == v39 && v37 == v41)
    {
      v45 = v40;

      if (v35 == v45)
      {
LABEL_30:
        objc_msgSend(*(id *)(a1 + 32), "_updateDebugLayoutGuidesView");
        v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "navigationDisplay"));
        objc_msgSend(v47, "mapInsetsDidChangeAnimated:", *(unsigned __int8 *)(a1 + 48));

        v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "overlayController"));
        -[NSObject enumerateOverlaysUsingBlock:](v4, "enumerateOverlaysUsingBlock:", &stru_1011E1790);
        goto LABEL_33;
      }
    }
    else
    {

    }
    v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapView"));
    objc_msgSend(v46, "_setAttributionInsets:", v31, v33, v35, v37);

    goto LABEL_30;
  }
  if (v5)
  {
    v14 = *(id *)(a1 + 32);
    v15 = v14;
    if (!v14)
    {
      v21 = CFSTR("<nil>");
      goto LABEL_32;
    }
    v16 = (objc_class *)objc_opt_class(v14);
    v17 = NSStringFromClass(v16);
    v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    if ((objc_opt_respondsToSelector(v15, "accessibilityIdentifier") & 1) != 0)
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "performSelector:", "accessibilityIdentifier"));
      v20 = v19;
      if (v19 && !objc_msgSend(v19, "isEqualToString:", v18))
      {
        v21 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v18, v15, v20));

        goto LABEL_17;
      }

    }
    v21 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v18, v15));
LABEL_17:

LABEL_32:
    *(_DWORD *)buf = 138543362;
    v49 = v21;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[%{public}@] - map insets are null, meaning we specifically don't want to continue this update", buf, 0xCu);

  }
LABEL_33:

}

void sub_100AADF10(id a1, ChromeOverlay *a2, unint64_t a3, BOOL *a4)
{
  ChromeOverlay *v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector(v4, "didUpdateMapInsets") & 1) != 0)
    -[ChromeOverlay didUpdateMapInsets](v4, "didUpdateMapInsets");

}

void sub_100AADF4C(uint64_t a1)
{
  void *v2;
  void *v3;
  char v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "postNotificationName:object:", CFSTR("ChromeViewControllerDidUpdateMapInsetsNotification"), *(_QWORD *)(a1 + 32));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "topContext"));
  v4 = objc_opt_respondsToSelector(v3, "mapInsetsDidChangeAnimated:");

  if ((v4 & 1) != 0)
  {
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "topContext"));
    objc_msgSend(v5, "mapInsetsDidChangeAnimated:", *(unsigned __int8 *)(a1 + 40));

  }
}

id sub_100AADFF8(uint64_t a1)
{
  __int128 v1;
  __int128 v2;
  _QWORD v4[5];
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100AAE070;
  v4[3] = &unk_1011E17B8;
  v4[4] = *(_QWORD *)(a1 + 32);
  v1 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 40);
  v6 = v1;
  v2 = *(_OWORD *)(a1 + 88);
  v7 = *(_OWORD *)(a1 + 72);
  v8 = v2;
  return +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v4);
}

void sub_100AAE070(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  void *v5;
  objc_class *v6;
  NSString *v7;
  void *v8;
  void *v9;
  void *v10;
  __CFString *v11;
  NSString *v12;
  void *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  void *v18;
  id v19;
  NSObject *v20;
  id v21;
  void *v22;
  objc_class *v23;
  NSString *v24;
  void *v25;
  void *v26;
  void *v27;
  __CFString *v28;
  NSString *v29;
  void *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  void *v35;
  uint8_t buf[4];
  __CFString *v37;
  __int16 v38;
  void *v39;

  v2 = sub_10043196C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    v4 = *(id *)(a1 + 32);
    v5 = v4;
    if (!v4)
    {
      v11 = CFSTR("<nil>");
      goto LABEL_10;
    }
    v6 = (objc_class *)objc_opt_class(v4);
    v7 = NSStringFromClass(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if ((objc_opt_respondsToSelector(v5, "accessibilityIdentifier") & 1) != 0)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "performSelector:", "accessibilityIdentifier"));
      v10 = v9;
      if (v9 && !objc_msgSend(v9, "isEqualToString:", v8))
      {
        v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v8, v5, v10));

        goto LABEL_8;
      }

    }
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v8, v5));
LABEL_8:

LABEL_10:
    v12 = NSStringFromUIEdgeInsets(*(UIEdgeInsets *)(a1 + 40));
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    *(_DWORD *)buf = 138543618;
    v37 = v11;
    v38 = 2112;
    v39 = v13;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[%{public}@] - label insets: %@", buf, 0x16u);

  }
  v14 = *(double *)(a1 + 40);
  v15 = *(double *)(a1 + 48);
  v16 = *(double *)(a1 + 56);
  v17 = *(double *)(a1 + 64);
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapView"));
  objc_msgSend(v18, "_setLabelEdgeInsets:", v14, v15, v16, v17);

  v19 = sub_10043196C();
  v20 = objc_claimAutoreleasedReturnValue(v19);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
  {
    v21 = *(id *)(a1 + 32);
    v22 = v21;
    if (!v21)
    {
      v28 = CFSTR("<nil>");
      goto LABEL_20;
    }
    v23 = (objc_class *)objc_opt_class(v21);
    v24 = NSStringFromClass(v23);
    v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
    if ((objc_opt_respondsToSelector(v22, "accessibilityIdentifier") & 1) != 0)
    {
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "performSelector:", "accessibilityIdentifier"));
      v27 = v26;
      if (v26 && !objc_msgSend(v26, "isEqualToString:", v25))
      {
        v28 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v25, v22, v27));

        goto LABEL_18;
      }

    }
    v28 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v25, v22));
LABEL_18:

LABEL_20:
    v29 = NSStringFromUIEdgeInsets(*(UIEdgeInsets *)(a1 + 72));
    v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
    *(_DWORD *)buf = 138543618;
    v37 = v28;
    v38 = 2112;
    v39 = v30;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "[%{public}@] - label widths: %@", buf, 0x16u);

  }
  v31 = *(double *)(a1 + 72);
  v32 = *(double *)(a1 + 80);
  v33 = *(double *)(a1 + 88);
  v34 = *(double *)(a1 + 96);
  v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapView"));
  objc_msgSend(v35, "_setLabelEdgeWidths:", v31, v32, v33, v34);

}

void sub_100AAE3C4(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  id v5;
  void *v6;
  objc_class *v7;
  NSString *v8;
  void *v9;
  void *v10;
  void *v11;
  __CFString *v12;
  __CFString *v13;
  id v14;
  void *v15;
  void *v16;
  __CFString *v17;
  void *v18;
  uint8_t buf[4];
  __CFString *v20;
  __int16 v21;
  __CFString *v22;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "personalizedItemSourcesForCurrentState"));
  v3 = sub_10043196C();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (!os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    goto LABEL_16;
  v5 = *(id *)(a1 + 32);
  v6 = v5;
  if (!v5)
  {
    v12 = CFSTR("<nil>");
    goto LABEL_10;
  }
  v7 = (objc_class *)objc_opt_class(v5);
  v8 = NSStringFromClass(v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  if ((objc_opt_respondsToSelector(v6, "accessibilityIdentifier") & 1) != 0)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "performSelector:", "accessibilityIdentifier"));
    v11 = v10;
    if (v10 && !objc_msgSend(v10, "isEqualToString:", v9))
    {
      v12 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v9, v6, v11));

      goto LABEL_8;
    }

  }
  v12 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v9, v6));
LABEL_8:

LABEL_10:
  v13 = v12;
  v14 = v2;
  v15 = v14;
  if (v14)
  {
    if (objc_msgSend(v14, "count"))
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "componentsJoinedByString:", CFSTR(", ")));
      v17 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<%p> [%@]"), v15, v16));

    }
    else
    {
      v17 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<%p> (empty)"), v15));
    }
  }
  else
  {
    v17 = CFSTR("<nil>");
  }

  *(_DWORD *)buf = 138543618;
  v20 = v13;
  v21 = 2112;
  v22 = v17;
  _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[%{public}@] -> item sources: %@", buf, 0x16u);

LABEL_16:
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "personalizedItemManager"));
  objc_msgSend(v18, "setItemSources:", v2);

}

void sub_100AAE62C(uint64_t a1)
{
  id *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  NSObject *v6;
  id v7;
  void *v8;
  objc_class *v9;
  NSString *v10;
  void *v11;
  void *v12;
  void *v13;
  __CFString *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  char **v19;
  char **v20;
  char **v21;
  char **v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  NSObject *v32;
  id v33;
  void *v34;
  int v35;
  id v36;
  NSObject *v37;
  id v38;
  void *v39;
  objc_class *v40;
  NSString *v41;
  void *v42;
  void *v43;
  void *v44;
  __CFString *v45;
  id v46;
  id v47;
  NSObject *v48;
  id v49;
  void *v50;
  objc_class *v51;
  NSString *v52;
  void *v53;
  void *v54;
  void *v55;
  __CFString *v56;
  id v57;
  __CFString *v58;
  id v59;
  void *v60;
  objc_class *v61;
  NSString *v62;
  void *v63;
  void *v64;
  void *v65;
  __CFString *v66;
  id v67;
  id v68;
  void *v69;
  objc_class *v70;
  NSString *v71;
  void *v72;
  void *v73;
  void *v74;
  __CFString *v75;
  __CFString *v76;
  id v77;
  void *v78;
  objc_class *v79;
  NSString *v80;
  void *v81;
  void *v82;
  void *v83;
  __CFString *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  unint64_t v89;
  unint64_t v90;
  void *v91;
  unsigned __int8 v92;
  void *v93;
  int v94;
  void *v95;
  id v96;
  uint64_t v97;
  void *i;
  id v99;
  NSObject *v100;
  id v101;
  void *v102;
  objc_class *v103;
  NSString *v104;
  void *v105;
  void *v106;
  void *v107;
  __CFString *v108;
  __CFString *v109;
  const char *v110;
  void *v111;
  id v112;
  void *v113;
  objc_class *v114;
  NSString *v115;
  void *v116;
  void *v117;
  void *v118;
  __CFString *v119;
  __CFString *v120;
  __CFString *v121;
  char v122;
  void *v123;
  id v124;
  unsigned int v125;
  _QWORD *v127;
  id obj;
  uint64_t v129;
  id v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  _QWORD v139[6];
  _QWORD v140[5];
  id v141;
  uint8_t buf[4];
  __CFString *v143;
  __int16 v144;
  const __CFString *v145;
  __int16 v146;
  __CFString *v147;
  __int16 v148;
  id v149;
  __int16 v150;
  __CFString *v151;
  _BYTE v152[128];
  _BYTE v153[128];

  v140[0] = 0;
  v140[1] = v140;
  v140[2] = 0x3032000000;
  v140[3] = sub_100AAAAE8;
  v140[4] = sub_100AAAAF8;
  v141 = 0;
  v139[0] = _NSConcreteStackBlock;
  v139[1] = 3221225472;
  v139[2] = sub_100AAF4F0;
  v139[3] = &unk_1011E17E0;
  v1 = (id *)(a1 + 32);
  v139[4] = *(_QWORD *)(a1 + 32);
  v139[5] = v140;
  v127 = objc_retainBlock(v139);
  if (!objc_msgSend(*v1, "isRunningNavigationDisplay"))
  {
    v130 = 0;
    v125 = 0;
    goto LABEL_17;
  }
  v2 = ((uint64_t (*)(void))v127[2])();
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "navigationDisplay"));
  v125 = objc_msgSend(v4, "updateRouteAnnotationsConfiguration:", v3);

  if (v125)
  {
    v5 = sub_10043196C();
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
LABEL_15:

      v130 = v3;
      goto LABEL_16;
    }
    v7 = *(id *)(a1 + 32);
    v8 = v7;
    if (!v7)
    {
      v14 = CFSTR("<nil>");
      goto LABEL_14;
    }
    v9 = (objc_class *)objc_opt_class(v7);
    v10 = NSStringFromClass(v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    if ((objc_opt_respondsToSelector(v8, "accessibilityIdentifier") & 1) != 0)
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "performSelector:", "accessibilityIdentifier"));
      v13 = v12;
      if (v12 && (objc_msgSend(v12, "isEqualToString:", v11) & 1) == 0)
      {
        v14 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v11, v8, v13));

        goto LABEL_10;
      }

    }
    v14 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v11, v8));
LABEL_10:

LABEL_14:
    *(_DWORD *)buf = 138543362;
    v143 = v14;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[%{public}@] - navigation display is providing route annotations", buf, 0xCu);

    goto LABEL_15;
  }
  v130 = 0;
LABEL_16:

LABEL_17:
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pendingContexts"));
  v16 = v15;
  if (v15)
    v124 = v15;
  else
    v124 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contexts"));

  v137 = 0u;
  v138 = 0u;
  v135 = 0u;
  v136 = 0u;
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v124, "reverseObjectEnumerator"));
  obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "allObjects"));

  v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v135, v153, 16);
  if (v18)
  {
    v129 = *(_QWORD *)v136;
    v19 = &selRef_responseId;
    v20 = &selRef_responseId;
    v21 = &selRef_ugcGlyphButtonViewMutedGlyphColor;
    v22 = &selRef_viewControllerPresentPOIEnrichmentWithCoordinator_;
LABEL_22:
    v23 = 0;
    v24 = v19[247];
    v25 = v20[245];
    v26 = v21[399];
    v27 = v22[186];
    while (1)
    {
      if (*(_QWORD *)v136 != v129)
        objc_enumerationMutation(obj);
      v28 = *(void **)(*((_QWORD *)&v135 + 1) + 8 * v23);
      if ((objc_opt_respondsToSelector(v28, v24) & 1) == 0
        || (v29 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "routeAnnotationsProvider"))) == 0)
      {
        v30 = v28;
        if ((objc_opt_respondsToSelector(v30, v25) & 1) != 0 || (objc_opt_respondsToSelector(v30, v26) & 1) != 0)
          v29 = v30;
        else
          v29 = 0;

      }
      if ((objc_opt_respondsToSelector(v29, v26) & 1) != 0)
      {
        v31 = ((uint64_t (*)(void))v127[2])();
        v32 = objc_claimAutoreleasedReturnValue(v31);
        if (objc_msgSend(v29, "updateRouteAnnotationsConfiguration:", v32))
        {
          v36 = sub_10043196C();
          v37 = objc_claimAutoreleasedReturnValue(v36);
          if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
          {
            v38 = *(id *)(a1 + 32);
            v39 = v38;
            if (v38)
            {
              v40 = (objc_class *)objc_opt_class(v38);
              v41 = NSStringFromClass(v40);
              v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
              if ((objc_opt_respondsToSelector(v39, "accessibilityIdentifier") & 1) == 0)
                goto LABEL_49;
              v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "performSelector:", "accessibilityIdentifier"));
              v44 = v43;
              if (v43 && (objc_msgSend(v43, "isEqualToString:", v42) & 1) == 0)
              {
                v45 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v42, v39, v44));

              }
              else
              {

LABEL_49:
                v45 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v42, v39));
              }

            }
            else
            {
              v45 = CFSTR("<nil>");
            }

            *(_DWORD *)buf = 138543618;
            v143 = v45;
            v144 = 2114;
            v145 = CFSTR("<nil>");
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "[%{public}@] - %{public}@ is updating the route annotation configuration", buf, 0x16u);

          }
          v57 = v29;
          v33 = -[NSObject copy](v32, "copy");

          v35 = 1;
          goto LABEL_94;
        }

      }
      if ((objc_opt_respondsToSelector(v29, v25) & 1) != 0)
      {
        v33 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "routeAnnotationsConfiguration"));

        if (v33)
        {
          v46 = v29;
          if (objc_msgSend(*(id *)(a1 + 32), "isRunningNavigationDisplay"))
          {
            v47 = sub_10043196C();
            v48 = objc_claimAutoreleasedReturnValue(v47);
            if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
            {
              v49 = *(id *)(a1 + 32);
              v50 = v49;
              if (v49)
              {
                v51 = (objc_class *)objc_opt_class(v49);
                v52 = NSStringFromClass(v51);
                v53 = (void *)objc_claimAutoreleasedReturnValue(v52);
                if ((objc_opt_respondsToSelector(v50, "accessibilityIdentifier") & 1) == 0)
                  goto LABEL_58;
                v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "performSelector:", "accessibilityIdentifier"));
                v55 = v54;
                if (v54 && (objc_msgSend(v54, "isEqualToString:", v53) & 1) == 0)
                {
                  v56 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v53, v50, v55));

                }
                else
                {

LABEL_58:
                  v56 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v53, v50));
                }

              }
              else
              {
                v56 = CFSTR("<nil>");
              }

              v58 = v56;
              v59 = v46;
              v60 = v59;
              if (v59)
              {
                v61 = (objc_class *)objc_opt_class(v59);
                v62 = NSStringFromClass(v61);
                v63 = (void *)objc_claimAutoreleasedReturnValue(v62);
                if ((objc_opt_respondsToSelector(v60, "accessibilityIdentifier") & 1) == 0)
                  goto LABEL_70;
                v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "performSelector:", "accessibilityIdentifier"));
                v65 = v64;
                if (v64 && (objc_msgSend(v64, "isEqualToString:", v63) & 1) == 0)
                {
                  v66 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v63, v60, v65));

                }
                else
                {

LABEL_70:
                  v66 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v63, v60));
                }

              }
              else
              {
                v66 = CFSTR("<nil>");
              }

              *(_DWORD *)buf = 138543618;
              v143 = v58;
              v144 = 2114;
              v145 = v66;
              _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_INFO, "[%{public}@] Context %{public}@ is overriding the route annotations configuration prepared by navigation display", buf, 0x16u);

            }
          }
          v67 = sub_10043196C();
          v32 = objc_claimAutoreleasedReturnValue(v67);
          if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
          {
            v68 = *(id *)(a1 + 32);
            v69 = v68;
            if (v68)
            {
              v70 = (objc_class *)objc_opt_class(v68);
              v71 = NSStringFromClass(v70);
              v72 = (void *)objc_claimAutoreleasedReturnValue(v71);
              if ((objc_opt_respondsToSelector(v69, "accessibilityIdentifier") & 1) == 0)
                goto LABEL_81;
              v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v69, "performSelector:", "accessibilityIdentifier"));
              v74 = v73;
              if (v73 && (objc_msgSend(v73, "isEqualToString:", v72) & 1) == 0)
              {
                v75 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v72, v69, v74));

              }
              else
              {

LABEL_81:
                v75 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v72, v69));
              }

            }
            else
            {
              v75 = CFSTR("<nil>");
            }

            v76 = v75;
            v77 = v46;
            v78 = v77;
            if (v77)
            {
              v79 = (objc_class *)objc_opt_class(v77);
              v80 = NSStringFromClass(v79);
              v81 = (void *)objc_claimAutoreleasedReturnValue(v80);
              if ((objc_opt_respondsToSelector(v78, "accessibilityIdentifier") & 1) == 0)
                goto LABEL_89;
              v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v78, "performSelector:", "accessibilityIdentifier"));
              v83 = v82;
              if (v82 && (objc_msgSend(v82, "isEqualToString:", v81) & 1) == 0)
              {
                v84 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v81, v78, v83));

              }
              else
              {

LABEL_89:
                v84 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v81, v78));
              }

            }
            else
            {
              v84 = CFSTR("<nil>");
            }

            *(_DWORD *)buf = 138543618;
            v143 = v76;
            v144 = 2114;
            v145 = v84;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "[%{public}@] - %{public}@ is providing a route annotation configuration", buf, 0x16u);

          }
          v35 = v125;
LABEL_94:

          LODWORD(v18) = 0;
          v130 = v33;
          v34 = v29;
          goto LABEL_95;
        }
        v130 = 0;
      }
      if ((objc_opt_respondsToSelector(v28, v27) & 1) != 0
        && (objc_msgSend(v28, "wantsRouteAnnotationsControl") & 1) != 0)
      {
        v34 = 0;
        LODWORD(v18) = 1;
        v35 = v125;
LABEL_95:

        goto LABEL_96;
      }

      if (v18 == (id)++v23)
      {
        v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v135, v153, 16);
        v19 = &selRef_responseId;
        v20 = &selRef_responseId;
        v21 = &selRef_ugcGlyphButtonViewMutedGlyphColor;
        v22 = &selRef_viewControllerPresentPOIEnrichmentWithCoordinator_;
        if (v18)
          goto LABEL_22;
        break;
      }
    }
  }
  v34 = 0;
  v35 = v125;
LABEL_96:

  v85 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "routeAnnotationsController"));
  v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v85, "configuration"));
  v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "routes"));
  v88 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v130, "routes"));
  v89 = v87;
  v90 = v88;
  if (v89 | v90)
  {
    v91 = (void *)v90;
    v92 = objc_msgSend((id)v89, "isEqual:", v90);

    if ((v92 & 1) != 0)
      goto LABEL_107;
    v93 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchPinsManager"));
    v85 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v93, "routeStartEndItemSource"));

    v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "personalizedItemManager"));
    v94 = v35;
    v133 = 0u;
    v134 = 0u;
    v131 = 0u;
    v132 = 0u;
    v95 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v130, "routes"));
    v96 = objc_msgSend(v95, "countByEnumeratingWithState:objects:count:", &v131, v152, 16);
    if (v96)
    {
      v97 = *(_QWORD *)v132;
      do
      {
        for (i = 0; i != v96; i = (char *)i + 1)
        {
          if (*(_QWORD *)v132 != v97)
            objc_enumerationMutation(v95);
          objc_msgSend(*(id *)(*((_QWORD *)&v131 + 1) + 8 * (_QWORD)i), "updateWaypointStyleAttributesWithItemSource:personalizedItemManager:", v85, v86);
        }
        v96 = objc_msgSend(v95, "countByEnumeratingWithState:objects:count:", &v131, v152, 16);
      }
      while (v96);
    }

    v35 = v94;
  }

LABEL_107:
  v99 = sub_10043196C();
  v100 = objc_claimAutoreleasedReturnValue(v99);
  if (!os_log_type_enabled(v100, OS_LOG_TYPE_INFO))
    goto LABEL_134;
  v101 = *(id *)(a1 + 32);
  v102 = v101;
  if (v101)
  {
    v103 = (objc_class *)objc_opt_class(v101);
    v104 = NSStringFromClass(v103);
    v105 = (void *)objc_claimAutoreleasedReturnValue(v104);
    if ((objc_opt_respondsToSelector(v102, "accessibilityIdentifier") & 1) != 0)
    {
      v106 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v102, "performSelector:", "accessibilityIdentifier"));
      v107 = v106;
      if (v106 && (objc_msgSend(v106, "isEqualToString:", v105) & 1) == 0)
      {
        v108 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v105, v102, v107));

        goto LABEL_114;
      }

    }
    v108 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v105, v102));
LABEL_114:

    goto LABEL_116;
  }
  v108 = CFSTR("<nil>");
LABEL_116:

  v109 = v108;
  if (v35)
    v110 = "Updating";
  else
    v110 = "Replacing";
  v111 = v34;
  if (v125)
    v111 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "navigationDisplay"));
  v112 = v111;
  v113 = v112;
  if (!v112)
  {
    v119 = CFSTR("<nil>");
    goto LABEL_129;
  }
  v114 = (objc_class *)objc_opt_class(v112);
  v115 = NSStringFromClass(v114);
  v116 = (void *)objc_claimAutoreleasedReturnValue(v115);
  if ((objc_opt_respondsToSelector(v113, "accessibilityIdentifier") & 1) != 0)
  {
    v117 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v113, "performSelector:", "accessibilityIdentifier"));
    v118 = v117;
    if (v117 && (objc_msgSend(v117, "isEqualToString:", v116) & 1) == 0)
    {
      v119 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v116, v113, v118));

      goto LABEL_127;
    }

  }
  v119 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v116, v113));
LABEL_127:

LABEL_129:
  v144 = 2080;
  v120 = CFSTR("NO");
  *(_DWORD *)buf = 138544386;
  v143 = v109;
  if ((_DWORD)v18)
    v120 = CFSTR("YES");
  v145 = (const __CFString *)v110;
  v146 = 2114;
  v147 = v119;
  v148 = 2114;
  v149 = v130;
  v150 = 2114;
  v151 = v120;
  v121 = v120;
  _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_INFO, "[%{public}@] %s route annotations configurations for %{public}@: %{public}@ (wantsControl: %{public}@)", buf, 0x34u);
  if (v125)

LABEL_134:
  if (v34)
    v122 = 1;
  else
    v122 = (char)v18;
  if (v130 || (v122 & 1) == 0)
  {
    v123 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "routeAnnotationsController"));
    objc_msgSend(v123, "setConfiguration:", v130);

  }
  _Block_object_dispose(v140, 8);

}

void sub_100AAF47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  _Block_object_dispose(&a41, 8);
  _Unwind_Resume(a1);
}

id sub_100AAF4F0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  RouteAnnotationsMutableConfiguration *v5;
  RouteAnnotationsMutableConfiguration *v6;

  v2 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  if (!v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "routeAnnotationsController"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "configuration"));
    v5 = (RouteAnnotationsMutableConfiguration *)objc_msgSend(v4, "mutableCopy");
    v6 = v5;
    if (!v5)
      v6 = objc_alloc_init(RouteAnnotationsMutableConfiguration);
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v6);
    if (!v5)

    v2 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  }
  return v2;
}

void sub_100AB0314(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  NSObject *v10;
  id v11;
  void *v12;
  objc_class *v13;
  NSString *v14;
  void *v15;
  void *v16;
  void *v17;
  __CFString *v18;
  id v19;
  id v20;
  void *v21;
  objc_class *v22;
  NSString *v23;
  void *v24;
  void *v25;
  void *v26;
  __CFString *v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  void *i;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  _QWORD v39[5];
  id v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint8_t v45[128];
  uint8_t buf[4];
  __CFString *v47;
  __int16 v48;
  id v49;
  __int16 v50;
  NSObject *v51;

  v5 = a2;
  v6 = a3;
  if (+[ChromeComponentUpdateInfo supportsCallstackSymbols](ChromeComponentUpdateInfo, "supportsCallstackSymbols"))
  {
    v7 = sub_10039DCD4(v6, &stru_1011E1820);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    v9 = sub_100AB075C();
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
LABEL_20:

      goto LABEL_23;
    }
    v11 = *(id *)(a1 + 32);
    v12 = v11;
    if (!v11)
    {
      v18 = CFSTR("<nil>");
      goto LABEL_19;
    }
    v13 = (objc_class *)objc_opt_class(v11);
    v14 = NSStringFromClass(v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    if ((objc_opt_respondsToSelector(v12, "accessibilityIdentifier") & 1) != 0)
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "performSelector:", "accessibilityIdentifier"));
      v17 = v16;
      if (v16 && !objc_msgSend(v16, "isEqualToString:", v15))
      {
        v18 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v15, v12, v17));

        goto LABEL_9;
      }

    }
    v18 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v15, v12));
LABEL_9:

LABEL_19:
    *(_DWORD *)buf = 138543874;
    v47 = v18;
    v48 = 2112;
    v49 = v5;
    v50 = 2112;
    v51 = v8;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[%{public}@] Updating \"%@\":\n%@", buf, 0x20u);

    goto LABEL_20;
  }
  v19 = sub_100AB075C();
  v8 = objc_claimAutoreleasedReturnValue(v19);
  if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    goto LABEL_23;
  v20 = *(id *)(a1 + 32);
  v21 = v20;
  if (!v20)
  {
    v27 = CFSTR("<nil>");
    goto LABEL_22;
  }
  v22 = (objc_class *)objc_opt_class(v20);
  v23 = NSStringFromClass(v22);
  v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
  if ((objc_opt_respondsToSelector(v21, "accessibilityIdentifier") & 1) != 0)
  {
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "performSelector:", "accessibilityIdentifier"));
    v26 = v25;
    if (v25 && !objc_msgSend(v25, "isEqualToString:", v24))
    {
      v27 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v24, v21, v26));

      goto LABEL_17;
    }

  }
  v27 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v24, v21));
LABEL_17:

LABEL_22:
  *(_DWORD *)buf = 138543618;
  v47 = v27;
  v48 = 2112;
  v49 = v5;
  _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[%{public}@] Updating \"%@\"", buf, 0x16u);

LABEL_23:
  objc_msgSend(*(id *)(a1 + 32), "updateComponent:forTiming:withAnimation:", v5, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));
  if (objc_msgSend(v6, "count"))
  {
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v28 = v6;
    v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v41, v45, 16);
    if (v29)
    {
      v30 = v29;
      v31 = *(_QWORD *)v42;
      do
      {
        for (i = 0; i != v30; i = (char *)i + 1)
        {
          if (*(_QWORD *)v42 != v31)
            objc_enumerationMutation(v28);
          v33 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * (_QWORD)i);
          v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "completionHandler"));

          if (v34)
          {
            v35 = *(void **)(a1 + 40);
            v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "completionHandler"));
            objc_msgSend(v35, "addCompletion:", v36);

          }
        }
        v30 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v41, v45, 16);
      }
      while (v30);
    }

  }
  v39[0] = _NSConcreteStackBlock;
  v39[1] = 3221225472;
  v39[2] = sub_100AB079C;
  v39[3] = &unk_1011ACCB8;
  v37 = *(void **)(a1 + 40);
  v39[4] = *(_QWORD *)(a1 + 32);
  v40 = v5;
  v38 = v5;
  objc_msgSend(v37, "addCompletion:", v39);

}

NSArray *__cdecl sub_100AB0754(id a1, ChromeComponentUpdateInfo *a2, unint64_t a3)
{
  return -[ChromeComponentUpdateInfo callStackSymbols](a2, "callStackSymbols", a3);
}

id sub_100AB075C()
{
  if (qword_1014D3E70 != -1)
    dispatch_once(&qword_1014D3E70, &stru_1011E1928);
  return (id)qword_1014D3E68;
}

id sub_100AB079C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  void *v5;
  objc_class *v6;
  NSString *v7;
  void *v8;
  void *v9;
  void *v10;
  __CFString *v11;
  void *v12;
  id result;
  id v14;
  NSObject *v15;
  id v16;
  void *v17;
  objc_class *v18;
  NSString *v19;
  void *v20;
  void *v21;
  void *v22;
  __CFString *v23;
  void *v24;
  uint8_t buf[4];
  __CFString *v26;
  __int16 v27;
  void *v28;

  v2 = sub_10043196C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    v4 = *(id *)(a1 + 32);
    v5 = v4;
    if (!v4)
    {
      v11 = CFSTR("<nil>");
      goto LABEL_10;
    }
    v6 = (objc_class *)objc_opt_class(v4);
    v7 = NSStringFromClass(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if ((objc_opt_respondsToSelector(v5, "accessibilityIdentifier") & 1) != 0)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "performSelector:", "accessibilityIdentifier"));
      v10 = v9;
      if (v9 && !objc_msgSend(v9, "isEqualToString:", v8))
      {
        v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v8, v5, v10));

        goto LABEL_8;
      }

    }
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v8, v5));
LABEL_8:

LABEL_10:
    v12 = *(void **)(a1 + 40);
    *(_DWORD *)buf = 138543618;
    v26 = v11;
    v27 = 2112;
    v28 = v12;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[%{public}@] Finished updating %@", buf, 0x16u);

  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "removeObject:", *(_QWORD *)(a1 + 40));
  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 96), "count");
  if (!result)
    return result;
  v14 = sub_10043196C();
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    v16 = *(id *)(a1 + 32);
    v17 = v16;
    if (!v16)
    {
      v23 = CFSTR("<nil>");
      goto LABEL_21;
    }
    v18 = (objc_class *)objc_opt_class(v16);
    v19 = NSStringFromClass(v18);
    v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
    if ((objc_opt_respondsToSelector(v17, "accessibilityIdentifier") & 1) != 0)
    {
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "performSelector:", "accessibilityIdentifier"));
      v22 = v21;
      if (v21 && !objc_msgSend(v21, "isEqualToString:", v20))
      {
        v23 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v20, v17, v22));

        goto LABEL_19;
      }

    }
    v23 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v20, v17));
LABEL_19:

LABEL_21:
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 96), "allKeys"));
    *(_DWORD *)buf = 138543618;
    v26 = v23;
    v27 = 2112;
    v28 = v24;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "[%{public}@] Still waiting to update: %@", buf, 0x16u);

  }
  return objc_msgSend(*(id *)(a1 + 32), "updateComponentsIfNeeded");
}

void sub_100AB10F4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  double v5;
  void *v6;
  void *v7;
  id v8;

  objc_msgSend(*(id *)(a1 + 32), "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "view"));
  objc_msgSend(v2, "bounds");
  objc_msgSend(*(id *)(a1 + 32), "setFrame:");

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "view"));
  objc_msgSend(v3, "addSubview:", *(_QWORD *)(a1 + 32));

  v4 = *(void **)(a1 + 32);
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "view"));
  LODWORD(v5) = 1148846080;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "_maps_constraintsEqualToEdgesOfView:priority:", v8, v5));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "allConstraints"));
  +[NSLayoutConstraint activateConstraints:](NSLayoutConstraint, "activateConstraints:", v7);

}

void sub_100AB167C(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD block[4];
  id v21;
  id v22;
  id v23;
  _QWORD v24[6];
  _QWORD v25[6];

  v24[0] = &off_101270510;
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "localizedStringForKey:value:table:", CFSTR("MapView_Venue_LookInside"), CFSTR("localized string not found"), 0));
  v25[0] = v17;
  v24[1] = &off_101270528;
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "localizedStringForKey:value:table:", CFSTR("MapView_POI_AdditionalClusterCount"), CFSTR("localized string not found"), 0));
  v25[1] = v1;
  v24[2] = &off_101270540;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("[EV Chargers Availability] No Availability"), CFSTR("localized string not found"), 0));
  v25[2] = v3;
  v24[3] = &off_101270558;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("[EV Chargers Availability] x of y available"), CFSTR("localized string not found"), 0));
  v25[3] = v5;
  v24[4] = &off_101270570;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "localizedStringForKey:value:table:", CFSTR("[EV Chargers Availability] No Status"), CFSTR("localized string not found"), 0));
  v25[4] = v7;
  v24[5] = &off_101270588;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "localizedStringForKey:value:table:", CFSTR("OFFLINE_REGION_LABEL"), CFSTR("localized string not found"), CFSTR("Offline")));
  v25[5] = v9;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v25, v24, 6));

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "preferredLocalizations"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "firstObject"));

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100AB197C;
  block[3] = &unk_1011AD238;
  v21 = *(id *)(a1 + 32);
  v22 = v10;
  v23 = v13;
  v14 = v13;
  v15 = v10;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_100AB197C(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = objc_msgSend(objc_alloc((Class)VKClientLocalizedStrings), "initWithStrings:locale:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_mapLayer"));
  objc_msgSend(v2, "setClientLocalizedStrings:", v3);

}

void sub_100AB3544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100AB3570(uint64_t a1, int a2, double a3, double a4)
{
  id *WeakRetained;
  id v8;
  NSObject *v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  double v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  void *i;
  id v20;
  id v21;
  NSObject *v22;
  _BOOL4 v23;
  void *v24;
  void *v25;
  void *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint8_t v35[128];
  uint8_t buf[4];
  id *v37;
  __int16 v38;
  double v39;
  __int16 v40;
  double v41;
  __int16 v42;
  int v43;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v8 = sub_10043196C();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134349825;
      v37 = WeakRetained;
      v38 = 2049;
      v39 = a3;
      v40 = 2049;
      v41 = a4;
      v42 = 1025;
      v43 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "[%{public}p] Got hiking coordinate result for coordinate:  %{private}f, %{private}f: %{private}d", buf, 0x26u);
    }

    v10 = (void *)objc_claimAutoreleasedReturnValue(+[_MapsCoordinateKey coordinateKeyFromCoordinate:](_MapsCoordinateKey, "coordinateKeyFromCoordinate:", a3, a4));
    v11 = sub_10043196C();
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[42], "objectForKey:", v10));
      v14 = COERCE_DOUBLE(objc_msgSend(v13, "count"));
      *(_DWORD *)buf = 134349312;
      v37 = WeakRetained;
      v38 = 2048;
      v39 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "[%{public}p] Executing %lu completion blocks", buf, 0x16u);

    }
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[42], "objectForKey:", v10, 0));
    v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
    if (v16)
    {
      v17 = v16;
      v18 = *(_QWORD *)v32;
      do
      {
        for (i = 0; i != v17; i = (char *)i + 1)
        {
          if (*(_QWORD *)v32 != v18)
            objc_enumerationMutation(v15);
          (*(void (**)(double, double))(*(_QWORD *)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)i) + 16))(a3, a4);
        }
        v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
      }
      while (v17);
    }

    objc_msgSend(WeakRetained[42], "removeObjectForKey:", v10);
    v20 = objc_msgSend(WeakRetained[42], "count");
    v21 = sub_10043196C();
    v22 = objc_claimAutoreleasedReturnValue(v21);
    v23 = os_log_type_enabled(v22, OS_LOG_TYPE_INFO);
    if (v20)
    {
      if (v23)
      {
        *(_DWORD *)buf = 134349056;
        v37 = WeakRetained;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "[%{public}p] There are more hiking coordinate checks queued up; kicking off the next one",
          buf,
          0xCu);
      }

      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[42], "keyEnumerator"));
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "allObjects"));
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "firstObject"));
      objc_msgSend(v26, "coordinate");
      v28 = v27;
      v30 = v29;

      objc_msgSend(WeakRetained, "_checkHikingCoordinate:", v28, v30);
    }
    else
    {
      if (v23)
      {
        *(_DWORD *)buf = 134349056;
        v37 = WeakRetained;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "[%{public}p] There are no more hiking coordinate checks queued up", buf, 0xCu);
      }

    }
  }

}

void sub_100AB5BF4(uint64_t a1)
{
  void *v2;
  id *v3;
  void *v4;
  void *v5;
  id v6;

  objc_msgSend(*(id *)(a1 + 32), "setTranslatesAutoresizingMaskIntoConstraints:", 1);
  objc_msgSend(*(id *)(a1 + 32), "setAutoresizingMask:", 18);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "view"));
  objc_msgSend(v2, "bounds");
  objc_msgSend(*(id *)(a1 + 32), "setFrame:");

  v3 = *(id **)(a1 + 40);
  if (v3[61]
    && (v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3[61], "superview")),
        v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "view")),
        v5,
        v4,
        v3 = *(id **)(a1 + 40),
        v4 == v5))
  {
    v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "view"));
    objc_msgSend(v6, "insertSubview:aboveSubview:", *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 488));
  }
  else
  {
    v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "view"));
    objc_msgSend(v6, "insertSubview:atIndex:", *(_QWORD *)(a1 + 32), 0);
  }

}

void sub_100AB6840(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  void *v5;
  objc_class *v6;
  NSString *v7;
  void *v8;
  void *v9;
  void *v10;
  __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  unsigned __int8 v18;
  _QWORD v19[5];
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  _BYTE *v27;
  _BYTE buf[24];
  uint64_t v29;

  v2 = sub_10043196C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(id *)(a1 + 32);
    v5 = v4;
    if (!v4)
    {
      v11 = CFSTR("<nil>");
      goto LABEL_10;
    }
    v6 = (objc_class *)objc_opt_class(v4);
    v7 = NSStringFromClass(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if ((objc_opt_respondsToSelector(v5, "accessibilityIdentifier") & 1) != 0)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "performSelector:", "accessibilityIdentifier"));
      v10 = v9;
      if (v9 && !objc_msgSend(v9, "isEqualToString:", v8))
      {
        v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v8, v5, v10));

        goto LABEL_8;
      }

    }
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v8, v5));
LABEL_8:

LABEL_10:
    v12 = *(_QWORD *)(a1 + 40);
    v13 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 138543874;
    *(_QWORD *)&buf[4] = v11;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v12;
    *(_WORD *)&buf[22] = 2112;
    v29 = v13;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%{public}@] _transitionToFullscreenViewController prep block %@ for context %@", buf, 0x20u);

  }
  if (*(_QWORD *)(a1 + 40))
  {
    objc_msgSend(*(id *)(a1 + 32), "addChildViewController:");
    objc_msgSend(*(id *)(a1 + 64), "bounds");
    objc_msgSend(*(id *)(a1 + 56), "setFrame:");
    objc_msgSend(*(id *)(a1 + 56), "setTranslatesAutoresizingMaskIntoConstraints:", 1);
    objc_msgSend(*(id *)(a1 + 56), "setAutoresizingMask:", 18);
    objc_msgSend(*(id *)(a1 + 56), "setNeedsLayout");
    objc_msgSend(*(id *)(a1 + 56), "layoutIfNeeded");
  }
  objc_msgSend(*(id *)(a1 + 72), "willMoveToParentViewController:", 0);
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2020000000;
  LOBYTE(v29) = 0;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_100AB6B84;
  v19[3] = &unk_1011E1898;
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(void **)(a1 + 40);
  v27 = buf;
  v19[4] = v14;
  v20 = v15;
  v21 = *(id *)(a1 + 48);
  v22 = *(id *)(a1 + 56);
  v23 = *(id *)(a1 + 64);
  v24 = *(id *)(a1 + 80);
  v25 = *(id *)(a1 + 72);
  v26 = *(id *)(a1 + 104);
  v16 = objc_retainBlock(v19);
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 88), "_transitionCoordinator"));
  v18 = objc_msgSend(v17, "animateAlongsideTransition:completion:", 0, v16);

  if ((v18 & 1) == 0)
    ((void (*)(_QWORD *, _QWORD))v16[2])(v16, 0);
  objc_msgSend(*(id *)(a1 + 96), "animateTransition:", *(_QWORD *)(a1 + 88));

  _Block_object_dispose(buf, 8);
}

void sub_100AB6B64(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_100AB6B84(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  id v5;
  NSObject *v6;
  _BOOL4 v7;
  id v8;
  void *v9;
  objc_class *v10;
  NSString *v11;
  void *v12;
  void *v13;
  void *v14;
  __CFString *v15;
  id v16;
  void *v17;
  objc_class *v18;
  NSString *v19;
  void *v20;
  void *v21;
  void *v22;
  __CFString *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint8_t buf[4];
  __CFString *v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;

  v3 = a2;
  v4 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24);
  v5 = sub_10043196C();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
  if (v4)
  {
    if (!v7)
    {
LABEL_20:

      goto LABEL_26;
    }
    v8 = *(id *)(a1 + 32);
    v9 = v8;
    if (!v8)
    {
      v15 = CFSTR("<nil>");
      goto LABEL_19;
    }
    v10 = (objc_class *)objc_opt_class(v8);
    v11 = NSStringFromClass(v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    if ((objc_opt_respondsToSelector(v9, "accessibilityIdentifier") & 1) != 0)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "performSelector:", "accessibilityIdentifier"));
      v14 = v13;
      if (v13 && !objc_msgSend(v13, "isEqualToString:", v12))
      {
        v15 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v12, v9, v14));

        goto LABEL_9;
      }

    }
    v15 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v12, v9));
LABEL_9:

LABEL_19:
    v24 = *(_QWORD *)(a1 + 40);
    v25 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 138543874;
    v33 = v15;
    v34 = 2112;
    v35 = v24;
    v36 = 2112;
    v37 = v25;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[%{public}@] _transitionToFullscreenViewController animate alongside completion early exit %@ %@", buf, 0x20u);

    goto LABEL_20;
  }
  if (v7)
  {
    v16 = *(id *)(a1 + 32);
    v17 = v16;
    if (!v16)
    {
      v23 = CFSTR("<nil>");
      goto LABEL_22;
    }
    v18 = (objc_class *)objc_opt_class(v16);
    v19 = NSStringFromClass(v18);
    v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
    if ((objc_opt_respondsToSelector(v17, "accessibilityIdentifier") & 1) != 0)
    {
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "performSelector:", "accessibilityIdentifier"));
      v22 = v21;
      if (v21 && !objc_msgSend(v21, "isEqualToString:", v20))
      {
        v23 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v20, v17, v22));

        goto LABEL_17;
      }

    }
    v23 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v20, v17));
LABEL_17:

LABEL_22:
    v26 = *(_QWORD *)(a1 + 40);
    v27 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 138543874;
    v33 = v23;
    v34 = 2112;
    v35 = v26;
    v36 = 2112;
    v37 = v27;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[%{public}@] _transitionToFullscreenViewController animate alongside completion %@ %@", buf, 0x20u);

  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24) = 1;
  objc_msgSend(*(id *)(a1 + 56), "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  LODWORD(v28) = 1148846080;
  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "_maps_constraintsEqualToEdgesOfView:priority:", *(_QWORD *)(a1 + 64), v28));
  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "allConstraints"));
  +[NSLayoutConstraint activateConstraints:](NSLayoutConstraint, "activateConstraints:", v30);

  objc_msgSend(*(id *)(a1 + 72), "removeFromSuperview");
  objc_msgSend(*(id *)(a1 + 80), "removeFromParentViewController");
  objc_msgSend(*(id *)(a1 + 40), "didMoveToParentViewController:", *(_QWORD *)(a1 + 32));
  v31 = *(_QWORD *)(a1 + 88);
  if (v3)
    (*(void (**)(uint64_t, _QWORD))(v31 + 16))(v31, objc_msgSend(v3, "isCancelled") ^ 1);
  else
    (*(void (**)(uint64_t, uint64_t))(v31 + 16))(v31, 1);
LABEL_26:

}

void sub_100AB7598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100AB75C4(uint64_t a1)
{
  id WeakRetained;
  id v3;
  NSObject *v4;
  id v5;
  void *v6;
  objc_class *v7;
  NSString *v8;
  void *v9;
  void *v10;
  void *v11;
  __CFString *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  id v41;
  id v42;
  id v43;
  uint64_t v44;
  void *i;
  void *v46;
  uint64_t v47;
  id v48;
  NSObject *v49;
  id v50;
  void *v51;
  objc_class *v52;
  NSString *v53;
  void *v54;
  void *v55;
  void *v56;
  __CFString *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint8_t v62[128];
  uint8_t buf[4];
  __CFString *v64;
  __int16 v65;
  id v66;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = sub_10043196C();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(id *)(a1 + 32);
    v6 = v5;
    if (!v5)
    {
      v12 = CFSTR("<nil>");
      goto LABEL_10;
    }
    v7 = (objc_class *)objc_opt_class(v5);
    v8 = NSStringFromClass(v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    if ((objc_opt_respondsToSelector(v6, "accessibilityIdentifier") & 1) != 0)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "performSelector:", "accessibilityIdentifier"));
      v11 = v10;
      if (v10 && !objc_msgSend(v10, "isEqualToString:", v9))
      {
        v12 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v9, v6, v11));

        goto LABEL_8;
      }

    }
    v12 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v9, v6));
LABEL_8:

LABEL_10:
    *(_DWORD *)buf = 138543618;
    v64 = v12;
    v65 = 2048;
    v66 = WeakRetained;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%{public}@] did complete suppress animation: %p", buf, 0x16u);

  }
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[GEOOfflineService shared](GEOOfflineService, "shared"));
  objc_msgSend(v13, "unregisterMapView:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 488));

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 520), "stopRunningNavigationAnimated:", 1);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(void **)(v14 + 32);
  *(_QWORD *)(v14 + 32) = 0;

  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(void **)(v16 + 520);
  *(_QWORD *)(v16 + 520) = 0;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 488), "setDelegate:", 0);
  v18 = *(_QWORD *)(a1 + 32);
  v19 = *(void **)(v18 + 24);
  *(_QWORD *)(v18 + 24) = 0;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 488), "removeFromSuperview");
  v20 = *(_QWORD *)(a1 + 32);
  v21 = *(void **)(v20 + 488);
  *(_QWORD *)(v20 + 488) = 0;

  v22 = *(_QWORD *)(a1 + 32);
  v23 = *(void **)(v22 + 16);
  *(_QWORD *)(v22 + 16) = 0;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 216), "removeFromSuperview");
  v24 = *(_QWORD *)(a1 + 32);
  v25 = *(void **)(v24 + 216);
  *(_QWORD *)(v24 + 216) = 0;

  objc_msgSend(*(id *)(a1 + 32), "_removeWatermarkView");
  v26 = *(_QWORD *)(a1 + 32);
  v27 = *(void **)(v26 + 416);
  *(_QWORD *)(v26 + 416) = 0;

  v28 = *(_QWORD *)(a1 + 32);
  v29 = *(void **)(v28 + 456);
  *(_QWORD *)(v28 + 456) = 0;

  v30 = *(_QWORD *)(a1 + 32);
  v31 = *(void **)(v30 + 424);
  *(_QWORD *)(v30 + 424) = 0;

  v32 = *(_QWORD *)(a1 + 32);
  v33 = *(void **)(v32 + 432);
  *(_QWORD *)(v32 + 432) = 0;

  v34 = *(_QWORD *)(a1 + 32);
  v35 = *(void **)(v34 + 232);
  *(_QWORD *)(v34 + 232) = 0;

  v36 = *(_QWORD *)(a1 + 32);
  v37 = *(void **)(v36 + 448);
  *(_QWORD *)(v36 + 448) = 0;

  v38 = *(_QWORD *)(a1 + 32);
  v39 = *(void **)(v38 + 464);
  *(_QWORD *)(v38 + 464) = 0;

  v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "overlayController"));
  objc_msgSend(v40, "installInView:containingViewController:contentLayoutGuide:mapInsetsLayoutGuide:viewportLayoutGuide:", 0, 0, 0, 0, 0);

  objc_msgSend(*(id *)(a1 + 32), "didSuppress");
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v41 = *(id *)(*(_QWORD *)(a1 + 32) + 472);
  v42 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v58, v62, 16);
  if (v42)
  {
    v43 = v42;
    v44 = *(_QWORD *)v59;
    do
    {
      for (i = 0; i != v43; i = (char *)i + 1)
      {
        if (*(_QWORD *)v59 != v44)
          objc_enumerationMutation(v41);
        v46 = *(void **)(*((_QWORD *)&v58 + 1) + 8 * (_QWORD)i);
        if ((objc_opt_respondsToSelector(v46, "chromeDidSuppress:") & 1) != 0)
          objc_msgSend(v46, "chromeDidSuppress:", *(_QWORD *)(a1 + 32));
      }
      v43 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v58, v62, 16);
    }
    while (v43);
  }

  v47 = *(_QWORD *)(a1 + 32);
  if (*(id *)(v47 + 80) == WeakRetained)
  {
    *(_QWORD *)(v47 + 80) = 0;

    if ((objc_msgSend(*(id *)(a1 + 32), "isSuppressed") & 1) == 0)
    {
      v48 = sub_10043196C();
      v49 = objc_claimAutoreleasedReturnValue(v48);
      if (!os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
LABEL_33:

        objc_msgSend(*(id *)(a1 + 32), "_unsuppress");
        goto LABEL_34;
      }
      v50 = *(id *)(a1 + 32);
      v51 = v50;
      if (!v50)
      {
        v57 = CFSTR("<nil>");
        goto LABEL_32;
      }
      v52 = (objc_class *)objc_opt_class(v50);
      v53 = NSStringFromClass(v52);
      v54 = (void *)objc_claimAutoreleasedReturnValue(v53);
      if ((objc_opt_respondsToSelector(v51, "accessibilityIdentifier") & 1) != 0)
      {
        v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "performSelector:", "accessibilityIdentifier"));
        v56 = v55;
        if (v55 && !objc_msgSend(v55, "isEqualToString:", v54))
        {
          v57 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v54, v51, v56));

          goto LABEL_29;
        }

      }
      v57 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v54, v51));
LABEL_29:

LABEL_32:
      *(_DWORD *)buf = 138543362;
      v64 = v57;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "[%{public}@] No longer suppressed at end of suppress animation, will run unsuppress now", buf, 0xCu);

      goto LABEL_33;
    }
  }
LABEL_34:

}

void sub_100AB7EA4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 104));
  _Unwind_Resume(a1);
}

void sub_100AB7ED0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  if (objc_msgSend(*(id *)(a1 + 32), "shouldAutomaticallyLoadMapView"))
    objc_msgSend(*(id *)(a1 + 32), "loadMapViewIfNeeded");
  objc_msgSend(*(id *)(a1 + 32), "_addWatermarkView");
  if (objc_msgSend(*(id *)(a1 + 32), "isInactive"))
    objc_msgSend(*(id *)(a1 + 32), "_setInactive:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 409));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "overlayController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "view"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "safeAreaLayoutGuide"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapInsetsLayoutGuide"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewportLayoutGuide"));
  objc_msgSend(v2, "installInView:containingViewController:contentLayoutGuide:mapInsetsLayoutGuide:viewportLayoutGuide:", v3, v4, v6, v7, v8);

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 520), "setSuppressed:", 0);
  v9 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v9, "addObserver:selector:name:object:", *(_QWORD *)(a1 + 32), "userDefaultsDidChange:", NSUserDefaultsDidChangeNotification, 0);

}

void sub_100AB802C(uint64_t a1)
{
  id WeakRetained;
  id v3;
  NSObject *v4;
  id v5;
  void *v6;
  objc_class *v7;
  NSString *v8;
  void *v9;
  void *v10;
  void *v11;
  __CFString *v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  void *i;
  void *v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  id v22;
  void *v23;
  objc_class *v24;
  NSString *v25;
  void *v26;
  void *v27;
  void *v28;
  __CFString *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint8_t v34[128];
  uint8_t buf[4];
  __CFString *v36;
  __int16 v37;
  id v38;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = sub_10043196C();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(id *)(a1 + 32);
    v6 = v5;
    if (!v5)
    {
      v12 = CFSTR("<nil>");
      goto LABEL_10;
    }
    v7 = (objc_class *)objc_opt_class(v5);
    v8 = NSStringFromClass(v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    if ((objc_opt_respondsToSelector(v6, "accessibilityIdentifier") & 1) != 0)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "performSelector:", "accessibilityIdentifier"));
      v11 = v10;
      if (v10 && !objc_msgSend(v10, "isEqualToString:", v9))
      {
        v12 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v9, v6, v11));

        goto LABEL_8;
      }

    }
    v12 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v9, v6));
LABEL_8:

LABEL_10:
    *(_DWORD *)buf = 138543618;
    v36 = v12;
    v37 = 2048;
    v38 = WeakRetained;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%{public}@] did complete unsuppress animation: %p", buf, 0x16u);

  }
  objc_msgSend(*(id *)(a1 + 32), "didUnsuppress");
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v13 = *(id *)(*(_QWORD *)(a1 + 32) + 472);
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v31;
    do
    {
      for (i = 0; i != v15; i = (char *)i + 1)
      {
        if (*(_QWORD *)v31 != v16)
          objc_enumerationMutation(v13);
        v18 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * (_QWORD)i);
        if ((objc_opt_respondsToSelector(v18, "chromeDidUnsuppress:") & 1) != 0)
          objc_msgSend(v18, "chromeDidUnsuppress:", *(_QWORD *)(a1 + 32));
      }
      v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
    }
    while (v15);
  }

  v19 = *(_QWORD *)(a1 + 32);
  if (*(id *)(v19 + 80) == WeakRetained)
  {
    *(_QWORD *)(v19 + 80) = 0;

    if (objc_msgSend(*(id *)(a1 + 32), "isSuppressed"))
    {
      v20 = sub_10043196C();
      v21 = objc_claimAutoreleasedReturnValue(v20);
      if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
LABEL_33:

        objc_msgSend(*(id *)(a1 + 32), "_suppress");
        goto LABEL_34;
      }
      v22 = *(id *)(a1 + 32);
      v23 = v22;
      if (!v22)
      {
        v29 = CFSTR("<nil>");
        goto LABEL_32;
      }
      v24 = (objc_class *)objc_opt_class(v22);
      v25 = NSStringFromClass(v24);
      v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
      if ((objc_opt_respondsToSelector(v23, "accessibilityIdentifier") & 1) != 0)
      {
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "performSelector:", "accessibilityIdentifier"));
        v28 = v27;
        if (v27 && !objc_msgSend(v27, "isEqualToString:", v26))
        {
          v29 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v26, v23, v28));

          goto LABEL_29;
        }

      }
      v29 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v26, v23));
LABEL_29:

LABEL_32:
      *(_DWORD *)buf = 138543362;
      v36 = v29;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "[%{public}@] Now suppressed at end of unsuppress animation, will run suppress now", buf, 0xCu);

      goto LABEL_33;
    }
  }
LABEL_34:

}

void sub_100AB96A8(uint64_t a1)
{
  void *v2;
  void *v3;
  unsigned int v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  id v10;
  void *v11;
  objc_class *v12;
  NSString *v13;
  void *v14;
  void *v15;
  void *v16;
  __CFString *v17;
  __CFString *v18;
  id v19;
  void *v20;
  objc_class *v21;
  NSString *v22;
  void *v23;
  void *v24;
  void *v25;
  __CFString *v26;
  void *v27;
  void *v28;
  _BOOL8 v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint8_t buf[4];
  __CFString *v34;
  __int16 v35;
  __CFString *v36;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "navigationDisplay"));

  if (!v2)
    return;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapView"));
  v4 = objc_msgSend(v3, "_applicationState");

  if (v4 == 2)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapView"));
    objc_msgSend(v5, "_setApplicationState:", 0);

  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contexts"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "lastObject"));

  v8 = sub_10043196C();
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(id *)(a1 + 32);
    v11 = v10;
    if (!v10)
    {
      v17 = CFSTR("<nil>");
LABEL_13:

      v18 = v17;
      v19 = v7;
      v20 = v19;
      if (!v19)
      {
        v26 = CFSTR("<nil>");
        goto LABEL_21;
      }
      v21 = (objc_class *)objc_opt_class(v19);
      v22 = NSStringFromClass(v21);
      v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
      if ((objc_opt_respondsToSelector(v20, "accessibilityIdentifier") & 1) != 0)
      {
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "performSelector:", "accessibilityIdentifier"));
        v25 = v24;
        if (v24 && !objc_msgSend(v24, "isEqualToString:", v23))
        {
          v26 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v23, v20, v25));

          goto LABEL_19;
        }

      }
      v26 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v23, v20));
LABEL_19:

LABEL_21:
      *(_DWORD *)buf = 138543618;
      v34 = v18;
      v35 = 2112;
      v36 = v26;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[%{public}@] Will stop any running navigation, no context wants it (top: %@)", buf, 0x16u);

      goto LABEL_22;
    }
    v12 = (objc_class *)objc_opt_class(v10);
    v13 = NSStringFromClass(v12);
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    if ((objc_opt_respondsToSelector(v11, "accessibilityIdentifier") & 1) != 0)
    {
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "performSelector:", "accessibilityIdentifier"));
      v16 = v15;
      if (v15 && !objc_msgSend(v15, "isEqualToString:", v14))
      {
        v17 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v14, v11, v16));

        goto LABEL_11;
      }

    }
    v17 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v14, v11));
LABEL_11:

    goto LABEL_13;
  }
LABEL_22:

  if (objc_msgSend(*(id *)(a1 + 40), "isAnimated")
    && objc_msgSend(*(id *)(a1 + 32), "isViewLoaded"))
  {
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "window"));
    v29 = v28 != 0;

  }
  else
  {
    v29 = 0;
  }
  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "navigationDisplay"));
  objc_msgSend(v30, "stopRunningNavigationAnimated:", v29);

  objc_msgSend(*(id *)(a1 + 32), "setNavigationDisplay:", 0);
  v31 = *(_QWORD *)(a1 + 32);
  v32 = *(void **)(v31 + 32);
  *(_QWORD *)(v31 + 32) = 0;

  objc_msgSend(*(id *)(a1 + 32), "setNeedsUpdateComponent:animated:", CFSTR("mapInsets"), 1);
  objc_msgSend(*(id *)(a1 + 32), "setNeedsUpdateComponent:animated:", CFSTR("routeAnnotations"), 1);
  objc_msgSend(*(id *)(a1 + 32), "setNeedsUpdateComponent:animated:", CFSTR("mapcontrols"), 1);

}

id sub_100AB9AF4(id *a1)
{
  uint64_t v2;
  void *v3;
  unsigned int v4;
  id v5;
  NSObject *v6;
  id v7;
  void *v8;
  objc_class *v9;
  NSString *v10;
  void *v11;
  void *v12;
  void *v13;
  __CFString *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  _BOOL8 v19;
  id v20;
  NSObject *v21;
  id v22;
  void *v23;
  objc_class *v24;
  NSString *v25;
  void *v26;
  void *v27;
  void *v28;
  __CFString *v29;
  __CFString *v30;
  id v31;
  void *v32;
  objc_class *v33;
  NSString *v34;
  void *v35;
  void *v36;
  void *v37;
  __CFString *v38;
  void *v39;
  ChromeNavigationDisplay *v40;
  ChromeNavigationDisplayDelegateProxy *v41;
  _QWORD *v42;
  void *v43;
  _QWORD *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  unsigned int v48;
  char v49;
  uint64_t v50;
  id v51;
  NSObject *v52;
  id v53;
  void *v54;
  objc_class *v55;
  NSString *v56;
  void *v57;
  void *v58;
  void *v59;
  __CFString *v60;
  __CFString *v61;
  id v62;
  void *v63;
  objc_class *v64;
  NSString *v65;
  void *v66;
  void *v67;
  void *v68;
  __CFString *v69;
  void *v70;
  void *v71;
  unsigned __int8 v72;
  id v73;
  NSObject *v74;
  id v75;
  void *v76;
  objc_class *v77;
  NSString *v78;
  void *v79;
  void *v80;
  void *v81;
  __CFString *v82;
  void *v83;
  void *v84;
  id v85;
  void *v86;
  void *v87;
  _QWORD v89[5];
  _QWORD v90[4];
  id v91;
  uint64_t v92;
  uint8_t buf[4];
  __CFString *v94;
  __int16 v95;
  _BYTE v96[10];

  if (objc_msgSend(a1[4], "isDisplayingNavigation"))
    v2 = 2;
  else
    v2 = 6;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "mapView"));
  v4 = objc_msgSend(v3, "_applicationState");

  if (v4 != (_DWORD)v2)
  {
    v5 = sub_10043196C();
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
LABEL_15:

      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "mapView"));
      objc_msgSend(v16, "_setApplicationState:", v2);

      goto LABEL_16;
    }
    v7 = a1[4];
    v8 = v7;
    if (!v7)
    {
      v14 = CFSTR("<nil>");
      goto LABEL_14;
    }
    v9 = (objc_class *)objc_opt_class(v7);
    v10 = NSStringFromClass(v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    if ((objc_opt_respondsToSelector(v8, "accessibilityIdentifier") & 1) != 0)
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "performSelector:", "accessibilityIdentifier"));
      v13 = v12;
      if (v12 && !objc_msgSend(v12, "isEqualToString:", v11))
      {
        v14 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v11, v8, v13));

        goto LABEL_12;
      }

    }
    v14 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v11, v8));
LABEL_12:

LABEL_14:
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "mapView"));
    *(_DWORD *)buf = 138543874;
    v94 = v14;
    v95 = 1024;
    *(_DWORD *)v96 = objc_msgSend(v15, "_applicationState");
    *(_WORD *)&v96[4] = 1024;
    *(_DWORD *)&v96[6] = v2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[%{public}@] Updating map app state from %d to %d", buf, 0x18u);

    goto LABEL_15;
  }
LABEL_16:
  if (objc_msgSend(a1[5], "isAnimated") && objc_msgSend(a1[4], "isViewLoaded"))
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "view"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "window"));
    v19 = v18 != 0;

  }
  else
  {
    v19 = 0;
  }
  v20 = sub_10043196C();
  v21 = objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    v22 = a1[4];
    v23 = v22;
    if (!v22)
    {
      v29 = CFSTR("<nil>");
LABEL_29:

      v30 = v29;
      v31 = a1[6];
      v32 = v31;
      if (!v31)
      {
        v38 = CFSTR("<nil>");
        goto LABEL_37;
      }
      v33 = (objc_class *)objc_opt_class(v31);
      v34 = NSStringFromClass(v33);
      v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
      if ((objc_opt_respondsToSelector(v32, "accessibilityIdentifier") & 1) != 0)
      {
        v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "performSelector:", "accessibilityIdentifier"));
        v37 = v36;
        if (v36 && !objc_msgSend(v36, "isEqualToString:", v35))
        {
          v38 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v35, v32, v37));

          goto LABEL_35;
        }

      }
      v38 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v35, v32));
LABEL_35:

LABEL_37:
      *(_DWORD *)buf = 138543618;
      v94 = v30;
      v95 = 2112;
      *(_QWORD *)v96 = v38;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "[%{public}@] Will start running navigation if needed, context %@ wants it", buf, 0x16u);

      goto LABEL_38;
    }
    v24 = (objc_class *)objc_opt_class(v22);
    v25 = NSStringFromClass(v24);
    v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
    if ((objc_opt_respondsToSelector(v23, "accessibilityIdentifier") & 1) != 0)
    {
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "performSelector:", "accessibilityIdentifier"));
      v28 = v27;
      if (v27 && !objc_msgSend(v27, "isEqualToString:", v26))
      {
        v29 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v26, v23, v28));

        goto LABEL_27;
      }

    }
    v29 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v26, v23));
LABEL_27:

    goto LABEL_29;
  }
LABEL_38:

  v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "navigationDisplay"));
  if (!v39)
  {
    v40 = -[ChromeNavigationDisplay initWithChromeViewController:]([ChromeNavigationDisplay alloc], "initWithChromeViewController:", a1[4]);
    objc_msgSend(a1[4], "setNavigationDisplay:", v40);

    v41 = -[ChromeDelegateProxy initWithChromeViewController:]([ChromeNavigationDisplayDelegateProxy alloc], "initWithChromeViewController:", a1[4]);
    v42 = a1[4];
    v43 = (void *)v42[4];
    v42[4] = v41;

    v44 = a1[4];
    v45 = v44[4];
    v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "navigationDisplay"));
    objc_msgSend(v46, "setDelegate:", v45);

    v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "navigationDisplay"));
    objc_msgSend(v47, "setSuppressed:", objc_msgSend(a1[4], "isSuppressed"));

    objc_msgSend(a1[4], "setNeedsUpdateComponent:animated:", CFSTR("mapInsets"), 1);
    objc_msgSend(a1[4], "setNeedsUpdateComponent:animated:", CFSTR("routeAnnotations"), 1);
    objc_msgSend(a1[4], "setNeedsUpdateComponent:animated:", CFSTR("mapcontrols"), 1);
  }
  v48 = objc_msgSend(a1[4], "isDisplayingNavigation");
  v49 = v48;
  if (v48)
    v50 = 0;
  else
    v50 = 4;
  if ((objc_opt_respondsToSelector(a1[6], "configureNavigationDisplay:") & 1) != 0)
  {
    v51 = sub_10043196C();
    v52 = objc_claimAutoreleasedReturnValue(v51);
    if (!os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
    {
LABEL_62:

      v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "navigationDisplay"));
      v90[0] = _NSConcreteStackBlock;
      v90[1] = 3221225472;
      v90[2] = sub_100ABA4E8;
      v90[3] = &unk_1011E18E8;
      v92 = v50;
      v91 = a1[6];
      objc_msgSend(v70, "configureDisplay:animated:", v90, v19);

      goto LABEL_63;
    }
    v53 = a1[4];
    v54 = v53;
    if (!v53)
    {
      v60 = CFSTR("<nil>");
LABEL_53:

      v61 = v60;
      v62 = a1[6];
      v63 = v62;
      if (!v62)
      {
        v69 = CFSTR("<nil>");
        goto LABEL_61;
      }
      v64 = (objc_class *)objc_opt_class(v62);
      v65 = NSStringFromClass(v64);
      v66 = (void *)objc_claimAutoreleasedReturnValue(v65);
      if ((objc_opt_respondsToSelector(v63, "accessibilityIdentifier") & 1) != 0)
      {
        v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "performSelector:", "accessibilityIdentifier"));
        v68 = v67;
        if (v67 && !objc_msgSend(v67, "isEqualToString:", v66))
        {
          v69 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v66, v63, v68));

          goto LABEL_59;
        }

      }
      v69 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v66, v63));
LABEL_59:

LABEL_61:
      *(_DWORD *)buf = 138543618;
      v94 = v61;
      v95 = 2112;
      *(_QWORD *)v96 = v69;
      _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "[%{public}@] Asking %@ to configure navigation display", buf, 0x16u);

      goto LABEL_62;
    }
    v55 = (objc_class *)objc_opt_class(v53);
    v56 = NSStringFromClass(v55);
    v57 = (void *)objc_claimAutoreleasedReturnValue(v56);
    if ((objc_opt_respondsToSelector(v54, "accessibilityIdentifier") & 1) != 0)
    {
      v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "performSelector:", "accessibilityIdentifier"));
      v59 = v58;
      if (v58 && !objc_msgSend(v58, "isEqualToString:", v57))
      {
        v60 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v57, v54, v59));

        goto LABEL_51;
      }

    }
    v60 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v57, v54));
LABEL_51:

    goto LABEL_53;
  }
LABEL_63:
  v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "navigationDisplay"));
  if (!objc_msgSend(v71, "isSuppressed"))
  {
LABEL_78:

    goto LABEL_79;
  }
  v72 = objc_msgSend(a1[4], "isSuppressed");

  if ((v72 & 1) == 0)
  {
    v73 = sub_10043196C();
    v74 = objc_claimAutoreleasedReturnValue(v73);
    if (!os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
    {
LABEL_77:

      v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "navigationDisplay"));
      objc_msgSend(v71, "setSuppressed:animated:", 0, v19);
      goto LABEL_78;
    }
    v75 = a1[4];
    v76 = v75;
    if (!v75)
    {
      v82 = CFSTR("<nil>");
      goto LABEL_76;
    }
    v77 = (objc_class *)objc_opt_class(v75);
    v78 = NSStringFromClass(v77);
    v79 = (void *)objc_claimAutoreleasedReturnValue(v78);
    if ((objc_opt_respondsToSelector(v76, "accessibilityIdentifier") & 1) != 0)
    {
      v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v76, "performSelector:", "accessibilityIdentifier"));
      v81 = v80;
      if (v80 && !objc_msgSend(v80, "isEqualToString:", v79))
      {
        v82 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v79, v76, v81));

        goto LABEL_72;
      }

    }
    v82 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v79, v76));
LABEL_72:

LABEL_76:
    *(_DWORD *)buf = 138543362;
    v94 = v82;
    _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "[%{public}@] Unpausing navigation display", buf, 0xCu);

    goto LABEL_77;
  }
LABEL_79:
  if ((v49 & 1) == 0)
  {
    v83 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "navigationDisplay"));
    v84 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v83, "configuration"));
    v85 = objc_msgSend(v84, "cameraStyle");

    if (v85 != (id)4)
    {
      v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "navigationDisplay"));
      v89[0] = _NSConcreteStackBlock;
      v89[1] = 3221225472;
      v89[2] = sub_100ABA540;
      v89[3] = &unk_1011E1908;
      v89[4] = 4;
      objc_msgSend(v86, "configureDisplay:animated:", v89, v19);

    }
  }
  v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "navigationDisplay"));
  objc_msgSend(v87, "startRunningNavigationAnimated:", v19);

  return objc_msgSend(a1[4], "updateMapViewFrameRate");
}

void sub_100ABA4E8(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  v4 = v3;
  if (*(_QWORD *)(a1 + 40))
  {
    objc_msgSend(v3, "setCameraStyle:");
    v3 = v4;
  }
  objc_msgSend(v3, "setRouteGeniusEntry:", 0);
  objc_msgSend(*(id *)(a1 + 32), "configureNavigationDisplay:", v4);

}

id sub_100ABA540(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "setCameraStyle:", *(_QWORD *)(a1 + 32));
}

id sub_100ABA8C0()
{
  if (qword_1014D3E80 != -1)
    dispatch_once(&qword_1014D3E80, &stru_1011E1948);
  return (id)qword_1014D3E78;
}

void sub_100ABBB6C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "updateMapViewFrameRate");

}

void sub_100ABBD80(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "updateMapViewFrameRate");

}

void sub_100ABD7FC(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  void *v5;
  objc_class *v6;
  NSString *v7;
  void *v8;
  void *v9;
  void *v10;
  __CFString *v11;
  void *v12;
  void *v13;
  id WeakRetained;
  uint8_t buf[4];
  __CFString *v16;
  __int16 v17;
  void *v18;

  v2 = sub_10043196C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(id *)(a1 + 32);
    v5 = v4;
    if (!v4)
    {
      v11 = CFSTR("<nil>");
      goto LABEL_10;
    }
    v6 = (objc_class *)objc_opt_class(v4);
    v7 = NSStringFromClass(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if ((objc_opt_respondsToSelector(v5, "accessibilityIdentifier") & 1) != 0)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "performSelector:", "accessibilityIdentifier"));
      v10 = v9;
      if (v9 && !objc_msgSend(v9, "isEqualToString:", v8))
      {
        v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v8, v5, v10));

        goto LABEL_8;
      }

    }
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v8, v5));
LABEL_8:

LABEL_10:
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "sceneIdentifierForLogging"));
    *(_DWORD *)buf = 138543618;
    v16 = v11;
    v17 = 2112;
    v18 = v13;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%{public}@] [%@] Power state changed", buf, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "updateMapViewFrameRate");

}

void sub_100ABE244(id *a1)
{
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  id v6;
  void *v7;
  objc_class *v8;
  NSString *v9;
  void *v10;
  void *v11;
  void *v12;
  __CFString *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  NSObject *v22;
  _BYTE *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  _QWORD block[5];
  id v30;
  id v31;
  _QWORD v32[4];
  NSObject *v33;
  uint8_t buf[4];
  __CFString *v35;

  if (GEOConfigGetBOOL(MapsConfig_EnableTapToRadarVKMapViewDetailedDescriptionAttachmentProvider, off_1014B4BA8))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "mapView"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_mapLayer"));

    if (!v3)
    {
LABEL_14:

      goto LABEL_15;
    }
    v4 = sub_10043196C();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
LABEL_13:

      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "view"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "sceneIdentifierForLogging"));
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("VKMapViewDetailedDescription.%p.%@.txt"), v3, v15));

      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "detailedDescription"));
      v18 = a1[5];
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[MapsRadarTextAttachment attachmentWithFileName:text:](MapsRadarTextAttachment, "attachmentWithFileName:text:", v16, v17));
      objc_msgSend(v18, "addAttachment:", v19);

      goto LABEL_14;
    }
    v6 = a1[4];
    v7 = v6;
    if (!v6)
    {
      v13 = CFSTR("<nil>");
      goto LABEL_12;
    }
    v8 = (objc_class *)objc_opt_class(v6);
    v9 = NSStringFromClass(v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    if ((objc_opt_respondsToSelector(v7, "accessibilityIdentifier") & 1) != 0)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "performSelector:", "accessibilityIdentifier"));
      v12 = v11;
      if (v11 && !objc_msgSend(v11, "isEqualToString:", v10))
      {
        v13 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v10, v7, v12));

        goto LABEL_10;
      }

    }
    v13 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v10, v7));
LABEL_10:

LABEL_12:
    *(_DWORD *)buf = 138543362;
    v35 = v13;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[%{public}@] Generating VKMapView detailedDescription attachment", buf, 0xCu);

    goto LABEL_13;
  }
LABEL_15:
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "view"));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "window"));

  v22 = dispatch_group_create();
  v23 = a1[4];
  if (v21 && !v23[408])
  {
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "view"));
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "sceneIdentifierForLogging"));
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%p.%@.png"), v23, v25));

    dispatch_group_enter(v22);
    v27 = objc_msgSend(a1[4], "desiredRadarScreenshotTypes");
    v28 = a1[5];
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    v32[2] = sub_100ABE60C;
    v32[3] = &unk_1011AC860;
    v33 = v22;
    +[MapsRadarScreenshotAttachmentHelper generateScreenshotAttachments:fromWindow:withName:radarDraft:completion:](MapsRadarScreenshotAttachmentHelper, "generateScreenshotAttachments:fromWindow:withName:radarDraft:completion:", v27, v21, v26, v28, v32);

    v23 = a1[4];
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100ABE614;
  block[3] = &unk_1011AECC0;
  block[4] = v23;
  v30 = a1[5];
  v31 = a1[6];
  dispatch_group_notify(v22, (dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_100ABE60C(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100ABE614(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  void *v5;
  objc_class *v6;
  NSString *v7;
  void *v8;
  void *v9;
  void *v10;
  __CFString *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  unsigned int v20;
  uint64_t v21;
  NSObject *v22;
  id v23;
  NSObject *v24;
  _BOOL4 v25;
  id v26;
  void *v27;
  objc_class *v28;
  NSString *v29;
  void *v30;
  void *v31;
  void *v32;
  __CFString *v33;
  id v34;
  void *v35;
  objc_class *v36;
  NSString *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  __CFString *v42;
  id v43;
  void *v44;
  uint64_t v45;
  NSObject *v46;
  void *v47;
  _QWORD block[5];
  id v49;
  _QWORD v50[4];
  NSObject *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint8_t buf[4];
  __CFString *v57;
  __int16 v58;
  void *v59;
  _BYTE v60[128];

  v2 = sub_10043196C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v45 = a1;
  if (!os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    goto LABEL_11;
  v4 = *(id *)(a1 + 32);
  v5 = v4;
  if (!v4)
  {
    v11 = CFSTR("<nil>");
    goto LABEL_10;
  }
  v6 = (objc_class *)objc_opt_class(v4);
  v7 = NSStringFromClass(v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  if ((objc_opt_respondsToSelector(v5, "accessibilityIdentifier") & 1) != 0)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "performSelector:", "accessibilityIdentifier"));
    v10 = v9;
    if (v9 && !objc_msgSend(v9, "isEqualToString:", v8))
    {
      v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v8, v5, v10));

      goto LABEL_8;
    }

  }
  v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v8, v5));
LABEL_8:

LABEL_10:
  *(_DWORD *)buf = 138543362;
  v57 = v11;
  _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%{public}@] Start querying contexts for attachments", buf, 0xCu);

  a1 = v45;
LABEL_11:

  v12 = dispatch_group_create();
  dispatch_group_enter(v12);
  v55 = 0u;
  v53 = 0u;
  v54 = 0u;
  v52 = 0u;
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contexts"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "reverseObjectEnumerator"));

  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v52, v60, 16);
  if (!v15)
    goto LABEL_51;
  v16 = v15;
  v17 = *(_QWORD *)v53;
  v46 = v12;
  v47 = v14;
  do
  {
    v18 = 0;
    do
    {
      if (*(_QWORD *)v53 != v17)
        objc_enumerationMutation(v14);
      v19 = *(void **)(*((_QWORD *)&v52 + 1) + 8 * (_QWORD)v18);
      if ((objc_opt_respondsToSelector(v19, "provideAttachmentsForRadarDraft:withCompletion:") & 1) != 0)
      {
        v20 = (objc_opt_respondsToSelector(v19, "supportsTTRWhenNotTopContext") & 1) != 0
            ? objc_msgSend(v19, "supportsTTRWhenNotTopContext")
            : 0;
        if ((objc_msgSend(*(id *)(a1 + 32), "isTopContext:", v19) & 1) != 0 || v20)
        {
          dispatch_group_enter(v12);
          v21 = *(_QWORD *)(a1 + 40);
          v50[0] = _NSConcreteStackBlock;
          v50[1] = 3221225472;
          v50[2] = sub_100ABEC10;
          v50[3] = &unk_1011AC860;
          v22 = v12;
          v51 = v22;
          LODWORD(v21) = objc_msgSend(v19, "provideAttachmentsForRadarDraft:withCompletion:", v21, v50);
          v23 = sub_10043196C();
          v24 = objc_claimAutoreleasedReturnValue(v23);
          v25 = os_log_type_enabled(v24, OS_LOG_TYPE_INFO);
          if ((_DWORD)v21)
          {
            if (v25)
            {
              v26 = *(id *)(a1 + 32);
              v27 = v26;
              if (v26)
              {
                v28 = (objc_class *)objc_opt_class(v26);
                v29 = NSStringFromClass(v28);
                v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
                if ((objc_opt_respondsToSelector(v27, "accessibilityIdentifier") & 1) == 0)
                  goto LABEL_29;
                v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "performSelector:", "accessibilityIdentifier"));
                v32 = v31;
                if (v31 && !objc_msgSend(v31, "isEqualToString:", v30))
                {
                  v33 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v30, v27, v32));

                  a1 = v45;
                }
                else
                {

                  a1 = v45;
LABEL_29:
                  v33 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v30, v27));
                }

              }
              else
              {
                v33 = CFSTR("<nil>");
              }

              *(_DWORD *)buf = 138543618;
              v57 = v33;
              v58 = 2112;
              v59 = v19;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "[%{public}@] Waiting for context %@ to provide attachments", buf, 0x16u);

              v12 = v46;
            }

LABEL_45:
            v14 = v47;
            goto LABEL_46;
          }
          if (v25)
          {
            v34 = *(id *)(a1 + 32);
            v35 = v34;
            if (v34)
            {
              v36 = (objc_class *)objc_opt_class(v34);
              v37 = NSStringFromClass(v36);
              v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
              if ((objc_opt_respondsToSelector(v35, "accessibilityIdentifier") & 1) == 0)
                goto LABEL_37;
              v39 = v38;
              v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "performSelector:", "accessibilityIdentifier"));
              v41 = v40;
              if (v40 && !objc_msgSend(v40, "isEqualToString:", v39))
              {
                v44 = v39;
                v42 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v39, v35, v41));

                v38 = v44;
              }
              else
              {

                v38 = v39;
LABEL_37:
                v42 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v38, v35));
              }

            }
            else
            {
              v42 = CFSTR("<nil>");
            }

            *(_DWORD *)buf = 138543618;
            v57 = v42;
            v58 = 2112;
            v59 = v19;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "[%{public}@] Context %@ will not provide attachments", buf, 0x16u);

            a1 = v45;
            v12 = v46;
          }

          dispatch_group_leave(v22);
          goto LABEL_45;
        }
      }
LABEL_46:
      v18 = (char *)v18 + 1;
    }
    while (v16 != v18);
    v43 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v52, v60, 16);
    v16 = v43;
  }
  while (v43);
LABEL_51:

  dispatch_group_leave(v12);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100ABEC80;
  block[3] = &unk_1011AE240;
  block[4] = *(_QWORD *)(a1 + 32);
  v49 = *(id *)(a1 + 48);
  dispatch_group_notify(v12, (dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_100ABEC10(uint64_t a1)
{
  _QWORD block[4];
  id v2;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100ABEC78;
  block[3] = &unk_1011AC860;
  v2 = *(id *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_100ABEC78(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_100ABEC80(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  void *v5;
  objc_class *v6;
  NSString *v7;
  void *v8;
  void *v9;
  void *v10;
  __CFString *v11;
  uint8_t buf[4];
  __CFString *v14;

  v2 = sub_10043196C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    v4 = *(id *)(a1 + 32);
    v5 = v4;
    if (!v4)
    {
      v11 = CFSTR("<nil>");
      goto LABEL_10;
    }
    v6 = (objc_class *)objc_opt_class(v4);
    v7 = NSStringFromClass(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if ((objc_opt_respondsToSelector(v5, "accessibilityIdentifier") & 1) != 0)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "performSelector:", "accessibilityIdentifier"));
      v10 = v9;
      if (v9 && !objc_msgSend(v9, "isEqualToString:", v8))
      {
        v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v8, v5, v10));

        goto LABEL_8;
      }

    }
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v8, v5));
LABEL_8:

LABEL_10:
    *(_DWORD *)buf = 138543362;
    v14 = v11;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[%{public}@] Finished generating radar attachments", buf, 0xCu);

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100ABF3B4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "MapsChromeComponentUpdates");
  v2 = (void *)qword_1014D3E68;
  qword_1014D3E68 = (uint64_t)v1;

}

void sub_100ABF3E4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "MapsRegionChange");
  v2 = (void *)qword_1014D3E78;
  qword_1014D3E78 = (uint64_t)v1;

}

const __CFString *sub_100ABF414(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR(".Unknown");
  else
    return *(&off_1011E1968 + a1);
}

const __CFString *sub_100ABF438(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR(".Unknown");
  else
    return *(&off_1011E1980 + a1);
}

void sub_100ABFF80(id a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_1014D3E88;
  qword_1014D3E88 = (uint64_t)v1;

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSLocale autoupdatingCurrentLocale](NSLocale, "autoupdatingCurrentLocale"));
  objc_msgSend((id)qword_1014D3E88, "setLocale:", v3);

  objc_msgSend((id)qword_1014D3E88, "setTimeStyle:", 1);
}

void sub_100AC02C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100AC02E4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100AC02F4(uint64_t a1)
{

}

void sub_100AC02FC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  _QWORD block[4];
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;

  v5 = a2;
  v6 = a3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100AC03D4;
  block[3] = &unk_1011E19C0;
  v7 = *(_QWORD *)(a1 + 48);
  v11 = v6;
  v15 = v7;
  v12 = *(id *)(a1 + 32);
  v13 = v5;
  v14 = *(id *)(a1 + 40);
  v8 = v5;
  v9 = v6;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_100AC03D4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id *v4;
  uint64_t v5;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v5 = *(_QWORD *)(v3 + 40);
    v4 = (id *)(v3 + 40);
    if (!v5)
      objc_storeStrong(v4, v2);
  }
  objc_msgSend(*(id *)(a1 + 40), "addObjectsFromArray:", *(_QWORD *)(a1 + 48));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_100AC0418(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  v5 = a2;
  v6 = a3;
  if (objc_msgSend(v5, "count"))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(v5, "count")));
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v8 = v5;
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v15;
      do
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v15 != v11)
            objc_enumerationMutation(v8);
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)v12), "locationOfInterest", (_QWORD)v14));
          if (v13)
            objc_msgSend(v7, "addObject:", v13);

          v12 = (char *)v12 + 1;
        }
        while (v10 != v12);
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      }
      while (v10);
    }

  }
  else
  {
    v7 = 0;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_100AC0598(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
  {
    (*(void (**)(_QWORD, _QWORD))(v1 + 16))(*(_QWORD *)(a1 + 40), 0);
  }
  else
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allObjects"));
    (*(void (**)(uint64_t, id, _QWORD))(v1 + 16))(v1, v2, 0);

  }
}

void sub_100AC0840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100AC0874(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  _QWORD v4[4];
  id v5;
  id v6;

  v2 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100AC0930;
  v4[3] = &unk_1011AD1E8;
  objc_copyWeak(&v6, v2);
  v5 = *(id *)(a1 + 32);
  objc_msgSend(WeakRetained, "addFullyDrawnCallback:", v4);

  objc_destroyWeak(&v6);
}

void sub_100AC091C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100AC0930(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "finishedSerialSubTest:", *(_QWORD *)(a1 + 32));

}

id sub_100AC113C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id *v7;
  id *WeakRetained;
  id *v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v23;
  _QWORD v24[4];
  id v25;
  _QWORD v26[5];
  id v27;
  id v28;
  id v29;

  v5 = a2;
  v6 = a3;
  v7 = (id *)(a1 + 32);
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v9 = WeakRetained;
  if (WeakRetained)
  {
    v10 = WeakRetained[4];
    if (v10)
    {
      v11 = v10;
    }
    else
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "virtualGarage"));
      if (v12)
      {
        v23 = v12;
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "vehicles"));
        if ((objc_msgSend(v9, "_shouldDefaultToNoSelection") & 1) != 0)
          v14 = 0;
        else
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "selectedVehicle"));
        v15 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", (char *)objc_msgSend(v13, "count") + 1);
        v26[0] = _NSConcreteStackBlock;
        v26[1] = 3221225472;
        v26[2] = sub_100AC1444;
        v26[3] = &unk_1011E1A38;
        objc_copyWeak(&v29, v7);
        v26[4] = v9;
        v16 = v14;
        v27 = v16;
        v17 = v15;
        v28 = v17;
        objc_msgSend(v13, "enumerateObjectsUsingBlock:", v26);
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_titleForDifferentCar"));
        v24[0] = _NSConcreteStackBlock;
        v24[1] = 3221225472;
        v24[2] = sub_100AC16D4;
        v24[3] = &unk_1011AF8A0;
        objc_copyWeak(&v25, v7);
        v19 = (void *)objc_claimAutoreleasedReturnValue(+[UIAction actionWithTitle:image:identifier:handler:](UIAction, "actionWithTitle:image:identifier:handler:", v18, 0, 0, v24));

        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_attributedTitleForVehicle:", 0));
        objc_msgSend(v19, "setAttributedTitle:", v20);

        objc_msgSend(v19, "setAccessibilityIdentifier:", CFSTR("RefinementButtonVehicleDifferentCar"));
        objc_msgSend(v19, "setState:", v16 == 0);
        objc_msgSend(v17, "addObject:", v19);
        v21 = (void *)objc_claimAutoreleasedReturnValue(+[UIMenu menuWithTitle:image:identifier:options:children:](UIMenu, "menuWithTitle:image:identifier:options:children:", &stru_1011EB268, 0, 0, 32, v17));
        if ((objc_msgSend(v9, "_shouldDefaultToNoSelection") & 1) == 0)
          objc_storeStrong(v9 + 4, v21);
        v11 = v21;

        objc_destroyWeak(&v25);
        objc_destroyWeak(&v29);

        v12 = v23;
      }
      else
      {
        v11 = 0;
      }

    }
  }
  else
  {
    v11 = 0;
  }

  return v11;
}

void sub_100AC1418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, id *a11)
{
  objc_destroyWeak(location);
  objc_destroyWeak(a11);
  _Unwind_Resume(a1);
}

void sub_100AC1444(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v11[4];
  id v12;
  id v13;

  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "combinedDisplayName"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100AC15B4;
  v11[3] = &unk_1011ACEC0;
  objc_copyWeak(&v13, (id *)(a1 + 56));
  v7 = v5;
  v12 = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[UIAction actionWithTitle:image:identifier:handler:](UIAction, "actionWithTitle:image:identifier:handler:", v6, 0, 0, v11));

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_attributedTitleForVehicle:", v7));
  objc_msgSend(v8, "setAttributedTitle:", v9);

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("RefinementButtonVehicle"), "stringByAppendingFormat:", CFSTR("%lu"), a3 + 1));
  objc_msgSend(v8, "setAccessibilityIdentifier:", v10);

  objc_msgSend(v8, "setState:", objc_msgSend(v7, "isEqual:", *(_QWORD *)(a1 + 40)));
  objc_msgSend(*(id *)(a1 + 48), "addObject:", v8);

  objc_destroyWeak(&v13);
}

void sub_100AC159C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100AC15B4(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  unsigned int v4;
  id v5;
  NSObject *v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v4 = objc_msgSend(WeakRetained, "_shouldDefaultToNoSelection");
    v5 = sub_10043214C();
    v6 = objc_claimAutoreleasedReturnValue(v5);
    v7 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
    if (v4)
    {
      if (v7)
      {
        v8 = *(_QWORD *)(a1 + 32);
        v10 = 138412290;
        v11 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[Options] _shouldDefaultToNoSelection is YES, we will not select vehicle: %@", (uint8_t *)&v10, 0xCu);
      }

    }
    else
    {
      if (v7)
      {
        v9 = *(_QWORD *)(a1 + 32);
        v10 = 138412290;
        v11 = v9;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[Options] Selected vehicle: %@", (uint8_t *)&v10, 0xCu);
      }

      objc_msgSend(v3, "setSelectedVehicle:", *(_QWORD *)(a1 + 32));
    }
  }

}

void sub_100AC16D4(uint64_t a1)
{
  id WeakRetained;
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = sub_10043214C();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[Options] Removed selected vehicle", v4, 2u);
    }

    objc_msgSend(WeakRetained, "setSelectedVehicle:", 0);
  }

}

const __CFString *sub_100AC246C(unint64_t a1)
{
  if (a1 > 7)
    return &stru_1011EB268;
  else
    return off_1011E1A90[a1];
}

void sub_100AC2CD8(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v3, "postNotificationName:object:", CFSTR("PPTTest_CarSearchResultsModeController_DidDisplaySearchResults"), *(_QWORD *)(a1 + 32));

    WeakRetained = v4;
  }

}

id sub_100AC3220(uint64_t a1, uint64_t a2, id a3)
{
  uint64_t v3;
  uint64_t v4;
  id v5;

  if ((unint64_t)(a2 - 2) < 2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = 88;
    goto LABEL_6;
  }
  if (a2 == 1)
  {
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tableView", a3));
    goto LABEL_8;
  }
  if (!a2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = 96;
LABEL_6:
    v5 = *(id *)(v3 + v4);
LABEL_8:
    a3 = v5;
  }
  return a3;
}

id sub_100AC3284(uint64_t a1, uint64_t a2)
{
  void *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v9;
  _QWORD v10[2];
  _QWORD v11[2];
  _QWORD v12[2];

  if ((unint64_t)(a2 - 2) < 2)
  {
    v6 = *(_QWORD **)(a1 + 32);
    v11[0] = v6[12];
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "tableView"));
    v11[1] = v4;
    v5 = v11;
    goto LABEL_6;
  }
  if (a2 == 1)
  {
    v9 = *(_QWORD *)(a1 + 32);
    v10[0] = *(_QWORD *)(v9 + 88);
    v10[1] = *(_QWORD *)(v9 + 96);
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v10, 2));
  }
  else if (!a2)
  {
    v3 = *(_QWORD **)(a1 + 32);
    v12[0] = v3[11];
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "tableView"));
    v12[1] = v4;
    v5 = v12;
LABEL_6:
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v5, 2));

    return v7;
  }
  return v2;
}

id sub_100AC33A4(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  int *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  _QWORD v34[6];

  if ((unint64_t)(a2 - 2) < 2)
  {
    v6 = &OBJC_IVAR___CarSearchResultsCardViewController__errorLabel;
LABEL_7:
    v7 = *(id *)(*(_QWORD *)(a1 + 32) + *v6);
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "topAnchor"));
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "topAnchor"));
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "constraintGreaterThanOrEqualToAnchor:constant:", v29, 10.0));
    v34[0] = v28;
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "bottomAnchor"));
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "bottomAnchor"));
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "constraintLessThanOrEqualToAnchor:constant:", v25, 10.0));
    v34[1] = v24;
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "leadingAnchor"));
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "leadingAnchor"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "constraintGreaterThanOrEqualToAnchor:constant:", v21, 10.0));
    v34[2] = v20;
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "trailingAnchor"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "trailingAnchor"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "constraintLessThanOrEqualToAnchor:constant:", v17, 10.0));
    v34[3] = v8;
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "centerXAnchor"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "centerXAnchor"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "constraintEqualToAnchor:", v11));
    v34[4] = v12;
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "centerYAnchor"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "centerYAnchor"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "constraintEqualToAnchor:", v15));
    v34[5] = v16;
    v32 = (id)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v34, 6));

    return v32;
  }
  if (!a2)
  {
    v6 = &OBJC_IVAR___CarSearchResultsCardViewController__loadingStackView;
    goto LABEL_7;
  }
  if (a2 == 1)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tableView"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
    v33 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "_maps_constraintsForCenteringInView:", v4));

    return v33;
  }
  return v32;
}

id sub_100AC3708(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 1.0);
  return objc_msgSend(*(id *)(a1 + 40), "enumerateObjectsUsingBlock:", &stru_1011E1B40);
}

void sub_100AC373C(id a1, UIView *a2, unint64_t a3, BOOL *a4)
{
  -[UIView setAlpha:](a2, "setAlpha:", a3, a4, 0.0);
}

id *sub_100AC3748(id *result)
{
  id *v1;

  if (*((id *)result[4] + 10) == result[6])
  {
    v1 = result;
    objc_msgSend(result[5], "enumerateObjectsUsingBlock:", &stru_1011E1B60);
    result = (id *)v1[4];
    if (result[10] == (id)1)
      return (id *)objc_msgSend(result, "continueQuickRouteETAs");
  }
  return result;
}

void sub_100AC37AC(id a1, UIView *a2, unint64_t a3, BOOL *a4)
{
  -[UIView removeFromSuperview](a2, "removeFromSuperview", a3, a4);
}

NSString *__cdecl sub_100AC3FA4(id a1, SearchResult *a2, unint64_t a3)
{
  void *v3;
  void *v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(-[SearchResult mapItem](a2, "mapItem", a3));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%llu"), objc_msgSend(v3, "_muid")));

  return (NSString *)v4;
}

id sub_100AC439C()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1014D3E98;
  v7 = qword_1014D3E98;
  if (!qword_1014D3E98)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100AC48A0;
    v3[3] = &unk_1011AFF60;
    v3[4] = &v4;
    sub_100AC48A0((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100AC443C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100AC4454(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finishedTest");
}

id sub_100AC445C()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1014D3EA8;
  v7 = qword_1014D3EA8;
  if (!qword_1014D3EA8)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100AC49C8;
    v3[3] = &unk_1011AFF60;
    v3[4] = &v4;
    sub_100AC49C8((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100AC44FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100AC4794(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  _QWORD v8[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "testCoordinator"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "mapViewForPPTTest"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "window"));

  v5 = objc_alloc((Class)sub_100AC439C());
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "testName"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100AC4898;
  v8[3] = &unk_1011AC860;
  v8[4] = *(_QWORD *)(a1 + 32);
  v7 = objc_msgSend(v5, "initWithTestName:window:completionHandler:", v6, v4, v8);

  objc_msgSend(v7, "setMinimumWindowSize:", 300.0, 300.0);
  objc_msgSend(v7, "setMaximumWindowSize:", 600.0, 600.0);
  objc_msgSend(sub_100AC445C(), "runTestWithParameters:", v7);

}

id sub_100AC4898(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finishedTest");
}

void sub_100AC48A0(uint64_t a1)
{
  sub_100AC490C();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("RPTResizeTestParameters");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1014D3E98 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np("Unable to find class %s", "RPTResizeTestParameters");
    sub_100AC490C();
  }
}

void sub_100AC490C()
{
  char *v0;
  char *v1;
  __int128 v2;
  uint64_t v3;

  v1 = 0;
  if (!qword_1014D3EA0)
  {
    v2 = off_1011E1BE8;
    v3 = 0;
    qword_1014D3EA0 = _sl_dlopen(&v2, &v1);
    v0 = v1;
    if (qword_1014D3EA0)
    {
      if (!v1)
        return;
    }
    else
    {
      v0 = (char *)abort_report_np("%s", v1);
    }
    free(v0);
  }
}

GuidanceSearchResultsViewModel *sub_100AC49C8(uint64_t a1)
{
  GuidanceSearchResultsViewModel *result;
  GuidanceSearchResultsViewModel *v3;
  SEL v4;
  id v5;
  id v6;
  id v7;
  id v8;

  sub_100AC490C();
  result = (GuidanceSearchResultsViewModel *)objc_getClass("RPTTestRunner");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1014D3EA8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = (GuidanceSearchResultsViewModel *)abort_report_np("Unable to find class %s", "RPTTestRunner");
    return -[GuidanceSearchResultsViewModel initWithDataProvider:navActionCoordinator:routeInfoProvider:mapItemDisplayer:](v3, v4, v5, v6, v7, v8);
  }
  return result;
}

void sub_100AC52EC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;
  id *v3;

  v3 = v1;
  objc_destroyWeak(v3);
  objc_destroyWeak((id *)(v2 - 64));
  _Unwind_Resume(a1);
}

void sub_100AC5340(uint64_t a1, void *a2, void *a3)
{
  id *v4;
  id v5;
  id v6;
  id WeakRetained;

  v4 = (id *)(a1 + 32);
  v5 = a3;
  v6 = a2;
  WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend(WeakRetained, "setLoading:", 0);
  objc_msgSend(WeakRetained, "_handleResults:error:", v6, v5);

}

void sub_100AC53B0(uint64_t a1, void *a2, void *a3)
{
  id *v4;
  id v5;
  id v6;
  id WeakRetained;

  v4 = (id *)(a1 + 32);
  v5 = a3;
  v6 = a2;
  WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend(WeakRetained, "setLoading:", 0);
  objc_msgSend(WeakRetained, "_handleResults:error:", v6, v5);

}

void sub_100AC7208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100AC722C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  _QWORD block[4];
  id v10;
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100AC72F0;
  block[3] = &unk_1011AFF10;
  objc_copyWeak(&v12, (id *)(a1 + 32));
  v10 = v5;
  v11 = v6;
  v7 = v6;
  v8 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  objc_destroyWeak(&v12);
}

void sub_100AC72F0(uint64_t a1)
{
  id *WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  unsigned int v6;
  id v7;
  NSObject *v8;
  void *v9;
  uint8_t v10[16];

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v3 = *(void **)(a1 + 32);
    if (!v3
      || (v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier")),
          v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[8], "identifier")),
          v6 = objc_msgSend(v4, "isEqualToString:", v5),
          v5,
          v4,
          v6))
    {
      objc_msgSend(WeakRetained, "setReloading:", 0);
      if (*(_QWORD *)(a1 + 40) || !*(_QWORD *)(a1 + 32))
      {
        v7 = sub_1004326FC();
        v8 = objc_claimAutoreleasedReturnValue(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v10 = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to get latest SoC for vehicle.", v10, 2u);
        }

        v9 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
        objc_msgSend(v9, "captureUserAction:onTarget:eventValue:", 6094, 0, 0);

      }
      else
      {
        objc_msgSend(WeakRetained, "setVehicle:");
      }
    }
  }

}

int64_t sub_100ACC590(id a1, CarClusterUpdateManeuverInfo *a2, CarClusterUpdateManeuverInfo *a3)
{
  CarClusterUpdateManeuverInfo *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[CarClusterUpdateManeuverInfo guidanceEvent](a2, "guidanceEvent"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v5, "stackRanking")));
  v7 = (void *)objc_claimAutoreleasedReturnValue(-[CarClusterUpdateManeuverInfo guidanceEvent](v4, "guidanceEvent"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v7, "stackRanking")));
  v9 = objc_msgSend(v6, "compare:", v8);

  return (int64_t)v9;
}

void sub_100ACC64C(id a1, CarClusterUpdateManeuverInfo *a2, unint64_t a3, BOOL *a4)
{
  -[CarClusterUpdateManeuverInfo setIsSecondary:](a2, "setIsSecondary:", a3 != 0, a4);
}

void sub_100ACD63C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (objc_msgSend(WeakRetained, "updateRemainingTime:", *(double *)(a1 + 40)))
    objc_msgSend(WeakRetained, "sendRouteGuidance");

}

BOOL sub_100ACD858(id a1, GEOComposedGuidanceEvent *a2, NSDictionary *a3)
{
  return -[GEOComposedGuidanceEvent hasSignGuidance](a2, "hasSignGuidance", a3);
}

BOOL sub_100ACD8C8(id a1, GEOComposedGuidanceEvent *a2, NSDictionary *a3)
{
  void *v3;
  BOOL v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(-[GEOComposedGuidanceEvent lanes](a2, "lanes", a3));
  v4 = objc_msgSend(v3, "count") != 0;

  return v4;
}

void sub_100ACDB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100ACE30C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100ACE340(uint64_t a1, uint64_t a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "sizeForFilter:", a2);
  v4 = v3;
  v6 = v5;
  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v3
                                                              + *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8)
                                                                          + 24);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutDimension absoluteDimension:](NSCollectionLayoutDimension, "absoluteDimension:", v3));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutDimension absoluteDimension:](NSCollectionLayoutDimension, "absoluteDimension:", v6));
  v14 = (id)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutSize sizeWithWidthDimension:heightDimension:](NSCollectionLayoutSize, "sizeWithWidthDimension:heightDimension:", v7, v8));

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutItem itemWithLayoutSize:](NSCollectionLayoutItem, "itemWithLayoutSize:", v14));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "defaultHeight");
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutDimension estimatedDimension:](NSCollectionLayoutDimension, "estimatedDimension:"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutDimension absoluteDimension:](NSCollectionLayoutDimension, "absoluteDimension:", v4));
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutSize sizeWithWidthDimension:heightDimension:](NSCollectionLayoutSize, "sizeWithWidthDimension:heightDimension:", v11, v10));
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutGroup horizontalGroupWithLayoutSize:subitem:count:](NSCollectionLayoutGroup, "horizontalGroupWithLayoutSize:subitem:count:", v12, v9, 1));
  objc_msgSend(*(id *)(a1 + 40), "addObject:", v13);

}

double sub_100ACEDC0(uint64_t a1, void *a2)
{
  if (objc_msgSend(a2, "row") == (id)(*(_QWORD *)(a1 + 32) - 1))
    return _UICollectionViewListSectionSeparatorInsetHidden[0];
  else
    return _UICollectionViewListLayoutSectionAutomaticDimension;
}

double sub_100ACF18C(uint64_t a1, void *a2)
{
  if (objc_msgSend(a2, "row") == (id)(*(_QWORD *)(a1 + 32) - 1))
    return _UICollectionViewListSectionSeparatorInsetHidden[0];
  else
    return _UICollectionViewListLayoutSectionAutomaticDimension;
}

void sub_100ACF5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

BOOL sub_100ACF89C(id a1, _MXExtension *a2)
{
  _MXExtension *v2;
  void *v3;
  unsigned int v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(-[_MXExtension extensionPointIdentifier](v2, "extensionPointIdentifier"));
  v4 = objc_msgSend(v3, "isEqualToString:", INIntentsServiceExtensionPointName);

  if (v4)
  {
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[_MXExtensionManager _maps_ridesharingRequiredIntentClassesForNonUIHandling](_MXExtensionManager, "_maps_ridesharingRequiredIntentClassesForNonUIHandling", 0));
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v12;
      while (2)
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(_QWORD *)v12 != v8)
            objc_enumerationMutation(v5);
          if (!-[_MXExtension canSupportIntentClass:](v2, "canSupportIntentClass:", *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)i)))
          {
            LOBYTE(v4) = 0;
            goto LABEL_12;
          }
        }
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
        if (v7)
          continue;
        break;
      }
    }
    LOBYTE(v4) = 1;
LABEL_12:

  }
  return v4;
}

void sub_100ACFB78(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *i;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  RideBookingApplication *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  char *v18;
  NSObject *v19;
  uint64_t Log;
  char *v21;
  NSObject *v22;
  id v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  NSMutableArray *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint8_t buf[4];
  char *v35;
  __int16 v36;
  NSObject *v37;
  _BYTE v38[128];

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 8) = 0;
  v29 = objc_opt_new(NSMutableArray);
  +[_MXExtensionManager _maps_updateRideBookingExtensions:](_MXExtensionManager, "_maps_updateRideBookingExtensions:", *(_QWORD *)(a1 + 40));
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = a1;
  v2 = *(id *)(a1 + 40);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v31;
    v6 = DefaultLoggingSubsystem;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v31 != v5)
          objc_enumerationMutation(v2);
        v8 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * (_QWORD)i);
        v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "_containingAppIdentifer"));
        if (v9
          && (v10 = (void *)v9,
              v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "extensionPointIdentifier")),
              v11,
              v10,
              v11))
        {
          v12 = -[RideBookingApplication initWithExtension:]([RideBookingApplication alloc], "initWithExtension:", v8);
          v13 = objc_claimAutoreleasedReturnValue(-[RideBookingApplication identifier](v12, "identifier"));
          if (v13)
          {
            v14 = (void *)v13;
            v15 = (void *)objc_claimAutoreleasedReturnValue(-[RideBookingApplication identifier](v12, "identifier"));
            v16 = objc_msgSend(v15, "length");

            if (v16)
            {
              objc_msgSend(*(id *)(*(_QWORD *)(v28 + 32) + 48), "registerAppTracker:");
              -[NSMutableArray addObject:](v29, "addObject:", v12);
              goto LABEL_16;
            }
          }
          Log = GEOFindOrCreateLog(v6, "RideBooking");
          v19 = objc_claimAutoreleasedReturnValue(Log);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
            v21 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingApplication/RideBookingApplicationFinder.m");
            v22 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Application Identifier is nil for Application %@. Skipping."), v12);
            *(_DWORD *)buf = 136315394;
            v35 = v21;
            v36 = 2112;
            v37 = v22;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "{RBError}{%s}: %@", buf, 0x16u);

          }
        }
        else
        {
          v17 = GEOFindOrCreateLog(v6, "RideBooking");
          v12 = (RideBookingApplication *)objc_claimAutoreleasedReturnValue(v17);
          if (!os_log_type_enabled(&v12->super, OS_LOG_TYPE_INFO))
            goto LABEL_16;
          v18 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingApplication/RideBookingApplicationFinder.m");
          v19 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Containing app identifier for extension %@ is nil. Skipping."), v8);
          *(_DWORD *)buf = 136315394;
          v35 = v18;
          v36 = 2112;
          v37 = v19;
          _os_log_impl((void *)&_mh_execute_header, &v12->super, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);
        }

LABEL_16:
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
    }
    while (v4);
  }

  v23 = -[NSMutableArray copy](v29, "copy");
  v24 = *(_QWORD *)(v28 + 32);
  v25 = *(void **)(v24 + 32);
  *(_QWORD *)(v24 + 32) = v23;

  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v28 + 32), "delegate"));
  v27 = -[NSMutableArray copy](v29, "copy");
  objc_msgSend(v26, "rideBookingApplicationsDidChange:", v27);

}

void sub_100ACFF50(uint64_t a1)
{
  uint64_t Log;
  NSObject *v3;
  char *v4;
  id v5;
  uint8_t buf[4];
  char *v7;
  __int16 v8;
  id v9;

  Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
  v3 = objc_claimAutoreleasedReturnValue(Log);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v4 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Ride Booking/RideBookingApplication/RideBookingApplicationFinder.m");
    v5 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("_MXExtensionManager gave error: %@"), *(_QWORD *)(a1 + 32));
    *(_DWORD *)buf = 136315394;
    v7 = v4;
    v8 = 2112;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "{RBError}{%s}: %@", buf, 0x16u);

  }
  *(_BYTE *)(*(_QWORD *)(a1 + 40) + 8) = 0;
}

void sub_100AD0610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  char a68;
  uint64_t v68;

  _Block_object_dispose(&a56, 8);
  _Block_object_dispose(&a62, 8);
  _Block_object_dispose(&a68, 8);
  _Block_object_dispose((const void *)(v68 - 248), 8);
  _Block_object_dispose((const void *)(v68 - 200), 8);
  _Block_object_dispose((const void *)(v68 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100AD0668(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100AD0678(uint64_t a1)
{

}

void sub_100AD0680(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_100AD06CC(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_100AD0718(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_100AD0764(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void **v18;
  uint64_t v19;
  id (*v20)(uint64_t, void *);
  void *v21;
  uint64_t v22;

  v3 = a2;
  v18 = _NSConcreteStackBlock;
  v19 = 3221225472;
  v20 = sub_100AD0D68;
  v21 = &unk_1011B9D20;
  v22 = 2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithBlock:](NSPredicate, "predicateWithBlock:", &v18));
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "filteredArrayUsingPredicate:", v4));

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  v18 = _NSConcreteStackBlock;
  v19 = 3221225472;
  v20 = sub_100AD0D68;
  v21 = &unk_1011B9D20;
  v22 = 3;
  v8 = v3;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithBlock:](NSPredicate, "predicateWithBlock:", &v18));
  v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "filteredArrayUsingPredicate:", v9));

  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = v10;

  v18 = _NSConcreteStackBlock;
  v19 = 3221225472;
  v20 = sub_100AD0D68;
  v21 = &unk_1011B9D20;
  v22 = 5;
  v13 = v8;
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithBlock:](NSPredicate, "predicateWithBlock:", &v18));
  v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "filteredArrayUsingPredicate:", v14));

  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v17 = *(void **)(v16 + 40);
  *(_QWORD *)(v16 + 40) = v15;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100AD08FC(uint64_t a1)
{
  void *v2;
  __int128 v3;
  _QWORD v4[4];
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char v14;

  v2 = *(void **)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100AD09F0;
  v4[3] = &unk_1011E1E20;
  v14 = *(_BYTE *)(a1 + 128);
  v5 = v2;
  v6 = *(id *)(a1 + 40);
  v11 = *(_OWORD *)(a1 + 80);
  v7 = *(id *)(a1 + 48);
  v8 = *(id *)(a1 + 56);
  v9 = *(id *)(a1 + 64);
  v3 = *(_OWORD *)(a1 + 112);
  v12 = *(_OWORD *)(a1 + 96);
  v13 = v3;
  v10 = *(id *)(a1 + 72);
  objc_msgSend(v5, "getRapSnapshotImageDataWithCompletion:", v4);

}

void sub_100AD09F0(uint64_t a1, void *a2)
{
  int v3;
  id v4;
  RAPAppState *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  RAPAppState *v13;
  RAPAppState *v14;

  v3 = *(unsigned __int8 *)(a1 + 128);
  v4 = a2;
  v5 = [RAPAppState alloc];
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40);
  if (v3)
    v13 = -[RAPAppState initWithMapView:traits:searchHistory:directionHistory:place:searchDataSource:directionsDataSource:currentlyConnectedAuxiliaryControls:homeShortuts:workShorcuts:schoolShorcuts:](v5, "initWithMapView:traits:searchHistory:directionHistory:place:searchDataSource:directionsDataSource:currentlyConnectedAuxiliaryControls:homeShortuts:workShorcuts:schoolShorcuts:", v6, v7, v8, v9, v10, v11, *(_QWORD *)(a1 + 64), v12, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 40));
  else
    v13 = -[RAPAppState initWithMapView:traits:searchHistory:directionHistory:place:searchDataSource:directionsDataSource:currentlyConnectedAuxiliaryControls:](v5, "initWithMapView:traits:searchHistory:directionHistory:place:searchDataSource:directionsDataSource:currentlyConnectedAuxiliaryControls:", v6, v7, v8, v9, v10, v11, *(_QWORD *)(a1 + 64), v12);
  v14 = v13;
  -[RAPMapState setMapSnapshotImageData:](v13, "setMapSnapshotImageData:", v4);

  (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
}

void sub_100AD0CE4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  NSData *v4;
  void *v5;
  UIImage *v6;

  v3 = *(_QWORD *)(a1 + 32);
  if (!a2 || a3)
  {
    (*(void (**)(_QWORD, _QWORD))(v3 + 16))(*(_QWORD *)(a1 + 32), 0);
  }
  else
  {
    v6 = (UIImage *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "image"));
    v4 = UIImageJPEGRepresentation(v6, 0.400000006);
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v5);

  }
}

id sub_100AD0D68(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  if (objc_msgSend(v3, "type") == *(id *)(a1 + 32) && (objc_msgSend(v3, "isSetupPlaceholder") & 1) == 0)
    v4 = objc_msgSend(v3, "isBackedPlaceholder");
  else
    v4 = 0;

  return v4;
}

uint64_t sub_100AD1058(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_100AD1250(id a1, UIAlertAction *a2)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", CFSTR("prefs:root=General&path=SOFTWARE_UPDATE_LINK")));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  objc_msgSend(v2, "_maps_openURL:options:completionHandler:", v3, 0, 0);

}

uint64_t sub_100AD24B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100AD24C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100AD2784(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100AD2794(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100AD2C14(id a1, UIAlertAction *a2)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", CFSTR("prefs:root=General&path=STORAGE_MGMT")));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  objc_msgSend(v2, "_maps_openURL:options:completionHandler:", v3, 0, 0);

}

uint64_t sub_100AD327C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100AD3290(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100AD32A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100AD34D0(id a1, UIAlertAction *a2)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", CFSTR("bridge:tab=SETTINGS&root=GENERAL_LINK&path=USAGE_LINK")));
  objc_msgSend(v3, "_maps_openURL:options:completionHandler:", v2, &__NSDictionary0__struct, 0);

}

void sub_100AD3760(id a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v3[4];
  _QWORD v4[4];

  v3[0] = &off_101270618;
  v3[1] = &off_101270630;
  v4[0] = CFSTR("navigationRouteGuidanceDisplayComponentID");
  v4[1] = CFSTR("index");
  v3[2] = &off_101270648;
  v3[3] = &off_101270660;
  v4[2] = CFSTR("laneInfoList");
  v4[3] = CFSTR("instructionText");
  v1 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 4));
  v2 = (void *)qword_1014D3EB8;
  qword_1014D3EB8 = v1;

}

id sub_100AD3ED4(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  double v7;
  double v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  void *v24;
  void *v25;
  void *v26;

  v5 = a3;
  v6 = objc_msgSend(objc_alloc((Class)_UICollectionViewListLayoutSectionConfiguration), "initWithAppearanceStyle:layoutEnvironment:", objc_msgSend(*(id *)(a1 + 32), "collectionViewListLayoutAppearanceStyle"), v5);
  v7 = _UICollectionViewListLayoutSectionAutomaticDimension;
  objc_msgSend(v6, "setEstimatedRowHeight:", _UICollectionViewListLayoutSectionAutomaticDimension);
  v8 = v7;
  if (!a2)
  {
    v8 = v7;
    if (objc_msgSend(*(id *)(a1 + 32), "shouldCollapseFirstCollectionViewSectionHeader"))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataSource"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSIndexPath indexPathForItem:inSection:](NSIndexPath, "indexPathForItem:inSection:", 0, 0));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "sectionAtIndexPath:", v10));

      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "title"));
      v13 = objc_msgSend(v12, "length");

      if (v13)
        v8 = v7;
      else
        v8 = 0.0;

    }
  }
  objc_msgSend(v6, "setSectionHeaderHeight:", v8);
  objc_msgSend(v6, "setSectionFooterHeight:", v7);
  objc_msgSend(v6, "setSeparatorStyle:", objc_msgSend(*(id *)(a1 + 32), "collectionViewConfigurationSeparatorStyle"));
  v14 = objc_msgSend(objc_alloc((Class)_UICollectionViewListLayoutSection), "initWithConfiguration:layoutEnvironment:", v6, v5);
  objc_msgSend(*(id *)(a1 + 32), "collectionViewListSectionContentInsetsForSection:", a2);
  objc_msgSend(v14, "setContentInsets:");
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionViewDecorationItems"));
  if (v15)
  {
    objc_msgSend(*(id *)(a1 + 32), "collectionViewDecorationItemContentInsetsForSection:", a2);
    v17 = v16;
    v19 = v18;
    v21 = v20;
    v23 = v22;
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "firstObject"));
    objc_msgSend(v24, "setContentInsets:", v17, v19, v21, v23);

    objc_msgSend(v14, "setDecorationItems:", v15);
  }
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionViewLayoutBoundarySupplementaryItems"));

  if (v25)
  {
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionViewLayoutBoundarySupplementaryItems"));
    objc_msgSend(v14, "setBoundarySupplementaryItems:", v26);

  }
  return v14;
}

void sub_100AD5AB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v4;

  v3 = *(void **)(a1 + 32);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_searchResultFromWaypointRequest:resolvedWaypoint:", a2, a3));
  objc_msgSend(v3, "addObject:", v4);

}

id sub_100AD9AC8()
{
  if (qword_1014D3EC8 != -1)
    dispatch_once(&qword_1014D3EC8, &stru_1011E1F78);
  return (id)qword_1014D3EC0;
}

void sub_100ADA920(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "PedestrianARSessionRouteDistanceMonitor");
  v2 = (void *)qword_1014D3EC0;
  qword_1014D3EC0 = (uint64_t)v1;

}

void sub_100ADCC84(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void (**v7)(_QWORD, _QWORD, _QWORD, _QWORD);

  if (objc_msgSend(a2, "cancels"))
  {
    v7 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resultBlock"));
    v7[2](v7, *(_QWORD *)(a1 + 32), 1, a3);

    *a4 = 1;
  }
}

BOOL sub_100ADCD7C(id a1, UIButton *a2, unint64_t a3, BOOL *a4)
{
  UIButton *v4;
  unsigned __int8 v5;

  v4 = a2;
  if (-[UIButton isEnabled](v4, "isEnabled"))
    v5 = -[UIButton _maps_isVisible](v4, "_maps_isVisible");
  else
    v5 = 0;

  return v5;
}

void sub_100ADD100(id a1)
{
  MapsPowerSourceController *v1;
  void *v2;

  v1 = objc_alloc_init(MapsPowerSourceController);
  v2 = (void *)qword_1014D3ED0;
  qword_1014D3ED0 = (uint64_t)v1;

}

void sub_100ADD428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100ADD44C()
{
  if (qword_1014D3EE8 != -1)
    dispatch_once(&qword_1014D3EE8, &stru_1011E2098);
  return (id)qword_1014D3EE0;
}

void sub_100ADD48C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_handleNotifyCallback");

}

void sub_100ADD4B8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_updateChargingState");

}

uint64_t sub_100ADD7D0(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(result + 32) + 40);
  return result;
}

void sub_100ADDDDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100ADDDFC(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 32) + 40) = 0;
  return result;
}

uint64_t sub_100ADDE08(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 32) + 40) = 0;
  return result;
}

_QWORD *sub_100ADDE14(_QWORD *result)
{
  *(_BYTE *)(*(_QWORD *)(result[5] + 8) + 24) = *(_QWORD *)(result[4] + 40) != result[6];
  *(_QWORD *)(result[4] + 40) = result[6];
  return result;
}

void sub_100ADDF24(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "MapsPowerSourceController");
  v2 = (void *)qword_1014D3EE0;
  qword_1014D3EE0 = (uint64_t)v1;

}

void sub_100ADE51C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100ADE540()
{
  if (qword_1014D3EF8 != -1)
    dispatch_once(&qword_1014D3EF8, &stru_1011E2158);
  return (id)qword_1014D3EF0;
}

void sub_100ADE580(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_scrollToFirstCell");

}

void sub_100ADF8B8(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a2;
  if (objc_msgSend(v11, "conformsToProtocol:", &OBJC_PROTOCOL___TransitDirectionsCell))
  {
    v5 = *(void **)(a1 + 32);
    v6 = v11;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectAtIndexedSubscript:", a3));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_indexPathFromFlatIndexPath:", v7));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "dataProvider"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "itemAtIndexPath:", v8));

    objc_msgSend(*(id *)(a1 + 40), "_configureTransitDirectionsCollectionViewCell:withItem:atIndexPath:", v6, v10, v7);
  }

}

id sub_100ADFFF8(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  void *v6;

  v3 = a2;
  v4 = objc_opt_class(TransitDirectionsListArtworkItem);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    v5 = v3;
    if (objc_msgSend(v5, "adaptiveShieldSize"))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "sizedArtworkForStyle:", 0));
      objc_msgSend(*(id *)(a1 + 32), "setObject:forKey:", v5, v6);
    }
    else
    {
      v6 = 0;
    }

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_100AE1A54(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataProvider"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "items"));
  v6 = objc_msgSend(v5, "count");

  if ((unint64_t)v6 > a2)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataProvider"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "items"));
    v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectAtIndexedSubscript:", a2));

    if (objc_msgSend(v9, "conformsToProtocol:", &OBJC_PROTOCOL___TransitDirectionsListExpandableItem))
      objc_msgSend(v9, "setExpanded:", 1);

  }
}

void sub_100AE1C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100AE1CAC(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(*(id *)(a1 + 32), "_updateListForClusteredRideOptionChangeInClusteredSegment:", *(_QWORD *)(a1 + 40));
    WeakRetained = v3;
  }

}

id sub_100AE1D44(uint64_t a1)
{
  +[PPTNotificationCenter postNotificationIfNeededWithName:object:userInfo:](PPTNotificationCenter, "postNotificationIfNeededWithName:object:userInfo:", CFSTR("MapsTestingTransitRouteUpdateWillUpdateDetails"), 0, 0);
  objc_msgSend(*(id *)(a1 + 32), "_refreshItemInstructionStrings");
  objc_msgSend(*(id *)(a1 + 32), "_reloadListViewForRouteChangeIfNotAnimating");
  return +[PPTNotificationCenter postNotificationIfNeededWithName:object:userInfo:](PPTNotificationCenter, "postNotificationIfNeededWithName:object:userInfo:", CFSTR("MapsTestingTransitRouteUpdateDidUpdateDetails"), 0, 0);
}

double sub_100AE3CE8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  double v8;
  double x;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  double v15;
  void *v16;
  void *v17;
  void *v18;
  double v19;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tableView"));

  v5 = *(void **)(a1 + 32);
  if (v4)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "tableView"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "cellForRowAtIndexPath:", v3));
    objc_msgSend(v7, "frame");
    x = v8;

  }
  else
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "collectionView"));

    v11 = *(void **)(a1 + 32);
    if (v10)
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "collectionView"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "collectionViewLayout"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "layoutAttributesForItemAtIndexPath:", v3));

      objc_msgSend(v14, "frame");
      x = v15;

    }
    else
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "listView"));

      if (v16)
      {
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "listView"));
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "stepViewForIndexPath:", v3));

        objc_msgSend(v18, "frame");
        x = v19;

      }
      else
      {
        x = CGRectZero.origin.x;
      }
    }
  }

  return x;
}

void sub_100AE4A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100AE4A3C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id *v4;
  id WeakRetained;
  void (**v6)(void);

  v4 = (id *)(a1 + 32);
  v6 = a4;
  WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend(WeakRetained, "_reloadListViewForRouteChangeIfNotAnimating");

  v6[2]();
}

void sub_100AE50FC(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a2;
  if (objc_msgSend(v10, "conformsToProtocol:", &OBJC_PROTOCOL___TransitDirectionsCell))
  {
    v5 = *(void **)(a1 + 32);
    v6 = v10;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectAtIndexedSubscript:", a3));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "stepView"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "transitListItem"));

    objc_msgSend(v6, "setDisplayOptions:", objc_msgSend(*(id *)(a1 + 40), "_stepViewDisplayOptionsForSection:", objc_msgSend(v7, "section")));
    objc_msgSend(v6, "setNavigationState:", objc_msgSend(*(id *)(a1 + 40), "_cellNavStateForItem:atIndexPath:", v9, v7));

  }
}

void sub_100AE51E0(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a2;
  if (objc_msgSend(v10, "conformsToProtocol:", &OBJC_PROTOCOL___TransitDirectionsCell))
  {
    v5 = *(void **)(a1 + 32);
    v6 = v10;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectAtIndexedSubscript:", a3));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "stepView"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "transitListItem"));

    objc_msgSend(v6, "setDisplayOptions:", objc_msgSend(*(id *)(a1 + 40), "_stepViewDisplayOptionsForSection:", objc_msgSend(v7, "section")));
    objc_msgSend(v6, "setNavigationState:", objc_msgSend(*(id *)(a1 + 40), "_cellNavStateForItem:atIndexPath:", v9, v7));

  }
}

void sub_100AE52C4(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "listView"));
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "indexPathForStepView:", v4));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "transitListItem"));
  objc_msgSend(v4, "setDisplayOptions:", objc_msgSend(*(id *)(a1 + 32), "_stepViewDisplayOptionsForSection:", objc_msgSend(v7, "section")));
  objc_msgSend(v4, "setNavigationState:", objc_msgSend(*(id *)(a1 + 32), "_cellNavStateForItem:atIndexPath:", v6, v7));

}

void sub_100AE71CC(id *a1)
{
  void *v2;
  _BYTE *v3;
  id v4;
  void *v5;
  _BYTE *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  char *v30;
  char *v31;
  void *v32;
  id v33;
  NSObject *v34;
  _BOOL4 v35;
  id v36;
  void *v37;
  objc_class *v38;
  NSString *v39;
  void *v40;
  void *v41;
  void *v42;
  __CFString *v43;
  id v44;
  void *v45;
  objc_class *v46;
  NSString *v47;
  void *v48;
  void *v49;
  void *v50;
  __CFString *v51;
  const char *v52;
  void *v53;
  const char *v54;
  id v55;
  NSObject *v56;
  id v57;
  NSObject *v58;
  char *v59;
  void *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint8_t buf[4];
  const char *v66;
  __int16 v67;
  const char *v68;
  __int16 v69;
  _BYTE v70[18];
  _BYTE v71[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "tableView"));
  v3 = objc_msgSend(v2, "numberOfRowsInSection:", objc_msgSend(a1[5], "section"));

  objc_msgSend(a1[6], "setExpanded:", objc_msgSend(a1[6], "expanded") ^ 1);
  v4 = a1[4];
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "tableView"));
  v6 = objc_msgSend(v4, "tableView:numberOfRowsInSection:", v5, objc_msgSend(a1[5], "section"));

  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "tableView"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "indexPathsForVisibleRows"));

  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v61, v71, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v62;
    do
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(_QWORD *)v62 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v61 + 1) + 8 * (_QWORD)i);
        v14 = objc_msgSend(v13, "section");
        if (v14 == objc_msgSend(a1[5], "section"))
        {
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "tableView"));
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "cellForRowAtIndexPath:", v13));

          v17 = objc_opt_class(TransitDirectionsCell);
          if ((objc_opt_isKindOfClass(v16, v17) & 1) != 0)
          {
            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "stepView"));
            objc_msgSend(v18, "_updateForParentExpansionOrCollapse");

          }
        }
      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v61, v71, 16);
    }
    while (v10);
  }

  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[7], "stepView"));
  objc_msgSend(v19, "updateExpandCollapseStyling");

  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "expandedItems"));
  v21 = (uint64_t)objc_msgSend(v20, "count");

  if (v21 != (unint64_t)fabs((double)(v6 - v3)))
  {
    v55 = sub_1004318FC();
    v56 = objc_claimAutoreleasedReturnValue(v55);
    if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v66 = "-[TransitDirectionsStepsListDataSource _transitDirectionsCell:wantsToExpandOrCollapseItem:inTableView:]_block_invoke";
      v67 = 2080;
      v68 = "TransitDirectionsStepsListDataSource.m";
      v69 = 1024;
      *(_DWORD *)v70 = 1770;
      *(_WORD *)&v70[4] = 2080;
      *(_QWORD *)&v70[6] = "numAffectedCells == (NSUInteger)fabs(newCount - oldCount)";
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_ERROR, "%s [%s:%d] Assertion: (%s)", buf, 0x26u);
    }

    if (sub_100A70734())
    {
      v57 = sub_1004318FC();
      v58 = objc_claimAutoreleasedReturnValue(v57);
      if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
      {
        v59 = (char *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
        *(_DWORD *)buf = 138412290;
        v66 = v59;
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);

      }
    }
  }
  v22 = v6;
  v23 = v3;
  v24 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", v21);
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "dataProvider"));
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "indexPathForItem:", a1[6]));

  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "_flatIndexFromIndexPath:", v26));
  v60 = v27;
  v28 = objc_msgSend(v27, "row");
  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "postTertiaryItems"));
  v30 = (char *)objc_msgSend(v29, "count") + (_QWORD)v28 + 1;

  if (v21 >= 1)
  {
    v31 = v30;
    do
    {
      v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSIndexPath indexPathForRow:inSection:](NSIndexPath, "indexPathForRow:inSection:", v31, objc_msgSend(a1[5], "section")));
      objc_msgSend(v24, "addObject:", v32);

      ++v31;
    }
    while ((uint64_t)v31 < (uint64_t)&v30[v21]);
  }
  v33 = sub_100ADE540();
  v34 = objc_claimAutoreleasedReturnValue(v33);
  v35 = os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG);
  if ((uint64_t)v22 >= (uint64_t)v23)
  {
    if (!v35)
    {
LABEL_38:

      v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "tableView"));
      objc_msgSend(v53, "insertRowsAtIndexPaths:withRowAnimation:", v24, 0);
      goto LABEL_39;
    }
    v44 = a1[4];
    v45 = v44;
    if (!v44)
    {
      v51 = CFSTR("<nil>");
      goto LABEL_37;
    }
    v46 = (objc_class *)objc_opt_class(v44);
    v47 = NSStringFromClass(v46);
    v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
    if ((objc_opt_respondsToSelector(v45, "accessibilityIdentifier") & 1) != 0)
    {
      v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "performSelector:", "accessibilityIdentifier"));
      v50 = v49;
      if (v49 && !objc_msgSend(v49, "isEqualToString:", v48))
      {
        v51 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v48, v45, v50));

        goto LABEL_32;
      }

    }
    v51 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v48, v45));
LABEL_32:

LABEL_37:
    v54 = (const char *)objc_msgSend(v24, "count");
    *(_DWORD *)buf = 138544130;
    v66 = (const char *)v51;
    v67 = 2048;
    v68 = v54;
    v69 = 2048;
    *(_QWORD *)v70 = v21;
    *(_WORD *)&v70[8] = 2048;
    *(_QWORD *)&v70[10] = v30;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "[%{public}@] Will insert %lu cells (expected %lu) at index %lu", buf, 0x2Au);

    goto LABEL_38;
  }
  if (v35)
  {
    v36 = a1[4];
    v37 = v36;
    if (!v36)
    {
      v43 = CFSTR("<nil>");
      goto LABEL_34;
    }
    v38 = (objc_class *)objc_opt_class(v36);
    v39 = NSStringFromClass(v38);
    v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
    if ((objc_opt_respondsToSelector(v37, "accessibilityIdentifier") & 1) != 0)
    {
      v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "performSelector:", "accessibilityIdentifier"));
      v42 = v41;
      if (v41 && !objc_msgSend(v41, "isEqualToString:", v40))
      {
        v43 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v40, v37, v42));

        goto LABEL_24;
      }

    }
    v43 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v40, v37));
LABEL_24:

LABEL_34:
    v52 = (const char *)objc_msgSend(v24, "count");
    *(_DWORD *)buf = 138544130;
    v66 = (const char *)v43;
    v67 = 2048;
    v68 = v52;
    v69 = 2048;
    *(_QWORD *)v70 = v21;
    *(_WORD *)&v70[8] = 2048;
    *(_QWORD *)&v70[10] = v30;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "[%{public}@] Will hide %lu cells (expected %lu) from index %lu", buf, 0x2Au);

  }
  v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "tableView"));
  objc_msgSend(v53, "deleteRowsAtIndexPaths:withRowAnimation:", v24, 0);
LABEL_39:

}

void sub_100AE78B4(uint64_t a1)
{
  _BYTE *v2;
  void *v3;
  char v4;
  void *v5;
  id v6;
  uint64_t v7;
  char isKindOfClass;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  _QWORD block[5];

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 24) = 0;
  v2 = *(_BYTE **)(a1 + 32);
  if (v2[40])
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100AE7A1C;
    block[3] = &unk_1011AC860;
    block[4] = v2;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
    v2 = *(_BYTE **)(a1 + 32);
  }
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "delegate"));
  v4 = objc_opt_respondsToSelector(v3, "currentUITargetForAnalytics");

  if ((v4 & 1) != 0)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
    v6 = *(id *)(a1 + 40);
    v7 = objc_opt_class(TransitDirectionsListItemWalking);
    isKindOfClass = objc_opt_isKindOfClass(v6, v7);
    v9 = objc_msgSend(v6, "expanded");

    if (v9)
      v10 = 3017;
    else
      v10 = 3016;
    if (v9)
      v11 = 3019;
    else
      v11 = 3018;
    if ((isKindOfClass & 1) != 0)
      v12 = v10;
    else
      v12 = v11;
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    v14 = objc_msgSend(v13, "currentUITargetForAnalytics");
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "displayedItemIndexForAnalytics"));
    objc_msgSend(v5, "captureUserAction:onTarget:eventValue:transitStep:", v12, v14, 0, v15);

  }
}

id sub_100AE7A1C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_didFinishAnimatingListView");
}

void sub_100AE7CFC(id *a1)
{
  void *v2;
  _BYTE *v3;
  id v4;
  void *v5;
  _BYTE *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  char *v30;
  char *v31;
  void *v32;
  id v33;
  NSObject *v34;
  _BOOL4 v35;
  id v36;
  void *v37;
  objc_class *v38;
  NSString *v39;
  void *v40;
  void *v41;
  void *v42;
  __CFString *v43;
  id v44;
  void *v45;
  objc_class *v46;
  NSString *v47;
  void *v48;
  void *v49;
  void *v50;
  __CFString *v51;
  const char *v52;
  void *v53;
  const char *v54;
  id v55;
  NSObject *v56;
  id v57;
  NSObject *v58;
  char *v59;
  void *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint8_t buf[4];
  const char *v66;
  __int16 v67;
  const char *v68;
  __int16 v69;
  _BYTE v70[18];
  _BYTE v71[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "collectionView"));
  v3 = objc_msgSend(v2, "numberOfItemsInSection:", objc_msgSend(a1[5], "section"));

  objc_msgSend(a1[6], "setExpanded:", objc_msgSend(a1[6], "expanded") ^ 1);
  v4 = a1[4];
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "collectionView"));
  v6 = objc_msgSend(v4, "collectionView:numberOfItemsInSection:", v5, objc_msgSend(a1[5], "section"));

  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "collectionView"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "indexPathsForVisibleItems"));

  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v61, v71, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v62;
    do
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(_QWORD *)v62 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v61 + 1) + 8 * (_QWORD)i);
        v14 = objc_msgSend(v13, "section");
        if (v14 == objc_msgSend(a1[5], "section"))
        {
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "collectionView"));
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "cellForItemAtIndexPath:", v13));

          v17 = objc_opt_class(TransitDirectionsCollectionViewCell);
          if ((objc_opt_isKindOfClass(v16, v17) & 1) != 0)
          {
            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "stepView"));
            objc_msgSend(v18, "_updateForParentExpansionOrCollapse");

          }
        }
      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v61, v71, 16);
    }
    while (v10);
  }

  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[7], "stepView"));
  objc_msgSend(v19, "updateExpandCollapseStyling");

  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "expandedItems"));
  v21 = (uint64_t)objc_msgSend(v20, "count");

  if (v21 != (unint64_t)fabs((double)(v6 - v3)))
  {
    v55 = sub_1004318FC();
    v56 = objc_claimAutoreleasedReturnValue(v55);
    if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v66 = "-[TransitDirectionsStepsListDataSource _transitDirectionsCell:wantsToExpandOrCollapseItem:inCollectionView:]_block_invoke";
      v67 = 2080;
      v68 = "TransitDirectionsStepsListDataSource.m";
      v69 = 1024;
      *(_DWORD *)v70 = 1844;
      *(_WORD *)&v70[4] = 2080;
      *(_QWORD *)&v70[6] = "numAffectedCells == (NSUInteger)fabs(newCount - oldCount)";
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_ERROR, "%s [%s:%d] Assertion: (%s)", buf, 0x26u);
    }

    if (sub_100A70734())
    {
      v57 = sub_1004318FC();
      v58 = objc_claimAutoreleasedReturnValue(v57);
      if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
      {
        v59 = (char *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
        *(_DWORD *)buf = 138412290;
        v66 = v59;
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);

      }
    }
  }
  v22 = v6;
  v23 = v3;
  v24 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", v21);
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "dataProvider"));
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "indexPathForItem:", a1[6]));

  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "_flatIndexFromIndexPath:", v26));
  v60 = v27;
  v28 = objc_msgSend(v27, "row");
  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "postTertiaryItems"));
  v30 = (char *)objc_msgSend(v29, "count") + (_QWORD)v28 + 1;

  if (v21 >= 1)
  {
    v31 = v30;
    do
    {
      v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSIndexPath indexPathForRow:inSection:](NSIndexPath, "indexPathForRow:inSection:", v31, objc_msgSend(a1[5], "section")));
      objc_msgSend(v24, "addObject:", v32);

      ++v31;
    }
    while ((uint64_t)v31 < (uint64_t)&v30[v21]);
  }
  v33 = sub_100ADE540();
  v34 = objc_claimAutoreleasedReturnValue(v33);
  v35 = os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG);
  if ((uint64_t)v22 >= (uint64_t)v23)
  {
    if (!v35)
    {
LABEL_38:

      v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "collectionView"));
      objc_msgSend(v53, "insertItemsAtIndexPaths:", v24);
      goto LABEL_39;
    }
    v44 = a1[4];
    v45 = v44;
    if (!v44)
    {
      v51 = CFSTR("<nil>");
      goto LABEL_37;
    }
    v46 = (objc_class *)objc_opt_class(v44);
    v47 = NSStringFromClass(v46);
    v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
    if ((objc_opt_respondsToSelector(v45, "accessibilityIdentifier") & 1) != 0)
    {
      v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "performSelector:", "accessibilityIdentifier"));
      v50 = v49;
      if (v49 && !objc_msgSend(v49, "isEqualToString:", v48))
      {
        v51 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v48, v45, v50));

        goto LABEL_32;
      }

    }
    v51 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v48, v45));
LABEL_32:

LABEL_37:
    v54 = (const char *)objc_msgSend(v24, "count");
    *(_DWORD *)buf = 138544130;
    v66 = (const char *)v51;
    v67 = 2048;
    v68 = v54;
    v69 = 2048;
    *(_QWORD *)v70 = v21;
    *(_WORD *)&v70[8] = 2048;
    *(_QWORD *)&v70[10] = v30;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "[%{public}@] Will insert %lu cells (expected %lu) at index %lu", buf, 0x2Au);

    goto LABEL_38;
  }
  if (v35)
  {
    v36 = a1[4];
    v37 = v36;
    if (!v36)
    {
      v43 = CFSTR("<nil>");
      goto LABEL_34;
    }
    v38 = (objc_class *)objc_opt_class(v36);
    v39 = NSStringFromClass(v38);
    v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
    if ((objc_opt_respondsToSelector(v37, "accessibilityIdentifier") & 1) != 0)
    {
      v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "performSelector:", "accessibilityIdentifier"));
      v42 = v41;
      if (v41 && !objc_msgSend(v41, "isEqualToString:", v40))
      {
        v43 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v40, v37, v42));

        goto LABEL_24;
      }

    }
    v43 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v40, v37));
LABEL_24:

LABEL_34:
    v52 = (const char *)objc_msgSend(v24, "count");
    *(_DWORD *)buf = 138544130;
    v66 = (const char *)v43;
    v67 = 2048;
    v68 = v52;
    v69 = 2048;
    *(_QWORD *)v70 = v21;
    *(_WORD *)&v70[8] = 2048;
    *(_QWORD *)&v70[10] = v30;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "[%{public}@] Will hide %lu cells (expected %lu) from index %lu", buf, 0x2Au);

  }
  v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "collectionView"));
  objc_msgSend(v53, "deleteItemsAtIndexPaths:", v24);
LABEL_39:

}

void sub_100AE83DC(uint64_t a1)
{
  _BYTE *v2;
  void *v3;
  char v4;
  void *v5;
  id v6;
  uint64_t v7;
  char isKindOfClass;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  _QWORD block[5];

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 24) = 0;
  v2 = *(_BYTE **)(a1 + 32);
  if (v2[40])
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100AE8544;
    block[3] = &unk_1011AC860;
    block[4] = v2;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
    v2 = *(_BYTE **)(a1 + 32);
  }
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "delegate"));
  v4 = objc_opt_respondsToSelector(v3, "currentUITargetForAnalytics");

  if ((v4 & 1) != 0)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
    v6 = *(id *)(a1 + 40);
    v7 = objc_opt_class(TransitDirectionsListItemWalking);
    isKindOfClass = objc_opt_isKindOfClass(v6, v7);
    v9 = objc_msgSend(v6, "expanded");

    if (v9)
      v10 = 3017;
    else
      v10 = 3016;
    if (v9)
      v11 = 3019;
    else
      v11 = 3018;
    if ((isKindOfClass & 1) != 0)
      v12 = v10;
    else
      v12 = v11;
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    v14 = objc_msgSend(v13, "currentUITargetForAnalytics");
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "displayedItemIndexForAnalytics"));
    objc_msgSend(v5, "captureUserAction:onTarget:eventValue:transitStep:", v12, v14, 0, v15);

  }
}

id sub_100AE8544(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_didFinishAnimatingListView");
}

void sub_100AE87C8(uint64_t a1)
{
  _BYTE *v2;
  void *v3;
  char v4;
  void *v5;
  id v6;
  uint64_t v7;
  char isKindOfClass;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  _QWORD block[5];

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 24) = 0;
  v2 = *(_BYTE **)(a1 + 32);
  if (v2[40])
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100AE8930;
    block[3] = &unk_1011AC860;
    block[4] = v2;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
    v2 = *(_BYTE **)(a1 + 32);
  }
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "delegate"));
  v4 = objc_opt_respondsToSelector(v3, "currentUITargetForAnalytics");

  if ((v4 & 1) != 0)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
    v6 = *(id *)(a1 + 40);
    v7 = objc_opt_class(TransitDirectionsListItemWalking);
    isKindOfClass = objc_opt_isKindOfClass(v6, v7);
    v9 = objc_msgSend(v6, "expanded");

    if (v9)
      v10 = 3017;
    else
      v10 = 3016;
    if (v9)
      v11 = 3019;
    else
      v11 = 3018;
    if ((isKindOfClass & 1) != 0)
      v12 = v10;
    else
      v12 = v11;
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    v14 = objc_msgSend(v13, "currentUITargetForAnalytics");
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "displayedItemIndexForAnalytics"));
    objc_msgSend(v5, "captureUserAction:onTarget:eventValue:transitStep:", v12, v14, 0, v15);

  }
}

id sub_100AE8930(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_didFinishAnimatingListView");
}

void sub_100AE906C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100AE9098(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  void (**v5)(_QWORD);
  id WeakRetained;
  id v7;
  NSObject *v8;
  id v9;
  objc_class *v10;
  NSString *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint8_t buf[4];
  void *v17;

  v5 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v7 = sub_100ADE540();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
LABEL_9:

      objc_msgSend(WeakRetained, "updateForClusteredLegSelectedRideIndexChange");
      objc_msgSend(WeakRetained, "_reloadListViewForRouteChangeIfNotAnimating");
      v5[2](v5);
      goto LABEL_10;
    }
    v9 = WeakRetained;
    v10 = (objc_class *)objc_opt_class(v9);
    v11 = NSStringFromClass(v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    if ((objc_opt_respondsToSelector(v9, "accessibilityIdentifier") & 1) != 0)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "performSelector:", "accessibilityIdentifier"));
      v14 = v13;
      if (v13 && !objc_msgSend(v13, "isEqualToString:", v12))
      {
        v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v12, v9, v14));

        goto LABEL_8;
      }

    }
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v12, v9));
LABEL_8:

    *(_DWORD *)buf = 138543362;
    v17 = v15;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[%{public}@] Will update for latest clustered ride selections and reload list view", buf, 0xCu);

    goto LABEL_9;
  }
LABEL_10:

}

void sub_100AEB5DC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "TransitStepsList");
  v2 = (void *)qword_1014D3EF0;
  qword_1014D3EF0 = (uint64_t)v1;

}

void sub_100AEB810(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  void *v14;
  _BOOL8 v15;
  id v16;
  uint64_t v17;
  void *v18;
  _QWORD v19[5];
  id v20;
  id v21;
  id location;

  v7 = a2;
  v8 = a5;
  v9 = v8;
  if (!v7 || v8)
  {
    v17 = *(_QWORD *)(a1 + 40);
    if (v17)
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "thumbnailImage"));
      (*(void (**)(uint64_t, void *, void *))(v17 + 16))(v17, v18, v9);

    }
  }
  else
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
    objc_msgSend(v10, "scale");
    v12 = v11;

    v13 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "traitCollection"));
    v15 = objc_msgSend(v14, "layoutDirection") == (id)1;

    objc_initWeak(&location, *(id *)(a1 + 32));
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_100AEB998;
    v19[3] = &unk_1011E2180;
    objc_copyWeak(&v21, &location);
    v16 = *(id *)(a1 + 40);
    v19[4] = *(_QWORD *)(a1 + 32);
    v20 = v16;
    objc_msgSend(v7, "maps_blurredImageScale:isRTL:completion:", v15, v19, v12);

    objc_destroyWeak(&v21);
    objc_destroyWeak(&location);
  }

}

void sub_100AEB97C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100AEB998(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;
  id v9;
  id v10;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100AEBA54;
  v6[3] = &unk_1011B3488;
  objc_copyWeak(&v10, (id *)(a1 + 48));
  v7 = v3;
  v4 = *(id *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = v4;
  v5 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);

  objc_destroyWeak(&v10);
}

void sub_100AEBA54(uint64_t a1)
{
  id WeakRetained;
  uint64_t v3;
  void *v4;
  id v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    v5 = WeakRetained;
    objc_msgSend(WeakRetained, "setCurrentImage:", *(_QWORD *)(a1 + 32));
    objc_msgSend(v5, "setHasFinishedLoading:", 1);
    WeakRetained = v5;
    v3 = *(_QWORD *)(a1 + 48);
    if (v3)
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "thumbnailImage"));
      (*(void (**)(uint64_t, void *, _QWORD))(v3 + 16))(v3, v4, 0);

      WeakRetained = v5;
    }
  }

}

uint64_t sub_100AEC108(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  __objc2_prot *v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  unsigned int v12;
  id v13;
  id v14;
  __objc2_prot *v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  unsigned int v20;
  id v21;
  id v22;
  __objc2_prot *v23;
  uint64_t v24;
  id v25;
  id v26;
  void *v27;
  unsigned int v28;
  id v29;
  void *v30;
  void *v31;
  uint64_t v32;
  char isKindOfClass;
  uint64_t v34;

  v3 = a2;
  v4 = objc_opt_class(HistoryEntryRecentsItem);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) == 0)
    goto LABEL_29;
  v5 = v3;
  v6 = &OBJC_PROTOCOL___CuratedCollectionHistoryEntry;
  v7 = objc_opt_class(HistoryEntryRecentsItem);
  v8 = v5;
  if ((objc_opt_isKindOfClass(v8, v7) & 1) != 0)
    v9 = v8;
  else
    v9 = 0;
  v10 = v9;

  if (v10
    && (v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "historyEntry")),
        v12 = objc_msgSend(v11, "conformsToProtocol:", v6),
        v11,
        v12))
  {
    v13 = v8;
  }
  else
  {
    v13 = 0;
  }

  if (!v13)
  {
    v14 = v8;
    v15 = &OBJC_PROTOCOL___MSPHistoryEntryTransitLineItem;
    v16 = objc_opt_class(HistoryEntryRecentsItem);
    v8 = v14;
    if ((objc_opt_isKindOfClass(v8, v16) & 1) != 0)
      v17 = v8;
    else
      v17 = 0;
    v18 = v17;

    if (v18
      && (v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "historyEntry")),
          v20 = objc_msgSend(v19, "conformsToProtocol:", v15),
          v19,
          v20))
    {
      v21 = v8;
    }
    else
    {
      v21 = 0;
    }

    if (v21)
      goto LABEL_27;
    v22 = v8;
    v23 = &OBJC_PROTOCOL___MSPHistoryEntryRoute;
    v24 = objc_opt_class(HistoryEntryRecentsItem);
    v8 = v22;
    v25 = (objc_opt_isKindOfClass(v8, v24) & 1) != 0 ? v8 : 0;
    v26 = v25;

    if (v26
      && (v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "historyEntry")),
          v28 = objc_msgSend(v27, "conformsToProtocol:", v23),
          v27,
          v28))
    {
      v29 = v8;
    }
    else
    {
      v29 = 0;
    }

    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "historyEntry"));
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "endWaypoint"));
    v32 = objc_opt_class(GEOComposedWaypointToRoute);
    isKindOfClass = objc_opt_isKindOfClass(v31, v32);

    if ((isKindOfClass & 1) != 0)
      goto LABEL_27;

LABEL_29:
    v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    v34 = objc_msgSend(v8, "routeSearchController:waypointsIncludeObject:", *(_QWORD *)(a1 + 32), v3) ^ 1;
    goto LABEL_30;
  }

LABEL_27:
  v34 = 0;
LABEL_30:

  return v34;
}

void sub_100AED1EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100AED228(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100AED238(uint64_t a1)
{

}

void sub_100AED240(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(+[SearchFieldItem searchFieldItemWithObject:](SearchFieldItem, "searchFieldItemWithObject:", *(_QWORD *)(a1 + 32)));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_100AED280(uint64_t a1, uint64_t a2)
{
  void *v3;
  unsigned int v4;
  id v5;

  if (!a2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[MKLocationManager sharedLocationManager](MKLocationManager, "sharedLocationManager"));
    v4 = objc_msgSend(v3, "isAuthorizedForPreciseLocation");

    if (v4)
    {
      v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
      objc_msgSend(v5, "routeSearchController:didSelectItem:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

    }
  }
}

void sub_100AED4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100AED4CC(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 0;
  return result;
}

id sub_100AED73C()
{
  if (qword_1014D3F08 != -1)
    dispatch_once(&qword_1014D3F08, &stru_1011E2260);
  return (id)qword_1014D3F00;
}

void sub_100AED878(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  int v6;
  id v7;

  v3 = a2;
  if (v3)
  {
    v4 = sub_100AED73C();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = 138412290;
      v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Failed to update all submission statuses with error %@", (uint8_t *)&v6, 0xCu);
    }

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_100AEDA38(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_100AEDA54(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  id v7;

  v7 = a2;
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (v5 || !objc_msgSend(v7, "count"))
      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    else
      objc_msgSend(WeakRetained, "_updateAllSubmissionStatusWithOffset:batchSize:completion:", (char *)objc_msgSend(v7, "count") + *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 32));
  }

}

void sub_100AEDBF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100AEDC14(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  id v8;
  NSObject *v9;
  id v10;
  NSObject *v11;
  id v12;
  id v13;
  _BOOL4 v14;
  _QWORD v15[4];
  id v16;
  id v17;
  uint8_t buf[4];
  id v19;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v8 = sub_100AED73C();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Finished making the sync call", buf, 2u);
    }

    if (v6)
    {
      v10 = sub_100AED73C();
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v19 = v6;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed sync call with error %@", buf, 0xCu);
      }
LABEL_7:

      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
      goto LABEL_12;
    }
    v12 = objc_msgSend(v5, "count");
    v13 = sub_100AED73C();
    v11 = objc_claimAutoreleasedReturnValue(v13);
    v14 = os_log_type_enabled(v11, OS_LOG_TYPE_INFO);
    if (!v12)
    {
      if (v14)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "get empty result, finish fetching", buf, 2u);
      }
      goto LABEL_7;
    }
    if (v14)
    {
      *(_DWORD *)buf = 138412290;
      v19 = v5;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Calling Sundew for RAP submission identifiers %@", buf, 0xCu);
    }

    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100AEDE58;
    v15[3] = &unk_1011ACAD0;
    v17 = *(id *)(a1 + 32);
    v16 = v5;
    objc_msgSend(WeakRetained, "_updateSubmissionStatusWithIdentifier:completion:", v16, v15);

  }
LABEL_12:

}

uint64_t sub_100AEDE58(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

void sub_100AEDF40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100AEDF5C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  id v8;
  NSObject *v9;
  id v10;
  NSObject *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  _QWORD v23[4];
  void *v24;
  id v25;
  _QWORD v26[4];
  void *v27;
  _QWORD *v28;
  id v29;
  id v30;
  uint8_t buf[4];
  id v32;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v8 = sub_100AED73C();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Finished making Sundew call", buf, 2u);
    }

    if (v6)
    {
      v10 = sub_100AED73C();
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v32 = v6;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed Sundew call with error %@", buf, 0xCu);
      }

      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    }
    else
    {
      v12 = objc_loadWeakRetained((id *)(a1 + 40));
      v14 = v12;
      if (v12)
      {
        if (MapsFeature_IsEnabled_RAPCommunityID(v12, v13))
        {
          v15 = (void *)v14[2];
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "rapInfos"));
          v26[0] = _NSConcreteStackBlock;
          v26[1] = 3221225472;
          v26[2] = sub_100AEE228;
          v26[3] = &unk_1011E21F8;
          v27 = 0;
          v28 = v14;
          v29 = v5;
          v30 = *(id *)(a1 + 32);
          objc_msgSend(v15, "updateRAPsStatusWithRapInfos:completion:", v16, v26);

          v17 = v27;
        }
        else
        {
          v18 = sub_100AED73C();
          v19 = objc_claimAutoreleasedReturnValue(v18);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
          {
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "reviewedSubmissionIdentifiers"));
            *(_DWORD *)buf = 138412290;
            v32 = v20;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Array of RAP submissions that have been Reviewed: %@", buf, 0xCu);

          }
          v21 = (void *)v14[2];
          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "reviewedSubmissionIdentifiers"));
          v23[0] = _NSConcreteStackBlock;
          v23[1] = 3221225472;
          v23[2] = sub_100AEE304;
          v23[3] = &unk_1011B7758;
          v24 = 0;
          v25 = *(id *)(a1 + 32);
          objc_msgSend(v21, "setIdentifiersAsReviewed:completion:", v22, v23);

          v17 = v24;
        }

      }
      else
      {
        (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
      }

    }
  }

}

uint64_t sub_100AEE228(uint64_t a1, uint64_t a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  int v9;
  uint64_t v10;

  if (a2)
  {
    v3 = sub_100AED73C();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v9 = 138412290;
      v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to persist identifiers with error %@", (uint8_t *)&v9, 0xCu);
    }

  }
  v6 = *(void **)(a1 + 40);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "rapInfos"));
  objc_msgSend(v6, "_checkForStatusChangeNotificationsNeededForRapInfos:", v7);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

uint64_t sub_100AEE304(uint64_t a1, uint64_t a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  int v7;
  uint64_t v8;

  if (a2)
  {
    v3 = sub_100AED73C();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v7 = 138412290;
      v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to persist identifiers with error %@", (uint8_t *)&v7, 0xCu);
    }

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100AEE66C(id a1, NSError *a2)
{
  NSError *v2;
  id v3;
  NSObject *v4;
  int v5;
  NSError *v6;

  v2 = a2;
  if (v2)
  {
    v3 = sub_100AED73C();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to send RAP notificaiton was shown log event with error %@", (uint8_t *)&v5, 0xCu);
    }

  }
}

void sub_100AEE750(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "RAPSubmissionStatusDownloader");
  v2 = (void *)qword_1014D3F00;
  qword_1014D3F00 = (uint64_t)v1;

}

void sub_100AEE9BC(uint64_t a1)
{
  void *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 24));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trayContaineeViewController"));
  objc_msgSend(WeakRetained, "presentController:animated:", v2, 0);

}

void sub_100AEF22C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100AEF26C(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "actionDelegate"));
    objc_msgSend(v2, "parkedCarHeaderButtonsSectionControllerRequestsEditLocation:", v3);

    WeakRetained = v3;
  }

}

id sub_100AEF9FC()
{
  if (qword_1014D3F18 != -1)
    dispatch_once(&qword_1014D3F18, &stru_1011E2280);
  return (id)qword_1014D3F10;
}

void sub_100AEFE78(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFSessionLocationHorizontalAccuracyMonitor");
  v2 = (void *)qword_1014D3F10;
  qword_1014D3F10 = (uint64_t)v1;

}

void sub_100AF10E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100AF1104(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  void *v4;
  void *v5;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "setSelectedTrip:", v3);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "chromeViewController"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_transportTypeStringForAnalytics"));
  objc_msgSend(v4, "captureUserAction:eventValue:", 21, v5);

}

id sub_100AF12E4()
{
  if (qword_1014D3F28 != -1)
    dispatch_once(&qword_1014D3F28, &stru_1011E2308);
  return (id)qword_1014D3F20;
}

void sub_100AF1324(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  CarSharedTripDetailCardViewController *v8;
  void *v9;
  CarSharedTripDetailCardViewController *v10;
  uint64_t v11;
  void *v12;
  objc_super v13;

  v2 = *(unsigned __int8 *)(a1 + 48);
  v13.receiver = *(id *)(a1 + 32);
  v13.super_class = (Class)CarSharedTripsContext;
  objc_msgSendSuper2(&v13, "becomeCurrent:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sharedTripsAnnotationsController"));
  objc_msgSend(v3, "setChromeViewController:", *(_QWORD *)(a1 + 40));

  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectedTrip"));
  if (v4)
  {
    v5 = (void *)v4;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "sharedTrip"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectedTrip"));

    if (v6 != v7)
    {
      v8 = [CarSharedTripDetailCardViewController alloc];
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectedTrip"));
      v10 = -[CarSharedTripDetailCardViewController initWithSharedTrip:delegate:](v8, "initWithSharedTrip:delegate:", v9, *(_QWORD *)(a1 + 32));
      v11 = *(_QWORD *)(a1 + 32);
      v12 = *(void **)(v11 + 88);
      *(_QWORD *)(v11 + 88) = v10;

    }
  }
}

void sub_100AF152C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  objc_super v4;

  v2 = *(unsigned __int8 *)(a1 + 40);
  v4.receiver = *(id *)(a1 + 32);
  v4.super_class = (Class)CarSharedTripsContext;
  objc_msgSendSuper2(&v4, "resignCurrent:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sharedTripsAnnotationsController"));
  objc_msgSend(v3, "setChromeViewController:", 0);

}

uint64_t sub_100AF20E8(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MapsRadarComponent mapsShareETACarPlayComponent](MapsRadarComponent, "mapsShareETACarPlayComponent"));
  objc_msgSend(*(id *)(a1 + 32), "setComponent:", v2);

  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = *(id *)(a1 + 40);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v13;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(a1 + 32);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)v7), "senderInfo", (_QWORD)v12));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "fromIdentifier"));
        objc_msgSend(v8, "addCollaborationContactHandle:", v10);

        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v5);
  }

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

NSString *__cdecl sub_100AF2460(id a1, GEOSharedNavState *a2, unint64_t a3)
{
  return (NSString *)-[GEOSharedNavState _transportTypeStringForAnalytics](a2, "_transportTypeStringForAnalytics", a3);
}

void sub_100AF2894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100AF28B8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  void *v11;
  void *v12;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[CarShareTripContactCell reuseIdentifier](CarShareTripContactCell, "reuseIdentifier"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "dequeueReusableCellWithIdentifier:forIndexPath:", v11, v8));

    objc_msgSend(v12, "configureWithSharedTrip:", v9);
  }
  else
  {
    v12 = 0;
  }

  return v12;
}

void sub_100AF2C0C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CarSharedTripsContext");
  v2 = (void *)qword_1014D3F20;
  qword_1014D3F20 = (uint64_t)v1;

}

void sub_100AF327C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "MapsAppDelegateMenuBuilding");
  v2 = (void *)qword_1014D3F30;
  qword_1014D3F30 = (uint64_t)v1;

}

id sub_100AF36C0(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "updateArrivalState:", *(_QWORD *)(a1 + 32));
}

void sub_100AF39C0(id a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v3[13];

  v3[0] = CFSTR("primaryOrProceedToRouteManeuver");
  v3[1] = CFSTR("secondaryManeuver");
  v3[2] = CFSTR("recalculating");
  v3[3] = CFSTR("announcementStage");
  v3[4] = CFSTR("remainingManeuverTimeAndDistance");
  v3[5] = CFSTR("remainingTotalTimeAndDistance");
  v3[6] = CFSTR("destinationDisplayName");
  v3[7] = CFSTR("showLaneGuidanceInfo");
  v3[8] = CFSTR("hideLaneGuidanceInfo");
  v3[9] = CFSTR("showJunctionViewInfo");
  v3[10] = CFSTR("hideJunctionViewInfo");
  v3[11] = CFSTR("usePersistentDisplay");
  v3[12] = CFSTR("ARSignInfos");
  v1 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v3, 13));
  v2 = (void *)qword_1014D3F40;
  qword_1014D3F40 = v1;

}

MKServerFormattedString *__cdecl sub_100AF4ED8(id a1, GEOComposedString *a2, unint64_t a3)
{
  GEOComposedString *v3;
  id v4;

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)MKServerFormattedString), "initWithComposedString:", v3);

  return (MKServerFormattedString *)v4;
}

MKServerFormattedString *__cdecl sub_100AF4F1C(id a1, GEOComposedString *a2, unint64_t a3)
{
  GEOComposedString *v3;
  id v4;

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)MKServerFormattedString), "initWithComposedString:", v3);

  return (MKServerFormattedString *)v4;
}

id sub_100AF4F60(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)MKServerFormattedString), "initWithGeoServerString:parameters:", v3, *(_QWORD *)(a1 + 32));

  return v4;
}

id sub_100AF4FB4(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)MKServerFormattedString), "initWithGeoServerString:parameters:", v3, *(_QWORD *)(a1 + 32));

  return v4;
}

void sub_100AF5008(uint64_t a1, void *a2)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(a1 + 40);
  v4 = a2;
  objc_msgSend(v4, "showManeuverSign:maneuverStepIndex:", v2, objc_msgSend(v3, "stepIndex"));

}

MKServerFormattedString *__cdecl sub_100AF5050(id a1, GEOComposedString *a2, unint64_t a3)
{
  GEOComposedString *v3;
  id v4;

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)MKServerFormattedString), "initWithComposedString:", v3);

  return (MKServerFormattedString *)v4;
}

MKServerFormattedString *__cdecl sub_100AF5094(id a1, GEOComposedString *a2, unint64_t a3)
{
  GEOComposedString *v3;
  id v4;

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)MKServerFormattedString), "initWithComposedString:", v3);

  return (MKServerFormattedString *)v4;
}

id sub_100AF50D8(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)MKServerFormattedString), "initWithGeoServerString:parameters:", v3, *(_QWORD *)(a1 + 32));

  return v4;
}

id sub_100AF512C(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)MKServerFormattedString), "initWithGeoServerString:parameters:", v3, *(_QWORD *)(a1 + 32));

  return v4;
}

id sub_100AF5180(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "showSecondaryManeuverSign:", *(_QWORD *)(a1 + 32));
}

void sub_100AF518C(id a1, GuidanceDisplay *a2)
{
  -[GuidanceDisplay hideSecondaryManeuver](a2, "hideSecondaryManeuver");
}

void sub_100AF5224(uint64_t a1, void *a2)
{
  char v3;
  void *v4;
  void *v5;
  void *v6;
  unsigned int v7;
  NavSignLaneGuidanceInfo *v8;
  id v9;

  v9 = a2;
  v3 = objc_opt_respondsToSelector(v9, "currentLaneGuidanceId");
  v4 = v9;
  if ((v3 & 1) != 0)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "currentLaneGuidanceId"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uniqueID"));
    v7 = objc_msgSend(v6, "isEqual:", v5);

    if (v7)
    {
      v8 = -[NavSignLaneGuidanceInfo initWithGuidanceLaneInfo:]([NavSignLaneGuidanceInfo alloc], "initWithGuidanceLaneInfo:", *(_QWORD *)(a1 + 32));
      if ((objc_opt_respondsToSelector(v9, "updateLaneGuidance:") & 1) != 0)
        objc_msgSend(v9, "updateLaneGuidance:", v8);
    }
    else
    {
      if ((objc_opt_respondsToSelector(v9, "showLaneGuidance:") & 1) == 0)
      {
LABEL_8:

        v4 = v9;
        goto LABEL_9;
      }
      v8 = -[NavSignLaneGuidanceInfo initWithGuidanceLaneInfo:]([NavSignLaneGuidanceInfo alloc], "initWithGuidanceLaneInfo:", *(_QWORD *)(a1 + 32));
      objc_msgSend(v9, "showLaneGuidance:", v8);
    }

    goto LABEL_8;
  }
LABEL_9:

}

void sub_100AF535C(id a1, GuidanceDisplay *a2)
{
  GuidanceDisplay *v2;

  v2 = a2;
  if ((objc_opt_respondsToSelector(v2, "hideLaneGuidance") & 1) != 0)
    -[GuidanceDisplay hideLaneGuidance](v2, "hideLaneGuidance");

}

void sub_100AF5428(uint64_t a1, void *a2)
{
  NavJunctionViewInfo *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector(v4, "showJunctionView:") & 1) != 0)
  {
    v3 = -[NavJunctionViewInfo initWithGuidanceJunctionViewInfo:]([NavJunctionViewInfo alloc], "initWithGuidanceJunctionViewInfo:", *(_QWORD *)(a1 + 32));
    objc_msgSend(v4, "showJunctionView:", v3);

  }
}

void sub_100AF54CC(id a1, GuidanceDisplay *a2)
{
  GuidanceDisplay *v2;

  v2 = a2;
  if ((objc_opt_respondsToSelector(v2, "hideJunctionView") & 1) != 0)
    -[GuidanceDisplay hideJunctionView](v2, "hideJunctionView");

}

void sub_100AF559C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100AF55B8(uint64_t a1, void *a2)
{
  unsigned __int8 *WeakRetained;
  id v4;

  v4 = a2;
  WeakRetained = (unsigned __int8 *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && (objc_opt_respondsToSelector(v4, "usePersistentDisplay:") & 1) != 0)
    objc_msgSend(v4, "usePersistentDisplay:", WeakRetained[75]);

}

void sub_100AF569C(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "updateARSigns:") & 1) != 0)
    objc_msgSend(v3, "updateARSigns:", *(_QWORD *)(a1 + 32));

}

void sub_100AF59CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100AF59E8(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  id v5;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
    objc_msgSend(v5, "setDestinationDisplayName:", *((_QWORD *)WeakRetained + 3));

}

id sub_100AF5C2C(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "setETA:", *(_QWORD *)(a1 + 32));
}

void sub_100AF5CF8(id a1, GuidanceDisplay *a2)
{
  -[GuidanceDisplay showNoGuidance](a2, "showNoGuidance");
}

void sub_100AF5D50(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "setGuidanceEnabled:") & 1) != 0)
    objc_msgSend(v3, "setGuidanceEnabled:animated:", *(unsigned __int8 *)(a1 + 32), 1);

}

void sub_100AF5DFC(id a1, GuidanceDisplay *a2)
{
  -[GuidanceDisplay showRecalculating](a2, "showRecalculating");
}

void sub_100AF5EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100AF5EF8(uint64_t a1, void *a2)
{
  id WeakRetained;
  id v4;

  v4 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if ((objc_opt_respondsToSelector(v4, "didReroute") & 1) != 0)
      objc_msgSend(v4, "didReroute");
    if ((objc_opt_respondsToSelector(v4, "hideJunctionView") & 1) != 0)
    {
      objc_msgSend(v4, "hideJunctionView");
      objc_msgSend(WeakRetained, "_removeRepeatableUpdateForKey:", CFSTR("showJunctionViewInfo"));
    }
  }

}

void sub_100AF5FC8(id a1, GuidanceDisplay *a2)
{
  GuidanceDisplay *v2;

  v2 = a2;
  if ((objc_opt_respondsToSelector(v2, "showRecalculationFailed") & 1) != 0)
    -[GuidanceDisplay showRecalculationFailed](v2, "showRecalculationFailed");

}

void sub_100AF6048(id a1, GuidanceDisplay *a2)
{
  GuidanceDisplay *v2;

  v2 = a2;
  if ((objc_opt_respondsToSelector(v2, "hideRecalculating") & 1) != 0)
    -[GuidanceDisplay hideRecalculating](v2, "hideRecalculating");

}

id sub_100AF61F0(id a1, MNGuidanceARInfo *a2, unint64_t a3)
{
  MNGuidanceARInfo *v3;
  void *v4;
  void *v5;
  void *v6;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[MNGuidanceARInfo mapsLongDescription](v3, "mapsLongDescription"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[MNGuidanceARInfo variableOverrides](v3, "variableOverrides"));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "stringByAppendingFormat:", CFSTR("<variable overrides: %@>"), v5));
  return v6;
}

id sub_100AF6630(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "showProceedingToRouteDistance:displayString:forStep:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(double *)(a1 + 48));
}

id sub_100AF67AC(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "setTimeToManeuver:distanceToManeuver:distanceText:forStep:atStepIndex:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64), *(double *)(a1 + 48), *(double *)(a1 + 56));
}

MKServerFormattedString *__cdecl sub_100AF6AE4(id a1, NSString *a2, unint64_t a3)
{
  return (MKServerFormattedString *)-[NSString mkServerFormattedString](a2, "mkServerFormattedString", a3);
}

id sub_100AF6AEC(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "showManeuverSign:maneuverStepIndex:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

id sub_100AF6B50(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "showManeuverAlertForAnnouncementStage:", *(_QWORD *)(a1 + 32));
}

MKServerFormattedString *__cdecl sub_100AF6E6C(id a1, NSString *a2, unint64_t a3)
{
  return (MKServerFormattedString *)-[NSString mkServerFormattedString](a2, "mkServerFormattedString", a3);
}

id sub_100AF6E74(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "showSecondaryManeuverSign:", *(_QWORD *)(a1 + 32));
}

void sub_100AF6EB4(id a1, GuidanceDisplay *a2)
{
  -[GuidanceDisplay hideSecondaryManeuver](a2, "hideSecondaryManeuver");
}

void sub_100AF7BA8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  PlaceCardItem *v6;
  id v7;
  NSObject *v8;
  id v9;
  void *v10;
  unsigned int v11;
  PlaceCardItem *v12;
  PlaceCardItem *v13;
  void *v14;
  PlaceCardItem *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  char isKindOfClass;
  void *v20;
  void *v21;
  void *v22;
  unsigned __int8 v23;
  id v24;
  NSObject *v25;
  void *v26;
  void *v27;
  uint64_t IsEnabled_Maps420;
  uint64_t v29;
  uint64_t v30;
  uint64_t IsEnabled_DrivingMultiWaypointRoutes;
  uint64_t IsEnabled_Maps182;
  int v33;
  PlaceCardItem *v34;
  __int16 v35;
  void *v36;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = sub_100431C0C();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v33 = 138412290;
      v34 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Error: Identifier refinement ticket failed: %@", (uint8_t *)&v33, 0xCu);
    }

  }
  if (!objc_msgSend(v5, "count"))
  {
    v9 = objc_msgSend(objc_alloc((Class)MKMapItem), "_initWithLabelMarker:", *(_QWORD *)(a1 + 32));
    v12 = [PlaceCardItem alloc];
    goto LABEL_9;
  }
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "waypointInfo"));
  v11 = objc_msgSend(v10, "type");

  v12 = [PlaceCardItem alloc];
  v13 = v12;
  if (v11 != 2)
  {
LABEL_9:
    v15 = -[PlaceCardItem initWithMapItem:](v12, "initWithMapItem:", v9);
    goto LABEL_10;
  }
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "waypointInfo"));
  v15 = -[PlaceCardItem initWithMapItem:chargeStationWaypointInfo:](v13, "initWithMapItem:chargeStationWaypointInfo:", v9, v14);

LABEL_10:
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "containerViewController"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "currentViewController"));
  v18 = objc_opt_class(PlaceCardViewController);
  isKindOfClass = objc_opt_isKindOfClass(v17, v18);

  if ((isKindOfClass & 1) == 0
    || (v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "containerViewController")),
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "currentViewController")),
        v20,
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "placeCardItem")),
        v23 = -[PlaceCardItem isEqual:](v15, "isEqual:", v22),
        v22,
        v21,
        (v23 & 1) == 0))
  {
    v24 = sub_100431C0C();
    v25 = objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "name"));
      v33 = 138412546;
      v34 = v15;
      v35 = 2112;
      v36 = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Pushing place card for %@ (name: %@)", (uint8_t *)&v33, 0x16u);

    }
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "placecardViewController"));
    objc_msgSend(v27, "resetState");
    IsEnabled_Maps420 = (uint64_t)objc_msgSend(*(id *)(a1 + 40), "navigationTransportType");
    v30 = 0;
    switch(IsEnabled_Maps420)
    {
      case 0:
        IsEnabled_DrivingMultiWaypointRoutes = MapsFeature_IsEnabled_DrivingMultiWaypointRoutes(IsEnabled_Maps420, v29);
        if ((IsEnabled_DrivingMultiWaypointRoutes & 1) == 0)
        {
          IsEnabled_Maps420 = MapsFeature_IsEnabled_Maps420(IsEnabled_DrivingMultiWaypointRoutes);
          if ((IsEnabled_Maps420 & 1) == 0)
            goto LABEL_18;
        }
        v30 = 1;
        break;
      case 1:
        IsEnabled_Maps182 = MapsFeature_IsEnabled_DrivingMultiWaypointRoutes(IsEnabled_Maps420, v29);
        goto LABEL_21;
      case 2:
LABEL_18:
        IsEnabled_Maps182 = MapsFeature_IsEnabled_Maps182(IsEnabled_Maps420);
        goto LABEL_21;
      case 5:
        IsEnabled_Maps182 = MapsFeature_IsEnabled_Maps420(IsEnabled_Maps420);
LABEL_21:
        v30 = IsEnabled_Maps182;
        break;
      default:
        break;
    }
    objc_msgSend(v27, "setIsAdditionalStop:", v30);
    objc_msgSend(v27, "setExcludedContent:", objc_msgSend(*(id *)(a1 + 40), "excludedContentForMapItem:", v9));
    objc_msgSend(v27, "setPlaceCardItem:withHistory:", v15, 0);
    objc_msgSend(*(id *)(a1 + 40), "presentPlacecardViewController");

  }
}

void sub_100AF8CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

id sub_100AF8CE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char isKindOfClass;

  v6 = *(void **)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = objc_opt_class(NavigationSession);
  isKindOfClass = objc_opt_isKindOfClass(v7, v8);
  return _objc_msgSend(v6, "trackNavigationStarted:purpose:originResolvedType:destinationResolvedType:", isKindOfClass & 1, *(unsigned int *)(a1 + 48), a2, a3);
}

void sub_100AF8FDC(_QWORD *a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t Log;
  NSObject *v6;
  const __CFString *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const char *v13;
  __int16 v14;
  _BYTE v15[24];

  v4 = MapsSuggestionsLoggingSubsystem;
  Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "NavigationTrackingTask");
  v6 = (id)objc_claimAutoreleasedReturnValue(Log);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    if (a2 >= 5)
    {
      v8 = GEOFindOrCreateLog(v4, "NavigationTrackingTask");
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
      {
        v12 = 136446978;
        v13 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Shared/AuxiliaryTasks/NavigationTrackingTask.m";
        v14 = 1024;
        *(_DWORD *)v15 = 94;
        *(_WORD *)&v15[4] = 2082;
        *(_QWORD *)&v15[6] = "NSString *_stringForType(GEOLogMsgEventDirectionsRequestDetails_DirectionsRequestLocation)";
        *(_WORD *)&v15[14] = 2082;
        *(_QWORD *)&v15[16] = "YES";
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "At %{public}s:%d, %{public}s forbids: %{public}s. An unhandled GEOLogMsgEventDirectionsRequestDetails_DirectionsRequestLocation?", (uint8_t *)&v12, 0x26u);
      }

      v7 = CFSTR("?");
    }
    else
    {
      v7 = off_1011E27B0[a2];
    }
    v10 = a1[5];
    v11 = a1[6];
    v12 = 138412802;
    v13 = (const char *)v7;
    v14 = 2048;
    *(_QWORD *)v15 = v10;
    *(_WORD *)&v15[8] = 2048;
    *(_QWORD *)&v15[10] = v11;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Determined %@ for origin <%+.6f,%+.6f>", (uint8_t *)&v12, 0x20u);
  }

  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = a2;
}

void sub_100AF9184(_QWORD *a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t Log;
  NSObject *v6;
  const __CFString *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const char *v13;
  __int16 v14;
  _BYTE v15[24];

  v4 = MapsSuggestionsLoggingSubsystem;
  Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "NavigationTrackingTask");
  v6 = (id)objc_claimAutoreleasedReturnValue(Log);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    if (a2 >= 5)
    {
      v8 = GEOFindOrCreateLog(v4, "NavigationTrackingTask");
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
      {
        v12 = 136446978;
        v13 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Shared/AuxiliaryTasks/NavigationTrackingTask.m";
        v14 = 1024;
        *(_DWORD *)v15 = 94;
        *(_WORD *)&v15[4] = 2082;
        *(_QWORD *)&v15[6] = "NSString *_stringForType(GEOLogMsgEventDirectionsRequestDetails_DirectionsRequestLocation)";
        *(_WORD *)&v15[14] = 2082;
        *(_QWORD *)&v15[16] = "YES";
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "At %{public}s:%d, %{public}s forbids: %{public}s. An unhandled GEOLogMsgEventDirectionsRequestDetails_DirectionsRequestLocation?", (uint8_t *)&v12, 0x26u);
      }

      v7 = CFSTR("?");
    }
    else
    {
      v7 = off_1011E27B0[a2];
    }
    v10 = a1[5];
    v11 = a1[6];
    v12 = 138412802;
    v13 = (const char *)v7;
    v14 = 2048;
    *(_QWORD *)v15 = v10;
    *(_WORD *)&v15[8] = 2048;
    *(_QWORD *)&v15[10] = v11;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Determined %@ for destination <%+.6f,%+.6f>", (uint8_t *)&v12, 0x20u);
  }

  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = a2;
}

uint64_t sub_100AF932C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t Log;
  NSObject *v4;
  uint64_t v5;
  const __CFString *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  const __CFString *v10;
  uint64_t v11;
  NSObject *v12;
  int v14;
  const char *v15;
  __int16 v16;
  _BYTE v17[14];
  __int16 v18;
  const char *v19;

  v2 = MapsSuggestionsLoggingSubsystem;
  Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "NavigationTrackingTask");
  v4 = (id)objc_claimAutoreleasedReturnValue(Log);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(int *)(*(_QWORD *)(a1[5] + 8) + 24);
    if (v5 >= 5)
    {
      v7 = GEOFindOrCreateLog(v2, "NavigationTrackingTask");
      v8 = objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      {
        v14 = 136446978;
        v15 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Shared/AuxiliaryTasks/NavigationTrackingTask.m";
        v16 = 1024;
        *(_DWORD *)v17 = 94;
        *(_WORD *)&v17[4] = 2082;
        *(_QWORD *)&v17[6] = "NSString *_stringForType(GEOLogMsgEventDirectionsRequestDetails_DirectionsRequestLocation)";
        v18 = 2082;
        v19 = "YES";
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "At %{public}s:%d, %{public}s forbids: %{public}s. An unhandled GEOLogMsgEventDirectionsRequestDetails_DirectionsRequestLocation?", (uint8_t *)&v14, 0x26u);
      }

      v6 = CFSTR("?");
    }
    else
    {
      v6 = off_1011E27B0[v5];
    }
    v9 = *(int *)(*(_QWORD *)(a1[6] + 8) + 24);
    if (v9 >= 5)
    {
      v11 = GEOFindOrCreateLog(v2, "NavigationTrackingTask");
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
      {
        v14 = 136446978;
        v15 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Shared/AuxiliaryTasks/NavigationTrackingTask.m";
        v16 = 1024;
        *(_DWORD *)v17 = 94;
        *(_WORD *)&v17[4] = 2082;
        *(_QWORD *)&v17[6] = "NSString *_stringForType(GEOLogMsgEventDirectionsRequestDetails_DirectionsRequestLocation)";
        v18 = 2082;
        v19 = "YES";
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "At %{public}s:%d, %{public}s forbids: %{public}s. An unhandled GEOLogMsgEventDirectionsRequestDetails_DirectionsRequestLocation?", (uint8_t *)&v14, 0x26u);
      }

      v10 = CFSTR("?");
    }
    else
    {
      v10 = off_1011E27B0[v9];
    }
    v14 = 138412546;
    v15 = (const char *)v6;
    v16 = 2112;
    *(_QWORD *)v17 = v10;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Calling back with [%@, %@]", (uint8_t *)&v14, 0x16u);
  }

  return (*(uint64_t (**)(void))(a1[4] + 16))();
}

void sub_100AF95A8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t Log;
  NSObject *v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  int v19;
  void *v20;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v5 || v6)
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "NavigationTrackingTask");
    v14 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v19 = 138412290;
      v20 = v7;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Error checking coordinate: %@", (uint8_t *)&v19, 0xCu);
    }

    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0);
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 40);
    v9 = v5;
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "shortcutsForHome"));
    v11 = objc_msgSend(v10, "count");

    if (v11)
    {
      v12 = 1;
    }
    else
    {
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "shortcutsForWork"));
      v16 = objc_msgSend(v15, "count");

      if (v16)
      {
        v12 = 2;
      }
      else
      {
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "shortcutsForAll"));
        v18 = objc_msgSend(v17, "count");

        if (v18)
          v12 = 3;
        else
          v12 = 4;
      }
    }

    (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v8, v12);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

id sub_100AFA368()
{
  if (qword_1014D3F58 != -1)
    dispatch_once(&qword_1014D3F58, &stru_1011E2800);
  return (id)qword_1014D3F50;
}

void sub_100AFA860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  _Block_object_dispose(&a34, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100AFA8A4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100AFA8B4(uint64_t a1)
{

}

void sub_100AFA8BC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char v8;
  id v9;

  v3 = a2;
  v4 = v3;
  v9 = v3;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40)
    || (v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "methodSignatureForSelector:", *(_QWORD *)(a1 + 48))),
        v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8),
        v7 = *(void **)(v6 + 40),
        *(_QWORD *)(v6 + 40) = v5,
        v7,
        v4 = v9,
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40)))
  {
    v8 = objc_opt_respondsToSelector(v4, *(_QWORD *)(a1 + 48));
    v4 = v9;
    if ((v8 & 1) != 0)
    {
      objc_msgSend(*(id *)(a1 + 32), "addObject:", v9);
      v4 = v9;
    }
  }

}

void sub_100AFACEC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "ChromeDelegateProxy");
  v2 = (void *)qword_1014D3F50;
  qword_1014D3F50 = (uint64_t)v1;

}

void sub_100AFB82C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100AFB848(uint64_t a1)
{
  dispatch_time_t v2;
  _QWORD block[4];
  id v4;

  v2 = dispatch_time(0, 1000000000);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100AFB8E4;
  block[3] = &unk_1011AD260;
  objc_copyWeak(&v4, (id *)(a1 + 32));
  dispatch_after(v2, (dispatch_queue_t)&_dispatch_main_q, block);
  objc_destroyWeak(&v4);
}

void sub_100AFB8E4(uint64_t a1)
{
  id *WeakRetained;
  id *v2;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained[16], "setButtonEnabled:", 1);
    WeakRetained = v2;
  }

}

void sub_100AFB9E0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100AFB9FC(uint64_t a1)
{
  dispatch_time_t v2;
  _QWORD block[4];
  id v4;

  v2 = dispatch_time(0, 1000000000);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100AFBA98;
  block[3] = &unk_1011AD260;
  objc_copyWeak(&v4, (id *)(a1 + 32));
  dispatch_after(v2, (dispatch_queue_t)&_dispatch_main_q, block);
  objc_destroyWeak(&v4);
}

void sub_100AFBA98(uint64_t a1)
{
  id *WeakRetained;
  id *v2;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained[16], "setButtonEnabled:", 1);
    WeakRetained = v2;
  }

}

void sub_100AFBBB8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100AFBBD4(uint64_t a1)
{
  id *WeakRetained;
  id *v2;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained[16], "updateButtons");
    WeakRetained = v2;
  }

}

void sub_100AFD114(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_100AFD154(uint64_t a1)
{
  void *v1;
  void *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[MapsFavoritesManager sharedManager](_TtC4Maps20MapsFavoritesManager, "sharedManager"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "shortcutsForLibrary"));
  objc_msgSend(WeakRetained, "_updateContent:", v2);

}

void sub_100AFD1B8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v5 = a2;
  if (!a3)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100AFD260;
    v6[3] = &unk_1011AD1E8;
    objc_copyWeak(&v8, (id *)(a1 + 32));
    v7 = v5;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);

    objc_destroyWeak(&v8);
  }

}

void sub_100AFD260(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_updateSuggestions:", *(_QWORD *)(a1 + 32));

}

void sub_100AFD29C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v5 = a2;
  if (!a3)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100AFD344;
    v6[3] = &unk_1011AD1E8;
    objc_copyWeak(&v8, (id *)(a1 + 32));
    v7 = v5;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);

    objc_destroyWeak(&v8);
  }

}

void sub_100AFD344(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_updateContent:", *(_QWORD *)(a1 + 32));

}

void sub_100AFD380(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v5 = a2;
  if (!a3)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100AFD428;
    v6[3] = &unk_1011AD1E8;
    objc_copyWeak(&v8, (id *)(a1 + 32));
    v7 = v5;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);

    objc_destroyWeak(&v8);
  }

}

void sub_100AFD428(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_updateSuggestions:", *(_QWORD *)(a1 + 32));

}

void sub_100AFD58C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100AFD698(uint64_t a1)
{
  int v1;
  void *v2;
  id v3;

  if (*(uint64_t *)(a1 + 40) >= 2)
  {
    v1 = *(unsigned __int8 *)(a1 + 48);
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tableView"));
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSIndexSet indexSetWithIndex:](NSIndexSet, "indexSetWithIndex:", 1));
    if (v1)
      objc_msgSend(v3, "deleteSections:withRowAnimation:", v2, 0);
    else
      objc_msgSend(v3, "insertSections:withRowAnimation:", v2, 0);

  }
}

void sub_100AFDE68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100AFDE84(uint64_t a1, int a2)
{
  id WeakRetained;
  _QWORD block[4];
  id v5;

  if (a2)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100AFDF18;
    block[3] = &unk_1011AD260;
    objc_copyWeak(&v5, (id *)(a1 + 32));
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
    objc_destroyWeak(&v5);
  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_touchMapsSuggestionsEngine");

}

void sub_100AFDF18(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_loadContentAndSuggestions");

}

void sub_100AFEAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100AFEB0C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100AFEBB0;
  v5[3] = &unk_1011AD1E8;
  objc_copyWeak(&v7, (id *)(a1 + 32));
  v6 = v3;
  v4 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v5);

  objc_destroyWeak(&v7);
}

void sub_100AFEBB0(uint64_t a1)
{
  id WeakRetained;
  BOOL v3;
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (*(_QWORD *)(a1 + 32))
    v3 = 1;
  else
    v3 = WeakRetained == 0;
  if (!v3)
  {
    v4 = WeakRetained;
    objc_msgSend(WeakRetained, "reloadDataIfPossible");
    WeakRetained = v4;
  }

}

void sub_100AFEBF8(uint64_t a1, char a2)
{
  _QWORD v3[4];
  id v4;
  char v5;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100AFEC78;
  v3[3] = &unk_1011AD388;
  objc_copyWeak(&v4, (id *)(a1 + 32));
  v5 = a2;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v3);
  objc_destroyWeak(&v4);
}

void sub_100AFEC78(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  BOOL v4;
  id v5;
  id v6;

  v2 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v6 = WeakRetained;
  if (*(_BYTE *)(a1 + 40))
    v4 = 1;
  else
    v4 = WeakRetained == 0;
  if (!v4)
    objc_msgSend(WeakRetained, "reloadDataIfPossible");
  v5 = objc_loadWeakRetained(v2);
  objc_msgSend(v5, "_touchMapsSuggestionsEngine");

}

void sub_100AFF404(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100AFF420(uint64_t a1, void *a2)
{
  id *v3;
  id WeakRetained;
  void (**v5)(id, uint64_t);

  v3 = (id *)(a1 + 40);
  v5 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  objc_msgSend(WeakRetained, "removeIndexPath:", *(_QWORD *)(a1 + 32));

  v5[2](v5, 1);
}

void sub_100AFF538(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100AFF554(uint64_t a1, uint64_t a2)
{
  id WeakRetained;

  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a2, 1);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "shareRowAtIndexPath:completion:", *(_QWORD *)(a1 + 32), &stru_1011E2820);

}

void sub_100AFF64C(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_loadContentAndSuggestions");
    WeakRetained = v2;
  }

}

void sub_100AFF708(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_loadContentAndSuggestions");
    WeakRetained = v2;
  }

}

void sub_100AFFF8C(id a1)
{
  VLFSessionUsageTracker *v1;
  void *v2;

  v1 = objc_opt_new(VLFSessionUsageTracker);
  v2 = (void *)qword_1014D3F60;
  qword_1014D3F60 = (uint64_t)v1;

}

id sub_100B007FC()
{
  if (qword_1014D3F78 != -1)
    dispatch_once(&qword_1014D3F78, &stru_1011E2860);
  return (id)qword_1014D3F70;
}

void sub_100B01E08(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFSessionUsageTracker");
  v2 = (void *)qword_1014D3F70;
  qword_1014D3F70 = (uint64_t)v1;

}

void sub_100B04430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100B04448(uint64_t result)
{
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24);
  return result;
}

void sub_100B04554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100B0456C(uint64_t a1, double a2, double a3, double a4, double a5)
{
  *(CGFloat *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CGRectGetMaxX(*(CGRect *)&a2);
}

BOOL sub_100B04790(uint64_t a1, void *a2)
{
  void *v3;
  _BOOL8 v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "view"));
  v4 = v3 == *(void **)(a1 + 32);

  return v4;
}

void sub_100B0489C(uint64_t a1, void *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  double MaxX;
  void *v12;
  id v13;
  CGRect v14;
  CGRect v15;

  v13 = a2;
  if (MKApplicationLayoutDirectionIsRightToLeft(v13))
  {
    objc_msgSend(*(id *)(a1 + 32), "bounds");
    MaxX = CGRectGetMaxX(v14);
    v15.origin.x = a3;
    v15.origin.y = a4;
    v15.size.width = a5;
    v15.size.height = a6;
    a3 = MaxX - CGRectGetMaxX(v15);
  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "view"));
  objc_msgSend(v12, "setFrame:", a3, a4, a5, a6);

}

void sub_100B04A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100B04A78(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  double v10;
  uint64_t v11;
  double MaxX;
  double v13;
  uint64_t v14;
  double MaxY;
  CGRect v16;
  CGRect v17;
  CGRect v18;

  v10 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 32);
  if (v10 <= CGRectGetMaxX(*(CGRect *)&a2))
  {
    v16.origin.x = a2;
    v16.origin.y = a3;
    v16.size.width = a4;
    v16.size.height = a5;
    MaxX = CGRectGetMaxX(v16);
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  }
  else
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    MaxX = *(double *)(v11 + 32);
  }
  *(double *)(v11 + 32) = MaxX;
  v13 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v17.origin.x = a2;
  v17.origin.y = a3;
  v17.size.width = a4;
  v17.size.height = a5;
  if (v13 <= CGRectGetMaxY(v17))
  {
    v18.origin.x = a2;
    v18.origin.y = a3;
    v18.size.width = a4;
    v18.size.height = a5;
    MaxY = CGRectGetMaxY(v18);
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  }
  else
  {
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    MaxY = *(double *)(v14 + 40);
  }
  *(double *)(v14 + 40) = MaxY;
}

void sub_100B04C34(uint64_t a1, void *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  id v11;
  double MinX;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  void *i;
  void *v18;
  void *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  double MinY;
  CGFloat Height;
  uint64_t v28;
  double v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  CGRect v35;
  CGRect v36;
  CGRect v37;

  v11 = a2;
  v35.origin.x = a3;
  v35.origin.y = a4;
  v35.size.width = a5;
  v35.size.height = a6;
  MinX = CGRectGetMinX(v35);
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v13 = v11;
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v31;
    do
    {
      for (i = 0; i != v15; i = (char *)i + 1)
      {
        if (*(_QWORD *)v31 != v16)
          objc_enumerationMutation(v13);
        v18 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * (_QWORD)i);
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "view", (_QWORD)v30));
        objc_msgSend(v19, "_mapkit_fittingSize");
        v21 = v20;
        v23 = v22;

        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "firstObject"));
        if (v18 != v24)
        {
          objc_msgSend(*(id *)(a1 + 32), "_paddingForItem:", v18);
          MinX = MinX + v25;
        }
        v36.origin.x = a3;
        v36.origin.y = a4;
        v36.size.width = a5;
        v36.size.height = a6;
        MinY = CGRectGetMinY(v36);
        v37.origin.x = a3;
        v37.origin.y = a4;
        v37.size.width = a5;
        v37.size.height = a6;
        Height = CGRectGetHeight(v37);
        v29 = UIRoundToViewScale(*(_QWORD *)(a1 + 32), v28, (Height - v23) * 0.5);
        (*(void (**)(double, double, double, double))(*(_QWORD *)(a1 + 40) + 16))(MinX, MinY + v29, v21, v23);
        MinX = v21 + MinX;
      }
      v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
    }
    while (v15);
  }

}

double sub_100B05124(uint64_t a1, double a2, double a3, double a4, double a5)
{
  double v8;
  double v9;

  objc_msgSend(*(id *)(a1 + 32), "maxLineHeight");
  if (v8 > 0.0)
  {
    objc_msgSend(*(id *)(a1 + 32), "maxLineHeight");
    if (a5 >= v9)
      objc_msgSend(*(id *)(a1 + 32), "maxLineHeight");
  }
  return a2;
}

id sub_100B075AC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
}

id sub_100B076EC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
}

void sub_100B076F4(uint64_t a1, int a2)
{
  id v2;

  if (a2)
  {
    if (!*(_BYTE *)(a1 + 40))
    {
      v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "loadingIndicator"));
      objc_msgSend(v2, "stopAnimating");

    }
  }
}

id sub_100B079B4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
}

id sub_100B08220()
{
  if (qword_1014D3F88 != -1)
    dispatch_once(&qword_1014D3F88, &stru_1011E2948);
  return (id)qword_1014D3F80;
}

void sub_100B08EC0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 104));
  _Unwind_Resume(a1);
}

id sub_100B08F00(uint64_t a1, double a2)
{
  *(float *)&a2 = fminf(*(float *)&a2, 1.0);
  return objc_msgSend(*(id *)(a1 + 32), "setScale:", a2);
}

void sub_100B08F10(uint64_t a1, int a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  void *v6;
  double v7;
  id v8;
  NSObject *v9;
  __CFString *v10;
  __CFString *v11;
  int v12;
  __CFString *v13;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = (void *)*((_QWORD *)WeakRetained + 3);
    *((_QWORD *)WeakRetained + 3) = 0;

    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "_vkNavigationPuckMarker"));
    LODWORD(v7) = 1.0;
    objc_msgSend(v6, "setScale:", v7);

  }
  v8 = sub_100B08220();
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    v10 = CFSTR("NO");
    if (a2)
      v10 = CFSTR("YES");
    v11 = v10;
    v12 = 138412290;
    v13 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Transition to navigation puck completed: %@", (uint8_t *)&v12, 0xCu);

  }
}

id sub_100B09020(uint64_t a1)
{
  void *v2;
  CGAffineTransform v4;
  CGAffineTransform v5;

  CGAffineTransformMakeScale(&v5, 0.0, 0.0);
  v2 = *(void **)(a1 + 32);
  v4 = v5;
  objc_msgSend(v2, "setTransform:", &v4);
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 0.0);
}

void sub_100B093E0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 104));
  _Unwind_Resume(a1);
}

id sub_100B09420(uint64_t a1, double a2)
{
  *(float *)&a2 = 1.0 - *(float *)&a2;
  return objc_msgSend(*(id *)(a1 + 32), "setScale:", a2);
}

void sub_100B09430(uint64_t a1, int a2)
{
  id WeakRetained;
  void *v5;
  void *v6;
  double v7;
  id v8;
  NSObject *v9;
  __CFString *v10;
  __CFString *v11;
  int v12;
  __CFString *v13;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    v6 = (void *)*((_QWORD *)WeakRetained + 3);
    *((_QWORD *)WeakRetained + 3) = 0;

  }
  objc_msgSend(*(id *)(a1 + 32), "setEnabled:", 0);
  LODWORD(v7) = 0;
  objc_msgSend(*(id *)(a1 + 32), "setScale:", v7);
  v8 = sub_100B08220();
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    v10 = CFSTR("NO");
    if (a2)
      v10 = CFSTR("YES");
    v11 = v10;
    v12 = 138412290;
    v13 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Transition to normal puck completed: %@", (uint8_t *)&v12, 0xCu);

  }
}

id sub_100B09540(uint64_t a1)
{
  void *v2;
  __int128 v3;
  _OWORD v5[3];

  v2 = *(void **)(a1 + 32);
  v3 = *(_OWORD *)&CGAffineTransformIdentity.c;
  v5[0] = *(_OWORD *)&CGAffineTransformIdentity.a;
  v5[1] = v3;
  v5[2] = *(_OWORD *)&CGAffineTransformIdentity.tx;
  objc_msgSend(v2, "setTransform:", v5);
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 1.0);
}

void sub_100B09870(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "UserLocationView");
  v2 = (void *)qword_1014D3F80;
  qword_1014D3F80 = (uint64_t)v1;

}

void sub_100B0A5D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100B0A5FC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *WeakRetained;
  _QWORD *v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  _QWORD *v12;
  objc_class *v13;
  NSString *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  id v20;
  id v21;
  _QWORD *v22;
  objc_class *v23;
  NSString *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  const char *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint32_t v33;
  _QWORD *v34;
  objc_class *v35;
  NSString *v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint8_t buf[4];
  void *v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  id v46;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = WeakRetained;
  if (WeakRetained)
  {
    if (*((_BYTE *)WeakRetained + 32))
    {
      v9 = sub_10043237C();
      v10 = objc_claimAutoreleasedReturnValue(v9);
      v11 = v10;
      if (v5)
      {
        if (!os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
LABEL_11:

          v20 = v5;
          v11 = v8[3];
          v8[3] = v20;
LABEL_27:

          goto LABEL_28;
        }
        v12 = v8;
        v13 = (objc_class *)objc_opt_class(v12);
        v14 = NSStringFromClass(v13);
        v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
        if ((objc_opt_respondsToSelector(v12, "accessibilityIdentifier") & 1) != 0)
        {
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "performSelector:", "accessibilityIdentifier"));
          v17 = v16;
          if (v16 && !objc_msgSend(v16, "isEqualToString:", v15))
          {
            v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v15, v12, v17));

            goto LABEL_10;
          }

        }
        v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v15, v12));
LABEL_10:

        v19 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 138543618;
        v42 = v18;
        v43 = 2114;
        v44 = v19;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "[%{public}@] Acquired token for trip %{public}@", buf, 0x16u);

        goto LABEL_11;
      }
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        goto LABEL_27;
      v34 = v8;
      v35 = (objc_class *)objc_opt_class(v34);
      v36 = NSStringFromClass(v35);
      v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
      if ((objc_opt_respondsToSelector(v34, "accessibilityIdentifier") & 1) != 0)
      {
        v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "performSelector:", "accessibilityIdentifier"));
        v39 = v38;
        if (v38 && !objc_msgSend(v38, "isEqualToString:", v37))
        {
          v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v37, v34, v39));

          goto LABEL_25;
        }

      }
      v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v37, v34));
LABEL_25:

      v40 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138543874;
      v42 = v28;
      v43 = 2114;
      v44 = v40;
      v45 = 2114;
      v46 = v6;
      v30 = "[%{public}@] Failed to acquire token for trip %{public}@: %{public}@";
      v31 = v11;
      v32 = OS_LOG_TYPE_ERROR;
      v33 = 32;
      goto LABEL_26;
    }
    v21 = sub_10043237C();
    v11 = objc_claimAutoreleasedReturnValue(v21);
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      goto LABEL_27;
    v22 = v8;
    v23 = (objc_class *)objc_opt_class(v22);
    v24 = NSStringFromClass(v23);
    v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
    if ((objc_opt_respondsToSelector(v22, "accessibilityIdentifier") & 1) != 0)
    {
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "performSelector:", "accessibilityIdentifier"));
      v27 = v26;
      if (v26 && !objc_msgSend(v26, "isEqualToString:", v25))
      {
        v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v25, v22, v27));

        goto LABEL_18;
      }

    }
    v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v25, v22));
LABEL_18:

    v29 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138543618;
    v42 = v28;
    v43 = 2114;
    v44 = v29;
    v30 = "[%{public}@] No longer active after token acquisition callback for trip %{public}@";
    v31 = v11;
    v32 = OS_LOG_TYPE_INFO;
    v33 = 22;
LABEL_26:
    _os_log_impl((void *)&_mh_execute_header, v31, v32, v30, buf, v33);

    goto LABEL_27;
  }
LABEL_28:

}

void sub_100B0AAF0(os_log_type_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v10;
  uint64_t v11;
  uint64_t Log;
  NSObject *v13;
  _BOOL4 v14;
  id v15;
  uint64_t v16;
  NSObject *v17;
  uint8_t buf[4];
  id v19;

  v10 = a2;
  v11 = DefaultLoggingSubsystem;
  Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "BackgroundState");
  v13 = objc_claimAutoreleasedReturnValue(Log);
  v14 = os_log_type_enabled(v13, a1);

  if (v14)
  {
    v15 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:arguments:", v10, &a9);
    v16 = GEOFindOrCreateLog(v11, "BackgroundState");
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, a1))
    {
      *(_DWORD *)buf = 138477827;
      v19 = v15;
      _os_log_impl((void *)&_mh_execute_header, v17, a1, "%{private}@", buf, 0xCu);
    }

  }
}

void sub_100B0D4A8(uint64_t a1, double a2, double a3, double a4, double a5)
{
  _BYTE *v10;
  void *v11;
  id v12;
  id v13;

  v10 = *(_BYTE **)(a1 + 32);
  if (v10[425])
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "mapView"));
    v12 = objc_msgSend(v11, "userTrackingMode");

    if (v12)
      return;
    v10 = *(_BYTE **)(a1 + 32);
  }
  v13 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "mapView"));
  objc_msgSend(v13, "animateToVisibleMapRect:usingDefaultAnimationDuration:completion:", 0, &stru_1011E29B8, a2, a3, a4, a5);

}

id sub_100B0D67C(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  id result;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stepActionCoordinator"));
  v3 = objc_msgSend(v2, "isAuthorizedForPreciseLocation");

  result = objc_msgSend(*(id *)(a1 + 32), "isUserTrackingViewVisible");
  if (v3 != (_DWORD)result)
    return _objc_msgSend(*(id *)(a1 + 32), "setUserTrackingViewVisible:animated:", v3 & (result ^ 1), 1);
  return result;
}

id sub_100B0D834(uint64_t a1)
{
  double v2;

  v2 = 1.0;
  if (!*(_BYTE *)(a1 + 40))
    v2 = 0.0;
  objc_msgSend(*(id *)(a1 + 32), "setAlpha:", v2);
  return objc_msgSend(*(id *)(a1 + 32), "setHidden:", 0);
}

id sub_100B0D874(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setHidden:", *(_BYTE *)(a1 + 40) == 0);
}

void sub_100B0DB08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100B0DB24(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_locationExpirationTimerFired");

}

void sub_100B0EA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100B0EAB0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_backgroundArrivalTimerFired");

}

void sub_100B0EBAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100B0EBC8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_arrivalEndTimerFired");

}

void sub_100B0F1D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100B0F1EC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_delayTimerFired");

}

id sub_100B1084C(void *a1, int a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "postTertiaryItems"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](NSMutableArray, "arrayWithArray:", v4));

  if (a2)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "expandedItems"));
    objc_msgSend(v5, "addObjectsFromArray:", v6);

  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "footerItems"));
  objc_msgSend(v5, "addObjectsFromArray:", v7);

  v8 = objc_msgSend(v5, "copy");
  return v8;
}

void sub_100B10DA8(id a1, GEOComposedStringArgument *a2)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(-[GEOComposedStringArgument distanceFormat](a2, "distanceFormat"));
  objc_msgSend(v2, "setFormatOptions:", 1);

}

id sub_100B1163C()
{
  if (qword_1014D3F98 != -1)
    dispatch_once(&qword_1014D3F98, &stru_1011E2AC8);
  return (id)qword_1014D3F90;
}

void sub_100B118E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100B1190C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "runWithCurrentOptions");
}

uint64_t sub_100B11914(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  void *v5;
  objc_class *v6;
  NSString *v7;
  void *v8;
  void *v9;
  void *v10;
  __CFString *v11;
  uint64_t result;
  uint8_t buf[4];
  __CFString *v14;

  v2 = sub_100B1163C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    goto LABEL_11;
  v4 = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = v4;
  if (!v4)
  {
    v11 = CFSTR("<nil>");
    goto LABEL_10;
  }
  v6 = (objc_class *)objc_opt_class(v4);
  v7 = NSStringFromClass(v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  if ((objc_opt_respondsToSelector(v5, "accessibilityIdentifier") & 1) != 0)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "performSelector:", "accessibilityIdentifier"));
    v10 = v9;
    if (v9 && !objc_msgSend(v9, "isEqualToString:", v8))
    {
      v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v8, v5, v10));

      goto LABEL_8;
    }

  }
  v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v8, v5));
LABEL_8:

LABEL_10:
  *(_DWORD *)buf = 138543362;
  v14 = v11;
  _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[%{public}@] Transition complete", buf, 0xCu);

LABEL_11:
  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_100B11B7C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "ChromeContextTransition");
  v2 = (void *)qword_1014D3F90;
  qword_1014D3F90 = (uint64_t)v1;

}

void sub_100B12748(uint64_t a1, void *a2, unint64_t a3)
{
  void *v5;
  id v6;
  void *v7;
  objc_class *v8;
  NSString *v9;
  void *v10;
  void *v11;
  RoutePlanningRefinementBarButton *v12;

  v5 = *(void **)(a1 + 32);
  v6 = a2;
  if ((unint64_t)objc_msgSend(v5, "count") <= a3)
  {
    v12 = -[RoutePlanningRefinementBarButton initWithRefinement:]([RoutePlanningRefinementBarButton alloc], "initWithRefinement:", v6);
    -[RoutePlanningRefinementBarButton setTranslatesAutoresizingMaskIntoConstraints:](v12, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    -[RoutePlanningRefinementBarButton addTarget:action:forControlEvents:](v12, "addTarget:action:forControlEvents:", *(_QWORD *)(a1 + 40), "_buttonMenuTriggered:", 0x4000);
    -[RoutePlanningRefinementBarButton addTarget:action:forControlEvents:](v12, "addTarget:action:forControlEvents:", *(_QWORD *)(a1 + 40), "_touchUpInsideButton:", 64);
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v12);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "containerView"));
    objc_msgSend(v7, "addSubview:", v12);

  }
  else
  {
    v12 = (RoutePlanningRefinementBarButton *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", a3));
    -[RoutePlanningRefinementBarButton setRefinement:](v12, "setRefinement:", v6);
  }
  v8 = (objc_class *)objc_opt_class(v6);

  v9 = NSStringFromClass(v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "stringByReplacingOccurrencesOfString:withString:", CFSTR("Model"), CFSTR("Button")));
  -[RoutePlanningRefinementBarButton setAccessibilityIdentifier:](v12, "setAccessibilityIdentifier:", v11);

}

void sub_100B12880(id a1, RoutePlanningRefinementBarButton *a2, unint64_t a3, BOOL *a4)
{
  -[RoutePlanningRefinementBarButton removeFromSuperview](a2, "removeFromSuperview", a3, a4);
}

id sub_100B12888(uint64_t a1)
{
  +[NSLayoutConstraint activateConstraints:](NSLayoutConstraint, "activateConstraints:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
  return objc_msgSend(*(id *)(a1 + 32), "layoutBelowIfNeeded");
}

id sub_100B134DC()
{
  if (qword_1014D3FA8 != -1)
    dispatch_once(&qword_1014D3FA8, &stru_1011E2B50);
  return (id)qword_1014D3FA0;
}

id sub_100B13C68(uint64_t a1)
{
  GEOMapRectForGEOTileKey(a1 + 40);
  return _objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "setNeedsDisplayInMapRect:");
}

id sub_100B13D44(uint64_t a1)
{
  GEOMapRectForGEOTileKey(a1 + 40);
  return _objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "setNeedsDisplayInMapRect:");
}

void sub_100B13EA4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "RouteTilePreloading");
  v2 = (void *)qword_1014D3FA0;
  qword_1014D3FA0 = (uint64_t)v1;

}

id sub_100B13F20(id a1)
{
  return &off_101275098;
}

id sub_100B13F30(id a1)
{
  return &off_1012706C0;
}

id sub_100B13F3C(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100B13F48(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100B14314(id a1, GEORPEnrichmentImage *a2, unint64_t a3)
{
  GEORPEnrichmentImage *v3;
  UGCDownloadablePhoto *v4;
  id v5;

  v3 = a2;
  v4 = -[UGCDownloadablePhoto initWithGEORPEnrichmentImage:]([UGCDownloadablePhoto alloc], "initWithGEORPEnrichmentImage:", v3);

  v5 = objc_msgSend(objc_alloc((Class)MKMapItemPhoto), "initWithGeoMapItemPhoto:", v4);
  return v5;
}

void sub_100B14458(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100B14470(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100B14480(uint64_t a1)
{

}

void sub_100B14488(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_100B14498(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = &__NSArray0__struct;

}

void sub_100B14A6C(id a1)
{
  id v1;
  void *v2;

  if (!qword_1014D3FB8)
  {
    v1 = objc_alloc_init((Class)NSLock);
    v2 = (void *)qword_1014D3FB8;
    qword_1014D3FB8 = (uint64_t)v1;

  }
}

void sub_100B14B1C(id a1)
{
  id v1;
  void *v2;

  if (!qword_1014D3FB8)
  {
    v1 = objc_alloc_init((Class)NSLock);
    v2 = (void *)qword_1014D3FB8;
    qword_1014D3FB8 = (uint64_t)v1;

  }
}

id sub_100B15B78(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  char *v8;
  void *v9;
  char *v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "rideBookingRideOption"));
  +[RouteOverviewCellComposer configureCell:forRideBookingRideOption:](RouteOverviewCellComposer, "configureCell:forRideBookingRideOption:", v2, v3);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "rideBookingRideOptions"));
  v5 = objc_msgSend(v4, "count");

  if (v5 == (id)1)
  {
    v6 = *(void **)(a1 + 32);
    v7 = 1;
  }
  else if (objc_msgSend(*(id *)(a1 + 40), "rideBookingRideOptionIndex"))
  {
    v8 = (char *)objc_msgSend(*(id *)(a1 + 40), "rideBookingRideOptionIndex");
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "rideBookingRideOptions"));
    v10 = (char *)objc_msgSend(v9, "count") - 1;

    v6 = *(void **)(a1 + 32);
    if (v8 == v10)
      v7 = 4;
    else
      v7 = 3;
  }
  else
  {
    v6 = *(void **)(a1 + 32);
    v7 = 2;
  }
  return objc_msgSend(v6, "setOverrideCellGrouping:", v7);
}

id sub_100B15C50(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "configureWithRideBookingRideOptionStatus:titleType:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 80), *(_QWORD *)(a1 + 48));
}

void sub_100B15DC8(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "rideBookingRideOption"));
  +[RouteOverviewCellComposer configureCell:forRideBookingRideOption:](RouteOverviewCellComposer, "configureCell:forRideBookingRideOption:", v1, v2);

}

double sub_100B15ED4(uint64_t a1)
{
  void *v1;
  id v2;
  double top;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "traitCollection"));
  v2 = objc_msgSend(v1, "userInterfaceIdiom");

  if (v2 == (id)5)
    return _UICollectionViewListSectionSeparatorInsetHidden[0];
  top = NSDirectionalEdgeInsetsZero.top;
  +[RouteOverviewCell horizontalContentInset](RouteOverviewCell, "horizontalContentInset");
  +[RouteOverviewCell horizontalBackgroundInset](RouteOverviewCell, "horizontalBackgroundInset");
  return top;
}

const __CFString *sub_100B172CC(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("Unspecified");
  else
    return *(&off_1011E2D90 + a1 - 1);
}

void sub_100B17BAC(id a1)
{
  GuidanceModernBannerSignStyle *v1;
  void *v2;

  v1 = objc_alloc_init(GuidanceModernBannerSignStyle);
  v2 = (void *)qword_1014D3FD0;
  qword_1014D3FD0 = (uint64_t)v1;

}

id sub_100B17F54(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "resumeUpdates");
}

id sub_100B17F5C(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "_notifyDelegate");
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 8) = 0;
  return result;
}

id sub_100B18694()
{
  if (qword_1014D3FE8 != -1)
    dispatch_once(&qword_1014D3FE8, &stru_1011E2E30);
  return (id)qword_1014D3FE0;
}

void sub_100B190D0(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v5 = a2;
  objc_msgSend(*(id *)(a1 + 32), "resumeUpdates");
  v3 = v5;
  if (v5)
  {
    objc_msgSend(*(id *)(a1 + 32), "_selectCustomPOIAnnotation:camera:restoreRegion:updateIfNeeded:completion:", v5, *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 56), *(unsigned __int8 *)(a1 + 57), *(_QWORD *)(a1 + 48));
LABEL_5:
    v3 = v5;
    goto LABEL_6;
  }
  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
  {
    (*(void (**)(uint64_t, _QWORD))(v4 + 16))(v4, 0);
    goto LABEL_5;
  }
LABEL_6:

}

uint64_t sub_100B19294(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    objc_msgSend(*(id *)(a1 + 40), "selectLabelMarker:animated:updateIfNeeded:", v2, 1, *(unsigned __int8 *)(a1 + 56));
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 32));
  return result;
}

id sub_100B19A9C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_applyMapSelectionDidChange");
}

void sub_100B19E24(uint64_t a1)
{
  uint64_t v1;
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void (**v8)(void);
  void *v9;
  SearchSessionAnalytics *v10;
  void *v11;
  MapsAnalyticsHelper *v12;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 11))
  {
    *(_BYTE *)(v1 + 11) = 0;
    v12 = -[MapsAnalyticsHelper initWithLabelMarker:]([MapsAnalyticsHelper alloc], "initWithLabelMarker:", *(_QWORD *)(a1 + 40));
    v3 = (id)-[MapsAnalyticsHelper tapAction](v12, "tapAction");
    v4 = objc_msgSend(*(id *)(a1 + 32), "currentMapViewTargetForAnalytics");
    v5 = (void *)objc_claimAutoreleasedReturnValue(-[MapsAnalyticsHelper actionDetails](v12, "actionDetails"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(-[MapsAnalyticsHelper eventValue](v12, "eventValue"));
    if ((_DWORD)v3)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(-[MapsAnalyticsHelper populateTapEvent](v12, "populateTapEvent"));

      if (v7)
      {
        v8 = (void (**)(void))objc_claimAutoreleasedReturnValue(-[MapsAnalyticsHelper populateTapEvent](v12, "populateTapEvent"));
        v8[2]();

      }
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
      objc_msgSend(v9, "captureUserAction:onTarget:eventValue:placeActionDetails:", v3, v4, v6, v5);

      v10 = objc_alloc_init(SearchSessionAnalytics);
      -[SearchSessionAnalytics setAction:](v10, "setAction:", v3);
      -[SearchSessionAnalytics setTarget:](v10, "setTarget:", v4);
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[SearchSessionAnalyticsAggregator sharedAggregator](SearchSessionAnalyticsAggregator, "sharedAggregator"));
      objc_msgSend(v11, "collectSearchSessionAnalytics:", v10);

    }
  }
}

void sub_100B1A008(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char isKindOfClass;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  unsigned int v12;
  uint64_t v13;
  id v14;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 11))
  {
    *(_BYTE *)(v1 + 11) = 0;
    objc_msgSend(*(id *)(a1 + 32), "currentMapViewTargetForAnalytics");
    v14 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "annotation"));
    v3 = objc_opt_class(MKUserLocation);
    if ((objc_opt_isKindOfClass(v14, v3) & 1) != 0)
    {
      v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "annotation"));

      v14 = (id)v4;
    }
    v5 = objc_opt_class(SearchResult);
    isKindOfClass = objc_opt_isKindOfClass(v14, v5);
    v7 = v14;
    if ((isKindOfClass & 1) != 0)
    {
      v8 = v14;
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "mapItem"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_geoMapItem"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[GEOPlaceActionDetails actionDetailsWithMapItem:timestamp:resultIndex:](GEOPlaceActionDetails, "actionDetailsWithMapItem:timestamp:resultIndex:", v10, 0xFFFFFFFFLL, 0.0));

      v12 = objc_msgSend(v8, "type");
      if (v12 <= 0xC && ((0x1239u >> v12) & 1) != 0)
      {
        v13 = dword_100E3EC30[v12];

        v8 = (id)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
        objc_msgSend(v8, "captureUserAction:onTarget:eventValue:placeActionDetails:", v13, 503, 0, v11);
      }

      v7 = v14;
    }

  }
}

id sub_100B1A788(id a1, VKTrafficFeature *a2, unint64_t a3)
{
  VKTrafficFeature *v3;
  uint64_t v4;
  VKTrafficFeature *v5;
  VKTrafficFeature *v6;

  v3 = a2;
  v4 = objc_opt_class(VKRouteAnnotation);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    v5 = v3;
    v6 = (VKTrafficFeature *)objc_claimAutoreleasedReturnValue(-[VKTrafficFeature infoCard](v5, "infoCard"));

    if (v6)
      v6 = v5;

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_100B1A804(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "MapSelectionManager");
  v2 = (void *)qword_1014D3FE0;
  qword_1014D3FE0 = (uint64_t)v1;

}

id sub_100B1AB04()
{
  if (qword_1014D3FF8 != -1)
    dispatch_once(&qword_1014D3FF8, &stru_1011E2E50);
  return (id)qword_1014D3FF0;
}

void sub_100B1AE20(uint64_t a1)
{
  id WeakRetained;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v6 = WeakRetained;
    v3 = *(_QWORD *)(a1 + 40);
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[VLFLocationManager sharedLocationManager](VLFLocationManager, "sharedLocationManager"));
    v5 = v4;
    if (v3 == 1)
      objc_msgSend(v4, "addObserver:", v6);
    else
      objc_msgSend(v4, "removeObserver:", v6);

    WeakRetained = v6;
  }

}

void sub_100B1B188(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFVIOSessionFusedLocationMonitor");
  v2 = (void *)qword_1014D3FF0;
  qword_1014D3FF0 = (uint64_t)v1;

}

void sub_100B1B240(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  MapsDebugTableSection *v8;

  v8 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v8, "addSwitchRowWithTitle:get:set:", CFSTR("Force Recommended Dishes Text UI"), &stru_1011E2E90, &stru_1011E2EB0);
  if (MapsFeature_IsEnabled_LagunaBeach(-[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v8, "addSwitchRowWithTitle:get:set:", CFSTR("Force fullscreen photo gallery"), &stru_1011E2ED0, &stru_1011E2EF0)))
  {
    v3 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v8, "addSwitchRowWithTitle:get:set:", CFSTR("Force show native photo carousel add buttons"), &stru_1011E2F10, &stru_1011E2F30);
    v4 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v8, "addSwitchRowWithTitle:get:set:", CFSTR("Force show native photo gallery"), &stru_1011E2F50, &stru_1011E2F70);
  }
  v5 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v8, "addSwitchRowWithTitle:get:set:", CFSTR("Override photos attribution with Yelp adamID"), &stru_1011E2F90, &stru_1011E2FB0);
  v6 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v8, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Should override photo slideshow count"), MapKitConfig_Debug_AllowOverridingPhotoSlideshowCounts[0], MapKitConfig_Debug_AllowOverridingPhotoSlideshowCounts[1]);
  v7 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:](v8, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:", CFSTR("Photo slideshow count override"), CFSTR("12"), 1, MapKitConfig_Debug_PhotoSlideshowOverrideCount[0], MapKitConfig_Debug_PhotoSlideshowOverrideCount[1]);

}

BOOL sub_100B1B384(id a1)
{
  return GEOConfigGetBOOL(GeoServicesConfig_RecommendedDishesForceTextDisplayStyle[0], GeoServicesConfig_RecommendedDishesForceTextDisplayStyle[1]);
}

void sub_100B1B394(id a1, BOOL a2)
{
  GEOConfigSetBOOL(GeoServicesConfig_RecommendedDishesForceTextDisplayStyle[0], GeoServicesConfig_RecommendedDishesForceTextDisplayStyle[1], a2);
}

BOOL sub_100B1B3A8(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = objc_msgSend(v1, "BOOLForKey:", CFSTR("MKPlacecardForceFullScreenGallery"));

  return v2;
}

void sub_100B1B3EC(id a1, BOOL a2)
{
  _BOOL8 v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v3, "setBool:forKey:", v2, CFSTR("MKPlacecardForceFullScreenGallery"));

}

BOOL sub_100B1B438(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = objc_msgSend(v1, "BOOLForKey:", CFSTR("MKPlacecardForceNativePhotoCarousel"));

  return v2;
}

void sub_100B1B47C(id a1, BOOL a2)
{
  _BOOL8 v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v3, "setBool:forKey:", v2, CFSTR("MKPlacecardForceNativePhotoCarousel"));

}

BOOL sub_100B1B4C8(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = objc_msgSend(v1, "BOOLForKey:", CFSTR("MKPlacecardForceNativePhotoGallery"));

  return v2;
}

void sub_100B1B50C(id a1, BOOL a2)
{
  _BOOL8 v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v3, "setBool:forKey:", v2, CFSTR("MKPlacecardForceNativePhotoGallery"));

}

BOOL sub_100B1B558(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = objc_msgSend(v1, "BOOLForKey:", CFSTR("MKPlacecardOverridePhotosAttributionYelpAdamID"));

  return v2;
}

void sub_100B1B59C(id a1, BOOL a2)
{
  _BOOL8 v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v3, "setBool:forKey:", v2, CFSTR("MKPlacecardOverridePhotosAttributionYelpAdamID"));

}

void sub_100B1B5E8(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugTableSection *v5;

  v5 = a2;
  v2 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v5, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Initial height"), CFSTR("250"), 2, MapKitConfig_HTMLRenderedWebModulesDefaultHeight[0], MapKitConfig_HTMLRenderedWebModulesDefaultHeight[1]);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v5, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Shows loading indicator"), MapKitConfig_HTMLRenderedWebModuleShowsLoadingIndicator[0], MapKitConfig_HTMLRenderedWebModuleShowsLoadingIndicator[1]);
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v5, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Shows context menu overlay"), MapKitConfig_HTMLRenderedWebModulesShowCTAOverlay[0], MapKitConfig_HTMLRenderedWebModulesShowCTAOverlay[1]);

}

void sub_100B1B680(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  MapsDebugTableSection *v4;

  v4 = a2;
  v2 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v4, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("MUID"), CFSTR("enter muid"), 1, &stru_1011E3010, &stru_1011E3030);
  v3 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v4, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("ResultProviderID"), CFSTR("enter lsp"), 1, &stru_1011E3050, &stru_1011E3070);

}

NSString *__cdecl sub_100B1B708(id a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectForKey:", CFSTR("__internal__PlaceCardHardCodedMUID")));

  if (v2)
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "stringForKey:", CFSTR("__internal__PlaceCardHardCodedMUID")));

  return (NSString *)v2;
}

void sub_100B1B770(id a1, NSString *a2)
{
  void *v2;
  void *v3;
  NSString *v4;

  v4 = a2;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  if (v4 && -[NSString length](v4, "length"))
    objc_msgSend(v2, "setObject:forKey:", v4, CFSTR("__internal__PlaceCardHardCodedMUID"));
  else
    objc_msgSend(v2, "removeObjectForKey:", CFSTR("__internal__PlaceCardHardCodedMUID"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v3, "synchronize");

}

NSString *__cdecl sub_100B1B80C(id a1)
{
  uint64_t Integer;
  void *v2;
  void *v3;

  Integer = GEOConfigGetInteger(GeoServicesConfig_OverriddedResultProviderID[0], GeoServicesConfig_OverriddedResultProviderID[1]);
  if (Integer)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", Integer));
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@"), v2));

  }
  else
  {
    v3 = 0;
  }
  return (NSString *)v3;
}

void sub_100B1B88C(id a1, NSString *a2)
{
  NSInteger v2;
  NSString *v3;

  v3 = a2;
  if (-[NSString length](v3, "length"))
  {
    v2 = -[NSString integerValue](v3, "integerValue");
    GEOConfigSetInteger(GeoServicesConfig_OverriddedResultProviderID[0], GeoServicesConfig_OverriddedResultProviderID[1], v2);
  }
  else
  {
    _GEOConfigRemoveValue(GeoServicesConfig_OverriddedResultProviderID[0], GeoServicesConfig_OverriddedResultProviderID[1]);
  }

}

void sub_100B1BB30(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_opt_new(*(_QWORD *)(a1 + 32));
  v2 = (void *)qword_1014D4000;
  qword_1014D4000 = v1;

}

id sub_100B1BE2C()
{
  if (qword_1014D4018 != -1)
    dispatch_once(&qword_1014D4018, &stru_1011E3090);
  return (id)qword_1014D4010;
}

void sub_100B1BEB8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CoreLocationAltitudeProvider");
  v2 = (void *)qword_1014D4010;
  qword_1014D4010 = (uint64_t)v1;

}

id sub_100B1C598(uint64_t a1, void *a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "objectAtIndexedSubscript:", objc_msgSend(a2, "row"));
}

void sub_100B1D4FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100B1D524(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id WeakRetained;
  void *v6;
  _BOOL8 v7;
  id v8;
  double v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  double v14;
  uint64_t v15;
  double v16;
  id v17;

  v4 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v6 = WeakRetained;
  if (WeakRetained)
  {
    v7 = sub_1002A8AA0(WeakRetained) != 5;
    v8 = objc_msgSend(objc_alloc((Class)_UICollectionViewListLayoutSectionConfiguration), "initWithAppearanceStyle:layoutEnvironment:", 2 * v7, v4);
    v9 = _UICollectionViewListLayoutSectionAutomaticDimension;
    objc_msgSend(v8, "setEstimatedRowHeight:", _UICollectionViewListLayoutSectionAutomaticDimension);
    objc_msgSend(v8, "setRowHeight:", v9);
    objc_msgSend(v8, "setSeparatorStyle:", v7);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "_separatorConfiguration"));
    v11 = objc_msgSend(v10, "copy");

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "theme"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "dynamicHairlineColor"));
    objc_msgSend(v11, "_setColor:", v13);

    v14 = 0.0;
    objc_msgSend(v11, "_setInsets:", 0.0, 56.0, 0.0, 0.0);
    objc_msgSend(v8, "_setSeparatorConfiguration:", v11);
    v15 = sub_1002A8AA0(v6);
    if (v15 == 5)
      v16 = 0.0;
    else
      v16 = 12.0;
    if (v15 != 5)
      v14 = 16.0;
    v17 = objc_msgSend(objc_alloc((Class)_UICollectionViewListLayoutSection), "initWithConfiguration:layoutEnvironment:", v8, v4);
    objc_msgSend(v17, "setContentInsets:", 0.0, v14, v16, v14);

  }
  else
  {
    v17 = 0;
  }

  return v17;
}

uint64_t sub_100B229E4()
{
  if (qword_1014D4028 != -1)
    dispatch_once(&qword_1014D4028, &stru_1011E3128);
  return byte_1014D4020;
}

void sub_100B22A24(id a1)
{
  uint64_t v1;
  BOOL v3;

  v1 = MGGetProductType(a1);
  v3 = v1 == 2336512887 || v1 == 952317141;
  byte_1014D4020 = v3;
}

void sub_100B22A9C(id a1)
{
  RouteStepListMetrics *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  _QWORD v32[62];

  v1 = objc_opt_new(RouteStepListMetrics);
  v2 = (void *)qword_1014D4030;
  qword_1014D4030 = (uint64_t)v1;

  *(_OWORD *)(qword_1014D4030 + 16) = xmmword_100E3ED00;
  v3 = objc_claimAutoreleasedReturnValue(+[UIColor labelColor](UIColor, "labelColor"));
  v4 = *(void **)(qword_1014D4030 + 32);
  *(_QWORD *)(qword_1014D4030 + 32) = v3;

  v5 = objc_claimAutoreleasedReturnValue(+[UIColor labelColor](UIColor, "labelColor"));
  v6 = *(void **)(qword_1014D4030 + 40);
  *(_QWORD *)(qword_1014D4030 + 40) = v5;

  objc_storeStrong((id *)(qword_1014D4030 + 48), UIFontTextStyleSubheadline);
  v7 = qword_1014D4030;
  *(UIFontWeight *)(qword_1014D4030 + 64) = UIFontWeightBold;
  *(_QWORD *)(v7 + 72) = 0x4000000000000000;
  v8 = objc_claimAutoreleasedReturnValue(+[UIColor secondaryLabelColor](UIColor, "secondaryLabelColor"));
  v9 = *(void **)(qword_1014D4030 + 80);
  *(_QWORD *)(qword_1014D4030 + 80) = v8;

  v10 = objc_claimAutoreleasedReturnValue(+[UIColor secondaryLabelColor](UIColor, "secondaryLabelColor"));
  v11 = *(void **)(qword_1014D4030 + 88);
  *(_QWORD *)(qword_1014D4030 + 88) = v10;

  objc_storeStrong((id *)(qword_1014D4030 + 96), UIFontTextStyleSubheadline);
  v12 = qword_1014D4030;
  *(UIFontWeight *)(qword_1014D4030 + 112) = UIFontWeightRegular;
  *(_QWORD *)(v12 + 120) = 0x4000000000000000;
  v13 = objc_claimAutoreleasedReturnValue(+[UIColor secondaryLabelColor](UIColor, "secondaryLabelColor"));
  v14 = *(void **)(qword_1014D4030 + 128);
  *(_QWORD *)(qword_1014D4030 + 128) = v13;

  v15 = objc_claimAutoreleasedReturnValue(+[UIColor secondaryLabelColor](UIColor, "secondaryLabelColor"));
  v16 = *(void **)(qword_1014D4030 + 136);
  *(_QWORD *)(qword_1014D4030 + 136) = v15;

  objc_storeStrong((id *)(qword_1014D4030 + 144), UIFontTextStyleSubheadline);
  v17 = qword_1014D4030;
  *(UIFontWeight *)(qword_1014D4030 + 160) = UIFontWeightRegular;
  v18 = *(void **)(v17 + 192);
  *(_QWORD *)(v17 + 192) = 0;

  v19 = qword_1014D4030;
  __asm { FMOV            V0.2D, #15.0 }
  *(_OWORD *)(qword_1014D4030 + 200) = _Q0;
  *(_OWORD *)(v19 + 216) = xmmword_100E3ED10;
  *(_OWORD *)(v19 + 232) = xmmword_100E3ED20;
  __asm { FMOV            V0.2D, #30.0 }
  *(_OWORD *)(v19 + 248) = _Q0;
  *(_QWORD *)(v19 + 264) = 0x403E000000000000;
  *(_OWORD *)(v19 + 272) = xmmword_100E3ED30;
  v26 = (void *)(v19 + 328);
  MKDefaultGuidanceManeuverMetrics(v32);
  v27 = memcpy(v26, v32, 0x1F0uLL);
  v28 = (void *)(qword_1014D4030 + 824);
  MKDefaultJunctionManeuverMetrics(v32, v27);
  memcpy(v28, v32, 0x1F0uLL);
  *(_BYTE *)(qword_1014D4030 + 11) = 1;
  v29 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor labelColor](UIColor, "labelColor"));
  v30 = objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "colorWithAlphaComponent:", 0.150000006));
  v31 = *(void **)(qword_1014D4030 + 320);
  *(_QWORD *)(qword_1014D4030 + 320) = v30;

}

void sub_100B22D2C(id a1)
{
  RouteStepListMetrics *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  _QWORD v29[62];
  _QWORD v30[62];
  _BYTE __src[496];

  v1 = objc_opt_new(RouteStepListMetrics);
  v2 = (void *)qword_1014D4040;
  qword_1014D4040 = (uint64_t)v1;

  *(_QWORD *)(qword_1014D4040 + 16) = 0x4040000000000000;
  v3 = objc_claimAutoreleasedReturnValue(+[UIColor labelColor](UIColor, "labelColor"));
  v4 = *(void **)(qword_1014D4040 + 32);
  *(_QWORD *)(qword_1014D4040 + 32) = v3;

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor labelColor](UIColor, "labelColor"));
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "colorWithAlphaComponent:", 0.150000006));
  v7 = *(void **)(qword_1014D4040 + 40);
  *(_QWORD *)(qword_1014D4040 + 40) = v6;

  objc_storeStrong((id *)(qword_1014D4040 + 48), UIFontTextStyleTitle2);
  v8 = qword_1014D4040;
  *(UIFontWeight *)(qword_1014D4040 + 64) = UIFontWeightBold;
  *(_QWORD *)(v8 + 72) = 0x4000000000000000;
  v9 = objc_claimAutoreleasedReturnValue(+[UIColor secondaryLabelColor](UIColor, "secondaryLabelColor"));
  v10 = *(void **)(qword_1014D4040 + 80);
  *(_QWORD *)(qword_1014D4040 + 80) = v9;

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor secondaryLabelColor](UIColor, "secondaryLabelColor"));
  v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "colorWithAlphaComponent:", 0.150000006));
  v13 = *(void **)(qword_1014D4040 + 88);
  *(_QWORD *)(qword_1014D4040 + 88) = v12;

  objc_storeStrong((id *)(qword_1014D4040 + 96), UIFontTextStyleTitle3);
  v14 = qword_1014D4040;
  *(UIFontWeight *)(qword_1014D4040 + 112) = UIFontWeightRegular;
  *(_QWORD *)(v14 + 120) = 0x4018000000000000;
  v15 = objc_claimAutoreleasedReturnValue(+[UIColor secondaryLabelColor](UIColor, "secondaryLabelColor"));
  v16 = *(void **)(qword_1014D4040 + 128);
  *(_QWORD *)(qword_1014D4040 + 128) = v15;

  v17 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor secondaryLabelColor](UIColor, "secondaryLabelColor"));
  v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "colorWithAlphaComponent:", 0.150000006));
  v19 = *(void **)(qword_1014D4040 + 136);
  *(_QWORD *)(qword_1014D4040 + 136) = v18;

  objc_storeStrong((id *)(qword_1014D4040 + 144), UIFontTextStyleTitle3);
  *(UIFontWeight *)(qword_1014D4040 + 160) = UIFontWeightRegular;
  v20 = objc_claimAutoreleasedReturnValue(+[UIColor colorNamed:](UIColor, "colorNamed:", CFSTR("DirectionsTableViewCellBackgroundView")));
  v21 = *(void **)(qword_1014D4040 + 192);
  *(_QWORD *)(qword_1014D4040 + 192) = v20;

  v22 = qword_1014D4040;
  *(_OWORD *)(qword_1014D4040 + 200) = xmmword_100E3ED40;
  *(_OWORD *)(v22 + 216) = xmmword_100E3ED50;
  *(_OWORD *)(v22 + 232) = xmmword_100E3ED60;
  *(_OWORD *)(v22 + 248) = xmmword_100E3ED70;
  *(_QWORD *)(v22 + 264) = 0x4055800000000000;
  *(_OWORD *)(v22 + 272) = xmmword_100E3ED80;
  v23 = (void *)(v22 + 328);
  MKDefaultGuidanceManeuverMetrics(v30);
  MKGuidanceManeuverArrowMetricsApplyScaleForContent(v30, 1.14999998, 1.14999998);
  v24 = memcpy(v23, __src, 0x1F0uLL);
  v25 = (void *)(qword_1014D4040 + 824);
  MKDefaultJunctionManeuverMetrics(v29, v24);
  MKGuidanceManeuverArrowMetricsApplyScaleForContent(v29, 1.14999998, 1.14999998);
  memcpy(v25, __src, 0x1F0uLL);
  v26 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor labelColor](UIColor, "labelColor"));
  v27 = objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "colorWithAlphaComponent:", 0.150000006));
  v28 = *(void **)(qword_1014D4040 + 320);
  *(_QWORD *)(qword_1014D4040 + 320) = v27;

}

void sub_100B2304C(id a1)
{
  RouteStepListMetrics *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  double v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  double v26;
  double v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  _QWORD v43[62];
  _QWORD v44[62];
  _QWORD v45[62];
  _QWORD v46[62];
  _BYTE __src[496];

  v1 = objc_opt_new(RouteStepListMetrics);
  v2 = (void *)qword_1014D4050;
  qword_1014D4050 = (uint64_t)v1;

  *(_QWORD *)(qword_1014D4050 + 16) = 0x4034000000000000;
  v3 = objc_claimAutoreleasedReturnValue(+[UIColor whiteColor](UIColor, "whiteColor"));
  v4 = *(void **)(qword_1014D4050 + 32);
  *(_QWORD *)(qword_1014D4050 + 32) = v3;

  v5 = objc_claimAutoreleasedReturnValue(+[UIColor whiteColor](UIColor, "whiteColor"));
  v6 = *(void **)(qword_1014D4050 + 40);
  *(_QWORD *)(qword_1014D4050 + 40) = v5;

  *(_BYTE *)(qword_1014D4050 + 8) = 1;
  if (qword_1014D4028 != -1)
    dispatch_once(&qword_1014D4028, &stru_1011E3128);
  v7 = 24.0;
  if (!byte_1014D4020)
    v7 = 30.0;
  v8 = qword_1014D4050;
  *(double *)(qword_1014D4050 + 56) = v7;
  *(UIFontWeight *)(v8 + 64) = UIFontWeightHeavy;
  *(_QWORD *)(v8 + 72) = 0x4000000000000000;
  v9 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.921568632, 0.921568632, 0.960784316, 0.699999988));
  v10 = *(void **)(qword_1014D4050 + 80);
  *(_QWORD *)(qword_1014D4050 + 80) = v9;

  objc_storeStrong((id *)(qword_1014D4050 + 88), *(id *)(qword_1014D4050 + 80));
  *(_BYTE *)(qword_1014D4050 + 9) = 1;
  if (qword_1014D4028 != -1)
    dispatch_once(&qword_1014D4028, &stru_1011E3128);
  v11 = 24.0;
  if (!byte_1014D4020)
    v11 = 30.0;
  v12 = qword_1014D4050;
  *(double *)(qword_1014D4050 + 104) = v11;
  *(UIFontWeight *)(v12 + 112) = UIFontWeightMedium;
  *(_QWORD *)(v12 + 120) = 0x4000000000000000;
  objc_storeStrong((id *)(v12 + 128), *(id *)(v12 + 80));
  objc_storeStrong((id *)(qword_1014D4050 + 136), *(id *)(qword_1014D4050 + 80));
  *(_BYTE *)(qword_1014D4050 + 10) = 1;
  if (qword_1014D4028 != -1)
    dispatch_once(&qword_1014D4028, &stru_1011E3128);
  v13 = 24.0;
  if (!byte_1014D4020)
    v13 = 30.0;
  v14 = qword_1014D4050;
  *(double *)(qword_1014D4050 + 152) = v13;
  *(UIFontWeight *)(v14 + 160) = UIFontWeightMedium;
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor whiteColor](UIColor, "whiteColor"));
  v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "colorWithAlphaComponent:", 0.800000012));
  v17 = *(void **)(qword_1014D4050 + 168);
  *(_QWORD *)(qword_1014D4050 + 168) = v16;

  v18 = qword_1014D4050;
  *(_QWORD *)(qword_1014D4050 + 176) = 0x4034000000000000;
  *(UIFontWeight *)(v18 + 184) = UIFontWeightRegular;
  v19 = *(void **)(v18 + 192);
  *(_QWORD *)(v18 + 192) = 0;

  v20 = qword_1014D4050;
  __asm { FMOV            V0.2D, #20.0 }
  *(_OWORD *)(qword_1014D4050 + 200) = _Q0;
  *(_OWORD *)(v20 + 216) = xmmword_100E3ED90;
  *(_QWORD *)(v20 + 232) = 0x4034000000000000;
  if (qword_1014D4028 != -1)
    dispatch_once(&qword_1014D4028, &stru_1011E3128);
  v26 = 40.0;
  if (byte_1014D4020)
    v27 = 40.0;
  else
    v27 = 50.0;
  *(double *)(qword_1014D4050 + 256) = v27;
  if (!byte_1014D4020)
    v26 = 50.0;
  v28 = qword_1014D4050;
  *(double *)(qword_1014D4050 + 264) = v26;
  *(_OWORD *)(v28 + 272) = xmmword_100E3EDA0;
  v29 = (void *)(v28 + 328);
  MKDefaultGuidanceManeuverMetrics(v46);
  MKGuidanceManeuverArrowMetricsApplyScaleForContent(v46, 1.0, 1.0);
  v30 = memcpy(v29, __src, 0x1F0uLL);
  v31 = (void *)(qword_1014D4050 + 824);
  MKDefaultJunctionManeuverMetrics(v45, v30);
  MKGuidanceManeuverArrowMetricsApplyScaleForContent(v45, 1.0, 1.0);
  memcpy(v31, __src, 0x1F0uLL);
  v32 = (void *)(qword_1014D4050 + 1320);
  MKDefaultGuidanceManeuverMetrics(v44);
  MKGuidanceManeuverArrowMetricsApplyScaleForContent(v44, 0.800000012, 0.800000012);
  v33 = memcpy(v32, __src, 0x1F0uLL);
  v34 = (void *)(qword_1014D4050 + 1816);
  MKDefaultJunctionManeuverMetrics(v43, v33);
  MKGuidanceManeuverArrowMetricsApplyScaleForContent(v43, 0.800000012, 0.800000012);
  memcpy(v34, __src, 0x1F0uLL);
  v35 = objc_claimAutoreleasedReturnValue(+[UIColor whiteColor](UIColor, "whiteColor"));
  v36 = *(void **)(qword_1014D4050 + 288);
  *(_QWORD *)(qword_1014D4050 + 288) = v35;

  v37 = objc_claimAutoreleasedReturnValue(+[UIColor iOSJunctionColor](UIColor, "iOSJunctionColor"));
  v38 = *(void **)(qword_1014D4050 + 296);
  *(_QWORD *)(qword_1014D4050 + 296) = v37;

  v39 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor whiteColor](UIColor, "whiteColor"));
  v40 = objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "colorWithAlphaComponent:", 0.150000006));
  v41 = *(void **)(qword_1014D4050 + 320);
  *(_QWORD *)(qword_1014D4050 + 320) = v40;

  v42 = qword_1014D4050;
  *(_QWORD *)(qword_1014D4050 + 304) = 0x4030000000000000;
  *(_QWORD *)(v42 + 312) = 5;
}

void sub_100B234C8(id a1)
{
  id v1;
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[RouteStepListMetrics routePlanningMetrics](RouteStepListMetrics, "routePlanningMetrics"));
  v1 = objc_msgSend(v3, "copy");
  v2 = (void *)qword_1014D4060;
  qword_1014D4060 = (uint64_t)v1;

  *(_BYTE *)(qword_1014D4060 + 12) = 1;
}

void sub_100B25910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100B25934(uint64_t a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;
  id *WeakRetained;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v1 = WeakRetained[1];
  v2 = v1;
  if (v1 && (objc_msgSend(v1, "hasMarkedText") & 1) == 0)
  {
    v3 = WeakRetained[20];
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "text"));
    objc_msgSend(v3, "updateTitle:", v4);

  }
}

void sub_100B28434(id a1, $464B15F94E0D705FD6D497CD7841E26A a2)
{
  AudioPreferences *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  AudioPreferences *v8;

  v2 = [AudioPreferences alloc];
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v8 = -[AudioPreferences initWithDefaults:](v2, "initWithDefaults:", v3);

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MNNavigationService sharedService](MNNavigationService, "sharedService"));
  v5 = objc_msgSend(v4, "navigationTransportType");

  if ((id)-[AudioPreferences guidanceLevelForTransportType:](v8, "guidanceLevelForTransportType:", v5) == (id)2)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[MNNavigationService sharedService](MNNavigationService, "sharedService"));
    objc_msgSend(v6, "stopCurrentGuidancePrompt");

    v7 = (void *)objc_claimAutoreleasedReturnValue(+[MNNavigationService sharedService](MNNavigationService, "sharedService"));
    objc_msgSend(v7, "repeatCurrentGuidance:", &stru_1011E32D8);

  }
  else
  {
    -[AudioPreferences setGuidanceLevel:forTransportType:](v8, "setGuidanceLevel:forTransportType:", 2, v5);
    -[AudioPreferences synchronize](v8, "synchronize");
  }

}

void sub_100B28520(id a1, BOOL a2)
{
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = sub_100431C0C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "repeatCurrentGuidance", v4, 2u);
  }

}

void sub_100B29380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100B2939C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id WeakRetained;
  void *v5;
  uint8_t v6[16];

  v2 = sub_100431C0C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Automatically dismissing VoiceVolumeControl", v6, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "voiceVolumeControlDelegate"));
  objc_msgSend(v5, "dismissVoiceVolumeControlViewController:", WeakRetained);

}

void sub_100B2A244(id a1)
{
  id v1;
  double v2;
  double v3;
  void *v4;
  void *v5;
  id v6;
  int v7;
  uint64_t *v8;
  _QWORD *v9;
  double v10;
  id v11;

  v11 = (id)objc_claimAutoreleasedReturnValue(+[GEOPlatform sharedPlatform](GEOPlatform, "sharedPlatform"));
  v1 = objc_msgSend(v11, "deviceScreenWidthInPixels");
  objc_msgSend(v11, "deviceScreenScale");
  v3 = v2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIDevice currentDevice](UIDevice, "currentDevice"));
  if (objc_msgSend(v4, "userInterfaceIdiom") == (id)1)
  {

LABEL_4:
    v7 = MGGetSInt32Answer(CFSTR("main-screen-class"), 0xFFFFFFFFLL);
    v8 = (uint64_t *)&MapsConfig_SearchMaxResultsIpadScreen;
    if ((v7 & 0xFFFFFFFE) == 6)
      v9 = &off_1014B32A8;
    else
      v9 = &off_1014B32B8;
    if ((v7 & 0xFFFFFFFE) == 6)
      v8 = (uint64_t *)&MapsConfig_SearchMaxResultsIpadMiniScreen;
    goto LABEL_9;
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIDevice currentDevice](UIDevice, "currentDevice"));
  v6 = objc_msgSend(v5, "userInterfaceIdiom");

  if (v6 == (id)5)
    goto LABEL_4;
  v10 = (double)(uint64_t)v1 / v3;
  if (v10 == 320.0)
  {
    v8 = &MapsConfig_SearchMaxResultsSmallScreen;
    v9 = &off_1014B32C8;
  }
  else
  {
    v8 = (uint64_t *)&MapsConfig_SearchMaxResultsBigScreen;
    v9 = &off_1014B32E8;
    if (v10 == 375.0)
    {
      v9 = &off_1014B32D8;
      v8 = (uint64_t *)&MapsConfig_SearchMaxResultsMediumScreen;
    }
  }
LABEL_9:
  dword_1014D4070 = GEOConfigGetUInteger(*v8, *v9);

}

void sub_100B2B580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100B2B59C(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_maps_carSceneDelegate"));
  objc_msgSend(v1, "rebuildContextsForCurrentAppState");

}

uint64_t sub_100B2CBA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  if ((a2 & 0xFFFFFFFFFFFFFFFBLL) != 0 && (unint64_t)(a2 - 2) <= 3)
    v3 = qword_100E3EE50[a2 - 2];
  else
    v3 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v2, v3);
}

void sub_100B2D030(uint64_t a1, int a2)
{
  _QWORD v2[4];
  id v3;
  int v4;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100B2D09C;
  v2[3] = &unk_1011E3360;
  v4 = a2;
  v3 = *(id *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v2);

}

uint64_t sub_100B2D09C(uint64_t a1)
{
  uint64_t Log;
  NSObject *v3;
  uint64_t v4;
  __CFString *v5;
  uint8_t buf[4];
  __CFString *v8;

  Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "MapsSuggestionsTransportMode");
  v3 = (id)objc_claimAutoreleasedReturnValue(Log);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    v4 = *(int *)(a1 + 40);
    if (v4 >= 7)
      v5 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), *(int *)(a1 + 40)));
    else
      v5 = off_1011E3408[v4];
    *(_DWORD *)buf = 138543362;
    v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "\tDelivering resolved transport type %{public}@", buf, 0xCu);

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100B2D1D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSString *v4;
  void *v5;
  int TransportationModeDebugPanelSetting;
  uint64_t v7;
  uint64_t Log;
  NSObject *v9;
  __CFString *v10;
  uint64_t v11;
  NSObject *v12;
  __CFString *v13;
  uint8_t buf[4];
  __CFString *v16;

  v2 = MapsSuggestionsTransportModeForOriginAndDestination(*(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64));
  v3 = *(unsigned int *)(a1 + 80);
  v4 = NSStringFromClass(*(Class *)(a1 + 72));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  MapsSuggestionsLogPredictedTransportMode(v2, v3, v5);

  TransportationModeDebugPanelSetting = MapsSuggestionsGetTransportationModeDebugPanelSetting();
  v7 = MapsSuggestionsLoggingSubsystem;
  if (TransportationModeDebugPanelSetting && (_DWORD)v2 != 4)
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "MapsSuggestionsTransportMode");
    v9 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      if (v2 < 7 && ((0x6Fu >> v2) & 1) != 0)
        v10 = off_1011E33D0[(int)v2];
      else
        v10 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), v2));
      *(_DWORD *)buf = 138543362;
      v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "\tUsing MSg PTM %{public}@", buf, 0xCu);

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  v11 = GEOFindOrCreateLog(v7, "MapsSuggestionsTransportMode");
  v12 = (id)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    if (v2 >= 7)
      v13 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), v2));
    else
      v13 = off_1011E3408[(int)v2];
    *(_DWORD *)buf = 138543362;
    v16 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "\tNot using MSg PTM %{public}@", buf, 0xCu);

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100B2D4A0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100B2DC80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100B2DCB8()
{
  if (qword_1014D4088 != -1)
    dispatch_once(&qword_1014D4088, &stru_1011E3510);
  return (id)qword_1014D4080;
}

void sub_100B2DCF8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  int v9;
  id v10;
  NSObject *v11;
  NSObject *v12;
  os_signpost_id_t v13;
  id WeakRetained;
  void *v15;
  int v16;
  id v17;
  __int16 v18;
  int v19;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = sub_10043230C();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 33);
      v16 = 138412546;
      v17 = v6;
      v18 = 1024;
      v19 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Error while fetching the browse categories %@. The maps offline status: %d", (uint8_t *)&v16, 0x12u);
    }
  }
  else
  {
    v10 = sub_100B2DCB8();
    v11 = objc_claimAutoreleasedReturnValue(v10);
    v12 = v11;
    v13 = *(_QWORD *)(a1 + 56);
    if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
    {
      LOWORD(v16) = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_INTERVAL_END, v13, "FetchingSearchHome", "", (uint8_t *)&v16, 2u);
    }

    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cache"));
    objc_msgSend(v15, "replaceCachedObject:withKey:", v5, *(_QWORD *)(a1 + 32));

    v8 = objc_loadWeakRetained((id *)(a1 + 48));
    -[NSObject parseResponse:](v8, "parseResponse:", v5);
  }

}

void sub_100B2E9A0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "SearchHomeDataDownloader");
  v2 = (void *)qword_1014D4080;
  qword_1014D4080 = (uint64_t)v1;

}

uint64_t GEOLocationFloorOrdinalFromCLLocation(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "floor"));
  v2 = v1;
  if (v1 && NSIntegerIsValidFloorOrdinal(objc_msgSend(v1, "level")))
    v3 = GEOLocationFloorOrdinalFromNSInteger(objc_msgSend(v2, "level"));
  else
    v3 = 0x7FFFFFFFLL;

  return v3;
}

id sub_100B2EA28(id a1)
{
  return &off_101270858;
}

id sub_100B2EA38(id a1)
{
  return &off_101270858;
}

id sub_100B2EA44(id a1)
{
  return &off_101270858;
}

id sub_100B2EA50(id a1)
{
  return &off_101270858;
}

id sub_100B2EA5C(id a1)
{
  return &off_101270858;
}

id sub_100B2EA68(id a1)
{
  return &off_101270858;
}

id sub_100B2EA74(id a1)
{
  return &off_101270858;
}

id sub_100B2EA80(id a1)
{
  return &off_101270858;
}

id sub_100B2EA8C(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100B2EC28()
{
  if (qword_1014D4098 != -1)
    dispatch_once(&qword_1014D4098, &stru_1011E3848);
  return (id)qword_1014D4090;
}

id sub_100B2FBA4(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  double v10;
  double v11;
  double v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  double v19;
  double v20;

  v5 = a3;
  v6 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 176), "sectionForIndex:", a2);
  v7 = sub_1002A8AA0(*(void **)(a1 + 32));
  if (v7 == 5)
    v8 = 1;
  else
    v8 = 2;
  v9 = objc_msgSend(objc_alloc((Class)_UICollectionViewListLayoutSectionConfiguration), "initWithAppearanceStyle:layoutEnvironment:", v8, v5);
  v10 = _UICollectionViewListLayoutSectionAutomaticDimension;
  objc_msgSend(v9, "setEstimatedRowHeight:", _UICollectionViewListLayoutSectionAutomaticDimension);
  objc_msgSend(v9, "setRowHeight:", v10);
  objc_msgSend(v9, "setSeparatorStyle:", v7 != 5);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 176), "footerHeightForSection:collectionView:", v6, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 128));
  v12 = v11;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 176), "headerHeightForSection:collectionView:", v6, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 128));
  objc_msgSend(v9, "setSectionHeaderHeight:");
  objc_msgSend(v9, "setSectionFooterHeight:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_separatorConfiguration"));
  v14 = objc_msgSend(v13, "copy");

  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "theme"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "dynamicHairlineColor"));
  objc_msgSend(v14, "_setColor:", v16);

  if (!a2)
    objc_msgSend(v14, "_setInsets:", 0.0, 56.0, 0.0, 0.0);
  objc_msgSend(v9, "_setSeparatorConfiguration:", v14);
  v17 = objc_msgSend(objc_alloc((Class)_UICollectionViewListLayoutSection), "initWithConfiguration:layoutEnvironment:", v9, v5);
  v18 = v17;
  if (v7 == 5)
    v19 = 0.0;
  else
    v19 = 8.0;
  v20 = 16.0;
  if (v7 == 5)
    v20 = 0.0;
  objc_msgSend(v17, "setContentInsets:", 0.0, v20, v19, v20);

  return v18;
}

void sub_100B309F4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "RAPHomeViewController");
  v2 = (void *)qword_1014D4090;
  qword_1014D4090 = (uint64_t)v1;

}

void sub_100B30D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100B30D78(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  uint64_t Log;
  NSObject *v7;
  int v8;
  char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  const char *v13;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "_addMapsSuggestionsSettingsToDebugVC:", v3);
  }
  else
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "MapsSuggestionsDebugController");
    v7 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = 136446722;
      v9 = "MapsSuggestionsDebugController.m";
      v10 = 1026;
      v11 = 51;
      v12 = 2082;
      v13 = "-[MapsSuggestionsDebugController _setupDebugValuesController]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", (uint8_t *)&v8, 0x1Cu);
    }

  }
}

void sub_100B311AC(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(-[MapsDebugTableSection addSwitchRowWithTitle:get:set:](a2, "addSwitchRowWithTitle:get:set:", CFSTR("Verbose logging"), &stru_1011E3938, &stru_1011E3958));
  objc_msgSend(v2, "setSubtitle:", CFSTR("Adds serialized suggestion entries to logs."));

}

void sub_100B31200(id a1, BOOL a2)
{
  MapsSuggestionsLoggingEnableVerbose(a2);
}

void sub_100B31208(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(-[MapsDebugTableSection addSwitchRowWithTitle:get:set:](a2, "addSwitchRowWithTitle:get:set:", CFSTR("MSg Transportation Mode Prediction"), &stru_1011E3998, &stru_1011E39B8));
  objc_msgSend(v2, "setSubtitle:", CFSTR("Toggle MSg-based transportation mode prediction"));

}

void sub_100B3125C(id a1, BOOL a2)
{
  MapsSuggestionsSetTransportationModeDebugPanelSetting(a2);
}

void sub_100B31264(uint64_t a1, void *a2)
{
  void *v2;
  _QWORD v3[5];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100B312FC;
  v3[3] = &unk_1011AE8F8;
  v3[4] = *(_QWORD *)(a1 + 32);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "addSwitchRowWithTitle:get:set:", CFSTR("Enable Visualizer"), &stru_1011E39D8, v3));
  objc_msgSend(v2, "setSubtitle:", CFSTR("Toggle displaying a real time view of the Destination Graph"));

}

BOOL sub_100B312EC(id a1)
{
  return GEOConfigGetBOOL(MapsConfig_MSgDestinationGraphVisualizerDebugPanelSetting, off_1014B36A8);
}

uint64_t sub_100B312FC(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "view"));
  objc_msgSend(v3, "setHidden:", a2 ^ 1);

  return GEOConfigSetBOOL(MapsConfig_MSgDestinationGraphVisualizerDebugPanelSetting, off_1014B36A8, a2);
}

void sub_100B31E5C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  _QWORD v6[5];
  id v7;

  v4 = a3;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100B31EE4;
  v6[3] = &unk_1011E3A00;
  v6[4] = *(_QWORD *)(a1 + 32);
  v7 = v4;
  v5 = v4;
  +[RAPPrivacy showPrivacyScreenWithAppearance:completion:](RAPPrivacy, "showPrivacyScreenWithAppearance:completion:", 1, v6);

}

void sub_100B31EE4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  id v8;

  v8 = a4;
  v7 = *(_QWORD *)(a1 + 40);
  if (v7)
    (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v7, a2);
  objc_msgSend(*(id *)(a1 + 32), "rapCompleted:privacyShown:analyticsEvent:", a2, a3, v8);

}

uint64_t sub_100B31F4C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_100B31F60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a3);
  return result;
}

void sub_100B322DC(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100B32340(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100B32398(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100B32C2C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100B32C74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  int BOOL;
  unint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *i;
  id v16;
  double x;
  double y;
  double width;
  double height;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  MKMapRect v27;
  CGRect v28;
  CGRect v29;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (*(_BYTE *)a2 & 0x7F) == GEOVoltaireTileProvider)
  {
    v5 = *(_QWORD *)(a1 + 40);
    BOOL = GEOConfigGetBOOL(MapsConfig_NavPreloadDebugOverlayShowAllTiles, off_1014B3E28);
    v7 = *(_QWORD *)(a2 + 1);
    if (BOOL)
    {
      if (((v7 >> 40) & 0x3F) > v5)
        return;
      v8 = *(void **)(v2 + 8);
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", ((*(unsigned int *)(a2 + 9) | ((unint64_t)(*(unsigned __int16 *)(a2 + 13) | (*(unsigned __int8 *)(a2 + 15) << 16)) << 32)) >> 34) & 0x3FFF));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", v9));

      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v11 = v10;
      v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
      if (v12)
      {
        v13 = v12;
        v14 = *(_QWORD *)v23;
        while (2)
        {
          for (i = 0; i != v13; i = (char *)i + 1)
          {
            if (*(_QWORD *)v23 != v14)
              objc_enumerationMutation(v11);
            v16 = objc_msgSend(*(id *)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)i), "unsignedIntegerValue", (_QWORD)v22);
            if ((unint64_t)v16 <= v5 && (unint64_t)v16 > ((*(_QWORD *)(a2 + 1) >> 40) & 0x3FuLL))
            {

              return;
            }
          }
          v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
          if (v13)
            continue;
          break;
        }
      }

    }
    else if ((v7 & 0x3F0000000000) != 0xF0000000000)
    {
      return;
    }
    v27.origin.x = GEOMapRectForGEOTileKey(a2);
    x = v27.origin.x;
    y = v27.origin.y;
    width = v27.size.width;
    height = v27.size.height;
    if (MKMapRectIntersectsRect(v27, *(MKMapRect *)(a1 + 48)))
    {
      v28.origin.x = x;
      v28.origin.y = y;
      v28.size.width = width;
      v28.size.height = height;
      CGContextFillRect(*(CGContextRef *)(a1 + 80), v28);
      v29.origin.x = x;
      v29.origin.y = y;
      v29.size.width = width;
      v29.size.height = height;
      CGContextStrokeRect(*(CGContextRef *)(a1 + 80), v29);
    }
  }
}

void sub_100B32FB8(uint64_t a1, int a2, double a3, double a4)
{
  void *v7;
  double v8;
  CGContext *v9;
  id v10;
  uint64_t v12;
  void *v13;
  CGPath *Mutable;
  void *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  id v20;
  double latitude;
  double longitude;
  MKMapPoint v23;
  unint64_t v24;
  double v25;
  id v26;
  double v27;
  CLLocationDegrees v28;
  double v29;
  CLLocationDegrees v30;
  MKMapPoint v31;
  MKMapPoint v32;
  double v33;
  id v34;
  double v35;
  double v36;
  id v37;
  CLLocationCoordinate2D v38;
  CLLocationCoordinate2D v39;
  CLLocationCoordinate2D v40;

  v7 = *(void **)(a1 + 32);
  v8 = *(double *)(a1 + 80);
  v9 = *(CGContext **)(a1 + 88);
  v10 = *(id *)(a1 + 40);
  if (a4 > 0.0 && v7 != 0)
  {
    v37 = v10;
    if (a2 == 2)
    {
      v12 = objc_claimAutoreleasedReturnValue(+[UIColor systemRedColor](UIColor, "systemRedColor"));
    }
    else if (a2 == 1)
    {
      v12 = objc_claimAutoreleasedReturnValue(+[UIColor systemGreenColor](UIColor, "systemGreenColor"));
    }
    else
    {
      if (a2)
        goto LABEL_19;
      v12 = objc_claimAutoreleasedReturnValue(+[UIColor systemGrayColor](UIColor, "systemGrayColor"));
    }
    v13 = (void *)v12;
    v10 = v37;
    if (v13)
    {
      v36 = v8;
      Mutable = CGPathCreateMutable();
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "overlay"));
      objc_msgSend(v15, "boundingMapRect");
      v17 = v16;
      v19 = v18;

      v35 = a3;
      v20 = objc_msgSend(v37, "coordinateAtOffset:", a3);
      LODWORD(v15) = (_DWORD)v20;
      objc_msgSend(v37, "pointAtRouteCoordinate:", v20);
      latitude = v38.latitude;
      longitude = v38.longitude;
      v23 = MKMapPointForCoordinate(v38);
      CGPathMoveToPoint(Mutable, 0, v23.x - v17, v23.y - v19);
      v24 = ((_DWORD)v15 + 1);
      if (v24 < objc_msgSend(v37, "pointCount") - 1)
      {
        v25 = 0.0;
        while (1)
        {
          v26 = objc_msgSend(v37, "pointAt:", v24);
          v28 = v27;
          v30 = v29;
          v25 = v25 + GEOCalculateDistance(v26, v27, v29, latitude, longitude);
          if (v25 >= a4)
            break;
          v39.latitude = v28;
          v39.longitude = v30;
          v31 = MKMapPointForCoordinate(v39);
          CGPathAddLineToPoint(Mutable, 0, v31.x - v17, v31.y - v19);
          ++v24;
          latitude = v28;
          longitude = v30;
          if (v24 >= objc_msgSend(v37, "pointCount") - 1)
            goto LABEL_18;
        }
        objc_msgSend(v37, "pointAtRouteCoordinate:", objc_msgSend(v37, "coordinateAtOffset:", v35 + a4));
        v32 = MKMapPointForCoordinate(v40);
        CGPathMoveToPoint(Mutable, 0, v32.x - v17, v32.y - v19);
      }
LABEL_18:
      CGContextSaveGState(v9);
      CGContextAddPath(v9, Mutable);
      objc_msgSend(v7, "contentScaleFactor");
      CGContextSetLineWidth(v9, 8.0 / v36 * v33);
      CGContextSetLineJoin(v9, kCGLineJoinRound);
      CGContextSetLineCap(v9, kCGLineCapButt);
      v34 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "colorWithAlphaComponent:", 0.600000024)));
      CGContextSetStrokeColorWithColor(v9, (CGColorRef)objc_msgSend(v34, "CGColor"));

      CGContextStrokePath(v9);
      CGContextRestoreGState(v9);
      CGPathRelease(Mutable);

      v10 = v37;
    }
  }
LABEL_19:

}

void sub_100B35530(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  void *v11;
  void *v12;
  AutocompleteItem *v13;
  uint64_t v14;
  unsigned __int8 v15;
  id v16;
  NSObject *v17;
  _BOOL4 v18;
  uint64_t v19;
  id WeakRetained;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  id v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint8_t buf[4];
  uint64_t v32;
  __int16 v33;
  id v34;
  _BYTE v35[128];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRRecentContactsLibrary messageSourcesBundleIdentifiers](CRRecentContactsLibrary, "messageSourcesBundleIdentifiers"));
  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(v3, "count")));
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v28;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v28 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)i);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "originalSource"));
        if (objc_msgSend(v11, "length") && objc_msgSend(v4, "indexOfObject:", v11) != (id)0x7FFFFFFFFFFFFFFFLL)
        {
          v12 = (void *)objc_claimAutoreleasedReturnValue(+[AutocompleteMatchInfo matchInfoWithType:](AutocompleteMatchInfo, "matchInfoWithType:", 4));
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "setMatchInfo:forObject:", v12, v10);
          v13 = -[AutocompleteItem initWithLocalCompletion:sourceType:sourceSubtype:matchInfo:]([AutocompleteItem alloc], "initWithLocalCompletion:sourceType:sourceSubtype:matchInfo:", v10, 5, 5, v12);
          objc_msgSend(v26, "addObject:", v13);

        }
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
    }
    while (v7);
  }

  v14 = a1;
  v15 = objc_msgSend(*(id *)(a1 + 32), "isCancelled");
  v16 = sub_10043222C();
  v17 = objc_claimAutoreleasedReturnValue(v16);
  v18 = os_log_type_enabled(v17, OS_LOG_TYPE_INFO);
  if ((v15 & 1) != 0)
  {
    if (v18)
    {
      v19 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v32 = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "SearchRecentsOperation - %@ is cancelled", buf, 0xCu);
    }

    WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 40));
    v21 = WeakRetained;
    v22 = *(_QWORD *)(a1 + 32);
    v23 = &__NSArray0__struct;
  }
  else
  {
    if (v18)
    {
      v24 = *(_QWORD *)(a1 + 32);
      v25 = objc_msgSend(v26, "count");
      *(_DWORD *)buf = 138412546;
      v32 = v24;
      v33 = 2048;
      v34 = v25;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "SearchRecentsOperation - %@ collected %lu results", buf, 0x16u);
    }

    WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(v14 + 32) + 40));
    v21 = WeakRetained;
    v22 = *(_QWORD *)(v14 + 32);
    v23 = v26;
  }
  objc_msgSend(WeakRetained, "searchRecentsOperation:didMatchResults:", v22, v23);

  objc_msgSend(*(id *)(v14 + 32), "willChangeValueForKey:", CFSTR("isExecuting"));
  objc_msgSend(*(id *)(v14 + 32), "willChangeValueForKey:", CFSTR("isFinished"));
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(v14 + 32) + 32));
  if ((objc_msgSend(*(id *)(v14 + 32), "isCancelled") & 1) == 0)
  {
    *(_BYTE *)(*(_QWORD *)(v14 + 32) + 16) = 0;
    *(_BYTE *)(*(_QWORD *)(v14 + 32) + 17) = 1;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(v14 + 32) + 32));
  objc_msgSend(*(id *)(v14 + 32), "didChangeValueForKey:", CFSTR("isExecuting"));
  objc_msgSend(*(id *)(v14 + 32), "didChangeValueForKey:", CFSTR("isFinished"));

}

id sub_100B36A84()
{
  if (qword_1014D40A8 != -1)
    dispatch_once(&qword_1014D40A8, &stru_1011E3A98);
  return (id)qword_1014D40A0;
}

void sub_100B371AC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFSessionTransitSteppingMonitor");
  v2 = (void *)qword_1014D40A0;
  qword_1014D40A0 = (uint64_t)v1;

}

id sub_100B37CE8(void *a1)
{
  id v1;
  id v2;
  id v3;
  id v4;
  void *v5;
  NSString *v6;

  v1 = a1;
  v2 = objc_msgSend(v1, "sourceType");
  v3 = objc_msgSend(v1, "suggestionType");
  v4 = objc_msgSend(v1, "serverEntryType");

  if (v2 == (id)1)
  {
    if (v4 >= 4)
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), v4));
    else
      v5 = *(&off_1011E3B30 + (int)v4);
    v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("ServerEntryType=%@"), v5);
    goto LABEL_11;
  }
  if (!v2)
  {
    if (v3 >= 0xF)
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), v3));
    else
      v5 = *(&off_1011E3AB8 + (int)v3);
    v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("SuggestionType=%@"), v5);
LABEL_11:
    v1 = (id)objc_claimAutoreleasedReturnValue(v6);

  }
  return v1;
}

NSString *sub_100B37DF4(void *a1)
{
  char *v1;
  const __CFString *v2;

  v1 = (char *)objc_msgSend(a1, "featureType");
  if ((unint64_t)(v1 - 1) > 0x28)
    v2 = CFSTR("Unknown");
  else
    v2 = *(&off_1011E3B50 + (_QWORD)(v1 - 1));
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Feature=%@"), v2);
}

void sub_100B38738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100B38760(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id *v6;
  id WeakRetained;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  _BOOL4 v22;
  double v23;
  id v24;
  double v25;
  double v26;
  _QWORD v28[4];
  id v29;
  void *v30;

  v5 = a3;
  v6 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v8 = WeakRetained;
  if (WeakRetained)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "offlineMapsDataSource"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "sectionForSectionIndex:", a2));

    if (objc_msgSend(v10, "sectionType")
      || (v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "collectionView")),
          v12 = objc_msgSend(v11, "numberOfSections"),
          v11,
          v12 != (id)1))
    {
      v13 = objc_msgSend(objc_alloc((Class)UICollectionLayoutListConfiguration), "initWithAppearance:", 2);
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor clearColor](UIColor, "clearColor"));
      objc_msgSend(v13, "setBackgroundColor:", v19);

      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "headerText"));
      objc_msgSend(v13, "setHeaderMode:", objc_msgSend(v20, "length") != 0);

      objc_msgSend(v13, "setFooterMode:", 1);
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472;
      v28[2] = sub_100B38AB8;
      v28[3] = &unk_1011E0F90;
      objc_copyWeak(&v29, v6);
      objc_msgSend(v13, "setTrailingSwipeActionsConfigurationProvider:", v28);
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutSection sectionWithListConfiguration:layoutEnvironment:](NSCollectionLayoutSection, "sectionWithListConfiguration:layoutEnvironment:", v13, v5));
      if (a2 < 1)
      {
        v23 = 0.0;
      }
      else
      {
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "headerText"));
        v22 = objc_msgSend(v21, "length") == 0;

        if (v22)
          v23 = 16.0;
        else
          v23 = 0.0;
      }
      v24 = objc_msgSend(v10, "sectionType");
      v25 = 32.0;
      v26 = 16.0;
      if (v24)
        v25 = v23;
      else
        v26 = 32.0;
      objc_msgSend(v18, "setContentInsets:", v25, v26, 0.0, v26);
      objc_destroyWeak(&v29);
    }
    else
    {
      v13 = (id)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutSize layoutSizeWithFractionalWidth:fractionalHeight:](NSCollectionLayoutSize, "layoutSizeWithFractionalWidth:fractionalHeight:", 1.0, 1.0));
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutItem itemWithLayoutSize:](NSCollectionLayoutItem, "itemWithLayoutSize:", v13));
      objc_msgSend(v14, "setContentInsets:", NSDirectionalEdgeInsetsZero.top, NSDirectionalEdgeInsetsZero.leading, NSDirectionalEdgeInsetsZero.bottom, NSDirectionalEdgeInsetsZero.trailing);
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutSize layoutSizeWithFractionalWidth:fractionalHeight:](NSCollectionLayoutSize, "layoutSizeWithFractionalWidth:fractionalHeight:", 1.0, 1.0));
      v30 = v14;
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v30, 1));
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutGroup verticalGroupWithLayoutSize:subitems:](NSCollectionLayoutGroup, "verticalGroupWithLayoutSize:subitems:", v15, v16));

      v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutSection sectionWithGroup:](NSCollectionLayoutSection, "sectionWithGroup:", v17));
      objc_msgSend(v18, "setContentInsets:", 0.0, 32.0, 0.0, 32.0);

    }
  }
  else
  {
    v18 = 0;
  }

  return v18;
}

void sub_100B38A94(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

id sub_100B38AB8(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "offlineMapsDataSource"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "swipeActionsConfigurationForIndexPath:", v3));

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

id sub_100B39098(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "hairLineAlpha");
}

id sub_100B390AC(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "setHairLineAlpha:");
}

void sub_100B3A338(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v7[4];
  id v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CarDisplayController sharedInstance](CarDisplayController, "sharedInstance"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "chromeViewController"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "currentTraits"));

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ticketForSearchFieldOfflinePlaceholderWithTraits:", v4));

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100B3A434;
  v7[3] = &unk_1011B0F78;
  objc_copyWeak(&v8, (id *)(a1 + 32));
  objc_msgSend(v6, "submitWithHandler:networkActivity:", v7, 0);
  objc_destroyWeak(&v8);

}

void sub_100B3A420(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100B3A434(uint64_t a1, unsigned __int8 a2, void *a3)
{
  id WeakRetained;
  uint64_t v6;
  id v7;
  id v8;
  id v9;

  v9 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v6 = (v9 == 0) & a2;
    *((_BYTE *)WeakRetained + 16) = v6;
    v7 = objc_loadWeakRetained((id *)WeakRetained + 3);
    objc_msgSend(v7, "updateCardViewTitle:", v6);

    v8 = objc_msgSend(objc_alloc((Class)NSIndexSet), "initWithIndex:", 0);
    objc_msgSend(*((id *)WeakRetained + 5), "reloadSections:withRowAnimation:", v8, 100);

  }
}

id sub_100B3A5D4()
{
  if (qword_1014D40C0 != -1)
    dispatch_once(&qword_1014D40C0, &stru_1011E3C98);
  return (id)qword_1014D40B0;
}

void sub_100B3A614(id a1)
{
  void *v1;
  MapsSuggestionsMKLocationManagerAdapter *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  _QWORD v16[4];
  id v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  void (*v23)(uint64_t);
  id v24;
  uint64_t v25;
  uint64_t v26;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[MapsSuggestionsEngineBuilder forDevice](MapsSuggestionsEngineBuilder, "forDevice"));
  v2 = objc_alloc_init(MapsSuggestionsMKLocationManagerAdapter);
  v3 = (void *)qword_1014D40B8;
  qword_1014D40B8 = (uint64_t)v2;

  v26 = objc_opt_class(MapsSuggestionsRidesharingSource);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v26, 1));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "withSourceClasses:", v4));

  if (GEOConfigGetBOOL(GEOConfigMapsSuggestionsRatingRequestSourceBuiltOnlyForMaps[0], GEOConfigMapsSuggestionsRatingRequestSourceBuiltOnlyForMaps[1]))
  {
    v25 = objc_opt_class(MapsSuggestionsRatingRequestSource);
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v25, 1));
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "withSourceClasses:", v6));

    v5 = (void *)v7;
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "withFavorites"));

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "withLocationUpdater:", qword_1014D40B8));
  v19 = 0;
  v20 = &v19;
  v21 = 0x3032000000;
  v22 = sub_100B3A870;
  v23 = sub_100B3A880;
  v10 = v9;
  v24 = v10;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100B3A888;
  v16[3] = &unk_1011E3CC0;
  v18 = &v19;
  v11 = objc_alloc_init((Class)MapsSuggestionsShortcutTitleFormatter);
  v17 = v11;
  MapsSuggestionsEntryTypeEnumerate(v16);
  v12 = v17;
  v13 = (id)v20[5];

  _Block_object_dispose(&v19, 8);
  v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "build"));
  v15 = (void *)qword_1014D40B0;
  qword_1014D40B0 = v14;

}

void sub_100B3A850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100B3A870(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100B3A880(uint64_t a1)
{

}

uint64_t sub_100B3A888(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t Log;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;

  if (a2 > 0x18)
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "EngineForMapsProcess");
    v8 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
    {
      v12 = 136446978;
      v13 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsEngineForMapsProcess.m";
      v14 = 1024;
      v15 = 75;
      v16 = 2082;
      v17 = "MapsSuggestionsEngineBuilder *_setPinnedPlaceTitleFormatters(MapsSuggestionsEngineBuilder *__strong)_block_invoke";
      v18 = 2082;
      v19 = "YES";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "At %{public}s:%d, %{public}s forbids: %{public}s. Detected an unsupported MapsSuggestionsEntryType!", (uint8_t *)&v12, 0x26u);
    }

    return 0;
  }
  else
  {
    if (((1 << a2) & 0x1F3FFF9) == 0)
    {
      v4 = *(_QWORD *)(a1 + 32);
      v5 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
      if (((1 << a2) & 0x80006) != 0)
        v6 = a2;
      else
        v6 = 18;
      v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "withTitleFormatter:forType:", v4, v6));
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v11 = *(void **)(v10 + 40);
      *(_QWORD *)(v10 + 40) = v9;

    }
    return 1;
  }
}

id sub_100B3AA00(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v21;
  id v22;
  id v23;
  _QWORD v24[4];
  id v25;
  id v26;
  _QWORD v27[2];
  _QWORD v28[3];
  _QWORD v29[3];

  v5 = a1;
  v6 = a2;
  if (v6)
  {
    v22 = a3;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "localizedStringForKey:value:table:", CFSTR("No (Pair) [CarPlay]"), CFSTR("localized string not found"), 0));
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_100B3ACC8;
    v24[3] = &unk_1011AC8B0;
    v25 = v5;
    v9 = v6;
    v26 = v9;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[MapsInterruptionAction actionWithTitle:cancels:handler:](MapsInterruptionAction, "actionWithTitle:cancels:handler:", v8, 1, v24));

    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "localizedStringForKey:value:table:", CFSTR("VG disambiguation title [CarPlay]"), CFSTR("localized string not found"), 0));

    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "localizedStringForKey:value:table:", CFSTR("VG disambiguation subtitle [CarPlay]"), CFSTR("localized string not found"), 0));

    v28[0] = CFSTR("kMapsInterruptionTitle");
    v23 = v5;
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "displayName"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", v21, v14));
    v29[0] = v15;
    v28[1] = CFSTR("kMapsInterruptionMessage");
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "displayName"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", v13, v16));
    v29[1] = v17;
    v28[2] = CFSTR("kMapsInterruptionActions");
    v27[0] = v10;
    v27[1] = v22;
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v27, 2));
    v29[2] = v18;
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v29, v28, 3));

    v5 = v23;
  }
  else
  {
    v19 = 0;
  }

  return v19;
}

void sub_100B3ACC8(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;

  v2 = sub_10043268C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = 138412546;
    v7 = v4;
    v8 = 2112;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "User selected not to pair pair accessory (%@) to vehicle: %@", (uint8_t *)&v6, 0x16u);
  }

}

id sub_100B3AD78(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void **v18;
  uint64_t v19;
  void (*v20)(uint64_t);
  void *v21;
  id v22;
  _QWORD v23[4];
  id v24;
  _QWORD v25[2];
  _QWORD v26[3];
  _QWORD v27[3];

  v3 = a1;
  if (a2)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("Dismiss [CarPlay, Disambiguation]"), CFSTR("localized string not found"), 0));
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_100B3B00C;
    v23[3] = &unk_1011AC860;
    v6 = v3;
    v24 = v6;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[MapsInterruptionAction actionWithTitle:cancels:handler:](MapsInterruptionAction, "actionWithTitle:cancels:handler:", v5, 1, v23));

    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "localizedStringForKey:value:table:", CFSTR("Continue [CarPlay, Disambiguation]"), CFSTR("localized string not found"), 0));
    v18 = _NSConcreteStackBlock;
    v19 = 3221225472;
    v20 = sub_100B3B0B0;
    v21 = &unk_1011AC860;
    v22 = v6;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[MapsInterruptionAction actionWithTitle:cancels:handler:](MapsInterruptionAction, "actionWithTitle:cancels:handler:", v9, 0, &v18));

    v26[0] = CFSTR("kMapsInterruptionTitle");
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle", v18, v19, v20, v21));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "localizedStringForKey:value:table:", CFSTR("Use CarPlay with Your Vehicles in Maps title [CarPlay]"), CFSTR("localized string not found"), 0));
    v27[0] = v12;
    v26[1] = CFSTR("kMapsInterruptionMessage");
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "localizedStringForKey:value:table:", CFSTR("Use CarPlay with Your Vehicles in Maps subtitle [CarPlay]"), CFSTR("localized string not found"), 0));
    v27[1] = v14;
    v26[2] = CFSTR("kMapsInterruptionActions");
    v25[0] = v7;
    v25[1] = v10;
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v25, 2));
    v27[2] = v15;
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v27, v26, 3));

  }
  else
  {
    v16 = 0;
  }

  return v16;
}

void sub_100B3B00C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v2 = sub_10043268C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = 138412290;
    v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "User selected not to find a paired vehicle for accessory (%@)", (uint8_t *)&v5, 0xCu);
  }

}

void sub_100B3B0B0(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v2 = sub_10043268C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = 138412290;
    v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "User selected find a paired vehicle for accessory: %@", (uint8_t *)&v5, 0xCu);
  }

}

id sub_100B3B954(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v6;
  void *v7;
  id v8;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "iapIdentifier"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
  v8 = objc_msgSend(v6, "isEqualToString:", v7);

  if ((_DWORD)v8)
    *a4 = 1;
  return v8;
}

void sub_100B3BDD8(uint64_t a1, void *a2)
{
  id v3;
  _QWORD v4[4];
  id v5;
  id v6;

  v3 = objc_msgSend(a2, "authorizationStatus");
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100B3BE58;
  v4[3] = &unk_1011B6D60;
  v5 = *(id *)(a1 + 32);
  v6 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v4);

}

uint64_t sub_100B3BE58(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, BOOL))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40) != 2);
}

id sub_100B3D4EC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "continueSelected");
}

uint64_t sub_100B3D4F4(uint64_t a1)
{
  uint64_t result;

  +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 2122, objc_msgSend(*(id *)(a1 + 32), "_analyticsTarget"), 0);
  result = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

id sub_100B3DE78(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateHorizontalLayoutIfNeeded");
}

void sub_100B3E194(uint64_t a1, char a2)
{
  _QWORD v2[5];
  char v3;
  char v4;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100B3E1FC;
  v2[3] = &unk_1011BF3D8;
  v3 = a2;
  v4 = *(_BYTE *)(a1 + 40);
  v2[4] = *(_QWORD *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v2);
}

uint64_t (**sub_100B3E1FC(uint64_t a1))(void)
{
  uint64_t v2;
  uint64_t (**result)(void);

  if (*(_BYTE *)(a1 + 40))
    v2 = 270;
  else
    v2 = 77;
  result = (uint64_t (**)(void))+[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", v2, 51, 0);
  if (!*(_BYTE *)(a1 + 41))
  {
    result = *(uint64_t (***)(void))(*(_QWORD *)(a1 + 32) + 8);
    if (result)
      return (uint64_t (**)(void))result[2]();
  }
  return result;
}

uint64_t sub_100B3E26C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_100B40A84(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v4 = objc_alloc_init((Class)UICollectionViewFlowLayoutInvalidationContext);
  objc_msgSend(v4, "setInvalidateFlowLayoutAttributes:", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "reservationDetailCell"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "timeSelectionCollectionViewLayout"));
  objc_msgSend(v3, "invalidateLayoutWithContext:", v4);

}

uint64_t sub_100B43C30(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "offerTitleText"));
  v4 = objc_msgSend(v2, "containsObject:", v3) ^ 1;

  return v4;
}

void sub_100B43C74(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(+[NSIndexPath indexPathForRow:inSection:](NSIndexPath, "indexPathForRow:inSection:", a2 + 1, objc_msgSend(*(id *)(a1 + 32), "offersSection")));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "offersRowHeight"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "heightCache"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v3, v5);

  objc_msgSend(*(id *)(a1 + 40), "addObject:", v5);
}

void sub_100B45B44(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "overviewCell:incidentUpvoted:", *(_QWORD *)(a1 + 32), 0);

}

void sub_100B45B88(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "overviewCell:incidentUpvoted:", *(_QWORD *)(a1 + 32), 1);

}

void sub_100B464E0(id a1)
{
  NavTrayMetrics *v1;
  void *v2;
  uint64_t v3;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;

  v1 = objc_opt_new(NavTrayMetrics);
  v2 = (void *)qword_1014D40C8;
  qword_1014D40C8 = (uint64_t)v1;

  v3 = qword_1014D40C8;
  __asm { FMOV            V0.2D, #16.0 }
  *(_OWORD *)(qword_1014D40C8 + 8) = _Q0;
  *(_OWORD *)(v3 + 24) = xmmword_100E3EF50;
  *(_QWORD *)(v3 + 40) = 0x4038000000000000;
  v9 = objc_claimAutoreleasedReturnValue(+[UIColor labelColor](UIColor, "labelColor"));
  v10 = *(void **)(qword_1014D40C8 + 64);
  *(_QWORD *)(qword_1014D40C8 + 64) = v9;

  v11 = qword_1014D40C8;
  *(_OWORD *)(qword_1014D40C8 + 72) = xmmword_100E3EF60;
  *(_QWORD *)(v11 + 88) = 0x403E000000000000;
  *(_QWORD *)(v11 + 48) = UIFontTextStyleTitle3;
  *(UIFontWeight *)(v11 + 56) = UIFontWeightRegular;
  v12 = objc_claimAutoreleasedReturnValue(+[UIColor secondaryLabelColor](UIColor, "secondaryLabelColor"));
  v13 = *(void **)(qword_1014D40C8 + 96);
  *(_QWORD *)(qword_1014D40C8 + 96) = v12;

  v14 = qword_1014D40C8;
  *(_QWORD *)(qword_1014D40C8 + 104) = 0x402C000000000000;
  *(_QWORD *)(v14 + 112) = UIFontTextStyleTitle1;
  *(UIFontWeight *)(v14 + 120) = UIFontWeightBold;
  v15 = objc_claimAutoreleasedReturnValue(+[UIColor labelColor](UIColor, "labelColor"));
  v16 = *(void **)(qword_1014D40C8 + 128);
  *(_QWORD *)(qword_1014D40C8 + 128) = v15;

  v17 = qword_1014D40C8;
  *(int64x2_t *)(qword_1014D40C8 + 248) = vdupq_n_s64(0x4042000000000000uLL);
  *(_OWORD *)(v17 + 136) = xmmword_100E3EF70;
  *(_QWORD *)(v17 + 152) = UIFontTextStyleTitle2;
  *(UIFontWeight *)(v17 + 160) = UIFontWeightBold;
  *(_QWORD *)(v17 + 168) = UIFontTextStyleTitle3;
  *(UIFontWeight *)(v17 + 176) = UIFontWeightBold;
  *(_QWORD *)(v17 + 184) = 2;
  v18 = objc_claimAutoreleasedReturnValue(+[UIColor systemWhiteColor](UIColor, "systemWhiteColor"));
  v19 = *(void **)(qword_1014D40C8 + 192);
  *(_QWORD *)(qword_1014D40C8 + 192) = v18;

  v20 = objc_claimAutoreleasedReturnValue(+[UIColor systemRedColor](UIColor, "systemRedColor"));
  v21 = *(void **)(qword_1014D40C8 + 200);
  *(_QWORD *)(qword_1014D40C8 + 200) = v20;

  v22 = objc_claimAutoreleasedReturnValue(+[UIColor systemBlueColor](UIColor, "systemBlueColor"));
  v23 = *(void **)(qword_1014D40C8 + 208);
  *(_QWORD *)(qword_1014D40C8 + 208) = v22;

  v24 = objc_claimAutoreleasedReturnValue(+[UIColor tertiarySystemFillColor](UIColor, "tertiarySystemFillColor"));
  v25 = *(void **)(qword_1014D40C8 + 216);
  *(_QWORD *)(qword_1014D40C8 + 216) = v24;

  v26 = qword_1014D40C8;
  *(_OWORD *)(qword_1014D40C8 + 224) = xmmword_100E3EF80;
  *(_QWORD *)(v26 + 240) = 0x4010000000000000;
}

void sub_100B4694C(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v2 = objc_msgSend(objc_alloc((Class)CNMonogrammer), "initWithStyle:diameter:", 0, *(double *)(a1 + 48));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "monogramForContact:", *(_QWORD *)(a1 + 32)));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100B46A0C;
  v6[3] = &unk_1011ACAD0;
  v4 = *(id *)(a1 + 40);
  v7 = v3;
  v8 = v4;
  v5 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);

}

uint64_t sub_100B46A0C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_100B46ABC(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v2 = objc_msgSend(objc_alloc((Class)CNMonogrammer), "initWithStyle:diameter:", 0, *(double *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "silhouetteMonogram"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100B46B78;
  v6[3] = &unk_1011ACAD0;
  v4 = *(id *)(a1 + 32);
  v7 = v3;
  v8 = v4;
  v5 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);

}

uint64_t sub_100B46B78(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_100B46C28(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v2 = objc_msgSend(objc_alloc((Class)CNMonogrammer), "initWithStyle:diameter:", 0, *(double *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "questionMarkMonogram"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100B46CE4;
  v6[3] = &unk_1011ACAD0;
  v4 = *(id *)(a1 + 32);
  v7 = v3;
  v8 = v4;
  v5 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);

}

uint64_t sub_100B46CE4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_100B49410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100B49428(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v7;
  id v8;
  id v9;

  v7 = *(void **)(a1 + 32);
  v8 = a2;
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectAtIndexedSubscript:", a3));
  LOBYTE(a3) = objc_msgSend(v8, "isEqualToSearchResult:forPurpose:");

  if ((a3 & 1) == 0)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
    *a4 = 1;
  }

}

void sub_100B4995C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100B49984(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  NSObject *WeakRetained;
  int v7;
  id v8;

  v3 = a2;
  v4 = sub_1004315EC();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  WeakRetained = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v7 = 138412290;
      v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, WeakRetained, OS_LOG_TYPE_ERROR, "Error saving URL collection: %@", (uint8_t *)&v7, 0xCu);
    }
  }
  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      LOWORD(v7) = 0;
      _os_log_impl((void *)&_mh_execute_header, WeakRetained, OS_LOG_TYPE_INFO, "Completed creation of URL collection. Reloading collection and data source.", (uint8_t *)&v7, 2u);
    }

    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    -[NSObject _transformURLCollectionInMSPCollection](WeakRetained, "_transformURLCollectionInMSPCollection");
  }

}

void sub_100B4A464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,id location)
{
  id *v61;

  objc_destroyWeak(v61);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100B4A4B4(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "setEditing:", 1);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 152), "setEditing:", 1);
}

void sub_100B4A4FC(id a1, NSError *a2)
{
  NSError *v2;
  id v3;
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint32_t v9;
  int v10;
  NSError *v11;

  v2 = a2;
  v3 = sub_1004315EC();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = v4;
  if (v2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v10 = 138412290;
      v11 = v2;
      v6 = "Error updating collection: %@";
      v7 = v5;
      v8 = OS_LOG_TYPE_ERROR;
      v9 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v7, v8, v6, (uint8_t *)&v10, v9);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    LOWORD(v10) = 0;
    v6 = "Updated collection successfully";
    v7 = v5;
    v8 = OS_LOG_TYPE_INFO;
    v9 = 2;
    goto LABEL_6;
  }

}

id sub_100B4A5DC(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "setEditing:", 0);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 152), "setEditing:", 0);
}

void sub_100B4A624(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
    objc_msgSend(v5, "viewController:presentCollectionPickerContaineeViewController:", *(_QWORD *)(a1 + 32), v6);

  }
}

void sub_100B4A690(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  id v5;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
    objc_msgSend(WeakRetained, "presentViewController:animated:completion:", v5, 1, 0);

}

void sub_100B4A6E8(uint64_t a1, int a2)
{
  void *v2;
  _QWORD v3[4];
  id v4;

  if (a2)
  {
    v2 = *(void **)(a1 + 32);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100B4A750;
    v3[3] = &unk_1011B1BE0;
    v4 = v2;
    objc_msgSend(v4, "applyToCollection:completion:", 0, v3);

  }
}

void sub_100B4A750(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  id v10;

  v3 = a2;
  if (v3)
  {
    v4 = sub_1004315EC();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = *(_QWORD *)(a1 + 32);
      v7 = 138412546;
      v8 = v6;
      v9 = 2112;
      v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Error during deletion session %@ %@", (uint8_t *)&v7, 0x16u);
    }

  }
}

void sub_100B4A818(uint64_t a1)
{
  PersonalCollectionShareItemSource *v2;
  MapsActivityViewController *v3;
  uint64_t v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  id WeakRetained;
  PersonalCollectionShareItemSource *v16;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = -[PersonalCollectionShareItemSource initWithCollectionHandlerInfo:]([PersonalCollectionShareItemSource alloc], "initWithCollectionHandlerInfo:", *(_QWORD *)(a1 + 40));
    if (v2)
    {
      v16 = v2;
      v3 = -[MapsActivityViewController initWithShareItem:]([MapsActivityViewController alloc], "initWithShareItem:", v2);
      v4 = *(_QWORD *)(a1 + 48);
      v5 = (void *)objc_claimAutoreleasedReturnValue(-[MapsActivityViewController popoverPresentationController](v3, "popoverPresentationController"));
      objc_msgSend(v5, "setSourceView:", v4);

      objc_msgSend(*(id *)(a1 + 48), "bounds");
      v7 = v6;
      v9 = v8;
      v11 = v10;
      v13 = v12;
      v14 = (void *)objc_claimAutoreleasedReturnValue(-[MapsActivityViewController popoverPresentationController](v3, "popoverPresentationController"));
      objc_msgSend(v14, "setSourceRect:", v7, v9, v11, v13);

      WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
      objc_msgSend(WeakRetained, "presentViewController:animated:completion:", v3, 1, 0);

      v2 = v16;
    }

  }
}

uint64_t sub_100B4A930(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100B4AC3C(id *a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "firstObject"));
  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "delegate"));
    v6 = objc_msgSend(v5, "newTraits");
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "ticketForMapItemToRefine:traits:", v3, v6));

    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100B4AD50;
    v8[3] = &unk_1011B3AF8;
    v9 = v3;
    v10 = a1[5];
    v11 = a1[6];
    objc_msgSend(v7, "submitWithHandler:networkActivity:", v8, 0);

  }
}

void sub_100B4AD50(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  _QWORD v14[4];
  id v15;
  uint8_t buf[4];
  id v17;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = sub_1004315EC();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v17 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Error refining dropped map item: %@", buf, 0xCu);
    }

  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
  v10 = v9;
  if (!v9)
    v10 = *(void **)(a1 + 32);
  v11 = v10;

  v12 = *(void **)(a1 + 40);
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](NSSet, "setWithObject:", v11));
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100B4AEBC;
  v14[3] = &unk_1011B1BE0;
  v15 = *(id *)(a1 + 48);
  objc_msgSend(v12, "addObjects:completion:", v13, v14);

}

void sub_100B4AEBC(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  int v6;
  id v7;

  v3 = a2;
  if (v3)
  {
    v4 = sub_1004315EC();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = 138412290;
      v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Error saving dropping map item: %@", (uint8_t *)&v6, 0xCu);
    }

  }
  objc_msgSend(*(id *)(a1 + 32), "reloadData");

}

void sub_100B4B384(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  _QWORD v5[4];
  id v6;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(void **)(*(_QWORD *)(a1 + 32) + 120);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100B4B414;
  v5[3] = &unk_1011AE218;
  v6 = *(id *)(a1 + 48);
  objc_msgSend(v4, "updateTitle:forMapItem:completion:", a2, v3, v5);

}

void sub_100B4B414(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  id v8;

  v3 = a2;
  if (v3)
  {
    v4 = sub_1004315EC();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v7 = 138412290;
      v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Error renaming map item: %@", (uint8_t *)&v7, 0xCu);
    }

  }
  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
    (*(void (**)(void))(v6 + 16))();

}

uint64_t sub_100B4B4DC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_100B4B96C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100B4B97C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100B4EA00(id a1)
{
  PedestrianARFloatingDebugViewController *v1;
  void *v2;

  v1 = objc_opt_new(PedestrianARFloatingDebugViewController);
  v2 = (void *)qword_1014D40D8;
  qword_1014D40D8 = (uint64_t)v1;

}

id sub_100B4F578()
{
  if (qword_1014D4100 != -1)
    dispatch_once(&qword_1014D4100, &stru_1011E3E68);
  return (id)qword_1014D40F8;
}

void sub_100B4F5B8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  MapsRadarDraft *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  NSObject *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  id v29;

  v7 = a2;
  v8 = a4;
  v9 = sub_100B4F578();
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    v11 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 134349314;
    v27 = v11;
    v28 = 2112;
    v29 = v7;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "[%{public}p] %@ TTR category chosen", buf, 0x16u);
  }

  v12 = objc_alloc_init((Class)NSDateFormatter);
  objc_msgSend(v12, "setDateFormat:", CFSTR("yyyy-MM-dd HH:mm:ss.SSSSSSZZZ"));
  v13 = objc_msgSend(objc_alloc((Class)NSLocale), "initWithLocaleIdentifier:", CFSTR("en_US_POSIX"));
  objc_msgSend(v12, "setLocale:", v13);

  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "stringFromDate:", v14));
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Timestamp: %@\n\nSummary:\n\nSteps to Reproduce:\n\nResults:\n"), v15));

  v17 = objc_opt_new(MapsRadarDraft);
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("[Pedestrian AR]: %@"), v7));
  -[MapsRadarDraft setTitle:](v17, "setTitle:", v18);

  -[MapsRadarDraft setDescriptionText:](v17, "setDescriptionText:", v16);
  -[MapsRadarDraft setComponent:](v17, "setComponent:", v8);

  -[MapsRadarDraft setClassification:](v17, "setClassification:", a3);
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[MapsRadarKeyword keywordWithName:number:](MapsRadarKeyword, "keywordWithName:number:", CFSTR("MAPS377"), 1281664));
  v25 = v19;
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v25, 1));
  -[MapsRadarDraft addKeywords:](v17, "addKeywords:", v20);

  v21 = sub_100B4F578();
  v22 = objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    v23 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 134349056;
    v27 = v23;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "[%{public}p] Will launch MapsRadarController", buf, 0xCu);
  }

  v24 = (void *)objc_claimAutoreleasedReturnValue(+[MapsRadarController sharedInstance](MapsRadarController, "sharedInstance"));
  objc_msgSend(v24, "launchTTRWithRadar:", v17);

}

void sub_100B4F87C(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[MapsRadarComponent mapsAppNavUIWalkingComponent](MapsRadarComponent, "mapsAppNavUIWalkingComponent"));
  (*(void (**)(uint64_t, const __CFString *, uint64_t, id))(v1 + 16))(v1, CFSTR("Missing AR element"), 5, v2);

}

void sub_100B4F8D4(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[MapsRadarComponent mapsAppNavUIWalkingComponent](MapsRadarComponent, "mapsAppNavUIWalkingComponent"));
  (*(void (**)(uint64_t, const __CFString *, uint64_t, id))(v1 + 16))(v1, CFSTR("Wrong AR placement"), 5, v2);

}

void sub_100B4F92C(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[MapsRadarComponent mapsAppNavUIWalkingComponent](MapsRadarComponent, "mapsAppNavUIWalkingComponent"));
  (*(void (**)(uint64_t, const __CFString *, uint64_t, id))(v1 + 16))(v1, CFSTR("Wrong instruction text"), 5, v2);

}

void sub_100B4F984(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[MapsRadarComponent mapsVisualLocalizationComponent](MapsRadarComponent, "mapsVisualLocalizationComponent"));
  (*(void (**)(uint64_t, const __CFString *, uint64_t, id))(v1 + 16))(v1, CFSTR("Failed to localize"), 5, v2);

}

void sub_100B4F9DC(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[MapsRadarComponent mapsVisualLocalizationComponent](MapsRadarComponent, "mapsVisualLocalizationComponent"));
  (*(void (**)(uint64_t, const __CFString *, uint64_t, id))(v1 + 16))(v1, CFSTR("Slow to localize"), 5, v2);

}

void sub_100B4FA34(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[MapsRadarComponent mapsAppNavUIWalkingComponent](MapsRadarComponent, "mapsAppNavUIWalkingComponent"));
  (*(void (**)(uint64_t, const __CFString *, uint64_t, id))(v1 + 16))(v1, CFSTR("Performance"), 4, v2);

}

void sub_100B4FA8C(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[MapsRadarComponent mapsAppNavUIWalkingComponent](MapsRadarComponent, "mapsAppNavUIWalkingComponent"));
  (*(void (**)(uint64_t, const __CFString *, uint64_t, id))(v1 + 16))(v1, &stru_1011EB268, 7, v2);

}

void sub_100B4FAE4(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v2 = sub_100B4F578();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = 134349056;
    v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%{public}p] User canceled TTR action sheet", (uint8_t *)&v5, 0xCu);
  }

}

void sub_100B50880(id a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_1014D40F0;
  qword_1014D40F0 = (uint64_t)v1;

  objc_msgSend((id)qword_1014D40F0, "setDateFormat:", CFSTR("yyyy-MM-dd HH:mm:ss.SSSSSSZZZ"));
  v3 = objc_msgSend(objc_alloc((Class)NSLocale), "initWithLocaleIdentifier:", CFSTR("en_US_POSIX"));
  objc_msgSend((id)qword_1014D40F0, "setLocale:", v3);

}

int64_t sub_100B508F8(id a1, PedestrianARSessionMonitor *a2, PedestrianARSessionMonitor *a3)
{
  PedestrianARSessionMonitor *v4;
  objc_class *v5;
  NSString *v6;
  void *v7;
  objc_class *v8;
  NSString *v9;
  void *v10;
  id v11;

  v4 = a3;
  v5 = (objc_class *)objc_opt_class(a2);
  v6 = NSStringFromClass(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = (objc_class *)objc_opt_class(v4);

  v9 = NSStringFromClass(v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v11 = objc_msgSend(v7, "compare:", v10);

  return (int64_t)v11;
}

void sub_100B50C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100B50C74(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  id v3;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "updateDebugText");

  v3 = objc_loadWeakRetained(v1);
  objc_msgSend(v3, "startDebugInfoRefreshTimer");

}

void sub_100B50DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100B50DE4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "composeTTR");

}

void sub_100B50E9C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "updateDebugText");

}

void sub_100B50F70(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;

  v14 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "platformController"));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "chromeViewController"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v3, "topContext"));

  v5 = objc_opt_class(PedestrianARContext);
  LOBYTE(v3) = objc_opt_isKindOfClass(v4, v5);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "platformController"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "auxiliaryTasksManager"));
  v8 = objc_msgSend(v7, "auxilaryTaskForClass:", objc_opt_class(PedestrianARDebugMapAnnotationsTask));
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);

  if ((v3 & 1) != 0 && v4
    || (objc_msgSend(v9, "isProvidingARAnnotations") & 1) != 0
    || (objc_msgSend(*(id *)(a1 + 32), "isAttached") & 1) != 0)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "debugText"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "string"));

    v12 = (void *)objc_claimAutoreleasedReturnValue(+[MapsRadarTextAttachment attachmentWithFileName:text:](MapsRadarTextAttachment, "attachmentWithFileName:text:", CFSTR("PedestrianARStateDiagnostics.txt"), v11));
    objc_msgSend(v14, "addObject:", v12);

    v13 = (void *)objc_claimAutoreleasedReturnValue(+[MapsRadarKeyword keywordWithName:number:](MapsRadarKeyword, "keywordWithName:number:", CFSTR("MAPS377"), 1281664));
    objc_msgSend(*(id *)(a1 + 40), "addAttachments:", v14);
    if (v13)
    {
      objc_msgSend(*(id *)(a1 + 40), "addKeyword:", v13);

    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "addAttachments:", v14);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_100B511D0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "PedestrianARFloatingDebugViewController");
  v2 = (void *)qword_1014D40F8;
  qword_1014D40F8 = (uint64_t)v1;

}

id sub_100B51E84(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setUseNightMode:", *(unsigned __int8 *)(a1 + 40));
}

UIColor *__cdecl sub_100B52B8C(id a1, MapsTheme *a2)
{
  return -[MapsTheme keyColor](a2, "keyColor");
}

void sub_100B52DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100B52DE4(uint64_t a1, void *a2, id a3)
{
  id v5;
  void *v6;
  void **v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  void *v10;
  id v11[2];

  v5 = a2;
  v7 = _NSConcreteStackBlock;
  v8 = 3221225472;
  v9 = sub_100B52EE8;
  v10 = &unk_1011B8278;
  objc_copyWeak(v11, (id *)(a1 + 48));
  v11[1] = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIAction actionWithTitle:image:identifier:handler:](UIAction, "actionWithTitle:image:identifier:handler:", v5, 0, 0, &v7));
  objc_msgSend(v6, "setState:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "selectedIndex", v7, v8, v9, v10) == a3);
  objc_msgSend(*(id *)(a1 + 40), "addObject:", v6);

  objc_destroyWeak(v11);
}

void sub_100B52ED0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100B52EE8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_itemSelectedAtIndex:", *(_QWORD *)(a1 + 40));

}

void sub_100B53038(uint64_t a1)
{
  id v1;
  uint64_t v2;
  void *v3;

  v1 = objc_msgSend(*(id *)(a1 + 32), "registrationWithCellClass:configurationHandler:", objc_opt_class(SmallDropDownOutlineCell), &stru_1011E3EF8);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)qword_1014D4108;
  qword_1014D4108 = v2;

}

void sub_100B53084(id a1, SmallDropDownOutlineCell *a2, NSIndexPath *a3, MapsUIDiffableDataSourceOutlineNodeSnapshot *a4)
{
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  SmallDropDownOutlineCell *v9;

  v9 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[MapsUIDiffableDataSourceOutlineNodeSnapshot viewModel](a4, "viewModel"));
  v6 = objc_opt_class(SmallDropDownOutlineCellModel);
  if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0)
    v7 = v5;
  else
    v7 = 0;
  v8 = v7;

  -[SmallDropDownOutlineCell setCellModel:](v9, "setCellModel:", v8);
}

void sub_100B53ACC(id a1)
{
  MapsCarPlayExternalDeviceMonitor *v1;
  void *v2;

  v1 = objc_opt_new(MapsCarPlayExternalDeviceMonitor);
  v2 = (void *)qword_1014D4120;
  qword_1014D4120 = (uint64_t)v1;

}

void sub_100B53CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100B53CF0()
{
  if (qword_1014D4130 != -1)
    dispatch_once(&qword_1014D4130, &stru_1011E3F38);
  return (id)qword_1014D4128;
}

void sub_100B53D30(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_populateExternalDevice");

}

id sub_100B53D5C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_populateExternalDevice");
}

uint64_t sub_100B53E60(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100B53E70(uint64_t a1)
{

}

void sub_100B53E78(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 16));
}

void sub_100B54000(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v2 = sub_100B53CF0();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = 138543362;
    v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Allowing previous value of currentCarPlayExternalDevice to deallocate: %{public}@", (uint8_t *)&v5, 0xCu);
  }

}

void sub_100B540D4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "MapsCarPlayExternalDeviceMonitor");
  v2 = (void *)qword_1014D4128;
  qword_1014D4128 = (uint64_t)v1;

}

void sub_100B54C30(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100B54C4C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100B54CFC;
  v5[3] = &unk_1011C1B08;
  objc_copyWeak(&v6, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Visual Effect Setting"), v5);
  objc_destroyWeak(&v6);

}

void sub_100B54CE8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100B54CFC(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100B54DAC;
  v5[3] = &unk_1011AEAC8;
  objc_copyWeak(&v6, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Global Settings"), v5);
  objc_destroyWeak(&v6);

}

void sub_100B54D98(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100B54DAC(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;

  v3 = a2;
  v4 = objc_msgSend(v3, "addSwitchRowWithTitle:defaultsKey:switchOnStateIfUnset:changeHandler:", CFSTR("Hide Chrome in Navigation"), CFSTR("__internal__hideChromeInNavigation"), 0, &stru_1011E3F58);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100B54ED0;
  v6[3] = &unk_1011AD4F0;
  objc_copyWeak(&v7, (id *)(a1 + 32));
  v5 = objc_msgSend(v3, "addSwitchRowWithTitle:defaultsKey:switchOnStateIfUnset:changeHandler:", CFSTR("Disable Chrome"), CFSTR("__internal__DisableChrome"), 0, v6);
  objc_destroyWeak(&v7);

}

void sub_100B54E7C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100B54E90(id a1, BOOL a2)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "postNotificationName:object:", CFSTR("__internal__hideChromeInNavigation"), 0);

}

void sub_100B54ED0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_promptForRestart");

}

void sub_100B54FB0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100B54FCC(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100B55088;
  v5[3] = &unk_1011AEAC8;
  objc_copyWeak(&v6, (id *)(a1 + 40));
  v4 = objc_msgSend(v3, "addSectionWithTitle:content:", 0, v5);
  objc_msgSend(*(id *)(a1 + 32), "addVisualEffectSettingsTo:", v3);
  objc_destroyWeak(&v6);

}

void sub_100B55070(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100B55088(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  _QWORD v29[4];
  id v30;
  _QWORD v31[4];
  id v32;
  _QWORD v33[4];
  id v34;
  _QWORD v35[4];
  id v36;
  _QWORD v37[4];
  id v38;

  v3 = a2;
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472;
  v37[2] = sub_100B555EC;
  v37[3] = &unk_1011AD4F0;
  objc_copyWeak(&v38, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:", CFSTR("Show Application Size"), MapsConfig_SizeDebugOverlay, off_1014B4948, 0, v37);
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3221225472;
  v35[2] = sub_100B55618;
  v35[3] = &unk_1011AD4F0;
  objc_copyWeak(&v36, (id *)(a1 + 32));
  v5 = objc_msgSend(v3, "addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:", CFSTR("Allow Cards To Always Use Default Layout"), MapsConfig_AllowCardsToSpecifyAlwaysDefaultLayout, off_1014B4A48, 1, v35);
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472;
  v33[2] = sub_100B55644;
  v33[3] = &unk_1011AD4F0;
  objc_copyWeak(&v34, (id *)(a1 + 32));
  v6 = objc_msgSend(v3, "addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:", CFSTR("Enable UIKitCards on Mac"), MapsConfig_UseUIKitCardsOnMac, off_1014B41C8, 0, v33);
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472;
  v31[2] = sub_100B55670;
  v31[3] = &unk_1011AD4F0;
  objc_copyWeak(&v32, (id *)(a1 + 32));
  v7 = objc_msgSend(v3, "addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:", CFSTR("Optimize animations for sheet presentation"), MapsConfig_ShouldOptimizeAnimationsForSheetPresentation, off_1014B5108, 0, v31);
  v8 = objc_msgSend(v3, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enable Thick Card Material"), MapsConfig_EnableThickCardMaterial, off_1014B41D8);
  v9 = objc_msgSend(v3, "addSwitchRowWithTitle:defaultsKey:switchOnStateIfUnset:changeHandler:", CFSTR("Enable Test Mode"), CFSTR("__internal__EnableTestMode"), 0, 0);
  v10 = objc_msgSend(v3, "addSwitchRowWithTitle:defaultsKey:switchOnStateIfUnset:changeHandler:", CFSTR("Show MapsSuggestion debug"), CFSTR("__internal__EnableMapsSuggestion"), 0, 0);
  v11 = objc_msgSend(v3, "addSwitchRowWithTitle:defaultsKey:switchOnStateIfUnset:changeHandler:", CFSTR("Show search debug"), CFSTR("EnableSearchDebug"), 0, 0);
  v12 = objc_msgSend(v3, "addSwitchRowWithTitle:defaultsKey:switchOnStateIfUnset:changeHandler:", CFSTR("Enable Tap-to-Hide"), CFSTR("__internal__EnabletapToHide"), 0, 0);
  v13 = objc_msgSend(v3, "addSwitchRowWithTitle:defaultsKey:switchOnStateIfUnset:changeHandler:", CFSTR("Enable Tap-to-Minmize"), CFSTR("__internal__EnabletapToMinimize"), 0, 0);
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472;
  v29[2] = sub_100B5569C;
  v29[3] = &unk_1011AD4F0;
  objc_copyWeak(&v30, (id *)(a1 + 32));
  v14 = objc_msgSend(v3, "addSwitchRowWithTitle:defaultsKey:switchOnStateIfUnset:changeHandler:", CFSTR("MapsSuggestion LOI only filter"), CFSTR("__internal__EnableMapsSuggestionLOIOnly"), 0, v29);
  v15 = objc_msgSend(v3, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Don't Reset User Location"), CFSTR("__internal__MapsDebugDontResetUserLocation"));
  v16 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Highlight view frames"), &stru_1011E3F78, &stru_1011E3F98);
  v17 = objc_msgSend(v3, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enable Maps357 in Stark (must restart)"), MapsConfig_StarkEnableMaps357, off_1014B4798);
  v18 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Thermal debug view"), &stru_1011E3FB8, &stru_1011E3FD8);
  v19 = objc_msgSend(v3, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("TTR capture screenshot"), MapsConfig_EnableTapToRadarScreenshotAttachmentProvider, off_1014B4BB8);
  v20 = objc_msgSend(v3, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Force Sticky Banners"), CFSTR("__internal_MapsDebugForceStickyBanners"));
  v21 = objc_msgSend(v3, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Updated maneuver arrow metrics"), MapKitConfig_ArrowDrawingUseUpdatedGuidanceManeuverMetrics[0], MapKitConfig_ArrowDrawingUseUpdatedGuidanceManeuverMetrics[1]);
  v22 = objc_msgSend(v3, "addNavigationRowForViewControllerClass:", objc_opt_class(KeyColorDebugController));
  v23 = objc_msgSend(v3, "addNavigationRowForViewControllerClass:", objc_opt_class(PlaceCardDebugController));
  v24 = objc_msgSend(v3, "addNavigationRowForViewControllerClass:", objc_opt_class(ElevationGraphDebugController));
  v25 = objc_msgSend(v3, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enable RealTime EVChargers"), MapsFeaturesConfig_RealTimeEVCharger[0], MapsFeaturesConfig_RealTimeEVCharger[1]);
  v26 = objc_msgSend(v3, "addNavigationRowForViewControllerClass:", objc_opt_class(_TtC4Maps33MapsCameraDefaultsDebugController));
  v27 = objc_msgSend(v3, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Enable invalid root install alert"), CFSTR("EnableRootInstallationFailureAlert"));
  v28 = objc_msgSend(v3, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Enable automatic card expansion in route creation"), CFSTR("__internal_EnableAutomaticCardExpanion"));
  objc_destroyWeak(&v30);
  objc_destroyWeak(&v32);
  objc_destroyWeak(&v34);
  objc_destroyWeak(&v36);
  objc_destroyWeak(&v38);

}

void sub_100B55590(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  id *v5;

  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100B555EC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_promptForRestart");

}

void sub_100B55618(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_promptForRestart");

}

void sub_100B55644(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_promptForRestart");

}

void sub_100B55670(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_promptForRestart");

}

void sub_100B5569C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_promptForRestart");

}

BOOL sub_100B556C8(id a1)
{
  return +[DebugViewFrameHighlighter frameHighlightingEnabled](DebugViewFrameHighlighter, "frameHighlightingEnabled");
}

void sub_100B556D4(id a1, BOOL a2)
{
  +[DebugViewFrameHighlighter setFrameHighlightingEnabled:](DebugViewFrameHighlighter, "setFrameHighlightingEnabled:", a2);
}

BOOL sub_100B556E4(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[ThermalStateFloatingDebugViewController sharedInstance](ThermalStateFloatingDebugViewController, "sharedInstance"));
  v2 = objc_msgSend(v1, "isAttached");

  return v2;
}

void sub_100B55720(id a1, BOOL a2)
{
  _BOOL4 v2;
  void *v3;
  id v4;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[ThermalStateFloatingDebugViewController sharedInstance](ThermalStateFloatingDebugViewController, "sharedInstance"));
  v4 = v3;
  if (v2)
    objc_msgSend(v3, "attach");
  else
    objc_msgSend(v3, "detach");

}

void sub_100B557D4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  MKMapSize size;
  id v9;
  _QWORD v10[6];
  _QWORD v11[4];
  MKMapPoint origin;
  MKMapSize v13;
  _QWORD v14[4];
  Block_layout *v15;
  _QWORD v16[5];
  _QWORD v17[5];

  v3 = a2;
  v4 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Chrome"), &stru_1011E3FF8);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_100B55A28;
  v17[3] = &unk_1011B4BC0;
  v17[4] = *(_QWORD *)(a1 + 32);
  v5 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("iOS/Mac"), v17);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100B55F58;
  v16[3] = &unk_1011B4BC0;
  v16[4] = *(_QWORD *)(a1 + 32);
  v6 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Mac"), v16);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100B5717C;
  v14[3] = &unk_1011C26E8;
  v15 = &stru_1011E4040;
  v7 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Throttling navigation display rate"), v14);
  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x4010000000;
  v11[3] = "";
  size = MKMapRectNull.size;
  origin = MKMapRectNull.origin;
  v13 = size;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100B57270;
  v10[3] = &unk_1011E4508;
  v10[4] = *(_QWORD *)(a1 + 32);
  v10[5] = v11;
  v9 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Set Visible Map Rect"), v10);
  _Block_object_dispose(v11, 8);

}

void sub_100B5598C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100B559A4(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugTableSection *v5;

  v5 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v5, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Show Chrome layout guides"), CFSTR("__internal_VisualizeChromeLayoutGuidesDebug"));
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v5, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Force Chrome map inactive"), CFSTR("__internal_MapsDebugForceChromeMapViewInactive"));
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v5, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enable status bar indicator"), MapsConfig_EnableStatusBarIndicator, off_1014B4FE8);

}

void sub_100B55A28(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  _QWORD v10[5];
  _QWORD v11[5];
  _QWORD v12[4];
  uint64_t v13;
  _QWORD v14[5];

  v3 = a2;
  v4 = objc_msgSend(v3, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Force stale map effect"), CFSTR("__internal_MapsDebugForceChromeStaleMapEffect"));
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100B55BB0;
  v14[3] = &unk_1011AC860;
  v14[4] = *(_QWORD *)(a1 + 32);
  v5 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Push card test context"), v14);
  if (!objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "length"))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(void **)(v6 + 104);
    *(_QWORD *)(v6 + 104) = CFSTR("Taco Bell");

  }
  v12[1] = 3221225472;
  v12[2] = sub_100B55CB0;
  v12[3] = &unk_1011B4F08;
  v13 = *(_QWORD *)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100B55CC4;
  v11[3] = &unk_1011AE420;
  v11[4] = v13;
  v12[0] = _NSConcreteStackBlock;
  v8 = objc_msgSend(v3, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Place Card Context Query"), CFSTR("Enter a place name"), 0, v12, v11);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100B55CD8;
  v10[3] = &unk_1011AC860;
  v10[4] = *(_QWORD *)(a1 + 32);
  v9 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Push test place card context"), v10);

}

void sub_100B55BB0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentingViewController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_maps_mapsSceneDelegate"));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "chromeViewController"));
  v5 = *(void **)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100B55C64;
  v7[3] = &unk_1011AC860;
  v8 = v4;
  v6 = v4;
  objc_msgSend(v5, "dismissViewControllerAnimated:completion:", 1, v7);

}

void sub_100B55C64(uint64_t a1)
{
  IOSCardTestContext *v2;

  v2 = objc_alloc_init(IOSCardTestContext);
  objc_msgSend(*(id *)(a1 + 32), "pushContext:animated:completion:", v2, 1, 0);

}

id sub_100B55CB0(uint64_t a1)
{
  return *(id *)(*(_QWORD *)(a1 + 32) + 104);
}

void sub_100B55CC4(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 104), a2);
}

void sub_100B55CD8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  _QWORD v8[5];
  id v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentingViewController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_maps_mapsSceneDelegate"));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "chromeViewController"));
  v5 = objc_msgSend(objc_alloc((Class)MKLocalSearchRequest), "initWithNaturalLanguageQuery:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 104));
  v6 = objc_msgSend(objc_alloc((Class)MKLocalSearch), "initWithRequest:", v5);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100B55DD8;
  v8[3] = &unk_1011E4020;
  v8[4] = *(_QWORD *)(a1 + 32);
  v9 = v4;
  v7 = v4;
  objc_msgSend(v6, "startWithCompletionHandler:", v8);

}

void sub_100B55DD8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  PlaceCardItem *v6;
  void *v7;
  void *v8;
  PlaceCardItem *v9;
  void *v10;
  _TtC4Maps29PlaceCardContextConfiguration *v11;
  _QWORD v12[4];
  _TtC4Maps29PlaceCardContextConfiguration *v13;
  id v14;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "mapItems"));
  v5 = objc_msgSend(v4, "count");

  if (v5)
  {
    v6 = [PlaceCardItem alloc];
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "mapItems"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "firstObject"));
    v9 = -[PlaceCardItem initWithMapItem:](v6, "initWithMapItem:", v8);

    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100B55F04;
    v12[3] = &unk_1011AC8B0;
    v13 = -[PlaceCardContextConfiguration initWithPlaceCardItem:shouldInsertInHistory:excludedContent:]([_TtC4Maps29PlaceCardContextConfiguration alloc], "initWithPlaceCardItem:shouldInsertInHistory:excludedContent:", v9, 0, 0);
    v10 = *(void **)(a1 + 32);
    v14 = *(id *)(a1 + 40);
    v11 = v13;
    objc_msgSend(v10, "dismissViewControllerAnimated:completion:", 1, v12);

  }
}

void sub_100B55F04(uint64_t a1)
{
  _TtC4Maps16PlaceCardContext *v2;

  v2 = -[PlaceCardContext initWithConfiguration:]([_TtC4Maps16PlaceCardContext alloc], "initWithConfiguration:", *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 40), "pushContext:animated:completion:", v2, 1, 0);

}

void sub_100B55F58(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  _QWORD v6[5];

  v3 = a2;
  v4 = objc_msgSend(v3, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enable Chrome-owned sidebar"), MapsConfig_EnableMacChromeOwnedSidebar, off_1014B4B08);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100B55FF8;
  v6[3] = &unk_1011AC860;
  v6[4] = *(_QWORD *)(a1 + 32);
  v5 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Push sidebar test context"), v6);

}

void sub_100B55FF8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentingViewController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_maps_mapsSceneDelegate"));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "macChromeViewController"));
  v5 = *(void **)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100B560AC;
  v7[3] = &unk_1011AC860;
  v8 = v4;
  v6 = v4;
  objc_msgSend(v5, "dismissViewControllerAnimated:completion:", 1, v7);

}

void sub_100B560AC(uint64_t a1)
{
  MacSidebarTestContext *v2;

  v2 = objc_alloc_init(MacSidebarTestContext);
  objc_msgSend(*(id *)(a1 + 32), "pushContext:animated:completion:", v2, 1, 0);

}

void sub_100B560F8(id a1, MapsDebugValuesViewController *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  MapsDebugValuesViewController *v10;

  v10 = a2;
  v2 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v10, "addSectionWithTitle:content:", CFSTR("Throttle type"), &stru_1011E4060);
  v3 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v10, "addSectionWithTitle:content:", CFSTR("Global settings"), &stru_1011E40A0);
  v4 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v10, "addSectionWithTitle:content:", CFSTR("Scaling"), &stru_1011E41C0);
  v5 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v10, "addSectionWithTitle:content:", CFSTR("Zoom level"), &stru_1011E4200);
  v6 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v10, "addSectionWithTitle:content:", CFSTR("Map span (subtype)"), &stru_1011E42A0);
  v7 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v10, "addSectionWithTitle:content:", CFSTR("Map span (settings)"), &stru_1011E42E0);
  v8 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v10, "addSectionWithTitle:content:", CFSTR("Throttle when stationary"), &stru_1011E4380);
  v9 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v10, "addSectionWithTitle:content:", 0, &stru_1011E44A0);

}

void sub_100B56214(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addCheckmarkRowsGroupWithContent:defaultsKey:checkedRowValueIfUnset:changeHandler:](a2, "addCheckmarkRowsGroupWithContent:defaultsKey:checkedRowValueIfUnset:changeHandler:", &stru_1011E4080, CFSTR("ChromeNavigationDisplayRateThrottleType"), 0, 0);
}

void sub_100B5624C(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  __CFString *v2;
  void *v3;
  id v4;
  __CFString *v5;
  void *v6;
  id v7;
  __CFString *v8;
  void *v9;
  id v10;
  __CFString *v11;
  void *v12;
  id v13;
  MapsDebugCheckmarkRowsGroup *v14;

  v14 = a2;
  v2 = sub_1003692E8(0);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v14, "addRowWithTitle:value:", v3, &off_1012708B8);

  v5 = sub_1003692E8(1uLL);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v14, "addRowWithTitle:value:", v6, &off_1012708D0);

  v8 = sub_1003692E8(2uLL);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v14, "addRowWithTitle:value:", v9, &off_1012708E8);

  v11 = sub_1003692E8(3uLL);
  v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  v13 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v14, "addRowWithTitle:value:", v12, &off_101270900);

}

void sub_100B56338(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  MapsDebugTableSection *v8;

  v8 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v8, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Ignore connection type"), CFSTR("ChromeNavigationDisplayRateIgnoreConnectionType"));
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v8, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Ignore camera style"), CFSTR("ChromeNavigationDisplayRateIgnoreCameraStyle"));
  v4 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v8, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Constant rate"), CFSTR("(20 fps)"), 1, &stru_1011E40C0, &stru_1011E40E0);
  v5 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v8, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Minimum rate"), CFSTR("(2 fps)"), 1, &stru_1011E4100, &stru_1011E4120);
  v6 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v8, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Maximum rate"), CFSTR("(8 fps)"), 1, &stru_1011E4140, &stru_1011E4160);
  v7 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v8, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Temporary display rate duration"), CFSTR("(4 seconds)"), 1, &stru_1011E4180, &stru_1011E41A0);
  -[MapsDebugTableSection setFooter:](v8, "setFooter:", CFSTR("Temporary Display Rate Duration - Number of seconds that temporary display rate changes apply. This is used when the navigation bar shows/hides while navigating in Overview to ensure the map transition does not stutter unnecessarily."));

}

NSString *__cdecl sub_100B56478(id a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "stringForKey:", CFSTR("ChromeNavigationDisplayRateThrottleConstant")));

  return (NSString *)v2;
}

void sub_100B564C0(id a1, NSString *a2)
{
  NSString *v2;
  void *v3;
  NSString *v4;

  v4 = a2;
  v2 = v4;
  if (!-[NSString length](v4, "length"))
  {

    v2 = 0;
  }
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v3, "setObject:forKey:", v2, CFSTR("ChromeNavigationDisplayRateThrottleConstant"));

}

NSString *__cdecl sub_100B56534(id a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "stringForKey:", CFSTR("ChromeNavigationDisplayRateThrottleMinimum")));

  return (NSString *)v2;
}

void sub_100B5657C(id a1, NSString *a2)
{
  NSString *v2;
  void *v3;
  NSString *v4;

  v4 = a2;
  v2 = v4;
  if (!-[NSString length](v4, "length"))
  {

    v2 = 0;
  }
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v3, "setObject:forKey:", v2, CFSTR("ChromeNavigationDisplayRateThrottleMinimum"));

}

NSString *__cdecl sub_100B565F0(id a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "stringForKey:", CFSTR("ChromeNavigationDisplayRateThrottleMaximum")));

  return (NSString *)v2;
}

void sub_100B56638(id a1, NSString *a2)
{
  NSString *v2;
  void *v3;
  NSString *v4;

  v4 = a2;
  v2 = v4;
  if (!-[NSString length](v4, "length"))
  {

    v2 = 0;
  }
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v3, "setObject:forKey:", v2, CFSTR("ChromeNavigationDisplayRateThrottleMaximum"));

}

NSString *__cdecl sub_100B566AC(id a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "stringForKey:", CFSTR("ChromeNavigationDisplayRateTemporaryDuration")));

  return (NSString *)v2;
}

void sub_100B566F4(id a1, NSString *a2)
{
  NSString *v2;
  void *v3;
  NSString *v4;

  v4 = a2;
  v2 = v4;
  if (!-[NSString length](v4, "length"))
  {

    v2 = 0;
  }
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v3, "setObject:forKey:", v2, CFSTR("ChromeNavigationDisplayRateTemporaryDuration"));

}

void sub_100B56768(id a1, MapsDebugTableSection *a2)
{
  id v2;
  MapsDebugTableSection *v3;

  v3 = a2;
  v2 = -[MapsDebugTableSection addCheckmarkRowsGroupWithContent:defaultsKey:checkedRowValueIfUnset:changeHandler:](v3, "addCheckmarkRowsGroupWithContent:defaultsKey:checkedRowValueIfUnset:changeHandler:", &stru_1011E41E0, CFSTR("ChromeNavigationDisplayRateThrottleScaling"), 0, 0);
  -[MapsDebugTableSection setFooter:](v3, "setFooter:", CFSTR("Linear - e.g. using zoom-based throttling: if the current zoom level is halfway between the min and max specified here, then the display rate will be halfway between the min and max specified above. Also applies to map span throttling."));

}

void sub_100B567C0(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  __CFString *v2;
  void *v3;
  id v4;
  MapsDebugCheckmarkRowsGroup *v5;

  v5 = a2;
  v2 = sub_100369364(0);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", v3, &off_1012708B8);

}

void sub_100B5681C(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  MapsDebugTableSection *v4;

  v4 = a2;
  v2 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v4, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Maximum rate at zoom level"), CFSTR("(16)"), 1, &stru_1011E4220, &stru_1011E4240);
  v3 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v4, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Minimum rate at zoom level"), CFSTR("(12)"), 1, &stru_1011E4260, &stru_1011E4280);

}

NSString *__cdecl sub_100B568A4(id a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "stringForKey:", CFSTR("ChromeNavigationDisplayRateThrottleZoomLevelMax")));

  return (NSString *)v2;
}

void sub_100B568EC(id a1, NSString *a2)
{
  NSString *v2;
  void *v3;
  NSString *v4;

  v4 = a2;
  v2 = v4;
  if (!-[NSString length](v4, "length"))
  {

    v2 = 0;
  }
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v3, "setObject:forKey:", v2, CFSTR("ChromeNavigationDisplayRateThrottleZoomLevelMax"));

}

NSString *__cdecl sub_100B56960(id a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "stringForKey:", CFSTR("ChromeNavigationDisplayRateThrottleZoomLevelMin")));

  return (NSString *)v2;
}

void sub_100B569A8(id a1, NSString *a2)
{
  NSString *v2;
  void *v3;
  NSString *v4;

  v4 = a2;
  v2 = v4;
  if (!-[NSString length](v4, "length"))
  {

    v2 = 0;
  }
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v3, "setObject:forKey:", v2, CFSTR("ChromeNavigationDisplayRateThrottleZoomLevelMin"));

}

void sub_100B56A1C(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addCheckmarkRowsGroupWithContent:defaultsKey:checkedRowValueIfUnset:changeHandler:](a2, "addCheckmarkRowsGroupWithContent:defaultsKey:checkedRowValueIfUnset:changeHandler:", &stru_1011E42C0, CFSTR("ChromeNavigationDisplayRateThrottleMapSpanSubtype"), 0, 0);
}

void sub_100B56A54(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  __CFString *v2;
  void *v3;
  id v4;
  __CFString *v5;
  void *v6;
  id v7;
  __CFString *v8;
  void *v9;
  id v10;
  MapsDebugCheckmarkRowsGroup *v11;

  v11 = a2;
  v2 = sub_1003693D8(0);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v11, "addRowWithTitle:value:", v3, &off_1012708B8);

  v5 = sub_1003693D8(1uLL);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v11, "addRowWithTitle:value:", v6, &off_1012708D0);

  v8 = sub_1003693D8(2uLL);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v11, "addRowWithTitle:value:", v9, &off_1012708E8);

}

void sub_100B56B10(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  MapsDebugTableSection *v4;

  v4 = a2;
  v2 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v4, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Maximum rate at distance"), CFSTR("(750 m)"), 1, &stru_1011E4300, &stru_1011E4320);
  v3 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v4, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Minimum rate at distance"), CFSTR("(3,000 m)"), 1, &stru_1011E4340, &stru_1011E4360);

}

NSString *__cdecl sub_100B56B98(id a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "stringForKey:", CFSTR("ChromeNavigationDisplayRateThrottleMapSpanMin")));

  return (NSString *)v2;
}

void sub_100B56BE0(id a1, NSString *a2)
{
  NSString *v2;
  void *v3;
  NSString *v4;

  v4 = a2;
  v2 = v4;
  if (!-[NSString length](v4, "length"))
  {

    v2 = 0;
  }
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v3, "setObject:forKey:", v2, CFSTR("ChromeNavigationDisplayRateThrottleMapSpanMin"));

}

NSString *__cdecl sub_100B56C54(id a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "stringForKey:", CFSTR("ChromeNavigationDisplayRateThrottleMapSpanMax")));

  return (NSString *)v2;
}

void sub_100B56C9C(id a1, NSString *a2)
{
  NSString *v2;
  void *v3;
  NSString *v4;

  v4 = a2;
  v2 = v4;
  if (!-[NSString length](v4, "length"))
  {

    v2 = 0;
  }
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v3, "setObject:forKey:", v2, CFSTR("ChromeNavigationDisplayRateThrottleMapSpanMax"));

}

void sub_100B56D10(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  MapsDebugTableSection *v7;

  v7 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v7, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Enabled"), CFSTR("ChromeNavigationDisplayRateThrottleWhenIdle"));
  v3 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v7, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Display rate"), CFSTR("(same as min)"), 1, &stru_1011E43A0, &stru_1011E43C0);
  v4 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v7, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Check interval"), CFSTR("(16 seconds)"), 1, &stru_1011E43E0, &stru_1011E4400);
  v5 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v7, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Required time stationary"), CFSTR("(20 seconds)"), 1, &stru_1011E4420, &stru_1011E4440);
  v6 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v7, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Movement threshold"), CFSTR("(1 m/s)"), 1, &stru_1011E4460, &stru_1011E4480);
  -[MapsDebugTableSection setFooter:](v7, "setFooter:", CFSTR("If enabled, we will check the user's speed at regular intervals.  If we're confident the user is not moving (or moving very much), we drop the display rate."));

}

NSString *__cdecl sub_100B56E30(id a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "stringForKey:", CFSTR("ChromeNavigationDisplayRateThrottleIdleRate")));

  return (NSString *)v2;
}

void sub_100B56E78(id a1, NSString *a2)
{
  NSString *v2;
  void *v3;
  NSString *v4;

  v4 = a2;
  v2 = v4;
  if (!-[NSString length](v4, "length"))
  {

    v2 = 0;
  }
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v3, "setObject:forKey:", v2, CFSTR("ChromeNavigationDisplayRateThrottleIdleRate"));

}

NSString *__cdecl sub_100B56EEC(id a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "stringForKey:", CFSTR("ChromeNavigationDisplayRateThrottleIdleCheckInterval")));

  return (NSString *)v2;
}

void sub_100B56F34(id a1, NSString *a2)
{
  NSString *v2;
  void *v3;
  NSString *v4;

  v4 = a2;
  v2 = v4;
  if (!-[NSString length](v4, "length"))
  {

    v2 = 0;
  }
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v3, "setObject:forKey:", v2, CFSTR("ChromeNavigationDisplayRateThrottleIdleCheckInterval"));

}

NSString *__cdecl sub_100B56FA8(id a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "stringForKey:", CFSTR("ChromeNavigationDisplayRateThrottleIdleTimeThreshold")));

  return (NSString *)v2;
}

void sub_100B56FF0(id a1, NSString *a2)
{
  NSString *v2;
  void *v3;
  NSString *v4;

  v4 = a2;
  v2 = v4;
  if (!-[NSString length](v4, "length"))
  {

    v2 = 0;
  }
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v3, "setObject:forKey:", v2, CFSTR("ChromeNavigationDisplayRateThrottleIdleTimeThreshold"));

}

NSString *__cdecl sub_100B57064(id a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "stringForKey:", CFSTR("ChromeNavigationDisplayRateThrottleIdleSpeedThreshold")));

  return (NSString *)v2;
}

void sub_100B570AC(id a1, NSString *a2)
{
  NSString *v2;
  void *v3;
  NSString *v4;

  v4 = a2;
  v2 = v4;
  if (!-[NSString length](v4, "length"))
  {

    v2 = 0;
  }
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v3, "setObject:forKey:", v2, CFSTR("ChromeNavigationDisplayRateThrottleIdleSpeedThreshold"));

}

void sub_100B57120(id a1, MapsDebugTableSection *a2)
{
  id v2;
  MapsDebugTableSection *v3;

  v3 = a2;
  v2 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v3, "addButtonRowWithTitle:action:", CFSTR("Reset custom settings"), &stru_1011E44C0);
  -[MapsDebugTableSection setFooter:](v3, "setFooter:", CFSTR("This will happen immediately and take effect for the next navigation session."));

}

void sub_100B57170(id a1)
{
  +[ChromeNavigationDisplayRateThrottle _clearAllSettings](ChromeNavigationDisplayRateThrottle, "_clearAllSettings");
}

void sub_100B5717C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Current setting"), CFSTR("Off"), 0, &stru_1011E44E0, 0);
  v4 = objc_msgSend(v5, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Change settings"), *(_QWORD *)(a1 + 32));
  objc_msgSend(v5, "setFooter:", CFSTR("These settings will only take effect when you start navigation. Hence, you need to restart navigation if you change anything."));

}

NSString *__cdecl sub_100B57204(id a1)
{
  void *v1;
  void *v2;
  __CFString *v3;
  void *v4;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectForKey:", CFSTR("ChromeNavigationDisplayRateThrottleType")));

  if (v2)
  {
    v3 = sub_1003692E8((unint64_t)objc_msgSend(v2, "unsignedIntegerValue"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  }
  else
  {
    v4 = 0;
  }

  return (NSString *)v4;
}

void sub_100B57270(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  _QWORD v16[5];
  id v17;
  uint64_t v18;
  _QWORD v19[5];
  _QWORD v20[4];
  uint64_t v21;
  _QWORD v22[5];
  _QWORD v23[4];
  uint64_t v24;
  _QWORD v25[5];
  _QWORD v26[4];
  uint64_t v27;
  _QWORD v28[5];
  _QWORD v29[4];
  uint64_t v30;

  v3 = a2;
  v29[1] = 3221225472;
  v29[2] = sub_100B574D0;
  v29[3] = &unk_1011E0600;
  v30 = *(_QWORD *)(a1 + 40);
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472;
  v28[2] = sub_100B5753C;
  v28[3] = &unk_1011E0628;
  v28[4] = v30;
  v29[0] = _NSConcreteStackBlock;
  v4 = objc_msgSend(v3, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("origin.x"), 0, 2, v29, v28);
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  v26[2] = sub_100B5756C;
  v26[3] = &unk_1011E0600;
  v27 = *(_QWORD *)(a1 + 40);
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_100B575D8;
  v25[3] = &unk_1011E0628;
  v25[4] = v27;
  v5 = objc_msgSend(v3, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("origin.y"), 0, 2, v26, v25);
  v23[1] = 3221225472;
  v23[2] = sub_100B57608;
  v23[3] = &unk_1011E0600;
  v24 = *(_QWORD *)(a1 + 40);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_100B57678;
  v22[3] = &unk_1011E0628;
  v22[4] = v24;
  v23[0] = _NSConcreteStackBlock;
  v6 = objc_msgSend(v3, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("size.width"), 0, 2, v23, v22);
  v20[1] = 3221225472;
  v20[2] = sub_100B576A8;
  v20[3] = &unk_1011E0600;
  v21 = *(_QWORD *)(a1 + 40);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_100B57718;
  v19[3] = &unk_1011E0628;
  v19[4] = v21;
  v20[0] = _NSConcreteStackBlock;
  v7 = objc_msgSend(v3, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("size.height"), 0, 2, v20, v19);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentingViewController"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "_maps_mapsSceneDelegate"));

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "chromeViewController"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "mapView"));
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100B57748;
  v16[3] = &unk_1011B3B68;
  v13 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  v17 = v11;
  v18 = v12;
  v16[4] = v13;
  v14 = v11;
  v15 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Apply"), v16);

}

id sub_100B574D0(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(double *)(v1 + 32) == MKMapRectNull.origin.x && *(double *)(v1 + 40) == MKMapRectNull.origin.y)
  {
    v4 = 0;
  }
  else
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stringValue"));

  }
  return v4;
}

id sub_100B5753C(uint64_t a1, void *a2)
{
  id result;
  uint64_t v4;

  result = objc_msgSend(a2, "doubleValue");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 32) = v4;
  return result;
}

id sub_100B5756C(uint64_t a1)
{
  uint64_t v1;
  double v2;
  void *v4;
  void *v5;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(double *)(v1 + 40);
  if (*(double *)(v1 + 32) == MKMapRectNull.origin.x && v2 == MKMapRectNull.origin.y)
  {
    v5 = 0;
  }
  else
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v2));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "stringValue"));

  }
  return v5;
}

id sub_100B575D8(uint64_t a1, void *a2)
{
  id result;
  uint64_t v4;

  result = objc_msgSend(a2, "doubleValue");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = v4;
  return result;
}

id sub_100B57608(uint64_t a1)
{
  double *v1;
  double v2;
  void *v4;
  void *v5;

  v1 = *(double **)(*(_QWORD *)(a1 + 32) + 8);
  v2 = v1[5];
  if (v1[4] == MKMapRectNull.origin.x && v2 == MKMapRectNull.origin.y)
  {
    v5 = 0;
  }
  else
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v1[6], v2));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "stringValue"));

  }
  return v5;
}

id sub_100B57678(uint64_t a1, void *a2)
{
  id result;
  uint64_t v4;

  result = objc_msgSend(a2, "doubleValue");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48) = v4;
  return result;
}

id sub_100B576A8(uint64_t a1)
{
  double *v1;
  double v2;
  void *v4;
  void *v5;

  v1 = *(double **)(*(_QWORD *)(a1 + 32) + 8);
  v2 = v1[5];
  if (v1[4] == MKMapRectNull.origin.x && v2 == MKMapRectNull.origin.y)
  {
    v5 = 0;
  }
  else
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v1[7], v2));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "stringValue"));

  }
  return v5;
}

id sub_100B57718(uint64_t a1, void *a2)
{
  id result;
  uint64_t v4;

  result = objc_msgSend(a2, "doubleValue");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 56) = v4;
  return result;
}

void sub_100B57748(uint64_t a1)
{
  uint64_t v1;
  void *v4;
  id v5;
  uint64_t v6;
  _QWORD v7[4];
  id v8;
  uint64_t v9;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  if (*(double *)(v1 + 32) != MKMapRectNull.origin.x || *(double *)(v1 + 40) != MKMapRectNull.origin.y)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100B577E4;
    v7[3] = &unk_1011AD318;
    v4 = *(void **)(a1 + 32);
    v5 = *(id *)(a1 + 40);
    v6 = *(_QWORD *)(a1 + 48);
    v8 = v5;
    v9 = v6;
    objc_msgSend(v4, "dismissViewControllerAnimated:completion:", 1, v7);

  }
}

id sub_100B577E4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setVisibleMapRect:animated:", 1, *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 32), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 56));
}

void sub_100B578C8(id a1, UIAlertAction *a2)
{
  UIAlertAction *v2;

  v2 = a2;
  exit(0);
}

void sub_100B57984(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100B579A0(uint64_t a1, void *a2)
{
  id v3;
  MapsDebugTableSection *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  _QWORD v22[4];
  id v23;

  v3 = a2;
  v4 = objc_alloc_init(MapsDebugTableSection);
  v5 = -[MapsDebugTableSection addNavigationRowWithTitle:viewControllerContent:](v4, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Headunit Info"), &stru_1011E4548);
  objc_msgSend(v3, "addSection:", v4);
  v6 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Simulate Connection Scenario"), &stru_1011E4658);
  v7 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("UI Experiments"), &stru_1011E46B8);
  v8 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Speed Sign"), &stru_1011E4718);
  v9 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Debugging"), &stru_1011E4738);
  v10 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Map Deactivation"), &stru_1011E4798);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_100B58DB8;
  v22[3] = &unk_1011AEAC8;
  objc_copyWeak(&v23, (id *)(a1 + 32));
  v11 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Vehicle"), v22);
  v12 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Console"), &stru_1011E47F8);
  v13 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Timeout intervals"), &stru_1011E4818);
  v14 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Search Along The Route"), &stru_1011E48F8);
  v15 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Route Genius/Maps Suggestions"), &stru_1011E4918);
  v16 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Search"), &stru_1011E4958);
  v17 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Pannning"), &stru_1011E4978);
  v18 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("One Handed Zoom"), &stru_1011E4A38);
  v19 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Interruption Testing"), &stru_1011E4B18);
  v20 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("CarCard Testing"), &stru_1011E4BE8);
  v21 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Dual-screen experience"), &stru_1011E4EA0);
  objc_destroyWeak(&v23);

}

void sub_100B57C58(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100B57C70(id a1, MapsDebugValuesViewController *a2)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  void *i;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  unsigned int v23;
  __CFString *v24;
  __CFString *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id obj;
  uint64_t v31;
  void *v32;
  void *v33;
  MapsDebugValuesViewController *v34;
  _QWORD v35[4];
  id v36;
  id v37;
  id v38;
  _QWORD v39[5];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[128];

  v34 = a2;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CarDisplayController sharedInstance](CarDisplayController, "sharedInstance"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "connectedCarScreenInfos"));

  v33 = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "keyEnumerator"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "allObjects"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "sortedArrayUsingComparator:", &stru_1011E4588));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "connectedScenes"));
  v9 = sub_10039E080(v8, &stru_1011E45A8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v11 = sub_10039DE48(v10, &stru_1011E45E8);
  v32 = (void *)objc_claimAutoreleasedReturnValue(v11);

  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  obj = v6;
  v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v40, v44, 16);
  if (v12)
  {
    v13 = v12;
    v31 = *(_QWORD *)v41;
    do
    {
      for (i = 0; i != v13; i = (char *)i + 1)
      {
        if (*(_QWORD *)v41 != v31)
          objc_enumerationMutation(obj);
        v15 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * (_QWORD)i);
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKey:", v15));
        v39[0] = _NSConcreteStackBlock;
        v39[1] = 3221225472;
        v39[2] = sub_100B580C4;
        v39[3] = &unk_1011E4610;
        v39[4] = v15;
        v17 = sub_10039E1FC(v32, v39);
        v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "screen"));
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "identifier"));
        v21 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen _carScreen](UIScreen, "_carScreen"));
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "_displayID"));
        v23 = objc_msgSend(v20, "isEqualToString:", v22);
        v24 = CFSTR("Instrument cluster info");
        if (v23)
          v24 = CFSTR("Center console info");
        v25 = v24;

        v35[0] = _NSConcreteStackBlock;
        v35[1] = 3221225472;
        v35[2] = sub_100B58134;
        v35[3] = &unk_1011E4638;
        v36 = v16;
        v37 = v19;
        v38 = v18;
        v26 = v18;
        v27 = v19;
        v28 = v16;
        v29 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v34, "addSectionWithTitle:content:", v25, v35);

      }
      v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v40, v44, 16);
    }
    while (v13);
  }

}

int64_t sub_100B57F94(id a1, CARScreenInfo *a2, CARScreenInfo *a3)
{
  CARScreenInfo *v4;
  void *v5;
  void *v6;
  void *v7;
  unsigned __int8 v8;
  int64_t v9;
  void *v10;
  void *v11;
  void *v12;
  unsigned int v13;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[CARScreenInfo identifier](a2, "identifier"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen _carScreen](UIScreen, "_carScreen"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_displayID"));
  v8 = objc_msgSend(v5, "isEqualToString:", v7);

  if ((v8 & 1) != 0)
  {
    v9 = -1;
  }
  else
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(-[CARScreenInfo identifier](v4, "identifier"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen _carScreen](UIScreen, "_carScreen"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "_displayID"));
    v13 = objc_msgSend(v10, "isEqualToString:", v12);

    v9 = v13;
  }

  return v9;
}

BOOL sub_100B58074(id a1, UIScene *a2, unint64_t a3, BOOL *a4)
{
  UIScene *v4;
  uint64_t v5;
  char isKindOfClass;

  v4 = a2;
  v5 = objc_opt_class(UIWindowScene);
  isKindOfClass = objc_opt_isKindOfClass(v4, v5);

  return isKindOfClass & 1;
}

id sub_100B580BC(id a1, UIWindowScene *a2, unint64_t a3)
{
  return -[UIWindowScene windows](a2, "windows", a3);
}

id sub_100B580C4(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "screen"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "_displayID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
  v6 = objc_msgSend(v4, "isEqualToString:", v5);

  return v6;
}

void sub_100B58134(id *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  __CFString *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  void *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  void *v29;
  double v30;
  double v31;
  double v32;
  void *v33;
  id v34;
  uint64_t v35;
  void *v36;
  id v37;
  uint64_t v38;
  void *v39;
  id v40;
  uint64_t v41;
  void *v42;
  id v43;
  uint64_t v44;
  void *v45;
  id v46;
  uint64_t v47;
  void *v48;
  id v49;
  const __CFString *v50;
  id v51;
  id v52;
  const __CFString *v53;
  const __CFString *v54;
  id v55;
  NSMutableArray *v56;
  unint64_t v57;
  id v58;
  __CFString *v59;
  void *v60;
  id v61;
  NSMutableArray *v62;
  unint64_t v63;
  id v64;
  __CFString *v65;
  void *v66;
  id v67;
  const __CFString *v68;
  id v69;
  id v70;
  __CFString *v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "carName"));
  v5 = objc_msgSend(v3, "addReadOnlyRowWithTitle:value:", CFSTR("CarName"), v4);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "manufacturer"));
  v7 = objc_msgSend(v3, "addReadOnlyRowWithTitle:value:", CFSTR("Manufacturer"), v6);

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "model"));
  v9 = objc_msgSend(v3, "addReadOnlyRowWithTitle:value:", CFSTR("Model"), v8);

  v10 = objc_msgSend(a1[4], "deviceConnection");
  if (v10 >= 3)
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), v10));
  else
    v11 = off_1011E6D40[(int)v10];
  v12 = objc_msgSend(v3, "addReadOnlyRowWithTitle:value:", CFSTR("Connection"), v11);

  objc_msgSend(a1[5], "_car_physicalSize");
  v14 = v13;
  objc_msgSend(a1[5], "_car_physicalSize");
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("w:%.2f h:%.2f"), v14, v15));
  v17 = objc_msgSend(v3, "addReadOnlyRowWithTitle:value:", CFSTR("Dimensions (mm)"), v16);

  v18 = a1[4];
  if (v18)
  {
    objc_msgSend(v18, "screenResolution");
    v19 = a1[4];
    v20 = v77;
    if (v19)
    {
      objc_msgSend(v19, "screenResolution");
      v21 = v73;
      goto LABEL_9;
    }
  }
  else
  {
    v76 = 0;
    v77 = 0;
    v20 = 0;
    v78 = 0;
  }
  v73 = 0;
  v74 = 0;
  v21 = 0;
  v75 = 0;
LABEL_9:
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("w:%.2f h:%.2f"), v20, v21, v73, v74, v75, v76, v77, v78));
  v23 = objc_msgSend(v3, "addReadOnlyRowWithTitle:value:", CFSTR("Resolution (pixels)"), v22);

  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "safeAreaLayoutGuide"));
  objc_msgSend(v24, "layoutFrame");
  v26 = v25;
  objc_msgSend(a1[5], "nativeScale");
  v28 = v26 * v27;
  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "safeAreaLayoutGuide"));
  objc_msgSend(v29, "layoutFrame");
  v31 = v30;
  objc_msgSend(a1[5], "nativeScale");
  v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("w:%.2f h:%.2f"), *(_QWORD *)&v28, v31 * v32));
  v34 = objc_msgSend(v3, "addReadOnlyRowWithTitle:value:", CFSTR("Safe area (pixels)"), v33);

  objc_msgSend(a1[5], "_car_physicalPixelSize");
  v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%.3f"), v35));
  v37 = objc_msgSend(v3, "addReadOnlyRowWithTitle:value:", CFSTR("Physical pixel size (mm)"), v36);

  objc_msgSend(a1[5], "_car_physicalPointSize");
  v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%.3f"), v38));
  v40 = objc_msgSend(v3, "addReadOnlyRowWithTitle:value:", CFSTR("Physical point size (mm)"), v39);

  objc_msgSend(a1[5], "nativeScale");
  v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%.3f"), v41));
  v43 = objc_msgSend(v3, "addReadOnlyRowWithTitle:value:", CFSTR("Content scale"), v42);

  objc_msgSend(a1[5], "_car_dynamicPixelScaleValue");
  v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%.3f"), v44));
  v46 = objc_msgSend(v3, "addReadOnlyRowWithTitle:value:", CFSTR("Dynamic pixel scale factor"), v45);

  objc_msgSend(a1[5], "_car_dynamicPointScaleValue");
  v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%.3f"), v47));
  v49 = objc_msgSend(v3, "addReadOnlyRowWithTitle:value:", CFSTR("Dynamic point scale factor"), v48);

  if (objc_msgSend(a1[6], "_car_hybridInstrumentClusterAlignmentStyle"))
    v50 = CFSTR("Wide");
  else
    v50 = CFSTR("Narrow");
  v51 = objc_msgSend(v3, "addReadOnlyRowWithTitle:value:", CFSTR("Alignment style"), v50);
  v52 = objc_msgSend(a1[6], "_car_hybridInstrumentClusterAlignment");
  v53 = CFSTR("Center");
  if (v52 == (id)1)
    v53 = CFSTR("Left");
  if (v52 == (id)2)
    v54 = CFSTR("Right");
  else
    v54 = v53;
  v55 = objc_msgSend(v3, "addReadOnlyRowWithTitle:value:", CFSTR("Alignment"), v54);
  v56 = objc_opt_new(NSMutableArray);
  if (objc_msgSend(a1[4], "engineTypesCount"))
  {
    v57 = 0;
    do
    {
      v58 = objc_msgSend(a1[4], "engineTypeAtIndex:", v57);
      if (v58 >= 5)
        v59 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), v58));
      else
        v59 = off_1011E6D58[(int)v58];
      -[NSMutableArray addObject:](v56, "addObject:", v59);

      ++v57;
    }
    while (v57 < (unint64_t)objc_msgSend(a1[4], "engineTypesCount"));
  }
  v60 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray componentsJoinedByString:](v56, "componentsJoinedByString:", CFSTR(", ")));
  v61 = objc_msgSend(v3, "addReadOnlyRowWithTitle:value:", CFSTR("EngineType(s)"), v60);

  v62 = objc_opt_new(NSMutableArray);
  if (objc_msgSend(a1[4], "inputMethodsCount"))
  {
    v63 = 0;
    do
    {
      v64 = objc_msgSend(a1[4], "inputMethodAtIndex:", v63);
      if (v64 >= 5)
        v65 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), v64));
      else
        v65 = off_1011E6DA0[(int)v64];
      -[NSMutableArray addObject:](v62, "addObject:", v65);

      ++v63;
    }
    while (v63 < (unint64_t)objc_msgSend(a1[4], "inputMethodsCount"));
  }
  v66 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray componentsJoinedByString:](v62, "componentsJoinedByString:", CFSTR(", ")));
  v67 = objc_msgSend(v3, "addReadOnlyRowWithTitle:value:", CFSTR("InputMethod(s)"), v66);

  if (objc_msgSend(a1[4], "destinationSharingEnabled"))
    v68 = CFSTR("YES");
  else
    v68 = CFSTR("NO");
  v69 = objc_msgSend(v3, "addReadOnlyRowWithTitle:value:", CFSTR("DestinationSharing"), v68);
  v70 = objc_msgSend(a1[4], "navAidedDrivingStatus");
  if (v70 >= 4)
    v71 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), v70));
  else
    v71 = off_1011E6D80[(int)v70];
  v72 = objc_msgSend(v3, "addReadOnlyRowWithTitle:value:", CFSTR("NavAidedDrivingSatus"), v71);

}

void sub_100B587E8(id a1, MapsDebugTableSection *a2)
{
  id v2;
  MapsDebugTableSection *v3;

  v3 = a2;
  v2 = -[MapsDebugTableSection addCheckmarkRowsGroupWithContent:defaultsKey:checkedRowValueIfUnset:changeHandler:](v3, "addCheckmarkRowsGroupWithContent:defaultsKey:checkedRowValueIfUnset:changeHandler:", &stru_1011E4678, CFSTR("StarkDisplayEnablingState"), 0, &stru_1011E4698);
  -[MapsDebugTableSection setFooter:](v3, "setFooter:", CFSTR("These settings take effect immediately.\n- No Simulation: default device behaviour (resolves to Allow/Disallow depending on device and region).\n- Enabled/Allowed: force CarPlay allowed on all devices.\n- No Screen: simulate no screen attached.\n- No Screen Ownership: allow a screen, but simulate no ownership (e.g. reverse camera, radio, etc).\n- Disabled/Disallowed: disallow CarPlay entirely on all devices."));

}

void sub_100B58844(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  MapsDebugCheckmarkRowsGroup *v7;

  v7 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v7, "addRowWithTitle:value:", CFSTR("No Simulation"), 0);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v7, "addRowWithTitle:value:", CFSTR("Enabled/Allowed"), &off_101270870);
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v7, "addRowWithTitle:value:", CFSTR("No Screen"), &off_101270888);
  v5 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v7, "addRowWithTitle:value:", CFSTR("No Screen Ownership"), &off_101270918);
  v6 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v7, "addRowWithTitle:value:", CFSTR("Disabled/Disallowed"), &off_1012708A0);

}

void sub_100B58900(id a1, id a2)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "postNotificationName:object:", CFSTR("CarDisplayDidUpdateEnablingStateNotification"), 0);

}

void sub_100B58944(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  MapsDebugTableSection *v7;

  v7 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v7, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Map appearance should follow system settings *"), MapsConfig_CarPlayMapAppearanceShouldFollowUserInterfaceStyle, off_1014B4768);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v7, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Should accessories modify map insets"), MapsConfig_ShouldCarPlayAccessoriesModifyMapInsets, off_1014B4778);
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v7, "addSwitchRowWithTitle:defaultsKey:", CFSTR("MSg decorated titles"), CFSTR("__internal__CarMapsSuggestionsEntryDecoratedTitle"));
  v5 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v7, "addSwitchRowWithTitle:get:set:", CFSTR("Disable blur"), &stru_1011E46D8, &stru_1011E46F8);
  v6 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v7, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Drive Camera"), MapsConfig_EnableCarPlayDriveCamera, off_1014B4CB8);

}

BOOL sub_100B58A18(id a1)
{
  return +[CarVisualEffectView isDisablingBlur](CarVisualEffectView, "isDisablingBlur");
}

void sub_100B58A24(id a1, BOOL a2)
{
  +[CarVisualEffectView setDisableBlur:](CarVisualEffectView, "setDisableBlur:", a2);
}

void sub_100B58A34(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  MapsDebugTableSection *v4;

  v4 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v4, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enable speed sign road matcher"), MapsConfig_EnableSpeedSignRoadMatcher, off_1014B4C58);
  v3 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v4, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Search radius"), CFSTR("(metres)"), 2, MapsConfig_SpeedSignRoadMatcherRadius, off_1014B4C68);

}

void sub_100B58AA8(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  MapsDebugTableSection *v14;

  v14 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v14, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Visualize Launch Performance *"), CFSTR("StarkLaunchPerformanceDebug"));
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v14, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Visualize Focus Guides *"), CFSTR("__internal_CarVisualizeFocusGuidesDebug"));
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v14, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Visualize Map Controls Containers *"), CFSTR("__internal_CarVisualizeMapControlContainersDebug"));
  v5 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:defaultsKey:](v14, "addTextFieldRowWithTitle:placeholderText:inputType:defaultsKey:", CFSTR("Launch Performance Seconds Delay *"), CFSTR("10"), 1, CFSTR("StarkLaunchPerformanceDelayDebug"));
  v6 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v14, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Search Cell Items"), CFSTR("CarSearchCellItemDebug"));
  v7 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v14, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Route Genius Location Ranking"), CFSTR("CarRouteGeniusManagerLocationRankingDebug"));
  v8 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v14, "addSwitchRowWithTitle:defaultsKey:", CFSTR("EV Search Testing"), CFSTR("CarEVSearchTestingDebug"));
  v9 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v14, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Panning touch targets"), CFSTR("CarPanningTouchTargetDebug"));
  v10 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v14, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Force warning for low range"), CFSTR("ExternalAccessoryForceLowRangeWarningForLowRange"));
  v11 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v14, "addSwitchRowWithTitle:get:set:", CFSTR("Human Presence **"), &stru_1011E4758, &stru_1011E4778);
  v12 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v14, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Visualize card containers"), CFSTR("__internal_CarVisualizeCardContainersDebug"));
  v13 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v14, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Test CarCards *"), CFSTR("__internal_CarCardTestDebug"));
  -[MapsDebugTableSection setFooter:](v14, "setFooter:", CFSTR("* restart maps for settings to be made active            \n** first on/off toggle after launch does nothing.  2nd and there after on/off toggle will work"));

}

BOOL sub_100B58C6C(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen _carScreen](UIScreen, "_carScreen"));
  v2 = objc_msgSend(v1, "_isCarPlayHumanPresenceInRange");

  return v2;
}

void sub_100B58CA8(id a1, BOOL a2)
{
  _QWORD block[4];
  BOOL v3;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100B58D00;
  block[3] = &unk_1011B26C0;
  v3 = a2;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
}

void sub_100B58D00(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[UIScreen _carScreen](UIScreen, "_carScreen"));
  objc_msgSend(v2, "_setCarPlayHumanPresenceInRange:", *(unsigned __int8 *)(a1 + 32));

}

void sub_100B58D44(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  MapsDebugTableSection *v4;

  v4 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v4, "addSwitchRowWithTitle:defaultsKey:", CFSTR("List deactivation reasons over map"), CFSTR("CarInternalShowDeactivationReasons"));
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v4, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Avoid all map deactivation"), MapsConfig_CarAvoidAllMapDeactivation, off_1014B5028);
  -[MapsDebugTableSection setFooter:](v4, "setFooter:", CFSTR("The map is automatically deactivated in certain circumstances where it isn't visible for performance reasons."));

}

void sub_100B58DB8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;

  v3 = a2;
  v4 = objc_msgSend(v3, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Use CarPlay.fw SPIs for metadata sharing *"), MapsConfig_CarPlayShouldUseCPMetadataSPIs, off_1014B4C48);
  v5 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Enable Low Fuel*"), &stru_1011E47B8, &stru_1011E47D8);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100B58F48;
  v10[3] = &unk_1011AD260;
  objc_copyWeak(&v11, (id *)(a1 + 32));
  v6 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Start updating vehicle sensor data"), v10);
  v7 = objc_msgSend(v3, "addSwitchRowWithTitle:defaultsKey:", CFSTR("External Accessory Logging"), CFSTR("MapsEALoggingKey"));
  v8 = objc_msgSend(v3, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Simulate Destination Handoff Available"), CFSTR("StarkDestinationSharingEnableKey"));
  v9 = objc_msgSend(v3, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Debug Destination Handoff Output"), CFSTR("StarkDestinationSharingTestKey"));
  objc_msgSend(v3, "setFooter:", CFSTR("Simulate Destination Handoff Available - Shows the handoff button even in cars that don't support it.\nDebug Destination Handoff Output - Instead of trying to send the destination to the car, it's fed to an activity controller instead for email/AirDrop, etc. Canceling the activity controller will trigger a handoff failure response.\n*Restart maps after changing state"));
  objc_destroyWeak(&v11);

}

void sub_100B58F0C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100B58F24(id a1)
{
  return GEOConfigGetBOOL(GEOConfigMapsSuggestionsCarPlaySourceEnabled[0], GEOConfigMapsSuggestionsCarPlaySourceEnabled[1]);
}

void sub_100B58F34(id a1, BOOL a2)
{
  GEOConfigSetBOOL(GEOConfigMapsSuggestionsCarPlaySourceEnabled[0], GEOConfigMapsSuggestionsCarPlaySourceEnabled[1], a2);
}

void sub_100B58F48(id *a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;

  v7 = (id)objc_claimAutoreleasedReturnValue(+[MKLocationManager sharedLocationManager](MKLocationManager, "sharedLocationManager"));
  objc_msgSend(v7, "startVehicleSpeedUpdate");
  objc_msgSend(v7, "startVehicleHeadingUpdate");
  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v4 = objc_loadWeakRetained(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "allVisibleMapViewsForDebugController:", v4));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));

  objc_msgSend(v6, "_setUseVehicleHeading:", 1);
  objc_msgSend(v6, "setUserTrackingMode:", 2);

}

void sub_100B59014(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](a2, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enabled"), MapKitConfig_VectorKitDebugConsoleEnabled[0], MapKitConfig_VectorKitDebugConsoleEnabled[1]);
}

void sub_100B59048(id a1, MapsDebugTableSection *a2)
{
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  MapsDebugTableSection *v8;

  v2 = MapsConfig_CarDisconnectedAndIdleTimeout;
  v3 = off_1014B5008;
  v8 = a2;
  v4 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v8, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Disconnected and idle"), CFSTR("(seconds)"), 2, v2, v3);
  v5 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v8, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Navigation obscured"), CFSTR("(seconds)"), 1, &stru_1011E4838, &stru_1011E4858);
  v6 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v8, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Destination handoff"), CFSTR("(seconds)"), 1, &stru_1011E4878, &stru_1011E4898);
  v7 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v8, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Content AutoHide"), CFSTR("(seconds)"), 1, &stru_1011E48B8, &stru_1011E48D8);
  -[MapsDebugTableSection setFooter:](v8, "setFooter:", CFSTR("No screen ownership: how long after we lose the main CarPlay application scene before we suppress its chrome.\nDisconnected and idle: How long after we lose the main CarPlay screen before we destroy our chrome.\nNavigation obscured: while navigating, how long a context can sit on top of navigation before being purged (if permitted).\nDestination handoff: how long we wait for a success/failure notification from the car when sharing a destination.\nNavBar AutoHide: how long we wait to hide the nav bar after the last interaction."));

}

NSString *__cdecl sub_100B59154(id a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "stringForKey:", CFSTR("CarNavigationObscuredTimeoutInterval")));

  return (NSString *)v2;
}

void sub_100B5919C(id a1, NSString *a2)
{
  NSString *v2;
  void *v3;
  NSString *v4;

  v4 = a2;
  v2 = v4;
  if (!-[NSString length](v4, "length"))
  {

    v2 = 0;
  }
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v3, "setObject:forKey:", v2, CFSTR("CarNavigationObscuredTimeoutInterval"));

}

NSString *__cdecl sub_100B59210(id a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "stringForKey:", CFSTR("__internal__CarDestinationHandoffTimeoutInterval")));

  return (NSString *)v2;
}

void sub_100B59258(id a1, NSString *a2)
{
  NSString *v2;
  void *v3;
  NSString *v4;

  v4 = a2;
  v2 = v4;
  if (!-[NSString length](v4, "length"))
  {

    v2 = 0;
  }
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v3, "setObject:forKey:", v2, CFSTR("__internal__CarDestinationHandoffTimeoutInterval"));

}

NSString *__cdecl sub_100B592CC(id a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "stringForKey:", CFSTR("CarAutoHideContentTimeInterval")));

  return (NSString *)v2;
}

void sub_100B59314(id a1, NSString *a2)
{
  NSString *v2;
  void *v3;
  NSString *v4;

  v4 = a2;
  v2 = v4;
  if (!-[NSString length](v4, "length"))
  {

    v2 = 0;
  }
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v3, "setObject:forKey:", v2, CFSTR("CarAutoHideContentTimeInterval"));

}

void sub_100B59388(id a1, MapsDebugTableSection *a2)
{
  id v2;
  MapsDebugTableSection *v3;

  v3 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v3, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Default to iPhone SAR categories"), CFSTR("EnableCarSARCategoryWorkaround"));
  -[MapsDebugTableSection setFooter:](v3, "setFooter:", CFSTR("This setting will take effect the next time you show SAR"));

}

void sub_100B593D8(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addButtonRowWithTitle:action:](a2, "addButtonRowWithTitle:action:", CFSTR("Set Route Genius Active"), &stru_1011E4938);
}

void sub_100B59408(id a1)
{
  void *v1;
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[CarDisplayController sharedInstance](CarDisplayController, "sharedInstance"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "routeGeniusManager"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CarRouteGeniusManager sharedDebugPanelChrome](CarRouteGeniusManager, "sharedDebugPanelChrome"));
  objc_msgSend(v1, "activateIfPossibleForChrome:", v2);

}

void sub_100B59474(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](a2, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Enable Keyboard"), CFSTR("StarkSearchEnableKeyboard"));
}

void sub_100B594A4(id a1, MapsDebugTableSection *a2)
{
  double v2;
  double v3;
  double v4;
  id v5;
  double v6;
  double v7;
  double v8;
  id v9;
  double v10;
  double v11;
  double v12;
  id v13;
  double v14;
  double v15;
  double v16;
  id v17;
  double v18;
  double v19;
  double v20;
  id v21;
  MapsDebugTableSection *v22;

  v22 = a2;
  LODWORD(v2) = 0;
  LODWORD(v3) = 1.0;
  LODWORD(v4) = 0.25;
  v5 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:defaultsKey:sliderValueIfUnset:changeHandler:](v22, "addSliderRowWithTitle:subtitleStringFormat:min:max:defaultsKey:sliderValueIfUnset:changeHandler:", CFSTR("Hold magnitude"), CFSTR("%.2f"), CFSTR("CarMapNudgerizerMagnitudeHold"), &stru_1011E4998, v2, v3, v4);
  LODWORD(v6) = 1050253722;
  LODWORD(v7) = 0;
  LODWORD(v8) = 1.0;
  v9 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:defaultsKey:sliderValueIfUnset:changeHandler:](v22, "addSliderRowWithTitle:subtitleStringFormat:min:max:defaultsKey:sliderValueIfUnset:changeHandler:", CFSTR("Impulse magnitude"), CFSTR("%.2f"), CFSTR("CarMapNudgerizerMagnitudeImpulse"), &stru_1011E49B8, v7, v8, v6);
  LODWORD(v10) = 1036831949;
  LODWORD(v11) = 0;
  LODWORD(v12) = 1.0;
  v13 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:defaultsKey:sliderValueIfUnset:changeHandler:](v22, "addSliderRowWithTitle:subtitleStringFormat:min:max:defaultsKey:sliderValueIfUnset:changeHandler:", CFSTR("Impulse magnitude acceleration"), CFSTR("%.2f"), CFSTR("CarMapNudgerizerMagnitudeImpulseAcceleration"), &stru_1011E49D8, v11, v12, v10);
  LODWORD(v14) = *(_DWORD *)"333?";
  LODWORD(v15) = 0;
  LODWORD(v16) = 1.0;
  v17 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:defaultsKey:sliderValueIfUnset:changeHandler:](v22, "addSliderRowWithTitle:subtitleStringFormat:min:max:defaultsKey:sliderValueIfUnset:changeHandler:", CFSTR("Impulse max magnitude"), CFSTR("%.2f"), CFSTR("CarMapNudgerizerMagnitudeImpulseMax"), &stru_1011E49F8, v15, v16, v14);
  LODWORD(v18) = 1114636288;
  LODWORD(v19) = 0;
  LODWORD(v20) = 5.0;
  v21 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:defaultsKey:sliderValueIfUnset:changeHandler:](v22, "addSliderRowWithTitle:subtitleStringFormat:min:max:defaultsKey:sliderValueIfUnset:changeHandler:", CFSTR("Acceleration timeout"), CFSTR("%.2f"), CFSTR("CarMapNudgerizerImpulseAccelerationTimeout"), &stru_1011E4A18, v19, v18, v20);

}

void sub_100B595FC(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setFloat:forKey:", CFSTR("CarMapNudgerizerMagnitudeHold"), v3);

}

void sub_100B59648(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setFloat:forKey:", CFSTR("CarMapNudgerizerMagnitudeImpulse"), v3);

}

void sub_100B59694(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setFloat:forKey:", CFSTR("CarMapNudgerizerMagnitudeImpulseAcceleration"), v3);

}

void sub_100B596E0(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setFloat:forKey:", CFSTR("CarMapNudgerizerMagnitudeImpulseMax"), v3);

}

void sub_100B5972C(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setFloat:forKey:", CFSTR("CarMapNudgerizerImpulseAccelerationTimeout"), v3);

}

void sub_100B59778(id a1, MapsDebugTableSection *a2)
{
  id v2;
  double v3;
  double v4;
  double v5;
  id v6;
  double v7;
  double v8;
  double v9;
  id v10;
  double v11;
  double v12;
  double v13;
  id v14;
  double v15;
  double v16;
  double v17;
  id v18;
  double v19;
  double v20;
  double v21;
  id v22;
  MapsDebugTableSection *v23;

  v23 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:switchOnStateIfUnset:changeHandler:](v23, "addSwitchRowWithTitle:defaultsKey:switchOnStateIfUnset:changeHandler:", CFSTR("Enable One handed Zoom Gesture"), CFSTR("__internal__CarPlayOneHandedZoomEnabled"), +[CarChromeViewController allowOneHandedZooming](CarChromeViewController, "allowOneHandedZooming"), &stru_1011E4A58);
  LODWORD(v3) = 0.5;
  LODWORD(v4) = 1.5;
  LODWORD(v5) = 1.0;
  v6 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:defaultsKey:sliderValueIfUnset:changeHandler:](v23, "addSliderRowWithTitle:subtitleStringFormat:min:max:defaultsKey:sliderValueIfUnset:changeHandler:", CFSTR("Dragging Resistance Scale"), CFSTR("%.2f"), CFSTR("__internal__CarPlayOneHandedZoomDraggingResistance"), &stru_1011E4A78, v3, v4, v5);
  LODWORD(v7) = 1.0;
  LODWORD(v8) = 15.0;
  LODWORD(v9) = 1.5;
  v10 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:defaultsKey:sliderValueIfUnset:changeHandler:](v23, "addSliderRowWithTitle:subtitleStringFormat:min:max:defaultsKey:sliderValueIfUnset:changeHandler:", CFSTR("Minimum velocity threshold for deceleration animation"), CFSTR("%.2f"), CFSTR("__internal__CarPlayOneHandedZoomMinimumVelocity"), &stru_1011E4A98, v7, v8, v9);
  LODWORD(v11) = 5.0;
  LODWORD(v12) = 15.0;
  LODWORD(v13) = 10.0;
  v14 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:defaultsKey:sliderValueIfUnset:changeHandler:](v23, "addSliderRowWithTitle:subtitleStringFormat:min:max:defaultsKey:sliderValueIfUnset:changeHandler:", CFSTR("Maximum velocity for zoom in deceleration animation"), CFSTR("%.2f"), CFSTR("__internal__CarPlayOneHandedZoomInMaximumVelocity"), &stru_1011E4AB8, v11, v12, v13);
  LODWORD(v15) = 0.5;
  LODWORD(v16) = 10.0;
  LODWORD(v17) = 1.5;
  v18 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:defaultsKey:sliderValueIfUnset:changeHandler:](v23, "addSliderRowWithTitle:subtitleStringFormat:min:max:defaultsKey:sliderValueIfUnset:changeHandler:", CFSTR("Maximum velocity for zoom out deceleration animation"), CFSTR("%.2f"), CFSTR("__internal__CarPlayOneHandedZoomOutMaximumVelocity"), &stru_1011E4AD8, v15, v16, v17);
  LODWORD(v19) = 1.0;
  LODWORD(v20) = 5.0;
  LODWORD(v21) = 2.5;
  v22 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:defaultsKey:sliderValueIfUnset:changeHandler:](v23, "addSliderRowWithTitle:subtitleStringFormat:min:max:defaultsKey:sliderValueIfUnset:changeHandler:", CFSTR("Zoom Out friction scale"), CFSTR("%.1f"), CFSTR("__internal__CarPlayOneHandedZoomOutFrictionScale"), &stru_1011E4AF8, v19, v20, v21);

}

void sub_100B59900(id a1, BOOL a2)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "postNotificationName:object:", CFSTR("CarPlayOneHandedZoomingSettingDidChangeNotification"), 0);

}

void sub_100B59940(id a1, float a2)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "postNotificationName:object:", CFSTR("CarPlayOneHandedZoomingSettingDidChangeNotification"), 0);

}

void sub_100B59980(id a1, float a2)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "postNotificationName:object:", CFSTR("CarPlayOneHandedZoomingSettingDidChangeNotification"), 0);

}

void sub_100B599C0(id a1, float a2)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "postNotificationName:object:", CFSTR("CarPlayOneHandedZoomingSettingDidChangeNotification"), 0);

}

void sub_100B59A00(id a1, float a2)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "postNotificationName:object:", CFSTR("CarPlayOneHandedZoomingSettingDidChangeNotification"), 0);

}

void sub_100B59A40(id a1, float a2)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "postNotificationName:object:", CFSTR("CarPlayOneHandedZoomingSettingDidChangeNotification"), 0);

}

void sub_100B59A80(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addNavigationRowWithTitle:viewControllerContent:](a2, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Configure interruption"), &stru_1011E4B38);
}

void sub_100B59AB0(id a1, MapsDebugValuesViewController *a2)
{
  MapsDebugValuesViewController *v2;
  MapsDebugTableSection *v3;
  double v4;
  double v5;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  MapsDebugTableSection *v12;
  id v13;
  _QWORD v14[8];
  _QWORD v15[5];
  _QWORD v16[5];
  _QWORD v17[5];
  _QWORD v18[5];
  _QWORD v19[5];
  _QWORD v20[5];
  _QWORD v21[5];
  _QWORD v22[4];
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  void (*v27)(uint64_t);
  __CFString *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t);
  void (*v33)(uint64_t);
  __CFString *v34;
  _QWORD v35[4];

  v2 = a2;
  v35[0] = 0;
  v35[1] = v35;
  v35[2] = 0x2020000000;
  v35[3] = 0;
  v29 = 0;
  v30 = &v29;
  v31 = 0x3032000000;
  v32 = sub_100B59E00;
  v33 = sub_100B59E10;
  v34 = CFSTR("Debug interruption");
  v23 = 0;
  v24 = &v23;
  v25 = 0x3032000000;
  v26 = sub_100B59E00;
  v27 = sub_100B59E10;
  v28 = CFSTR("Some very long message that tells us something useful.");
  v22[0] = 0;
  v22[1] = v22;
  v22[2] = 0x2020000000;
  v22[3] = 3;
  v3 = objc_alloc_init(MapsDebugTableSection);
  v20[4] = v35;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_100B59E18;
  v21[3] = &unk_1011E4B60;
  v21[4] = v35;
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_100B59E2C;
  v20[3] = &unk_1011E4B88;
  LODWORD(v4) = 0;
  LODWORD(v5) = 4.0;
  v6 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:](v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Count"), CFSTR("%.0f"), v21, v20, v4, v5);
  v7 = v30[5];
  v19[1] = 3221225472;
  v19[2] = sub_100B59E40;
  v19[3] = &unk_1011E0600;
  v19[4] = &v29;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_100B59E50;
  v18[3] = &unk_1011E0628;
  v18[4] = &v29;
  v19[0] = _NSConcreteStackBlock;
  v8 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v3, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Title"), v7, 0, v19, v18);
  v9 = v24[5];
  v17[1] = 3221225472;
  v17[2] = sub_100B59E60;
  v17[3] = &unk_1011E0600;
  v17[4] = &v23;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100B59E70;
  v16[3] = &unk_1011E0628;
  v16[4] = &v23;
  v17[0] = _NSConcreteStackBlock;
  v10 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v3, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Message"), v9, 0, v17, v16);
  -[MapsDebugValuesViewController addSection:](v2, "addSection:", v3);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100B59E80;
  v15[3] = &unk_1011DFA18;
  v15[4] = v22;
  v11 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Interrupt Kind"), v15);
  v12 = objc_alloc_init(MapsDebugTableSection);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100B59FB8;
  v14[3] = &unk_1011B85C8;
  v14[4] = &v29;
  v14[5] = &v23;
  v14[6] = v35;
  v14[7] = v22;
  v13 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v12, "addButtonRowWithTitle:action:", CFSTR("Trigger"), v14);
  -[MapsDebugValuesViewController addSection:](v2, "addSection:", v12);

  _Block_object_dispose(v22, 8);
  _Block_object_dispose(&v23, 8);

  _Block_object_dispose(&v29, 8);
  _Block_object_dispose(v35, 8);

}

void sub_100B59DC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 240), 8);
  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100B59E00(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100B59E10(uint64_t a1)
{

}

float sub_100B59E18(uint64_t a1)
{
  return (float)*(unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
}

uint64_t sub_100B59E2C(uint64_t result, float a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = vcvtas_u32_f32(a2);
  return result;
}

id sub_100B59E40(uint64_t a1)
{
  return *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
}

void sub_100B59E50(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

id sub_100B59E60(uint64_t a1)
{
  return *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
}

void sub_100B59E70(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

id sub_100B59E80(uint64_t a1, void *a2)
{
  _QWORD v3[5];
  _QWORD v4[4];
  uint64_t v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100B59F6C;
  v4[3] = &unk_1011E0670;
  v5 = *(_QWORD *)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100B59F88;
  v3[3] = &unk_1011B8310;
  v3[4] = v5;
  return objc_msgSend(a2, "addCheckmarkRowsGroupWithContent:get:set:", &stru_1011E4BA8, v4, v3);
}

void sub_100B59F0C(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  MapsDebugCheckmarkRowsGroup *v4;

  v4 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v4, "addRowWithTitle:value:", CFSTR("Generic Error"), &off_101270918);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v4, "addRowWithTitle:value:", CFSTR("NavSim"), &off_101270930);

}

NSNumber *sub_100B59F6C(uint64_t a1)
{
  return +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
}

id sub_100B59F88(uint64_t a1, void *a2)
{
  id result;

  result = objc_msgSend(a2, "integerValue");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_100B59FB8(_QWORD *a1)
{
  NSMutableArray *v2;
  unint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  NSMutableDictionary *v7;

  v7 = objc_opt_new(NSMutableDictionary);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 40), CFSTR("kMapsInterruptionTitle"));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40), CFSTR("kMapsInterruptionMessage"));
  v2 = objc_opt_new(NSMutableArray);
  if (*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24))
  {
    v3 = 0;
    do
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Action %lu"), v3));
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[MapsInterruptionAction actionWithTitle:cancels:handler:](MapsInterruptionAction, "actionWithTitle:cancels:handler:", v4, 0, 0));

      -[NSMutableArray addObject:](v2, "addObject:", v5);
      ++v3;
    }
    while (v3 < *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24));
  }
  if (-[NSMutableArray count](v2, "count"))
    -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v2, CFSTR("kMapsInterruptionActions"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedMapsDelegate](UIApplication, "sharedMapsDelegate"));
  objc_msgSend(v6, "interruptApplicationWithKind:userInfo:completionHandler:", *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24), v7, &stru_1011E4BC8);

}

void sub_100B5A130(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addNavigationRowWithTitle:viewControllerContent:](a2, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Add Card"), &stru_1011E4C08);
}

void sub_100B5A160(id a1, MapsDebugValuesViewController *a2)
{
  MapsDebugValuesViewController *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  _QWORD v11[21];
  _QWORD v12[5];
  _QWORD v13[7];
  _QWORD v14[8];
  _QWORD v15[5];
  _QWORD v16[5];
  _QWORD v17[9];
  _QWORD v18[6];
  _QWORD v19[4];
  _QWORD v20[4];
  _QWORD v21[4];
  _QWORD v22[4];
  _QWORD v23[3];
  char v24;
  _QWORD v25[4];
  _QWORD v26[3];
  char v27;
  _QWORD v28[3];
  char v29;
  _QWORD v30[4];
  _QWORD v31[3];
  char v32;
  _QWORD v33[3];
  int v34;
  _QWORD v35[4];
  _QWORD v36[3];
  int v37;
  _QWORD v38[4];
  _QWORD v39[4];
  _QWORD v40[4];
  _QWORD v41[4];

  v2 = a2;
  v41[0] = 0;
  v41[1] = v41;
  v41[2] = 0x2020000000;
  v41[3] = 0;
  v40[0] = 0;
  v40[1] = v40;
  v40[2] = 0x2020000000;
  v40[3] = 1;
  v39[0] = 0;
  v39[1] = v39;
  v39[2] = 0x2020000000;
  v39[3] = 1;
  v38[0] = 0;
  v38[1] = v38;
  v38[2] = 0x2020000000;
  v38[3] = 0;
  v36[0] = 0;
  v36[1] = v36;
  v36[2] = 0x2020000000;
  v37 = 0;
  v35[0] = 0;
  v35[1] = v35;
  v35[2] = 0x2020000000;
  v35[3] = 0;
  v33[0] = 0;
  v33[1] = v33;
  v33[2] = 0x2020000000;
  v34 = 0;
  v31[0] = 0;
  v31[1] = v31;
  v31[2] = 0x2020000000;
  v32 = 0;
  v30[0] = 0;
  v30[1] = v30;
  v30[2] = 0x2020000000;
  v30[3] = 0;
  v28[0] = 0;
  v28[1] = v28;
  v28[2] = 0x2020000000;
  v29 = 0;
  v26[0] = 0;
  v26[1] = v26;
  v26[2] = 0x2020000000;
  v27 = 0;
  v25[0] = 0;
  v25[1] = v25;
  v25[2] = 0x2020000000;
  v25[3] = 1;
  v23[0] = 0;
  v23[1] = v23;
  v23[2] = 0x2020000000;
  v24 = 1;
  v22[0] = 0;
  v22[1] = v22;
  v22[2] = 0x2020000000;
  v22[3] = 1;
  v21[0] = 0;
  v21[1] = v21;
  v21[2] = 0x2020000000;
  v21[3] = 1;
  v20[0] = 0;
  v20[1] = v20;
  v20[2] = 0x2020000000;
  v20[3] = 0x4049000000000000;
  v19[0] = 0;
  v19[1] = v19;
  v19[2] = 0x2020000000;
  v19[3] = 0x4059000000000000;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_100B5A71C;
  v18[3] = &unk_1011E4C98;
  v18[4] = v41;
  v18[5] = v40;
  v3 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Position"), v18);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_100B5AADC;
  v17[3] = &unk_1011E4D50;
  v17[4] = v39;
  v17[5] = v38;
  v17[6] = v36;
  v17[7] = v35;
  v17[8] = v33;
  v4 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Primary Axis"), v17);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100B5B358;
  v16[3] = &unk_1011DFA18;
  v16[4] = v31;
  v5 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Stays On Top"), v16);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100B5B404;
  v15[3] = &unk_1011DFA18;
  v15[4] = v30;
  v6 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Pinned Edges"), v15);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100B5B62C;
  v14[3] = &unk_1011E4DC8;
  v14[4] = v28;
  v14[5] = v26;
  v14[6] = v20;
  v14[7] = v19;
  v7 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Size"), v14);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100B5B8A0;
  v13[3] = &unk_1011E4DF0;
  v13[4] = v25;
  v13[5] = v23;
  v13[6] = v22;
  v8 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Stack"), v13);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100B5BA88;
  v12[3] = &unk_1011DFA18;
  v12[4] = v21;
  v9 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Stack Alignment"), v12);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100B5BC00;
  v11[3] = &unk_1011E4E80;
  v11[4] = v41;
  v11[5] = v39;
  v11[6] = v30;
  v11[7] = v38;
  v11[8] = v35;
  v11[9] = v40;
  v11[10] = v36;
  v11[11] = v33;
  v11[12] = v19;
  v11[13] = v20;
  v11[14] = v31;
  v11[15] = v28;
  v11[16] = v26;
  v11[17] = v25;
  v11[18] = v23;
  v11[19] = v22;
  v11[20] = v21;
  v10 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", &stru_1011EB268, v11);
  _Block_object_dispose(v19, 8);
  _Block_object_dispose(v20, 8);
  _Block_object_dispose(v21, 8);
  _Block_object_dispose(v22, 8);
  _Block_object_dispose(v23, 8);
  _Block_object_dispose(v25, 8);
  _Block_object_dispose(v26, 8);
  _Block_object_dispose(v28, 8);
  _Block_object_dispose(v30, 8);
  _Block_object_dispose(v31, 8);
  _Block_object_dispose(v33, 8);
  _Block_object_dispose(v35, 8);
  _Block_object_dispose(v36, 8);
  _Block_object_dispose(v38, 8);
  _Block_object_dispose(v39, 8);
  _Block_object_dispose(v40, 8);
  _Block_object_dispose(v41, 8);

}

void sub_100B5A644(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose(&STACK[0x210], 8);
  _Block_object_dispose(&STACK[0x230], 8);
  _Block_object_dispose(&STACK[0x250], 8);
  _Block_object_dispose(&STACK[0x270], 8);
  _Block_object_dispose(&STACK[0x290], 8);
  _Block_object_dispose(&STACK[0x2B0], 8);
  _Block_object_dispose(&STACK[0x2D0], 8);
  _Block_object_dispose(&STACK[0x2F0], 8);
  _Block_object_dispose(&STACK[0x310], 8);
  _Block_object_dispose(&STACK[0x330], 8);
  _Block_object_dispose(&STACK[0x350], 8);
  _Block_object_dispose(&STACK[0x370], 8);
  _Block_object_dispose((const void *)(v1 - 240), 8);
  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_100B5A71C(uint64_t a1, void *a2)
{
  id v3;
  __int128 v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[7];
  _QWORD v11[4];
  uint64_t v12;
  _QWORD v13[4];
  __int128 v14;
  uint64_t *v15;
  _QWORD v16[5];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  void (*v21)(uint64_t);
  id v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  void (*v27)(uint64_t);
  id v28;

  v3 = a2;
  v23 = 0;
  v24 = &v23;
  v25 = 0x3032000000;
  v26 = sub_100B59E00;
  v27 = sub_100B59E10;
  v28 = 0;
  v17 = 0;
  v18 = &v17;
  v19 = 0x3032000000;
  v20 = sub_100B59E00;
  v21 = sub_100B59E10;
  v22 = 0;
  v15 = &v17;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100B5A974;
  v16[3] = &unk_1011E0670;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100B5A990;
  v13[3] = &unk_1011E4C50;
  v4 = *(_OWORD *)(a1 + 32);
  v16[4] = *(_QWORD *)(a1 + 32);
  v14 = v4;
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "addCheckmarkRowsGroupWithContent:get:set:", &stru_1011E4C28, v16, v13));
  v6 = (void *)v24[5];
  v24[5] = v5;

  v10[6] = &v23;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100B5AA78;
  v11[3] = &unk_1011E0670;
  v7 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100B5AA94;
  v10[3] = &unk_1011E4C50;
  v10[4] = v12;
  v10[5] = v7;
  v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "addCheckmarkRowsGroupWithContent:get:set:", &stru_1011E4C70, v11, v10));
  v9 = (void *)v18[5];
  v18[5] = v8;

  _Block_object_dispose(&v17, 8);
  _Block_object_dispose(&v23, 8);

}

void sub_100B5A8B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_100B5A8D4(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  MapsDebugCheckmarkRowsGroup *v6;

  v6 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v6, "addRowWithTitle:value:", CFSTR("Top"), &off_1012708D0);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v6, "addRowWithTitle:value:", CFSTR("Bottom"), &off_101270948);
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v6, "addRowWithTitle:value:", CFSTR("Left"), &off_1012708E8);
  v5 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v6, "addRowWithTitle:value:", CFSTR("Right"), &off_101270960);

}

NSNumber *sub_100B5A974(uint64_t a1)
{
  return +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
}

id sub_100B5A990(_QWORD *a1, void *a2)
{
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = objc_msgSend(a2, "unsignedIntegerValue");
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = 0;
  return objc_msgSend(*(id *)(*(_QWORD *)(a1[6] + 8) + 40), "update");
}

void sub_100B5A9D8(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  MapsDebugCheckmarkRowsGroup *v6;

  v6 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v6, "addRowWithTitle:value:", CFSTR("Top Left"), &off_1012708D0);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v6, "addRowWithTitle:value:", CFSTR("Bottom Left"), &off_101270948);
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v6, "addRowWithTitle:value:", CFSTR("Top Right"), &off_1012708E8);
  v5 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v6, "addRowWithTitle:value:", CFSTR("Bottom Right"), &off_101270960);

}

NSNumber *sub_100B5AA78(uint64_t a1)
{
  return +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
}

id sub_100B5AA94(_QWORD *a1, void *a2)
{
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = objc_msgSend(a2, "unsignedIntegerValue");
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = 0;
  return objc_msgSend(*(id *)(*(_QWORD *)(a1[6] + 8) + 40), "update");
}

void sub_100B5AADC(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  _QWORD v7[4];
  __int128 v8;
  _QWORD v9[4];
  __int128 v10;
  _QWORD v11[5];
  _QWORD v12[4];
  uint64_t v13;

  v3 = a2;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100B5AC04;
  v12[3] = &unk_1011E4CC0;
  v13 = *(_QWORD *)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100B5AC1C;
  v11[3] = &unk_1011AEF80;
  v11[4] = v13;
  v4 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Horizontal"), v12, v11);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100B5AC30;
  v9[3] = &unk_1011E4D08;
  v10 = *(_OWORD *)(a1 + 40);
  v5 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Primary Axis Fill Mode"), v9);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100B5AFC4;
  v7[3] = &unk_1011E4D08;
  v8 = *(_OWORD *)(a1 + 56);
  v6 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Secondary Axis Fill Mode"), v7);

}

BOOL sub_100B5AC04(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

uint64_t sub_100B5AC1C(uint64_t result, int a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2 ^ 1u;
  return result;
}

void sub_100B5AC30(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  _QWORD v6[5];
  _QWORD v7[5];

  v3 = a2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100B5ACF4;
  v7[3] = &unk_1011DFA18;
  v7[4] = *(_QWORD *)(a1 + 32);
  v4 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Primary Axis Fill Mode"), v7);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100B5AE8C;
  v6[3] = &unk_1011DFA18;
  v6[4] = *(_QWORD *)(a1 + 40);
  v5 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Priority"), v6);

}

void sub_100B5ACF4(uint64_t a1, void *a2)
{
  id v2;
  id v3;
  void **v4;
  uint64_t v5;
  id (*v6)(uint64_t, void *);
  void *v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  NSNumber *(*v11)(uint64_t);
  void *v12;
  uint64_t v13;

  v9 = _NSConcreteStackBlock;
  v10 = 3221225472;
  v11 = sub_100B5AE40;
  v12 = &unk_1011E0670;
  v13 = *(_QWORD *)(a1 + 32);
  v4 = _NSConcreteStackBlock;
  v5 = 3221225472;
  v6 = sub_100B5AE5C;
  v7 = &unk_1011B8310;
  v8 = v13;
  v2 = a2;
  v3 = objc_msgSend(v2, "addCheckmarkRowsGroupWithContent:get:set:", &stru_1011E4CE0, &v9, &v4);
  objc_msgSend(v2, "setFooter:", CFSTR("* for horizontal, the width is capped to minimum of 320 and 38% of screen width. For vertical axis it behaves as .Fill"), v4, v5, v6, v7, v8, v9, v10, v11, v12);

}

void sub_100B5ADA0(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  MapsDebugCheckmarkRowsGroup *v6;

  v6 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v6, "addRowWithTitle:value:", CFSTR("Intrinsic"), &off_1012708B8);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v6, "addRowWithTitle:value:", CFSTR("Restricted"), &off_1012708D0);
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v6, "addRowWithTitle:value:", CFSTR("Best for Screen*"), &off_1012708E8);
  v5 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v6, "addRowWithTitle:value:", CFSTR("Fill"), &off_101270900);

}

NSNumber *sub_100B5AE40(uint64_t a1)
{
  return +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
}

id sub_100B5AE5C(uint64_t a1, void *a2)
{
  id result;

  result = objc_msgSend(a2, "unsignedIntegerValue");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_100B5AE8C(uint64_t a1, void *a2)
{
  id v2;
  id v3;
  void **v4;
  uint64_t v5;
  id (*v6)(uint64_t, void *);
  void *v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  id (*v11)(uint64_t, double);
  void *v12;
  uint64_t v13;

  v9 = _NSConcreteStackBlock;
  v10 = 3221225472;
  v11 = sub_100B5AF44;
  v12 = &unk_1011E0600;
  v13 = *(_QWORD *)(a1 + 32);
  v4 = _NSConcreteStackBlock;
  v5 = 3221225472;
  v6 = sub_100B5AF94;
  v7 = &unk_1011E0628;
  v8 = v13;
  v2 = a2;
  v3 = objc_msgSend(v2, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Priority"), CFSTR("0"), 1, &v9, &v4);
  objc_msgSend(v2, "setFooter:", CFSTR("For Intrinsic fill mode, the higher the priority, the more space the card will have available compared to other, competing Intrinsic cards"), v4, v5, v6, v7, v8, v9, v10, v11, v12);

}

id sub_100B5AF44(uint64_t a1, double a2)
{
  void *v2;
  void *v3;

  LODWORD(a2) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", a2));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "stringValue"));

  return v3;
}

id sub_100B5AF94(uint64_t a1, void *a2)
{
  id result;
  int v4;

  result = objc_msgSend(a2, "floatValue");
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v4;
  return result;
}

void sub_100B5AFC4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  _QWORD v6[5];
  _QWORD v7[5];

  v3 = a2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100B5B088;
  v7[3] = &unk_1011DFA18;
  v7[4] = *(_QWORD *)(a1 + 32);
  v4 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Secondary Axis Fill Mode"), v7);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100B5B220;
  v6[3] = &unk_1011DFA18;
  v6[4] = *(_QWORD *)(a1 + 40);
  v5 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Priority"), v6);

}

void sub_100B5B088(uint64_t a1, void *a2)
{
  id v2;
  id v3;
  void **v4;
  uint64_t v5;
  id (*v6)(uint64_t, void *);
  void *v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  NSNumber *(*v11)(uint64_t);
  void *v12;
  uint64_t v13;

  v9 = _NSConcreteStackBlock;
  v10 = 3221225472;
  v11 = sub_100B5B1D4;
  v12 = &unk_1011E0670;
  v13 = *(_QWORD *)(a1 + 32);
  v4 = _NSConcreteStackBlock;
  v5 = 3221225472;
  v6 = sub_100B5B1F0;
  v7 = &unk_1011B8310;
  v8 = v13;
  v2 = a2;
  v3 = objc_msgSend(v2, "addCheckmarkRowsGroupWithContent:get:set:", &stru_1011E4D28, &v9, &v4);
  objc_msgSend(v2, "setFooter:", CFSTR("* for horizontal, the width is capped to minimum of 640pt and 38% of screen width. For vertical axis it behaves as .Fill"), v4, v5, v6, v7, v8, v9, v10, v11, v12);

}

void sub_100B5B134(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  MapsDebugCheckmarkRowsGroup *v6;

  v6 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v6, "addRowWithTitle:value:", CFSTR("Intrinsic"), &off_1012708B8);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v6, "addRowWithTitle:value:", CFSTR("Restricted"), &off_1012708D0);
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v6, "addRowWithTitle:value:", CFSTR("Best for Screen"), &off_1012708E8);
  v5 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v6, "addRowWithTitle:value:", CFSTR("Fill"), &off_101270900);

}

NSNumber *sub_100B5B1D4(uint64_t a1)
{
  return +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
}

id sub_100B5B1F0(uint64_t a1, void *a2)
{
  id result;

  result = objc_msgSend(a2, "unsignedIntegerValue");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_100B5B220(uint64_t a1, void *a2)
{
  id v2;
  id v3;
  void **v4;
  uint64_t v5;
  id (*v6)(uint64_t, void *);
  void *v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  id (*v11)(uint64_t, double);
  void *v12;
  uint64_t v13;

  v9 = _NSConcreteStackBlock;
  v10 = 3221225472;
  v11 = sub_100B5B2D8;
  v12 = &unk_1011E0600;
  v13 = *(_QWORD *)(a1 + 32);
  v4 = _NSConcreteStackBlock;
  v5 = 3221225472;
  v6 = sub_100B5B328;
  v7 = &unk_1011E0628;
  v8 = v13;
  v2 = a2;
  v3 = objc_msgSend(v2, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Priority"), CFSTR("0"), 1, &v9, &v4);
  objc_msgSend(v2, "setFooter:", CFSTR("For Intrinsic fill mode, the higher the priority, the more space the card will have available compared to other, competing Intrinsic cards"), v4, v5, v6, v7, v8, v9, v10, v11, v12);

}

id sub_100B5B2D8(uint64_t a1, double a2)
{
  void *v2;
  void *v3;

  LODWORD(a2) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", a2));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "stringValue"));

  return v3;
}

id sub_100B5B328(uint64_t a1, void *a2)
{
  id result;
  int v4;

  result = objc_msgSend(a2, "floatValue");
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v4;
  return result;
}

id sub_100B5B358(uint64_t a1, void *a2)
{
  _QWORD v3[5];
  _QWORD v4[4];
  uint64_t v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100B5B3E4;
  v4[3] = &unk_1011E4CC0;
  v5 = *(_QWORD *)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100B5B3F4;
  v3[3] = &unk_1011AEF80;
  v3[4] = v5;
  return objc_msgSend(a2, "addSwitchRowWithTitle:get:set:", CFSTR("Stays On Top"), v4, v3);
}

uint64_t sub_100B5B3E4(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
}

uint64_t sub_100B5B3F4(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2;
  return result;
}

void sub_100B5B404(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  _QWORD v7[4];
  id v8;
  uint64_t v9;
  _QWORD v10[4];
  _QWORD v11[4];

  v3 = a2;
  v10[0] = &off_1012708D0;
  v10[1] = &off_101270948;
  v11[0] = CFSTR("Top");
  v11[1] = CFSTR("Bottom");
  v10[2] = &off_1012708E8;
  v10[3] = &off_101270960;
  v11[2] = CFSTR("Left");
  v11[3] = CFSTR("Right");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v11, v10, 4));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100B5B52C;
  v7[3] = &unk_1011E4DA0;
  v5 = *(_QWORD *)(a1 + 32);
  v8 = v3;
  v9 = v5;
  v6 = v3;
  objc_msgSend(v4, "enumerateKeysAndObjectsUsingBlock:", v7);

}

void sub_100B5B52C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  _QWORD v9[6];
  _QWORD v10[4];
  uint64_t v11;
  id v12;

  v5 = a3;
  v6 = objc_msgSend(a2, "unsignedIntegerValue");
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100B5B5E0;
  v10[3] = &unk_1011E4D78;
  v7 = *(void **)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = v6;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100B5B5F8;
  v9[3] = &unk_1011BC558;
  v9[4] = v11;
  v9[5] = v6;
  v8 = objc_msgSend(v7, "addSwitchRowWithTitle:get:set:", v5, v10, v9);

}

BOOL sub_100B5B5E0(uint64_t a1)
{
  return (*(_QWORD *)(a1 + 40) & ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24)) == 0;
}

uint64_t sub_100B5B5F8(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 40);
  v3 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
  if (a2)
    v4 = *(_QWORD *)(v3 + 24) | v2;
  else
    v4 = *(_QWORD *)(v3 + 24) & ~v2;
  *(_QWORD *)(v3 + 24) = v4;
  return result;
}

void sub_100B5B62C(_QWORD *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  double v6;
  double v7;
  id v8;
  double v9;
  double v10;
  id v11;
  _QWORD v12[5];
  _QWORD v13[4];
  uint64_t v14;
  _QWORD v15[5];
  _QWORD v16[4];
  uint64_t v17;
  _QWORD v18[5];
  _QWORD v19[4];
  uint64_t v20;
  _QWORD v21[5];
  _QWORD v22[4];
  uint64_t v23;

  v3 = a2;
  v22[1] = 3221225472;
  v22[2] = sub_100B5B810;
  v22[3] = &unk_1011E4CC0;
  v23 = a1[4];
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_100B5B820;
  v21[3] = &unk_1011AEF80;
  v21[4] = v23;
  v22[0] = _NSConcreteStackBlock;
  v4 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Grows"), v22, v21);
  v19[1] = 3221225472;
  v19[2] = sub_100B5B830;
  v19[3] = &unk_1011E4CC0;
  v20 = a1[5];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_100B5B840;
  v18[3] = &unk_1011AEF80;
  v18[4] = v20;
  v19[0] = _NSConcreteStackBlock;
  v5 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Compresses"), v19, v18);
  v16[1] = 3221225472;
  v16[2] = sub_100B5B850;
  v16[3] = &unk_1011E4B60;
  v17 = a1[6];
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100B5B864;
  v15[3] = &unk_1011E4B88;
  v15[4] = v17;
  v16[0] = _NSConcreteStackBlock;
  LODWORD(v6) = 1128792064;
  LODWORD(v7) = 10.0;
  v8 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Height"), CFSTR("%.1f"), v16, v15, v7, v6);
  v13[1] = 3221225472;
  v13[2] = sub_100B5B878;
  v13[3] = &unk_1011E4B60;
  v14 = a1[7];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100B5B88C;
  v12[3] = &unk_1011E4B88;
  v12[4] = v14;
  v13[0] = _NSConcreteStackBlock;
  LODWORD(v9) = 1137180672;
  LODWORD(v10) = 10.0;
  v11 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Width"), CFSTR("%.1f"), v13, v12, v10, v9);

}

uint64_t sub_100B5B810(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
}

uint64_t sub_100B5B820(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2;
  return result;
}

uint64_t sub_100B5B830(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
}

uint64_t sub_100B5B840(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2;
  return result;
}

float sub_100B5B850(uint64_t a1)
{
  return *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
}

double sub_100B5B864(uint64_t a1, float a2)
{
  double result;

  result = a2;
  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

float sub_100B5B878(uint64_t a1)
{
  return *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
}

double sub_100B5B88C(uint64_t a1, float a2)
{
  double result;

  result = a2;
  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_100B5B8A0(_QWORD *a1, void *a2)
{
  id v3;
  double v4;
  double v5;
  id v6;
  id v7;
  id v8;
  _QWORD v9[5];
  _QWORD v10[4];
  uint64_t v11;
  _QWORD v12[5];
  _QWORD v13[4];
  uint64_t v14;
  _QWORD v15[5];
  _QWORD v16[4];
  uint64_t v17;

  v3 = a2;
  v16[1] = 3221225472;
  v16[2] = sub_100B5BA14;
  v16[3] = &unk_1011E4B60;
  v17 = a1[4];
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100B5BA28;
  v15[3] = &unk_1011E4B88;
  v15[4] = v17;
  v16[0] = _NSConcreteStackBlock;
  LODWORD(v4) = 0;
  LODWORD(v5) = 4.0;
  v6 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Count"), CFSTR("%.0f"), v16, v15, v4, v5);
  v13[1] = 3221225472;
  v13[2] = sub_100B5BA3C;
  v13[3] = &unk_1011E4CC0;
  v14 = a1[5];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100B5BA4C;
  v12[3] = &unk_1011AEF80;
  v12[4] = v14;
  v13[0] = _NSConcreteStackBlock;
  v7 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Use card layout"), v13, v12);
  v10[1] = 3221225472;
  v10[2] = sub_100B5BA5C;
  v10[3] = &unk_1011E4CC0;
  v11 = a1[6];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100B5BA74;
  v9[3] = &unk_1011AEF80;
  v9[4] = v11;
  v10[0] = _NSConcreteStackBlock;
  v8 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Horizontal"), v10, v9);

}

float sub_100B5BA14(uint64_t a1)
{
  return (float)*(unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
}

uint64_t sub_100B5BA28(uint64_t result, float a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = vcvtas_u32_f32(a2);
  return result;
}

uint64_t sub_100B5BA3C(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
}

uint64_t sub_100B5BA4C(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2;
  return result;
}

BOOL sub_100B5BA5C(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

uint64_t sub_100B5BA74(uint64_t result, int a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2 ^ 1u;
  return result;
}

id sub_100B5BA88(uint64_t a1, void *a2)
{
  _QWORD v3[5];
  _QWORD v4[4];
  uint64_t v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100B5BBB4;
  v4[3] = &unk_1011E0670;
  v5 = *(_QWORD *)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100B5BBD0;
  v3[3] = &unk_1011B8310;
  v3[4] = v5;
  return objc_msgSend(a2, "addCheckmarkRowsGroupWithContent:get:set:", &stru_1011E4E10, v4, v3);
}

void sub_100B5BB14(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  MapsDebugCheckmarkRowsGroup *v6;

  v6 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v6, "addRowWithTitle:value:", CFSTR("Fill"), &off_101270870);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v6, "addRowWithTitle:value:", CFSTR("Leading/Top"), &off_101270888);
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v6, "addRowWithTitle:value:", CFSTR("Center"), &off_101270918);
  v5 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v6, "addRowWithTitle:value:", CFSTR("Trailing/Bottom"), &off_101270978);

}

NSNumber *sub_100B5BBB4(uint64_t a1)
{
  return +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
}

id sub_100B5BBD0(uint64_t a1, void *a2)
{
  id result;

  result = objc_msgSend(a2, "integerValue");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_100B5BC00(uint64_t a1, void *a2)
{
  id v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  id v8;
  id v9;
  _QWORD v10[4];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v3 = a2;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100B5BCCC;
  v10[3] = &unk_1011E4E38;
  v4 = *(_OWORD *)(a1 + 48);
  v11 = *(_OWORD *)(a1 + 32);
  v12 = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v13 = *(_OWORD *)(a1 + 64);
  v14 = v5;
  v6 = *(_OWORD *)(a1 + 112);
  v15 = *(_OWORD *)(a1 + 96);
  v16 = v6;
  v7 = *(_OWORD *)(a1 + 144);
  v17 = *(_OWORD *)(a1 + 128);
  v18 = v7;
  v19 = *(_QWORD *)(a1 + 160);
  v8 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Make Card"), v10);
  v9 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Remove all Cards"), &stru_1011E4E58);

}

void sub_100B5BCCC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v26;
  double v27;
  double v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  int v46;
  uint64_t v47;
  float v48;
  id v49;
  id v50;
  __int128 v51;
  __int128 v52;
  char v53;
  _BYTE v54[7];
  uint64_t v55;
  char v56;
  _QWORD v57[9];
  _QWORD v58[9];

  v2 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
    v4 = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24);
    v5 = *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24);
    v6 = *(_QWORD *)(*(_QWORD *)(a1[8] + 8) + 24);
    v7 = 1000.0;
    if ((v5 & 0xFFFFFFFFFFFFFFFELL) == 2)
      v8 = 1000.0;
    else
      v8 = 1.0;
    if ((v6 & 0xFFFFFFFFFFFFFFFELL) != 2)
      v7 = 1.0;
    v9 = 4 * (v2 == 1);
    if (v2 == 4)
      v9 = 1;
    if (v2 == 2)
      v9 |= 8uLL;
    if (v2 == 8)
    {
      v9 |= 2uLL;
      v10 = 1;
    }
    else
    {
      v10 = 0;
    }
    v11 = 2 * v10;
    if (v2 == 2)
      v11 = 8;
    if (v2 == 1)
      v11 |= 4uLL;
    v40 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
    v41 = 0;
    v12 = v11 | (v2 == 4);
    v42 = v3;
    v43 = v4;
    if (v3 == 1)
      v13 = v12;
    else
      v13 = v9;
    v44 = v5;
    v45 = v8;
    v46 = 0;
    v47 = v6;
    v48 = v7;
  }
  else
  {
    v14 = *(_QWORD *)(*(_QWORD *)(a1[9] + 8) + 24);
    v15 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
    v16 = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24);
    v17 = *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24);
    v18 = *(_QWORD *)(*(_QWORD *)(a1[8] + 8) + 24);
    if (v15 == 1)
    {
      _ZF = v14 == 1 || v14 == 4;
      v13 = 8;
      if (!_ZF)
        v13 = 0;
      if (v14 == 8 || v14 == 2)
        v13 |= 2uLL;
    }
    else if (v14 == 4 || v14 == 8)
    {
      v13 = 1;
    }
    else
    {
      v13 = 4 * ((unint64_t)(v14 - 1) < 2);
    }
    v40 = 0;
    v41 = v14;
    v42 = v15;
    v43 = v16;
    v44 = v17;
    v46 = 0;
    v47 = v18;
  }
  v49 = 0;
  v50 = 0;
  __asm { FMOV            V0.2D, #8.0 }
  v51 = _Q0;
  v52 = _Q0;
  v53 = 1;
  memset(v54, 0, sizeof(v54));
  v55 = v13;
  v56 = 0;
  v26 = a1[11];
  v45 = *(float *)(*(_QWORD *)(a1[10] + 8) + 24);
  v48 = *(float *)(*(_QWORD *)(v26 + 8) + 24);
  v27 = *(double *)(*(_QWORD *)(a1[12] + 8) + 24);
  v28 = *(double *)(*(_QWORD *)(a1[13] + 8) + 24);
  v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSValue value:withObjCType:](NSValue, "value:withObjCType:", &v40, "{?=QQqQQfQf@@{UIEdgeInsets=dddd}BQB}"));
  v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSValue valueWithCGSize:](NSValue, "valueWithCGSize:", v27, v28));
  v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  v58[0] = v39;
  v57[0] = CFSTR("Layout");
  v57[1] = CFSTR("StaysOnTop");
  v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1[14] + 8) + 24)));
  v58[1] = v31;
  v58[2] = v29;
  v57[2] = CFSTR("Size");
  v57[3] = CFSTR("Grows");
  v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1[15] + 8) + 24)));
  v58[3] = v32;
  v57[4] = CFSTR("Compresses");
  v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1[16] + 8) + 24)));
  v58[4] = v33;
  v57[5] = CFSTR("StackCount");
  v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(*(_QWORD *)(a1[17] + 8) + 24)));
  v58[5] = v34;
  v57[6] = CFSTR("StackUseCardLayout");
  v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1[18] + 8) + 24)));
  v58[6] = v35;
  v57[7] = CFSTR("StackAxis");
  v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(*(_QWORD *)(a1[19] + 8) + 24)));
  v58[7] = v36;
  v57[8] = CFSTR("StackAlignment");
  v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(*(_QWORD *)(a1[20] + 8) + 24)));
  v58[8] = v37;
  v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v58, v57, 9));
  objc_msgSend(v30, "postNotificationName:object:userInfo:", CFSTR("__internal_CarCardTestDebug"), 0, v38);

}

void sub_100B5C12C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{

  _Unwind_Resume(a1);
}

void sub_100B5C154(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v1, "postNotificationName:object:userInfo:", CFSTR("__internal_CarCardTestDebug"), 0, &off_1012749D0);

}

void sub_100B5C19C(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  MapsDebugTableSection *v11;

  v11 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v11, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Change camera mode on IC connection changes"), MapsConfig_InstrumentClusterConnectionCameraStyleToggleEnabled, off_1014B4D48);
  v3 = -[MapsDebugTableSection addEmptySectionBannerRowWithTitle:](v11, "addEmptySectionBannerRowWithTitle:", CFSTR("IC Dual Screen Camera Behavior"));
  v4 = -[MapsDebugTableSection addCheckmarkRowsGroupWithContent:backingGeoConfigKey:get:set:](v11, "addCheckmarkRowsGroupWithContent:backingGeoConfigKey:get:set:", &stru_1011E4EC0, MapsConfig_CarPlayHybridInstrumentClusterCameraStyleDualScreenBehavior, off_1014B52A8, &stru_1011E4EE0, &stru_1011E4F00);
  v5 = -[MapsDebugTableSection addEmptySectionBannerRowWithTitle:](v11, "addEmptySectionBannerRowWithTitle:", CFSTR("IC Single Screen Camera Behavior"));
  v6 = -[MapsDebugTableSection addCheckmarkRowsGroupWithContent:backingGeoConfigKey:get:set:](v11, "addCheckmarkRowsGroupWithContent:backingGeoConfigKey:get:set:", &stru_1011E4F20, MapsConfig_CarPlayHybridInstrumentClusterCameraStyleSingleScreenBehavior, off_1014B52B8, &stru_1011E4F40, &stru_1011E4F60);
  v7 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v11, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Force dual display config"), CFSTR("CarDisplayConfigForceDualDisplayKey"));
  v8 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v11, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Hide current location text label"), MapsConfig_InstrumentClusterHideCurrentLocationTextLabel, off_1014B4D78);
  v9 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v11, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Hide guidance card in center display"), CFSTR("CarNavigationHideGuidanceCard"));
  v10 = -[MapsDebugTableSection addNavigationRowWithTitle:viewControllerContent:](v11, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Hybrid IC"), &stru_1011E4F80);

}

void sub_100B5C2FC(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  MapsDebugCheckmarkRowsGroup *v4;

  v4 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v4, "addRowWithTitle:value:", CFSTR("Overview"), &off_101270990);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v4, "addRowWithTitle:value:", CFSTR("Detailed"), &off_1012709A8);

}

id sub_100B5C35C(id a1)
{
  return +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", GEOConfigGetInteger(MapsConfig_CarPlayHybridInstrumentClusterCameraStyleDualScreenBehavior, off_1014B52A8));
}

void sub_100B5C394(id a1, id a2)
{
  id v2;

  v2 = objc_msgSend(a2, "integerValue");
  GEOConfigSetInteger(MapsConfig_CarPlayHybridInstrumentClusterCameraStyleDualScreenBehavior, off_1014B52A8, v2);
}

void sub_100B5C3BC(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  MapsDebugCheckmarkRowsGroup *v4;

  v4 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v4, "addRowWithTitle:value:", CFSTR("Overview"), &off_101270990);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v4, "addRowWithTitle:value:", CFSTR("Detailed"), &off_1012709A8);

}

id sub_100B5C41C(id a1)
{
  return +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", GEOConfigGetInteger(MapsConfig_CarPlayHybridInstrumentClusterCameraStyleSingleScreenBehavior, off_1014B52B8));
}

void sub_100B5C454(id a1, id a2)
{
  id v2;

  v2 = objc_msgSend(a2, "integerValue");
  GEOConfigSetInteger(MapsConfig_CarPlayHybridInstrumentClusterCameraStyleSingleScreenBehavior, off_1014B52B8, v2);
}

void sub_100B5C47C(id a1, MapsDebugValuesViewController *a2)
{
  MapsDebugValuesViewController *v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  _QWORD v19[4];
  Block_layout *v20;
  _QWORD v21[4];
  Block_layout *v22;
  _QWORD v23[4];
  Block_layout *v24;

  v2 = a2;
  v3 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Hybrid IC"), &stru_1011E4FA0);
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Force hybrid IC everywhere"), &stru_1011E4FC0));
  objc_msgSend(v4, "setFooter:", CFSTR("Force all instrument cluster displays to render the hybrid stream. Requires relaunching Maps to take effect."));
  v5 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Dynamic content scale"), &stru_1011E4FE0);
  v6 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Physical size override"), &stru_1011E5020);
  v7 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Guidance card"), &stru_1011E5060);
  v8 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("ETA tray"), &stru_1011E5080);
  v9 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Flexible UI"), &stru_1011E50A0);
  v10 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Alignment style"), &stru_1011E5140);
  v11 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Card alignment"), &stru_1011E51E0);
  v12 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Narrow card width"), &stru_1011E5280);
  v13 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Map inset centering"), &stru_1011E52C0);
  v14 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Camera styles"), &stru_1011E5300);
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_100B5D538;
  v23[3] = &unk_1011C26E8;
  v24 = &stru_1011E5400;
  v15 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Compass override"), v23);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_100B5D678;
  v21[3] = &unk_1011C26E8;
  v22 = &stru_1011E5400;
  v16 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Speed limit override"), v21);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_100B5D7B8;
  v19[3] = &unk_1011C26E8;
  v20 = &stru_1011E5400;
  v17 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("ETA tray override"), v19);
  v18 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Clear all overrides"), &stru_1011E5568);

}

void sub_100B5C740(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](a2, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Hybrid IC enabled"), MapsConfig_HybridInstrumentClusterEnabled, off_1014B4938);
}

void sub_100B5C774(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](a2, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Hybrid IC everywhere"), MapsConfig_CarPlayHybridInstrumentClusterEverywhere, off_1014B51A8);
}

void sub_100B5C7A8(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  MapsDebugTableSection *v13;

  v13 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v13, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enabled"), MapsConfig_HybridInstrumentClusterDynamicScalingEnabled, off_1014B5388);
  v3 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v13, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Baseline screen width (pixels)"), CFSTR("1920"), 2, MapsConfig_CarPlayHybridInstrumentClusterDynamicScaleBaselineScreenPixelWidth, off_1014B52F8);
  v4 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v13, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Baseline screen height (pixels)"), CFSTR("720"), 2, MapsConfig_CarPlayHybridInstrumentClusterDynamicScaleBaselineScreenPixelHeight, off_1014B5308);
  v5 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v13, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Baseline screen width (mm)"), CFSTR("293"), 2, MapsConfig_CarPlayHybridInstrumentClusterDynamicScaleBaselineScreenPhysicalWidth, off_1014B5318);
  v6 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v13, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Baseline screen height (mm)"), CFSTR("110"), 2, MapsConfig_CarPlayHybridInstrumentClusterDynamicScaleBaselineScreenPhysicalHeight, off_1014B5328);
  v7 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v13, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Baseline maneuver width (pixels)"), CFSTR("330"), 2, MapsConfig_CarPlayHybridInstrumentClusterDynamicScaleBaselineManeuverPixelWidth, off_1014B5338);
  v8 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v13, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Baseline maneuver height (pixels)"), CFSTR("115"), 2, MapsConfig_CarPlayHybridInstrumentClusterDynamicScaleBaselineManeuverPixelHeight, off_1014B5348);
  v9 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v13, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Baseline content scale"), CFSTR("2.0"), 2, MapsConfig_CarPlayHybridInstrumentClusterDynamicScaleBaselineContentScale, off_1014B52E8);
  v10 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v13, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Point scale override"), CFSTR("-1"), 2, MapsConfig_HybridInstrumentClusterDynamicPointScaleValueOverride, off_1014B5408);
  v11 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v13, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Pixel scale override"), CFSTR("-1"), 2, MapsConfig_HybridInstrumentClusterDynamicPixelScaleValueOverride, off_1014B5418);
  v12 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v13, "addButtonRowWithTitle:action:", CFSTR("Clear scale overrides"), &stru_1011E5000);

}

void sub_100B5C9C4(id a1)
{
  _GEOConfigRemoveValue(MapsConfig_HybridInstrumentClusterDynamicPointScaleValueOverride, off_1014B5408);
  _GEOConfigRemoveValue(MapsConfig_HybridInstrumentClusterDynamicPixelScaleValueOverride, off_1014B5418);
}

void sub_100B5C9F0(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugTableSection *v5;

  v5 = a2;
  v2 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v5, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Width (mm)"), CFSTR("-1"), 2, MapsConfig_CarPlayHybridInstrumentClusterScreenPhysicalSizeDebugWidthOverride, off_1014B5368);
  v3 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v5, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Height (mm)"), CFSTR("-1"), 2, MapsConfig_CarPlayHybridInstrumentClusterScreenPhysicalSizeDebugHeightOverride, off_1014B5378);
  v4 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v5, "addButtonRowWithTitle:action:", CFSTR("Clear overrides"), &stru_1011E5040);

}

void sub_100B5CA98(id a1)
{
  _GEOConfigRemoveValue(MapsConfig_CarPlayHybridInstrumentClusterScreenPhysicalSizeDebugWidthOverride, off_1014B5368);
  _GEOConfigRemoveValue(MapsConfig_CarPlayHybridInstrumentClusterScreenPhysicalSizeDebugHeightOverride, off_1014B5378);
}

void sub_100B5CAC4(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  MapsDebugTableSection *v9;

  v9 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v9, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Guidance card enabled"), MapsConfig_HybridInstrumentClusterGuidanceCardEnabled, off_1014B4D38);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v9, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Hide secondary guidance"), MapsConfig_CarPlayHybridInstrumentClusterHideSecondaryGuidance, off_1014B51E8);
  v4 = -[MapsDebugTableSection addEmptySectionBannerRowWithTitle:](v9, "addEmptySectionBannerRowWithTitle:", CFSTR("Visibility"));
  v5 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v9, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Overview mode - narrow"), MapsConfig_CarPlayHybridInstrumentClusterGuidanceCardVisibleOverviewNarrow, off_1014B51F8);
  v6 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v9, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Detail mode - narrow"), MapsConfig_CarPlayHybridInstrumentClusterGuidanceCardVisibleDetailNarrow, off_1014B5208);
  v7 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v9, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Overview mode - wide"), MapsConfig_CarPlayHybridInstrumentClusterGuidanceCardVisibleOverviewWide, off_1014B5238);
  v8 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v9, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Detail mode - wide"), MapsConfig_CarPlayHybridInstrumentClusterGuidanceCardVisibleDetailWide, off_1014B5248);

}

void sub_100B5CBD4(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  MapsDebugTableSection *v7;

  v7 = a2;
  v2 = -[MapsDebugTableSection addEmptySectionBannerRowWithTitle:](v7, "addEmptySectionBannerRowWithTitle:", CFSTR("Visibility"));
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v7, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Overview mode - narrow"), MapsConfig_CarPlayHybridInstrumentClusterETATrayVisibleOverviewNarrow, off_1014B5218);
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v7, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Detail mode - narrow"), MapsConfig_CarPlayHybridInstrumentClusterETATrayVisibleDetailNarrow, off_1014B5228);
  v5 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v7, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Overview mode - wide"), MapsConfig_CarPlayHybridInstrumentClusterETATrayVisibleOverviewWide, off_1014B5258);
  v6 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v7, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Detail mode - wide"), MapsConfig_CarPlayHybridInstrumentClusterETATrayVisibleDetailWide, off_1014B5268);

}

void sub_100B5CC9C(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  MapsDebugTableSection *v6;

  v6 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v6, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enabled"), MapsConfig_HybridInstrumentClusterFlexibleUIEnabled, off_1014B5398);
  v3 = -[MapsDebugTableSection addCheckmarkRowsGroupWithContent:backingGeoConfigKey:get:set:](v6, "addCheckmarkRowsGroupWithContent:backingGeoConfigKey:get:set:", &stru_1011E50C0, MapsConfig_HybridInstrumentClusterFlexibleUILayoutOverride, off_1014B53B8, &stru_1011E50E0, &stru_1011E5100);
  v4 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v6, "addButtonRowWithTitle:action:", CFSTR("Clear override"), &stru_1011E5120);
  v5 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v6, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("ETA tray visibility requirement ratio"), CFSTR("0.3"), 2, MapsConfig_HybridInstrumentClusterFlexibleUIETATrayVisibilityRequirementRatio, off_1014B53C8);

}

void sub_100B5CD64(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugCheckmarkRowsGroup *v5;

  v5 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("Maneuver only"), &off_1012709C0);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("Maneuver + map"), &off_101270990);
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("Maneuver + map + other"), &off_1012709A8);

}

id sub_100B5CDE4(id a1)
{
  return +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", GEOConfigGetInteger(MapsConfig_HybridInstrumentClusterFlexibleUILayoutOverride, off_1014B53B8));
}

void sub_100B5CE1C(id a1, id a2)
{
  id v2;

  v2 = objc_msgSend(a2, "integerValue");
  GEOConfigSetInteger(MapsConfig_HybridInstrumentClusterFlexibleUILayoutOverride, off_1014B53B8, v2);
}

void sub_100B5CE44(id a1)
{
  _GEOConfigRemoveValue(MapsConfig_HybridInstrumentClusterFlexibleUILayoutOverride, off_1014B53B8);
}

void sub_100B5CE54(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugTableSection *v5;

  v5 = a2;
  v2 = -[MapsDebugTableSection addCheckmarkRowsGroupWithContent:backingGeoConfigKey:get:set:](v5, "addCheckmarkRowsGroupWithContent:backingGeoConfigKey:get:set:", &stru_1011E5160, MapsConfig_HybridInstrumentClusterAlignmentStyleOverride, off_1014B53D8, &stru_1011E5180, &stru_1011E51A0);
  v3 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v5, "addButtonRowWithTitle:action:", CFSTR("Clear override"), &stru_1011E51C0);
  v4 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v5, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Wide alignment width multiple requirement"), CFSTR("2.0"), 2, MapsConfig_HybridInstrumentClusterAlignmentStyleManeuverScaledWidthMultiple, off_1014B53E8);

}

void sub_100B5CEF8(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  MapsDebugCheckmarkRowsGroup *v4;

  v4 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v4, "addRowWithTitle:value:", CFSTR("Narrow"), &off_1012709C0);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v4, "addRowWithTitle:value:", CFSTR("Wide"), &off_101270990);

}

id sub_100B5CF58(id a1)
{
  return +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", GEOConfigGetInteger(MapsConfig_HybridInstrumentClusterAlignmentStyleOverride, off_1014B53D8));
}

void sub_100B5CF90(id a1, id a2)
{
  id v2;

  v2 = objc_msgSend(a2, "integerValue");
  GEOConfigSetInteger(MapsConfig_HybridInstrumentClusterAlignmentStyleOverride, off_1014B53D8, v2);
}

void sub_100B5CFB8(id a1)
{
  _GEOConfigRemoveValue(MapsConfig_HybridInstrumentClusterAlignmentStyleOverride, off_1014B53D8);
}

void sub_100B5CFC8(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugTableSection *v5;

  v5 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v5, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enabled"), MapsConfig_HybridInstrumentClusterCardAlignmentEnabled, off_1014B53A8);
  v3 = -[MapsDebugTableSection addCheckmarkRowsGroupWithContent:backingGeoConfigKey:get:set:](v5, "addCheckmarkRowsGroupWithContent:backingGeoConfigKey:get:set:", &stru_1011E5200, MapsConfig_CarPlayHybridInstrumentClusterAlignmentOverride, off_1014B5288, &stru_1011E5220, &stru_1011E5240);
  v4 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v5, "addButtonRowWithTitle:action:", CFSTR("Clear override"), &stru_1011E5260);

}

void sub_100B5D060(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugCheckmarkRowsGroup *v5;

  v5 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("Center"), &off_1012709C0);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("Left"), &off_101270990);
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("Right"), &off_1012709A8);

}

id sub_100B5D0E0(id a1)
{
  return +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", GEOConfigGetInteger(MapsConfig_CarPlayHybridInstrumentClusterAlignmentOverride, off_1014B5288));
}

void sub_100B5D118(id a1, id a2)
{
  id v2;

  v2 = objc_msgSend(a2, "integerValue");
  GEOConfigSetInteger(MapsConfig_CarPlayHybridInstrumentClusterAlignmentOverride, off_1014B5288, v2);
}

void sub_100B5D140(id a1)
{
  _GEOConfigRemoveValue(MapsConfig_CarPlayHybridInstrumentClusterAlignmentOverride, off_1014B5288);
}

void sub_100B5D150(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  MapsDebugTableSection *v4;

  v4 = a2;
  v2 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v4, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Max card width"), CFSTR("300"), 2, MapsConfig_HybridInstrumentClusterNarrowAlignmentStyleCardMaxWidth, off_1014B5448);
  v3 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v4, "addButtonRowWithTitle:action:", CFSTR("Clear override"), &stru_1011E52A0);

}

void sub_100B5D1C0(id a1)
{
  _GEOConfigRemoveValue(MapsConfig_HybridInstrumentClusterNarrowAlignmentStyleCardMaxWidth, off_1014B5448);
}

void sub_100B5D1D0(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  MapsDebugTableSection *v4;

  v4 = a2;
  v2 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v4, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Maneuver width multiple requirement"), CFSTR("3"), 2, MapsConfig_HybridInstrumentClusterFlexibleMapInsetCenteringScaledManeuverWidthMultipleRequirement, off_1014B5458);
  v3 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v4, "addButtonRowWithTitle:action:", CFSTR("Clear override"), &stru_1011E52E0);

}

void sub_100B5D240(id a1)
{
  _GEOConfigRemoveValue(MapsConfig_HybridInstrumentClusterFlexibleMapInsetCenteringScaledManeuverWidthMultipleRequirement, off_1014B5458);
}

void sub_100B5D250(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  MapsDebugTableSection *v6;

  v6 = a2;
  v2 = -[MapsDebugTableSection addEmptySectionBannerRowWithTitle:](v6, "addEmptySectionBannerRowWithTitle:", CFSTR("Default center console camera style"));
  v3 = -[MapsDebugTableSection addCheckmarkRowsGroupWithContent:backingGeoConfigKey:get:set:](v6, "addCheckmarkRowsGroupWithContent:backingGeoConfigKey:get:set:", &stru_1011E5320, MapsConfig_CarPlayDefaultCenterConsoleCameraStyle, off_1014B52C8, &stru_1011E5340, &stru_1011E5360);
  v4 = -[MapsDebugTableSection addEmptySectionBannerRowWithTitle:](v6, "addEmptySectionBannerRowWithTitle:", CFSTR("Default hybrid IC camera style"));
  v5 = -[MapsDebugTableSection addCheckmarkRowsGroupWithContent:backingGeoConfigKey:get:set:](v6, "addCheckmarkRowsGroupWithContent:backingGeoConfigKey:get:set:", &stru_1011E5380, MapsConfig_CarPlayDefaultHybridInstrumentClusterCameraStyle, off_1014B52D8, &stru_1011E53A0, &stru_1011E53C0);

}

void sub_100B5D308(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  MapsDebugCheckmarkRowsGroup *v4;

  v4 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v4, "addRowWithTitle:value:", CFSTR("Trench"), &off_101270990);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v4, "addRowWithTitle:value:", CFSTR("Overview"), &off_1012709A8);

}

id sub_100B5D368(id a1)
{
  return +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", GEOConfigGetInteger(MapsConfig_CarPlayDefaultCenterConsoleCameraStyle, off_1014B52C8));
}

void sub_100B5D3A0(id a1, id a2)
{
  id v2;

  v2 = objc_msgSend(a2, "integerValue");
  GEOConfigSetInteger(MapsConfig_CarPlayDefaultCenterConsoleCameraStyle, off_1014B52C8, v2);
}

void sub_100B5D3C8(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  MapsDebugCheckmarkRowsGroup *v4;

  v4 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v4, "addRowWithTitle:value:", CFSTR("Trench"), &off_101270990);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v4, "addRowWithTitle:value:", CFSTR("Overview"), &off_1012709A8);

}

id sub_100B5D428(id a1)
{
  return +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", GEOConfigGetInteger(MapsConfig_CarPlayDefaultHybridInstrumentClusterCameraStyle, off_1014B52D8));
}

void sub_100B5D460(id a1, id a2)
{
  id v2;

  v2 = objc_msgSend(a2, "integerValue");
  GEOConfigSetInteger(MapsConfig_CarPlayDefaultHybridInstrumentClusterCameraStyle, off_1014B52D8, v2);
}

void sub_100B5D488(id a1, MapsDebugCheckmarkRowsGroup *a2, BOOL a3)
{
  _BOOL4 v3;
  id v4;
  id v5;
  id v6;
  id v7;
  MapsDebugCheckmarkRowsGroup *v8;

  v3 = a3;
  v8 = a2;
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v8, "addRowWithTitle:value:", CFSTR("Unspecified"), &off_1012708B8);
  v5 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v8, "addRowWithTitle:value:", CFSTR("Enabled"), &off_1012708D0);
  v6 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v8, "addRowWithTitle:value:", CFSTR("Disabled"), &off_1012708E8);
  if (v3)
    v7 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v8, "addRowWithTitle:value:", CFSTR("User"), &off_101270900);

}

void sub_100B5D538(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100B5D5F8;
  v6[3] = &unk_1011E5428;
  v7 = *(id *)(a1 + 32);
  v4 = objc_msgSend(v3, "addCheckmarkRowsGroupWithContent:backingGeoConfigKey:get:set:", v6, MapsConfig_CarPlayHybridInstrumentClusterShowHeadingIndicatorOverride, off_1014B51B8, &stru_1011E5448, &stru_1011E5468);
  v5 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Clear override"), &stru_1011E5488);

}

uint64_t sub_100B5D5F8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_100B5D608(id a1)
{
  return +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", GEOConfigGetUInteger(MapsConfig_CarPlayHybridInstrumentClusterShowHeadingIndicatorOverride, off_1014B51B8));
}

void sub_100B5D640(id a1, id a2)
{
  id v2;

  v2 = objc_msgSend(a2, "unsignedIntegerValue");
  GEOConfigSetUInteger(MapsConfig_CarPlayHybridInstrumentClusterShowHeadingIndicatorOverride, off_1014B51B8, v2);
}

void sub_100B5D668(id a1)
{
  _GEOConfigRemoveValue(MapsConfig_CarPlayHybridInstrumentClusterShowHeadingIndicatorOverride, off_1014B51B8);
}

void sub_100B5D678(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100B5D738;
  v6[3] = &unk_1011E5428;
  v7 = *(id *)(a1 + 32);
  v4 = objc_msgSend(v3, "addCheckmarkRowsGroupWithContent:backingGeoConfigKey:get:set:", v6, MapsConfig_CarPlayHybridInstrumentClusterShowSpeedLimitOverride, off_1014B51C8, &stru_1011E54A8, &stru_1011E54C8);
  v5 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Clear override"), &stru_1011E54E8);

}

uint64_t sub_100B5D738(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_100B5D748(id a1)
{
  return +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", GEOConfigGetUInteger(MapsConfig_CarPlayHybridInstrumentClusterShowSpeedLimitOverride, off_1014B51C8));
}

void sub_100B5D780(id a1, id a2)
{
  id v2;

  v2 = objc_msgSend(a2, "unsignedIntegerValue");
  GEOConfigSetUInteger(MapsConfig_CarPlayHybridInstrumentClusterShowSpeedLimitOverride, off_1014B51C8, v2);
}

void sub_100B5D7A8(id a1)
{
  _GEOConfigRemoveValue(MapsConfig_CarPlayHybridInstrumentClusterShowSpeedLimitOverride, off_1014B51C8);
}

void sub_100B5D7B8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100B5D878;
  v6[3] = &unk_1011E5428;
  v7 = *(id *)(a1 + 32);
  v4 = objc_msgSend(v3, "addCheckmarkRowsGroupWithContent:backingGeoConfigKey:get:set:", v6, MapsConfig_CarPlayHybridInstrumentClusterShowETATrayOverride, off_1014B51D8, &stru_1011E5508, &stru_1011E5528);
  v5 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Clear override"), &stru_1011E5548);

}

uint64_t sub_100B5D878(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_100B5D888(id a1)
{
  return +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", GEOConfigGetUInteger(MapsConfig_CarPlayHybridInstrumentClusterShowETATrayOverride, off_1014B51D8));
}

void sub_100B5D8C0(id a1, id a2)
{
  id v2;

  v2 = objc_msgSend(a2, "unsignedIntegerValue");
  GEOConfigSetUInteger(MapsConfig_CarPlayHybridInstrumentClusterShowETATrayOverride, off_1014B51D8, v2);
}

void sub_100B5D8E8(id a1)
{
  _GEOConfigRemoveValue(MapsConfig_CarPlayHybridInstrumentClusterShowETATrayOverride, off_1014B51D8);
}

void sub_100B5D8F8(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addButtonRowWithTitle:action:](a2, "addButtonRowWithTitle:action:", CFSTR("Clear all overrides"), &stru_1011E5588);
}

void sub_100B5D928(id a1)
{
  _GEOConfigRemoveValue(MapsConfig_HybridInstrumentClusterEnabled, off_1014B4938);
  _GEOConfigRemoveValue(MapsConfig_CarPlayHybridInstrumentClusterEverywhere, off_1014B51A8);
  _GEOConfigRemoveValue(MapsConfig_HybridInstrumentClusterDynamicScalingEnabled, off_1014B5388);
  _GEOConfigRemoveValue(MapsConfig_CarPlayHybridInstrumentClusterDynamicScaleBaselineScreenPixelWidth, off_1014B52F8);
  _GEOConfigRemoveValue(MapsConfig_CarPlayHybridInstrumentClusterDynamicScaleBaselineScreenPixelHeight, off_1014B5308);
  _GEOConfigRemoveValue(MapsConfig_CarPlayHybridInstrumentClusterDynamicScaleBaselineScreenPhysicalWidth, off_1014B5318);
  _GEOConfigRemoveValue(MapsConfig_CarPlayHybridInstrumentClusterDynamicScaleBaselineScreenPhysicalHeight, off_1014B5328);
  _GEOConfigRemoveValue(MapsConfig_CarPlayHybridInstrumentClusterDynamicScaleBaselineManeuverPixelWidth, off_1014B5338);
  _GEOConfigRemoveValue(MapsConfig_CarPlayHybridInstrumentClusterDynamicScaleBaselineManeuverPixelHeight, off_1014B5348);
  _GEOConfigRemoveValue(MapsConfig_CarPlayHybridInstrumentClusterDynamicScaleBaselineContentScale, off_1014B52E8);
  _GEOConfigRemoveValue(MapsConfig_CarPlayHybridInstrumentClusterScreenPhysicalSizeDebugWidthOverride, off_1014B5368);
  _GEOConfigRemoveValue(MapsConfig_CarPlayHybridInstrumentClusterScreenPhysicalSizeDebugHeightOverride, off_1014B5378);
  _GEOConfigRemoveValue(MapsConfig_HybridInstrumentClusterDynamicPointScaleValueOverride, off_1014B5408);
  _GEOConfigRemoveValue(MapsConfig_HybridInstrumentClusterDynamicPixelScaleValueOverride, off_1014B5418);
  _GEOConfigRemoveValue(MapsConfig_HybridInstrumentClusterGuidanceCardEnabled, off_1014B4D38);
  _GEOConfigRemoveValue(MapsConfig_CarPlayHybridInstrumentClusterHideSecondaryGuidance, off_1014B51E8);
  _GEOConfigRemoveValue(MapsConfig_CarPlayHybridInstrumentClusterGuidanceCardVisibleOverviewNarrow, off_1014B51F8);
  _GEOConfigRemoveValue(MapsConfig_CarPlayHybridInstrumentClusterGuidanceCardVisibleDetailNarrow, off_1014B5208);
  _GEOConfigRemoveValue(MapsConfig_CarPlayHybridInstrumentClusterETATrayVisibleOverviewNarrow, off_1014B5218);
  _GEOConfigRemoveValue(MapsConfig_CarPlayHybridInstrumentClusterETATrayVisibleDetailNarrow, off_1014B5228);
  _GEOConfigRemoveValue(MapsConfig_CarPlayHybridInstrumentClusterGuidanceCardVisibleOverviewWide, off_1014B5238);
  _GEOConfigRemoveValue(MapsConfig_CarPlayHybridInstrumentClusterGuidanceCardVisibleDetailWide, off_1014B5248);
  _GEOConfigRemoveValue(MapsConfig_CarPlayHybridInstrumentClusterETATrayVisibleOverviewWide, off_1014B5258);
  _GEOConfigRemoveValue(MapsConfig_CarPlayHybridInstrumentClusterETATrayVisibleDetailWide, off_1014B5268);
  _GEOConfigRemoveValue(MapsConfig_HybridInstrumentClusterFlexibleUIEnabled, off_1014B5398);
  _GEOConfigRemoveValue(MapsConfig_HybridInstrumentClusterFlexibleUILayoutOverride, off_1014B53B8);
  _GEOConfigRemoveValue(MapsConfig_HybridInstrumentClusterFlexibleUIETATrayVisibilityRequirementRatio, off_1014B53C8);
  _GEOConfigRemoveValue(MapsConfig_HybridInstrumentClusterAlignmentStyleOverride, off_1014B53D8);
  _GEOConfigRemoveValue(MapsConfig_HybridInstrumentClusterAlignmentStyleManeuverScaledWidthMultiple, off_1014B53E8);
  _GEOConfigRemoveValue(MapsConfig_HybridInstrumentClusterCardAlignmentEnabled, off_1014B53A8);
  _GEOConfigRemoveValue(MapsConfig_HybridInstrumentClusterNarrowAlignmentStyleCardMaxWidth, off_1014B5448);
  _GEOConfigRemoveValue(MapsConfig_HybridInstrumentClusterFlexibleMapInsetCenteringScaledManeuverWidthMultipleRequirement, off_1014B5458);
  _GEOConfigRemoveValue(MapsConfig_CarPlayHybridInstrumentClusterAlignmentOverride, off_1014B5288);
  _GEOConfigRemoveValue(MapsConfig_CarPlayDefaultCenterConsoleCameraStyle, off_1014B52C8);
  _GEOConfigRemoveValue(MapsConfig_CarPlayDefaultHybridInstrumentClusterCameraStyle, off_1014B52D8);
  _GEOConfigRemoveValue(MapsConfig_CarPlayHybridInstrumentClusterShowHeadingIndicatorOverride, off_1014B51B8);
  _GEOConfigRemoveValue(MapsConfig_CarPlayHybridInstrumentClusterShowSpeedLimitOverride, off_1014B51C8);
  _GEOConfigRemoveValue(MapsConfig_CarPlayHybridInstrumentClusterShowETATrayOverride, off_1014B51D8);
}

void sub_100B5DBC4(id a1, MapsDebugValuesViewController *a2)
{
  id v2;
  id v3;
  MapsDebugValuesViewController *v4;

  v4 = a2;
  v2 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v4, "addSectionWithTitle:content:", CFSTR("Guides"), &stru_1011E55C8);
  v3 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v4, "addSectionWithTitle:content:", CFSTR("Tech Debt"), &stru_1011E55E8);

}

void sub_100B5DC24(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](a2, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enable Server Results"), MapsConfig_MapsHomeResultEnabled, off_1014B3E78);
}

void sub_100B5DC58(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](a2, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enable Collection View"), MapsConfig_MapsHomeEnableUICollectionView, off_1014B3ED8);
}

void sub_100B5DCBC(id a1, MapsDebugValuesViewController *a2)
{
  MapsDebugValuesViewController *v2;
  id v3;
  _QWORD v4[4];
  id v5;
  id location;

  v2 = a2;
  objc_initWeak(&location, v2);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100B5DD7C;
  v4[3] = &unk_1011AEAC8;
  objc_copyWeak(&v5, &location);
  v3 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("DOoM and L&G"), v4);
  objc_destroyWeak(&v5);
  objc_destroyWeak(&location);

}

void sub_100B5DD60(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100B5DD7C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  _QWORD v37[4];
  id v38;
  id v39;

  v3 = a2;
  v4 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Run DOoM/L&G code"), &stru_1011E5628, &stru_1011E5648);
  v5 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Allow DOoM to trigger"), &stru_1011E5668, &stru_1011E5688);
  v6 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Show Test Notification"), &stru_1011E56A8);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NavdDoomCache loadFromFilePath:](NavdDoomCache, "loadFromFilePath:", 0));
  v8 = v7;
  if (v7)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "mostRecentDestinations"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "firstObject"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "undecoratedTitle"));

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "mostRecentDoomWindow"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "startDate"));
    v14 = MapsSuggestionsStringFromDate();
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);

    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "mostRecentDoomWindow"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "endDate"));
    v18 = MapsSuggestionsStringFromDate();
    v19 = (void *)objc_claimAutoreleasedReturnValue(v18);

    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "nextWakeup"));
    v21 = MapsSuggestionsStringFromDate();
    v22 = (void *)objc_claimAutoreleasedReturnValue(v21);

    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "mostRecentModification"));
    v24 = MapsSuggestionsStringFromDate();
    v25 = (void *)objc_claimAutoreleasedReturnValue(v24);

    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "cachedIncidents"));
    v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%lu"), objc_msgSend(v26, "count")));

    v28 = objc_msgSend(v3, "addEmptySectionBannerRowWithTitle:", CFSTR("Latest Doom Snapshot"));
    v29 = objc_msgSend(v3, "addReadOnlyRowWithTitle:value:", CFSTR("DOoM Window Start"), v15);
    v30 = objc_msgSend(v3, "addReadOnlyRowWithTitle:value:", CFSTR("DOoM Window End"), v19);
    v31 = objc_msgSend(v3, "addReadOnlyRowWithTitle:value:", CFSTR("Top Destination"), v11);
    v32 = objc_msgSend(v3, "addReadOnlyRowWithTitle:value:", CFSTR("Next Wakeup"), v22);
    v33 = objc_msgSend(v3, "addReadOnlyRowWithTitle:value:", CFSTR("Last Modified"), v25);
    v34 = objc_msgSend(v3, "addReadOnlyRowWithTitle:value:", CFSTR("Cached Incidents"), v27);
    v37[0] = _NSConcreteStackBlock;
    v37[1] = 3221225472;
    v37[2] = sub_100B5E1E8;
    v37[3] = &unk_1011AEAA0;
    v38 = v8;
    objc_copyWeak(&v39, (id *)(a1 + 32));
    v35 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Clear Cached Incidents"), v37);
    objc_destroyWeak(&v39);

  }
  else
  {
    v36 = objc_msgSend(v3, "addEmptySectionBannerRowWithTitle:", CFSTR("No Current Snapshot"));
  }

}

void sub_100B5E0CC(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100B5E0E0(id a1)
{
  return GEOConfigGetBOOL(GEOConfigNavdDoomEnabled, off_1014BA3D0);
}

void sub_100B5E0F0(id a1, BOOL a2)
{
  GEOConfigSetSyncBOOL(GEOConfigNavdDoomEnabled, off_1014BA3D0, a2);
}

BOOL sub_100B5E104(id a1)
{
  return GEOConfigGetBOOL(GEOConfigNavdDoomRoutesEnabled, off_1014BA3E0);
}

void sub_100B5E114(id a1, BOOL a2)
{
  GEOConfigSetSyncBOOL(GEOConfigNavdDoomRoutesEnabled, off_1014BA3E0, a2);
}

void sub_100B5E128(id a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(+[MapsSuggestionsEntry __debug_fakeHomeEntry](MapsSuggestionsEntry, "__debug_fakeHomeEntry"));
  objc_msgSend(v5, "archiveDestination");
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "undecoratedTitle"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Take 280 to %@"), v1));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "notificationDetailsWithTitle:message:", v2, CFSTR("Heavy traffic on 101")));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MSPMapsPushDaemonRemoteProxy sharedInstance](MSPMapsPushDaemonRemoteProxy, "sharedInstance"));
  objc_msgSend(v4, "showPredictedRouteTrafficIncidentBulletinForCommuteDetails:", v3);

}

void sub_100B5E1E8(uint64_t a1)
{
  id WeakRetained;

  objc_msgSend(*(id *)(a1 + 32), "setCachedIncidents:", 0);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "reloadData");

}

void sub_100B5E25C(id a1, MapsDebugValuesViewController *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugValuesViewController *v5;

  v5 = a2;
  v2 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v5, "addSectionWithTitle:content:", CFSTR("Transit"), &stru_1011E56E8);
  v3 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v5, "addSectionWithTitle:content:", CFSTR("Nearby Transit"), &stru_1011E5808);
  v4 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v5, "addSectionWithTitle:content:", CFSTR("Transit + Pay"), &stru_1011E5868);

}

void sub_100B5E2DC(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  MapsDebugTableSection *v12;

  v12 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v12, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Show Routing Apps Sheet"), CFSTR("EnableRoutingAppsSheet"));
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v12, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Enable Re-routing"), CFSTR("__internal__EnableTransitRerouting"));
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v12, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Enable Debug Local Instruction Strings"), CFSTR("__internal__EnableTransitDebugLocalInstruction"));
  v5 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v12, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Max vehicles displayed"), CFSTR("1"), 1, &stru_1011E5708, &stru_1011E5728);
  v6 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v12, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Suppress summary in boarding info"), CFSTR("__internal_MapsTransitDebugSuppressSummaryBoardingInfo"));
  v7 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v12, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Suppress reference date update timer"), MapKitConfig_DisableTransitReferenceDateUpdater[0], MapKitConfig_DisableTransitReferenceDateUpdater[1]);
  v8 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v12, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Suppress transit route update timer"), GeoServicesConfig_SuppressTransitRealtimeUpdates[0], GeoServicesConfig_SuppressTransitRealtimeUpdates[1]);
  v9 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v12, "addSwitchRowWithTitle:get:set:", CFSTR("Enable Pre-Flight Markets"), &stru_1011E5748, &stru_1011E5768);
  v10 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v12, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Realtime update initial request delay"), CFSTR("seconds"), 1, &stru_1011E5788, &stru_1011E57A8);
  v11 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v12, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Realtime update refresh rate override"), CFSTR("seconds"), 1, &stru_1011E57C8, &stru_1011E57E8);

}

NSString *__cdecl sub_100B5E490(id a1)
{
  NSNumber *v1;
  void *v2;
  void *v3;

  v1 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", GEOConfigGetUInteger(MapsConfig_TransitMaximumNumberOfVehiclesToDisplay, off_1014B2D88));
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "stringValue"));

  return (NSString *)v3;
}

void sub_100B5E4E8(id a1, NSString *a2)
{
  NSInteger v2;
  NSString *v3;

  v3 = a2;
  if (-[NSString length](v3, "length"))
  {
    v2 = -[NSString integerValue](v3, "integerValue");
    GEOConfigSetUInteger(MapsConfig_TransitMaximumNumberOfVehiclesToDisplay, off_1014B2D88, v2);
  }
  else
  {
    _GEOConfigRemoveValue(MapsConfig_TransitMaximumNumberOfVehiclesToDisplay, off_1014B2D88);
  }

}

void sub_100B5E55C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_100B5E580(void *a1, int a2)
{
  objc_begin_catch(a1);
  if (a2 == 2)
    objc_end_catch();
  JUMPOUT(0x100B5E518);
}

BOOL sub_100B5E5AC(id a1)
{
  uint64_t Dictionary;
  void *v2;
  void *v3;
  uint64_t v4;
  unsigned __int8 v5;

  Dictionary = GEOConfigGetDictionary(GeoServicesConfig_AdditionalTransitMarkets[0], GeoServicesConfig_AdditionalTransitMarkets[1]);
  v2 = (void *)objc_claimAutoreleasedReturnValue(Dictionary);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("*")));

  if (v3 && (v4 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v3, v4) & 1) != 0))
    v5 = objc_msgSend(v3, "BOOLValue");
  else
    v5 = 0;

  return v5;
}

void sub_100B5E630(id a1, BOOL a2)
{
  _BOOL8 v2;
  uint64_t Dictionary;
  void *v4;
  void *v5;
  id v6;
  id v7;

  v2 = a2;
  Dictionary = GEOConfigGetDictionary(GeoServicesConfig_AdditionalTransitMarkets[0], GeoServicesConfig_AdditionalTransitMarkets[1]);
  v4 = (void *)objc_claimAutoreleasedReturnValue(Dictionary);
  v7 = objc_msgSend(v4, "mutableCopy");

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v2));
  objc_msgSend(v7, "setObject:forKeyedSubscript:", v5, CFSTR("*"));

  GEOConfigSetDictionary(GeoServicesConfig_AdditionalTransitMarkets[0], GeoServicesConfig_AdditionalTransitMarkets[1], v7);
  v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("com.apple.geoservices"), "stringByAppendingString:", CFSTR(".siri_data_changed"))));
  notify_post((const char *)objc_msgSend(v6, "UTF8String"));

}

NSString *__cdecl sub_100B5E6EC(id a1)
{
  NSNumber *v1;
  void *v2;
  void *v3;

  v1 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", GEOConfigGetDouble(GeoServicesConfig_RealtimeTransitInitialUpdateDelay[0], GeoServicesConfig_RealtimeTransitInitialUpdateDelay[1]));
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "stringValue"));

  return (NSString *)v3;
}

void sub_100B5E740(id a1, NSString *a2)
{
  double v2;
  NSString *v3;

  v3 = a2;
  if (-[NSString length](v3, "length"))
  {
    v2 = (double)(unint64_t)-[NSString integerValue](v3, "integerValue");
    GEOConfigSetDouble(GeoServicesConfig_RealtimeTransitInitialUpdateDelay[0], GeoServicesConfig_RealtimeTransitInitialUpdateDelay[1], v2);
  }
  else
  {
    _GEOConfigRemoveValue(GeoServicesConfig_RealtimeTransitInitialUpdateDelay[0], GeoServicesConfig_RealtimeTransitInitialUpdateDelay[1]);
  }

}

void sub_100B5E7B4(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_100B5E7D8(void *a1, int a2)
{
  objc_begin_catch(a1);
  if (a2 == 2)
    objc_end_catch();
  JUMPOUT(0x100B5E770);
}

NSString *__cdecl sub_100B5E804(id a1)
{
  NSNumber *v1;
  void *v2;
  void *v3;

  v1 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", GEOConfigGetDouble(GeoServicesConfig_RealtimeTransitUpdateIntervalOverride[0], GeoServicesConfig_RealtimeTransitUpdateIntervalOverride[1]));
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "stringValue"));

  return (NSString *)v3;
}

void sub_100B5E858(id a1, NSString *a2)
{
  double v2;
  NSString *v3;

  v3 = a2;
  if (-[NSString length](v3, "length"))
  {
    v2 = (double)(unint64_t)-[NSString integerValue](v3, "integerValue");
    GEOConfigSetDouble(GeoServicesConfig_RealtimeTransitUpdateIntervalOverride[0], GeoServicesConfig_RealtimeTransitUpdateIntervalOverride[1], v2);
  }
  else
  {
    _GEOConfigRemoveValue(GeoServicesConfig_RealtimeTransitUpdateIntervalOverride[0], GeoServicesConfig_RealtimeTransitUpdateIntervalOverride[1]);
  }

}

void sub_100B5E8CC(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_100B5E950(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  MapsDebugTableSection *v6;

  v6 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v6, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Force isTransitUserHere"), CFSTR("__internal__NearbyTransitDebugForceTransitUser"));
  v3 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v6, "addButtonRowWithTitle:action:", CFSTR("Reset Nearby Transit tip state history"), &stru_1011E5828);
  v4 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v6, "addButtonRowWithTitle:action:", CFSTR("Reset teachable moment history"), &stru_1011E5848);
  v5 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v6, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Use map center after panning (ignore user location)"), CFSTR("__internal__NearbyTransitAlwaysFollowMap"));

}

void sub_100B5E9F0(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v1, "removeObjectForKey:", CFSTR("__internal__NearbyTransitTipInfoKey"));

}

void sub_100B5EA2C(id a1)
{
  void *v1;
  id v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v1, "removeObjectForKey:", CFSTR("__internal__NearbyTransitTeachableMomentShownKey"));

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v2, "removeObjectForKey:", CFSTR("__internal__NearbyTransitTeachableMomentShownCardTimes"));

}

void sub_100B5EA90(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addButtonRowWithTitle:action:](a2, "addButtonRowWithTitle:action:", CFSTR("Reset Transit + Pay tip state history"), &stru_1011E5888);
}

void sub_100B5EAC0(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v1, "removeObjectForKey:", CFSTR("__internal__TransitPayTipInfoKey"));

}

void sub_100B5EB2C(id a1, MapsDebugValuesViewController *a2)
{
  id v2;
  id v3;
  MapsDebugValuesViewController *v4;

  v4 = a2;
  v2 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v4, "addSectionWithTitle:content:", CFSTR("Logging"), &stru_1011E58C8);
  v3 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v4, "addSectionWithTitle:content:", CFSTR("Transportation Mode"), &stru_1011E5928);

}

void sub_100B5EB8C(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(-[MapsDebugTableSection addSwitchRowWithTitle:get:set:](a2, "addSwitchRowWithTitle:get:set:", CFSTR("Verbose logging"), &stru_1011E58E8, &stru_1011E5908));
  objc_msgSend(v2, "setSubtitle:", CFSTR("Adds serialized suggestion entries to logs."));

}

void sub_100B5EBE0(id a1, BOOL a2)
{
  MapsSuggestionsLoggingEnableVerbose(a2);
}

void sub_100B5EBE8(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(-[MapsDebugTableSection addSwitchRowWithTitle:get:set:](a2, "addSwitchRowWithTitle:get:set:", CFSTR("MSg Transportation Mode Prediction"), &stru_1011E5948, &stru_1011E5968));
  objc_msgSend(v2, "setSubtitle:", CFSTR("Toggle MSg-based transportation mode prediction"));

}

void sub_100B5EC3C(id a1, BOOL a2)
{
  MapsSuggestionsSetTransportationModeDebugPanelSetting(a2);
}

void sub_100B5EC74(id a1, MapsDebugValuesViewController *a2)
{
  id v2;

  v2 = -[MapsDebugValuesViewController addSectionWithTitle:content:](a2, "addSectionWithTitle:content:", CFSTR("Find My Car"), &stru_1011E59A8);
}

void sub_100B5ECA4(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  MapsDebugTableSection *v6;

  v6 = a2;
  v2 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v6, "addButtonRowWithTitle:action:", CFSTR("Add MT02 parked car"), &stru_1011E59C8);
  v3 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v6, "addButtonRowWithTitle:action:", CFSTR("Show Notification"), &stru_1011E59E8);
  v4 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v6, "addButtonRowWithTitle:action:", CFSTR("Show Multi-Car Replacement Notification"), &stru_1011E5A08);
  v5 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v6, "addButtonRowWithTitle:action:", CFSTR("Remove Parked Car"), &stru_1011E5A28);

}

void sub_100B5ED44(id a1)
{
  void *v1;
  id v2;

  v2 = objc_msgSend(objc_alloc((Class)CLLocation), "initWithLatitude:longitude:", 37.391576, -122.032652);
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[ParkedCarManager sharedManager](ParkedCarManager, "sharedManager"));
  objc_msgSend(v1, "_debug_addParkedCarAtLocation:", v2);

}

void sub_100B5EDAC(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[ParkedCarManager sharedManager](ParkedCarManager, "sharedManager"));
  objc_msgSend(v1, "_debug_showParkedCarNotification");

}

void sub_100B5EDE0(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[ParkedCarManager sharedManager](ParkedCarManager, "sharedManager"));
  objc_msgSend(v1, "_debug_showParkedCarReplacementNotification");

}

void sub_100B5EE14(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[ParkedCarManager sharedManager](ParkedCarManager, "sharedManager"));
  objc_msgSend(v1, "removeParkedCar");

}

void sub_100B5EE78(id a1, MapsDebugValuesViewController *a2)
{
  id v2;

  v2 = -[MapsDebugValuesViewController addSectionWithTitle:content:](a2, "addSectionWithTitle:content:", CFSTR("Personalized Maps"), &stru_1011E5A68);
}

void sub_100B5EEA8(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  double v13;
  double v14;
  id v15;
  MapsDebugTableSection *v16;

  v16 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v16, "addSwitchRowWithTitle:get:set:", CFSTR("Search for 'Home' and 'Work' use address results"), &stru_1011E5A88, &stru_1011E5AA8);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v16, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Enable Calendar events on map"), CFSTR("__personalizedMapsCalendarEnabled"));
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v16, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Disable text only calendar events"), CFSTR("__personalizedMapsCalendarDisableCanonicalLookupSearch"));
  v5 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v16, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Show cluster count in subtitle"), CFSTR("__personalizedMapsShowClusterCountInSubtitle"));
  v6 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:defaultsKey:](v16, "addTextFieldRowWithTitle:placeholderText:inputType:defaultsKey:", CFSTR("Override POI locale"), CFSTR("locale, eg 'en'"), 0, CFSTR("__personalizedMapsOverrideLocale"));
  v7 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v16, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Make all injected POIs airports"), CFSTR("__personalizedMapsInjectedPOIsLookLikeAirports"));
  v8 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v16, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Fixed Zoom on cluster"), CFSTR("__personalizedMapsFixedClusterZoom"));
  v9 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v16, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Calendar items use Generic POI type"), CFSTR("__personalizedMapsCalendarItemsUseGenericPOI"));
  v10 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v16, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Show favorites on map"), CFSTR("__personalizedMapsShowFavorites"));
  v11 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v16, "addSwitchRowWithTitle:get:set:", CFSTR("Sync address corrections & labels"), &stru_1011E5AC8, &stru_1011E5AE8);
  v12 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v16, "addSwitchRowWithTitle:get:set:", CFSTR("Write sync corrections to Core Routine"), &stru_1011E5B08, &stru_1011E5B28);
  LODWORD(v13) = 981668463;
  LODWORD(v14) = 1.0;
  v15 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:](v16, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Deselect Clusters when zooming"), CFSTR("When gesture scale is +/- %.3f of 1.0"), &stru_1011E5B48, &stru_1011E5B68, v13, v14);

}

BOOL sub_100B5F088(id a1)
{
  return GEOConfigGetBOOL(MapsConfig_UseAddressResultsForHomeAndWork, off_1014B2F68);
}

void sub_100B5F098(id a1, BOOL a2)
{
  GEOConfigSetBOOL(MapsConfig_UseAddressResultsForHomeAndWork, off_1014B2F68, a2);
}

BOOL sub_100B5F0AC(id a1)
{
  return GEOConfigGetBOOL(MapsConfig_SyncAddressCorrectionsData, off_1014B2F78);
}

void sub_100B5F0BC(id a1, BOOL a2)
{
  GEOConfigSetBOOL(MapsConfig_SyncAddressCorrectionsData, off_1014B2F78, a2);
}

BOOL sub_100B5F0D0(id a1)
{
  return GEOConfigGetBOOL(MapsConfig_WriteSyncDataToCoreRoutine, off_1014B2E18);
}

void sub_100B5F0E0(id a1, BOOL a2)
{
  GEOConfigSetBOOL(MapsConfig_WriteSyncDataToCoreRoutine, off_1014B2E18, a2);
}

float sub_100B5F0F4(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v1, "floatForKey:", CFSTR("__personalizedMapsZoomAmountToClearClusterSelection"));
  v3 = v2;

  return v3;
}

void sub_100B5F140(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setFloat:forKey:", CFSTR("__personalizedMapsZoomAmountToClearClusterSelection"), v3);

}

void sub_100B5F1BC(id a1, MapsDebugValuesViewController *a2)
{
  id v2;

  v2 = -[MapsDebugValuesViewController addSectionWithTitle:content:](a2, "addSectionWithTitle:content:", CFSTR("Autocomplete"), &stru_1011E5BA8);
}

void sub_100B5F1EC(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  double v6;
  double v7;
  id v8;
  id v9;
  id v10;
  MapsDebugTableSection *v11;

  v11 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v11, "addSwitchRowWithTitle:get:set:", CFSTR("Use CoreDuet to rank contacts"), &stru_1011E5BC8, &stru_1011E5BE8);
  v3 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyInteger:](v11, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyInteger:", CFSTR("Local backfill for short query"), CFSTR("backfill (short)"), 1, MapsConfig_AutocompleteLocalBackfillForShortQuery, off_1014B3068);
  v4 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyInteger:](v11, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyInteger:", CFSTR("Local backfill for long query"), CFSTR("backfill (long)"), 1, MapsConfig_AutocompleteLocalBackfillForLongQuery, off_1014B3078);
  v5 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyInteger:](v11, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyInteger:", CFSTR("Max length of short query"), CFSTR("length"), 1, MapsConfig_AutocompleteShortQueryMaxLength, off_1014B3058);
  LODWORD(v6) = 1157234688;
  LODWORD(v7) = 0;
  v8 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:](v11, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Minimum Latency"), CFSTR("%.0f milliseconds"), &stru_1011E5C08, &stru_1011E5C28, v7, v6);
  v9 = -[MapsDebugTableSection addNavigationRowForViewControllerClass:](v11, "addNavigationRowForViewControllerClass:", objc_opt_class(SearchDebugViewController));
  v10 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v11, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Disable AC in Mac routing"), CFSTR("__internal_DisableMacRoutingAutocomplete"));

}

BOOL sub_100B5F340(id a1)
{
  return GEOConfigGetBOOL(MapsConfig_UseCoreDuetToRankContactsInAC, off_1014B2F88);
}

void sub_100B5F350(id a1, BOOL a2)
{
  GEOConfigSetBOOL(MapsConfig_UseCoreDuetToRankContactsInAC, off_1014B2F88, a2);
}

float sub_100B5F364(id a1)
{
  float Double;

  Double = GEOConfigGetDouble(MapKitConfig_AutocompleteMinResponseTimeOverride[0], MapKitConfig_AutocompleteMinResponseTimeOverride[1]);
  return Double * 1000.0;
}

void sub_100B5F394(id a1, float a2)
{
  if (fabsf(a2) >= 0.01)
    GEOConfigSetDouble(MapKitConfig_AutocompleteMinResponseTimeOverride[0], MapKitConfig_AutocompleteMinResponseTimeOverride[1], (float)(a2 / 1000.0));
  else
    _GEOConfigRemoveValue(MapKitConfig_AutocompleteMinResponseTimeOverride[0], MapKitConfig_AutocompleteMinResponseTimeOverride[1]);
}

void sub_100B5F40C(id a1, MapsDebugValuesViewController *a2)
{
  id v2;
  MapsDebugValuesViewController *v3;

  v3 = a2;
  if (MapsFeature_IsEnabled_ShelbyvilleSearch(-[MapsDebugValuesViewController addSectionWithTitle:content:](v3, "addSectionWithTitle:content:", CFSTR("Search"), &stru_1011E5C68)))v2 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v3, "addSectionWithTitle:content:", CFSTR("Place Summary"), &stru_1011E5CC8);

}

void sub_100B5F474(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  MapsDebugTableSection *v6;

  v6 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v6, "addSwitchRowWithTitle:get:set:", CFSTR("Draw results viewport on map"), &stru_1011E5C88, &stru_1011E5CA8);
  if (MapsFeature_IsEnabled_ShelbyvilleSearch(-[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v6, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Allow SAR in all TbT"), CFSTR("__internal__NavigationAllowSAREverywhere"))))
  {
    v3 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:geoConfigKeyInteger:changeHandler:](v6, "addSliderRowWithTitle:subtitleStringFormat:min:max:geoConfigKeyInteger:changeHandler:", CFSTR("Number of auxiliary tier search results"), CFSTR("%1.0f auxiliary results"), 0, 500, MapsConfig_SearchRequestAuxiliaryTierNumberOfResults, off_1014B3DD8, 0);
    v4 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v6, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Auto redo search prototype"), MapsConfig_SearchAutoRedoPrototype, off_1014B3DE8);
  }
  v5 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v6, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Force topographic features"), MapsConfig_SearchInfoForceTopographicFeaturesEnabled, off_1014B5468);

}

BOOL sub_100B5F564(id a1)
{
  return GEOConfigGetBOOL(MapsConfig_DebugDrawSearchResultsViewportFrame, off_1014B3298);
}

void sub_100B5F574(id a1, BOOL a2)
{
  GEOConfigSetBOOL(MapsConfig_DebugDrawSearchResultsViewportFrame, off_1014B3298, a2);
}

void sub_100B5F588(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](a2, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Use Place Summary in Search Results and Autocomplete"), MapsConfig_UsePlaceSummary, off_1014B3FB8);
}

void sub_100B5F5EC(id a1, MapsDebugValuesViewController *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  MapsDebugValuesViewController *v6;

  v6 = a2;
  v2 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v6, "addSectionWithTitle:content:", 0, &stru_1011E5D08);
  v3 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v6, "addSectionWithTitle:content:", CFSTR("China AOI"), &stru_1011E5D28);
  v4 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v6, "addSectionWithTitle:content:", CFSTR("Ride Booking"), &stru_1011E5D48);
  v5 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v6, "addSectionWithTitle:content:", 0, &stru_1011E5DA8);

}

void sub_100B5F684(id a1, MapsDebugTableSection *a2)
{
  id v2;
  MapsDebugTableSection *v3;

  v3 = a2;
  v2 = -[MapsDebugTableSection addNavigationRowForViewControllerClass:](v3, "addNavigationRowForViewControllerClass:", objc_opt_class(ExtensionsDebugController));

}

void sub_100B5F6C8(id a1, MapsDebugTableSection *a2)
{
  void *v2;
  id v3;
  void *v4;
  id v5;
  MapsDebugTableSection *v6;

  v6 = a2;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:userDefaults:defaultsKey:](v6, "addSwitchRowWithTitle:userDefaults:defaultsKey:", CFSTR("Show place card link to first child"), v2, CFSTR("__mapsInternal_placeCardShowLinkToFirstChild"));

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v5 = -[MapsDebugTableSection addSwitchRowWithTitle:userDefaults:defaultsKey:](v6, "addSwitchRowWithTitle:userDefaults:defaultsKey:", CFSTR("Treat AOI POIs as Search Results"), v4, CFSTR("__internalChinaAOIInjectPOIsAsSearchResults"));

}

void sub_100B5F768(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  MapsDebugTableSection *v4;

  v4 = a2;
  v2 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v4, "addButtonRowWithTitle:action:", CFSTR("Clear completed ride dates cache"), &stru_1011E5D68);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:](v4, "addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:", CFSTR("Enable Ride Booking on iPad (Maps will quit)"), MapsConfig_EnableRideSharingiPad, off_1014B2EF8, 0, &stru_1011E5D88);

}

void sub_100B5F7D8(id a1)
{
  void *v1;
  id v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v1, "setObject:forKey:", &__NSDictionary0__struct, CFSTR("RideBookingCompletedRideIdentifiersAndDates"));

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v2, "synchronize");

}

void sub_100B5F840(id a1, BOOL a2)
{
  exit(0);
}

void sub_100B5F850(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](a2, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Feature Freedom"), CFSTR("MapsFeatureFreedom"));
}

void sub_100B5F8B0(id a1, MapsDebugValuesViewController *a2)
{
  id v2;

  v2 = -[MapsDebugValuesViewController addSectionWithTitle:content:](a2, "addSectionWithTitle:content:", CFSTR("CoreRecents"), &stru_1011E5DE8);
}

void sub_100B5F8E0(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  MapsDebugTableSection *v4;

  v4 = a2;
  v2 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v4, "addButtonRowWithTitle:action:", CFSTR("Clear System Recents"), &stru_1011E5E08);
  v3 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v4, "addButtonRowWithTitle:action:", CFSTR("Add Default Recent"), &stru_1011E5E28);

}

void sub_100B5F940(id a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[CRRecentContactsLibrary defaultInstance](CRRecentContactsLibrary, "defaultInstance"));
  v2 = objc_alloc_init((Class)CRSearchQuery);
  v8 = CRRecentsDomainMaps;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v8, 1));
  objc_msgSend(v2, "setDomains:", v3);

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRRecentContactsLibrary defaultInstance](CRRecentContactsLibrary, "defaultInstance"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100B5FA68;
  v6[3] = &unk_1011AE168;
  v7 = v1;
  v5 = v1;
  objc_msgSend(v4, "performRecentsSearch:queue:completion:", v2, &_dispatch_main_q, v6);

}

void sub_100B5FA68(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  BOOL v5;
  uint64_t v6;

  v3 = a2;
  if (objc_msgSend(v3, "count"))
  {
    v4 = *(void **)(a1 + 32);
    v6 = 0;
    if (objc_msgSend(v4, "removeRecentContacts:error:", v3, &v6))
      v5 = v6 == 0;
    else
      v5 = 0;
    if (!v5)
      NSLog(CFSTR("Cannot remove CoreRecents: %@"), v6);
  }

}

void sub_100B5FAD4(id a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[CRRecentContactsLibrary defaultInstance](CRRecentContactsLibrary, "defaultInstance"));
  v2 = objc_alloc_init((Class)CRSearchQuery);
  v8 = CRRecentsDomainMaps;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v8, 1));
  objc_msgSend(v2, "setDomains:", v3);

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRRecentContactsLibrary defaultInstance](CRRecentContactsLibrary, "defaultInstance"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100B5FBFC;
  v6[3] = &unk_1011AE168;
  v7 = v1;
  v5 = v1;
  objc_msgSend(v4, "performRecentsSearch:queue:completion:", v2, &_dispatch_main_q, v6);

}

void sub_100B5FBFC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  BOOL v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  const __CFString *v15;

  v3 = a2;
  if (objc_msgSend(v3, "count"))
  {
    v4 = *(void **)(a1 + 32);
    v12 = 0;
    if (objc_msgSend(v4, "removeRecentContacts:error:", v3, &v12))
      v5 = v12 == 0;
    else
      v5 = 0;
    if (!v5)
      NSLog(CFSTR("Cannot remove CoreRecents: %@"), v12);
  }
  v6 = CRAddressKindMapLocation;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v14 = CRRecentContactMetadataSubject;
  v15 = CFSTR("Default");
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v15, &v14, 1));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[CRRecentContactsLibrary recentEventForAddress:displayName:kind:date:weight:metadata:options:](CRRecentContactsLibrary, "recentEventForAddress:displayName:kind:date:weight:metadata:options:", CFSTR("706 Mission Street, SF CA 94103-3162"), CFSTR("706 Mission Street, SF"), v6, v7, 0, v8, 0));

  v10 = *(void **)(a1 + 32);
  v13 = v9;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v13, 1));
  objc_msgSend(v10, "recordContactEvents:recentsDomain:sendingAddress:completion:", v11, CRRecentsDomainMaps, 0, 0);

}

void sub_100B5FDF4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  _QWORD v6[5];

  v3 = a2;
  v4 = objc_msgSend(v3, "addSectionWithTitle:content:", &stru_1011EB268, &stru_1011E5E48);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100B5FEC4;
  v6[3] = &unk_1011B4BC0;
  v6[4] = *(_QWORD *)(a1 + 32);
  v5 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Reset Launch Alerts"), v6);

}

void sub_100B5FE90(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](a2, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Disable All Launch Alerts"), MapsConfig_PreventAllLaunchAlerts, off_1014B48C8);
}

void sub_100B5FEC4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  _QWORD v18[5];
  _QWORD v19[4];
  BOOL v20;
  _QWORD v21[5];

  v3 = a2;
  v4 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Set Declined Notifications DistantPast"), &stru_1011E5E68);
  v5 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Reset Notification Repeat Prompt Count"), &stru_1011E5E88);
  v6 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Reset Initial Notification Prompt Count"), &stru_1011E5EA8);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_100B60200;
  v21[3] = &unk_1011AC860;
  v21[4] = *(_QWORD *)(a1 + 32);
  v7 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Reset CoreLocation Auth"), v21);
  v8 = sub_1002A8AA0(*(void **)(a1 + 32));
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_100B60208;
  v19[3] = &unk_1011B26C0;
  v20 = v8 != 5;
  v9 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Reset Help Improve Maps"), v19);
  v10 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Reset Nav Trace Prompt"), &stru_1011E5EC8);
  v11 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Reset Precise Location Disabled Alert"), &stru_1011E5EE8);
  v12 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Reset What’s New"), &stru_1011E5F08);
  v13 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Reset Map Settings Tip"), &stru_1011E5F28);
  v14 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Reset Offline Place Card Download Tips"), &stru_1011E5F48);
  v15 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Reset Offline Maps Tips"), &stru_1011E5F68);
  if (MapsFeature_IsEnabled_HikingiOS())
    v16 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Reset Hiking Welcome Screen"), &stru_1011E5F88);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_100B60490;
  v18[3] = &unk_1011AC860;
  v18[4] = *(_QWORD *)(a1 + 32);
  v17 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Reset All"), v18);

}

void sub_100B6011C(id a1)
{
  void *v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate distantPast](NSDate, "distantPast"));
  objc_msgSend(v2, "setObject:forKey:", v1, CFSTR("MapsNotificationAuthLastPromptedDate"));

}

void sub_100B60180(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v1, "setInteger:forKey:", 0, CFSTR("MapsNotificationAuthRepromptCount"));

}

void sub_100B601C0(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v1, "setInteger:forKey:", 0, CFSTR("MapsNotificationAuthPromptCount"));

}

id sub_100B60200(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "promptCLReset");
}

void sub_100B60208(uint64_t a1)
{
  id v2;

  _GEOConfigRemoveValue(MapsConfig_AddressCorrectionAuthorizationStatus, off_1014B2F58);
  if (*(_BYTE *)(a1 + 32))
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithPath:](NSBundle, "bundleWithPath:", CFSTR("/System/Library/LocationBundles/AppGenius.bundle")));
    +[CLLocationManager setAuthorizationStatusByType:forBundle:](CLLocationManager, "setAuthorizationStatusByType:forBundle:", 2, v2);

  }
}

void sub_100B60288(id a1)
{
  _GEOConfigRemoveValue(GeoServicesConfig_EnableFullNavTraceLogMessages[0], GeoServicesConfig_EnableFullNavTraceLogMessages[1]);
}

void sub_100B60298(id a1)
{
  _GEOConfigRemoveValue(MapsConfig_PreciseLocationDisabledAlertWasDisplayed, off_1014B3D48);
}

void sub_100B602A8(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v1, "setInteger:forKey:", 0, CFSTR("kMapsWelcomeScreenKey"));

}

void sub_100B602E8(id a1)
{
  void *v1;
  void *v2;
  id v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v1, "removeObjectForKey:", CFSTR("SettingsTipKey"));

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v2, "removeObjectForKey:", CFSTR("SettingsTipLaunchCount"));

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v3, "removeObjectForKey:", CFSTR("SettingsTipImpressionCount"));

}

void sub_100B6036C(id a1)
{
  void *v1;
  id v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v1, "removeObjectForKey:", CFSTR("OfflineMapsPlaceCardDownloadTipsShownKey"));

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v2, "removeObjectForKey:", CFSTR("OfflineMapsPlaceCardDownloadTipsDisplayedCountKey"));

}

void sub_100B603D0(id a1)
{
  void *v1;
  void *v2;
  id v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v1, "removeObjectForKey:", CFSTR("OfflineMapsDownloadingTipDisplayedCountKey"));

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v2, "removeObjectForKey:", CFSTR("OfflineMapsDownloadingTipLastDisplayedTimeKey"));

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v3, "removeObjectForKey:", CFSTR("OfflineMapsUserHasOpenedOfflineManagementScreenKey"));

}

void sub_100B60454(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v1, "removeObjectForKey:", CFSTR("HikingWelcomeScreenDisplayed"));

}

id sub_100B60490(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  _GEOConfigRemoveValue(MapsConfig_AddressCorrectionAuthorizationStatus, off_1014B2F58);
  _GEOConfigRemoveValue(GeoServicesConfig_EnableFullNavTraceLogMessages[0], GeoServicesConfig_EnableFullNavTraceLogMessages[1]);
  _GEOConfigRemoveValue(MapsConfig_PreciseLocationDisabledAlertWasDisplayed, off_1014B3D48);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v2, "setInteger:forKey:", 0, CFSTR("kMapsWelcomeScreenKey"));

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v3, "removeObjectForKey:", CFSTR("SettingsTipKey"));

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v4, "removeObjectForKey:", CFSTR("SettingsTipLaunchCount"));

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v5, "removeObjectForKey:", CFSTR("SettingsTipImpressionCount"));

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v6, "removeObjectForKey:", CFSTR("OfflineMapsDownloadingTipDisplayedCountKey"));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v7, "removeObjectForKey:", CFSTR("OfflineMapsDownloadingTipLastDisplayedTimeKey"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v8, "removeObjectForKey:", CFSTR("OfflineMapsUserHasOpenedOfflineManagementScreenKey"));

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v9, "removeObjectForKey:", CFSTR("OfflineMapsPlaceCardDownloadTipsShownKey"));

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v10, "removeObjectForKey:", CFSTR("OfflineMapsPlaceCardDownloadTipsDisplayedCountKey"));

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v11, "removeObjectForKey:", CFSTR("HikingWelcomeScreenDisplayed"));

  return _objc_msgSend(*(id *)(a1 + 32), "promptCLReset");
}

void sub_100B6077C(id a1, UIAlertAction *a2)
{
  +[CLLocationManager setAuthorizationStatusByType:forBundleIdentifier:](CLLocationManager, "setAuthorizationStatusByType:forBundleIdentifier:", 0, CFSTR("com.apple.Maps"));
  +[CLLocationManager setTemporaryAuthorizationGranted:forBundleIdentifier:](CLLocationManager, "setTemporaryAuthorizationGranted:forBundleIdentifier:", 0, CFSTR("com.apple.Maps"));
}

void sub_100B607BC(id a1, UIAlertAction *a2)
{
  UIAlertAction *v2;

  v2 = a2;
  +[CLLocationManager setAuthorizationStatusByType:forBundleIdentifier:](CLLocationManager, "setAuthorizationStatusByType:forBundleIdentifier:", 0, CFSTR("com.apple.Maps"));
  +[CLLocationManager setTemporaryAuthorizationGranted:forBundleIdentifier:](CLLocationManager, "setTemporaryAuthorizationGranted:forBundleIdentifier:", 0, CFSTR("com.apple.Maps"));
  exit(0);
}

id sub_100B60800(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dismissViewControllerAnimated:completion:", 1, 0);
}

void sub_100B60890(id a1, MapsDebugValuesViewController *a2)
{
  id v2;

  v2 = -[MapsDebugValuesViewController addSectionWithTitle:content:](a2, "addSectionWithTitle:content:", CFSTR("Location Simulation"), &stru_1011E6008);
}

void sub_100B608C0(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugTableSection *v5;

  v5 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v5, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Place Card Trigger"), CFSTR("__internal__PlaceCardLocationSimulation"));
  v3 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v5, "addButtonRowWithTitle:action:", CFSTR("Clear Simulated Location"), &stru_1011E6028);
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v5, "addSwitchRowWithTitle:get:set:", CFSTR("Assume accurate locations"), &stru_1011E6048, &stru_1011E6068);
  -[MapsDebugTableSection setFooter:](v5, "setFooter:", CFSTR("Toggle \"Assume accurate locations\" when using location simulation, otherwise all directions requests may incur a location fix delay of 10s."));

}

void sub_100B60958(id a1)
{
  void *v1;
  unsigned int v2;
  id v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[GEOPlatform sharedPlatform](GEOPlatform, "sharedPlatform"));
  v2 = objc_msgSend(v1, "isInternalInstall");

  if (v2)
  {
    v3 = objc_alloc_init((Class)CLSimulationManager);
    objc_msgSend(v3, "clearSimulatedLocations");
    objc_msgSend(v3, "stopLocationSimulation");

  }
}

BOOL sub_100B609CC(id a1)
{
  return GEOConfigGetBOOL(MapKitConfig_LocationManagerAssumeAccurateLocations[0], MapKitConfig_LocationManagerAssumeAccurateLocations[1]);
}

void sub_100B609DC(id a1, BOOL a2)
{
  id v2;

  GEOConfigSetBOOL(MapKitConfig_LocationManagerAssumeAccurateLocations[0], MapKitConfig_LocationManagerAssumeAccurateLocations[1], a2);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[MKLocationManager sharedLocationManager](MKLocationManager, "sharedLocationManager"));
  if ((objc_opt_respondsToSelector(v2, "_syncLocationProviderWithTracking") & 1) != 0)
    objc_msgSend(v2, "_syncLocationProviderWithTracking");

}

void sub_100B60A38(id a1, MapsDebugValuesViewController *a2)
{
  id v2;

  v2 = -[MapsDebugValuesViewController addSectionWithTitle:content:](a2, "addSectionWithTitle:content:", CFSTR("Routing Apps"), &stru_1011E60A8);
}

void sub_100B60A68(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugTableSection *v5;

  v5 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v5, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Fake Search Response"), CFSTR("__internal__FakeTransitResponse"));
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v5, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Disable Local Sieving"), CFSTR("__internal__DisableTransitAppSieving"));
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v5, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Enable Logging"), CFSTR("__internal__RoutingAppsLogging"));

}

void sub_100B60AE8(id a1, MapsDebugValuesViewController *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugValuesViewController *v5;

  v5 = a2;
  v2 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v5, "addSectionWithTitle:content:", CFSTR("Battery level rate limiting"), &stru_1011E60E8);
  v3 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v5, "addSectionWithTitle:content:", CFSTR("Low power mode rate limiting"), &stru_1011E6108);
  v4 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v5, "addSectionWithTitle:content:", CFSTR("Thermal rate limiting"), &stru_1011E6128);

}

void sub_100B60B68(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  MapsDebugTableSection *v6;

  v6 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v6, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Battery level rate limiting (iOS)"), MapsConfig_BatteryLevelNavigationRateLimitEnablediOS, off_1014B47F8);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v6, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Battery level rate limiting (CarPlay)"), MapsConfig_BatteryLevelNavigationRateLimitEnabledCarPlay, off_1014B47E8);
  v4 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v6, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Battery level threshold"), CFSTR("0.2"), 2, MapsConfig_BatteryLevelNavigationRateLimitThreshold, off_1014B4808);
  v5 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyInteger:](v6, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyInteger:", CFSTR("Battery level rate limit"), CFSTR("5"), 1, MapsConfig_BatteryLevelNavigationRateLimit, off_1014B4818);

}

void sub_100B60C30(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugTableSection *v5;

  v5 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v5, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Low power mode rate limiting (iOS)"), MapsConfig_LowPowerNavigationRateLimitEnablediOS, off_1014B4838);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v5, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Low power mode rate limiting (CarPlay)"), MapsConfig_LowPowerNavigationRateLimitEnabledCarPlay, off_1014B4828);
  v4 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyInteger:](v5, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyInteger:", CFSTR("Low power mode rate limit"), CFSTR("10"), 1, MapsConfig_LowPowerNavigationRateLimit, off_1014B4848);

}

void sub_100B60CC8(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](a2, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Non-internal analytics"), MapsConfig_ThermalPressureAnalyticsAllowNonInternal, off_1014B4618);
}

void sub_100B60D6C(id a1, MapsDebugValuesViewController *a2)
{
  id v2;

  v2 = -[MapsDebugValuesViewController addSectionWithTitle:content:](a2, "addSectionWithTitle:content:", CFSTR("Look Around"), &stru_1011E6168);
}

void sub_100B60D9C(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](a2, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Hide Tap To Radar"), CFSTR("__internal__HideTapToRadarInMunin"));
}

void sub_100B60DFC(id a1, MapsDebugValuesViewController *a2)
{
  id v2;

  v2 = -[MapsDebugValuesViewController addSectionWithTitle:content:](a2, "addSectionWithTitle:content:", CFSTR("Guides"), &stru_1011E61A8);
}

void sub_100B60E2C(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:](a2, "addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:", CFSTR("Enable User Guides sharing"), MapsConfig_CollectionAllowsURLSharing, off_1014B3378, 1, 0);
}

void sub_100B60ED0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  _QWORD v14[5];
  _QWORD v15[5];
  _QWORD v16[5];

  v3 = a2;
  v4 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Share ETA"), &stru_1011E61C8);
  v5 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("IDS Capabilities"), &stru_1011E6228);
  v6 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Minimal Strategy"), &stru_1011E6248);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100B6140C;
  v16[3] = &unk_1011B4BC0;
  v16[4] = *(_QWORD *)(a1 + 32);
  v7 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Live Strategy"), v16);
  v8 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("User Input (Siri/Keyboard)"), &stru_1011E6310);
  v9 = objc_msgSend(v3, "addSectionWithTitle:content:", 0, &stru_1011E6330);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100B6160C;
  v15[3] = &unk_1011B4BC0;
  v15[4] = *(_QWORD *)(a1 + 32);
  v10 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Testing the service"), v15);
  v11 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Mock trips for UI testing"), &stru_1011E63B0);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100B61AD4;
  v14[3] = &unk_1011B4BC0;
  v14[4] = *(_QWORD *)(a1 + 32);
  v12 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("UI"), v14);
  v13 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Notifications"), &stru_1011E63F0);

}

void sub_100B610A8(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugTableSection *v5;

  v5 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:](v5, "addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:", CFSTR("Enable Share ETA"), GEOConfigMSPSharedTripServerEnabled[0], GEOConfigMSPSharedTripServerEnabled[1], 1, &stru_1011E61E8);
  v3 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v5, "addButtonRowWithTitle:action:", CFSTR("Delete all session storage"), &stru_1011E6208);
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v5, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Archive and restore sending state in navigation"), MapsConfig_ShareETAEnableStateRestoration, off_1014B4928);

}

void sub_100B6113C(id a1, BOOL a2)
{
  exit(0);
}

void sub_100B6114C(id a1)
{
  void *v1;
  void *v2;
  id v3;
  __int128 v4;
  id v5;
  uint64_t v6;
  void *i;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  NSObject *v13;
  __int128 v14;
  id v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  id v23;
  _BYTE v24[128];

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[MSPMapsPaths mapsApplicationContainerPaths](MSPMapsPaths, "mapsApplicationContainerPaths"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "groupDirectory"));

  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v3 = objc_msgSend(&off_101274280, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
  if (v3)
  {
    v5 = v3;
    v6 = *(_QWORD *)v17;
    *(_QWORD *)&v4 = 138543618;
    v14 = v4;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v17 != v6)
          objc_enumerationMutation(&off_101274280);
        v8 = *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)i);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "stringByAppendingPathComponent:", v8, v14));
        v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
        v15 = 0;
        objc_msgSend(v10, "removeItemAtPath:error:", v9, &v15);
        v11 = v15;

        if (v11)
        {
          v12 = sub_10043237C();
          v13 = objc_claimAutoreleasedReturnValue(v12);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = v14;
            v21 = v8;
            v22 = 2114;
            v23 = v11;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Error removing %{public}@: %{public}@", buf, 0x16u);
          }

        }
      }
      v5 = objc_msgSend(&off_101274280, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
    }
    while (v5);
  }

}

void sub_100B61320(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  MapsDebugTableSection *v4;

  v4 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v4, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Suppress Sky message content"), GEOConfigMSPShareETASuppressSharingRoutingPathLegs[0], GEOConfigMSPShareETASuppressSharingRoutingPathLegs[1]);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v4, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Suppress Sydney message content"), GEOConfigMSPShareETASuppressSharingWaypointRoutes[0], GEOConfigMSPShareETASuppressSharingWaypointRoutes[1]);

}

void sub_100B61388(id a1, MapsDebugTableSection *a2)
{
  double v2;
  double v3;
  id v4;

  LODWORD(v3) = 1133903872;
  LODWORD(v2) = 10.0;
  v4 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:](a2, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Between 2 ETA updates"), CFSTR("%.1f"), &stru_1011E6268, &stru_1011E6288, v2, v3);
}

float sub_100B613D4(id a1)
{
  return GEOConfigGetDouble(GEOConfigMSPSenderMinimalStrategyETAUpdateIntervalThrottle[0], GEOConfigMSPSenderMinimalStrategyETAUpdateIntervalThrottle[1]);
}

void sub_100B613F8(id a1, float a2)
{
  GEOConfigSetDouble(GEOConfigMSPSenderMinimalStrategyETAUpdateIntervalThrottle[0], GEOConfigMSPSenderMinimalStrategyETAUpdateIntervalThrottle[1], a2);
}

void sub_100B6140C(uint64_t a1, void *a2)
{
  id v3;
  double v4;
  double v5;
  id v6;
  id v7;
  _QWORD v8[5];

  v3 = a2;
  LODWORD(v4) = 1119092736;
  LODWORD(v5) = 1.0;
  v6 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Between 2 ETA updates"), CFSTR("%.1f"), &stru_1011E62A8, &stru_1011E62C8, v5, v4);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100B614FC;
  v8[3] = &unk_1011AC860;
  v8[4] = *(_QWORD *)(a1 + 32);
  v7 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Reset"), v8);

}

float sub_100B614C4(id a1)
{
  return GEOConfigGetDouble(GEOConfigMSPSenderLiveStrategyETAUpdateIntervalThrottle[0], GEOConfigMSPSenderLiveStrategyETAUpdateIntervalThrottle[1]);
}

void sub_100B614E8(id a1, float a2)
{
  GEOConfigSetDouble(GEOConfigMSPSenderLiveStrategyETAUpdateIntervalThrottle[0], GEOConfigMSPSenderLiveStrategyETAUpdateIntervalThrottle[1], a2);
}

uint64_t sub_100B614FC(uint64_t a1)
{
  _QWORD v2[5];

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100B6155C;
  v2[3] = &unk_1011E62F0;
  v2[4] = *(_QWORD *)(a1 + 32);
  return GEOConfigGetPropertiesForKey(GEOConfigMSPSenderLiveStrategyETAUpdateIntervalThrottle[0], GEOConfigMSPSenderLiveStrategyETAUpdateIntervalThrottle[1], v2);
}

id sub_100B6155C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  double v6;

  objc_msgSend(a5, "doubleValue");
  GEOConfigSetDouble(GEOConfigMSPSenderLiveStrategyETAUpdateIntervalThrottle[0], GEOConfigMSPSenderLiveStrategyETAUpdateIntervalThrottle[1], v6);
  return objc_msgSend(*(id *)(a1 + 32), "reloadData");
}

void sub_100B61594(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](a2, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enable dictation/keyboard (CarPlay)"), MapsConfig_ShareETAEnableCarPlayUserInput, off_1014B3E48);
}

void sub_100B615C8(id a1, MapsDebugTableSection *a2)
{
  id v2;
  MapsDebugTableSection *v3;

  v3 = a2;
  v2 = -[MapsDebugTableSection addNavigationRowForViewControllerClass:](v3, "addNavigationRowForViewControllerClass:", objc_opt_class(MapsSharedTripVirtualReceiversDebugController));

}

void sub_100B6160C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  _QWORD v9[5];
  _QWORD v10[5];

  v3 = a2;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100B61730;
  v10[3] = &unk_1011AC860;
  v10[4] = *(_QWORD *)(a1 + 32);
  v4 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Share with contact..."), v10);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100B617AC;
  v9[3] = &unk_1011AC860;
  v9[4] = *(_QWORD *)(a1 + 32);
  v5 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Stop all sharing"), v9);
  v6 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Clear 'user confirmed handle'"), &stru_1011E6350);
  v7 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Purge expired blocked trip identifiers"), &stru_1011E6370);
  v8 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Clear blocked trip identifiers"), &stru_1011E6390);

}

void sub_100B61730(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = objc_alloc_init((Class)CNContactPickerViewController);
  objc_msgSend(v2, "setDelegate:", *(_QWORD *)(a1 + 32));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 88);
  *(_QWORD *)(v3 + 88) = v2;
  v5 = v2;

  objc_msgSend(*(id *)(a1 + 32), "presentViewController:animated:completion:", v5, 1, 0);
}

void sub_100B617AC(uint64_t a1)
{
  void *v2;
  _QWORD v3[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MSPSharedTripService sharedInstance](MSPSharedTripService, "sharedInstance"));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100B61824;
  v3[3] = &unk_1011B1BE0;
  v3[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v2, "stopAllSharingWithCompletion:", v3);

}

void sub_100B61824(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  _QWORD v8[4];
  id v9;

  if (a2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "debugDescription"));
    v4 = objc_msgSend(v3, "copy");
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", CFSTR("Error Stopping Sharing"), v4, 1));

    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100B6192C;
    v8[3] = &unk_1011AD938;
    v9 = v5;
    v6 = v5;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", CFSTR("OK"), 1, v8));
    objc_msgSend(v6, "addAction:", v7);

    objc_msgSend(*(id *)(a1 + 32), "presentViewController:animated:completion:", v6, 1, 0);
  }
}

id sub_100B6192C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dismissViewControllerAnimated:completion:", 1, 0);
}

void sub_100B6193C(id a1)
{
  void *v1;
  id v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults __maps_groupUserDefaults](NSUserDefaults, "__maps_groupUserDefaults"));
  objc_msgSend(v1, "removeObjectForKey:", CFSTR("MapsSharedETADefaultSender"));

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults __maps_groupUserDefaults](NSUserDefaults, "__maps_groupUserDefaults"));
  objc_msgSend(v2, "synchronize");

}

void sub_100B61998(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[MSPSharedTripService sharedInstance](MSPSharedTripService, "sharedInstance"));
  objc_msgSend(v1, "purgeExpiredBlockedTripIdentifiers");

}

void sub_100B619CC(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[MSPSharedTripService sharedInstance](MSPSharedTripService, "sharedInstance"));
  objc_msgSend(v1, "clearBlockedTripIdentifiers");

}

void sub_100B61A00(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  MapsDebugTableSection *v7;

  v7 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v7, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Single destination"), GEOConfigMSPShareETAIncludeMockTripForUITesting[0], GEOConfigMSPShareETAIncludeMockTripForUITesting[1]);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v7, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Multiple destinations, start of route"), GEOConfigMSPShareETAIncludeMockMPRTripForUITesting[0], GEOConfigMSPShareETAIncludeMockMPRTripForUITesting[1]);
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v7, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Multiple destinations, passed 1 stop"), GEOConfigMSPShareETAIncludeMockMPRMiddleOfRouteTripForUITesting[0], GEOConfigMSPShareETAIncludeMockMPRMiddleOfRouteTripForUITesting[1]);
  v5 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v7, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Sky trip"), GEOConfigMSPShareETAIncludeMockSkyTripForUITesting[0], GEOConfigMSPShareETAIncludeMockSkyTripForUITesting[1]);
  v6 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v7, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Closed trip with past ETA (Safety Check)"), GEOConfigMSPShareETAIncludeMockClosedTripWithPastETAForUITesting[0], GEOConfigMSPShareETAIncludeMockClosedTripWithPastETAForUITesting[1]);

}

id sub_100B61AD4(uint64_t a1, void *a2)
{
  _QWORD v3[5];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100B61B3C;
  v3[3] = &unk_1011AC860;
  v3[4] = *(_QWORD *)(a1 + 32);
  return objc_msgSend(a2, "addButtonRowWithTitle:action:", CFSTR("Push SharedTripsContext"), v3);
}

void sub_100B61B3C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentingViewController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_maps_mapsSceneDelegate"));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "chromeViewController"));
  v5 = *(void **)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100B61BF0;
  v7[3] = &unk_1011AC860;
  v8 = v4;
  v6 = v4;
  objc_msgSend(v5, "dismissViewControllerAnimated:completion:", 1, v7);

}

void sub_100B61BF0(uint64_t a1)
{
  void *v2;
  void *v3;
  IOSSharedTripsContext *v4;

  v4 = objc_alloc_init(IOSSharedTripsContext);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "appCoordinator"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "baseActionCoordinator"));
  -[IOSSharedTripsContext setDelegate:](v4, "setDelegate:", v3);

  objc_msgSend(*(id *)(a1 + 32), "pushContext:animated:completion:", v4, 1, &stru_1011E63D0);
}

void sub_100B61C7C(id a1, MapsDebugTableSection *a2)
{
  MapsDebugTableSection *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  _QWORD v9[4];
  Block_layout *v10;
  Block_layout *v11;
  _QWORD v12[4];
  Block_layout *v13;
  Block_layout *v14;
  _QWORD v15[4];
  Block_layout *v16;
  Block_layout *v17;
  _QWORD v18[4];
  Block_layout *v19;
  Block_layout *v20;
  _QWORD v21[4];
  Block_layout *v22;
  Block_layout *v23;
  _QWORD v24[4];
  Block_layout *v25;
  Block_layout *v26;

  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_100B620A0;
  v24[3] = &unk_1011BA170;
  v25 = &stru_1011E6470;
  v26 = &stru_1011E6430;
  v2 = a2;
  v3 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v2, "addButtonRowWithTitle:action:", CFSTR("Initial"), v24);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_100B6219C;
  v21[3] = &unk_1011BA170;
  v22 = &stru_1011E6470;
  v23 = &stru_1011E6430;
  v4 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v2, "addButtonRowWithTitle:action:", CFSTR("Update"), v21);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_100B62298;
  v18[3] = &unk_1011BA170;
  v19 = &stru_1011E6470;
  v20 = &stru_1011E6430;
  v5 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v2, "addButtonRowWithTitle:action:", CFSTR("Charging Stop"), v18);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100B62394;
  v15[3] = &unk_1011BA170;
  v16 = &stru_1011E6470;
  v17 = &stru_1011E6430;
  v6 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v2, "addButtonRowWithTitle:action:", CFSTR("Intermediate Stop"), v15);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100B62490;
  v12[3] = &unk_1011BA170;
  v13 = &stru_1011E6470;
  v14 = &stru_1011E6430;
  v7 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v2, "addButtonRowWithTitle:action:", CFSTR("Resume"), v12);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100B6258C;
  v9[3] = &unk_1011BA170;
  v10 = &stru_1011E6470;
  v11 = &stru_1011E6430;
  v8 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v2, "addButtonRowWithTitle:action:", CFSTR("Final"), v9);
  -[MapsDebugTableSection setFooter:](v2, "setFooter:", CFSTR("Only to be used for testing strings.\nRequires at least one received trip."));

}

void sub_100B61E8C(id a1, UNNotificationContent *a2)
{
  UNNotificationContent *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "UUIDString"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[UNNotificationRequest requestWithIdentifier:content:trigger:destinations:](UNNotificationRequest, "requestWithIdentifier:content:trigger:destinations:", v4, v2, 0, 1));

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[UNUserNotificationCenter currentNotificationCenter](UNUserNotificationCenter, "currentNotificationCenter"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100B61F80;
  v8[3] = &unk_1011B1BE0;
  v9 = v5;
  v7 = v5;
  objc_msgSend(v6, "addNotificationRequest:withCompletionHandler:", v7, v8);

}

void sub_100B61F80(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  id v8;
  __int16 v9;
  uint64_t v10;

  v3 = a2;
  if (v3)
  {
    v4 = sub_1004319DC();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = *(_QWORD *)(a1 + 32);
      v7 = 138412546;
      v8 = v3;
      v9 = 2112;
      v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Error adding test notification: %@\n(notification: %@)", (uint8_t *)&v7, 0x16u);
    }

  }
}

GEOSharedNavState *__cdecl sub_100B62048(id a1)
{
  void *v1;
  void *v2;
  void *v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[MSPSharedTripService sharedInstance](MSPSharedTripService, "sharedInstance"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "receivedTrips"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "lastObject"));

  return (GEOSharedNavState *)v3;
}

void sub_100B620A0(uint64_t a1)
{
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v2 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v7 = (id)objc_claimAutoreleasedReturnValue(v2);
  v3 = objc_alloc_init((Class)UNMutableNotificationContent);
  objc_msgSend(v3, "setTitle:", &stru_1011EB268);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "initialNotificationSubtitle"));
  objc_msgSend(v3, "setSubtitle:", v4);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "initialNotificationBody"));
  objc_msgSend(v3, "setBody:", v5);

  objc_msgSend(v3, "setInterruptionLevel:", 2);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", CFSTR("maps://")));
  objc_msgSend(v3, "setDefaultActionURL:", v6);

  objc_msgSend(v3, "setCategoryIdentifier:", CFSTR("MapsUNCategorySharedTrip"));
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100B6219C(uint64_t a1)
{
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v2 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v7 = (id)objc_claimAutoreleasedReturnValue(v2);
  v3 = objc_alloc_init((Class)UNMutableNotificationContent);
  objc_msgSend(v3, "setTitle:", &stru_1011EB268);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "updateNotificationSubtitle"));
  objc_msgSend(v3, "setSubtitle:", v4);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "updateNotificationBody"));
  objc_msgSend(v3, "setBody:", v5);

  objc_msgSend(v3, "setInterruptionLevel:", 2);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", CFSTR("maps://")));
  objc_msgSend(v3, "setDefaultActionURL:", v6);

  objc_msgSend(v3, "setCategoryIdentifier:", CFSTR("MapsUNCategorySharedTripUpdate"));
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100B62298(uint64_t a1)
{
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v2 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v7 = (id)objc_claimAutoreleasedReturnValue(v2);
  v3 = objc_alloc_init((Class)UNMutableNotificationContent);
  objc_msgSend(v3, "setTitle:", &stru_1011EB268);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "chargingStopNotificationSubtitle"));
  objc_msgSend(v3, "setSubtitle:", v4);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "chargingStopNotificationBody"));
  objc_msgSend(v3, "setBody:", v5);

  objc_msgSend(v3, "setInterruptionLevel:", 2);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", CFSTR("maps://")));
  objc_msgSend(v3, "setDefaultActionURL:", v6);

  objc_msgSend(v3, "setCategoryIdentifier:", CFSTR("MapsUNCategorySharedTripUpdate"));
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100B62394(uint64_t a1)
{
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v2 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v7 = (id)objc_claimAutoreleasedReturnValue(v2);
  v3 = objc_alloc_init((Class)UNMutableNotificationContent);
  objc_msgSend(v3, "setTitle:", &stru_1011EB268);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "intermediateArrivalNotificationSubtitle"));
  objc_msgSend(v3, "setSubtitle:", v4);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "intermediateArrivalNotificationBody"));
  objc_msgSend(v3, "setBody:", v5);

  objc_msgSend(v3, "setInterruptionLevel:", 2);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", CFSTR("maps://")));
  objc_msgSend(v3, "setDefaultActionURL:", v6);

  objc_msgSend(v3, "setCategoryIdentifier:", CFSTR("MapsUNCategorySharedTripUpdate"));
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100B62490(uint64_t a1)
{
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v2 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v7 = (id)objc_claimAutoreleasedReturnValue(v2);
  v3 = objc_alloc_init((Class)UNMutableNotificationContent);
  objc_msgSend(v3, "setTitle:", &stru_1011EB268);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "waypointResumeNotificationSubtitle"));
  objc_msgSend(v3, "setSubtitle:", v4);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "waypointResumeNotificationBody"));
  objc_msgSend(v3, "setBody:", v5);

  objc_msgSend(v3, "setInterruptionLevel:", 2);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", CFSTR("maps://")));
  objc_msgSend(v3, "setDefaultActionURL:", v6);

  objc_msgSend(v3, "setCategoryIdentifier:", CFSTR("MapsUNCategorySharedTripUpdate"));
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100B6258C(uint64_t a1)
{
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v2 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v7 = (id)objc_claimAutoreleasedReturnValue(v2);
  v3 = objc_alloc_init((Class)UNMutableNotificationContent);
  objc_msgSend(v3, "setTitle:", &stru_1011EB268);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "arrivalNotificationSubtitle"));
  objc_msgSend(v3, "setSubtitle:", v4);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "arrivalNotificationBody"));
  objc_msgSend(v3, "setBody:", v5);

  objc_msgSend(v3, "setInterruptionLevel:", 2);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", CFSTR("maps://")));
  objc_msgSend(v3, "setDefaultActionURL:", v6);

  objc_msgSend(v3, "setCategoryIdentifier:", CFSTR("MapsUNCategorySharedTripUpdate"));
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100B62768(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  _QWORD v12[4];
  id v13;

  v4 = a3;
  if (v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "displayName"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Error Sharing with %@"), v5));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "debugDescription"));
    v8 = objc_msgSend(v7, "copy");
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", v6, v8, 1));

    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100B628D8;
    v12[3] = &unk_1011AD938;
    v13 = v9;
    v10 = v9;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", CFSTR("OK"), 1, v12));
    objc_msgSend(v10, "addAction:", v11);

    objc_msgSend(*(id *)(a1 + 40), "presentViewController:animated:completion:", v10, 1, 0);
  }
  else
  {
    +[MapsSharedTripAnalyticsHelper sendSuccessAnalyticFor:](_TtC4Maps29MapsSharedTripAnalyticsHelper, "sendSuccessAnalyticFor:", *(_QWORD *)(a1 + 32));
  }

}

id sub_100B628D8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dismissViewControllerAnimated:completion:", 1, 0);
}

void sub_100B62964(id a1, MapsDebugValuesViewController *a2)
{
  id v2;

  v2 = -[MapsDebugValuesViewController addSectionWithTitle:content:](a2, "addSectionWithTitle:content:", CFSTR("Screenshot 2.0"), &stru_1011E64D8);
}

void sub_100B62994(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](a2, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Enable Multipages"), CFSTR("__internal_kScreenshotMultipages"));
}

void sub_100B62A68(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v1, "registerDefaults:", &off_1012749F8);

}

void sub_100B62AA4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  _QWORD v10[5];

  v3 = a2;
  v4 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Catalyst"), &stru_1011E6518);
  v5 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("iOS"), &stru_1011E6538);
  v6 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Out of Coverage Errors"), &stru_1011E6558);
  v7 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Transit Route Updates"), &stru_1011E6578);
  v8 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Environmental/Regulatory"), &stru_1011E6598);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100B62CC0;
  v10[3] = &unk_1011B4BC0;
  v10[4] = *(_QWORD *)(a1 + 32);
  v9 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("\"Resume Route\" Testing"), v10);

}

void sub_100B62BC0(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](a2, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Automatically apply route options"), MapsConfig_RoutePlanningMacAutomaticallySaveRouteOptions, off_1014B38F8);
}

void sub_100B62BF4(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](a2, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enable transport type button row"), MapsConfig_RoutePlanningUseTransportTypeButtons, off_1014B4F88);
}

void sub_100B62C28(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](a2, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Allow View Routing Apps button"), MapsConfig_RoutePlanningShowOutOfCoverageRoutingAppsButton, off_1014B3A58);
}

void sub_100B62C5C(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](a2, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Always use local transit updater"), MapsConfig_TransitRouteUpdatesAlwaysUseLocalUpdater, off_1014B3DF8);
}

void sub_100B62C90(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](a2, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Shown environmental tip"), CFSTR("EnvironmentalFeatureDiscoverySourceShown"));
}

void sub_100B62CC0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  id v8;
  _QWORD *v9;
  id v10;
  _QWORD *v11;
  id v12;
  _QWORD *v13;
  id v14;
  _QWORD *v15;
  id v16;
  _QWORD *v17;
  id v18;
  _QWORD v19[4];
  id v20;
  _QWORD v21[4];
  id v22;
  _QWORD v23[4];
  id v24;
  _QWORD v25[4];
  id v26;
  _QWORD v27[4];
  id v28;
  _QWORD v29[4];
  id v30;
  _QWORD v31[4];
  id v32;
  _QWORD v33[5];
  id v34;
  id location;

  v3 = a2;
  objc_msgSend(v3, "setFooter:", CFSTR("Searches for the query above and then gets a route through a number of the results.\nAll routes originate from current location.\nThis can take a few seconds to complete, wait for an alert."));
  objc_initWeak(&location, *(id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addTextFieldRowWithTitle:placeholderText:inputType:defaultsKey:", CFSTR("Destination Search Query"), CFSTR("search category or chain name"), 0, CFSTR("__internal_ResumeRouteTestSearchQuery"));
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472;
  v33[2] = sub_100B62FB8;
  v33[3] = &unk_1011E66B0;
  v33[4] = *(_QWORD *)(a1 + 32);
  objc_copyWeak(&v34, &location);
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472;
  v31[2] = sub_100B63D40;
  v31[3] = &unk_1011ADA00;
  v5 = objc_retainBlock(v33);
  v32 = v5;
  v6 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("A-B"), v31);
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472;
  v29[2] = sub_100B63D58;
  v29[3] = &unk_1011ADA00;
  v7 = v5;
  v30 = v7;
  v8 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("A-B (bad storage, current location only)"), v29);
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = sub_100B63D74;
  v27[3] = &unk_1011ADA00;
  v9 = v7;
  v28 = v9;
  v10 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("A-B (bad storage, one waypoint only)"), v27);
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_100B63D90;
  v25[3] = &unk_1011ADA00;
  v11 = v9;
  v26 = v11;
  v12 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("A-B-C (no progress)"), v25);
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_100B63DA8;
  v23[3] = &unk_1011ADA00;
  v13 = v11;
  v24 = v13;
  v14 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("A-B-C-D (no progress)"), v23);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_100B63DC0;
  v21[3] = &unk_1011ADA00;
  v15 = v13;
  v22 = v15;
  v16 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("A-B-C-D (resume towards C)"), v21);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_100B63DD8;
  v19[3] = &unk_1011ADA00;
  v17 = v15;
  v20 = v17;
  v18 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("A-B-C-D (resume towards D)"), v19);

  objc_destroyWeak(&v34);
  objc_destroyWeak(&location);

}

void sub_100B62F94(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_100B62FB8(uint64_t a1, void *a2, unint64_t a3, void *a4)
{
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  _QWORD v16[5];
  id v17;
  id v18;
  _QWORD *v19;
  id v20[2];
  _QWORD v21[4];

  v7 = a4;
  v21[0] = 0;
  v21[1] = v21;
  v21[2] = 0x2020000000;
  if (a3 <= 1)
    v8 = 1;
  else
    v8 = a3;
  v21[3] = v8;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentingViewController"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_maps_mapsSceneDelegate"));

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "chromeViewController"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "currentTraits"));
  v13 = *(void **)(a1 + 32);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100B63138;
  v16[3] = &unk_1011E6688;
  v20[1] = a2;
  v16[4] = v13;
  v14 = v12;
  v17 = v14;
  v19 = v21;
  v15 = v7;
  v18 = v15;
  objc_copyWeak(v20, (id *)(a1 + 40));
  objc_msgSend(v13, "_searchForWaypointsWithCompletion:", v16);
  objc_destroyWeak(v20);

  _Block_object_dispose(v21, 8);
}

void sub_100B63108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  id *v19;

  objc_destroyWeak(v19);
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_100B63138(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  unint64_t v6;
  unint64_t i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  uint64_t v18;
  id v19;

  v3 = a2;
  v4 = objc_alloc_init((Class)NSMutableArray);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NanoDirectionWaypoint directionWaypointForCurrentLocation:](NanoDirectionWaypoint, "directionWaypointForCurrentLocation:", 0));
  objc_msgSend(v4, "addObject:", v5);

  if (*(_QWORD *)(a1 + 72))
  {
    v6 = 0;
    do
    {
      for (i = v6; i >= (unint64_t)objc_msgSend(v3, "count"); i -= (unint64_t)objc_msgSend(v3, "count"))
        ;
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectAtIndexedSubscript:", i));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "_geoMapItem"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NanoDirectionWaypoint directionWaypointWithGEOMapItem:](NanoDirectionWaypoint, "directionWaypointWithGEOMapItem:", v9));
      objc_msgSend(v4, "addObject:", v10);

      ++v6;
    }
    while (v6 < *(_QWORD *)(a1 + 72));
  }
  v11 = *(void **)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100B632F8;
  v15[3] = &unk_1011E6660;
  v13 = *(void **)(a1 + 48);
  v18 = *(_QWORD *)(a1 + 56);
  v16 = v13;
  objc_copyWeak(&v19, (id *)(a1 + 64));
  v14 = v4;
  v17 = v14;
  objc_msgSend(v11, "_requestRouteWithWaypoints:traits:completion:", v14, v12, v15);

  objc_destroyWeak(&v19);
}

void sub_100B632E4(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100B632F8(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD v20[5];
  id v21;
  _QWORD v22[5];

  v3 = a2;
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_100B634C4;
  v22[3] = &unk_1011E65C0;
  v22[4] = *(_QWORD *)(a1 + 48);
  v20[0] = 0;
  v20[1] = v20;
  v20[2] = 0x3032000000;
  v20[3] = sub_100B59E00;
  v20[4] = sub_100B59E10;
  v21 = 0;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100B63620;
  v15[3] = &unk_1011E65E8;
  v4 = objc_retainBlock(v22);
  v17 = v4;
  v16 = *(id *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 48);
  v18 = v20;
  v19 = v5;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100B63904;
  v9[3] = &unk_1011E6638;
  objc_copyWeak(&v14, (id *)(a1 + 56));
  v6 = *(id *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v10 = v6;
  v12 = v7;
  v13 = v20;
  v11 = *(id *)(a1 + 32);
  v8 = +[HistoryEntryRecentsItem saveRoute:withOriginalHistoryIdentifier:editBlock:completionBlock:](HistoryEntryRecentsItem, "saveRoute:withOriginalHistoryIdentifier:editBlock:completionBlock:", v3, 0, v15, v9);

  objc_destroyWeak(&v14);
  _Block_object_dispose(v20, 8);

}

void sub_100B634A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  id *v26;

  objc_destroyWeak(v26);
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void sub_100B634C4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  __CFString *v6;
  id v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  int v12;
  __CFString *v13;

  v5 = a2;
  v6 = a3;
  if (-[__CFString length](v6, "length"))
  {
    v7 = sub_10043214C();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v12 = 138412290;
      v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Updating test route request storage for variant \"%@\"", (uint8_t *)&v12, 0xCu);
    }

    if (v6 == CFSTR("current-location-only"))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "waypoints"));
      v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "firstObject"));
    }
    else
    {
      if (v6 != CFSTR("one-waypoint-only"))
        goto LABEL_11;
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "waypoints"));
      v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "lastObject"));
    }
    v11 = (void *)v10;

    if (v11)
    {
      objc_msgSend(v5, "clearWaypoints");
      objc_msgSend(v5, "addWaypoints:", v11);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0x7FFFFFFFFFFFFFFFLL;
    }

  }
LABEL_11:

}

void sub_100B63620(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  NSObject *v12;
  uint64_t v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  id v21;
  NSObject *v22;
  void *v23;
  id v24;
  NSObject *v25;
  uint64_t v26;
  void *v27;
  int v28;
  uint64_t v29;
  __int16 v30;
  void *v31;

  v3 = a2;
  v4 = objc_opt_class(MSHistoryDirectionsItem);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    v5 = v3;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "routeRequestStorage"));
    (*(void (**)(void))(a1[5] + 16))();
    objc_msgSend(v5, "setRouteRequestStorage:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "waypoints"));
    v8 = objc_msgSend(v7, "copy");
    v9 = *(_QWORD *)(a1[6] + 8);
    v10 = *(void **)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v8;

    objc_msgSend(v5, "setNavigationInterrupted:", 1);
    v11 = sub_10043214C();
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      LOWORD(v28) = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Saving for Resume Route...", (uint8_t *)&v28, 2u);
    }

  }
  v13 = objc_opt_class(MSHistoryMultiPointRoute);
  if ((objc_opt_isKindOfClass(v3, v13) & 1) != 0)
  {
    v14 = v3;
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "routeRequestStorage"));
    (*(void (**)(void))(a1[5] + 16))();
    objc_msgSend(v14, "setRouteRequestStorage:", v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "waypoints"));
    v17 = objc_msgSend(v16, "copy");
    v18 = *(_QWORD *)(a1[6] + 8);
    v19 = *(void **)(v18 + 40);
    *(_QWORD *)(v18 + 40) = v17;

    objc_msgSend(v14, "setNavigationInterrupted:", 1);
    v20 = *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24);
    if (v20 >= (unint64_t)objc_msgSend(v15, "waypointsCount"))
    {
      v21 = sub_10043214C();
      v22 = objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        LOWORD(v28) = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "Not setting progress waypoint index for test route, it's out of bounds", (uint8_t *)&v28, 2u);
      }

    }
    else
    {
      objc_msgSend(v14, "setRouteProgressWaypointIndex:", *(__int16 *)(*(_QWORD *)(a1[7] + 8) + 24));
    }
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "waypointsAtIndex:", *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24)));
    v24 = sub_10043214C();
    v25 = objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      v26 = *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24);
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "name"));
      v28 = 134218242;
      v29 = v26;
      v30 = 2112;
      v31 = v27;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "Saving for Resume Route (resuming towards waypoint index %lu, \"%@\")...", (uint8_t *)&v28, 0x16u);

    }
  }

}

void sub_100B63904(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  __int128 v8;
  _QWORD block[4];
  id v10;
  id v11;
  __int128 v12;
  uint64_t v13;
  id v14;

  v3 = a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100B639E4;
  block[3] = &unk_1011E6610;
  objc_copyWeak(&v14, (id *)(a1 + 64));
  v10 = v3;
  v4 = *(id *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 56);
  v11 = v4;
  v13 = v5;
  v8 = *(_OWORD *)(a1 + 40);
  v6 = (id)v8;
  v12 = v8;
  v7 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  objc_destroyWeak(&v14);
}

void sub_100B639E4(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  unint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  _QWORD v23[4];
  id v24;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (WeakRetained)
  {
    v3 = *(void **)(a1 + 32);
    if (v3)
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localizedDescription"));
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", CFSTR("Route Not Saved"), v4, 1));

      v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", CFSTR("Cancel"), 1, 0));
      objc_msgSend(v5, "addAction:", v6);

      objc_msgSend(WeakRetained, "presentViewController:animated:completion:", v5, 1, 0);
    }
    else
    {
      v7 = sub_100B3A5D4();
      v5 = (void *)objc_claimAutoreleasedReturnValue(v7);
      objc_msgSend(v5, "hintRefreshOfType:", 11);
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "valueForKey:", CFSTR("name")));
      v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
      if (v9 >= (unint64_t)objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "count"))
        v10 = 0;
      else
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "objectAtIndexedSubscript:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24)));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "valueForKey:", CFSTR("name")));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "componentsJoinedByString:", CFSTR(" >\n")));
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Requested Waypoints:\n%@"), v12));

      if (*(_QWORD *)(a1 + 48))
      {
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "componentsJoinedByString:", CFSTR(" >\n")));
        v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "stringByAppendingFormat:", CFSTR("\n\nFinal Waypoints:\n%@\n\nPost-processing: %@"), v14, *(_QWORD *)(a1 + 48)));

        v13 = (void *)v15;
      }
      if (v10)
      {
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "name"));
        v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "stringByAppendingFormat:", CFSTR("\n\nResuming to: %@"), v16));

        v13 = (void *)v17;
      }
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "parentViewController"));
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", CFSTR("Route Saved"), v13, 1));
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", CFSTR("OK"), 1, 0));
      objc_msgSend(v19, "addAction:", v20);

      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472;
      v23[2] = sub_100B63D30;
      v23[3] = &unk_1011AD938;
      v24 = v18;
      v21 = v18;
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", CFSTR("Close Debug Panel"), 0, v23));
      objc_msgSend(v19, "addAction:", v22);

      objc_msgSend(WeakRetained, "presentViewController:animated:completion:", v19, 1, 0);
    }

  }
}

id sub_100B63D30(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dismissViewControllerAnimated:completion:", 1, 0);
}

uint64_t sub_100B63D40(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100B63D58(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100B63D74(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100B63D90(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100B63DA8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100B63DC0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100B63DD8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100B63F14(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100B63F3C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  id WeakRetained;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  int v18;
  id v19;

  v5 = a2;
  v6 = a3;
  if (v6
    || (v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "mapItems")),
        v14 = objc_msgSend(v13, "count"),
        v13,
        !v14))
  {
    v7 = sub_10043214C();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v18 = 138412290;
      v19 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to fetch test destination: %@", (uint8_t *)&v18, 0xCu);
    }

    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    if (WeakRetained)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "localizedDescription"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", CFSTR("Failed to find test waypoints"), v10, 1));

      v12 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", CFSTR("OK"), 1, 0));
      objc_msgSend(v11, "addAction:", v12);

      objc_msgSend(WeakRetained, "presentViewController:animated:completion:", v11, 1, 0);
    }

  }
  else
  {
    v15 = objc_alloc_init((Class)NSMutableArray);
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NanoDirectionWaypoint directionWaypointForCurrentLocation:](NanoDirectionWaypoint, "directionWaypointForCurrentLocation:", 0));
    objc_msgSend(v15, "addObject:", v16);

    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "mapItems"));
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
}

void sub_100B64264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100B64288(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  id v6;
  NSObject *v7;
  id WeakRetained;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  unint64_t v15;
  void *v16;
  int v17;
  unint64_t v18;
  __int16 v19;
  void *v20;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "lastError"));
  if (v5)
  {
    v6 = sub_10043214C();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v17 = 138412290;
      v18 = (unint64_t)v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to fetch test route: %@", (uint8_t *)&v17, 0xCu);
    }

    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    if (WeakRetained)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "localizedDescription"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", CFSTR("Failed to get test route"), v9, 1));

      v11 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", CFSTR("OK"), 1, 0));
      objc_msgSend(v10, "addAction:", v11);

      objc_msgSend(WeakRetained, "presentViewController:animated:completion:", v10, 1, 0);
    }
  }
  else
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "routes"));
    WeakRetained = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "firstObject"));

    v13 = sub_10043214C();
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      v15 = objc_msgSend(WeakRetained, "expectedTime") / 0x3CuLL;
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "valueForKey:", CFSTR("name")));
      v17 = 134218242;
      v18 = v15;
      v19 = 2112;
      v20 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Fetched a %lu minute test route with waypoints: %@", (uint8_t *)&v17, 0x16u);

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

void sub_100B644F0(id a1, MapsDebugValuesViewController *a2)
{
  id v2;
  id v3;
  MapsDebugValuesViewController *v4;

  v4 = a2;
  v2 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v4, "addSectionWithTitle:content:", CFSTR("Snapshotting"), &stru_1011E6740);
  v3 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v4, "addSectionWithTitle:content:", CFSTR("Radar"), &stru_1011E6780);

}

void sub_100B64550(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addButtonRowWithTitle:action:](a2, "addButtonRowWithTitle:action:", CFSTR("Clear snapshot cache"), &stru_1011E6760);
}

void sub_100B64580(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[MURouteSnapshotManager sharedInstance](MURouteSnapshotManager, "sharedInstance"));
  objc_msgSend(v1, "purgeSnapshotsWithCompletionBlock:", 0);

}

void sub_100B645B8(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](a2, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("TTR button"), MapsConfig_CustomRouteTTRButtonEnabled, off_1014B5638);
}

void sub_100B6461C(id a1, MapsDebugValuesViewController *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  MapsDebugValuesViewController *v9;

  v9 = a2;
  v2 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v9, "addSectionWithTitle:content:", CFSTR("Elevation Graph (Smoothing)"), &stru_1011E67C0);
  v3 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v9, "addSectionWithTitle:content:", CFSTR("Elevation Graph (Accessibility)"), &stru_1011E67E0);
  v4 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v9, "addSectionWithTitle:content:", CFSTR("Elevation Graph (Planning, Normalisation)"), &stru_1011E6800);
  v5 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v9, "addSectionWithTitle:content:", CFSTR("Elevation Graph (Planning, Alternative Normalisation)"), &stru_1011E6820);
  v6 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v9, "addSectionWithTitle:content:", CFSTR("Routing Options"), &stru_1011E6840);
  v7 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v9, "addSectionWithTitle:content:", CFSTR("Annotations"), &stru_1011E6860);
  v8 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v9, "addSectionWithTitle:content:", CFSTR("Out of Coverage Error"), &stru_1011E6880);

}

void sub_100B6471C(id a1, MapsDebugTableSection *a2)
{
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  MapsDebugTableSection *v8;

  v2 = MapsConfig_ElevationGraphSkipSmoothing;
  v3 = off_1014B38E8;
  v8 = a2;
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v8, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Skip all smoothing"), v2, v3);
  v5 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v8, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Ignore server smoothing range"), MapsConfig_ElevationGraphIgnoreServerMinimumRange, off_1014B3AB8);
  v6 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v8, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Client smoothing (metres)"), CFSTR("e.g. 40"), 2, MapsConfig_ElevationGraphSmoothingAdjustment, off_1014B38D8);
  v7 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v8, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Fake segment descriptions (AX)"), CFSTR("ElevationGraphFakeSegmentDescriptions"));
  -[MapsDebugTableSection setFooter:](v8, "setFooter:", CFSTR("Client smoothing only applies in the absence of server smoothing values or the Ignore switch."));

}

void sub_100B647F4(id a1, MapsDebugTableSection *a2)
{
  id v2;
  MapsDebugTableSection *v3;

  v3 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v3, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Fake segment descriptions (AX)"), CFSTR("ElevationGraphFakeSegmentDescriptions"));
  -[MapsDebugTableSection setFooter:](v3, "setFooter:", CFSTR("Generates fake 4 equally-sized segments with generic names."));

}

void sub_100B64844(id a1, MapsDebugTableSection *a2)
{
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  MapsDebugTableSection *v9;

  v2 = MapsConfig_RoutePlanningElevationGraphBarCalculationCyclingMinimumDistance;
  v3 = off_1014B3BF8;
  v9 = a2;
  v4 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v9, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Min route length"), 0, 2, v2, v3);
  v5 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v9, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Average route length"), 0, 2, MapsConfig_RoutePlanningElevationGraphBarCalculationCyclingAverageDistance, off_1014B3C08);
  v6 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v9, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Max route length"), 0, 2, MapsConfig_RoutePlanningElevationGraphBarCalculationCyclingMaximumDistance, off_1014B3C18);
  v7 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v9, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("A"), 0, 2, MapsConfig_RoutePlanningElevationGraphBarCalculationCyclingA, off_1014B3C28);
  v8 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v9, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("B"), 0, 2, MapsConfig_RoutePlanningElevationGraphBarCalculationCyclingB, off_1014B3C38);
  -[MapsDebugTableSection setFooter:](v9, "setFooter:", CFSTR("Normalisation is done using the equation y = A + B ln(x), where x is the distance in km and y is the ratio from 0.0 to 1.0 for available chart width."));

}

void sub_100B64960(id a1, MapsDebugTableSection *a2)
{
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  MapsDebugTableSection *v6;

  v2 = MapsConfig_RoutePlanningElevationGraphBarCalculationCyclingForceLinear;
  v3 = off_1014B3C48;
  v6 = a2;
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v6, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Force linear calculation"), v2, v3);
  v5 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v6, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Avg linear ratio"), 0, 2, MapsConfig_RoutePlanningElevationGraphBarCalculationCyclingLinearMinAvgRatio, off_1014B3C58);
  -[MapsDebugTableSection setFooter:](v6, "setFooter:", CFSTR("Uses simple linear equations to figure out the chart width based on route length. Route lengths from Min to Average will reach a max of [avg linear ratio] of available width, e.g. 70%. From Average to Max covers the remaining available width, e.g. 30%."));

}

void sub_100B649F0(id a1, MapsDebugTableSection *a2)
{
  uint64_t v2;
  void *v3;
  id v4;
  MapsDebugTableSection *v5;

  v2 = MapsConfig_RoutePlanningShowAllPossibleCyclingOptions;
  v3 = off_1014B3908;
  v5 = a2;
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v5, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Show all possible options"), v2, v3);
  -[MapsDebugTableSection setFooter:](v5, "setFooter:", CFSTR("China doesn't support avoidance, but does support e-bike. This switch enables the UI for both for all countries."));

}

void sub_100B64A54(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](a2, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Show all inclines, dismounts, etc"), MapsConfig_ShowRouteAnnotationsForAlternateRoutes, off_1014B4788);
}

void sub_100B64A88(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyString:](a2, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyString:", CFSTR("Punchout URL"), 0, 3, MapsConfig_RoutePlanningEnableCyclingOutOfCoverageFeatureAvailabilityPunchoutURL, off_1014B3D38);
}

void sub_100B64B6C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100B64B88(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100B64C38;
  v5[3] = &unk_1011AEAC8;
  objc_copyWeak(&v6, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Verified Business Header"), v5);
  objc_destroyWeak(&v6);

}

void sub_100B64C24(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100B64C38(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  v4 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringHandler:min:max:geoConfigKeyDouble:changeHandler:", CFSTR("Logo visibility start transition"), &stru_1011E68A0, MapsUIConfig_EnhancedPlaceHeaderLogoStartTransition[0], MapsUIConfig_EnhancedPlaceHeaderLogoStartTransition[1], 0, 0.0, 1.0);
  v5 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringHandler:min:max:geoConfigKeyDouble:changeHandler:", CFSTR("Logo visibility end transition"), &stru_1011E68C0, MapsUIConfig_EnhancedPlaceHeaderLogoEndTransition[0], MapsUIConfig_EnhancedPlaceHeaderLogoEndTransition[1], 0, 0.0, 1.0);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100B64DBC;
  v7[3] = &unk_1011AD260;
  objc_copyWeak(&v8, (id *)(a1 + 32));
  v6 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Restore Defaults"), v7);
  objc_destroyWeak(&v8);

}

void sub_100B64D40(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

NSString *__cdecl sub_100B64D54(id a1, float a2)
{
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("The percentage where the logo should start to become visibile.  Current value is %.2f.  Default is 0.6"), a2);
}

NSString *__cdecl sub_100B64D88(id a1, float a2)
{
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("The percentage where the logo should be fully visible.  Current value is %.2f.  Default is 0.9"), a2);
}

void sub_100B64DBC(uint64_t a1)
{
  id WeakRetained;

  GEOConfigSetDouble(MapsUIConfig_EnhancedPlaceHeaderLogoStartTransition[0], MapsUIConfig_EnhancedPlaceHeaderLogoStartTransition[1], 0.6);
  GEOConfigSetDouble(MapsUIConfig_EnhancedPlaceHeaderLogoEndTransition[0], MapsUIConfig_EnhancedPlaceHeaderLogoEndTransition[1], 0.9);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "reloadData");

}

void sub_100B64E54(id a1, MapsDebugValuesViewController *a2)
{
  id v2;

  v2 = -[MapsDebugValuesViewController addSectionWithTitle:content:](a2, "addSectionWithTitle:content:", CFSTR("Features"), &stru_1011E6900);
}

void sub_100B64E84(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  MapsDebugTableSection *v4;

  v4 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:switchOnStateIfUnset:changeHandler:](v4, "addSwitchRowWithTitle:defaultsKey:switchOnStateIfUnset:changeHandler:", CFSTR("Place Card Impressions"), CFSTR("EnablePlacecardImpressionLoggingVisualization"), 0, &stru_1011E6920);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:switchOnStateIfUnset:changeHandler:](v4, "addSwitchRowWithTitle:defaultsKey:switchOnStateIfUnset:changeHandler:", CFSTR("Search Result Impressions"), CFSTR("EnableSearchResultsImpressionLoggingVisualization"), 0, &stru_1011E6940);

}

void sub_100B64EFC(id a1, BOOL a2)
{
  _BOOL4 v2;
  void *v3;
  id v4;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MapsImpressionsPlaceCardFloatingDebugViewController sharedInstance](MapsImpressionsPlaceCardFloatingDebugViewController, "sharedInstance"));
  v4 = v3;
  if (v2)
    objc_msgSend(v3, "attach");
  else
    objc_msgSend(v3, "detach");

}

void sub_100B64F48(id a1, BOOL a2)
{
  _BOOL4 v2;
  void *v3;
  id v4;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MapsImpressionsSearchResultsFloatingDebugViewController sharedInstance](MapsImpressionsSearchResultsFloatingDebugViewController, "sharedInstance"));
  v4 = v3;
  if (v2)
    objc_msgSend(v3, "attach");
  else
    objc_msgSend(v3, "detach");

}

void sub_100B64FC4(id a1, MapsDebugValuesViewController *a2)
{
  id v2;

  v2 = -[MapsDebugValuesViewController addSectionWithTitle:content:](a2, "addSectionWithTitle:content:", CFSTR("Maps 100"), &stru_1011E6980);
}

void sub_100B64FF4(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  MapsDebugTableSection *v6;

  v6 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v6, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enable Save MapItem UI"), MapKitConfig_MKUseSerializedMapItemStorage[0], MapKitConfig_MKUseSerializedMapItemStorage[1]);
  v3 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v6, "addButtonRowWithTitle:action:", CFSTR("Clear Saved MapItem"), &stru_1011E69A0);
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v6, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Hide rating ribbon item if call to action present"), MapsUIConfig_MakeRatingScoreAndCallToActionRibbonItemsMutuallyExclusive[0], MapsUIConfig_MakeRatingScoreAndCallToActionRibbonItemsMutuallyExclusive[1]);
  v5 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v6, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Force separator style"), MapsUIConfig_ForceSeparatorPlacecardStyle[0], MapsUIConfig_ForceSeparatorPlacecardStyle[1]);

}

void sub_100B650A0(id a1)
{
  NSString *v1;
  void *v2;
  void *v3;
  id v4;

  v1 = NSTemporaryDirectory();
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "stringByAppendingPathComponent:", CFSTR("SavedMapItem.json")));

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  objc_msgSend(v3, "removeItemAtPath:error:", v4, 0);

}

void sub_100B651E0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100B651FC(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  unsigned int v8;
  id v9;
  id v10;
  id *WeakRetained;
  id *v12;
  id v13;

  v13 = a2;
  v3 = objc_msgSend(v13, "addSectionWithTitle:content:", CFSTR("Ratings and Photos"), &stru_1011E69C0);
  v4 = objc_msgSend(v13, "addSectionWithTitle:content:", CFSTR("Informed Consent"), &stru_1011E6A60);
  v5 = objc_msgSend(v13, "addSectionWithTitle:content:", CFSTR("Notifications"), &stru_1011E6AE0);
  v6 = objc_msgSend(v13, "addSectionWithTitle:content:", CFSTR("Siri Traffic Incidents"), &stru_1011E6B40);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GEOPlatform sharedPlatform](GEOPlatform, "sharedPlatform"));
  v8 = objc_msgSend(v7, "isInternalInstall");

  if (v8)
    v9 = objc_msgSend(v13, "addSectionWithTitle:content:", CFSTR("Laguna Beach Submission Defaults"), &stru_1011E6BC0);
  v10 = objc_msgSend(v13, "addSectionWithTitle:content:", CFSTR("LogDiscard Settings"), &stru_1011E6BE0);
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v12 = WeakRetained;
  if (WeakRetained)
    objc_msgSend(WeakRetained[12], "appendEnvironmentSectionToDebugController:", v13);

}

void sub_100B6533C(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  NSString *v7;
  void *v8;
  id v9;
  id v10;
  MapsDebugTableSection *v11;

  v11 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v11, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enable user generated content"), MapsFeaturesConfig_ShouldEnableLagunaBeach[0], MapsFeaturesConfig_ShouldEnableLagunaBeach[1]);
  v3 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v11, "addButtonRowWithTitle:action:", CFSTR("Clear all POI enrichment content"), &stru_1011E69E0);
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:switchOnStateIfUnset:changeHandler:](v11, "addSwitchRowWithTitle:defaultsKey:switchOnStateIfUnset:changeHandler:", CFSTR("Enable add photo override"), CFSTR("__internal__AllowAddingFakePhotos"), 0, 0);
  v5 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v11, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Tipkit banner set"), MapsConfig_LagunaBeachHasShownTipKitAlert, off_1014B3A68);
  v6 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v11, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Force All Siri Suggestions As Rating Suggestions"), MapsConfig_ARPForceAllMapsHomeSuggestionsAsRatingSuggestions, off_1014B3A78);
  v7 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Present Third Party Photo Sharing splash screen (%.f s delay)"), GEOConfigGetDouble(MapsConfig_UGCSplashScreenDebugDelayTimeInterval, off_1014B5668));
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v9 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v11, "addButtonRowWithTitle:action:", v8, &stru_1011E6A00);

  v10 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v11, "addButtonRowWithTitle:action:", CFSTR("Reset Third Party Photo Sharing splash screen"), &stru_1011E6A40);
}

void sub_100B6548C(id a1)
{
  +[UGCReviewedPlaceManager clearAllUserData](UGCReviewedPlaceManager, "clearAllUserData");
}

void sub_100B65498(id a1)
{
  double Double;
  dispatch_time_t v2;

  Double = GEOConfigGetDouble(MapsConfig_UGCSplashScreenDebugDelayTimeInterval, off_1014B5668);
  v2 = dispatch_time(0, (uint64_t)(Double * 1000000000.0));
  dispatch_after(v2, (dispatch_queue_t)&_dispatch_main_q, &stru_1011E6A20);
}

void sub_100B654E0(id a1)
{
  void *v1;
  void *v2;
  UGCThirdPartyPhotoSharingSplashViewController *v3;

  v3 = objc_alloc_init(UGCThirdPartyPhotoSharingSplashViewController);
  -[UGCThirdPartyPhotoSharingSplashViewController setModalPresentationStyle:](v3, "setModalPresentationStyle:", 2);
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedMapsDelegate](UIApplication, "sharedMapsDelegate"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "chromeViewController"));
  objc_msgSend(v2, "_maps_topMostPresentViewController:animated:completion:", v3, 1, 0);

}

void sub_100B65554(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[UGCThirdPartyPhotoSharingPreferencesManager sharedManager](UGCThirdPartyPhotoSharingPreferencesManager, "sharedManager"));
  objc_msgSend(v1, "debugEraseServerSavedThirdPartyPhotoSharingPreference");

}

void sub_100B65588(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addCheckmarkRowsGroupWithContent:get:set:](a2, "addCheckmarkRowsGroupWithContent:get:set:", &stru_1011E6A80, &stru_1011E6AA0, &stru_1011E6AC0);
}

void sub_100B655C0(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  void *v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  MapsDebugCheckmarkRowsGroup *v8;

  v8 = a2;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", 1));
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v8, "addRowWithTitle:value:", CFSTR("Opted in"), v2);

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", 2));
  v5 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v8, "addRowWithTitle:value:", CFSTR("Opted out"), v4);

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", 0));
  v7 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v8, "addRowWithTitle:value:", CFSTR("Hasn't answered yet"), v6);

}

id sub_100B6568C(id a1)
{
  return +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", GEOConfigGetInteger(MapKitConfig_UserConsentState[0], MapKitConfig_UserConsentState[1]));
}

void sub_100B656C4(id a1, id a2)
{
  id v2;

  v2 = objc_msgSend(a2, "integerValue");
  GEOConfigSetInteger(MapKitConfig_UserConsentState[0], MapKitConfig_UserConsentState[1], v2);
}

void sub_100B656EC(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  MapsDebugTableSection *v4;

  v4 = a2;
  v2 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v4, "addButtonRowWithTitle:action:", CFSTR("Present Fake Photo Submission Resolution (10s delay)"), &stru_1011E6B00);
  v3 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v4, "addButtonRowWithTitle:action:", CFSTR("Present Fake Photo Attribution Cleared Notification"), &stru_1011E6B20);

}

void sub_100B6574C(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[MSPMapsPushDaemonRemoteProxy sharedInstance](MSPMapsPushDaemonRemoteProxy, "sharedInstance"));
  objc_msgSend(v1, "simulateUGCPhotoSubmissionResolution");

}

void sub_100B65780(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[MSPMapsPushDaemonRemoteProxy sharedInstance](MSPMapsPushDaemonRemoteProxy, "sharedInstance"));
  objc_msgSend(v1, "simulateUGCPhotoAttributionClearedNotification");

}

void sub_100B657B4(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  MapsDebugTableSection *v7;

  v7 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:](v7, "addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:", CFSTR("Enabled"), MapsFeaturesConfig_EnableBakersfield[0], MapsFeaturesConfig_EnableBakersfield[1], 0, 0);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:](v7, "addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:", CFSTR("Debug submissions"), MapsConfig_TrafficIncidentsDebugSettingSubmissions, off_1014B34C8, 0, 0);
  v4 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v7, "addButtonRowWithTitle:action:", CFSTR("Delete all cached layout results"), &stru_1011E6B60);
  v5 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v7, "addButtonRowWithTitle:action:", CFSTR("Delete all user generated reports"), &stru_1011E6B80);
  v6 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v7, "addButtonRowWithTitle:action:", CFSTR("Rollover annon ID"), &stru_1011E6BA0);

}

void sub_100B6588C(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[TrafficIncidentLayoutStorage sharedInstance](TrafficIncidentLayoutStorage, "sharedInstance"));
  objc_msgSend(v1, "clearCache");

}

void sub_100B658C0(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[TrafficIncidentsStorageManager sharedInstance](TrafficIncidentsStorageManager, "sharedInstance"));
  objc_msgSend(v1, "clearCache");

}

void sub_100B658F4(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[TrafficIncidentAuthenticationManager sharedInstance](TrafficIncidentAuthenticationManager, "sharedInstance"));
  objc_msgSend(v1, "rolloverAnonymousId");

}

void sub_100B65928(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  MapsDebugTableSection *v6;

  v6 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:](v6, "addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:", CFSTR("Send geotags with photos"), MapsConfig_Debug_UGCSendGeotagsWithPhotos, off_1014B3BB8, 0, 0);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:](v6, "addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:", CFSTR("Send timestamps with photos"), MapsConfig_Debug_UGCSendTimestampsWithPhotos, off_1014B3BC8, 0, 0);
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:](v6, "addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:", CFSTR("Send device location with submission"), MapsConfig_Debug_UGCSendDeviceLocationWithSubmission, off_1014B3BD8, 0, 0);
  v5 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v6, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Save photos after submission"), MapsConfig_DebugUGCSaveLastAddedPhotosToDisk, off_1014B3D78);

}

void sub_100B659F0(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addButtonRowWithTitle:action:](a2, "addButtonRowWithTitle:action:", CFSTR("Fetch BAA certificate info"), &stru_1011E6C00);
}

void sub_100B65A20(id a1)
{
  NSData *v1;

  v1 = objc_opt_new(NSData);
  MSPUGCFetchClientCertificateWithCompletion(CFSTR("com.apple.Maps:DEBUG"), v1, 0, &stru_1011E6C40);

}

void sub_100B65A9C(id a1, MapsDebugValuesViewController *a2)
{
  id v2;
  id v3;
  MapsDebugValuesViewController *v4;

  v4 = a2;
  v2 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v4, "addSectionWithTitle:content:", 0, &stru_1011E6C80);
  v3 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v4, "addSectionWithTitle:content:", 0, &stru_1011E6CA0);

}

void sub_100B65AF4(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](a2, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enable Alberta"), MapsFeaturesConfig_EnableAlberta[0], MapsFeaturesConfig_EnableAlberta[1]);
}

void sub_100B65B28(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addButtonRowWithTitle:action:](a2, "addButtonRowWithTitle:action:", CFSTR("Reset Tippkit UI"), &stru_1011E6CC0);
}

void sub_100B65B58(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v1, "setInteger:forKey:", 0, CFSTR("LPRRoutingFeatureDiscoverySourceViewedTimesKey"));

}

void sub_100B65BC8(id a1, MapsDebugValuesViewController *a2)
{
  id v2;

  v2 = -[MapsDebugValuesViewController addSectionWithTitle:content:](a2, "addSectionWithTitle:content:", CFSTR("DTM"), &stru_1011E6D00);
}

void sub_100B65BF8(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  MapsDebugTableSection *v8;

  v8 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v8, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Force show suggestion"), MapsConfig_DTMForceShowFeatureDiscovery, off_1014B3868);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v8, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Force hide suggestion"), MapsConfig_DTMForceHideFeatureDiscovery, off_1014B3878);
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v8, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Allow repeated presentation per launch"), MapsConfig_DTMFeatureDiscoveryAllowRepeatPresentationPerLaunch, off_1014B3888);
  v5 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v8, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Allow when launched for testing"), CFSTR("DTMFeatureDiscoveryAllowForTests"));
  v6 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:](v8, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:", CFSTR("Max required previous sessions"), CFSTR("e.g. 3"), 1, MapsConfig_DTMSuggestionMinimumNumberOfPreviousRoutes, off_1014B3898);
  v7 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v8, "addButtonRowWithTitle:action:", CFSTR("Reset user dismissals"), &stru_1011E6D20);

}

void sub_100B65CF4(id a1)
{
  +[DTMFeatureDiscoverySource resetAllPreviousDismissals](DTMFeatureDiscoverySource, "resetAllPreviousDismissals");
}

void sub_100B65E40(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 72));
  _Unwind_Resume(a1);
}

void sub_100B65E7C(id *a1, void *a2)
{
  id v3;
  id v4;
  id WeakRetained;
  id v6;
  id v7;

  v3 = a2;
  v4 = objc_msgSend(v3, "addNavigationRowForViewControllerClass:", objc_opt_class(MapsCrossPlatformFeaturesDebugController));
  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  objc_msgSend(WeakRetained, "addAppUISectionTo:", v3);

  v6 = objc_loadWeakRetained(a1);
  objc_msgSend(v6, "addChromeSettingsTo:", v3);

  v7 = objc_loadWeakRetained(a1);
  objc_msgSend(v7, "addCarPlaySectionTo:", v3);

}

void sub_100B65F24(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "addHikingSettingsTo:", v3);

  v5 = objc_loadWeakRetained(v2);
  objc_msgSend(v5, "addImpressionLoggingSettingsTo:", v3);

  v6 = objc_loadWeakRetained(v2);
  objc_msgSend(v6, "addEnhancedBusinessSettingsTo:", v3);

  v7 = objc_loadWeakRetained(v2);
  objc_msgSend(v7, "addSmartCardsSettingsTo:", v3);

  v8 = objc_loadWeakRetained(v2);
  objc_msgSend(v8, "addDavisSettingsTo:", v3);

  v9 = objc_loadWeakRetained(v2);
  objc_msgSend(v9, "addUGCSettingsTo:", v3);

  v10 = objc_loadWeakRetained(v2);
  objc_msgSend(v10, "addLPRSettingsTo:", v3);

  v11 = objc_loadWeakRetained(v2);
  objc_msgSend(v11, "addMFDSettingsTo:", v3);

  v12 = objc_loadWeakRetained(v2);
  objc_msgSend(v12, "addRoutePlanningSettingsTo:", v3);

  v13 = objc_loadWeakRetained(v2);
  objc_msgSend(v13, "addMapsHomeSettingsTo:", v3);

  v14 = objc_msgSend(v3, "addNavigationRowForViewControllerClass:", objc_opt_class(MapsVenuesDebugController));
  v15 = objc_loadWeakRetained(v2);
  objc_msgSend(v15, "addLookAroundSettingsTo:", v3);

  v16 = objc_loadWeakRetained(v2);
  objc_msgSend(v16, "addCollectionSettingsTo:", v3);

  v17 = objc_loadWeakRetained(v2);
  objc_msgSend(v17, "addShareETASettingsTo:", v3);

  v18 = objc_loadWeakRetained(v2);
  objc_msgSend(v18, "addScreenshot2SettingsTo:", v3);

  v19 = objc_loadWeakRetained(v2);
  objc_msgSend(v19, "addTransitSettingsTo:", v3);

  v20 = objc_loadWeakRetained(v2);
  objc_msgSend(v20, "addDoomSettingsTo:", v3);

  v21 = objc_loadWeakRetained(v2);
  objc_msgSend(v21, "addFindMyCarSettingsTo:", v3);

  v22 = objc_loadWeakRetained(v2);
  objc_msgSend(v22, "addPoisInjectionSettingsTo:", v3);

  v23 = objc_loadWeakRetained(v2);
  objc_msgSend(v23, "addAutocompleteSettingsTo:", v3);

  v24 = objc_loadWeakRetained(v2);
  objc_msgSend(v24, "addSearchSettingsTo:", v3);

  v25 = objc_msgSend(v3, "addNavigationRowForViewControllerClass:", objc_opt_class(MapsSuggestionsDebugController));
  v26 = objc_loadWeakRetained(v2);
  objc_msgSend(v26, "addFeaturesSectionTo:", v3);

}

void sub_100B66194(id *a1, void *a2)
{
  id v3;
  id v4;
  id WeakRetained;
  id v6;
  id v7;
  id v8;

  v3 = a2;
  v4 = objc_msgSend(v3, "addNavigationRowForViewControllerClass:", objc_opt_class(MapsRAPDebugController));
  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  objc_msgSend(WeakRetained, "addMapsResetLaunchAlertsTo:", v3);

  v6 = objc_msgSend(v3, "addNavigationRowForViewControllerClass:", objc_opt_class(MapsPushdDebugController));
  v7 = objc_loadWeakRetained(a1);
  objc_msgSend(v7, "addCoreRecentsTo:", v3);

  v8 = objc_loadWeakRetained(a1);
  objc_msgSend(v8, "addOthersTo:", v3);

}

void sub_100B66834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v16 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100B66860(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100B66870(uint64_t a1)
{

}

void sub_100B66878(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_100B668C4(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_100B66B34(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  SearchResult *v7;
  void *v8;
  SearchResult *v9;
  id v10;

  v10 = a2;
  v5 = a3;
  v6 = v5;
  if (v10)
  {
    objc_msgSend(*(id *)(a1 + 32), "setAddress:");
  }
  else if (v5)
  {
    v7 = [SearchResult alloc];
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "mapItem"));
    v9 = -[SearchResult initWithMapItem:](v7, "initWithMapItem:", v8);

    -[SearchResult setLocationOfInterest:](v9, "setLocationOfInterest:", v6);
    objc_msgSend(*(id *)(a1 + 32), "setSearchResult:", v9);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

uint64_t sub_100B66BF0(uint64_t a1, void *a2)
{
  id v3;
  SearchResult *v4;
  void *v5;
  SearchResult *v6;

  v3 = a2;
  v4 = [SearchResult alloc];
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "mapItem"));

  v6 = -[SearchResult initWithMapItem:](v4, "initWithMapItem:", v5);
  objc_msgSend(*(id *)(a1 + 32), "setSearchResult:", v6);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

SearchFieldItem *__cdecl sub_100B67554(id a1, SearchFieldItem *a2, unint64_t a3)
{
  SearchFieldItem *v3;
  void *v4;
  unsigned __int8 v5;
  SearchFieldItem *v6;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[SearchFieldItem composedWaypoint](v3, "composedWaypoint"));
  v5 = objc_msgSend(v4, "isServerProvidedWaypoint");

  if ((v5 & 1) != 0)
    v6 = 0;
  else
    v6 = v3;

  return v6;
}

id sub_100B67808()
{
  if (qword_1014D4148 != -1)
    dispatch_once(&qword_1014D4148, &stru_1011E6E58);
  return (id)qword_1014D4140;
}

void sub_100B67FB4(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "waypointListView"));
  v3 = objc_msgSend(v2, "indexForLastWaypointCell");

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v4, "routeSearch:didUpdateInputText:atIndex:", *(_QWORD *)(a1 + 32), &stru_1011EB268, v3);

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "waypointListView"));
  objc_msgSend(v5, "selectRowIndex:", v3);

}

void sub_100B68A20(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "RoutePlanningWaypointEditor");
  v2 = (void *)qword_1014D4140;
  qword_1014D4140 = (uint64_t)v1;

}

void sub_100B6929C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100B69320(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_100B69404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  objc_sync_exit(v10);
  _Unwind_Resume(a1);
}

void sub_100B69484(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100B69690(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100B696F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100B6973C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100B6979C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100B697E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100B69848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100B69894(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100B698F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100B69940(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100B699A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100B699EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100B69A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100B69C3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_100B69E74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100B69FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  void *v10;

  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100B6A078(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_100B6A2D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_100B6A510(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100B6A7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_100B6A8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  objc_sync_exit(v10);
  _Unwind_Resume(a1);
}

void sub_100B6AA54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100B6B6D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,_Unwind_Exception *exception_object,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{

  _Unwind_Resume(a1);
}

id sub_100B6BBA4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_startTestAndPerformScrollTest");
}

void sub_100B6BCE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100B6BD04(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  void *v4;
  _QWORD v5[4];
  id v6;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100B6BE10;
    v5[3] = &unk_1011AD288;
    objc_copyWeak(&v6, v1);
    +[PPTNotificationCenter addOnceObserverForName:object:usingBlock:](PPTNotificationCenter, "addOnceObserverForName:object:usingBlock:", CFSTR("PPTTest_SearchHome_DidSetActive"), 0, v5);
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v3, "addObserver:selector:name:object:", WeakRetained, "didUpdateDataFetcher:", CFSTR("PPTTest_SearchHome_DidUpdateDataFetcher"), 0);

    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "testCoordinator"));
    objc_msgSend(v4, "pptTestEnterSearchMode");

    objc_destroyWeak(&v6);
  }

}

void sub_100B6BDF8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100B6BE10(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  id v5;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "object"));
    objc_msgSend(WeakRetained, "setNumberOfDataFetchers:", objc_msgSend(v4, "_ppt_numberOfDataFetchers"));
    objc_msgSend(WeakRetained, "startedSubTest:", CFSTR("collectData"));

  }
}

id sub_100B6BFA0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_selectAndScrollCuratedCollection");
}

id sub_100B6BFF8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_selectAndScrollCuratedCollection");
}

void sub_100B6C0B4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100B6C0D0(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  _QWORD v3[5];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    if (objc_msgSend(WeakRetained, "canUpdateTrayLayout"))
    {
      v3[0] = _NSConcreteStackBlock;
      v3[1] = 3221225472;
      v3[2] = sub_100B6C160;
      v3[3] = &unk_1011AC860;
      v3[4] = v2;
      objc_msgSend(v2, "updateTrayLayout:animated:completion:", 2, 1, v3);
    }
    else
    {
      objc_msgSend(v2, "_scrollCuratedCollection");
    }
  }

}

id sub_100B6C160(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_scrollCuratedCollection");
}

void sub_100B6C378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100B6C3C4(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 32), "finishedTest");
    WeakRetained = v3;
  }

}

uint64_t sub_100B6C4A0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_100B6C598(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

id sub_100B6D048(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  id v8;
  BOOL v9;
  _BOOL8 v10;
  double v11;
  double v12;
  double v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v30;
  _QWORD v31[2];

  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "traitCollection"));
  v7 = objc_msgSend(v6, "userInterfaceIdiom");

  v8 = objc_alloc((Class)UICollectionLayoutListConfiguration);
  v9 = v7 == (id)5;
  v10 = v7 != (id)5;
  if (v9)
    v11 = 0.0;
  else
    v11 = 16.0;
  if (v9)
    v12 = 0.0;
  else
    v12 = 8.0;
  if (v9)
    v13 = 16.0;
  else
    v13 = 0.0;
  v14 = objc_msgSend(v8, "initWithAppearance:", 2 * v10);
  objc_msgSend(v14, "setShowsSeparators:", v10);
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "separatorConfiguration"));
  v30 = objc_msgSend(v15, "copy");

  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "theme"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "dynamicHairlineColor"));
  objc_msgSend(v30, "setColor:", v17);

  objc_msgSend(v14, "setSeparatorConfiguration:", v30);
  objc_msgSend(v14, "setHeaderMode:", 1);
  objc_msgSend(v14, "setHeaderTopPadding:", 2.0);
  objc_msgSend(v14, "setFooterMode:", 1);
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor clearColor](UIColor, "clearColor"));
  objc_msgSend(v14, "setBackgroundColor:", v18);

  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutSection sectionWithListConfiguration:layoutEnvironment:](NSCollectionLayoutSection, "sectionWithListConfiguration:layoutEnvironment:", v14, v5));
  objc_msgSend(v19, "setContentInsets:", 0.0, v11, v12, v11);
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutDimension fractionalWidthDimension:](NSCollectionLayoutDimension, "fractionalWidthDimension:", 1.0));
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutDimension absoluteDimension:](NSCollectionLayoutDimension, "absoluteDimension:", 40.0));
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutSize sizeWithWidthDimension:heightDimension:](NSCollectionLayoutSize, "sizeWithWidthDimension:heightDimension:", v20, v21));

  v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutBoundarySupplementaryItem boundarySupplementaryItemWithLayoutSize:elementKind:alignment:](NSCollectionLayoutBoundarySupplementaryItem, "boundarySupplementaryItemWithLayoutSize:elementKind:alignment:", v22, UICollectionElementKindSectionHeader, 1));
  objc_msgSend(v23, "setContentInsets:", 0.0, 0.0, -8.0, 0.0);
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutDimension fractionalWidthDimension:](NSCollectionLayoutDimension, "fractionalWidthDimension:", 1.0));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 152), "footerHeightForSection:collectionView:", a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 128));
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutDimension estimatedDimension:](NSCollectionLayoutDimension, "estimatedDimension:"));
  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutSize sizeWithWidthDimension:heightDimension:](NSCollectionLayoutSize, "sizeWithWidthDimension:heightDimension:", v24, v25));

  v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutBoundarySupplementaryItem boundarySupplementaryItemWithLayoutSize:elementKind:alignment:](NSCollectionLayoutBoundarySupplementaryItem, "boundarySupplementaryItemWithLayoutSize:elementKind:alignment:", v26, UICollectionElementKindSectionFooter, 5));
  objc_msgSend(v27, "setContentInsets:", 0.0, v13, 0.0, v13);
  v31[0] = v23;
  v31[1] = v27;
  v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v31, 2));
  objc_msgSend(v19, "setBoundarySupplementaryItems:", v28);

  return v19;
}

void sub_100B6DAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location)
{
  id *v26;

  objc_destroyWeak(v26);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100B6DB04(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
    objc_msgSend(v2, "viewControllerShowOfflineMaps:", v3);

    WeakRetained = v3;
  }

}

BOOL sub_100B6E200(CGRect *a1, void *a2)
{
  CGRect v4;

  objc_msgSend(a2, "frame");
  return CGRectIntersectsRect(v4, a1[1]);
}

id sub_100B6E2A4(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "indexPathForCell:", a2);
}

MKServerFormattedString *__cdecl sub_100B6F1F8(id a1, GEOComposedString *a2, unint64_t a3)
{
  GEOComposedString *v3;
  id v4;

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)MKServerFormattedString), "initWithComposedString:", v3);

  return (MKServerFormattedString *)v4;
}

id sub_100B6F23C(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)MKServerFormattedString), "initWithGeoServerString:parameters:", v3, *(_QWORD *)(a1 + 32));

  return v4;
}

MKServerFormattedString *__cdecl sub_100B6F290(id a1, GEOComposedString *a2, unint64_t a3)
{
  GEOComposedString *v3;
  id v4;

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)MKServerFormattedString), "initWithComposedString:", v3);

  return (MKServerFormattedString *)v4;
}

id sub_100B6F2D4(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)MKServerFormattedString), "initWithGeoServerString:parameters:", v3, *(_QWORD *)(a1 + 32));

  return v4;
}

id sub_100B72200()
{
  if (qword_1014D4168 != -1)
    dispatch_once(&qword_1014D4168, &stru_1011E7090);
  return (id)qword_1014D4160;
}

uint64_t sub_100B72588(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100B72598(uint64_t a1)
{

}

void sub_100B725A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_description"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

id sub_100B7275C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_cancelRequestIfNeeded");
  return _objc_msgSend(*(id *)(a1 + 32), "_notifyDidInvalidate");
}

id sub_100B72808(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_processRequest:", *(_QWORD *)(a1 + 40));
}

void sub_100B729DC(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = objc_alloc_init((Class)NSMutableDictionary);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 104);
  *(_QWORD *)(v3 + 104) = v2;

}

uint64_t sub_100B72AD4(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(result + 32) + 32);
  return result;
}

uint64_t sub_100B72B80(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(result + 32) + 48);
  return result;
}

void sub_100B72C50(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "copy");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_100B72D44(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "copy");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

uint64_t sub_100B72E14(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 32) + 40);
  return result;
}

uint64_t sub_100B72E84(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 40) = *(_BYTE *)(result + 40);
  return result;
}

uint64_t sub_100B72F24(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = (unint64_t)(*(_QWORD *)(*(_QWORD *)(result + 32)
                                                                                                + 48)
                                                                                    - 1) < 3;
  return result;
}

void sub_100B72FC4(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 64), *(id *)(a1 + 40));
}

id sub_100B73050(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_setResponse:", *(_QWORD *)(a1 + 40));
}

void sub_100B73264(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 104), "objectForKeyedSubscript:", a1[5]));
  v3 = *(_QWORD *)(a1[6] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

id sub_100B73388(_QWORD *a1)
{
  return objc_msgSend(*(id *)(a1[4] + 104), "setObject:forKeyedSubscript:", a1[6], a1[5]);
}

void sub_100B7340C(uint64_t a1)
{
  unsigned int v2;
  id v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v2 = objc_msgSend(*(id *)(a1 + 32), "isInvalidated");
  v3 = sub_100B72200();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = v4;
  if (v2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = *(_QWORD *)(a1 + 32);
      v8 = 134217984;
      v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[%p] invalidated before we could post NanoRoutePlanningSessionWillStartNotification", (uint8_t *)&v8, 0xCu);
    }
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v7 = *(_QWORD *)(a1 + 32);
      v8 = 134217984;
      v9 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[%p] posting NanoRoutePlanningSessionWillStartNotification", (uint8_t *)&v8, 0xCu);
    }

    v5 = objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    -[NSObject postNotificationName:object:](v5, "postNotificationName:object:", CFSTR("NanoRoutePlanningSessionWillStart"), *(_QWORD *)(a1 + 32));
  }

}

void sub_100B735A4(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  void *v14;

  v2 = sub_100B72200();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(void **)(a1 + 32);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "observers"));
    v9 = 134218498;
    v10 = v4;
    v11 = 2080;
    v12 = "-[NanoRoutePlanningSession _notifySessionDidStartLoading]_block_invoke";
    v13 = 2112;
    v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%p] %s <%@>", (uint8_t *)&v9, 0x20u);

  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observers"));
  v7 = *(void **)(a1 + 32);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "request"));
  objc_msgSend(v6, "routePlanningSession:didStartLoadingWithRequest:", v7, v8);

}

void sub_100B7372C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  void *v14;

  v2 = sub_100B72200();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(void **)(a1 + 32);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "observers"));
    v9 = 134218498;
    v10 = v4;
    v11 = 2080;
    v12 = "-[NanoRoutePlanningSession _notifySessionDidUpdateResponse]_block_invoke";
    v13 = 2112;
    v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%p] %s <%@>", (uint8_t *)&v9, 0x20u);

  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observers"));
  v7 = *(void **)(a1 + 32);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "response"));
  objc_msgSend(v6, "routePlanningSession:didUpdateWithResponse:", v7, v8);

}

void sub_100B738B4(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  void *v14;

  v2 = sub_100B72200();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v4 = *(void **)(a1 + 32);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "observers"));
    v9 = 134218498;
    v10 = v4;
    v11 = 2080;
    v12 = "-[NanoRoutePlanningSession _notifySessionDidFail]_block_invoke";
    v13 = 2112;
    v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "[%p] %s <%@>", (uint8_t *)&v9, 0x20u);

  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observers"));
  v7 = *(void **)(a1 + 32);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "response"));
  objc_msgSend(v6, "routePlanningSession:didFailWithResponse:", v7, v8);

}

void sub_100B73A28(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  void *v12;

  v2 = sub_100B72200();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(void **)(a1 + 32);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "observers"));
    v7 = 134218498;
    v8 = v4;
    v9 = 2080;
    v10 = "-[NanoRoutePlanningSession _notifyDidInvalidate]_block_invoke";
    v11 = 2112;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%p] %s <%@>", (uint8_t *)&v7, 0x20u);

  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observers"));
  objc_msgSend(v6, "routePlanningSessionDidInvalidate:", *(_QWORD *)(a1 + 32));

}

void sub_100B73B64(id a1)
{
  void *v1;
  id v2;
  void *v3;
  _QWORD v4[5];
  _QWORD v5[5];

  v4[0] = &off_101270A08;
  v5[0] = objc_opt_class(NanoRoutePlanningReadyState);
  v4[1] = &off_101270A20;
  v5[1] = objc_opt_class(NanoRoutePlanningLocationUpdateState);
  v4[2] = &off_101270A38;
  v5[2] = objc_opt_class(NanoRoutePlanningWaypointRefinementState);
  v4[3] = &off_101270A50;
  v5[3] = objc_opt_class(NanoRoutePlanningRouteRequestState);
  v4[4] = &off_101270A68;
  v5[4] = objc_opt_class(NanoRoutePlanningCompletedState);
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 5));
  v2 = objc_msgSend(v1, "mutableCopy");
  v3 = (void *)qword_1014D4150;
  qword_1014D4150 = (uint64_t)v2;

}

void sub_100B73E80(uint64_t a1)
{
  id WeakRetained;
  id v3;
  int64_t v4;
  id v5;
  NSObject *v6;
  const __CFString *v7;
  void *v8;
  id v9;
  NSObject *v10;
  const __CFString *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  NSObject *v19;
  _BOOL4 v20;
  const __CFString *v21;
  void *v22;
  id v23;
  NSObject *v24;
  const __CFString *v25;
  void *v26;
  const __CFString *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  const __CFString *v32;
  void *v33;
  const __CFString *v34;
  void *v35;
  int v36;
  id v37;
  __int16 v38;
  void *v39;
  __int16 v40;
  id v41;
  __int16 v42;
  id v43;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v3 = WeakRetained;
  if (WeakRetained && (objc_msgSend(WeakRetained, "isInvalidated") & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "_triggerStalenessTimer");
    v4 = *((_QWORD *)v3 + 6);
    switch((*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))())
    {
      case 0:
        v5 = sub_100B72200();
        v6 = objc_claimAutoreleasedReturnValue(v5);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          v7 = sub_1008EFC08(v4);
          v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
          v36 = 134218242;
          v37 = v3;
          v38 = 2112;
          v39 = v8;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[%p] '%@' is still running", (uint8_t *)&v36, 0x16u);

        }
        break;
      case 1:
        v9 = sub_100B72200();
        v10 = objc_claimAutoreleasedReturnValue(v9);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          v11 = sub_1008EFC08(v4);
          v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
          v13 = objc_msgSend(*((id *)v3 + 9), "numberOfRoutes");
          v14 = objc_msgSend(*((id *)v3 + 9), "expectedNumberOfRoutes");
          v36 = 134218754;
          v37 = v3;
          v38 = 2112;
          v39 = v12;
          v40 = 2048;
          v41 = v13;
          v42 = 2048;
          v43 = v14;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "[%p] '%@' did update; (%lu/%lu)",
            (uint8_t *)&v36,
            0x2Au);

        }
        v15 = *(void **)(a1 + 32);
        goto LABEL_16;
      case 2:
        v16 = 3;
        if (v4 < 3)
          v16 = v4;
        v17 = v16 + 1;
        v18 = sub_100B72200();
        v19 = objc_claimAutoreleasedReturnValue(v18);
        v20 = os_log_type_enabled(v19, OS_LOG_TYPE_INFO);
        if (v17 == v4)
        {
          if (v20)
          {
            v21 = sub_1008EFC08(v4);
            v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
            v36 = 134218242;
            v37 = v3;
            v38 = 2112;
            v39 = v22;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "[%p] '%@' reported finished, but will not advance state", (uint8_t *)&v36, 0x16u);

          }
          v15 = v3;
LABEL_16:
          objc_msgSend(v15, "_notifySessionDidUpdateResponse");
        }
        else
        {
          if (v20)
          {
            v32 = sub_1008EFC08(v4);
            v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
            v34 = sub_1008EFC08(v17);
            v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
            v36 = 134218498;
            v37 = v3;
            v38 = 2112;
            v39 = v33;
            v40 = 2112;
            v41 = v35;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "[%p] '%@' has finished, advancing to '%@'", (uint8_t *)&v36, 0x20u);

          }
          v30 = v3;
          v31 = v17;
LABEL_23:
          objc_msgSend(v30, "_transitionToState:", v31);
        }
        break;
      case 3:
        v23 = sub_100B72200();
        v24 = objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          v25 = sub_1008EFC08(v4);
          v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
          v27 = sub_1008EFC08(4uLL);
          v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
          v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)v3 + 9), "lastError"));
          v36 = 134218754;
          v37 = v3;
          v38 = 2112;
          v39 = v26;
          v40 = 2112;
          v41 = v28;
          v42 = 2112;
          v43 = v29;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "[%p] '%@' reported an error, moving to '%@'; error: %@",
            (uint8_t *)&v36,
            0x2Au);

        }
        v30 = v3;
        v31 = 4;
        goto LABEL_23;
      default:
        break;
    }
  }

}

void sub_100B74500(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  unsigned __int8 v4;
  void *v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v5 = WeakRetained;
    v4 = objc_msgSend(WeakRetained, "isInvalidated");
    v3 = v5;
    if ((v4 & 1) == 0)
    {
      objc_msgSend(v5, "_transitionToState:withClass:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48), *(_QWORD *)(a1 + 48));
      v3 = v5;
    }
  }

}

void sub_100B74744(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "selectedRoute"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_100B74834(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "selectedCompanionRoute"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

id sub_100B749BC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_setSelectedRouteWithRouteID:", *(_QWORD *)(a1 + 40));
}

void sub_100B74B0C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend(WeakRetained, "_hasReceivedAllExpectedRoutes");

}

id sub_100B7521C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_updateWithRequest:response:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_100B75580(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v2 = objc_msgSend(*(id *)(a1 + 40), "mutableCopy");
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 64);
  *(_QWORD *)(v3 + 64) = v2;

  v5 = *(void **)(a1 + 48);
  if (v5)
  {
    v6 = *(void **)(a1 + 32);
    v7 = objc_msgSend(v5, "mutableCopy");
    objc_msgSend(v6, "_setResponse:", v7);

  }
}

void sub_100B7587C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100B75894(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v3 = *(void **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;

}

void sub_100B758CC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "NanoRoutePlanningSession");
  v2 = (void *)qword_1014D4160;
  qword_1014D4160 = (uint64_t)v1;

}

void sub_100B75A64(id a1)
{
  NavMessageSignLayout *v1;
  void *v2;

  v1 = objc_alloc_init(NavMessageSignLayout);
  v2 = (void *)qword_1014D4170;
  qword_1014D4170 = (uint64_t)v1;

}

void sub_100B762B4(id a1)
{
  NavSteppingSignLayout *v1;
  void *v2;

  v1 = objc_alloc_init(NavSteppingSignLayout);
  v2 = (void *)qword_1014D4180;
  qword_1014D4180 = (uint64_t)v1;

}

void sub_100B76324(id a1)
{
  NavPedestrianSignLayout *v1;
  void *v2;

  v1 = objc_alloc_init(NavPedestrianSignLayout);
  v2 = (void *)qword_1014D4190;
  qword_1014D4190 = (uint64_t)v1;

}

void sub_100B766E8(id a1)
{
  NavPedestrianSignLayoutCompactWidth *v1;
  void *v2;

  v1 = objc_alloc_init(NavPedestrianSignLayoutCompactWidth);
  v2 = (void *)qword_1014D41A0;
  qword_1014D41A0 = (uint64_t)v1;

}

void sub_100B76750(id a1)
{
  NavDrivingSignLayout *v1;
  void *v2;

  v1 = objc_alloc_init(NavDrivingSignLayout);
  v2 = (void *)qword_1014D41B0;
  qword_1014D41B0 = (uint64_t)v1;

}

void sub_100B76B18(id a1)
{
  NavDrivingSignLayoutMinimizedWithJunctionView *v1;
  void *v2;

  v1 = objc_alloc_init(NavDrivingSignLayoutMinimizedWithJunctionView);
  v2 = (void *)qword_1014D41C0;
  qword_1014D41C0 = (uint64_t)v1;

}

void sub_100B76B88(id a1)
{
  NavDrivingSignLayoutCompactWithJunctionView *v1;
  void *v2;

  v1 = objc_alloc_init(NavDrivingSignLayoutCompactWithJunctionView);
  v2 = (void *)qword_1014D41D0;
  qword_1014D41D0 = (uint64_t)v1;

}

void sub_100B76BF8(id a1)
{
  NavDrivingSignLayoutMinimized *v1;
  void *v2;

  v1 = objc_alloc_init(NavDrivingSignLayoutMinimized);
  v2 = (void *)qword_1014D41E0;
  qword_1014D41E0 = (uint64_t)v1;

}

void sub_100B770D4(id a1)
{
  NavDrivingSignLayoutSecondary *v1;
  void *v2;

  v1 = objc_alloc_init(NavDrivingSignLayoutSecondary);
  v2 = (void *)qword_1014D41F0;
  qword_1014D41F0 = (uint64_t)v1;

}

void sub_100B77234(id a1)
{
  NavDrivingSignLayoutCompactWidth *v1;
  void *v2;

  v1 = objc_alloc_init(NavDrivingSignLayoutCompactWidth);
  v2 = (void *)qword_1014D4200;
  qword_1014D4200 = (uint64_t)v1;

}

void sub_100B774D0(id a1)
{
  NavDrivingSignLayoutSecondaryCompactWidth *v1;
  void *v2;

  v1 = objc_alloc_init(NavDrivingSignLayoutSecondaryCompactWidth);
  v2 = (void *)qword_1014D4210;
  qword_1014D4210 = (uint64_t)v1;

}

id sub_100B782E8()
{
  if (qword_1014D4228 != -1)
    dispatch_once(&qword_1014D4228, &stru_1011E7238);
  return (id)qword_1014D4220;
}

void sub_100B7A1FC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  _BOOL8 v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;

  v3 = a2;
  v9 = v3;
  if (*(_QWORD *)(a1 + 40) == 2)
  {
    objc_msgSend(v3, "setAlternateRoutesEnabled:", *(unsigned __int8 *)(a1 + 48));
  }
  else
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trafficAlert"));
    if (v4)
      v5 = *(_BYTE *)(a1 + 48) != 0;
    else
      v5 = 0;
    objc_msgSend(v9, "setAlternateRoutesEnabled:", v5);

  }
  v7 = *(void **)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "trafficAlert"));
  objc_msgSend(v9, "setRouteMarkerOptions:", objc_msgSend(v7, "_routeMarkerOptionsForCameraStyle:incidentAlert:", v6, v8));

}

void sub_100B7ADD0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "ChromeNavigationDisplay");
  v2 = (void *)qword_1014D4220;
  qword_1014D4220 = (uint64_t)v1;

}

void sub_100B7AE40(id a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](NSProcessInfo, "processInfo"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "environment"));
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("XCODE_BUILT_PRODUCTS")));

  if (!v9)
  {
    v3 = UISystemRootDirectory();
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "stringByAppendingPathComponent:", CFSTR("/AppleInternal/Library/Bundles/")));

  }
  v5 = objc_alloc((Class)NSBundle);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "stringByAppendingPathComponent:", CFSTR("MapsInternalExtras.bundle")));
  v7 = objc_msgSend(v5, "initWithPath:", v6);
  v8 = (void *)qword_1014D4238;
  qword_1014D4238 = (uint64_t)v7;

}

void sub_100B7B7B8(id a1)
{
  UserProfileLinkPreferencesProvider *v1;
  void *v2;

  v1 = objc_alloc_init(UserProfileLinkPreferencesProvider);
  v2 = (void *)qword_1014D4240;
  qword_1014D4240 = (uint64_t)v1;

}

id sub_100B7B894(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateLinkAndNotifyObservers:", 1);
}

void sub_100B7BDD8(id a1, id a2, id a3)
{
  _objc_msgSend(a3, "setNeedsTablePartsUpdateWithSender:");
}

void sub_100B7C12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100B7C178(id a1, id a2, id a3, RAPSearchHistoryItemTableViewCell *a4, RAPUserSearch *a5)
{
  -[RAPSearchHistoryItemTableViewCell setHistoryItem:](a4, "setHistoryItem:", a5);
}

void sub_100B7C184(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id WeakRetained;

  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "selectedValue"));
  objc_msgSend(v5, "setSelectedValue:", v6);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_instrumentSelectedSearch");

}

void sub_100B7C1F4(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "proceedToNextQuestion:", v3);

}

void sub_100B7C758(id a1, id a2, RAPReportComposerSearchSubcategorySection *a3)
{
  -[RAPTablePartSection didChange](a3, "didChange");
}

void sub_100B80328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id location)
{
  id *v32;

  objc_destroyWeak(v32);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100B80364(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_updateFooterContentWithSharingIdentity:", v3);

}

void sub_100B807C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100B807EC(uint64_t a1)
{
  _QWORD *WeakRetained;
  void *v2;
  void *v3;
  _BYTE *v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = (void *)WeakRetained[10];
    WeakRetained[10] = 0;
    v4 = WeakRetained;

    v4[8] = 1;
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v3, "postNotificationName:object:", CarShareETAInfoViewDidChangeShareETASuggestionVisibilityNotification, v4);

    +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 399, 126, 0);
    WeakRetained = v4;
  }

}

id sub_100B80A08(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "updateContent");
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "reloadData");
}

void sub_100B80BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100B80BD4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100B80BE4(uint64_t a1)
{

}

void sub_100B80BEC(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v2 = (void *)a1[4];
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[CarShareTripContactCell reuseIdentifier](CarShareTripContactCell, "reuseIdentifier"));
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "dequeueReusableCellWithIdentifier:forIndexPath:", v3, a1[5]));
  v5 = *(_QWORD *)(a1[7] + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1[7] + 8) + 40), "setShowsSubtitleWhenNotSharing:", 1);
  objc_msgSend(*(id *)(*(_QWORD *)(a1[7] + 8) + 40), "configureWithMSPSharedTripContact:", *(_QWORD *)(a1[6] + 32));
  objc_msgSend(*(id *)(*(_QWORD *)(a1[7] + 8) + 40), "setDelegate:", a1[6]);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[MSPSharedTripService sharedInstance](MSPSharedTripService, "sharedInstance"));
  LODWORD(v3) = objc_msgSend(v7, "isSharingWithContact:", *(_QWORD *)(a1[6] + 32));

  if ((_DWORD)v3)
    objc_msgSend(*(id *)(*(_QWORD *)(a1[7] + 8) + 40), "setSharingState:animated:", 3, 0);
}

void sub_100B80F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100B80F28(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setSharingState:animated:", 1, 1);
}

id sub_100B80F38(uint64_t a1)
{
  id WeakRetained;

  objc_msgSend(*(id *)(a1 + 32), "setSharingState:animated:", 0, 0);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_stopCompletionTimer");

  return +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 402, 126, 0);
}

void sub_100B8114C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

id sub_100B81180(uint64_t a1)
{
  id WeakRetained;

  objc_msgSend(*(id *)(a1 + 32), "setSharingState:animated:", 0, 0);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_stopCompletionTimer");

  return +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 402, 126, 0);
}

void sub_100B811D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained;

  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 40), "setSharingState:animated:", 0, 0);
  }
  else
  {
    +[MapsSharedTripAnalyticsHelper sendSuccessAnalyticFor:](_TtC4Maps29MapsSharedTripAnalyticsHelper, "sendSuccessAnalyticFor:", *(_QWORD *)(a1 + 32));
    +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 400, 126, 0);
    objc_msgSend(*(id *)(a1 + 40), "setSharingState:animated:", 3, 0);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    objc_msgSend(WeakRetained, "_startCompletionTimer");

  }
}

void sub_100B83534(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "coordinator"));
  objc_msgSend(v4, "showAnnouncementForFlyover:", v3);

}

void sub_100B83818(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  v3 = objc_msgSend(v10, "count");
  v4 = v10;
  if (v3)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "firstObject"));
    v6 = v5;
    if (v5)
    {
      v7 = *(void **)(a1 + 32);
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "_geoMapItem"));
      objc_msgSend(v7, "updateWithGEOMapItem:", v8);

    }
    v9 = *(_QWORD *)(a1 + 40);
    if (v9)
      (*(void (**)(uint64_t, _QWORD))(v9 + 16))(v9, *(_QWORD *)(a1 + 32));

    v4 = v10;
  }

}

void sub_100B854FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  id *v25;
  uint64_t v26;

  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Block_object_dispose((const void *)(v26 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_100B85590(_QWORD *a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;

  v2 = sub_100431A4C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v5 = a1[5];
    v4 = a1[6];
    v6 = a1[4];
    v7 = 138412802;
    v8 = v6;
    v9 = 2048;
    v10 = v4;
    v11 = 2112;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "(tag %@) from source: %ld : state: %@", (uint8_t *)&v7, 0x20u);
  }

}

uint64_t sub_100B85650(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100B85660(uint64_t a1)
{

}

void sub_100B85668(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  SearchFieldItem *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id WeakRetained;
  void *v12;
  id v13;

  v13 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[SearchInfo searchInfoWithResults:](SearchInfo, "searchInfoWithResults:"));
  if (objc_msgSend(*(id *)(a1 + 32), "hasSelectedPlaceIndex"))
  {
    v4 = objc_msgSend(*(id *)(a1 + 32), "selectedPlaceIndex");
    if (v4 < objc_msgSend(v13, "count"))
      objc_msgSend(v3, "setSelectedIndex:", objc_msgSend(*(id *)(a1 + 32), "selectedPlaceIndex"));
  }
  if (v3 && !*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
  {
    v5 = objc_alloc_init(SearchFieldItem);
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "results"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "firstObject"));

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "title"));
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setSearchString:", v10);

  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
  {
    WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 40) + 16));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "baseActionCoordinator"));
    objc_msgSend(v12, "restoreSearchForItem:withResults:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v3);

  }
}

void sub_100B857C0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  SearchResult *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v3 = a2;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v10;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(v3);
        v8 = -[SearchResult initWithMapItem:]([SearchResult alloc], "initWithMapItem:", *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v7));
        if (v8)
          objc_msgSend(*(id *)(a1 + 32), "addObject:", v8);

        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v5);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100B858E8(uint64_t a1, void *a2)
{
  id v3;
  id *WeakRetained;
  SearchFieldItem *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v3 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v5 = objc_alloc_init(SearchFieldItem);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "title"));
    -[SearchFieldItem setSearchString:](v5, "setSearchString:", v6);

    v7 = objc_loadWeakRetained(WeakRetained + 2);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "baseActionCoordinator"));
    v11 = v3;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v11, 1));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[SearchInfo searchInfoWithResults:](SearchInfo, "searchInfoWithResults:", v9));
    objc_msgSend(v8, "restoreSearchForItem:withResults:", v5, v10);

  }
}

id sub_100B85D6C()
{
  if (qword_1014D4258 != -1)
    dispatch_once(&qword_1014D4258, &stru_1011E74E8);
  return (id)qword_1014D4250;
}

void sub_100B86E30(_QWORD *a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;

  v2 = sub_100431A4C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v5 = a1[5];
    v4 = a1[6];
    v6 = a1[4];
    v7 = 138412802;
    v8 = v6;
    v9 = 2048;
    v10 = v4;
    v11 = 2112;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "(tag %@) from source: %ld – plan: %@", (uint8_t *)&v7, 0x20u);
  }

}

id sub_100B86EF0(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  if (objc_msgSend(v1, "_maps_isEqualToSearchStringForCurrentLocationSearchResult"))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[SearchResult currentLocationSearchResult](SearchResult, "currentLocationSearchResult"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[SearchFieldItem searchFieldItemWithObject:](SearchFieldItem, "searchFieldItemWithObject:", v2));

  }
  else
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[SearchFieldItem searchFieldItemWithObject:](SearchFieldItem, "searchFieldItemWithObject:", v1));
  }

  return v3;
}

SearchFieldItem *sub_100B86F74(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  SearchResult *v5;
  void *v6;
  void *v7;
  SearchResult *v8;
  SearchFieldItem *v9;
  id v10;
  NSObject *v11;
  void *v12;
  int v14;
  void *v15;

  v3 = a2;
  v4 = objc_opt_class(GEOComposedWaypointToRoute);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    v5 = objc_opt_new(SearchResult);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "route"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "persistentData"));
    -[SearchResult setRouteData:](v5, "setRouteData:", v7);

  }
  else
  {
    if (*(_BYTE *)(a1 + 32) || !objc_msgSend(v3, "isCurrentLocation"))
      v8 = -[SearchResult initWithComposedWaypoint:]([SearchResult alloc], "initWithComposedWaypoint:", v3);
    else
      v8 = (SearchResult *)objc_claimAutoreleasedReturnValue(+[SearchResult currentLocationSearchResult](SearchResult, "currentLocationSearchResult"));
    v5 = v8;
  }
  v9 = (SearchFieldItem *)objc_claimAutoreleasedReturnValue(+[SearchFieldItem searchFieldItemWithObject:](SearchFieldItem, "searchFieldItemWithObject:", v5));

  if (!v9)
  {
    v10 = sub_100B85D6C();
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "shortDescription"));
      v14 = 138412290;
      v15 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Substituting empty item for failed conversion from waypoint: %@", (uint8_t *)&v14, 0xCu);

    }
    v9 = objc_opt_new(SearchFieldItem);
  }

  return v9;
}

void sub_100B87A40(_QWORD *a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;

  v2 = sub_100431A4C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v5 = a1[5];
    v4 = a1[6];
    v6 = a1[4];
    v7 = 138412802;
    v8 = v6;
    v9 = 2048;
    v10 = v4;
    v11 = 2112;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "(tag %@) from source: %ld : state: %@", (uint8_t *)&v7, 0x20u);
  }

}

void sub_100B87B00(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "AppStateManager");
  v2 = (void *)qword_1014D4250;
  qword_1014D4250 = (uint64_t)v1;

}

id sub_100B88384(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_identifierForItem:", a2);
}

TwoLinesCollectionOutlineCellModel *sub_100B88390(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  unsigned int v11;
  void *v12;
  void *v13;
  unsigned int v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  unsigned int v22;
  unsigned int v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  void *j;
  void *v29;
  id v30;
  uint64_t v31;
  void *v32;
  unsigned int v33;
  int v34;
  id v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  void *i;
  void *v41;
  void *v42;
  id v43;
  id v44;
  unsigned int v45;
  unsigned int v46;
  TwoLineOutlineCellButtonAccessoryModel *v47;
  TwoLineOutlineCellButtonAccessoryModel *v48;
  SidebarOutlineCellBackgroundModel *v49;
  void *v50;
  void *v51;
  unsigned int v52;
  void *v53;
  _BOOL4 v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  id v58;
  void *v59;
  id v60;
  void *v61;
  id v62;
  uint64_t v63;
  TwoLinesCollectionOutlineCellModel *v64;
  id v65;
  TwoLinesCollectionOutlineCellModel *v66;
  void *v67;
  void *v68;
  uint64_t v69;
  TwoLinesCollectionMapItemOutlineCellModel *v70;
  TwoLineOutlineCellButtonAccessoryModel *v71;
  TwoLinesTransitLineOutlineCellModel *v72;
  void *v73;
  uint64_t v74;
  id v76;
  void *v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  id v83;
  void *v84;
  id v85;
  void *v86;
  SidebarOutlineCellBackgroundModel *v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  SidebarOutlineCellBackgroundModel *v93;
  void *v94;
  id v95;
  unsigned int v96;
  id v97;
  id v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  TwoLineOutlineCellButtonAccessoryModel *v107;
  _BYTE v108[128];
  _BYTE v109[128];

  v5 = a2;
  v6 = a3;
  v7 = objc_opt_class(CollectionHandler);
  v98 = v5;
  if ((objc_opt_isKindOfClass(v5, v7) & 1) != 0)
  {
    v8 = v5;
    v9 = *(void **)(a1 + 32);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "topIdentifierPath"));
    v11 = objc_msgSend(v9, "containsObject:", v10);

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "topIdentifierPath"));
    v13 = v12;
    if (v12 == *(void **)(*(_QWORD *)(a1 + 40) + 160))
      v14 = 1;
    else
      v14 = objc_msgSend(v12, "isEqual:");

    v105 = 0u;
    v106 = 0u;
    v103 = 0u;
    v104 = 0u;
    v35 = *(id *)(a1 + 32);
    v36 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v103, v109, 16);
    if (v36)
    {
      v37 = v36;
      v92 = v11;
      v96 = v14;
      v38 = v8;
      v39 = *(_QWORD *)v104;
      do
      {
        for (i = 0; i != v37; i = (char *)i + 1)
        {
          if (*(_QWORD *)v104 != v39)
            objc_enumerationMutation(v35);
          v41 = *(void **)(*((_QWORD *)&v103 + 1) + 8 * (_QWORD)i);
          v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "topIdentifierPath"));
          if (objc_msgSend(v41, "hasPrefix:", v42))
          {
            v43 = objc_msgSend(v41, "length");
            v44 = objc_msgSend(v6, "depth");

            if (v43 > v44)
            {
              v45 = 1;
              goto LABEL_35;
            }
          }
          else
          {

          }
        }
        v37 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v103, v109, 16);
      }
      while (v37);
      v45 = 0;
LABEL_35:
      v8 = v38;
      v14 = v96;
      v11 = v92;
    }
    else
    {
      v45 = 0;
    }

    v19 = objc_alloc_init((Class)NSMutableArray);
    if (!objc_msgSend(v8, "handlerType"))
    {
      v47 = -[TwoLineOutlineCellButtonAccessoryModel initWithAccessoryType:visibility:delegate:]([TwoLineOutlineCellButtonAccessoryModel alloc], "initWithAccessoryType:visibility:delegate:", 1, objc_msgSend(*(id *)(a1 + 40), "_accessoryVisibilityForCollection:withAccessoryType:", v8, 1), *(_QWORD *)(a1 + 40));
      objc_msgSend(v19, "addObject:", v47);

    }
    if (objc_msgSend(v8, "contentType"))
    {
      v48 = -[TwoLineOutlineCellButtonAccessoryModel initWithAccessoryType:visibility:delegate:]([TwoLineOutlineCellButtonAccessoryModel alloc], "initWithAccessoryType:visibility:delegate:", 2, objc_msgSend(*(id *)(a1 + 40), "_accessoryVisibilityForCollection:withAccessoryType:", v8, 2), *(_QWORD *)(a1 + 40));
      objc_msgSend(v19, "addObject:", v48);

    }
    v49 = 0;
    if (!objc_msgSend(v8, "handlerType") && v11 | v45 | v14)
    {
      v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "expandedIdentifierPaths"));
      v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "topIdentifierPath"));
      v97 = v8;
      v52 = objc_msgSend(v50, "containsObject:", v51);

      v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_childItemsInCollection:excludeDeletions:", v97, 1));
      v54 = objc_msgSend(v53, "count") != 0;

      v89 = v45;
      v93 = [SidebarOutlineCellBackgroundModel alloc];
      v55 = v14;
      if ((v52 & v54) != 0)
        v56 = 2;
      else
        v56 = 0;
      v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "delegate"));
      v58 = objc_msgSend(v57, "isCollectionViewFocusedWithSectionController:", *(_QWORD *)(a1 + 40));
      v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "delegate"));
      v60 = objc_msgSend(v59, "isCollectionViewProxyFocusedWithSectionController:", *(_QWORD *)(a1 + 40));
      v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "delegate"));
      v62 = objc_msgSend(v61, "hasCollectionViewDropSessionWithSectionController:", *(_QWORD *)(a1 + 40));
      v63 = v56;
      v8 = v97;
      v49 = -[SidebarOutlineCellBackgroundModel initWithStyle:dropStyle:grouping:collectionViewFocused:collectionViewProxyFocused:collectionViewHasDropSession:](v93, "initWithStyle:dropStyle:grouping:collectionViewFocused:collectionViewProxyFocused:collectionViewHasDropSession:", v89, v55, v63, v58, v60, v62);

    }
    v64 = [TwoLinesCollectionOutlineCellModel alloc];
    v65 = objc_msgSend(v19, "copy");
    v66 = -[TwoLinesCollectionOutlineCellModel initWithCollection:accessoryModels:backgroundModel:actionModel:](v64, "initWithCollection:accessoryModels:backgroundModel:actionModel:", v8, v65, v49, 0);

    goto LABEL_61;
  }
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "parentItem"));
  v16 = objc_opt_class(CollectionHandler);
  if ((objc_opt_isKindOfClass(v15, v16) & 1) != 0)
    v17 = v15;
  else
    v17 = 0;
  v95 = v17;

  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "topIdentifierPath"));
  v19 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "identifierPathByRemovingLastIdentifier"));

  v20 = *(void **)(a1 + 32);
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "topIdentifierPath"));
  v22 = objc_msgSend(v20, "containsObject:", v21);

  v23 = objc_msgSend(*(id *)(a1 + 32), "containsObject:", v19);
  v99 = 0u;
  v100 = 0u;
  v101 = 0u;
  v102 = 0u;
  v24 = *(id *)(a1 + 32);
  v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v99, v108, 16);
  if (v25)
  {
    v26 = v25;
    v88 = v23;
    v91 = v22;
    v27 = *(_QWORD *)v100;
    do
    {
      for (j = 0; j != v26; j = (char *)j + 1)
      {
        if (*(_QWORD *)v100 != v27)
          objc_enumerationMutation(v24);
        v29 = *(void **)(*((_QWORD *)&v99 + 1) + 8 * (_QWORD)j);
        if (objc_msgSend(v29, "hasPrefix:", v19))
        {
          v30 = objc_msgSend(v29, "length");
          if (v30 >= objc_msgSend(v6, "depth"))
          {
            v31 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "topIdentifierPath"));
            if (v29 == (void *)v31)
            {

            }
            else
            {
              v32 = (void *)v31;
              v33 = objc_msgSend(v29, "isEqual:", v31);

              if (!v33)
              {
                v34 = 1;
                goto LABEL_21;
              }
            }
          }
        }
      }
      v26 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v99, v108, 16);
    }
    while (v26);
    v34 = 0;
LABEL_21:
    v22 = v91;
    v23 = v88;
  }
  else
  {
    v34 = 0;
  }

  v8 = v95;
  if (v19 == *(id *)(*(_QWORD *)(a1 + 40) + 160))
    v46 = 1;
  else
    v46 = objc_msgSend(v19, "isEqual:");
  if (objc_msgSend(v95, "handlerType") || (v22 | v23 | v34 | v46) != 1)
  {
    v49 = 0;
    v68 = v98;
  }
  else
  {
    if (v95)
      v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_childItemsInCollection:excludeDeletions:", v95, 1));
    else
      v67 = &__NSArray0__struct;
    v94 = v67;
    v76 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v67, "lastObject"));
    v77 = v76;
    if (v76 == v98)
    {
      v79 = 4;
    }
    else
    {
      v78 = objc_msgSend(v76, "isEqual:", v98);
      v79 = 3;
      if (v78)
        v79 = 4;
    }
    v90 = v79;

    v87 = [SidebarOutlineCellBackgroundModel alloc];
    if (v22)
      v80 = 0;
    else
      v80 = 2;
    if (v46)
      v81 = 2;
    else
      v81 = 0;
    v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "delegate"));
    v83 = objc_msgSend(v82, "isCollectionViewFocusedWithSectionController:", *(_QWORD *)(a1 + 40));
    v84 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "delegate"));
    v85 = objc_msgSend(v84, "isCollectionViewProxyFocusedWithSectionController:", *(_QWORD *)(a1 + 40));
    v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "delegate"));
    v49 = -[SidebarOutlineCellBackgroundModel initWithStyle:dropStyle:grouping:collectionViewFocused:collectionViewProxyFocused:collectionViewHasDropSession:](v87, "initWithStyle:dropStyle:grouping:collectionViewFocused:collectionViewProxyFocused:collectionViewHasDropSession:", v80, v81, v90, v83, v85, objc_msgSend(v86, "hasCollectionViewDropSessionWithSectionController:", *(_QWORD *)(a1 + 40)));

    v8 = v95;
    v68 = v98;
  }
  v69 = objc_opt_class(MKMapItem);
  if ((objc_opt_isKindOfClass(v68, v69) & 1) != 0)
  {
    v70 = -[TwoLinesCollectionMapItemOutlineCellModel initWithMapItem:currentLocation:distanceUnit:backgroundModel:]([TwoLinesCollectionMapItemOutlineCellModel alloc], "initWithMapItem:currentLocation:distanceUnit:backgroundModel:", v68, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v49);
LABEL_64:
    v66 = (TwoLinesCollectionOutlineCellModel *)v70;
    goto LABEL_65;
  }
  if (!objc_msgSend(v68, "conformsToProtocol:", &OBJC_PROTOCOL___GEOTransitLine))
  {
    v74 = objc_opt_class(HomeCollectionSortItem);
    if ((objc_opt_isKindOfClass(v68, v74) & 1) == 0)
    {
      v66 = 0;
      goto LABEL_65;
    }
    v70 = (TwoLinesCollectionMapItemOutlineCellModel *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "cellModelWithBackgroundModel:", v49));
    goto LABEL_64;
  }
  v71 = -[TwoLineOutlineCellButtonAccessoryModel initWithAccessoryType:visibility:delegate:]([TwoLineOutlineCellButtonAccessoryModel alloc], "initWithAccessoryType:visibility:delegate:", 1, 1, *(_QWORD *)(a1 + 40));
  v72 = [TwoLinesTransitLineOutlineCellModel alloc];
  v107 = v71;
  v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v107, 1));
  v66 = -[TwoLinesTransitLineOutlineCellModel initWithTransitLine:accessoryModels:backgroundModel:](v72, "initWithTransitLine:accessoryModels:backgroundModel:", v98, v73, v49);

LABEL_61:
  v68 = v98;
LABEL_65:

  return v66;
}

id sub_100B88BE8(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;

  v3 = a2;
  v4 = objc_opt_class(CollectionHandler);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_childItemsInCollection:excludeDeletions:", v3, 0));
  else
    v5 = &__NSArray0__struct;

  return v5;
}

id sub_100B88C54(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;

  v3 = *(void **)(a1 + 32);
  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "expandedIdentifierPaths"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "topIdentifierPath"));

  v7 = objc_msgSend(v5, "containsObject:", v6);
  return v7;
}

void sub_100B88FB8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100B88FD4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_showCollection:completion:", *(_QWORD *)(a1 + 32), 0);

}

void sub_100B890CC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100B890E8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_showAndEditCollection:", *(_QWORD *)(a1 + 32));

}

void sub_100B893EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100B89408(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  id WeakRetained;
  int v6;
  uint64_t v7;

  v2 = sub_100432EDC();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v6 = 138412290;
    v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Timeout waiting for collection %@. Dropping pending operation.", (uint8_t *)&v6, 0xCu);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_clearPendingCollection");

}

void sub_100B89744(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100B89760(uint64_t a1, int a2)
{
  id WeakRetained;

  if (a2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(WeakRetained, "_editCollection:", *(_QWORD *)(a1 + 32));

  }
}

void sub_100B89BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100B89BF0(uint64_t a1)
{
  _QWORD *WeakRetained;
  _QWORD *v3;
  void *v4;
  unsigned int v5;
  void *v6;
  _QWORD *v7;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v4 = (void *)WeakRetained[21];
    v7 = v3;
    if (v4 == *(void **)(a1 + 32))
    {
LABEL_5:
      v3[21] = 0;

      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "delegate"));
      objc_msgSend(v6, "sectionController:setNeedsApplySnapshotAnimated:", v7, 1);

      v3 = v7;
      goto LABEL_6;
    }
    v5 = objc_msgSend(v4, "isEqual:");
    v3 = v7;
    if (v5)
    {
      v4 = (void *)v7[21];
      goto LABEL_5;
    }
  }
LABEL_6:

}

void sub_100B8AD14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *a10, id *location)
{
  id *v11;
  uint64_t v12;

  objc_destroyWeak(v11);
  objc_destroyWeak((id *)(v12 - 168));
  _Unwind_Resume(a1);
}

void sub_100B8ADE0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_editCollectionSnapshot:", *(_QWORD *)(a1 + 32));

}

void sub_100B8AE1C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_addPlacesToCollectionSnapshot:", *(_QWORD *)(a1 + 32));

}

void sub_100B8AE58(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_duplicateCollectionSnapshot:", *(_QWORD *)(a1 + 32));

}

void sub_100B8AE94(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_openSnapshot:inNewTab:", *(_QWORD *)(a1 + 32), 1);

}

void sub_100B8AED4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_openSnapshot:inNewTab:", *(_QWORD *)(a1 + 32), 0);

}

void sub_100B8AF14(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_deleteSnapshot:", *(_QWORD *)(a1 + 32));

}

void sub_100B8B810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, id *a11, uint64_t a12, id *location, id *a14)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(location);
  objc_destroyWeak(a11);
  objc_destroyWeak(a14);
  objc_destroyWeak((id *)&STACK[0x268]);
  _Unwind_Resume(a1);
}

void sub_100B8B924(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "_moveMapItemSnapshot:toCollection:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_100B8B960(uint64_t a1)
{
  void *v2;
  void *v3;
  id WeakRetained;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(+[CollectionHandler collection](CollectionHandler, "collection"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("[Maps Home] New Guide Name"), CFSTR("localized string not found"), 0));
  objc_msgSend(v5, "updateTitle:", v3);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_moveMapItemSnapshot:toCollection:", *(_QWORD *)(a1 + 32), v5);

  +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 2072, 251, 0);
}

void sub_100B8BA20(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_renameMapItemSnapshot:", *(_QWORD *)(a1 + 32));

}

void sub_100B8BA5C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_openSnapshot:inNewTab:", *(_QWORD *)(a1 + 32), 1);

}

void sub_100B8BA9C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_openSnapshot:inNewTab:", *(_QWORD *)(a1 + 32), 0);

}

void sub_100B8BADC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_addMapItemSnapshotToFavorites:", *(_QWORD *)(a1 + 32));

}

void sub_100B8BB18(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "_removeMapItemSnapshotFromFavorites:shortcut:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_100B8BB54(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_deleteSnapshot:", *(_QWORD *)(a1 + 32));

}

void sub_100B8BE48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *a10, id *location)
{
  id *v11;
  uint64_t v12;

  objc_destroyWeak(v11);
  objc_destroyWeak(location);
  objc_destroyWeak(a10);
  objc_destroyWeak((id *)(v12 - 144));
  _Unwind_Resume(a1);
}

void sub_100B8BEA0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_openSnapshot:inNewTab:", *(_QWORD *)(a1 + 32), 1);

}

void sub_100B8BEE0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_openSnapshot:inNewTab:", *(_QWORD *)(a1 + 32), 0);

}

void sub_100B8BF20(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_deleteSnapshot:", *(_QWORD *)(a1 + 32));

}

id sub_100B8C37C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateTitle:forMapItem:completion:", a2, *(_QWORD *)(a1 + 40), &stru_1011E7558);
}

void sub_100B8C394(id a1, NSError *a2)
{
  NSError *v2;
  id v3;
  NSObject *v4;
  int v5;
  NSError *v6;

  v2 = a2;
  if (v2)
  {
    v3 = sub_100432EDC();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Error renaming place in collection: %@", (uint8_t *)&v5, 0xCu);
    }

  }
}

void sub_100B8C5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100B8C5E8(uint64_t a1, char a2)
{
  id *WeakRetained;
  id v5;
  NSObject *v6;
  uint8_t v7[16];

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if ((a2 & 1) == 0)
    {
      v5 = sub_100431DCC();
      v6 = objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Error adding shortcut", v7, 2u);
      }

    }
    objc_msgSend(WeakRetained[19], "setObject:forKeyedSubscript:", 0, *(_QWORD *)(a1 + 32));
  }

}

void sub_100B8C858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100B8C874(uint64_t a1, char a2)
{
  id *WeakRetained;
  id v5;
  NSObject *v6;
  uint8_t v7[16];

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if ((a2 & 1) == 0)
    {
      v5 = sub_100431DCC();
      v6 = objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Error removing shortcut", v7, 2u);
      }

    }
    objc_msgSend(WeakRetained[19], "setObject:forKeyedSubscript:", 0, *(_QWORD *)(a1 + 32));
  }

}

void sub_100B8CD78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100B8CD9C(uint64_t a1, void *a2)
{
  id v3;
  id *WeakRetained;
  id *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;
  uint8_t buf[4];
  void *v16;
  __int16 v17;
  id v18;

  v3 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 64));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    if (v3)
    {
      v6 = sub_100432EDC();
      v7 = objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
        *(_DWORD *)buf = 138412546;
        v16 = v8;
        v17 = 2112;
        v18 = v3;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Error moving map item into collection '%@': %@", buf, 0x16u);

      }
    }
    else
    {
      objc_msgSend(WeakRetained[17], "addObject:", *(_QWORD *)(a1 + 40));
      v9 = *(void **)(a1 + 40);
      v10 = *(_QWORD *)(a1 + 48);
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_100B8CF7C;
      v11[3] = &unk_1011AE5B8;
      objc_copyWeak(&v14, (id *)(a1 + 64));
      v12 = *(id *)(a1 + 48);
      v13 = *(id *)(a1 + 40);
      objc_msgSend(v9, "applyToCollection:completion:", v10, v11);

      objc_destroyWeak(&v14);
    }
    objc_msgSend(v5[17], "removeObject:", *(_QWORD *)(a1 + 56));
  }

}

void sub_100B8CF60(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100B8CF7C(uint64_t a1, void *a2)
{
  id v3;
  id *WeakRetained;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;

  v3 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    if (v3)
    {
      v5 = sub_100432EDC();
      v6 = objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
        v8 = 138412546;
        v9 = v7;
        v10 = 2112;
        v11 = v3;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Error removing map item from collection '%@': %@", (uint8_t *)&v8, 0x16u);

      }
    }
    objc_msgSend(WeakRetained[17], "removeObject:", *(_QWORD *)(a1 + 40));
  }

}

void sub_100B8D25C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_100B8D280(uint64_t a1, void *a2)
{
  id v3;
  id *WeakRetained;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;

  v3 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    if (v3)
    {
      v5 = sub_100432EDC();
      v6 = objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
        v8 = 138412546;
        v9 = v7;
        v10 = 2112;
        v11 = v3;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Error duplicating collection '%@': %@", (uint8_t *)&v8, 0x16u);

      }
    }
    objc_msgSend(WeakRetained[18], "removeObject:", *(_QWORD *)(a1 + 40));
  }

}

void sub_100B8D4A4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100B8D4C4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  id WeakRetained;
  int v7;
  id v8;

  v3 = a2;
  if (v3)
  {
    v4 = sub_1004315EC();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v7 = 138412290;
      v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "error creating collection from home:%@", (uint8_t *)&v7, 0xCu);
    }

  }
  else
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(WeakRetained, "editCollection:", *(_QWORD *)(a1 + 32));

  }
}

void sub_100B8DAAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100B8DAC8(uint64_t a1, void *a2)
{
  id v3;
  id *WeakRetained;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;

  v3 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    if (v3)
    {
      v5 = sub_100432EDC();
      v6 = objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
        v8 = 138412546;
        v9 = v7;
        v10 = 2112;
        v11 = v3;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Error copying map item into collection '%@': %@", (uint8_t *)&v8, 0x16u);

      }
    }
    objc_msgSend(WeakRetained[15], "removeObject:", *(_QWORD *)(a1 + 40));
  }

}

void sub_100B8E030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100B8E05C(uint64_t a1, int a2)
{
  id WeakRetained;

  if (a2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    objc_msgSend(WeakRetained, "_didConfirmDeleteCollection:deletion:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

  }
}

void sub_100B8E1C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100B8E1EC(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  uint64_t v7;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = WeakRetained;
  if (v3 && WeakRetained)
  {
    v7 = *(_QWORD *)(a1 + 32);
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v7, 1));
    objc_msgSend(v5, "endFailedDeletions:error:", v6, v3);

  }
}

void sub_100B8E4B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100B8E4DC(uint64_t a1, void *a2)
{
  id v3;
  id *WeakRetained;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint8_t buf[4];
  void *v11;
  __int16 v12;
  id v13;

  v3 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    if (v3)
    {
      v5 = sub_100432EDC();
      v6 = objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
        *(_DWORD *)buf = 138412546;
        v11 = v7;
        v12 = 2112;
        v13 = v3;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Error deleting item from collection '%@': %@", buf, 0x16u);

      }
      v9 = *(_QWORD *)(a1 + 40);
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v9, 1));
      objc_msgSend(WeakRetained, "endFailedDeletions:error:", v8, v3);

    }
    objc_msgSend(WeakRetained[16], "removeObject:", *(_QWORD *)(a1 + 48));
  }

}

void sub_100B8FA34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100B8FA58(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  _QWORD *WeakRetained;
  _QWORD *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  NSObject *v14;
  uint64_t v15;
  id v16;
  int v17;
  id v18;

  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v7 = WeakRetained;
  if (WeakRetained)
  {
    v8 = (void *)WeakRetained[2];
    WeakRetained[2] = 0;

    if (!v5)
    {
      v7[3] = 2;
      v7[4] = a2;
LABEL_14:
      objc_msgSend(v7, "_update");
      goto LABEL_15;
    }
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "domain"));
    v10 = GEOErrorDomain(v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    if (objc_msgSend(v9, "isEqualToString:", v11))
    {
      v12 = objc_msgSend(v5, "code");

      if (v12 == (id)-6)
      {
        v13 = sub_1004320DC();
        v14 = objc_claimAutoreleasedReturnValue(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          LOWORD(v17) = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Offline Maps is not available/supported in this location", (uint8_t *)&v17, 2u);
        }
        v15 = 0;
LABEL_13:

        v7[3] = v15;
        goto LABEL_14;
      }
    }
    else
    {

    }
    v16 = sub_1004320DC();
    v14 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v17 = 138543362;
      v18 = v5;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Failed to determine offline region support/size: %{public}@", (uint8_t *)&v17, 0xCu);
    }
    v15 = 3;
    goto LABEL_13;
  }
LABEL_15:

}

void sub_100B90748(uint64_t a1, void *a2)
{
  id v3;
  SearchResult *v4;
  SearchFieldItem *v5;
  void *v6;
  void *v7;
  void *v8;
  SearchResult *v9;

  if (a2)
  {
    v3 = a2;
    v4 = -[SearchResult initWithMapItem:]([SearchResult alloc], "initWithMapItem:", v3);

    v5 = objc_alloc_init(SearchFieldItem);
    -[SearchFieldItem setSearchResult:](v5, "setSearchResult:", v4);
    v9 = v4;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v9, 1));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[SearchInfo searchInfoWithResults:](SearchInfo, "searchInfoWithResults:", v6));

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "appCoordinator"));
    objc_msgSend(v8, "openSearch:andResults:", v5, v7);

  }
}

void sub_100B92D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100B92DB8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  void *v9;
  NSObject *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  _QWORD v15[4];
  id v16;
  id v17;
  uint8_t buf[4];
  id v19;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
    v9 = v8;
    if (v6 || !v8)
    {
      v11 = sub_1004320DC();
      v10 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v19 = v6;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Error fetching route address before saving: %@", buf, 0xCu);
      }
    }
    else
    {
      v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "addressObject"));
      objc_msgSend(*(id *)(a1 + 40), "setAddress:", v10);
    }

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "iso3166CountryCode"));
    v13 = objc_msgSend(v12, "length");

    if ((unint64_t)v13 <= 1)
    {
      dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
      v14 = *(void **)(a1 + 40);
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      v15[2] = sub_100B92F80;
      v15[3] = &unk_1011B1820;
      v16 = v14;
      v17 = *(id *)(a1 + 32);
      objc_msgSend(v16, "updateCountryIfNecessaryWithCompletionHandler:", v15);

    }
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

  }
  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }

}

void sub_100B92F80(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  int v9;
  id v10;
  __int16 v11;
  void *v12;

  v3 = a2;
  v4 = sub_1004320DC();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
    {
      v9 = 138412290;
      v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Error getting country for saved route. We will be unable to load this route. Error: %@", (uint8_t *)&v9, 0xCu);
    }
  }
  else if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userProvidedName"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "iso3166CountryCode"));
    v9 = 138478083;
    v10 = v7;
    v11 = 2112;
    v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Route \"%{private}@\" was updated with country %@.", (uint8_t *)&v9, 0x16u);

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void sub_100B938C8(uint64_t a1, void *a2, char a3)
{
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  _QWORD v10[4];
  id v11;
  char v12;
  uint8_t buf[4];
  id v14;

  v5 = a2;
  v6 = sub_1004320DC();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Adding subscription for %@", buf, 0xCu);
  }

  dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[MapsOfflineUIHelper sharedHelper](MapsOfflineUIHelper, "sharedHelper"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100B939F8;
  v10[3] = &unk_1011E75A8;
  v12 = a3;
  v9 = *(_QWORD *)(a1 + 40);
  v11 = *(id *)(a1 + 32);
  objc_msgSend(v8, "addSubscriptionWithRegion:name:completion:", v9, v5, v10);

}

void sub_100B939F8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  NSObject *v9;
  int v10;
  id v11;

  v5 = a2;
  v6 = a3;
  v7 = sub_1004320DC();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = v8;
  if (!v5)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v10 = 138543362;
      v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to add offline region: %{public}@", (uint8_t *)&v10, 0xCu);
    }
    goto LABEL_8;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    v10 = 138412290;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Added subscription for %@", (uint8_t *)&v10, 0xCu);
  }

  if (*(_BYTE *)(a1 + 40))
  {
    v9 = objc_claimAutoreleasedReturnValue(+[MapsOfflineUIHelper sharedHelper](MapsOfflineUIHelper, "sharedHelper"));
    -[NSObject resumeDownloadForSubscriptionWithIdentifier:mode:](v9, "resumeDownloadForSubscriptionWithIdentifier:mode:", v5, 1);
LABEL_8:

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_100B93B38(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  NSObject *v7;
  void (*v8)(void);
  void *v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  uint8_t buf[4];
  id v17;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MapsOfflineUIHelper sharedHelper](MapsOfflineUIHelper, "sharedHelper"));
  v5 = objc_msgSend(v4, "cellularBehaviorForDownloadOfSize:forForcedDownload:", *(_QWORD *)(a1 + 56), 0);

  v6 = sub_1004320DC();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Checking cellular download policy (%ld)", buf, 0xCu);
  }

  if (v5 == (id)2)
  {
    v8 = *(void (**)(void))(*(_QWORD *)(a1 + 48) + 16);
    goto LABEL_8;
  }
  if (v5 == (id)1)
  {
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[MapsOfflineUIHelper sharedHelper](MapsOfflineUIHelper, "sharedHelper"));
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100B93D14;
    v12[3] = &unk_1011E75F8;
    v10 = *(_QWORD *)(a1 + 56);
    v15 = *(id *)(a1 + 48);
    v13 = v3;
    v14 = *(id *)(a1 + 32);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "alertControllerForCellularDownloadConfirmationForRegionName:size:actionHandler:", v13, v10, v12));

    objc_msgSend(*(id *)(a1 + 40), "_maps_topMostPresentViewController:animated:completion:", v11, 1, 0);
    goto LABEL_10;
  }
  if (!v5)
  {
    v8 = *(void (**)(void))(*(_QWORD *)(a1 + 48) + 16);
LABEL_8:
    v8();
  }
LABEL_10:

}

void sub_100B93D14(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_100B93D48(uint64_t a1, void *a2, void *a3)
{
  id v5;
  NSObject *v6;
  id v7;
  NSObject *v8;
  void *v9;
  id v10;
  id v11;
  NSObject *v12;
  _BOOL4 v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  int v18;
  NSObject *v19;
  __int16 v20;
  uint64_t v21;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = sub_100431D5C();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v18 = 138543362;
      v19 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Error fetching suggested name for region: %{public}@", (uint8_t *)&v18, 0xCu);
    }
LABEL_11:
    v15 = 0;
    goto LABEL_12;
  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
  v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "name"));

  v10 = -[NSObject length](v8, "length");
  v11 = sub_100431D5C();
  v12 = objc_claimAutoreleasedReturnValue(v11);
  v13 = os_log_type_enabled(v12, OS_LOG_TYPE_INFO);
  if (!v10)
  {
    if (v13)
    {
      v16 = *(NSObject **)(a1 + 32);
      v18 = 138477827;
      v19 = v16;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Attempt to fetch suggested name for region succeeded, but no name was provided (%{private}@)", (uint8_t *)&v18, 0xCu);
    }

    goto LABEL_11;
  }
  if (v13)
  {
    v14 = *(_QWORD *)(a1 + 32);
    v18 = 138478083;
    v19 = v8;
    v20 = 2113;
    v21 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Fetched suggested name '%{private}@' for region %{private}@", (uint8_t *)&v18, 0x16u);
  }

  v8 = v8;
  v15 = v8;
LABEL_12:

  if (!-[NSObject length](v15, "length"))
  {
    v17 = *(id *)(a1 + 40);

    v15 = v17;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void sub_100B93F3C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  NSObject *v6;
  const char *v7;
  NSObject *v8;
  os_log_type_t v9;
  void *v10;
  int v11;
  id v12;

  v3 = a2;
  v4 = sub_1004320DC();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v11 = 138412290;
      v12 = v3;
      v7 = "error saving route: %@";
      v8 = v6;
      v9 = OS_LOG_TYPE_ERROR;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v8, v9, v7, (uint8_t *)&v11, 0xCu);
    }
  }
  else if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v10 = *(void **)(a1 + 32);
    v11 = 138412290;
    v12 = v10;
    v7 = "saved route: %@";
    v8 = v6;
    v9 = OS_LOG_TYPE_INFO;
    goto LABEL_6;
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_100B9403C(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  _QWORD v4[4];
  id v5;
  id v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v3 = *(void **)(a1 + 40);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_100B940F8;
    v4[3] = &unk_1011B1820;
    v5 = v3;
    v6 = *(id *)(a1 + 32);
    +[MapsSavedRoutesManager saveRouteData:completion:](MapsSavedRoutesManager, "saveRouteData:completion:", v5, v4);

  }
  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }

}

void sub_100B940F8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  NSObject *v6;
  const char *v7;
  NSObject *v8;
  os_log_type_t v9;
  void *v10;
  int v11;
  id v12;

  v3 = a2;
  v4 = sub_1004320DC();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v11 = 138412290;
      v12 = v3;
      v7 = "error saving route: %@";
      v8 = v6;
      v9 = OS_LOG_TYPE_ERROR;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v8, v9, v7, (uint8_t *)&v11, 0xCu);
    }
  }
  else if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v10 = *(void **)(a1 + 32);
    v11 = 138412290;
    v12 = v10;
    v7 = "saved route: %@";
    v8 = v6;
    v9 = OS_LOG_TYPE_INFO;
    goto LABEL_6;
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_100B941F8(uint64_t a1)
{
  id *WeakRetained;
  void *v3;
  id v4;
  id *v5;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v5 = WeakRetained;
    if (objc_msgSend(*(id *)(a1 + 32), "source") == (id)2)
    {
      if (objc_msgSend(*(id *)(a1 + 32), "tourMuid"))
        v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%llu"), objc_msgSend(*(id *)(a1 + 32), "tourMuid")));
      else
        v3 = 0;
      +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 469, 132, v3);

    }
    else
    {
      +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 463, 131, 0);
    }
    v4 = objc_loadWeakRetained(v5 + 14);
    objc_msgSend(v4, "didSaveCustomRoute:", *(_QWORD *)(a1 + 32));

    WeakRetained = v5;
  }

}

void sub_100B947F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100B9480C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_startRAPPlacecardTest");

}

id sub_100B951C4()
{
  if (qword_1014D4268 != -1)
    dispatch_once(&qword_1014D4268, &stru_1011E7668);
  return (id)qword_1014D4260;
}

void sub_100B958FC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "MapsRingBuffer");
  v2 = (void *)qword_1014D4260;
  qword_1014D4260 = (uint64_t)v1;

}

void sub_100B95E5C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100B95E78(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_becomeTopContextInChromeViewController:", *(_QWORD *)(a1 + 32));

}

void sub_100B96288(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100B962A4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_resignTopContextInChromeViewController:", *(_QWORD *)(a1 + 32));

}

void sub_100B96614(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "actionCoordinator"));
  v2 = objc_msgSend(v5, "isAuthorizedForPreciseLocation");
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chromeViewController"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "mapView"));
  objc_msgSend(v4, "_setShowHeadingIndicatorForStepping:", v2);

}

uint64_t sub_100B968A0()
{
  void *v0;
  void *v1;
  uint64_t v2;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "countryCode"));
  v2 = objc_msgSend(v1, "isEqualToString:", CFSTR("CN")) ^ 1;

  return v2;
}

uint64_t sub_100B968FC()
{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration"));
  if ((objc_msgSend(v0, "currentCountrySupportsAvoidStairs") & 1) != 0)
  {
    v1 = 1;
  }
  else
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "countryCode"));
    v1 = (uint64_t)objc_msgSend(v3, "isEqualToString:", CFSTR("CN"));

  }
  return v1;
}

id sub_100B96F5C()
{
  if (qword_1014D4280 != -1)
    dispatch_once(&qword_1014D4280, &stru_1011E76B8);
  return (id)qword_1014D4278;
}

id sub_100B9717C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "identifier"));
  v4 = objc_msgSend(v3, "isEqualToString:", *(_QWORD *)(a1 + 32));

  return v4;
}

void sub_100B97558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100B9757C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "ARFrameIndoorOutdoor");
  v2 = (void *)qword_1014D4278;
  qword_1014D4278 = (uint64_t)v1;

}

void sub_100B975AC(uint64_t a1)
{
  sub_100B97618();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("VNClassifyImageRequest");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1014D4288 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np("Unable to find class %s", "VNClassifyImageRequest");
    sub_100B97618();
  }
}

void sub_100B97618()
{
  char *v0;
  char *v1;
  __int128 v2;
  uint64_t v3;

  v1 = 0;
  if (!qword_1014D4270)
  {
    v2 = off_1011E76D8;
    v3 = 0;
    qword_1014D4270 = _sl_dlopen(&v2, &v1);
    v0 = v1;
    if (qword_1014D4270)
    {
      if (!v1)
        return;
    }
    else
    {
      v0 = (char *)abort_report_np("%s", v1);
    }
    free(v0);
  }
}

VLFSessionMapsHomeMonitor *sub_100B976D4(uint64_t a1)
{
  VLFSessionMapsHomeMonitor *result;
  VLFSessionMapsHomeMonitor *v3;
  SEL v4;
  id v5;
  id v6;

  sub_100B97618();
  result = (VLFSessionMapsHomeMonitor *)objc_getClass("VNImageRequestHandler");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1014D4290 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = (VLFSessionMapsHomeMonitor *)abort_report_np("Unable to find class %s", "VNImageRequestHandler");
    return -[VLFSessionMapsHomeMonitor initWithObserver:platformController:](v3, v4, v5, v6);
  }
  return result;
}

id sub_100B97CC8()
{
  if (qword_1014D42A0 != -1)
    dispatch_once(&qword_1014D42A0, &stru_1011E76F0);
  return (id)qword_1014D4298;
}

void sub_100B98240(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFSessionMapsHomeMonitor");
  v2 = (void *)qword_1014D4298;
  qword_1014D4298 = (uint64_t)v1;

}

void sub_100B98328(id a1, id a2, RAPCuratedCollectionQuestion *a3)
{
  RAPCuratedCollectionQuestion *v3;

  v3 = a3;
  -[RAPQuestion _setComplete:](v3, "_setComplete:", -[RAPCuratedCollectionQuestion isComplete](v3, "isComplete"));

}

void sub_100B9AFAC(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  double v5;
  double v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;

  v18 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[CustomSearchManager sharedManager](CustomSearchManager, "sharedManager"));
  objc_msgSend(v3, "setCustomSearchResult:animated:shouldSelectOnMap:", 0, 0, 0);

  if (v18)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chrome"));
    objc_msgSend(v18, "coordinate");
    objc_msgSend(v4, "createCustomSearchResultForDroppedPinAtPoint:floorOrdinal:animated:", GEOLocationFloorOrdinalFromCLLocation(v18), 1, v5, v6);

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chrome"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "userLocationView"));
    objc_msgSend(v8, "animateVLFPuckOnce");

    v9 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
    objc_msgSend(v9, "captureUserAction:onTarget:eventValue:", 1030, 503, 0);
  }
  else
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "localizedStringForKey:value:table:", CFSTR("Mark My Location [Launch Action]"), CFSTR("localized string not found"), 0));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "localizedStringForKey:value:table:", CFSTR("Your current location is not available."), CFSTR("localized string not found"), 0));
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", v11, v13, 1));

    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "localizedStringForKey:value:table:", CFSTR("Cancel"), CFSTR("localized string not found"), 0));
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v15, 1, 0));

    objc_msgSend(v9, "addAction:", v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chrome"));
    objc_msgSend(v17, "presentViewController:animated:completion:", v9, 1, 0);

  }
}

void sub_100B9B1E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v7;
  unsigned int v8;
  void *v9;
  void *v10;
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (!a2)
  {
    v13 = v5;
    v14 = v4;
    v15 = v2;
    v16 = v3;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[MKLocationManager sharedLocationManager](MKLocationManager, "sharedLocationManager"));
    v8 = objc_msgSend(v7, "isAuthorizedForPreciseLocation");

    if (v8)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[MKLocationManager sharedLocationManager](MKLocationManager, "sharedLocationManager"));
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_100B9B2CC;
      v11[3] = &unk_1011B81D0;
      v12 = *(id *)(a1 + 32);
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "singleLocationUpdateWithDesiredAccuracy:handler:", v11, kCLLocationAccuracyBest));

      objc_msgSend(v10, "start");
    }
  }
}

uint64_t sub_100B9B2CC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100B9BC78(uint64_t a1, void *a2)
{
  id v3;
  SearchResult *v4;

  v3 = a2;
  v4 = -[SearchResult initWithCuratedGuide:]([SearchResult alloc], "initWithCuratedGuide:", v3);

  objc_msgSend(*(id *)(a1 + 32), "addObject:", v4);
}

void sub_100B9C180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location,char a23)
{
  id *v23;
  id *v24;
  uint64_t v25;

  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose((const void *)(v25 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100B9C1CC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100B9C1DC(uint64_t a1)
{

}

id sub_100B9C1E4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id WeakRetained;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  void *v44;
  double v45;
  double v46;
  void *v47;
  id v48;
  void *v49;
  float v50;
  double v51;
  id v52;
  id v53;
  void *v54;
  uint64_t v55;
  id v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  id v65;
  void *v66;
  double v67;
  double v68;
  void *v69;
  id v71;
  id v72;
  void *v73;
  id v74;
  _QWORD v75[4];
  id v76;
  id v77;
  uint64_t v78;
  _QWORD v79[9];
  _QWORD v80[6];
  id v81;
  uint64_t v82;
  _QWORD v83[5];
  id v84;
  _QWORD v85[5];
  id v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t (*v92)(uint64_t, uint64_t);
  void (*v93)(uint64_t);
  id v94;
  id v95;
  id v96;

  v72 = a2;
  v74 = a3;
  v71 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "viewModel"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "sections"));
  v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectAtIndex:", objc_msgSend(v74, "section")));

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "viewModel"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "sections"));
  if (objc_msgSend(v11, "count") == (id)1)
    v12 = 2;
  else
    v12 = 1;

  v13 = objc_msgSend(v73, "type");
  if (v13 != (id)2)
  {
    if (v13 == (id)1)
    {
      v42 = v73;
      v43 = v71;
      v44 = (void *)objc_claimAutoreleasedReturnValue(+[AllRefinementsMultiSelectElementCell reuseIdentifier](_TtC4Maps36AllRefinementsMultiSelectElementCell, "reuseIdentifier"));
      v16 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v72, "dequeueReusableCellWithReuseIdentifier:forIndexPath:", v44, v74));

      objc_msgSend(WeakRetained, "getMaxWidth");
      v46 = v45;
      v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "displayName"));
      v48 = objc_msgSend(v43, "isSelected");
      v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "labelWidth"));
      objc_msgSend(v49, "floatValue");
      v51 = v50;
      v83[0] = _NSConcreteStackBlock;
      v83[1] = 3221225472;
      v83[2] = sub_100B9CB90;
      v83[3] = &unk_1011E7810;
      v83[4] = WeakRetained;
      v84 = v42;
      v80[0] = _NSConcreteStackBlock;
      v80[1] = 3221225472;
      v80[2] = sub_100B9CBD0;
      v80[3] = &unk_1011B1C08;
      v80[4] = *(_QWORD *)(a1 + 32);
      v80[5] = WeakRetained;
      v81 = v43;
      v82 = v12;
      v52 = v43;
      v53 = v42;
      objc_msgSend(v16, "setDisplayName:isSelected:labelWidth:maxWidth:allowSelection:tapHandler:", v47, v48, v83, v80, v51, v46);

      goto LABEL_18;
    }
    if (!v13)
    {
      v14 = v71;
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NonSelectableCollectionViewListCell reuseIdentifier](NonSelectableCollectionViewListCell, "reuseIdentifier"));
      v16 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v72, "dequeueReusableCellWithReuseIdentifier:forIndexPath:", v15, v74));

      v17 = (void *)objc_claimAutoreleasedReturnValue(+[UIListContentConfiguration cellConfiguration](UIListContentConfiguration, "cellConfiguration"));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "displayName"));
      objc_msgSend(v17, "setText:", v18);

      objc_msgSend(v16, "setContentConfiguration:", v17);
      v89 = 0;
      v90 = &v89;
      v91 = 0x3032000000;
      v92 = sub_100B9C1CC;
      v93 = sub_100B9C1DC;
      v94 = 0;
      v19 = objc_alloc((Class)UISwitch);
      v85[0] = _NSConcreteStackBlock;
      v85[1] = 3221225472;
      v85[2] = sub_100B9CA64;
      v85[3] = &unk_1011E77E8;
      v85[4] = WeakRetained;
      v20 = v14;
      v86 = v20;
      v87 = &v89;
      v88 = v12;
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[UIAction actionWithHandler:](UIAction, "actionWithHandler:", v85));
      v22 = objc_msgSend(v19, "initWithFrame:primaryAction:", v21, CGRectZero.origin.x, CGRectZero.origin.y, CGRectZero.size.width, CGRectZero.size.height);
      v23 = (void *)v90[5];
      v90[5] = (uint64_t)v22;

      v24 = objc_msgSend(v20, "isSelected");
      objc_msgSend((id)v90[5], "setOn:", v24);
      objc_msgSend((id)v90[5], "setAccessibilityIdentifier:", CFSTR("RefinementToggle"));
      v25 = objc_alloc((Class)UICellAccessoryCustomView);
      v26 = objc_msgSend(v25, "initWithCustomView:placement:", v90[5], 1);
      v96 = v26;
      v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v96, 1));
      objc_msgSend(v16, "setAccessories:", v27);

      objc_msgSend(v16, "setAccessibilityIdentifier:", CFSTR("RefinementToggleCell"));
      _Block_object_dispose(&v89, 8);

      goto LABEL_18;
    }
LABEL_17:
    v16 = 0;
    goto LABEL_18;
  }
  if (!MapsFeature_IsEnabled_SearchAndDiscovery(2))
  {
    v54 = (void *)objc_claimAutoreleasedReturnValue(+[AllRefinementsOpenAtCell reuseIdentifier](_TtC4Maps24AllRefinementsOpenAtCell, "reuseIdentifier"));
    v16 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v72, "dequeueReusableCellWithReuseIdentifier:forIndexPath:", v54, v74));

    goto LABEL_18;
  }
  v28 = objc_opt_class(AllRefinementsViewModelToggle);
  if ((objc_opt_isKindOfClass(v71, v28) & 1) != 0)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a4);
    v29 = (void *)objc_claimAutoreleasedReturnValue(+[NonSelectableCollectionViewListCell reuseIdentifier](NonSelectableCollectionViewListCell, "reuseIdentifier"));
    v16 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v72, "dequeueReusableCellWithReuseIdentifier:forIndexPath:", v29, v74));

    v30 = (void *)objc_claimAutoreleasedReturnValue(+[UIListContentConfiguration cellConfiguration](UIListContentConfiguration, "cellConfiguration"));
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "displayName"));
    objc_msgSend(v30, "setText:", v31);

    objc_msgSend(v16, "setContentConfiguration:", v30);
    v89 = 0;
    v90 = &v89;
    v91 = 0x3032000000;
    v92 = sub_100B9C1CC;
    v93 = sub_100B9C1DC;
    v94 = 0;
    v32 = objc_alloc((Class)UISwitch);
    v79[0] = _NSConcreteStackBlock;
    v79[2] = sub_100B9CCD8;
    v79[3] = &unk_1011E7838;
    v33 = *(_QWORD *)(a1 + 40);
    v34 = *(_QWORD *)(a1 + 48);
    v79[4] = WeakRetained;
    v79[5] = v33;
    v79[1] = 3221225472;
    v79[6] = &v89;
    v79[7] = v34;
    v79[8] = v12;
    v35 = (void *)objc_claimAutoreleasedReturnValue(+[UIAction actionWithHandler:](UIAction, "actionWithHandler:", v79));
    v36 = objc_msgSend(v32, "initWithFrame:primaryAction:", v35, CGRectZero.origin.x, CGRectZero.origin.y, CGRectZero.size.width, CGRectZero.size.height);
    v37 = (void *)v90[5];
    v90[5] = (uint64_t)v36;

    v38 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "isSelected");
    objc_msgSend((id)v90[5], "setOn:", v38);
    objc_msgSend((id)v90[5], "setAccessibilityIdentifier:", CFSTR("RefinementToggle"));
    v39 = objc_alloc((Class)UICellAccessoryCustomView);
    v40 = objc_msgSend(v39, "initWithCustomView:placement:", v90[5], 1);
    v95 = v40;
    v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v95, 1));
    objc_msgSend(v16, "setAccessories:", v41);

    objc_msgSend(v16, "setAccessibilityIdentifier:", CFSTR("RefinementToggleCell"));
    _Block_object_dispose(&v89, 8);

    goto LABEL_18;
  }
  v55 = objc_opt_class(AllRefinementsViewModelOpenAt);
  if ((objc_opt_isKindOfClass(v71, v55) & 1) == 0)
    goto LABEL_17;
  v56 = v71;
  v57 = (void *)objc_claimAutoreleasedReturnValue(+[AllRefinementsOpenAtCell reuseIdentifier](_TtC4Maps24AllRefinementsOpenAtCell, "reuseIdentifier"));
  v58 = objc_claimAutoreleasedReturnValue(objc_msgSend(v72, "dequeueReusableCellWithReuseIdentifier:forIndexPath:", v57, v74));
  v59 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v60 = *(void **)(v59 + 40);
  *(_QWORD *)(v59 + 40) = v58;

  v61 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  if (v61)
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "shouldEnableControl:", objc_msgSend(v61, "isSelected") ^ 1);
  v75[0] = _NSConcreteStackBlock;
  v75[1] = 3221225472;
  v75[2] = sub_100B9CE48;
  v75[3] = &unk_1011E7860;
  v76 = v56;
  v77 = WeakRetained;
  v78 = v12;
  v63 = *(_QWORD *)(a1 + 48);
  v62 = a1 + 48;
  v64 = *(void **)(*(_QWORD *)(v63 + 8) + 40);
  v65 = v56;
  objc_msgSend(v64, "setDateSelectionHandler:", v75);
  v66 = *(void **)(*(_QWORD *)(*(_QWORD *)v62 + 8) + 40);
  objc_msgSend(v65, "timeStamp");
  v68 = v67;
  v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v65, "displayName"));
  objc_msgSend(v66, "updatedContentsWithTime:displayName:openAtSelected:", v69, objc_msgSend(v65, "isSelected"), v68);

  v16 = *(id *)(*(_QWORD *)(*(_QWORD *)v62 + 8) + 40);
LABEL_18:

  return v16;
}

void sub_100B9CA38(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_100B9CA64(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectionSequenceNumber"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v2, "intValue") + 1));
  objc_msgSend(*(id *)(a1 + 32), "setSelectionSequenceNumber:", v3);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "togglesLogicController"));
  v5 = *(_QWORD *)(a1 + 40);
  v6 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "isOn");
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectionSequenceNumber"));
  objc_msgSend(v4, "toggleValueDidChange:newValue:selectionSequenceNumber:", v5, v6, v7);

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "analyticsDelegate"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "refinementKey"));
  objc_msgSend(v8, "resultRefinementTappedWithKey:source:refinementType:isSelected:", v9, *(_QWORD *)(a1 + 56), 0, objc_msgSend(*(id *)(a1 + 40), "isSelected"));

  v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewModelDelegate"));
  objc_msgSend(v10, "refinementViewModelDidChange");

}

id sub_100B9CB90(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "multiSelectLogicController"));
  v3 = objc_msgSend(v2, "allowsSelectionWithViewModel:", *(_QWORD *)(a1 + 40));

  return v3;
}

void sub_100B9CBD0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "selectionSequenceNumber"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v2, "intValue") + 1));
  objc_msgSend(*(id *)(a1 + 32), "setSelectionSequenceNumber:", v3);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "multiSelectLogicController"));
  v5 = *(_QWORD *)(a1 + 48);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "selectionSequenceNumber"));
  objc_msgSend(v4, "didTapOnMultiSelectElement:selectionSequenceNumber:", v5, v6);

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "analyticsDelegate"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "refinementKey"));
  objc_msgSend(v7, "resultRefinementTappedWithKey:source:refinementType:isSelected:", v8, *(_QWORD *)(a1 + 56), 1, objc_msgSend(*(id *)(a1 + 48), "isSelected"));

  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "viewModelDelegate"));
  objc_msgSend(v9, "refinementViewModelDidChange");

}

void sub_100B9CCD8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectionSequenceNumber"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v2, "intValue") + 1));
  objc_msgSend(*(id *)(a1 + 32), "setSelectionSequenceNumber:", v3);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "togglesLogicController"));
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  v6 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "isOn");
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectionSequenceNumber"));
  objc_msgSend(v4, "toggleValueDidChange:newValue:selectionSequenceNumber:", v5, v6, v7);

  v8 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
  if (v8)
    objc_msgSend(v8, "shouldEnableControl:", objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "isOn") ^ 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewModelDelegate"));
  objc_msgSend(v9, "refinementViewModelDidChange");

  v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "analyticsDelegate"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "refinementKey"));
  objc_msgSend(v11, "resultRefinementTappedWithKey:source:refinementType:isSelected:", v10, *(_QWORD *)(a1 + 64), 0, objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "isSelected"));

}

void sub_100B9CE48(uint64_t a1, uint64_t a2, void *a3, double a4)
{
  void *v7;
  void *v8;
  id v9;

  v9 = a3;
  if ((_DWORD)a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "updateTimeStamp:isSelected:", 1, a4);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "viewModelDelegate"));
    objc_msgSend(v7, "refinementViewModelDidChange");

  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "analyticsDelegate"));
  objc_msgSend(v8, "resultRefinementTappedWithKey:source:refinementType:isSelected:", v9, *(_QWORD *)(a1 + 48), 1, a2);

}

id sub_100B9CEE4(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id *v5;
  id v6;
  id v7;
  id WeakRetained;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v5 = (id *)(a1 + 32);
  v6 = a4;
  v7 = a2;
  WeakRetained = objc_loadWeakRetained(v5);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "viewModel"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "sections"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectAtIndex:", objc_msgSend(v6, "section")));

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[AllRefinementsHeaderView reuseIdentifier](AllRefinementsHeaderView, "reuseIdentifier"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath:", UICollectionElementKindSectionHeader, v12, v6));

  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "displayName"));
  objc_msgSend(v13, "setTitle:", v14);

  return v13;
}

void sub_100B9DD4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

double sub_100B9DDD4(uint64_t a1, void *a2)
{
  char *v3;
  id WeakRetained;
  void *v5;
  char *v6;

  v3 = (char *)objc_msgSend(a2, "row");
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "toggles"));
  v6 = (char *)objc_msgSend(v5, "count") - 1;

  if (v3 == v6)
    return _UICollectionViewListSectionSeparatorInsetHidden[0];
  else
    return _UICollectionViewListLayoutSectionAutomaticDimension;
}

double sub_100B9DE6C(uint64_t a1, void *a2)
{
  char *v3;
  id WeakRetained;
  char *v5;

  v3 = (char *)objc_msgSend(a2, "row");
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = (char *)objc_msgSend(WeakRetained, "numberOfItems") - 1;

  if (v3 == v5)
    return _UICollectionViewListSectionSeparatorInsetHidden[0];
  else
    return _UICollectionViewListLayoutSectionAutomaticDimension;
}

id sub_100B9E490()
{
  if (qword_1014D42B0 != -1)
    dispatch_once(&qword_1014D42B0, &stru_1011E78A8);
  return (id)qword_1014D42A8;
}

void sub_100B9E81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100B9E840(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id WeakRetained;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  id v10;

  v2 = sub_100B9E490();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v9 = 134349056;
    v10 = WeakRetained;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%{public}p] Timeout timer fired", (uint8_t *)&v9, 0xCu);

  }
  v5 = objc_loadWeakRetained((id *)(a1 + 32));
  v6 = v5;
  if (v5)
  {
    objc_msgSend(v5, "setTimeoutTimer:", 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "stateManager"));
    objc_msgSend(v7, "recordSessionDisableEvent:", 8);

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "platformController"));
    objc_msgSend(v8, "removeObserver:", v6);

  }
}

void sub_100B9EA98(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFVIOSessionTimeoutMonitor");
  v2 = (void *)qword_1014D42A8;
  qword_1014D42A8 = (uint64_t)v1;

}

id sub_100B9FC28(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "layoutIfNeeded");
}

id sub_100BA01A0(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "_maps_scrollContentToOriginalPosition");
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "resetScrollOffset");
}

id sub_100BA01E0(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setContentOffset:", CGPointZero.x, CGPointZero.y);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "resetScrollOffset");
}

void sub_100BA06A8(uint64_t a1)
{
  double v2;
  id v3;

  v2 = 0.0;
  if (!*(_BYTE *)(a1 + 48))
    v2 = 1.0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "setAlpha:", v2);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "setConstant:", *(double *)(a1 + 40));
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v3, "layoutIfNeeded");

}

uint64_t sub_100BA0B0C(void *a1)
{
  id v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  v1 = sub_10039DCD4(a1, &stru_1011E78E8);
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v2 = (id)objc_claimAutoreleasedReturnValue(v1);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v12;
    while (2)
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v12 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)v6);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "firstObject", (_QWORD)v11));
        LODWORD(v7) = objc_msgSend(v7, "isEqualToString:", v8);

        if (!(_DWORD)v7)
        {
          v9 = 0;
          goto LABEL_11;
        }
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v4)
        continue;
      break;
    }
  }
  v9 = 1;
LABEL_11:

  return v9;
}

NSString *__cdecl sub_100BA0C40(id a1, VGVehicle *a2, unint64_t a3)
{
  return (NSString *)-[VGVehicle manufacturer](a2, "manufacturer", a3);
}

id sub_100BA0C48(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v1 = a1;
  if (objc_msgSend(v1, "count"))
  {
    if (objc_msgSend(v1, "count") == (id)1 || sub_100BA0B0C(v1))
    {
      v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("Try EV title with single vehicle [Title, Route Planning, Feature Discovery, EV]"), CFSTR("localized string not found"), 0));

      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "firstObject"));
      v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "manufacturer"));
      v6 = (void *)v5;
      if (v5)
      {
        v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", v3, v5));
      }
      else
      {
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "firstObject"));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "displayName"));
        v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", v3, v9));

      }
    }
    else
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localizedStringForKey:value:table:", CFSTR("Try EV title with multiple vehicles [Title, Route Planning, Feature Discovery, EV]"), CFSTR("localized string not found"), 0));
    }

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

UIImage *sub_100BA0DB8()
{
  return +[UIImage imageNamed:](UIImage, "imageNamed:", CFSTR("greenEV"));
}

BOOL sub_100BA0DCC(void *a1)
{
  id v1;
  id v2;
  NSObject *v3;
  _BOOL8 v4;
  const char *v5;
  NSObject *v6;
  uint32_t v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  unint64_t UInteger;
  id v14;
  NSObject *v15;
  _BOOL4 v16;
  const char *v17;
  int v19;
  id v20;
  __int16 v21;
  unint64_t v22;

  v1 = a1;
  if (!v1)
  {
    v8 = sub_1004321BC();
    v3 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v19) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "EVOnboardingShouldShowEventForKey key can't be nil", (uint8_t *)&v19, 2u);
    }
    v4 = 0;
    goto LABEL_21;
  }
  if (GEOConfigGetBOOL(MapsConfig_EVRoutingForceShowFeatureDiscovery, off_1014B3858))
  {
    v2 = sub_1004321BC();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    v4 = 1;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      LOWORD(v19) = 0;
      v5 = "EVOnboardingShouldShowEventForKey is set to yes, should try to show vehicles.";
      v6 = v3;
      v7 = 2;
LABEL_13:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, v5, (uint8_t *)&v19, v7);
      goto LABEL_21;
    }
    goto LABEL_21;
  }
  if (qword_1014D42C0 != -1)
    dispatch_once(&qword_1014D42C0, &stru_1011E7908);
  if (!objc_msgSend((id)qword_1014D42B8, "containsObject:", v1))
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "dictionaryForKey:", CFSTR("EVViewedVehiclesHistoryDictionaryKey")));

    v11 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", v1));
    v12 = objc_msgSend(v11, "unsignedIntegerValue");

    UInteger = GEOConfigGetUInteger(MapsConfig_EVRoutingMaxNumberOfFeatureDiscoveryViews, off_1014B38A8);
    v14 = sub_10043173C();
    v15 = objc_claimAutoreleasedReturnValue(v14);
    v16 = os_log_type_enabled(v15, OS_LOG_TYPE_INFO);
    v4 = (unint64_t)v12 < UInteger;
    if ((unint64_t)v12 >= UInteger)
    {
      if (v16)
      {
        v19 = 138412546;
        v20 = v1;
        v21 = 2048;
        v22 = UInteger;
        v17 = "EVOnboardingShouldShowEventForKey onboarding suggestion for %@ was shown more than %lu, won't show again.";
        goto LABEL_19;
      }
    }
    else if (v16)
    {
      v19 = 138412546;
      v20 = v1;
      v21 = 2048;
      v22 = (unint64_t)v12;
      v17 = "EVOnboardingShouldShowEventForKey onboarding suggestion for %@ was shown %lu times, will attempt to show.";
LABEL_19:
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, v17, (uint8_t *)&v19, 0x16u);
    }

    goto LABEL_21;
  }
  v9 = sub_1004321BC();
  v3 = objc_claimAutoreleasedReturnValue(v9);
  v4 = 1;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v19 = 138412290;
    v20 = v1;
    v5 = "The key: %@ was already displayed during this Maps launch.";
    v6 = v3;
    v7 = 12;
    goto LABEL_13;
  }
LABEL_21:

  return v4;
}

void sub_100BA106C(void *a1)
{
  id v1;
  NSObject *v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  double Current;
  void *v10;
  NSObject *v11;
  NSObject *v12;
  double v13;
  double v14;
  double Double;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  NSObject *v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  int v27;
  double v28;
  __int16 v29;
  double v30;
  __int16 v31;
  uint64_t UInteger;

  v1 = a1;
  if (v1)
  {
    if (qword_1014D42C0 != -1)
      dispatch_once(&qword_1014D42C0, &stru_1011E7908);
    objc_msgSend((id)qword_1014D42B8, "addObject:", v1);
    v2 = objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject dictionaryForKey:](v2, "dictionaryForKey:", CFSTR("EVViewedVehiclesHistoryDictionaryKey")));
    v4 = objc_msgSend(v3, "mutableCopy");
    v5 = v4;
    if (v4)
      v6 = v4;
    else
      v6 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    v8 = v6;

    Current = CFAbsoluteTimeGetCurrent();
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", v1));

    if (v10)
    {
      v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "valueForKey:", CFSTR("EVViewedVehiclesHistoryLastUpdateKey")));
      v12 = v11;
      v13 = Current;
      if (v11)
      {
        -[NSObject doubleValue](v11, "doubleValue");
        v13 = v14;
      }
      Double = GEOConfigGetDouble(MapsConfig_EVRoutingMinDelayToSaveFeatureDiscoveryDidViewEvent, off_1014B38B8);
      if (Current <= v13 + Double)
      {
        v26 = sub_1004321BC();
        v21 = objc_claimAutoreleasedReturnValue(v26);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
        {
          v27 = 134218240;
          v28 = v13;
          v29 = 2048;
          v30 = Double;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "EVOnboardingFeatureDiscovery last entry was at %.2f, min delay of %.2f hasn't passed yet", (uint8_t *)&v27, 0x16u);
        }
      }
      else
      {
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", v1));
        v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", (char *)objc_msgSend(v16, "unsignedIntegerValue") + 1));
        objc_msgSend(v8, "setObject:forKeyedSubscript:", v17, v1);

        v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", Current));
        objc_msgSend(v8, "setObject:forKeyedSubscript:", v18, CFSTR("EVViewedVehiclesHistoryLastUpdateKey"));

        v19 = objc_msgSend(v8, "copy");
        -[NSObject setObject:forKey:](v2, "setObject:forKey:", v19, CFSTR("EVViewedVehiclesHistoryDictionaryKey"));

        v20 = sub_1004321BC();
        v21 = objc_claimAutoreleasedReturnValue(v20);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", v1));
          v27 = 138412802;
          v28 = *(double *)&v1;
          v29 = 2112;
          v30 = *(double *)&v22;
          v31 = 2048;
          UInteger = GEOConfigGetUInteger(MapsConfig_EVRoutingMaxNumberOfFeatureDiscoveryViews, off_1014B38A8);
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "EVOnboardingFeatureDiscovery for %@ has been shown %@/%lu times", (uint8_t *)&v27, 0x20u);

        }
      }

    }
    else
    {
      objc_msgSend(v8, "setObject:forKeyedSubscript:", &off_101270A98, v1);
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", Current));
      objc_msgSend(v8, "setObject:forKeyedSubscript:", v23, CFSTR("EVViewedVehiclesHistoryLastUpdateKey"));

      v24 = objc_msgSend(v8, "copy");
      -[NSObject setObject:forKey:](v2, "setObject:forKey:", v24, CFSTR("EVViewedVehiclesHistoryDictionaryKey"));

      v25 = sub_1004321BC();
      v12 = objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        v27 = 138412290;
        v28 = *(double *)&v1;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "EVOnboardingFeatureDiscovery for %@ has been shown once", (uint8_t *)&v27, 0xCu);
      }
    }

  }
  else
  {
    v7 = sub_1004321BC();
    v2 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v27) = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "EVOnboardingMarkKeyAsViewed key can't be nil", (uint8_t *)&v27, 2u);
    }
  }

}

void sub_100BA1480(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSMutableSet);
  v2 = (void *)qword_1014D42B8;
  qword_1014D42B8 = (uint64_t)v1;

}

uint64_t sub_100BA14A8()
{
  void *v0;
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id BOOL;
  id v13;
  _QWORD v14[3];
  _QWORD v15[3];

  v1 = MapsConfig_TrafficIncidentsSubmitNeutralVotes;
  v0 = off_1014B34A8;
  if (_GEOConfigHasValue(MapsConfig_TrafficIncidentsSubmitNeutralVotes, off_1014B34A8))
    return GEOConfigGetBOOL(v1, v0);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_TrafficIncidentsIncludeImagesAndComments));
  v14[0] = v3;
  v15[0] = &off_101274A20;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_TrafficIncidentsRequireAuthentication));
  v14[1] = v4;
  v15[1] = &off_101274A48;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_TrafficIncidentsSubmitNeutralVotes));
  v14[2] = v5;
  v15[2] = &off_101274A70;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v15, v14, 3));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", v7));

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "countryCode"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", v10));

  if (v11)
    BOOL = objc_msgSend(v11, "BOOLValue");
  else
    BOOL = (id)GEOConfigGetBOOL(v1, v0);
  v13 = BOOL;

  return (uint64_t)v13;
}

uint64_t sub_100BA16A8()
{
  void *v0;
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id BOOL;
  id v13;
  _QWORD v14[3];
  _QWORD v15[3];

  v1 = MapsConfig_TrafficIncidentsIncludeImagesAndComments;
  v0 = off_1014B34B8;
  if (_GEOConfigHasValue(MapsConfig_TrafficIncidentsIncludeImagesAndComments, off_1014B34B8))
    return GEOConfigGetBOOL(v1, v0);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_TrafficIncidentsIncludeImagesAndComments));
  v14[0] = v3;
  v15[0] = &off_101274A20;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_TrafficIncidentsRequireAuthentication));
  v14[1] = v4;
  v15[1] = &off_101274A48;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_TrafficIncidentsSubmitNeutralVotes));
  v14[2] = v5;
  v15[2] = &off_101274A70;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v15, v14, 3));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", v7));

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "countryCode"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", v10));

  if (v11)
    BOOL = objc_msgSend(v11, "BOOLValue");
  else
    BOOL = (id)GEOConfigGetBOOL(v1, v0);
  v13 = BOOL;

  return (uint64_t)v13;
}

uint64_t sub_100BA18A8()
{
  void *v0;
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id BOOL;
  id v13;
  _QWORD v14[3];
  _QWORD v15[3];

  v1 = MapsConfig_TrafficIncidentsRequireAuthentication;
  v0 = off_1014B34D8;
  if (_GEOConfigHasValue(MapsConfig_TrafficIncidentsRequireAuthentication, off_1014B34D8))
    return GEOConfigGetBOOL(v1, v0);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_TrafficIncidentsIncludeImagesAndComments));
  v14[0] = v3;
  v15[0] = &off_101274A20;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_TrafficIncidentsRequireAuthentication));
  v14[1] = v4;
  v15[1] = &off_101274A48;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_TrafficIncidentsSubmitNeutralVotes));
  v14[2] = v5;
  v15[2] = &off_101274A70;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v15, v14, 3));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", v7));

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "countryCode"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", v10));

  if (v11)
    BOOL = objc_msgSend(v11, "BOOLValue");
  else
    BOOL = (id)GEOConfigGetBOOL(v1, v0);
  v13 = BOOL;

  return (uint64_t)v13;
}

uint64_t sub_100BA1AA8()
{
  void *v0;
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id BOOL;
  id v13;
  _QWORD v14[3];
  _QWORD v15[3];

  v1 = MapsConfig_TrafficIncidentsDebugSettingSubmissions;
  v0 = off_1014B34C8;
  if (_GEOConfigHasValue(MapsConfig_TrafficIncidentsDebugSettingSubmissions, off_1014B34C8))
    return GEOConfigGetBOOL(v1, v0);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_TrafficIncidentsIncludeImagesAndComments));
  v14[0] = v3;
  v15[0] = &off_101274A20;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_TrafficIncidentsRequireAuthentication));
  v14[1] = v4;
  v15[1] = &off_101274A48;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", MapsConfig_TrafficIncidentsSubmitNeutralVotes));
  v14[2] = v5;
  v15[2] = &off_101274A70;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v15, v14, 3));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", v7));

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "countryCode"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", v10));

  if (v11)
    BOOL = objc_msgSend(v11, "BOOLValue");
  else
    BOOL = (id)GEOConfigGetBOOL(v1, v0);
  v13 = BOOL;

  return (uint64_t)v13;
}

void sub_100BA1DEC(uint64_t a1, void *a2)
{
  void *v3;
  double v4;
  double v5;
  void *v6;
  id v7;

  v7 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "durationFormat"));

  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "travelAndChargingDuration");
    v5 = v4;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "durationFormat"));
    objc_msgSend(v6, "setOverrideValue:", v5);

  }
}

void sub_100BA21AC(id a1, GEOComposedStringArgument *a2)
{
  void *v2;
  GEOComposedStringArgument *v3;

  v3 = a2;
  if (-[GEOComposedStringArgument type](v3, "type") == 1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(-[GEOComposedStringArgument distanceFormat](v3, "distanceFormat"));
    objc_msgSend(v2, "setFormatOptions:", 1);

  }
}

void sub_100BA2568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100BA2590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained;

  if (a2 != a3)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    objc_msgSend(WeakRetained, "onTransitionFromState:toState:", a2, a3);

  }
}

id sub_100BA2AD8()
{
  if (qword_1014D42D0 != -1)
    dispatch_once(&qword_1014D42D0, &stru_1011E79B8);
  return (id)qword_1014D42C8;
}

void sub_100BA3170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100BA3194(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "collection"));

  if (v3)
  {
    v4 = *(void **)(a1 + 32);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "collection"));
    objc_msgSend(v4, "addObject:", v5);

  }
}

void sub_100BA31FC(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  id v4;
  void *v5;
  double v6;
  double v7;
  id v8;
  void *v9;
  void *v10;
  id v11;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "collectionView"));
  objc_msgSend(v3, "setContentOffset:", CGPointZero.x, CGPointZero.y);

  v4 = objc_loadWeakRetained(v1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "publisherHeaderView"));
  objc_msgSend(v5, "maximumRequiredHeight");
  v7 = v6;
  v8 = objc_loadWeakRetained(v1);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "headerHeightConstraint"));
  objc_msgSend(v9, "setConstant:", v7);

  v11 = objc_loadWeakRetained(v1);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "publisherHeaderView"));
  objc_msgSend(v10, "resetLogoHeight");

}

void sub_100BA4084(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  id v4;
  LoadingModeView *v5;
  void *v6;
  void *v7;
  LoadingModeView *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v12 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "loadingView"));
    if (v2)
    {
LABEL_5:

      WeakRetained = v12;
      goto LABEL_6;
    }
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "apiController"));
    v4 = objc_msgSend(v3, "currentState");

    WeakRetained = v12;
    if (v4 == (id)1)
    {
      v5 = [LoadingModeView alloc];
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "localizedStringForKey:value:table:", CFSTR("Loading ..."), CFSTR("localized string not found"), 0));
      v8 = -[LoadingModeView initWithTitle:](v5, "initWithTitle:", v7);
      objc_msgSend(v12, "setLoadingView:", v8);

      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "loadingView"));
      objc_msgSend(v9, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "contentView"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "loadingView"));
      objc_msgSend(v10, "addSubview:", v11);

      v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "loadingView"));
      objc_msgSend(v12, "activateConstraintsForViewPinnedBelowHeader:", v2);
      goto LABEL_5;
    }
  }
LABEL_6:

}

void sub_100BA454C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100BA4570(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  void *v4;
  id v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v5 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "dataSource"));

    if (v2)
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "dataSource"));
      objc_msgSend(v3, "didTapTryAgainOnErrorView");

      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "analyticsManager"));
      objc_msgSend(v4, "publisherTryAgainTapped");
    }
    else
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "apiController"));
      objc_msgSend(v4, "fetchPublisherViewForKeywordFilter:addressFilter:onCompletion:", 0, 0, &stru_1011E7998);
    }

    WeakRetained = v5;
  }

}

id sub_100BA48FC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "resetCollectionViewLayout");
}

void sub_100BA4904(uint64_t a1)
{
  uint64_t v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cardPresentationController"));
  objc_msgSend(v3, "cardHeight");
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 144) = v2;

}

void sub_100BA5228(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "PublisherViewController");
  v2 = (void *)qword_1014D42C8;
  qword_1014D42C8 = (uint64_t)v1;

}

UIFont *__cdecl sub_100BA5340(id a1)
{
  return (UIFont *)+[UIFont system28Bold](UIFont, "system28Bold");
}

UIFont *__cdecl sub_100BA534C(id a1)
{
  return (UIFont *)+[UIFont system18](UIFont, "system18");
}

UIFont *__cdecl sub_100BA5358(id a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont system18](UIFont, "system18"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "_maps_fontWithMonospacedNumbers"));

  return (UIFont *)v2;
}

UIFont *__cdecl sub_100BA5398(id a1)
{
  return (UIFont *)+[UIFont system17](UIFont, "system17");
}

UIFont *__cdecl sub_100BA53A4(id a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont system17Medium](UIFont, "system17Medium"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "_maps_fontWithMonospacedNumbers"));

  return (UIFont *)v2;
}

UIFont *__cdecl sub_100BA53E4(id a1)
{
  return (UIFont *)+[UIFont system15](UIFont, "system15");
}

UIFont *__cdecl sub_100BA53F0(id a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont system15](UIFont, "system15"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "_maps_fontWithMonospacedNumbers"));

  return (UIFont *)v2;
}

UIFont *__cdecl sub_100BA5430(id a1)
{
  return (UIFont *)+[UIFont system15Medium](UIFont, "system15Medium");
}

UIFont *__cdecl sub_100BA543C(id a1)
{
  return (UIFont *)+[UIFont system15Semibold](UIFont, "system15Semibold");
}

UIFont *__cdecl sub_100BA5448(id a1)
{
  return (UIFont *)+[UIFont system12](UIFont, "system12");
}

UIFont *__cdecl sub_100BA5454(id a1)
{
  return (UIFont *)+[UIFont system11](UIFont, "system11");
}

UIFont *__cdecl sub_100BA5460(id a1)
{
  return (UIFont *)+[UIFont _maps_boldSystemFontWithSize:](UIFont, "_maps_boldSystemFontWithSize:", 26.0);
}

UIFont *__cdecl sub_100BA5470(id a1)
{
  return (UIFont *)+[UIFont system22Semibold](UIFont, "system22Semibold");
}

UIFont *__cdecl sub_100BA547C(id a1)
{
  return (UIFont *)+[UIFont system22AdaptiveSemibold](UIFont, "system22AdaptiveSemibold");
}

UIFont *__cdecl sub_100BA5488(id a1)
{
  return (UIFont *)+[UIFont system22Bold](UIFont, "system22Bold");
}

UIFont *__cdecl sub_100BA5494(id a1)
{
  return (UIFont *)+[UIFont system20Bold](UIFont, "system20Bold");
}

UIFont *__cdecl sub_100BA54A0(id a1)
{
  return (UIFont *)+[UIFont system20Semibold](UIFont, "system20Semibold");
}

UIFont *__cdecl sub_100BA54AC(id a1)
{
  return (UIFont *)+[UIFont system17SemiBold](UIFont, "system17SemiBold");
}

UIFont *__cdecl sub_100BA54B8(id a1)
{
  return (UIFont *)+[UIFont system17Bold](UIFont, "system17Bold");
}

UIFont *__cdecl sub_100BA54C4(id a1)
{
  return (UIFont *)+[UIFont system15Bold](UIFont, "system15Bold");
}

UIFont *__cdecl sub_100BA54D0(id a1)
{
  return (UIFont *)+[UIFont system13](UIFont, "system13");
}

UIFont *__cdecl sub_100BA54DC(id a1)
{
  return (UIFont *)+[UIFont system12Bold](UIFont, "system12Bold");
}

void sub_100BA5728(void *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  char isKindOfClass;
  void *v7;
  uint64_t v8;
  char v9;
  void *v10;
  uint64_t v11;
  double v12;
  id v13;

  v13 = a1;
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "firstItem"));
  v5 = objc_opt_class(UIView);
  isKindOfClass = objc_opt_isKindOfClass(v4, v5);

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "firstItem"));
  if ((isKindOfClass & 1) == 0)
  {
    v8 = objc_opt_class(UILayoutGuide);
    v9 = objc_opt_isKindOfClass(v7, v8);

    if ((v9 & 1) != 0)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "firstItem"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "owningView"));

    }
    else
    {
      v7 = 0;
    }
  }
  objc_msgSend(v3, "scaledValue");
  objc_msgSend(v13, "setConstant:", UIRoundToViewScale(v7, v11, v12));

}

void sub_100BA5C94(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_1014D42D8;
  qword_1014D42D8 = (uint64_t)v1;

}

void sub_100BA6208(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  NSString *v10;
  SEL v11;
  id v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "keyEnumerator"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "allObjects"));

  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v4 = v3;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v14 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i);
        v10 = (NSString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectForKey:", v9, (_QWORD)v13));
        v11 = NSSelectorFromString(v10);

        if ((objc_opt_respondsToSelector(v9, v11) & 1) != 0)
          v12 = (id)((uint64_t (*)(void *, SEL))objc_msgSend(v9, "methodForSelector:", v11))(v9, v11);
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v6);
  }

}

void sub_100BA6B44(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  objc_class *v10;
  NSString *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;

  v17 = a2;
  v5 = a3;
  if (v5)
  {
    v6 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0
      || (v7 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v5, v7) & 1) != 0))
    {
      v8 = v5;
LABEL_11:
      v15 = *(void **)(a1 + 32);
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: %@"), v17, v8));
      objc_msgSend(v15, "addObject:", v16);

      goto LABEL_12;
    }
    v9 = v5;
    v10 = (objc_class *)objc_opt_class(v9);
    v11 = NSStringFromClass(v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    if ((objc_opt_respondsToSelector(v9, "accessibilityIdentifier") & 1) != 0)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "performSelector:", "accessibilityIdentifier"));
      v14 = v13;
      if (v13 && !objc_msgSend(v13, "isEqualToString:", v12))
      {
        v8 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v12, v9, v14));

        goto LABEL_10;
      }

    }
    v8 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v12, v9));
LABEL_10:

    goto LABEL_11;
  }
LABEL_12:

}

void sub_100BA6CC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v4;

  if (a3)
  {
    v3 = *(void **)(a1 + 32);
    v4 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: %@"), a2, a3));
    objc_msgSend(v3, "addObject:", v4);

  }
}

void sub_100BA781C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100BA7838(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;

  v11 = a2;
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v7 = objc_msgSend(v11, "mutableCopy");
    v8 = (void *)*((_QWORD *)WeakRetained + 16);
    *((_QWORD *)WeakRetained + 16) = v7;

    v9 = objc_msgSend(v5, "mutableCopy");
    v10 = (void *)*((_QWORD *)WeakRetained + 17);
    *((_QWORD *)WeakRetained + 17) = v9;

    objc_msgSend(WeakRetained, "_updateContent");
    objc_msgSend(*((id *)WeakRetained + 24), "reloadData");
  }

}

void sub_100BA8400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100BA841C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_presentUnavailableRoutesList");

}

void sub_100BA8DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  id *v25;
  id *v26;

  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100BA8E20(id *a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a2;
  v5 = a3;
  WeakRetained = objc_loadWeakRetained(a1 + 6);

  if (WeakRetained)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedMapsDelegate](UIApplication, "sharedMapsDelegate"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "storageID"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "titleString"));
    objc_msgSend(v7, "interruptConvertToNavigableSavedRouteID:routeName:error:directionsError:", v8, v9, v10, v5);

  }
}

void sub_100BA8ED4(id *a1, void *a2)
{
  id *v3;
  id v4;
  id WeakRetained;
  void *v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v3 = a1 + 6;
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_maps_mapsSceneDelegate"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "appCoordinator"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100BA8FB8;
  v8[3] = &unk_1011AC8B0;
  v9 = a1[4];
  v10 = a1[5];
  objc_msgSend(v7, "enterRouteCreationWithRoute:originMapItem:destinationMapItem:userInfo:completion:", v4, 0, 0, 0, v8);

}

id sub_100BA8FB8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "deselectRowAtIndexPath:animated:", *(_QWORD *)(a1 + 40), 1);
}

void sub_100BA9174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100BA91A0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id *v10;
  id *WeakRetained;
  id *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  NSObject *v22;
  void *v23;
  id v24;
  NSObject *v25;
  char *v26;
  void **v27;
  uint64_t v28;
  void (*v29)(id *);
  void *v30;
  id v31;
  id v32;
  id v33;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  const char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  void *v41;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = (id *)(a1 + 40);
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  v12 = WeakRetained;
  if (WeakRetained)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[24], "cellForRowAtIndexPath:", *(_QWORD *)(a1 + 32)));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "routeData"));

    if (v14)
    {
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "routeData"));
      v27 = _NSConcreteStackBlock;
      v28 = 3221225472;
      v29 = sub_100BA94D0;
      v30 = &unk_1011B0288;
      objc_copyWeak(&v33, v10);
      v16 = v13;
      v31 = v16;
      v32 = v9;
      objc_msgSend(v12, "_showDeleteConfirmationAlertForRouteDate:withCompletion:", v15, &v27);

      v17 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "routeData"));
      v19 = objc_msgSend(v18, "tourMuid");
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%llu"), v19, v27, v28, v29, v30));
      objc_msgSend(v17, "captureUserAction:onTarget:eventValue:", 479, 135, v20);

      objc_destroyWeak(&v33);
    }
    else
    {
      v21 = sub_1004318FC();
      v22 = objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Swipe to delete on a nil cell or routeData")));
        *(_DWORD *)buf = 136315906;
        v35 = "-[MapsRouteListViewController tableView:trailingSwipeActionsConfigurationForRowAtIndexPath:]_block_invoke";
        v36 = 2080;
        v37 = "MapsRouteListViewController.m";
        v38 = 1024;
        v39 = 521;
        v40 = 2112;
        v41 = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%s [%s:%d] Assertion reached unexpectedly! '%@'", buf, 0x26u);

      }
      if (sub_100A70734())
      {
        v24 = sub_1004318FC();
        v25 = objc_claimAutoreleasedReturnValue(v24);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          v26 = (char *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
          *(_DWORD *)buf = 138412290;
          v35 = v26;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);

        }
      }
      (*((void (**)(id, _QWORD))v9 + 2))(v9, 0);
    }

  }
}

void sub_100BA94B0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100BA94D0(id *a1)
{
  id WeakRetained;
  void *v3;
  _QWORD v4[4];
  id v5;

  WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "routeData"));
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_100BA9574;
    v4[3] = &unk_1011B1B90;
    v5 = a1[5];
    objc_msgSend(WeakRetained, "_deleteRouteData:completion:", v3, v4);

  }
}

uint64_t sub_100BA9574(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100BA973C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100BA9760(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_deleteRouteData:completion:", *(_QWORD *)(a1 + 32), 0);

}

uint64_t sub_100BA9A5C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100BA9B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100BA9B70(uint64_t a1)
{
  id *WeakRetained;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  id *v7;
  _QWORD v8[4];
  id v9;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v7 = WeakRetained;
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_routeDataForSection:", 0));
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100BA9C90;
    v8[3] = &unk_1011E7CF0;
    v9 = *(id *)(a1 + 32);
    v4 = objc_msgSend(v3, "indexOfObjectPassingTest:", v8);
    v5 = objc_msgSend(v3, "count");
    if (v4 < v5)
    {
      objc_msgSend(v3, "removeObjectAtIndex:", v4);
      objc_msgSend(v7[24], "reloadData");
    }
    if (v3 == v7[17] && !objc_msgSend(v3, "count"))
      objc_msgSend(v7, "handleDismissAction:", 0);
    v6 = *(_QWORD *)(a1 + 40);
    if (v6)
      (*(void (**)(uint64_t, BOOL))(v6 + 16))(v6, v4 < v5);

    WeakRetained = v7;
  }

}

id sub_100BA9C90(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "storageID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "storageID"));

  v6 = objc_msgSend(v4, "isEqual:", v5);
  return v6;
}

void sub_100BAA16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100BAA1A8(id *a1, void *a2, void *a3)
{
  _QWORD *WeakRetained;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  SearchResult *v16;
  SearchFieldItem *v17;
  void *v18;
  SearchFieldItem *v19;
  DirectionItem *v20;
  void *v21;
  DirectionItem *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  _QWORD v30[4];
  SearchResult *v31;
  id v32;
  id v33;
  const __CFString *v34;
  _UNKNOWN **v35;
  _QWORD v36[2];
  uint8_t buf[4];
  const __CFString *v38;

  v29 = a2;
  v28 = a3;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    v26 = objc_msgSend(objc_alloc((Class)GEORouteBuilder_PersistentData), "initWithPersistentData:", a1[4]);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "buildRoute"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "userProvidedName"));
    if (objc_msgSend(v7, "length"))
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "userProvidedName"));
    else
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "name"));

    v8 = (uint64_t)objc_msgSend(v6, "suggestedNavigationModeForLocation:context:", v29, 1);
    if (!v8)
    {
      v9 = sub_1004320DC();
      v10 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v38 = CFSTR("None");
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Coercing navigation mode to route planning from %{public}@", buf, 0xCu);
      }

      v8 = 4;
    }
    if (objc_msgSend(a1[4], "tourMuid"))
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%llu"), objc_msgSend(a1[4], "tourMuid")));
    else
      v11 = 0;
    if (v8 == 4)
    {
      +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 6003, 135, v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "containeeDelegate"));
      v13 = objc_opt_class(ActionCoordinator);
      if ((objc_opt_isKindOfClass(v12, v13) & 1) != 0)
        v14 = v12;
      else
        v14 = 0;
      v15 = v14;

      v16 = objc_opt_new(SearchResult);
      -[SearchResult setRouteData:](v16, "setRouteData:", a1[4]);
      v17 = objc_opt_new(SearchFieldItem);
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[SearchResult currentLocationSearchResult](SearchResult, "currentLocationSearchResult"));
      -[SearchFieldItem setSearchResult:](v17, "setSearchResult:", v18);

      v19 = objc_opt_new(SearchFieldItem);
      -[SearchFieldItem setSearchResult:](v19, "setSearchResult:", v16);
      v20 = [DirectionItem alloc];
      v36[0] = v17;
      v36[1] = v19;
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v36, 2));
      v22 = -[DirectionItem initWithItems:transportType:](v20, "initWithItems:transportType:", v21, 0);

      v34 = CFSTR("DirectionsSessionInitiatorKey");
      v35 = &off_101270AF8;
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v35, &v34, 1));
      objc_msgSend(v15, "viewController:doDirectionItem:withUserInfo:", WeakRetained, v22, v23);

      v24 = (void *)WeakRetained[15];
      WeakRetained[15] = 0;

    }
    else
    {
      +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 3001, 135, v11);
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_maps_platformController"));
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3221225472;
      v30[2] = sub_100BAA5BC;
      v30[3] = &unk_1011E7D18;
      v31 = v6;
      v32 = v27;
      objc_copyWeak(&v33, a1 + 6);
      objc_msgSend(v25, "pushNavigationWithRoute:navigationMode:shouldCheckNavSafetyAlert:completion:", v31, v8, 1, v30);

      objc_destroyWeak(&v33);
      v16 = v31;
    }

  }
}

void sub_100BAA5A0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100BAA5BC(uint64_t a1, void *a2, void *a3)
{
  unint64_t v5;
  void *v6;
  void *v7;
  id WeakRetained;
  void *v9;
  void *v10;
  unint64_t v11;

  v11 = a2;
  v5 = a3;
  if (v11 | v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedMapsDelegate](UIApplication, "sharedMapsDelegate"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "storageID"));
    objc_msgSend(v6, "interruptConvertToNavigableSavedRouteID:routeName:error:directionsError:", v7, *(_QWORD *)(a1 + 40), v11, v5);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v9 = WeakRetained;
  if (WeakRetained)
  {
    v10 = (void *)*((_QWORD *)WeakRetained + 15);
    *((_QWORD *)WeakRetained + 15) = 0;

  }
}

void sub_100BAAA44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location,char a23)
{
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100BAAA7C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100BAAA8C(uint64_t a1)
{

}

void sub_100BAAA94(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id WeakRetained;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v3 = *(void **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v5 = *(unsigned __int8 *)(a1 + 48);
    v9 = WeakRetained;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "iosChromeViewController"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "mapView"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "_mapLayer"));
    objc_msgSend(v8, "setApplicationSubState:", v5);

    WeakRetained = v9;
  }

}

void sub_100BAAD68(uint64_t a1)
{
  void *v2;
  id v3;

  +[PPTNotificationCenter setEnabled:](PPTNotificationCenter, "setEnabled:", 1);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainVKMapView"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  +[_MapsApplicationDelegateTestingCoordinator doPostLauchTestSetupWithMapView:mapsAppTesting:](_MapsApplicationDelegateTestingCoordinator, "doPostLauchTestSetupWithMapView:mapsAppTesting:", v3, v2);

}

id sub_100BAAEEC(uint64_t a1, void *a2, void *a3, void *a4)
{
  NSString *v7;
  MapsAppTesting *v8;
  NSDictionary *v9;
  MapsAppTest *v10;
  void *v11;
  MapsAppTest *v12;
  MapsAppTest *v13;
  MapsAppTest *v14;
  id v15;
  void *v16;
  id v17;
  _QWORD v19[4];
  id v20;
  id v21;
  id v22;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = ((MapsAppTest *(__cdecl *)(id, NSString *, MapsAppTesting *, NSDictionary *))off_1014B05A0->invoke)(off_1014B05A0, v7, v8, v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  if (!v11)
  {
    v12 = ((MapsAppTest *(__cdecl *)(id, NSString *, MapsAppTesting *, NSDictionary *))off_1014ACE40->invoke)(off_1014ACE40, v7, v8, v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v12);
    if (!v11)
    {
      v13 = ((MapsAppTest *(__cdecl *)(id, NSString *, MapsAppTesting *, NSDictionary *))off_1014BC230->invoke)(off_1014BC230, v7, v8, v9);
      v11 = (void *)objc_claimAutoreleasedReturnValue(v13);
      if (!v11)
      {
        v14 = ((MapsAppTest *(__cdecl *)(id, NSString *, MapsAppTesting *, NSDictionary *))off_1014A9820->invoke)(off_1014A9820, v7, v8, v9);
        v11 = (void *)objc_claimAutoreleasedReturnValue(v14);
      }
    }
  }
  +[PPTNotificationCenter setEnabled:](PPTNotificationCenter, "setEnabled:", v11 != 0);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_100BAB084;
  v19[3] = &unk_1011AD238;
  v15 = v11;
  v20 = v15;
  v21 = *(id *)(a1 + 32);
  v22 = *(id *)(a1 + 40);
  objc_msgSend(v15, "popToRootTrayWithCompletion:", v19);
  v16 = v22;
  v17 = v15;

  return v17;
}

id sub_100BAB084(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "runTest");
  if ((result & 1) == 0)
    return objc_msgSend(*(id *)(a1 + 40), "failedTest:", *(_QWORD *)(a1 + 48));
  return result;
}

id sub_100BAB7DC(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "collectionViewLayout"));
  objc_msgSend(v2, "invalidateLayout");

  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "layoutIfNeeded");
}

int64_t sub_100BAC19C(id a1, id a2, id a3)
{
  id v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double v19;
  CGFloat v20;
  double MinY;
  double v23;
  double MinX;
  CGFloat rect;
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;

  v4 = a3;
  objc_msgSend(a2, "frame");
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  objc_msgSend(v4, "frame");
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v20 = v19;

  rect = v6;
  v26.origin.x = v6;
  v26.origin.y = v8;
  v26.size.width = v10;
  v26.size.height = v12;
  MinY = CGRectGetMinY(v26);
  v27.origin.x = v14;
  v27.origin.y = v16;
  v27.size.width = v18;
  v27.size.height = v20;
  if (MinY < CGRectGetMinY(v27))
    return -1;
  v28.origin.x = rect;
  v28.origin.y = v8;
  v28.size.width = v10;
  v28.size.height = v12;
  v23 = CGRectGetMinY(v28);
  v29.origin.x = v14;
  v29.origin.y = v16;
  v29.size.width = v18;
  v29.size.height = v20;
  if (v23 > CGRectGetMinY(v29))
    return 1;
  v30.origin.x = rect;
  v30.origin.y = v8;
  v30.size.width = v10;
  v30.size.height = v12;
  MinX = CGRectGetMinX(v30);
  v31.origin.x = v14;
  v31.origin.y = v16;
  v31.size.width = v18;
  v31.size.height = v20;
  if (MinX >= CGRectGetMinX(v31))
    return 1;
  else
    return -1;
}

void sub_100BAD374(id a1, UIAction *a2)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[MNNavigationService sharedService](MNNavigationService, "sharedService"));
  objc_msgSend(v2, "stopNavigationWithReason:", 2);

}

void sub_100BAD980(id a1)
{
  ParkedCarManager *v1;
  void *v2;

  v1 = objc_alloc_init(ParkedCarManager);
  v2 = (void *)qword_1014D42E8;
  qword_1014D42E8 = (uint64_t)v1;

}

void sub_100BADAF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100BADB1C(uint64_t a1)
{
  _QWORD block[4];
  id v2;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100BADB94;
  block[3] = &unk_1011AD260;
  objc_copyWeak(&v2, (id *)(a1 + 32));
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  objc_destroyWeak(&v2);
}

void sub_100BADB94(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_updateParkedCar");
    WeakRetained = v2;
  }

}

void sub_100BAE57C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100BAE5A0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD block[4];
  id v6;
  id v7;
  id v8;
  id v9;
  __int128 v10;
  int v11;

  v3 = a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100BAE67C;
  block[3] = &unk_1011E7DC8;
  objc_copyWeak(&v9, (id *)(a1 + 48));
  v6 = v3;
  v10 = *(_OWORD *)(a1 + 56);
  v11 = *(_DWORD *)(a1 + 72);
  v7 = *(id *)(a1 + 32);
  v8 = *(id *)(a1 + 40);
  v4 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  objc_destroyWeak(&v9);
}

void sub_100BAE67C(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(WeakRetained, "setParkedCarWithMapItem:overrideCoordinate:referenceFrame:vehicleEvent:", *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 80), *(_QWORD *)(a1 + 40), *(double *)(a1 + 64), *(double *)(a1 + 72));
  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
    (*(void (**)(void))(v2 + 16))();

}

void sub_100BAE828(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_100BAE854(uint64_t a1)
{
  _BYTE *WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
    WeakRetained[32] = 0;

}

void sub_100BAE874(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  double v9;
  double v10;
  void *v11;
  double v12;
  void *v13;
  unsigned int v14;
  id v15;
  id v16;
  void *v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  id v22;
  void *v23;
  double v24;
  double v25;
  id v26;
  id *v27;
  void *v28;
  _QWORD v29[4];
  id v30;
  id v31;
  id v32;
  _QWORD v33[4];
  id v34;
  id v35;
  _QWORD v36[4];
  id v37;
  id v38;
  id v39;
  _QWORD block[4];
  id v41;
  id v42[2];

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
  if (!v7)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100BAEC04;
    block[3] = &unk_1011B0520;
    v27 = v42;
    objc_copyWeak(v42, a1 + 6);
    v41 = a1[5];
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
    v28 = v41;
    goto LABEL_9;
  }
  if (objc_msgSend(a1[4], "isAuthorizedForPreciseLocation"))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "location"));
    objc_msgSend(v8, "latitude");
    v10 = v9;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "location"));
    objc_msgSend(v11, "longitude");
    if ((+[GEOLocationShifter isLocationShiftRequiredForCoordinate:](GEOLocationShifter, "isLocationShiftRequiredForCoordinate:", v10, v12) & 1) != 0)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "location"));
      v14 = objc_msgSend(v13, "referenceFrame");

      if (v14 != 2)
      {
        v15 = objc_alloc_init((Class)GEOLocationShifter);
        v16 = objc_alloc((Class)GEOLatLng);
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "location"));
        objc_msgSend(v17, "latitude");
        v19 = v18;
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "location"));
        objc_msgSend(v20, "longitude");
        v22 = objc_msgSend(v16, "initWithLatitude:longitude:", v19, v21);

        objc_msgSend(v22, "setGtLog:", 1);
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "location"));
        objc_msgSend(v23, "horizontalUncertainty");
        v25 = v24;
        v36[0] = _NSConcreteStackBlock;
        v36[1] = 3221225472;
        v36[2] = sub_100BAEC60;
        v36[3] = &unk_1011E7E18;
        objc_copyWeak(&v39, a1 + 6);
        v37 = v7;
        v38 = a1[5];
        v33[0] = _NSConcreteStackBlock;
        v33[1] = 3221225472;
        v33[2] = sub_100BAECC8;
        v33[3] = &unk_1011B0260;
        objc_copyWeak(&v35, a1 + 6);
        v34 = a1[5];
        v26 = &_dispatch_main_q;
        objc_msgSend(v15, "shiftLatLng:accuracy:withCompletionHandler:mustGoToNetworkCallback:errorHandler:callbackQueue:", v22, v36, 0, v33, &_dispatch_main_q, v25);

        objc_destroyWeak(&v35);
        objc_destroyWeak(&v39);

        goto LABEL_10;
      }
    }
    else
    {

    }
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    v29[2] = sub_100BAED24;
    v29[3] = &unk_1011B0288;
    v27 = &v32;
    objc_copyWeak(&v32, a1 + 6);
    v30 = v7;
    v31 = a1[5];
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v29);

    v28 = v30;
LABEL_9:

    objc_destroyWeak(v27);
  }
LABEL_10:

}

void sub_100BAEBE8(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100BAEC04(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "setParkedCarWithMapItem:overrideCoordinate:referenceFrame:vehicleEvent:", 0, 0, 0, kCLLocationCoordinate2DInvalid.latitude, kCLLocationCoordinate2DInvalid.longitude);
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_100BAEC60(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "resolveMapItemFromVehicleEvent:overrideCoordinate:referenceFrame:callback:", *(_QWORD *)(a1 + 32), 2, *(_QWORD *)(a1 + 40), CLLocationCoordinate2DFromGEOLocationCoordinate2D(WeakRetained));

}

void sub_100BAECC8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "setParkedCarWithMapItem:overrideCoordinate:referenceFrame:vehicleEvent:", 0, 0, 0, kCLLocationCoordinate2DInvalid.latitude, kCLLocationCoordinate2DInvalid.longitude);
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_100BAED24(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "resolveMapItemFromVehicleEvent:overrideCoordinate:referenceFrame:callback:", *(_QWORD *)(a1 + 32), 1, *(_QWORD *)(a1 + 40), kCLLocationCoordinate2DInvalid.latitude, kCLLocationCoordinate2DInvalid.longitude);

}

void sub_100BAEEB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100BAEED8(uint64_t a1, void *a2)
{
  id v3;
  id *WeakRetained;
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  void *i;
  void *v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];

  v3 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained && objc_msgSend(v3, "count"))
  {
    v5 = objc_alloc((Class)MKMapItem);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "firstObject"));
    v7 = objc_msgSend(v5, "initWithGeoMapItem:isPlaceHolderPlace:", v6, 0);

    objc_msgSend(*(id *)(a1 + 32), "setMapItem:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "vehicleEvent"));
    if (v8)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "_geoMapItemStorageForPersistence"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[RTRoutineManager defaultManager](RTRoutineManager, "defaultManager"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
      objc_msgSend(v10, "updateVehicleEventWithIdentifier:geoMapItem:", v11, v9);

    }
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[1], "allObjects", v8));
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    if (v13)
    {
      v14 = v13;
      v15 = *(_QWORD *)v20;
      do
      {
        for (i = 0; i != v14; i = (char *)i + 1)
        {
          if (*(_QWORD *)v20 != v15)
            objc_enumerationMutation(v12);
          v17 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)i);
          if ((objc_opt_respondsToSelector(v17, "parkedCarManager:didUpdateParkedCar:") & 1) != 0)
            objc_msgSend(v17, "parkedCarManager:didUpdateParkedCar:", WeakRetained, *(_QWORD *)(a1 + 32));
        }
        v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
      }
      while (v14);
    }

  }
}

id sub_100BAF15C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateParkedCar");
}

void sub_100BB2964(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  unint64_t v6;
  void *v7;
  void *v8;
  id v9;

  v5 = a2;
  v6 = a3 + 1;
  if (a3 + 1 != *(_QWORD *)(a1 + 48))
  {
    v9 = v5;
    v7 = 0;
    do
    {
      v8 = v7;
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", v6));

      if (!objc_msgSend(v7, "isHidden"))
        break;
      ++v6;
    }
    while (v6 < *(_QWORD *)(a1 + 48));
    objc_msgSend(*(id *)(a1 + 40), "_extraSpacingAboveView:", v7);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 296), "setCustomSpacing:afterView:", v9);

    v5 = v9;
  }

}

void sub_100BB2FE4(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "detailButton"));
  objc_msgSend(v2, "setTitle:forState:", *(_QWORD *)(a1 + 40), 0);

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "detailButton"));
  objc_msgSend(v3, "setEnabled:", objc_msgSend(*(id *)(a1 + 48), "shouldEnableExpandedButton"));

}

void sub_100BB5758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{

  _Unwind_Resume(a1);
}

void sub_100BB5C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,void *a36)
{

  _Unwind_Resume(a1);
}

uint64_t sub_100BB5D14(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  __CFString *v5;
  __CFString *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  __CFString *v10;
  __CFString *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  unint64_t v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "title"));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "value"));
  v4 = (void *)v3;
  if (v3)
    v5 = (__CFString *)v3;
  else
    v5 = &stru_1011EB268;
  v6 = v5;

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "subtitle"));
  v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "value"));
  v9 = (void *)v8;
  if (v8)
    v10 = (__CFString *)v8;
  else
    v10 = &stru_1011EB268;
  v11 = v10;

  objc_msgSend(v1, "coordinate");
  v13 = v12;
  v15 = v14;
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "styleAttributes"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "styleAttributes"));
  v18 = v17;
  if (v17)
    v19 = v17;
  else
    v19 = objc_msgSend(GEOFeatureStyleAttributes, "init");
  v20 = v19;

  v21 = (unint64_t)-[__CFString hash](v6, "hash");
  v22 = -[__CFString hash](v11, "hash");

  v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)(v13 * 10000.0)));
  v24 = objc_msgSend(v23, "hash");

  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)(v15 * 10000.0)));
  v26 = objc_msgSend(v25, "hash");

  v27 = objc_msgSend(v20, "hash");
  if ((objc_opt_respondsToSelector(v1, "isRouteStartOrEnd") & 1) != 0)
  {
    v28 = objc_msgSend(v1, "isRouteStartOrEnd");
    v29 = 32;
    if (!v28)
      v29 = 0;
  }
  else
  {
    v29 = 0;
  }
  v30 = v21 ^ (2 * (_QWORD)v22) ^ (4 * (_QWORD)v24) ^ (8 * (_QWORD)v26) ^ (16 * (_QWORD)v27) ^ v29;

  return v30;
}

void sub_100BB729C(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v1, "registerDefaults:", &off_101274A98);

}

uint64_t sub_100BB7800(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100BB7810(uint64_t a1)
{

}

void sub_100BB7818(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "copy");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_100BB7850(uint64_t a1)
{
  void *v2;
  _QWORD v3[5];
  id v4;
  id location;

  objc_msgSend(*(id *)(a1 + 32), "_createPOIsForItems:", &__NSArray0__struct);
  objc_initWeak(&location, *(id *)(a1 + 32));
  v2 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100BB791C;
  v3[3] = &unk_1011BEF90;
  objc_copyWeak(&v4, &location);
  v3[4] = *(_QWORD *)(a1 + 40);
  objc_msgSend(v2, "_addAfterUpdateBlock:", v3);
  objc_destroyWeak(&v4);
  objc_destroyWeak(&location);
}

void sub_100BB7900(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100BB791C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_createPOIsForItems:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));

}

void sub_100BB7B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  id *v14;
  uint64_t v15;
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  objc_destroyWeak(v14);
  objc_destroyWeak((id *)(v15 - 72));
  _Unwind_Resume(a1);
}

id sub_100BB7B80(uint64_t a1, uint64_t a2)
{
  id result;

  result = objc_retainBlock(*(id *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_100BB7BA8(uint64_t a1)
{

}

void sub_100BB7BB0(uint64_t a1)
{
  NSObject **WeakRetained;
  NSObject **v3;
  NSObject *v4;
  id v5;
  uint64_t v6;
  _QWORD block[4];
  id v8;
  NSObject **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t);
  id v16;

  WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 48));
  v3 = WeakRetained;
  v11 = 0;
  v12 = &v11;
  v13 = 0x3032000000;
  v14 = sub_100BB7800;
  v15 = sub_100BB7810;
  v16 = 0;
  if (WeakRetained)
  {
    v4 = WeakRetained[1];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100BB7CB4;
    block[3] = &unk_1011AE630;
    v5 = *(id *)(a1 + 32);
    v9 = v3;
    v10 = &v11;
    v8 = v5;
    dispatch_sync(v4, block);

  }
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
    (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v6, v12[5]);
  _Block_object_dispose(&v11, 8);

}

void sub_100BB7C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100BB7CB4(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
LABEL_3:
    v6 = 0;
    while (1)
    {
      if (*(_QWORD *)v11 != v5)
        objc_enumerationMutation(v2);
      v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 80), "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * v6), (_QWORD)v10));
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v9 = *(void **)(v8 + 40);
      *(_QWORD *)(v8 + 40) = v7;

      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
        break;
      if (v4 == (id)++v6)
      {
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
        if (v4)
          goto LABEL_3;
        break;
      }
    }
  }

}

void sub_100BB7DD0(uint64_t a1)
{
  _BYTE *v2;
  uint64_t v3;
  void *v4;

  v2 = *(_BYTE **)(a1 + 32);
  if (v2[76])
  {
    objc_msgSend(v2, "_addAfterUpdateBlock:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v4 = *(void **)(v3 + 40);
    *(_QWORD *)(v3 + 40) = 0;

  }
}

uint64_t sub_100BB7FB8(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  *(_BYTE *)(*(_QWORD *)(result + 32) + 76) = 1;
  v1 = (unsigned int *)(*(_QWORD *)(result + 32) + 72);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

void sub_100BB805C(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + 32);
  v2 = objc_msgSend(*(id *)(a1 + 40), "copy");
  objc_msgSend(v1, "_createPOIsForItems:", v2);

}

void sub_100BB8570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  _Block_object_dispose((const void *)(v31 - 176), 8);
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void sub_100BB85A0(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  id v5;
  uint64_t v6;
  void *v7;

  *(_BYTE *)(a1[4] + 76) = 1;
  v2 = (unsigned int *)(a1[4] + 72);
  do
  {
    v3 = __ldxr(v2);
    v4 = v3 + 1;
  }
  while (__stxr(v4, v2));
  *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = v4;
  v5 = objc_msgSend(*(id *)(a1[4] + 80), "copy");
  v6 = *(_QWORD *)(a1[6] + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

}

void sub_100BB8608(uint64_t a1)
{
  uint64_t v1;
  os_signpost_id_t v2;
  NSObject *v3;
  NSObject *v4;
  id v5;
  NSObject *v6;
  id v7;
  void *v8;
  objc_class *v9;
  NSString *v10;
  void *v11;
  void *v12;
  void *v13;
  __CFString *v14;
  __CFString *v15;
  void *v16;
  POIAnnotation *v17;
  void *v18;
  id v19;
  id v20;
  char **v21;
  void *v22;
  POIAnnotation *v23;
  int v24;
  unsigned int *v25;
  unsigned int v26;
  id v27;
  NSObject *v28;
  id v29;
  void *v30;
  objc_class *v31;
  NSString *v32;
  void *v33;
  void *v34;
  void *v35;
  __CFString *v36;
  id v37;
  id v38;
  uint64_t v39;
  void *i;
  uint64_t v41;
  __CFString *v42;
  id v43;
  id v44;
  NSObject *v45;
  id v46;
  void *v47;
  objc_class *v48;
  NSString *v49;
  void *v50;
  void *v51;
  void *v52;
  __CFString *v53;
  id v54;
  id v55;
  void *v56;
  objc_class *v57;
  NSString *v58;
  void *v59;
  void *v60;
  void *v61;
  __CFString *v62;
  int v63;
  __CFString *v64;
  id v65;
  NSObject *v66;
  id v67;
  void *v68;
  objc_class *v69;
  NSString *v70;
  void *v71;
  void *v72;
  void *v73;
  __CFString *v74;
  __CFString *v75;
  id v76;
  id v77;
  id *v78;
  id *v79;
  id *v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  unsigned int *v84;
  unsigned int v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  BOOL v90;
  char v91;
  id v92;
  NSObject *v93;
  void *v94;
  void *v95;
  id v96;
  id v97;
  uint64_t v98;
  void *j;
  char **v100;
  uint64_t v101;
  POIAnnotation *v102;
  int v103;
  unsigned int *v104;
  unsigned int v105;
  id v106;
  NSObject *v107;
  id v108;
  void *v109;
  objc_class *v110;
  NSString *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  __CFString *v116;
  __CFString *v117;
  id v118;
  NSObject *v119;
  id v120;
  void *v121;
  objc_class *v122;
  NSString *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  __CFString *v128;
  __CFString *v129;
  POIAnnotation *v130;
  NSObject *v131;
  id v132;
  id v133;
  uint64_t v134;
  void *k;
  id v136;
  id v137;
  void *v138;
  objc_class *v139;
  NSString *v140;
  uint64_t v141;
  void *v142;
  void *v143;
  void *v144;
  __CFString *v145;
  __CFString *v146;
  uint64_t v147;
  void *v148;
  void *v149;
  uint64_t v150;
  id v151;
  id *v152;
  char **v153;
  uint64_t v154;
  POIAnnotation *v155;
  int v156;
  unsigned int *v157;
  unsigned int v158;
  id v159;
  NSObject *v160;
  id v161;
  void *v162;
  objc_class *v163;
  NSString *v164;
  void *v165;
  void *v166;
  void *v167;
  POIAnnotation *v168;
  __CFString *v169;
  __CFString *v170;
  id v171;
  NSObject *v172;
  id v173;
  void *v174;
  objc_class *v175;
  NSString *v176;
  void *v177;
  void *v178;
  void *v179;
  POIAnnotation *v180;
  __CFString *v181;
  __CFString *v182;
  POIAnnotation *v183;
  id v184;
  NSObject *v185;
  NSObject *v186;
  id v187;
  void *v188;
  objc_class *v189;
  NSString *v190;
  uint64_t v191;
  void *v192;
  void *v193;
  void *v194;
  __CFString *v195;
  id v196;
  void *v197;
  objc_class *v198;
  NSString *v199;
  uint64_t v200;
  POIAnnotation *v201;
  void *v202;
  void *v203;
  uint64_t v204;
  void *v205;
  __CFString *v206;
  __CFString *v207;
  id v208;
  id v209;
  id *v210;
  uint64_t v211;
  void *m;
  __CFString *v213;
  uint64_t v214;
  id v215;
  NSObject *v216;
  NSObject *v217;
  NSObject *v218;
  id v219;
  uint64_t v220;
  NSObject *v221;
  id v222;
  NSObject *v223;
  id v224;
  void *v225;
  objc_class *v226;
  NSString *v227;
  void *v228;
  void *v229;
  void *v230;
  __CFString *v231;
  id v232;
  NSObject *v233;
  id v234;
  void *v235;
  objc_class *v236;
  NSString *v237;
  void *v238;
  void *v239;
  void *v240;
  __CFString *v241;
  uint64_t v242;
  int v243;
  id v244;
  NSObject *v245;
  id v246;
  void *v247;
  objc_class *v248;
  NSString *v249;
  void *v250;
  void *v251;
  void *v252;
  __CFString *v253;
  int v254;
  __CFString *v255;
  int v256;
  void *v257;
  POIAnnotation *v258;
  void *v259;
  os_signpost_id_t spid;
  unint64_t v261;
  void *v262;
  NSObject *v263;
  NSObject *v264;
  id *v265;
  char *v266;
  POIAnnotation *v267;
  void *v268;
  NSObject *v269;
  id *v270;
  id *v271;
  id *v272;
  NSObject *log;
  id *location;
  id *locationa;
  id *locationb;
  id *locationc;
  void *v278;
  char *v279;
  void *v280;
  NSObject *obj;
  uint64_t v282;
  void *v283;
  id v284;
  id v285;
  uint64_t v286;
  _QWORD block[5];
  NSObject *v288;
  id v289;
  id v290;
  id v291;
  id v292;
  id v293;
  uint64_t v294;
  id v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  _BYTE v328[128];
  uint8_t v329[128];
  uint8_t buf[4];
  __CFString *v331;
  __int16 v332;
  POIAnnotation *v333;
  __int16 v334;
  uint64_t v335;
  _BYTE v336[128];
  _BYTE v337[128];
  _BYTE v338[128];
  _BYTE v339[128];
  _BYTE v340[128];
  _BYTE v341[128];

  v1 = a1;
  v2 = os_signpost_id_generate(*(os_log_t *)(a1 + 32));
  v3 = *(id *)(v1 + 32);
  v4 = v3;
  v261 = v2 - 1;
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v3))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_INTERVAL_BEGIN, v2, "CreatePOIsForItemsCalculation", "", buf, 2u);
  }
  spid = v2;

  v5 = sub_100432BCC();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (!os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    goto LABEL_14;
  v7 = objc_loadWeakRetained((id *)(v1 + 80));
  v8 = v7;
  if (!v7)
  {
    v14 = CFSTR("<nil>");
    goto LABEL_13;
  }
  v9 = (objc_class *)objc_opt_class(v7);
  v10 = NSStringFromClass(v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  if ((objc_opt_respondsToSelector(v8, "accessibilityIdentifier") & 1) != 0)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "performSelector:", "accessibilityIdentifier"));
    v13 = v12;
    if (v12 && !objc_msgSend(v12, "isEqualToString:", v11))
    {
      v14 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v11, v8, v13));

      goto LABEL_11;
    }

  }
  v14 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v11, v8));
LABEL_11:

LABEL_13:
  v15 = v14;
  *(_DWORD *)buf = 138543362;
  v331 = v15;
  _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[%{public}@] POI calculation starting...", buf, 0xCu);

LABEL_14:
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v1 + 64) + 8) + 40), "allKeys"));
  v267 = (POIAnnotation *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v16));

  v17 = (POIAnnotation *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v324 = 0u;
  v325 = 0u;
  v326 = 0u;
  v327 = 0u;
  obj = *(id *)(v1 + 40);
  v19 = -[NSObject countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v324, v341, 16);
  v286 = v1;
  if (!v19)
    goto LABEL_45;
  v20 = v19;
  v282 = *(_QWORD *)v325;
  location = (id *)(v1 + 80);
  v21 = &selRef__updateNavigationDisplayConfigurationForDisplayedStep_;
  do
  {
    v22 = 0;
    v279 = v21[486];
    do
    {
      if (*(_QWORD *)v325 != v282)
        objc_enumerationMutation(obj);
      v23 = *(POIAnnotation **)(*((_QWORD *)&v324 + 1) + 8 * (_QWORD)v22);
      v24 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 72) + 8) + 24);
      v25 = (unsigned int *)(*(_QWORD *)(v1 + 48) + 72);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26, v25));
      if (v24 != v26)
      {
        v54 = sub_100432BCC();
        log = objc_claimAutoreleasedReturnValue(v54);
        if (!os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
          goto LABEL_287;
        v55 = objc_loadWeakRetained(location);
        v56 = v55;
        if (v55)
        {
          v57 = (objc_class *)objc_opt_class(v55);
          v58 = NSStringFromClass(v57);
          v59 = (void *)objc_claimAutoreleasedReturnValue(v58);
          if ((objc_opt_respondsToSelector(v56, v279) & 1) == 0)
            goto LABEL_59;
          v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "performSelector:", v279));
          v61 = v60;
          if (v60 && !objc_msgSend(v60, "isEqualToString:", v59))
          {
            v62 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v59, v56, v61));

          }
          else
          {

LABEL_59:
            v62 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v59, v56));
          }

        }
        else
        {
          v62 = CFSTR("<nil>");
        }

        v63 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 72) + 8) + 24);
        *(_DWORD *)buf = 138543618;
        v331 = v62;
        v332 = 1024;
        LODWORD(v333) = v63;
        _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "[%{public}@] Counter (%d) updated while calculating POI items; aborting early",
          buf,
          0x12u);

        goto LABEL_287;
      }
      if (-[POIAnnotation shouldBeHiddenFromMap](v23, "shouldBeHiddenFromMap"))
      {
        v27 = sub_100432BCC();
        v28 = objc_claimAutoreleasedReturnValue(v27);
        if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
          goto LABEL_41;
        v29 = objc_loadWeakRetained(location);
        v30 = v29;
        if (v29)
        {
          v31 = (objc_class *)objc_opt_class(v29);
          v32 = NSStringFromClass(v31);
          v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
          if ((objc_opt_respondsToSelector(v30, v279) & 1) == 0)
            goto LABEL_29;
          v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "performSelector:", v279));
          v35 = v34;
          if (v34 && !objc_msgSend(v34, "isEqualToString:", v33))
          {
            v36 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v33, v30, v35));

          }
          else
          {

LABEL_29:
            v36 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v33, v30));
          }

          v1 = v286;
        }
        else
        {
          v36 = CFSTR("<nil>");
        }

        v42 = v36;
        *(_DWORD *)buf = 138543618;
        v331 = v42;
        v332 = 2112;
        v333 = v23;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "[%{public}@] Item (%@) should be hidden from map; skipping",
          buf,
          0x16u);

        goto LABEL_41;
      }
      v322 = 0u;
      v323 = 0u;
      v320 = 0u;
      v321 = 0u;
      v28 = objc_claimAutoreleasedReturnValue(-[POIAnnotation keys](v23, "keys"));
      v37 = -[NSObject countByEnumeratingWithState:objects:count:](v28, "countByEnumeratingWithState:objects:count:", &v320, v340, 16);
      if (v37)
      {
        v38 = v37;
        v39 = *(_QWORD *)v321;
        do
        {
          for (i = 0; i != v38; i = (char *)i + 1)
          {
            if (*(_QWORD *)v321 != v39)
              objc_enumerationMutation(v28);
            v41 = *(_QWORD *)(*((_QWORD *)&v320 + 1) + 8 * (_QWORD)i);
            -[POIAnnotation addObject:](v17, "addObject:", v41);
            objc_msgSend(v18, "setObject:forKeyedSubscript:", v23, v41);
          }
          v38 = -[NSObject countByEnumeratingWithState:objects:count:](v28, "countByEnumeratingWithState:objects:count:", &v320, v340, 16);
        }
        while (v38);
        v1 = v286;
      }
LABEL_41:

      v22 = (char *)v22 + 1;
    }
    while (v22 != v20);
    v43 = -[NSObject countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v324, v341, 16);
    v20 = v43;
    v21 = &selRef__updateNavigationDisplayConfigurationForDisplayedStep_;
  }
  while (v43);
LABEL_45:

  v44 = sub_100432BCC();
  v45 = objc_claimAutoreleasedReturnValue(v44);
  if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
  {
    v46 = objc_loadWeakRetained((id *)(v1 + 80));
    v47 = v46;
    if (v46)
    {
      v48 = (objc_class *)objc_opt_class(v46);
      v49 = NSStringFromClass(v48);
      v50 = (void *)objc_claimAutoreleasedReturnValue(v49);
      if ((objc_opt_respondsToSelector(v47, "accessibilityIdentifier") & 1) == 0)
        goto LABEL_51;
      v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "performSelector:", "accessibilityIdentifier"));
      v52 = v51;
      if (v51 && !objc_msgSend(v51, "isEqualToString:", v50))
      {
        v53 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v50, v47, v52));

      }
      else
      {

LABEL_51:
        v53 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v50, v47));
      }

    }
    else
    {
      v53 = CFSTR("<nil>");
    }

    v64 = v53;
    *(_DWORD *)buf = 138543618;
    v331 = v64;
    v332 = 2112;
    v333 = v267;
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_INFO, "[%{public}@] - current keys: %@", buf, 0x16u);

  }
  v65 = sub_100432BCC();
  v66 = objc_claimAutoreleasedReturnValue(v65);
  if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
  {
    v67 = objc_loadWeakRetained((id *)(v1 + 80));
    v68 = v67;
    if (v67)
    {
      v69 = (objc_class *)objc_opt_class(v67);
      v70 = NSStringFromClass(v69);
      v71 = (void *)objc_claimAutoreleasedReturnValue(v70);
      if ((objc_opt_respondsToSelector(v68, "accessibilityIdentifier") & 1) == 0)
        goto LABEL_71;
      v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "performSelector:", "accessibilityIdentifier"));
      v73 = v72;
      if (v72 && !objc_msgSend(v72, "isEqualToString:", v71))
      {
        v74 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v71, v68, v73));

      }
      else
      {

LABEL_71:
        v74 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v71, v68));
      }

    }
    else
    {
      v74 = CFSTR("<nil>");
    }

    v75 = v74;
    *(_DWORD *)buf = 138543618;
    v331 = v75;
    v332 = 2112;
    v333 = v17;
    _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_INFO, "[%{public}@] - incoming keys: %@", buf, 0x16u);

  }
  v76 = -[POIAnnotation mutableCopy](v267, "mutableCopy");
  objc_msgSend(v76, "unionSet:", v17);
  log = objc_claimAutoreleasedReturnValue(+[NSHashTable hashTableWithOptions:](NSHashTable, "hashTableWithOptions:", 512));
  v269 = objc_claimAutoreleasedReturnValue(+[NSHashTable hashTableWithOptions:](NSHashTable, "hashTableWithOptions:", 512));
  v280 = (void *)objc_claimAutoreleasedReturnValue(+[NSHashTable hashTableWithOptions:](NSHashTable, "hashTableWithOptions:", 512));
  v278 = (void *)objc_claimAutoreleasedReturnValue(+[NSHashTable hashTableWithOptions:](NSHashTable, "hashTableWithOptions:", 512));
  v268 = (void *)objc_claimAutoreleasedReturnValue(+[NSHashTable hashTableWithOptions:](NSHashTable, "hashTableWithOptions:", 512));
  v262 = (void *)objc_claimAutoreleasedReturnValue(+[NSHashTable hashTableWithOptions:](NSHashTable, "hashTableWithOptions:", 512));
  v77 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v1 + 64) + 8) + 40), "mutableCopy");
  v316 = 0u;
  v317 = 0u;
  v318 = 0u;
  v319 = 0u;
  obj = v76;
  v78 = (id *)-[NSObject countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v316, v339, 16);
  if (!v78)
    goto LABEL_119;
  v79 = v78;
  v80 = *(id **)v317;
  v270 = *(id **)v317;
  while (2)
  {
    v81 = 0;
    locationa = v79;
    while (2)
    {
      if (*(id **)v317 != v80)
        objc_enumerationMutation(obj);
      v82 = *(_QWORD *)(*((_QWORD *)&v316 + 1) + 8 * v81);
      v83 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 72) + 8) + 24);
      v84 = (unsigned int *)(*(_QWORD *)(v1 + 48) + 72);
      do
        v85 = __ldxr(v84);
      while (__stxr(v85, v84));
      if (v83 != v85)
      {
        v222 = sub_100432BCC();
        v223 = objc_claimAutoreleasedReturnValue(v222);
        if (os_log_type_enabled(v223, OS_LOG_TYPE_DEBUG))
        {
          v224 = objc_loadWeakRetained((id *)(v1 + 80));
          v225 = v224;
          if (v224)
          {
            v226 = (objc_class *)objc_opt_class(v224);
            v227 = NSStringFromClass(v226);
            v228 = (void *)objc_claimAutoreleasedReturnValue(v227);
            if ((objc_opt_respondsToSelector(v225, "accessibilityIdentifier") & 1) == 0)
              goto LABEL_254;
            v229 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v225, "performSelector:", "accessibilityIdentifier"));
            v230 = v229;
            if (v229 && !objc_msgSend(v229, "isEqualToString:", v228))
            {
              v231 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v228, v225, v230));

              v1 = v286;
            }
            else
            {

              v1 = v286;
LABEL_254:
              v231 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v228, v225));
            }

          }
          else
          {
            v231 = CFSTR("<nil>");
          }

          v243 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 72) + 8) + 24);
          *(_DWORD *)buf = 138543618;
          v331 = v231;
          v332 = 1024;
          LODWORD(v333) = v243;
          _os_log_impl((void *)&_mh_execute_header, v223, OS_LOG_TYPE_DEBUG, "[%{public}@] Counter (%d) updated while comparing existing POIs; aborting early",
            buf,
            0x12u);

        }
        v221 = obj;
        goto LABEL_286;
      }
      v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v1 + 64) + 8) + 40), "objectForKeyedSubscript:", v82));
      v283 = v86;
      if (v86)
        v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "compoundItem"));
      else
        v87 = 0;
      v88 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", v82));
      v89 = v88;
      if (v87)
        v90 = 1;
      else
        v90 = v88 == 0;
      v91 = !v90;
      if (v90)
      {
        if (!v87 || !v88)
        {
          if (!v87 || v88)
            goto LABEL_117;
          goto LABEL_106;
        }
        v92 = (id)sub_100BB5D14(v88);
        v90 = v92 == objc_msgSend(v283, "presentationAttributesHash");
        v1 = v286;
        if (!v90 || (objc_msgSend(v87, "isEqual:", v89) & 1) == 0)
          goto LABEL_99;
      }
      else
      {
LABEL_99:
        if (objc_msgSend(v89, "shouldBeClustered"))
          v93 = v269;
        else
          v93 = log;
        -[NSObject addObject:](v93, "addObject:", v89);
        if ((v91 & 1) != 0)
          goto LABEL_117;
LABEL_106:
        if (objc_msgSend(v87, "shouldBeClustered"))
          v94 = v278;
        else
          v94 = v280;
        objc_msgSend(v94, "addObject:", v283);
        v314 = 0u;
        v315 = 0u;
        v312 = 0u;
        v313 = 0u;
        v95 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v87, "keys"));
        v96 = objc_msgSend(v95, "countByEnumeratingWithState:objects:count:", &v312, v338, 16);
        if (v96)
        {
          v97 = v96;
          v98 = *(_QWORD *)v313;
          do
          {
            for (j = 0; j != v97; j = (char *)j + 1)
            {
              if (*(_QWORD *)v313 != v98)
                objc_enumerationMutation(v95);
              objc_msgSend(v77, "removeObjectForKey:", *(_QWORD *)(*((_QWORD *)&v312 + 1) + 8 * (_QWORD)j));
            }
            v97 = objc_msgSend(v95, "countByEnumeratingWithState:objects:count:", &v312, v338, 16);
          }
          while (v97);
        }

        v1 = v286;
        v80 = v270;
        v79 = locationa;
      }
LABEL_117:

      if ((id *)++v81 != v79)
        continue;
      break;
    }
    v79 = (id *)-[NSObject countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v316, v339, 16);
    if (v79)
      continue;
    break;
  }
LABEL_119:

  v310 = 0u;
  v311 = 0u;
  v308 = 0u;
  v309 = 0u;
  v264 = log;
  v284 = -[NSObject countByEnumeratingWithState:objects:count:](v264, "countByEnumeratingWithState:objects:count:", &v308, v337, 16);
  if (!v284)
    goto LABEL_176;
  locationb = *(id **)v309;
  v271 = (id *)(v1 + 80);
  v100 = &selRef__updateNavigationDisplayConfigurationForDisplayedStep_;
  while (2)
  {
    v101 = 0;
    v266 = v100[486];
    while (2)
    {
      if (*(id **)v309 != locationb)
        objc_enumerationMutation(v264);
      v102 = *(POIAnnotation **)(*((_QWORD *)&v308 + 1) + 8 * v101);
      v103 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v286 + 72) + 8) + 24);
      v104 = (unsigned int *)(*(_QWORD *)(v286 + 48) + 72);
      do
        v105 = __ldxr(v104);
      while (__stxr(v105, v104));
      if (v103 != v105)
      {
        v232 = sub_100432BCC();
        v233 = objc_claimAutoreleasedReturnValue(v232);
        if (os_log_type_enabled(v233, OS_LOG_TYPE_DEBUG))
        {
          v234 = objc_loadWeakRetained(v271);
          v235 = v234;
          if (v234)
          {
            v236 = (objc_class *)objc_opt_class(v234);
            v237 = NSStringFromClass(v236);
            v238 = (void *)objc_claimAutoreleasedReturnValue(v237);
            if ((objc_opt_respondsToSelector(v235, v266) & 1) == 0)
              goto LABEL_262;
            v239 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v235, "performSelector:", v266));
            v240 = v239;
            if (v239 && !objc_msgSend(v239, "isEqualToString:", v238))
            {
              v241 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v238, v235, v240));

            }
            else
            {

LABEL_262:
              v241 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v238, v235));
            }
            v242 = v286;

          }
          else
          {
            v241 = CFSTR("<nil>");
            v242 = v286;
          }

          v254 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v242 + 72) + 8) + 24);
          *(_DWORD *)buf = 138543618;
          v331 = v241;
          v332 = 1024;
          LODWORD(v333) = v254;
          _os_log_impl((void *)&_mh_execute_header, v233, OS_LOG_TYPE_DEBUG, "[%{public}@] Counter (%d) updated while creating new normal POIs; aborting early",
            buf,
            0x12u);

        }
        v221 = v264;
        goto LABEL_286;
      }
      if (-[POIAnnotation shouldBeHiddenFromMap](v102, "shouldBeHiddenFromMap"))
      {
        v106 = sub_100432BCC();
        v107 = objc_claimAutoreleasedReturnValue(v106);
        if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
        {
          v108 = objc_loadWeakRetained(v271);
          v109 = v108;
          if (v108)
          {
            v110 = (objc_class *)objc_opt_class(v108);
            v111 = NSStringFromClass(v110);
            v112 = (void *)objc_claimAutoreleasedReturnValue(v111);
            if ((objc_opt_respondsToSelector(v109, v266) & 1) == 0)
              goto LABEL_134;
            v113 = v112;
            v114 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v109, "performSelector:", v266));
            v115 = v114;
            if (v114 && !objc_msgSend(v114, "isEqualToString:", v113))
            {
              v148 = v113;
              v116 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v113, v109, v115));

              v112 = v148;
            }
            else
            {

              v112 = v113;
LABEL_134:
              v116 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v112, v109));
            }

          }
          else
          {
            v116 = CFSTR("<nil>");
          }

          v117 = v116;
          *(_DWORD *)buf = 138543618;
          v331 = v117;
          v332 = 2112;
          v333 = v102;
          _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_ERROR, "[%{public}@] Item (%@) marked as should be hidden from the map; this shouldn't have happened",
            buf,
            0x16u);

        }
      }
      if (-[POIAnnotation shouldBeClustered](v102, "shouldBeClustered"))
      {
        v118 = sub_100432BCC();
        v119 = objc_claimAutoreleasedReturnValue(v118);
        if (os_log_type_enabled(v119, OS_LOG_TYPE_ERROR))
        {
          v120 = objc_loadWeakRetained(v271);
          v121 = v120;
          if (v120)
          {
            v122 = (objc_class *)objc_opt_class(v120);
            v123 = NSStringFromClass(v122);
            v124 = (void *)objc_claimAutoreleasedReturnValue(v123);
            if ((objc_opt_respondsToSelector(v121, v266) & 1) == 0)
              goto LABEL_146;
            v125 = v124;
            v126 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v121, "performSelector:", v266));
            v127 = v126;
            if (v126 && !objc_msgSend(v126, "isEqualToString:", v125))
            {
              v149 = v125;
              v128 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v125, v121, v127));

              v124 = v149;
            }
            else
            {

              v124 = v125;
LABEL_146:
              v128 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v124, v121));
            }

          }
          else
          {
            v128 = CFSTR("<nil>");
          }

          v129 = v128;
          *(_DWORD *)buf = 138543618;
          v331 = v129;
          v332 = 2112;
          v333 = v102;
          _os_log_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_ERROR, "[%{public}@] Item (%@) marked as should be clustered; this shouldn't have happened",
            buf,
            0x16u);

        }
      }
      v130 = -[POIAnnotation initWithItem:defaultLocale:]([POIAnnotation alloc], "initWithItem:defaultLocale:", v102, *(_QWORD *)(*(_QWORD *)(v286 + 48) + 24));
      if (!v130)
      {
        v136 = sub_100432BCC();
        v131 = objc_claimAutoreleasedReturnValue(v136);
        if (!os_log_type_enabled(v131, OS_LOG_TYPE_ERROR))
          goto LABEL_170;
        v137 = objc_loadWeakRetained(v271);
        v138 = v137;
        if (!v137)
        {
          v145 = CFSTR("<nil>");
          goto LABEL_169;
        }
        v139 = (objc_class *)objc_opt_class(v137);
        v140 = NSStringFromClass(v139);
        v141 = objc_claimAutoreleasedReturnValue(v140);
        if ((objc_opt_respondsToSelector(v138, v266) & 1) != 0)
        {
          v142 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v138, "performSelector:", v266));
          v143 = v142;
          if (v142 && !objc_msgSend(v142, "isEqualToString:", v141))
          {
            v257 = v143;
            v150 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v141, v138, v143));
            v144 = (void *)v141;
            v145 = (__CFString *)v150;

            goto LABEL_167;
          }

        }
        v144 = (void *)v141;
        v145 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v141, v138));
LABEL_167:

LABEL_169:
        v146 = v145;
        v147 = *(_QWORD *)(*(_QWORD *)(v286 + 48) + 24);
        *(_DWORD *)buf = 138543874;
        v331 = v146;
        v332 = 2112;
        v333 = v102;
        v334 = 2112;
        v335 = v147;
        _os_log_impl((void *)&_mh_execute_header, v131, OS_LOG_TYPE_ERROR, "[%{public}@] Could not generate normal POI for item: %@ with locale: %@", buf, 0x20u);

        goto LABEL_170;
      }
      objc_msgSend(v268, "addObject:", v130);
      v306 = 0u;
      v307 = 0u;
      v304 = 0u;
      v305 = 0u;
      v131 = objc_claimAutoreleasedReturnValue(-[POIAnnotation keys](v102, "keys"));
      v132 = -[NSObject countByEnumeratingWithState:objects:count:](v131, "countByEnumeratingWithState:objects:count:", &v304, v336, 16);
      if (v132)
      {
        v133 = v132;
        v134 = *(_QWORD *)v305;
        do
        {
          for (k = 0; k != v133; k = (char *)k + 1)
          {
            if (*(_QWORD *)v305 != v134)
              objc_enumerationMutation(v131);
            objc_msgSend(v77, "setObject:forKeyedSubscript:", v130, *(_QWORD *)(*((_QWORD *)&v304 + 1) + 8 * (_QWORD)k));
          }
          v133 = -[NSObject countByEnumeratingWithState:objects:count:](v131, "countByEnumeratingWithState:objects:count:", &v304, v336, 16);
        }
        while (v133);
      }
LABEL_170:

      if ((id)++v101 != v284)
        continue;
      break;
    }
    v151 = -[NSObject countByEnumeratingWithState:objects:count:](v264, "countByEnumeratingWithState:objects:count:", &v308, v337, 16);
    v1 = v286;
    v100 = &selRef__updateNavigationDisplayConfigurationForDisplayedStep_;
    v284 = v151;
    if (v151)
      continue;
    break;
  }
LABEL_176:

  v302 = 0u;
  v303 = 0u;
  v300 = 0u;
  v301 = 0u;
  v263 = v269;
  v285 = -[NSObject countByEnumeratingWithState:objects:count:](v263, "countByEnumeratingWithState:objects:count:", &v300, v329, 16);
  if (!v285)
    goto LABEL_244;
  v152 = (id *)(v1 + 80);
  v153 = &selRef__updateNavigationDisplayConfigurationForDisplayedStep_;
  locationc = *(id **)v301;
  v265 = (id *)(v1 + 80);
  while (2)
  {
    v154 = 0;
    v272 = (id *)v153[486];
    while (2)
    {
      if (*(id **)v301 != locationc)
        objc_enumerationMutation(v263);
      v155 = *(POIAnnotation **)(*((_QWORD *)&v300 + 1) + 8 * v154);
      v156 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v286 + 72) + 8) + 24);
      v157 = (unsigned int *)(*(_QWORD *)(v286 + 48) + 72);
      do
        v158 = __ldxr(v157);
      while (__stxr(v158, v157));
      if (v156 != v158)
      {
        v244 = sub_100432BCC();
        v245 = objc_claimAutoreleasedReturnValue(v244);
        if (os_log_type_enabled(v245, OS_LOG_TYPE_DEBUG))
        {
          v246 = objc_loadWeakRetained(v152);
          v247 = v246;
          if (v246)
          {
            v248 = (objc_class *)objc_opt_class(v246);
            v249 = NSStringFromClass(v248);
            v250 = (void *)objc_claimAutoreleasedReturnValue(v249);
            if ((objc_opt_respondsToSelector(v247, v272) & 1) == 0)
              goto LABEL_274;
            v251 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v247, "performSelector:", v272));
            v252 = v251;
            if (v251 && !objc_msgSend(v251, "isEqualToString:", v250))
            {
              v253 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v250, v247, v252));

            }
            else
            {

LABEL_274:
              v253 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v250, v247));
            }

          }
          else
          {
            v253 = CFSTR("<nil>");
          }

          v255 = v253;
          v256 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v286 + 72) + 8) + 24);
          *(_DWORD *)buf = 138543618;
          v331 = v255;
          v332 = 1024;
          LODWORD(v333) = v256;
          _os_log_impl((void *)&_mh_execute_header, v245, OS_LOG_TYPE_DEBUG, "[%{public}@] Counter (%d) updated while creating new clustered POIs; aborting early",
            buf,
            0x12u);

        }
        v221 = v263;
        goto LABEL_286;
      }
      if (-[POIAnnotation shouldBeHiddenFromMap](v155, "shouldBeHiddenFromMap"))
      {
        v159 = sub_100432BCC();
        v160 = objc_claimAutoreleasedReturnValue(v159);
        if (os_log_type_enabled(v160, OS_LOG_TYPE_ERROR))
        {
          v161 = objc_loadWeakRetained(v152);
          v162 = v161;
          if (v161)
          {
            v163 = (objc_class *)objc_opt_class(v161);
            v164 = NSStringFromClass(v163);
            v165 = (void *)objc_claimAutoreleasedReturnValue(v164);
            if ((objc_opt_respondsToSelector(v162, v272) & 1) == 0)
              goto LABEL_191;
            v166 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v162, "performSelector:", v272));
            v167 = v166;
            if (v166 && !objc_msgSend(v166, "isEqualToString:", v165))
            {
              v168 = v155;
              v169 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v165, v162, v167));

            }
            else
            {

LABEL_191:
              v168 = v155;
              v169 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v165, v162));
            }

          }
          else
          {
            v168 = v155;
            v169 = CFSTR("<nil>");
          }

          v170 = v169;
          *(_DWORD *)buf = 138543618;
          v331 = v170;
          v332 = 2112;
          v155 = v168;
          v333 = v168;
          _os_log_impl((void *)&_mh_execute_header, v160, OS_LOG_TYPE_ERROR, "[%{public}@] Item (%@) marked as should be hidden from the map; this shouldn't have happened",
            buf,
            0x16u);

          v152 = v265;
        }

      }
      if ((-[POIAnnotation shouldBeClustered](v155, "shouldBeClustered") & 1) == 0)
      {
        v171 = sub_100432BCC();
        v172 = objc_claimAutoreleasedReturnValue(v171);
        if (os_log_type_enabled(v172, OS_LOG_TYPE_ERROR))
        {
          v173 = objc_loadWeakRetained(v152);
          v174 = v173;
          if (v173)
          {
            v175 = (objc_class *)objc_opt_class(v173);
            v176 = NSStringFromClass(v175);
            v177 = (void *)objc_claimAutoreleasedReturnValue(v176);
            if ((objc_opt_respondsToSelector(v174, v272) & 1) == 0)
              goto LABEL_203;
            v178 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v174, "performSelector:", v272));
            v179 = v178;
            if (v178 && !objc_msgSend(v178, "isEqualToString:", v177))
            {
              v180 = v155;
              v181 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v177, v174, v179));

            }
            else
            {

LABEL_203:
              v180 = v155;
              v181 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v177, v174));
            }

          }
          else
          {
            v180 = v155;
            v181 = CFSTR("<nil>");
          }

          v182 = v181;
          *(_DWORD *)buf = 138543618;
          v331 = v182;
          v332 = 2112;
          v155 = v180;
          v333 = v180;
          _os_log_impl((void *)&_mh_execute_header, v172, OS_LOG_TYPE_ERROR, "[%{public}@] Item (%@) marked as shouldn't be clustered; this shouldn't have happened",
            buf,
            0x16u);

          v152 = v265;
        }

      }
      v183 = -[POIAnnotation initWithItem:defaultLocale:]([POIAnnotation alloc], "initWithItem:defaultLocale:", v155, *(_QWORD *)(*(_QWORD *)(v286 + 48) + 24));
      v184 = sub_100432BCC();
      v185 = objc_claimAutoreleasedReturnValue(v184);
      v186 = v185;
      if (!v183)
      {
        if (!os_log_type_enabled(v185, OS_LOG_TYPE_ERROR))
          goto LABEL_237;
        v196 = objc_loadWeakRetained(v152);
        v197 = v196;
        if (!v196)
        {
          v206 = CFSTR("<nil>");
          goto LABEL_236;
        }
        v198 = (objc_class *)objc_opt_class(v196);
        v199 = NSStringFromClass(v198);
        v200 = objc_claimAutoreleasedReturnValue(v199);
        if ((objc_opt_respondsToSelector(v197, v272) & 1) != 0)
        {
          v201 = v155;
          v202 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v197, "performSelector:", v272));
          v203 = v202;
          if (v202 && !objc_msgSend(v202, "isEqualToString:", v200))
          {
            v259 = (void *)v200;
            v206 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v200, v197, v203));

            v205 = v259;
            v155 = v201;
            v152 = v265;
            goto LABEL_224;
          }

          v155 = v201;
          v152 = v265;
        }
        v204 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v200, v197));
        v205 = (void *)v200;
        v206 = (__CFString *)v204;
LABEL_224:

LABEL_236:
        v213 = v206;
        v214 = *(_QWORD *)(*(_QWORD *)(v286 + 48) + 24);
        *(_DWORD *)buf = 138543874;
        v331 = v213;
        v332 = 2112;
        v333 = v155;
        v334 = 2112;
        v335 = v214;
        _os_log_impl((void *)&_mh_execute_header, v186, OS_LOG_TYPE_ERROR, "[%{public}@] Could not generate cluster POI for item: %@ with locale: %@", buf, 0x20u);

        goto LABEL_237;
      }
      if (os_log_type_enabled(v185, OS_LOG_TYPE_INFO))
      {
        v187 = objc_loadWeakRetained(v152);
        v188 = v187;
        if (v187)
        {
          v189 = (objc_class *)objc_opt_class(v187);
          v190 = NSStringFromClass(v189);
          v191 = objc_claimAutoreleasedReturnValue(v190);
          if ((objc_opt_respondsToSelector(v188, v272) & 1) == 0)
            goto LABEL_215;
          v258 = v155;
          v192 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v188, "performSelector:", v272));
          v193 = v192;
          if (v192 && !objc_msgSend(v192, "isEqualToString:", v191))
          {
            v194 = (void *)v191;
            v195 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v191, v188, v193));

            v155 = v258;
          }
          else
          {

            v155 = v258;
LABEL_215:
            v194 = (void *)v191;
            v195 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v191, v188));
          }

          v152 = v265;
        }
        else
        {
          v195 = CFSTR("<nil>");
        }

        v207 = v195;
        *(_DWORD *)buf = 138543618;
        v331 = v207;
        v332 = 2112;
        v333 = v183;
        _os_log_impl((void *)&_mh_execute_header, v186, OS_LOG_TYPE_INFO, "[%{public}@] Adding cluster POI: %@", buf, 0x16u);

      }
      objc_msgSend(v262, "addObject:", v183);
      v298 = 0u;
      v299 = 0u;
      v296 = 0u;
      v297 = 0u;
      v186 = objc_claimAutoreleasedReturnValue(-[POIAnnotation keys](v155, "keys"));
      v208 = -[NSObject countByEnumeratingWithState:objects:count:](v186, "countByEnumeratingWithState:objects:count:", &v296, v328, 16);
      if (v208)
      {
        v209 = v208;
        v210 = v152;
        v211 = *(_QWORD *)v297;
        do
        {
          for (m = 0; m != v209; m = (char *)m + 1)
          {
            if (*(_QWORD *)v297 != v211)
              objc_enumerationMutation(v186);
            objc_msgSend(v77, "setObject:forKeyedSubscript:", v183, *(_QWORD *)(*((_QWORD *)&v296 + 1) + 8 * (_QWORD)m));
          }
          v209 = -[NSObject countByEnumeratingWithState:objects:count:](v186, "countByEnumeratingWithState:objects:count:", &v296, v328, 16);
        }
        while (v209);
        v152 = v210;
      }
LABEL_237:

      if ((id)++v154 != v285)
        continue;
      break;
    }
    v215 = -[NSObject countByEnumeratingWithState:objects:count:](v263, "countByEnumeratingWithState:objects:count:", &v300, v329, 16);
    v1 = v286;
    v153 = &selRef__updateNavigationDisplayConfigurationForDisplayedStep_;
    v285 = v215;
    if (v215)
      continue;
    break;
  }
LABEL_244:

  v216 = *(id *)(v1 + 32);
  v217 = v216;
  if (v261 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v216))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v217, OS_SIGNPOST_INTERVAL_END, spid, "CreatePOIsForItemsCalculation", "", buf, 2u);
  }

  v218 = *(NSObject **)(v1 + 56);
  v219 = &_dispatch_main_q;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100BBA4BC;
  block[3] = &unk_1011E7FB0;
  v220 = *(_QWORD *)(v1 + 72);
  block[4] = *(_QWORD *)(v1 + 48);
  v294 = v220;
  v288 = v77;
  v289 = *(id *)(v1 + 40);
  objc_copyWeak(&v295, (id *)(v1 + 80));
  v290 = v280;
  v291 = v278;
  v292 = v268;
  v293 = v262;
  dispatch_group_notify(v218, (dispatch_queue_t)&_dispatch_main_q, block);

  objc_destroyWeak(&v295);
  v221 = v288;
LABEL_286:

LABEL_287:
}

void sub_100BBA4BC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  NSObject *v4;
  id v5;
  NSObject *v6;
  id v7;
  void *v8;
  objc_class *v9;
  NSString *v10;
  void *v11;
  void *v12;
  void *v13;
  __CFString *v14;
  id WeakRetained;
  id v16;
  NSObject *v17;
  id v18;
  void *v19;
  objc_class *v20;
  NSString *v21;
  void *v22;
  void *v23;
  void *v24;
  __CFString *v25;
  int v26;
  __CFString *v27;
  __CFString *v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  __CFString *v30;
  id v31;
  __CFString *v32;
  id v33;
  __CFString *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  _BYTE *v40;
  _BYTE *v41;
  id *v42;
  _QWORD *v43;
  char *v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  id v55;
  NSObject *v56;
  id v57;
  void *v58;
  objc_class *v59;
  NSString *v60;
  void *v61;
  void *v62;
  void *v63;
  __CFString *v64;
  void *v65;
  void *v66;
  id v67;
  NSObject *v68;
  id v69;
  void *v70;
  objc_class *v71;
  NSString *v72;
  void *v73;
  void *v74;
  void *v75;
  __CFString *v76;
  dispatch_time_t v77;
  uint64_t v78;
  id v79;
  void *v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  void *v85;
  unsigned int v86;
  id v87;
  id v88;
  id v89;
  id v90;
  NSObject *v91;
  id v92;
  void *v93;
  objc_class *v94;
  NSString *v95;
  void *v96;
  void *v97;
  void *v98;
  unsigned __int8 v99;
  __CFString *v100;
  id v101;
  NSObject *v102;
  id v103;
  void *v104;
  objc_class *v105;
  NSString *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  unsigned __int8 v111;
  __CFString *v112;
  id v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  BOOL v118;
  uint64_t v119;
  NSObject *v120;
  uint64_t v121;
  id v122;
  NSObject *v123;
  id v124;
  void *v125;
  objc_class *v126;
  NSString *v127;
  void *v128;
  void *v129;
  void *v130;
  __CFString *v131;
  id v132;
  id v133;
  uint64_t v134;
  void *i;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  void *v139;
  void *v140;
  void *v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  _QWORD v146[7];
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  _QWORD v151[5];
  _QWORD *v152;
  _QWORD v153[5];
  id v154;
  id v155;
  _QWORD block[5];
  id v157;
  id v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  char v164;
  uint8_t v165[128];
  uint8_t v166[4];
  __CFString *v167;
  uint8_t v168[128];
  _BYTE buf[24];
  uint64_t (*v170)(uint64_t, uint64_t);
  _BYTE v171[20];
  __int16 v172;
  void *v173;

  v161 = 0;
  v162 = &v161;
  v163 = 0x2020000000;
  v164 = 0;
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(a1 + 40);
  v4 = *(NSObject **)(v2 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100BBB554;
  block[3] = &unk_1011E7F88;
  v159 = *(_QWORD *)(a1 + 88);
  v160 = &v161;
  block[4] = v2;
  v157 = v3;
  v158 = *(id *)(a1 + 48);
  dispatch_sync(v4, block);
  if (!*((_BYTE *)v162 + 24))
  {
    WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 120));
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_selectedLabelMarker"));

    v141 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject featureAnnotation](v6, "featureAnnotation"));
    v16 = sub_100432BCC();
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      goto LABEL_22;
    v18 = objc_loadWeakRetained((id *)(a1 + 96));
    v19 = v18;
    if (!v18)
    {
      v25 = CFSTR("<nil>");
      goto LABEL_21;
    }
    v20 = (objc_class *)objc_opt_class(v18);
    v21 = NSStringFromClass(v20);
    v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
    if ((objc_opt_respondsToSelector(v19, "accessibilityIdentifier") & 1) != 0)
    {
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "performSelector:", "accessibilityIdentifier"));
      v24 = v23;
      if (v23 && (objc_msgSend(v23, "isEqualToString:", v22) & 1) == 0)
      {
        v25 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v22, v19, v24));

        goto LABEL_17;
      }

    }
    v25 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v22, v19));
LABEL_17:

LABEL_21:
    v27 = v25;
    v28 = sub_100BBB5D8(*(void **)(a1 + 56));
    v29 = (uint64_t (*)(uint64_t, uint64_t))(id)objc_claimAutoreleasedReturnValue(v28);
    v30 = sub_100BBB5D8(*(void **)(a1 + 64));
    v31 = (id)objc_claimAutoreleasedReturnValue(v30);
    v32 = sub_100BBB5D8(*(void **)(a1 + 72));
    v33 = (id)objc_claimAutoreleasedReturnValue(v32);
    v34 = sub_100BBB5D8(*(void **)(a1 + 80));
    v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
    *(_DWORD *)buf = 138544642;
    *(_QWORD *)&buf[4] = v27;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v141;
    *(_WORD *)&buf[22] = 2112;
    v170 = v29;
    *(_WORD *)v171 = 2112;
    *(_QWORD *)&v171[2] = v31;
    *(_WORD *)&v171[10] = 2112;
    *(_QWORD *)&v171[12] = v33;
    v172 = 2112;
    v173 = v35;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "[%{public}@] POI calculation complete:\nSelected: %@\nRemoving: %@\nRemoving Clusters: %@\nAdding: %@\nAdding Clusters: %@", buf, 0x3Eu);

LABEL_22:
    v36 = *(void **)(*(_QWORD *)(a1 + 32) + 32);
    v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "allObjects"));
    objc_msgSend(v36, "removeAnnotations:", v37);

    v38 = *(void **)(*(_QWORD *)(a1 + 32) + 32);
    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 72), "allObjects"));
    objc_msgSend(v38, "addAnnotations:", v39);

    v40 = objc_msgSend(*(id *)(a1 + 64), "count");
    v41 = objc_msgSend(*(id *)(a1 + 80), "count");
    v153[0] = _NSConcreteStackBlock;
    v153[1] = 3221225472;
    v153[2] = sub_100BBB61C;
    v153[3] = &unk_1011C1418;
    v153[4] = *(_QWORD *)(a1 + 32);
    v154 = *(id *)(a1 + 48);
    v42 = (id *)(a1 + 96);
    objc_copyWeak(&v155, (id *)(a1 + 96));
    v43 = objc_retainBlock(v153);
    if (v41)
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 56) = 0;
      v44 = (char *)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "annotationCount");
      v45 = objc_msgSend(*(id *)(a1 + 32), "allowSingleSearchResult");
      if (&v44[v41 - v40] == (char *)1)
        v46 = v45;
      else
        v46 = 1;
      if (v46)
        v47 = 1;
      else
        v47 = 2;
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "setSceneID:", v47);
      v48 = *(void **)(*(_QWORD *)(a1 + 32) + 40);
      v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "allObjects"));
      objc_msgSend(v48, "removeAnnotations:", v49);

      v50 = *(void **)(*(_QWORD *)(a1 + 32) + 40);
      v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 80), "allObjects"));
      objc_msgSend(v50, "addAnnotations:", v51);

      v52 = *(_QWORD *)(a1 + 32);
      v53 = *(void **)(v52 + 40);
      v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v52 + 48), "allObjects"));
      objc_msgSend(v53, "removeAnnotations:", v54);

      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "removeAllObjects");
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "showScene");
      v55 = sub_100432BCC();
      v56 = objc_claimAutoreleasedReturnValue(v55);
      if (!os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
        goto LABEL_48;
      v57 = objc_loadWeakRetained((id *)(a1 + 96));
      v58 = v57;
      if (!v57)
      {
        v64 = CFSTR("<nil>");
        goto LABEL_47;
      }
      v59 = (objc_class *)objc_opt_class(v57);
      v60 = NSStringFromClass(v59);
      v61 = (void *)objc_claimAutoreleasedReturnValue(v60);
      if ((objc_opt_respondsToSelector(v58, "accessibilityIdentifier") & 1) != 0)
      {
        v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "performSelector:", "accessibilityIdentifier"));
        v63 = v62;
        if (v62 && (objc_msgSend(v62, "isEqualToString:", v61) & 1) == 0)
        {
          v64 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v61, v58, v63));

          goto LABEL_36;
        }

      }
      v64 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v61, v58));
LABEL_36:

LABEL_47:
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v64;
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_INFO, "[%{public}@] Showing clustering features scene", buf, 0xCu);

LABEL_48:
      goto LABEL_54;
    }
    if (!v40)
    {
LABEL_54:
      ((void (*)(_QWORD *))v43[2])(v43);
      if (!v141 || (v78 = objc_opt_class(POIAnnotation), (objc_opt_isKindOfClass(v141, v78) & 1) == 0))
      {
LABEL_94:
        v114 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapView"));
        v115 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v114, "_mapLayer"));
        v116 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v115, "selectedLabelMarker"));
        if (v116)
        {

        }
        else
        {
          v117 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapView"));
          v118 = objc_msgSend(v117, "_applicationState") == 9;

          if (v118)
            goto LABEL_99;
          v114 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapView"));
          v115 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v114, "_mapLayer"));
          objc_msgSend(v115, "clearPreviouslySelectedLabelMarker");
        }

LABEL_99:
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x3032000000;
        v170 = sub_100BB7800;
        *(_QWORD *)v171 = sub_100BB7810;
        *(_QWORD *)&v171[8] = 0;
        v119 = *(_QWORD *)(a1 + 32);
        v120 = *(NSObject **)(v119 + 8);
        v146[0] = _NSConcreteStackBlock;
        v146[1] = 3221225472;
        v146[2] = sub_100BBB958;
        v146[3] = &unk_1011B8078;
        v121 = *(_QWORD *)(a1 + 88);
        v146[4] = v119;
        v146[5] = v121;
        v146[6] = buf;
        dispatch_sync(v120, v146);
        v122 = sub_100432BCC();
        v123 = objc_claimAutoreleasedReturnValue(v122);
        if (!os_log_type_enabled(v123, OS_LOG_TYPE_DEBUG))
        {
LABEL_109:

          v144 = 0u;
          v145 = 0u;
          v142 = 0u;
          v143 = 0u;
          v132 = *(id *)(*(_QWORD *)&buf[8] + 40);
          v133 = objc_msgSend(v132, "countByEnumeratingWithState:objects:count:", &v142, v165, 16);
          if (v133)
          {
            v134 = *(_QWORD *)v143;
            do
            {
              for (i = 0; i != v133; i = (char *)i + 1)
              {
                if (*(_QWORD *)v143 != v134)
                  objc_enumerationMutation(v132);
                (*(void (**)(void))(*(_QWORD *)(*((_QWORD *)&v142 + 1) + 8 * (_QWORD)i) + 16))();
              }
              v133 = objc_msgSend(v132, "countByEnumeratingWithState:objects:count:", &v142, v165, 16);
            }
            while (v133);
          }

          _Block_object_dispose(buf, 8);
          objc_destroyWeak(&v155);

          goto LABEL_117;
        }
        v124 = objc_loadWeakRetained(v42);
        v125 = v124;
        if (!v124)
        {
          v131 = CFSTR("<nil>");
          goto LABEL_108;
        }
        v126 = (objc_class *)objc_opt_class(v124);
        v127 = NSStringFromClass(v126);
        v128 = (void *)objc_claimAutoreleasedReturnValue(v127);
        if ((objc_opt_respondsToSelector(v125, "accessibilityIdentifier") & 1) != 0)
        {
          v129 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v125, "performSelector:", "accessibilityIdentifier"));
          v130 = v129;
          if (v129 && (objc_msgSend(v129, "isEqualToString:", v128) & 1) == 0)
          {
            v131 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v128, v125, v130));

            goto LABEL_106;
          }

        }
        v131 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v128, v125));
LABEL_106:

LABEL_108:
        *(_DWORD *)v166 = 138543362;
        v167 = v131;
        _os_log_impl((void *)&_mh_execute_header, v123, OS_LOG_TYPE_DEBUG, "[%{public}@] Update complete, calling post-update blocks", v166, 0xCu);

        goto LABEL_109;
      }
      v79 = v141;
      v147 = 0u;
      v148 = 0u;
      v149 = 0u;
      v150 = 0u;
      v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v79, "keys"));
      v81 = objc_msgSend(v80, "countByEnumeratingWithState:objects:count:", &v147, v168, 16);
      if (v81)
      {
        v82 = *(_QWORD *)v148;
LABEL_58:
        v83 = 0;
        while (1)
        {
          if (*(_QWORD *)v148 != v82)
            objc_enumerationMutation(v80);
          v84 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v147 + 1) + 8 * v83)));
          if (v84)
            break;
          if (v81 == (id)++v83)
          {
            v81 = objc_msgSend(v80, "countByEnumeratingWithState:objects:count:", &v147, v168, 16);
            if (v81)
              goto LABEL_58;
            goto LABEL_64;
          }
        }
      }
      else
      {
LABEL_64:
        v84 = 0;
      }

      v85 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activeInjectedAnnotation"));
      v86 = objc_msgSend(v79, "isEqual:", v85);

      if (v86)
      {
        v87 = v79;

        v84 = v87;
      }
      if (v84)
      {
        if ((objc_msgSend(v84, "isEqual:", v79) & 1) != 0)
        {
LABEL_93:

          goto LABEL_94;
        }
        v88 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 120));
        v89 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "_labelMarkerForCustomFeatureAnnotation:", v84));

        v90 = sub_100432BCC();
        v91 = objc_claimAutoreleasedReturnValue(v90);
        if (!os_log_type_enabled(v91, OS_LOG_TYPE_INFO))
          goto LABEL_91;
        v92 = objc_loadWeakRetained((id *)(a1 + 96));
        v93 = v92;
        if (!v92)
        {
          v100 = CFSTR("<nil>");
          goto LABEL_90;
        }
        v94 = (objc_class *)objc_opt_class(v92);
        v95 = NSStringFromClass(v94);
        v140 = (void *)objc_claimAutoreleasedReturnValue(v95);
        if ((objc_opt_respondsToSelector(v93, "accessibilityIdentifier") & 1) != 0)
        {
          v96 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v93, "performSelector:", "accessibilityIdentifier"));
          v97 = v96;
          if (v96)
          {
            v98 = v96;
            v99 = objc_msgSend(v96, "isEqualToString:", v140);
            v97 = v98;
            if ((v99 & 1) == 0)
            {
              v138 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v140, v93, v98));
              v139 = v98;
              v100 = (__CFString *)v138;

              goto LABEL_76;
            }
          }

        }
        v100 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v140, v93));
LABEL_76:

LABEL_90:
        *(_DWORD *)buf = 138543618;
        *(_QWORD *)&buf[4] = v100;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v89;
        _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_INFO, "[%{public}@] Selecting new label marker that matches existing selection %@", buf, 0x16u);

LABEL_91:
        v113 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 120));
        objc_msgSend(v113, "_selectLabelMarker:animated:", v89, 0);

        goto LABEL_92;
      }
      v101 = sub_100432BCC();
      v102 = objc_claimAutoreleasedReturnValue(v101);
      if (!os_log_type_enabled(v102, OS_LOG_TYPE_INFO))
      {
LABEL_88:

        v89 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 120));
        objc_msgSend(v89, "_deselectLabelMarkerAnimated:", 1);
LABEL_92:

        goto LABEL_93;
      }
      v103 = objc_loadWeakRetained((id *)(a1 + 96));
      v104 = v103;
      if (!v103)
      {
        v112 = CFSTR("<nil>");
        goto LABEL_87;
      }
      v105 = (objc_class *)objc_opt_class(v103);
      v106 = NSStringFromClass(v105);
      v107 = (void *)objc_claimAutoreleasedReturnValue(v106);
      if ((objc_opt_respondsToSelector(v104, "accessibilityIdentifier") & 1) != 0)
      {
        v108 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v104, "performSelector:", "accessibilityIdentifier"));
        v109 = v108;
        if (v108)
        {
          v110 = v108;
          v111 = objc_msgSend(v108, "isEqualToString:", v107);
          v109 = v110;
          if ((v111 & 1) == 0)
          {
            v136 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v107, v104, v110));
            v137 = v110;
            v112 = (__CFString *)v136;

            goto LABEL_84;
          }
        }

      }
      v112 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v107, v104));
LABEL_84:

LABEL_87:
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v112;
      _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_INFO, "[%{public}@] Deselecting label marker", buf, 0xCu);

      goto LABEL_88;
    }
    v65 = *(void **)(*(_QWORD *)(a1 + 32) + 40);
    v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 80), "allObjects"));
    objc_msgSend(v65, "addAnnotations:", v66);

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "unionHashTable:", *(_QWORD *)(a1 + 64));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "hideScene");
    v67 = sub_100432BCC();
    v68 = objc_claimAutoreleasedReturnValue(v67);
    if (!os_log_type_enabled(v68, OS_LOG_TYPE_INFO))
    {
LABEL_53:

      v77 = dispatch_time(0, 1000000000);
      v151[0] = _NSConcreteStackBlock;
      v151[1] = 3221225472;
      v151[2] = sub_100BBB8FC;
      v151[3] = &unk_1011AE240;
      v151[4] = *(_QWORD *)(a1 + 32);
      v152 = v43;
      dispatch_after(v77, (dispatch_queue_t)&_dispatch_main_q, v151);

      goto LABEL_54;
    }
    v69 = objc_loadWeakRetained((id *)(a1 + 96));
    v70 = v69;
    if (!v69)
    {
      v76 = CFSTR("<nil>");
      goto LABEL_52;
    }
    v71 = (objc_class *)objc_opt_class(v69);
    v72 = NSStringFromClass(v71);
    v73 = (void *)objc_claimAutoreleasedReturnValue(v72);
    if ((objc_opt_respondsToSelector(v70, "accessibilityIdentifier") & 1) != 0)
    {
      v74 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "performSelector:", "accessibilityIdentifier"));
      v75 = v74;
      if (v74 && (objc_msgSend(v74, "isEqualToString:", v73) & 1) == 0)
      {
        v76 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v73, v70, v75));

        goto LABEL_45;
      }

    }
    v76 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v73, v70));
LABEL_45:

LABEL_52:
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)&buf[4] = v76;
    _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_INFO, "[%{public}@] Hiding clustering features scene", buf, 0xCu);

    goto LABEL_53;
  }
  v5 = sub_100432BCC();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v7 = objc_loadWeakRetained((id *)(a1 + 96));
    v8 = v7;
    if (!v7)
    {
      v14 = CFSTR("<nil>");
      goto LABEL_19;
    }
    v9 = (objc_class *)objc_opt_class(v7);
    v10 = NSStringFromClass(v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    if ((objc_opt_respondsToSelector(v8, "accessibilityIdentifier") & 1) != 0)
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "performSelector:", "accessibilityIdentifier"));
      v13 = v12;
      if (v12 && (objc_msgSend(v12, "isEqualToString:", v11) & 1) == 0)
      {
        v14 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v11, v8, v13));

        goto LABEL_9;
      }

    }
    v14 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v11, v8));
LABEL_9:

LABEL_19:
    v26 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24);
    *(_DWORD *)buf = 138543618;
    *(_QWORD *)&buf[4] = v14;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v26;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "[%{public}@] Counter (%d) updated while updating label markers; aborting early",
      buf,
      0x12u);

  }
LABEL_117:

  _Block_object_dispose(&v161, 8);
}

void sub_100BBB4C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id *location, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  objc_destroyWeak(location);
  _Block_object_dispose(&a61, 8);
  _Unwind_Resume(a1);
}

void sub_100BBB554(uint64_t a1)
{
  int v2;
  unsigned int *v3;
  unsigned int v4;
  id v5;
  uint64_t v6;
  void *v7;

  v2 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
  v3 = (unsigned int *)(*(_QWORD *)(a1 + 32) + 72);
  do
    v4 = __ldxr(v3);
  while (__stxr(v4, v3));
  if (v2 == v4)
  {
    v5 = objc_msgSend(*(id *)(a1 + 40), "copy");
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(void **)(v6 + 80);
    *(_QWORD *)(v6 + 80) = v5;

    objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 64), *(id *)(a1 + 48));
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
  }
}

__CFString *sub_100BBB5D8(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  __CFString *v3;

  v1 = a1;
  if (-[__CFString count](v1, "count"))
    v2 = v1;
  else
    v2 = CFSTR("none");
  v3 = v2;

  return v3;
}

void sub_100BBB61C(id *a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  id v11;
  NSObject *v12;
  id v13;
  void *v14;
  objc_class *v15;
  NSString *v16;
  void *v17;
  void *v18;
  void *v19;
  __CFString *v20;
  id WeakRetained;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint8_t buf[4];
  __CFString *v27;
  __int16 v28;
  uint64_t v29;
  _BYTE v30[128];

  v2 = (uint64_t)objc_msgSend(a1[4], "_preferredDisplayedSearchResultTypeWithItems:", a1[5]);
  if (!v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)a1[4] + 5), "allAnnotations"));
    v4 = objc_msgSend(v3, "count");
    if (v4 == (id)1)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "firstObject"));
      if (objc_msgSend(v10, "isLabelPOI"))
      {
        v2 = 2 * (*((_BYTE *)a1[4] + 56) == 0);
      }
      else if (objc_msgSend(v10, "isVenueOrBuilding"))
      {
        v2 = 3;
      }
      else
      {
        v2 = 4;
      }

    }
    else if (v4)
    {
LABEL_16:
      v2 = 1;
    }
    else
    {
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v5 = a1[5];
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
      if (v6)
      {
        v7 = v6;
        v8 = *(_QWORD *)v23;
        while (2)
        {
          for (i = 0; i != v7; i = (char *)i + 1)
          {
            if (*(_QWORD *)v23 != v8)
              objc_enumerationMutation(v5);
            if ((objc_msgSend(*(id *)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)i), "wantsDisplayedSearchResultsTypePoints") & 1) != 0)
            {

              goto LABEL_16;
            }
          }
          v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
          if (v7)
            continue;
          break;
        }
      }

      v2 = 0;
    }

  }
  v11 = sub_100432BCC();
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    v13 = objc_loadWeakRetained(a1 + 6);
    v14 = v13;
    if (!v13)
    {
      v20 = CFSTR("<nil>");
      goto LABEL_31;
    }
    v15 = (objc_class *)objc_opt_class(v13);
    v16 = NSStringFromClass(v15);
    v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    if ((objc_opt_respondsToSelector(v14, "accessibilityIdentifier") & 1) != 0)
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "performSelector:", "accessibilityIdentifier"));
      v19 = v18;
      if (v18 && !objc_msgSend(v18, "isEqualToString:", v17))
      {
        v20 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v17, v14, v19));

        goto LABEL_29;
      }

    }
    v20 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v17, v14));
LABEL_29:

LABEL_31:
    *(_DWORD *)buf = 138543618;
    v27 = v20;
    v28 = 2048;
    v29 = v2;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "[%{public}@] Setting map view search results type: %ld", buf, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)a1[4] + 15);
  objc_msgSend(WeakRetained, "_setDisplayedSearchResultsType:", v2);

}

uint64_t sub_100BBB8FC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 40);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 48), "allObjects"));
  objc_msgSend(v3, "removeAnnotations:", v4);

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "removeAllObjects");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

_QWORD *sub_100BBB958(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  id v3;
  uint64_t v4;
  void *v5;

  v1 = result[4];
  if (*(_DWORD *)(*(_QWORD *)(result[5] + 8) + 24) == *(_DWORD *)(v1 + 72))
  {
    v2 = result;
    v3 = objc_msgSend(*(id *)(v1 + 88), "copy");
    v4 = *(_QWORD *)(v2[6] + 8);
    v5 = *(void **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = v3;

    result = objc_msgSend(*(id *)(v2[4] + 88), "removeAllObjects");
    *(_BYTE *)(v2[4] + 76) = 0;
  }
  return result;
}

void sub_100BBBFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100BBBFE0(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 96));
}

void sub_100BBC070(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 96), *(id *)(a1 + 40));
}

void sub_100BBD20C(id a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  _QWORD v7[4];
  _QWORD v8[4];
  _QWORD v9[55];
  _QWORD v10[55];
  _QWORD v11[3];
  _QWORD v12[3];
  _QWORD v13[3];
  _QWORD v14[3];
  _QWORD v15[6];
  _QWORD v16[6];

  v15[0] = &off_101270B58;
  v15[1] = &off_101270B70;
  v16[0] = CFSTR("NotSet");
  v16[1] = CFSTR("km");
  v15[2] = &off_101270B88;
  v15[3] = &off_101270BA0;
  v16[2] = CFSTR("miles");
  v16[3] = CFSTR("m");
  v15[4] = &off_101270BB8;
  v15[5] = &off_101270BD0;
  v16[4] = CFSTR("yards");
  v16[5] = CFSTR("ft");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v16, v15, 6));
  v13[0] = &off_101270B58;
  v13[1] = &off_101270B70;
  v14[0] = CFSTR("NotSet");
  v14[1] = CFSTR("Right");
  v13[2] = &off_101270B88;
  v14[2] = CFSTR("Left");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v14, v13, 3));
  v11[0] = &off_101270B58;
  v11[1] = &off_101270B70;
  v12[0] = CFSTR("NotSet");
  v12[1] = CFSTR("Normal");
  v11[2] = &off_101270B88;
  v12[2] = CFSTR("Roundabout");
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v12, v11, 3));
  v9[0] = &off_101270B58;
  v9[1] = &off_101270B70;
  v10[0] = CFSTR("NotSet");
  v10[1] = CFSTR("NO_TURN");
  v9[2] = &off_101270B88;
  v9[3] = &off_101270BA0;
  v10[2] = CFSTR("LEFT_TURN");
  v10[3] = CFSTR("RIGHT_TURN");
  v9[4] = &off_101270BB8;
  v9[5] = &off_101270BD0;
  v10[4] = CFSTR("STRAIGHT_AHEAD");
  v10[5] = CFSTR("U_TURN");
  v9[6] = &off_101270BE8;
  v9[7] = &off_101270C00;
  v10[6] = CFSTR("FOLLOW_ROAD");
  v10[7] = CFSTR("ENTER_ROUNDABOUT");
  v9[8] = &off_101270C18;
  v9[9] = &off_101270C30;
  v10[8] = CFSTR("EXIT_ROUNDABOUT");
  v10[9] = CFSTR("OFF_RAMP");
  v9[10] = &off_101270C48;
  v9[11] = &off_101270C60;
  v10[10] = CFSTR("ON_RAMP");
  v10[11] = CFSTR("ARRIVE_END_OF_NAVIGATION");
  v9[12] = &off_101270C78;
  v9[13] = &off_101270C90;
  v10[12] = CFSTR("START_ROUTE");
  v10[13] = CFSTR("ARRIVE_AT_DESTINATION");
  v9[14] = &off_101270CA8;
  v9[15] = &off_101270CC0;
  v10[14] = CFSTR("KEEP_LEFT");
  v10[15] = CFSTR("KEEP_RIGHT");
  v9[16] = &off_101270CD8;
  v9[17] = &off_101270CF0;
  v10[16] = CFSTR("ENTER_FERRY");
  v10[17] = CFSTR("EXIT_FERRY");
  v9[18] = &off_101270D08;
  v9[19] = &off_101270D20;
  v10[18] = CFSTR("CHANGE_FERRY");
  v10[19] = CFSTR("START_ROUTE_WITH_U_TURN");
  v9[20] = &off_101270D38;
  v9[21] = &off_101270D50;
  v10[20] = CFSTR("U_TURN_AT_ROUNDABOUT");
  v10[21] = CFSTR("LEFT_TURN_AT_END");
  v9[22] = &off_101270D68;
  v9[23] = &off_101270D80;
  v10[22] = CFSTR("RIGHT_TURN_AT_END");
  v10[23] = CFSTR("HIGHWAY_OFF_RAMP_LEFT");
  v9[24] = &off_101270D98;
  v9[25] = &off_101270DB0;
  v10[24] = CFSTR("HIGHWAY_OFF_RAMP_RIGHT");
  v10[25] = CFSTR("ARRIVE_AT_DESTINATION_LEFT");
  v9[26] = &off_101270DC8;
  v9[27] = &off_101270DE0;
  v10[26] = CFSTR("ARRIVE_AT_DESTINATION_RIGHT");
  v10[27] = CFSTR("U_TURN_WHEN_POSSIBLE");
  v9[28] = &off_101270DF8;
  v9[29] = &off_101270E10;
  v10[28] = CFSTR("ARRIVE_END_OF_DIRECTIONS");
  v10[29] = CFSTR("ROUNDABOUT_EXIT_1");
  v9[30] = &off_101270E28;
  v9[31] = &off_101270E40;
  v10[30] = CFSTR("ROUNDABOUT_EXIT_2");
  v10[31] = CFSTR("ROUNDABOUT_EXIT_3");
  v9[32] = &off_101270E58;
  v9[33] = &off_101270E70;
  v10[32] = CFSTR("ROUNDABOUT_EXIT_4");
  v10[33] = CFSTR("ROUNDABOUT_EXIT_5");
  v9[34] = &off_101270E88;
  v9[35] = &off_101270EA0;
  v10[34] = CFSTR("ROUNDABOUT_EXIT_6");
  v10[35] = CFSTR("ROUNDABOUT_EXIT_7");
  v9[36] = &off_101270EB8;
  v9[37] = &off_101270ED0;
  v10[36] = CFSTR("ROUNDABOUT_EXIT_8");
  v10[37] = CFSTR("ROUNDABOUT_EXIT_9");
  v9[38] = &off_101270EE8;
  v9[39] = &off_101270F00;
  v10[38] = CFSTR("ROUNDABOUT_EXIT_10");
  v10[39] = CFSTR("ROUNDABOUT_EXIT_11");
  v9[40] = &off_101270F18;
  v9[41] = &off_101270F30;
  v10[40] = CFSTR("ROUNDABOUT_EXIT_12");
  v10[41] = CFSTR("ROUNDABOUT_EXIT_13");
  v9[42] = &off_101270F48;
  v9[43] = &off_101270F60;
  v10[42] = CFSTR("ROUNDABOUT_EXIT_14");
  v10[43] = CFSTR("ROUNDABOUT_EXIT_15");
  v9[44] = &off_101270F78;
  v9[45] = &off_101270F90;
  v10[44] = CFSTR("ROUNDABOUT_EXIT_16");
  v10[45] = CFSTR("ROUNDABOUT_EXIT_17");
  v9[46] = &off_101270FA8;
  v9[47] = &off_101270FC0;
  v10[46] = CFSTR("ROUNDABOUT_EXIT_18");
  v10[47] = CFSTR("ROUNDABOUT_EXIT_19");
  v9[48] = &off_101270FD8;
  v9[49] = &off_101270FF0;
  v10[48] = CFSTR("SHARP_LEFT_TURN");
  v10[49] = CFSTR("SHARP_RIGHT_TURN");
  v9[50] = &off_101271008;
  v9[51] = &off_101271020;
  v10[50] = CFSTR("SLIGHT_LEFT_TURN");
  v10[51] = CFSTR("SLIGHT_RIGHT_TURN");
  v9[52] = &off_101271038;
  v9[53] = &off_101271050;
  v10[52] = CFSTR("CHANGE_HIGHWAY");
  v10[53] = CFSTR("CHANGE_HIGHWAY_LEFT");
  v9[54] = &off_101271068;
  v10[54] = CFSTR("CHANGE_HIGHWAY_RIGHT");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v10, v9, 55));
  v7[0] = CFSTR("maneuverType");
  v7[1] = CFSTR("distanceBetweenManeuverDisplayUnits");
  v8[0] = v3;
  v8[1] = v6;
  v7[2] = CFSTR("drivingSide");
  v7[3] = CFSTR("junctionType");
  v8[2] = v1;
  v8[3] = v2;
  v4 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v8, v7, 4));
  v5 = (void *)qword_1014D4318;
  qword_1014D4318 = v4;

}

void sub_100BBD8DC(id a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v3[14];
  _QWORD v4[14];

  v3[0] = &off_101271080;
  v3[1] = &off_101271098;
  v4[0] = CFSTR("navigationRouteGuidanceDisplayComponentID");
  v4[1] = CFSTR("index");
  v3[2] = &off_1012710B0;
  v3[3] = &off_1012710C8;
  v4[2] = CFSTR("maneuverDescription");
  v4[3] = CFSTR("maneuverType");
  v3[4] = &off_1012710E0;
  v3[5] = &off_1012710F8;
  v4[4] = CFSTR("afterManeuverRoadName");
  v4[5] = CFSTR("distanceBetweenManeuver");
  v3[6] = &off_101271110;
  v3[7] = &off_101271128;
  v4[6] = CFSTR("distanceBetweenManeuverDisplayString");
  v4[7] = CFSTR("distanceBetweenManeuverDisplayUnits");
  v3[8] = &off_101271140;
  v3[9] = &off_101271158;
  v4[8] = CFSTR("drivingSide");
  v4[9] = CFSTR("junctionType");
  v3[10] = &off_101271170;
  v3[11] = &off_101271188;
  v4[10] = CFSTR("junctionElementAngle");
  v4[11] = CFSTR("junctionElementExitAngle");
  v3[12] = &off_1012711A0;
  v3[13] = &off_1012711B8;
  v4[12] = CFSTR("linkedLaneGuidanceInfo");
  v4[13] = CFSTR("exitInfo");
  v1 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 14));
  v2 = (void *)qword_1014D4328;
  qword_1014D4328 = v1;

}

void sub_100BBEFF4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100BBF010(uint64_t a1, void *a2)
{
  id WeakRetained;
  double v4;
  double v5;
  id v6;
  double v7;
  double v8;
  id v9;
  double v10;
  double v11;
  id v12;
  id v13;

  v13 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    LODWORD(v4) = 0;
    LODWORD(v5) = 20.0;
    v6 = objc_msgSend(v13, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Masking Texture alpha factor"), CFSTR("factor:  %1.1f"), &stru_1011E8040, &stru_1011E8060, v4, v5);
    LODWORD(v7) = 1008981770;
    LODWORD(v8) = 0.5;
    v9 = objc_msgSend(v13, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Mask corner radius to shorter edge ratio"), CFSTR("ratio:  %1.2f"), &stru_1011E8080, &stru_1011E80A0, v7, v8);
    LODWORD(v10) = 1041865114;
    LODWORD(v11) = 0;
    v12 = objc_msgSend(v13, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Mask corner radius zoom based bias step"), CFSTR("ratio:  %1.2f"), &stru_1011E80C0, &stru_1011E80E0, v11, v10);
  }

}

float sub_100BBF104(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "maskingOverlayOpacityFactor");
  v3 = v2;

  return v3;
}

void sub_100BBF148(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setMaskingOverlayOpacityFactor:", v3);

}

float sub_100BBF18C(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "maskingOverlayRadiusEdgeRatio");
  v3 = v2;

  return v3;
}

void sub_100BBF1D0(id a1, float a2)
{
  void *v3;
  double v4;
  id v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v4 = a2;
  objc_msgSend(v3, "setMaskingOverlayRadiusEdgeRatio:", v4);

  v5 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v5, "postNotificationName:object:", VKShouldFlushTileCachesNotification, 0);

}

float sub_100BBF248(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "maskingOverlayRadiusZoomCorrectionStep");
  v3 = v2;

  return v3;
}

void sub_100BBF28C(id a1, float a2)
{
  void *v3;
  double v4;
  id v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v4 = a2;
  objc_msgSend(v3, "setMaskingOverlayRadiusZoomCorrectionStep:", v4);

  v5 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v5, "postNotificationName:object:", VKShouldFlushTileCachesNotification, 0);

}

void sub_100BBF460(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100BBF480(uint64_t a1, char a2, char a3, void *a4)
{
  id v7;
  id WeakRetained;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  char v14;
  char v15;

  v7 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100BBF540;
  v11[3] = &unk_1011E8108;
  v9 = *(id *)(a1 + 32);
  v14 = a2;
  v15 = a3;
  v12 = v7;
  v13 = v9;
  v10 = v7;
  objc_msgSend(WeakRetained, "dismissViewControllerAnimated:completion:", 1, v11);

}

uint64_t sub_100BBF540(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(result + 16))(result, *(unsigned __int8 *)(a1 + 48), *(unsigned __int8 *)(a1 + 49), *(_QWORD *)(a1 + 32));
  return result;
}

uint64_t sub_100BC2894(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 152);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(result + 16))(result, 0, 1, *(_QWORD *)(a1 + 40));
  return result;
}

uint64_t sub_100BC29F8(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 32) + 152);
  if (v1)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v1 + 16))(*(_QWORD *)(*(_QWORD *)(result + 32) + 152), 1, 1, *(_QWORD *)(result + 40));
  return result;
}

void sub_100BC31F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100BC3218(uint64_t a1)
{
  id WeakRetained;
  id v3;
  NSObject *v4;
  id v5;
  NSObject *v6;
  void *v7;
  id v8;
  NSObject *v9;
  id v10;
  NSObject *v11;
  void *v12;
  id v13;
  id v14;
  NSObject *v15;
  uint8_t v16[16];
  uint8_t v17[16];
  uint8_t v18[16];
  uint8_t v19[16];
  uint8_t buf[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = sub_100431A4C();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_signpost_enabled(v4))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "LoadMapsForScene", "", buf, 2u);
    }

    if (*(_BYTE *)(a1 + 40))
    {
      v5 = sub_100431A4C();
      v6 = objc_claimAutoreleasedReturnValue(v5);
      if (os_signpost_enabled(v6))
      {
        *(_WORD *)v19 = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "PlatformControllerReplaySessions", "", v19, 2u);
      }

      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "platformController"));
      objc_msgSend(v7, "replaySessions");

      v8 = sub_100431A4C();
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_signpost_enabled(v9))
      {
        *(_WORD *)v18 = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "PlatformControllerReplaySessions", "", v18, 2u);
      }

      v10 = sub_100431A4C();
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_signpost_enabled(v11))
      {
        *(_WORD *)v17 = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "CarPlayNavigation", "", v17, 2u);
      }

      v12 = (void *)objc_claimAutoreleasedReturnValue(+[CarDisplayController sharedInstance](CarDisplayController, "sharedInstance"));
      v13 = objc_msgSend(v12, "isAnyCarSceneHostingDrivingNavigation");

      objc_msgSend(WeakRetained, "updateDirectionsListVisibility:", v13);
      v14 = sub_100431A4C();
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_signpost_enabled(v15))
      {
        *(_WORD *)v16 = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "CarPlayNavigation", "", v16, 2u);
      }

    }
  }

}

void sub_100BC3988(id a1)
{
  +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 19, 0, 0);
}

void sub_100BC3C04(id a1)
{
  +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 20, 0, 0);
}

void sub_100BC3DE4(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[MKLocationManager sharedLocationManager](MKLocationManager, "sharedLocationManager"));
  objc_msgSend(v1, "isLocationServicesAvailable");

}

void sub_100BC4F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  id *v25;
  id *v26;
  uint64_t v27;

  objc_destroyWeak(v26);
  _Block_object_dispose((const void *)(v27 - 160), 8);
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100BC500C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "presentMapsDebugControllerIfEnabled");
}

void sub_100BC5014(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v7 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (v7 && WeakRetained)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "data"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "entryPointsCoordinator"));
    objc_msgSend(v5, "openNotificationData:forType:recordIdentifier:", v4, CFSTR("MapsPushNotificationTypeAnnouncement"), 0);

    v6 = (void *)objc_claimAutoreleasedReturnValue(+[MSPMapsPushDaemonRemoteProxy sharedInstance](MSPMapsPushDaemonRemoteProxy, "sharedInstance"));
    objc_msgSend(v6, "clearCurrentAnnouncement");

  }
}

uint64_t sub_100BC50C0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100BC50D0(uint64_t a1)
{

}

void sub_100BC50D8(uint64_t a1, char a2)
{
  _QWORD v2[5];
  char v3;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100BC5138;
  v2[3] = &unk_1011E81B8;
  v3 = a2;
  v2[4] = *(_QWORD *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v2);
}

void sub_100BC5138(uint64_t a1)
{
  int v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v2 = *(unsigned __int8 *)(a1 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(void **)(v3 + 40);
  if (v2)
  {
    if (!v4)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[LoadingIndicatorController sharedController](LoadingIndicatorController, "sharedController"));
      v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "beginShowingLoadingIndicator"));
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v7 = *(void **)(v6 + 40);
      *(_QWORD *)(v6 + 40) = v5;

    }
  }
  else if (v4)
  {
    *(_QWORD *)(v3 + 40) = 0;

  }
}

void sub_100BC51C4(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v3 = a2;
  if (v3)
  {
    v10 = v3;
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v3 = v10;
    if (WeakRetained)
    {
      v5 = WeakRetained;
      if (objc_msgSend(v10, "hasFloorOrdinal"))
        v6 = (uint64_t)objc_msgSend(v10, "floorOrdinal");
      else
        v6 = 0x7FFFFFFFLL;
      objc_msgSend(v10, "coordinate");
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[SearchResult customSearchResultWithCoordinate:floorOrdinal:](SearchResult, "customSearchResultWithCoordinate:floorOrdinal:", v6));
      objc_msgSend(v10, "timestamp");
      objc_msgSend(v7, "setTimestamp:");
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[CustomSearchManager sharedManager](CustomSearchManager, "sharedManager"));
      objc_msgSend(v8, "setCustomSearchResult:animated:shouldSelectOnMap:", v7, 0, 0);

      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "searchPinsManager"));
      objc_msgSend(v9, "setDroppedPin:animated:shouldSelect:", v7, 0, 0);

      v3 = v10;
    }
  }

}

void sub_100BC5410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100BC5424(id a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;

  v1 = objc_alloc_init((Class)MapsSuggestionsDonater);
  v2 = (void *)qword_1014D4338;
  qword_1014D4338 = (uint64_t)v1;

  v3 = objc_alloc_init((Class)MapsSuggestionsMutableSignalPack);
  v4 = (void *)qword_1014D4340;
  qword_1014D4340 = (uint64_t)v3;

}

void sub_100BC5514(uint64_t a1)
{
  MapsRadarDraft *v2;
  void *v3;
  id v4;
  NSObject *v5;
  id v6;
  void *v7;
  objc_class *v8;
  NSString *v9;
  void *v10;
  void *v11;
  void *v12;
  __CFString *v13;
  void *v14;
  void *v15;
  uint8_t buf[4];
  __CFString *v17;

  v2 = objc_opt_new(MapsRadarDraft);
  -[MapsRadarDraft setTitle:](v2, "setTitle:", CFSTR("geod Crashed"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MapsRadarComponent mapsGeoServicesComponent](MapsRadarComponent, "mapsGeoServicesComponent"));
  -[MapsRadarDraft setComponent:](v2, "setComponent:", v3);

  -[MapsRadarDraft setClassification:](v2, "setClassification:", 2);
  v4 = sub_100431A4C();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(id *)(a1 + 32);
    v7 = v6;
    if (!v6)
    {
      v13 = CFSTR("<nil>");
      goto LABEL_10;
    }
    v8 = (objc_class *)objc_opt_class(v6);
    v9 = NSStringFromClass(v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    if ((objc_opt_respondsToSelector(v7, "accessibilityIdentifier") & 1) != 0)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "performSelector:", "accessibilityIdentifier"));
      v12 = v11;
      if (v11 && !objc_msgSend(v11, "isEqualToString:", v10))
      {
        v13 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v10, v7, v12));

        goto LABEL_8;
      }

    }
    v13 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v10, v7));
LABEL_8:

LABEL_10:
    *(_DWORD *)buf = 138543362;
    v17 = v13;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[%{public}@] Launching TTR for geod crash", buf, 0xCu);

  }
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[MapsRadarController sharedInstance](MapsRadarController, "sharedInstance"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chromeViewController"));
  objc_msgSend(v14, "launchTTRWithRadar:promptTitle:fromViewController:", v2, CFSTR("The Geo Daemon appears to have crashed. Please file a Radar with a recent sysdiagnose and what you were doing at the time."), v15);

}

void sub_100BC57E8(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  MapsRadarDraft *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  id v12;
  void *v13;
  objc_class *v14;
  NSString *v15;
  void *v16;
  void *v17;
  void *v18;
  __CFString *v19;
  void *v20;
  void *v21;
  id v22;
  uint8_t buf[4];
  __CFString *v24;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "object"));
  v22 = 0;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", v2, 1, &v22));
  v4 = v22;

  v5 = objc_opt_new(MapsRadarDraft);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("VectorKit Fault")));
  -[MapsRadarDraft setTitle:](v5, "setTitle:", v6);

  if (v4)
    v7 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Failed to serialize payload - %@"), v4));
  else
    v7 = objc_msgSend(objc_alloc((Class)NSString), "initWithData:encoding:", v3, 4);
  v8 = v7;
  -[MapsRadarDraft setDescriptionText:](v5, "setDescriptionText:", v7);

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[MapsRadarComponent mapsMapDisplayComponent](MapsRadarComponent, "mapsMapDisplayComponent"));
  -[MapsRadarDraft setComponent:](v5, "setComponent:", v9);

  -[MapsRadarDraft setClassification:](v5, "setClassification:", 6);
  v10 = sub_100431A4C();
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *(id *)(a1 + 40);
    v13 = v12;
    if (!v12)
    {
      v19 = CFSTR("<nil>");
      goto LABEL_13;
    }
    v14 = (objc_class *)objc_opt_class(v12);
    v15 = NSStringFromClass(v14);
    v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    if ((objc_opt_respondsToSelector(v13, "accessibilityIdentifier") & 1) != 0)
    {
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "performSelector:", "accessibilityIdentifier"));
      v18 = v17;
      if (v17 && !objc_msgSend(v17, "isEqualToString:", v16))
      {
        v19 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v16, v13, v18));

        goto LABEL_11;
      }

    }
    v19 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v16, v13));
LABEL_11:

LABEL_13:
    *(_DWORD *)buf = 138543362;
    v24 = v19;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[%{public}@] Launching TTR for VectorKit crash", buf, 0xCu);

  }
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[MapsRadarController sharedInstance](MapsRadarController, "sharedInstance"));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "chromeViewController"));
  objc_msgSend(v20, "launchTTRWithRadar:promptTitle:fromViewController:", v5, CFSTR("VectorKit appears to encounter a serious error. Please file a Radar with a recent sysdiagnose and what you were doing at the time."), v21);

}

void sub_100BC5E88(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  id v5;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "window"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "windowScene"));
  objc_msgSend(v4, "setTitle:", v3);

}

void sub_100BC710C(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  NSObject *v8;
  NSObject *v9;
  _QWORD block[8];
  id v11;
  _QWORD v12[5];
  NSObject *v13;
  id v14;
  _QWORD *v15;
  _QWORD *v16;
  id v17;
  id location;
  _QWORD v19[5];
  id v20;
  _QWORD v21[4];
  NSObject *v22;
  _QWORD *v23;
  _QWORD v24[3];
  char v25;
  _QWORD v26[5];
  id v27;

  v2 = dispatch_group_create();
  dispatch_group_enter(v2);
  v26[0] = 0;
  v26[1] = v26;
  v26[2] = 0x3032000000;
  v26[3] = sub_100BC737C;
  v26[4] = sub_100BC738C;
  v27 = 0;
  v24[0] = 0;
  v24[1] = v24;
  v24[2] = 0x2020000000;
  v25 = 0;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_100BC7394;
  v21[3] = &unk_1011B8360;
  v23 = v26;
  v3 = v2;
  v22 = v3;
  v4 = objc_retainBlock(v21);
  v19[0] = 0;
  v19[1] = v19;
  v19[2] = 0x3032000000;
  v19[3] = sub_100BC737C;
  v19[4] = sub_100BC738C;
  v20 = 0;
  objc_initWeak(&location, *(id *)(a1 + 32));
  v5 = *(void **)(a1 + 32);
  v6 = *(unsigned __int8 *)(a1 + 40);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100BC7468;
  v12[3] = &unk_1011E8228;
  v7 = v4;
  v14 = v7;
  objc_copyWeak(&v17, &location);
  v12[4] = *(_QWORD *)(a1 + 32);
  v15 = v19;
  v16 = v24;
  v8 = v3;
  v13 = v8;
  objc_msgSend(v5, "_downloadManifestWithForce:completion:", v6, v12);
  v9 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100BC7C7C;
  block[3] = &unk_1011E8250;
  objc_copyWeak(&v11, &location);
  block[4] = *(_QWORD *)(a1 + 32);
  block[5] = v26;
  block[6] = v19;
  block[7] = v24;
  dispatch_group_notify(v8, v9, block);
  objc_destroyWeak(&v11);

  objc_destroyWeak(&v17);
  objc_destroyWeak(&location);
  _Block_object_dispose(v19, 8);

  _Block_object_dispose(v24, 8);
  _Block_object_dispose(v26, 8);

}

void sub_100BC733C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id location,char a30)
{
  id *v30;
  uint64_t v31;

  objc_destroyWeak(v30);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v31 - 184), 8);
  _Block_object_dispose((const void *)(v31 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100BC737C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100BC738C(uint64_t a1)
{

}

void sub_100BC7394(uint64_t a1, void *a2)
{
  id v4;
  id v5;
  NSObject *v6;
  int v7;
  id v8;

  v4 = a2;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v5 = sub_10043292C();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    v7 = 138412290;
    v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Download Web Bundle Error: %@", (uint8_t *)&v7, 0xCu);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100BC7468(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  id *WeakRetained;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  NSObject *v18;
  void *v19;
  id v20;
  NSObject *v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  unsigned __int8 v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;
  NSObject *v42;
  void *v43;
  void *v44;
  void *v45;
  id v46;
  void *v47;
  id v48;
  NSObject *v49;
  void *v50;
  unsigned int v51;
  unsigned int v52;
  void *v53;
  id v54;
  id v55;
  id v56;
  id v57;
  uint64_t v58;
  void *i;
  void *v60;
  void *v61;
  void *v62;
  id v63;
  id v64;
  id v65;
  id obj;
  unsigned int v67;
  void *v68;
  id *v69;
  void *v70;
  void *v72;
  void *v73;
  _QWORD v74[4];
  id v75;
  id v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  id v85;
  uint8_t v86[128];
  uint8_t buf[4];
  _BYTE v88[10];
  _BYTE v89[128];

  v5 = a2;
  v6 = v5;
  if (a3)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    goto LABEL_49;
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "version"));

  if (!v7)
  {
    v20 = sub_10043292C();
    v21 = objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Manifest version is nil", buf, 2u);
    }

    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.Maps.ReportAProblem.Downloader"), -5, 0));
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

    goto LABEL_49;
  }
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 72));
  if (!WeakRetained)
    goto LABEL_48;
  v9 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "version"));
  v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "directoryForNewWebBundleName:", v10));

  v11 = sub_10043292C();
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "version"));
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)v88 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Version Downloading: %@", buf, 0xCu);

  }
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a2);
  v14 = *(void **)(a1 + 32);
  v85 = 0;
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "loadWebBundleManifestWithError:", &v85));
  v16 = v85;
  v17 = sub_10043292C();
  v18 = objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "version"));
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)v88 = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Version Installed: %@", buf, 0xCu);

  }
  if (v16)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    goto LABEL_47;
  }
  v69 = WeakRetained;
  v62 = 0;
  v64 = objc_alloc_init((Class)NSMutableSet);
  v63 = objc_alloc_init((Class)NSMutableSet);
  v81 = 0u;
  v82 = 0u;
  v83 = 0u;
  v84 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "files"));
  v23 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v81, v89, 16);
  if (!v23)
    goto LABEL_34;
  v24 = v23;
  v25 = *(_QWORD *)v82;
  do
  {
    v26 = 0;
    v65 = v24;
    do
    {
      v27 = v15;
      v28 = v6;
      if (*(_QWORD *)v82 != v25)
        objc_enumerationMutation(obj);
      v29 = *(void **)(*((_QWORD *)&v81 + 1) + 8 * (_QWORD)v26);
      v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v69[1], "webBundleDirectory", v62));
      v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "filePath"));
      v32 = objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "URLByAppendingPathComponent:", v31));

      v72 = (void *)v32;
      v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_fileHashForFile:", v32));
      v70 = v29;
      v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "fileHash"));
      v35 = objc_msgSend(v33, "isEqualToString:", v34);

      v6 = v28;
      v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "version"));
      v15 = v27;
      v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "version"));
      if (!objc_msgSend(v36, "isEqualToString:", v37))
      {

        if ((v35 & 1) != 0)
        {
LABEL_24:
          v41 = sub_10043292C();
          v42 = objc_claimAutoreleasedReturnValue(v41);
          if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
          {
            v43 = v70;
            v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "filePath"));
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)v88 = v44;
            _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "Queue file to move: %@", buf, 0xCu);

            v45 = v63;
LABEL_31:

            objc_msgSend(v45, "addObject:", v43);
            goto LABEL_32;
          }
          v45 = v63;
        }
        else
        {
LABEL_26:
          v46 = sub_10043292C();
          v42 = objc_claimAutoreleasedReturnValue(v46);
          if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
          {
            v43 = v70;
            v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "filePath"));
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)v88 = v47;
            _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "Queue file to download: %@", buf, 0xCu);

            v45 = v64;
            goto LABEL_31;
          }
          v45 = v64;
        }
        v43 = v70;
        goto LABEL_31;
      }
      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v69[1], "webBundleDirectory"));
      v39 = v6;
      v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v69[1], "absoluteCachedWebBundleDirectory"));
      v67 = objc_msgSend(v38, "isEqual:", v40);

      v6 = v39;
      v24 = v65;

      if ((v35 & 1) == 0)
        goto LABEL_26;
      if (v67)
        goto LABEL_24;
LABEL_32:

      v26 = (char *)v26 + 1;
    }
    while (v24 != v26);
    v24 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v81, v89, 16);
  }
  while (v24);
LABEL_34:

  v48 = sub_10043292C();
  v49 = objc_claimAutoreleasedReturnValue(v48);
  v50 = v63;
  if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
  {
    v51 = objc_msgSend(v64, "count");
    v52 = objc_msgSend(v63, "count");
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)v88 = v51;
    *(_WORD *)&v88[4] = 1024;
    *(_DWORD *)&v88[6] = v52;
    _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_INFO, "Files to download: %d, files to move: %d", buf, 0xEu);
  }

  WeakRetained = v69;
  if (objc_msgSend(v63, "count") || objc_msgSend(v64, "count"))
  {
    v73 = v6;
    v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "webBundleDirectory", v62));
    v54 = +[WebBundleFileHelper copyToDirectory:fromDirectory:files:](WebBundleFileHelper, "copyToDirectory:fromDirectory:files:", v68, v53, v63);
    objc_msgSend(v64, "addObjectsFromArray:", v54);

    v79 = 0u;
    v80 = 0u;
    v77 = 0u;
    v78 = 0u;
    v55 = v64;
    v56 = objc_msgSend(v55, "countByEnumeratingWithState:objects:count:", &v77, v86, 16);
    if (v56)
    {
      v57 = v56;
      v58 = *(_QWORD *)v78;
      do
      {
        for (i = 0; i != v57; i = (char *)i + 1)
        {
          if (*(_QWORD *)v78 != v58)
            objc_enumerationMutation(v55);
          v60 = *(void **)(*((_QWORD *)&v77 + 1) + 8 * (_QWORD)i);
          dispatch_group_enter(*(dispatch_group_t *)(a1 + 40));
          v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "filePath"));
          v74[0] = _NSConcreteStackBlock;
          v74[1] = 3221225472;
          v74[2] = sub_100BC7C64;
          v74[3] = &unk_1011B8118;
          v76 = *(id *)(a1 + 48);
          v75 = *(id *)(a1 + 40);
          objc_msgSend(v69, "_downloadWebBundleFileWithPath:inDirectory:withCompletion:", v61, v68, v74);

        }
        v57 = objc_msgSend(v55, "countByEnumeratingWithState:objects:count:", &v77, v86, 16);
      }
      while (v57);
    }

    v6 = v73;
    v50 = v63;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

  v16 = v62;
LABEL_47:

LABEL_48:
LABEL_49:

}

void sub_100BC7C64(uint64_t a1, uint64_t a2)
{
  if (a2)
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  else
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100BC7C7C(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  unsigned int v9;
  id v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  uint8_t buf[4];
  id v27;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
    {
      objc_msgSend(WeakRetained, "_downloadCompleteWithNewDirectory:withError:", 0);
      goto LABEL_17;
    }
    v4 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "version"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "directoryForNewWebBundleName:", v5));

    v7 = *(void **)(a1 + 32);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "files"));
    v25 = 0;
    v9 = objc_msgSend(v7, "_fileHashesInFiles:areEqualToFilesInDirectory:error:", v8, v6, &v25);
    v10 = v25;

    if (v9)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
      {
        objc_msgSend(v3, "_downloadCompleteWithNewDirectory:withError:", 0, v10);
LABEL_16:

        goto LABEL_17;
      }
      v21 = *(void **)(a1 + 32);
      v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      v24 = 0;
      objc_msgSend(v21, "_saveWebBundleManifestToDevice:error:", v22, &v24);
      v15 = v24;
      v18 = v3;
      v19 = v6;
      v20 = v15;
    }
    else
    {
      v11 = sub_10043292C();
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "absoluteURL"));
        *(_DWORD *)buf = 138412290;
        v27 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Hashes didn't match, removing files in directory: %@", buf, 0xCu);

      }
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
      v23 = 0;
      objc_msgSend(v14, "removeItemAtURL:error:", v6, &v23);
      v15 = v23;

      if (v15)
      {
        v16 = sub_10043292C();
        v17 = objc_claimAutoreleasedReturnValue(v16);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v27 = v15;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Fail to remove files, error: %@", buf, 0xCu);
        }

      }
      v18 = v3;
      v19 = 0;
      v20 = v10;
    }
    objc_msgSend(v18, "_downloadCompleteWithNewDirectory:withError:", v19, v20);

    goto LABEL_16;
  }
LABEL_17:

}

void sub_100BC80AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100BC80E4(uint64_t a1, void *a2)
{
  id v3;
  id *WeakRetained;
  void *v5;
  void *v6;
  id v7;

  v3 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "filename"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[1], "manifestSignedResourceName"));
    v7 = objc_msgSend(v5, "isEqualToString:", v6);

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_100BC8174(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id *WeakRetained;
  void *v6;
  void *v7;
  _QWORD v8[4];
  id v9;

  v4 = a3;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (v4)
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    }
    else
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[GEOResourceManager sharedManager](GEOResourceManager, "sharedManager"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[1], "manifestSignedResourceName"));
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_100BC8268;
      v8[3] = &unk_1011E82A0;
      v9 = *(id *)(a1 + 32);
      objc_msgSend(v6, "dataForSignedResourceWithName:fallbackBundle:fallbackNameHandler:resultHandler:", v7, 0, 0, v8);

    }
  }

}

id sub_100BC8268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
    return (id)(*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  else
    return +[WebBundleFileHelper parseManifestFileFromData:withCompletion:](WebBundleFileHelper, "parseManifestFileFromData:withCompletion:", a2, *(_QWORD *)(a1 + 32));
}

void sub_100BC8418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100BC8440(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  id WeakRetained;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  id v15;

  v6 = a2;
  v7 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    if (v7 && (v9 = *(_QWORD *)(a1 + 56)) != 0)
    {
      (*(void (**)(uint64_t, id))(v9 + 16))(v9, v7);
    }
    else
    {
      v10 = *(void **)(a1 + 32);
      v11 = *(_QWORD *)(a1 + 40);
      v12 = *(_QWORD *)(a1 + 48);
      v15 = 0;
      objc_msgSend(v10, "_saveFileData:toDirectory:toFilePath:error:", v6, v11, v12, &v15);
      v13 = v15;
      v14 = *(_QWORD *)(a1 + 56);
      if (v14)
        (*(void (**)(uint64_t, id))(v14 + 16))(v14, v13);

    }
  }

}

void sub_100BC9274(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  NSObject *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  id v20;
  NSObject *v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  NSObject *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  uint8_t buf[4];
  id v37;
  __int16 v38;
  void *v39;
  __int16 v40;
  void *v41;
  __int16 v42;
  void *v43;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_loadCachedWebBundleVersion"));
  v5 = sub_10043292C();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "version"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "version"));
    *(_DWORD *)buf = 138413058;
    v37 = v3;
    v38 = 2112;
    v39 = v7;
    v40 = 2112;
    v41 = v4;
    v42 = 2112;
    v43 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "buildInManifest: %@, builtInVersion: %@, cachedVersion: %@, downloadedManifest Version:%@", buf, 0x2Au);

  }
  v9 = *(void **)(a1 + 40);
  if (!v9)
    goto LABEL_9;
  v10 = *(void **)(a1 + 32);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "version"));
  LODWORD(v10) = objc_msgSend(v10, "_isVersion:newerThan:", v11, v4);

  if (!(_DWORD)v10)
    goto LABEL_9;
  v12 = *(void **)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  v35 = 0;
  objc_msgSend(v12, "_updateCachedBundleFromDownloadedBundleDirectoryWithManifest:error:", v13, &v35);
  v14 = v35;
  v15 = sub_10043292C();
  v16 = objc_claimAutoreleasedReturnValue(v15);
  v17 = v16;
  if (v14)
  {
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v37 = v14;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Fail to update cached bundle from downloaded bundle, error: %@", buf, 0xCu);
    }

LABEL_9:
    if (v3)
    {
      v18 = *(void **)(a1 + 32);
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "version"));
      LODWORD(v18) = objc_msgSend(v18, "_isVersion:newerThan:", v19, v4);

      if ((_DWORD)v18)
      {
        v20 = sub_10043292C();
        v21 = objc_claimAutoreleasedReturnValue(v20);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "version"));
          *(_DWORD *)buf = 138412290;
          v37 = v22;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Updating cached bundle from built-in directory, version: %@", buf, 0xCu);

        }
        v23 = *(void **)(a1 + 32);
        v34 = 0;
        objc_msgSend(v23, "_updateCachedBundleFromBuiltInDirectoryWithManifest:error:", v3, &v34);
        v24 = v34;
        v25 = sub_10043292C();
        v26 = objc_claimAutoreleasedReturnValue(v25);
        v27 = v26;
        if (v24)
        {
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v37 = v24;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "Fail to update cached bundle from built-in directory: %@", buf, 0xCu);
          }
        }
        else
        {
          if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
          {
            v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "version"));
            *(_DWORD *)buf = 138412290;
            v37 = v31;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "Successfully update cached bundle from built-in directory, version: %@", buf, 0xCu);

          }
          v32 = *(void **)(a1 + 32);
          v27 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "version"));
          objc_msgSend(v32, "_updateCachedWebBundleVersion:", v27);
        }

      }
    }
    v33 = sub_10043292C();
    v30 = objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "Finish Updating Web Bundle", buf, 2u);
    }
    goto LABEL_25;
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "version"));
    *(_DWORD *)buf = 138412290;
    v37 = v28;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Successfully update cached bundle from downloaded bundle, version: %@", buf, 0xCu);

  }
  v29 = *(void **)(a1 + 32);
  v30 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "version"));
  objc_msgSend(v29, "_updateCachedWebBundleVersion:", v30);
LABEL_25:

}

DirectionsWaypoint *sub_100BCA378(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  DirectionsWaypoint *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;

  v3 = a1;
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "legs"));
  v6 = objc_msgSend(v5, "count");

  if ((unint64_t)v6 >= 2)
  {
    v8 = objc_msgSend(v4, "legIndexForStepIndex:", objc_msgSend(v3, "stepIndex"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "legs"));
    if (v8 >= objc_msgSend(v9, "count"))
    {
      v11 = 0;
      v7 = 0;
    }
    else
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "legs"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectAtIndexedSubscript:", v8));

      if (!v11
        || (v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "legs")),
            v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "lastObject")),
            v13,
            v12,
            v11 == v13)
        || (v14 = objc_msgSend(v11, "endStepIndex"), v14 != objc_msgSend(v3, "stepIndex")))
      {
        v7 = 0;
        goto LABEL_11;
      }
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "destination"));
      v7 = objc_opt_new(DirectionsWaypoint);
      -[DirectionsWaypoint updateFromGEOComposedWaypoint:](v7, "updateFromGEOComposedWaypoint:", v9);
    }

LABEL_11:
    goto LABEL_12;
  }
  v7 = 0;
LABEL_12:

  return v7;
}

void sub_100BCB5FC(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  unsigned int v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v12 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexPath:"));
  v4 = v3;
  if (v3)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "mapItem"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "_geoMapItem"));
    v7 = objc_msgSend(v6, "_hasEVCharger");

    if (v7)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "placeSummaryTemplateForSearchResult:indexPath:", v4, v12));
      if (v8)
      {
        v9 = *(void **)(*(_QWORD *)(a1 + 32) + 216);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "mapItem"));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "_identifier"));
        objc_msgSend(v9, "setObject:forKeyedSubscript:", v8, v11);

      }
    }
  }

}

void sub_100BCCB84(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "viewController:selectMapItem:address:addToHistory:source:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), 0, 1, 4);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapCameraController"));
  objc_msgSend(v2, "frameMapItem:animated:completion:", *(_QWORD *)(a1 + 48), 1, 0);

}

uint64_t sub_100BCCBE4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100BCDA78(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 32) + 25);
  return result;
}

void sub_100BCDB30(uint64_t a1)
{
  id *v2;
  unsigned __int8 *WeakRetained;
  void *v4;
  int v5;
  id v6;
  NSObject *v7;
  __CFString *v8;
  __CFString *v9;
  NSObject *v10;
  _QWORD v11[4];
  id v12;
  char v13;
  uint8_t buf[4];
  __CFString *v15;

  v2 = (id *)(a1 + 40);
  WeakRetained = (unsigned __int8 *)objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = *(unsigned __int8 *)(a1 + 48);
    if (v5 != WeakRetained[25])
    {
      WeakRetained[25] = v5;
      v6 = sub_1004321BC();
      v7 = objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 25))
          v8 = CFSTR("YES");
        else
          v8 = CFSTR("NO");
        v9 = v8;
        *(_DWORD *)buf = 138412290;
        v15 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Did update availability of EV routing to %@.", buf, 0xCu);

      }
      v10 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 16);
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_100BCDC9C;
      v11[3] = &unk_1011AD388;
      objc_copyWeak(&v12, v2);
      v13 = *(_BYTE *)(a1 + 48);
      dispatch_async(v10, v11);
      objc_destroyWeak(&v12);
    }
  }

}

void sub_100BCDC9C(uint64_t a1)
{
  id *WeakRetained;
  id v3;
  id *v4;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v3 = objc_loadWeakRetained(WeakRetained + 4);
    objc_msgSend(v3, "source:didUpdateAvailability:", v4, *(unsigned __int8 *)(a1 + 40));

    WeakRetained = v4;
  }

}

void sub_100BCDD90(uint64_t a1)
{
  _QWORD *WeakRetained;
  uint64_t v3;
  _QWORD *v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = *(_QWORD *)(a1 + 40);
    if (v3 != WeakRetained[7])
    {
      WeakRetained[7] = v3;
      v4 = WeakRetained;
      objc_msgSend(WeakRetained, "_reloadAvailability");
      WeakRetained = v4;
    }
  }

}

void sub_100BCE2AC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v1);
  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v4 - 112));
  _Unwind_Resume(a1);
}

void sub_100BCE2E0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_didSelectModel");

}

void sub_100BCE30C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_didViewModel");

}

void sub_100BCE338(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_dismiss");

}

void sub_100BCE598(uint64_t a1)
{
  _BYTE *WeakRetained;
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = sub_1004321BC();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "User dismissed EV suggestion.", v4, 2u);
    }

    WeakRetained[24] = 1;
    objc_msgSend(WeakRetained, "_reloadAvailability");
  }

}

void sub_100BCE6E0(uint64_t a1)
{
  _QWORD block[4];
  id v2;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100BCE76C;
  block[3] = &unk_1011AD260;
  objc_copyWeak(&v2, (id *)(a1 + 32));
  if (qword_1014D4348 != -1)
    dispatch_once(&qword_1014D4348, block);
  objc_destroyWeak(&v2);
}

void sub_100BCE76C(uint64_t a1)
{
  id WeakRetained;
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = sub_1004321BC();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "User viewed EV suggestion.", v4, 2u);
    }

    objc_msgSend(WeakRetained, "_markCurrentVehicleCombinationAsViewed");
  }

}

void sub_100BCE8A4(uint64_t a1)
{
  id WeakRetained;
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  uint8_t v8[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    if (objc_msgSend(*((id *)WeakRetained + 6), "count"))
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedMapsDelegate](UIApplication, "sharedMapsDelegate"));
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "appCoordinator"));
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "baseActionCoordinator"));

      objc_msgSend(v5, "presentVehicleOnboardingWithVehicles:completion:", v2[6], 0);
    }
    else
    {
      v6 = sub_1004321BC();
      v7 = objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v8 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "User selected EV routing feature source, but there were no unpaired vehicles.", v8, 2u);
      }

    }
  }

}

void sub_100BCEB40(uint64_t a1)
{
  id *WeakRetained;
  uint64_t v2;
  id *v3;
  int IsEnabled_EVRouting;
  int v5;
  int v6;
  id v7;
  unsigned int v8;
  int v9;
  int v10;
  id v11;
  NSObject *v12;
  __CFString *v13;
  __CFString *v14;
  __CFString *v15;
  __CFString *v16;
  __CFString *v17;
  __CFString *v18;
  __CFString *v19;
  __CFString *v20;
  __CFString *v21;
  __CFString *v22;
  __CFString *v23;
  __CFString *v24;
  int v25;
  __CFString *v26;
  __int16 v27;
  __CFString *v28;
  __int16 v29;
  __CFString *v30;
  __int16 v31;
  __CFString *v32;
  __int16 v33;
  __CFString *v34;
  __int16 v35;
  __CFString *v36;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    IsEnabled_EVRouting = MapsFeature_IsEnabled_EVRouting(WeakRetained, v2);
    v5 = IsEVRoutingSupported();
    v6 = *((unsigned __int8 *)v3 + 24);
    v7 = objc_msgSend(v3[6], "count");
    if (v7)
      v8 = objc_msgSend(v3, "_shouldShowVehicleCombination:", v3[6]);
    else
      v8 = 0;
    v9 = IsEnabled_EVRouting & v5;
    if (v6)
      v9 = 0;
    v10 = v9 & v8;
    objc_msgSend(v3, "setAvailable:", v9 & v8);
    v11 = sub_1004321BC();
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      if (v10)
        v13 = CFSTR("YES");
      else
        v13 = CFSTR("NO");
      v14 = v13;
      if (IsEnabled_EVRouting)
        v15 = CFSTR("YES");
      else
        v15 = CFSTR("NO");
      v16 = v15;
      if (v5)
        v17 = CFSTR("YES");
      else
        v17 = CFSTR("NO");
      v18 = v17;
      if (v6)
        v19 = CFSTR("YES");
      else
        v19 = CFSTR("NO");
      v20 = v19;
      if (v7)
        v21 = CFSTR("YES");
      else
        v21 = CFSTR("NO");
      v22 = v21;
      if (v8)
        v23 = CFSTR("YES");
      else
        v23 = CFSTR("NO");
      v24 = v23;
      v25 = 138413570;
      v26 = v14;
      v27 = 2112;
      v28 = v16;
      v29 = 2112;
      v30 = v18;
      v31 = 2112;
      v32 = v20;
      v33 = 2112;
      v34 = v22;
      v35 = 2112;
      v36 = v24;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "_reloadAvailability EVRoutingFeatureDiscoverySource isAvailable: %@\n, featureEnabled: %@, currentCountrySupportsEVRouting: %@, wasDismissed: %@, hasUnpairedVehicles: %@, belowMaximumViewCount: %@", (uint8_t *)&v25, 0x3Eu);

    }
  }

}

void sub_100BCEDBC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100BCEDE0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id *v7;
  NSObject **WeakRetained;
  NSObject **v9;
  NSObject *v10;
  id v11;
  NSObject *v12;
  _QWORD v13[4];
  id v14;
  id v15;
  uint8_t buf[4];
  id v17;

  v5 = a2;
  v6 = a3;
  v7 = (id *)(a1 + 32);
  WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 32));
  v9 = WeakRetained;
  if (WeakRetained)
  {
    if (!v5 || v6)
    {
      v11 = sub_1004321BC();
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v17 = v6;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Failed to get unpaired apps from garage with error: %@", buf, 0xCu);
      }

    }
    else
    {
      v10 = WeakRetained[1];
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_100BCEF38;
      v13[3] = &unk_1011AD1E8;
      objc_copyWeak(&v15, v7);
      v14 = v5;
      dispatch_async(v10, v13);

      objc_destroyWeak(&v15);
    }
  }

}

void sub_100BCEF38(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "setUnpairedVehicles:", *(_QWORD *)(a1 + 32));
    WeakRetained = v3;
  }

}

void sub_100BCF030(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "setUnpairedVehicles:", *(_QWORD *)(a1 + 32));
    WeakRetained = v3;
  }

}

NSString *__cdecl sub_100BCF0FC(id a1, VGVehicle *a2, unint64_t a3)
{
  VGVehicle *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  const __CFString *v7;
  uint64_t v8;
  void *v9;
  const __CFString *v10;
  uint64_t v11;
  void *v12;
  const __CFString *v13;
  uint64_t v14;
  void *v15;
  const __CFString *v16;
  __CFString *v17;
  const __CFString *v18;
  id v19;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString string](NSMutableString, "string"));
  v5 = objc_claimAutoreleasedReturnValue(-[VGVehicle pairedAppIdentifier](v3, "pairedAppIdentifier"));
  v6 = (void *)v5;
  if (v5)
    v7 = (const __CFString *)v5;
  else
    v7 = &stru_1011EB268;
  objc_msgSend(v4, "appendString:", v7);

  v8 = objc_claimAutoreleasedReturnValue(-[VGVehicle displayName](v3, "displayName"));
  v9 = (void *)v8;
  if (v8)
    v10 = (const __CFString *)v8;
  else
    v10 = &stru_1011EB268;
  objc_msgSend(v4, "appendString:", v10);

  v11 = objc_claimAutoreleasedReturnValue(-[VGVehicle year](v3, "year"));
  v12 = (void *)v11;
  if (v11)
    v13 = (const __CFString *)v11;
  else
    v13 = &stru_1011EB268;
  objc_msgSend(v4, "appendString:", v13);

  v14 = objc_claimAutoreleasedReturnValue(-[VGVehicle model](v3, "model"));
  v15 = (void *)v14;
  if (v14)
    v16 = (const __CFString *)v14;
  else
    v16 = &stru_1011EB268;
  objc_msgSend(v4, "appendString:", v16);

  v17 = (__CFString *)objc_claimAutoreleasedReturnValue(-[VGVehicle manufacturer](v3, "manufacturer"));
  if (v17)
    v18 = v17;
  else
    v18 = &stru_1011EB268;
  objc_msgSend(v4, "appendString:", v18);

  v19 = objc_msgSend(v4, "copy");
  return (NSString *)v19;
}

int64_t sub_100BCF210(id a1, NSString *a2, NSString *a3)
{
  return -[NSString compare:](a2, "compare:", a3);
}

void sub_100BCFD3C(uint64_t a1)
{
  id v1;
  uint64_t v2;
  void *v3;

  v1 = objc_msgSend(*(id *)(a1 + 32), "registrationWithCellClass:configurationHandler:", objc_opt_class(RelatedSearchSuggestionOutlineCell), &stru_1011E8370);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)qword_1014D4350;
  qword_1014D4350 = v2;

}

void sub_100BCFD88(id a1, RelatedSearchSuggestionOutlineCell *a2, NSIndexPath *a3, MapsUIDiffableDataSourceOutlineNodeSnapshot *a4)
{
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  RelatedSearchSuggestionOutlineCell *v9;

  v9 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[MapsUIDiffableDataSourceOutlineNodeSnapshot viewModel](a4, "viewModel"));
  v6 = objc_opt_class(RelatedSearchSuggestionOutlineCellModel);
  if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0)
    v7 = v5;
  else
    v7 = 0;
  v8 = v7;

  -[RelatedSearchSuggestionOutlineCell setCellModel:](v9, "setCellModel:", v8);
}

void sub_100BD0B08(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "textLabel"));
  objc_msgSend(v2, "setText:", v1);

}

id sub_100BD0FF8()
{
  if (qword_1014D4368 != -1)
    dispatch_once(&qword_1014D4368, &stru_1011E8390);
  return (id)qword_1014D4360;
}

void sub_100BD1BC8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VIOSessionDailyUsageEntry");
  v2 = (void *)qword_1014D4360;
  qword_1014D4360 = (uint64_t)v1;

}

void sub_100BD24C8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  id v13;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = sub_100431A4C();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v12 = 138412290;
      v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "ForwardGeocodeAction resolveMapItem: %@", (uint8_t *)&v12, 0xCu);
    }

    v9 = *(id *)(a1 + 32);
  }
  else
  {
    v9 = *(id *)(a1 + 32);
    if (objc_msgSend(v5, "count"))
    {
      v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));

      v9 = (id)v10;
    }
  }
  v11 = *(_QWORD *)(a1 + 40);
  if (v11)
    (*(void (**)(uint64_t, id))(v11 + 16))(v11, v9);

}

