id sub_1000080AC()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  unint64_t v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  double v13;
  double v14;
  double v15;
  id v16;
  id v18;
  id v19[2];
  __int128 v20;
  _QWORD v21[4];

  v1 = *(void **)(v0 + OBJC_IVAR____TtC4Maps27FindMyHandleWaypointRequest_cachedLoadResult);
  if (!v1)
    goto LABEL_11;
  v2 = v1;
  if (!objc_msgSend(v2, "isSuccess"))
    goto LABEL_9;
  v3 = objc_msgSend(v2, "value");
  if (v3)
  {
    v4 = v3;
    _bridgeAnyObjectToAny(_:)(v19);
    swift_unknownObjectRelease(v4);
  }
  else
  {
    *(_OWORD *)v19 = 0u;
    v20 = 0u;
  }
  sub_10000C138((uint64_t)v19, (uint64_t)v21);
  if (v21[3])
  {
    v5 = sub_10000C1C0();
    if ((swift_dynamicCast(&v18, v21, (char *)&type metadata for Any + 8, v5, 6) & 1) != 0)
    {
      v6 = v18;
      v7 = objc_msgSend(v18, "copy");
      _bridgeAnyObjectToAny(_:)(v21);
      swift_unknownObjectRelease(v7);
      swift_dynamicCast(v19, v21, (char *)&type metadata for Any + 8, v5, 7);
      v8 = v19[0];
      objc_msgSend(v19[0], "clearFindMyData");
      v9 = objc_msgSend(v8, "geoMapItem");
      v10 = objc_msgSend(objc_allocWithZone((Class)MKMapItem), "initWithGeoMapItem:isPlaceHolderPlace:", v9, 0);

      swift_unknownObjectRelease(v9);
      return v10;
    }
LABEL_9:

    goto LABEL_11;
  }

  sub_10000C180((uint64_t)v21);
LABEL_11:
  v11 = *(void **)(v0 + OBJC_IVAR____TtC4Maps27FindMyHandleWaypointRequest_location);
  if (!v11)
    return 0;
  v12 = v11;
  objc_msgSend(v12, "coordinate");
  v14 = v13;
  objc_msgSend(v12, "coordinate");
  v16 = objc_msgSend(objc_allocWithZone((Class)CLLocation), "initWithLatitude:longitude:", v14, v15);
  v10 = objc_msgSend(objc_allocWithZone((Class)MKMapItem), "initWithCLLocation:", v16);

  return v10;
}

uint64_t sub_1000082F8(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char *v16;
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v2 = v1;
  ObjectType = swift_getObjectType(v1);
  v5 = type metadata accessor for Handle(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = ((uint64_t (*)(void))__chkstk_darwin)();
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v20 - v10;
  if (objc_msgSend(a1, "isKindOfClass:", swift_getObjCClassFromMetadata(ObjectType)))
  {
    v12 = swift_dynamicCastClassUnconditional(a1, ObjectType, 0, 0, 0);
    v13 = *(_QWORD *)(v2 + OBJC_IVAR____TtC4Maps27FindMyHandleWaypointRequest_handle);
    v14 = *(char **)(v12 + OBJC_IVAR____TtC4Maps27FindMyHandleWaypointRequest_handle);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v15(v11, v13 + OBJC_IVAR____TtC4Maps16MapsFindMyHandle_handle, v5);
    v15(v9, (uint64_t)&v14[OBJC_IVAR____TtC4Maps16MapsFindMyHandle_handle], v5);
    swift_unknownObjectRetain(a1);
    v16 = v14;
    v17 = static Handle.== infix(_:_:)(v11, v9);
    v18 = *(void (**)(char *, uint64_t))(v6 + 8);
    v18(v9, v5);
    v18(v11, v5);
    swift_unknownObjectRelease(a1);

  }
  else
  {
    v17 = 0;
  }
  return v17 & 1;
}

void sub_1000084B8(void *a1, uint64_t a2, void (*a3)(id))
{
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  char v12;
  id v13;
  uint64_t Strong;
  void *v15;
  void *v16;
  id v17;
  id MyHandleWaypointRequest;
  void *v19;
  _QWORD v20[3];
  _BYTE v21[8];
  _QWORD v22[3];
  _BYTE v23[8];
  _BYTE v24[24];

  v5 = a2 + 16;
  v6 = objc_msgSend(a1, "error");
  if (!v6)
    goto LABEL_11;
  v7 = v6;
  swift_getErrorValue(v6, v23, v22);
  v8 = sub_10000863C(v22[1], v22[2]);
  v10 = v9;
  if (v8 == qword_101498DD0 && v9 == off_101498DD8)
  {
    swift_bridgeObjectRelease(v9);
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, qword_101498DD0, off_101498DD8, 0);
    swift_bridgeObjectRelease(v10);
    if ((v12 & 1) == 0)
      goto LABEL_10;
  }
  swift_getErrorValue(v7, v21, v20);
  if (sub_10000875C(v20[1], v20[2]))
  {
LABEL_10:

LABEL_11:
    v13 = a1;
    goto LABEL_12;
  }
  MyHandleWaypointRequest = FindMyHandleWaypointRequestError.NSError.getter();
  v19 = (void *)_convertErrorToNSError(_:)(MyHandleWaypointRequest);
  v13 = objc_msgSend((id)objc_opt_self(Result), "resultWithError:", v19);

LABEL_12:
  swift_beginAccess(v5, v24, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    v15 = (void *)Strong;
    v16 = *(void **)(Strong + OBJC_IVAR____TtC4Maps27FindMyHandleWaypointRequest_cachedLoadResult);
    *(_QWORD *)(Strong + OBJC_IVAR____TtC4Maps27FindMyHandleWaypointRequest_cachedLoadResult) = v13;
    v17 = v13;

  }
  a3(v13);

}

uint64_t sub_10000863C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v15;

  v4 = *(_QWORD *)(a1 - 8);
  __chkstk_darwin(a1);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, a1);
  v8 = _getErrorEmbeddedNSError<A>(_:)(v6, a1, a2);
  if (v8)
  {
    v9 = v8;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a1);
  }
  else
  {
    v9 = swift_allocError(a1, a2, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v10, v6, a1);
  }
  v11 = (void *)_convertErrorToNSError(_:)(v9);
  swift_errorRelease(v9);
  v12 = objc_msgSend(v11, "domain");

  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  return v13;
}

id sub_10000875C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v14;

  v4 = *(_QWORD *)(a1 - 8);
  __chkstk_darwin(a1);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, a1);
  v8 = _getErrorEmbeddedNSError<A>(_:)(v6, a1, a2);
  if (v8)
  {
    v9 = v8;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a1);
  }
  else
  {
    v9 = swift_allocError(a1, a2, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v10, v6, a1);
  }
  v11 = (void *)_convertErrorToNSError(_:)(v9);
  swift_errorRelease(v9);
  v12 = objc_msgSend(v11, "code");

  return v12;
}

id FindMyHandleWaypointRequestError.NSError.getter()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  unint64_t v18;
  id v19;
  NSString v20;
  Class isa;
  id v22;
  _BYTE v24[80];
  Swift::String v25;

  v0 = sub_100008AC0();
  v1 = _getErrorEmbeddedNSError<A>(_:)(v0, &type metadata for FindMyHandleWaypointRequestError, v0);
  if (!v1)
    v1 = swift_allocError(&type metadata for FindMyHandleWaypointRequestError, v0, 0, 0);
  v2 = v1;
  v3 = (void *)_convertErrorToNSError(_:)(v1);
  swift_errorRelease(v2);
  v4 = objc_msgSend(v3, "domain");

  static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v6 = v5;

  v8 = _getErrorEmbeddedNSError<A>(_:)(v7, &type metadata for FindMyHandleWaypointRequestError, v0);
  if (!v8)
    v8 = swift_allocError(&type metadata for FindMyHandleWaypointRequestError, v0, 0, 0);
  v9 = v8;
  v10 = (void *)_convertErrorToNSError(_:)(v8);
  swift_errorRelease(v9);
  v11 = objc_msgSend(v10, "code");

  v12 = sub_100008B04(&qword_10149BAF0);
  inited = swift_initStackObject(v12, v24);
  *(_OWORD *)(inited + 16) = xmmword_100E22F40;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  *(_QWORD *)(inited + 40) = v14;
  if (qword_101490ED0 != -1)
    swift_once(&qword_101490ED0, sub_10011833C);
  v25._countAndFlagsBits = 0xD000000000000031;
  v25._object = (void *)0x8000000100E40080;
  v15._object = (void *)0x8000000100E40000;
  v16._object = (void *)0x8000000100E40030;
  v15._countAndFlagsBits = 0xD000000000000022;
  v16._countAndFlagsBits = 0x1000000000000049;
  v17 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, (Swift::String_optional)0, (NSBundle)qword_1014D4B80, v16, v25);
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(Swift::String *)(inited + 48) = v17;
  v18 = sub_100009624(inited);
  v19 = objc_allocWithZone((Class)NSError);
  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v18);
  v22 = objc_msgSend(v19, "initWithDomain:code:userInfo:", v20, v11, isa);

  return v22;
}

unint64_t sub_100008AC0()
{
  unint64_t result;

  result = qword_1014911A0;
  if (!qword_1014911A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FindMyHandleWaypointRequestError, &type metadata for FindMyHandleWaypointRequestError);
    atomic_store(result, (unint64_t *)&qword_1014911A0);
  }
  return result;
}

uint64_t sub_100008B04(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_100008C80(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSString v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  void *v15;
  char isEscapingClosureAtFileLocation;
  void **v17;
  uint64_t v18;
  void (*v19)(uint64_t, void *);
  void *v20;
  void *v21;
  uint64_t v22;

  v2 = v1;
  sub_100113D90();
  v5 = v4;
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  objc_msgSend(a1, "setSearchString:", v6);

  result = (uint64_t)objc_msgSend(a1, "setOrigin:", 3);
  v8 = *(void **)(v2 + OBJC_IVAR____TtC4Maps27FindMyHandleWaypointRequest_cachedLoadResult);
  if (v8)
  {
    v9 = swift_allocObject(&unk_10119AE20, 24, 7);
    *(_QWORD *)(v9 + 16) = a1;
    v10 = swift_allocObject(&unk_10119AE48, 32, 7);
    *(_QWORD *)(v10 + 16) = sub_10000BEF0;
    *(_QWORD *)(v10 + 24) = v9;
    v21 = sub_10000BF08;
    v22 = v10;
    v17 = _NSConcreteStackBlock;
    v18 = 1107296256;
    v19 = sub_100008F44;
    v20 = &unk_10119AE60;
    v11 = _Block_copy(&v17);
    v12 = v22;
    v13 = v8;
    v14 = a1;
    swift_retain(v10);
    swift_release(v12);
    v21 = CollectionPickerContaineeViewController.dataSource(_:didChangeSelectedCollections:);
    v22 = 0;
    v17 = _NSConcreteStackBlock;
    v18 = 1107296256;
    v19 = sub_10000C690;
    v20 = &unk_10119AE88;
    v15 = _Block_copy(&v17);
    swift_release(v22);
    objc_msgSend(v13, "withValue:orError:", v11, v15);
    _Block_release(v11);

    _Block_release(v15);
    result = swift_isEscapingClosureAtFileLocation(0, "", 95, 86, 21, 1);
    if ((result & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v10, "", 95, 81, 37, 1);
      swift_release(v9);
      result = swift_release(v10);
      if ((isEscapingClosureAtFileLocation & 1) == 0)
        return result;
    }
    __break(1u);
  }
  return result;
}

void sub_100008E98(void *a1, void *a2)
{
  double v4;
  id v5;

  v5 = objc_msgSend(objc_allocWithZone((Class)GEOLatLng), "init");
  if (v5)
  {
    objc_msgSend(a1, "coordinate");
    objc_msgSend(v5, "setLat:");
    objc_msgSend(a1, "coordinate");
    objc_msgSend(v5, "setLng:", v4);
    objc_msgSend(a2, "setCoordinate:", v5);

  }
  else
  {
    __break(1u);
  }
}

void sub_100008F44(uint64_t a1, void *a2)
{
  void (*v2)(void);
  id v3;

  v2 = *(void (**)(void))(a1 + 32);
  v3 = a2;
  v2();

}

void sub_100008FD0(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  objc_class *ObjectType;
  void *v5;
  void *v6;
  char *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  char *v12;
  id v13;
  char *v14;
  char *v15;
  void *v16;
  void *v17;
  id v18;
  objc_super v19;
  CLLocationCoordinate2D v20;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType(v1);
  v5 = *(void **)(v2 + OBJC_IVAR____TtC4Maps27FindMyHandleWaypointRequest_handle);
  v6 = *(void **)(v2 + OBJC_IVAR____TtC4Maps27FindMyHandleWaypointRequest_location);
  v7 = (char *)objc_allocWithZone(ObjectType);
  *(_QWORD *)&v7[OBJC_IVAR____TtC4Maps27FindMyHandleWaypointRequest_cachedLoadResult] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC4Maps27FindMyHandleWaypointRequest_handle] = v5;
  if (v6)
  {
    v8 = v5;
    v9 = v6;
    v10 = v8;
    v11 = v9;
    v12 = v7;
    objc_msgSend(v11, "coordinate");
    if (!CLLocationCoordinate2DIsValid(v20))
    {

      v6 = 0;
    }
  }
  else
  {
    v13 = v5;
    v14 = v7;
    v11 = 0;
  }
  *(_QWORD *)&v7[OBJC_IVAR____TtC4Maps27FindMyHandleWaypointRequest_location] = v6;

  v19.receiver = v7;
  v19.super_class = ObjectType;
  v15 = (char *)objc_msgSendSuper2(&v19, "init");

  v16 = *(void **)(v2 + OBJC_IVAR____TtC4Maps27FindMyHandleWaypointRequest_cachedLoadResult);
  v17 = *(void **)&v15[OBJC_IVAR____TtC4Maps27FindMyHandleWaypointRequest_cachedLoadResult];
  *(_QWORD *)&v15[OBJC_IVAR____TtC4Maps27FindMyHandleWaypointRequest_cachedLoadResult] = v16;
  v18 = v16;

  a1[3] = ObjectType;
  *a1 = v15;
}

id sub_100009158(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSString v13;
  id v14;
  uint64_t v16;

  v3 = type metadata accessor for Handle(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps27FindMyHandleWaypointRequest_handle);
  v8 = sub_100114194();
  if (v8)
  {
    v9 = v8;
  }
  else
  {
    v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7 + OBJC_IVAR____TtC4Maps16MapsFindMyHandle_handle, v3);
    Handle.identifier.getter(v10);
    v12 = v11;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v12);
    v9 = objc_msgSend((id)objc_opt_self(CNContact), "contactWithDisplayName:emailOrPhoneNumber:", 0, v13);

  }
  v14 = objc_msgSend(v9, "avatarImageWithSize:scale:rightToLeft:", 0, 128.0, 128.0, a1);

  return v14;
}

id CollectionPickerContaineeViewController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t static CollectionPickerContaineeViewController.wantsDefaultHeaderContentViews()()
{
  return 1;
}

void FindMyHandleWaypointRequestError.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int FindMyHandleWaypointRequestError.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

Swift::Int sub_1000095D4(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

unint64_t sub_100009624(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008B04(&qword_101491CE0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10000C1FC(v7, (uint64_t)&v16, &qword_101491CE8);
    v8 = v16;
    v9 = v17;
    result = sub_1000C17A0(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_10000BE60(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100009758(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008B04((uint64_t *)&unk_10149E920);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10000C1FC(v7, (uint64_t)v16, &qword_101491B20);
    result = sub_1000C1804((uint64_t)v16);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v10 = v4[6] + 40 * result;
    v11 = v16[0];
    v12 = v16[1];
    *(_QWORD *)(v10 + 32) = v17;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    result = (unint64_t)sub_10000BE60(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 72;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100009898(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = sub_100008B04(&qword_101491CB8);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v24 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v24);
    return (unint64_t)v8;
  }
  sub_100008B04((uint64_t *)&unk_101491CC0);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = &v5[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v26 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_10000C1FC(v13, (uint64_t)v5, &qword_101491CB8);
    v15 = *v5;
    result = sub_1000C1834(*v5);
    if ((v17 & 1) != 0)
      break;
    v18 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_BYTE *)(v8[6] + result) = v15;
    v19 = v8[7];
    v20 = type metadata accessor for DisplayRepresentation(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v18, v10, v20);
    v21 = v8[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_12;
    v8[2] = v23;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v24 = v26;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_100009A30(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008B04(&qword_101491C58);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10000C1FC(v7, (uint64_t)&v14, (uint64_t *)&unk_101491C60);
    v8 = v14;
    result = sub_1000C18C8(v14);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v8;
    result = (unint64_t)sub_10000BE60(&v15, (_OWORD *)(v4[7] + 32 * result));
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4[2] = v13;
    v7 += 40;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100009B5C(uint64_t a1)
{
  return sub_10000A0B0(a1, &qword_101491CA8, &qword_101491CB0, (uint64_t (*)(_QWORD))sub_1000C19A0);
}

unint64_t sub_100009B78(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  id v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008B04(&qword_101491BF0);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (void **)(a1 + 40);
  while (1)
  {
    v6 = *v5;
    v7 = *(v5 - 1);
    v8 = v6;
    result = sub_1000C1A60((uint64_t)v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = 8 * result;
    *(_QWORD *)(v3[6] + v11) = v7;
    *(_QWORD *)(v3[7] + v11) = v8;
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v5 += 2;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100009C80(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008B04(&qword_1014918A0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10000C1FC(v7, (uint64_t)&v14, &qword_1014918A8);
    v8 = v14;
    result = sub_1000C1AAC(v14);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v8;
    result = sub_10000BE48(&v15, v4[7] + 40 * result);
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4[2] = v13;
    v7 += 48;
    if (!--v5)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100009DB0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  id v9;
  id v10;
  unint64_t result;
  char v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008B04(&qword_101491BE8);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = a1 + 40;
  while (1)
  {
    v6 = *(_QWORD *)v5;
    v7 = *(_QWORD *)(v5 + 8);
    v8 = *(_BYTE *)(v5 + 16);
    v18 = *(_OWORD *)(v5 + 40);
    v19 = *(_OWORD *)(v5 + 24);
    v9 = *(id *)(v5 - 8);
    sub_10000BE70(v6, v7, v8);
    v10 = (id)v19;
    swift_bridgeObjectRetain(*((_QWORD *)&v19 + 1));
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(*((_QWORD *)&v18 + 1));
    result = sub_1000C1674((uint64_t)v9, v6, v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = v3[6] + 32 * result;
    *(_QWORD *)v13 = v9;
    *(_QWORD *)(v13 + 8) = v6;
    *(_QWORD *)(v13 + 16) = v7;
    *(_BYTE *)(v13 + 24) = v8;
    v14 = (_OWORD *)(v3[7] + 32 * result);
    *v14 = v19;
    v14[1] = v18;
    v15 = v3[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v3[2] = v17;
    v5 += 64;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100009F38(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = _swiftEmptyDictionarySingleton;
LABEL_9:
    v19 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v19);
    return (unint64_t)v3;
  }
  sub_100008B04((uint64_t *)&unk_10149A2D0);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    goto LABEL_9;
  v20 = a1;
  v5 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10000C1FC(v5, (uint64_t)&v21, (uint64_t *)&unk_101491C70);
    v6 = v21;
    v7 = v22;
    v8 = v23;
    v9 = v24;
    result = sub_1000C1674(v21, v22, v23, v24);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = v3[6] + 32 * result;
    *(_QWORD *)v12 = v6;
    *(_QWORD *)(v12 + 8) = v7;
    *(_QWORD *)(v12 + 16) = v8;
    *(_BYTE *)(v12 + 24) = v9;
    v13 = v3[7] + 40 * result;
    v14 = v25;
    v15 = v26;
    *(_QWORD *)(v13 + 32) = v27;
    *(_OWORD *)v13 = v14;
    *(_OWORD *)(v13 + 16) = v15;
    v16 = v3[2];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (v17)
      goto LABEL_12;
    v3[2] = v18;
    v5 += 72;
    if (!--v4)
    {
      swift_release();
      v19 = v20;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10000A094(uint64_t a1)
{
  return sub_10000A0B0(a1, &qword_101491C98, &qword_101491CA0, (uint64_t (*)(_QWORD))sub_1000C1B64);
}

unint64_t sub_10000A0B0(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t result;
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(_QWORD);

  v31 = a4;
  v7 = sub_100008B04(a2);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
  {
    v13 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v29 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v29);
    return (unint64_t)v13;
  }
  sub_100008B04(a3);
  v12 = static _DictionaryStorage.allocate(capacity:)(v11);
  v13 = (_QWORD *)v12;
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
    goto LABEL_9;
  v15 = &v10[*(int *)(v7 + 48)];
  v16 = v12 + 64;
  v17 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v30 = a1;
  v18 = a1 + v17;
  v19 = *(_QWORD *)(v8 + 72);
  swift_retain();
  while (1)
  {
    sub_10000C1FC(v18, (uint64_t)v10, a2);
    v20 = *v10;
    result = v31(*v10);
    if ((v22 & 1) != 0)
      break;
    v23 = result;
    *(_QWORD *)(v16 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_BYTE *)(v13[6] + result) = v20;
    v24 = v13[7];
    v25 = type metadata accessor for DisplayRepresentation(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v24 + *(_QWORD *)(*(_QWORD *)(v25 - 8) + 72) * v23, v15, v25);
    v26 = v13[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
      goto LABEL_12;
    v13[2] = v28;
    v18 += v19;
    if (!--v14)
    {
      swift_release();
      v29 = v30;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10000A248(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008B04(&qword_101491E30);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v6 = *(v5 - 2);
    v7 = *(v5 - 1);
    v8 = *v5;
    swift_bridgeObjectRetain(v7);
    result = sub_1000C17A0(v6, v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v6;
    v11[1] = v7;
    *(_QWORD *)(v3[7] + 8 * result) = v8;
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v5 += 3;
    v3[2] = v14;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10000A358(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  id *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  unint64_t result;
  char v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008B04(&qword_101491AB0);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (id *)(a1 + 56);
  while (1)
  {
    v6 = (uint64_t)*(v5 - 3);
    v7 = (uint64_t)*(v5 - 2);
    v8 = *(v5 - 1);
    v9 = *v5;
    v10 = *v5;
    swift_bridgeObjectRetain(v7);
    v11 = v8;
    result = sub_1000C17A0(v6, v7);
    if ((v13 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v14 = (uint64_t *)(v3[6] + 16 * result);
    *v14 = v6;
    v14[1] = v7;
    v15 = (_QWORD *)(v3[7] + 16 * result);
    *v15 = v11;
    v15[1] = v9;
    v16 = v3[2];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (v17)
      goto LABEL_11;
    v5 += 4;
    v3[2] = v18;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10000A47C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = sub_100008B04((uint64_t *)&unk_101491AA0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = _swiftEmptyDictionarySingleton;
LABEL_9:
    v26 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v26);
    return (unint64_t)v8;
  }
  sub_100008B04((uint64_t *)&unk_10149E910);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = (char *)v5 + *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v28 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10000C1FC(v13, (uint64_t)v5, (uint64_t *)&unk_101491AA0);
    v15 = *v5;
    v16 = v5[1];
    result = sub_1000C17A0(*v5, v16);
    if ((v18 & 1) != 0)
      break;
    v19 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v20 = (uint64_t *)(v8[6] + 16 * result);
    *v20 = v15;
    v20[1] = v16;
    v21 = v8[7];
    v22 = type metadata accessor for Handle(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v19, v10, v22);
    v23 = v8[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_12;
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      v26 = v28;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10000A61C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008B04((uint64_t *)&unk_10149E900);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (void **)(a1 + 48);
  while (1)
  {
    v6 = (uint64_t)*(v5 - 2);
    v7 = (uint64_t)*(v5 - 1);
    v8 = *v5;
    swift_bridgeObjectRetain(v7);
    v9 = v8;
    result = sub_1000C17A0(v6, v7);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v3[6] + 16 * result);
    *v12 = v6;
    v12[1] = v7;
    *(_QWORD *)(v3[7] + 8 * result) = v9;
    v13 = v3[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v3[2] = v15;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t variable initialization expression of CuratedCollectionItemLibraryCoordinator.placeItemInLibrary()
{
  return 0;
}

void *CarEVChargingAvailabilityViewController.preferredFocusEnvironments.getter()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t variable initialization expression of CarPlaceCardEVChargingViewModel.summaryTitle()
{
  return 0;
}

uint64_t variable initialization expression of CuratedCollectionItemLibraryCoordinator.isAddingToLibrary()
{
  return 0;
}

id variable initialization expression of PlaceCardLibraryOperationsCoordinator.savedStateObservers()
{
  return objc_msgSend(objc_allocWithZone((Class)GEOObserverHashTable), "initWithProtocol:queue:", &OBJC_PROTOCOL___MULibraryAccessProviderObserver, 0);
}

id variable initialization expression of PlaceCardLibraryOperationsCoordinator.dataOperationsProvider()
{
  uint64_t v0;
  objc_class *v1;
  char *v2;
  objc_super v4;

  type metadata accessor for MapsSyncStore(0);
  v0 = static MapsSyncStore.sharedStore.getter();
  v1 = (objc_class *)type metadata accessor for LibraryDataOperationsProvider();
  v2 = (char *)objc_allocWithZone(v1);
  *(_QWORD *)&v2[OBJC_IVAR____TtC4Maps29LibraryDataOperationsProvider_mapsSyncStore] = v0;
  v4.receiver = v2;
  v4.super_class = v1;
  return objc_msgSendSuper2(&v4, "init");
}

uint64_t variable initialization expression of PlaceCardLibraryOperationsCoordinator.storeSubscriptionTypes()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_10000B4B8();
  v1 = swift_allocObject(v0, ((*(unsigned int *)(v0 + 48) + 7) & 0x1FFFFFFF8) + 24, *(unsigned __int16 *)(v0 + 52) | 7);
  *(_OWORD *)(v1 + 16) = xmmword_100E22F50;
  *(_QWORD *)(v1 + 32) = type metadata accessor for FavoriteItem(0, v2);
  *(_QWORD *)(v1 + 40) = type metadata accessor for CollectionPlaceItem(0);
  *(_QWORD *)(v1 + 48) = type metadata accessor for Collection(0);
  return v1;
}

void *variable initialization expression of PlaceCardCollectionMembershipProvider.containingCollectionIDs()
{
  return &_swiftEmptySetSingleton;
}

double variable initialization expression of PlaceNoteEditViewController.defaultPadding()
{
  return 16.0;
}

id variable initialization expression of UserProfileLinkLibraryProvider.observers()
{
  return objc_msgSend(objc_allocWithZone((Class)GEOObserverHashTable), "initWithProtocol:queue:", &OBJC_PROTOCOL___UserProfileLinkDataProvidingObserver, 0);
}

uint64_t variable initialization expression of UserProfileLinkLibraryProvider.lastTotalCount()
{
  return 0;
}

uint64_t variable initialization expression of LibraryRecentsDataProvider.storeSubscriptionTypes()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_10000B4B8();
  v1 = swift_allocObject(v0, ((*(unsigned int *)(v0 + 48) + 7) & 0x1FFFFFFF8) + 48, *(unsigned __int16 *)(v0 + 52) | 7);
  *(_OWORD *)(v1 + 16) = xmmword_100E22F60;
  *(_QWORD *)(v1 + 32) = type metadata accessor for FavoriteItem(0, v2);
  *(_QWORD *)(v1 + 40) = type metadata accessor for CollectionPlaceItem(0);
  *(_QWORD *)(v1 + 48) = type metadata accessor for Collection(0);
  *(_QWORD *)(v1 + 56) = type metadata accessor for CachedCuratedCollection(0);
  *(_QWORD *)(v1 + 64) = type metadata accessor for UserRoute(0);
  *(_QWORD *)(v1 + 72) = type metadata accessor for CuratedCollection(0);
  return v1;
}

uint64_t variable initialization expression of LibraryPlacesViewController.sortType()
{
  return 2;
}

uint64_t variable initialization expression of LibraryPlacesViewController.placesTitle()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v3;

  if (qword_101490ED0 != -1)
    swift_once(&qword_101490ED0, sub_10011833C);
  v3._countAndFlagsBits = 0xD000000000000024;
  v3._object = (void *)0x8000000100E400E0;
  v0._object = (void *)0x8000000100E400C0;
  v0._countAndFlagsBits = 0xD000000000000014;
  v1._countAndFlagsBits = 0x736563616C50;
  v1._object = (void *)0xE600000000000000;
  return NSLocalizedString(_:tableName:bundle:value:comment:)(v0, (Swift::String_optional)0, (NSBundle)qword_1014D4B80, v1, v3)._countAndFlagsBits;
}

id variable initialization expression of LibraryItemsCountManager.observers()
{
  return objc_msgSend(objc_allocWithZone((Class)GEOObserverHashTable), "initWithProtocol:queue:", &OBJC_PROTOCOL____TtP4Maps32LibraryItemsCountManagerObserver_, 0);
}

uint64_t variable initialization expression of LibraryPlacesDataProvider.storeSubscriptionTypes()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_10000B4B8();
  v1 = swift_allocObject(v0, ((*(unsigned int *)(v0 + 48) + 7) & 0x1FFFFFFF8) + 16, *(unsigned __int16 *)(v0 + 52) | 7);
  *(_OWORD *)(v1 + 16) = xmmword_100E22F70;
  *(_QWORD *)(v1 + 32) = type metadata accessor for FavoriteItem(0, v2);
  *(_QWORD *)(v1 + 40) = type metadata accessor for CollectionPlaceItem(0);
  return v1;
}

uint64_t variable initialization expression of FavoriteCollectionHandler.storeSubscriptionTypes()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10000B4B8();
  v1 = swift_allocObject(v0, ((*(unsigned int *)(v0 + 48) + 7) & 0x1FFFFFFF8) + 8, *(unsigned __int16 *)(v0 + 52) | 7);
  *(_OWORD *)(v1 + 16) = xmmword_100E22F40;
  *(_QWORD *)(v1 + 32) = type metadata accessor for CollectionPlaceItem(0);
  return v1;
}

void sub_10000AB08(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

NSNumber sub_10000AB14()
{
  return Float._bridgeToObjectiveC()();
}

uint64_t sub_10000AB1C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v4;
  int v5;
  int v6;
  char v7;

  v6 = 0;
  v7 = 1;
  result = static Float._forceBridgeFromObjectiveC(_:result:)(a1, &v6);
  v4 = v7;
  v5 = v6;
  if (v7)
    v5 = 0;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v4;
  return result;
}

uint64_t sub_10000AB6C(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;
  int v5;
  int v7;
  char v8;

  v7 = 0;
  v8 = 1;
  v3 = static Float._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v7);
  v4 = v8;
  v5 = v7;
  if (v8)
    v5 = 0;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v4;
  return v3 & 1;
}

void sub_10000ABC0(float *a1@<X8>)
{
  *a1 = static Float._unconditionallyBridgeFromObjectiveC(_:)();
}

BOOL sub_10000ABE4(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL sub_10000ABF8(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10000AC0C(uint64_t a1, uint64_t a2)
{
  return sub_10000AD68(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_10000AC20(uint64_t a1, uint64_t a2)
{
  return sub_10000AD68(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_10000AC38(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_10000ACAC(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_10000AD28@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  NSString v5;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v4 = v3;
  v5 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5;
  return result;
}

uint64_t sub_10000AD68(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_10000ADA4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10000ADE4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

Swift::Int sub_10000AE54()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10000AE98()
{
  Swift::UInt32 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10000AEC0(uint64_t a1)
{
  Swift::UInt32 *v1;
  Swift::UInt32 v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

_QWORD *sub_10000AF00@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_10000AF10(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_10000AF18@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_10000AF2C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

_QWORD *sub_10000AF40@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_10000AF6C@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_10000AF90(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_10000AFA4@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_10000AFB8(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_10000AFCC()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_10000AFDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

_QWORD *sub_10000AFF4(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

void sub_10000B008(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

_QWORD *sub_10000B014@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

BOOL sub_10000B028(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_10000B058(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_10000B06C(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

void sub_10000B084()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10000B0B0()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_10000B0F4(uint64_t a1)
{
  Swift::UInt *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_10000B138(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

BOOL sub_10000B1C0(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_10000B1D4(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

uint64_t sub_10000B1E8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_10000BE10(a1);
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

_QWORD *sub_10000B224@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_10000B230@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

float sub_10000B240@<S0>(_DWORD *a1@<X8>)
{
  float *v1;
  float result;

  result = *v1;
  *a1 = *(_DWORD *)v1;
  return result;
}

uint64_t sub_10000B24C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10000BC84(&qword_101491E20, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&unk_100E239A8);
  v3 = sub_10000BC84(&qword_101491E28, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&unk_100E23948);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for Float);
}

uint64_t sub_10000B2E4@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10000B30C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10000BC84((unint64_t *)&qword_101491E00, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_100E23D0C);
  v3 = sub_10000BC84(&qword_101491E08, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_100E23BC0);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000B390@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_10000B3D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10000BC84((unint64_t *)&qword_101491E10, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100E23D50);
  v3 = sub_10000BC84(&qword_101491E18, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100E23AAC);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000B458()
{
  float *v0;

  return Float.hashValue.getter(*v0);
}

void sub_10000B460()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;

  if ((*v0 & 0x7FFFFFFF) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

uint64_t sub_10000B490(uint64_t a1)
{
  _DWORD *v1;
  uint64_t v2;

  if ((*v1 & 0x7FFFFFFF) != 0)
    v2 = *v1;
  else
    v2 = 0;
  return static Hasher._hash(seed:bytes:count:)(a1, v2, 4);
}

BOOL sub_10000B4A4(float *a1, float *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10000B4B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  v0 = sub_100008B04((uint64_t *)&unk_101499CC0);
  if (swift_isClassType())
    v1 = v0;
  else
    v1 = 0;
  if (v1)
    v2 = (uint64_t *)&unk_101493B10;
  else
    v2 = (uint64_t *)&unk_101491CD0;
  return sub_100008B04(v2);
}

id sub_10000B504(void *a1, void *a2)
{
  char *v2;
  objc_class *ObjectType;
  char *v6;
  id v7;
  id v8;
  char *v9;
  id v10;
  objc_super v12;
  CLLocationCoordinate2D v13;

  ObjectType = (objc_class *)swift_getObjectType(v2);
  *(_QWORD *)&v2[OBJC_IVAR____TtC4Maps27FindMyHandleWaypointRequest_cachedLoadResult] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC4Maps27FindMyHandleWaypointRequest_handle] = a1;
  if (a2)
  {
    v6 = v2;
    v7 = a1;
    v8 = a2;
    objc_msgSend(v8, "coordinate");
    if (!CLLocationCoordinate2DIsValid(v13))
    {

      a2 = 0;
    }
  }
  else
  {
    v9 = v2;
    v10 = a1;
  }
  *(_QWORD *)&v2[OBJC_IVAR____TtC4Maps27FindMyHandleWaypointRequest_location] = a2;

  v12.receiver = v2;
  v12.super_class = ObjectType;
  return objc_msgSendSuper2(&v12, "init");
}

id sub_10000B5B8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  id v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  objc_class *MyHandleMapServiceTicket;
  _BYTE *v24;
  char *v25;
  id v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  objc_super v46;

  v6 = v5;
  v44 = a4;
  v45 = a5;
  v42 = a1;
  v43 = a3;
  v41 = a2;
  v7 = sub_100008B04(&qword_101494070);
  __chkstk_darwin(v7);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Handle(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(void **)(v5 + OBJC_IVAR____TtC4Maps27FindMyHandleWaypointRequest_location);
  if (v14)
  {
    v15 = v14;
    objc_msgSend(v15, "coordinate");
    v17 = v16;
    objc_msgSend(v15, "coordinate");
    v19 = v18;

    v20 = v17;
    v21 = v19;
  }
  else
  {
    v21 = 0xC066800000000000;
    v20 = 0xC066800000000000;
  }
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v22(v13, *(_QWORD *)(v6 + OBJC_IVAR____TtC4Maps27FindMyHandleWaypointRequest_handle)+ OBJC_IVAR____TtC4Maps16MapsFindMyHandle_handle, v10);
  MyHandleMapServiceTicket = (objc_class *)type metadata accessor for FindMyHandleMapServiceTicket(0);
  v24 = objc_allocWithZone(MyHandleMapServiceTicket);
  *(_QWORD *)&v24[OBJC_IVAR____TtC4Maps28FindMyHandleMapServiceTicket_ticket] = 0;
  v24[OBJC_IVAR____TtC4Maps28FindMyHandleMapServiceTicket_isCancelled] = 0;
  v22(&v24[OBJC_IVAR____TtC4Maps28FindMyHandleMapServiceTicket_handle], (uint64_t)v13, v10);
  v25 = &v24[OBJC_IVAR____TtC4Maps28FindMyHandleMapServiceTicket_coordinate];
  *(_QWORD *)v25 = v20;
  *((_QWORD *)v25 + 1) = v21;
  v25[16] = 0;
  v46.receiver = v24;
  v46.super_class = MyHandleMapServiceTicket;
  v26 = objc_msgSendSuper2(&v46, "init");
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v27 = swift_allocObject(&unk_10119AF38, 24, 7);
  swift_unknownObjectWeakInit(v27 + 16, v6);
  v28 = (_QWORD *)swift_allocObject(&unk_10119AF60, 40, 7);
  v29 = v41;
  v28[2] = v27;
  v28[3] = v29;
  v30 = v43;
  v28[4] = v43;
  v31 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v9, 1, 1, v31);
  v32 = (_QWORD *)swift_allocObject(&unk_10119AF88, 80, 7);
  v32[2] = 0;
  v32[3] = 0;
  v33 = v42;
  v32[4] = v26;
  v32[5] = v33;
  v32[6] = sub_10000BFE8;
  v32[7] = v28;
  v35 = v44;
  v34 = v45;
  v32[8] = v44;
  v32[9] = v34;
  v36 = v33;
  swift_retain(v28);
  swift_retain(v27);
  swift_retain(v30);
  v37 = v26;
  sub_10000C128(v35, v34);
  v38 = sub_1001B0C08((uint64_t)v9, (uint64_t)&unk_101491C80, (uint64_t)v32);
  swift_release(v27);
  swift_release(v28);
  swift_release(v38);
  return v37;
}

uint64_t _s4Maps32FindMyHandleWaypointRequestErrorO16errorDescriptionSSSgvg_0()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v3;

  if (qword_101490ED0 != -1)
    swift_once(&qword_101490ED0, sub_10011833C);
  v3._countAndFlagsBits = 0xD000000000000031;
  v3._object = (void *)0x8000000100E40080;
  v0._object = (void *)0x8000000100E40000;
  v1._object = (void *)0x8000000100E40030;
  v0._countAndFlagsBits = 0xD000000000000022;
  v1._countAndFlagsBits = 0x1000000000000049;
  return NSLocalizedString(_:tableName:bundle:value:comment:)(v0, (Swift::String_optional)0, (NSBundle)qword_1014D4B80, v1, v3)._countAndFlagsBits;
}

unint64_t sub_10000B93C()
{
  unint64_t result;

  result = qword_1014912D0;
  if (!qword_1014912D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FindMyHandleWaypointRequestError, &type metadata for FindMyHandleWaypointRequestError);
    atomic_store(result, (unint64_t *)&qword_1014912D0);
  }
  return result;
}

uint64_t type metadata accessor for FindMyHandleWaypointRequest()
{
  return objc_opt_self(_TtC4Maps27FindMyHandleWaypointRequest);
}

uint64_t getEnumTagSinglePayload for FindMyHandleWaypointRequestError(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for FindMyHandleWaypointRequestError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10000BA3C + 4 * byte_100E22F90[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10000BA5C + 4 * byte_100E22F95[v4]))();
}

_BYTE *sub_10000BA3C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10000BA5C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10000BA64(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10000BA6C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10000BA74(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10000BA7C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FindMyHandleWaypointRequestError()
{
  return &type metadata for FindMyHandleWaypointRequestError;
}

void type metadata accessor for GEOTransportTypePreference(uint64_t a1)
{
  sub_10000C604(a1, &qword_101491560, (uint64_t)&unk_10119AB58);
}

void type metadata accessor for PlaceCardViewControllerExcludedContent(uint64_t a1)
{
  sub_10000C604(a1, &qword_101491568, (uint64_t)&unk_10119AB78);
}

void type metadata accessor for MULibraryPlaceSavedState(uint64_t a1)
{
  sub_10000C604(a1, &qword_101491570, (uint64_t)&unk_10119ABA0);
}

void type metadata accessor for ViewMode(uint64_t a1)
{
  sub_10000C604(a1, &qword_101491578, (uint64_t)&unk_10119ABC0);
}

void type metadata accessor for MapsSuggestionsShortcutType(uint64_t a1)
{
  sub_10000C604(a1, &qword_101491580, (uint64_t)&unk_10119ABE0);
}

void type metadata accessor for PersonalizedItemSourceSubtype(uint64_t a1)
{
  sub_10000C604(a1, &qword_101491588, (uint64_t)&unk_10119AC00);
}

__n128 initializeWithTake for PlaceSummaryUnitSecondaryName(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for HomeListFooterCellModel(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for HomeListFooterCellModel(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CLLocationCoordinate2D(uint64_t a1)
{
  sub_10000C604(a1, &qword_101491590, (uint64_t)&unk_10119AC78);
}

void type metadata accessor for PersonalizedItemPriority(uint64_t a1)
{
  sub_10000C604(a1, &qword_101491598, (uint64_t)&unk_10119ACA0);
}

void type metadata accessor for GEOLocationCoordinate2D(uint64_t a1)
{
  sub_10000C604(a1, &qword_1014915A0, (uint64_t)&unk_10119AD18);
}

void type metadata accessor for GEOMapType(uint64_t a1)
{
  sub_10000C604(a1, &qword_1014915A8, (uint64_t)&unk_10119AD40);
}

void type metadata accessor for CardButtonType(uint64_t a1)
{
  sub_10000C604(a1, &qword_1014915B0, (uint64_t)&unk_10119AD60);
}

void type metadata accessor for GEOEVChargerAvailability_RealTimeStatus(uint64_t a1)
{
  sub_10000C604(a1, &qword_1014915B8, (uint64_t)&unk_10119AD80);
}

void type metadata accessor for CarNavigationGuidanceSignStyle(uint64_t a1)
{
  sub_10000C604(a1, &qword_1014915C0, (uint64_t)&unk_10119ADA0);
}

void type metadata accessor for MNInstructionsGuidanceLevel(uint64_t a1)
{
  sub_10000C604(a1, &qword_1014915C8, (uint64_t)&unk_10119ADC0);
}

void type metadata accessor for ContainerStyle(uint64_t a1)
{
  sub_10000C604(a1, &qword_1014915D0, (uint64_t)&unk_10119ADE0);
}

void type metadata accessor for SearchHomeDataProviderType(uint64_t a1)
{
  sub_10000C604(a1, &qword_1014915D8, (uint64_t)&unk_10119AE00);
}

uint64_t sub_10000BC2C()
{
  return sub_10000BC84(&qword_101491640, (uint64_t (*)(uint64_t))type metadata accessor for PlaceCardViewControllerExcludedContent, (uint64_t)&unk_100E235D8);
}

uint64_t sub_10000BC58()
{
  return sub_10000BC84(&qword_101491648, (uint64_t (*)(uint64_t))type metadata accessor for PlaceCardViewControllerExcludedContent, (uint64_t)&unk_100E235A8);
}

uint64_t sub_10000BC84(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000BCC4()
{
  return sub_10000BC84(&qword_101491650, (uint64_t (*)(uint64_t))type metadata accessor for PlaceCardViewControllerExcludedContent, (uint64_t)&unk_100E23600);
}

uint64_t sub_10000BCF0()
{
  return sub_10000BC84(&qword_101491658, (uint64_t (*)(uint64_t))type metadata accessor for PlaceCardViewControllerExcludedContent, (uint64_t)&unk_100E23638);
}

unint64_t sub_10000BD1C(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  unint64_t result;
  char v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  void **v13;
  void *v14;
  id v15;
  char v16;
  id v17;

  v1 = a1[2];
  if (!v1)
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  sub_100008B04(&qword_101491A30);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
  v4 = a1[4];
  v5 = (void *)a1[5];
  result = sub_1000C163C(v4);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    v17 = v5;
    return (unint64_t)v3;
  }
  v8 = (void **)(a1 + 7);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v3[6] + v9) = v4;
    *(_QWORD *)(v3[7] + v9) = v5;
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      break;
    v3[2] = v12;
    if (!--v1)
      goto LABEL_8;
    v13 = v8 + 2;
    v4 = (uint64_t)*(v8 - 1);
    v14 = *v8;
    v15 = v5;
    result = sub_1000C163C(v4);
    v8 = v13;
    v5 = v14;
    if ((v16 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t sub_10000BE10(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_10000BE48(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

_OWORD *sub_10000BE60(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_10000BE70(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_bridgeObjectRetain(a2);
  return result;
}

_QWORD *sub_10000BE88(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_10000BEAC(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10000BECC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10000BEF0(void *a1)
{
  uint64_t v1;

  sub_100008E98(a1, *(void **)(v1 + 16));
}

uint64_t sub_10000BEF8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10000BF08()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10000BF28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10000BF38(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10000BF40()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10000BF64()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_10000BF74(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t sub_10000BF84(char a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), a1 & 1);
}

uint64_t sub_10000BF98()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10000BFBC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_10000BFE8(void *a1)
{
  uint64_t v1;

  sub_1000084B8(a1, *(_QWORD *)(v1 + 16), *(void (**)(id))(v1 + 24));
}

uint64_t sub_10000BFF4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 56));
  if (*(_QWORD *)(v0 + 64))
    swift_release(*(_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10000C040(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc(dword_101498EF4);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_10000C0E0;
  return sub_1000B1314(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10000C0E0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v0;
  v1 = *(_QWORD *)(v4 + 16);
  v2 = *v0;
  v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10000C128(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_10000C138(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008B04((uint64_t *)&unk_101493350);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000C180(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008B04((uint64_t *)&unk_101493350);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10000C1C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101491C90;
  if (!qword_101491C90)
  {
    v1 = objc_opt_self(GEOComposedWaypoint);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_101491C90);
  }
  return result;
}

uint64_t sub_10000C1FC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100008B04(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for GEOEVChargerPlugConnectorType(uint64_t a1)
{
  sub_10000C604(a1, &qword_101491CF0, (uint64_t)&unk_10119AFB0);
}

void type metadata accessor for FeedbackUploadPolicy(uint64_t a1)
{
  sub_10000C604(a1, &qword_101491CF8, (uint64_t)&unk_10119AFD0);
}

void type metadata accessor for NSKeyValueChangeKey(uint64_t a1)
{
  sub_10000C604(a1, &qword_101491D00, (uint64_t)&unk_10119AFF0);
}

void type metadata accessor for Key(uint64_t a1)
{
  sub_10000C604(a1, &qword_101491D08, (uint64_t)&unk_10119B018);
}

void type metadata accessor for CGColor(uint64_t a1)
{
  sub_10000C604(a1, &qword_101491D10, (uint64_t)&unk_10119B040);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_10000C604(a1, &qword_101491D18, (uint64_t)&unk_10119B070);
}

uint64_t initializeBufferWithCopyOfBuffer for PlaceSummaryUnitString(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 initializeWithTake for RefinementsBarButtonViewModel.Submenu(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_10000C2F4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10000C314(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_10000C604(a1, &qword_101491D20, (uint64_t)&unk_10119B0F0);
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_10000C604(a1, &qword_101491D28, (uint64_t)&unk_10119B170);
}

void type metadata accessor for UILayoutPriority(uint64_t a1)
{
  sub_10000C604(a1, &qword_101491D30, (uint64_t)&unk_10119B198);
}

void type metadata accessor for GEOUITarget(uint64_t a1)
{
  sub_10000C604(a1, &qword_101491D38, (uint64_t)&unk_10119B1C0);
}

void type metadata accessor for GEOMapItemPlaceType(uint64_t a1)
{
  sub_10000C604(a1, (unint64_t *)&unk_101491D40, (uint64_t)&unk_10119B1E0);
}

uint64_t sub_10000C3A4()
{
  return sub_10000BC84(&qword_101491DB0, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&unk_100E2390C);
}

uint64_t sub_10000C3D0()
{
  return sub_10000BC84(&qword_101491DB8, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&unk_100E238E0);
}

uint64_t sub_10000C3FC()
{
  return sub_10000BC84(&qword_101491DC0, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&unk_100E2397C);
}

uint64_t sub_10000C428()
{
  return sub_10000BC84(&qword_101491DC8, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100E23A70);
}

uint64_t sub_10000C454()
{
  return sub_10000BC84(&qword_101491DD0, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100E23A44);
}

uint64_t sub_10000C480()
{
  return sub_10000BC84(&qword_101491DD8, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_100E23B84);
}

uint64_t sub_10000C4AC()
{
  return sub_10000BC84(&qword_101491DE0, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_100E23B58);
}

uint64_t sub_10000C4D8()
{
  return sub_10000BC84(&qword_101491DE8, (uint64_t (*)(uint64_t))type metadata accessor for GEOEVChargerPlugConnectorType, (uint64_t)&unk_100E23CAC);
}

uint64_t sub_10000C504()
{
  return sub_10000BC84(&qword_101491DF0, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_100E23BF4);
}

uint64_t sub_10000C530()
{
  return sub_10000BC84(&qword_101491DF8, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100E23AE0);
}

void type metadata accessor for GEOTransitNearbyScheduleGroupType(uint64_t a1)
{
  sub_10000C604(a1, &qword_101491E38, (uint64_t)&unk_10119B200);
}

void type metadata accessor for GEOTransitDepartureLiveStatus(uint64_t a1)
{
  sub_10000C604(a1, &qword_101491E40, (uint64_t)&unk_10119B220);
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_10000C604(a1, &qword_101491E48, (uint64_t)&unk_10119B298);
}

uint64_t sub_10000C598()
{
  return sub_10000BC84(&qword_101491E50, (uint64_t (*)(uint64_t))type metadata accessor for GEOTransitDepartureLiveStatus, (uint64_t)&unk_100E23E38);
}

uint64_t sub_10000C5C4()
{
  return sub_10000BC84(&qword_101491E58, (uint64_t (*)(uint64_t))type metadata accessor for GEOTransitNearbyScheduleGroupType, (uint64_t)&unk_100E23ED8);
}

void type metadata accessor for VKIconSizeGroup(uint64_t a1)
{
  sub_10000C604(a1, (unint64_t *)&unk_101491E60, (uint64_t)&unk_10119B2C0);
}

void sub_10000C604(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

id sub_10000C6A4()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CommunityIDMapsSync()), "init");
  qword_1014D45D0 = (uint64_t)result;
  return result;
}

id sub_10000C79C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CommunityIDMapsSync();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CommunityIDMapsSync()
{
  return objc_opt_self(_TtC4Maps19CommunityIDMapsSync);
}

BOOL sub_10000C7FC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_10000C814()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10000C858()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10000C880(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_10000C8C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_10000C8D8, 0, 0);
}

uint64_t sub_10000C8D8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(void);

  type metadata accessor for CommunityIDRequest(0);
  *(_QWORD *)(v0 + 32) = CommunityIDRequest.__allocating_init()();
  v3 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of CommunityIDRequest.fetch()
                         + async function pointer to dispatch thunk of CommunityIDRequest.fetch());
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CommunityIDRequest.fetch()
                                  + 1));
  *(_QWORD *)(v0 + 40) = v1;
  *v1 = v0;
  v1[1] = sub_10000C948;
  return v3();
}

uint64_t sub_10000C948(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 40);
  *(_QWORD *)(v3 + 48) = a1;
  *(_QWORD *)(v3 + 56) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_10000CA08;
  }
  else
  {

    v5 = sub_10000C9BC;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10000C9BC()
{
  uint64_t v0;
  void (*v1)(_QWORD, _QWORD);
  uint64_t v2;

  v1 = *(void (**)(_QWORD, _QWORD))(v0 + 16);
  v2 = *(_QWORD *)(v0 + 48);
  if (v1)
    v1(*(_QWORD *)(v0 + 48), 0);
  swift_bridgeObjectRelease(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000CA08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(_QWORD, uint64_t);

  v1 = *(_QWORD *)(v0 + 16);

  v2 = *(_QWORD *)(v0 + 56);
  if (v1)
  {
    v3 = *(void (**)(_QWORD, uint64_t))(v0 + 16);
    swift_errorRetain(*(_QWORD *)(v0 + 56));
    v3(0, v2);
    swift_errorRelease(v2);
  }
  swift_errorRelease(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10000CB00(objc_class *a1, uint64_t a2, uint64_t a3)
{
  Class isa;
  uint64_t v6;
  id v7;

  isa = a1;
  if (a1)
  {
    type metadata accessor for CommunityID(0);
    isa = Array._bridgeToObjectiveC()().super.isa;
  }
  if (a2)
    v6 = _convertErrorToNSError(_:)(a2);
  else
    v6 = 0;
  v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, isa);

}

uint64_t sub_10000CB84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t);

  v7[2] = a6;
  v7[3] = a7;
  v11 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of CommunityIDRequest.fetch(options:)
                                        + async function pointer to dispatch thunk of CommunityIDRequest.fetch(options:));
  v9 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CommunityIDRequest.fetch(options:)
                                  + 1));
  v7[4] = v9;
  *v9 = v7;
  v9[1] = sub_10000CBF4;
  return v11(a5);
}

uint64_t sub_10000CBF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 32);
  *(_QWORD *)(v3 + 40) = a1;
  *(_QWORD *)(v3 + 48) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_10000CDE4;
  else
    v5 = sub_10000CC60;
  return swift_task_switch(v5, 0, 0);
}

void sub_10000CC60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  void (*v5)(uint64_t, _QWORD);
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(_QWORD, uint64_t);
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 40);
  if (!((unint64_t)v1 >> 62))
  {
    if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_13:
    v11 = *(_QWORD *)(v0 + 16);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
    if (v11)
    {
      v12 = *(void (**)(_QWORD, uint64_t))(v0 + 16);
      v13 = sub_10000DA04();
      v14 = swift_allocError(&type metadata for CommunityIDMapsSync.AccessError, v13, 0, 0);
      *v15 = 0;
      v12(0, v14);
      swift_errorRelease(v14);
    }
    goto LABEL_15;
  }
  if (v1 < 0)
    v9 = *(_QWORD *)(v0 + 40);
  else
    v9 = v1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
  v10 = _CocoaArrayWrapper.endIndex.getter(v9);
  swift_bridgeObjectRelease(v1);
  if (!v10)
    goto LABEL_13;
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    v3 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, *(_QWORD *)(v0 + 40));
    v2 = *(_QWORD *)(v0 + 40);
LABEL_6:
    v4 = *(_QWORD *)(v0 + 16);
    swift_bridgeObjectRelease(v2);
    if (v4)
    {
      v5 = *(void (**)(uint64_t, _QWORD))(v0 + 16);
      v6 = sub_100008B04((uint64_t *)&unk_101493B10);
      v7 = swift_allocObject(v6, 40, 7);
      *(_OWORD *)(v7 + 16) = xmmword_100E23F50;
      *(_QWORD *)(v7 + 32) = v3;
      v16 = v7;
      specialized Array._endMutation()(v7);
      v8 = v3;
      v5(v16, 0);

      swift_bridgeObjectRelease(v16);
    }
    else
    {

    }
LABEL_15:
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v2 = *(_QWORD *)(v0 + 40);
    v3 = *(id *)(v2 + 32);
    goto LABEL_6;
  }
  __break(1u);
}

uint64_t sub_10000CDE4()
{
  uint64_t v0;
  void (*v1)(_QWORD, uint64_t);
  uint64_t v2;

  v1 = *(void (**)(_QWORD, uint64_t))(v0 + 16);
  v2 = *(_QWORD *)(v0 + 48);
  if (v1)
  {
    swift_errorRetain(*(_QWORD *)(v0 + 48));
    v1(0, v2);
    swift_errorRelease(v2);
  }
  swift_errorRelease(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000D0E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD v25[4];

  v4 = sub_100008B04(&qword_101494070);
  __chkstk_darwin(v4);
  v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TaskPriority(0);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  v9 = (_QWORD *)swift_allocObject(&unk_10119B5C0, 48, 7);
  v9[2] = 0;
  v10 = v9 + 2;
  v9[3] = 0;
  v9[4] = a1;
  v9[5] = a2;
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  v12 = sub_10000C128(a1, a2);
  if (v11 == 1)
  {
    sub_10000DADC((uint64_t)v6);
    v13 = 0;
    v14 = 0;
    v15 = 7168;
  }
  else
  {
    v16 = TaskPriority.rawValue.getter(v12);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
    v15 = v16 | 0x1C00;
    v17 = *v10;
    if (*v10)
    {
      v18 = v9[3];
      ObjectType = swift_getObjectType(*v10);
      swift_unknownObjectRetain(v17);
      v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v18);
      v14 = v20;
      swift_unknownObjectRelease(v17);
    }
    else
    {
      v13 = 0;
      v14 = 0;
    }
  }
  v21 = swift_allocObject(&unk_10119B5E8, 32, 7);
  *(_QWORD *)(v21 + 16) = &unk_101492A60;
  *(_QWORD *)(v21 + 24) = v9;
  if (v14 | v13)
  {
    v25[0] = 0;
    v25[1] = 0;
    v22 = v25;
    v25[2] = v13;
    v25[3] = v14;
  }
  else
  {
    v22 = 0;
  }
  v23 = swift_task_create(v15, v22, (char *)&type metadata for () + 8, &unk_10149AAB0, v21);
  return swift_release(v23);
}

void sub_10000D2B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;

  v8 = sub_100008B04(&qword_101494070);
  __chkstk_darwin(v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CommunityIDRequest(0);
  v11 = (void *)CommunityIDRequest.__allocating_init()();
  type metadata accessor for MapsSyncQueryPredicate(0);
  v12 = sub_100008B04((uint64_t *)&unk_10149A4F0);
  v13 = swift_allocObject(v12, 72, 7);
  *(_OWORD *)(v13 + 16) = xmmword_100E22F40;
  *(_QWORD *)(v13 + 56) = &type metadata for String;
  *(_QWORD *)(v13 + 64) = sub_10000D8E0();
  *(_QWORD *)(v13 + 32) = a1;
  *(_QWORD *)(v13 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  v14 = (void *)NSPredicate.init(format:_:)(0xD000000000000019, 0x8000000100E41640, v13);
  v15 = objc_allocWithZone((Class)type metadata accessor for MapsSyncQueryOptions(0));
  v16 = v14;
  v17 = (void *)MapsSyncQueryOptions.init(predicate:sortDescriptors:range:)(v14, 0, 0);
  v18 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v10, 1, 1, v18);
  v19 = (_QWORD *)swift_allocObject(&unk_10119B570, 64, 7);
  v19[2] = 0;
  v19[3] = 0;
  v19[4] = v11;
  v19[5] = v17;
  v19[6] = a3;
  v19[7] = a4;
  v20 = v11;
  v21 = v17;
  sub_10000C128(a3, a4);
  v22 = sub_1001B0C08((uint64_t)v10, (uint64_t)&unk_101492A48, (uint64_t)v19);
  swift_release(v22);

}

void sub_10000D478(uint64_t a1, uint64_t a2, void (*a3)(_QWORD, _QWORD))
{
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;

  type metadata accessor for CommunityID(0);
  v6 = (void *)MapsSyncObject.__allocating_init()();
  swift_bridgeObjectRetain(a2);
  dispatch thunk of CommunityID.communityIdentifier.setter(a1, a2);
  dispatch thunk of CommunityID.usedCount.setter(1);
  dispatch thunk of CommunityID.expired.setter(0);
  type metadata accessor for MapsSyncStore(0);
  v7 = (void *)static MapsSyncStore.sharedStore.getter();
  v8 = sub_100008B04((uint64_t *)&unk_101493B10);
  v9 = swift_allocObject(v8, 40, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100E23F50;
  *(_QWORD *)(v9 + 32) = v6;
  v11 = v9;
  specialized Array._endMutation()(v9);
  v10 = v6;
  dispatch thunk of MapsSyncStore.save(objects:)(v11);

  swift_bridgeObjectRelease(v11);
  if (a3)
    a3(0, 0);

}

uint64_t sub_10000D5D4(void *a1, void (*a2)(uint64_t, _QWORD))
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t result;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;

  dispatch thunk of CommunityID.expired.setter(1);
  type metadata accessor for MapsSyncStore(0);
  v4 = (void *)static MapsSyncStore.sharedStore.getter();
  v5 = sub_100008B04((uint64_t *)&unk_101493B10);
  v6 = swift_allocObject(v5, 40, 7);
  *(_OWORD *)(v6 + 16) = xmmword_100E23F50;
  *(_QWORD *)(v6 + 32) = a1;
  v11 = v6;
  specialized Array._endMutation()(v6);
  v7 = a1;
  dispatch thunk of MapsSyncStore.save(objects:)(v11);

  result = swift_bridgeObjectRelease(v11);
  if (a2)
  {
    v9 = swift_allocObject(v5, 40, 7);
    *(_OWORD *)(v9 + 16) = xmmword_100E23F50;
    *(_QWORD *)(v9 + 32) = v7;
    v12 = v9;
    specialized Array._endMutation()(v9);
    v10 = v7;
    a2(v12, 0);
    return swift_bridgeObjectRelease(v12);
  }
  return result;
}

void (*sub_10000D748(void *a1, void (*a2)(uint64_t, _QWORD)))(_QWORD *, _QWORD)
{
  void (*result)(_QWORD *, _QWORD);
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  _QWORD v14[4];

  result = (void (*)(_QWORD *, _QWORD))dispatch thunk of CommunityID.usedCount.modify(v14);
  if (__OFADD__(*v5, 1))
  {
    __break(1u);
  }
  else
  {
    ++*v5;
    result(v14, 0);
    type metadata accessor for MapsSyncStore(0);
    v6 = (void *)static MapsSyncStore.sharedStore.getter();
    v7 = sub_100008B04((uint64_t *)&unk_101493B10);
    v8 = swift_allocObject(v7, 40, 7);
    *(_OWORD *)(v8 + 16) = xmmword_100E23F50;
    *(_QWORD *)(v8 + 32) = a1;
    v14[0] = v8;
    specialized Array._endMutation()(v8);
    v9 = v14[0];
    v10 = a1;
    dispatch thunk of MapsSyncStore.save(objects:)(v9);

    result = (void (*)(_QWORD *, _QWORD))swift_bridgeObjectRelease(v9);
    if (a2)
    {
      v11 = swift_allocObject(v7, 40, 7);
      *(_OWORD *)(v11 + 16) = xmmword_100E23F50;
      *(_QWORD *)(v11 + 32) = v10;
      v14[0] = v11;
      specialized Array._endMutation()(v11);
      v12 = v14[0];
      v13 = v10;
      a2(v12, 0);
      return (void (*)(_QWORD *, _QWORD))swift_bridgeObjectRelease(v12);
    }
  }
  return result;
}

uint64_t sub_10000D8B4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_10000D8D8(objc_class *a1, uint64_t a2)
{
  uint64_t v2;

  sub_10000CB00(a1, a2, *(_QWORD *)(v2 + 16));
}

unint64_t sub_10000D8E0()
{
  unint64_t result;

  result = qword_101494820;
  if (!qword_101494820)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_101494820);
  }
  return result;
}

uint64_t sub_10000D924()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  if (*(_QWORD *)(v0 + 48))
    swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10000D968()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v2 = v0[5];
  v3 = v0[6];
  v4 = v0[7];
  v5 = (_QWORD *)swift_task_alloc(dword_101492A44);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_10000DD08;
  v5[2] = v3;
  v5[3] = v4;
  v8 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of CommunityIDRequest.fetch(options:)
                                       + async function pointer to dispatch thunk of CommunityIDRequest.fetch(options:));
  v6 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CommunityIDRequest.fetch(options:)
                                  + 1));
  v5[4] = v6;
  *v6 = v5;
  v6[1] = sub_10000CBF4;
  return v8(v2);
}

unint64_t sub_10000DA04()
{
  unint64_t result;

  result = qword_101492A50;
  if (!qword_101492A50)
  {
    result = swift_getWitnessTable(&unk_100E23FF8, &type metadata for CommunityIDMapsSync.AccessError);
    atomic_store(result, &qword_101492A50);
  }
  return result;
}

uint64_t sub_10000DA48()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  if (v0[4])
    swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10000DA7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = (_QWORD *)swift_task_alloc(dword_101492A5C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10000C0E0;
  v4[2] = v2;
  v4[3] = v3;
  return swift_task_switch(sub_10000C8D8, 0, 0);
}

uint64_t sub_10000DADC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008B04(&qword_101494070);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10000DB1C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

_BYTE *initializeBufferWithCopyOfBuffer for CommunityIDMapsSync.AccessError(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CommunityIDMapsSync.AccessError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CommunityIDMapsSync.AccessError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10000DC28 + 4 * byte_100E23F65[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10000DC5C + 4 * byte_100E23F60[v4]))();
}

uint64_t sub_10000DC5C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000DC64(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10000DC6CLL);
  return result;
}

uint64_t sub_10000DC78(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10000DC80);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10000DC84(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000DC8C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000DC98(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_10000DCA0(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for CommunityIDMapsSync.AccessError()
{
  return &type metadata for CommunityIDMapsSync.AccessError;
}

unint64_t sub_10000DCC0()
{
  unint64_t result;

  result = qword_101492A68;
  if (!qword_101492A68)
  {
    result = swift_getWitnessTable(&unk_100E23FD0, &type metadata for CommunityIDMapsSync.AccessError);
    atomic_store(result, (unint64_t *)&qword_101492A68);
  }
  return result;
}

uint64_t sub_10000DD1C(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t result;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  _QWORD aBlock[3];
  void *v28;
  void (*v29)();
  uint64_t v30;
  void *v31;
  _OWORD v32[2];

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&aBlock[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&aBlock[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend(a1, "value");
  if (v12)
  {
    v13 = v12;
    _bridgeAnyObjectToAny(_:)(v32);
    swift_unknownObjectRelease(v13);
  }
  else
  {
    memset(v32, 0, sizeof(v32));
  }
  sub_10000C138((uint64_t)v32, (uint64_t)aBlock);
  if (!v28)
    return sub_10000C180((uint64_t)aBlock);
  v14 = sub_10000E4BC(0, (unint64_t *)&qword_101491C90, GEOComposedWaypoint_ptr);
  result = swift_dynamicCast(&v31, aBlock, (char *)&type metadata for Any + 8, v14, 6);
  if ((result & 1) != 0)
  {
    v16 = v31;
    sub_10000E4BC(0, (unint64_t *)&qword_101492FA0, OS_dispatch_queue_ptr);
    v26 = static OS_dispatch_queue.main.getter();
    v17 = swift_allocObject(&unk_10119B750, 32, 7);
    *(_QWORD *)(v17 + 16) = v16;
    *(_QWORD *)(v17 + 24) = a2;
    v29 = sub_10000E520;
    v30 = v17;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1001BB8D4;
    v28 = &unk_10119B768;
    v18 = _Block_copy(aBlock);
    v19 = v30;
    v20 = v16;
    swift_unknownObjectRetain(a2);
    v21 = swift_release(v19);
    static DispatchQoS.unspecified.getter(v21);
    aBlock[0] = _swiftEmptyArrayStorage;
    v22 = sub_10000E540();
    v23 = sub_100008B04((uint64_t *)&unk_101492FB0);
    v24 = sub_10000E588();
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v23, v24, v4, v22);
    v25 = (void *)v26;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v18);
    _Block_release(v18);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  return result;
}

void sub_10000DFA4(uint64_t a1, void *a2)
{
  void *v4;
  id v5;
  void *v6;
  unsigned int v7;
  id v8;
  const char *v9;
  id v10;

  v4 = (void *)objc_opt_self(CarDisplayController);
  v5 = objc_msgSend(v4, "sharedInstance");
  if (!v5 || (v6 = v5, v7 = objc_msgSend(v5, "isCarAppSceneHostingNavigation"), v6, !v7))
  {
    v8 = objc_msgSend(a2, "appCoordinator");
    v9 = "addStopWithWaypoint:";
    goto LABEL_6;
  }
  v8 = objc_msgSend(v4, "sharedInstance");
  if (v8)
  {
    v9 = "detourToWaypoint:";
LABEL_6:
    v10 = v8;
    objc_msgSend(v8, v9, a1);

    return;
  }
  __break(1u);
}

id sub_10000E0F4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FindMyActionHandler();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for FindMyActionHandler()
{
  return objc_opt_self(FindMyActionHandler);
}

uint64_t sub_10000E144(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  objc_class *MyHandleMapServiceTicket;
  _BYTE *v30;
  char *v31;
  id v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  objc_super v41;

  v4 = sub_100008B04(&qword_101494070);
  __chkstk_darwin(v4);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Handle(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v39 - v12;
  v14 = objc_opt_self(FindMyAction);
  result = swift_dynamicCastObjCClass(a1, v14);
  if (result)
  {
    v16 = objc_opt_self(FindMyAction);
    v17 = (void *)swift_dynamicCastObjCClassUnconditional(a1, v16, 0, 0, 0);
    v40 = a1;
    v18 = a2;
    v19 = objc_msgSend(v17, "findMyHandleIdentifier");
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

    v23 = sub_1001DA8C4((uint64_t)_swiftEmptyArrayStorage);
    Handle.init(withID:serverID:pushIdentifiers:expiresByGroupId:siblingIdentifiers:)(v20, v22, 0, 0, _swiftEmptyArrayStorage, v23, _swiftEmptyArrayStorage);
    v24 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v24(v11, v13, v7);
    objc_msgSend(v17, "coordinate");
    v26 = v25;
    v28 = v27;
    MyHandleMapServiceTicket = (objc_class *)type metadata accessor for FindMyHandleMapServiceTicket(0);
    v30 = objc_allocWithZone(MyHandleMapServiceTicket);
    *(_QWORD *)&v30[OBJC_IVAR____TtC4Maps28FindMyHandleMapServiceTicket_ticket] = 0;
    v30[OBJC_IVAR____TtC4Maps28FindMyHandleMapServiceTicket_isCancelled] = 0;
    v24(&v30[OBJC_IVAR____TtC4Maps28FindMyHandleMapServiceTicket_handle], v11, v7);
    v31 = &v30[OBJC_IVAR____TtC4Maps28FindMyHandleMapServiceTicket_coordinate];
    *(_QWORD *)v31 = v26;
    *((_QWORD *)v31 + 1) = v28;
    v31[16] = 0;
    v41.receiver = v30;
    v41.super_class = MyHandleMapServiceTicket;
    v32 = objc_msgSendSuper2(&v41, "init");
    v33 = *(void (**)(char *, uint64_t))(v8 + 8);
    v33(v11, v7);
    v34 = swift_allocObject(&unk_10119B700, 24, 7);
    *(_QWORD *)(v34 + 16) = v18;
    v35 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v6, 1, 1, v35);
    v36 = (_QWORD *)swift_allocObject(&unk_10119B728, 80, 7);
    v36[2] = 0;
    v36[3] = 0;
    v36[4] = v32;
    v36[5] = 0;
    v36[6] = sub_10000E468;
    v36[7] = v34;
    v36[8] = 0;
    v36[9] = 0;
    swift_unknownObjectRetain(v18);
    v37 = v32;
    swift_retain(v34);
    v38 = sub_1001B0C08((uint64_t)v6, (uint64_t)&unk_101491C80, (uint64_t)v36);

    swift_release(v34);
    swift_release(v38);
    return ((uint64_t (*)(char *, uint64_t))v33)(v13, v7);
  }
  return result;
}

uint64_t sub_10000E444()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10000E468(void *a1)
{
  uint64_t v1;

  return sub_10000DD1C(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10000E470()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 56));
  if (*(_QWORD *)(v0 + 64))
    swift_release(*(_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10000E4BC(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_10000E4F4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10000E520()
{
  uint64_t v0;

  sub_10000DFA4(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10000E528(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10000E538(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_10000E540()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101492BB0;
  if (!qword_101492BB0)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_101492BB0);
  }
  return result;
}

unint64_t sub_10000E588()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101492BC0;
  if (!qword_101492BC0)
  {
    v1 = sub_10000E5D4((uint64_t *)&unk_101492FB0);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_101492BC0);
  }
  return result;
}

uint64_t sub_10000E5D4(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_10000E618()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100008B04(&qword_101492B40);
  sub_10000E930(v0, qword_1014D45D8);
  sub_10000E918(v0, (uint64_t)qword_1014D45D8);
  v1 = sub_10000E4BC(0, &qword_101492B48, off_1011960F0);
  return UICollectionView.CellRegistration.init(handler:)(sub_10000E698, 0, v1, &type metadata for HomeListCollectionHandlerCellModel);
}

id sub_10000E698(void *a1, uint64_t a2, _QWORD *a3)
{
  return objc_msgSend(a1, "setCollectionInfo:", *a3);
}

uint64_t sub_10000E6A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_101490C98 != -1)
    swift_once(&qword_101490C98, sub_10000E618);
  v2 = sub_100008B04(&qword_101492B40);
  v3 = sub_10000E918(v2, (uint64_t)qword_1014D45D8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

id sub_10000E71C()
{
  id *v0;
  id v1;
  id v2;

  v1 = *v0;
  v2 = *v0;
  return v1;
}

Swift::Int sub_10000E740()
{
  void **v0;
  void *v1;
  id v2;
  _QWORD v4[9];

  v1 = *v0;
  Hasher.init(_seed:)(v4, 0);
  v2 = v1;
  NSObject.hash(into:)(v4);

  return Hasher._finalize()();
}

void sub_10000E78C(uint64_t a1)
{
  id *v1;
  id v3;

  v3 = *v1;
  NSObject.hash(into:)(a1);

}

Swift::Int sub_10000E7D0(uint64_t a1)
{
  void **v1;
  void *v2;
  id v3;
  _QWORD v5[9];

  v2 = *v1;
  Hasher.init(_seed:)(v5, a1);
  v3 = v2;
  NSObject.hash(into:)(v5);

  return Hasher._finalize()();
}

uint64_t sub_10000E818(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  sub_10000E4BC(0, (unint64_t *)&qword_101492E60, NSObject_ptr);
  return static NSObject.== infix(_:_:)(v2, v3) & 1;
}

unint64_t sub_10000E86C()
{
  unint64_t result;

  result = qword_101492AF8;
  if (!qword_101492AF8)
  {
    result = swift_getWitnessTable("Iw7", &type metadata for HomeListCollectionHandlerCellModel);
    atomic_store(result, (unint64_t *)&qword_101492AF8);
  }
  return result;
}

unint64_t sub_10000E8B0(uint64_t a1)
{
  unint64_t result;

  result = sub_10000E8D4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10000E8D4()
{
  unint64_t result;

  result = qword_101492B38;
  if (!qword_101492B38)
  {
    result = swift_getWitnessTable(&unk_100E24098, &type metadata for HomeListCollectionHandlerCellModel);
    atomic_store(result, (unint64_t *)&qword_101492B38);
  }
  return result;
}

uint64_t sub_10000E918(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t *sub_10000E930(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

ValueMetadata *type metadata accessor for HomeListCollectionHandlerCellModel()
{
  return &type metadata for HomeListCollectionHandlerCellModel;
}

id sub_10000E980()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  objc_super v6;

  v1 = v0;
  v2 = OBJC_IVAR____TtC4Maps32AirQualityConditionsDataProvider_updatingTimer;
  v3 = *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps32AirQualityConditionsDataProvider_updatingTimer];
  if (v3)
  {
    swift_getObjectType(v3);
    swift_unknownObjectRetain(v3);
    OS_dispatch_source.cancel()();
    v4 = *(_QWORD *)&v1[v2];
    *(_QWORD *)&v1[v2] = 0;
    swift_unknownObjectRelease(v3);
    swift_unknownObjectRelease(v4);
  }
  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for AirQualityConditionsDataProvider();
  return objc_msgSendSuper2(&v6, "dealloc");
}

void sub_10000EAF0(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC4Maps32AirQualityConditionsDataProvider_enabled) != (a1 & 1))
  {
    v2 = v1;
    if (*(_BYTE *)(v1 + OBJC_IVAR____TtC4Maps32AirQualityConditionsDataProvider_enabled))
    {
      if (qword_101490CA0 != -1)
        swift_once(&qword_101490CA0, sub_100010978);
      v3 = type metadata accessor for Logger(0);
      v4 = sub_10000E918(v3, (uint64_t)qword_1014D45F0);
      v5 = Logger.logObject.getter(v4);
      v6 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v5, v6))
      {
        v7 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "Enabling air quality conditions data provider", v7, 2u);
        swift_slowDealloc(v7, -1, -1);
      }

      sub_10000F054();
    }
    else
    {
      if (qword_101490CA0 != -1)
        swift_once(&qword_101490CA0, sub_100010978);
      v8 = type metadata accessor for Logger(0);
      v9 = sub_10000E918(v8, (uint64_t)qword_1014D45F0);
      v10 = Logger.logObject.getter(v9);
      v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        v12 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Disabling air quality conditions data provider", v12, 2u);
        swift_slowDealloc(v12, -1, -1);
      }

      v13 = OBJC_IVAR____TtC4Maps32AirQualityConditionsDataProvider_updatingTimer;
      v14 = *(_QWORD *)(v2 + OBJC_IVAR____TtC4Maps32AirQualityConditionsDataProvider_updatingTimer);
      if (v14)
      {
        swift_getObjectType(*(_QWORD *)(v2 + OBJC_IVAR____TtC4Maps32AirQualityConditionsDataProvider_updatingTimer));
        swift_unknownObjectRetain(v14);
        OS_dispatch_source.cancel()();
        v15 = *(_QWORD *)(v2 + v13);
        *(_QWORD *)(v2 + v13) = 0;
        swift_unknownObjectRelease(v14);
        swift_unknownObjectRelease(v15);
      }
    }
  }
}

uint64_t sub_10000ED0C()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD aBlock[5];
  uint64_t v22;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v20 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000E4BC(0, (unint64_t *)&qword_101492FA0, OS_dispatch_queue_ptr);
  v9 = (void *)static OS_dispatch_queue.main.getter();
  v10 = swift_allocObject(&unk_10119B8D0, 24, 7);
  *(_QWORD *)(v10 + 16) = v0;
  aBlock[4] = sub_100010DD4;
  v22 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BB8D4;
  aBlock[3] = &unk_10119B8E8;
  v11 = _Block_copy(aBlock);
  v12 = v22;
  v13 = v1;
  v14 = swift_release(v12);
  static DispatchQoS.unspecified.getter(v14);
  aBlock[0] = _swiftEmptyArrayStorage;
  v15 = sub_10000BC84((unint64_t *)&qword_101492BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v16 = sub_100008B04((uint64_t *)&unk_101492FB0);
  v17 = sub_100010D70((unint64_t *)&qword_101492BC0, (uint64_t *)&unk_101492FB0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v16, v17, v2, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v11);
  _Block_release(v11);

  (*(void (**)(char *, uint64_t))(v20 + 8))(v4, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10000EF20(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v2 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a1
                                                             + OBJC_IVAR____TtC4Maps32AirQualityConditionsDataProvider_observers), "allObjects"));
  v3 = sub_100008B04((uint64_t *)&unk_101492C30);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  if (!((unint64_t)v4 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(v4);
    if (v5)
      goto LABEL_3;
    return swift_bridgeObjectRelease_n(v4, 2);
  }
  if (v4 < 0)
    v10 = v4;
  else
    v10 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v4);
  result = _CocoaArrayWrapper.endIndex.getter(v10);
  v5 = result;
  if (!result)
    return swift_bridgeObjectRelease_n(v4, 2);
LABEL_3:
  if (v5 >= 1)
  {
    v7 = 0;
    v8 = OBJC_IVAR____TtC4Maps32AirQualityConditionsDataProvider_airQualityConditions;
    do
    {
      if ((v4 & 0xC000000000000001) != 0)
      {
        v9 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v4);
      }
      else
      {
        v9 = *(void **)(v4 + 8 * v7 + 32);
        swift_unknownObjectRetain(v9);
      }
      ++v7;
      objc_msgSend(v9, "airQualityConditionsDataProviderDidChangeAirQualityConditions:", *(_QWORD *)(a1 + v8));
      swift_unknownObjectRelease(v9);
    }
    while (v5 != v7);
    return swift_bridgeObjectRelease_n(v4, 2);
  }
  __break(1u);
  return result;
}

void sub_10000F054()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  double v31;
  uint64_t v32;
  double v33;
  __n128 v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t ObjectType;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  void *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  void **aBlock;
  _QWORD v76[4];
  uint64_t v77;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v69 = *(_QWORD *)(v5 - 8);
  v70 = v5;
  __chkstk_darwin(v5);
  v68 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for DispatchTimeInterval(0);
  v66 = *(_QWORD *)(v73 - 8);
  v7 = __chkstk_darwin(v73);
  v67 = (uint64_t *)((char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v72 = (uint64_t *)((char *)&v58 - v9);
  v74 = type metadata accessor for DispatchTime(0);
  v65 = *(_QWORD *)(v74 - 8);
  v10 = __chkstk_darwin(v74);
  v12 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v71 = (char *)&v58 - v13;
  v64 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (_QWORD *)type metadata accessor for OS_dispatch_source.TimerFlags(0);
  v18 = *(v17 - 1);
  __chkstk_darwin(v17);
  v20 = (char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC4Maps32AirQualityConditionsDataProvider_enabled) != 1)
    return;
  v61 = v4;
  v62 = v2;
  v63 = v1;
  v21 = OBJC_IVAR____TtC4Maps32AirQualityConditionsDataProvider_updatingTimer;
  v22 = *(_QWORD *)(v0 + OBJC_IVAR____TtC4Maps32AirQualityConditionsDataProvider_updatingTimer);
  v60 = v22;
  if (v22)
    goto LABEL_4;
  v23 = v0;
  v59 = sub_10000E4BC(0, &qword_101492C10, OS_dispatch_source_ptr);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v58 = sub_10000BC84(&qword_101492C18, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags, (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
  v24 = sub_100008B04(&qword_101492C20);
  v25 = sub_100010D70(&qword_101492C28, &qword_101492C20, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v24, v25, v17, v58);
  sub_10000E4BC(0, (unint64_t *)&qword_101492FA0, OS_dispatch_queue_ptr);
  v26 = (void *)static OS_dispatch_queue.main.getter();
  v27 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v20, v26);

  (*(void (**)(char *, _QWORD *))(v18 + 8))(v20, v17);
  v28 = *(_QWORD *)(v23 + v21);
  *(_QWORD *)(v23 + v21) = v27;
  swift_unknownObjectRelease(v28);
  v0 = v23;
  v22 = *(_QWORD *)(v23 + v21);
  if (v22)
  {
LABEL_4:
    v59 = v0;
    v29 = *(void **)(v0 + OBJC_IVAR____TtC4Maps32AirQualityConditionsDataProvider_airQualityConditions);
    if (v29)
    {
      swift_unknownObjectRetain(v22);
      v30 = objc_msgSend(v29, "expirationDate");
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      v31 = Date.timeIntervalSinceNow.getter();
      v32 = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v64);
      v33 = 60.0;
      v34.n128_f64[0] = v31 + 60.0;
      v35 = v74;
      v36 = v71;
      if (v31 + 60.0 > 60.0)
        v33 = v31 + 60.0;
    }
    else
    {
      v32 = swift_unknownObjectRetain(v22);
      v33 = 60.0;
      v35 = v74;
      v36 = v71;
    }
    static DispatchTime.now()(v32, v34);
    if ((~*(_QWORD *)&v33 & 0x7FF0000000000000) != 0)
    {
      if (v33 > -9.22337204e18)
      {
        if (v33 < 9.22337204e18)
        {
          v38 = v72;
          v37 = v73;
          *v72 = (uint64_t)v33;
          v39 = v66;
          v20 = *(char **)(v66 + 104);
          ((void (*)(_QWORD *, _QWORD, uint64_t))v20)(v38, enum case for DispatchTimeInterval.seconds(_:), v37);
          + infix(_:_:)(v12, v38);
          v17 = *(_QWORD **)(v39 + 8);
          ((void (*)(_QWORD *, uint64_t))v17)(v38, v37);
          v16 = *(char **)(v65 + 8);
          ((void (*)(char *, uint64_t))v16)(v12, v35);
          if (qword_101490CA0 == -1)
          {
LABEL_12:
            v40 = type metadata accessor for Logger(0);
            v41 = sub_10000E918(v40, (uint64_t)qword_1014D45F0);
            v42 = Logger.logObject.getter(v41);
            v43 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v42, v43))
            {
              v44 = (uint8_t *)swift_slowAlloc(12, -1);
              *(_DWORD *)v44 = 134217984;
              aBlock = *(void ***)&v33;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v76, v44 + 4, v44 + 12);
              _os_log_impl((void *)&_mh_execute_header, v42, v43, "Scheduling air quality conditions refresh in %f seconds", v44, 0xCu);
              swift_slowDealloc(v44, -1, -1);
            }

            ObjectType = swift_getObjectType(v22);
            v47 = v72;
            v46 = v73;
            ((void (*)(_QWORD *, _QWORD, uint64_t))v20)(v72, enum case for DispatchTimeInterval.never(_:), v73);
            v48 = v67;
            *v67 = 30;
            ((void (*)(_QWORD *, _QWORD, uint64_t))v20)(v48, enum case for DispatchTimeInterval.nanoseconds(_:), v46);
            OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v36, v47, v48, ObjectType);
            ((void (*)(_QWORD *, uint64_t))v17)(v48, v46);
            ((void (*)(_QWORD *, uint64_t))v17)(v47, v46);
            v49 = swift_allocObject(&unk_10119B880, 24, 7);
            swift_unknownObjectWeakInit(v49 + 16, v59);
            v76[3] = sub_100010D68;
            v77 = v49;
            aBlock = _NSConcreteStackBlock;
            v76[0] = 1107296256;
            v76[1] = sub_1001BB8D4;
            v76[2] = &unk_10119B898;
            v50 = _Block_copy(&aBlock);
            swift_retain(v49);
            v51 = v68;
            j___s8Dispatch0A3QoSV11unspecifiedACvgZ(ObjectType);
            v52 = v61;
            sub_100148A00();
            OS_dispatch_source.setEventHandler(qos:flags:handler:)(v51, v52, v50, ObjectType);
            _Block_release(v50);
            (*(void (**)(char *, uint64_t))(v62 + 8))(v52, v63);
            (*(void (**)(char *, uint64_t))(v69 + 8))(v51, v70);
            swift_release(v77);
            swift_release(v49);
            if (v60)
            {
              ((void (*)(char *, uint64_t))v16)(v36, v74);
              swift_unknownObjectRelease(v22);
            }
            else
            {
              OS_dispatch_source.resume()();
              swift_unknownObjectRelease(v22);
              ((void (*)(char *, uint64_t))v16)(v36, v74);
            }
            return;
          }
LABEL_26:
          swift_once(&qword_101490CA0, sub_100010978);
          goto LABEL_12;
        }
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_25;
  }
  if (qword_101490CA0 != -1)
    swift_once(&qword_101490CA0, sub_100010978);
  v53 = type metadata accessor for Logger(0);
  v54 = sub_10000E918(v53, (uint64_t)qword_1014D45F0);
  v55 = Logger.logObject.getter(v54);
  v56 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v55, v56))
  {
    v57 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v57 = 0;
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "Failed to create timer to refresh air quality conditions", v57, 2u);
    swift_slowDealloc(v57, -1, -1);
  }

}

void sub_10000F7F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  _BYTE v12[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v12, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    v4 = *(void **)(Strong + OBJC_IVAR____TtC4Maps32AirQualityConditionsDataProvider_lastSavedLocation);
    if (v4)
    {
      v5 = qword_101490CA0;
      v6 = v4;
      if (v5 != -1)
        swift_once(&qword_101490CA0, sub_100010978);
      v7 = type metadata accessor for Logger(0);
      v8 = sub_10000E918(v7, (uint64_t)qword_1014D45F0);
      v9 = Logger.logObject.getter(v8);
      v10 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v9, v10))
      {
        v11 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "Scheduled air quality conditions refresh", v11, 2u);
        swift_slowDealloc(v11, -1, -1);
      }

      sub_10000F92C(v6);
    }
    else
    {
      v6 = (id)Strong;
    }

  }
}

uint64_t sub_10000F92C(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  uint64_t result;
  id v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;

  v2 = v1;
  v4 = sub_100008B04(&qword_101494070);
  __chkstk_darwin(v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000E4BC(0, (unint64_t *)&qword_101492FA0, OS_dispatch_queue_ptr);
  *v10 = static OS_dispatch_queue.main.getter();
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  v11 = _dispatchPreconditionTest(_:)(v10);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) != 0)
  {
    v13 = objc_msgSend((id)objc_opt_self(WeatherSettingsManager), "sharedManager");
    v14 = objc_msgSend(v13, "shouldShowAirQualityConditions");

    if (v14 && *((_BYTE *)v2 + OBJC_IVAR____TtC4Maps32AirQualityConditionsDataProvider_enabled) == 1)
    {
      v15 = type metadata accessor for TaskPriority(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v6, 1, 1, v15);
      v16 = (_QWORD *)swift_allocObject(&unk_10119B858, 48, 7);
      v16[2] = 0;
      v16[3] = 0;
      v16[4] = v2;
      v16[5] = a1;
      v17 = v2;
      v18 = a1;
      v19 = sub_10001049C((uint64_t)v6, (uint64_t)&unk_101492BD8, (uint64_t)v16);
      return swift_release(v19);
    }
    else
    {
      return sub_1000105D0(0);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10000FB00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v5[4] = a4;
  v5[5] = a5;
  v6 = type metadata accessor for Date(0);
  v5[6] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[7] = v7;
  v5[8] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for WeatherMetadata(0);
  v5[9] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[10] = v9;
  v5[11] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v5[12] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[13] = v11;
  v5[14] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AirQualityScaleCategory(0);
  v5[15] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v5[16] = v13;
  v5[17] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for AirQualityScale(0);
  v5[18] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v5[19] = v15;
  v5[20] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for AirQuality(0);
  v5[21] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v5[22] = v17;
  v5[23] = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100008B04(&qword_101492BE0);
  v5[24] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v5[25] = v19;
  v5[26] = swift_task_alloc((*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100008B04(&qword_101492BE8);
  v5[27] = v20;
  v21 = (*(_QWORD *)(*(_QWORD *)(v20 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[28] = swift_task_alloc(v21);
  v5[29] = swift_task_alloc(v21);
  return swift_task_switch(sub_10000FC8C, 0, 0);
}

uint64_t sub_10000FC8C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _QWORD *v7;

  if (qword_101490CA0 != -1)
    swift_once(&qword_101490CA0, sub_100010978);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10000E918(v1, (uint64_t)qword_1014D45F0);
  v0[30] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fetching air quality conditions", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v0[27];

  static WeatherQuery.airQuality.getter(v6);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to WeatherService.weather<A>(for:including:)[1]);
  v0[31] = v7;
  *v7 = v0;
  v7[1] = sub_10000FDBC;
  return WeatherService.weather<A>(for:including:)(v0[29], v0[5], v0[26], v0[27]);
}

uint64_t sub_10000FDBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 248);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  *(_QWORD *)(*(_QWORD *)v1 + 256) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0)
    v6 = sub_1000103F4;
  else
    v6 = sub_10000FE40;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10000FE40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  id v50;
  NSString v51;
  NSURL *v52;
  void *v53;
  void *v54;
  Class isa;
  NSString v56;
  id v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v1 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 176);
  sub_100010C7C(*(_QWORD *)(v0 + 232), v1);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = sub_100010CC4(*(_QWORD *)(v0 + 224), &qword_101492BE8);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to retrieve air quality conditions", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }
    v8 = *(_QWORD *)(v0 + 232);

    sub_1000105D0(0);
LABEL_12:
    sub_100010CC4(v8, &qword_101492BE8);
    v66 = *(_QWORD *)(v0 + 224);
    v67 = *(_QWORD *)(v0 + 208);
    v68 = *(_QWORD *)(v0 + 184);
    v69 = *(_QWORD *)(v0 + 160);
    v70 = *(_QWORD *)(v0 + 136);
    v71 = *(_QWORD *)(v0 + 112);
    v72 = *(_QWORD *)(v0 + 88);
    v73 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 232));
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v9 = *(_QWORD *)(v0 + 160);
  v10 = *(_QWORD *)(v0 + 144);
  v11 = *(_QWORD *)(v0 + 152);
  v12 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 32))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 168));
  v13 = AirQuality.scale.getter(v12);
  v14 = AirQualityScale.isNumerical.getter(v13);
  v15 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8);
  v16 = v15(v9, v10);
  v18 = *(_QWORD *)(v0 + 128);
  v17 = *(_QWORD *)(v0 + 136);
  v19 = *(_QWORD *)(v0 + 120);
  if ((v14 & 1) != 0)
  {
    v20 = sub_100008B04(&qword_101492BF0);
    v21 = swift_allocObject(v20, 64, 7);
    *(_OWORD *)(v21 + 16) = xmmword_100E22F70;
    *(_QWORD *)(v0 + 16) = ((uint64_t (*)(void))AirQuality.index.getter)();
    sub_100010D00();
    v22 = BinaryInteger.formatted()();
    *(Swift::String *)(v21 + 32) = v22;
    v23 = AirQuality.currentScaleCategory.getter(v22._countAndFlagsBits);
    v24 = AirQualityScaleCategory.description.getter(v23);
    v26 = v25;
    v27 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v27(v17, v19);
    *(_QWORD *)(v21 + 48) = v24;
    *(_QWORD *)(v21 + 56) = v26;
    *(_QWORD *)(v0 + 24) = v21;
    v28 = sub_100008B04((uint64_t *)&unk_101492C00);
    v29 = sub_100010D70((unint64_t *)&qword_10149A590, (uint64_t *)&unk_101492C00, (const char *)&protocol conformance descriptor for [A]);
    BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v28, v29);
    v31 = v30;
    v32 = swift_bridgeObjectRelease(v21);
  }
  else
  {
    v33 = AirQuality.currentScaleCategory.getter(v16);
    AirQualityScaleCategory.description.getter(v33);
    v31 = v34;
    v27 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v32 = ((uint64_t (*)(uint64_t, uint64_t))v27)(v17, v19);
  }
  v35 = AirQuality.index.getter(v32);
  if ((v35 & 0x8000000000000000) == 0)
  {
    v81 = v31;
    v36 = *(_QWORD *)(v0 + 160);
    v38 = *(_QWORD *)(v0 + 136);
    v37 = *(_QWORD *)(v0 + 144);
    v39 = *(_QWORD *)(v0 + 120);
    v86 = *(_QWORD *)(v0 + 112);
    v84 = *(_QWORD *)(v0 + 104);
    v85 = *(_QWORD *)(v0 + 96);
    v40 = (uint64_t (*)(uint64_t, uint64_t))v27;
    v41 = *(_QWORD *)(v0 + 88);
    v77 = *(_QWORD *)(v0 + 80);
    v78 = *(_QWORD *)(v0 + 72);
    v82 = *(_QWORD *)(v0 + 56);
    v83 = *(_QWORD *)(v0 + 48);
    v75 = *(void **)(v0 + 40);
    v76 = *(_QWORD *)(v0 + 64);
    v80 = v35;
    v42 = AirQuality.scale.getter(v35);
    v79 = AirQualityScale.isNumerical.getter(v42);
    v43 = v15(v36, v37);
    v44 = AirQuality.currentScaleCategory.getter(v43);
    AirQualityScaleCategory.color.getter(v44);
    v46 = v45;
    v47 = v40(v38, v39);
    AirQuality.learnMoreURL.getter(v47);
    v48 = v75;
    v49 = AirQuality.metadata.getter();
    WeatherMetadata.expirationDate.getter(v49);
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v41, v78);
    v50 = objc_allocWithZone((Class)AirQualityConditions);
    v51 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v46);
    URL._bridgeToObjectiveC()(v52);
    v54 = v53;
    isa = Date._bridgeToObjectiveC()().super.isa;
    v56 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v81);
    v57 = objc_msgSend(v50, "initWithAirQualityIndex:isNumerical:color:learnMoreURL:forLocation:withExpirationDate:airQualityDescription:", v80, v79 & 1, v51, v54, v48, isa, v56);

    (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v76, v83);
    v58 = (*(uint64_t (**)(uint64_t, uint64_t))(v84 + 8))(v86, v85);
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v59, v60))
    {
      v61 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v61 = 0;
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "Successfully fetched air quality conditions", v61, 2u);
      swift_slowDealloc(v61, -1, -1);
    }
    v8 = *(_QWORD *)(v0 + 232);
    v63 = *(_QWORD *)(v0 + 176);
    v62 = *(_QWORD *)(v0 + 184);
    v64 = *(_QWORD *)(v0 + 168);

    v65 = v57;
    sub_1000105D0(v57);

    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v62, v64);
    goto LABEL_12;
  }
  return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
}

uint64_t sub_1000103F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 112);
  v7 = *(_QWORD *)(v0 + 88);
  v8 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 232));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001049C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned __int8 v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6);
  if ((_DWORD)v8 == 1)
  {
    sub_100010CC4(a1, &qword_101494070);
    v9 = 7168;
    v10 = *(_QWORD *)(a3 + 16);
    if (!v10)
    {
LABEL_6:
      v16 = 0;
      return swift_task_create(v9, v16, (char *)&type metadata for () + 8, a2, a3);
    }
  }
  else
  {
    v17 = TaskPriority.rawValue.getter(v8);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v9 = v17 | 0x1C00;
    v10 = *(_QWORD *)(a3 + 16);
    if (!v10)
      goto LABEL_6;
  }
  v11 = *(_QWORD *)(a3 + 24);
  ObjectType = swift_getObjectType(v10);
  swift_unknownObjectRetain(v10);
  v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
  v15 = v14;
  swift_unknownObjectRelease(v10);
  if (!(v15 | v13))
    goto LABEL_6;
  v19[0] = 0;
  v19[1] = 0;
  v16 = v19;
  v19[2] = v13;
  v19[3] = v15;
  return swift_task_create(v9, v16, (char *)&type metadata for () + 8, a2, a3);
}

uint64_t sub_1000105D0(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD aBlock[5];
  uint64_t v24;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v22 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000E4BC(0, (unint64_t *)&qword_101492FA0, OS_dispatch_queue_ptr);
  v10 = (void *)static OS_dispatch_queue.main.getter();
  v11 = swift_allocObject(&unk_10119B808, 32, 7);
  *(_QWORD *)(v11 + 16) = v1;
  *(_QWORD *)(v11 + 24) = a1;
  aBlock[4] = sub_100010BB0;
  v24 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BB8D4;
  aBlock[3] = &unk_10119B820;
  v12 = _Block_copy(aBlock);
  v13 = v24;
  v14 = a1;
  v15 = v2;
  v16 = swift_release(v13);
  static DispatchQoS.unspecified.getter(v16);
  aBlock[0] = _swiftEmptyArrayStorage;
  v17 = sub_10000BC84((unint64_t *)&qword_101492BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_100008B04((uint64_t *)&unk_101492FB0);
  v19 = sub_100010D70((unint64_t *)&qword_101492BC0, (uint64_t *)&unk_101492FB0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v18, v19, v4, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v12);
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v21);
}

uint64_t sub_1000107EC(uint64_t a1, void *a2)
{
  void *v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;

  v4 = *(void **)(a1 + OBJC_IVAR____TtC4Maps32AirQualityConditionsDataProvider_airQualityConditions);
  *(_QWORD *)(a1 + OBJC_IVAR____TtC4Maps32AirQualityConditionsDataProvider_airQualityConditions) = a2;
  v5 = a2;

  if (a2)
  {
    v6 = objc_msgSend(v5, "location");
    if (v6)
    {
      v7 = *(void **)(a1 + OBJC_IVAR____TtC4Maps32AirQualityConditionsDataProvider_lastSavedLocation);
      *(_QWORD *)(a1 + OBJC_IVAR____TtC4Maps32AirQualityConditionsDataProvider_lastSavedLocation) = v6;

    }
  }
  v8 = sub_10000ED0C();
  return sub_10000F054(v8);
}

id sub_10001086C()
{
  char *v0;
  uint64_t v1;
  id v2;
  char *v3;
  uint64_t v4;
  objc_super v6;

  v1 = OBJC_IVAR____TtC4Maps32AirQualityConditionsDataProvider_observers;
  v2 = objc_allocWithZone((Class)NSHashTable);
  v3 = v0;
  *(_QWORD *)&v0[v1] = objc_msgSend(v2, "init");
  *(_QWORD *)&v3[OBJC_IVAR____TtC4Maps32AirQualityConditionsDataProvider_airQualityConditions] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC4Maps32AirQualityConditionsDataProvider_updatingTimer] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC4Maps32AirQualityConditionsDataProvider_lastSavedLocation] = 0;
  v4 = OBJC_IVAR____TtC4Maps32AirQualityConditionsDataProvider_weatherService;
  type metadata accessor for WeatherService(0);
  *(_QWORD *)&v3[v4] = WeatherService.__allocating_init()();
  v3[OBJC_IVAR____TtC4Maps32AirQualityConditionsDataProvider_enabled] = 1;

  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for AirQualityConditionsDataProvider();
  return objc_msgSendSuper2(&v6, "init");
}

uint64_t type metadata accessor for AirQualityConditionsDataProvider()
{
  return objc_opt_self(_TtC4Maps32AirQualityConditionsDataProvider);
}

uint64_t sub_100010978()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000E930(v0, qword_1014D45F0);
  sub_10000E918(v0, (uint64_t)qword_1014D45F0);
  return Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xEE007370614D2E65, 0x72656874616557, 0xE700000000000000);
}

void sub_100010A58(void *a1)
{
  uint64_t v1;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  id v11;

  v3 = *(void **)(v1 + OBJC_IVAR____TtC4Maps32AirQualityConditionsDataProvider_lastSavedLocation);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps32AirQualityConditionsDataProvider_lastSavedLocation) = a1;
  v4 = a1;

  if (a1)
  {
    v5 = qword_101490CA0;
    v11 = v4;
    if (v5 != -1)
      swift_once(&qword_101490CA0, sub_100010978);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_10000E918(v6, (uint64_t)qword_1014D45F0);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Location-based air quality conditions refresh", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    sub_10000F92C(v11);
  }
  else
  {
    sub_1000105D0(0);
  }
}

uint64_t sub_100010B84()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100010BB0()
{
  uint64_t v0;

  return sub_1000107EC(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100010BB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100010BC8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100010BD0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100010C04(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_101492BD4);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10000C0E0;
  return sub_10000FB00(a1, v4, v5, v7, v6);
}

uint64_t sub_100010C7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008B04(&qword_101492BE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100010CC4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100008B04(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_100010D00()
{
  unint64_t result;

  result = qword_101492BF8;
  if (!qword_101492BF8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_101492BF8);
  }
  return result;
}

uint64_t sub_100010D44()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100010D68()
{
  uint64_t v0;

  sub_10000F7F4(v0);
}

uint64_t sub_100010D70(unint64_t *a1, uint64_t *a2, const char *a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10000E5D4(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100010DB0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100010DD4()
{
  uint64_t v0;

  return sub_10000EF20(*(_QWORD *)(v0 + 16));
}

void *LibraryLinkOutlineCellModel.libraryItemsCount.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;
  _BYTE v5[24];

  v1 = (void **)(v0 + OBJC_IVAR____TtC4Maps27LibraryLinkOutlineCellModel_libraryItemsCount);
  swift_beginAccess(v0 + OBJC_IVAR____TtC4Maps27LibraryLinkOutlineCellModel_libraryItemsCount, v5, 0, 0);
  v2 = *v1;
  v3 = v2;
  return v2;
}

void LibraryLinkOutlineCellModel.libraryItemsCount.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;
  _BYTE v5[24];

  v3 = (void **)(v1 + OBJC_IVAR____TtC4Maps27LibraryLinkOutlineCellModel_libraryItemsCount);
  swift_beginAccess(v3, v5, 1, 0);
  v4 = *v3;
  *v3 = a1;

}

void *LibraryLinkOutlineCellModel.libraryItemsCount.modify(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC4Maps27LibraryLinkOutlineCellModel_libraryItemsCount, a1, 33, 0);
  return &j__swift_endAccess;
}

uint64_t LibraryLinkOutlineCellModel.needsReload(fromPreviousViewModel:)(void *a1)
{
  uint64_t v1;

  return objc_msgSend(a1, "isEqual:", v1) ^ 1;
}

uint64_t LibraryLinkOutlineCellModel.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t ObjectType;
  void *v4;
  id *v5;
  id v6;
  id v7;
  void **v8;
  void *v9;
  id v10;
  id v11;
  char v12;
  id v13;
  _QWORD v15[3];
  _BYTE v16[24];
  uint64_t v17;

  ObjectType = swift_getObjectType(v1);
  sub_1000110D4(a1, (uint64_t)v16);
  if (v17)
  {
    if (!swift_dynamicCast(v15, v16, (char *)&type metadata for Any + 8, ObjectType, 6))
    {
LABEL_11:
      v12 = 0;
      return v12 & 1;
    }
    v4 = (void *)v15[0];
    v5 = (id *)(v15[0] + OBJC_IVAR____TtC4Maps27LibraryLinkOutlineCellModel_libraryItemsCount);
    swift_beginAccess(v15[0] + OBJC_IVAR____TtC4Maps27LibraryLinkOutlineCellModel_libraryItemsCount, v15, 0, 0);
    v6 = *v5;
    v7 = *v5;
  }
  else
  {
    sub_10000C180((uint64_t)v16);
    v6 = 0;
    v4 = 0;
  }
  v8 = (void **)(v1 + OBJC_IVAR____TtC4Maps27LibraryLinkOutlineCellModel_libraryItemsCount);
  swift_beginAccess(v1 + OBJC_IVAR____TtC4Maps27LibraryLinkOutlineCellModel_libraryItemsCount, v16, 0, 0);
  v9 = *v8;
  if (!v6)
  {
    v13 = v9;

    if (!v9)
    {
      v12 = 1;
      return v12 & 1;
    }

    goto LABEL_11;
  }
  if (!v9)
  {

    goto LABEL_11;
  }
  type metadata accessor for LibraryItemsCount();
  v10 = v9;
  v11 = v6;
  v12 = static NSObject.== infix(_:_:)(v11, v10);

  return v12 & 1;
}

uint64_t sub_1000110D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008B04((uint64_t *)&unk_101493350);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id LibraryLinkOutlineCellModel.hash.getter()
{
  uint64_t v0;
  id *v1;
  id result;
  _BYTE v3[24];

  v1 = (id *)(v0 + OBJC_IVAR____TtC4Maps27LibraryLinkOutlineCellModel_libraryItemsCount);
  swift_beginAccess(v0 + OBJC_IVAR____TtC4Maps27LibraryLinkOutlineCellModel_libraryItemsCount, v3, 0, 0);
  result = *v1;
  if (*v1)
    return objc_msgSend(result, "hash");
  return result;
}

id LibraryLinkOutlineCellModel.cellRegistration.getter()
{
  if (qword_101490CA8 != -1)
    swift_once(&qword_101490CA8, sub_100011AD4);
  return (id)qword_1014D4608;
}

id LibraryLinkOutlineCellModel.homeActionObject.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  id v4;

  a1[3] = swift_getObjectType(v1);
  *a1 = v4;
  return v4;
}

double LibraryLinkOutlineCellModel.homeDragAndDropObject.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

id CuratedCollectionItemLibraryCoordinator.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

id LibraryLinkOutlineCellModel.init()()
{
  char *v0;
  objc_class *ObjectType;
  objc_super v3;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps27LibraryLinkOutlineCellModel_libraryItemsCount] = 0;
  v3.receiver = v0;
  v3.super_class = ObjectType;
  return objc_msgSendSuper2(&v3, "init");
}

id sub_1000113F4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  id *v3;
  _BYTE v5[24];

  v3 = (id *)(a1 + *a3);
  swift_beginAccess(v3, v5, 0, 0);
  return *v3;
}

void *LibraryLinkOutlineCell.cellModel.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;
  _BYTE v5[24];

  v1 = (void **)(v0 + OBJC_IVAR____TtC4Maps22LibraryLinkOutlineCell_cellModel);
  swift_beginAccess(v0 + OBJC_IVAR____TtC4Maps22LibraryLinkOutlineCell_cellModel, v5, 0, 0);
  v2 = *v1;
  v3 = v2;
  return v2;
}

void LibraryLinkOutlineCell.cellModel.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;
  id v5;
  _BYTE v6[24];

  v3 = (void **)(v1 + OBJC_IVAR____TtC4Maps22LibraryLinkOutlineCell_cellModel);
  swift_beginAccess(v1 + OBJC_IVAR____TtC4Maps22LibraryLinkOutlineCell_cellModel, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  v5 = a1;

  sub_100011568();
}

uint64_t sub_100011568()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  id *v8;
  id v9;
  Swift::String v10;
  uint64_t countAndFlagsBits;
  void *object;
  _QWORD *v13;
  _QWORD v16[5];
  _BYTE v17[24];
  _BYTE v18[24];

  v1 = type metadata accessor for UIListContentConfiguration(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v16[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  UICollectionViewListCell.defaultContentConfiguration()(v3);
  v6 = (uint64_t *)(v0 + OBJC_IVAR____TtC4Maps22LibraryLinkOutlineCell_cellModel);
  swift_beginAccess(v6, v18, 0, 0);
  v7 = *v6;
  if (*v6
    && (v8 = (id *)(v7 + OBJC_IVAR____TtC4Maps27LibraryLinkOutlineCellModel_libraryItemsCount),
        swift_beginAccess(v7 + OBJC_IVAR____TtC4Maps27LibraryLinkOutlineCellModel_libraryItemsCount, v17, 0, 0),
        *v8))
  {
    v9 = *v8;
    v10 = LibraryItemsCount.descriptionForLibrarySectionInHome()();
    countAndFlagsBits = v10._countAndFlagsBits;
    object = v10._object;

  }
  else
  {
    countAndFlagsBits = 0;
    object = (void *)0xE000000000000000;
  }
  UIListContentConfiguration.text.setter(countAndFlagsBits, object);
  v16[3] = v1;
  v16[4] = &protocol witness table for UIListContentConfiguration;
  v13 = sub_100011DCC(v16);
  (*(void (**)(_QWORD *, char *, uint64_t))(v2 + 16))(v13, v5, v1);
  UICollectionViewCell.contentConfiguration.setter(v16);
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v5, v1);
}

uint64_t (*LibraryLinkOutlineCell.cellModel.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess(v1 + OBJC_IVAR____TtC4Maps22LibraryLinkOutlineCell_cellModel, a1, 33, 0);
  return sub_1000116F4;
}

uint64_t sub_1000116F4(uint64_t a1, char a2)
{
  uint64_t result;

  result = swift_endAccess(a1);
  if ((a2 & 1) == 0)
    return sub_100011568();
  return result;
}

id LibraryLinkOutlineCell.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  objc_class *v4;

  return objc_msgSend(objc_allocWithZone(v4), "initWithFrame:", a1, a2, a3, a4);
}

id LibraryLinkOutlineCell.init(frame:)(double a1, double a2, double a3, double a4)
{
  char *v4;
  char *v5;
  objc_class *ObjectType;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  NSString v29;
  objc_super v31;

  v5 = v4;
  ObjectType = (objc_class *)swift_getObjectType(v4);
  v11 = sub_100008B04(&qword_101492C58);
  __chkstk_darwin(v11);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UICellAccessory.DisclosureIndicatorOptions(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for UICellAccessory.DisplayedState(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v5[OBJC_IVAR____TtC4Maps22LibraryLinkOutlineCell_cellModel] = 0;
  v31.receiver = v5;
  v31.super_class = ObjectType;
  v22 = objc_msgSendSuper2(&v31, "initWithFrame:", a1, a2, a3, a4);
  v23 = sub_100008B04(&qword_101492C60);
  v24 = *(_QWORD *)(type metadata accessor for UICellAccessory(0) - 8);
  v25 = swift_allocObject(v23, ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))+ *(_QWORD *)(v24 + 72), *(unsigned __int8 *)(v24 + 80) | 7);
  *(_OWORD *)(v25 + 16) = xmmword_100E22F40;
  (*(void (**)(char *, _QWORD, uint64_t))(v19 + 104))(v21, enum case for UICellAccessory.DisplayedState.always(_:), v18);
  v26 = type metadata accessor for UICellAccessory.LayoutDimension(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v13, 1, 1, v26);
  v27 = v22;
  UICellAccessory.DisclosureIndicatorOptions.init(isHidden:reservedLayoutWidth:tintColor:)(2, v13, 0);
  static UICellAccessory.disclosureIndicator(displayed:options:)(v21, v17);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  UICollectionViewListCell.accessories.setter(v25);
  v28 = v27;
  v29 = String._bridgeToObjectiveC()();
  objc_msgSend(v28, "setAccessibilityIdentifier:", v29);

  return v28;
}

uint64_t sub_100011AD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjCClassFromMetadata;
  void *v3;
  id v4;
  uint64_t result;
  _QWORD v6[5];
  uint64_t v7;

  v0 = type metadata accessor for LibraryLinkOutlineCellRegistration();
  v1 = type metadata accessor for LibraryLinkOutlineCell();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v1);
  v6[4] = sub_100011B94;
  v7 = 0;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256;
  v6[2] = sub_1000D1B48;
  v6[3] = &unk_10119B910;
  v3 = _Block_copy(v6);
  v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(v0), "registrationWithCellClass:configurationHandler:", ObjCClassFromMetadata, v3);
  _Block_release(v3);
  result = swift_release(v7);
  qword_1014D4608 = (uint64_t)v4;
  return result;
}

void sub_100011B94(void *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void **v14;
  void *v15;
  void *v16;
  _BYTE v17[32];

  sub_100011E20(a3, (uint64_t)v17);
  v4 = sub_100011E5C();
  if ((swift_dynamicCast(&v16, v17, (char *)&type metadata for Any + 8, v4, 6) & 1) != 0)
  {
    v5 = v16;
    v6 = type metadata accessor for LibraryLinkOutlineCell();
    v7 = swift_dynamicCastClass(a1, v6);
    if (v7)
    {
      v8 = v7;
      v9 = a1;
      v10 = objc_msgSend(v5, "viewModel");
      v11 = type metadata accessor for LibraryLinkOutlineCellModel();
      v12 = swift_dynamicCastClass(v10, v11);
      if (v12)
      {
        v13 = (void *)v12;
        v14 = (void **)(v8 + OBJC_IVAR____TtC4Maps22LibraryLinkOutlineCell_cellModel);
        swift_beginAccess(v8 + OBJC_IVAR____TtC4Maps22LibraryLinkOutlineCell_cellModel, v17, 1, 0);
        v15 = *v14;
        *v14 = v13;
        swift_unknownObjectRetain_n(v10, 2);

        sub_100011568();
        swift_unknownObjectRelease_n(v10, 2);
      }
      else
      {

        swift_unknownObjectRelease(v10);
      }
    }
    else
    {

    }
  }
}

id LibraryLinkOutlineCellRegistration.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LibraryLinkOutlineCellRegistration();
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for LibraryLinkOutlineCellRegistration()
{
  return objc_opt_self(_TtC4Maps34LibraryLinkOutlineCellRegistration);
}

id LibraryLinkOutlineCellRegistration.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LibraryLinkOutlineCellRegistration();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for LibraryLinkOutlineCellModel()
{
  return objc_opt_self(_TtC4Maps27LibraryLinkOutlineCellModel);
}

uint64_t type metadata accessor for LibraryLinkOutlineCell()
{
  return objc_opt_self(_TtC4Maps22LibraryLinkOutlineCell);
}

_QWORD *sub_100011DCC(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_100011E08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100011E18(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100011E20(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_100011E5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101492DA0;
  if (!qword_101492DA0)
  {
    v1 = objc_opt_self(MapsUIDiffableDataSourceOutlineNodeSnapshot);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_101492DA0);
  }
  return result;
}

id sub_100011E9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC4Maps20PlaceSummaryTemplate_entries);
  if ((unint64_t)v1 >> 62)
    goto LABEL_12;
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n(v1, 2);
  for (; v2; v2 = _CocoaArrayWrapper.endIndex.getter(v8))
  {
    v3 = 4;
    while (1)
    {
      v4 = (v1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - 4, v1)
         : *(id *)(v1 + 8 * v3);
      v5 = v4;
      v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1))
        break;
      v7 = objc_msgSend(v4, "containsPhotoCarouselUnit");

      if ((v7 & 1) == 0)
      {
        ++v3;
        if (v6 != v2)
          continue;
      }
      goto LABEL_17;
    }
    __break(1u);
LABEL_12:
    if (v1 < 0)
      v8 = v1;
    else
      v8 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v1, 2);
  }
  v7 = 0;
LABEL_17:
  swift_bridgeObjectRelease_n(v1, 2);
  return v7;
}

id sub_100011F98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  char *v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  objc_super v13;

  v7 = v3;
  if (String.count.getter(a1, a2) >= 1)
  {
    if ((unint64_t)a3 >> 62)
    {
      if (a3 < 0)
        v10 = a3;
      else
        v10 = a3 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a3);
      v11 = _CocoaArrayWrapper.endIndex.getter(v10);
      swift_bridgeObjectRelease(a3);
      if (v11 > 0)
        goto LABEL_4;
    }
    else if (*(uint64_t *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > 0)
    {
LABEL_4:
      v8 = &v7[OBJC_IVAR____TtC4Maps20PlaceSummaryTemplate_identifier];
      *(_QWORD *)v8 = a1;
      *((_QWORD *)v8 + 1) = a2;
      *(_QWORD *)&v7[OBJC_IVAR____TtC4Maps20PlaceSummaryTemplate_entries] = a3;

      v13.receiver = v7;
      v13.super_class = (Class)type metadata accessor for PlaceSummaryTemplate();
      return objc_msgSendSuper2(&v13, "init");
    }
  }
  swift_bridgeObjectRelease(a3);

  swift_bridgeObjectRelease(a2);
  v12 = type metadata accessor for PlaceSummaryTemplate();
  swift_deallocPartialClassInstance(v7, v12, 32, 7);
  return 0;
}

uint64_t sub_1000120A4()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  Swift::String v20;
  void *object;
  Swift::String v22;
  unsigned __int8 v23;
  BOOL v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v1 = v0;
  _StringGuts.grow(_:)(55);
  v2._countAndFlagsBits = 0x6E65644920202020;
  v2._object = (void *)0xEF3A726569666974;
  String.append(_:)(v2);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC4Maps20PlaceSummaryTemplate_identifier);
  v4 = *(void **)(v0 + OBJC_IVAR____TtC4Maps20PlaceSummaryTemplate_identifier + 8);
  swift_bridgeObjectRetain(v4);
  v5._countAndFlagsBits = v3;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v4);
  v6._countAndFlagsBits = 0x746E45202020200ALL;
  v6._object = (void *)0xEE00203A73656972;
  String.append(_:)(v6);
  v7 = *(_QWORD *)(v0 + OBJC_IVAR____TtC4Maps20PlaceSummaryTemplate_entries);
  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0)
      v19 = *(_QWORD *)(v0 + OBJC_IVAR____TtC4Maps20PlaceSummaryTemplate_entries);
    else
      v19 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps20PlaceSummaryTemplate_entries));
    v8 = _CocoaArrayWrapper.endIndex.getter(v19);
    if (!v8)
      goto LABEL_16;
  }
  else
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC4Maps20PlaceSummaryTemplate_entries));
    if (!v8)
      goto LABEL_16;
  }
  result = sub_1001323FC(0, v8 & ~(v8 >> 63), 0);
  if (v8 < 0)
  {
    __break(1u);
    return result;
  }
  v10 = 0;
  do
  {
    if ((v7 & 0xC000000000000001) != 0)
      v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v7);
    else
      v11 = *(id *)(v7 + 8 * v10 + 32);
    v12 = v11;
    v13 = sub_100099FB0();
    v15 = v14;

    v17 = _swiftEmptyArrayStorage[2];
    v16 = _swiftEmptyArrayStorage[3];
    if (v17 >= v16 >> 1)
      sub_1001323FC(v16 > 1, v17 + 1, 1);
    ++v10;
    _swiftEmptyArrayStorage[2] = v17 + 1;
    v18 = &_swiftEmptyArrayStorage[2 * v17];
    v18[4] = v13;
    v18[5] = v15;
  }
  while (v8 != v10);
LABEL_16:
  swift_bridgeObjectRelease(v7);
  v20._countAndFlagsBits = Array.description.getter(_swiftEmptyArrayStorage, &type metadata for String);
  object = v20._object;
  String.append(_:)(v20);
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(object);
  v22._object = (void *)0x8000000100E41A30;
  v22._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v22);
  v23 = sub_100011E9C();
  v24 = (v23 & 1) == 0;
  if ((v23 & 1) != 0)
    v25 = 5457241;
  else
    v25 = 20302;
  if (v24)
    v26 = 0xE200000000000000;
  else
    v26 = 0xE300000000000000;
  v27 = v26;
  String.append(_:)(*(Swift::String *)&v25);
  swift_bridgeObjectRelease(v26);
  return 0;
}

id sub_100012360()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PlaceSummaryTemplate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for PlaceSummaryTemplate()
{
  return objc_opt_self(_TtC4Maps20PlaceSummaryTemplate);
}

id sub_1000123EC(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  _BYTE *v6;
  id result;
  id v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  _BYTE v23[32];
  _OWORD v24[2];
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v2 = type metadata accessor for NSFastEnumerationIterator(0);
  v3 = *(_QWORD *)(v2 - 8);
  *(_QWORD *)&v4 = __chkstk_darwin(v2).n128_u64[0];
  v6 = &v23[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  result = objc_msgSend(a1, "templateEntrys", v4);
  if (result)
  {
    v27 = (uint64_t)_swiftEmptyArrayStorage;
    v8 = result;
    NSArray.makeIterator()();

    v9 = sub_1000125FC();
    dispatch thunk of IteratorProtocol.next()(&v25, v2, v9);
    while (v26)
    {
      sub_10000BE60(&v25, v24);
      sub_100011E20((uint64_t)v24, (uint64_t)v23);
      v11 = sub_100012644();
      swift_dynamicCast(&v22, v23, (char *)&type metadata for Any + 8, v11, 7);
      v12 = sub_10009D430(v22);
      v13 = sub_10000BEAC(v24);
      if (v12)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v13);
        v15 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v14 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v15 >= v14 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        v10 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v12);
        specialized Array._endMutation()(v10);
      }
      dispatch thunk of IteratorProtocol.next()(&v25, v2, v9);
    }
    (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v6, v2);
    v16 = v27;

    result = objc_msgSend(a1, "templateId");
    if (result)
    {
      v17 = result;
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
      v20 = v19;

      v21 = objc_allocWithZone((Class)type metadata accessor for PlaceSummaryTemplate());
      return sub_100011F98(v18, v20, v16);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_1000125FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101492DE8;
  if (!qword_101492DE8)
  {
    v1 = type metadata accessor for NSFastEnumerationIterator(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSFastEnumerationIterator, v1);
    atomic_store(result, (unint64_t *)&qword_101492DE8);
  }
  return result;
}

unint64_t sub_100012644()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101492DF0;
  if (!qword_101492DF0)
  {
    v1 = objc_opt_self(GEOPDPlaceSummaryLayoutTemplateEntry);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_101492DF0);
  }
  return result;
}

uint64_t sub_100012680()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100008B04(&qword_10149C120);
  sub_10000E930(v0, qword_1014D4610);
  sub_10000E918(v0, (uint64_t)qword_1014D4610);
  v1 = sub_10000E4BC(0, (unint64_t *)&unk_101492E50, off_101196C50);
  return UICollectionView.CellRegistration.init(handler:)(sub_100012700, 0, v1, &type metadata for HomeListCuratedCollectionsCellModel);
}

void sub_100012700(void *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t Strong;
  uint64_t v6;
  uint64_t v7;
  id v8;
  __objc2_prot *v9;

  Strong = swift_unknownObjectWeakLoadStrong(a3 + 1);
  if (Strong)
  {
    v6 = Strong;
    v9 = &OBJC_PROTOCOL___HomeCuratedCollectionsTableViewCellDelegate;
    v7 = swift_dynamicCastObjCProtocolConditional(Strong, 1, &v9);
    if (v7)
    {
      v8 = objc_msgSend(objc_allocWithZone((Class)HomeCuratedCollectionsTableViewCellModel), "initWithResultDataProvider:delegate:", *a3, v7);
      objc_msgSend(a1, "setCellModel:", v8);
      swift_unknownObjectRelease(v6);

    }
    else
    {
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Maps/HashableWrappers.swift", 27, 2, 83, 0);
      __break(1u);
    }
  }
}

Swift::Int sub_1000127E4()
{
  uint64_t v0;
  uint64_t Strong;
  Swift::UInt v2;
  Swift::UInt v3;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _OWORD v9[2];
  uint64_t v10;
  _QWORD v11[9];

  Hasher.init(_seed:)(v11, 0);
  NSObject.hash(into:)(v11);
  Strong = swift_unknownObjectWeakLoadStrong(v0 + 8);
  if (Strong
    && (v5 = Strong,
        (swift_dynamicCast(&v6, &v5, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for AnyHashable, 6) & 1) != 0))
  {
    if (*((_QWORD *)&v7 + 1))
    {
      v9[0] = v6;
      v9[1] = v7;
      v10 = v8;
      AnyHashable.hash(into:)(v11);
      sub_100012C48((uint64_t)v9);
      return Hasher._finalize()();
    }
  }
  else
  {
    v8 = 0;
    v6 = 0u;
    v7 = 0u;
  }
  sub_100012C08((uint64_t)&v6);
  v2 = swift_unknownObjectWeakLoadStrong(v0 + 8);
  if (v2)
  {
    v3 = v2;
    Hasher._combine(_:)(v2);
    swift_unknownObjectRelease(v3);
  }
  return Hasher._finalize()();
}

uint64_t sub_1000128C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_101490CB0 != -1)
    swift_once(&qword_101490CB0, sub_100012680);
  v2 = sub_100008B04(&qword_10149C120);
  v3 = sub_10000E918(v2, (uint64_t)qword_1014D4610);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

Swift::UInt sub_10001293C(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  Swift::UInt result;
  Swift::UInt v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  NSObject.hash(into:)(a1);
  Strong = swift_unknownObjectWeakLoadStrong(v1 + 8);
  if (Strong
    && (v6 = Strong,
        (swift_dynamicCast(&v7, &v6, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for AnyHashable, 6) & 1) != 0))
  {
    if (*((_QWORD *)&v8 + 1))
    {
      v10[0] = v7;
      v10[1] = v8;
      v11 = v9;
      AnyHashable.hash(into:)(a1);
      return sub_100012C48((uint64_t)v10);
    }
  }
  else
  {
    v9 = 0;
    v7 = 0u;
    v8 = 0u;
  }
  sub_100012C08((uint64_t)&v7);
  result = swift_unknownObjectWeakLoadStrong(v1 + 8);
  if (result)
  {
    v5 = result;
    Hasher._combine(_:)(result);
    return swift_unknownObjectRelease(v5);
  }
  return result;
}

Swift::Int sub_100012A10(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  Swift::UInt v3;
  Swift::UInt v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;
  _QWORD v12[9];

  Hasher.init(_seed:)(v12, a1);
  NSObject.hash(into:)(v12);
  Strong = swift_unknownObjectWeakLoadStrong(v1 + 8);
  if (Strong
    && (v6 = Strong,
        (swift_dynamicCast(&v7, &v6, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for AnyHashable, 6) & 1) != 0))
  {
    if (*((_QWORD *)&v8 + 1))
    {
      v10[0] = v7;
      v10[1] = v8;
      v11 = v9;
      AnyHashable.hash(into:)(v12);
      sub_100012C48((uint64_t)v10);
      return Hasher._finalize()();
    }
  }
  else
  {
    v9 = 0;
    v7 = 0u;
    v8 = 0u;
  }
  sub_100012C08((uint64_t)&v7);
  v3 = swift_unknownObjectWeakLoadStrong(v1 + 8);
  if (v3)
  {
    v4 = v3;
    Hasher._combine(_:)(v3);
    swift_unknownObjectRelease(v4);
  }
  return Hasher._finalize()();
}

uint64_t sub_100012AEC(_QWORD *a1, _QWORD *a2)
{
  char v4;

  sub_10000E4BC(0, (unint64_t *)&qword_101492E60, NSObject_ptr);
  if ((static NSObject.== infix(_:_:)(*a1, *a2) & 1) != 0)
    v4 = sub_100012C80((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  else
    v4 = 0;
  return v4 & 1;
}

unint64_t sub_100012B5C()
{
  unint64_t result;

  result = qword_101492E00;
  if (!qword_101492E00)
  {
    result = swift_getWitnessTable(&unk_100E24220, &type metadata for HomeListCuratedCollectionsCellModel);
    atomic_store(result, (unint64_t *)&qword_101492E00);
  }
  return result;
}

unint64_t sub_100012BA0(uint64_t a1)
{
  unint64_t result;

  result = sub_100012BC4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100012BC4()
{
  unint64_t result;

  result = qword_101492E40;
  if (!qword_101492E40)
  {
    result = swift_getWitnessTable(&unk_100E24248, &type metadata for HomeListCuratedCollectionsCellModel);
    atomic_store(result, (unint64_t *)&qword_101492E40);
  }
  return result;
}

uint64_t sub_100012C08(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008B04(&qword_101493FF0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100012C48(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

uint64_t sub_100012C80(uint64_t a1, uint64_t a2)
{
  uint64_t Strong;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;

  Strong = swift_unknownObjectWeakLoadStrong(a1);
  if (!Strong
    || (*(_QWORD *)&v12 = Strong,
        (swift_dynamicCast(&v15, &v12, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for AnyHashable, 6) & 1) == 0))
  {
    v17 = 0;
    v15 = 0u;
    v16 = 0u;
    goto LABEL_9;
  }
  if (!*((_QWORD *)&v16 + 1))
  {
LABEL_9:
    v7 = &v15;
    goto LABEL_10;
  }
  v18[0] = v15;
  v18[1] = v16;
  v19 = v17;
  v5 = swift_unknownObjectWeakLoadStrong(a2);
  if (v5
    && (v11 = v5,
        (swift_dynamicCast(&v12, &v11, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for AnyHashable, 6) & 1) != 0))
  {
    if (*((_QWORD *)&v13 + 1))
    {
      v15 = v12;
      v16 = v13;
      v17 = v14;
      LOBYTE(v6) = static AnyHashable.== infix(_:_:)(v18, &v15);
      sub_100012C48((uint64_t)&v15);
      sub_100012C48((uint64_t)v18);
      return v6 & 1;
    }
  }
  else
  {
    v14 = 0;
    v12 = 0u;
    v13 = 0u;
  }
  sub_100012C48((uint64_t)v18);
  v7 = &v12;
LABEL_10:
  sub_100012C08((uint64_t)v7);
  v8 = swift_unknownObjectWeakLoadStrong(a1);
  v9 = swift_unknownObjectWeakLoadStrong(a2);
  v6 = v9;
  if (v8)
  {
    swift_unknownObjectRelease(v8);
    if (v6)
    {
      swift_unknownObjectRelease(v6);
      LOBYTE(v6) = v8 == v6;
    }
  }
  else if (v9)
  {
    swift_unknownObjectRelease(v9);
    LOBYTE(v6) = 0;
  }
  else
  {
    LOBYTE(v6) = 1;
  }
  return v6 & 1;
}

uint64_t destroy for HomeListCuratedCollectionsCellModel(id *a1)
{
  id *v1;

  v1 = a1 + 1;

  return swift_unknownObjectWeakDestroy(v1);
}

void **initializeWithCopy for HomeListCuratedCollectionsCellModel(void **a1, void **a2)
{
  void *v3;
  void **v4;
  _QWORD *v5;
  id v6;

  v4 = a2 + 1;
  v3 = *a2;
  *a1 = *a2;
  v5 = a1 + 1;
  v6 = v3;
  swift_unknownObjectWeakCopyInit(v5, v4);
  return a1;
}

void **assignWithCopy for HomeListCuratedCollectionsCellModel(void **a1, void **a2)
{
  void *v3;
  void **v4;
  void *v5;
  void **v6;
  id v7;

  v4 = a2 + 1;
  v3 = *a2;
  v5 = *a1;
  *a1 = *a2;
  v6 = a1 + 1;
  v7 = v3;

  swift_unknownObjectWeakCopyAssign(v6, v4);
  return a1;
}

_QWORD *initializeWithTake for HomeListCuratedCollectionsCellModel(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectWeakTakeInit(a1 + 1, a2 + 1);
  return a1;
}

void **assignWithTake for HomeListCuratedCollectionsCellModel(void **a1, void **a2)
{
  _QWORD *v3;
  void *v4;
  void **v5;

  v3 = a2 + 1;
  v4 = *a1;
  *a1 = *a2;
  v5 = a1 + 1;

  swift_unknownObjectWeakTakeAssign(v5, v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for HomeListCuratedCollectionsCellModel(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HomeListCuratedCollectionsCellModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HomeListCuratedCollectionsCellModel()
{
  return &type metadata for HomeListCuratedCollectionsCellModel;
}

void sub_100012FBC(Swift::Void (__swiftcall **a1)(DataSource *__struct_ptr _, Swift::OpaquePointer didChangeSelectedCollections)@<X8>)
{
  *a1 = CollectionPickerContaineeViewController.dataSource(_:didChangeSelectedCollections:);
  a1[1] = 0;
}

uint64_t (*sub_100012FD0())(uint64_t a1)
{
  unint64_t v0;
  uint64_t v1;
  __int128 v3;

  v0 = sub_100013654();
  EnvironmentValues.subscript.getter(&v3, &_s10TapHandlerV25UserGeneratedGuideHandlerVN, &_s10TapHandlerV25UserGeneratedGuideHandlerVN, v0);
  v1 = swift_allocObject(&unk_10119BB70, 32, 7);
  *(_OWORD *)(v1 + 16) = v3;
  return sub_1000133D0;
}

uint64_t (*sub_10001302C())(uint64_t a1)
{
  unint64_t v0;
  uint64_t v1;
  __int128 v3;

  v0 = sub_100013610();
  EnvironmentValues.subscript.getter(&v3, &_s10TapHandlerV20CuratedGuidesHandlerVN, &_s10TapHandlerV20CuratedGuidesHandlerVN, v0);
  v1 = swift_allocObject(&unk_10119BB48, 32, 7);
  *(_OWORD *)(v1 + 16) = v3;
  return sub_1000133D0;
}

uint64_t (*sub_100013088())(uint64_t a1, uint64_t a2)
{
  unint64_t v0;
  uint64_t v1;
  __int128 v3;

  v0 = sub_100013598();
  EnvironmentValues.subscript.getter(&v3, &_s10TapHandlerV19ActionButtonHandlerVN, &_s10TapHandlerV19ActionButtonHandlerVN, v0);
  v1 = swift_allocObject(&unk_10119BB20, 32, 7);
  *(_OWORD *)(v1 + 16) = v3;
  return sub_1000135DC;
}

uint64_t (*sub_1000130E4())(uint64_t a1)
{
  unint64_t v0;
  uint64_t v1;
  __int128 v3;

  v0 = sub_100013554();
  EnvironmentValues.subscript.getter(&v3, &_s10TapHandlerV22AccessoryEntityHandlerVN, &_s10TapHandlerV22AccessoryEntityHandlerVN, v0);
  v1 = swift_allocObject(&unk_10119BAF8, 32, 7);
  *(_OWORD *)(v1 + 16) = v3;
  return sub_1000133D0;
}

uint64_t (*sub_100013140())(uint64_t)
{
  unint64_t v0;
  uint64_t v1;
  __int128 v3;

  v0 = sub_100013510();
  EnvironmentValues.subscript.getter(&v3, &_s10TapHandlerV24ContainmentParentHandlerVN, &_s10TapHandlerV24ContainmentParentHandlerVN, v0);
  v1 = swift_allocObject(&unk_10119BAD0, 32, 7);
  *(_OWORD *)(v1 + 16) = v3;
  return sub_10001375C;
}

uint64_t (*sub_10001319C())(uint64_t a1)
{
  unint64_t v0;
  uint64_t v1;
  __int128 v3;

  v0 = sub_1000134CC();
  EnvironmentValues.subscript.getter(&v3, &_s10TapHandlerV23RefinementButtonHandlerVN, &_s10TapHandlerV23RefinementButtonHandlerVN, v0);
  v1 = swift_allocObject(&unk_10119BAA8, 32, 7);
  *(_OWORD *)(v1 + 16) = v3;
  return sub_1000133D0;
}

uint64_t (*sub_1000131F8())(uint64_t)
{
  unint64_t v0;
  uint64_t v1;
  __int128 v3;

  v0 = sub_100013488();
  EnvironmentValues.subscript.getter(&v3, &_s10TapHandlerV20TappableEntryHandlerVN, &_s10TapHandlerV20TappableEntryHandlerVN, v0);
  v1 = swift_allocObject(&unk_10119BA80, 32, 7);
  *(_OWORD *)(v1 + 16) = v3;
  return sub_10001375C;
}

uint64_t (*sub_100013254())(uint64_t)
{
  unint64_t v0;
  uint64_t v1;
  __int128 v3;

  v0 = sub_100013444();
  EnvironmentValues.subscript.getter(&v3, &_s10TapHandlerV18UserLibraryHandlerVN, &_s10TapHandlerV18UserLibraryHandlerVN, v0);
  v1 = swift_allocObject(&unk_10119BA58, 32, 7);
  *(_OWORD *)(v1 + 16) = v3;
  return sub_10001375C;
}

uint64_t (*sub_1000132B0())(uint64_t)
{
  unint64_t v0;
  uint64_t v1;
  __int128 v3;

  v0 = sub_100013400();
  EnvironmentValues.subscript.getter(&v3, &_s10TapHandlerV15UserNoteHandlerVN, &_s10TapHandlerV15UserNoteHandlerVN, v0);
  v1 = swift_allocObject(&unk_10119BA30, 32, 7);
  *(_OWORD *)(v1 + 16) = v3;
  return sub_10001375C;
}

uint64_t (*sub_10001330C())(uint64_t a1)
{
  unint64_t v0;
  uint64_t v1;
  __int128 v3;

  v0 = sub_100013368();
  EnvironmentValues.subscript.getter(&v3, &_s10TapHandlerV19PhotoCarouseHandlerVN, &_s10TapHandlerV19PhotoCarouseHandlerVN, v0);
  v1 = swift_allocObject(&unk_10119BA08, 32, 7);
  *(_OWORD *)(v1 + 16) = v3;
  return sub_1000133D0;
}

unint64_t sub_100013368()
{
  unint64_t result;

  result = qword_101492E70;
  if (!qword_101492E70)
  {
    result = swift_getWitnessTable(&unk_100E24618, &_s10TapHandlerV19PhotoCarouseHandlerVN);
    atomic_store(result, (unint64_t *)&qword_101492E70);
  }
  return result;
}

uint64_t sub_1000133AC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000133D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  v4 = a1;
  return v2(&v4);
}

unint64_t sub_100013400()
{
  unint64_t result;

  result = qword_101492E78;
  if (!qword_101492E78)
  {
    result = swift_getWitnessTable(&unk_100E245E0, &_s10TapHandlerV15UserNoteHandlerVN);
    atomic_store(result, (unint64_t *)&qword_101492E78);
  }
  return result;
}

unint64_t sub_100013444()
{
  unint64_t result;

  result = qword_101492E80;
  if (!qword_101492E80)
  {
    result = swift_getWitnessTable(&unk_100E245A8, &_s10TapHandlerV18UserLibraryHandlerVN);
    atomic_store(result, (unint64_t *)&qword_101492E80);
  }
  return result;
}

unint64_t sub_100013488()
{
  unint64_t result;

  result = qword_101492E88;
  if (!qword_101492E88)
  {
    result = swift_getWitnessTable(&unk_100E24570, &_s10TapHandlerV20TappableEntryHandlerVN);
    atomic_store(result, (unint64_t *)&qword_101492E88);
  }
  return result;
}

unint64_t sub_1000134CC()
{
  unint64_t result;

  result = qword_101492E90;
  if (!qword_101492E90)
  {
    result = swift_getWitnessTable(&unk_100E24538, &_s10TapHandlerV23RefinementButtonHandlerVN);
    atomic_store(result, (unint64_t *)&qword_101492E90);
  }
  return result;
}

unint64_t sub_100013510()
{
  unint64_t result;

  result = qword_101492E98;
  if (!qword_101492E98)
  {
    result = swift_getWitnessTable(&unk_100E24500, &_s10TapHandlerV24ContainmentParentHandlerVN);
    atomic_store(result, (unint64_t *)&qword_101492E98);
  }
  return result;
}

unint64_t sub_100013554()
{
  unint64_t result;

  result = qword_101492EA0;
  if (!qword_101492EA0)
  {
    result = swift_getWitnessTable(&unk_100E244C8, &_s10TapHandlerV22AccessoryEntityHandlerVN);
    atomic_store(result, (unint64_t *)&qword_101492EA0);
  }
  return result;
}

unint64_t sub_100013598()
{
  unint64_t result;

  result = qword_101492EA8;
  if (!qword_101492EA8)
  {
    result = swift_getWitnessTable(&unk_100E24490, &_s10TapHandlerV19ActionButtonHandlerVN);
    atomic_store(result, (unint64_t *)&qword_101492EA8);
  }
  return result;
}

uint64_t sub_1000135DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *, uint64_t *);
  uint64_t v5;
  uint64_t v6;

  v3 = *(uint64_t (**)(uint64_t *, uint64_t *))(v2 + 16);
  v5 = a2;
  v6 = a1;
  return v3(&v6, &v5);
}

unint64_t sub_100013610()
{
  unint64_t result;

  result = qword_101492EB0;
  if (!qword_101492EB0)
  {
    result = swift_getWitnessTable(&unk_100E24458, &_s10TapHandlerV20CuratedGuidesHandlerVN);
    atomic_store(result, (unint64_t *)&qword_101492EB0);
  }
  return result;
}

unint64_t sub_100013654()
{
  unint64_t result;

  result = qword_101492EB8;
  if (!qword_101492EB8)
  {
    result = swift_getWitnessTable(&unk_100E24420, &_s10TapHandlerV25UserGeneratedGuideHandlerVN);
    atomic_store(result, (unint64_t *)&qword_101492EB8);
  }
  return result;
}

ValueMetadata *_s10TapHandlerV25UserGeneratedGuideHandlerVMa()
{
  return &_s10TapHandlerV25UserGeneratedGuideHandlerVN;
}

ValueMetadata *_s10TapHandlerV20CuratedGuidesHandlerVMa()
{
  return &_s10TapHandlerV20CuratedGuidesHandlerVN;
}

ValueMetadata *_s10TapHandlerV19ActionButtonHandlerVMa()
{
  return &_s10TapHandlerV19ActionButtonHandlerVN;
}

ValueMetadata *_s10TapHandlerV22AccessoryEntityHandlerVMa()
{
  return &_s10TapHandlerV22AccessoryEntityHandlerVN;
}

ValueMetadata *_s10TapHandlerV24ContainmentParentHandlerVMa()
{
  return &_s10TapHandlerV24ContainmentParentHandlerVN;
}

ValueMetadata *_s10TapHandlerV23RefinementButtonHandlerVMa()
{
  return &_s10TapHandlerV23RefinementButtonHandlerVN;
}

ValueMetadata *_s10TapHandlerV20TappableEntryHandlerVMa()
{
  return &_s10TapHandlerV20TappableEntryHandlerVN;
}

ValueMetadata *_s10TapHandlerV18UserLibraryHandlerVMa()
{
  return &_s10TapHandlerV18UserLibraryHandlerVN;
}

ValueMetadata *_s10TapHandlerV15UserNoteHandlerVMa()
{
  return &_s10TapHandlerV15UserNoteHandlerVN;
}

ValueMetadata *_s10TapHandlerV19PhotoCarouseHandlerVMa()
{
  return &_s10TapHandlerV19PhotoCarouseHandlerVN;
}

_QWORD *sub_100013760@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;

  v2 = *result != 1 && *result != 0;
  *(_QWORD *)a2 = *result == 1;
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

id sub_1000137C0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC4Maps9UGCReport____lazy_storage___newReviewedPlace;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC4Maps9UGCReport____lazy_storage___newReviewedPlace);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC4Maps9UGCReport____lazy_storage___newReviewedPlace);
  }
  else
  {
    v4 = (void *)sub_100013854(v0);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

uint64_t sub_100013854(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  uint64_t result;
  uint64_t v13;
  char v14;

  v2 = objc_msgSend(objc_allocWithZone((Class)UGCReviewedPlace), "initWithMUID:", objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC4Maps9UGCReport_mapItem), "_muid"));
  v3 = *(void **)(a1 + OBJC_IVAR____TtC4Maps9UGCReport_initialForm);
  v4 = objc_msgSend(v3, "photosForm");
  v5 = objc_msgSend(v4, "activePhotoList");

  v6 = sub_100008B04((uint64_t *)&unk_101493020);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

  if (!((unint64_t)v7 >> 62))
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRelease(v7);
LABEL_3:
    objc_msgSend(v2, "setNumberOfPhotosAdded:", v8);
    v9 = objc_msgSend(v3, "ratingsForm");
    v10 = objc_msgSend(v9, "overallCategory");

    v11 = objc_msgSend(v10, "currentState");
    objc_msgSend(v2, "setRecommendState:", v11);
    objc_msgSend(v2, "setIsDeleted:", objc_msgSend(v3, "actionType") == (id)2);
    return (uint64_t)v2;
  }
  if (v7 < 0)
    v13 = v7;
  else
    v13 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v8 = _CocoaArrayWrapper.endIndex.getter(v13);
  swift_bridgeObjectRelease_n(v7, 2);
  if ((v8 & 0x8000000000000000) == 0)
    goto LABEL_3;
  v14 = 2;
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, v14, 3451, 0);
  __break(1u);
  return result;
}

id sub_100013BC4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UGCReport();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for UGCReport()
{
  return objc_opt_self(_TtC4Maps9UGCReport);
}

void sub_100013C7C(uint64_t a1, void (*a2)(id), uint64_t a3, void (*a4)(_QWORD, uint64_t), uint64_t a5)
{
  void *v5;
  void *v6;
  id v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id aBlock[5];
  _QWORD *v40;

  v6 = v5;
  v11 = objc_msgSend(v6, "buildSubmissionParameters");
  if (v11)
  {
    v12 = v11;
    aBlock[0] = 0;
    v13 = objc_msgSend((id)objc_opt_self(UGCCredentialsBuilder), "buildICloudUserCredentialsWithError:", aBlock);
    v14 = aBlock[0];
    if (v13)
    {
      v15 = v13;
      v16 = (void *)objc_opt_self(NSProgress);
      v17 = v15;
      v18 = v14;
      v19 = objc_msgSend(v16, "progressWithTotalUnitCount:", 100);
      v20 = objc_msgSend(v16, "progressWithTotalUnitCount:", 100);
      objc_msgSend(v20, "setCompletedUnitCount:", 20);
      v21 = (_QWORD *)swift_allocObject(&unk_10119C158, 80, 7);
      v21[2] = v20;
      v21[3] = v12;
      v21[4] = v6;
      v21[5] = v17;
      v38 = v17;
      v21[6] = a1;
      v21[7] = a4;
      v21[8] = a5;
      v21[9] = v19;
      aBlock[4] = sub_10001682C;
      v40 = v21;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = (id)1107296256;
      aBlock[2] = sub_1000142EC;
      aBlock[3] = &unk_10119C170;
      v22 = _Block_copy(aBlock);
      v23 = v40;
      v24 = v20;
      v25 = v6;
      v26 = v19;
      v27 = v12;
      sub_10000C128((uint64_t)a4, a5);
      swift_release(v23);
      objc_msgSend(v25, "fetchCoarsenedDeviceLocationWithCompletion:", v22);
      _Block_release(v22);
      objc_msgSend(v26, "addChild:withPendingUnitCount:", v24, 10);
      if (a2)
        a2(v26);

    }
    else
    {
      v31 = aBlock[0];
      v32 = _convertNSErrorToError(_:)(v14);

      swift_willThrow(v33);
      if (a4)
      {
        v34 = sub_10001654C();
        v35 = swift_allocError(&type metadata for UGCReport.UGCReportError, v34, 0, 0);
        *(_QWORD *)v36 = v32;
        *(_QWORD *)(v36 + 8) = 0;
        *(_BYTE *)(v36 + 16) = 1;
        swift_errorRetain(v32);
        a4(0, v35);

        swift_errorRelease(v32);
        v37 = v35;
      }
      else
      {

        v37 = v32;
      }
      swift_errorRelease(v37);
    }
  }
  else if (a4)
  {
    v28 = sub_10001654C();
    v29 = swift_allocError(&type metadata for UGCReport.UGCReportError, v28, 0, 0);
    *(_QWORD *)v30 = 0xD000000000000017;
    *(_QWORD *)(v30 + 8) = 0x8000000100E41CF0;
    *(_BYTE *)(v30 + 16) = 0;
    a4(0, v29);
    swift_errorRelease(v29);
  }
}

void sub_100013FD0(uint64_t a1, int a2, id a3, void *a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  char *v23;
  id v24;
  _QWORD aBlock[5];
  _QWORD *v28;

  objc_msgSend(a3, "setCompletedUnitCount:", objc_msgSend(a3, "totalUnitCount"));
  v14 = objc_msgSend(a4, "traits");
  objc_msgSend(v14, "setDeviceLocation:", a1);

  v15 = OBJC_IVAR____TtC4Maps9UGCReport_submitter;
  v16 = *(id *)&a5[OBJC_IVAR____TtC4Maps9UGCReport_submitter];
  v17 = objc_msgSend(a4, "requestParams");
  v18 = objc_msgSend(a4, "attachedImages");
  v19 = objc_msgSend(a4, "traits");
  v20 = (_QWORD *)swift_allocObject(&unk_10119C1A8, 40, 7);
  v20[2] = a8;
  v20[3] = a9;
  v20[4] = a5;
  aBlock[4] = sub_100016860;
  v28 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000142EC;
  aBlock[3] = &unk_10119C1C0;
  v21 = _Block_copy(aBlock);
  v22 = v28;
  sub_10000C128(a8, a9);
  v23 = a5;
  swift_release(v22);
  objc_msgSend(v16, "submitOrEnqueueFeedback:attachedImages:userInfo:traits:uploadPolicy:feedbackObjectToUpdate:completion:", v17, v18, a6, v19, a7, 0, v21);
  _Block_release(v21);

  v24 = objc_msgSend(*(id *)&a5[v15], "currentProgress");
  objc_msgSend(a10, "addChild:withPendingUnitCount:", v24, 90);

}

void sub_1000141E0(void *a1, uint64_t a2, void (*a3)(void *), uint64_t a4, void *a5)
{
  id v9;
  _QWORD *v10;
  void *v11;
  _QWORD *v12;
  id v13;
  _QWORD v14[5];
  _QWORD *v15;

  if (a2)
  {
    if (a3)
      a3(a1);
  }
  else
  {
    v9 = sub_1000137C0();
    v10 = (_QWORD *)swift_allocObject(&unk_10119C1F8, 40, 7);
    v10[2] = a3;
    v10[3] = a4;
    v10[4] = a1;
    v14[4] = sub_1000168A4;
    v15 = v10;
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 1107296256;
    v14[2] = sub_1000B3780;
    v14[3] = &unk_10119C210;
    v11 = _Block_copy(v14);
    v12 = v15;
    sub_10000C128((uint64_t)a3, a4);
    v13 = a1;
    swift_release(v12);
    objc_msgSend(a5, "persistSubmissionWithUpdatedReviewedPlace:communityIdentifier:completion:", v9, 0, v11);
    _Block_release(v11);

  }
}

void sub_1000142F0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, void *);
  id v7;
  id v8;

  v6 = *(void (**)(void *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

uint64_t sub_10001445C(uint64_t a1, void (*a2)(id), uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  _QWORD *v16;
  id v17;
  id v18;
  id v19;
  _QWORD aBlock[5];
  _QWORD *v22;

  v10 = (void *)objc_opt_self(NSProgress);
  v11 = objc_msgSend(v10, "progressWithTotalUnitCount:", 100);
  v12 = objc_msgSend(v10, "progressWithTotalUnitCount:", 100);
  objc_msgSend(v12, "setCompletedUnitCount:", 20);
  v13 = swift_allocObject(&unk_10119BE60, 32, 7);
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 24) = 0;
  v14 = (_QWORD *)swift_allocObject(&unk_10119BE88, 72, 7);
  v14[2] = v12;
  v14[3] = v5;
  v14[4] = a4;
  v14[5] = a5;
  v14[6] = v13;
  v14[7] = a1;
  v14[8] = v11;
  aBlock[4] = sub_10001651C;
  v22 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000142EC;
  aBlock[3] = &unk_10119BEA0;
  v15 = _Block_copy(aBlock);
  v16 = v22;
  v17 = v12;
  v18 = v5;
  swift_retain(v13);
  v19 = v11;
  sub_10000C128(a4, a5);
  swift_release(v16);
  objc_msgSend(v18, "fetchCoarsenedDeviceLocationWithCompletion:", v15);
  _Block_release(v15);
  objc_msgSend(v19, "addChild:withPendingUnitCount:", v17, 10);
  if (a2)
    a2(v19);

  return swift_release(v13);
}

id sub_100014618(uint64_t a1, uint64_t a2, void *a3, char *a4, void (*a5)(_QWORD, uint64_t), uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  id v21;
  id result;
  uint64_t v23;
  id v24;
  unsigned __int8 v25;
  char **v26;
  uint64_t v27;
  id v28;
  NSObject *v29;
  uint64_t v30;
  void *v31;
  id v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  _QWORD *v39;
  id v40;
  id v41;
  uint64_t v42;
  NSObject *v43;
  char *v44;
  id v45;
  uint64_t v46;
  id v47;
  unsigned __int8 v48;
  id v49;
  NSObject *v50;
  void *v51;
  id v52;
  void **v53;
  void *v54;
  _QWORD *v55;
  uint64_t v56;
  NSObject *v57;
  void **v58;
  id v59;
  id v60;
  id v61;
  uint64_t v62;
  void *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  char *v70;
  id v71;
  char *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  NSObject *v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void **v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  id v92;
  id v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  id v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  NSObject *v105;
  uint64_t v106;
  void (*v107)(_QWORD, uint64_t);
  _QWORD *v108;
  void **aBlock;
  uint64_t v110;
  void *v111;
  void *v112;
  void *v113;
  _QWORD *v114;

  v103 = a8;
  v104 = a7;
  v106 = a6;
  v107 = a5;
  v102 = (void *)a1;
  v11 = a9;
  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v90 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchQoS(0);
  v17 = *(_QWORD *)(v16 - 8);
  *(_QWORD *)&v18 = __chkstk_darwin(v16).n128_u64[0];
  v20 = (char *)&v90 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_msgSend(a3, "setCompletedUnitCount:", objc_msgSend(a3, "totalUnitCount", v18));
  v21 = *(id *)&a4[OBJC_IVAR____TtC4Maps9UGCReport_initialForm];
  result = objc_msgSend(v21, "isEdited");
  if ((_DWORD)result)
  {
    v95 = v20;
    v96 = v17;
    v97 = v16;
    v98 = v15;
    v99 = v13;
    v23 = swift_allocObject(&unk_10119BED8, 24, 7);
    *(_QWORD *)(v23 + 16) = 0;
    v101 = swift_allocObject(&unk_10119BF00, 24, 7);
    *(_QWORD *)(v101 + 16) = 0;
    v105 = dispatch_group_create();
    v24 = objc_msgSend(v21, "ratingsForm");
    v25 = objc_msgSend(v24, "isEdited");

    v26 = &selRef_persistsExpansions;
    v100 = a9;
    if ((v25 & 1) != 0 || a4[OBJC_IVAR____TtC4Maps9UGCReport_shouldMigrateRatingsWithICloud] == 1)
    {
      v93 = v21;
      v94 = v12;
      v27 = v23;
      v28 = objc_msgSend((id)objc_opt_self(NSProgress), "progressWithTotalUnitCount:", 100);
      v29 = v105;
      dispatch_group_enter(v105);
      v30 = OBJC_IVAR____TtC4Maps9UGCReport_mapItem;
      v92 = objc_msgSend(*(id *)&a4[OBJC_IVAR____TtC4Maps9UGCReport_mapItem], "_muid");
      result = objc_msgSend(*(id *)&a4[v30], "_geoMapItem");
      if (!result)
      {
        __break(1u);
        return result;
      }
      v31 = result;
      v91 = (id)objc_opt_self(UGCCredentialsBuilder);
      v32 = objc_msgSend(v31, "_identifierHistory");
      swift_unknownObjectRelease(v31);
      v33 = (_QWORD *)swift_allocObject(&unk_10119BFA0, 80, 7);
      v34 = v103;
      v35 = v104;
      v33[2] = v104;
      v33[3] = a4;
      v37 = v101;
      v36 = v102;
      v33[4] = v102;
      v33[5] = v34;
      v33[6] = v28;
      v33[7] = v37;
      v33[8] = v27;
      v33[9] = v29;
      v113 = sub_1000166B4;
      v114 = v33;
      aBlock = _NSConcreteStackBlock;
      v110 = 1107296256;
      v111 = sub_1000B3780;
      v112 = &unk_10119BFB8;
      v38 = _Block_copy(&aBlock);
      v39 = v114;
      v40 = v36;
      v41 = v28;
      v42 = v37;
      v23 = v27;
      swift_retain(v42);
      swift_retain(v27);
      v43 = v29;
      swift_retain(v35);
      v44 = a4;
      swift_release(v39);
      objc_msgSend(v91, "fetchCommunityIDWithMUID:identifierHistory:CompletionHandler:", v92, v32, v38);
      _Block_release(v38);

      v26 = &selRef_persistsExpansions;
      v21 = v93;
      v45 = objc_msgSend(v93, "photosForm");
      LODWORD(v39) = objc_msgSend(v45, "isEmpty");

      if ((_DWORD)v39)
        v46 = 80;
      else
        v46 = 40;
      v11 = v100;
      objc_msgSend(v100, "addChild:withPendingUnitCount:", v41, v46);

      v12 = v94;
    }
    v47 = objc_msgSend(v21, v26[89]);
    v48 = objc_msgSend(v47, "isEdited");

    if ((v48 & 1) != 0 || a4[OBJC_IVAR____TtC4Maps9UGCReport_shouldMigrateRatingsWithICloud] == 1)
    {
      v49 = objc_msgSend((id)objc_opt_self(NSProgress), "progressWithTotalUnitCount:", 100);
      v50 = v105;
      dispatch_group_enter(v105);
      v51 = (void *)objc_opt_self(UGCCredentialsBuilder);
      aBlock = 0;
      v52 = objc_msgSend(v51, "buildICloudUserCredentialsWithError:", &aBlock);
      v53 = aBlock;
      if (!v52)
      {
        v83 = aBlock;
        v84 = _convertNSErrorToError(_:)(v53);

        swift_willThrow(v85);
        if (v107)
        {
          v86 = sub_10001654C();
          v87 = swift_allocError(&type metadata for UGCReport.UGCReportError, v86, 0, 0);
          *(_QWORD *)v88 = v84;
          *(_QWORD *)(v88 + 8) = 0;
          *(_BYTE *)(v88 + 16) = 1;
          swift_errorRetain(v84);
          v107(0, v87);

          swift_errorRelease(v84);
          v89 = v87;
        }
        else
        {

          v89 = v84;
        }
        swift_errorRelease(v89);
        swift_release(v23);
        v79 = v101;
        return (id)swift_release(v79);
      }
      v54 = v52;
      v55 = (_QWORD *)swift_allocObject(&unk_10119BF78, 48, 7);
      v55[2] = v49;
      v56 = v101;
      v55[3] = v101;
      v55[4] = v23;
      v55[5] = v50;
      swift_retain(v56);
      swift_retain(v23);
      v57 = v50;
      v58 = v53;
      v59 = v54;
      v60 = v49;
      sub_100015278((uint64_t)v102, (uint64_t)v54, v103, (void (*)(_QWORD, uint64_t))sub_100016644, (uint64_t)v55);

      swift_release(v55);
      v61 = objc_msgSend(v21, "ratingsForm");
      LODWORD(v54) = objc_msgSend(v61, "isEmpty");

      if ((_DWORD)v54)
        v62 = 80;
      else
        v62 = 40;
      v11 = v100;
      objc_msgSend(v100, "addChild:withPendingUnitCount:", v60, v62);

    }
    sub_10000E4BC(0, (unint64_t *)&qword_101492FA0, OS_dispatch_queue_ptr);
    v63 = (void *)static OS_dispatch_queue.main.getter();
    v64 = (_QWORD *)swift_allocObject(&unk_10119BF28, 72, 7);
    v65 = v104;
    v64[2] = a4;
    v64[3] = v65;
    v66 = v106;
    v67 = (uint64_t)v107;
    v64[4] = v23;
    v64[5] = v67;
    v68 = v101;
    v64[6] = v66;
    v64[7] = v68;
    v64[8] = v11;
    v113 = sub_10001662C;
    v114 = v64;
    aBlock = _NSConcreteStackBlock;
    v110 = 1107296256;
    v111 = sub_1001BB8D4;
    v112 = &unk_10119BF40;
    v69 = _Block_copy(&aBlock);
    swift_retain(v65);
    v70 = a4;
    swift_retain(v68);
    swift_retain(v23);
    sub_10000C128(v67, v66);
    v71 = v11;
    v72 = v95;
    static DispatchQoS.unspecified.getter(v71);
    v108 = _swiftEmptyArrayStorage;
    v73 = sub_10000E540();
    v74 = sub_100008B04((uint64_t *)&unk_101492FB0);
    v75 = sub_10000E588();
    v76 = v98;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v108, v74, v75, v12, v73);
    v77 = v105;
    OS_dispatch_group.notify(qos:flags:queue:execute:)(v72, v76, v63, v69);
    _Block_release(v69);

    (*(void (**)(char *, uint64_t))(v99 + 8))(v76, v12);
    (*(void (**)(char *, uint64_t))(v96 + 8))(v72, v97);
    v78 = v114;
    swift_release(v23);
    swift_release(v68);
    v79 = (uint64_t)v78;
    return (id)swift_release(v79);
  }
  if (v107)
  {
    v80 = sub_10001654C();
    v81 = swift_allocError(&type metadata for UGCReport.UGCReportError, v80, 0, 0);
    *(_QWORD *)v82 = 0xD00000000000001FLL;
    *(_QWORD *)(v82 + 8) = 0x8000000100E41CA0;
    *(_BYTE *)(v82 + 16) = 0;
    v107(0, v81);
    return (id)swift_errorRelease(v81);
  }
  return result;
}

id sub_100014E40(id a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, void *a9)
{
  id result;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  id v24;
  uint64_t v25;
  _BYTE v26[24];

  v25 = a4;
  if (!a1)
    goto LABEL_5;
  result = objc_msgSend(a1, "tdmUserInfo", a4);
  if (result)
  {
    v16 = result;
    v17 = objc_msgSend(result, "anonymousUserId");

    if (v17)
    {
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      v20 = v19;

LABEL_6:
      swift_beginAccess(a2 + 16, v26, 1, 0);
      v21 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 16) = v18;
      *(_QWORD *)(a2 + 24) = v20;
      swift_bridgeObjectRelease(v21);
      v22 = (_QWORD *)swift_allocObject(&unk_10119BFF0, 48, 7);
      v22[2] = a6;
      v22[3] = a7;
      v22[4] = a8;
      v22[5] = a9;
      v23 = a6;
      swift_retain(a7);
      swift_retain(a8);
      v24 = a9;
      sub_100014F90(v25, (uint64_t)a1, a5, (void (*)(_QWORD, uint64_t))sub_100016AEC, (uint64_t)v22);
      return (id)swift_release(v22);
    }
LABEL_5:
    v18 = 0;
    v20 = 0;
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

void sub_100014F90(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD, uint64_t), uint64_t a5)
{
  char *v5;
  char *v6;
  id v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD aBlock[5];
  uint64_t v25;

  v6 = v5;
  v12 = objc_msgSend(v6, "buildRatingSubmissionParameters");
  if (v12)
  {
    v13 = v12;
    v14 = objc_msgSend(v12, "traits");
    objc_msgSend(v14, "setDeviceLocation:", a1);

    v15 = *(id *)&v6[OBJC_IVAR____TtC4Maps9UGCReport_submitter];
    v16 = objc_msgSend(v13, "requestParams");
    v17 = objc_msgSend(v13, "traits");
    v18 = swift_allocObject(&unk_10119C018, 32, 7);
    *(_QWORD *)(v18 + 16) = a4;
    *(_QWORD *)(v18 + 24) = a5;
    aBlock[4] = sub_100016728;
    v25 = v18;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000142EC;
    aBlock[3] = &unk_10119C030;
    v19 = _Block_copy(aBlock);
    v20 = v25;
    sub_10000C128((uint64_t)a4, a5);
    swift_release(v20);
    objc_msgSend(v15, "submitOrEnqueueFeedback:attachedImages:userInfo:traits:uploadPolicy:feedbackObjectToUpdate:completion:", v16, 0, a2, v17, a3, 0, v19);
    _Block_release(v19);

  }
  else if (a4)
  {
    v21 = sub_10001654C();
    v22 = swift_allocError(&type metadata for UGCReport.UGCReportError, v21, 0, 0);
    *(_QWORD *)v23 = 0xD000000000000017;
    *(_QWORD *)(v23 + 8) = 0x8000000100E41CF0;
    *(_BYTE *)(v23 + 16) = 0;
    a4(0, v22);
    swift_errorRelease(v22);
  }
}

void sub_1000151A8(void *a1, uint64_t a2, id a3, uint64_t a4, uint64_t a5, NSObject *a6)
{
  void *v11;
  id v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];

  objc_msgSend(a3, "setCompletedUnitCount:", objc_msgSend(a3, "totalUnitCount"));
  if (a1)
  {
    swift_beginAccess(a4 + 16, &v15, 1, 0);
    v11 = *(void **)(a4 + 16);
    *(_QWORD *)(a4 + 16) = a1;
    v12 = a1;

  }
  if (a2)
  {
    v13 = (uint64_t *)(a5 + 16);
    swift_beginAccess(v13, v16, 1, 0);
    v14 = *v13;
    *v13 = a2;
    swift_errorRetain(a2);
    swift_errorRelease(v14);
  }
  dispatch_group_leave(a6);
}

void sub_100015278(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD, uint64_t), uint64_t a5)
{
  char *v5;
  char *v6;
  id v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD aBlock[5];
  uint64_t v27;

  v6 = v5;
  v12 = objc_msgSend(v6, "buildPhotosSubmissionParameters");
  if (v12)
  {
    v13 = v12;
    v25 = a3;
    v14 = objc_msgSend(v12, "traits");
    objc_msgSend(v14, "setDeviceLocation:", a1);

    v15 = *(id *)&v6[OBJC_IVAR____TtC4Maps9UGCReport_submitter];
    v16 = objc_msgSend(v13, "requestParams");
    v17 = objc_msgSend(v13, "attachedImages");
    v18 = objc_msgSend(v13, "traits");
    v19 = swift_allocObject(&unk_10119C068, 32, 7);
    *(_QWORD *)(v19 + 16) = a4;
    *(_QWORD *)(v19 + 24) = a5;
    aBlock[4] = sub_100016728;
    v27 = v19;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000142EC;
    aBlock[3] = &unk_10119C080;
    v20 = _Block_copy(aBlock);
    v21 = v27;
    sub_10000C128((uint64_t)a4, a5);
    swift_release(v21);
    objc_msgSend(v15, "submitOrEnqueueFeedback:attachedImages:userInfo:traits:uploadPolicy:feedbackObjectToUpdate:completion:", v16, v17, a2, v18, v25, 0, v20);
    _Block_release(v20);

  }
  else if (a4)
  {
    v22 = sub_10001654C();
    v23 = swift_allocError(&type metadata for UGCReport.UGCReportError, v22, 0, 0);
    *(_QWORD *)v24 = 0xD000000000000017;
    *(_QWORD *)(v24 + 8) = 0x8000000100E41CF0;
    *(_BYTE *)(v24 + 16) = 0;
    a4(0, v23);
    swift_errorRelease(v23);
  }
}

void sub_1000154B4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  NSString v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  id v21;
  _QWORD aBlock[5];
  _QWORD *v24;
  char v25[24];

  v13 = a2 + 16;
  v14 = objc_msgSend((id)objc_opt_self(NSProgress), "progressWithTotalUnitCount:", 100);
  v15 = sub_1000137C0();
  swift_beginAccess(v13, v25, 0, 0);
  v16 = *(_QWORD *)(a2 + 24);
  if (v16)
  {
    swift_bridgeObjectRetain(v16);
    v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v16);
  }
  else
  {
    v17 = 0;
  }
  v18 = (_QWORD *)swift_allocObject(&unk_10119C0B8, 56, 7);
  v18[2] = v14;
  v18[3] = a3;
  v18[4] = a4;
  v18[5] = a5;
  v18[6] = a6;
  aBlock[4] = sub_1000167C8;
  v24 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000B3780;
  aBlock[3] = &unk_10119C0D0;
  v19 = _Block_copy(aBlock);
  v20 = v24;
  v21 = v14;
  swift_retain(a3);
  sub_10000C128(a4, a5);
  swift_retain(a6);
  swift_release(v20);
  objc_msgSend(a1, "persistSubmissionWithUpdatedReviewedPlace:communityIdentifier:completion:", v15, v17, v19);
  _Block_release(v19);

  objc_msgSend(a7, "addChild:withPendingUnitCount:", v21, 10);
}

void sub_100015668(uint64_t a1, id a2, uint64_t a3, void (*a4)(void *, uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t *v9;
  uint64_t v10;
  void **v11;
  void *v12;
  uint64_t v13;
  id v14;
  _BYTE v15[24];
  _BYTE v16[24];
  _BYTE v17[24];

  v9 = (uint64_t *)(a3 + 16);
  objc_msgSend(a2, "setCompletedUnitCount:", objc_msgSend(a2, "totalUnitCount"));
  if (a1)
  {
    swift_beginAccess(v9, v15, 1, 0);
    v10 = *v9;
    *v9 = a1;
    swift_errorRetain(a1);
    swift_errorRelease(v10);
  }
  if (a4)
  {
    v11 = (void **)(a6 + 16);
    swift_beginAccess(v11, v17, 0, 0);
    v12 = *v11;
    swift_beginAccess(v9, v16, 0, 0);
    v13 = *v9;
    v14 = v12;
    swift_errorRetain(v13);
    a4(v12, v13);
    swift_errorRelease(v13);

  }
}

id sub_100015874(void *a1, uint64_t a2, SEL *a3)
{
  id v5;
  char *v6;
  id v7;
  id v8;

  v5 = objc_allocWithZone((Class)UGCSubmissionFields);
  v6 = a1;
  v7 = objc_msgSend(v5, "init");
  objc_msgSend(*(id *)&v6[OBJC_IVAR____TtC4Maps9UGCReport_initialForm], *a3, v7);
  v8 = objc_msgSend(v6, "buildSubmissionParametersWithSubmissionFields:", v7);

  return v8;
}

uint64_t sub_1000159DC(void *a1)
{
  uint64_t v1;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  NSString v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  char **v23;
  char **v24;
  id v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  Class isa;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v3 = objc_msgSend(objc_allocWithZone((Class)GEORPFeedbackRequestParameters), "init");
  if (!v3)
    return 0;
  v4 = v3;
  v5 = objc_msgSend(objc_allocWithZone((Class)GEORPFeedbackDetails), "init");
  if (!v5)
  {

    return 0;
  }
  v6 = v5;
  v7 = objc_msgSend(objc_allocWithZone((Class)GEORPFeedbackSubmissionParameters), "init");
  objc_msgSend(v4, "setSubmissionParameters:", v7);

  v8 = objc_msgSend(v4, "submissionParameters");
  if (!v8)
  {
    __break(1u);
    goto LABEL_26;
  }
  v10 = v8;
  objc_msgSend(v8, "setDetails:", v6);

  v11 = objc_msgSend(a1, "parentSubmissionIdentifier");
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  v15 = String.count.getter(v12, v14);
  swift_bridgeObjectRelease(v14);
  if (v15 < 1)
    goto LABEL_9;
  v16 = objc_msgSend(v4, "submissionParameters");
  if (!v16)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v17 = v16;
  v18 = objc_msgSend(a1, "parentSubmissionIdentifier");
  if (!v18)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v20 = v19;
    v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v20);
  }
  objc_msgSend(v17, "setParentFeedbackId:", v18);

LABEL_9:
  v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps9UGCReport_reportType);
  if (v9 == 1)
  {
    v21 = objc_msgSend(v4, "submissionParameters");
    if (v21)
    {
      v22 = v21;
      objc_msgSend(v21, "setType:", 11);
      v23 = &selRef_setIncidentFeedback_;
      v24 = &selRef_incidentFeedback;
LABEL_17:

      v27 = objc_msgSend(a1, *v24);
      objc_msgSend(v6, *v23, v27);

      v28 = objc_msgSend(a1, "photoList");
      v29 = sub_10000E4BC(0, &qword_101492F28, &off_101198010);
      v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v28, v29);

      if ((unint64_t)v30 >> 62)
      {
        if (v30 < 0)
          v36 = v30;
        else
          v36 = v30 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v30);
        v37 = sub_100008B04(&qword_101492F90);
        v32 = _bridgeCocoaArray<A>(_:)(v36, v37);
        swift_bridgeObjectRelease(v30);
      }
      else
      {
        v31 = swift_bridgeObjectRetain(v30);
        dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v31);
        v32 = v30;
      }
      swift_bridgeObjectRelease(v30);
      v33 = objc_allocWithZone((Class)UGCSubmissionParameters);
      sub_100008B04(&qword_101492F90);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v32);
      v25 = objc_msgSend(v33, "initWithRequestParameters:attachedImages:", v4, isa);

      return (uint64_t)v25;
    }
    goto LABEL_27;
  }
  if (!v9)
  {
    v26 = objc_msgSend(v4, "submissionParameters");
    if (v26)
    {
      v22 = v26;
      objc_msgSend(v26, "setType:", 10);
      v23 = &selRef_setPoiEnrichmentUpdate_;
      v24 = &selRef_poiEnrichment;
      goto LABEL_17;
    }
    goto LABEL_28;
  }
LABEL_29:
  v38 = v9;
  result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for UGCReport.ReportType, &v38, &type metadata for UGCReport.ReportType, &type metadata for Int);
  __break(1u);
  return result;
}

void sub_100015DD8(id a1, uint64_t a2, void (*a3)(id, uint64_t))
{
  id v5;

  if (a1)
    a1 = objc_msgSend(objc_allocWithZone((Class)GEOLocation), "initWithCLLocation:", a1);
  v5 = a1;
  a3(a1, a2);

}

void sub_100015E98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  if (a2)
    v5 = _convertErrorToNSError(_:)(a2);
  else
    v5 = 0;
  v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);

}

ValueMetadata *type metadata accessor for UGCReport.ReportType()
{
  return &type metadata for UGCReport.ReportType;
}

unint64_t sub_100015FBC()
{
  unint64_t result;

  result = qword_101492F20;
  if (!qword_101492F20)
  {
    result = swift_getWitnessTable(&unk_100E246E4, &type metadata for UGCReport.ReportType);
    atomic_store(result, (unint64_t *)&qword_101492F20);
  }
  return result;
}

uint64_t sub_100016000()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_100016024(uint64_t a1)
{
  uint64_t v1;

  sub_100205CC0(a1, *(_QWORD *)(v1 + 16));
}

id sub_10001602C(uint64_t a1, void *a2, void *a3, void *a4)
{
  _BYTE *v4;
  void *v8;
  char *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  objc_super v15;

  *(_QWORD *)&v4[OBJC_IVAR____TtC4Maps9UGCReport____lazy_storage___newReviewedPlace] = 0;
  v4[OBJC_IVAR____TtC4Maps9UGCReport_shouldMigrateRatingsWithICloud] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC4Maps9UGCReport_reportType] = a1;
  *(_QWORD *)&v4[OBJC_IVAR____TtC4Maps9UGCReport_initialForm] = a2;
  *(_QWORD *)&v4[OBJC_IVAR____TtC4Maps9UGCReport_mapItem] = a3;
  *(_QWORD *)&v4[OBJC_IVAR____TtC4Maps9UGCReport_submitter] = a4;
  v8 = (void *)objc_opt_self(MKLocationManager);
  v9 = v4;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  v13 = objc_msgSend(v8, "unretainedUGCInstance");
  *(_QWORD *)&v9[OBJC_IVAR____TtC4Maps9UGCReport_locationManager] = v13;

  v15.receiver = v9;
  v15.super_class = (Class)type metadata accessor for UGCReport();
  return objc_msgSendSuper2(&v15, "init");
}

void sub_100016114(uint64_t a1, void (**a2)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  _QWORD v13[5];
  uint64_t v14;

  v4 = swift_allocObject(&unk_10119BD98, 24, 7);
  *(_QWORD *)(v4 + 16) = a2;
  v5 = (void *)objc_opt_self(UIDevice);
  _Block_copy(a2);
  v6 = objc_msgSend(v5, "currentDevice");
  v7 = objc_msgSend(v6, "userInterfaceIdiom");

  if (v7 == (id)5)
  {
    a2[2](a2, 0, 0);
    swift_release(v4);
  }
  else
  {
    v8 = *(void **)(a1 + OBJC_IVAR____TtC4Maps9UGCReport_locationManager);
    v9 = swift_allocObject(&unk_10119BDC0, 32, 7);
    *(_QWORD *)(v9 + 16) = sub_100016468;
    *(_QWORD *)(v9 + 24) = v4;
    v13[4] = sub_1000164A4;
    v14 = v9;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 1107296256;
    v13[2] = sub_1000142F0;
    v13[3] = &unk_10119BDD8;
    v10 = _Block_copy(v13);
    v11 = v14;
    swift_retain(v4);
    swift_release(v11);
    v12 = objc_msgSend(v8, "singleLocationUpdateWithHandler:", v10);
    _Block_release(v10);
    if (v12)
    {
      objc_msgSend(v12, "start");
      swift_release(v4);
      swift_unknownObjectRelease(v12);
    }
    else
    {
      _Block_release(a2);
      __break(1u);
    }
  }
}

void sub_1000162C4(id a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSString v8;
  unsigned int v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  void (*v17)(uint64_t, void *);
  void *v18;
  uint64_t v19;
  uint64_t v20;

  if (a3 && String.count.getter(a2, a3) >= 1)
  {
    v8 = String._bridgeToObjectiveC()();
    objc_msgSend(a1, "setCommunityIdentifier:", v8);

  }
  v9 = objc_msgSend(a1, "isDeleted");
  v10 = (void *)objc_opt_self(UGCReviewedPlaceManager);
  if (v9)
  {
    v11 = objc_msgSend(a1, "muid");
    v19 = a4;
    v20 = a5;
    v15 = _NSConcreteStackBlock;
    v16 = 1107296256;
    v17 = sub_1000B3780;
    v18 = &unk_10119BD60;
    v12 = _Block_copy(&v15);
    v13 = v20;
    swift_retain(a5);
    swift_release(v13);
    objc_msgSend(v10, "removeReviewedPlaceForMUID:completion:", v11, v12);
  }
  else
  {
    v19 = a4;
    v20 = a5;
    v15 = _NSConcreteStackBlock;
    v16 = 1107296256;
    v17 = sub_1000B3780;
    v18 = &unk_10119BD38;
    v12 = _Block_copy(&v15);
    v14 = v20;
    swift_retain(a5);
    swift_release(v14);
    objc_msgSend(v10, "addOrEditReviewedPlace:completion:", a1, v12);
  }
  _Block_release(v12);
}

uint64_t sub_100016450(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100016460(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_100016468(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100015E98(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_100016480()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000164A4(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_100015DD8(a1, a2, *(void (**)(id, uint64_t))(v2 + 16));
}

uint64_t sub_1000164AC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000164D0()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 32))
    swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));

  return swift_deallocObject(v0, 72, 7);
}

id sub_10001651C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100014618(a1, a2, *(void **)(v2 + 16), *(char **)(v2 + 24), *(void (**)(_QWORD, uint64_t))(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(void **)(v2 + 64));
}

unint64_t sub_10001654C()
{
  unint64_t result;

  result = qword_101492F98;
  if (!qword_101492F98)
  {
    result = swift_getWitnessTable(&unk_100E24730, &type metadata for UGCReport.UGCReportError);
    atomic_store(result, (unint64_t *)&qword_101492F98);
  }
  return result;
}

uint64_t sub_100016590()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000165B4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000165D8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  if (*(_QWORD *)(v0 + 40))
    swift_release(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 56));

  return swift_deallocObject(v0, 72, 7);
}

void sub_10001662C()
{
  uint64_t v0;

  sub_1000154B4(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(void **)(v0 + 64));
}

void sub_100016644(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000151A8(a1, a2, *(id *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(NSObject **)(v2 + 40));
}

uint64_t sub_100016660()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 64));

  return swift_deallocObject(v0, 80, 7);
}

id sub_1000166B4(void *a1)
{
  uint64_t v1;

  return sub_100014E40(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(void **)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(void **)(v1 + 72));
}

uint64_t sub_1000166E8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100016730()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10001675C()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t result;

  v1 = *(uint64_t (**)(void))(v0 + 16);
  if (v1)
    return v1();
  return result;
}

uint64_t sub_100016784()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  if (*(_QWORD *)(v0 + 32))
    swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

void sub_1000167C8(uint64_t a1)
{
  uint64_t v1;

  sub_100015668(a1, *(id *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(void *, uint64_t))(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_1000167D8()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 56))
    swift_release(*(_QWORD *)(v0 + 64));

  return swift_deallocObject(v0, 80, 7);
}

void sub_10001682C(uint64_t a1, int a2)
{
  uint64_t v2;

  sub_100013FD0(a1, a2, *(id *)(v2 + 16), *(void **)(v2 + 24), *(char **)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(void **)(v2 + 72));
}

void sub_100016860(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000141E0(a1, a2, *(void (**)(void *))(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32));
}

uint64_t sub_100016870()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000168A4(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD, uint64_t);

  v2 = *(uint64_t (**)(_QWORD, uint64_t))(v1 + 16);
  if (v2)
    return v2(*(_QWORD *)(v1 + 32), result);
  return result;
}

uint64_t sub_1000168D4(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_errorRetain(a1);
  else
    return swift_bridgeObjectRetain(a2);
}

uint64_t destroy for UGCReport.UGCReportError(uint64_t a1)
{
  return sub_1000168F4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_1000168F4(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_errorRelease(a1);
  else
    return swift_bridgeObjectRelease(a2);
}

uint64_t _s4Maps9UGCReportC14UGCReportErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1000168D4(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for UGCReport.UGCReportError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1000168D4(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_1000168F4(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for UGCReport.UGCReportError(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for UGCReport.UGCReportError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_1000168F4(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for UGCReport.UGCReportError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for UGCReport.UGCReportError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_100016A84(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_100016A8C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for UGCReport.UGCReportError()
{
  return &type metadata for UGCReport.UGCReportError;
}

void sub_100016BBC()
{
  char *v0;
  void *v1;
  id v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  void *object;
  NSString v7;
  id v8;
  Swift::String v9;

  v1 = *(void **)&v0[OBJC_IVAR____TtC4Maps29RAPTextViewCollectionViewCell_textView];
  objc_msgSend(v1, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v1, "setDelegate:", v0);
  v2 = objc_msgSend(v1, "placeholderLabel");
  if (v2)
  {
    v3 = v2;
    if (qword_101490ED0 != -1)
      swift_once(&qword_101490ED0, sub_10011833C);
    v4._countAndFlagsBits = 0xD00000000000001BLL;
    v9._countAndFlagsBits = 0xD000000000000022;
    v9._object = (void *)0x8000000100E41F20;
    v4._object = (void *)0x8000000100E41EE0;
    v5._object = (void *)0x8000000100E41F00;
    v5._countAndFlagsBits = 0xD000000000000015;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)qword_1014D4B80, v5, v9)._object;
    v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    objc_msgSend(v3, "setText:", v7);

    v8 = objc_msgSend(v0, "contentView");
    objc_msgSend(v8, "addSubview:", v1);

  }
  else
  {
    __break(1u);
  }
}

void sub_100016D2C()
{
  char *v0;
  char *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  Class isa;

  v1 = v0;
  v2 = (void *)objc_opt_self(NSLayoutConstraint);
  v3 = sub_100008B04((uint64_t *)&unk_101493B10);
  v4 = swift_allocObject(v3, 72, 7);
  *(_OWORD *)(v4 + 16) = xmmword_100E24770;
  v5 = *(void **)&v1[OBJC_IVAR____TtC4Maps29RAPTextViewCollectionViewCell_textView];
  v6 = objc_msgSend(v5, "topAnchor");
  v7 = objc_msgSend(v1, "contentView");
  v8 = objc_msgSend(v7, "topAnchor");

  v9 = objc_msgSend(v6, "constraintEqualToAnchor:constant:", v8, 16.0);
  *(_QWORD *)(v4 + 32) = v9;
  v10 = objc_msgSend(v5, "bottomAnchor");
  v11 = objc_msgSend(v1, "contentView");
  v12 = objc_msgSend(v11, "bottomAnchor");

  v13 = objc_msgSend(v10, "constraintEqualToAnchor:constant:", v12, -16.0);
  *(_QWORD *)(v4 + 40) = v13;
  v14 = objc_msgSend(v5, "leadingAnchor");
  v15 = objc_msgSend(v1, "contentView");
  v16 = objc_msgSend(v15, "leadingAnchor");

  v17 = objc_msgSend(v14, "constraintEqualToAnchor:constant:", v16, 16.0);
  *(_QWORD *)(v4 + 48) = v17;
  v18 = objc_msgSend(v5, "trailingAnchor");
  v19 = objc_msgSend(v1, "contentView");
  v20 = objc_msgSend(v19, "trailingAnchor");

  v21 = objc_msgSend(v18, "constraintEqualToAnchor:constant:", v20, -16.0);
  *(_QWORD *)(v4 + 56) = v21;
  v22 = objc_msgSend(v5, "heightAnchor");
  objc_msgSend(v1, "preferredHeight");
  v23 = objc_msgSend(v22, "constraintEqualToConstant:");

  *(_QWORD *)(v4 + 64) = v23;
  specialized Array._endMutation()(v24);
  sub_1000174D4();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v4);
  objc_msgSend(v2, "activateConstraints:", isa);

}

id sub_1000171BC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RAPTextViewCollectionViewCell();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RAPTextViewCollectionViewCell()
{
  return objc_opt_self(_TtC4Maps29RAPTextViewCollectionViewCell);
}

void sub_100017398(void *a1)
{
  uint64_t v1;
  void *v3;
  id v4;
  void *Strong;
  void *v6;
  id v7;

  v3 = (void *)objc_opt_self(RAPCommentQuestion);
  v4 = objc_msgSend(a1, "text");
  v7 = objc_msgSend(v3, "validatedComment:", v4);

  if (v7)
  {
    Strong = (void *)swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC4Maps29RAPTextViewCollectionViewCell_delegate);
    if (Strong)
    {
      v6 = Strong;
      objc_msgSend(Strong, "textViewCellDidChangeWithTextViewCell:validatedText:", v1, v7);

      swift_unknownObjectRelease(v6);
    }
    else
    {

    }
  }
}

unint64_t sub_1000174D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101493070;
  if (!qword_101493070)
  {
    v1 = objc_opt_self(NSLayoutConstraint);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_101493070);
  }
  return result;
}

uint64_t sub_100017510(uint64_t a1)
{
  swift_unknownObjectWeakDestroy(a1);
  return a1;
}

id sub_1000175BC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;

  v1 = OBJC_IVAR____TtC4Maps27BrowseCategoryTableViewCell____lazy_storage___cellImageView;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC4Maps27BrowseCategoryTableViewCell____lazy_storage___cellImageView);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC4Maps27BrowseCategoryTableViewCell____lazy_storage___cellImageView);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "init");
    objc_msgSend(v4, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v5 = (void *)objc_opt_self(UIColor);
    v3 = v4;
    v6 = objc_msgSend(v5, "clearColor");
    objc_msgSend(v3, "setBackgroundColor:", v6);

    v7 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v3;

    v2 = 0;
  }
  v8 = v2;
  return v3;
}

id sub_100017684()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC4Maps27BrowseCategoryTableViewCell____lazy_storage___cellTitleLabel;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC4Maps27BrowseCategoryTableViewCell____lazy_storage___cellTitleLabel);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC4Maps27BrowseCategoryTableViewCell____lazy_storage___cellTitleLabel);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
    objc_msgSend(v4, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_100017760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSString v16;
  objc_class *v17;
  id v18;
  id v19;
  objc_super v21;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v3[OBJC_IVAR____TtC4Maps27BrowseCategoryTableViewCell_horizontalPadding] = 0x4030000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC4Maps27BrowseCategoryTableViewCell_verticlePadding] = 0x4034000000000000;
  v10 = (uint64_t *)&v3[OBJC_IVAR____TtC4Maps27BrowseCategoryTableViewCell_uniqueIdentifier];
  v11 = v3;
  v12 = UUID.init()(v11);
  v13 = UUID.uuidString.getter(v12);
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  *v10 = v13;
  v10[1] = v15;
  *(_QWORD *)&v11[OBJC_IVAR____TtC4Maps27BrowseCategoryTableViewCell____lazy_storage___cellImageView] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC4Maps27BrowseCategoryTableViewCell____lazy_storage___cellTitleLabel] = 0;

  if (a3)
  {
    v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a3);
  }
  else
  {
    v16 = 0;
  }
  v17 = (objc_class *)type metadata accessor for BrowseCategoryTableViewCell();
  v21.receiver = v11;
  v21.super_class = v17;
  v18 = objc_msgSendSuper2(&v21, "initWithStyle:reuseIdentifier:", a1, v16);

  v19 = v18;
  sub_1000178C0();

  return v19;
}

void sub_1000178C0()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  double v6;
  id v7;
  double v8;
  id v9;
  NSString v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  NSString v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  uint64_t v58;
  Class isa;

  v1 = (void *)objc_opt_self(UIColor);
  v2 = objc_msgSend(v1, "clearColor");
  objc_msgSend(v0, "setBackgroundColor:", v2);

  v3 = objc_msgSend(v0, "contentView");
  v4 = sub_1000175BC();
  objc_msgSend(v3, "addSubview:", v4);

  v5 = sub_1000175BC();
  LODWORD(v6) = 1148846080;
  objc_msgSend(v5, "setContentHuggingPriority:forAxis:", 0, v6);

  v7 = sub_1000175BC();
  LODWORD(v8) = 1148846080;
  objc_msgSend(v7, "setContentCompressionResistancePriority:forAxis:", 0, v8);

  v9 = sub_1000175BC();
  v10 = String._bridgeToObjectiveC()();
  objc_msgSend(v9, "setAccessibilityIdentifier:", v10);

  v11 = objc_msgSend(v0, "contentView");
  v12 = sub_100017684();
  objc_msgSend(v11, "addSubview:", v12);

  v13 = sub_100017684();
  v14 = objc_msgSend(v1, "clearColor");
  objc_msgSend(v13, "setBackgroundColor:", v14);

  v15 = sub_100017684();
  v16 = objc_msgSend((id)objc_opt_self(UIFont), "system17");
  objc_msgSend(v15, "setFont:", v16);

  v17 = sub_100017684();
  v18 = String._bridgeToObjectiveC()();
  objc_msgSend(v17, "setAccessibilityIdentifier:", v18);

  v19 = (void *)objc_opt_self(NSLayoutConstraint);
  v20 = sub_100008B04((uint64_t *)&unk_101493B10);
  v21 = swift_allocObject(v20, 96, 7);
  *(_OWORD *)(v21 + 16) = xmmword_100E247C0;
  v22 = sub_1000175BC();
  v23 = objc_msgSend(v22, "leadingAnchor");

  v24 = objc_msgSend(v0, "contentView");
  v25 = objc_msgSend(v24, "leadingAnchor");

  v26 = objc_msgSend(v23, "constraintEqualToAnchor:constant:", v25, 16.0);
  *(_QWORD *)(v21 + 32) = v26;
  v27 = sub_1000175BC();
  v28 = objc_msgSend(v27, "widthAnchor");

  v29 = objc_msgSend(v28, "constraintEqualToConstant:", 30.0);
  *(_QWORD *)(v21 + 40) = v29;
  v30 = sub_1000175BC();
  v31 = objc_msgSend(v30, "heightAnchor");

  v32 = objc_msgSend(v31, "constraintEqualToConstant:", 30.0);
  *(_QWORD *)(v21 + 48) = v32;
  v33 = sub_100017684();
  v34 = objc_msgSend(v33, "leadingAnchor");

  v35 = sub_1000175BC();
  v36 = objc_msgSend(v35, "trailingAnchor");

  v37 = objc_msgSend(v34, "constraintEqualToAnchor:constant:", v36, 8.0);
  *(_QWORD *)(v21 + 56) = v37;
  v38 = sub_100017684();
  v39 = objc_msgSend(v38, "trailingAnchor");

  v40 = objc_msgSend(v0, "contentView");
  v41 = objc_msgSend(v40, "trailingAnchor");

  v42 = objc_msgSend(v39, "constraintEqualToAnchor:constant:", v41, -16.0);
  *(_QWORD *)(v21 + 64) = v42;
  v43 = sub_100017684();
  v44 = objc_msgSend(v43, "topAnchor");

  v45 = objc_msgSend(v0, "contentView");
  v46 = objc_msgSend(v45, "topAnchor");

  v47 = objc_msgSend(v44, "constraintEqualToAnchor:constant:", v46, 20.0);
  *(_QWORD *)(v21 + 72) = v47;
  v48 = sub_100017684();
  v49 = objc_msgSend(v48, "bottomAnchor");

  v50 = objc_msgSend(v0, "contentView");
  v51 = objc_msgSend(v50, "bottomAnchor");

  v52 = objc_msgSend(v49, "constraintEqualToAnchor:constant:", v51, -20.0);
  *(_QWORD *)(v21 + 80) = v52;
  v53 = sub_1000175BC();
  v54 = objc_msgSend(v53, "centerYAnchor");

  v55 = sub_100017684();
  v56 = objc_msgSend(v55, "centerYAnchor");

  v57 = objc_msgSend(v54, "constraintEqualToAnchor:", v56);
  *(_QWORD *)(v21 + 88) = v57;
  specialized Array._endMutation()(v58);
  sub_1000174D4();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v21);
  objc_msgSend(v19, "activateConstraints:", isa);

}

id sub_100018124()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BrowseCategoryTableViewCell();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for BrowseCategoryTableViewCell()
{
  return objc_opt_self(_TtC4Maps27BrowseCategoryTableViewCell);
}

void sub_1000181C0()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC4Maps27BrowseCategoryTableViewCell_horizontalPadding] = 0x4030000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC4Maps27BrowseCategoryTableViewCell_verticlePadding] = 0x4034000000000000;
  v7 = (uint64_t *)&v1[OBJC_IVAR____TtC4Maps27BrowseCategoryTableViewCell_uniqueIdentifier];
  v8 = UUID.init()(v4);
  v9 = UUID.uuidString.getter(v8);
  v11 = v10;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  *v7 = v9;
  v7[1] = v11;
  *(_QWORD *)&v1[OBJC_IVAR____TtC4Maps27BrowseCategoryTableViewCell____lazy_storage___cellImageView] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC4Maps27BrowseCategoryTableViewCell____lazy_storage___cellTitleLabel] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100E41970, "Maps/BrowseCategoryTableViewCell.swift", 38, 2, 43, 0);
  __break(1u);
}

uint64_t sub_1000182D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

void sub_1000182E0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[4];

  sub_100019874(319, &qword_101493158, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v8[1] = v8[0];
    sub_100019874(319, &qword_101493160, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v8[2] = *(_QWORD *)(v4 - 8) + 64;
      v6 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
      if (v7 <= 0x3F)
      {
        v8[3] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 0, 4, v8, a1 + 32);
      }
    }
  }
}

uint64_t *sub_1000183A4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  size_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  _QWORD *v27;
  uint64_t *v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  unsigned int (*v34)(uint64_t *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t v39;

  v6 = type metadata accessor for ContentSizeCategory(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  if (*(_DWORD *)(v7 + 84))
    v9 = *(_QWORD *)(v7 + 64);
  else
    v9 = v8 + 1;
  v10 = v9 + *(_DWORD *)(v7 + 80);
  v11 = *(_DWORD *)(v7 + 80) | 7;
  v12 = v11 + v9;
  if (v8 <= 8)
    v8 = 8;
  v13 = *(_QWORD *)(a3 + 16);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_DWORD *)(v14 + 80);
  v39 = v8;
  if ((v11 | v15) != 7
    || ((*(_DWORD *)(v14 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || ((v8 + v15 + 1 + ((v11 + v9 + (v10 & ~(unint64_t)*(_DWORD *)(v7 + 80))) & ~v11)) & ~v15)
     + *(_QWORD *)(v14 + 64) > 0x18)
  {
    v18 = *a2;
    *a1 = *a2;
    v19 = (uint64_t *)(v18 + (((v11 | v15) + 16) & ~(v11 | v15)));
    swift_retain(v18);
  }
  else
  {
    v20 = v6;
    v35 = v8 + v15 + 1;
    v36 = *(_QWORD *)(v13 - 8);
    v37 = v13;
    v21 = ~(unint64_t)*(_DWORD *)(v7 + 80);
    v34 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v7 + 48);
    if (v34(a2, 1, v6))
    {
      memcpy(a1, a2, v9);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v20);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v20);
    }
    v23 = a1;
    v24 = ~v11;
    v38 = v23;
    v25 = (void *)(((unint64_t)v23 + v10) & v21);
    v26 = (const void *)(((unint64_t)a2 + v10) & v21);
    if (v34(v26, 1, v20))
    {
      memcpy(v25, v26, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v25, v26, v20);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v25, 0, 1, v20);
    }
    v27 = (_QWORD *)(((unint64_t)v25 + v12) & v24);
    v28 = (uint64_t *)(((unint64_t)v26 + v12) & v24);
    v29 = *((unsigned __int8 *)v28 + v39);
    if (v29 >= 2)
    {
      if (v39 <= 3)
        v30 = v39;
      else
        v30 = 4;
      __asm { BR              X12 }
    }
    v19 = v38;
    if (v29 == 1)
    {
      (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v7 + 16))(v27, v28, v20);
      v31 = 1;
    }
    else
    {
      v32 = *v28;
      *v27 = *v28;
      swift_retain(v32);
      v31 = 0;
    }
    *((_BYTE *)v27 + v39) = v31;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v36 + 16))(((unint64_t)v27 + v35) & ~v15, ((unint64_t)v28 + v35) & ~v15, v37);
  }
  return v19;
}

uint64_t sub_100018668(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unsigned int v12;
  uint64_t v13;

  v4 = type metadata accessor for ContentSizeCategory(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v6(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v7 = *(_QWORD *)(v5 + 64);
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = v7 + 1;
  v9 = *(unsigned __int8 *)(v5 + 80);
  v10 = (v8 + a1 + v9) & ~v9;
  if (!v6(v10, 1, v4))
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v10, v4);
  v11 = (_QWORD *)(((v9 | 7) + v8 + v10) & ~(v9 | 7));
  if (v7 <= 8)
    v7 = 8;
  v12 = *((unsigned __int8 *)v11 + v7);
  if (v12 >= 2)
  {
    if (v7 <= 3)
      v13 = v7;
    else
      v13 = 4;
    __asm { BR              X12 }
  }
  if (v12 == 1)
    (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v11, v4);
  else
    swift_release(*v11);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((unint64_t)v11 + v7 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

void *sub_1000187EC(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(const void *, uint64_t, uint64_t);
  int v8;
  unint64_t v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  size_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;

  v5 = type metadata accessor for ContentSizeCategory(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  if (v7(a2, 1, v5))
  {
    v8 = *(_DWORD *)(v6 + 84);
    v9 = *(_QWORD *)(v6 + 64);
    if (v8)
      v10 = *(_QWORD *)(v6 + 64);
    else
      v10 = v9 + 1;
    memcpy(a1, a2, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    v8 = *(_DWORD *)(v6 + 84);
    v9 = *(_QWORD *)(v6 + 64);
  }
  if (v8)
    v11 = v9;
  else
    v11 = v9 + 1;
  v12 = *(unsigned __int8 *)(v6 + 80);
  v13 = (void *)(((unint64_t)a1 + v11 + v12) & ~v12);
  v14 = (const void *)(((unint64_t)a2 + v11 + v12) & ~v12);
  if (v7(v14, 1, v5))
  {
    memcpy(v13, v14, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v13, v14, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v13, 0, 1, v5);
  }
  v15 = (v12 | 7) + v11;
  v16 = (_QWORD *)(((unint64_t)v13 + v15) & ~(v12 | 7));
  v17 = (uint64_t *)(((unint64_t)v14 + v15) & ~(v12 | 7));
  if (v9 <= 8)
    v18 = 8;
  else
    v18 = v9;
  v19 = *((unsigned __int8 *)v17 + v18);
  if (v19 >= 2)
  {
    if (v18 <= 3)
      v20 = v18;
    else
      v20 = 4;
    __asm { BR              X12 }
  }
  if (v19 == 1)
  {
    (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v6 + 16))(v16, v17, v5);
    v21 = 1;
  }
  else
  {
    v22 = *v17;
    *v16 = *v17;
    swift_retain(v22);
    v21 = 0;
  }
  *((_BYTE *)v16 + v18) = v21;
  v23 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v23 + 16))(((unint64_t)v16 + v18 + *(unsigned __int8 *)(v23 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80), ((unint64_t)v17 + v18 + *(unsigned __int8 *)(v23 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
  return a1;
}

void *sub_100018A28(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;
  unint64_t v11;
  size_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  int v16;
  int v17;
  size_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v5 = type metadata accessor for ContentSizeCategory(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
LABEL_10:
  v11 = *(_QWORD *)(v6 + 64);
  if (*(_DWORD *)(v6 + 84))
    v12 = *(_QWORD *)(v6 + 64);
  else
    v12 = v11 + 1;
  v13 = *(unsigned __int8 *)(v6 + 80);
  v14 = (void *)(((unint64_t)a1 + v12 + v13) & ~v13);
  v15 = (void *)(((unint64_t)a2 + v12 + v13) & ~v13);
  v16 = v7(v14, 1, v5);
  v17 = v7(v15, 1, v5);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v14, v15, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v14, 0, 1, v5);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v17)
  {
    (*(void (**)(void *, uint64_t))(v6 + 8))(v14, v5);
LABEL_18:
    memcpy(v14, v15, v12);
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v6 + 24))(v14, v15, v5);
LABEL_19:
  v18 = (v13 | 7) + v12;
  v19 = (uint64_t *)(((unint64_t)v14 + v18) & ~(v13 | 7));
  v20 = (uint64_t *)(((unint64_t)v15 + v18) & ~(v13 | 7));
  if (v11 <= 8)
    v21 = 8;
  else
    v21 = v11;
  if (v19 != v20)
  {
    v22 = *((unsigned __int8 *)v19 + v21);
    if (v22 >= 2)
    {
      if (v21 <= 3)
        v23 = v21;
      else
        v23 = 4;
      __asm { BR              X12 }
    }
    if (v22 == 1)
      (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v19, v5);
    else
      swift_release(*v19);
    v24 = *((unsigned __int8 *)v20 + v21);
    if (v24 >= 2)
    {
      if (v21 <= 3)
        v25 = v21;
      else
        v25 = 4;
      __asm { BR              X12 }
    }
    if (v24 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(v19, v20, v5);
      *((_BYTE *)v19 + v21) = 1;
    }
    else
    {
      v26 = *v20;
      *v19 = *v20;
      *((_BYTE *)v19 + v21) = 0;
      swift_retain(v26);
    }
  }
  v27 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v27 + 24))(((unint64_t)v19 + v21 + *(unsigned __int8 *)(v27 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80), ((unint64_t)v20 + v21 + *(unsigned __int8 *)(v27 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80));
  return a1;
}

void *sub_100018D88(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(const void *, uint64_t, uint64_t);
  int v8;
  unint64_t v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  size_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  char v21;
  uint64_t v22;

  v5 = type metadata accessor for ContentSizeCategory(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  if (v7(a2, 1, v5))
  {
    v8 = *(_DWORD *)(v6 + 84);
    v9 = *(_QWORD *)(v6 + 64);
    if (v8)
      v10 = *(_QWORD *)(v6 + 64);
    else
      v10 = v9 + 1;
    memcpy(a1, a2, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    v8 = *(_DWORD *)(v6 + 84);
    v9 = *(_QWORD *)(v6 + 64);
  }
  if (v8)
    v11 = v9;
  else
    v11 = v9 + 1;
  v12 = *(unsigned __int8 *)(v6 + 80);
  v13 = (void *)(((unint64_t)a1 + v11 + v12) & ~v12);
  v14 = (const void *)(((unint64_t)a2 + v11 + v12) & ~v12);
  if (v7(v14, 1, v5))
  {
    memcpy(v13, v14, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v13, v14, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v13, 0, 1, v5);
  }
  v15 = (v12 | 7) + v11;
  v16 = (_QWORD *)(((unint64_t)v13 + v15) & ~(v12 | 7));
  v17 = (_QWORD *)(((unint64_t)v14 + v15) & ~(v12 | 7));
  if (v9 <= 8)
    v18 = 8;
  else
    v18 = v9;
  v19 = *((unsigned __int8 *)v17 + v18);
  if (v19 >= 2)
  {
    if (v18 <= 3)
      v20 = v18;
    else
      v20 = 4;
    __asm { BR              X12 }
  }
  if (v19 == 1)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 32))(v16, v17, v5);
    v21 = 1;
  }
  else
  {
    v21 = 0;
    *v16 = *v17;
  }
  *((_BYTE *)v16 + v18) = v21;
  v22 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v22 + 32))(((unint64_t)v16 + v18 + *(unsigned __int8 *)(v22 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80), ((unint64_t)v17 + v18 + *(unsigned __int8 *)(v22 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
  return a1;
}

void *sub_100018FC0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;
  unint64_t v11;
  size_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  int v16;
  int v17;
  size_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  v5 = type metadata accessor for ContentSizeCategory(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
LABEL_10:
  v11 = *(_QWORD *)(v6 + 64);
  if (*(_DWORD *)(v6 + 84))
    v12 = *(_QWORD *)(v6 + 64);
  else
    v12 = v11 + 1;
  v13 = *(unsigned __int8 *)(v6 + 80);
  v14 = (void *)(((unint64_t)a1 + v12 + v13) & ~v13);
  v15 = (void *)(((unint64_t)a2 + v12 + v13) & ~v13);
  v16 = v7(v14, 1, v5);
  v17 = v7(v15, 1, v5);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v14, v15, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v14, 0, 1, v5);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v17)
  {
    (*(void (**)(void *, uint64_t))(v6 + 8))(v14, v5);
LABEL_18:
    memcpy(v14, v15, v12);
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v6 + 40))(v14, v15, v5);
LABEL_19:
  v18 = (v13 | 7) + v12;
  v19 = (_QWORD *)(((unint64_t)v14 + v18) & ~(v13 | 7));
  v20 = (_QWORD *)(((unint64_t)v15 + v18) & ~(v13 | 7));
  if (v11 <= 8)
    v21 = 8;
  else
    v21 = v11;
  if (v19 != v20)
  {
    v22 = *((unsigned __int8 *)v19 + v21);
    if (v22 >= 2)
    {
      if (v21 <= 3)
        v23 = v21;
      else
        v23 = 4;
      __asm { BR              X12 }
    }
    if (v22 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v19, v5);
    else
      swift_release(*v19);
    v24 = *((unsigned __int8 *)v20 + v21);
    if (v24 >= 2)
    {
      if (v21 <= 3)
        v25 = v21;
      else
        v25 = 4;
      __asm { BR              X12 }
    }
    if (v24 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 32))(v19, v20, v5);
      v26 = 1;
    }
    else
    {
      v26 = 0;
      *v19 = *v20;
    }
    *((_BYTE *)v19 + v21) = v26;
  }
  v27 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v27 + 40))(((unint64_t)v19 + v21 + *(unsigned __int8 *)(v27 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80), ((unint64_t)v20 + v21 + *(unsigned __int8 *)(v27 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80));
  return a1;
}

uint64_t sub_10001931C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  char v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;

  v6 = *(_QWORD *)(type metadata accessor for ContentSizeCategory(0) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7)
    v8 = v7 - 1;
  else
    v8 = 0;
  v9 = *(_QWORD *)(v6 + 64);
  if (v9 <= 8)
    v10 = 8;
  else
    v10 = *(_QWORD *)(v6 + 64);
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (v8 <= *(_DWORD *)(v11 + 84))
    v12 = *(_DWORD *)(v11 + 84);
  else
    v12 = v8;
  if (v12 <= 0xFE)
    v13 = 254;
  else
    v13 = v12;
  if (v7)
    v14 = *(_QWORD *)(v6 + 64);
  else
    v14 = v9 + 1;
  if (!a2)
    return 0;
  v15 = *(unsigned __int8 *)(v6 + 80);
  v16 = v14 + v15;
  v17 = v15 | 7;
  v18 = *(unsigned __int8 *)(v11 + 80);
  v19 = v10 + v18 + 1;
  v20 = a2 >= v13;
  v21 = a2 - v13;
  if (v21 != 0 && v20)
  {
    v22 = ((v19 + ((v17 + v14 + (v16 & ~v15)) & ~v17)) & ~v18) + *(_QWORD *)(v11 + 64);
    v23 = 8 * v22;
    if (v22 <= 3)
    {
      v25 = ((v21 + ~(-1 << v23)) >> v23) + 1;
      if (HIWORD(v25))
      {
        v24 = *(_DWORD *)(a1 + v22);
        if (!v24)
          goto LABEL_36;
        goto LABEL_27;
      }
      if (v25 > 0xFF)
      {
        v24 = *(unsigned __int16 *)(a1 + v22);
        if (!*(_WORD *)(a1 + v22))
          goto LABEL_36;
        goto LABEL_27;
      }
      if (v25 < 2)
        goto LABEL_36;
    }
    v24 = *(unsigned __int8 *)(a1 + v22);
    if (!*(_BYTE *)(a1 + v22))
      goto LABEL_36;
LABEL_27:
    v26 = (v24 - 1) << v23;
    if (v22 > 3)
      v26 = 0;
    if ((_DWORD)v22)
    {
      if (v22 <= 3)
        v27 = ((v19 + ((v17 + v14 + (v16 & ~(_DWORD)v15)) & ~(_DWORD)v17)) & ~(_DWORD)v18) + *(_DWORD *)(v11 + 64);
      else
        v27 = 4;
      __asm { BR              X12 }
    }
    return v13 + v26 + 1;
  }
LABEL_36:
  if (v8 == v13)
  {
    if (v7 < 2)
      return 0;
    v30 = (*(uint64_t (**)(uint64_t))(v6 + 48))(a1);
    if (v30 >= 2)
      return v30 - 1;
    else
      return 0;
  }
  else
  {
    v28 = (((v16 + a1) & ~v15) + v14 + v17) & ~v17;
    if (v12 > 0xFE)
    {
      return (*(uint64_t (**)(uint64_t, _QWORD))(v11 + 48))((v19 + v28) & ~v18, *(unsigned int *)(v11 + 84));
    }
    else
    {
      v29 = *(unsigned __int8 *)(v28 + v10);
      if (v29 >= 2)
        return (v29 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
}

void sub_100019544(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;

  v8 = 0;
  v9 = *(_QWORD *)(type metadata accessor for ContentSizeCategory(0) - 8);
  v10 = *(_DWORD *)(v9 + 84);
  if (v10)
    v11 = v10 - 1;
  else
    v11 = 0;
  v12 = *(_QWORD *)(v9 + 64);
  if (v12 <= 8)
    v13 = 8;
  else
    v13 = *(_QWORD *)(v9 + 64);
  v14 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (v11 <= *(_DWORD *)(v14 + 84))
    v15 = *(_DWORD *)(v14 + 84);
  else
    v15 = v11;
  if (v15 <= 0xFE)
    v16 = 254;
  else
    v16 = v15;
  if (!v10)
    ++v12;
  v17 = *(unsigned __int8 *)(v9 + 80);
  v18 = *(unsigned __int8 *)(v14 + 80);
  v19 = v13 + 1 + v18;
  v20 = ((v19 + (((v17 | 7) + v12 + ((v12 + v17) & ~v17)) & ~(v17 | 7))) & ~v18) + *(_QWORD *)(v14 + 64);
  if (a3 > v16)
  {
    if (v20 > 3)
    {
      v8 = &_mh_execute_header.magic + 1;
      if (v16 >= a2)
LABEL_31:
        __asm { BR              X24 }
LABEL_24:
      v22 = ~v16 + a2;
      if (v20 < 4)
      {
        if ((_DWORD)v20)
        {
          v23 = v22 & ~(-1 << (8 * v20));
          bzero(a1, ((v19 + (((v17 | 7) + v12 + ((v12 + v17) & ~v17)) & ~(v17 | 7))) & ~v18) + *(_QWORD *)(v14 + 64));
          if ((_DWORD)v20 == 3)
          {
            *(_WORD *)a1 = v23;
            a1[2] = BYTE2(v23);
          }
          else if ((_DWORD)v20 == 2)
          {
            *(_WORD *)a1 = v23;
          }
          else
          {
            *a1 = v23;
          }
        }
      }
      else
      {
        bzero(a1, ((v19 + (((v17 | 7) + v12 + ((v12 + v17) & ~v17)) & ~(v17 | 7))) & ~v18) + *(_QWORD *)(v14 + 64));
        *(_DWORD *)a1 = v22;
      }
      __asm { BR              X10 }
    }
    v21 = ((a3 - v16 + ~(-1 << (8 * v20))) >> (8 * v20)) + 1;
    if (HIWORD(v21))
    {
      v8 = &dword_100000004;
      if (v16 >= a2)
        goto LABEL_31;
      goto LABEL_24;
    }
    if (v21 >= 0x100)
      v8 = 2;
    else
      v8 = v21 > 1;
  }
  if (v16 >= a2)
    goto LABEL_31;
  goto LABEL_24;
}

void sub_1000197C0()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
}

void sub_1000197C8()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
}

void sub_10001983C()
{
  _BYTE *v0;
  char v1;

  *v0 = v1;
}

void sub_100019844()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_100019854()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_10001985C()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t type metadata accessor for ContentSizeCategoryLimiter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10001A6E8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ContentSizeCategoryLimiter);
}

void sub_100019874(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = type metadata accessor for ContentSizeCategory(255);
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1000198CC(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_101064D00, 1);
}

uint64_t sub_100019900@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  void (*v34)(char *, uint64_t);
  char *v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  void (*v51)(uint64_t, uint64_t);
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;

  v3 = v2;
  v57 = a1;
  v5 = sub_100008B04(&qword_101493178);
  __chkstk_darwin(v5);
  v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v52 - v9;
  v11 = type metadata accessor for ContentSizeCategory(0);
  v12 = *(_QWORD **)(v11 - 8);
  __chkstk_darwin(v11);
  v54 = (uint64_t)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v56 = (char *)&v52 - v15;
  __chkstk_darwin(v16);
  v18 = (char *)&v52 - v17;
  __chkstk_darwin(v19);
  v21 = (char *)&v52 - v20;
  sub_10000C1FC(v3, (uint64_t)v10, &qword_101493178);
  v22 = (unsigned int (*)(char *, uint64_t, uint64_t))v12[6];
  if (v22(v10, 1, v11) == 1)
  {
    sub_100019F4C((uint64_t)v10);
  }
  else
  {
    v55 = a2;
    v52 = (void (*)(char *, char *, uint64_t))v12[4];
    v52(v21, v10, v11);
    v23 = sub_100019FBC(&qword_101493180, (uint64_t (*)(_QWORD))&type metadata accessor for ContentSizeCategory, 0xD000000000000013, 0x8000000100E420D0, (uint64_t)v18);
    v24 = static ContentSizeCategory.allCases.getter(v23);
    v25 = sub_100180BC8((uint64_t)v18, v24);
    v53 = v3;
    v27 = v26;
    v28 = swift_bridgeObjectRelease(v24);
    if ((v27 & 1) != 0)
      v29 = 0;
    else
      v29 = v25;
    v30 = static ContentSizeCategory.allCases.getter(v28);
    v31 = sub_100180BC8((uint64_t)v21, v30);
    v33 = v32;
    swift_bridgeObjectRelease(v30);
    if ((v33 & 1) != 0)
      v31 = 0;
    v34 = (void (*)(char *, uint64_t))v12[1];
    v34(v18, v11);
    if (v29 < v31)
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v52)(v55, v21, v11);
    v34(v21, v11);
    a2 = v55;
    v3 = v53;
  }
  v36 = v56;
  sub_10000C1FC(v3 + *(int *)(v57 + 36), (uint64_t)v7, &qword_101493178);
  if (v22(v7, 1, v11) == 1)
  {
    sub_100019F4C((uint64_t)v7);
  }
  else
  {
    v55 = a2;
    v37 = (void (*)(char *, char *, uint64_t))v12[4];
    v37(v36, v7, v11);
    v53 = v3;
    v38 = v54;
    v39 = sub_100019FBC(&qword_101493180, (uint64_t (*)(_QWORD))&type metadata accessor for ContentSizeCategory, 0xD000000000000013, 0x8000000100E420D0, v54);
    v40 = (uint64_t)v36;
    v41 = static ContentSizeCategory.allCases.getter(v39);
    v42 = sub_100180BC8(v38, v41);
    v44 = v43;
    v45 = swift_bridgeObjectRelease(v41);
    if ((v44 & 1) != 0)
      v46 = 0;
    else
      v46 = v42;
    v47 = static ContentSizeCategory.allCases.getter(v45);
    v48 = sub_100180BC8(v40, v47);
    v50 = v49;
    swift_bridgeObjectRelease(v47);
    if ((v50 & 1) != 0)
      v48 = 0;
    v51 = (void (*)(uint64_t, uint64_t))v12[1];
    v51(v38, v11);
    if (v48 < v46)
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v37)(v55, v40, v11);
    v51(v40, v11);
    a2 = v55;
  }
  return sub_100019FBC(&qword_101493180, (uint64_t (*)(_QWORD))&type metadata accessor for ContentSizeCategory, 0xD000000000000013, 0x8000000100E420D0, a2);
}

uint64_t sub_100019CD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t KeyPath;
  uint64_t v21;
  unint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];

  v28 = a2;
  v4 = type metadata accessor for ContentSizeCategory(0);
  v26 = *(_QWORD *)(v4 - 8);
  v27 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10000E5D4(&qword_101493168);
  v13 = type metadata accessor for ModifiedContent(0, v7, v12);
  v25 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v25 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16))(v11, v2 + *(int *)(a1 + 44), v7, v17);
  KeyPath = swift_getKeyPath(&unk_100E248B0);
  sub_100019900(a1, (uint64_t)v6);
  v21 = *(_QWORD *)(a1 + 24);
  View.environment<A>(_:_:)(KeyPath, v6, v7, v21);
  swift_release(KeyPath);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v6, v27);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  v22 = sub_100019F00();
  v29[0] = v21;
  v29[1] = v22;
  swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v13, v29);
  sub_100129028((uint64_t)v15, v13, (uint64_t)v19);
  v23 = *(void (**)(char *, uint64_t))(v25 + 8);
  v23(v15, v13);
  sub_100128F38((uint64_t)v19, v13, v28);
  return ((uint64_t (*)(char *, uint64_t))v23)(v19, v13);
}

uint64_t sub_100019EDC()
{
  return static View._viewListCount(inputs:)();
}

unint64_t sub_100019F00()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101493170;
  if (!qword_101493170)
  {
    v1 = sub_10000E5D4(&qword_101493168);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_101493170);
  }
  return result;
}

uint64_t sub_100019F4C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008B04(&qword_101493178);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100019F8C@<X0>(uint64_t a1@<X8>)
{
  return sub_100019FBC(&qword_101493188, (uint64_t (*)(_QWORD))&type metadata accessor for ColorScheme, 0x686353726F6C6F43, 0xEB00000000656D65, a1);
}

uint64_t sub_100019FBC@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v20;
  os_log_type_t v21;
  NSObject *v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v29 = a3;
  v9 = v5;
  v11 = type metadata accessor for EnvironmentValues(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100008B04(a1);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000C1FC(v9, (uint64_t)v17, a1);
  if (swift_getEnumCaseMultiPayload(v17, v15) == 1)
  {
    v18 = a2(0);
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a5, v17, v18);
  }
  else
  {
    v20 = *v17;
    v21 = static os_log_type_t.fault.getter();
    v22 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v22, v21))
    {
      v27 = a4;
      v23 = swift_slowAlloc(12, -1);
      v28 = a5;
      v24 = (uint8_t *)v23;
      v25 = swift_slowAlloc(32, -1);
      v31 = v25;
      *(_DWORD *)v24 = 136315138;
      v30 = sub_1000C28FC(v29, v27, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v24 + 4, v24 + 12);
      _os_log_impl((void *)&_mh_execute_header, v22, v21, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(v14, v20);
    swift_release(v20);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t sub_10001A1F4(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10001A244(a1, a2, a3, &qword_101493190, (void (*)(_QWORD, _QWORD, _QWORD))sub_10001A780);
}

uint64_t sub_10001A208(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10001A244(a1, a2, a3, &qword_101493198, (void (*)(_QWORD, _QWORD, _QWORD))sub_10001A780);
}

uint64_t sub_10001A21C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10001A244(a1, a2, a3, &qword_1014931A0, (void (*)(_QWORD, _QWORD, _QWORD))sub_10001A780);
}

uint64_t sub_10001A230(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10001A244(a1, a2, a3, &qword_1014931A8, (void (*)(_QWORD, _QWORD, _QWORD))sub_10001A780);
}

uint64_t sub_10001A244(uint64_t a1, uint64_t a2, char a3, uint64_t *a4, void (*a5)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __n128 v14;
  os_log_type_t v15;
  NSObject *v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint8_t *v26;
  uint64_t v27;
  void (*v28)(_QWORD, _QWORD, _QWORD);
  uint64_t v29;
  uint64_t v30;

  v10 = type metadata accessor for EnvironmentValues(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a3 & 1) != 0)
  {
    swift_retain(a2);
  }
  else
  {
    v14 = swift_retain(a1);
    v15 = static os_log_type_t.fault.getter(v14);
    v16 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v16, v15))
    {
      v17 = swift_slowAlloc(12, -1);
      v28 = a5;
      v18 = (uint8_t *)v17;
      v27 = swift_slowAlloc(32, -1);
      v30 = v27;
      *(_DWORD *)v18 = 136315138;
      v26 = v18 + 4;
      v19 = sub_100008B04(a4);
      v20 = _typeName(_:qualified:)(v19, 0);
      v22 = v21;
      v29 = sub_1000C28FC(v20, v21, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v26, v18 + 12);
      swift_bridgeObjectRelease(v22);
      _os_log_impl((void *)&_mh_execute_header, v16, v15, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v18, 0xCu);
      v23 = v27;
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      v24 = v18;
      a5 = v28;
      swift_slowDealloc(v24, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(v13, a1);
    a5(a1, a2, 0);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    return v30;
  }
  return a1;
}

uint64_t sub_10001A438(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10001A4CC(a1, a2, a3, 0x3E2D2029746E4928, 0xEB00000000292820, (void (*)(_QWORD, _QWORD, _QWORD))sub_10001A780);
}

uint64_t sub_10001A460(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10001A4CC(a1, a2, a3, 0xD00000000000002CLL, 0x8000000100E42110, (void (*)(_QWORD, _QWORD, _QWORD))sub_10001A774);
}

uint64_t sub_10001A484(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10001A4CC(a1, a2, a3, 0xD000000000000016, 0x8000000100E42140, (void (*)(_QWORD, _QWORD, _QWORD))sub_10001A780);
}

uint64_t sub_10001A4A8(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10001A4CC(a1, a2, a3, 0xD000000000000011, 0x8000000100E420F0, (void (*)(_QWORD, _QWORD, _QWORD))sub_10001A780);
}

uint64_t sub_10001A4CC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, void (*a6)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __n128 v16;
  os_log_type_t v17;
  NSObject *v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint8_t *v26;
  unint64_t v27;
  void (*v28)(_QWORD, _QWORD, _QWORD);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v12 = type metadata accessor for EnvironmentValues(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a3 & 1) != 0)
  {
    swift_retain(a2);
  }
  else
  {
    v29 = a4;
    v16 = swift_retain(a1);
    v17 = static os_log_type_t.fault.getter(v16);
    v18 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v18, v17))
    {
      v19 = swift_slowAlloc(12, -1);
      v27 = a5;
      v20 = (uint8_t *)v19;
      v21 = swift_slowAlloc(32, -1);
      v28 = a6;
      v22 = v21;
      v31 = v21;
      *(_DWORD *)v20 = 136315138;
      v26 = v20 + 4;
      v30 = sub_1000C28FC(v29, v27, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v26, v20 + 12);
      _os_log_impl((void *)&_mh_execute_header, v18, v17, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v20, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      v23 = v22;
      a6 = v28;
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v20, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(v15, a1);
    a6(a1, a2, 0);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    return v31;
  }
  return a1;
}

uint64_t sub_10001A6B4@<X0>(uint64_t a1@<X8>)
{
  return sub_100019FBC(&qword_1014931B0, (uint64_t (*)(_QWORD))&type metadata accessor for DynamicTypeSize, 0x5463696D616E7944, 0xEF657A6953657079, a1);
}

uint64_t sub_10001A6E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_10001A714(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  v1 = *a1;
  v2 = a1[1];
  v3 = sub_10000E5D4(&qword_101493168);
  v4 = type metadata accessor for ModifiedContent(255, v1, v3);
  v6[0] = v2;
  v6[1] = sub_100019F00();
  return swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v4, v6);
}

uint64_t sub_10001A774(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    a1 = a2;
  return swift_release(a1);
}

ValueMetadata *type metadata accessor for PlaceSummaryUnitRecent()
{
  return &type metadata for PlaceSummaryUnitRecent;
}

BOOL sub_10001A794(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10001A7A8(void *a1)
{
  unsigned int v2;
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;

  v2 = objc_msgSend(a1, "type");
  if (!v2)
    goto LABEL_5;
  if (v2 == 1)
  {
    v3 = 0;
    goto LABEL_7;
  }
  if (v2 != 2)
  {
LABEL_5:

    return 0;
  }
  v3 = 1;
LABEL_7:
  v4 = (char *)objc_msgSend(a1, "allowedHoursStatesCount");
  if (v4)
  {
    v5 = v4;
    v6 = 0;
    v7 = _swiftEmptyArrayStorage;
    do
    {
      v8 = objc_msgSend(a1, "allowedHoursStateAtIndex:", v6) - 1;
      if (v8 < 7)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
          v7 = sub_1000A7298(0, v7[2] + 1, 1, v7);
        v10 = v7[2];
        v9 = v7[3];
        if (v10 >= v9 >> 1)
          v7 = sub_1000A7298((_QWORD *)(v9 > 1), v10 + 1, 1, v7);
        v7[2] = v10 + 1;
        *((_BYTE *)v7 + v10 + 32) = v8;
      }
      ++v6;
    }
    while (v5 != v6);
  }
  else
  {
    v7 = _swiftEmptyArrayStorage;
  }

  if (!v7[2])
    swift_bridgeObjectRelease(v7);
  return v3;
}

uint64_t getEnumTagSinglePayload for PlaceSummaryUnitHours.PlaceSummaryUnitHoursState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PlaceSummaryUnitHours.PlaceSummaryUnitHoursState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_10001A9E0 + 4 * byte_100E24915[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10001AA14 + 4 * asc_100E24910[v4]))();
}

uint64_t sub_10001AA14(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001AA1C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10001AA24);
  return result;
}

uint64_t sub_10001AA30(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10001AA38);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_10001AA3C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001AA44(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_10001AA50(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for PlaceSummaryUnitHours.PlaceSummaryUnitHoursState()
{
  return &type metadata for PlaceSummaryUnitHours.PlaceSummaryUnitHoursState;
}

uint64_t initializeBufferWithCopyOfBuffer for PlaceSummaryUnitHours(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for PlaceSummaryUnitSecondaryName(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

uint64_t assignWithCopy for PlaceSummaryUnitHours(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t assignWithTake for PlaceSummaryUnitHours(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlaceSummaryUnitSecondaryName(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PlaceSummaryUnitSecondaryName(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlaceSummaryUnitHours()
{
  return &type metadata for PlaceSummaryUnitHours;
}

unint64_t sub_10001ABDC()
{
  unint64_t result;

  result = qword_1014931B8;
  if (!qword_1014931B8)
  {
    result = swift_getWitnessTable(&unk_100E249A8, &type metadata for PlaceSummaryUnitHours.PlaceSummaryUnitHoursState);
    atomic_store(result, (unint64_t *)&qword_1014931B8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PlaceSummaryUnitHours.PlaceSummaryUnitHoursType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10001AC6C + 4 * byte_100E2491F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10001ACA0 + 4 * byte_100E2491A[v4]))();
}

uint64_t sub_10001ACA0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001ACA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10001ACB0);
  return result;
}

uint64_t sub_10001ACBC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10001ACC4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10001ACC8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001ACD0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PlaceSummaryUnitHours.PlaceSummaryUnitHoursType()
{
  return &type metadata for PlaceSummaryUnitHours.PlaceSummaryUnitHoursType;
}

unint64_t sub_10001ACF0()
{
  unint64_t result;

  result = qword_1014931C0;
  if (!qword_1014931C0)
  {
    result = swift_getWitnessTable(&unk_100E24A2C, &type metadata for PlaceSummaryUnitHours.PlaceSummaryUnitHoursType);
    atomic_store(result, (unint64_t *)&qword_1014931C0);
  }
  return result;
}

void *sub_10001AD38()
{
  uint64_t v0;
  id v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = *(id *)(v0 + OBJC_IVAR____TtC4Maps23TransitSchedulesContext_viewController);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  v3 = *(_QWORD *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
  v2 = *(_QWORD *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v3 >= v2 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v2 > 1, v3 + 1, 1);
  v4 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v3, v1);
  specialized Array._endMutation()(v4);
  return &_swiftEmptyArrayStorage;
}

void sub_10001AEBC(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;

  v3 = objc_msgSend(a1, "iosBasedChromeViewController");
  if (v3)
  {
    v4 = v3;
    objc_msgSend(v3, "updateViewMode:animated:preserveMapSelection:", 3, 1, 1);

  }
  v5 = objc_msgSend(a2, "mapView");
  if (v5)
  {
    v6 = v5;
    objc_msgSend(v5, "_setApplicationState:", 7);

  }
}

uint64_t sub_10001B060()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_10001B08C()
{
  uint64_t v0;

  sub_10001AEBC(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10001B094(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001B0A4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

ValueMetadata *type metadata accessor for PlaceSummaryUnitUserNote()
{
  return &type metadata for PlaceSummaryUnitUserNote;
}

id sub_10001B1D4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  NSString v4;

  v3 = *(_QWORD *)(a1 + *a3 + 8);
  swift_bridgeObjectRetain(v3);
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  return v4;
}

uint64_t sub_10001B228(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v7 = (uint64_t *)(a1 + *a4);
  v8 = v7[1];
  *v7 = v6;
  v7[1] = v9;
  return swift_bridgeObjectRelease(v8);
}

id sub_10001B37C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SearchHomeUserGuidesDataProvider();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SearchHomeUserGuidesDataProvider()
{
  return objc_opt_self(_TtC4Maps32SearchHomeUserGuidesDataProvider);
}

void sub_10001B41C(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  _QWORD v13[5];
  uint64_t v14;
  char *v15;
  char v16[24];

  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v3 = v1 + OBJC_IVAR____TtC4Maps32SearchHomeUserGuidesDataProvider_objects;
    swift_beginAccess(v1 + OBJC_IVAR____TtC4Maps32SearchHomeUserGuidesDataProvider_objects, v16, 0, 0);
    if (*(_QWORD *)(*(_QWORD *)v3 + 16) > a1)
    {
      sub_100011E20(*(_QWORD *)v3 + 32 * a1 + 32, (uint64_t)v13);
      v4 = type metadata accessor for SearchHomeUserGuidesCellViewModel();
      if (swift_dynamicCast(&v15, v13, (char *)&type metadata for Any + 8, v4, 6))
      {
        v5 = v15;
        v6 = *(void **)&v15[OBJC_IVAR____TtC4Maps33SearchHomeUserGuidesCellViewModel_collections];
        v7 = swift_allocObject(&unk_10119C658, 24, 7);
        swift_unknownObjectWeakInit(v7 + 16, v1);
        v8 = swift_allocObject(&unk_10119C680, 32, 7);
        *(_QWORD *)(v8 + 16) = v7;
        *(_QWORD *)(v8 + 24) = a1;
        v9 = swift_allocObject(&unk_10119C6A8, 32, 7);
        *(_QWORD *)(v9 + 16) = sub_10001B6E4;
        *(_QWORD *)(v9 + 24) = v8;
        v13[4] = sub_10001B710;
        v14 = v9;
        v13[0] = _NSConcreteStackBlock;
        v13[1] = 1107296256;
        v13[2] = sub_100136AFC;
        v13[3] = &unk_10119C6C0;
        v10 = _Block_copy(v13);
        v11 = v14;
        v12 = v6;
        swift_release(v11);
        objc_msgSend(v12, "deleteCollection:", v10);
        _Block_release(v10);

      }
    }
  }
}

uint64_t sub_10001B5B4(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t Strong;
  void *v8;
  _BYTE v9[24];
  _BYTE v10[24];
  _OWORD v11[2];
  uint64_t v12;
  uint64_t v13;

  if (!result)
  {
    v12 = v3;
    v13 = v4;
    v6 = a2 + 16;
    swift_beginAccess(a2 + 16, v10, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v6);
    if (Strong)
    {
      v8 = (void *)Strong;
      swift_beginAccess(Strong + OBJC_IVAR____TtC4Maps32SearchHomeUserGuidesDataProvider_objects, v9, 33, 0);
      sub_1001847B0(a3, v11);
      swift_endAccess(v9);

    }
    else
    {
      memset(v11, 0, sizeof(v11));
    }
    return sub_10000C180((uint64_t)v11);
  }
  return result;
}

uint64_t sub_10001B69C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10001B6C0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10001B6E4(uint64_t a1)
{
  uint64_t v1;

  return sub_10001B5B4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10001B6EC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10001B710(uint64_t a1)
{
  uint64_t v1;

  return sub_1001E2838(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_10001B718(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001B728(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_10001B7B4()
{
  uint64_t v0;
  void *Strong;
  unsigned int v2;
  void *v3;
  id v4;
  void *v5;
  id v6;

  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC4Maps16PlaceCardContext_chromeViewController);
  if (Strong)
  {
    v6 = Strong;
    v2 = objc_msgSend(Strong, "isTopContext:", v0);
    v3 = v6;
    if (!v2)
    {
LABEL_9:

      return;
    }
    if (objc_msgSend(*(id *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC4Maps16PlaceCardContext_configuration)+ OBJC_IVAR____TtC4Maps29PlaceCardContextConfiguration_placeCardItem), "isCurrentLocation"))
    {
      objc_msgSend(v6, "popContext:animated:completion:", v0, 1, 0);
LABEL_8:
      v3 = v6;
      goto LABEL_9;
    }
    v4 = objc_msgSend(v6, "mapSelectionManager");
    if (v4)
    {
      v5 = v4;
      objc_msgSend(v4, "clearSelection");

      goto LABEL_8;
    }
    __break(1u);
  }
}

uint64_t initializeBufferWithCopyOfBuffer for PlaceSummaryView(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = v3;
  return a1;
}

uint64_t assignWithCopy for PlaceSummaryView(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for PlaceSummaryView(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlaceSummaryView(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 17))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PlaceSummaryView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlaceSummaryView()
{
  return &type metadata for PlaceSummaryView;
}

uint64_t sub_10001BA28(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_101064EB8, 1);
}

uint64_t sub_10001BA38()
{
  return EnvironmentValues.sizeCategory.getter();
}

uint64_t sub_10001BA58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for ContentSizeCategory(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.sizeCategory.setter(v4);
}

void sub_10001BAD4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t KeyPath;
  uint64_t *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v67 = a3;
  v5 = sub_100008B04(&qword_101493178);
  __chkstk_darwin(v5);
  v65 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v64 = (uint64_t)&v59 - v8;
  __chkstk_darwin(v9);
  v11 = (char *)&v59 - v10;
  v12 = (int *)sub_100008B04(&qword_101493360);
  __chkstk_darwin(v12);
  v14 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v66 = (uint64_t)&v59 - v16;
  v17 = sub_100008B04(&qword_101493368);
  __chkstk_darwin(v17);
  v19 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_100008B04(&qword_101493370);
  __chkstk_darwin(v68);
  v21 = (uint64_t *)((char *)&v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = sub_100008B04(&qword_101493378);
  __chkstk_darwin(v22);
  v24 = (char *)&v59 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    v57 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
    v58 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
    EnvironmentObject.error()(0, a2, v57, v58);
    __break(1u);
LABEL_11:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000030, 0x8000000100E42250, "Maps/PlaceSummaryView.swift", 27, 2, 36, 0);
    __break(1u);
    return;
  }
  v25 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC4Maps29PlaceSummaryViewModelTemplate_useCase);
  if (v25 != 1)
  {
    if (v25 == 2)
    {
      v33 = v17;
      v34 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
      v35 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
      v36 = (void *)EnvironmentObject.init()(v34, v35);
      *v21 = v36;
      v21[1] = v37;
      swift_storeEnumTagMultiPayload(v21, v68, 0);
      v38 = sub_10001C140();
      v39 = sub_100010D70(&qword_101493388, &qword_101493360, "A{7");
      v40 = v36;
      _ConditionalContent<>.init(storage:)(v21, &type metadata for PlaceSummaryView.SearchResult, v12, v38, v39);
      sub_10000C1FC((uint64_t)v24, (uint64_t)v19, &qword_101493378);
      swift_storeEnumTagMultiPayload(v19, v33, 0);
      v41 = sub_100008B04(&qword_101493390);
      v42 = sub_10001C184();
      v43 = sub_100010D70(&qword_1014933A0, &qword_101493390, (const char *)&protocol conformance descriptor for TupleView<A>);
      _ConditionalContent<>.init(storage:)(v19, v22, v41, v42, v43);
      sub_100010CC4((uint64_t)v24, &qword_101493378);

      return;
    }
    goto LABEL_11;
  }
  v62 = v17;
  v63 = v22;
  v26 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
  v27 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
  v28 = EnvironmentObject.init()(v26, v27);
  v60 = v29;
  v61 = v28;
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC4Maps29PlaceSummaryViewModelTemplate_searchAlongRoute) == 1)
  {
    v30 = enum case for ContentSizeCategory.extraLarge(_:);
    v31 = type metadata accessor for ContentSizeCategory(0);
    v32 = *(_QWORD *)(v31 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 104))(v11, v30, v31);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v11, 0, 1, v31);
  }
  else
  {
    v31 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v11, 1, 1, v31);
  }
  v44 = v64;
  sub_10000C1FC((uint64_t)v11, v64, &qword_101493178);
  type metadata accessor for ContentSizeCategory(0);
  v45 = (uint64_t)v65;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v65, 1, 1, v31);
  KeyPath = swift_getKeyPath(&unk_100E24B38);
  v47 = (uint64_t *)&v14[v12[10]];
  *v47 = KeyPath;
  v48 = sub_100008B04(&qword_101493180);
  swift_storeEnumTagMultiPayload(v47, v48, 0);
  v49 = &v14[v12[11]];
  v50 = v60;
  *(_QWORD *)v49 = v61;
  *((_QWORD *)v49 + 1) = v50;
  sub_1000207BC(v44, (uint64_t)v14, &qword_101493178);
  sub_1000207BC(v45, (uint64_t)&v14[v12[9]], &qword_101493178);
  sub_100010CC4((uint64_t)v11, &qword_101493178);
  v51 = v66;
  sub_1000207BC((uint64_t)v14, v66, &qword_101493360);
  sub_10000C1FC(v51, (uint64_t)v21, &qword_101493360);
  swift_storeEnumTagMultiPayload(v21, v68, 1);
  v52 = sub_10001C140();
  v53 = sub_100010D70(&qword_101493388, &qword_101493360, "A{7");
  _ConditionalContent<>.init(storage:)(v21, &type metadata for PlaceSummaryView.SearchResult, v12, v52, v53);
  sub_10000C1FC((uint64_t)v24, (uint64_t)v19, &qword_101493378);
  swift_storeEnumTagMultiPayload(v19, v62, 0);
  v54 = sub_100008B04(&qword_101493390);
  v55 = sub_10001C184();
  v56 = sub_100010D70(&qword_1014933A0, &qword_101493390, (const char *)&protocol conformance descriptor for TupleView<A>);
  _ConditionalContent<>.init(storage:)(v19, v63, v54, v55, v56);
  sub_100010CC4((uint64_t)v24, &qword_101493378);
  sub_100010CC4(v51, &qword_101493360);
}

void sub_10001C110(uint64_t a1@<X8>)
{
  uint64_t *v1;

  sub_10001BAD4(*v1, v1[1], a1);
}

uint64_t sub_10001C11C()
{
  return EnvironmentValues.sizeCategory.getter();
}

unint64_t sub_10001C140()
{
  unint64_t result;

  result = qword_101493380;
  if (!qword_101493380)
  {
    result = swift_getWitnessTable(&unk_100E24BD4, &type metadata for PlaceSummaryView.SearchResult);
    atomic_store(result, (unint64_t *)&qword_101493380);
  }
  return result;
}

unint64_t sub_10001C184()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101493398;
  if (!qword_101493398)
  {
    v1 = sub_10000E5D4(&qword_101493378);
    v2[0] = sub_10001C140();
    v2[1] = sub_100010D70(&qword_101493388, &qword_101493360, "A{7");
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101493398);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for PlaceSummaryView.Autocomplete(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  return a1;
}

void destroy for PlaceSummaryView.Autocomplete(id *a1)
{

}

uint64_t assignWithCopy for PlaceSummaryView.Autocomplete(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for PlaceSummaryView.Autocomplete(uint64_t a1, _QWORD *a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  *(_QWORD *)(a1 + 8) = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for PlaceSummaryView.Autocomplete()
{
  return &type metadata for PlaceSummaryView.Autocomplete;
}

uint64_t _s4Maps16PlaceSummaryViewV12AutocompleteVwet_0(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t _s4Maps16PlaceSummaryViewV12AutocompleteVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlaceSummaryView.SearchResult()
{
  return &type metadata for PlaceSummaryView.SearchResult;
}

unint64_t sub_10001C398()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1014933A8;
  if (!qword_1014933A8)
  {
    v1 = sub_10000E5D4(&qword_1014933B0);
    v2[0] = sub_10001C184();
    v2[1] = sub_100010D70(&qword_1014933A0, &qword_101493390, (const char *)&protocol conformance descriptor for TupleView<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_1014933A8);
  }
  return result;
}

uint64_t sub_10001C41C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_101064F08, 1);
}

uint64_t sub_10001C42C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  id v29;
  _QWORD *v30;
  char *v31;
  int IsEnabled_SearchAndDiscovery;
  __n128 v33;
  uint64_t v34;
  uint64_t KeyPath;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char v48;
  double v49;
  double v50;
  double v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __n128 v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char v95;
  double v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t result;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  double v138[2];

  v134 = a3;
  v120 = type metadata accessor for Divider(0);
  v119 = *(_QWORD *)(v120 - 8);
  __chkstk_darwin(v120);
  v118 = (char *)&v116 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100008B04(&qword_1014933B8);
  v130 = *(_QWORD *)(v6 - 8);
  v131 = v6;
  __chkstk_darwin(v6);
  v117 = (char *)&v116 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008B04(&qword_1014933C0);
  __chkstk_darwin(v8);
  v133 = (char *)&v116 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v132 = (uint64_t)&v116 - v11;
  v12 = sub_100008B04(&qword_1014933C8);
  __chkstk_darwin(v12);
  v14 = (char *)&v116 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = sub_100008B04(&qword_1014933D0);
  __chkstk_darwin(v121);
  v16 = (char *)&v116 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = sub_100008B04(&qword_1014933D8);
  __chkstk_darwin(v122);
  v18 = (char *)&v116 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = sub_100008B04(&qword_1014933E0);
  __chkstk_darwin(v123);
  v126 = (char *)&v116 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = sub_100008B04(&qword_1014933E8);
  __chkstk_darwin(v124);
  v137 = (uint64_t)&v116 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = sub_100008B04(&qword_1014933F0);
  __chkstk_darwin(v128);
  v129 = (uint64_t)&v116 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v127 = (uint64_t)&v116 - v23;
  __chkstk_darwin(v24);
  v136 = (char *)&v116 - v25;
  v26 = sub_100008B04((uint64_t *)&unk_10149A500);
  __chkstk_darwin(v26);
  v28 = (char *)&v116 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v125 = a1;
    v29 = a1;
    v30 = sub_1000863C4(1);

    v31 = (char *)v29;
    sub_1000865F4((uint64_t)v28);

    IsEnabled_SearchAndDiscovery = MapsFeature_IsEnabled_SearchAndDiscovery();
    v34 = OBJC_IVAR____TtC4Maps29PlaceSummaryViewModelTemplate_metrics;
    v135 = v28;
    if ((IsEnabled_SearchAndDiscovery & 1) != 0
      && *(_QWORD *)&v31[OBJC_IVAR____TtC4Maps29PlaceSummaryViewModelTemplate_metrics])
    {
      KeyPath = swift_getKeyPath(&unk_100E24C38);
      v36 = swift_getKeyPath(&unk_100E24C60);
      v116 = a2;
      v37 = v36;
      v38 = v31;
      static Published.subscript.getter(v138, v38, KeyPath, v37);

      v39 = KeyPath;
      v28 = v135;
      swift_release(v39);
      v40 = v37;
      a2 = v116;
      swift_release(v40);
      v33.n128_f64[0] = v138[0];
      v41 = v138[0] * 0.203562341;
      v34 = OBJC_IVAR____TtC4Maps29PlaceSummaryViewModelTemplate_metrics;
    }
    else
    {
      v41 = 64.0;
    }
    v42 = (uint64_t)v126;
    v43 = *(_QWORD *)&v31[v34];
    if (v43)
      v44 = *(_BYTE *)(v43 + OBJC_IVAR____TtC4Maps19PlaceSummaryMetrics_showsDivider);
    else
      v44 = 0;
    *(_QWORD *)v14 = static HorizontalAlignment.leading.getter(v33);
    *((_QWORD *)v14 + 1) = 0x4030000000000000;
    v14[16] = 0;
    v45 = sub_100008B04(&qword_1014933F8);
    sub_10001CCA0(v125, a2, IsEnabled_SearchAndDiscovery, (uint64_t)v28, (uint64_t)v30, (uint64_t)&v14[*(int *)(v45 + 44)], v41);
    swift_bridgeObjectRelease(v30);
    sub_10000C1FC((uint64_t)v14, (uint64_t)v16, &qword_1014933C8);
    v46 = &v16[*(int *)(v121 + 36)];
    *(_QWORD *)v46 = 0xD000000000000014;
    *((_QWORD *)v46 + 1) = 0x8000000100E42290;
    v46[16] = 9;
    v47 = sub_100010CC4((uint64_t)v14, &qword_1014933C8);
    v48 = static Edge.Set.horizontal.getter(v47);
    v49 = 8.0;
    if ((v44 & 1) == 0)
      v49 = 16.0;
    if (IsEnabled_SearchAndDiscovery)
      v50 = 16.0;
    else
      v50 = 0.0;
    if (IsEnabled_SearchAndDiscovery)
      v51 = v49;
    else
      v51 = 0.0;
    v52 = EdgeInsets.init(_all:)(v50);
    v54 = v53;
    v56 = v55;
    v58 = v57;
    sub_10000C1FC((uint64_t)v16, (uint64_t)v18, &qword_1014933D0);
    v59 = &v18[*(int *)(v122 + 36)];
    *v59 = v48;
    *((double *)v59 + 1) = v52;
    *((_QWORD *)v59 + 2) = v54;
    *((_QWORD *)v59 + 3) = v56;
    *((_QWORD *)v59 + 4) = v58;
    v59[40] = 0;
    v60 = sub_100010CC4((uint64_t)v16, &qword_1014933D0);
    v61 = static Edge.Set.top.getter(v60);
    v62 = EdgeInsets.init(_all:)(v50);
    v64 = v63;
    v66 = v65;
    v68 = v67;
    sub_10000C1FC((uint64_t)v18, v42, &qword_1014933D8);
    v69 = v42 + *(int *)(v123 + 36);
    *(_BYTE *)v69 = v61;
    *(double *)(v69 + 8) = v62;
    *(_QWORD *)(v69 + 16) = v64;
    *(_QWORD *)(v69 + 24) = v66;
    *(_QWORD *)(v69 + 32) = v68;
    *(_BYTE *)(v69 + 40) = 0;
    v70 = sub_100010CC4((uint64_t)v18, &qword_1014933D8);
    v71 = static Edge.Set.bottom.getter(v70);
    v72 = EdgeInsets.init(_all:)(v51);
    v74 = v73;
    v76 = v75;
    v78 = v77;
    v79 = v137;
    sub_10000C1FC(v42, v137, &qword_1014933E0);
    v80 = v79 + *(int *)(v124 + 36);
    *(_BYTE *)v80 = v71;
    *(double *)(v80 + 8) = v72;
    *(_QWORD *)(v80 + 16) = v74;
    *(_QWORD *)(v80 + 24) = v76;
    *(_QWORD *)(v80 + 32) = v78;
    *(_BYTE *)(v80 + 40) = 0;
    sub_100010CC4(v42, &qword_1014933E0);
    v81 = *(_QWORD *)&v31[OBJC_IVAR____TtC4Maps29PlaceSummaryViewModelTemplate_backgroundColor];
    if (v81)
    {
      v82 = *(_QWORD *)&v31[OBJC_IVAR____TtC4Maps29PlaceSummaryViewModelTemplate_backgroundColor];
    }
    else
    {
      v82 = static Color.clear.getter();
      v81 = 0;
    }
    v83 = (uint64_t)v133;
    v85 = v130;
    v84 = v131;
    v86 = (uint64_t)v136;
    v87 = swift_retain(v81);
    v88 = static Edge.Set.all.getter(v87);
    v89 = v137;
    v90 = v127;
    sub_10000C1FC(v137, v127, &qword_1014933E8);
    v91 = v90 + *(int *)(v128 + 36);
    *(_QWORD *)v91 = v82;
    *(_BYTE *)(v91 + 8) = v88;
    sub_100010CC4(v89, &qword_1014933E8);
    v92 = sub_1000207BC(v90, v86, &qword_1014933F0);
    if ((v44 & 1) != 0)
    {
      v93 = v118;
      v94 = Divider.init()(v92);
      v95 = static Edge.Set.leading.getter(v94);
      v96 = EdgeInsets.init(_all:)(16.0);
      v98 = v97;
      v100 = v99;
      v102 = v101;
      v103 = v119;
      v104 = v117;
      v105 = v120;
      (*(void (**)(char *, char *, uint64_t))(v119 + 16))(v117, v93, v120);
      v106 = &v104[*(int *)(v84 + 36)];
      *v106 = v95;
      *((double *)v106 + 1) = v96;
      *((_QWORD *)v106 + 2) = v98;
      *((_QWORD *)v106 + 3) = v100;
      *((_QWORD *)v106 + 4) = v102;
      v106[40] = 0;
      (*(void (**)(char *, uint64_t))(v103 + 8))(v93, v105);
      v107 = (uint64_t)v104;
      v86 = (uint64_t)v136;
      v108 = v132;
      sub_1000207BC(v107, v132, &qword_1014933B8);
      v109 = 0;
    }
    else
    {
      v109 = 1;
      v108 = v132;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v85 + 56))(v108, v109, 1, v84);
    v110 = v129;
    sub_10000C1FC(v86, v129, &qword_1014933F0);
    sub_10000C1FC(v108, v83, &qword_1014933C0);
    v111 = v134;
    sub_10000C1FC(v110, v134, &qword_1014933F0);
    v112 = sub_100008B04(&qword_101493400);
    sub_10000C1FC(v83, v111 + *(int *)(v112 + 48), &qword_1014933C0);
    sub_100010CC4(v108, &qword_1014933C0);
    sub_100010CC4(v86, &qword_1014933F0);
    sub_100010CC4((uint64_t)v135, (uint64_t *)&unk_10149A500);
    sub_100010CC4(v83, &qword_1014933C0);
    return sub_100010CC4(v110, &qword_1014933F0);
  }
  else
  {
    v114 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
    v115 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
    result = EnvironmentObject.error()(0, a2, v114, v115);
    __break(1u);
  }
  return result;
}

uint64_t sub_10001CCA0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v72 = a6;
  v73 = a5;
  v76 = a1;
  v66 = _s4LineVMa(0);
  __chkstk_darwin(v66);
  v68 = (uint64_t)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_100008B04(&qword_101493408);
  v70 = *(_QWORD *)(v79 - 8);
  __chkstk_darwin(v79);
  v67 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100008B04((uint64_t *)&unk_10149A500);
  __chkstk_darwin(v13);
  v15 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for PlaceSummaryViewModelLine(0);
  v74 = *(_QWORD *)(v16 - 8);
  v75 = v16;
  __chkstk_darwin(v16);
  v65 = (uint64_t)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100008B04(&qword_101493410);
  __chkstk_darwin(v18);
  v71 = (char *)&v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v69 = (uint64_t)&v64 - v21;
  v22 = sub_100008B04(&qword_101493418);
  __chkstk_darwin(v22);
  v78 = (uint64_t)&v64 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v26 = (char *)&v64 - v25;
  v27 = sub_100008B04(&qword_101493420);
  __chkstk_darwin(v27);
  v29 = (char *)&v64 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_100008B04(&qword_101493428);
  __chkstk_darwin(v30);
  v77 = (uint64_t)&v64 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v34 = (char *)&v64 - v33;
  v36 = __chkstk_darwin(v35);
  v38 = (char *)&v64 - v37;
  *(_QWORD *)v29 = static VerticalAlignment.center.getter(v36);
  *((_QWORD *)v29 + 1) = 0;
  v29[16] = 0;
  v39 = sub_100008B04(&qword_101493430);
  v40 = a2;
  v41 = a4;
  v42 = a4;
  v43 = v73;
  sub_10001D27C(v76, v40, a3, v42, v73, (uint64_t)&v29[*(int *)(v39 + 44)], a7);
  sub_10000C1FC((uint64_t)v29, (uint64_t)v34, &qword_101493420);
  v44 = &v34[*(int *)(v30 + 36)];
  *(_QWORD *)v44 = 0xD000000000000018;
  *((_QWORD *)v44 + 1) = 0x8000000100E422B0;
  v44[16] = 9;
  sub_100010CC4((uint64_t)v29, &qword_101493420);
  v76 = v38;
  sub_1000207BC((uint64_t)v34, (uint64_t)v38, &qword_101493428);
  if ((a3 & 1) != 0 || !*(_QWORD *)(v43 + 16))
  {
    v46 = sub_100008B04(&qword_101493438);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v26, 1, 1, v46);
  }
  else
  {
    sub_10001E760(v43, (uint64_t)sub_10001E75C, (uint64_t)v26);
    v45 = sub_100008B04(&qword_101493438);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v26, 0, 1, v45);
  }
  sub_10000C1FC(v41, (uint64_t)v15, (uint64_t *)&unk_10149A500);
  v47 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v74 + 48))(v15, 1, v75);
  v48 = v79;
  v49 = (uint64_t)v26;
  if (v47 == 1)
  {
    sub_100010CC4((uint64_t)v15, (uint64_t *)&unk_10149A500);
    v50 = 1;
    v52 = (uint64_t)v71;
    v51 = v72;
    v54 = v69;
    v53 = v70;
  }
  else
  {
    v55 = v65;
    sub_10001FF60((uint64_t)v15, v65);
    v56 = v68;
    sub_1000202AC(v55, v68, type metadata accessor for PlaceSummaryViewModelLine);
    v57 = (uint64_t)v67;
    *(_BYTE *)(v56 + *(int *)(v66 + 20)) = 0;
    sub_1000202AC(v56, v57, _s4LineVMa);
    v58 = v57 + *(int *)(v48 + 36);
    *(_QWORD *)v58 = 0xD000000000000011;
    *(_QWORD *)(v58 + 8) = 0x8000000100E422D0;
    *(_BYTE *)(v58 + 16) = 9;
    sub_1000202F0(v56, _s4LineVMa);
    sub_1000202F0(v55, type metadata accessor for PlaceSummaryViewModelLine);
    v54 = v69;
    sub_1000207BC(v57, v69, &qword_101493408);
    v50 = 0;
    v52 = (uint64_t)v71;
    v51 = v72;
    v53 = v70;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56))(v54, v50, 1, v48);
  v60 = (uint64_t)v76;
  v59 = v77;
  sub_10000C1FC((uint64_t)v76, v77, &qword_101493428);
  v61 = v78;
  sub_10000C1FC(v49, v78, &qword_101493418);
  sub_10000C1FC(v54, v52, &qword_101493410);
  sub_10000C1FC(v59, v51, &qword_101493428);
  v62 = sub_100008B04(&qword_101493440);
  sub_10000C1FC(v61, v51 + *(int *)(v62 + 48), &qword_101493418);
  sub_10000C1FC(v52, v51 + *(int *)(v62 + 64), &qword_101493410);
  sub_100010CC4(v54, &qword_101493410);
  sub_100010CC4(v49, &qword_101493418);
  sub_100010CC4(v60, &qword_101493428);
  sub_100010CC4(v52, &qword_101493410);
  sub_100010CC4(v61, &qword_101493418);
  return sub_100010CC4(v59, &qword_101493428);
}

uint64_t sub_10001D27C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t KeyPath;
  uint64_t v37;
  id v38;
  objc_class *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  ListInteractionSession *v44;
  char v45;
  char v46;
  double v47;
  UITableView *v48;
  UICollectionView *v49;
  int64_t v50;
  char *v51;
  char *v52;
  char v53;
  NSArray *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  Swift::OpaquePointer v69;
  char v70;
  __n128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  Class isa;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  objc_class *v84;
  char v85;
  objc_class *v86;
  objc_class *v87;
  _OWORD *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v97;
  uint64_t v98;
  objc_class *v99;
  unint64_t v100;
  double v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  Class *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  Class *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  objc_class *v125;
  unsigned __int8 v126;
  objc_class *v127;
  char v128;
  objc_class *v129;
  objc_class *v130;
  char v131;
  double v132;
  uint64_t v133;
  Class *v134;
  objc_class *v135;
  objc_class *v136;
  objc_class *v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  Class *v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  objc_class *v148;
  unsigned __int8 v149;
  objc_class *v150;
  char v151;
  objc_class *v152;
  objc_class *v153;
  char v154;
  double v155;
  Class *v156;
  objc_class *v157;
  objc_class *v158;
  objc_class *v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int *v166;
  uint64_t v167;
  uint64_t result;
  uint64_t v169;
  uint64_t v170;
  int64_t v171;
  UICollectionView *v172;
  UITableView *v173;
  double v174;
  int v175;
  UIDragSession *v176;
  DragAndDropPreview *v177;
  NSMutableDictionary *v178;
  double v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  Class *v192;
  char *v193;
  Class *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  objc_class *v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  char v208;
  char v209;
  _BYTE v210[200];
  _BYTE v211[200];
  DataSource v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char v216;
  char v217;
  double v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char v222;
  unint64_t v223[25];
  ListInteractionSession *v224;
  char v225;
  NSMutableDictionary *v226;
  char v227;
  DragAndDropPreview *v228;
  UIDragSession *v229;
  objc_class *v230;
  unsigned __int8 v231;
  objc_class *v232;
  char v233;
  objc_class *v234;
  objc_class *v235;

  v199 = a4;
  v200 = a5;
  LODWORD(v202) = a3;
  v201 = a2;
  v206 = a6;
  v196 = sub_100008B04(&qword_101493488);
  __chkstk_darwin(v196);
  v194 = (Class *)((char *)&v171 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_100008B04(&qword_101493490);
  __chkstk_darwin(v10);
  v192 = (Class *)((char *)&v171 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_100008B04(&qword_101493498);
  __chkstk_darwin(v12);
  v193 = (char *)&v171 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v184 = sub_100008B04(&qword_101494DD0);
  __chkstk_darwin(v184);
  v187 = (uint64_t)&v171 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v182);
  v185 = (char *)&v171 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v183 = sub_100008B04(&qword_1014934A0);
  __chkstk_darwin(v183);
  v188 = (char *)&v171 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = sub_100008B04(&qword_1014934A8);
  __chkstk_darwin(v190);
  v186 = (uint64_t)&v171 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v189 = (uint64_t)&v171 - v19;
  v20 = sub_100008B04(&qword_1014934B0);
  v203 = *(_QWORD *)(v20 - 8);
  v204 = v20;
  __chkstk_darwin(v20);
  v195 = (char *)&v171 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100008B04(&qword_1014934B8);
  __chkstk_darwin(v22);
  v24 = (char *)&v171 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v27 = (char *)&v171 - v26;
  v28 = sub_100008B04(&qword_1014934C0);
  __chkstk_darwin(v28);
  v30 = (char *)&v171 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v33 = (char *)&v171 - v32;
  __chkstk_darwin(v34);
  v207 = (uint64_t)&v171 - v35;
  if (a1)
  {
    KeyPath = swift_getKeyPath(&unk_100E24C80);
    v37 = swift_getKeyPath(&unk_100E24CA8);
    v198 = a1;
    v38 = a1;
    static Published.subscript.getter(v223, v38, KeyPath, v37);

    swift_release(KeyPath);
    swift_release(v37);
    v39 = (objc_class *)v223[0];
    v205 = v30;
    v197 = v12;
    v191 = v10;
    if ((~v223[0] & 0xF000000000000007) != 0)
    {
      v40 = sub_100020008(v223[0]);
      v41 = static Alignment.center.getter(v40);
      v43 = _FrameLayout.init(width:height:alignment:)(&v224, 0x4038000000000000, 0, 0x4038000000000000, 0, v41, v42);
      v44 = v224;
      v45 = v225;
      v46 = v227;
      v177 = v228;
      v178 = v226;
      v176 = v229;
      v175 = static Edge.Set.leading.getter(v43);
      v47 = EdgeInsets.init(_all:)(6.0);
      v173 = v48;
      v174 = v47;
      v171 = v50;
      v172 = v49;
      v51 = v27;
      v52 = v24;
      v53 = static Edge.Set.trailing.getter();
      v54 = COERCE_NSARRAY_(EdgeInsets.init(_all:)(7.5));
      v56 = v55;
      v58 = v57;
      v179 = a7;
      v60 = v59;
      v210[0] = v45;
      LOBYTE(v230) = v46;
      v209 = 0;
      v208 = 0;
      v61 = static Edge.Set.vertical.getter();
      v62 = EdgeInsets.init(_all:)(7.5);
      v64 = v63;
      v66 = v65;
      v68 = v67;
      sub_1000200AC((unint64_t)v39);
      v211[0] = 0;
      v212.super.isa = v39;
      v212._currentListInteractionSession = v44;
      LOBYTE(v212._dateActive) = v210[0];
      v212._proactiveItemAddDates = v178;
      LOBYTE(v212._dragItem) = (_BYTE)v230;
      v212._previewView = v177;
      v212._currentDragSession = v176;
      LOBYTE(v212._locationManager) = v175;
      *(double *)&v212._eventProactiveSuggestionInteractionSent = v174;
      v212._tableView = v173;
      v212._collectionView = v172;
      v212._presentationStyle = v171;
      LOBYTE(v212._currentLocation) = v209;
      LOBYTE(v212._delegate) = v53;
      v24 = v52;
      v27 = v51;
      v212._keyCommands = v54;
      v213 = v56;
      v214 = v58;
      v215 = v60;
      a7 = v179;
      v216 = v208;
      v217 = v61;
      v218 = v62;
      v219 = v64;
      v220 = v66;
      v221 = v68;
      v222 = 0;
      CollectionPickerContaineeViewController.dataSource(_:didChangeSelectedCollections:)(&v212, v69);
    }
    else
    {
      sub_10001FFAC((uint64_t)&v212);
    }
    sub_1000207BC((uint64_t)&v212, (uint64_t)v223, &qword_1014934C8);
    v70 = (char)v202;
    v72 = static HorizontalAlignment.leading.getter(v71);
    v73 = 0x4000000000000000;
    if ((v70 & 1) != 0)
      v73 = 0x3FF0000000000000;
    *(_QWORD *)v33 = v72;
    *((_QWORD *)v33 + 1) = v73;
    v33[16] = 0;
    v74 = sub_100008B04(&qword_1014934D0);
    sub_10001DF18(v198, v201, v199, v70 & 1, v200, &v33[*(int *)(v74 + 44)]);
    sub_1000207BC((uint64_t)v33, v207, &qword_1014934C0);
    v75 = swift_getKeyPath(&unk_100E24CC8);
    v76 = swift_getKeyPath(&unk_100E24CF0);
    v77 = v38;
    static Published.subscript.getter(&v212, v77, v75, v76);

    swift_release(v75);
    swift_release(v76);
    isa = v212.super.isa;
    if ((~(uint64_t)v212.super.isa & 0xF000000000000007) == 0)
    {
      v79 = 1;
LABEL_20:
      v163 = (uint64_t)v205;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v203 + 56))(v27, v79, 1, v204);
      sub_1000207BC((uint64_t)v223, (uint64_t)v210, &qword_1014934C8);
      v164 = v207;
      sub_10000C1FC(v207, v163, &qword_1014934C0);
      sub_10000C1FC((uint64_t)v27, (uint64_t)v24, &qword_1014934B8);
      sub_1000207BC((uint64_t)v210, (uint64_t)v211, &qword_1014934C8);
      v165 = v206;
      sub_1000207BC((uint64_t)v211, v206, &qword_1014934C8);
      v166 = (int *)sub_100008B04(&qword_1014934D8);
      sub_10000C1FC(v163, v165 + v166[12], &qword_1014934C0);
      v167 = v165 + v166[16];
      *(_QWORD *)v167 = 0;
      *(_BYTE *)(v167 + 8) = 0;
      sub_10000C1FC((uint64_t)v24, v165 + v166[20], &qword_1014934B8);
      sub_100020038((uint64_t)v211, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10001FFF4);
      sub_100010CC4((uint64_t)v27, &qword_1014934B8);
      sub_100010CC4(v164, &qword_1014934C0);
      sub_100010CC4((uint64_t)v24, &qword_1014934B8);
      sub_100010CC4(v163, &qword_1014934C0);
      sub_1000207BC((uint64_t)v210, (uint64_t)&v212, &qword_1014934C8);
      return sub_100020038((uint64_t)&v212, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000200AC);
    }
    v80 = (unint64_t)v212.super.isa >> 61;
    v180 = v27;
    v181 = v24;
    if (((unint64_t)v212.super.isa >> 61) - 1 < 2)
    {
      if ((v70 & 1) != 0)
        v120 = 0x404B000000000000;
      else
        v120 = 0x4050000000000000;
      v121 = sub_100020008((unint64_t)v212.super.isa);
      v122 = static Alignment.center.getter(v121);
      v124 = _FrameLayout.init(width:height:alignment:)(&v230, v120, 0, v120, 0, v122, v123);
      v125 = v230;
      v126 = v231;
      v127 = v232;
      v128 = v233;
      v129 = v234;
      v130 = v235;
      v131 = static Edge.Set.leading.getter(v124);
      v132 = EdgeInsets.init(_all:)(10.0);
      v133 = v191;
      v134 = v192;
      *v192 = isa;
      v134[1] = v125;
      *((_BYTE *)v134 + 16) = v126;
      v134[3] = v127;
      *((_BYTE *)v134 + 32) = v128;
      v134[5] = v129;
      v134[6] = v130;
      *((_BYTE *)v134 + 56) = v131;
      *((double *)v134 + 8) = v132;
      v134[9] = v135;
      v134[10] = v136;
      v134[11] = v137;
      *((_BYTE *)v134 + 96) = 0;
      swift_storeEnumTagMultiPayload(v134, v133, 1);
      sub_100020008((unint64_t)isa);
      v138 = sub_100008B04(&qword_1014934E0);
      v139 = sub_10002067C(&qword_1014934F0, &qword_1014934A8, (uint64_t (*)(void))sub_10002017C, (uint64_t)&protocol witness table for _PaddingLayout);
      v140 = sub_100020220();
      v141 = (uint64_t)v193;
      _ConditionalContent<>.init(storage:)(v134, v190, v138, v139, v140);
      v142 = v194;
      sub_10000C1FC(v141, (uint64_t)v194, &qword_101493498);
      swift_storeEnumTagMultiPayload(v142, v196, 0);
      v143 = sub_1000200F0();
      v119 = (uint64_t)v195;
      _ConditionalContent<>.init(storage:)(v142, v197, v138, v143, v140);
      sub_1000200AC((unint64_t)isa);
      sub_100010CC4(v141, &qword_101493498);
    }
    else
    {
      if ((_DWORD)v80 == 3 || !(_DWORD)v80)
      {
        v81 = sub_100020008((unint64_t)v212.super.isa);
        v82 = static Alignment.center.getter(v81);
        _FrameLayout.init(width:height:alignment:)(&v230, *(_QWORD *)&a7, 0, *(_QWORD *)&a7, 0, v82, v83);
        v202 = v230;
        LODWORD(v201) = v231;
        v84 = v232;
        v85 = v233;
        v86 = v234;
        v87 = v235;
        v88 = v185;
        v89 = &v185[*(int *)(v182 + 20)];
        v90 = enum case for RoundedCornerStyle.continuous(_:);
        v91 = type metadata accessor for RoundedCornerStyle(0);
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v91 - 8) + 104))(v89, v90, v91);
        __asm { FMOV            V0.2D, #6.0 }
        *v88 = _Q0;
        v97 = v187;
        sub_1000202AC((uint64_t)v88, v187, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
        *(_WORD *)(v97 + *(int *)(v184 + 36)) = 256;
        v98 = (uint64_t)v188;
        sub_10000C1FC(v97, (uint64_t)&v188[*(int *)(v183 + 36)], &qword_101494DD0);
        v99 = v202;
        *(_QWORD *)v98 = isa;
        *(_QWORD *)(v98 + 8) = v99;
        *(_BYTE *)(v98 + 16) = v201;
        *(_QWORD *)(v98 + 24) = v84;
        *(_BYTE *)(v98 + 32) = v85;
        *(_QWORD *)(v98 + 40) = v86;
        *(_QWORD *)(v98 + 48) = v87;
        sub_100020008((unint64_t)isa);
        sub_100010CC4(v97, &qword_101494DD0);
        sub_1000202F0((uint64_t)v88, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
        v100 = sub_1000200AC((unint64_t)isa);
        LOBYTE(v97) = static Edge.Set.leading.getter(v100);
        v101 = EdgeInsets.init(_all:)(10.0);
        v103 = v102;
        v105 = v104;
        v107 = v106;
        v108 = v186;
        sub_10000C1FC(v98, v186, &qword_1014934A0);
        v109 = v190;
        v110 = v108 + *(int *)(v190 + 36);
        *(_BYTE *)v110 = v97;
        *(double *)(v110 + 8) = v101;
        *(_QWORD *)(v110 + 16) = v103;
        *(_QWORD *)(v110 + 24) = v105;
        *(_QWORD *)(v110 + 32) = v107;
        *(_BYTE *)(v110 + 40) = 0;
        sub_100010CC4(v98, &qword_1014934A0);
        v111 = v189;
        sub_1000207BC(v108, v189, &qword_1014934A8);
        v112 = v192;
        sub_10000C1FC(v111, (uint64_t)v192, &qword_1014934A8);
        swift_storeEnumTagMultiPayload(v112, v191, 0);
        v113 = sub_100008B04(&qword_1014934E0);
        v114 = sub_10002067C(&qword_1014934F0, &qword_1014934A8, (uint64_t (*)(void))sub_10002017C, (uint64_t)&protocol witness table for _PaddingLayout);
        v115 = sub_100020220();
        v116 = (uint64_t)v193;
        _ConditionalContent<>.init(storage:)(v112, v109, v113, v114, v115);
        v117 = v194;
        sub_10000C1FC(v116, (uint64_t)v194, &qword_101493498);
        swift_storeEnumTagMultiPayload(v117, v196, 0);
        v118 = sub_1000200F0();
        v119 = (uint64_t)v195;
        _ConditionalContent<>.init(storage:)(v117, v197, v113, v118, v115);
        sub_1000200AC((unint64_t)isa);
        sub_100010CC4(v116, &qword_101493498);
        sub_100010CC4(v111, &qword_1014934A8);
LABEL_19:
        v27 = v180;
        sub_1000207BC(v119, (uint64_t)v180, &qword_1014934B0);
        v79 = 0;
        v24 = v181;
        goto LABEL_20;
      }
      v144 = sub_100020008((unint64_t)v212.super.isa);
      v145 = static Alignment.center.getter(v144);
      v147 = _FrameLayout.init(width:height:alignment:)(&v230, 0x4050000000000000, 0, 0x4050000000000000, 0, v145, v146);
      v148 = v230;
      v149 = v231;
      v150 = v232;
      v151 = v233;
      v152 = v234;
      v153 = v235;
      v154 = static Edge.Set.leading.getter(v147);
      v155 = EdgeInsets.init(_all:)(10.0);
      v156 = v194;
      *v194 = isa;
      v156[1] = v148;
      *((_BYTE *)v156 + 16) = v149;
      v156[3] = v150;
      *((_BYTE *)v156 + 32) = v151;
      v156[5] = v152;
      v156[6] = v153;
      *((_BYTE *)v156 + 56) = v154;
      *((double *)v156 + 8) = v155;
      v156[9] = v157;
      v156[10] = v158;
      v156[11] = v159;
      *((_BYTE *)v156 + 96) = 0;
      swift_storeEnumTagMultiPayload(v156, v196, 1);
      v160 = sub_100008B04(&qword_1014934E0);
      v161 = sub_1000200F0();
      v162 = sub_100020220();
      v119 = (uint64_t)v195;
      _ConditionalContent<>.init(storage:)(v156, v197, v160, v161, v162);
    }
    sub_1000200AC((unint64_t)isa);
    goto LABEL_19;
  }
  v169 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
  v170 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
  result = EnvironmentObject.error()(0, v201, v169, v170);
  __break(1u);
  return result;
}

uint64_t sub_10001DF18@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  id v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t result;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  _QWORD *v61;

  v53 = a5;
  v54 = a2;
  v56 = a4;
  v59 = a6;
  v8 = sub_100008B04(&qword_101493418);
  __chkstk_darwin(v8);
  v60 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v58 = (uint64_t)&v52 - v11;
  v12 = sub_100008B04((uint64_t *)&unk_10149A500);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_100008B04(&qword_101493528);
  v16 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v57 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v52 - v19;
  __chkstk_darwin(v21);
  v23 = (char *)&v52 - v22;
  if (a1)
  {
    v24 = a1;
    v25 = sub_1000863C4(0);

    v61 = v25;
    sub_10000C1FC(a3, (uint64_t)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&unk_10149A500);
    v26 = *(unsigned __int8 *)(v13 + 80);
    v27 = (v26 + 16) & ~v26;
    v28 = (v14 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
    v29 = swift_allocObject(&unk_10119C878, v28 + 16, v26 | 7);
    sub_1000207BC((uint64_t)v15, v29 + v27, (uint64_t *)&unk_10149A500);
    v30 = (_QWORD *)(v29 + v28);
    v31 = v54;
    *v30 = a1;
    v30[1] = v31;
    v32 = v24;
    v33 = sub_100008B04(&qword_101493460);
    v34 = type metadata accessor for UUID(0);
    v35 = sub_100008B04(&qword_101493530);
    v36 = sub_100010D70(&qword_101493468, &qword_101493460, (const char *)&protocol conformance descriptor for [A]);
    v37 = sub_100020458();
    v38 = sub_10000BC84(&qword_101493478, type metadata accessor for PlaceSummaryViewModelLine, (uint64_t)&unk_100E28064);
    ForEach<>.init(_:content:)(&v61, sub_1000203F0, v29, v33, v34, v35, v36, v37, v38);
    v39 = v55;
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v23, v20, v55);
    if ((v56 & 1) != 0 && *(_QWORD *)(v53 + 16))
    {
      v40 = v58;
      sub_10001E760(v53, (uint64_t)sub_10001E75C, v58);
      v41 = sub_100008B04(&qword_101493438);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v40, 0, 1, v41);
    }
    else
    {
      v42 = sub_100008B04(&qword_101493438);
      v40 = v58;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v58, 1, 1, v42);
    }
    v44 = v59;
    v43 = (uint64_t)v60;
    v45 = v57;
    v46 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
    v46(v57, v23, v39);
    sub_10000C1FC(v40, v43, &qword_101493418);
    v46(v44, v45, v39);
    v47 = sub_100008B04(&qword_101493540);
    sub_10000C1FC(v43, (uint64_t)&v44[*(int *)(v47 + 48)], &qword_101493418);
    sub_100010CC4(v40, &qword_101493418);
    v48 = *(void (**)(char *, uint64_t))(v16 + 8);
    v48(v23, v39);
    sub_100010CC4(v43, &qword_101493418);
    return ((uint64_t (*)(char *, uint64_t))v48)(v45, v39);
  }
  else
  {
    v50 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
    v51 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
    result = EnvironmentObject.error()(0, v54, v50, v51);
    __break(1u);
  }
  return result;
}

uint64_t sub_10001E310@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, uint64_t, int *);
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t KeyPath;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;

  v44 = a4;
  v46 = a3;
  v47 = a5;
  v7 = (int *)type metadata accessor for PlaceSummaryViewModelLine(0);
  v8 = *((_QWORD *)v7 - 1);
  __chkstk_darwin(v7);
  v45 = (uint64_t)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008B04(&qword_101493548);
  __chkstk_darwin(v10);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100008B04((uint64_t *)&unk_10149A500);
  __chkstk_darwin(v13);
  v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v43 - v17;
  sub_1000202AC(a1, (uint64_t)&v43 - v17, type metadata accessor for PlaceSummaryViewModelLine);
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v8 + 56))(v18, 0, 1, v7);
  v19 = (uint64_t)&v12[*(int *)(v10 + 48)];
  sub_10000C1FC(a2, (uint64_t)v12, (uint64_t *)&unk_10149A500);
  sub_10000C1FC((uint64_t)v18, v19, (uint64_t *)&unk_10149A500);
  v20 = *(unsigned int (**)(uint64_t, uint64_t, int *))(v8 + 48);
  if (v20((uint64_t)v12, 1, v7) == 1)
  {
    sub_100010CC4((uint64_t)v18, (uint64_t *)&unk_10149A500);
    if (v20(v19, 1, v7) == 1)
    {
      sub_100010CC4((uint64_t)v12, (uint64_t *)&unk_10149A500);
LABEL_19:
      v33 = _s4LineVMa(0);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v47, 1, 1, v33);
    }
    v21 = &qword_101493548;
    goto LABEL_12;
  }
  sub_10000C1FC((uint64_t)v12, (uint64_t)v15, (uint64_t *)&unk_10149A500);
  if (v20(v19, 1, v7) == 1)
  {
    v21 = &qword_101493548;
LABEL_11:
    sub_100010CC4((uint64_t)v18, (uint64_t *)&unk_10149A500);
    sub_1000202F0((uint64_t)v15, type metadata accessor for PlaceSummaryViewModelLine);
LABEL_12:
    sub_100010CC4((uint64_t)v12, v21);
    goto LABEL_13;
  }
  v22 = v19;
  v23 = v45;
  sub_10001FF60(v22, v45);
  if ((static UUID.== infix(_:_:)(v15, v23) & 1) == 0
    || (sub_100083D08(*(_QWORD *)&v15[v7[5]], *(_QWORD *)(v23 + v7[5])) & 1) == 0
    || v15[v7[6]] != *(_BYTE *)(v23 + v7[6]))
  {
    sub_1000202F0(v23, type metadata accessor for PlaceSummaryViewModelLine);
    v21 = (uint64_t *)&unk_10149A500;
    goto LABEL_11;
  }
  v38 = v7[7];
  v39 = v15[v38];
  v40 = *(unsigned __int8 *)(v23 + v38);
  sub_1000202F0(v23, type metadata accessor for PlaceSummaryViewModelLine);
  sub_100010CC4((uint64_t)v18, (uint64_t *)&unk_10149A500);
  sub_1000202F0((uint64_t)v15, type metadata accessor for PlaceSummaryViewModelLine);
  sub_100010CC4((uint64_t)v12, (uint64_t *)&unk_10149A500);
  if (v39 == v40)
    goto LABEL_19;
LABEL_13:
  v24 = v46;
  if (v46)
  {
    KeyPath = swift_getKeyPath(&unk_100E24D10);
    v26 = swift_getKeyPath(&unk_100E24D38);
    v27 = v24;
    static Published.subscript.getter(&v48, v27, KeyPath, v26);

    swift_release(KeyPath);
    swift_release(v26);
    v28 = v48;
    v29 = *(_QWORD *)(v48 + 16);
    if (!v29)
    {
LABEL_18:
      swift_bridgeObjectRelease(v28);
      goto LABEL_19;
    }
    v30 = 0;
    v31 = v48 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v32 = *(_QWORD *)(v8 + 72);
    while ((static UUID.== infix(_:_:)(v31, a1) & 1) == 0)
    {
      ++v30;
      v31 += v32;
      if (v29 == v30)
        goto LABEL_18;
    }
    swift_bridgeObjectRelease(v28);
    v35 = a1;
    v36 = v47;
    sub_1000202AC(v35, v47, type metadata accessor for PlaceSummaryViewModelLine);
    v37 = _s4LineVMa(0);
    *(_BYTE *)(v36 + *(int *)(v37 + 20)) = v30 == 0;
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v36, 0, 1, v37);
  }
  else
  {
    v41 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
    v42 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
    result = EnvironmentObject.error()(0, v44, v41, v42);
    __break(1u);
  }
  return result;
}

uint64_t sub_10001E760@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = sub_100008B04(&qword_101493448);
  __chkstk_darwin(v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100008B04(&qword_101493450);
  __chkstk_darwin(v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = _s4LineVMa(0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a1 + 16) == 1)
  {
    v16 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PlaceSummaryViewModelLine(0) - 8) + 80);
    sub_1000202AC(a1 + ((v16 + 32) & ~v16), (uint64_t)v15, type metadata accessor for PlaceSummaryViewModelLine);
    v15[*(int *)(v12 + 20)] = 0;
    sub_1000202AC((uint64_t)v15, (uint64_t)v11, _s4LineVMa);
    swift_storeEnumTagMultiPayload(v11, v9, 0);
    v17 = sub_10000BC84(&qword_101493470, _s4LineVMa, (uint64_t)&unk_100E25EA0);
    v18 = sub_100010D70(&qword_101493480, &qword_101493448, (const char *)&protocol conformance descriptor for VStack<A>);
    _ConditionalContent<>.init(storage:)(v11, v12, v6, v17, v18);
    return sub_1000202F0((uint64_t)v15, _s4LineVMa);
  }
  else
  {
    *(_QWORD *)v8 = static HorizontalAlignment.leading.getter(v13);
    *((_QWORD *)v8 + 1) = 0x4000000000000000;
    v8[16] = 0;
    sub_100008B04(&qword_101493458);
    v31 = a1;
    swift_bridgeObjectRetain(a1);
    v20 = sub_100008B04(&qword_101493460);
    v21 = type metadata accessor for UUID(0);
    v30 = a3;
    v22 = v21;
    v23 = sub_100010D70(&qword_101493468, &qword_101493460, (const char *)&protocol conformance descriptor for [A]);
    v24 = sub_10000BC84(&qword_101493470, _s4LineVMa, (uint64_t)&unk_100E25EA0);
    v29 = v6;
    v25 = v24;
    v26 = sub_10000BC84(&qword_101493478, type metadata accessor for PlaceSummaryViewModelLine, (uint64_t)&unk_100E28064);
    ForEach<>.init(_:content:)(&v31, a2, 0, v20, v22, v12, v23, v25, v26);
    sub_10000C1FC((uint64_t)v8, (uint64_t)v11, &qword_101493448);
    swift_storeEnumTagMultiPayload(v11, v9, 1);
    v27 = sub_100010D70(&qword_101493480, &qword_101493448, (const char *)&protocol conformance descriptor for VStack<A>);
    _ConditionalContent<>.init(storage:)(v11, v12, v29, v25, v27);
    return sub_100010CC4((uint64_t)v8, &qword_101493448);
  }
}

uint64_t sub_10001EA6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  sub_1000202AC(a1, a2, type metadata accessor for PlaceSummaryViewModelLine);
  result = _s4LineVMa(0);
  *(_BYTE *)(a2 + *(int *)(result + 20)) = 0;
  return result;
}

uint64_t sub_10001EAA8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10001C42C(*(void **)v1, *(_QWORD *)(v1 + 8), a1);
}

uint64_t sub_10001EAB0@<X0>(void *a1@<X0>, double a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  __n128 v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char *v23;
  char *v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = a3;
  v5 = sub_100008B04(&qword_101493550);
  __chkstk_darwin(v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008B04(&qword_101493558);
  __chkstk_darwin(v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008B04(&qword_101493560);
  __chkstk_darwin(v11);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v14 = a1;
    v15 = sub_1000863C4(1);

    v17 = 1;
    if (!*(_QWORD *)&v14[OBJC_IVAR____TtC4Maps29PlaceSummaryViewModelTemplate_actionButtons + 8])
      v17 = *(_QWORD *)&v14[OBJC_IVAR____TtC4Maps29PlaceSummaryViewModelTemplate_refinementButtons] != 0;
    v18 = static HorizontalAlignment.leading.getter(v16);
    v19 = 0x4010000000000000;
    if (!v15[2])
      v19 = 0x4020000000000000;
    *(_QWORD *)v7 = v18;
    *((_QWORD *)v7 + 1) = v19;
    v7[16] = 0;
    v20 = sub_100008B04(&qword_101493568);
    sub_10001ED3C((char *)a1, a2, (uint64_t)v15, v17, (uint64_t)&v7[*(int *)(v20 + 44)]);
    v21 = swift_bridgeObjectRelease(v15);
    v22 = static Edge.Set.horizontal.getter(v21);
    sub_10000C1FC((uint64_t)v7, (uint64_t)v10, &qword_101493550);
    v23 = &v10[*(int *)(v8 + 36)];
    *v23 = v22;
    *(_OWORD *)(v23 + 8) = 0u;
    *(_OWORD *)(v23 + 24) = 0u;
    v23[40] = 1;
    sub_100010CC4((uint64_t)v7, &qword_101493550);
    sub_10000C1FC((uint64_t)v10, (uint64_t)v13, &qword_101493558);
    v24 = &v13[*(int *)(v11 + 36)];
    *(_QWORD *)v24 = 0xD00000000000001ALL;
    *((_QWORD *)v24 + 1) = 0x8000000100E422F0;
    v24[16] = 9;
    sub_100010CC4((uint64_t)v10, &qword_101493558);
    return sub_1000207BC((uint64_t)v13, v29, &qword_101493560);
  }
  else
  {
    v26 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
    v27 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
    result = EnvironmentObject.error()(0, *(_QWORD *)&a2, v26, v27);
    __break(1u);
  }
  return result;
}

uint64_t sub_10001ED3C@<X0>(char *a1@<X0>, double a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  double v48;
  double v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  __n128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  double v70;
  double v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  double v100;
  uint64_t v101;
  uint64_t v102;
  double v103;
  double v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  double v109;
  uint64_t v110;
  double v111;
  uint64_t v112;
  double v113;
  uint64_t KeyPath;
  uint64_t v115;
  char v116;
  double v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  double v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  Swift::OpaquePointer v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t result;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  double v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  char v159;
  char v160;
  _BYTE v161[128];
  uint64_t v162;
  uint64_t v163;
  char v164;
  double v165;
  uint64_t v166;
  double v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  double v171;
  uint64_t v172;
  double v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char v177;
  _OWORD v178[6];
  _OWORD v179[2];
  _OWORD v180[6];
  _OWORD v181[3];

  v158 = a4;
  v150 = a3;
  v157 = a5;
  v7 = sub_100008B04(&qword_101493448);
  __chkstk_darwin(v7);
  v145 = (uint64_t *)((char *)&v143 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v146 = sub_100008B04(&qword_101493570);
  __chkstk_darwin(v146);
  v149 = (uint64_t)&v143 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008B04(&qword_101493578);
  v11 = *(_QWORD *)(v10 - 8);
  v152 = v10;
  v153 = v11;
  __chkstk_darwin(v10);
  v148 = (uint64_t)&v143 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v147 = (uint64_t)&v143 - v14;
  v15 = sub_100008B04(&qword_101493580);
  __chkstk_darwin(v15);
  v156 = (uint64_t)&v143 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v151 = (uint64_t)&v143 - v18;
  v19 = sub_100008B04(&qword_101493588);
  __chkstk_darwin(v19);
  v21 = (char *)&v143 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100008B04(&qword_101493590);
  __chkstk_darwin(v22);
  v24 = (char *)&v143 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100008B04(&qword_101493598);
  __chkstk_darwin(v25);
  v155 = (uint64_t)&v143 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v29 = (char *)&v143 - v28;
  v31 = __chkstk_darwin(v30);
  v33 = (char *)&v143 - v32;
  *(_QWORD *)v21 = static VerticalAlignment.center.getter(v31);
  *((_QWORD *)v21 + 1) = 0;
  v21[16] = 0;
  v34 = &v21[*(int *)(sub_100008B04(&qword_1014935A0) + 44)];
  v154 = a1;
  v144 = a2;
  v35 = sub_10001F684(a1, a2, v34);
  LOBYTE(a2) = static Edge.Set.top.getter(v35);
  v36 = EdgeInsets.init(_all:)(14.0);
  v38 = v37;
  v40 = v39;
  v42 = v41;
  sub_10000C1FC((uint64_t)v21, (uint64_t)v24, &qword_101493588);
  v43 = &v24[*(int *)(v22 + 36)];
  *v43 = LOBYTE(a2);
  v44 = v150;
  *((double *)v43 + 1) = v36;
  *((_QWORD *)v43 + 2) = v38;
  *((_QWORD *)v43 + 3) = v40;
  *((_QWORD *)v43 + 4) = v42;
  v43[40] = 0;
  v45 = sub_100010CC4((uint64_t)v21, &qword_101493588);
  v46 = static Edge.Set.bottom.getter(v45);
  v47 = *(_QWORD *)(v44 + 16);
  v48 = 0.0;
  if ((v158 & 1) != 0)
    v49 = 0.0;
  else
    v49 = 14.0;
  if (!v47)
    v48 = v49;
  v50 = EdgeInsets.init(_all:)(v48);
  v52 = v51;
  v54 = v53;
  v56 = v55;
  sub_10000C1FC((uint64_t)v24, (uint64_t)v29, &qword_101493590);
  v57 = &v29[*(int *)(v25 + 36)];
  *v57 = v46;
  *((double *)v57 + 1) = v50;
  *((_QWORD *)v57 + 2) = v52;
  *((_QWORD *)v57 + 3) = v54;
  *((_QWORD *)v57 + 4) = v56;
  v57[40] = 0;
  sub_100010CC4((uint64_t)v24, &qword_101493590);
  v58 = (uint64_t)v33;
  sub_1000207BC((uint64_t)v29, (uint64_t)v33, &qword_101493598);
  if (v47)
  {
    v60 = static HorizontalAlignment.leading.getter(v59);
    v61 = (uint64_t)v145;
    *v145 = v60;
    *(_QWORD *)(v61 + 8) = 0x4000000000000000;
    *(_BYTE *)(v61 + 16) = 0;
    sub_100008B04(&qword_101493458);
    *(_QWORD *)&v180[0] = v44;
    swift_bridgeObjectRetain(v44);
    v62 = sub_100008B04(&qword_101493460);
    v63 = type metadata accessor for UUID(0);
    v64 = _s4LineVMa(0);
    v65 = sub_100010D70(&qword_101493468, &qword_101493460, (const char *)&protocol conformance descriptor for [A]);
    v66 = sub_10000BC84(&qword_101493470, _s4LineVMa, (uint64_t)&unk_100E25EA0);
    v67 = sub_10000BC84(&qword_101493478, type metadata accessor for PlaceSummaryViewModelLine, (uint64_t)&unk_100E28064);
    v68 = ForEach<>.init(_:content:)(v180, sub_10001E75C, 0, v62, v63, v64, v65, v66, v67);
    v69 = static Edge.Set.bottom.getter(v68);
    v70 = 4.0;
    if ((v158 & 1) == 0)
      v70 = 14.0;
    v71 = EdgeInsets.init(_all:)(v70);
    v73 = v72;
    v75 = v74;
    v77 = v76;
    v78 = v149;
    sub_10000C1FC(v61, v149, &qword_101493448);
    v79 = v78 + *(int *)(v146 + 36);
    *(_BYTE *)v79 = v69;
    *(double *)(v79 + 8) = v71;
    *(_QWORD *)(v79 + 16) = v73;
    *(_QWORD *)(v79 + 24) = v75;
    *(_QWORD *)(v79 + 32) = v77;
    *(_BYTE *)(v79 + 40) = 0;
    v80 = sub_100010CC4(v61, &qword_101493448);
    v81 = static Edge.Set.leading.getter(v80);
    v82 = EdgeInsets.init(_all:)(40.0);
    v84 = v83;
    v86 = v85;
    v88 = v87;
    v89 = v148;
    sub_10000C1FC(v78, v148, &qword_101493570);
    v90 = v152;
    v91 = v89 + *(int *)(v152 + 36);
    *(_BYTE *)v91 = v81;
    *(double *)(v91 + 8) = v82;
    *(_QWORD *)(v91 + 16) = v84;
    *(_QWORD *)(v91 + 24) = v86;
    *(_QWORD *)(v91 + 32) = v88;
    *(_BYTE *)(v91 + 40) = 0;
    sub_100010CC4(v78, &qword_101493570);
    v92 = v147;
    sub_1000207BC(v89, v147, &qword_101493578);
    v93 = v151;
    sub_1000207BC(v92, v151, &qword_101493578);
    v94 = 0;
    v95 = v90;
  }
  else
  {
    v94 = 1;
    v93 = v151;
    v95 = v152;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v153 + 56))(v93, v94, 1, v95);
  if (v154)
  {
    v96 = *(_QWORD *)&v154[OBJC_IVAR____TtC4Maps29PlaceSummaryViewModelTemplate_actionButtons + 8];
    if (v96)
    {
      v97 = *(_QWORD *)&v154[OBJC_IVAR____TtC4Maps29PlaceSummaryViewModelTemplate_actionButtons];
      v98 = swift_bridgeObjectRetain(*(_QWORD *)&v154[OBJC_IVAR____TtC4Maps29PlaceSummaryViewModelTemplate_actionButtons
                                                    + 8]);
      v99 = static Edge.Set.leading.getter(v98);
      v100 = EdgeInsets.init(_all:)(40.0);
      v102 = v101;
      v104 = v103;
      v106 = v105;
      v108 = static Edge.Set.bottom.getter(v107);
      v109 = EdgeInsets.init(_all:)(14.0);
      v162 = v97;
      v163 = v96;
      v164 = v99;
      v165 = v100;
      v166 = v102;
      v167 = v104;
      v168 = v106;
      LOBYTE(v169) = 0;
      LOBYTE(v170) = v108;
      v171 = v109;
      v172 = v110;
      v173 = v111;
      v174 = v112;
      LOBYTE(v175) = 0;
      sub_1000207B4((uint64_t)&v162);
    }
    else
    {
      v113 = *(double *)&v154[OBJC_IVAR____TtC4Maps29PlaceSummaryViewModelTemplate_refinementButtons];
      if (v113 == 0.0)
      {
        sub_1000204DC((uint64_t)v178);
        goto LABEL_17;
      }
      KeyPath = swift_getKeyPath(&unk_100E24D58);
      v115 = swift_bridgeObjectRetain(*(_QWORD *)&v113);
      v116 = static Edge.Set.bottom.getter(v115);
      v117 = EdgeInsets.init(_all:)(14.0);
      v119 = v118;
      v121 = v120;
      v123 = v122;
      v125 = static Edge.Set.horizontal.getter(v124);
      v126 = EdgeInsets.init(_all:)(-16.0);
      v161[0] = 0;
      v160 = 0;
      v159 = 0;
      v162 = KeyPath;
      v163 = 0;
      v164 = 0;
      v165 = v113;
      LOBYTE(v166) = v116;
      v167 = v117;
      v168 = v119;
      v169 = v121;
      v170 = v123;
      LOBYTE(v171) = 0;
      LOBYTE(v172) = v125;
      v173 = v126;
      v174 = v127;
      v175 = v128;
      v176 = v129;
      v177 = 0;
      sub_100020670((uint64_t)&v162);
    }
    sub_1000207BC((uint64_t)&v162, (uint64_t)v178, &qword_1014935B8);
    v130 = sub_100008B04(&qword_1014935C0);
    v131 = sub_100008B04(&qword_1014935C8);
    v132 = sub_10002067C(&qword_1014935D0, &qword_1014935C0, sub_1000206E4, (uint64_t)&protocol witness table for _PaddingLayout);
    v133 = sub_10002067C(&qword_1014935F0, &qword_1014935C8, sub_10002074C, (uint64_t)&protocol witness table for _PaddingLayout);
    _ConditionalContent<>.init(storage:)(v178, v130, v131, v132, v133);
    v178[4] = v180[4];
    v178[5] = v180[5];
    v179[0] = v181[0];
    *(_OWORD *)((char *)v179 + 10) = *(_OWORD *)((char *)v181 + 10);
    v178[0] = v180[0];
    v178[1] = v180[1];
    v178[2] = v180[2];
    v178[3] = v180[3];
    CollectionPickerContaineeViewController.dataSource(_:didChangeSelectedCollections:)((DataSource *)v178, v134);
LABEL_17:
    sub_1000207BC((uint64_t)v178, (uint64_t)v180, &qword_1014935A8);
    v135 = v155;
    sub_10000C1FC(v58, v155, &qword_101493598);
    v136 = v156;
    sub_10000C1FC(v93, v156, &qword_101493580);
    sub_1000207BC((uint64_t)v180, (uint64_t)v161, &qword_1014935A8);
    v137 = v157;
    sub_10000C1FC(v135, v157, &qword_101493598);
    v138 = sub_100008B04(&qword_1014935B0);
    sub_10000C1FC(v136, v137 + *(int *)(v138 + 48), &qword_101493580);
    v139 = v137 + *(int *)(v138 + 64);
    sub_1000207BC((uint64_t)v161, (uint64_t)&v162, &qword_1014935A8);
    sub_1000207BC((uint64_t)&v162, v139, &qword_1014935A8);
    sub_100020588((uint64_t)&v162, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_100020500);
    sub_100010CC4(v93, &qword_101493580);
    sub_100010CC4(v58, &qword_101493598);
    sub_1000207BC((uint64_t)v161, (uint64_t)v178, &qword_1014935A8);
    sub_100020588((uint64_t)v178, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_1000205EC);
    sub_100010CC4(v136, &qword_101493580);
    return sub_100010CC4(v135, &qword_101493598);
  }
  v141 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
  v142 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
  result = EnvironmentObject.error()(0, *(_QWORD *)&v144, v141, v142);
  __break(1u);
  return result;
}

unint64_t sub_10001F684@<X0>(void *a1@<X0>, double a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __n128 v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  id v56;
  _QWORD *v57;
  uint64_t v58;
  double v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unsigned __int8 v73;
  double v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  int *v91;
  char *v92;
  char *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t result;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  void *v108;
  double v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  int v116;
  int v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  double v134;
  double v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  __int16 v139;
  unint64_t v140[12];
  unsigned __int8 v141;
  unsigned __int8 v142;
  unint64_t v143;
  unsigned __int8 v144;
  uint64_t v145;
  unsigned __int8 v146;
  uint64_t v147;
  uint64_t v148;

  v6 = sub_100008B04(&qword_101493610);
  __chkstk_darwin(v6);
  v8 = (char *)&v105 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v125 = (uint64_t *)((char *)&v105 - v10);
  if (a1)
  {
    v109 = a2;
    v110 = a3;
    KeyPath = swift_getKeyPath(&unk_100E24C80);
    v12 = swift_getKeyPath(&unk_100E24CA8);
    v108 = a1;
    v13 = a1;
    static Published.subscript.getter(v140, v13, KeyPath, v12);
    v107 = v13;

    swift_release(KeyPath);
    v14 = swift_release(v12);
    v15 = v140[0];
    v114 = v8;
    if ((~v140[0] & 0xF000000000000007) != 0)
    {
      v35 = sub_100020008(v140[0]);
      v36 = static Alignment.center.getter(v35);
      v38 = _FrameLayout.init(width:height:alignment:)(&v143, 0x403E000000000000, 0, 0x403E000000000000, 0, v36, v37);
      v39 = v143;
      v40 = v144;
      v41 = v145;
      v42 = v146;
      v44 = v147;
      v43 = v148;
      v45 = static Edge.Set.trailing.getter(v38);
      v46 = EdgeInsets.init(_all:)(10.0);
      v127 = v15;
      v128 = v39;
      v129 = v40;
      v130 = v41;
      v131 = v42;
      v132 = v44;
      v133 = v43;
      *(_QWORD *)&v134 = v45;
      v135 = v46;
      v136 = v47;
      v137 = v48;
      v138 = v49;
      v139 = 0;
      v50 = sub_100008B04(&qword_101493618);
      v51 = sub_100008B04(&qword_101493620);
      v52 = sub_100020800();
      v53 = sub_10002067C(&qword_101493650, &qword_101493620, sub_10002090C, (uint64_t)&protocol witness table for _PaddingLayout);
      _ConditionalContent<>.init(storage:)(&v127, v50, v51, v52, v53);
      sub_1000200AC(v15);
    }
    else
    {
      v16 = static Alignment.center.getter(v14);
      v18 = _FrameLayout.init(width:height:alignment:)(&v143, 0x403E000000000000, 0, 0x403E000000000000, 0, v16, v17);
      v19 = v143;
      v20 = v144;
      v21 = v145;
      v22 = v146;
      v23 = v147;
      v24 = v148;
      v25 = static Edge.Set.trailing.getter(v18);
      v26 = EdgeInsets.init(_all:)(10.0);
      v127 = v19;
      v128 = v20;
      v129 = v21;
      v130 = v22;
      v131 = v23;
      v132 = v24;
      v133 = v25;
      v134 = v26;
      v135 = v27;
      v136 = v28;
      v137 = v29;
      v138 = 0;
      v139 = 256;
      v30 = sub_100008B04(&qword_101493618);
      v31 = sub_100008B04(&qword_101493620);
      v32 = sub_100020800();
      v33 = sub_10002067C(&qword_101493650, &qword_101493620, sub_10002090C, (uint64_t)&protocol witness table for _PaddingLayout);
      _ConditionalContent<>.init(storage:)(&v127, v30, v31, v32, v33);
    }
    v126 = v140[0];
    v115 = v140[1];
    v112 = v140[4];
    v113 = v140[2];
    v123 = v140[5];
    v124 = v140[3];
    v111 = v140[6];
    v121 = v140[8];
    v122 = v140[7];
    v119 = v140[10];
    v120 = v140[9];
    v118 = v140[11];
    v116 = v142;
    v117 = v141;
    v54 = static HorizontalAlignment.leading.getter(v34);
    v55 = v125;
    *v125 = v54;
    v55[1] = 0x4000000000000000;
    *((_BYTE *)v55 + 16) = 0;
    sub_100008B04(&qword_101493670);
    v56 = v107;
    v57 = sub_1000863C4(0);

    v140[0] = (unint64_t)v57;
    v58 = swift_allocObject(&unk_10119C8A0, 32, 7);
    v59 = v109;
    *(_QWORD *)(v58 + 16) = v108;
    *(double *)(v58 + 24) = v59;
    v60 = v56;
    v61 = sub_100008B04(&qword_101493460);
    v62 = type metadata accessor for UUID(0);
    v63 = sub_100008B04(&qword_101493530);
    v64 = sub_100010D70(&qword_101493468, &qword_101493460, (const char *)&protocol conformance descriptor for [A]);
    v65 = sub_100020458();
    v66 = sub_10000BC84(&qword_101493478, type metadata accessor for PlaceSummaryViewModelLine, (uint64_t)&unk_100E28064);
    ForEach<>.init(_:content:)(v140, sub_100020998, v58, v61, v62, v63, v64, v65, v66);
    v67 = swift_getKeyPath(&unk_100E24CC8);
    v68 = swift_getKeyPath(&unk_100E24CF0);
    v69 = v60;
    static Published.subscript.getter(v140, v69, v67, v68);

    swift_release(v67);
    swift_release(v68);
    v70 = v140[0];
    if ((~v140[0] & 0xF000000000000007) != 0)
    {
      v72 = sub_100020008(v140[0]);
      v73 = static Edge.Set.trailing.getter(v72);
      v74 = EdgeInsets.init(_all:)(-16.0);
      v76 = v75;
      v78 = v77;
      v80 = v79;
      sub_1000200AC(v70);
      v108 = v76;
      v109 = v74;
      v106 = v80;
      v107 = v78;
      v71 = v73;
    }
    else
    {
      v71 = 0;
      v108 = 0;
      v109 = 0.0;
      v106 = 0;
      v107 = 0;
      v70 = 0xF000000000000007;
    }
    v81 = (uint64_t)v114;
    sub_10000C1FC((uint64_t)v125, (uint64_t)v114, &qword_101493610);
    v82 = v110;
    v83 = v115;
    *v110 = v126;
    v82[1] = v83;
    v84 = v124;
    v82[2] = v113;
    v82[3] = v84;
    v85 = v123;
    v82[4] = v112;
    v82[5] = v85;
    v86 = v122;
    v82[6] = v111;
    v82[7] = v86;
    v87 = v120;
    v82[8] = v121;
    v82[9] = v87;
    v88 = v118;
    v82[10] = v119;
    v82[11] = v88;
    v118 = v88;
    v90 = v116;
    v89 = v117;
    *((_BYTE *)v82 + 96) = v117;
    v116 = v90;
    v117 = v89;
    *((_BYTE *)v82 + 97) = v90;
    v91 = (int *)sub_100008B04(&qword_101493678);
    sub_10000C1FC(v81, (uint64_t)v82 + v91[12], &qword_101493610);
    v92 = (char *)v82 + v91[16];
    *(_QWORD *)v92 = 0;
    v92[8] = 0;
    v93 = (char *)v82 + v91[20];
    *(_QWORD *)v93 = v70;
    *((_QWORD *)v93 + 1) = v71;
    v94 = v108;
    *((double *)v93 + 2) = v109;
    *((_QWORD *)v93 + 3) = v94;
    v95 = v106;
    *((_QWORD *)v93 + 4) = v107;
    *((_QWORD *)v93 + 5) = v95;
    v93[48] = 0;
    v104 = v90;
    v103 = v89;
    v102 = v88;
    v97 = v112;
    v96 = v113;
    v98 = v111;
    sub_1000209A0(v126, v115, v113, v124, v112, v123, v111, v122, v121, v120, v119, v102, v103, v104);
    sub_10001FFF4(v70);
    sub_100010CC4((uint64_t)v125, &qword_101493610);
    sub_1000200AC(v70);
    sub_100010CC4((uint64_t)v114, &qword_101493610);
    return sub_1000209B0(v126, v115, v96, v124, v97, v123, v98, v122, v121, v120, v119, v118, v117, v116);
  }
  else
  {
    v100 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
    v101 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
    result = EnvironmentObject.error()(0, *(_QWORD *)&a2, v100, v101);
    __break(1u);
  }
  return result;
}

uint64_t sub_10001FDA0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t KeyPath;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (a2)
  {
    KeyPath = swift_getKeyPath(&unk_100E24D10);
    v8 = swift_getKeyPath(&unk_100E24D38);
    v9 = a2;
    static Published.subscript.getter(&v22, v9, KeyPath, v8);

    swift_release(KeyPath);
    swift_release(v8);
    v10 = v22;
    v11 = *(_QWORD *)(v22 + 16);
    if (v11)
    {
      v12 = 0;
      v13 = *(_QWORD *)(type metadata accessor for PlaceSummaryViewModelLine(0) - 8);
      v14 = v10 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
      v15 = *(_QWORD *)(v13 + 72);
      while ((static UUID.== infix(_:_:)(v14, a1) & 1) == 0)
      {
        ++v12;
        v14 += v15;
        if (v11 == v12)
          goto LABEL_6;
      }
      swift_bridgeObjectRelease(v10);
      sub_1000202AC(a1, a4, type metadata accessor for PlaceSummaryViewModelLine);
      v18 = _s4LineVMa(0);
      *(_BYTE *)(a4 + *(int *)(v18 + 20)) = v12 == 0;
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a4, 0, 1, v18);
    }
    else
    {
LABEL_6:
      swift_bridgeObjectRelease(v10);
      v16 = _s4LineVMa(0);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a4, 1, 1, v16);
    }
  }
  else
  {
    v20 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
    v21 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
    result = EnvironmentObject.error()(0, a3, v20, v21);
    __break(1u);
  }
  return result;
}

uint64_t sub_10001FF40@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10001EAB0(*(void **)v1, *(double *)(v1 + 8), a1);
}

uint64_t sub_10001FF48(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_101064EE0, 1);
}

uint64_t sub_10001FF60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PlaceSummaryViewModelLine(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double sub_10001FFAC(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0xF000000000000007;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 177) = 0u;
  return result;
}

unint64_t sub_10001FFF4(unint64_t result)
{
  if ((~result & 0xF000000000000007) != 0)
    return sub_100020008(result);
  return result;
}

unint64_t sub_100020008(unint64_t result)
{
  switch(result >> 61)
  {
    case 0uLL:
      goto LABEL_3;
    case 1uLL:
    case 2uLL:
    case 3uLL:
      result &= 0x1FFFFFFFFFFFFFFFuLL;
LABEL_3:
      result = swift_retain(result);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100020038(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 192);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    v4);
  return a1;
}

unint64_t sub_1000200AC(unint64_t result)
{
  if ((~result & 0xF000000000000007) != 0)
    return sub_1000200C0(result);
  return result;
}

unint64_t sub_1000200C0(unint64_t result)
{
  switch(result >> 61)
  {
    case 0uLL:
      goto LABEL_3;
    case 1uLL:
    case 2uLL:
    case 3uLL:
      result &= 0x1FFFFFFFFFFFFFFFuLL;
LABEL_3:
      result = swift_release(result);
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1000200F0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1014934E8;
  if (!qword_1014934E8)
  {
    v1 = sub_10000E5D4(&qword_101493498);
    v2[0] = sub_10002067C(&qword_1014934F0, &qword_1014934A8, (uint64_t (*)(void))sub_10002017C, (uint64_t)&protocol witness table for _PaddingLayout);
    v2[1] = sub_100020220();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_1014934E8);
  }
  return result;
}

unint64_t sub_10002017C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1014934F8;
  if (!qword_1014934F8)
  {
    v1 = sub_10000E5D4(&qword_1014934A0);
    v2[0] = sub_10002088C(&qword_101493500, &qword_101493508, &qword_101493510, &qword_101493518);
    v2[1] = sub_100010D70((unint64_t *)&unk_101494E00, &qword_101494DD0, (const char *)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_1014934F8);
  }
  return result;
}

unint64_t sub_100020220()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101493520;
  if (!qword_101493520)
  {
    v1 = sub_10000E5D4(&qword_1014934E0);
    v2[0] = sub_10002088C(&qword_101493500, &qword_101493508, &qword_101493510, &qword_101493518);
    v2[1] = &protocol witness table for _PaddingLayout;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101493520);
  }
  return result;
}

uint64_t sub_1000202AC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000202F0(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10002032C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = *(_QWORD *)(sub_100008B04((uint64_t *)&unk_10149A500) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = type metadata accessor for PlaceSummaryViewModelLine(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v0 + v3, 1, v5))
  {
    v6 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v0 + v3, v6);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + v3 + *(int *)(v5 + 20)));
  }
  v7 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = v7 + 16;

  return swift_deallocObject(v0, v8, v2 | 7);
}

uint64_t sub_1000203F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(sub_100008B04((uint64_t *)&unk_10149A500) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_10001E310(a1, v2 + v6, *(void **)v7, *(_QWORD *)(v7 + 8), a2);
}

unint64_t sub_100020458()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_101493538;
  if (!qword_101493538)
  {
    v1 = sub_10000E5D4(&qword_101493530);
    v2 = sub_10000BC84(&qword_101493470, _s4LineVMa, (uint64_t)&unk_100E25EA0);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> A?, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_101493538);
  }
  return result;
}

double sub_1000204DC(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 112) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_WORD *)(a1 + 120) = -256;
  return result;
}

uint64_t sub_100020500(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned __int16 a16)
{
  if (HIBYTE(a16) <= 0xFEu)
    return sub_100020544(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, (unsigned __int16)(a16 & 0x1FF) >> 8);
  return result;
}

uint64_t sub_100020544(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, char a17)
{
  if ((a17 & 1) != 0)
    sub_10002057C(a1, a2, a3 & 1);
  else
    a4 = a2;
  return swift_bridgeObjectRetain(a4);
}

uint64_t sub_10002057C(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    a1 = a2;
  return swift_retain(a1);
}

uint64_t sub_100020588(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))
{
  __int16 v4;

  v4 = *(_WORD *)(a1 + 120);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), v4);
  return a1;
}

uint64_t sub_1000205EC(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned __int16 a16)
{
  if (HIBYTE(a16) <= 0xFEu)
    return sub_100020630(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, (unsigned __int16)(a16 & 0x1FF) >> 8);
  return result;
}

uint64_t sub_100020630(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, char a17)
{
  if ((a17 & 1) != 0)
    sub_10001A780(a1, a2, a3 & 1);
  else
    a4 = a2;
  return swift_bridgeObjectRelease(a4);
}

uint64_t sub_100020670(uint64_t result)
{
  *(_BYTE *)(result + 121) = 1;
  return result;
}

uint64_t sub_10002067C(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = sub_10000E5D4(a2);
    v9[0] = a3();
    v9[1] = a4;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000206E4()
{
  return sub_10002067C(&qword_1014935D8, &qword_1014935E0, (uint64_t (*)(void))sub_100020708, (uint64_t)&protocol witness table for _PaddingLayout);
}

unint64_t sub_100020708()
{
  unint64_t result;

  result = qword_1014935E8;
  if (!qword_1014935E8)
  {
    result = swift_getWitnessTable(&unk_100E25E00, &_s13ActionButtonsVN);
    atomic_store(result, (unint64_t *)&qword_1014935E8);
  }
  return result;
}

uint64_t sub_10002074C()
{
  return sub_10002067C(&qword_1014935F8, &qword_101493600, (uint64_t (*)(void))sub_100020770, (uint64_t)&protocol witness table for _PaddingLayout);
}

unint64_t sub_100020770()
{
  unint64_t result;

  result = qword_101493608;
  if (!qword_101493608)
  {
    result = swift_getWitnessTable(&unk_100E25DB0, &_s17RefinementButtonsVN);
    atomic_store(result, (unint64_t *)&qword_101493608);
  }
  return result;
}

uint64_t sub_1000207B4(uint64_t result)
{
  *(_BYTE *)(result + 121) = 0;
  return result;
}

uint64_t sub_1000207BC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100008B04(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_100020800()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101493628;
  if (!qword_101493628)
  {
    v1 = sub_10000E5D4(&qword_101493618);
    v2[0] = sub_10002088C(&qword_101493630, &qword_101493638, &qword_101493640, &qword_101493648);
    v2[1] = &protocol witness table for _PaddingLayout;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101493628);
  }
  return result;
}

uint64_t sub_10002088C(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = sub_10000E5D4(a2);
    v9[0] = sub_100010D70(a3, a4, aY_5);
    v9[1] = &protocol witness table for _FrameLayout;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10002090C()
{
  return sub_10002067C(&qword_101493658, &qword_101493660, (uint64_t (*)(void))sub_100020930, (uint64_t)&protocol witness table for _FrameLayout);
}

unint64_t sub_100020930()
{
  unint64_t result;

  result = qword_101493668;
  if (!qword_101493668)
  {
    result = swift_getWitnessTable(&unk_100E25D60, &_s23AutocompleteLoadingViewVN);
    atomic_store(result, (unint64_t *)&qword_101493668);
  }
  return result;
}

uint64_t sub_100020974()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100020998@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10001FDA0(a1, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

unint64_t sub_1000209A0(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char a14)
{
  if ((a14 & 1) == 0)
    return sub_100020008(result);
  return result;
}

unint64_t sub_1000209B0(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char a14)
{
  if ((a14 & 1) == 0)
    return sub_1000200C0(result);
  return result;
}

uint64_t sub_1000209C0()
{
  return sub_100010D70(&qword_101493680, &qword_101493688, (const char *)&protocol conformance descriptor for TupleView<A>);
}

unint64_t sub_1000209F0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101493690;
  if (!qword_101493690)
  {
    v1 = sub_10000E5D4(&qword_101493560);
    v2[0] = sub_100020A5C();
    v2[1] = sub_100020AE0();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101493690);
  }
  return result;
}

unint64_t sub_100020A5C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101493698;
  if (!qword_101493698)
  {
    v1 = sub_10000E5D4(&qword_101493558);
    v2[0] = sub_100010D70(&qword_1014936A0, &qword_101493550, (const char *)&protocol conformance descriptor for VStack<A>);
    v2[1] = &protocol witness table for _PaddingLayout;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101493698);
  }
  return result;
}

unint64_t sub_100020AE0()
{
  unint64_t result;

  result = qword_101494B30;
  if (!qword_101494B30)
  {
    result = swift_getWitnessTable(&unk_100E29FCC, &type metadata for MapsAXCombinedViewModifier);
    atomic_store(result, (unint64_t *)&qword_101494B30);
  }
  return result;
}

uint64_t sub_100020B3C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100E24F60);
  v2 = swift_getKeyPath(&unk_100E24F88);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_100020BFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = type metadata accessor for RefinementsBarButtonViewModel(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_100E24F60);
  v6 = swift_getKeyPath(&unk_100E24F88);
  static Published.subscript.getter(&v16, v0, KeyPath, v6);
  swift_release(KeyPath);
  swift_release(v6);
  v7 = v16;
  v8 = *(_QWORD *)(v16 + 16);
  if (v8)
  {
    v9 = *(int *)(v1 + 36);
    v10 = v16 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    v11 = *(_QWORD *)(v2 + 72);
    while (1)
    {
      sub_100021908(v10, (uint64_t)v4);
      v12 = *(_QWORD *)&v4[v9];
      swift_unknownObjectRetain(v12);
      sub_10002194C((uint64_t)v4);
      v13 = objc_opt_self(AllRefinementsViewModel);
      if (swift_dynamicCastObjCClass(v12, v13))
        break;
      swift_unknownObjectRelease(v12);
      v10 += v11;
      if (!--v8)
        goto LABEL_5;
    }
    swift_bridgeObjectRelease(v7);
    swift_unknownObjectRelease(v12);
    return 1;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease(v7);
    return 0;
  }
}

id sub_100020D74()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RefinementsBarViewModel(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100020DE8()
{
  return type metadata accessor for RefinementsBarViewModel(0);
}

uint64_t type metadata accessor for RefinementsBarViewModel(uint64_t a1)
{
  return sub_100021D9C(a1, (uint64_t *)&unk_1014936D8, (uint64_t)&nominal type descriptor for RefinementsBarViewModel);
}

void sub_100020E04(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_100020E78(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_100E24D98;
    swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
  }
}

void sub_100020E78(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1014936E8)
  {
    v2 = sub_10000E5D4(&qword_1014936F0);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1014936E8);
  }
}

uint64_t sub_100020ED0@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for RefinementsBarViewModel(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_100020F10@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_100020F48()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100E24F18);
  v2 = swift_getKeyPath(&unk_100E24F40);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_100020FB8()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_bridgeObjectRelease(v0[3]);
  v1 = (char *)v0 + OBJC_IVAR____TtC4Maps35RefinementsMultiSelectCellViewModel__isSelected;
  v2 = sub_100008B04((uint64_t *)&unk_10149A660);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC4Maps35RefinementsMultiSelectCellViewModel_allowsSelection + 8));
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC4Maps35RefinementsMultiSelectCellViewModel_tapHandler + 8));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_10002103C()
{
  return type metadata accessor for RefinementsMultiSelectCellViewModel(0);
}

uint64_t type metadata accessor for RefinementsMultiSelectCellViewModel(uint64_t a1)
{
  return sub_100021D9C(a1, (uint64_t *)&unk_101493728, (uint64_t)&nominal type descriptor for RefinementsMultiSelectCellViewModel);
}

void sub_100021058(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_100E24DE8;
  sub_1000210F8();
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_100E24E00;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[4] = (char *)&value witness table for () + 64;
    v4[5] = (char *)&value witness table for () + 64;
    swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
  }
}

void sub_1000210F8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_101493738)
  {
    v0 = type metadata accessor for Published(0, &type metadata for Bool);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_101493738);
  }
}

_QWORD *sub_10002114C(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v25 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v25);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *(_QWORD *)v10;
    v12 = *((_QWORD *)v10 + 1);
    v13 = v10[16];
    sub_10002126C(*(_QWORD *)v10, v12);
    *(_QWORD *)v9 = v11;
    *((_QWORD *)v9 + 1) = v12;
    v9[16] = v13;
    v14 = a3[7];
    *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    *((_BYTE *)a1 + v14) = *((_BYTE *)a2 + v14);
    v15 = a3[8];
    v16 = a3[9];
    v17 = (char *)a1 + v15;
    v18 = (char *)a2 + v15;
    v19 = *(_QWORD *)v18;
    v20 = *((_QWORD *)v18 + 1);
    *(_QWORD *)v17 = *(_QWORD *)v18;
    *((_QWORD *)v17 + 1) = v20;
    v17[16] = v18[16];
    *((_QWORD *)v17 + 3) = *((_QWORD *)v18 + 3);
    v21 = *(_QWORD *)((char *)a2 + v16);
    *(_QWORD *)((char *)a1 + v16) = v21;
    v22 = a3[10];
    v23 = (char *)a1 + v22;
    v24 = (char *)a2 + v22;
    *(_QWORD *)v23 = *(_QWORD *)v24;
    v23[8] = v24[8];
    swift_bridgeObjectRetain(v19);
    swift_unknownObjectRetain(v21);
  }
  return a1;
}

uint64_t sub_10002126C(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_100021274(uint64_t a1, int *a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  sub_1000212D8(*(_QWORD *)(a1 + a2[5]), *(_QWORD *)(a1 + a2[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8]));
  return swift_unknownObjectRelease(*(_QWORD *)(a1 + a2[9]));
}

uint64_t sub_1000212D8(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(a2);
}

uint64_t sub_1000212E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)v9;
  v11 = *(_QWORD *)(v9 + 8);
  v12 = *(_BYTE *)(v9 + 16);
  sub_10002126C(*(_QWORD *)v9, v11);
  *(_QWORD *)v8 = v10;
  *(_QWORD *)(v8 + 8) = v11;
  *(_BYTE *)(v8 + 16) = v12;
  v13 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  v14 = a3[8];
  v15 = a3[9];
  v16 = a1 + v14;
  v17 = (uint64_t *)(a2 + v14);
  v18 = *v17;
  v19 = v17[1];
  *(_QWORD *)v16 = *v17;
  *(_QWORD *)(v16 + 8) = v19;
  *(_BYTE *)(v16 + 16) = *((_BYTE *)v17 + 16);
  *(_QWORD *)(v16 + 24) = v17[3];
  v20 = *(_QWORD *)(a2 + v15);
  *(_QWORD *)(a1 + v15) = v20;
  v21 = a3[10];
  v22 = a1 + v21;
  v23 = a2 + v21;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  swift_bridgeObjectRetain(v18);
  swift_unknownObjectRetain(v20);
  return a1;
}

uint64_t sub_1000213D4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)v9;
  v11 = *(_QWORD *)(v9 + 8);
  v12 = *(_BYTE *)(v9 + 16);
  sub_10002126C(*(_QWORD *)v9, v11);
  v13 = *(_QWORD *)v8;
  v14 = *(_QWORD *)(v8 + 8);
  *(_QWORD *)v8 = v10;
  *(_QWORD *)(v8 + 8) = v11;
  *(_BYTE *)(v8 + 16) = v12;
  sub_1000212D8(v13, v14);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v15 = a3[8];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_QWORD *)(a2 + v15);
  v19 = *(_QWORD *)(a1 + v15);
  *(_QWORD *)(a1 + v15) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  v20 = *(_QWORD *)(v17 + 8);
  *(_BYTE *)(v16 + 16) = *(_BYTE *)(v17 + 16);
  *(_QWORD *)(v16 + 8) = v20;
  *(_QWORD *)(v16 + 24) = *(_QWORD *)(v17 + 24);
  v21 = a3[9];
  v22 = *(_QWORD *)(a2 + v21);
  v23 = *(_QWORD *)(a1 + v21);
  *(_QWORD *)(a1 + v21) = v22;
  swift_unknownObjectRetain(v22);
  swift_unknownObjectRelease(v23);
  v24 = a3[10];
  v25 = a1 + v24;
  v26 = (uint64_t *)(a2 + v24);
  v27 = *v26;
  *(_BYTE *)(v25 + 8) = *((_BYTE *)v26 + 8);
  *(_QWORD *)v25 = v27;
  return a1;
}

uint64_t sub_1000214F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  v11 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v12 = (_OWORD *)(a1 + v11);
  v13 = (_OWORD *)(a2 + v11);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  v16 = a1 + v15;
  v17 = a2 + v15;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  *(_QWORD *)v16 = *(_QWORD *)v17;
  return a1;
}

uint64_t sub_1000215AC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 16);
  v11 = *(_QWORD *)v8;
  v12 = *(_QWORD *)(v8 + 8);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_BYTE *)(v8 + 16) = v10;
  sub_1000212D8(v11, v12);
  v13 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  v14 = a3[8];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = *(_QWORD *)(a1 + v14);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  swift_bridgeObjectRelease(v17);
  *(_QWORD *)(v15 + 8) = *(_QWORD *)(v16 + 8);
  *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
  *(_QWORD *)(v15 + 24) = *(_QWORD *)(v16 + 24);
  v18 = a3[9];
  v19 = *(_QWORD *)(a1 + v18);
  *(_QWORD *)(a1 + v18) = *(_QWORD *)(a2 + v18);
  swift_unknownObjectRelease(v19);
  v20 = a3[10];
  v21 = a1 + v20;
  v22 = a2 + v20;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  return a1;
}

uint64_t sub_1000216A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000216B0);
}

uint64_t sub_1000216B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 36));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10002172C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100021738);
}

uint64_t sub_100021738(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 36)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for RefinementsBarButtonViewModel(uint64_t a1)
{
  return sub_100021D9C(a1, qword_101493868, (uint64_t)&nominal type descriptor for RefinementsBarButtonViewModel);
}

uint64_t sub_1000217C4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100E24E40;
    v4[2] = &unk_100E24D98;
    v4[3] = &unk_100E24D98;
    v4[4] = &unk_100E24E58;
    v4[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[6] = &unk_100E24E00;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_100021868()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1014938B8;
  if (!qword_1014938B8)
  {
    v1 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_1014938B8);
  }
  return result;
}

void *sub_1000218B0()
{
  return &protocol witness table for ObservableObjectPublisher;
}

uint64_t sub_1000218BC@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for RefinementsMultiSelectCellViewModel(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_100021908(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RefinementsBarButtonViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002194C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RefinementsBarButtonViewModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *sub_100021988(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = *(uint64_t *)((char *)a2 + v9);
    *(uint64_t *)((char *)a1 + v9) = v13;
    swift_bridgeObjectRetain(v12);
    swift_unknownObjectRetain(v13);
  }
  return a1;
}

uint64_t sub_100021A2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
  return swift_unknownObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 24)));
}

uint64_t sub_100021A80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v12;
  swift_bridgeObjectRetain(v11);
  swift_unknownObjectRetain(v12);
  return a1;
}

uint64_t sub_100021AF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(int *)(a3 + 24);
  v13 = *(_QWORD *)(a2 + v12);
  v14 = *(_QWORD *)(a1 + v12);
  *(_QWORD *)(a1 + v12) = v13;
  swift_unknownObjectRetain(v13);
  swift_unknownObjectRelease(v14);
  return a1;
}

uint64_t sub_100021B90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_100021BF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = *(int *)(a3 + 24);
  v14 = *(_QWORD *)(a1 + v13);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  swift_unknownObjectRelease(v14);
  return a1;
}

uint64_t sub_100021C74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100021C80);
}

uint64_t sub_100021C80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100021D00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100021D0C);
}

uint64_t sub_100021D0C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for RefinementsBarButtonViewModel.Submenu.Element(uint64_t a1)
{
  return sub_100021D9C(a1, qword_101493920, (uint64_t)&nominal type descriptor for RefinementsBarButtonViewModel.Submenu.Element);
}

uint64_t sub_100021D9C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t sub_100021DD0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100E24DE8;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t destroy for PlaceSummaryLine(_QWORD *a1)
{
  return swift_bridgeObjectRelease(*a1);
}

uint64_t initializeWithCopy for RefinementsBarButtonViewModel.Submenu(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t *assignWithCopy for RefinementsBarButtonViewModel.Submenu(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  a1[1] = v6;
  a1[3] = a2[3];
  return a1;
}

uint64_t *assignWithTake for RefinementsBarButtonViewModel.Submenu(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  a1[1] = a2[1];
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  a1[3] = a2[3];
  return a1;
}

uint64_t getEnumTagSinglePayload for RefinementsBarButtonViewModel.Submenu(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RefinementsBarButtonViewModel.Submenu(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RefinementsBarButtonViewModel.Submenu()
{
  return &type metadata for RefinementsBarButtonViewModel.Submenu;
}

uint64_t destroy for RefinementsBarButtonViewModel.RefinementsBarButtonValue(uint64_t *a1)
{
  return sub_1000212D8(*a1, a1[1]);
}

uint64_t _s4Maps29RefinementsBarButtonViewModelV25RefinementsBarButtonValueOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_10002126C(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for RefinementsBarButtonViewModel.RefinementsBarButtonValue(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_10002126C(*(_QWORD *)a2, v4);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_1000212D8(v6, v7);
  return a1;
}

uint64_t assignWithTake for RefinementsBarButtonViewModel.RefinementsBarButtonValue(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_1000212D8(v4, v5);
  return a1;
}

ValueMetadata *type metadata accessor for RefinementsBarButtonViewModel.RefinementsBarButtonValue()
{
  return &type metadata for RefinementsBarButtonViewModel.RefinementsBarButtonValue;
}

uint64_t sub_100022244()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t result;

  v1 = (_BYTE *)(v0 + OBJC_IVAR____TtC4Maps31SearchHomeUserGuidesDataFetcher____lazy_storage___maxNumberOfCollections);
  if (*(_BYTE *)(v0
                + OBJC_IVAR____TtC4Maps31SearchHomeUserGuidesDataFetcher____lazy_storage___maxNumberOfCollections
                + 8) != 1)
    return *(_QWORD *)v1;
  result = GEOConfigGetUInteger(MapsConfig_MapsHomeMaxGuides, off_1014B3E68);
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)v1 = result;
    v1[8] = 0;
  }
  return result;
}

uint64_t sub_1000222A0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  uint64_t result;
  BOOL v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  objc_class *v21;
  void **v22;
  void *v23;
  char *v24;
  id v25;
  id v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  objc_super v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v1 = v0;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC4Maps31SearchHomeUserGuidesDataFetcher_collectionDataProvider);
  objc_msgSend(v2, "setActive:", 1);
  v3 = objc_msgSend(v2, "collections");
  v4 = sub_100022858();
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  v6 = sub_100022244();
  v7 = sub_1001B760C(v6, v5);
  v9 = v8;
  v11 = v10;
  v13 = v12;
  swift_bridgeObjectRelease(v5);
  v33 = v7;
  v34 = v9;
  v35 = v11;
  v36 = v13;
  v14 = objc_msgSend((id)objc_opt_self(CollectionHandler), "addToCollection");
  if ((v13 & 1) == 0 || (result = swift_isUniquelyReferenced_nonNull(v7), v33 = v7, (result & 1) == 0))
  {
    result = (v13 >> 1) - v11;
    if (__OFSUB__(v13 >> 1, v11))
    {
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    result = sub_100022A58((_QWORD *)result);
    v11 = v35;
    v13 = v36;
  }
  v16 = __OFSUB__(v13 >> 1, v11);
  v17 = (_QWORD *)((v13 >> 1) - v11);
  if (v16)
  {
    __break(1u);
    goto LABEL_16;
  }
  sub_100022894((uint64_t)v17);
  result = (uint64_t)sub_10002297C(v17, (uint64_t)v14);
  v18 = v33;
  v32 = (unint64_t)_swiftEmptyArrayStorage;
  v19 = (v36 >> 1) - v35;
  if (v36 >> 1 == v35)
  {
    swift_unknownObjectRetain(v33);
    v20 = _swiftEmptyArrayStorage;
LABEL_14:
    swift_unknownObjectRelease(v18);
    v30 = *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps31SearchHomeUserGuidesDataFetcher_diffableSnapshotObjects);
    *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps31SearchHomeUserGuidesDataFetcher_diffableSnapshotObjects) = v20;
    swift_unknownObjectRelease(v18);
    return swift_bridgeObjectRelease(v30);
  }
  if ((uint64_t)(v36 >> 1) > v35)
  {
    v21 = (objc_class *)type metadata accessor for SearchHomeUserGuidesCellViewModel();
    swift_unknownObjectRetain_n(v33, 2);
    v22 = (void **)(v34 + 8 * v35);
    do
    {
      v23 = *v22;
      v24 = (char *)objc_allocWithZone(v21);
      *(_QWORD *)&v24[OBJC_IVAR____TtC4Maps33SearchHomeUserGuidesCellViewModel_collections] = v23;
      v31.receiver = v24;
      v31.super_class = v21;
      v25 = v23;
      v26 = objc_msgSendSuper2(&v31, "init");
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v28 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v27 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v28 >= v27 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
      v29 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v26);
      specialized Array._endMutation()(v29);
      ++v22;
      --v19;
    }
    while (v19);
    swift_unknownObjectRelease(v18);
    v20 = (_QWORD *)v32;
    goto LABEL_14;
  }
LABEL_17:
  __break(1u);
  return result;
}

void sub_10002250C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_class *v7;
  char *v8;
  char *v9;
  char *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  objc_super v18;

  v1 = v0;
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC4Maps31SearchHomeUserGuidesDataFetcher_collectionDataProvider), "setActive:", 0);
  sub_1000222A0();
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC4Maps31SearchHomeUserGuidesDataFetcher_diffableSnapshotObjects);
  v3 = swift_bridgeObjectRetain(v2);
  v4 = sub_10012D0A8(v3);
  swift_bridgeObjectRelease(v2);
  v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps31SearchHomeUserGuidesDataFetcher_title);
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps31SearchHomeUserGuidesDataFetcher_title + 8);
  v7 = (objc_class *)type metadata accessor for SearchHomeUserGuidesDataProvider();
  v8 = (char *)objc_allocWithZone(v7);
  *(_QWORD *)&v8[OBJC_IVAR____TtC4Maps32SearchHomeUserGuidesDataProvider_objects] = v4;
  *(_QWORD *)&v8[OBJC_IVAR____TtC4Maps32SearchHomeUserGuidesDataProvider_type] = 7;
  v9 = &v8[OBJC_IVAR____TtC4Maps32SearchHomeUserGuidesDataProvider_identifier];
  *(_QWORD *)v9 = 0xD00000000000001BLL;
  *((_QWORD *)v9 + 1) = 0x8000000100E42610;
  v10 = &v8[OBJC_IVAR____TtC4Maps32SearchHomeUserGuidesDataProvider_title];
  *(_QWORD *)v10 = v6;
  *((_QWORD *)v10 + 1) = v5;
  v18.receiver = v8;
  v18.super_class = v7;
  swift_bridgeObjectRetain(v5);
  v11 = objc_msgSendSuper2(&v18, "init");
  v12 = sub_100008B04((uint64_t *)&unk_101493B10);
  v13 = swift_allocObject(v12, 40, 7);
  *(_OWORD *)(v13 + 16) = xmmword_100E23F50;
  *(_QWORD *)(v13 + 32) = v11;
  v17 = v13;
  specialized Array._endMutation()(v13);
  v14 = *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps31SearchHomeUserGuidesDataFetcher_dataProviders);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps31SearchHomeUserGuidesDataFetcher_dataProviders) = v17;
  v15 = v11;
  swift_bridgeObjectRelease(v14);
  v16 = *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps31SearchHomeUserGuidesDataFetcher_delegate);
  if (v16)
  {
    objc_msgSend((id)swift_unknownObjectRetain(*(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps31SearchHomeUserGuidesDataFetcher_delegate)), "didUpdateDataFetcher:", v1);
    swift_unknownObjectRelease(v16);
  }

}

id sub_100022718()
{
  return sub_1000227F8(type metadata accessor for SearchHomeUserGuidesDataFetcher);
}

uint64_t type metadata accessor for SearchHomeUserGuidesDataFetcher()
{
  return objc_opt_self(_TtC4Maps31SearchHomeUserGuidesDataFetcher);
}

id sub_1000227EC()
{
  return sub_1000227F8(type metadata accessor for SearchHomeUserGuidesCellViewModel);
}

id sub_1000227F8(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t type metadata accessor for SearchHomeUserGuidesCellViewModel()
{
  return objc_opt_self(_TtC4Maps33SearchHomeUserGuidesCellViewModel);
}

unint64_t sub_100022858()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10149DF70;
  if (!qword_10149DF70)
  {
    v1 = objc_opt_self(CollectionHandler);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10149DF70);
  }
  return result;
}

uint64_t sub_100022894(uint64_t result)
{
  _QWORD *v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;

  v4 = v2[2];
  v3 = v2[3];
  v5 = (v3 >> 1) - v4;
  if (__OFSUB__(v3 >> 1, v4))
  {
    __break(1u);
    return sub_100022A58(v1);
  }
  v1 = (_QWORD *)result;
  if ((v3 & 1) != 0)
  {
    v6 = *v2;
    v7 = v2[1];
    v8 = type metadata accessor for __ContiguousArrayStorageBase(0);
    v9 = swift_unknownObjectRetain(v6);
    v10 = (_QWORD *)swift_dynamicCastClass(v9, v8);
    if (!v10)
    {
      swift_unknownObjectRelease(v6);
      v10 = _swiftEmptyArrayStorage;
    }
    v11 = v10[2];
    if ((_QWORD *)(v7 + 8 * v4 + 8 * v5) == &v10[v11 + 4])
    {
      v12 = v10[3];
      result = swift_release(v10);
      v13 = (v12 >> 1) - v11;
      v14 = __OFADD__(v5, v13);
      v5 += v13;
      if (v14)
      {
        __break(1u);
        return result;
      }
    }
    else
    {
      result = swift_release(v10);
    }
  }
  if (v5 < (uint64_t)v1 + 1)
    return sub_100022A58(v1);
  return result;
}

_QWORD *sub_10002297C(_QWORD *result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char *v15;
  char *v16;

  v3 = v2[2];
  v4 = v2[3];
  v5 = v4 >> 1;
  v6 = (v4 >> 1) - v3;
  if (__OFSUB__(v4 >> 1, v3))
  {
    __break(1u);
    goto LABEL_12;
  }
  v7 = result;
  v8 = (char *)result - v6 + 1;
  if (__OFSUB__((char *)result + 1, v6))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!v8)
  {
LABEL_10:
    *(_QWORD *)(v2[1] + 8 * v3 + 8 * (_QWORD)v7) = a2;
    return result;
  }
  v10 = *v2;
  v11 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v12 = swift_unknownObjectRetain(v10);
  result = (_QWORD *)swift_dynamicCastClass(v12, v11);
  if (!result)
  {
    swift_unknownObjectRelease(v10);
    result = &_swiftEmptyArrayStorage;
  }
  v13 = result[2];
  v14 = __OFADD__(v13, v8);
  v15 = &v8[v13];
  if (v14)
    goto LABEL_13;
  result[2] = v15;
  result = (_QWORD *)swift_release(result);
  v16 = &v8[v5];
  if (__OFADD__(v5, v8))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (((unint64_t)v16 & 0x8000000000000000) == 0)
  {
    v2[3] = v4 & 1 | (2 * (_QWORD)v16);
    goto LABEL_10;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_100022A58(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;

  v3 = (uint64_t)a1 + 1;
  v4 = *v1;
  v5 = v1[1];
  v6 = v1[2];
  v7 = v1[3];
  swift_unknownObjectRetain(*v1);
  v8 = sub_100022B00(a1, v3, v4, v5, v6, v7);
  swift_unknownObjectRelease(v4);
  v13 = v8;
  v9 = (void (*)(uint64_t, uint64_t))sub_100022D04();
  v11 = v10;
  sub_100022D14((uint64_t *)&v13, (uint64_t)a1, 0, v9);
  swift_release(v11);
  return swift_release(v8);
}

_QWORD *sub_100022B00(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  int64_t v33;
  uint64_t v34;

  v8 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
    __break(1u);
LABEL_34:
    if (v8 >= v7)
      goto LABEL_21;
LABEL_18:
    if (v8 + 0x4000000000000000 >= 0)
    {
      v8 *= 2;
      goto LABEL_21;
    }
    __break(1u);
    goto LABEL_37;
  }
  v7 = a2;
  v6 = result;
  if ((a6 & 1) == 0)
    goto LABEL_34;
  v12 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v13 = swift_unknownObjectRetain(a3);
  v14 = (_QWORD *)swift_dynamicCastClass(v13, v12);
  if (!v14)
  {
    swift_unknownObjectRelease(a3);
    v14 = _swiftEmptyArrayStorage;
  }
  v15 = v14[2];
  v16 = a4 + 8 * a5 + 8 * v8;
  if ((_QWORD *)v16 == &v14[v15 + 4])
  {
    v18 = v14[3];
    result = (_QWORD *)swift_release(v14);
    v19 = (v18 >> 1) - v15;
    v17 = v8 + v19;
    if (__OFADD__(v8, v19))
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
  }
  else
  {
    swift_release(v14);
    v17 = v8;
  }
  v20 = swift_unknownObjectRetain(a3);
  v21 = (_QWORD *)swift_dynamicCastClass(v20, v12);
  if (v17 < v7)
  {
    if (!v21)
    {
      swift_unknownObjectRelease(a3);
      v21 = _swiftEmptyArrayStorage;
    }
    v22 = v21[2];
    if ((_QWORD *)v16 == &v21[v22 + 4])
    {
      v24 = v21[3];
      result = (_QWORD *)swift_release(v21);
      v25 = (v24 >> 1) - v22;
      v26 = __OFADD__(v8, v25);
      v8 += v25;
      if (v26)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
    }
    else
    {
      result = (_QWORD *)swift_release(v21);
    }
    goto LABEL_18;
  }
  if (!v21)
  {
    swift_unknownObjectRelease(a3);
    v21 = _swiftEmptyArrayStorage;
  }
  v23 = v21[2];
  if ((_QWORD *)v16 == &v21[v23 + 4])
  {
    v27 = v21[3];
    result = (_QWORD *)swift_release(v21);
    v28 = (v27 >> 1) - v23;
    v26 = __OFADD__(v8, v28);
    v8 += v28;
    if (!v26)
      goto LABEL_21;
LABEL_39:
    __break(1u);
    return result;
  }
  swift_release(v21);
LABEL_21:
  if (v8 <= v7)
    v29 = v7;
  else
    v29 = v8;
  if (v29 <= (uint64_t)v6)
    v30 = (uint64_t)v6;
  else
    v30 = v29;
  if (!v30)
    return _swiftEmptyArrayStorage;
  v31 = sub_100008B04((uint64_t *)&unk_101493B10);
  v32 = (_QWORD *)swift_allocObject(v31, 8 * v30 + 32, 7);
  v33 = j__malloc_size(v32);
  v34 = v33 - 32;
  if (v33 < 32)
    v34 = v33 - 25;
  v32[2] = v6;
  v32[3] = (2 * (v34 >> 3)) | 1;
  return v32;
}

Swift::Void (__swiftcall *sub_100022D04())(DataSource *__struct_ptr _, Swift::OpaquePointer didChangeSelectedCollections)
{
  return CollectionPickerContaineeViewController.dataSource(_:didChangeSelectedCollections:);
}

uint64_t sub_100022D14(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  void (*v39)(uint64_t, uint64_t);
  char *v40;
  char *__dst;

  v5 = v4[2];
  v6 = (unint64_t)v4[3] >> 1;
  v7 = (_QWORD *)(v6 - v5);
  if (__OFSUB__(v6, v5))
  {
    __break(1u);
    goto LABEL_29;
  }
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 16);
  v11 = __OFSUB__(v10, a2);
  v12 = v10 - a2;
  if (v11)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v14 = v12 - a3;
  if (__OFSUB__(v12, a3))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v15 = (char *)v7 - a2;
  if (__OFSUB__(v7, a2))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v40 = &v15[-v14];
  if (__OFSUB__(v15, v14))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v16 = v4;
  __dst = (char *)(v9 + 32);
  v18 = v9 + 32 + 8 * a2;
  v38 = (char *)(v18 + 8 * a3);
  v19 = sub_100023018(v7);
  v39 = a4;
  if (v19)
  {
    v20 = v19;
    v35 = v7;
    v36 = v9;
    v21 = v4[2];
    v22 = (char *)(v4[1] + 8 * v21);
    v23 = v19 + 32;
    v24 = (uint64_t)&v22[-v19 - 32] / 8;
    v34 = v19 + 32;
    v37 = sub_100022858();
    swift_arrayDestroy(v23, v24, v37);
    if (a2 < 0)
      goto LABEL_43;
    v25 = &v22[8 * a2];
    if (__dst != v22 || __dst >= v25)
      memmove(__dst, v22, 8 * a2);
    swift_arrayDestroy(&v22[8 * a2], v40, v37);
    v39(v18, a3);
    if (v14 < 0)
      goto LABEL_43;
    v26 = &v25[8 * (_QWORD)v40];
    if (v38 != v26 || v38 >= &v26[8 * v14])
      memmove(v38, v26, 8 * v14);
    swift_arrayDestroy(&v22[8 * (_QWORD)v35], (v34 + 8 * *(_QWORD *)(v20 + 16) - (uint64_t)&v22[8 * (_QWORD)v35]) / 8, v37);
    *(_QWORD *)(v20 + 16) = 0;
    swift_release(v20);
    v9 = v36;
LABEL_23:
    v30 = *v16;
    swift_retain(v9);
    result = swift_unknownObjectRelease(v30);
    if (!__OFSUB__(0, v21))
    {
      v32 = *(_QWORD *)(v9 + 16);
      v11 = __OFADD__(v21, v32);
      v33 = v21 + v32;
      if (!v11)
      {
        if (v33 >= v21)
        {
          if ((v33 & 0x8000000000000000) == 0)
          {
            *v16 = v9;
            v16[1] = (uint64_t)&__dst[-8 * v21];
            v16[2] = v21;
            v16[3] = (2 * v33) | 1;
            return result;
          }
          goto LABEL_36;
        }
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v21 = v4[2];
  v11 = __OFADD__(v21, a2);
  v27 = v21 + a2;
  if (v11)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v27 < v21)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (__OFSUB__(v27, v21))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  sub_100022858();
  swift_arrayInitWithCopy(__dst);
  a4((uint64_t)&__dst[8 * (v27 - v21)], a3);
  v28 = &v40[v27];
  if (__OFADD__(v27, v40))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v29 = (char *)((unint64_t)v4[3] >> 1);
  if ((uint64_t)v29 < (uint64_t)v28)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (!__OFSUB__(v29, v28))
  {
    swift_arrayInitWithCopy(v38);
    goto LABEL_23;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100023018(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t isUniquelyReferenced_nonNull;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull(*v1);
  if (!(_DWORD)isUniquelyReferenced_nonNull)
    return 0;
  v6 = v1[2];
  v5 = v1[3];
  v7 = (v5 >> 1) - v6;
  if (__OFSUB__(v5 >> 1, v6))
  {
    __break(1u);
    goto LABEL_20;
  }
  v8 = v1[1];
  if ((v5 & 1) == 0)
    goto LABEL_8;
  v9 = *v1;
  v10 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v11 = swift_unknownObjectRetain(v9);
  v12 = (_QWORD *)swift_dynamicCastClass(v11, v10);
  if (!v12)
  {
    swift_unknownObjectRelease(v9);
    v12 = _swiftEmptyArrayStorage;
  }
  v13 = v12[2];
  if ((_QWORD *)(v8 + 8 * v6 + 8 * v7) != &v12[v13 + 4])
  {
    swift_release(v12);
LABEL_8:
    v14 = v7;
    goto LABEL_10;
  }
  v15 = v12[3];
  result = swift_release(v12);
  v17 = (v15 >> 1) - v13;
  v18 = __OFADD__(v7, v17);
  v14 = v7 + v17;
  if (!v18)
  {
LABEL_10:
    if (v14 < (uint64_t)a1)
      return 0;
    v19 = *v1;
    v20 = type metadata accessor for __ContiguousArrayStorageBase(0);
    v21 = swift_unknownObjectRetain(v19);
    a1 = (_QWORD *)swift_dynamicCastClass(v21, v20);
    if (!a1)
    {
      swift_unknownObjectRelease(v19);
      a1 = _swiftEmptyArrayStorage;
    }
    v22 = v8 + 8 * v6 - (_QWORD)a1;
    v23 = v22 - 32;
    v24 = v22 - 25;
    if (v23 >= 0)
      v24 = v23;
    isUniquelyReferenced_nonNull = v7 + (v24 >> 3);
    if (!__OFADD__(v7, v24 >> 3))
    {
      v4 = a1[2];
      if (isUniquelyReferenced_nonNull >= v4)
        return (uint64_t)a1;
LABEL_21:
      sub_10002333C(isUniquelyReferenced_nonNull, v4, 0);
      return (uint64_t)a1;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

id sub_100023184(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  objc_super v14;
  Swift::String v15;

  v3 = OBJC_IVAR____TtC4Maps31SearchHomeUserGuidesDataFetcher_delegate;
  *(_QWORD *)&v1[OBJC_IVAR____TtC4Maps31SearchHomeUserGuidesDataFetcher_delegate] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC4Maps31SearchHomeUserGuidesDataFetcher_dataProviders] = 0;
  v4 = OBJC_IVAR____TtC4Maps31SearchHomeUserGuidesDataFetcher_title;
  v5 = qword_101490ED0;
  v6 = v1;
  if (v5 != -1)
    swift_once(&qword_101490ED0, sub_10011833C);
  v15._countAndFlagsBits = 0xD000000000000035;
  v15._object = (void *)0x8000000100E426F0;
  v7._object = (void *)0x8000000100E426C0;
  v7._countAndFlagsBits = 0xD000000000000024;
  v8._countAndFlagsBits = 0x656469754720794DLL;
  v8._object = (void *)0xE900000000000073;
  *(Swift::String *)&v6[v4] = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)qword_1014D4B80, v8, v15);
  v9 = OBJC_IVAR____TtC4Maps31SearchHomeUserGuidesDataFetcher_collectionDataProvider;
  *(_QWORD *)&v6[v9] = objc_msgSend(objc_allocWithZone((Class)CollectionsDataProvider), "initWithContext:observeInfo:observeContents:", 2, 0, 0);
  v10 = &v6[OBJC_IVAR____TtC4Maps31SearchHomeUserGuidesDataFetcher____lazy_storage___maxNumberOfCollections];
  *(_QWORD *)v10 = 0;
  v10[8] = 1;
  *(_QWORD *)&v6[OBJC_IVAR____TtC4Maps31SearchHomeUserGuidesDataFetcher_diffableSnapshotObjects] = _swiftEmptyArrayStorage;
  v11 = *(_QWORD *)&v1[v3];
  *(_QWORD *)&v1[v3] = a1;
  swift_unknownObjectRetain(a1);
  swift_unknownObjectRelease(v11);
  v6[OBJC_IVAR____TtC4Maps31SearchHomeUserGuidesDataFetcher_isFetchingDataComplete] = 1;
  v12 = *(id *)&v6[v9];
  objc_msgSend(v12, "setActive:", 1);

  v14.receiver = v6;
  v14.super_class = (Class)type metadata accessor for SearchHomeUserGuidesDataFetcher();
  return objc_msgSendSuper2(&v14, "init");
}

char *sub_10002333C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *result;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_17;
  }
  v7 = *v3;
  v8 = v7 + 32 + 8 * a1;
  v9 = sub_100022858();
  result = (char *)swift_arrayDestroy(v8, v4, v9);
  v11 = __OFSUB__(a3, v4);
  v12 = a3 - v4;
  if (v11)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!v12)
    goto LABEL_14;
  v13 = *(_QWORD *)(v7 + 16);
  v11 = __OFSUB__(v13, a2);
  v14 = v13 - a2;
  if (v11)
    goto LABEL_18;
  if (v14 < 0)
  {
LABEL_21:
    v19 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v19, 1046, 0);
    __break(1u);
    return result;
  }
  result = (char *)(v8 + 8 * a3);
  v15 = (char *)(v7 + 32 + 8 * a2);
  if (result != v15 || result >= &v15[8 * v14])
    result = (char *)memmove(result, v15, 8 * v14);
  v17 = *(_QWORD *)(v7 + 16);
  v11 = __OFADD__(v17, v12);
  v18 = v17 + v12;
  if (v11)
    goto LABEL_19;
  *(_QWORD *)(v7 + 16) = v18;
LABEL_14:
  if (a3 > 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

void sub_100023454()
{
  id v0;
  id v1;

  v0 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v1 = objc_msgSend(v0, "userInterfaceIdiom");

  byte_101493B30 = v1 == 0;
}

void sub_1000234B4(uint64_t a1, __int16 a2)
{
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v29;
  BOOL v31;
  char v32;
  char v33;
  uint64_t v34;
  void *v35;
  __n128 v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  __n128 v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void **aBlock;
  uint64_t v66;
  void *v67;
  void *v68;
  void *v69;
  uint64_t v70;

  v3 = v2;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v64 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v63 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchTime(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v16 = __chkstk_darwin(v15).n128_u64[0];
  v18 = (char *)&v61 - v17;
  v19 = *(_QWORD *)&v3[OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_stateIndex];
  if ((v19 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_26;
  }
  v20 = *(_QWORD *)&v3[OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_allStates];
  if (v19 >= *(_QWORD *)(v20 + 16))
  {
LABEL_26:
    __break(1u);
    return;
  }
  v21 = a2;
  v22 = a2 & 0x100;
  v23 = v20 + 16 * v19;
  v24 = *(_QWORD *)(v23 + 32);
  v25 = *(unsigned __int8 *)(v23 + 40);
  v26 = v25 | (v22 >> 8);
  v27 = v21 & 1;
  if (v26 != 1 && v27 == 0)
  {
    v40 = (void *)objc_opt_self(UIView);
    v41 = *(_QWORD *)&v3[OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_imageView];
    v42 = swift_allocObject(&unk_10119CB10, 24, 7);
    swift_unknownObjectWeakInit(v42 + 16, v3);
    v43 = swift_allocObject(&unk_10119CC50, 32, 7);
    *(_QWORD *)(v43 + 16) = v42;
    *(_QWORD *)(v43 + 24) = v24;
    v69 = sub_100026120;
    v70 = v43;
    aBlock = _NSConcreteStackBlock;
    v66 = 1107296256;
    v67 = sub_1001BB8D4;
    v68 = &unk_10119CC68;
    v44 = _Block_copy(&aBlock);
    swift_release(v70);
    objc_msgSend(v40, "transitionWithView:duration:options:animations:completion:", v41, 5242880, v44, 0, 1.0);
    _Block_release(v44);
    return;
  }
  v29 = v25 ^ 1 | (v22 >> 8);
  if (v29 != 1 && v27 == 0)
  {
    objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_timer], "invalidate", v16);
    v45 = (void *)objc_opt_self(UIView);
    v46 = *(_QWORD *)&v3[OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_imageView];
    v47 = *(_QWORD *)&v3[OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_videoView];
    v48 = swift_allocObject(&unk_10119CB10, 24, 7);
    swift_unknownObjectWeakInit(v48 + 16, v3);
    v69 = sub_1000260F4;
    v70 = v48;
    aBlock = _NSConcreteStackBlock;
    v66 = 1107296256;
    v67 = sub_1001E2858;
    v68 = &unk_10119CC18;
    v49 = _Block_copy(&aBlock);
    swift_release(v70);
    objc_msgSend(v45, "transitionFromView:toView:duration:options:completion:", v46, v47, 5243136, v49, 1.0);
    _Block_release(v49);
    return;
  }
  v31 = (v21 & 1) == 0;
  if ((v21 & 1) != 0)
    v32 = v26;
  else
    v32 = 1;
  if ((v32 & 1) == 0)
  {
    v62 = v8;
    v50 = *(void **)&v3[OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_imageView];
    v51 = (void *)sub_100025FE0(v24);
    objc_msgSend(v50, "setImage:", v51);

    sub_10000E4BC(0, (unint64_t *)&qword_101492FA0, OS_dispatch_queue_ptr);
    v35 = (void *)static OS_dispatch_queue.main.getter();
    static DispatchTime.now()(v35, v52);
    + infix(_:_:)(v14, 1.0);
    v37 = *(void (**)(char *, uint64_t))(v12 + 8);
    v37(v14, v11);
    v53 = swift_allocObject(&unk_10119CBD8, 24, 7);
    *(_QWORD *)(v53 + 16) = v3;
    v69 = sub_1000260EC;
    v70 = v53;
    aBlock = _NSConcreteStackBlock;
    v66 = 1107296256;
    v39 = &unk_10119CBF0;
    goto LABEL_23;
  }
  if (v31)
    v33 = 1;
  else
    v33 = v29;
  if ((v33 & 1) == 0)
  {
    objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_timer], "invalidate", v16);
    objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_videoView], "reset");
    sub_10000E4BC(0, (unint64_t *)&qword_101492FA0, OS_dispatch_queue_ptr);
    v34 = static OS_dispatch_queue.main.getter();
    v62 = v8;
    v35 = (void *)v34;
    static DispatchTime.now()(v34, v36);
    + infix(_:_:)(v14, 1.0);
    v37 = *(void (**)(char *, uint64_t))(v12 + 8);
    v37(v14, v11);
    v38 = swift_allocObject(&unk_10119CB88, 24, 7);
    *(_QWORD *)(v38 + 16) = v3;
    v69 = sub_100025FC4;
    v70 = v38;
    aBlock = _NSConcreteStackBlock;
    v66 = 1107296256;
    v39 = &unk_10119CBA0;
LABEL_23:
    v67 = sub_1001BB8D4;
    v68 = v39;
    v54 = _Block_copy(&aBlock);
    v55 = v70;
    v56 = v3;
    v57 = swift_release(v55);
    static DispatchQoS.unspecified.getter(v57);
    aBlock = (void **)_swiftEmptyArrayStorage;
    v58 = sub_10000E540();
    v59 = sub_100008B04((uint64_t *)&unk_101492FB0);
    v60 = sub_10000E588();
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v59, v60, v5, v58);
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v18, v10, v7, v54);
    _Block_release(v54);

    (*(void (**)(char *, uint64_t))(v64 + 8))(v7, v5);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v10, v62);
    v37(v18, v11);
  }
}

void sub_100023B04()
{
  char *v0;
  void *v1;
  void *v2;
  id v3;
  char **v4;
  char *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  NSString v21;
  double v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  NSString v26;
  double v27;
  Swift::String v28;
  Swift::String v29;
  void *object;
  NSString v31;
  double v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  id v39;
  Class isa;
  id v41;
  void *v42;
  id v43;
  id v44;
  void *v45;
  void *v46;
  id v47;
  void *v48;
  id v49;
  void *v50;
  id v51;
  void *v52;
  id v53;
  void *v54;
  uint64_t v55;
  id v56;
  id v57;
  void *v58;
  void *v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  void *v65;
  id v66;
  id v67;
  double v68;
  id v69;
  id v70;
  id v71;
  void *v72;
  id v73;
  id v74;
  double v75;
  id v76;
  id v77;
  id v78;
  void *v79;
  id v80;
  id v81;
  id v82;
  id v83;
  void *v84;
  id v85;
  id v86;
  id v87;
  id v88;
  void *v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  void *v97;
  id v98;
  id v99;
  id v100;
  id v101;
  void *v102;
  id v103;
  id v104;
  id v105;
  id v106;
  void *v107;
  void *v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  uint64_t v114;
  Class v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  id v120;
  id v121;
  id v122;
  uint64_t v123;
  objc_super v124;
  Swift::String v125;

  v5 = v0;
  v124.receiver = v0;
  v124.super_class = (Class)type metadata accessor for HikingWelcomeViewController();
  objc_msgSendSuper2(&v124, "viewDidLoad");
  v6 = objc_msgSend(v0, "presentationController");
  if (v6)
  {
    v7 = v6;
    objc_msgSend(v6, "setDelegate:", v5);

  }
  v8 = objc_msgSend(v5, "view");
  if (!v8)
  {
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v9 = v8;
  v10 = objc_msgSend((id)objc_opt_self(UIColor), "systemBackgroundColor");
  objc_msgSend(v9, "setBackgroundColor:", v10);

  v11 = *(void **)&v5[OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_imageView];
  objc_msgSend(v11, "setClipsToBounds:", 1);
  objc_msgSend(v11, "setContentMode:", 2);
  v12 = *(_QWORD *)&v5[OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_stateIndex];
  if ((v12 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_35;
  }
  v13 = *(_QWORD *)&v5[OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_allStates];
  if (v12 >= *(_QWORD *)(v13 + 16))
  {
LABEL_35:
    __break(1u);
LABEL_36:
    swift_once(&qword_101490ED0, sub_10011833C);
    goto LABEL_11;
  }
  v14 = v13 + 16 * v12;
  if ((*(_BYTE *)(v14 + 40) & 1) == 0)
  {
    v15 = (void *)sub_100025FE0(*(_QWORD *)(v14 + 32));
    objc_msgSend(v11, "setImage:", v15);

  }
  v122 = v11;
  v1 = *(void **)&v5[OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_titleText];
  objc_msgSend(v1, "setNumberOfLines:", 0);
  objc_msgSend(v1, "setTextAlignment:", 1);
  v16 = objc_msgSend((id)objc_opt_self(UIFontDescriptor), "preferredFontDescriptorWithTextStyle:", UIFontTextStyleLargeTitle);
  v17 = objc_msgSend(v16, "fontDescriptorWithSymbolicTraits:", 2);

  if (v17)
  {
    v18 = objc_msgSend((id)objc_opt_self(UIFont), "fontWithDescriptor:size:", v17, 0.0);
    objc_msgSend(v1, "setFont:", v18);

  }
  sub_1000265D0();
  v20 = v19;
  v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v20);
  objc_msgSend(v1, "setText:", v21);

  v4 = &selRef_setCollisionConstraintsEnabled_forOverlay_;
  LODWORD(v22) = 1148846080;
  objc_msgSend(v1, "setContentCompressionResistancePriority:forAxis:", 1, v22);
  v2 = *(void **)&v5[OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_bodyText];
  objc_msgSend(v2, "setTextAlignment:", 1);
  objc_msgSend(v2, "setNumberOfLines:", 0);
  v23 = objc_msgSend((id)objc_opt_self(UIFont), "preferredFontForTextStyle:", UIFontTextStyleBody);
  objc_msgSend(v2, "setFont:", v23);

  sub_10002672C();
  v25 = v24;
  v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v25);
  objc_msgSend(v2, "setText:", v26);

  LODWORD(v27) = 1148846080;
  objc_msgSend(v2, "setContentCompressionResistancePriority:forAxis:", 1, v27);
  v3 = objc_msgSend((id)objc_opt_self(OBBoldTrayButton), "boldButton");
  objc_msgSend(v3, "addTarget:action:forControlEvents:", v5, "continueTapped", 64);
  if (qword_101490ED0 != -1)
    goto LABEL_36;
LABEL_11:
  v125._countAndFlagsBits = 0xD000000000000038;
  v125._object = (void *)0x8000000100E429C0;
  v28._object = (void *)0x8000000100E429A0;
  v28._countAndFlagsBits = 0xD000000000000017;
  v29._countAndFlagsBits = 0x65756E69746E6F43;
  v29._object = (void *)0xE800000000000000;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v28, (Swift::String_optional)0, (NSBundle)qword_1014D4B80, v29, v125)._object;
  v31 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  objc_msgSend(v3, "setTitle:forState:", v31, 0);

  LODWORD(v32) = 1148846080;
  objc_msgSend(v3, v4[112], 1, v32);
  if (qword_101490CB8 != -1)
    swift_once(&qword_101490CB8, sub_100023454);
  if ((byte_101493B30 & 1) == 0)
  {
    v33 = objc_msgSend(v3, "widthAnchor");
    v34 = objc_msgSend(v33, "constraintEqualToConstant:", 320.0);

    objc_msgSend(v34, "setActive:", 1);
  }
  v35 = sub_100008B04((uint64_t *)&unk_101493B10);
  v36 = swift_allocObject(v35, 56, 7);
  *(_OWORD *)(v36 + 16) = xmmword_100E25080;
  *(_QWORD *)(v36 + 32) = v1;
  *(_QWORD *)(v36 + 40) = v2;
  *(_QWORD *)(v36 + 48) = v3;
  v123 = v36;
  specialized Array._endMutation()(v36);
  v37 = objc_allocWithZone((Class)UIStackView);
  sub_10000E4BC(0, (unint64_t *)&qword_101493C30, UIView_ptr);
  v38 = v1;
  v39 = v2;
  v120 = v3;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v123);
  v41 = objc_msgSend(v37, "initWithArrangedSubviews:", isa);

  objc_msgSend(v41, "setAxis:", 1);
  objc_msgSend(v41, "setSpacing:", 14.0);
  v121 = v39;
  objc_msgSend(v41, "setCustomSpacing:afterView:", v39, 24.0);
  v42 = *(void **)&v5[OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_bottomStackView];
  *(_QWORD *)&v5[OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_bottomStackView] = v41;
  v43 = v41;

  objc_msgSend(v122, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v44 = objc_msgSend(v5, "view");
  if (!v44)
    goto LABEL_38;
  v45 = v44;
  objc_msgSend(v44, "addSubview:", v122);

  v46 = *(void **)&v5[OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_videoView];
  objc_msgSend(v46, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v47 = objc_msgSend(v5, "view");
  if (!v47)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  v48 = v47;
  objc_msgSend(v47, "addSubview:", v46);

  v49 = objc_msgSend(v5, "view");
  if (!v49)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v50 = v49;
  objc_msgSend(v49, "addSubview:", *(_QWORD *)&v5[OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_topContentGradientView]);

  v51 = objc_msgSend(v5, "view");
  if (!v51)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v52 = v51;
  objc_msgSend(v51, "addSubview:", *(_QWORD *)&v5[OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_titleToBodyGradientView]);

  objc_msgSend(v43, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v53 = objc_msgSend(v5, "view");
  if (!v53)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v54 = v53;
  objc_msgSend(v53, "addSubview:", v43);

  v55 = swift_allocObject(v35, 120, 7);
  *(_OWORD *)(v55 + 16) = xmmword_100E25090;
  v56 = objc_msgSend(v43, "bottomAnchor");
  v57 = objc_msgSend(v5, "view");
  if (!v57)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v58 = v43;
  v59 = v57;
  v60 = objc_msgSend(v57, "safeAreaLayoutGuide");

  v61 = objc_msgSend(v60, "bottomAnchor");
  v62 = objc_msgSend(v56, "constraintEqualToAnchor:constant:", v61, -58.0);

  *(_QWORD *)(v55 + 32) = v62;
  v63 = objc_msgSend(v58, "leadingAnchor");
  v64 = objc_msgSend(v5, "view");
  if (!v64)
  {
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  v65 = v64;
  v66 = objc_msgSend(v64, "layoutMarginsGuide");

  v67 = objc_msgSend(v66, "leadingAnchor");
  v68 = 44.0;
  if (byte_101493B30)
    v68 = 0.0;
  v69 = objc_msgSend(v63, "constraintEqualToAnchor:constant:", v67, v68);

  *(_QWORD *)(v55 + 40) = v69;
  v119 = v58;
  v70 = objc_msgSend(v58, "trailingAnchor");
  v71 = objc_msgSend(v5, "view");
  if (!v71)
    goto LABEL_45;
  v72 = v71;
  v73 = objc_msgSend(v71, "layoutMarginsGuide");

  v74 = objc_msgSend(v73, "trailingAnchor");
  v75 = -44.0;
  if (byte_101493B30)
    v75 = 0.0;
  v76 = objc_msgSend(v70, "constraintEqualToAnchor:constant:", v74, v75);

  *(_QWORD *)(v55 + 48) = v76;
  v77 = objc_msgSend(v122, "topAnchor");
  v78 = objc_msgSend(v5, "view");
  if (!v78)
    goto LABEL_46;
  v79 = v78;
  v80 = objc_msgSend(v78, "topAnchor");

  v81 = objc_msgSend(v77, "constraintEqualToAnchor:", v80);
  *(_QWORD *)(v55 + 56) = v81;
  v82 = objc_msgSend(v122, "leadingAnchor");
  v83 = objc_msgSend(v5, "view");
  if (!v83)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  v84 = v83;
  v85 = objc_msgSend(v83, "leadingAnchor");

  v86 = objc_msgSend(v82, "constraintEqualToAnchor:", v85);
  *(_QWORD *)(v55 + 64) = v86;
  v87 = objc_msgSend(v122, "trailingAnchor");
  v88 = objc_msgSend(v5, "view");
  if (!v88)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v89 = v88;
  v90 = objc_msgSend(v88, "trailingAnchor");

  v91 = objc_msgSend(v87, "constraintEqualToAnchor:", v90);
  *(_QWORD *)(v55 + 72) = v91;
  v92 = objc_msgSend(v122, "bottomAnchor");
  v93 = objc_msgSend(v121, "topAnchor");
  v94 = objc_msgSend(v92, "constraintEqualToAnchor:", v93);

  *(_QWORD *)(v55 + 80) = v94;
  v95 = objc_msgSend(v46, "topAnchor");
  v96 = objc_msgSend(v5, "view");
  if (!v96)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v97 = v96;
  v98 = objc_msgSend(v96, "topAnchor");

  v99 = objc_msgSend(v95, "constraintEqualToAnchor:", v98);
  *(_QWORD *)(v55 + 88) = v99;
  v100 = objc_msgSend(v46, "leadingAnchor");
  v101 = objc_msgSend(v5, "view");
  if (!v101)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  v102 = v101;
  v103 = objc_msgSend(v101, "leadingAnchor");

  v104 = objc_msgSend(v100, "constraintEqualToAnchor:", v103);
  *(_QWORD *)(v55 + 96) = v104;
  v105 = objc_msgSend(v46, "trailingAnchor");
  v106 = objc_msgSend(v5, "view");
  if (v106)
  {
    v107 = v106;
    v108 = (void *)objc_opt_self(NSLayoutConstraint);
    v109 = objc_msgSend(v107, "trailingAnchor");

    v110 = objc_msgSend(v105, "constraintEqualToAnchor:", v109);
    *(_QWORD *)(v55 + 104) = v110;
    v111 = objc_msgSend(v46, "bottomAnchor");
    v112 = objc_msgSend(v121, "topAnchor");
    v113 = objc_msgSend(v111, "constraintEqualToAnchor:", v112);

    *(_QWORD *)(v55 + 112) = v113;
    specialized Array._endMutation()(v114);
    sub_10000E4BC(0, (unint64_t *)&qword_101493070, NSLayoutConstraint_ptr);
    v115 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v55);
    objc_msgSend(v108, "activateConstraints:", v115);

    sub_10002493C();
    sub_100024A40();
    v116 = sub_100008B04((uint64_t *)&unk_101493C40);
    v117 = swift_allocObject(v116, 48, 7);
    *(_OWORD *)(v117 + 16) = xmmword_100E22F40;
    *(_QWORD *)(v117 + 32) = type metadata accessor for UITraitUserInterfaceStyle(0);
    *(_QWORD *)(v117 + 40) = &protocol witness table for UITraitUserInterfaceStyle;
    v118 = UIViewController.registerForTraitChanges(_:action:)(v117, "updateForTraitChanges");
    swift_unknownObjectRelease(v118);
    swift_bridgeObjectRelease(v117);
    sub_100024D9C();

    return;
  }
LABEL_51:
  __break(1u);
}

void sub_10002493C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  NSString v6;
  _QWORD v7[5];
  uint64_t v8;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_videoView);
  v2 = swift_allocObject(&unk_10119CB10, 24, 7);
  swift_unknownObjectWeakInit(v2 + 16, v0);
  v7[4] = sub_100026888;
  v8 = v2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_1001BB8D4;
  v7[3] = &unk_10119CCE0;
  v3 = _Block_copy(v7);
  swift_release(v8);
  objc_msgSend(v1, "setPlaybackDidEndBlock:", v3);
  _Block_release(v3);
  objc_msgSend(v1, "setAspectFill:", 1);
  sub_100025B00();
  v5 = v4;
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  objc_msgSend(v1, "loadAssetNamed:", v6);

}

void sub_100024A40()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  Class isa;
  uint64_t v14;
  NSNumber v15;
  uint64_t v16;
  Class v17;
  void *v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  Class v23;

  v1 = v0;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_topContentGradientView);
  objc_msgSend(v2, "setDisableReduceTransparency:", 1);
  objc_msgSend(v2, "setColors:", 0);
  v3 = sub_100008B04((uint64_t *)&unk_101493B10);
  v4 = swift_allocObject(v3, 56, 7);
  *(_OWORD *)(v4 + 16) = xmmword_100E25080;
  v5 = (void *)objc_opt_self(UIColor);
  v6 = objc_msgSend(v5, "systemBackgroundColor");
  v7 = objc_msgSend(v6, "colorWithAlphaComponent:", 0.0);

  *(_QWORD *)(v4 + 32) = v7;
  v8 = objc_msgSend(v5, "systemBackgroundColor");
  v9 = objc_msgSend(v8, "colorWithAlphaComponent:", 0.2);

  *(_QWORD *)(v4 + 40) = v9;
  v10 = objc_msgSend(v5, "systemBackgroundColor");
  v11 = objc_msgSend(v10, "colorWithAlphaComponent:", 0.6);

  *(_QWORD *)(v4 + 48) = v11;
  specialized Array._endMutation()(v12);
  sub_10000E4BC(0, (unint64_t *)&qword_101493C20, UIColor_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v4);
  objc_msgSend(v2, "setColors:", isa);

  v14 = swift_allocObject(v3, 56, 7);
  *(_OWORD *)(v14 + 16) = xmmword_100E25080;
  sub_10000E4BC(0, (unint64_t *)&qword_10149E3B0, NSNumber_ptr);
  *(NSNumber *)(v14 + 32) = NSNumber.init(integerLiteral:)(0);
  *(NSNumber *)(v14 + 40) = NSNumber.init(floatLiteral:)(0.6);
  v15.super.super.isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
  *(NSNumber *)(v14 + 48) = v15;
  specialized Array._endMutation()(v15.super.super.isa);
  v16 = v14;
  v17 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v16);
  objc_msgSend(v2, "setLocations:", v17);

  v18 = *(void **)(v1 + OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_titleToBodyGradientView);
  objc_msgSend(v18, "setDisableReduceTransparency:", 1);
  objc_msgSend(v18, "setColors:", 0);
  v19 = swift_allocObject(v3, 48, 7);
  *(_OWORD *)(v19 + 16) = xmmword_100E250A0;
  v20 = objc_msgSend(v5, "systemBackgroundColor");
  v21 = objc_msgSend(v20, "colorWithAlphaComponent:", 0.6);

  *(_QWORD *)(v19 + 32) = v21;
  v22 = objc_msgSend(v5, "systemBackgroundColor");
  *(_QWORD *)(v19 + 40) = v22;
  specialized Array._endMutation()(v22);
  v23 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v19);
  objc_msgSend(v18, "setColors:", v23);

}

void sub_100024D9C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_stateIndex);
  if ((v1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_allStates);
  if (v1 >= *(_QWORD *)(v2 + 16))
  {
LABEL_8:
    __break(1u);
    return;
  }
  v3 = v2 + 16 * v1;
  v4 = *(unsigned __int8 *)(v3 + 40);
  if ((v4 & 1) != 0)
  {
    objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_imageView), "setHidden:", 1);
  }
  else
  {
    v5 = *(_QWORD *)(v3 + 32);
    v6 = *(void **)(v0 + OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_imageView);
    objc_msgSend(v6, "setHidden:", 0);
    v7 = (void *)sub_100025FE0(v5);
    objc_msgSend(v6, "setImage:", v7);

  }
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_videoView), "setHidden:", v4 ^ 1u);
}

void sub_100024EAC()
{
  uint64_t v0;
  id v1;
  void *v2;
  unsigned int v3;
  double v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  _QWORD v10[5];
  uint64_t v11;

  v1 = objc_msgSend((id)objc_opt_self(GEOCountryConfiguration), "sharedConfiguration");
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v1, "currentCountrySupportsCuratedRoutes");

    if (v3)
      v4 = 2.0;
    else
      v4 = 0.0;
    v5 = (void *)objc_opt_self(NSTimer);
    v6 = swift_allocObject(&unk_10119CB10, 24, 7);
    swift_unknownObjectWeakInit(v6 + 16, v0);
    v10[4] = sub_100025FBC;
    v11 = v6;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 1107296256;
    v10[2] = sub_100136AFC;
    v10[3] = &unk_10119CB50;
    v7 = _Block_copy(v10);
    swift_release(v11);
    v8 = objc_msgSend(v5, "scheduledTimerWithTimeInterval:repeats:block:", 1, v7, v4);
    _Block_release(v7);
    v9 = *(void **)(v0 + OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_timer);
    *(_QWORD *)(v0 + OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_timer) = v8;

  }
  else
  {
    __break(1u);
  }
}

void sub_1000250B4()
{
  char *v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  id v13;
  void *v14;
  void *v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  id v20;
  void *v21;
  double v22;
  CGFloat v23;
  double v24;
  CGFloat v25;
  double v26;
  CGFloat v27;
  double v28;
  CGFloat v29;
  double Width;
  double Height;
  void *v32;
  double v33;
  id v34;
  void *v35;
  double v36;
  CGFloat v37;
  double v38;
  CGFloat v39;
  double v40;
  CGFloat v41;
  double v42;
  CGFloat v43;
  double MinY;
  objc_super v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;

  v45.receiver = v0;
  v45.super_class = (Class)type metadata accessor for HikingWelcomeViewController();
  objc_msgSendSuper2(&v45, "viewDidLayoutSubviews");
  v1 = *(void **)&v0[OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_bottomStackView];
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v0, "view");
    if (v3)
    {
      v4 = v3;
      objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_titleText], "frame");
      objc_msgSend(v4, "convertRect:fromCoordinateSpace:", v2);
      v6 = v5;
      v8 = v7;
      v10 = v9;
      v12 = v11;

      v13 = objc_msgSend(v0, "view");
      if (v13)
      {
        v14 = v13;
        objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_bodyText], "frame");
        objc_msgSend(v14, "convertRect:fromCoordinateSpace:", v2);

        v15 = *(void **)&v0[OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_titleToBodyGradientView];
        v16 = v6;
        v46.origin.x = v6;
        v17 = v8;
        v46.origin.y = v8;
        v18 = v10;
        v46.size.width = v10;
        v19 = v12;
        v46.size.height = v12;
        MinY = CGRectGetMinY(v46);
        v20 = objc_msgSend(v0, "view");
        if (v20)
        {
          v21 = v20;
          objc_msgSend(v20, "frame");
          v23 = v22;
          v25 = v24;
          v27 = v26;
          v29 = v28;

          v47.origin.x = v23;
          v47.origin.y = v25;
          v47.size.width = v27;
          v47.size.height = v29;
          Width = CGRectGetWidth(v47);
          v48.origin.x = v16;
          v48.origin.y = v17;
          v48.size.width = v18;
          v48.size.height = v19;
          objc_msgSend(v15, "setFrame:", 0.0, MinY, Width, CGRectGetHeight(v48) + 14.0);
          objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_imageView], "frame");
          Height = CGRectGetHeight(v49);
          v32 = *(void **)&v0[OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_topContentGradientView];
          objc_msgSend(v15, "frame");
          v33 = CGRectGetMinY(v50);
          v34 = objc_msgSend(v0, "view");
          if (v34)
          {
            v35 = v34;
            objc_msgSend(v34, "frame");
            v37 = v36;
            v39 = v38;
            v41 = v40;
            v43 = v42;

            v51.origin.x = v37;
            v51.origin.y = v39;
            v51.size.width = v41;
            v51.size.height = v43;
            objc_msgSend(v32, "setFrame:", 0.0, v33 - Height / 3.0, CGRectGetWidth(v51), Height / 3.0);

            return;
          }
LABEL_11:
          __break(1u);
          return;
        }
LABEL_10:
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_10;
  }
}

id sub_10002543C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HikingWelcomeViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for HikingWelcomeViewController()
{
  return objc_opt_self(_TtC4Maps27HikingWelcomeViewController);
}

void sub_100025550(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  id v6;
  void *v7;
  _BYTE v8[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    v6 = *(id *)(Strong + OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_imageView);
    v7 = (void *)sub_100025FE0(a2);
    objc_msgSend(v6, "setImage:", v7);

  }
}

uint64_t sub_1000255E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  __n128 v17;
  void (*v18)(char *, uint64_t);
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD aBlock[5];
  uint64_t v31;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v29 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v27 = *(_QWORD *)(v6 - 8);
  v28 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchTime(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v26 - v14;
  sub_10000E4BC(0, (unint64_t *)&qword_101492FA0, OS_dispatch_queue_ptr);
  v16 = (void *)static OS_dispatch_queue.main.getter();
  static DispatchTime.now()(v16, v17);
  + infix(_:_:)(v12, 1.0);
  v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  v18(v12, v9);
  aBlock[4] = sub_100026128;
  v31 = a2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BB8D4;
  aBlock[3] = &unk_10119CC90;
  v19 = _Block_copy(aBlock);
  v20 = v31;
  swift_retain(a2);
  v21 = swift_release(v20);
  static DispatchQoS.unspecified.getter(v21);
  aBlock[0] = _swiftEmptyArrayStorage;
  v22 = sub_10000E540();
  v23 = sub_100008B04((uint64_t *)&unk_101492FB0);
  v24 = sub_10000E588();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v23, v24, v3, v22);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v15, v8, v5, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v29 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v28);
  return ((uint64_t (*)(char *, uint64_t))v18)(v15, v9);
}

void sub_100025838(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  id v4;
  _BYTE v5[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v5, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    v4 = *(id *)(Strong + OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_videoView);

    objc_msgSend(v4, "play");
  }
}

void sub_1000258AC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD v7[5];
  uint64_t v8;

  v2 = (void *)objc_opt_self(UIView);
  v3 = *(_QWORD *)(a1 + OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_videoView);
  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_imageView);
  v5 = swift_allocObject(&unk_10119CB10, 24, 7);
  swift_unknownObjectWeakInit(v5 + 16, a1);
  v7[4] = sub_100026130;
  v8 = v5;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_1001E2858;
  v7[3] = &unk_10119CCB8;
  v6 = _Block_copy(v7);
  swift_release(v8);
  objc_msgSend(v2, "transitionFromView:toView:duration:options:completion:", v3, v4, 5243136, v6, 1.0);
  _Block_release(v6);
}

void sub_1000259A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _BYTE v9[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v9, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = (void *)Strong;
    v5 = *(id *)(Strong + OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_videoView);

    objc_msgSend(v5, "reset");
  }
  swift_beginAccess(v2, &v8, 0, 0);
  v6 = swift_unknownObjectWeakLoadStrong(v2);
  if (v6)
  {
    v7 = (void *)v6;
    sub_100024EAC();

  }
}

void sub_100025A50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _BOOL8 v8;
  BOOL v9;
  unint64_t v10;
  _BYTE v11[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v11, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = (void *)Strong;
    v5 = *(_QWORD *)(Strong + OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_allStates);
    v6 = *(_QWORD *)(v5 + 16);
    if (v6)
    {
      v7 = *(_QWORD *)(Strong + OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_stateIndex);
      v8 = v6 != 1;
      v9 = __OFADD__(v7, v8);
      v10 = v7 + v8;
      if (!v9)
      {
        *(_QWORD *)(Strong + OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_stateIndex) = v10;
        if ((v7 & 0x8000000000000000) == 0)
        {
          if (v7 < *(_QWORD *)(v5 + 16))
          {
            sub_1000234B4(*(_QWORD *)(v5 + 16 * v7 + 32), *(unsigned __int8 *)(v5 + 16 * v7 + 40));

            return;
          }
LABEL_11:
          __break(1u);
          return;
        }
LABEL_10:
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_10;
  }
}

id sub_100025B00()
{
  void *v0;
  id result;
  void *v2;
  unsigned int v3;
  id v4;
  id v5;
  unint64_t v6;
  unint64_t v7;

  result = objc_msgSend((id)objc_opt_self(GEOCountryConfiguration), "sharedConfiguration");
  if (result)
  {
    v2 = result;
    v3 = objc_msgSend(result, "currentCountrySupportsTopographicMap");

    v4 = objc_msgSend(v0, "traitCollection");
    v5 = objc_msgSend(v4, "userInterfaceStyle");

    v6 = 0xD000000000000018;
    if (v5 != (id)2)
      v6 = 0xD000000000000013;
    v7 = 0xD000000000000026;
    if (v5 != (id)2)
      v7 = 0xD000000000000021;
    if (v3)
      return (id)v6;
    else
      return (id)v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100025C04(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  unint64_t v4;
  uint64_t v5;
  _BYTE v6[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    v4 = *(_QWORD *)(Strong + OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_stateIndex);
    *(_QWORD *)(Strong + OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_stateIndex) = 0;
    if ((v4 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v5 = *(_QWORD *)(Strong + OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_allStates);
      if (v4 < *(_QWORD *)(v5 + 16))
      {
        sub_1000234B4(*(_QWORD *)(v5 + 16 * v4 + 32), *(unsigned __int8 *)(v5 + 16 * v4 + 40));

        return;
      }
    }
    __break(1u);
  }
}

void sub_100025D3C()
{
  void *v0;
  uint64_t v1;
  void *v2;
  _QWORD v3[5];
  uint64_t v4;

  objc_msgSend((id)objc_opt_self(GEOAPPortal), "captureUserAction:target:value:", 127, 134, 0);
  v1 = swift_allocObject(&unk_10119CB10, 24, 7);
  swift_unknownObjectWeakInit(v1 + 16, v0);
  v3[4] = sub_100025F9C;
  v4 = v1;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 1107296256;
  v3[2] = sub_1001BB8D4;
  v3[3] = &unk_10119CB28;
  v2 = _Block_copy(v3);
  swift_release(v4);
  objc_msgSend(v0, "dismissViewControllerAnimated:completion:", 1, v2);
  _Block_release(v2);
}

void sub_100025E10(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  void (*v4)(__n128);
  uint64_t v5;
  __n128 v6;
  _BYTE v7[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    v4 = *(void (**)(__n128))(Strong + OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_completionHandler);
    if (v4)
    {
      v5 = *(_QWORD *)(Strong + OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_completionHandler + 8);
      v6 = swift_retain(v5);
      v4(v6);
      sub_10000BF74((uint64_t)v4, v5);
    }

  }
}

uint64_t initializeBufferWithCopyOfBuffer for HikingWelcomeViewController.State(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for HikingWelcomeViewController.State(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for HikingWelcomeViewController.State(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_100025F2C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100025F48(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for HikingWelcomeViewController.State()
{
  return &type metadata for HikingWelcomeViewController.State;
}

uint64_t sub_100025F78()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100025F9C()
{
  uint64_t v0;

  sub_100025E10(v0);
}

uint64_t sub_100025FA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100025FB4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_100025FBC(uint64_t a1)
{
  uint64_t v1;

  sub_100025A50(a1, v1);
}

id sub_100025FC4()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_videoView), "play");
}

uint64_t sub_100025FE0(uint64_t a1)
{
  uint64_t result;
  Swift::String v3;
  void *object;
  NSString v5;
  id v6;

  _StringGuts.grow(_:)(16);
  result = swift_bridgeObjectRelease(0xE000000000000000);
  if (__OFADD__(a1, 1))
  {
    __break(1u);
  }
  else
  {
    v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v3._object;
    String.append(_:)(v3);
    swift_bridgeObjectRelease(object);
    v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(0xEE005F656D6F636CLL);
    v6 = objc_msgSend((id)objc_opt_self(UIImage), "imageNamed:", v5);

    return (uint64_t)v6;
  }
  return result;
}

uint64_t sub_1000260C8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1000260EC()
{
  uint64_t v0;

  sub_1000258AC(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000260F4(uint64_t a1)
{
  uint64_t v1;

  return sub_1000255E4(a1, v1);
}

uint64_t sub_1000260FC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100026120()
{
  uint64_t v0;

  sub_100025550(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_100026128()
{
  uint64_t v0;

  sub_100025838(v0);
}

void sub_100026130(uint64_t a1)
{
  uint64_t v1;

  sub_1000259A8(a1, v1);
}

_QWORD *sub_100026138()
{
  _QWORD *result;
  void *v1;
  unsigned int v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;

  result = objc_msgSend((id)objc_opt_self(GEOCountryConfiguration), "sharedConfiguration");
  if (result)
  {
    v1 = result;
    v2 = objc_msgSend(result, "currentCountrySupportsCuratedRoutes");

    if (v2)
    {
      v3 = sub_1000A73B0(0, 1, 1, _swiftEmptyArrayStorage);
      v5 = v3[2];
      v4 = v3[3];
      v6 = v4 >> 1;
      v7 = v5 + 1;
      if (v4 >> 1 <= v5)
      {
        v3 = sub_1000A73B0((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
        v4 = v3[3];
        v6 = v4 >> 1;
      }
      v3[2] = v7;
      v8 = &v3[2 * v5];
      v8[4] = 0;
      *((_BYTE *)v8 + 40) = 0;
      v9 = v5 + 2;
      if (v6 <= v7)
      {
        v3 = sub_1000A73B0((_QWORD *)(v4 > 1), v5 + 2, 1, v3);
        v4 = v3[3];
        v6 = v4 >> 1;
      }
      v3[2] = v9;
      v10 = &v3[2 * v7];
      v10[4] = 1;
      *((_BYTE *)v10 + 40) = 0;
      if (v6 <= v9)
        v3 = sub_1000A73B0((_QWORD *)(v4 > 1), v5 + 3, 1, v3);
      v3[2] = v5 + 3;
      v11 = &v3[2 * v9];
      v11[4] = 2;
      *((_BYTE *)v11 + 40) = 0;
    }
    else
    {
      v3 = _swiftEmptyArrayStorage;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      v3 = sub_1000A73B0(0, v3[2] + 1, 1, v3);
    v13 = v3[2];
    v12 = v3[3];
    if (v13 >= v12 >> 1)
      v3 = sub_1000A73B0((_QWORD *)(v12 > 1), v13 + 1, 1, v3);
    v3[2] = v13 + 1;
    v14 = &v3[2 * v13];
    v14[4] = 0;
    *((_BYTE *)v14 + 40) = 1;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10002630C(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v5;
  id v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  objc_super v15;

  *(_QWORD *)&v2[OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_stateIndex] = 0;
  v5 = OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_imageView;
  v6 = objc_allocWithZone((Class)UIImageView);
  v7 = v2;
  *(_QWORD *)&v2[v5] = objc_msgSend(v6, "init");
  v8 = OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_videoView;
  *(_QWORD *)&v7[v8] = objc_msgSend(objc_allocWithZone((Class)MapsVideoPlayerView), "init");
  *(_QWORD *)&v7[OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_timer] = 0;
  v9 = OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_titleText;
  *(_QWORD *)&v7[v9] = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v10 = OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_bodyText;
  *(_QWORD *)&v7[v10] = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  *(_QWORD *)&v7[OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_bottomStackView] = 0;
  v11 = OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_topContentGradientView;
  *(_QWORD *)&v7[v11] = objc_msgSend(objc_allocWithZone((Class)MUGradientView), "init");
  v12 = OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_titleToBodyGradientView;
  *(_QWORD *)&v7[v12] = objc_msgSend(objc_allocWithZone((Class)MUGradientView), "init");
  v13 = (uint64_t *)&v7[OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_completionHandler];
  *v13 = a1;
  v13[1] = a2;
  sub_10000C128(a1, a2);
  *(_QWORD *)&v7[OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_allStates] = sub_100026138();

  v15.receiver = v7;
  v15.super_class = (Class)type metadata accessor for HikingWelcomeViewController();
  return objc_msgSendSuper2(&v15, "initWithNibName:bundle:", 0, 0);
}

void sub_10002648C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_stateIndex] = 0;
  v1 = OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_imageView;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone((Class)UIImageView), "init");
  v2 = OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_videoView;
  *(_QWORD *)&v0[v2] = objc_msgSend(objc_allocWithZone((Class)MapsVideoPlayerView), "init");
  *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_timer] = 0;
  v3 = OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_titleText;
  *(_QWORD *)&v0[v3] = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v4 = OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_bodyText;
  *(_QWORD *)&v0[v4] = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_bottomStackView] = 0;
  v5 = OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_topContentGradientView;
  *(_QWORD *)&v0[v5] = objc_msgSend(objc_allocWithZone((Class)MUGradientView), "init");
  v6 = OBJC_IVAR____TtC4Maps27HikingWelcomeViewController_titleToBodyGradientView;
  *(_QWORD *)&v0[v6] = objc_msgSend(objc_allocWithZone((Class)MUGradientView), "init");

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100E41970, "Maps/HikingWelcomeViewController.swift", 38, 2, 52, 0);
  __break(1u);
}

id sub_1000265D0()
{
  id result;
  void *v1;
  unsigned int v2;
  NSBundle v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  result = objc_msgSend((id)objc_opt_self(GEOCountryConfiguration), "sharedConfiguration");
  if (result)
  {
    v1 = result;
    v2 = objc_msgSend(result, "currentCountrySupportsCuratedRoutes");

    if (v2)
    {
      if (qword_101490ED0 != -1)
        swift_once(&qword_101490ED0, sub_10011833C);
      v3.super.isa = (Class)qword_1014D4B80;
      v4 = 0xD000000000000023;
      v5 = 0xD000000000000040;
      v9 = 0x8000000100E42CE0;
      v6 = 0x8000000100E42C90;
      v7 = 0x8000000100E42CB0;
      v8 = 0xD000000000000014;
    }
    else
    {
      if (qword_101490ED0 != -1)
        swift_once(&qword_101490ED0, sub_10011833C);
      v3.super.isa = (Class)qword_1014D4B80;
      v4 = 0xD000000000000019;
      v8 = 0xD00000000000002ALL;
      v5 = 0xD000000000000043;
      v9 = 0x8000000100E42C40;
      v6 = 0x8000000100E42BF0;
      v7 = 0x8000000100E42C20;
    }
    return (id)NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v8, (Swift::String_optional)0, v3, *(Swift::String *)&v4, *(Swift::String *)&v5)._countAndFlagsBits;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10002672C()
{
  id result;
  void *v1;
  unsigned int v2;
  NSBundle v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  result = objc_msgSend((id)objc_opt_self(GEOCountryConfiguration), "sharedConfiguration");
  if (result)
  {
    v1 = result;
    v2 = objc_msgSend(result, "currentCountrySupportsCuratedRoutes");

    if (v2)
    {
      if (qword_101490ED0 != -1)
        swift_once(&qword_101490ED0, sub_10011833C);
      v3.super.isa = (Class)qword_1014D4B80;
      v4 = 0xD000000000000044;
      v5 = 0xD000000000000073;
      v9 = 0x8000000100E42BA0;
      v6 = 0x8000000100E42B00;
      v7 = 0x8000000100E42B20;
      v8 = 0xD000000000000018;
    }
    else
    {
      if (qword_101490ED0 != -1)
        swift_once(&qword_101490ED0, sub_10011833C);
      v3.super.isa = (Class)qword_1014D4B80;
      v8 = 0xD00000000000002ELL;
      v4 = 0xD000000000000047;
      v5 = 0xD000000000000078;
      v9 = 0x8000000100E42AB0;
      v6 = 0x8000000100E42A00;
      v7 = 0x8000000100E42A30;
    }
    return (id)NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v8, (Swift::String_optional)0, v3, *(Swift::String *)&v5, *(Swift::String *)&v4)._countAndFlagsBits;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100026888()
{
  uint64_t v0;

  sub_100025C04(v0);
}

uint64_t sub_100026890()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000268B4()
{
  uint64_t v0;

  return sub_1001A30F4(*(_QWORD *)(v0 + 16));
}

ValueMetadata *type metadata accessor for PlaceSummaryUnitPhotoCarousel()
{
  return &type metadata for PlaceSummaryUnitPhotoCarousel;
}

uint64_t sub_100026910@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100E25388);
  v4 = swift_getKeyPath(&unk_100E253B0);
  static Published.subscript.getter(a1, v1, KeyPath, v4);
  swift_release(KeyPath);
  return swift_release(v4);
}

uint64_t sub_100026974()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100E25320);
  v2 = swift_getKeyPath(&unk_100E25348);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_1000269E4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100E252D8);
  v2 = swift_getKeyPath(&unk_100E25300);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

id sub_100026AF4()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  id v21;
  objc_class *v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  Class isa;
  objc_super v29;
  char v30;
  _QWORD v31[3];

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v29 - v6;
  v8 = sub_100008B04((uint64_t *)&unk_101494090);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = &v0[OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider__categories];
  v31[0] = _swiftEmptyArrayStorage;
  v13 = v0;
  v14 = sub_100008B04(&qword_101493CE0);
  Published.init(initialValue:)(v31, v14);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v11, v8);
  v15 = OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_storeSubscriptionTypes;
  v16 = sub_10000B4B8();
  v17 = swift_allocObject(v16, ((*(unsigned int *)(v16 + 48) + 7) & 0x1FFFFFFF8) + 8, *(unsigned __int16 *)(v16 + 52) | 7);
  *(_OWORD *)(v17 + 16) = xmmword_100E22F40;
  *(_QWORD *)(v17 + 32) = type metadata accessor for CollectionTransitItem(0);
  *(_QWORD *)&v13[v15] = v17;
  *(_QWORD *)&v13[OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_mapItemUpdater] = 0;
  *(_QWORD *)&v13[OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_requestedLocation] = 0;
  v18 = &v13[OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_requestedZoomLevel];
  *(_QWORD *)v18 = 0;
  v18[8] = 1;
  *(_QWORD *)&v13[OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_geoNearbyTransitSchedule] = 0;
  *(_QWORD *)&v13[OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_transitAttribution] = 0;
  *(_QWORD *)&v13[OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_singleLocationUpdate] = 0;
  *(_QWORD *)&v13[OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_pinnedLines] = &_swiftEmptySetSingleton;
  v19 = &v13[OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_delegate];
  *((_QWORD *)v19 + 1) = 0;
  swift_unknownObjectWeakInit(v19, 0);
  v20 = &v13[OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_viewDelegate];
  *(_OWORD *)v20 = 0u;
  *((_OWORD *)v20 + 1) = 0u;
  *((_QWORD *)v20 + 4) = 0;
  v21 = objc_msgSend((id)objc_opt_self(MKTransitItemReferenceDateUpdater), "referenceDate");
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  swift_beginAccess(&v13[OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider__referenceDate], v31, 33, 0);
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v7, v1);
  Published.init(initialValue:)(v4, v1);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
  swift_endAccess(v31);
  swift_beginAccess(&v13[OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider__state], v31, 33, 0);
  v30 = 0;
  Published.init(initialValue:)(&v30, &type metadata for NearbyTransitDeparturesProviderState);
  swift_endAccess(v31);
  v13[OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_isTrackingUser] = 0;
  v13[OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_isActive] = 0;

  v22 = (objc_class *)type metadata accessor for NearbyTransitDeparturesProvider(0);
  v29.receiver = v13;
  v29.super_class = v22;
  v23 = objc_msgSendSuper2(&v29, "init");
  type metadata accessor for MapsSyncStore(0);
  v24 = v23;
  v25 = (void *)static MapsSyncStore.sharedStore.getter();
  v26 = v24;
  dispatch thunk of MapsSyncStore.subscribe(_:)();

  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v26, "storeDidChangeWithTypes:", isa);

  return v26;
}

id sub_100026E84()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NearbyTransitDeparturesProvider(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100026FF0()
{
  return type metadata accessor for NearbyTransitDeparturesProvider(0);
}

uint64_t type metadata accessor for NearbyTransitDeparturesProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_101493CC0;
  if (!qword_101493CC0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NearbyTransitDeparturesProvider);
  return result;
}

void sub_100027034(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[15];

  sub_100027120(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100027174(319);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_1000271CC();
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        v8[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
        v8[4] = "\b";
        v8[5] = "\b";
        v8[6] = &unk_100E25198;
        v8[7] = &unk_100E251B0;
        v8[8] = "\b";
        v8[9] = "\b";
        v8[10] = "\b";
        v8[11] = (char *)&value witness table for Builtin.BridgeObject + 64;
        v8[12] = &unk_100E251C8;
        v8[13] = &unk_100E251E0;
        v8[14] = &unk_100E251B0;
        swift_updateClassMetadata2(a1, 256, 15, v8, a1 + 80);
      }
    }
  }
}

void sub_100027120(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_101493CD0)
  {
    v2 = type metadata accessor for Date(255);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_101493CD0);
  }
}

void sub_100027174(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_101493CD8)
  {
    v2 = sub_10000E5D4(&qword_101493CE0);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_101493CD8);
  }
}

void sub_1000271CC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_101493CE8)
  {
    v0 = type metadata accessor for Published(0, &type metadata for NearbyTransitDeparturesProviderState);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_101493CE8);
  }
}

uint64_t sub_100027220@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for NearbyTransitDeparturesProvider(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

id sub_10002725C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v17;
  double v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  id result;
  void *v24;
  void *v25;
  uint64_t v26;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (uint64_t *)((char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = objc_msgSend((id)objc_opt_self(MKMapService), "sharedService");
  if (!v5)
    return 0;
  v6 = v5;
  v7 = objc_msgSend(v5, "defaultTraits");

  if (!v7)
    return v7;
  v8 = objc_msgSend(objc_allocWithZone((Class)GEOTraitsTransitScheduleModeFilter), "init");
  if (v8)
  {
    v9 = v8;
    objc_msgSend(v8, "setNumAdditionalDepartures:", 4);
    v10 = objc_msgSend(objc_allocWithZone((Class)GEOTraitsTransitScheduleTimeRange), "init");
    objc_msgSend(v9, "setTimeRange:", v10);

    v11 = objc_msgSend(v9, "timeRange");
    if (v11)
    {
      v12 = v11;
      objc_msgSend(v11, "setDuration:", 3600.0);

    }
    v13 = objc_msgSend(v9, "timeRange");
    if (v13)
    {
      v14 = v13;
      KeyPath = swift_getKeyPath(&unk_100E25388);
      v16 = swift_getKeyPath(&unk_100E253B0);
      static Published.subscript.getter(v4, v0, KeyPath, v16);
      swift_release(KeyPath);
      v17 = swift_release(v16);
      v18 = Date.timeIntervalSinceReferenceDate.getter(v17);
      (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
      objc_msgSend(v14, "setStartTime:", v18);

    }
    v19 = objc_msgSend(objc_allocWithZone((Class)GEOTraitsTransitScheduleFilter), "init");
    v20 = v19;
    if (v19)
    {
      objc_msgSend(v19, "setHighFrequencyFilter:", v9);
      objc_msgSend(v20, "setLowFrequencyFilter:", v9);
    }
    objc_msgSend(v7, "setTransitTripStopTimeFilter:", v20);

  }
  v21 = objc_msgSend(v7, "transitScheduleFilter");
  if (!v21)
    return v7;
  v22 = v21;
  result = objc_msgSend(v21, "highFrequencyFilter");
  if (result)
  {
    v24 = result;
    objc_msgSend(result, "setNumAdditionalDepartures:", 4);

    result = objc_msgSend(v22, "lowFrequencyFilter");
    if (result)
    {
      v25 = result;
      objc_msgSend(result, "setNumAdditionalDepartures:", 4);

      return v7;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_100027550()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  id v15;
  void *v16;
  unsigned __int8 v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  NSObject *oslog;
  _QWORD aBlock[6];

  v1 = v0;
  v2 = (void *)objc_opt_self(MKLocationManager);
  v3 = objc_msgSend(v2, "sharedLocationManager");
  if (!v3)
  {
    __break(1u);
    goto LABEL_26;
  }
  v4 = v3;
  v5 = objc_msgSend(v3, "isLocationServicesAvailable");

  if ((v5 & 1) == 0)
  {
    if (qword_101490E90 != -1)
      swift_once(&qword_101490E90, sub_100114734);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_10000E918(v6, (uint64_t)qword_1014D4AC0);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Requesting nearby departures based on the user location, but the location manager has insufficient privileges", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

  }
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_isTrackingUser) == 1)
  {
    if (qword_101490E90 != -1)
      swift_once(&qword_101490E90, sub_100114734);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_10000E918(v11, (uint64_t)qword_1014D4AC0);
    oslog = Logger.logObject.getter(v12);
    v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v13, "Calling requestNearbyDeparturesForUserLocation, but already tracking the user's location", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

    return;
  }
  *(_BYTE *)(v1 + OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_isTrackingUser) = 1;
  v15 = objc_msgSend(v2, "sharedLocationManager");
  if (!v15)
  {
LABEL_26:
    __break(1u);
    return;
  }
  v16 = v15;
  v17 = objc_msgSend(v15, "hasLocation");

  if ((v17 & 1) != 0 || (v18 = objc_msgSend(v2, "sharedLocationManager")) == 0)
  {
    sub_100027A38();
  }
  else
  {
    v19 = v18;
    if (qword_101490E90 != -1)
      swift_once(&qword_101490E90, sub_100114734);
    v20 = type metadata accessor for Logger(0);
    v21 = sub_10000E918(v20, (uint64_t)qword_1014D4AC0);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Location manager doesn't have a location yet, requesting a single update. Did we launch from the complication?", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

    v25 = swift_allocObject(&unk_10119CDF0, 24, 7);
    swift_unknownObjectWeakInit(v25 + 16);
    aBlock[4] = sub_10002CBF4;
    aBlock[5] = v25;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000142F0;
    aBlock[3] = &unk_10119CE08;
    v26 = _Block_copy(aBlock);
    swift_release();
    v27 = objc_msgSend(v19, "singleLocationUpdateWithHandler:", v26);
    _Block_release(v26);
    v28 = OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_singleLocationUpdate;
    v29 = *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_singleLocationUpdate);
    *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_singleLocationUpdate) = v27;
    swift_unknownObjectRelease(v29);
    v30 = *(void **)(v1 + v28);
    if (v30)
      objc_msgSend(v30, "start");

  }
}

void sub_100027934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t Strong;
  void *v10;
  _BYTE v11[24];

  v3 = a3 + 16;
  if (qword_101490E90 != -1)
    swift_once(&qword_101490E90, sub_100114734);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10000E918(v4, (uint64_t)qword_1014D4AC0);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Received a single location update, will request nearby departures", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  swift_beginAccess(v3, v11, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v10 = (void *)Strong;
    sub_100027A38();

  }
}

void sub_100027A38()
{
  char *v0;
  uint64_t v1;
  double v2;
  uint64_t KeyPath;
  uint64_t v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  uint8_t *v24;
  NSObject *v25;
  _QWORD aBlock[6];

  v1 = OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_isTrackingUser;
  if ((v0[OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_requestedZoomLevel + 8] & 1) == 0
    && (v0[OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_isTrackingUser] & 1) == 0)
  {
    v2 = *(double *)&v0[OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_requestedZoomLevel];
    if (v2 < GEOConfigGetDouble(MapsConfig_NearbyTransitMinimumZoomLevel, off_1014B40E8))
    {
      KeyPath = swift_getKeyPath(&unk_100E252D8);
      v4 = swift_getKeyPath(&unk_100E25300);
      LOBYTE(aBlock[0]) = 6;
      static Published.subscript.setter(aBlock, v0, KeyPath, v4);
      return;
    }
    v1 = OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_isTrackingUser;
  }
  if (v0[v1] == 1)
  {
    v5 = objc_msgSend((id)objc_opt_self(MKLocationManager), "sharedLocationManager");
    v6 = objc_msgSend(v5, "currentLocation");

    if (v6)
      goto LABEL_8;
LABEL_14:
    if (qword_101490E90 != -1)
      swift_once(&qword_101490E90, sub_100114734);
    v21 = type metadata accessor for Logger(0);
    v22 = sub_10000E918(v21, (uint64_t)qword_1014D4AC0);
    v25 = Logger.logObject.getter(v22);
    v23 = static os_log_type_t.error.getter(v25);
    if (os_log_type_enabled(v25, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v23, "Attempting to request nearby departures, but we don't have a lookup coordinate", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }
    goto LABEL_19;
  }
  v6 = *(id *)&v0[OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_requestedLocation];
  v20 = v6;
  if (!v6)
    goto LABEL_14;
LABEL_8:
  v7 = (void *)objc_opt_self(MKMapService);
  v25 = v6;
  v8 = objc_msgSend(v7, "sharedService");
  if (!v8)
  {

    goto LABEL_19;
  }
  v9 = v8;
  v10 = sub_10002725C();
  v11 = objc_msgSend((id)objc_opt_self(MKLocationManager), "sharedLocationManager");
  v12 = objc_msgSend(v11, "currentLocation");

  v13 = objc_msgSend(v9, "ticketForNearbyTransitDeparturesWithLookupOrigin:userLocation:traits:", v25, v12, v10);
  if (!v13)
  {
LABEL_19:

    return;
  }
  v14 = swift_getKeyPath(&unk_100E252D8);
  v15 = swift_getKeyPath(&unk_100E25300);
  LOBYTE(aBlock[0]) = 1;
  v16 = v0;
  static Published.subscript.setter(aBlock, v16, v14, v15);
  v17 = *(void **)&v16[OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_mapItemUpdater];
  if (v17)
    objc_msgSend(v17, "setActive:", 0);
  v18 = swift_allocObject(&unk_10119CDF0, 24, 7);
  swift_unknownObjectWeakInit(v18 + 16);
  aBlock[4] = sub_10002CD84;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100028E50;
  aBlock[3] = &unk_10119CE30;
  v19 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v13, "submitWithHandler:networkActivity:", v19, 0);
  _Block_release(v19);

  swift_unknownObjectRelease(v13);
}

uint64_t sub_100027E0C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  _QWORD v24[3];
  _BYTE v25[8];
  _QWORD v26[3];
  _BYTE v27[8];

  swift_getErrorValue(a1, v27, v26);
  v2 = dispatch thunk of Error._domain.getter(v26[1], v26[2]);
  v4 = v3;
  swift_getErrorValue(a1, v25, v24);
  v5 = dispatch thunk of Error._code.getter(v24[1], v24[2]);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSURLErrorDomain);
  if (v2 == v6 && v4 == v7)
  {
    v11 = swift_bridgeObjectRelease(v4);
    if (v5 == -1009)
      goto LABEL_16;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v4, v6, v7, 0);
    v11 = swift_bridgeObjectRelease(v9);
    if ((v10 & 1) != 0 && v5 == -1009)
      goto LABEL_16;
  }
  v12 = (id)GEOErrorDomain(v11);
  if (v12)
  {
    v13 = v12;
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v16 = v15;

    if (v2 == v14 && v4 == v16)
    {
      swift_bridgeObjectRelease(v4);
      if (v5 != -9)
        goto LABEL_17;
LABEL_16:
      v18 = 1;
      goto LABEL_24;
    }
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v4, v14, v16, 0);
    swift_bridgeObjectRelease(v16);
    if ((v17 & 1) != 0 && v5 == -9)
      goto LABEL_16;
  }
LABEL_17:
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCFErrorDomainCFNetwork);
  if (v2 == v19 && v4 == v20)
  {
    v18 = 1;
    v22 = v4;
  }
  else
  {
    v22 = v20;
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v4, v19, v20, 0);
  }
  swift_bridgeObjectRelease(v22);
LABEL_24:
  swift_bridgeObjectRelease(v4);
  return v18 & 1;
}

uint64_t sub_100027FC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD aBlock[6];

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v22 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10000E4BC(0, (unint64_t *)&qword_101492FA0, OS_dispatch_queue_ptr);
  v13 = (void *)static OS_dispatch_queue.main.getter(v12);
  v14 = (_QWORD *)swift_allocObject(&unk_10119CE68, 40, 7);
  v14[2] = a3;
  v14[3] = a2;
  v14[4] = a1;
  aBlock[4] = sub_10002CDA0;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BB8D4;
  aBlock[3] = &unk_10119CE80;
  v15 = _Block_copy(aBlock);
  swift_retain();
  swift_errorRetain(a2);
  swift_bridgeObjectRetain(a1);
  v16 = swift_release();
  static DispatchQoS.unspecified.getter(v16);
  aBlock[0] = _swiftEmptyArrayStorage;
  v17 = sub_10000BC84((unint64_t *)&qword_101492BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_100008B04((uint64_t *)&unk_101492FB0);
  v19 = sub_100010D70((unint64_t *)&qword_101492BC0, (uint64_t *)&unk_101492FB0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v18, v19, v6, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v15);
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v21);
}

void sub_1000281F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t Strong;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t KeyPath;
  uint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  unsigned __int8 *v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  _QWORD v76[3];
  char v77[8];
  _QWORD v78[3];
  char v79[8];
  _QWORD v80[3];
  char v81[8];
  id v82;
  uint64_t v83[4];
  char v84[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v84, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    v7 = (unsigned __int8 *)Strong;
    if (a2)
    {
      swift_errorRetain(a2);
      if (qword_101490E90 != -1)
        swift_once(&qword_101490E90, sub_100114734);
      v8 = type metadata accessor for Logger(0);
      sub_10000E918(v8, (uint64_t)qword_1014D4AC0);
      swift_errorRetain(a2);
      v9 = swift_errorRetain(a2);
      v10 = Logger.logObject.getter(v9);
      v11 = static os_log_type_t.error.getter(v10);
      if (os_log_type_enabled(v10, v11))
      {
        v12 = (uint8_t *)swift_slowAlloc(12, -1);
        v13 = swift_slowAlloc(32, -1);
        v83[0] = v13;
        *(_DWORD *)v12 = 136315138;
        swift_getErrorValue(a2, v77, v76);
        v14 = Error.localizedDescription.getter(v76[1], v76[2]);
        v16 = v15;
        v82 = (id)sub_1000C28FC(v14, v15, v83);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, v83, v12 + 4, v12 + 12);
        swift_bridgeObjectRelease(v16);
        swift_errorRelease(a2);
        swift_errorRelease(a2);
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Error making request %s", v12, 0xCu);
        swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v13, -1, -1);
        swift_slowDealloc(v12, -1, -1);
      }
      else
      {
        swift_errorRelease(a2);
        swift_errorRelease(a2);
      }

      swift_getErrorValue(a2, v81, v80);
      v37 = dispatch thunk of Error._domain.getter(v80[1], v80[2]);
      v39 = v38;
      v40 = sub_100027E0C(a2);
      if ((v40 & 1) != 0)
      {
        swift_bridgeObjectRelease(v39);
        KeyPath = swift_getKeyPath(&unk_100E252D8);
        v42 = swift_getKeyPath(&unk_100E25300);
        LOBYTE(v83[0]) = 4;
        static Published.subscript.setter(v83, v7, KeyPath, v42);
        swift_errorRelease(a2);
        return;
      }
      v43 = (id)GEOErrorDomain(v40);
      if (v43)
      {
        v44 = v43;
        v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
        v47 = v46;

        if (v37 == v45 && v39 == v47)
        {
          swift_bridgeObjectRelease_n(v39, 2);
        }
        else
        {
          v55 = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v39, v45, v47, 0);
          swift_bridgeObjectRelease(v39);
          swift_bridgeObjectRelease(v47);
          if ((v55 & 1) == 0)
            goto LABEL_31;
        }
        swift_getErrorValue(a2, v79, v78);
        if (dispatch thunk of Error._code.getter(v78[1], v78[2]) == -8)
        {
          v56 = swift_getKeyPath(&unk_100E252D8);
          v57 = swift_getKeyPath(&unk_100E25300);
          v58 = 5;
LABEL_32:
          LOBYTE(v83[0]) = v58;
          v59 = v7;
          static Published.subscript.setter(v83, v59, v56, v57);
          swift_errorRelease(a2);
LABEL_33:

          return;
        }
      }
      else
      {
        swift_bridgeObjectRelease(v39);
      }
LABEL_31:
      v56 = swift_getKeyPath(&unk_100E252D8);
      v57 = swift_getKeyPath(&unk_100E25300);
      v58 = 3;
      goto LABEL_32;
    }
    if (a3
      && *(_QWORD *)(a3 + 16)
      && (sub_100011E20(a3 + 32, (uint64_t)v83),
          v17 = sub_10000E4BC(0, &qword_101493E78, MKMapItem_ptr),
          (swift_dynamicCast(&v82, v83, (char *)&type metadata for Any + 8, v17, 6) & 1) != 0))
    {
      v18 = v82;
      v19 = objc_msgSend(v82, "_transitInfo");
      if (v19)
      {
        v20 = v19;
        v21 = objc_msgSend(v19, "nearbySchedule");
        swift_unknownObjectRelease(v20);
        if (v21)
        {
          v22 = objc_msgSend(objc_allocWithZone((Class)MKTransitMapItemUpdater), "initWithMapItem:delegate:", v18, v7);
          objc_msgSend(v22, "setActive:", v7[OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_isActive]);
          v23 = *(void **)&v7[OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_mapItemUpdater];
          *(_QWORD *)&v7[OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_mapItemUpdater] = v22;
          v24 = v22;

          v25 = objc_msgSend(v18, "_transitAttribution");
          v26 = *(_QWORD *)&v7[OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_transitAttribution];
          *(_QWORD *)&v7[OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_transitAttribution] = v25;
          swift_unknownObjectRelease(v26);
          v27 = *(_QWORD *)&v7[OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_geoNearbyTransitSchedule];
          *(_QWORD *)&v7[OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_geoNearbyTransitSchedule] = v21;
          swift_unknownObjectRetain(v21);
          swift_unknownObjectRelease(v27);
          sub_100028AE4();
          v28 = swift_getKeyPath(&unk_100E25320);
          v29 = swift_getKeyPath(&unk_100E25348);
          static Published.subscript.getter(v83, v7, v28, v29);
          swift_release();
          swift_release();
          v30 = v83[0];
          if (*(_QWORD *)(v83[0] + 16))
          {
            v31 = *(_QWORD *)(v83[0] + 40);
            v32 = *(_QWORD *)(v83[0] + 48);
            v33 = *(_QWORD *)(v83[0] + 56);
            swift_unknownObjectRetain(v33);
            swift_bridgeObjectRetain(v31);
            swift_bridgeObjectRetain(v32);
            swift_bridgeObjectRelease(v30);
            if (*(_QWORD *)(v32 + 16))
            {
              v34 = swift_getKeyPath(&unk_100E252D8);
              v35 = swift_getKeyPath(&unk_100E25300);
              LOBYTE(v83[0]) = 2;
              v36 = v7;
              static Published.subscript.setter(v83, v36, v34, v35);
              swift_unknownObjectRelease(v33);
              swift_bridgeObjectRelease(v32);
              swift_bridgeObjectRelease(v31);

              swift_unknownObjectRelease(v21);
              return;
            }
            swift_unknownObjectRelease(v33);
            swift_bridgeObjectRelease(v32);
            v68 = v31;
          }
          else
          {
            v68 = v83[0];
          }
          swift_bridgeObjectRelease(v68);
          v69 = swift_getKeyPath(&unk_100E252D8);
          v70 = swift_getKeyPath(&unk_100E25300);
          LOBYTE(v83[0]) = 5;
          v59 = v7;
          static Published.subscript.setter(v83, v59, v69, v70);
          if (qword_101490E90 != -1)
            swift_once(&qword_101490E90, sub_100114734);
          v71 = type metadata accessor for Logger(0);
          v72 = sub_10000E918(v71, (uint64_t)qword_1014D4AC0);
          v73 = Logger.logObject.getter(v72);
          v74 = static os_log_type_t.error.getter(v73);
          if (os_log_type_enabled(v73, v74))
          {
            v75 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v75 = 0;
            _os_log_impl((void *)&_mh_execute_header, v73, v74, "The first category has no groups", v75, 2u);
            swift_slowDealloc(v75, -1, -1);

            swift_unknownObjectRelease(v21);
            return;
          }

          swift_unknownObjectRelease(v21);
          goto LABEL_33;
        }
      }
      if (qword_101490E90 != -1)
        swift_once(&qword_101490E90, sub_100114734);
      v60 = type metadata accessor for Logger(0);
      v61 = sub_10000E918(v60, (uint64_t)qword_1014D4AC0);
      v62 = Logger.logObject.getter(v61);
      v63 = static os_log_type_t.error.getter(v62);
      if (os_log_type_enabled(v62, v63))
      {
        v64 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v64 = 0;
        _os_log_impl((void *)&_mh_execute_header, v62, v63, "Missing schedule from response", v64, 2u);
        swift_slowDealloc(v64, -1, -1);
      }

      v65 = swift_getKeyPath(&unk_100E252D8);
      v66 = swift_getKeyPath(&unk_100E25300);
      LOBYTE(v83[0]) = 5;
      v67 = v7;
      static Published.subscript.setter(v83, v67, v65, v66);

    }
    else
    {
      if (qword_101490E90 != -1)
        swift_once(&qword_101490E90, sub_100114734);
      v48 = type metadata accessor for Logger(0);
      v49 = sub_10000E918(v48, (uint64_t)qword_1014D4AC0);
      v50 = Logger.logObject.getter(v49);
      v51 = static os_log_type_t.error.getter(v50);
      if (os_log_type_enabled(v50, v51))
      {
        v52 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v52 = 0;
        _os_log_impl((void *)&_mh_execute_header, v50, v51, "No valid mapItems", v52, 2u);
        swift_slowDealloc(v52, -1, -1);
      }

      v53 = swift_getKeyPath(&unk_100E252D8);
      v54 = swift_getKeyPath(&unk_100E25300);
      LOBYTE(v83[0]) = 5;
      static Published.subscript.setter(v83, v7, v53, v54);
    }
  }
}

id sub_100028AE4()
{
  char *v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id result;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t KeyPath;
  uint64_t v25;
  void (*v26)(_QWORD *, _QWORD);
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD v36[4];

  v1 = *(void **)&v0[OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_geoNearbyTransitSchedule];
  if (!v1 || (v2 = objc_msgSend(v1, "categories")) == 0)
  {
    KeyPath = swift_getKeyPath(&unk_100E25320);
    v25 = swift_getKeyPath(&unk_100E25348);
    v26 = (void (*)(_QWORD *, _QWORD))static Published.subscript.modify(v36, v0, KeyPath, v25);
    v28 = *v27;
    *v27 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v28);
    v26(v36, 0);
    swift_release(KeyPath);
    return (id)swift_release(v25);
  }
  v3 = v2;
  v4 = sub_100008B04(&qword_101493EE0);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  if (!((unint64_t)v5 >> 62))
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v6)
      goto LABEL_5;
LABEL_27:
    v35 = _swiftEmptyArrayStorage;
LABEL_28:
    swift_bridgeObjectRelease(v5);
    v30 = swift_getKeyPath(&unk_100E25320);
    v31 = swift_getKeyPath(&unk_100E25348);
    v36[0] = v35;
    return (id)static Published.subscript.setter(v36, v0, v30, v31);
  }
LABEL_23:
  if (v5 < 0)
    v29 = v5;
  else
    v29 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v6 = _CocoaArrayWrapper.endIndex.getter(v29);
  swift_bridgeObjectRelease(v5);
  if (!v6)
    goto LABEL_27;
LABEL_5:
  v34 = v5 & 0xC000000000000001;
  v35 = _swiftEmptyArrayStorage;
  v7 = 4;
  v32 = v5;
  v33 = v0;
  while (1)
  {
    v8 = v7 - 4;
    if (v34)
    {
      v9 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, v5);
      v10 = v7 - 3;
      if (__OFADD__(v8, 1))
        goto LABEL_22;
    }
    else
    {
      v9 = *(void **)(v5 + 8 * v7);
      swift_unknownObjectRetain(v9);
      v10 = v7 - 3;
      if (__OFADD__(v8, 1))
      {
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
    }
    result = objc_msgSend(v9, "groups", v32, v33);
    if (!result)
      break;
    v12 = result;
    v13 = sub_100008B04(&qword_101493EE8);
    v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v13);

    v15 = sub_100028ED4(v14);
    swift_bridgeObjectRelease(v14);
    if (*(_QWORD *)(v15 + 16))
    {
      result = objc_msgSend(v9, "displayName");
      if (!result)
        goto LABEL_30;
      v16 = result;
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
      v19 = v18;

      v20 = objc_msgSend(v9, "artwork");
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v15);
      swift_unknownObjectRetain(v20);
      if ((swift_isUniquelyReferenced_nonNull_native(v35) & 1) == 0)
        v35 = sub_1000A7934(0, v35[2] + 1, 1, v35);
      v22 = v35[2];
      v21 = v35[3];
      if (v22 >= v21 >> 1)
        v35 = sub_1000A7934((_QWORD *)(v21 > 1), v22 + 1, 1, v35);
      v35[2] = v22 + 1;
      v23 = &v35[4 * v22];
      v23[4] = v17;
      v23[5] = v19;
      v23[6] = v15;
      v23[7] = v20;
      swift_unknownObjectRelease(v9);
      swift_unknownObjectRelease(v20);
      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease(v19);
      v5 = v32;
      v0 = v33;
    }
    else
    {
      swift_unknownObjectRelease(v9);
      swift_bridgeObjectRelease(v15);
    }
    ++v7;
    if (v10 == v6)
      goto LABEL_28;
  }
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100028E50(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  uint64_t v6;
  id v7;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  if (a2)
    v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, (char *)&type metadata for Any + 8);
  else
    v6 = 0;
  swift_retain(v4);
  v7 = a3;
  v5(v6, a3);
  swift_release(v4);

  return swift_bridgeObjectRelease(v6);
}

uint64_t sub_100028ED4(unint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  char **v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  id v39;
  _QWORD *v40;
  void *v41;
  BOOL v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  void *v50;
  id v51;
  id v52;
  id v53;
  unint64_t v54;
  unint64_t v55;
  void *v56;
  id v57;
  uint64_t v58;
  id v59;
  void *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _BOOL4 v65;
  unsigned int v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  id v73;
  id v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t KeyPath;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  unint64_t v88;
  _QWORD *v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  char v94;
  id v95;
  unint64_t v96;
  id v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t k;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  id v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  id v114;
  id v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  id v120;
  void *v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  unint64_t v126;
  unint64_t v127;
  char v128;
  _QWORD *v129;
  unint64_t v130;
  unint64_t *v131;
  _QWORD *v132;
  unint64_t v133;
  BOOL v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  void *v147;
  id v148;
  id v149;
  id v150;
  unint64_t v151;
  unint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  _QWORD *v158;
  unint64_t *v159;
  uint64_t v160;
  _QWORD *v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  id v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t i;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  void *v177;
  id v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  _QWORD *v188;
  uint64_t v189;
  void *v190;
  uint64_t v191;
  id v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  void *v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t j;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  void *v210;
  id v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  _QWORD *v221;
  uint64_t v222;
  Swift::String v223;
  Swift::String v224;
  Swift::String v225;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v228;
  id v229;
  void *v230;
  void *v231;
  _QWORD *v232;
  unint64_t v233;
  unint64_t v234;
  _QWORD *v235;
  _QWORD *v236;
  _QWORD *v237;
  _QWORD *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t result;
  char *v243;
  unint64_t *v244;
  __int128 v245;
  unint64_t v246;
  uint64_t v247;
  void *v248;
  void *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  unint64_t v255;
  _QWORD *v256;
  unint64_t v257;
  unint64_t v258;
  _QWORD *v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  unint64_t v263;
  id v264;
  _QWORD *v265;
  _QWORD *v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  int v274;
  _QWORD *v275;
  uint64_t v276;
  _QWORD *v277;
  unint64_t v278;
  _QWORD *v279;
  _QWORD *v280;
  uint64_t v281;
  id v282;
  uint64_t v283;
  _QWORD *v284;
  uint64_t v285;
  uint64_t v286;
  _QWORD *v287;
  uint64_t v288;
  unint64_t v289;
  void *v290;
  uint64_t v291;
  _QWORD *v292;
  uint64_t v293;
  unint64_t v294;
  __int128 v295;
  _OWORD v296[4];
  uint64_t v297;
  char v298;
  uint64_t v299;
  Swift::String v300;

  v3 = v1;
  v5 = type metadata accessor for Date(0);
  __chkstk_darwin(v5);
  v287 = (char **)((char *)&v243 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v253 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v253 - 8);
  __chkstk_darwin(v253);
  v9 = (uint64_t)&v243 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (unint64_t *)&v287;
  v254 = a1;
  if (a1 >> 62)
    goto LABEL_324;
  v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  v13 = v11;
  if (!v11)
  {
LABEL_328:
    swift_bridgeObjectRelease(a1);
    v237 = _swiftEmptyArrayStorage;
    v238 = _swiftEmptyArrayStorage;
    goto LABEL_329;
  }
LABEL_3:
  v14 = 0;
  v272 = 0;
  v281 = OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_pinnedLines;
  v255 = a1 & 0xC000000000000001;
  v247 = a1 & 0xFFFFFFFFFFFFFF8;
  v246 = a1 + 32;
  v244 = &v294;
  *(_QWORD *)&v12 = 136315138;
  v245 = v12;
  v243 = (char *)&type metadata for Any + 8;
  v249 = (void *)0x8000000100E42F20;
  v248 = (void *)0x8000000100E42F00;
  v15 = &selRef_initWithTitle_subTitle_selectedBlock_;
  v259 = _swiftEmptyArrayStorage;
  v256 = _swiftEmptyArrayStorage;
  v284 = v3;
  v252 = v13;
  v251 = v7;
  v250 = v9;
  while (1)
  {
    if (v255)
    {
      v16 = a1;
      a1 = v14;
      v290 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v16);
      v17 = a1 + 1;
      if (__OFADD__(a1, 1))
        goto LABEL_323;
    }
    else
    {
      if (v14 >= *(_QWORD *)(v247 + 16))
      {
        __break(1u);
LABEL_331:
        __break(1u);
LABEL_332:
        __break(1u);
LABEL_333:
        __break(1u);
LABEL_334:
        __break(1u);
LABEL_335:
        __break(1u);
LABEL_336:
        __break(1u);
LABEL_337:
        __break(1u);
LABEL_338:
        __break(1u);
LABEL_339:
        __break(1u);
LABEL_340:
        __break(1u);
LABEL_341:
        __break(1u);
LABEL_342:
        result = swift_unknownObjectRelease(v2);
        __break(1u);
        return result;
      }
      v290 = *(void **)(v246 + 8 * v14);
      a1 = v14;
      swift_unknownObjectRetain(v290);
      v17 = a1 + 1;
      if (__OFADD__(a1, 1))
        goto LABEL_323;
    }
    v257 = v17;
    v258 = a1;
    v18 = v290;
    v19 = sub_100034D44(v290);
    v20 = objc_msgSend(v18, "lineCells");
    if (!v20)
      goto LABEL_338;
    v21 = v20;
    v22 = sub_100008B04(&qword_101493F50);
    v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, v22);

    if ((unint64_t)v23 >> 62)
    {
      if (v23 < 0)
        v160 = v23;
      else
        v160 = v23 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v23);
      v24 = _CocoaArrayWrapper.endIndex.getter(v160);
      swift_bridgeObjectRelease(v23);
    }
    else
    {
      v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v23);
    v285 = v19;
    if (!v24)
    {
      if (qword_101490E90 != -1)
        swift_once(&qword_101490E90, sub_100114734);
      v25 = v253;
      v26 = sub_10000E918(v253, (uint64_t)qword_1014D4AC0);
      v27 = v251;
      v28 = v250;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v251 + 16))(v250, v26, v25);
      v2 = (unint64_t)v290;
      v29 = swift_unknownObjectRetain_n(v290, 2);
      v30 = Logger.logObject.getter(v29);
      v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        v32 = (uint8_t *)swift_slowAlloc(12, -1);
        v33 = swift_slowAlloc(32, -1);
        v294 = v33;
        *(_DWORD *)v32 = v245;
        v34 = objc_msgSend((id)v2, "displayName");
        if (!v34)
          goto LABEL_342;
        v35 = v34;
        v291 = (uint64_t)(v32 + 4);
        v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
        v38 = v37;

        v293 = sub_1000C28FC(v36, v38, (uint64_t *)&v294);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v293, v244, v291, v32 + 12);
        swift_unknownObjectRelease_n(v2, 2);
        swift_bridgeObjectRelease(v38);
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Group %s has no line sections", v32, 0xCu);
        swift_arrayDestroy(v33, 1, v243);
        swift_slowDealloc(v33, -1, -1);
        swift_slowDealloc(v32, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v251 + 8))(v250, v253);
        v3 = v284;
      }
      else
      {

        swift_unknownObjectRelease_n(v2, 2);
        (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v28, v25);
      }
      v19 = v285;
    }
    v39 = objc_msgSend(v290, "lineCells", v243);
    if (!v39)
      goto LABEL_339;
    a1 = (unint64_t)v39;
    v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v39, v22);

    if ((unint64_t)v7 >> 62)
      break;
    v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v9)
      goto LABEL_24;
LABEL_218:
    v264 = 0;
    v263 = 0;
    v274 = 1;
    v266 = &_swiftEmptySetSingleton;
    v265 = &_swiftEmptySetSingleton;
    v273 = 1;
    v40 = _swiftEmptyArrayStorage;
    v275 = _swiftEmptyArrayStorage;
    v262 = _swiftEmptyArrayStorage;
LABEL_219:
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(v7);
    v161 = v262;
    v294 = (unint64_t)v262;
    swift_bridgeObjectRetain(v262);
    swift_bridgeObjectRetain(v40);
    sub_10011FB88((uint64_t)v40);
    v162 = v294;
    v163 = (uint64_t)v266;
    swift_bridgeObjectRetain(v266);
    v164 = swift_bridgeObjectRetain(v265);
    v7 = sub_10002B214(v164, v163);
    v165 = objc_msgSend(v290, "incidents");
    if (!v165)
      goto LABEL_340;
    v166 = v165;
    v167 = sub_100008B04((uint64_t *)&unk_10149D2E0);
    v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v166, v167);
    swift_bridgeObjectRelease(v161);
    swift_bridgeObjectRelease(v40);

    v168 = (uint64_t)sub_1000355DC(v9, v7, 0, 1);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v7);
    if (!*(_QWORD *)(v162 + 16))
    {
      swift_bridgeObjectRelease(v162);
      v187 = v259;
      goto LABEL_262;
    }
    v169 = (uint64_t)v265;
    v170 = (uint64_t)v266;
    if (v265[2] <= v266[2] >> 3)
    {
      v294 = (unint64_t)v266;
      swift_bridgeObjectRetain(v266);
      sub_10002E3E8(v169);
      v171 = (_QWORD *)v294;
      if (!*(_QWORD *)(v294 + 16))
        goto LABEL_245;
LABEL_223:
      v294 = (unint64_t)_swiftEmptyArrayStorage;
      if ((unint64_t)v168 >> 62)
      {
        if (v168 < 0)
          v189 = v168;
        else
          v189 = v168 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v168);
        v2 = _CocoaArrayWrapper.endIndex.getter(v189);
        if (!v2)
          goto LABEL_251;
LABEL_225:
        if ((uint64_t)v2 < 1)
          goto LABEL_332;
        for (i = 0; i != v2; ++i)
        {
          if ((v168 & 0xC000000000000001) != 0)
          {
            v177 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v168);
          }
          else
          {
            v177 = *(void **)(v168 + 8 * i + 32);
            swift_unknownObjectRetain(v177);
          }
          v178 = objc_msgSend(v177, "affectedEntities");
          if (!v178)
            goto LABEL_227;
          v179 = v178;
          v180 = sub_100008B04(&qword_101493FD0);
          v181 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v179, v180);

          swift_bridgeObjectRetain(v171);
          v182 = swift_bridgeObjectRetain(v181);
          v183 = v272;
          v184 = (uint64_t)sub_100035408(v182, (uint64_t)v171);
          v272 = v183;
          swift_bridgeObjectRelease(v181);
          swift_bridgeObjectRelease(v171);
          if ((unint64_t)v184 >> 62)
          {
            v186 = v184 < 0 ? v184 : v184 & 0xFFFFFFFFFFFFFF8;
            v185 = _CocoaArrayWrapper.endIndex.getter(v186);
          }
          else
          {
            v185 = *(_QWORD *)((v184 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease(v184);
          swift_bridgeObjectRelease(v181);
          if (v185)
          {
LABEL_227:
            v173 = swift_unknownObjectRetain(v177);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v173);
            v175 = *(_QWORD *)((v294 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v174 = *(_QWORD *)((v294 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v175 >= v174 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v174 > 1, v175 + 1, 1);
            v176 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v175, v177);
            specialized Array._endMutation()(v176);
          }
          swift_unknownObjectRelease(v177);
        }
        swift_bridgeObjectRelease(v168);
        v188 = (_QWORD *)v294;
        v15 = &selRef_initWithTitle_subTitle_selectedBlock_;
      }
      else
      {
        v2 = *(_QWORD *)((v168 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v168);
        if (v2)
          goto LABEL_225;
LABEL_251:
        swift_bridgeObjectRelease(v168);
        v188 = _swiftEmptyArrayStorage;
      }
      swift_bridgeObjectRelease(v171);
      goto LABEL_253;
    }
    swift_bridgeObjectRetain(v266);
    v171 = sub_10002EA90(v169, v170);
    if (v171[2])
      goto LABEL_223;
LABEL_245:
    swift_bridgeObjectRetain(v168);
    swift_bridgeObjectRelease(v171);
    v188 = (_QWORD *)v168;
LABEL_253:
    v190 = v290;
    if ((objc_msgSend((id)swift_unknownObjectRetain(v290), "hasWalkingDetails") & 1) != 0)
    {
      v7 = sub_100198DD8((uint64_t)objc_msgSend(v190, "minWalkingTime"), (uint64_t)objc_msgSend(v190, "maxWalkingTime"));
      v9 = v191;
    }
    else
    {
      v7 = 0;
      v9 = 0;
    }
    v192 = objc_msgSend(v190, "displayName");
    if (!v192)
      goto LABEL_341;
    v193 = v192;
    v194 = static String._unconditionallyBridgeFromObjectiveC(_:)(v192);
    v196 = v195;

    swift_unknownObjectRelease(v190);
    if ((swift_isUniquelyReferenced_nonNull_native(v259) & 1) != 0)
      v187 = v259;
    else
      v187 = sub_1000A74D8(0, v259[2] + 1, 1, v259);
    v198 = v187[2];
    v197 = v187[3];
    v2 = v198 + 1;
    v199 = v258;
    if (v198 >= v197 >> 1)
    {
      v221 = sub_1000A74D8((_QWORD *)(v197 > 1), v198 + 1, 1, v187);
      v199 = v258;
      v187 = v221;
    }
    v187[2] = v2;
    v200 = &v187[8 * v198];
    v200[4] = v194;
    v200[5] = v196;
    v200[6] = v7;
    v200[7] = v9;
    v200[8] = v162;
    v200[9] = v188;
    *((_BYTE *)v200 + 80) = 0;
    v200[11] = v199;
    v3 = v284;
LABEL_262:
    v201 = v275[2];
    v259 = v187;
    if (v201)
    {
      v202 = v266;
      if (v266[2] <= v265[2] >> 3)
      {
        v294 = (unint64_t)v265;
        sub_10002E3E8((uint64_t)v266);
        swift_bridgeObjectRelease(v202);
        v203 = (_QWORD *)v294;
        if (*(_QWORD *)(v294 + 16))
        {
LABEL_265:
          v294 = (unint64_t)_swiftEmptyArrayStorage;
          if ((unint64_t)v168 >> 62)
          {
            if (v168 < 0)
              v222 = v168;
            else
              v222 = v168 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v168);
            v204 = _CocoaArrayWrapper.endIndex.getter(v222);
            if (v204)
              goto LABEL_267;
          }
          else
          {
            v204 = *(_QWORD *)((v168 & 0xFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain(v168);
            if (v204)
            {
LABEL_267:
              if (v204 < 1)
                goto LABEL_333;
              for (j = 0; j != v204; ++j)
              {
                if ((v168 & 0xC000000000000001) != 0)
                {
                  v210 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(j, v168);
                }
                else
                {
                  v210 = *(void **)(v168 + 8 * j + 32);
                  swift_unknownObjectRetain(v210);
                }
                v211 = objc_msgSend(v210, "affectedEntities");
                if (!v211)
                  goto LABEL_269;
                v212 = v211;
                v213 = sub_100008B04(&qword_101493FD0);
                v214 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v212, v213);

                swift_bridgeObjectRetain(v203);
                v215 = swift_bridgeObjectRetain(v214);
                v216 = v272;
                v217 = (uint64_t)sub_100035408(v215, (uint64_t)v203);
                v272 = v216;
                swift_bridgeObjectRelease(v214);
                swift_bridgeObjectRelease(v203);
                if ((unint64_t)v217 >> 62)
                {
                  v219 = v217 < 0 ? v217 : v217 & 0xFFFFFFFFFFFFFF8;
                  v218 = _CocoaArrayWrapper.endIndex.getter(v219);
                }
                else
                {
                  v218 = *(_QWORD *)((v217 & 0xFFFFFFFFFFFFF8) + 0x10);
                }
                swift_bridgeObjectRelease(v217);
                swift_bridgeObjectRelease(v214);
                if (v218)
                {
LABEL_269:
                  v206 = swift_unknownObjectRetain(v210);
                  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v206);
                  v208 = *(_QWORD *)((v294 & 0xFFFFFFFFFFFFFF8) + 0x10);
                  v207 = *(_QWORD *)((v294 & 0xFFFFFFFFFFFFFF8) + 0x18);
                  if (v208 >= v207 >> 1)
                    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v207 > 1, v208 + 1, 1);
                  v209 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v208, v210);
                  specialized Array._endMutation()(v209);
                }
                swift_unknownObjectRelease(v210);
              }
              swift_bridgeObjectRelease(v168);
              v220 = (_QWORD *)v294;
              v3 = v284;
              goto LABEL_295;
            }
          }
          swift_bridgeObjectRelease(v168);
          v220 = _swiftEmptyArrayStorage;
LABEL_295:
          swift_bridgeObjectRelease(v203);
          swift_bridgeObjectRelease(v168);
          v168 = (uint64_t)v220;
          goto LABEL_296;
        }
      }
      else
      {
        v203 = sub_10002EA90((uint64_t)v266, (uint64_t)v265);
        swift_bridgeObjectRelease(v202);
        if (v203[2])
          goto LABEL_265;
      }
      swift_bridgeObjectRelease(v203);
LABEL_296:
      if (qword_101490ED0 != -1)
        swift_once(&qword_101490ED0, sub_10011833C);
      v300._countAndFlagsBits = 0xD000000000000023;
      v300._object = v249;
      v223._countAndFlagsBits = 0xD00000000000001DLL;
      v223._object = v248;
      v224._countAndFlagsBits = 0x4C2064656E6E6950;
      v224._object = (void *)0xEC00000073656E69;
      v225 = NSLocalizedString(_:tableName:bundle:value:comment:)(v223, (Swift::String_optional)0, (NSBundle)qword_1014D4B80, v224, v300);
      countAndFlagsBits = v225._countAndFlagsBits;
      object = v225._object;
      v7 = 0;
      v9 = 0;
      if (((v273 | v274) & 1) == 0)
      {
        v7 = sub_100198DD8(v263, (uint64_t)v264);
        v9 = v228;
      }
      v229 = objc_msgSend(v290, "pinnedDisplayName");
      if (v229 || (v229 = objc_msgSend(v290, "displayName")) != 0)
      {
        countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(v229);
        v231 = v230;
        swift_bridgeObjectRelease(v225._object);

        object = v231;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v256) & 1) != 0)
        v232 = v256;
      else
        v232 = sub_1000A74D8(0, v256[2] + 1, 1, v256);
      v2 = v232[2];
      v233 = v232[3];
      v234 = v258;
      if (v2 >= v233 >> 1)
      {
        v236 = sub_1000A74D8((_QWORD *)(v233 > 1), v2 + 1, 1, v232);
        v234 = v258;
        v232 = v236;
      }
      v232[2] = v2 + 1;
      v256 = v232;
      v235 = &v232[8 * v2];
      v235[4] = countAndFlagsBits;
      v235[5] = object;
      v235[6] = v7;
      v235[7] = v9;
      v235[8] = v275;
      v235[9] = v168;
      *((_BYTE *)v235 + 80) = 1;
      v235[11] = v234;
      swift_unknownObjectRelease(v290);
      goto LABEL_308;
    }
    swift_bridgeObjectRelease(v275);
    swift_bridgeObjectRelease(v265);
    swift_bridgeObjectRelease(v266);
    swift_unknownObjectRelease(v290);
    swift_bridgeObjectRelease(v168);
LABEL_308:
    v14 = v257;
    a1 = v254;
    if (v257 == v252)
      goto LABEL_316;
  }
  if (v7 < 0)
    a1 = v7;
  else
    a1 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v9 = _CocoaArrayWrapper.endIndex.getter(a1);
  swift_bridgeObjectRelease(v7);
  if (!v9)
    goto LABEL_218;
LABEL_24:
  v264 = 0;
  v263 = 0;
  v2 = 0;
  v269 = v7 & 0xC000000000000001;
  v261 = v7 & 0xFFFFFFFFFFFFFF8;
  v260 = v7 + 32;
  v274 = 1;
  v266 = &_swiftEmptySetSingleton;
  v265 = &_swiftEmptySetSingleton;
  v273 = 1;
  v40 = _swiftEmptyArrayStorage;
  v275 = _swiftEmptyArrayStorage;
  v10 = &v294;
  v262 = _swiftEmptyArrayStorage;
  v268 = v7;
  v267 = v9;
  while (1)
  {
    if (v269)
    {
      v41 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v2, v7);
      v42 = __OFADD__(v2++, 1);
      if (v42)
        goto LABEL_317;
    }
    else
    {
      if (v2 >= *(_QWORD *)(v261 + 16))
        goto LABEL_322;
      v41 = (void *)swift_unknownObjectRetain(*(_QWORD *)(v260 + 8 * v2));
      v42 = __OFADD__(v2++, 1);
      if (v42)
      {
LABEL_317:
        __break(1u);
LABEL_318:
        __break(1u);
LABEL_319:
        __break(1u);
LABEL_320:
        __break(1u);
LABEL_321:
        __break(1u);
LABEL_322:
        __break(1u);
LABEL_323:
        __break(1u);
LABEL_324:
        v239 = *(v10 - 32);
        if ((a1 & 0x8000000000000000) != 0)
          v240 = v239;
        else
          v240 = a1 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v254);
        v241 = v240;
        a1 = v254;
        v13 = _CocoaArrayWrapper.endIndex.getter(v241);
        if (!v13)
          goto LABEL_328;
        goto LABEL_3;
      }
    }
    v293 = (uint64_t)_swiftEmptyArrayStorage;
    v294 = (unint64_t)_swiftEmptyArrayStorage;
    v282 = v41;
    v43 = objc_msgSend(v41, "departureSequences");
    if (!v43)
      goto LABEL_334;
    v44 = v43;
    v45 = sub_100008B04(&qword_101493F58);
    v46 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v44, v45);

    if ((unint64_t)v46 >> 62)
    {
      v107 = v46 < 0 ? v46 : v46 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v46);
      a1 = _CocoaArrayWrapper.endIndex.getter(v107);
      swift_bridgeObjectRelease(v46);
    }
    else
    {
      a1 = *(_QWORD *)((v46 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v278 = v2;
    v279 = v40;
    if (a1)
      break;
    LODWORD(v291) = 0;
    v47 = _swiftEmptyArrayStorage;
    v48 = _swiftEmptyArrayStorage;
LABEL_108:
    v280 = v48;
    swift_bridgeObjectRelease(v46);
    v98 = v47[2];
    v277 = v47;
    if (v98)
    {
      swift_bridgeObjectRetain(v47);
      v288 = (uint64_t)v47;
    }
    else
    {
      v288 = swift_bridgeObjectRetain(v280);
    }
    v7 = v294;
    if (v294 >> 62)
    {
      if ((v294 & 0x8000000000000000) != 0)
        v108 = v294;
      else
        v108 = v294 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v294);
      a1 = _CocoaArrayWrapper.endIndex.getter(v108);
      if (!a1)
        goto LABEL_25;
LABEL_113:
      if ((v7 & 0xC000000000000001) != 0)
      {
        v286 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v7);
        v3 = v275;
      }
      else
      {
        v10 = (unint64_t *)&v298;
        v3 = v275;
        if (!*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_318;
        v286 = *(_QWORD *)(v7 + 32);
        swift_unknownObjectRetain(v286);
      }
      swift_bridgeObjectRelease(v7);
      v99 = v293;
      v292 = _swiftEmptyArrayStorage;
      if ((unint64_t)v293 >> 62)
      {
        if (v293 < 0)
          a1 = v293;
        else
          a1 = v293 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v293);
        v9 = _CocoaArrayWrapper.endIndex.getter(a1);
        v289 = v99;
        if (!v9)
        {
LABEL_139:
          swift_bridgeObjectRelease(v99);
          v106 = (unint64_t)_swiftEmptyArrayStorage;
          goto LABEL_140;
        }
      }
      else
      {
        v9 = *(_QWORD *)((v293 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v293);
        v289 = v99;
        if (!v9)
          goto LABEL_139;
      }
      if (v9 < 1)
        goto LABEL_319;
      for (k = 0; k != v9; ++k)
      {
        v104 = *(_QWORD *)(v99 + 8 * k + 32);
        v105 = objc_msgSend((id)swift_unknownObjectRetain(v104), v15[480]);
        if ((v105 & 1) != 0)
        {
          swift_unknownObjectRelease(v104);
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v105);
          v101 = v292[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v101);
          v102 = v101;
          v99 = v289;
          v103 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v102, v104);
          specialized ContiguousArray._endMutation()(v103);
        }
      }
      swift_bridgeObjectRelease(v99);
      v106 = (unint64_t)v292;
      v3 = v275;
LABEL_140:
      v109 = v290;
      if ((v106 & 0x8000000000000000) != 0 || (v106 & 0x4000000000000000) != 0)
      {
        v157 = swift_bridgeObjectRetain(v106);
        v271 = _CocoaArrayWrapper.endIndex.getter(v157);
        swift_release(v106);
      }
      else
      {
        v271 = *(_QWORD *)(v106 + 16);
      }
      swift_release(v106);
      v110 = objc_msgSend(v109, "displayName");
      if (!v110)
        goto LABEL_335;
      v111 = v110;
      v112 = static String._unconditionallyBridgeFromObjectiveC(_:)(v110);
      v283 = v113;

      v114 = v282;
      swift_unknownObjectRetain(v282);
      swift_unknownObjectRetain(v286);
      v115 = objc_msgSend(v114, "displayName");
      if (!v115)
        goto LABEL_336;
      v116 = v115;
      v117 = static String._unconditionallyBridgeFromObjectiveC(_:)(v115);
      v119 = v118;

      v120 = objc_msgSend(v114, "artworks");
      if (!v120)
        goto LABEL_337;
      v121 = v120;
      v122 = v291 & (v98 != 0);
      v123 = sub_100008B04((uint64_t *)&unk_101493F60);
      v124 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v121, v123);

      swift_unknownObjectRelease(v114);
      swift_bridgeObjectRetain(v119);
      swift_bridgeObjectRetain(v288);
      swift_unknownObjectRetain(v286);
      v291 = v124;
      swift_bridgeObjectRetain(v124);
      swift_bridgeObjectRetain(v283);
      v270 = v122;
      v276 = v119;
      if (v122)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) != 0)
          v125 = v3;
        else
          v125 = sub_1000A75E4(0, v3[2] + 1, 1, v3);
        a1 = v125[2];
        v126 = v125[3];
        v127 = a1 + 1;
        v9 = 1;
        if (a1 >= v126 >> 1)
          v125 = sub_1000A75E4((_QWORD *)(v126 > 1), a1 + 1, 1, v125);
        v128 = 1;
        v3 = v125;
      }
      else
      {
        if (v98)
        {
          v129 = v262;
          if ((swift_isUniquelyReferenced_nonNull_native(v262) & 1) != 0)
            v125 = v129;
          else
            v125 = sub_1000A75E4(0, v129[2] + 1, 1, v129);
          a1 = v125[2];
          v130 = v125[3];
          v127 = a1 + 1;
          if (a1 < v130 >> 1)
          {
            v9 = 0;
            v128 = 1;
            v131 = &v294;
LABEL_161:
            *(v131 - 32) = (unint64_t)v125;
            goto LABEL_162;
          }
          v128 = 1;
          v158 = sub_1000A75E4((_QWORD *)(v130 > 1), a1 + 1, 1, v125);
          v125 = v158;
          v9 = 0;
          v159 = &v294;
        }
        else
        {
          v132 = v279;
          if ((swift_isUniquelyReferenced_nonNull_native(v279) & 1) != 0)
            v125 = v132;
          else
            v125 = sub_1000A75E4(0, v132[2] + 1, 1, v132);
          a1 = v125[2];
          v133 = v125[3];
          v127 = a1 + 1;
          if (a1 < v133 >> 1)
          {
            v9 = 0;
            v128 = 0;
            v131 = (unint64_t *)&v299;
            goto LABEL_161;
          }
          v158 = sub_1000A75E4((_QWORD *)(v133 > 1), a1 + 1, 1, v125);
          v125 = v158;
          v9 = 0;
          v128 = 0;
          v159 = (unint64_t *)&v299;
        }
        *(v159 - 32) = (unint64_t)v158;
      }
LABEL_162:
      v134 = v271 != 0;
      v125[2] = v127;
      v135 = &v125[10 * a1];
      v136 = v276;
      v135[4] = v117;
      v135[5] = v136;
      v137 = v286;
      v135[6] = v288;
      v135[7] = v137;
      *((_BYTE *)v135 + 64) = v9;
      v135[9] = v291;
      *((_BYTE *)v135 + 80) = v134;
      v138 = v283;
      v135[11] = v112;
      v135[12] = v138;
      *((_BYTE *)v135 + 104) = v128;
      v139 = v294;
      v2 = v294 >> 62;
      if (v294 >> 62)
      {
        if ((v294 & 0x8000000000000000) != 0)
          a1 = v294;
        else
          a1 = v294 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v294);
        v140 = _CocoaArrayWrapper.endIndex.getter(a1);
      }
      else
      {
        v140 = *(_QWORD *)((v294 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v294);
      }
      v275 = v3;
      if (v140)
      {
        v292 = _swiftEmptyArrayStorage;
        v7 = (uint64_t)&v292;
        sub_100132460(0, v140 & ~(v140 >> 63), 0);
        if (v140 < 0)
          goto LABEL_320;
        v141 = 0;
        v3 = v292;
        do
        {
          if ((v139 & 0xC000000000000001) != 0)
          {
            v142 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v141, v139);
          }
          else
          {
            v142 = *(void **)(v139 + 8 * v141 + 32);
            swift_unknownObjectRetain(v142);
          }
          a1 = (unint64_t)objc_msgSend(v142, "muid");
          swift_unknownObjectRelease(v142);
          v292 = v3;
          v144 = v3[2];
          v143 = v3[3];
          v9 = v144 + 1;
          if (v144 >= v143 >> 1)
          {
            sub_100132460(v143 > 1, v144 + 1, 1);
            v3 = v292;
          }
          ++v141;
          v3[2] = v9;
          v3[v144 + 4] = a1;
        }
        while (v140 != v141);
        swift_bridgeObjectRelease(v139);
        if (!v2)
        {
LABEL_174:
          v7 = *(_QWORD *)((v139 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain_n(v139, 2);
          if (v7)
            goto LABEL_175;
          goto LABEL_193;
        }
      }
      else
      {
        swift_bridgeObjectRelease(v139);
        v3 = _swiftEmptyArrayStorage;
        if (!v2)
          goto LABEL_174;
      }
      if (v139 < 0)
        a1 = v139;
      else
        a1 = v139 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(v139, 2);
      v7 = _CocoaArrayWrapper.endIndex.getter(a1);
      if (v7)
      {
LABEL_175:
        if (v7 < 1)
          goto LABEL_321;
        v145 = 0;
        v146 = _swiftEmptyArrayStorage;
        do
        {
          if ((v139 & 0xC000000000000001) != 0)
          {
            v147 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v145, v139);
          }
          else
          {
            v147 = *(void **)(v139 + 8 * v145 + 32);
            swift_unknownObjectRetain(v147);
          }
          v148 = objc_msgSend(v147, "system");
          if (v148)
          {
            v149 = v148;
            v150 = objc_msgSend(v148, "muid");
            swift_unknownObjectRelease(v147);
            swift_unknownObjectRelease(v149);
            if ((swift_isUniquelyReferenced_nonNull_native(v146) & 1) == 0)
              v146 = sub_1000A7700(0, v146[2] + 1, 1, v146);
            v152 = v146[2];
            v151 = v146[3];
            if (v152 >= v151 >> 1)
              v146 = sub_1000A7700((_QWORD *)(v151 > 1), v152 + 1, 1, v146);
            v146[2] = v152 + 1;
            v146[v152 + 4] = v150;
          }
          else
          {
            swift_unknownObjectRelease(v147);
          }
          ++v145;
        }
        while (v7 != v145);
        goto LABEL_194;
      }
LABEL_193:
      v146 = _swiftEmptyArrayStorage;
LABEL_194:
      swift_bridgeObjectRelease_n(v139, 2);
      swift_bridgeObjectRelease(v277);
      swift_bridgeObjectRelease(v280);
      swift_bridgeObjectRelease(v289);
      swift_bridgeObjectRelease(v294);
      v292 = v3;
      sub_10011FCE0((uint64_t)v146);
      v153 = v292;
      v154 = sub_100035398((uint64_t)v292);
      swift_bridgeObjectRelease(v153);
      if ((v270 & 1) != 0)
      {
        v155 = sub_10002B214(v154, (uint64_t)v266);
        v156 = (char *)v296 + 8;
      }
      else
      {
        v155 = sub_10002B214(v154, (uint64_t)v265);
        v156 = (char *)v296;
      }
      *((_QWORD *)v156 - 32) = v155;
      v3 = v284;
      v15 = &selRef_initWithTitle_subTitle_selectedBlock_;
      v19 = v285;
      v7 = v268;
      v40 = v279;
      v9 = v267;
      v2 = v278;
      a1 = (unint64_t)v282;
      swift_bridgeObjectRelease(v283);
      swift_bridgeObjectRelease(v291);
      swift_bridgeObjectRelease(v288);
      swift_bridgeObjectRelease(v276);
      swift_unknownObjectRelease_n(v286, 2);
      swift_unknownObjectRelease(a1);
      if (v2 == v9)
        goto LABEL_219;
    }
    else
    {
      a1 = *(_QWORD *)((v294 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v294);
      if (a1)
        goto LABEL_113;
LABEL_25:
      swift_unknownObjectRelease(v282);
      swift_bridgeObjectRelease(v288);
      swift_bridgeObjectRelease(v7);
      a1 = v293;
      swift_bridgeObjectRelease(v277);
      swift_bridgeObjectRelease(v280);
      swift_bridgeObjectRelease(a1);
      swift_bridgeObjectRelease(v294);
      v19 = v285;
      v7 = v268;
      v40 = v279;
      v9 = v267;
      v2 = v278;
      if (v278 == v267)
        goto LABEL_219;
    }
  }
  LODWORD(v291) = 0;
  LODWORD(v286) = 0;
  v289 = v46 & 0xC000000000000001;
  v283 = v46 & 0xFFFFFFFFFFFFFF8;
  LODWORD(v280) = v274;
  LODWORD(v277) = v273;
  v47 = _swiftEmptyArrayStorage;
  v48 = _swiftEmptyArrayStorage;
  v288 = v46;
  v49 = 0;
  if ((v46 & 0xC000000000000001) != 0)
  {
    while (1)
    {
      v50 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v49, v46);
      v9 = v49 + 1;
      if (__OFADD__(v49, 1))
        goto LABEL_311;
LABEL_45:
      v2 = a1;
      v51 = objc_msgSend(v50, "line");
      if (!v51)
        goto LABEL_331;
      v52 = v51;
      v53 = objc_msgSend(v51, "muid");
      swift_unknownObjectRelease(v52);
      v54 = v294;
      if (v294 >> 62)
      {
        if ((v294 & 0x8000000000000000) != 0)
          v58 = v294;
        else
          v58 = v294 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v294);
        a1 = _CocoaArrayWrapper.endIndex.getter(v58);
        if (!a1)
        {
LABEL_59:
          swift_bridgeObjectRelease(v54);
          goto LABEL_60;
        }
      }
      else
      {
        a1 = *(_QWORD *)((v294 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v294);
        if (!a1)
          goto LABEL_59;
      }
      v55 = a1 - 1;
      if (__OFSUB__(a1, 1))
        goto LABEL_312;
      if ((v54 & 0xC000000000000001) != 0)
      {
        v56 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v55, v54);
      }
      else
      {
        if ((v55 & 0x8000000000000000) != 0)
          goto LABEL_313;
        if (v55 >= *(_QWORD *)((v54 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_314;
        v56 = *(void **)(v54 + 8 * v55 + 32);
        swift_unknownObjectRetain(v56);
      }
      swift_bridgeObjectRelease(v54);
      v57 = objc_msgSend(v56, "muid");
      swift_unknownObjectRelease(v56);
      if (v53 == v57)
        goto LABEL_79;
LABEL_60:
      v59 = objc_msgSend(v50, "line");
      if (v59)
      {
        v60 = v59;
        v61 = swift_unknownObjectRetain(v59);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v61);
        v63 = *(_QWORD *)((v294 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v62 = *(_QWORD *)((v294 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v63 >= v62 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v63 + 1, 1);
        v64 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v63, v60);
        specialized Array._endMutation()(v64);
        if ((v286 & 1) != 0)
        {
          v65 = 1;
          v66 = 1;
          if ((v291 & 1) == 0)
LABEL_68:
            v66 = objc_msgSend(v282, "isSignificant") & v65;
        }
        else
        {
          v67 = *(_QWORD *)((char *)v3 + v281);
          swift_bridgeObjectRetain(v67);
          v65 = sub_10012A57C((uint64_t)objc_msgSend(v60, "muid"), v67);
          swift_bridgeObjectRelease(v67);
          if ((v291 & 1) == 0)
            goto LABEL_68;
          v66 = 1;
        }
        LODWORD(v286) = v65;
        v68 = objc_msgSend(v60, "muid");
        v69 = v285;
        if (*(_QWORD *)(v285 + 16))
        {
          v70 = sub_1000C3B40(v68);
          if ((v71 & 1) != 0)
          {
            v72 = swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v69 + 56) + 8 * v70));
            sub_10011FA14(v72);
          }
        }
        v73 = objc_msgSend(v60, "system");
        if (v73)
        {
          v74 = v73;
          v75 = objc_msgSend(v73, "muid");
          v76 = v285;
          if (*(_QWORD *)(v285 + 16))
          {
            v77 = sub_1000C3B40(v75);
            if ((v78 & 1) != 0)
            {
              v79 = swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v76 + 56) + 8 * v77));
              sub_10011FA14(v79);
            }
          }
          swift_unknownObjectRelease(v60);
        }
        else
        {
          v74 = v60;
        }
        swift_unknownObjectRelease(v74);
        LODWORD(v291) = v66;
        v3 = v284;
      }
LABEL_79:
      KeyPath = swift_getKeyPath(&unk_100E25388);
      v81 = swift_getKeyPath(&unk_100E253B0);
      swift_unknownObjectRetain(v50);
      v82 = v287;
      static Published.subscript.getter(v287, v3, KeyPath, v81);
      swift_release(KeyPath);
      swift_release(v81);
      sub_1001E8254(v50, (uint64_t)v82, (uint64_t)objc_msgSend(v290, "groupType"), (uint64_t *)&v295);
      if ((*((_QWORD *)&v295 + 1) & 0x2000000000000000) != 0)
        v83 = HIBYTE(*((_QWORD *)&v295 + 1)) & 0xFLL;
      else
        v83 = v295 & 0xFFFFFFFFFFFFLL;
      sub_1000352C8(&v295);
      if (v83)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
          v47 = sub_1000A780C(0, v47[2] + 1, 1, v47);
        v85 = v47[2];
        v84 = v47[3];
        v86 = v85 + 1;
        if (v85 >= v84 >> 1)
        {
          v87 = sub_1000A780C((_QWORD *)(v84 > 1), v85 + 1, 1, v47);
          v47 = v87;
        }
        else
        {
          v87 = v47;
        }
      }
      else
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v48) & 1) == 0)
          v48 = sub_1000A780C(0, v48[2] + 1, 1, v48);
        v85 = v48[2];
        v88 = v48[3];
        v86 = v85 + 1;
        if (v85 >= v88 >> 1)
        {
          v87 = sub_1000A780C((_QWORD *)(v88 > 1), v85 + 1, 1, v48);
          v48 = v87;
        }
        else
        {
          v87 = v48;
        }
      }
      v87[2] = v86;
      v89 = &v87[11 * v85];
      v90 = v296[0];
      *((_OWORD *)v89 + 2) = v295;
      *((_OWORD *)v89 + 3) = v90;
      v91 = v296[1];
      v92 = v296[2];
      v93 = v296[3];
      v89[14] = v297;
      *((_OWORD *)v89 + 5) = v92;
      *((_OWORD *)v89 + 6) = v93;
      *((_OWORD *)v89 + 4) = v91;
      if ((v291 & 1) != 0 && objc_msgSend(v50, "hasWalkingETA"))
      {
        v94 = v277 | v280;
        v95 = objc_msgSend(v50, "walkingETA");
        if ((v94 & 1) != 0)
        {
          v264 = objc_msgSend(v50, "walkingETA");
          sub_100035330(&v295);
          swift_unknownObjectRelease(v50);
          LODWORD(v280) = 0;
          LODWORD(v277) = 0;
          v274 = 0;
          v273 = 0;
          LODWORD(v291) = 1;
          v263 = (unint64_t)v95;
        }
        else
        {
          sub_100035330(&v295);
          swift_unknownObjectRelease(v50);
          LODWORD(v280) = 0;
          LODWORD(v277) = 0;
          v274 = 0;
          v273 = 0;
          v96 = v263;
          if (v263 >= (unint64_t)v95)
            v96 = (unint64_t)v95;
          v263 = v96;
          v97 = v264;
          if (v264 <= v95)
            v97 = v95;
          v264 = v97;
          LODWORD(v291) = 1;
        }
        a1 = v2;
        v15 = &selRef_initWithTitle_subTitle_selectedBlock_;
        v46 = v288;
        if (v9 == v2)
          goto LABEL_108;
        v49 = v9;
        if (!v289)
          break;
      }
      else
      {
        sub_100035330(&v295);
        swift_unknownObjectRelease(v50);
        ++v49;
        a1 = v2;
        v46 = v288;
        if (v9 == v2)
        {
          v274 = (int)v280;
          v273 = (int)v277;
          v15 = &selRef_initWithTitle_subTitle_selectedBlock_;
          goto LABEL_108;
        }
        if (!v289)
          break;
      }
    }
  }
  if (v49 < *(_QWORD *)(v283 + 16))
  {
    v50 = *(void **)(v46 + 8 * v49 + 32);
    swift_unknownObjectRetain(v50);
    v9 = v49 + 1;
    if (!__OFADD__(v49, 1))
      goto LABEL_45;
LABEL_311:
    __break(1u);
LABEL_312:
    __break(1u);
LABEL_313:
    __break(1u);
LABEL_314:
    __break(1u);
  }
  __break(1u);
LABEL_316:
  swift_bridgeObjectRelease(a1);
  v237 = v259;
  v238 = v256;
LABEL_329:
  v294 = (unint64_t)v238;
  sub_10011FA38((uint64_t)v237);
  return v294;
}

void sub_10002AF24(uint64_t a1)
{
  int64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  int64_t v25;
  uint64_t v26;
  id v27[2];

  v1 = a1;
  v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    v3 = __CocoaDictionary.count.getter(a1);
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 16);
  }
  v4 = sub_10000E4BC(0, (unint64_t *)&unk_10149BA50, &off_101196DA8);
  v5 = sub_100035DAC((unint64_t *)&qword_101494060, (unint64_t *)&unk_10149BA50, &off_101196DA8);
  v23 = v4;
  v27[1] = (id)Set.init(minimumCapacity:)(v3, v4, v5);
  if (v2)
  {
    if (v1 < 0)
      v6 = v1;
    else
      v6 = v1 & 0xFFFFFFFFFFFFFF8;
    v7 = __CocoaDictionary.makeIterator()(v6);
    v25 = 0;
    v8 = 0;
    v9 = 0;
    v1 = v7 | 0x8000000000000000;
  }
  else
  {
    v10 = -1 << *(_BYTE *)(v1 + 32);
    v25 = v1 + 64;
    v8 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(v1 + 64);
  }
  v13 = 0;
  v24 = (unint64_t)(v8 + 64) >> 6;
  while (v1 < 0)
  {
    v21 = __CocoaDictionary.Iterator.nextKey()();
    if (!v21)
      goto LABEL_40;
    v22 = v21;
    v26 = v21;
    swift_unknownObjectRetain(v21);
    swift_dynamicCast(v27, &v26, (char *)&type metadata for Swift.AnyObject + 8, v23, 7);
    v17 = v27[0];
    swift_unknownObjectRelease(v22);
    if (!v17)
      goto LABEL_40;
    v14 = v9;
    v16 = v13;
LABEL_18:
    sub_10002E120((Swift::Int *)v27, v17, (unint64_t *)&unk_10149BA50, &off_101196DA8, &qword_101494068);

    v13 = v16;
    v9 = v14;
  }
  if (v9)
  {
    v14 = (v9 - 1) & v9;
    v15 = __clz(__rbit64(v9)) | (v13 << 6);
    v16 = v13;
LABEL_17:
    v17 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v15);
    if (!v17)
      goto LABEL_40;
    goto LABEL_18;
  }
  v18 = v13 + 1;
  if (!__OFADD__(v13, 1))
  {
    if (v18 >= v24)
      goto LABEL_40;
    v19 = *(_QWORD *)(v25 + 8 * v18);
    v16 = v13 + 1;
    if (!v19)
    {
      v16 = v13 + 2;
      if (v13 + 2 >= v24)
        goto LABEL_40;
      v19 = *(_QWORD *)(v25 + 8 * v16);
      if (!v19)
      {
        v16 = v13 + 3;
        if (v13 + 3 >= v24)
          goto LABEL_40;
        v19 = *(_QWORD *)(v25 + 8 * v16);
        if (!v19)
        {
          v16 = v13 + 4;
          if (v13 + 4 >= v24)
            goto LABEL_40;
          v19 = *(_QWORD *)(v25 + 8 * v16);
          if (!v19)
          {
            v16 = v13 + 5;
            if (v13 + 5 >= v24)
              goto LABEL_40;
            v19 = *(_QWORD *)(v25 + 8 * v16);
            if (!v19)
            {
              v20 = v13 + 6;
              while (v24 != v20)
              {
                v19 = *(_QWORD *)(v25 + 8 * v20++);
                if (v19)
                {
                  v16 = v20 - 1;
                  goto LABEL_36;
                }
              }
LABEL_40:
              sub_100035E28(v1);
              return;
            }
          }
        }
      }
    }
LABEL_36:
    v14 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v16 << 6);
    goto LABEL_17;
  }
  __break(1u);
}

uint64_t sub_10002B214(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = result;
  v3 = 0;
  v15 = a2;
  v4 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      v3 = v11 + 1;
      if (v11 + 1 >= v8)
        goto LABEL_23;
      v12 = *(_QWORD *)(v4 + 8 * v3);
      if (!v12)
      {
        v3 = v11 + 2;
        if (v11 + 2 >= v8)
          goto LABEL_23;
        v12 = *(_QWORD *)(v4 + 8 * v3);
        if (!v12)
        {
          v3 = v11 + 3;
          if (v11 + 3 >= v8)
            goto LABEL_23;
          v12 = *(_QWORD *)(v4 + 8 * v3);
          if (!v12)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_5:
    result = sub_10002CDAC(&v14, *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v10));
  }
  v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release(v2);
    return v15;
  }
  v12 = *(_QWORD *)(v4 + 8 * v13);
  if (v12)
  {
    v3 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v3);
    ++v13;
    if (v12)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t storeEnumTagSinglePayload for NearbyTransitDeparturesProviderState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_10002B720 + 4 * byte_100E25125[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10002B754 + 4 * byte_100E25120[v4]))();
}

uint64_t sub_10002B754(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002B75C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10002B764);
  return result;
}

uint64_t sub_10002B770(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10002B778);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_10002B77C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002B784(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NearbyTransitDeparturesProviderState()
{
  return &type metadata for NearbyTransitDeparturesProviderState;
}

unint64_t sub_10002B7A4()
{
  unint64_t result;

  result = qword_101493E70;
  if (!qword_101493E70)
  {
    result = swift_getWitnessTable(&unk_100E25278, &type metadata for NearbyTransitDeparturesProviderState);
    atomic_store(result, (unint64_t *)&qword_101493E70);
  }
  return result;
}

uint64_t sub_10002B7E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[17] = a4;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v4[18] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[19] = v6;
  v4[20] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v4[21] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[22] = v8;
  v4[23] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10002B870, 0, 0);
}

uint64_t sub_10002B870()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(void);

  type metadata accessor for CollectionTransitItemRequest(0);
  *(_QWORD *)(v0 + 192) = CollectionTransitItemRequest.__allocating_init()();
  v3 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of CollectionTransitItemRequest.fetch()
                         + async function pointer to dispatch thunk of CollectionTransitItemRequest.fetch());
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CollectionTransitItemRequest.fetch()
                                  + 1));
  *(_QWORD *)(v0 + 200) = v1;
  *v1 = v0;
  v1[1] = sub_10002B8E0;
  return v3();
}

uint64_t sub_10002B8E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 200);
  *(_QWORD *)(*v2 + 208) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10002BB8C;
  }
  else
  {

    *(_QWORD *)(v4 + 216) = a1;
    v6 = sub_10002B95C;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10002B95C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *Strong;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = v0[27];
  v2 = v0[23];
  v3 = v0[20];
  v18 = v0[22];
  v19 = v0[21];
  v4 = v0[18];
  v17 = v0[19];
  v5 = v0[17] + 16;
  sub_10000E4BC(0, (unint64_t *)&qword_101492FA0, OS_dispatch_queue_ptr);
  v16 = (void *)static OS_dispatch_queue.main.getter();
  v6 = swift_allocObject(&unk_10119CDF0, 24, 7);
  swift_beginAccess(v5, v0 + 11, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v5);
  swift_unknownObjectWeakInit(v6 + 16, Strong);

  v8 = swift_allocObject(&unk_10119CEE0, 32, 7);
  *(_QWORD *)(v8 + 16) = v6;
  *(_QWORD *)(v8 + 24) = v1;
  v0[6] = sub_100035EF4;
  v0[7] = v8;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_1001BB8D4;
  v0[5] = &unk_10119CEF8;
  v9 = _Block_copy(v0 + 2);
  swift_retain(v6);
  static DispatchQoS.unspecified.getter(v10);
  v0[16] = _swiftEmptyArrayStorage;
  v11 = sub_10000BC84((unint64_t *)&qword_101492BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v12 = sub_100008B04((uint64_t *)&unk_101492FB0);
  v13 = sub_100010D70((unint64_t *)&qword_101492BC0, (uint64_t *)&unk_101492FB0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 16, v12, v13, v4, v11);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v2, v3, v9);
  _Block_release(v9);

  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v2, v19);
  swift_release(v0[7]);
  swift_release(v6);
  v14 = v0[20];
  swift_task_dealloc(v0[23]);
  swift_task_dealloc(v14);
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_10002BB8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;

  if (qword_101490E90 != -1)
    swift_once(&qword_101490E90, sub_100114734);
  v1 = *(_QWORD *)(v0 + 208);
  v2 = type metadata accessor for Logger(0);
  sub_10000E918(v2, (uint64_t)qword_1014D4AC0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 208);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v15 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_getErrorValue(v7, v0 + 112, v0 + 64);
    v10 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
    v12 = v11;
    *(_QWORD *)(v0 + 120) = sub_1000C28FC(v10, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v12);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error syncing transit lines : %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 208));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  v13 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10002BD98(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _BYTE v26[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v26, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (char *)Strong;
    if ((unint64_t)a2 >> 62)
    {
      if (a2 < 0)
        v23 = a2;
      else
        v23 = a2 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a2);
      v6 = _CocoaArrayWrapper.endIndex.getter(v23);
      swift_bridgeObjectRelease(a2);
    }
    else
    {
      v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v7 = _swiftEmptyArrayStorage;
    if (v6)
    {
      v25 = _swiftEmptyArrayStorage;
      sub_100132460(0, v6 & ~(v6 >> 63), 0);
      if (v6 < 0)
      {
        __break(1u);
        return;
      }
      v24 = v3;
      v8 = 0;
      v7 = v25;
      do
      {
        if ((a2 & 0xC000000000000001) != 0)
          v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, a2);
        else
          v9 = *(id *)(a2 + 8 * v8 + 32);
        v10 = v9;
        v11 = dispatch thunk of CollectionTransitItem.muid.getter();

        v25 = v7;
        v13 = v7[2];
        v12 = v7[3];
        if (v13 >= v12 >> 1)
        {
          sub_100132460(v12 > 1, v13 + 1, 1);
          v7 = v25;
        }
        ++v8;
        v7[2] = v13 + 1;
        v7[v13 + 4] = v11;
      }
      while (v6 != v8);
      v3 = v24;
    }
    v14 = sub_100035398((uint64_t)v7);
    swift_bridgeObjectRelease(v7);
    v15 = OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_pinnedLines;
    v16 = *(_QWORD *)&v5[OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_pinnedLines];
    *(_QWORD *)&v5[OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_pinnedLines] = v14;
    swift_bridgeObjectRelease(v16);
    v17 = *(_QWORD *)&v5[v15];
    if (*(_QWORD *)(v17 + 16)
      && (v18 = swift_unknownObjectWeakLoadStrong(&v5[OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_delegate])) != 0)
    {
      v19 = v18;
      v20 = swift_bridgeObjectRetain(v17);
      sub_10017C2EC(v20);

      swift_bridgeObjectRelease(v17);
      swift_unknownObjectRelease(v19);
    }
    else
    {

    }
  }
  swift_beginAccess(v3, &v25, 0, 0);
  v21 = swift_unknownObjectWeakLoadStrong(v3);
  if (v21)
  {
    v22 = (void *)v21;
    sub_100028AE4();

  }
}

uint64_t sub_10002BFA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5[17] = a4;
  v5[18] = a5;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v5[19] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[20] = v7;
  v5[21] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v5[22] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[23] = v9;
  v5[24] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10002C028, 0, 0);
}

uint64_t sub_10002C028()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(void);

  type metadata accessor for CollectionTransitItemRequest(0);
  *(_QWORD *)(v0 + 200) = CollectionTransitItemRequest.__allocating_init()();
  v3 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of CollectionTransitItemRequest.fetch()
                         + async function pointer to dispatch thunk of CollectionTransitItemRequest.fetch());
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CollectionTransitItemRequest.fetch()
                                  + 1));
  *(_QWORD *)(v0 + 208) = v1;
  *v1 = v0;
  v1[1] = sub_10002C098;
  return v3();
}

uint64_t sub_10002C098(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 208);
  *(_QWORD *)(*v2 + 216) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10002C350;
  }
  else
  {

    *(_QWORD *)(v4 + 224) = a1;
    v6 = sub_10002C114;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10002C114()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *Strong;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = v0[28];
  v2 = v0[24];
  v3 = v0[21];
  v20 = v0[23];
  v21 = v0[22];
  v4 = v0[19];
  v19 = v0[20];
  v5 = v0[18];
  v6 = v0[17] + 16;
  v7 = sub_10000E4BC(0, (unint64_t *)&qword_101492FA0, OS_dispatch_queue_ptr);
  v18 = (void *)static OS_dispatch_queue.main.getter(v7);
  v8 = swift_allocObject(&unk_10119CDF0, 24, 7);
  swift_beginAccess(v6, v0 + 11, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v6);
  swift_unknownObjectWeakInit(v8 + 16);

  v10 = (_QWORD *)swift_allocObject(&unk_10119CF30, 40, 7);
  v10[2] = v8;
  v10[3] = v1;
  v10[4] = v5;
  v0[6] = sub_100036AFC;
  v0[7] = v10;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_1001BB8D4;
  v0[5] = &unk_10119CF48;
  v11 = _Block_copy(v0 + 2);
  swift_retain();
  v12 = swift_unknownObjectRetain(v5);
  static DispatchQoS.unspecified.getter(v12);
  v0[16] = _swiftEmptyArrayStorage;
  v13 = sub_10000BC84((unint64_t *)&qword_101492BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v14 = sub_100008B04((uint64_t *)&unk_101492FB0);
  v15 = sub_100010D70((unint64_t *)&qword_101492BC0, (uint64_t *)&unk_101492FB0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 16, v14, v15, v4, v13);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v2, v3, v11);
  _Block_release(v11);

  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v2, v21);
  swift_release();
  swift_release();
  v16 = v0[21];
  swift_task_dealloc(v0[24]);
  swift_task_dealloc(v16);
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_10002C350()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;

  if (qword_101490E90 != -1)
    swift_once(&qword_101490E90, sub_100114734);
  v1 = *(_QWORD *)(v0 + 216);
  v2 = type metadata accessor for Logger(0);
  sub_10000E918(v2, (uint64_t)qword_1014D4AC0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 216);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v15 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_getErrorValue(v7, v0 + 112, v0 + 64);
    v10 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
    v12 = v11;
    *(_QWORD *)(v0 + 120) = sub_1000C28FC(v10, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v12);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error unpinning transit line: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 216));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  v13 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10002C55C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t Strong;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  _QWORD v54[3];
  char v55[8];
  uint64_t v56;
  uint64_t v57;
  char v58[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v58, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  v7 = (unint64_t)a2 >> 62;
  if (Strong)
  {
    v8 = (char *)Strong;
    if (v7)
    {
      if (a2 < 0)
        v51 = a2;
      else
        v51 = a2 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a2);
      v9 = _CocoaArrayWrapper.endIndex.getter(v51);
      swift_bridgeObjectRelease(a2);
    }
    else
    {
      v9 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v10 = _swiftEmptyArrayStorage;
    if (v9)
    {
      v57 = (uint64_t)_swiftEmptyArrayStorage;
      sub_100132460(0, v9 & ~(v9 >> 63), 0);
      if (v9 < 0)
      {
        __break(1u);
        return;
      }
      v52 = v8;
      v11 = 0;
      v10 = (_QWORD *)v57;
      do
      {
        if ((a2 & 0xC000000000000001) != 0)
          v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11, a2);
        else
          v12 = *(id *)(a2 + 8 * v11 + 32);
        v13 = v12;
        v14 = dispatch thunk of CollectionTransitItem.muid.getter();

        v57 = (uint64_t)v10;
        v16 = v10[2];
        v15 = v10[3];
        if (v16 >= v15 >> 1)
        {
          sub_100132460(v15 > 1, v16 + 1, 1);
          v10 = (_QWORD *)v57;
        }
        ++v11;
        v10[2] = v16 + 1;
        v10[v16 + 4] = v14;
      }
      while (v9 != v11);
      v8 = v52;
      v7 = (unint64_t)a2 >> 62;
    }
    v17 = sub_100035398((uint64_t)v10);
    swift_bridgeObjectRelease(v10);
    v18 = OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_pinnedLines;
    v19 = *(_QWORD *)&v8[OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_pinnedLines];
    *(_QWORD *)&v8[OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_pinnedLines] = v17;
    swift_bridgeObjectRelease(v19);
    v20 = *(_QWORD *)&v8[v18];
    if (*(_QWORD *)(v20 + 16)
      && (v21 = swift_unknownObjectWeakLoadStrong(&v8[OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_delegate])) != 0)
    {
      v22 = v21;
      v23 = swift_bridgeObjectRetain(v20);
      sub_10017C2EC(v23);

      swift_bridgeObjectRelease(v20);
      swift_unknownObjectRelease(v22);
    }
    else
    {

    }
  }
  v57 = (uint64_t)_swiftEmptyArrayStorage;
  if (v7)
  {
    if (a2 < 0)
      v33 = a2;
    else
      v33 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v24 = _CocoaArrayWrapper.endIndex.getter(v33);
    if (!v24)
      goto LABEL_34;
  }
  else
  {
    v24 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a2);
    if (!v24)
      goto LABEL_34;
  }
  if (v24 < 1)
  {
    __break(1u);
    swift_once(&qword_101490E90, sub_100114734);
    v40 = type metadata accessor for Logger(0);
    sub_10000E918(v40, (uint64_t)qword_1014D4AC0);
    swift_errorRetain(a3);
    v41 = swift_errorRetain(a3);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.error.getter(v42);
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(12, -1);
      v45 = swift_slowAlloc(32, -1);
      v56 = v45;
      *(_DWORD *)v44 = 136315138;
      swift_getErrorValue(a3, v55, v54);
      v46 = Error.localizedDescription.getter(v54[1], v54[2]);
      v48 = v47;
      v53 = sub_1000C28FC(v46, v47, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v44 + 4, v44 + 12);
      swift_bridgeObjectRelease(v48);
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Error unpinning transit line: %s", v44, 0xCu);
      swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v44, -1, -1);

      swift_errorRelease(a3);
    }
    else
    {
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      swift_errorRelease(a3);

    }
    return;
  }
  for (i = 0; i != v24; ++i)
  {
    if ((a2 & 0xC000000000000001) != 0)
      v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a2);
    else
      v27 = *(id *)(a2 + 8 * i + 32);
    v28 = v27;
    v29 = (id)dispatch thunk of CollectionTransitItem.muid.getter();
    if (v29 == objc_msgSend(a3, "muid"))
    {
      v30 = v28;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v30);
      v32 = *(_QWORD *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v31 = *(_QWORD *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v32 >= v31 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
      v26 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, v30);
      specialized Array._endMutation()(v26);
    }

  }
LABEL_34:
  swift_bridgeObjectRelease(a2);
  type metadata accessor for MapsSyncStore(0);
  v35 = (void *)static MapsSyncStore.sharedStore.getter();
  if ((unint64_t)v57 >> 62)
  {
    if (v57 < 0)
      v49 = v57;
    else
      v49 = v57 & 0xFFFFFFFFFFFFFF8;
    v50 = type metadata accessor for MapsSyncObject(0, v34);
    swift_bridgeObjectRetain(v57);
    v38 = _bridgeCocoaArray<A>(_:)(v49, v50);
    swift_bridgeObjectRelease(v57);
  }
  else
  {
    v36 = swift_bridgeObjectRetain(v57);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v36);
    type metadata accessor for MapsSyncObject(0, v37);
    v38 = v57;
  }
  v39 = swift_bridgeObjectRelease(v57);
  dispatch thunk of MapsSyncStore.delete(objects:)(v38, v39);

  swift_bridgeObjectRelease(v38);
}

uint64_t sub_10002CA94(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[2];
  uint64_t v10;

  v8 = a2;
  swift_unknownObjectRetain(a2);
  v3 = sub_100008B04(&qword_101493FE8);
  if (swift_dynamicCast(&v5, &v8, v3, &type metadata for AnyHashable, 6))
  {
    v9[0] = v5;
    v9[1] = v6;
    v10 = v7;
    AnyHashable.hash(into:)(a1);
    return sub_100012C48((uint64_t)v9);
  }
  else
  {
    v7 = 0;
    v5 = 0u;
    v6 = 0u;
    return sub_100010CC4((uint64_t)&v5, &qword_101493FF0);
  }
}

uint64_t sub_10002CB34(uint64_t a1, void *a2, uint64_t a3)
{
  id v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v10[2];
  _OWORD v11[2];
  uint64_t v12;

  v10[0] = a2;
  v10[1] = a3;
  v4 = a2;
  v5 = sub_100008B04(&qword_101494000);
  if (swift_dynamicCast(&v7, v10, v5, &type metadata for AnyHashable, 6))
  {
    v11[0] = v7;
    v11[1] = v8;
    v12 = v9;
    AnyHashable.hash(into:)(a1);
    return sub_100012C48((uint64_t)v11);
  }
  else
  {
    v9 = 0;
    v7 = 0u;
    v8 = 0u;
    return sub_100010CC4((uint64_t)&v7, &qword_101493FF0);
  }
}

uint64_t sub_10002CBD0()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_10002CBF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100027934(a1, a2, v2);
}

uint64_t sub_10002CBFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10002CC0C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10002CC14@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100E25388);
  v5 = swift_getKeyPath(&unk_100E253B0);
  static Published.subscript.getter(a2, v3, KeyPath, v5);
  swift_release(KeyPath);
  return swift_release(v5);
}

uint64_t sub_10002CC7C(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  void *v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v16;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v16 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v16 - v9, a1, v4);
  v12 = *a2;
  KeyPath = swift_getKeyPath(&unk_100E25388);
  v14 = swift_getKeyPath(&unk_100E253B0);
  v11(v8, (uint64_t)v10, v4);
  static Published.subscript.setter(v8, v12, KeyPath, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
}

uint64_t sub_10002CD84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100027FC0(a1, a2, v2);
}

uint64_t sub_10002CD8C()
{
  return sub_100036AB0((void (*)(_QWORD))&_swift_errorRelease, (void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

void sub_10002CDA0()
{
  uint64_t *v0;

  sub_1000281F0(v0[2], v0[3], v0[4]);
}

uint64_t sub_10002CDAC(uint64_t *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;

  v3 = v2;
  v6 = *v2;
  v7 = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), a2);
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v15 = *v3;
    *v3 = 0x8000000000000000;
    sub_100033894(a2, v9, isUniquelyReferenced_nonNull_native);
    v14 = *v3;
    *v3 = v15;
    swift_bridgeObjectRelease(v14);
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(_QWORD *)(v10 + 8 * v9) != a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v10 + 8 * v9) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_10002CEA4(uint64_t *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _OWORD v26[2];
  uint64_t v27;

  v5 = *v2;
  Hasher.init(_seed:)(v26, *(_QWORD *)(*v2 + 40));
  swift_bridgeObjectRetain(v5);
  sub_10002CA94((uint64_t)v26, a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
    swift_bridgeObjectRelease(v5);
    goto LABEL_13;
  }
  v18 = a1;
  v9 = ~v7;
  do
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v8);
    *(_QWORD *)&v19 = v10;
    swift_unknownObjectRetain_n(v10, 2);
    v11 = sub_100008B04(&qword_101493FE8);
    if (!swift_dynamicCast(&v23, &v19, v11, &type metadata for AnyHashable, 6))
    {
      v25 = 0;
      v23 = 0u;
      v24 = 0u;
      sub_100010CC4((uint64_t)&v23, &qword_101493FF0);
LABEL_4:
      swift_unknownObjectRelease(v10);
      goto LABEL_5;
    }
    v26[0] = v23;
    v26[1] = v24;
    v27 = v25;
    v22 = a2;
    swift_unknownObjectRetain(a2);
    if ((swift_dynamicCast(&v19, &v22, v11, &type metadata for AnyHashable, 6) & 1) == 0)
    {
      v21 = 0;
      v19 = 0u;
      v20 = 0u;
      sub_100010CC4((uint64_t)&v19, &qword_101493FF0);
      sub_100012C48((uint64_t)v26);
      goto LABEL_4;
    }
    v23 = v19;
    v24 = v20;
    v25 = v21;
    v12 = static AnyHashable.== infix(_:_:)(v26, &v23);
    sub_100012C48((uint64_t)&v23);
    sub_100012C48((uint64_t)v26);
    swift_unknownObjectRelease(v10);
    if ((v12 & 1) != 0)
    {
      swift_unknownObjectRelease(a2);
      swift_bridgeObjectRelease(v5);
      v16 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v8);
      *v18 = v16;
      swift_unknownObjectRetain(v16);
      return 0;
    }
LABEL_5:
    v8 = (v8 + 1) & v9;
  }
  while (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  swift_bridgeObjectRelease(v5);
  a1 = v18;
LABEL_13:
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  *(_QWORD *)&v26[0] = *v2;
  *v2 = 0x8000000000000000;
  v14 = swift_unknownObjectRetain(a2);
  sub_1000339B4(v14, v8, isUniquelyReferenced_nonNull_native);
  v15 = *v2;
  *v2 = *(_QWORD *)&v26[0];
  swift_bridgeObjectRelease(v15);
  *a1 = a2;
  return 1;
}

uint64_t sub_10002D118(_QWORD *a1, void *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  char v15;
  char isUniquelyReferenced_nonNull_native;
  id v17;
  uint64_t v18;
  __int128 v19;
  id v20;
  _OWORD *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _QWORD v27[2];
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _OWORD v31[2];
  uint64_t v32;

  v7 = *v3;
  Hasher.init(_seed:)(v31, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v7);
  v23 = a3;
  sub_10002CB34((uint64_t)v31, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
  {
    swift_bridgeObjectRelease(v7);
    goto LABEL_13;
  }
  v22 = a1;
  v11 = ~v9;
  do
  {
    v24 = *(_OWORD *)(*(_QWORD *)(v7 + 48) + 16 * v10);
    v12 = (id)v24;
    v13 = sub_100008B04(&qword_101494000);
    if (!swift_dynamicCast(&v28, &v24, v13, &type metadata for AnyHashable, 6))
    {
      v30 = 0;
      v28 = 0u;
      v29 = 0u;
      sub_100010CC4((uint64_t)&v28, &qword_101493FF0);
LABEL_4:

      goto LABEL_5;
    }
    v31[0] = v28;
    v31[1] = v29;
    v32 = v30;
    v27[0] = a2;
    v27[1] = v23;
    v14 = a2;
    if ((swift_dynamicCast(&v24, v27, v13, &type metadata for AnyHashable, 6) & 1) == 0)
    {
      v26 = 0;
      v24 = 0u;
      v25 = 0u;
      sub_100010CC4((uint64_t)&v24, &qword_101493FF0);
      sub_100012C48((uint64_t)v31);
      goto LABEL_4;
    }
    v28 = v24;
    v29 = v25;
    v30 = v26;
    v15 = static AnyHashable.== infix(_:_:)(v31, &v28);
    sub_100012C48((uint64_t)&v28);
    sub_100012C48((uint64_t)v31);

    if ((v15 & 1) != 0)
    {

      swift_bridgeObjectRelease(v7);
      v19 = *(_OWORD *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      *v22 = v19;
      v20 = (id)v19;
      return 0;
    }
LABEL_5:
    v10 = (v10 + 1) & v11;
  }
  while (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  swift_bridgeObjectRelease(v7);
  a1 = v22;
LABEL_13:
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  *(_QWORD *)&v31[0] = *v3;
  *v3 = 0x8000000000000000;
  v17 = a2;
  sub_100033C10(v17, v23, v10, isUniquelyReferenced_nonNull_native);
  v18 = *v3;
  *v3 = *(_QWORD *)&v31[0];
  swift_bridgeObjectRelease(v18);
  *a1 = v17;
  a1[1] = v23;
  return 1;
}

uint64_t sub_10002D3A0(Swift::Int *a1, void *a2)
{
  return sub_10002E120(a1, a2, (unint64_t *)&unk_1014994F0, VGChargingNetwork_ptr, (uint64_t *)&unk_101494050);
}

uint64_t sub_10002D3BC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  __int128 v15;
  uint64_t v17;
  _BYTE v18[40];

  v3 = v2;
  v6 = *v2;
  v7 = *(_QWORD *)(*v2 + 40);
  swift_bridgeObjectRetain(v6);
  v8 = AnyHashable._rawHashValue(seed:)(v7);
  v9 = -1 << *(_BYTE *)(v6 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    while (1)
    {
      sub_100035DEC(*(_QWORD *)(v6 + 48) + 40 * v10, (uint64_t)v18);
      v12 = static AnyHashable.== infix(_:_:)(v18, a2);
      sub_100012C48((uint64_t)v18);
      if ((v12 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        goto LABEL_5;
    }
    swift_bridgeObjectRelease(v6);
    sub_100012C48(a2);
    sub_100035DEC(*(_QWORD *)(*v3 + 48) + 40 * v10, a1);
    return 0;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease(v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    sub_100035DEC(a2, (uint64_t)v18);
    v17 = *v3;
    *v3 = 0x8000000000000000;
    sub_100034000((uint64_t)v18, v10, isUniquelyReferenced_nonNull_native);
    v14 = *v3;
    *v3 = v17;
    swift_bridgeObjectRelease(v14);
    v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    return 1;
  }
}

uint64_t sub_10002D534(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD v24[9];

  v7 = *v3;
  Hasher.init(_seed:)(v24, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_100034168(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v23 = *v3;
  *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_10002D6E0(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  _QWORD *v11;
  uint64_t __s1;

  v6 = *v3;
  Hasher.init(_seed:)(&__s1, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v6);
  Data.hash(into:)(&__s1, a2, a3);
  v7 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v6 + 32));
  if (((*(_QWORD *)(v6 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
    __asm { BR              X8 }
  swift_bridgeObjectRelease(v6);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v11);
  __s1 = *v11;
  *v11 = 0x8000000000000000;
  sub_100036B08(a2, a3);
  sub_100034300(a2, a3, v7, isUniquelyReferenced_nonNull_native);
  v9 = *v11;
  *v11 = __s1;
  swift_bridgeObjectRelease(v9);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_10002E104(Swift::Int *a1, void *a2)
{
  return sub_10002E120(a1, a2, &qword_10149A2F0, MKMapItemIdentifier_ptr, &qword_1014940C0);
}

uint64_t sub_10002E120(Swift::Int *a1, void *a2, unint64_t *a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v9;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  Swift::Int v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  char v23;
  uint64_t v24;
  id v25;
  char v26;
  void *v27;
  id v28;
  Swift::Int v29;
  unint64_t v30;
  uint64_t v31;
  id v32;
  char isUniquelyReferenced_nonNull_native;
  id v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v42;
  Swift::Int v43;

  v9 = v5;
  v12 = *v5;
  if ((*v5 & 0xC000000000000001) != 0)
  {
    if (v12 < 0)
      v13 = *v5;
    else
      v13 = v12 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v5);
    v14 = a2;
    v15 = __CocoaSet.member(for:)();

    if (v15)
    {
      swift_bridgeObjectRelease(v12);

      v42 = v15;
      v16 = sub_10000E4BC(0, a3, a4);
      swift_unknownObjectRetain(v15);
      swift_dynamicCast(&v43, &v42, (char *)&type metadata for Swift.AnyObject + 8, v16, 7);
      *a1 = v43;
      swift_unknownObjectRelease(v15);
      return 0;
    }
    result = __CocoaSet.count.getter(v13);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v29 = sub_10002E890(v13, result + 1, a5, a3, a4);
    v43 = v29;
    v30 = *(_QWORD *)(v29 + 16);
    if (*(_QWORD *)(v29 + 24) <= v30)
    {
      v36 = v30 + 1;
      v37 = v14;
      sub_1000307E8(v36, a5);
      v31 = v43;
    }
    else
    {
      v31 = v29;
      v32 = v14;
    }
    sub_100030A80((uint64_t)v14, v31);
    v38 = *v9;
    *v9 = v31;
    swift_bridgeObjectRelease(v38);
    *a1 = (Swift::Int)v14;
  }
  else
  {
    v18 = *(_QWORD *)(v12 + 40);
    swift_bridgeObjectRetain(v12);
    v19 = NSObject._rawHashValue(seed:)(v18);
    v20 = -1 << *(_BYTE *)(v12 + 32);
    v21 = v19 & ~v20;
    v39 = a4;
    if (((*(_QWORD *)(v12 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
    {
      sub_10000E4BC(0, a3, a4);
      v22 = *(id *)(*(_QWORD *)(v12 + 48) + 8 * v21);
      v23 = static NSObject.== infix(_:_:)(v22, a2);

      if ((v23 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease(v12);
        v27 = *(void **)(*(_QWORD *)(*v9 + 48) + 8 * v21);
        *a1 = (Swift::Int)v27;
        v28 = v27;
        return 0;
      }
      v24 = ~v20;
      while (1)
      {
        v21 = (v21 + 1) & v24;
        if (((*(_QWORD *)(v12 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          break;
        v25 = *(id *)(*(_QWORD *)(v12 + 48) + 8 * v21);
        v26 = static NSObject.== infix(_:_:)(v25, a2);

        if ((v26 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease(v12);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v9);
    v43 = *v9;
    *v9 = 0x8000000000000000;
    v34 = a2;
    sub_100033E70((uint64_t)v34, v21, isUniquelyReferenced_nonNull_native, a5, a3, v39);
    v35 = *v9;
    *v9 = v43;
    swift_bridgeObjectRelease(v35);
    *a1 = (Swift::Int)v34;
  }
  return 1;
}

uint64_t sub_10002E3E8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return result;
  v2 = result;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain(result);
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v7)
      return swift_release(v2);
    v12 = *(_QWORD *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v7)
        return swift_release(v2);
      v12 = *(_QWORD *)(v3 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v7)
          return swift_release(v2);
        v12 = *(_QWORD *)(v3 + 8 * v8);
        if (!v12)
        {
          v8 = v11 + 3;
          if (v11 + 3 >= v7)
            return swift_release(v2);
          v12 = *(_QWORD *)(v3 + 8 * v8);
          if (!v12)
            break;
        }
      }
    }
LABEL_23:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_6:
    result = sub_10002F37C(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v10));
  }
  v13 = v11 + 4;
  if (v13 >= v7)
    return swift_release(v2);
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v7)
      return swift_release(v2);
    v12 = *(_QWORD *)(v3 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
  return result;
}

void sub_10002E548(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  _QWORD v31[5];

  v3 = *v1;
  if ((*v1 & 0xC000000000000001) == 0)
  {
    if (!*(_QWORD *)(v3 + 16))
      return;
LABEL_8:
    if ((a1 & 0xC000000000000001) != 0)
    {
      if (a1 < 0)
        v5 = a1;
      else
        v5 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v6 = __CocoaSet.makeIterator()(v5);
      v7 = sub_10000E4BC(0, (unint64_t *)&unk_10149BA50, &off_101196DA8);
      v8 = sub_100035DAC((unint64_t *)&qword_101494060, (unint64_t *)&unk_10149BA50, &off_101196DA8);
      v9 = Set.Iterator.init(_cocoa:)(v31, v6, v7, v8);
      a1 = v31[0];
      v28 = v31[1];
      v10 = v31[2];
      v11 = v31[3];
      v12 = v31[4];
    }
    else
    {
      v13 = -1 << *(_BYTE *)(a1 + 32);
      v28 = a1 + 56;
      v10 = ~v13;
      v14 = -v13;
      if (v14 < 64)
        v15 = ~(-1 << v14);
      else
        v15 = -1;
      v12 = v15 & *(_QWORD *)(a1 + 56);
      swift_bridgeObjectRetain(a1);
      v11 = 0;
    }
    v27 = (unint64_t)(v10 + 64) >> 6;
    if (a1 < 0)
      goto LABEL_20;
    while (1)
    {
      if (v12)
      {
        v16 = (v12 - 1) & v12;
        v17 = __clz(__rbit64(v12)) | (v11 << 6);
        v18 = v11;
      }
      else
      {
        v23 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
          __break(1u);
          return;
        }
        if (v23 >= v27)
          goto LABEL_42;
        v24 = *(_QWORD *)(v28 + 8 * v23);
        v18 = v11 + 1;
        if (!v24)
        {
          v18 = v11 + 2;
          if (v11 + 2 >= v27)
            goto LABEL_42;
          v24 = *(_QWORD *)(v28 + 8 * v18);
          if (!v24)
          {
            v18 = v11 + 3;
            if (v11 + 3 >= v27)
              goto LABEL_42;
            v24 = *(_QWORD *)(v28 + 8 * v18);
            if (!v24)
            {
              v18 = v11 + 4;
              if (v11 + 4 >= v27)
                goto LABEL_42;
              v24 = *(_QWORD *)(v28 + 8 * v18);
              if (!v24)
              {
                v18 = v11 + 5;
                if (v11 + 5 >= v27)
                  goto LABEL_42;
                v24 = *(_QWORD *)(v28 + 8 * v18);
                if (!v24)
                {
                  v25 = v11 + 6;
                  while (v27 != v25)
                  {
                    v24 = *(_QWORD *)(v28 + 8 * v25++);
                    if (v24)
                    {
                      v18 = v25 - 1;
                      goto LABEL_38;
                    }
                  }
LABEL_42:
                  sub_100035E28(a1);
                  return;
                }
              }
            }
          }
        }
LABEL_38:
        v16 = (v24 - 1) & v24;
        v17 = __clz(__rbit64(v24)) + (v18 << 6);
      }
      v22 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v17);
      if (!v22)
        goto LABEL_42;
      while (1)
      {
        v26 = (void *)sub_10002F4A0(v22, (unint64_t *)&unk_10149BA50, &off_101196DA8, &qword_101494068);

        v11 = v18;
        v12 = v16;
        if ((a1 & 0x8000000000000000) == 0)
          break;
LABEL_20:
        v19 = __CocoaSet.Iterator.next()(v9);
        if (v19)
        {
          v20 = v19;
          v29 = v19;
          v21 = sub_10000E4BC(0, (unint64_t *)&unk_10149BA50, &off_101196DA8);
          swift_unknownObjectRetain(v20);
          swift_dynamicCast(&v30, &v29, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
          v22 = v30;
          swift_unknownObjectRelease(v20);
          v18 = v11;
          v16 = v12;
          if (v22)
            continue;
        }
        goto LABEL_42;
      }
    }
  }
  if (v3 < 0)
    v4 = *v1;
  else
    v4 = v3 & 0xFFFFFFFFFFFFFF8;
  if (__CocoaSet.count.getter(v4))
    goto LABEL_8;
}

Swift::Int sub_10002E874(uint64_t a1, uint64_t a2)
{
  return sub_10002E890(a1, a2, &qword_101494068, (unint64_t *)&unk_10149BA50, &off_101196DA8);
}

Swift::Int sub_10002E890(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int result;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (a2)
  {
    sub_100008B04(a3);
    v10 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v28 = v10;
    __CocoaSet.makeIterator()(a1);
    v11 = __CocoaSet.Iterator.next()();
    if (v11)
    {
      v12 = v11;
      v13 = sub_10000E4BC(0, a4, a5);
      do
      {
        v26 = v12;
        swift_dynamicCast(&v27, &v26, (char *)&type metadata for Swift.AnyObject + 8, v13, 7);
        v10 = v28;
        v21 = *(_QWORD *)(v28 + 16);
        if (*(_QWORD *)(v28 + 24) <= v21)
        {
          sub_1000307E8(v21 + 1, a3);
          v10 = v28;
        }
        v14 = v27;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v10 + 40));
        v16 = v10 + 56;
        v17 = -1 << *(_BYTE *)(v10 + 32);
        v18 = result & ~v17;
        v19 = v18 >> 6;
        if (((-1 << v18) & ~*(_QWORD *)(v10 + 56 + 8 * (v18 >> 6))) != 0)
        {
          v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v10 + 56 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v22 = 0;
          v23 = (unint64_t)(63 - v17) >> 6;
          do
          {
            if (++v19 == v23 && (v22 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v24 = v19 == v23;
            if (v19 == v23)
              v19 = 0;
            v22 |= v24;
            v25 = *(_QWORD *)(v16 + 8 * v19);
          }
          while (v25 == -1);
          v20 = __clz(__rbit64(~v25)) + (v19 << 6);
        }
        *(_QWORD *)(v16 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
        *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v20) = v14;
        ++*(_QWORD *)(v10 + 16);
        v12 = __CocoaSet.Iterator.next()();
      }
      while (v12);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v10;
}

void *sub_10002EA90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t isStackAllocationSafe;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v33[2];
  uint64_t v34[5];

  v2 = a2;
  if (*(_QWORD *)(a2 + 16))
  {
    v4 = 0;
    v6 = a1 + 56;
    v5 = *(_QWORD *)(a1 + 56);
    v7 = -1 << *(_BYTE *)(a1 + 32);
    v33[0] = ~v7;
    if (-v7 < 64)
      v8 = ~(-1 << -(char)v7);
    else
      v8 = -1;
    v9 = v8 & v5;
    v10 = (unint64_t)(63 - v7) >> 6;
    v11 = a2 + 56;
    while (1)
    {
      do
      {
        if (v9)
        {
          v12 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
          v13 = v12 | (v4 << 6);
        }
        else
        {
          v14 = v4 + 1;
          if (__OFADD__(v4, 1))
          {
            __break(1u);
            goto LABEL_36;
          }
          if (v14 >= v10)
            goto LABEL_33;
          v15 = *(_QWORD *)(v6 + 8 * v14);
          v16 = v4 + 1;
          if (!v15)
          {
            v16 = v4 + 2;
            if (v4 + 2 >= v10)
              goto LABEL_33;
            v15 = *(_QWORD *)(v6 + 8 * v16);
            if (!v15)
            {
              v16 = v4 + 3;
              if (v4 + 3 >= v10)
                goto LABEL_33;
              v15 = *(_QWORD *)(v6 + 8 * v16);
              if (!v15)
              {
                v16 = v4 + 4;
                if (v4 + 4 >= v10)
                  goto LABEL_33;
                v15 = *(_QWORD *)(v6 + 8 * v16);
                if (!v15)
                {
                  v17 = v4 + 5;
                  if (v4 + 5 >= v10)
                  {
LABEL_33:
                    v31 = swift_bridgeObjectRetain(a1);
                    sub_100035E28(v31);
                    return (void *)v2;
                  }
                  v15 = *(_QWORD *)(v6 + 8 * v17);
                  if (!v15)
                  {
                    while (1)
                    {
                      v16 = v17 + 1;
                      if (__OFADD__(v17, 1))
                        break;
                      if (v16 >= v10)
                        goto LABEL_33;
                      v15 = *(_QWORD *)(v6 + 8 * v16);
                      ++v17;
                      if (v15)
                        goto LABEL_23;
                    }
LABEL_36:
                    __break(1u);
                  }
                  v16 = v4 + 5;
                }
              }
            }
          }
LABEL_23:
          v9 = (v15 - 1) & v15;
          v13 = __clz(__rbit64(v15)) + (v16 << 6);
          v4 = v16;
        }
        v18 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v13);
        v19 = static Hasher._hash(seed:_:)(*(_QWORD *)(v2 + 40), v18);
        v20 = -1 << *(_BYTE *)(v2 + 32);
        v21 = v19 & ~v20;
      }
      while (((*(_QWORD *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0);
      v22 = *(_QWORD *)(v2 + 48);
      if (*(_QWORD *)(v22 + 8 * v21) == v18)
        break;
      while (1)
      {
        v21 = (v21 + 1) & ~v20;
        if (((*(_QWORD *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          break;
        if (*(_QWORD *)(v22 + 8 * v21) == v18)
          goto LABEL_28;
      }
    }
LABEL_28:
    v34[0] = a1;
    v34[1] = v6;
    v34[2] = v33[0];
    v34[3] = v4;
    v34[4] = v9;
    v23 = (unint64_t)(63 - v20) >> 6;
    v24 = 8 * v23;
    isStackAllocationSafe = swift_bridgeObjectRetain(a1);
    if (v23 < 0x81
      || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v24, 8), (_DWORD)isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      v27 = (char *)v33 - v26;
      memcpy((char *)v33 - v26, (const void *)(v2 + 56), v24);
      v28 = sub_100030B00((uint64_t)v27, v23, v2, v21, v34);
      swift_release(v2);
      sub_100035E28(v34[0]);
      return (void *)v28;
    }
    else
    {
      v29 = (void *)swift_slowAlloc(v24, -1);
      memcpy(v29, (const void *)(v2 + 56), v24);
      v30 = sub_100030B00((uint64_t)v29, v23, v2, v21, v34);
      swift_release(v2);
      sub_100035E28(v34[0]);
      swift_slowDealloc(v29, -1, -1);
      return (void *)v30;
    }
  }
  else
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }
}

void *sub_10002EE2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  id v27;
  char v28;
  uint64_t v29;
  id v30;
  char v31;
  int64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  uint64_t isStackAllocationSafe;
  char v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  size_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  unint64_t v54;
  _QWORD v55[5];

  v2 = a2;
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }
  v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = __CocoaSet.makeIterator()(v4);
    v6 = sub_10000E4BC(0, (unint64_t *)&unk_10149BA50, &off_101196DA8);
    v7 = sub_100035DAC((unint64_t *)&qword_101494060, (unint64_t *)&unk_10149BA50, &off_101196DA8);
    v8 = Set.Iterator.init(_cocoa:)(v55, v5, v6, v7);
    v3 = v55[0];
    v9 = v55[1];
    v11 = v55[2];
    v10 = v55[3];
    v12 = v55[4];
  }
  else
  {
    v13 = -1 << *(_BYTE *)(a1 + 32);
    v9 = a1 + 56;
    v11 = ~v13;
    v14 = -v13;
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v12 = v15 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v10 = 0;
  }
  v50 = v3;
  v51 = v9;
  v52 = v11;
  v53 = v10;
  v54 = v12;
  v16 = v2 + 56;
  while (1)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v12)
      {
        v17 = (v12 - 1) & v12;
        v18 = __clz(__rbit64(v12)) | (v10 << 6);
LABEL_17:
        v19 = *(void **)(*(_QWORD *)(v3 + 48) + 8 * v18);
        v20 = v19;
        goto LABEL_18;
      }
      v32 = v10 + 1;
      if (__OFADD__(v10, 1))
        __break(1u);
      v33 = (unint64_t)(v11 + 64) >> 6;
      if (v32 >= v33)
      {
        v19 = 0;
        v17 = 0;
        goto LABEL_18;
      }
      v34 = *(_QWORD *)(v51 + 8 * v32);
      if (v34)
      {
LABEL_31:
        v17 = (v34 - 1) & v34;
        v18 = __clz(__rbit64(v34)) + (v32 << 6);
        v10 = v32;
        goto LABEL_17;
      }
      v35 = v10 + 2;
      if (v10 + 2 >= v33)
        goto LABEL_47;
      v34 = *(_QWORD *)(v51 + 8 * v35);
      if (v34)
      {
LABEL_35:
        v32 = v35;
        goto LABEL_31;
      }
      if (v10 + 3 < v33)
      {
        v34 = *(_QWORD *)(v51 + 8 * (v10 + 3));
        if (v34)
        {
          v32 = v10 + 3;
          goto LABEL_31;
        }
        v35 = v10 + 4;
        if (v10 + 4 >= v33)
        {
          v19 = 0;
          v17 = 0;
          v10 += 3;
LABEL_18:
          v53 = v10;
          v54 = v17;
          if (!v19)
            goto LABEL_56;
          goto LABEL_22;
        }
        v34 = *(_QWORD *)(v51 + 8 * v35);
        if (v34)
          goto LABEL_35;
        v32 = v10 + 5;
        if (v10 + 5 < v33)
        {
          v34 = *(_QWORD *)(v51 + 8 * v32);
          if (v34)
            goto LABEL_31;
          v32 = v33 - 1;
          v36 = v10 + 6;
          while (v33 != v36)
          {
            v34 = *(_QWORD *)(v51 + 8 * v36++);
            if (v34)
            {
              v32 = v36 - 1;
              goto LABEL_31;
            }
          }
LABEL_47:
          v19 = 0;
          v17 = 0;
          v10 = v32;
          goto LABEL_18;
        }
      }
      v19 = 0;
      v17 = 0;
      v10 = v35;
      goto LABEL_18;
    }
    v21 = __CocoaSet.Iterator.next()(v8);
    if (!v21)
      goto LABEL_57;
    v22 = v21;
    v48 = v21;
    v23 = sub_10000E4BC(0, (unint64_t *)&unk_10149BA50, &off_101196DA8);
    swift_unknownObjectRetain(v22);
    swift_dynamicCast(&v49, &v48, (char *)&type metadata for Swift.AnyObject + 8, v23, 7);
    v19 = v49;
    swift_unknownObjectRelease(v22);
    if (!v19)
    {
LABEL_56:
      v3 = v50;
LABEL_57:
      sub_100035E28(v3);
      return (void *)v2;
    }
LABEL_22:
    v24 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
    v25 = -1 << *(_BYTE *)(v2 + 32);
    v26 = v24 & ~v25;
    if (((*(_QWORD *)(v16 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8)) >> v26) & 1) == 0)
      goto LABEL_13;
    sub_10000E4BC(0, (unint64_t *)&unk_10149BA50, &off_101196DA8);
    v27 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v26);
    v28 = static NSObject.== infix(_:_:)(v27, v19);

    if ((v28 & 1) != 0)
      break;
    v29 = ~v25;
    while (1)
    {
      v26 = (v26 + 1) & v29;
      if (((*(_QWORD *)(v16 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8)) >> v26) & 1) == 0)
        break;
      v30 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v26);
      v31 = static NSObject.== infix(_:_:)(v30, v19);

      if ((v31 & 1) != 0)
        goto LABEL_50;
    }
LABEL_13:

    v3 = v50;
    v11 = v52;
    v10 = v53;
    v12 = v54;
  }
LABEL_50:

  v38 = *(_BYTE *)(v2 + 32);
  v39 = v38 & 0x3F;
  v40 = (1 << v38) + 63;
  v41 = v40 >> 6;
  v42 = 8 * (v40 >> 6);
  if (v39 < 0xE
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v40 >> 6), 8), (_DWORD)isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v48 - ((v42 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v42);
    sub_100030D40((unint64_t *)((char *)&v48 - ((v42 + 15) & 0x3FFFFFFFFFFFFFF0)), v41, v2, v26, &v50);
    v44 = v43;
    swift_release();
    sub_100035E28(v50);
  }
  else
  {
    v45 = (void *)swift_slowAlloc(v42, -1);
    memcpy(v45, (const void *)(v2 + 56), v42);
    sub_100030D40((unint64_t *)v45, v41, v2, v26, &v50);
    v44 = v46;
    swift_release();
    sub_100035E28(v50);
    swift_slowDealloc(v45, -1, -1);
  }
  return (void *)v44;
}

uint64_t sub_10002F37C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v2 = v1;
  v4 = *v2;
  v5 = static Hasher._hash(seed:_:)(*(_QWORD *)(*v2 + 40), a1);
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = v5 & ~v6;
  if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(v4 + 48);
  if (*(_QWORD *)(v8 + 8 * v7) != a1)
  {
    v9 = ~v6;
    do
    {
      v7 = (v7 + 1) & v9;
      if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
        return 0;
    }
    while (*(_QWORD *)(v8 + 8 * v7) != a1);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v11 = *v2;
  v15 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000316FC();
    v11 = v15;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v7);
  sub_100033570(v7);
  v13 = *v2;
  *v2 = v15;
  swift_bridgeObjectRelease(v13);
  return v12;
}

uint64_t sub_10002F484(void *a1)
{
  return sub_10002F4A0(a1, (unint64_t *)&unk_1014994F0, VGChargingNetwork_ptr, (uint64_t *)&unk_101494050);
}

uint64_t sub_10002F4A0(void *a1, unint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  _QWORD *v4;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  Swift::Int v15;
  Swift::Int v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  char v20;
  uint64_t v21;
  id v22;
  char v23;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;

  v8 = v4;
  v10 = *v4;
  if ((*v4 & 0xC000000000000001) != 0)
  {
    if (v10 < 0)
      v11 = *v4;
    else
      v11 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v12 = a1;
    v13 = __CocoaSet.contains(_:)();

    if ((v13 & 1) != 0)
    {
      v14 = sub_100031554(v11, (uint64_t)v12, a4, a2, a3);
      swift_bridgeObjectRelease(v10);
      return v14;
    }
LABEL_15:
    swift_bridgeObjectRelease(v10);
    return 0;
  }
  v15 = *(_QWORD *)(v10 + 40);
  swift_bridgeObjectRetain(v10);
  v16 = NSObject._rawHashValue(seed:)(v15);
  v17 = -1 << *(_BYTE *)(v10 + 32);
  v18 = v16 & ~v17;
  if (((*(_QWORD *)(v10 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
    goto LABEL_15;
  sub_10000E4BC(0, a2, a3);
  v19 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * v18);
  v20 = static NSObject.== infix(_:_:)(v19, a1);

  if ((v20 & 1) == 0)
  {
    v21 = ~v17;
    do
    {
      v18 = (v18 + 1) & v21;
      if (((*(_QWORD *)(v10 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
        goto LABEL_15;
      v22 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * v18);
      v23 = static NSObject.== infix(_:_:)(v22, a1);

    }
    while ((v23 & 1) == 0);
  }
  swift_bridgeObjectRelease(v10);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
  v25 = *v8;
  v28 = *v8;
  *v8 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100032110(a4);
    v25 = v28;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(v25 + 48) + 8 * v18);
  sub_1000336F4(v18);
  v26 = *v8;
  *v8 = v28;
  swift_bridgeObjectRelease(v26);
  return v14;
}

uint64_t sub_10002F688(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100008B04(&qword_101493FD8);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = result;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 0;
    v8 = (uint64_t *)(v3 + 56);
    v9 = 1 << *(_BYTE *)(v3 + 32);
    v28 = -1 << v9;
    v29 = v2;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v3 + 56);
    v30 = 1 << *(_BYTE *)(v3 + 32);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v17 >= v12)
          goto LABEL_36;
        v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_36;
          v18 = v8[v7];
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v12)
              goto LABEL_36;
            v18 = v8[v7];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                if (v30 >= 64)
                  bzero((void *)(v3 + 56), 8 * v12);
                else
                  *v8 = v28;
                v2 = v29;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v7 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v7 >= v12)
                    goto LABEL_36;
                  v18 = v8[v7];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v7 = v19;
            }
          }
        }
LABEL_26:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), v20);
      v21 = -1 << *(_BYTE *)(v6 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v23);
        }
        while (v27 == -1);
        v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

void sub_10002F908(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD v35[2];
  uint64_t v36;
  _QWORD v37[10];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100008B04(&qword_101493FF8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v8 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v9 = ~(-1 << v7);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v3 + 56);
    v11 = (unint64_t)(v7 + 63) >> 6;
    v12 = v5 + 56;
    swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v15 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v16 = v15 | (v13 << 6);
      }
      else
      {
        v17 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return;
        }
        if (v17 >= v11)
          goto LABEL_39;
        v18 = v8[v17];
        ++v13;
        if (!v18)
        {
          v13 = v17 + 1;
          if (v17 + 1 >= v11)
            goto LABEL_39;
          v18 = v8[v13];
          if (!v18)
          {
            v13 = v17 + 2;
            if (v17 + 2 >= v11)
              goto LABEL_39;
            v18 = v8[v13];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v11)
              {
LABEL_39:
                swift_release();
                v30 = 1 << *(_BYTE *)(v3 + 32);
                if (v30 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v30;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v13 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_45;
                  if (v13 >= v11)
                    goto LABEL_39;
                  v18 = v8[v13];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v13 = v19;
            }
          }
        }
LABEL_26:
        v10 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v13 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
      Hasher.init(_seed:)(v37, *(_QWORD *)(v6 + 40));
      v34 = v20;
      swift_unknownObjectRetain(v20);
      v21 = sub_100008B04(&qword_101493FE8);
      if (swift_dynamicCast(&v31, &v34, v21, &type metadata for AnyHashable, 6))
      {
        v35[0] = v31;
        v35[1] = v32;
        v36 = v33;
        AnyHashable.hash(into:)(v37);
        sub_100012C48((uint64_t)v35);
      }
      else
      {
        v33 = 0;
        v31 = 0u;
        v32 = 0u;
        sub_100010CC4((uint64_t)&v31, &qword_101493FF0);
      }
      v22 = Hasher._finalize()();
      v23 = -1 << *(_BYTE *)(v6 + 32);
      v24 = v22 & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v12 + 8 * v25);
        }
        while (v29 == -1);
        v14 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release();
  *v2 = v6;
}

void sub_10002FC30(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  id v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  _OWORD v37[2];
  uint64_t v38;
  _QWORD v39[10];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100008B04(&qword_101494018);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v31 = v2;
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v8 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v9 = ~(-1 << v7);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v3 + 56);
    v11 = (unint64_t)(v7 + 63) >> 6;
    v12 = v5 + 56;
    swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v15 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v16 = v15 | (v13 << 6);
      }
      else
      {
        v17 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return;
        }
        if (v17 >= v11)
          goto LABEL_39;
        v18 = v8[v17];
        ++v13;
        if (!v18)
        {
          v13 = v17 + 1;
          if (v17 + 1 >= v11)
            goto LABEL_39;
          v18 = v8[v13];
          if (!v18)
          {
            v13 = v17 + 2;
            if (v17 + 2 >= v11)
              goto LABEL_39;
            v18 = v8[v13];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v11)
              {
LABEL_39:
                swift_release();
                v2 = v31;
                v30 = 1 << *(_BYTE *)(v3 + 32);
                if (v30 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v30;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v13 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_45;
                  if (v13 >= v11)
                    goto LABEL_39;
                  v18 = v8[v13];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v13 = v19;
            }
          }
        }
LABEL_26:
        v10 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v13 << 6);
      }
      v32 = *(_OWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
      Hasher.init(_seed:)(v39, *(_QWORD *)(v6 + 40));
      v36 = v32;
      v20 = (id)v32;
      v21 = sub_100008B04(&qword_101494000);
      if (swift_dynamicCast(&v33, &v36, v21, &type metadata for AnyHashable, 6))
      {
        v37[0] = v33;
        v37[1] = v34;
        v38 = v35;
        AnyHashable.hash(into:)(v39);
        sub_100012C48((uint64_t)v37);
      }
      else
      {
        v35 = 0;
        v33 = 0u;
        v34 = 0u;
        sub_100010CC4((uint64_t)&v33, &qword_101493FF0);
      }
      v22 = Hasher._finalize()();
      v23 = -1 << *(_BYTE *)(v6 + 32);
      v24 = v22 & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v12 + 8 * v25);
        }
        while (v29 == -1);
        v14 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_OWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14) = v32;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release();
  *v2 = v6;
}

void sub_10002FF68(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100008B04((uint64_t *)&unk_101494040);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v31 = v2;
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v8 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v9 = ~(-1 << v7);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v3 + 56);
    v11 = (unint64_t)(v7 + 63) >> 6;
    v12 = v5 + 56;
    swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v18 >= v11)
          goto LABEL_36;
        v19 = v8[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v11)
            goto LABEL_36;
          v19 = v8[v13];
          if (!v19)
          {
            v13 = v18 + 2;
            if (v18 + 2 >= v11)
              goto LABEL_36;
            v19 = v8[v13];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_36:
                swift_release();
                v2 = v31;
                v30 = 1 << *(_BYTE *)(v3 + 32);
                if (v30 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v30;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  v13 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v13 >= v11)
                    goto LABEL_36;
                  v19 = v8[v13];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v13 = v20;
            }
          }
        }
LABEL_26:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = *(_QWORD *)(v3 + 48) + 40 * v17;
      v32 = *(_OWORD *)v21;
      v33 = *(_OWORD *)(v21 + 16);
      v34 = *(_QWORD *)(v21 + 32);
      v22 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v6 + 40));
      v23 = -1 << *(_BYTE *)(v6 + 32);
      v24 = v22 & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v12 + 8 * v25);
        }
        while (v29 == -1);
        v14 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = *(_QWORD *)(v6 + 48) + 40 * v14;
      *(_OWORD *)v15 = v32;
      *(_OWORD *)(v15 + 16) = v33;
      *(_QWORD *)(v15 + 32) = v34;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release();
  *v2 = v6;
}

void sub_100030230(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100008B04(&qword_101494020);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    swift_retain();
    v12 = 0;
    while (1)
    {
      if (v9)
      {
        v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v16 = v15 | (v12 << 6);
      }
      else
      {
        v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v17 >= v10)
          goto LABEL_36;
        v18 = v33[v17];
        ++v12;
        if (!v18)
        {
          v12 = v17 + 1;
          if (v17 + 1 >= v10)
            goto LABEL_36;
          v18 = v33[v12];
          if (!v18)
          {
            v12 = v17 + 2;
            if (v17 + 2 >= v10)
              goto LABEL_36;
            v18 = v33[v12];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v10)
              {
LABEL_36:
                swift_release();
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v33[v19];
              if (!v18)
              {
                while (1)
                {
                  v12 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v12 >= v10)
                    goto LABEL_36;
                  v18 = v33[v12];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v12 = v19;
            }
          }
        }
LABEL_26:
        v9 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
      v21 = *v20;
      v22 = v20[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      String.hash(into:)(v34, v21, v22);
      v23 = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = v23 & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v13 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v13);
      *v14 = v21;
      v14[1] = v22;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release();
  *v2 = v6;
}

void sub_10003050C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100008B04((uint64_t *)&unk_1014940D0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    swift_retain();
    v12 = 0;
    while (1)
    {
      if (v9)
      {
        v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v16 = v15 | (v12 << 6);
      }
      else
      {
        v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v17 >= v10)
          goto LABEL_36;
        v18 = v33[v17];
        ++v12;
        if (!v18)
        {
          v12 = v17 + 1;
          if (v17 + 1 >= v10)
            goto LABEL_36;
          v18 = v33[v12];
          if (!v18)
          {
            v12 = v17 + 2;
            if (v17 + 2 >= v10)
              goto LABEL_36;
            v18 = v33[v12];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v10)
              {
LABEL_36:
                swift_release();
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v33[v19];
              if (!v18)
              {
                while (1)
                {
                  v12 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v12 >= v10)
                    goto LABEL_36;
                  v18 = v33[v12];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v12 = v19;
            }
          }
        }
LABEL_26:
        v9 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
      v21 = *v20;
      v22 = v20[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      Data.hash(into:)(v34, v21, v22);
      v23 = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = v23 & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v13 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v13);
      *v14 = v21;
      v14[1] = v22;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release();
  *v2 = v6;
}

void sub_1000307E8(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;

  v3 = v2;
  v4 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v5 = a1;
  else
    v5 = *(_QWORD *)(*v2 + 24);
  sub_100008B04(a2);
  v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 1);
  v7 = v6;
  if (*(_QWORD *)(v4 + 16))
  {
    v31 = v3;
    v8 = 1 << *(_BYTE *)(v4 + 32);
    v9 = (_QWORD *)(v4 + 56);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v4 + 56);
    v12 = (unint64_t)(v8 + 63) >> 6;
    v13 = v6 + 56;
    swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v18 >= v12)
          goto LABEL_36;
        v19 = v9[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v12)
            goto LABEL_36;
          v19 = v9[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v12)
              goto LABEL_36;
            v19 = v9[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v12)
              {
LABEL_36:
                swift_release();
                v3 = v31;
                v30 = 1 << *(_BYTE *)(v4 + 32);
                if (v30 > 63)
                  bzero((void *)(v4 + 56), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v9 = -1 << v30;
                *(_QWORD *)(v4 + 16) = 0;
                break;
              }
              v19 = v9[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v14 >= v12)
                    goto LABEL_36;
                  v19 = v9[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_26:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v17);
      v22 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v7 + 40));
      v23 = -1 << *(_BYTE *)(v7 + 32);
      v24 = v22 & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v13 + 8 * v25);
        }
        while (v29 == -1);
        v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v13 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15) = v21;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  swift_release();
  *v3 = v7;
}

unint64_t sub_100030A80(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  unint64_t result;

  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
  result = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

uint64_t sub_100030B00(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t i;
  unint64_t v31;

  v8 = (unint64_t *)result;
  v9 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v10 = v9 - 1;
  v11 = a3 + 56;
  while (1)
  {
    v16 = a5[3];
    v17 = a5[4];
    if (!v17)
      break;
    v18 = (v17 - 1) & v17;
    v19 = __clz(__rbit64(v17)) | (v16 << 6);
LABEL_22:
    v26 = *(_QWORD *)(*(_QWORD *)(*a5 + 48) + 8 * v19);
    a5[3] = v16;
    a5[4] = v18;
    result = static Hasher._hash(seed:_:)(*(_QWORD *)(a3 + 40), v26);
    v27 = -1 << *(_BYTE *)(a3 + 32);
    v28 = result & ~v27;
    v12 = v28 >> 6;
    v13 = 1 << v28;
    if (((1 << v28) & *(_QWORD *)(v11 + 8 * (v28 >> 6))) != 0)
    {
      v29 = *(_QWORD *)(a3 + 48);
      if (*(_QWORD *)(v29 + 8 * v28) == v26)
      {
LABEL_3:
        v14 = v12;
        v15 = v8[v12];
        v8[v14] = v15 & ~v13;
        if ((v13 & v15) != 0)
        {
          if (__OFSUB__(v10--, 1))
            goto LABEL_33;
          if (!v10)
            return (uint64_t)&_swiftEmptySetSingleton;
        }
      }
      else
      {
        for (i = v28 + 1; ; i = v31 + 1)
        {
          v31 = i & ~v27;
          if (((*(_QWORD *)(v11 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8)) >> v31) & 1) == 0)
            break;
          if (*(_QWORD *)(v29 + 8 * v31) == v26)
          {
            v12 = v31 >> 6;
            v13 = 1 << v31;
            goto LABEL_3;
          }
        }
      }
    }
  }
  v20 = v16 + 1;
  if (!__OFADD__(v16, 1))
  {
    v21 = (unint64_t)(a5[2] + 64) >> 6;
    v22 = a5[3];
    if (v20 >= v21)
      goto LABEL_31;
    v23 = a5[1];
    v24 = *(_QWORD *)(v23 + 8 * v20);
    if (!v24)
    {
      v22 = v16 + 1;
      if (v16 + 2 >= v21)
        goto LABEL_31;
      v24 = *(_QWORD *)(v23 + 8 * (v16 + 2));
      if (v24)
      {
        v20 = v16 + 2;
      }
      else
      {
        v22 = v16 + 2;
        if (v16 + 3 >= v21)
          goto LABEL_31;
        v24 = *(_QWORD *)(v23 + 8 * (v16 + 3));
        if (v24)
        {
          v20 = v16 + 3;
        }
        else
        {
          v20 = v16 + 4;
          v22 = v16 + 3;
          if (v16 + 4 >= v21)
            goto LABEL_31;
          v24 = *(_QWORD *)(v23 + 8 * v20);
          if (!v24)
          {
            v22 = v21 - 1;
            v25 = v16 + 5;
            while (v21 != v25)
            {
              v24 = *(_QWORD *)(v23 + 8 * v25++);
              if (v24)
              {
                v20 = v25 - 1;
                goto LABEL_21;
              }
            }
LABEL_31:
            a5[3] = v22;
            a5[4] = 0;
            swift_retain(a3);
            return sub_1000310B4(v8, a2, v10, a3);
          }
        }
      }
    }
LABEL_21:
    v18 = (v24 - 1) & v24;
    v19 = __clz(__rbit64(v24)) + (v20 << 6);
    v16 = v20;
    goto LABEL_22;
  }
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

void sub_100030D40(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  char v24;
  uint64_t v25;
  unint64_t i;
  unint64_t v27;
  id v28;
  char v29;
  int64_t v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v37;
  uint64_t v40;
  uint64_t v41;
  void *v42;

  v5 = a5;
  v7 = *(_QWORD *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v8 = v7 - 1;
  v40 = a3 + 56;
  while (2)
  {
    v37 = v8;
    do
    {
      while (1)
      {
        if ((*v5 & 0x8000000000000000) == 0)
        {
          v10 = v5[3];
          v9 = v5[4];
          if (v9)
          {
            v11 = (v9 - 1) & v9;
            v12 = __clz(__rbit64(v9)) | (v10 << 6);
LABEL_7:
            v13 = *(void **)(*(_QWORD *)(*v5 + 48) + 8 * v12);
            v14 = v13;
            goto LABEL_8;
          }
          v30 = v10 + 1;
          if (__OFADD__(v10, 1))
          {
            __break(1u);
            goto LABEL_47;
          }
          v31 = (unint64_t)(v5[2] + 64) >> 6;
          if (v30 >= v31)
          {
            v13 = 0;
            v11 = 0;
            goto LABEL_8;
          }
          v32 = v5[1];
          v33 = *(_QWORD *)(v32 + 8 * v30);
          if (v33)
          {
LABEL_22:
            v11 = (v33 - 1) & v33;
            v12 = __clz(__rbit64(v33)) + (v30 << 6);
            v10 = v30;
            goto LABEL_7;
          }
          if (v10 + 2 < v31)
          {
            v33 = *(_QWORD *)(v32 + 8 * (v10 + 2));
            if (v33)
            {
              v30 = v10 + 2;
              goto LABEL_22;
            }
            if (v10 + 3 >= v31)
            {
              v13 = 0;
              v11 = 0;
              v10 += 2;
              goto LABEL_8;
            }
            v33 = *(_QWORD *)(v32 + 8 * (v10 + 3));
            if (v33)
            {
              v30 = v10 + 3;
              goto LABEL_22;
            }
            v30 = v10 + 4;
            if (v10 + 4 >= v31)
            {
              v13 = 0;
              v11 = 0;
              v10 += 3;
LABEL_8:
              v5[3] = v10;
              v5[4] = v11;
              if (!v13)
                goto LABEL_45;
              goto LABEL_12;
            }
            v33 = *(_QWORD *)(v32 + 8 * v30);
            if (v33)
              goto LABEL_22;
            v30 = v31 - 1;
            v35 = v10 + 5;
            while (v31 != v35)
            {
              v33 = *(_QWORD *)(v32 + 8 * v35++);
              if (v33)
              {
                v30 = v35 - 1;
                goto LABEL_22;
              }
            }
          }
          v13 = 0;
          v11 = 0;
          v10 = v30;
          goto LABEL_8;
        }
        v15 = __CocoaSet.Iterator.next()(a1);
        if (!v15
          || (v16 = v15,
              v41 = v15,
              v17 = sub_10000E4BC(0, (unint64_t *)&unk_10149BA50, &off_101196DA8),
              swift_unknownObjectRetain(v16),
              swift_dynamicCast(&v42, &v41, (char *)&type metadata for Swift.AnyObject + 8, v17, 7),
              v13 = v42,
              swift_unknownObjectRelease(v16),
              !v13))
        {
LABEL_45:
          swift_retain();
          sub_1000312F8(a1, a2, v37, a3);
          return;
        }
LABEL_12:
        v18 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a3 + 40));
        v19 = -1 << *(_BYTE *)(a3 + 32);
        v20 = v18 & ~v19;
        v21 = v20 >> 6;
        v22 = 1 << v20;
        if (((1 << v20) & *(_QWORD *)(v40 + 8 * (v20 >> 6))) == 0)
          goto LABEL_3;
        sub_10000E4BC(0, (unint64_t *)&unk_10149BA50, &off_101196DA8);
        v23 = *(id *)(*(_QWORD *)(a3 + 48) + 8 * v20);
        v24 = static NSObject.== infix(_:_:)(v23, v13);

        if ((v24 & 1) != 0)
          break;
        v25 = ~v19;
        for (i = v20 + 1; ; i = v27 + 1)
        {
          v27 = i & v25;
          if (((*(_QWORD *)(v40 + (((i & v25) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v25)) & 1) == 0)
            break;
          v28 = *(id *)(*(_QWORD *)(a3 + 48) + 8 * v27);
          v29 = static NSObject.== infix(_:_:)(v28, v13);

          if ((v29 & 1) != 0)
          {

            v21 = v27 >> 6;
            v22 = 1 << v27;
            goto LABEL_25;
          }
        }
LABEL_3:

        v5 = a5;
      }

LABEL_25:
      v5 = a5;
      v34 = a1[v21];
      a1[v21] = v34 & ~v22;
    }
    while ((v22 & v34) == 0);
    v8 = v37 - 1;
    if (__OFSUB__(v37, 1))
    {
LABEL_47:
      __break(1u);
      return;
    }
    if (v37 != 1)
      continue;
    break;
  }
}

uint64_t sub_1000310B4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;

  v4 = a4;
  if (!a3)
  {
    v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (uint64_t)v9;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_100008B04(&qword_101493FD8);
  result = static _SetStorage.allocate(capacity:)(v5);
  v9 = (_QWORD *)result;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_39;
    if (v15 >= a2)
      goto LABEL_36;
    v16 = a1[v15];
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= a2)
        goto LABEL_36;
      v16 = a1[v11];
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= a2)
          goto LABEL_36;
        v16 = a1[v11];
        if (!v16)
          break;
      }
    }
LABEL_23:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    result = static Hasher._hash(seed:_:)(v9[5], v18);
    v19 = -1 << *((_BYTE *)v9 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v25 = v21 == v24;
        if (v21 == v24)
          v21 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v12 + 8 * v21);
      }
      while (v26 == -1);
      v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(_QWORD *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(_QWORD *)(v9[6] + 8 * v22) = v18;
    ++v9[2];
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v17 = v15 + 3;
  if (v17 >= a2)
    goto LABEL_36;
  v16 = a1[v17];
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= a2)
      goto LABEL_36;
    v16 = a1[v11];
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_1000312F8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  unint64_t *v29;

  v4 = a4;
  if (!a3)
  {
    v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (Swift::Int)v9;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_100008B04(&qword_101494068);
  result = static _SetStorage.allocate(capacity:)(v5);
  v9 = (_QWORD *)result;
  v29 = a1;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_39;
    if (v15 >= a2)
      goto LABEL_36;
    v16 = v29[v15];
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= a2)
        goto LABEL_36;
      v16 = v29[v11];
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= a2)
          goto LABEL_36;
        v16 = v29[v11];
        if (!v16)
          break;
      }
    }
LABEL_23:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = v9[5];
    v19 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    result = NSObject._rawHashValue(seed:)(v18);
    v20 = -1 << *((_BYTE *)v9 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v12 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v12 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v12 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    *(_QWORD *)(v9[6] + 8 * v23) = v19;
    ++v9[2];
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v17 = v15 + 3;
  if (v17 >= a2)
    goto LABEL_36;
  v16 = v29[v17];
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= a2)
      goto LABEL_36;
    v16 = v29[v11];
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100031554(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, _QWORD *a5)
{
  Swift::Int *v5;
  Swift::Int *v9;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  Swift::Int v15;
  Swift::Int v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  char v20;
  uint64_t v21;
  id v22;
  char v23;
  uint64_t v24;
  uint64_t result;
  Swift::Int v26;

  v9 = v5;
  swift_bridgeObjectRelease(*v9);
  v12 = __CocoaSet.count.getter(a1);
  v13 = swift_unknownObjectRetain(a1);
  v14 = sub_10002E890(v13, v12, a3, a4, a5);
  v26 = v14;
  v15 = *(_QWORD *)(v14 + 40);
  swift_retain();
  v16 = NSObject._rawHashValue(seed:)(v15);
  v17 = -1 << *(_BYTE *)(v14 + 32);
  v18 = v16 & ~v17;
  if (((*(_QWORD *)(v14 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) != 0)
  {
    sub_10000E4BC(0, a4, a5);
    v19 = *(id *)(*(_QWORD *)(v14 + 48) + 8 * v18);
    v20 = static NSObject.== infix(_:_:)(v19, a2);

    if ((v20 & 1) != 0)
    {
LABEL_6:
      swift_release();
      v24 = *(_QWORD *)(*(_QWORD *)(v14 + 48) + 8 * v18);
      sub_1000336F4(v18);
      if ((static NSObject.== infix(_:_:)(a2, v24) & 1) != 0)
      {
        *v9 = v26;
        return v24;
      }
      __break(1u);
    }
    else
    {
      v21 = ~v17;
      while (1)
      {
        v18 = (v18 + 1) & v21;
        if (((*(_QWORD *)(v14 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
          break;
        v22 = *(id *)(*(_QWORD *)(v14 + 48) + 8 * v18);
        v23 = static NSObject.== infix(_:_:)(v22, a2);

        if ((v23 & 1) != 0)
          goto LABEL_6;
      }
    }
    swift_release();
    __break(1u);
  }
  result = swift_release();
  __break(1u);
  return result;
}

void *sub_1000316FC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_100008B04(&qword_101493FD8);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100031890()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_100008B04(&qword_101493FF8);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = (void *)swift_unknownObjectRetain(v17);
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_100031A38()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_100008B04(&qword_101494018);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = (id)v17;
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100031BE4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  v1 = v0;
  sub_100008B04((uint64_t *)&unk_101494040);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    result = (void *)sub_100035DEC(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    v17 = *(_QWORD *)(v4 + 48) + v16;
    v18 = v23[0];
    v19 = v23[1];
    *(_QWORD *)(v17 + 32) = v24;
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100031DB0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100008B04(&qword_101494020);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100031F60()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_100008B04((uint64_t *)&unk_1014940D0);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = (void *)sub_100036B08(v17, *((unint64_t *)&v17 + 1));
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_100032110(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v2 = v1;
  sub_100008B04(a1);
  v3 = *v1;
  v4 = static _SetStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_28;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
      {
        v10 = v19 + 2;
        if (v19 + 2 >= v14)
          goto LABEL_28;
        v20 = *(_QWORD *)(v7 + 8 * v10);
        if (!v20)
          break;
      }
    }
LABEL_27:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    result = v18;
  }
  v21 = v19 + 3;
  if (v21 >= v14)
    goto LABEL_28;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1000322B0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100008B04(&qword_101493FD8);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = result;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v28 = v2;
  v7 = 0;
  v8 = v3 + 56;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v12)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v12)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v7);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    result = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), v20);
    v21 = -1 << *(_BYTE *)(v6 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v13 + 8 * v23);
      }
      while (v27 == -1);
      v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    result = swift_release(v3);
    v2 = v28;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

void sub_100032510(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD v34[2];
  uint64_t v35;
  _QWORD v36[10];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100008B04(&qword_101493FF8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release();
LABEL_41:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v11 = (unint64_t)(v7 + 63) >> 6;
  v12 = v5 + 56;
  swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v13 << 6);
      goto LABEL_27;
    }
    v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    if (v17 >= v11)
      goto LABEL_39;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v13;
    if (!v18)
    {
      v13 = v17 + 1;
      if (v17 + 1 >= v11)
        goto LABEL_39;
      v18 = *(_QWORD *)(v8 + 8 * v13);
      if (!v18)
      {
        v13 = v17 + 2;
        if (v17 + 2 >= v11)
          goto LABEL_39;
        v18 = *(_QWORD *)(v8 + 8 * v13);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v10 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v13 << 6);
LABEL_27:
    v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    Hasher.init(_seed:)(v36, *(_QWORD *)(v6 + 40));
    v33 = v20;
    swift_unknownObjectRetain_n(v20, 2);
    v21 = sub_100008B04(&qword_101493FE8);
    if (swift_dynamicCast(&v30, &v33, v21, &type metadata for AnyHashable, 6))
    {
      v34[0] = v30;
      v34[1] = v31;
      v35 = v32;
      AnyHashable.hash(into:)(v36);
      sub_100012C48((uint64_t)v34);
    }
    else
    {
      v32 = 0;
      v30 = 0u;
      v31 = 0u;
      sub_100010CC4((uint64_t)&v30, &qword_101493FF0);
    }
    v22 = Hasher._finalize()();
    v23 = -1 << *(_BYTE *)(v6 + 32);
    v24 = v22 & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v25);
      }
      while (v29 == -1);
      v14 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v11)
  {
LABEL_39:
    swift_release_n(v3, 2);
    goto LABEL_41;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v13 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v13 >= v11)
      goto LABEL_39;
    v18 = *(_QWORD *)(v8 + 8 * v13);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_43:
  __break(1u);
}

void sub_100032808(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  id v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  _OWORD v36[2];
  uint64_t v37;
  _QWORD v38[10];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100008B04(&qword_101494018);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release();
LABEL_41:
    *v2 = v6;
    return;
  }
  v30 = v2;
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v11 = (unint64_t)(v7 + 63) >> 6;
  v12 = v5 + 56;
  swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v13 << 6);
      goto LABEL_27;
    }
    v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    if (v17 >= v11)
      goto LABEL_39;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v13;
    if (!v18)
    {
      v13 = v17 + 1;
      if (v17 + 1 >= v11)
        goto LABEL_39;
      v18 = *(_QWORD *)(v8 + 8 * v13);
      if (!v18)
      {
        v13 = v17 + 2;
        if (v17 + 2 >= v11)
          goto LABEL_39;
        v18 = *(_QWORD *)(v8 + 8 * v13);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v10 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v13 << 6);
LABEL_27:
    v31 = *(_OWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    Hasher.init(_seed:)(v38, *(_QWORD *)(v6 + 40));
    v35 = v31;
    v20 = (id)v31;
    v21 = sub_100008B04(&qword_101494000);
    if (swift_dynamicCast(&v32, &v35, v21, &type metadata for AnyHashable, 6))
    {
      v36[0] = v32;
      v36[1] = v33;
      v37 = v34;
      AnyHashable.hash(into:)(v38);
      sub_100012C48((uint64_t)v36);
    }
    else
    {
      v34 = 0;
      v32 = 0u;
      v33 = 0u;
      sub_100010CC4((uint64_t)&v32, &qword_101493FF0);
    }
    v22 = Hasher._finalize()();
    v23 = -1 << *(_BYTE *)(v6 + 32);
    v24 = v22 & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v25);
      }
      while (v29 == -1);
      v14 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_OWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14) = v31;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v11)
  {
LABEL_39:
    swift_release_n(v3, 2);
    v2 = v30;
    goto LABEL_41;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v13 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v13 >= v11)
      goto LABEL_39;
    v18 = *(_QWORD *)(v8 + 8 * v13);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_43:
  __break(1u);
}

void sub_100032B10(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  _OWORD v32[2];
  uint64_t v33;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100008B04((uint64_t *)&unk_101494040);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release();
LABEL_38:
    *v2 = v6;
    return;
  }
  v31 = v2;
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v11 = (unint64_t)(v7 + 63) >> 6;
  v12 = v5 + 56;
  swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v18 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_27;
    }
    v20 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v20 >= v11)
      goto LABEL_36;
    v21 = *(_QWORD *)(v8 + 8 * v20);
    ++v13;
    if (!v21)
    {
      v13 = v20 + 1;
      if (v20 + 1 >= v11)
        goto LABEL_36;
      v21 = *(_QWORD *)(v8 + 8 * v13);
      if (!v21)
      {
        v13 = v20 + 2;
        if (v20 + 2 >= v11)
          goto LABEL_36;
        v21 = *(_QWORD *)(v8 + 8 * v13);
        if (!v21)
          break;
      }
    }
LABEL_26:
    v10 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v13 << 6);
LABEL_27:
    sub_100035DEC(*(_QWORD *)(v3 + 48) + 40 * v19, (uint64_t)v32);
    v23 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v6 + 40));
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = v23 & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v12 + 8 * v26);
      }
      while (v30 == -1);
      v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = *(_QWORD *)(v6 + 48) + 40 * v14;
    v16 = v32[0];
    v17 = v32[1];
    *(_QWORD *)(v15 + 32) = v33;
    *(_OWORD *)v15 = v16;
    *(_OWORD *)(v15 + 16) = v17;
    ++*(_QWORD *)(v6 + 16);
  }
  v22 = v20 + 3;
  if (v22 >= v11)
  {
LABEL_36:
    swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v21 = *(_QWORD *)(v8 + 8 * v22);
  if (v21)
  {
    v13 = v22;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v13 >= v11)
      goto LABEL_36;
    v21 = *(_QWORD *)(v8 + 8 * v13);
    ++v22;
    if (v21)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

void sub_100032DA0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100008B04(&qword_101494020);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release();
LABEL_38:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  swift_retain();
  v12 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v12 << 6);
      goto LABEL_27;
    }
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v32)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v12;
    if (!v18)
    {
      v12 = v17 + 1;
      if (v17 + 1 >= v32)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v12);
      if (!v18)
      {
        v12 = v17 + 2;
        if (v17 + 2 >= v32)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v12);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v10 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_27:
    v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v21 = *v20;
    v22 = v20[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v22);
    String.hash(into:)(v33, v21, v22);
    v23 = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = v23 & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v13 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v13);
    *v14 = v21;
    v14[1] = v22;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v32)
  {
LABEL_36:
    swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v12 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v12 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v12 >= v32)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v12);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

void sub_10003304C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100008B04((uint64_t *)&unk_1014940D0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release();
LABEL_38:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  swift_retain();
  v12 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v12 << 6);
      goto LABEL_27;
    }
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v32)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v12;
    if (!v18)
    {
      v12 = v17 + 1;
      if (v17 + 1 >= v32)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v12);
      if (!v18)
      {
        v12 = v17 + 2;
        if (v17 + 2 >= v32)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v12);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v10 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_27:
    v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v21 = *v20;
    v22 = v20[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    sub_100036B08(v21, v22);
    Data.hash(into:)(v33, v21, v22);
    v23 = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = v23 & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v13 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v13);
    *v14 = v21;
    v14[1] = v22;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v32)
  {
LABEL_36:
    swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v12 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v12 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v12 >= v32)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v12);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

void sub_1000332FC(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::Int v21;
  id v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;

  v3 = v2;
  v4 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v5 = a1;
  else
    v5 = *(_QWORD *)(*v2 + 24);
  sub_100008B04(a2);
  v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 0);
  v7 = v6;
  if (!*(_QWORD *)(v4 + 16))
  {
    swift_release();
LABEL_38:
    *v3 = v7;
    return;
  }
  v31 = v3;
  v8 = 1 << *(_BYTE *)(v4 + 32);
  v9 = v4 + 56;
  if (v8 < 64)
    v10 = ~(-1 << v8);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v4 + 56);
  v12 = (unint64_t)(v8 + 63) >> 6;
  v13 = v6 + 56;
  swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_27;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v12)
      goto LABEL_36;
    v19 = *(_QWORD *)(v9 + 8 * v18);
    ++v14;
    if (!v19)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v12)
        goto LABEL_36;
      v19 = *(_QWORD *)(v9 + 8 * v14);
      if (!v19)
      {
        v14 = v18 + 2;
        if (v18 + 2 >= v12)
          goto LABEL_36;
        v19 = *(_QWORD *)(v9 + 8 * v14);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v11 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_27:
    v21 = *(_QWORD *)(v7 + 40);
    v22 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v17);
    v23 = NSObject._rawHashValue(seed:)(v21);
    v24 = -1 << *(_BYTE *)(v7 + 32);
    v25 = v23 & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v13 + 8 * (v25 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v13 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v26);
      }
      while (v30 == -1);
      v15 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v13 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15) = v22;
    ++*(_QWORD *)(v7 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v12)
  {
LABEL_36:
    swift_release_n(v4, 2);
    v3 = v31;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v9 + 8 * v20);
  if (v19)
  {
    v14 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v14 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v14 >= v12)
      goto LABEL_36;
    v19 = *(_QWORD *)(v9 + 8 * v14);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

unint64_t sub_100033570(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(v3);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(v3 + 48);
        v11 = (_QWORD *)(v10 + 8 * v6);
        v12 = static Hasher._hash(seed:_:)(*(_QWORD *)(v3 + 40), *v11) & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_16:
            v15 = (_QWORD *)(v10 + 8 * v2);
            if (v2 != v6 || (v2 = v6, v15 >= v11 + 1))
            {
              *v15 = *v11;
              v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v16 = *(_QWORD *)(v3 + 16);
  v17 = __OFSUB__(v16, 1);
  v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v18;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_1000336F4(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(v3 + 40);
        v11 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        v12 = NSObject._rawHashValue(seed:)(v10);

        v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v2 >= v13)
          {
LABEL_16:
            v16 = *(_QWORD *)(v3 + 48);
            v17 = (_QWORD *)(v16 + 8 * v2);
            v18 = (_QWORD *)(v16 + 8 * v6);
            if (v2 != v6 || (v2 = v6, v17 >= v18 + 1))
            {
              *v17 = *v18;
              v2 = v6;
            }
          }
        }
        else if (v13 >= v9 || v2 >= v13)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v19 = *(_QWORD *)(v3 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_100033894(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10002F688(v8);
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_1000316FC();
      goto LABEL_14;
    }
    sub_1000322B0(v8);
  }
  v9 = *v3;
  result = static Hasher._hash(seed:_:)(*(_QWORD *)(*v3 + 40), v5);
  v10 = -1 << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v11 = *(_QWORD *)(v9 + 48);
    if (*(_QWORD *)(v11 + 8 * a2) == v5)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
      __break(1u);
    }
    else
    {
      v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v11 + 8 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v13 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * a2) = v5;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    *(_QWORD *)(v13 + 16) = v16;
  return result;
}

uint64_t sub_1000339B4(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _OWORD v28[2];
  uint64_t v29;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    v8 = v6 + 1;
    if ((a3 & 1) != 0)
    {
      sub_10002F908(v8);
    }
    else
    {
      if (v7 > v6)
      {
        result = (uint64_t)sub_100031890();
        goto LABEL_18;
      }
      sub_100032510(v8);
    }
    v9 = *v3;
    Hasher.init(_seed:)(v28, *(_QWORD *)(*v3 + 40));
    sub_10002CA94((uint64_t)v28, v5);
    result = Hasher._finalize()();
    v10 = -1 << *(_BYTE *)(v9 + 32);
    a2 = result & ~v10;
    if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v11 = ~v10;
      while (1)
      {
        v12 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * a2);
        *(_QWORD *)&v21 = v12;
        swift_unknownObjectRetain_n(v12, 2);
        v13 = sub_100008B04(&qword_101493FE8);
        if (!swift_dynamicCast(&v25, &v21, v13, &type metadata for AnyHashable, 6))
          break;
        v28[0] = v25;
        v28[1] = v26;
        v29 = v27;
        v24 = v5;
        swift_unknownObjectRetain(v5);
        if ((swift_dynamicCast(&v21, &v24, v13, &type metadata for AnyHashable, 6) & 1) == 0)
        {
          v23 = 0;
          v21 = 0u;
          v22 = 0u;
          sub_100010CC4((uint64_t)&v21, &qword_101493FF0);
          sub_100012C48((uint64_t)v28);
          goto LABEL_11;
        }
        v25 = v21;
        v26 = v22;
        v27 = v23;
        v14 = static AnyHashable.== infix(_:_:)(v28, &v25);
        sub_100012C48((uint64_t)&v25);
        sub_100012C48((uint64_t)v28);
        result = swift_unknownObjectRelease(v12);
        if ((v14 & 1) != 0)
          goto LABEL_21;
LABEL_12:
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          goto LABEL_18;
      }
      v27 = 0;
      v25 = 0u;
      v26 = 0u;
      sub_100010CC4((uint64_t)&v25, &qword_101493FF0);
LABEL_11:
      result = swift_unknownObjectRelease(v12);
      goto LABEL_12;
    }
  }
LABEL_18:
  v15 = *v20;
  *(_QWORD *)(*v20 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * a2) = v5;
  v16 = *(_QWORD *)(v15 + 16);
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  if (v17)
  {
    __break(1u);
LABEL_21:
    v19 = sub_100008B04((uint64_t *)&unk_10149C0B0);
    result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v19);
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v15 + 16) = v18;
  }
  return result;
}

void sub_100033C10(void *a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  _QWORD v29[2];
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _OWORD v33[2];
  uint64_t v34;

  v8 = *(_QWORD *)(*v4 + 16);
  v9 = *(_QWORD *)(*v4 + 24);
  if (v9 <= v8 || (a4 & 1) == 0)
  {
    v10 = v8 + 1;
    if ((a4 & 1) != 0)
    {
      sub_10002FC30(v10);
    }
    else
    {
      if (v9 > v8)
      {
        sub_100031A38();
        goto LABEL_18;
      }
      sub_100032808(v10);
    }
    v11 = *v4;
    Hasher.init(_seed:)(v33, *(_QWORD *)(*v4 + 40));
    sub_10002CB34((uint64_t)v33, a1, a2);
    v12 = Hasher._finalize()();
    v13 = -1 << *(_BYTE *)(v11 + 32);
    a3 = v12 & ~v13;
    if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
    {
      v14 = ~v13;
      while (1)
      {
        v26 = *(_OWORD *)(*(_QWORD *)(v11 + 48) + 16 * a3);
        v15 = (id)v26;
        v16 = sub_100008B04(&qword_101494000);
        if (!swift_dynamicCast(&v30, &v26, v16, &type metadata for AnyHashable, 6))
          break;
        v33[0] = v30;
        v33[1] = v31;
        v34 = v32;
        v29[0] = a1;
        v29[1] = a2;
        v17 = a1;
        if ((swift_dynamicCast(&v26, v29, v16, &type metadata for AnyHashable, 6) & 1) == 0)
        {
          v28 = 0;
          v26 = 0u;
          v27 = 0u;
          sub_100010CC4((uint64_t)&v26, &qword_101493FF0);
          sub_100012C48((uint64_t)v33);
          goto LABEL_11;
        }
        v30 = v26;
        v31 = v27;
        v32 = v28;
        v18 = static AnyHashable.== infix(_:_:)(v33, &v30);
        sub_100012C48((uint64_t)&v30);
        sub_100012C48((uint64_t)v33);

        if ((v18 & 1) != 0)
          goto LABEL_21;
LABEL_12:
        a3 = (a3 + 1) & v14;
        if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          goto LABEL_18;
      }
      v32 = 0;
      v30 = 0u;
      v31 = 0u;
      sub_100010CC4((uint64_t)&v30, &qword_101493FF0);
LABEL_11:

      goto LABEL_12;
    }
  }
LABEL_18:
  v19 = *v25;
  *(_QWORD *)(*v25 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v20 = (_QWORD *)(*(_QWORD *)(v19 + 48) + 16 * a3);
  *v20 = a1;
  v20[1] = a2;
  v21 = *(_QWORD *)(v19 + 16);
  v22 = __OFADD__(v21, 1);
  v23 = v21 + 1;
  if (v22)
  {
    __break(1u);
LABEL_21:
    v24 = sub_100008B04(&qword_101494008);
    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v24);
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v19 + 16) = v23;
  }
}

void sub_100033E70(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, unint64_t *a5, _QWORD *a6)
{
  uint64_t *v6;
  uint64_t *v9;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char v20;
  uint64_t v21;
  id v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v9 = v6;
  v12 = *(_QWORD *)(*v6 + 16);
  v13 = *(_QWORD *)(*v6 + 24);
  if (v13 > v12 && (a3 & 1) != 0)
    goto LABEL_14;
  v14 = v12 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000307E8(v14, a4);
  }
  else
  {
    if (v13 > v12)
    {
      sub_100032110(a4);
      goto LABEL_14;
    }
    sub_1000332FC(v14, a4);
  }
  v15 = *v6;
  v16 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v6 + 40));
  v17 = -1 << *(_BYTE *)(v15 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = sub_10000E4BC(0, a5, a6);
    v19 = *(id *)(*(_QWORD *)(v15 + 48) + 8 * a2);
    v20 = static NSObject.== infix(_:_:)(v19, a1);

    if ((v20 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v18);
      __break(1u);
    }
    else
    {
      v21 = ~v17;
      while (1)
      {
        a2 = (a2 + 1) & v21;
        if (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v22 = *(id *)(*(_QWORD *)(v15 + 48) + 8 * a2);
        v23 = static NSObject.== infix(_:_:)(v22, a1);

        if ((v23 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v24 = *v9;
  *(_QWORD *)(*v9 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v24 + 48) + 8 * a2) = a1;
  v25 = *(_QWORD *)(v24 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    __break(1u);
  else
    *(_QWORD *)(v24 + 16) = v27;
}

uint64_t sub_100034000(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _BYTE v20[40];

  v4 = v3;
  v6 = result;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_12;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10002FF68(v9);
  }
  else
  {
    if (v8 > v7)
    {
      result = (uint64_t)sub_100031BE4();
      goto LABEL_12;
    }
    sub_100032B10(v9);
  }
  v10 = *v3;
  result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(*v3 + 40));
  v11 = -1 << *(_BYTE *)(v10 + 32);
  a2 = result & ~v11;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v12 = ~v11;
    do
    {
      sub_100035DEC(*(_QWORD *)(v10 + 48) + 40 * a2, (uint64_t)v20);
      v13 = static AnyHashable.== infix(_:_:)(v20, v6);
      result = sub_100012C48((uint64_t)v20);
      if ((v13 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v12;
    }
    while (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v14 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  v15 = *(_QWORD *)(v14 + 48) + 40 * a2;
  v16 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)v15 = *(_OWORD *)v6;
  *(_OWORD *)(v15 + 16) = v16;
  *(_QWORD *)(v15 + 32) = *(_QWORD *)(v6 + 32);
  v17 = *(_QWORD *)(v14 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (!v18)
  {
    *(_QWORD *)(v14 + 16) = v19;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
  return result;
}

uint64_t sub_100034168(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_100030230(v11);
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_100031DB0();
      goto LABEL_22;
    }
    sub_100032DA0(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v28, *(_QWORD *)(*v4 + 40));
  String.hash(into:)(v28, v8, a2);
  result = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  v14 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v15 = *(_QWORD *)(v12 + 48);
    v16 = (_QWORD *)(v15 + 16 * a3);
    v17 = v16[1];
    v18 = *v16 == v8 && v17 == a2;
    if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(_QWORD *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v20 = (_QWORD *)(v15 + 16 * a3);
        v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0);
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v23 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v24 = (uint64_t *)(*(_QWORD *)(v23 + 48) + 16 * a3);
  *v24 = v8;
  v24[1] = a2;
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    __break(1u);
  else
    *(_QWORD *)(v23 + 16) = v27;
  return result;
}

Swift::Int sub_100034300(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  Swift::Int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t __s1;

  v7 = result;
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = *(_QWORD *)(*v4 + 24);
  if (v9 <= v8 || (a4 & 1) == 0)
  {
    v10 = v8 + 1;
    if ((a4 & 1) != 0)
    {
      sub_10003050C(v10);
    }
    else
    {
      if (v9 > v8)
      {
        result = (Swift::Int)sub_100031F60();
        goto LABEL_10;
      }
      sub_10003304C(v10);
    }
    v11 = *v4;
    Hasher.init(_seed:)(&__s1, *(_QWORD *)(*v4 + 40));
    Data.hash(into:)(&__s1, v7, a2);
    result = Hasher._finalize()();
    a3 = result & ~(-1 << *(_BYTE *)(v11 + 32));
    if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
      __asm { BR              X8 }
  }
LABEL_10:
  v12 = *v4;
  *(_QWORD *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v13 = (Swift::Int *)(*(_QWORD *)(v12 + 48) + 16 * a3);
  *v13 = v7;
  v13[1] = a2;
  v14 = *(_QWORD *)(v12 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
  {
    __break(1u);
    JUMPOUT(0x100034C60);
  }
  *(_QWORD *)(v12 + 16) = v16;
  return result;
}

uint64_t sub_100034D44(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  char **v9;
  char **v10;
  BOOL v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v34;
  unint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  _BOOL8 v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t result;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  id v70;
  _QWORD *v71;
  uint64_t v72;

  v1 = objc_msgSend(a1, "incidents");
  if (v1)
  {
    v2 = v1;
    v3 = sub_100008B04((uint64_t *)&unk_10149D2E0);
    v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

    if ((unint64_t)v4 >> 62)
      goto LABEL_64;
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v5)
    {
LABEL_4:
      v6 = 0;
      v7 = v4 & 0xC000000000000001;
      v61 = v4 + 32;
      v62 = v4 & 0xFFFFFFFFFFFFFF8;
      v8 = &_swiftEmptyDictionarySingleton;
      v9 = &selRef_addTasks_;
      v10 = &selRef_mkPostalAddressDictionary;
      v64 = v5;
      v65 = v4;
      v63 = v4 & 0xC000000000000001;
      while (1)
      {
        if (v7)
        {
          v70 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v4);
          v11 = __OFADD__(v6++, 1);
          if (v11)
            goto LABEL_62;
        }
        else
        {
          if (v6 >= *(_QWORD *)(v62 + 16))
            goto LABEL_63;
          v70 = *(id *)(v61 + 8 * v6);
          swift_unknownObjectRetain(v70);
          v11 = __OFADD__(v6++, 1);
          if (v11)
            goto LABEL_62;
        }
        v12 = objc_msgSend(v70, v9[109], v61);
        if (v12)
          break;
        swift_unknownObjectRelease(v70);
LABEL_6:
        if (v6 == v5)
          goto LABEL_69;
      }
      v13 = v12;
      v14 = sub_100008B04(&qword_101493FD0);
      v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);

      if (!((unint64_t)v15 >> 62))
      {
        v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v16)
          goto LABEL_16;
        goto LABEL_56;
      }
      if (v15 < 0)
        v58 = v15;
      else
        v58 = v15 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v15);
      v16 = _CocoaArrayWrapper.endIndex.getter(v58);
      swift_bridgeObjectRelease(v15);
      if (!v16)
      {
LABEL_56:
        swift_unknownObjectRelease(v70);
        swift_bridgeObjectRelease(v15);
        goto LABEL_6;
      }
LABEL_16:
      v66 = v6;
      v68 = v15;
      v69 = v15 & 0xC000000000000001;
      v17 = 4;
      v18 = v70;
      v67 = v16;
      while (1)
      {
        v21 = v17 - 4;
        if (v69)
        {
          v22 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v17 - 4, v15);
          v23 = v17 - 3;
          if (__OFADD__(v21, 1))
            goto LABEL_57;
        }
        else
        {
          v22 = *(void **)(v15 + 8 * v17);
          swift_unknownObjectRetain(v22);
          v23 = v17 - 3;
          if (__OFADD__(v21, 1))
          {
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
LABEL_59:
            __break(1u);
LABEL_60:
            __break(1u);
LABEL_61:
            __break(1u);
LABEL_62:
            __break(1u);
LABEL_63:
            __break(1u);
LABEL_64:
            if (v4 < 0)
              v59 = v4;
            else
              v59 = v4 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v4);
            v5 = _CocoaArrayWrapper.endIndex.getter(v59);
            swift_bridgeObjectRelease(v4);
            if (!v5)
              break;
            goto LABEL_4;
          }
        }
        v24 = objc_msgSend(v22, v10[79]);
        if (v8[2] && (v25 = sub_1000C3B40(v24), (v26 & 1) != 0))
        {
          v72 = *(_QWORD *)(v8[7] + 8 * v25);
          swift_bridgeObjectRetain(v72);
          v27 = swift_unknownObjectRetain(v18);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v27);
          v29 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v28 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v29 >= v28 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
          v30 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v29, v18);
          specialized Array._endMutation()(v30);
          v31 = objc_msgSend(v22, v10[79]);
          v32 = v72;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
          v71 = v8;
          v4 = (uint64_t)v8;
          v35 = sub_1000C3B40(v31);
          v36 = v8[2];
          v37 = (v34 & 1) == 0;
          v38 = v36 + v37;
          if (__OFADD__(v36, v37))
            goto LABEL_60;
          v39 = v34;
          if (v8[3] >= v38)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            {
              v8 = v71;
              if ((v34 & 1) == 0)
                goto LABEL_45;
            }
            else
            {
              v4 = (uint64_t)&v71;
              sub_1001A0794();
              v8 = v71;
              if ((v39 & 1) == 0)
                goto LABEL_45;
            }
          }
          else
          {
            sub_1000D90A0(v38, isUniquelyReferenced_nonNull_native);
            v4 = (uint64_t)v71;
            v40 = sub_1000C3B40(v31);
            if ((v39 & 1) != (v41 & 1))
              goto LABEL_71;
            v35 = v40;
            v8 = v71;
            if ((v39 & 1) == 0)
            {
LABEL_45:
              v8[(v35 >> 6) + 8] |= 1 << v35;
              v56 = 8 * v35;
              *(_QWORD *)(v8[6] + v56) = v31;
              *(_QWORD *)(v8[7] + v56) = v32;
              v57 = v8[2];
              v11 = __OFADD__(v57, 1);
              v55 = v57 + 1;
              if (v11)
                goto LABEL_61;
LABEL_46:
              v8[2] = v55;
              goto LABEL_18;
            }
          }
        }
        else
        {
          v42 = objc_msgSend(v22, v10[79]);
          v43 = sub_100008B04((uint64_t *)&unk_101493B10);
          v44 = swift_allocObject(v43, 40, 7);
          *(_OWORD *)(v44 + 16) = xmmword_100E23F50;
          *(_QWORD *)(v44 + 32) = v18;
          v72 = v44;
          specialized Array._endMutation()(v44);
          v32 = v72;
          swift_unknownObjectRetain(v18);
          v45 = swift_isUniquelyReferenced_nonNull_native(v8);
          v72 = (uint64_t)v8;
          v4 = (uint64_t)v8;
          v35 = sub_1000C3B40(v42);
          v47 = v8[2];
          v48 = (v46 & 1) == 0;
          v49 = v47 + v48;
          if (__OFADD__(v47, v48))
            goto LABEL_58;
          v50 = v46;
          if (v8[3] >= v49)
          {
            if ((v45 & 1) != 0)
            {
              v8 = (_QWORD *)v72;
              if ((v46 & 1) == 0)
                goto LABEL_40;
            }
            else
            {
              v4 = (uint64_t)&v72;
              sub_1001A0794();
              v8 = (_QWORD *)v72;
              if ((v50 & 1) == 0)
                goto LABEL_40;
            }
          }
          else
          {
            sub_1000D90A0(v49, v45);
            v4 = v72;
            v51 = sub_1000C3B40(v42);
            if ((v50 & 1) != (v52 & 1))
              goto LABEL_71;
            v35 = v51;
            v8 = (_QWORD *)v72;
            if ((v50 & 1) == 0)
            {
LABEL_40:
              v8[(v35 >> 6) + 8] |= 1 << v35;
              v53 = 8 * v35;
              *(_QWORD *)(v8[6] + v53) = v42;
              *(_QWORD *)(v8[7] + v53) = v32;
              v54 = v8[2];
              v11 = __OFADD__(v54, 1);
              v55 = v54 + 1;
              if (v11)
                goto LABEL_59;
              goto LABEL_46;
            }
          }
        }
        v19 = v8[7];
        v4 = 8 * v35;
        swift_bridgeObjectRelease(*(_QWORD *)(v19 + 8 * v35));
        *(_QWORD *)(v19 + 8 * v35) = v32;
LABEL_18:
        swift_unknownObjectRelease(v22);
        swift_bridgeObjectRelease(0x8000000000000000);
        v10 = &selRef_mkPostalAddressDictionary;
        v18 = v70;
        ++v17;
        v20 = v23 == v67;
        v15 = v68;
        if (v20)
        {
          swift_unknownObjectRelease(v70);
          swift_bridgeObjectRelease(v68);
          v5 = v64;
          v4 = v65;
          v6 = v66;
          v7 = v63;
          v9 = &selRef_addTasks_;
          goto LABEL_6;
        }
      }
    }
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_69:
    swift_bridgeObjectRelease(v4);
    return (uint64_t)v8;
  }
  else
  {
    __break(1u);
LABEL_71:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
    __break(1u);
  }
  return result;
}

_QWORD *sub_1000352C8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[9];
  swift_bridgeObjectRetain(a1[7]);
  swift_unknownObjectRetain(v5);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *sub_100035330(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[7];
  swift_unknownObjectRelease(a1[9]);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t sub_100035398(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)(v2, &type metadata for UInt64, &protocol witness table for UInt64);
  v7 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v5 = *v4++;
      sub_10002CDAC(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

_QWORD *sub_100035408(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  BOOL v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;

  v3 = a1;
  v23 = &_swiftEmptyArrayStorage;
  if (a1 >> 62)
    goto LABEL_21;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      v5 = 0;
      v22 = v3 & 0xC000000000000001;
      v6 = v3 & 0xFFFFFFFFFFFFFF8;
      v21 = v3;
      v7 = v3 + 32;
      v8 = a2 + 56;
      while (v22)
      {
        v11 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v21);
        v12 = __OFADD__(v5++, 1);
        if (v12)
        {
LABEL_18:
          __break(1u);
          return v23;
        }
LABEL_9:
        v13 = objc_msgSend(v11, "muid");
        if (*(_QWORD *)(a2 + 16))
        {
          v3 = (uint64_t)v13;
          v14 = static Hasher._hash(seed:_:)(*(_QWORD *)(a2 + 40), v13);
          v15 = -1 << *(_BYTE *)(a2 + 32);
          v16 = v14 & ~v15;
          if (((*(_QWORD *)(v8 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
          {
            v17 = *(_QWORD *)(a2 + 48);
            if (*(_QWORD *)(v17 + 8 * v16) == v3)
            {
LABEL_15:
              swift_unknownObjectRelease(v11);
              goto LABEL_5;
            }
            v18 = ~v15;
            while (1)
            {
              v16 = (v16 + 1) & v18;
              if (((*(_QWORD *)(v8 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
                break;
              if (*(_QWORD *)(v17 + 8 * v16) == v3)
                goto LABEL_15;
            }
          }
        }
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        v9 = v23[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v9);
        v10 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v11);
        v3 = (uint64_t)&v23;
        specialized ContiguousArray._endMutation()(v10);
LABEL_5:
        if (v5 == v4)
          return v23;
      }
      if (v5 < *(_QWORD *)(v6 + 16))
        break;
      __break(1u);
LABEL_21:
      if (v3 < 0)
        v20 = v3;
      else
        v20 = v3 & 0xFFFFFFFFFFFFFF8;
      v4 = _CocoaArrayWrapper.endIndex.getter(v20);
      if (!v4)
        return &_swiftEmptyArrayStorage;
    }
    v11 = *(void **)(v7 + 8 * v5);
    swift_unknownObjectRetain(v11);
    v12 = __OFADD__(v5++, 1);
    if (v12)
      goto LABEL_18;
    goto LABEL_9;
  }
  return &_swiftEmptyArrayStorage;
}

_QWORD *sub_1000355DC(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = a1;
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_bridgeObjectRetain(a1);
    return (_QWORD *)v4;
  }
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v28 = a1;
    else
      v28 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    result = (_QWORD *)_CocoaArrayWrapper.endIndex.getter(v28);
    v6 = (uint64_t)result;
    if (result)
      goto LABEL_4;
    goto LABEL_46;
  }
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = (_QWORD *)swift_bridgeObjectRetain(a1);
  if (!v6)
  {
LABEL_46:
    swift_bridgeObjectRelease(v4);
    return _swiftEmptyArrayStorage;
  }
LABEL_4:
  if (v6 >= 1)
  {
    v8 = 0;
    v9 = v4 & 0xC000000000000001;
    while (1)
    {
      if (v9)
      {
        v14 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v4);
        if ((a3 & 1) != 0)
          goto LABEL_14;
      }
      else
      {
        v14 = *(void **)(v4 + 8 * v8 + 32);
        swift_unknownObjectRetain(v14);
        if ((a3 & 1) != 0)
          goto LABEL_14;
      }
      if (objc_msgSend(v14, "isBlockingIncident"))
        goto LABEL_6;
LABEL_14:
      v15 = objc_msgSend(v14, "affectedEntities");
      if (!v15)
      {
LABEL_6:
        v10 = swift_unknownObjectRetain(v14);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v10);
        v12 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
        v11 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v12 >= v11 >> 1)
          goto LABEL_29;
        goto LABEL_7;
      }
      v16 = v15;
      v17 = sub_100008B04(&qword_101493FD0);
      v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, v17);

      swift_bridgeObjectRetain(a2);
      v19 = swift_bridgeObjectRetain(v18);
      v20 = (uint64_t)sub_100035408(v19, a2);
      swift_bridgeObjectRelease(v18);
      swift_bridgeObjectRelease(a2);
      if ((unint64_t)v20 >> 62)
      {
        if (v20 < 0)
          v25 = v20;
        else
          v25 = v20 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v20);
        v26 = _CocoaArrayWrapper.endIndex.getter(v25);
        swift_bridgeObjectRelease(v20);
        if (!v26)
        {
LABEL_35:
          swift_unknownObjectRelease(v14);
          swift_bridgeObjectRelease(v20);
          swift_bridgeObjectRelease(v18);
          v9 = v4 & 0xC000000000000001;
          goto LABEL_8;
        }
      }
      else if (!*(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_35;
      }
      if ((a4 & 1) != 0)
      {
        if ((unint64_t)v20 >> 62)
        {
          if (v20 < 0)
            v22 = v20;
          else
            v22 = v20 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v20);
          v21 = _CocoaArrayWrapper.endIndex.getter(v22);
          swift_bridgeObjectRelease(v20);
        }
        else
        {
          v21 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease(v20);
        if ((unint64_t)v18 >> 62)
        {
          if (v18 < 0)
            v27 = v18;
          else
            v27 = v18 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v18);
          v23 = _CocoaArrayWrapper.endIndex.getter(v27);
          swift_bridgeObjectRelease(v18);
        }
        else
        {
          v23 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease(v18);
        if (v21 != v23)
        {
          swift_unknownObjectRelease(v14);
          v9 = v4 & 0xC000000000000001;
          goto LABEL_8;
        }
      }
      else
      {
        swift_bridgeObjectRelease(v20);
        swift_bridgeObjectRelease(v18);
      }
      v24 = swift_unknownObjectRetain(v14);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v24);
      v12 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      v11 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      v9 = v4 & 0xC000000000000001;
      if (v12 >= v11 >> 1)
LABEL_29:
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
LABEL_7:
      v13 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v14);
      specialized Array._endMutation()(v13);
      swift_unknownObjectRelease(v14);
LABEL_8:
      if (v6 == ++v8)
        goto LABEL_46;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100035960(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = sub_100008B04((uint64_t *)&unk_10149C0B0);
  v4 = sub_100010D70(&qword_101493FE0, (uint64_t *)&unk_10149C0B0, "a|7");
  result = Set.init(minimumCapacity:)(v2, v3, v4);
  v9 = result;
  if (v2)
  {
    v6 = (uint64_t *)(a1 + 32);
    do
    {
      v7 = *v6++;
      swift_unknownObjectRetain(v7);
      sub_10002CEA4(&v8, v7);
      swift_unknownObjectRelease(v8);
      --v2;
    }
    while (v2);
    return v9;
  }
  return result;
}

uint64_t sub_100035A08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t *v6;
  id v7[2];
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = sub_100008B04(&qword_101494008);
  v4 = sub_100010D70(&qword_101494010, &qword_101494008, "a|7");
  result = Set.init(minimumCapacity:)(v2, v3, v4);
  v8 = result;
  if (v2)
  {
    v6 = (uint64_t *)(a1 + 40);
    do
    {
      sub_10002D118(v7, (id)*(v6 - 1), *v6);

      v6 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

void sub_100035AB4(uint64_t a1)
{
  sub_100035B84(a1, (unint64_t *)&unk_10149BA50, &off_101196DA8, (unint64_t *)&qword_101494060, &qword_101494068);
}

uint64_t sub_100035AD8(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[40];
  _BYTE v6[40];
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)(v2, &type metadata for AnyHashable, &protocol witness table for AnyHashable);
  v7 = result;
  if (v2)
  {
    v4 = a1 + 32;
    do
    {
      sub_100035DEC(v4, (uint64_t)v5);
      sub_10002D3BC((uint64_t)v6, (uint64_t)v5);
      sub_100012C48((uint64_t)v6);
      v4 += 40;
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

void sub_100035B60(uint64_t a1)
{
  sub_100035B84(a1, (unint64_t *)&qword_101494028, CNPhoneNumber_ptr, (unint64_t *)&qword_101494030, &qword_101494038);
}

void sub_100035B84(uint64_t a1, unint64_t *a2, _QWORD *a3, unint64_t *a4, uint64_t *a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  void **v18;
  void *v19;
  uint64_t v20;
  id v21[2];

  v10 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v20 = a1;
    else
      v20 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v11 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v12 = sub_10000E4BC(0, a2, a3);
  v13 = sub_100035DAC(a4, a2, a3);
  v21[1] = (id)Set.init(minimumCapacity:)(v11, v12, v13);
  if (!v10)
  {
    v14 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v14)
      return;
    goto LABEL_10;
  }
  if (a1 < 0)
    v15 = a1;
  else
    v15 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v14 = _CocoaArrayWrapper.endIndex.getter(v15);
  swift_bridgeObjectRelease(a1);
  if (v14)
  {
LABEL_10:
    if (v14 < 1)
    {
      __break(1u);
    }
    else if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v14; ++i)
      {
        v17 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        sub_10002E120((Swift::Int *)v21, v17, a2, a3, a5);

      }
    }
    else
    {
      v18 = (void **)(a1 + 32);
      do
      {
        v19 = *v18++;
        sub_10002E120((Swift::Int *)v21, v19, a2, a3, a5);

        --v14;
      }
      while (v14);
    }
  }
}

uint64_t sub_100035D18(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[2];
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_10002D534(v7, v5, v6);
      swift_bridgeObjectRelease(v7[1]);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_100035DAC(unint64_t *a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_10000E4BC(255, a2, a3);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for NSObject, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100035DEC(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_100035E28(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100035E30()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100035E5C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10149407C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10000C0E0;
  return sub_10002B7E8(a1, v4, v5, v6);
}

uint64_t sub_100035EC8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100035EF4()
{
  uint64_t v0;

  sub_10002BD98(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

id sub_100035EFC()
{
  uint64_t v0;
  id v1;
  id v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;

  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_isTrackingUser) == 1)
  {
    v1 = objc_msgSend((id)objc_opt_self(MKLocationManager), "sharedLocationManager");
    v2 = objc_msgSend(v1, "currentLocation");

    if (!v2)
      return 0;
  }
  else
  {
    v2 = *(id *)(v0 + OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_requestedLocation);
    v3 = v2;
    if (!v2)
      return 0;
  }
  v4 = (void *)objc_opt_self(MKMapService);
  v5 = v2;
  v6 = objc_msgSend(v4, "sharedService");
  if (!v6)
  {

    return 0;
  }
  v7 = v6;
  v8 = sub_10002725C();
  v9 = objc_msgSend((id)objc_opt_self(MKLocationManager), "sharedLocationManager");
  v10 = objc_msgSend(v9, "currentLocation");

  v11 = objc_msgSend(v7, "ticketForNearbyTransitDeparturesWithLookupOrigin:userLocation:traits:", v5, v10, v8);
  return v11;
}

void sub_100036064(id a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void **p_vtable;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint8_t *v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  _QWORD v32[3];
  _BYTE v33[8];
  uint64_t v34;

  v3 = v2;
  p_vtable = DirectionsElevationNormalisedPoint.vtable;
  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_101490E90 != -1)
      swift_once(&qword_101490E90, sub_100114734);
    v7 = type metadata accessor for Logger(0);
    sub_10000E918(v7, (uint64_t)qword_1014D4AC0);
    swift_errorRetain(a2);
    v8 = swift_errorRetain(a2);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v34 = v12;
      *(_DWORD *)v11 = 136315138;
      swift_getErrorValue(a2, v33, v32);
      v13 = Error.localizedDescription.getter(v32[1], v32[2]);
      v15 = v14;
      v31 = sub_1000C28FC(v13, v14, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32, v11 + 4, v11 + 12);
      swift_bridgeObjectRelease(v15);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Error when attempting to update mapItem: %s", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      v16 = v11;
      p_vtable = (void **)(DirectionsElevationNormalisedPoint + 24);
      swift_slowDealloc(v16, -1, -1);

      swift_errorRelease(a2);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      swift_errorRelease(a2);

    }
  }
  v17 = objc_msgSend(a1, "_transitInfo");
  if (v17
    && (v18 = v17,
        v19 = objc_msgSend(v17, "nearbySchedule"),
        swift_unknownObjectRelease(v18),
        v19))
  {
    if (p_vtable[466] != (void *)-1)
      swift_once(&qword_101490E90, sub_100114734);
    v20 = type metadata accessor for Logger(0);
    v21 = sub_10000E918(v20, (uint64_t)qword_1014D4AC0);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Updated mapItem", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

    v25 = *(_QWORD *)(v3 + OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_geoNearbyTransitSchedule);
    *(_QWORD *)(v3 + OBJC_IVAR____TtC4Maps31NearbyTransitDeparturesProvider_geoNearbyTransitSchedule) = v19;
    swift_unknownObjectRetain(v19);
    swift_unknownObjectRelease(v25);
    sub_100028AE4();
    swift_unknownObjectRelease(v19);
  }
  else
  {
    if (p_vtable[466] != (void *)-1)
      swift_once(&qword_101490E90, sub_100114734);
    v26 = type metadata accessor for Logger(0);
    v27 = sub_10000E918(v26, (uint64_t)qword_1014D4AC0);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Missing nearby schedule in updated mapItem response", v30, 2u);
      swift_slowDealloc(v30, -1, -1);
    }

  }
}

uint64_t sub_100036418(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint8_t *v28;
  char *v29;
  uint64_t KeyPath;
  uint64_t v31;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  char *v36;
  void *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v38 = (char *)&v33 - v9;
  __chkstk_darwin(v10);
  v12 = (char *)&v33 - v11;
  if (qword_101490E90 != -1)
    swift_once(&qword_101490E90, sub_100114734);
  v13 = type metadata accessor for Logger(0);
  sub_10000E918(v13, (uint64_t)qword_1014D4AC0);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v15 = v14(v12, a1, v4);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc(12, -1);
    v37 = v1;
    v19 = (uint8_t *)v18;
    v20 = swift_slowAlloc(32, -1);
    v35 = a1;
    v21 = v20;
    v40 = v20;
    v36 = v7;
    *(_DWORD *)v19 = 136315138;
    v34 = v19 + 4;
    v22 = sub_10000BC84(&qword_101494088, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v4, v22);
    v25 = v24;
    v39 = sub_1000C28FC(v23, v24, &v40);
    v7 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v34, v19 + 12);
    swift_bridgeObjectRelease(v25);
    v26 = *(void (**)(char *, uint64_t))(v5 + 8);
    v26(v12, v4);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Updated referenceDate: %s", v19, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    v27 = v21;
    a1 = v35;
    swift_slowDealloc(v27, -1, -1);
    v28 = v19;
    v2 = v37;
    swift_slowDealloc(v28, -1, -1);
  }
  else
  {
    v26 = *(void (**)(char *, uint64_t))(v5 + 8);
    v26(v12, v4);
  }

  v29 = v38;
  v14(v38, a1, v4);
  KeyPath = swift_getKeyPath(&unk_100E25388);
  v31 = swift_getKeyPath(&unk_100E253B0);
  v14(v7, (uint64_t)v29, v4);
  static Published.subscript.setter(v7, v2, KeyPath, v31);
  return ((uint64_t (*)(char *, uint64_t))v26)(v29, v4);
}

void sub_1000366E8(void *a1)
{
  void *v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;

  type metadata accessor for CollectionTransitItem(0);
  v2 = (void *)MapsSyncObject.__allocating_init()();
  v3 = objc_msgSend(objc_allocWithZone((Class)MSPTransitStorageLine), "initWithLine:", a1);
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend(v3, "data");
    if (v5)
    {
      v6 = v5;
      v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v5);
      v9 = v8;

    }
    else
    {
      v7 = 0;
      v9 = 0xF000000000000000;
    }
    dispatch thunk of CollectionTransitItem.transitLineStorage.setter(v7, v9);
    dispatch thunk of CollectionTransitItem.muid.setter(objc_msgSend(a1, "muid"));

  }
  type metadata accessor for MapsSyncStore(0);
  v10 = (void *)static MapsSyncStore.sharedStore.getter();
  v11 = sub_100008B04((uint64_t *)&unk_101493B10);
  v12 = swift_allocObject(v11, 40, 7);
  *(_OWORD *)(v12 + 16) = xmmword_100E23F50;
  *(_QWORD *)(v12 + 32) = v2;
  v14 = v12;
  specialized Array._endMutation()(v12);
  v13 = v2;
  dispatch thunk of MapsSyncStore.save(_:)(v14);

  swift_bridgeObjectRelease(v14);
}

uint64_t sub_100036A9C()
{
  return sub_100036AB0((void (*)(_QWORD))&_swift_bridgeObjectRelease, (void (*)(_QWORD))&_swift_unknownObjectRelease);
}

uint64_t sub_100036AB0(void (*a1)(_QWORD), void (*a2)(_QWORD))
{
  _QWORD *v2;

  swift_release(v2[2]);
  a1(v2[3]);
  a2(v2[4]);
  return swift_deallocObject(v2, 40, 7);
}

void sub_100036AFC()
{
  uint64_t v0;

  sub_10002C55C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_100036B08(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100036B4C(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100036BB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v19 = a1;
  v7 = type metadata accessor for Optional(0, a3);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v19 - v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a4, a3, &unk_1010654FC, &unk_10106550C);
  v12 = type metadata accessor for UICollectionView.CellRegistration(0, AssociatedTypeWitness, a3);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v19 - v14;
  (*(void (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
  v16 = *(_QWORD *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v10, a2, a3);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v10, 0, 1, a3);
  v17 = UICollectionView.dequeueConfiguredReusableCell<A, B>(using:for:item:)(v15, v19, v10, AssociatedTypeWitness, a3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return v17;
}

uint64_t sub_100036D1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v21;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a4, a3, &unk_10106555C, &unk_10106556C);
  v10 = type metadata accessor for HomeSupplementaryViewRegistration(0, AssociatedTypeWitness, a3, v9);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (uint64_t *)((char *)&v21 - v13);
  (*(void (**)(uint64_t, uint64_t, __n128))(a4 + 24))(a3, a4, v12);
  v15 = UICollectionView.dequeueConfiguredReusableSupplementary<A>(using:for:)((char *)v14 + *(int *)(v10 + 40), a1, AssociatedTypeWitness);
  v16 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v14[2];
  v17 = *v14;
  v18 = v14[1];
  swift_retain();
  swift_bridgeObjectRetain(v18);
  v16(v15, v17, v18, a1, a2);
  swift_release();
  v19 = swift_bridgeObjectRelease(v18);
  (*(void (**)(uint64_t *, uint64_t, __n128))(v11 + 8))(v14, v10, v19);
  return v15;
}

uint64_t type metadata accessor for HomeSupplementaryViewRegistration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10001A6E8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HomeSupplementaryViewRegistration);
}

uint64_t sub_100036E58(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_100E25488;
  v4[1] = (char *)&value witness table for () + 64;
  result = type metadata accessor for UICollectionView.SupplementaryRegistration(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 3, v4, a1 + 32);
    return 0;
  }
  return result;
}

_QWORD *sub_100036EDC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  __int128 v13;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v11);
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    v5 = a2[3];
    v13 = *(_OWORD *)(a2 + 1);
    *(_OWORD *)(a1 + 8) = v13;
    *(_QWORD *)(a1 + 24) = v5;
    v6 = *(int *)(a3 + 40);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = type metadata accessor for UICollectionView.SupplementaryRegistration(0, *(_QWORD *)(a3 + 16));
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain(v13);
    swift_retain(v5);
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_100036FA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_release(*(_QWORD *)(a1 + 24));
  v4 = a1 + *(int *)(a2 + 40);
  v5 = type metadata accessor for UICollectionView.SupplementaryRegistration(0, *(_QWORD *)(a2 + 16));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_100036FF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  __int128 v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  v11 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(int *)(a3 + 40);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UICollectionView.SupplementaryRegistration(0, *(_QWORD *)(a3 + 16));
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v11);
  swift_retain(v4);
  v9(v6, v7, v8);
  return a1;
}

_QWORD *sub_100037094(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = *(int *)(a3 + 40);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UICollectionView.SupplementaryRegistration(0, *(_QWORD *)(a3 + 16));
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *sub_10003712C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 40);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UICollectionView.SupplementaryRegistration(0, *(_QWORD *)(a3 + 16));
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t sub_10003718C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release(v8);
  v9 = *(int *)(a3 + 40);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for UICollectionView.SupplementaryRegistration(0, *(_QWORD *)(a3 + 16));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t sub_10003720C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100037218);
}

uint64_t sub_100037218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UICollectionView.SupplementaryRegistration(0, *(_QWORD *)(a3 + 16));
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 40), a2, v8);
  }
}

uint64_t sub_100037298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000372A4);
}

uint64_t sub_1000372A4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UICollectionView.SupplementaryRegistration(0, *(_QWORD *)(a4 + 16));
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 40), a2, a2, v7);
  }
  return result;
}

uint64_t destroy for PlaceSummaryResultTemplatePair(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)a1);

  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

uint64_t *_s4Maps30PlaceSummaryResultTemplatePairVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;

  v3 = *a2;
  v4 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = (uint64_t)v4;
  v5 = a2[2];
  a1[2] = v5;
  swift_bridgeObjectRetain(v3);
  v6 = v4;
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *assignWithCopy for PlaceSummaryResultTemplatePair(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = (void *)a2[1];
  v7 = (void *)a1[1];
  a1[1] = (uint64_t)v6;
  v8 = v6;

  v9 = a1[2];
  v10 = a2[2];
  a1[2] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for PlaceSummaryStringFormat(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

_QWORD *assignWithTake for PlaceSummaryResultTemplatePair(_QWORD *a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*a1);
  v4 = (void *)a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;

  v5 = a1[2];
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlaceSummaryResultTemplatePair(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlaceSummaryResultTemplatePair(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlaceSummaryResultTemplatePair()
{
  return &type metadata for PlaceSummaryResultTemplatePair;
}

void sub_100037500(void *a1)
{
  id v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  void *v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v1 = objc_msgSend(a1, "geoMapItemPlaceTypes");
  if (!v1)
    return;
  v2 = v1;
  v3 = sub_1000376A0();
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  if ((unint64_t)v4 >> 62)
  {
    if (v4 < 0)
      v13 = v4;
    else
      v13 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v5 = _CocoaArrayWrapper.endIndex.getter(v13);
    if (v5)
      goto LABEL_4;
LABEL_21:
    swift_bridgeObjectRelease_n(v4, 2);
    return;
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v4);
  if (!v5)
    goto LABEL_21;
LABEL_4:
  if (v5 >= 1)
  {
    v6 = 0;
    v7 = _swiftEmptyArrayStorage;
    do
    {
      if ((v4 & 0xC000000000000001) != 0)
        v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v4);
      else
        v8 = *(id *)(v4 + 8 * v6 + 32);
      v9 = v8;
      v10 = objc_msgSend(v8, "intValue");

      if (v10)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
          v7 = sub_1000A7A40(0, v7[2] + 1, 1, v7);
        v12 = v7[2];
        v11 = v7[3];
        if (v12 >= v11 >> 1)
          v7 = sub_1000A7A40((_QWORD *)(v11 > 1), v12 + 1, 1, v7);
        v7[2] = v12 + 1;
        *((_DWORD *)v7 + v12 + 8) = v10;
      }
      ++v6;
    }
    while (v5 != v6);
    goto LABEL_21;
  }
  __break(1u);
}

unint64_t sub_1000376A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10149E3B0;
  if (!qword_10149E3B0)
  {
    v1 = objc_opt_self(NSNumber);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10149E3B0);
  }
  return result;
}

Swift::Int sub_1000376DC()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100037720()
{
  Swift::UInt8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100037748(uint64_t a1)
{
  Swift::UInt8 *v1;
  Swift::UInt8 v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

unsigned __int8 *sub_100037788@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  unsigned int v2;
  BOOL v3;

  v2 = *result;
  v3 = v2 > 2;
  if (v2 > 2)
    LOBYTE(v2) = 0;
  *a2 = v2;
  a2[1] = v3;
  return result;
}

void sub_1000377A4(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

void *sub_100037804(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_constraints, a1, 33, 0);
  return &j__swift_endAccess;
}

void sub_1000378C8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  double v25;
  void *v26;
  void *v27;
  id v28;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_host);
  if (!v1)
    return;
  v2 = v0;
  v3 = OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_redoSearchController;
  v4 = *(void **)(v0 + OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_redoSearchController);
  if (v4)
  {
    swift_unknownObjectRetain(v1);
    v5 = v4;
    v6 = objc_msgSend(v5, "parentViewController");
    if (v6)
    {

      objc_msgSend(v5, "willMoveToParentViewController:", 0);
      if (objc_msgSend(v5, "isViewLoaded"))
      {
        v7 = objc_msgSend(v5, "view");
        if (!v7)
        {
          __break(1u);
          return;
        }
        v8 = v7;
        objc_msgSend(v7, "removeFromSuperview");

      }
      objc_msgSend(v5, "removeFromParentViewController");
      sub_1000387FC();
    }

    v9 = *(void **)(v2 + v3);
    if (v9)
      goto LABEL_13;
  }
  else
  {
    swift_unknownObjectRetain(v1);
  }
  v10 = swift_allocObject(&unk_10119D0E0, 24, 7);
  swift_unknownObjectWeakInit(v10 + 16, v2);
  v11 = objc_allocWithZone((Class)type metadata accessor for RedoSearchContainerViewController());
  v12 = sub_100204154((uint64_t)sub_100038C24, v10);
  swift_release(v10);
  v13 = *(void **)(v2 + v3);
  *(_QWORD *)(v2 + v3) = v12;

  v9 = *(void **)(v2 + v3);
  if (!v9)
  {
    swift_unknownObjectRelease(v1);
    return;
  }
LABEL_13:
  v14 = v9;
  v28 = objc_msgSend(v1, "containingViewController");
  objc_msgSend(v14, "willMoveToParentViewController:");
  v15 = objc_msgSend(v1, "overlayContentView");
  v16 = *(void **)(v2 + v3);
  if (v16 && (v17 = objc_msgSend(v16, "view")) != 0)
  {
    v18 = v17;
    v19 = objc_msgSend(v17, "superview");
    if (!v19)
      goto LABEL_17;
    v20 = v19;
    sub_10000E4BC(0, (unint64_t *)&qword_101493C30, UIView_ptr);
    v21 = v15;
    v22 = v20;
    LOBYTE(v20) = static NSObject.== infix(_:_:)(v22, v21);

    if ((v20 & 1) == 0)
    {
LABEL_17:
      objc_msgSend(v18, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
      objc_msgSend(v15, "addSubview:", v18);
      sub_100037DBC();
      v21 = v15;
    }

  }
  else
  {
    v18 = v15;
  }

  objc_msgSend(v14, "didMoveToParentViewController:", v28);
  v23 = *(void **)(v2 + v3);
  if (v23 && (v24 = objc_msgSend(v23, "view")) != 0)
  {
    v25 = 0.0;
    if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_overlayHidden) & 1) == 0)
      v25 = *(double *)(v2 + OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_overlayAlpha);
    objc_msgSend(v24, "setAlpha:", v25, v24);
    swift_unknownObjectRelease(v1);

    v26 = v27;
  }
  else
  {
    swift_unknownObjectRelease(v1);

    v26 = v28;
  }

}

id sub_100037C38()
{
  _BYTE *v0;
  char *v1;
  id v2;
  objc_super v4;

  *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_redoSearchController] = 0;
  swift_unknownObjectWeakInit(&v0[OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_delegate], 0);
  *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_constraints] = 0;
  v0[OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_overlayHidden] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_overlayAlpha] = 0x3FF0000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_animationCount] = 0;
  v1 = &v0[OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_containerStyle];
  *(_QWORD *)v1 = 0;
  v1[8] = 1;
  *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_host] = 0;
  v0[OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_isHidden] = 0;
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for RedoSearchChromeOverlay();
  v2 = objc_msgSendSuper2(&v4, "init");
  sub_100037F30(1, 0);

  return v2;
}

void sub_100037D30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = v1;
  v4 = v2 + OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_containerStyle;
  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_containerStyle + 8) & 1) != 0
    || *(_QWORD *)v4 != a1)
  {
    *(_QWORD *)v4 = a1;
    *(_BYTE *)(v4 + 8) = 0;
    v5 = *(void **)(v2 + OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_redoSearchController);
    if (v5)
    {
      v6 = v5;
      sub_1002033C8(a1, 0);

    }
    sub_100037DBC();
  }
}

void sub_100037DBC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  Class isa;
  uint64_t *v8;
  void *v9;
  uint64_t v10;
  _BYTE v11[32];
  _BYTE v12[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_constraints);
  swift_beginAccess(v0 + OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_constraints, v12, 1, 0);
  v2 = *v1;
  if (*v1)
  {
    if ((unint64_t)v2 >> 62)
    {
      if (v2 >= 0)
        v5 = v2 & 0xFFFFFFFFFFFFFF8;
      else
        v5 = *v1;
      swift_bridgeObjectRetain(*v1);
      if (_CocoaArrayWrapper.endIndex.getter(v5))
        goto LABEL_4;
    }
    else
    {
      v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(*v1);
      if (v3)
      {
LABEL_4:
        v4 = v2;
LABEL_12:
        swift_bridgeObjectRelease(v4);
        goto LABEL_13;
      }
    }
    v6 = (void *)objc_opt_self(NSLayoutConstraint);
    sub_10000E4BC(0, (unint64_t *)&qword_101493070, NSLayoutConstraint_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v2);
    objc_msgSend(v6, "deactivateConstraints:", isa);

    v9 = sub_100037804((uint64_t)v11);
    v10 = *v8;
    if (*v8)
    {
      *v8 = (uint64_t)_swiftEmptyArrayStorage;
      swift_bridgeObjectRelease(v10);
    }
    ((void (*)(_BYTE *, _QWORD))v9)(v11, 0);
    v4 = *v1;
    *v1 = 0;
    goto LABEL_12;
  }
LABEL_13:
  sub_1000389A8();
}

void sub_100037F30(char a1, char a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  double v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  id v26;
  void **v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;

  v3 = a1 & 1;
  v4 = OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_overlayHidden;
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_overlayHidden) != (a1 & 1))
  {
    *(_BYTE *)(v2 + OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_overlayHidden) = v3;
    *(_BYTE *)(v2 + OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_isHidden) = v3;
    v5 = OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_redoSearchController;
    v6 = *(void **)(v2 + OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_redoSearchController);
    if (v6)
    {
      v8 = objc_msgSend(v6, "view");
      if (v8)
      {
        v9 = v8;
        v10 = *(void **)(v2 + v5);
        if (v10)
        {
          v11 = objc_msgSend(v10, "view");
          if (v11)
          {
            v12 = v11;
            v13 = 0.0;
            if ((*(_BYTE *)(v2 + v4) & 1) == 0)
              v13 = *(double *)(v2 + OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_overlayAlpha);
            objc_msgSend(v11, "setAlpha:", v13);

          }
        }
        v14 = objc_msgSend(objc_allocWithZone((Class)GroupAnimation), "init");
        objc_msgSend(v14, "setAnimated:", a2 & 1);
        objc_msgSend(v14, "setDuration:", 0.3);
        objc_msgSend(v14, "setOptions:", 4);
        v15 = swift_allocObject(&unk_10119D0E0, 24, 7);
        swift_unknownObjectWeakInit(v15 + 16, v2);
        v16 = swift_allocObject(&unk_10119D108, 40, 7);
        *(_QWORD *)(v16 + 16) = v15;
        *(_BYTE *)(v16 + 24) = v3;
        *(_QWORD *)(v16 + 32) = v9;
        v31 = sub_100038798;
        v32 = v16;
        v27 = _NSConcreteStackBlock;
        v28 = 1107296256;
        v29 = sub_1001BB8D4;
        v30 = &unk_10119D120;
        v17 = _Block_copy(&v27);
        v18 = v32;
        v19 = v9;
        swift_release(v18);
        objc_msgSend(v14, "addPreparation:", v17);
        _Block_release(v17);
        v20 = swift_allocObject(&unk_10119D0E0, 24, 7);
        swift_unknownObjectWeakInit(v20 + 16, v2);
        v31 = sub_1000387C0;
        v32 = v20;
        v27 = _NSConcreteStackBlock;
        v28 = 1107296256;
        v29 = sub_1001BB8D4;
        v30 = &unk_10119D148;
        v21 = _Block_copy(&v27);
        swift_release(v32);
        objc_msgSend(v14, "addAnimations:", v21);
        _Block_release(v21);
        v22 = swift_allocObject(&unk_10119D0E0, 24, 7);
        swift_unknownObjectWeakInit(v22 + 16, v2);
        v23 = swift_allocObject(&unk_10119D180, 32, 7);
        *(_QWORD *)(v23 + 16) = v22;
        *(_QWORD *)(v23 + 24) = v19;
        v31 = sub_1000387F4;
        v32 = v23;
        v27 = _NSConcreteStackBlock;
        v28 = 1107296256;
        v29 = sub_1001E2858;
        v30 = &unk_10119D198;
        v24 = _Block_copy(&v27);
        v25 = v32;
        v26 = v19;
        swift_release(v25);
        objc_msgSend(v14, "addCompletion:", v24);
        _Block_release(v24);
        objc_msgSend(v14, "runWithCurrentOptions");

      }
    }
  }
}

void sub_100038250(uint64_t a1, char a2, void *a3)
{
  uint64_t v5;
  char *Strong;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  _BYTE v10[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0, 0);
  Strong = (char *)swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    v7 = *(_QWORD *)&Strong[OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_animationCount];
    v8 = __OFADD__(v7, 1);
    v9 = v7 + 1;
    if (v8)
    {
      __break(1u);
      return;
    }
    *(_QWORD *)&Strong[OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_animationCount] = v9;

  }
  if ((a2 & 1) == 0)
    objc_msgSend(a3, "setHidden:", 0);
}

void sub_1000382DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  _BYTE *v3;
  void *v4;
  id v5;
  void *v6;
  double v7;
  _BYTE v8[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (_BYTE *)Strong;
    v4 = *(void **)(Strong + OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_redoSearchController);
    if (v4 && (v5 = objc_msgSend(v4, "view")) != 0)
    {
      v6 = v5;
      v7 = 0.0;
      if ((v3[OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_overlayHidden] & 1) == 0)
        v7 = *(double *)&v3[OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_overlayAlpha];
      objc_msgSend(v5, "setAlpha:", v7);

    }
    else
    {
      v6 = v3;
    }

  }
}

void sub_100038390(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t Strong;
  unsigned __int8 *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  char v14[24];

  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v14, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v4);
  if (Strong)
  {
    v6 = (unsigned __int8 *)Strong;
    v7 = *(_QWORD *)(Strong + OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_animationCount);
    v8 = __OFSUB__(v7, 1);
    v9 = v7 - 1;
    if (v8)
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(Strong + OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_animationCount) = v9;
      if (!v9)
      {
        v10 = OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_overlayHidden;
        if (*(_BYTE *)(Strong + OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_overlayHidden) == 1)
        {
          v11 = *(_BYTE **)(Strong + OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_redoSearchController);
          v12 = 1;
          if (v11)
          {
            v11[OBJC_IVAR____TtC4Maps33RedoSearchContainerViewController_state] = 1;
            v13 = v11;
            sub_100203948();

            v12 = v6[v10];
          }
          objc_msgSend(a3, "setHidden:", v12);
        }
      }

    }
  }
}

void sub_1000384A8(double a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  double v5;
  id v6;

  v2 = OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_overlayAlpha;
  if (*(double *)(v1 + OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_overlayAlpha) != a1)
  {
    *(double *)(v1 + OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_overlayAlpha) = a1;
    v3 = *(void **)(v1 + OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_redoSearchController);
    if (v3)
    {
      v4 = objc_msgSend(v3, "view");
      if (v4)
      {
        v5 = 0.0;
        if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_overlayHidden) & 1) == 0)
          v5 = *(double *)(v1 + v2);
        v6 = v4;
        objc_msgSend(v4, "setAlpha:", v5);

      }
    }
  }
}

id sub_100038648()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RedoSearchChromeOverlay();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RedoSearchChromeOverlay()
{
  return objc_opt_self(_TtC4Maps23RedoSearchChromeOverlay);
}

ValueMetadata *type metadata accessor for SearchHereFloatingControlState()
{
  return &type metadata for SearchHereFloatingControlState;
}

unint64_t sub_100038704()
{
  unint64_t result;

  result = qword_1014942F0;
  if (!qword_1014942F0)
  {
    result = swift_getWitnessTable(&unk_100E25598, &type metadata for SearchHereFloatingControlState);
    atomic_store(result, (unint64_t *)&qword_1014942F0);
  }
  return result;
}

uint64_t sub_100038748()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10003876C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

void sub_100038798()
{
  uint64_t v0;

  sub_100038250(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1000387A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000387B8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1000387C0()
{
  uint64_t v0;

  sub_1000382DC(v0);
}

uint64_t sub_1000387C8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_1000387F4(uint64_t a1)
{
  uint64_t v1;

  sub_100038390(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1000387FC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  Class isa;
  uint64_t *v9;
  void *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_constraints);
  result = swift_beginAccess(v0 + OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_constraints, v13, 1, 0);
  v3 = *v1;
  if (*v1)
  {
    if ((unint64_t)v3 >> 62)
    {
      if (v3 >= 0)
        v6 = v3 & 0xFFFFFFFFFFFFFF8;
      else
        v6 = *v1;
      swift_bridgeObjectRetain(*v1);
      if (_CocoaArrayWrapper.endIndex.getter(v6))
        goto LABEL_4;
    }
    else
    {
      v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(*v1);
      if (v4)
      {
LABEL_4:
        v5 = v3;
        return swift_bridgeObjectRelease(v5);
      }
    }
    v7 = (void *)objc_opt_self(NSLayoutConstraint);
    sub_10000E4BC(0, (unint64_t *)&qword_101493070, NSLayoutConstraint_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v3);
    objc_msgSend(v7, "deactivateConstraints:", isa);

    v10 = sub_100037804((uint64_t)v12);
    v11 = *v9;
    if (*v9)
    {
      *v9 = (uint64_t)_swiftEmptyArrayStorage;
      swift_bridgeObjectRelease(v11);
    }
    ((void (*)(_BYTE *, _QWORD))v10)(v12, 0);
    v5 = *v1;
    *v1 = 0;
    return swift_bridgeObjectRelease(v5);
  }
  return result;
}

void sub_10003892C(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  void *v4;
  _BYTE v5[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v5, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    v4 = (void *)swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_delegate);

    if (v4)
    {
      objc_msgSend(v4, "shouldStartRedoSearch");
      swift_unknownObjectRelease(v4);
    }
  }
}

void sub_1000389A8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  objc_class *v4;
  Class v5;
  void *v6;
  objc_class *v7;
  Class v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  Class isa;
  uint64_t v22;
  uint64_t v23;
  char v24[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_constraints);
  swift_beginAccess(v0 + OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_constraints, v24, 1, 0);
  v2 = *v1;
  if (*v1)
  {
    if ((unint64_t)v2 >> 62)
    {
      if (v2 >= 0)
        v22 = v2 & 0xFFFFFFFFFFFFFF8;
      else
        v22 = *v1;
      swift_bridgeObjectRetain(*v1);
      v23 = _CocoaArrayWrapper.endIndex.getter(v22);
      swift_bridgeObjectRelease(v2);
      if (v23)
        return;
    }
    else if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      return;
    }
  }
  v3 = *(void **)(v0 + OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_host);
  if (v3)
  {
    v4 = (objc_class *)objc_msgSend(v3, "layoutGuideForOverlay:", v0);
    if (v4)
    {
      v5 = v4;
      v6 = *(void **)(v0 + OBJC_IVAR____TtC4Maps23RedoSearchChromeOverlay_redoSearchController);
      if (v6)
      {
        v7 = (objc_class *)objc_msgSend(v6, "view");
        if (v7)
        {
          v8 = v7;
          v9 = sub_100008B04((uint64_t *)&unk_101493B10);
          v10 = swift_allocObject(v9, 48, 7);
          *(_OWORD *)(v10 + 16) = xmmword_100E250A0;
          v11 = -[objc_class centerXAnchor](v8, "centerXAnchor");
          v12 = -[objc_class centerXAnchor](v5, "centerXAnchor");
          v13 = objc_msgSend(v11, "constraintEqualToAnchor:", v12);

          *(_QWORD *)(v10 + 32) = v13;
          v14 = -[objc_class bottomAnchor](v8, "bottomAnchor");
          v15 = -[objc_class bottomAnchor](v5, "bottomAnchor");
          v16 = objc_msgSend(v14, "constraintEqualToAnchor:", v15);

          *(_QWORD *)(v10 + 40) = v16;
          specialized Array._endMutation()(v17);
          v18 = *v1;
          *v1 = v10;
          swift_bridgeObjectRelease(v18);
          v19 = *v1;
          if (v19)
          {
            v20 = (void *)objc_opt_self(NSLayoutConstraint);
            sub_10000E4BC(0, (unint64_t *)&qword_101493070, NSLayoutConstraint_ptr);
            swift_bridgeObjectRetain(v19);
            isa = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease(v19);
            objc_msgSend(v20, "activateConstraints:", isa);

            v5 = v8;
            v8 = isa;
          }

          v5 = v8;
        }
      }

    }
  }
}

void sub_100038C24()
{
  uint64_t v0;

  sub_10003892C(v0);
}

uint64_t sub_100038C3C()
{
  uint64_t v0;
  __n128 v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v0 = sub_100008B04(&qword_101494370);
  v1 = __chkstk_darwin(v0);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for LocalizedStringResource(0, v1);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TypeDisplayRepresentation(0, v6);
  sub_10000E930(v9, qword_1014D4680);
  sub_10000E918(v9, (uint64_t)qword_1014D4680);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000012, 0x8000000100E430F0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v8, v3);
}

unint64_t sub_100038D4C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _BYTE *v25;
  uint64_t v26;
  unint64_t result;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t, uint64_t);
  _BYTE *v35;
  void (*v36)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v0 = sub_100008B04(&qword_101494368);
  __chkstk_darwin(v0);
  v2 = (char *)&v28 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = v2;
  v3 = sub_100008B04(&qword_101494370);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LocalizedStringResource(0, v4);
  v8 = *(_QWORD *)(v7 - 8);
  v37 = v7;
  __chkstk_darwin(v7);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008B04(&qword_101494378);
  v12 = sub_100008B04(&qword_101491CB8);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = v12;
  v15 = *(_QWORD *)(v13 + 72);
  v38 = v12;
  v39 = v15;
  v16 = *(unsigned __int8 *)(v13 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = swift_allocObject(v11, v17 + 2 * v15, v16 | 7);
  v40 = v18;
  *(_OWORD *)(v18 + 16) = xmmword_100E22F70;
  v19 = (_BYTE *)(v18 + v17);
  v35 = &v19[*(int *)(v14 + 48)];
  *v19 = 0;
  LocalizedStringResource.init(stringLiteral:)(0x74736574726F6853, 0xE800000000000000);
  v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
  v36(v6, 1, 1, v7);
  v20 = type metadata accessor for DisplayRepresentation.Image(0);
  v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56);
  v34(v2, 1, 1, v20);
  v21 = sub_100008B04((uint64_t *)&unk_101494380);
  v22 = *(unsigned __int8 *)(v8 + 80);
  v32 = ((v22 + 32) & ~v22) + 4 * *(_QWORD *)(v8 + 72);
  v33 = v21;
  v31 = v22 | 7;
  v23 = swift_allocObject(v21, v32, v22 | 7);
  v30 = xmmword_100E255C0;
  *(_OWORD *)(v23 + 16) = xmmword_100E255C0;
  LocalizedStringResource.init(stringLiteral:)(0x7473656C6C616D53, 0xEE006574756F7220);
  LocalizedStringResource.init(stringLiteral:)(0x20747365736F6C43, 0xED00006574756F72);
  LocalizedStringResource.init(stringLiteral:)(0x7473656C6C616D53, 0xEC00000079617720);
  LocalizedStringResource.init(stringLiteral:)(0x20747365736F6C43, 0xEB00000000796177);
  v28 = v10;
  v24 = v29;
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v10, v6, v29, v23);
  v25 = &v19[v39];
  v39 += (uint64_t)&v19[*(int *)(v38 + 48)];
  *v25 = 1;
  LocalizedStringResource.init(stringLiteral:)(0x74736574736146, 0xE700000000000000);
  v36(v6, 1, 1, v37);
  v34(v24, 1, 1, v20);
  v26 = swift_allocObject(v33, v32, v31);
  *(_OWORD *)(v26 + 16) = v30;
  LocalizedStringResource.init(stringLiteral:)(0x7473656B63697551, 0xEE006574756F7220);
  LocalizedStringResource.init(stringLiteral:)(0x7220796465657053, 0xEC0000006574756FLL);
  LocalizedStringResource.init(stringLiteral:)(0x7473656B63697551, 0xEC00000079617720);
  LocalizedStringResource.init(stringLiteral:)(0x7720796465657053, 0xEA00000000007961);
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v28, v6, v24, v26);
  result = sub_100009898(v40);
  qword_1014D4698 = result;
  return result;
}

uint64_t sub_100039150(char *a1, char *a2)
{
  return sub_1001D6458(*a1, *a2);
}

unint64_t sub_100039160()
{
  unint64_t result;

  result = qword_1014942F8;
  if (!qword_1014942F8)
  {
    result = swift_getWitnessTable(&unk_100E255DC, &type metadata for RoutePreferenceEnum);
    atomic_store(result, (unint64_t *)&qword_1014942F8);
  }
  return result;
}

Swift::Int sub_1000391A4()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x74736574736166;
  else
    v2 = 0x74736574726F6873;
  if (v1)
    v3 = 0xE700000000000000;
  else
    v3 = 0xE800000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100039224(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x74736574736166;
  else
    v2 = 0x74736574726F6873;
  if (*v1)
    v3 = 0xE700000000000000;
  else
    v3 = 0xE800000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100039280(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x74736574736166;
  else
    v3 = 0x74736574726F6873;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xE800000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1000392FC@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10119A1C0, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_100039358(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x74736574726F6873;
  if (*v1)
    v2 = 0x74736574736166;
  v3 = 0xE800000000000000;
  if (*v1)
    v3 = 0xE700000000000000;
  *a1 = v2;
  a1[1] = v3;
}

unint64_t sub_10003939C()
{
  unint64_t result;

  result = qword_101494300;
  if (!qword_101494300)
  {
    result = swift_getWitnessTable(&unk_100E256BC, &type metadata for RoutePreferenceEnum);
    atomic_store(result, (unint64_t *)&qword_101494300);
  }
  return result;
}

unint64_t sub_1000393E4()
{
  unint64_t result;

  result = qword_101494308;
  if (!qword_101494308)
  {
    result = swift_getWitnessTable(&unk_100E256F4, &type metadata for RoutePreferenceEnum);
    atomic_store(result, (unint64_t *)&qword_101494308);
  }
  return result;
}

unint64_t sub_10003942C()
{
  unint64_t result;

  result = qword_101494310;
  if (!qword_101494310)
  {
    result = swift_getWitnessTable(&unk_100E25644, &type metadata for RoutePreferenceEnum);
    atomic_store(result, (unint64_t *)&qword_101494310);
  }
  return result;
}

void *sub_100039470()
{
  return &protocol witness table for String;
}

unint64_t sub_100039480()
{
  unint64_t result;

  result = qword_101494318;
  if (!qword_101494318)
  {
    result = swift_getWitnessTable(&unk_100E25724, &type metadata for RoutePreferenceEnum);
    atomic_store(result, (unint64_t *)&qword_101494318);
  }
  return result;
}

unint64_t sub_1000394C8()
{
  unint64_t result;

  result = qword_101494320;
  if (!qword_101494320)
  {
    result = swift_getWitnessTable(&unk_100E2574C, &type metadata for RoutePreferenceEnum);
    atomic_store(result, (unint64_t *)&qword_101494320);
  }
  return result;
}

unint64_t sub_100039510()
{
  unint64_t result;

  result = qword_101494328;
  if (!qword_101494328)
  {
    result = swift_getWitnessTable(&unk_100E25774, &type metadata for RoutePreferenceEnum);
    atomic_store(result, (unint64_t *)&qword_101494328);
  }
  return result;
}

unint64_t sub_100039558()
{
  unint64_t result;

  result = qword_101494330;
  if (!qword_101494330)
  {
    result = swift_getWitnessTable(&unk_100E257CC, &type metadata for RoutePreferenceEnum);
    atomic_store(result, (unint64_t *)&qword_101494330);
  }
  return result;
}

uint64_t sub_1000395A0@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v3;
  uint64_t v4;

  if (qword_101490CC0 != -1)
    swift_once(&qword_101490CC0, sub_100038C3C);
  v3 = type metadata accessor for TypeDisplayRepresentation(0, a2);
  v4 = sub_10000E918(v3, (uint64_t)qword_1014D4680);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v4, v3);
}

uint64_t sub_100039610(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_100039650();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppEnum.defaultResolverSpecification>>, 1);
}

unint64_t sub_100039650()
{
  unint64_t result;

  result = qword_101494338;
  if (!qword_101494338)
  {
    result = swift_getWitnessTable(&unk_100E2567C, &type metadata for RoutePreferenceEnum);
    atomic_store(result, (unint64_t *)&qword_101494338);
  }
  return result;
}

uint64_t sub_100039694(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100039650();
  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_1000396D0()
{
  unint64_t result;

  result = qword_101494340;
  if (!qword_101494340)
  {
    result = swift_getWitnessTable(&unk_100E2580C, &type metadata for RoutePreferenceEnum);
    atomic_store(result, (unint64_t *)&qword_101494340);
  }
  return result;
}

unint64_t sub_100039718()
{
  unint64_t result;

  result = qword_101494348;
  if (!qword_101494348)
  {
    result = swift_getWitnessTable(&unk_100E25834, &type metadata for RoutePreferenceEnum);
    atomic_store(result, (unint64_t *)&qword_101494348);
  }
  return result;
}

unint64_t sub_100039760()
{
  unint64_t result;

  result = qword_101494350;
  if (!qword_101494350)
  {
    result = swift_getWitnessTable(&unk_100E25604, &type metadata for RoutePreferenceEnum);
    atomic_store(result, (unint64_t *)&qword_101494350);
  }
  return result;
}

uint64_t sub_1000397A4()
{
  if (qword_101490CC8 != -1)
    swift_once(&qword_101490CC8, sub_100038D4C);
  return swift_bridgeObjectRetain(qword_1014D4698);
}

uint64_t sub_1000397E4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100039558();
  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_100039820()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101494358;
  if (!qword_101494358)
  {
    v1 = sub_10000E5D4(&qword_101494360);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_101494358);
  }
  return result;
}

void sub_10003986C(_QWORD *a1@<X8>)
{
  *a1 = &off_10119A210;
}

uint64_t storeEnumTagSinglePayload for RoutePreferenceEnum(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000398C8 + 4 * byte_100E255D5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000398FC + 4 * byte_100E255D0[v4]))();
}

uint64_t sub_1000398FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100039904(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003990CLL);
  return result;
}

uint64_t sub_100039918(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100039920);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100039924(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003992C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RoutePreferenceEnum()
{
  return &type metadata for RoutePreferenceEnum;
}

unint64_t sub_10003999C()
{
  uint64_t v0;
  uint64_t v1;
  __CFString *v2;
  __CFString *v3;
  __CFString *v4;
  __CFString *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  Swift::String v10;
  void *object;
  Swift::String v12;
  uint64_t v13;
  __CFString *v14;
  id v15;
  NSObject *v16;
  id v17;
  NSObject *v18;
  void *v19;
  id v20;
  __CFString *v21;
  __CFString *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  Swift::String v26;
  Swift::String v27;
  uint8_t buf[8];
  unint64_t v30;

  v1 = v0;
  *(_QWORD *)buf = 0;
  v30 = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease(0xE000000000000000);
  switch(*(_QWORD *)(v0 + OBJC_IVAR____TtC4Maps35NavigationModeGuidanceConfiguration_guidanceLevel))
  {
    case 0xFFFFFFFFFFFFFFFFLL:
      v2 = CFSTR("No Override");
      goto LABEL_7;
    case 0:
      v2 = CFSTR("None");
      goto LABEL_7;
    case 1:
      v2 = CFSTR("Incidents Only");
      goto LABEL_7;
    case 2:
      v2 = CFSTR("Full");
LABEL_7:
      v3 = v2;
      break;
    default:
      v2 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("UNKNOWN: %lu"), *(_QWORD *)(v0 + OBJC_IVAR____TtC4Maps35NavigationModeGuidanceConfiguration_guidanceLevel)));
      break;
  }
  v4 = v2;
  if (v4)
  {
    v5 = v4;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v8 = v7;

  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  *(_QWORD *)buf = v6;
  v30 = v8;
  v9 = sub_100008B04(&qword_101495CE0);
  v10._countAndFlagsBits = String.init<A>(describing:)(buf, v9);
  object = v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(object);
  v12._countAndFlagsBits = 0x74536E676973202CLL;
  v12._object = (void *)0xED0000203A656C79;
  String.append(_:)(v12);
  v13 = *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps35NavigationModeGuidanceConfiguration_navigationSignStyle);
  if (v13)
  {
    if (v13 == 1)
    {
      v14 = CFSTR(".Mini");
    }
    else
    {
      v15 = sub_1004318FC();
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        sub_10003CA18((uint64_t)buf, (uint64_t)"NSString * _Nonnull NSStringFromCarNavigationGuidanceSignStyle(CarNavigationGuidanceSignStyle)", (uint64_t)"CarNavigationGuidanceSign.h", 36);
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%s [%s:%d] Assertion reached unexpectedly!", buf, 0x1Cu);
      }

      if (sub_100A70734())
      {
        v17 = sub_1004318FC();
        v18 = objc_claimAutoreleasedReturnValue(v17);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
          v20 = v19;
          sub_10003CA44((uint64_t)buf, (uint64_t)v19);
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);

        }
      }
      v14 = CFSTR(".Unknown");
    }
  }
  else
  {
    v14 = CFSTR(".Default");
  }
  v21 = v14;
  v22 = v14;
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v25 = v24;

  v26._countAndFlagsBits = v23;
  v26._object = v25;
  String.append(_:)(v26);
  swift_bridgeObjectRelease(v25);
  v27._countAndFlagsBits = 62;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  return 0xD000000000000010;
}

void sub_100039CCC(void *a1)
{
  uint64_t v1;
  Class isa;
  NSString v4;
  uint64_t v5;
  id v6;

  isa = UInt._bridgeToObjectiveC()().super.super.isa;
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "encodeObject:forKey:", isa, v4);

  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps35NavigationModeGuidanceConfiguration_navigationSignStyle);
  v6 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "encodeInteger:forKey:", v5, v6);

}

id sub_100039E1C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NavigationModeGuidanceConfiguration();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for NavigationModeGuidanceConfiguration()
{
  return objc_opt_self(_TtC4Maps35NavigationModeGuidanceConfiguration);
}

void sub_100039E6C(void *a1)
{
  void *v1;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void *v30;
  Class isa;
  NSString v32;
  void *v33;
  NSString v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  void *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  id v49;
  id v50;

  if (qword_101490CD0 != -1)
    swift_once(&qword_101490CD0, sub_10003C734);
  v3 = type metadata accessor for Logger(0);
  sub_10000E918(v3, (uint64_t)qword_101494398);
  v4 = a1;
  v5 = v1;
  v6 = v4;
  v7 = (char *)v5;
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(22, -1);
    v11 = (void *)swift_slowAlloc(64, -1);
    v49 = a1;
    v50 = v11;
    *(_DWORD *)v10 = 136315394;
    v12 = v6;
    v13 = sub_100008B04(&qword_101494458);
    v14 = String.init<A>(describing:)(&v49, v13);
    v16 = v15;
    v49 = (id)sub_1000C28FC(v14, v15, (uint64_t *)&v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v10 + 4, v10 + 12);

    swift_bridgeObjectRelease(v16);
    *(_WORD *)(v10 + 12) = 2080;
    v49 = *(id *)&v7[OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_initialGuidanceConfiguration];
    v17 = v49;
    v18 = String.init<A>(describing:)(&v49, v13);
    v20 = v19;
    v49 = (id)sub_1000C28FC(v18, v19, (uint64_t *)&v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v10 + 14, v10 + 22);

    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "didSet initialGuidanceConfiguration from: %s to: %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

  }
  v21 = OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_initialGuidanceConfiguration;
  v22 = *(void **)&v7[OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_initialGuidanceConfiguration];
  if (v22)
  {
    v23 = (void *)objc_opt_self(NSKeyedArchiver);
    v50 = 0;
    v24 = v22;
    v25 = objc_msgSend(v23, "archivedDataWithRootObject:requiringSecureCoding:error:", v24, 1, &v50);
    v26 = v50;
    if (v25)
    {
      v27 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v29 = v28;

      v30 = *(void **)&v7[OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_userDefaults];
      isa = Data._bridgeToObjectiveC()().super.isa;
      v32 = String._bridgeToObjectiveC()();
      objc_msgSend(v30, "setObject:forKey:", isa, v32);

      sub_100036B4C(v27, v29);
    }
    else
    {
      v35 = v26;
      v36 = _convertNSErrorToError(_:)(v26);

      swift_willThrow(v37);
      v38 = v7;
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v39, v40))
      {
        v41 = (uint8_t *)swift_slowAlloc(12, -1);
        v48 = v36;
        v42 = (void *)swift_slowAlloc(32, -1);
        *(_DWORD *)v41 = 136315138;
        v50 = v42;
        v49 = *(id *)&v7[v21];
        v43 = v49;
        v44 = sub_100008B04(&qword_101494458);
        v45 = String.init<A>(describing:)(&v49, v44);
        v47 = v46;
        v49 = (id)sub_1000C28FC(v45, v46, (uint64_t *)&v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v41 + 4, v41 + 12);

        swift_bridgeObjectRelease(v47);
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "failed to persist initialGuidanceConfiguration in user defaults: %s", v41, 0xCu);
        swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v42, -1, -1);
        swift_slowDealloc(v41, -1, -1);
        swift_errorRelease(v48);

      }
      else
      {

        swift_errorRelease(v36);
      }

    }
  }
  else
  {
    v33 = *(void **)&v7[OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_userDefaults];
    v34 = String._bridgeToObjectiveC()();
    objc_msgSend(v33, "setURL:forKey:", 0, v34);

  }
}

char *sub_10003A350(void *a1, void *a2, void *a3)
{
  _BYTE *v3;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  id v11;
  id v12;
  char *v13;
  uint64_t v14;
  char *v15;
  NSString v16;
  uint64_t v17;
  char *v18;
  NSString v19;
  id v20;
  char *v21;
  objc_super v23;

  v7 = swift_unknownObjectWeakInit(&v3[OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_platformController], 0);
  v8 = &v3[OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_audioKey];
  *v8 = 0xD000000000000023;
  v8[1] = 0x8000000100E43380;
  v9 = &v3[OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_signKey];
  *v9 = 0xD00000000000002BLL;
  v9[1] = 0x8000000100E43310;
  v10 = &v3[OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_persistedConfigurationKey];
  *v10 = 0xD000000000000019;
  v10[1] = 0x8000000100E43260;
  v3[OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_isApplyingConfiguration] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_initialGuidanceConfiguration] = 0;
  v3[OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_userModifiedConfigurationDuringNavigation] = 0;
  swift_unknownObjectWeakAssign(v7, a1);
  *(_QWORD *)&v3[OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_userDefaults] = a2;
  *(_QWORD *)&v3[OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_audioPreferences] = a3;
  v23.receiver = v3;
  v23.super_class = (Class)type metadata accessor for NavigationAlertsOnlyOverrideSynchronizationTask();
  v11 = a2;
  v12 = a3;
  v13 = (char *)objc_msgSendSuper2(&v23, "init");
  sub_10003A7D4();
  v14 = *(_QWORD *)&v13[OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_audioKey + 8];
  v15 = v13;
  swift_bridgeObjectRetain(v14);
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v14);
  objc_msgSend(v11, "addObserver:forKeyPath:options:context:", v15, v16, 1, 0, v23.receiver, v23.super_class);

  v17 = *(_QWORD *)&v15[OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_signKey + 8];
  v18 = v15;
  swift_bridgeObjectRetain(v17);
  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v17);
  objc_msgSend(v11, "addObserver:forKeyPath:options:context:", v18, v19, 1, 0);

  v20 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v21 = v18;
  objc_msgSend(v20, "addObserver:selector:name:object:", v21, "applicationWillTerminate", UIApplicationWillTerminateNotification, 0);

  return v21;
}

id sub_10003A618()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  NSString v4;
  uint64_t v5;
  id v6;
  NSString v7;
  objc_super v9;

  v1 = OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_userDefaults;
  v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_audioKey + 8];
  v3 = *(id *)&v0[OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_userDefaults];
  swift_bridgeObjectRetain(v2);
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  objc_msgSend(v3, "removeObserver:forKeyPath:", v0, v4);

  v5 = *(_QWORD *)&v0[OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_signKey + 8];
  v6 = *(id *)&v0[v1];
  swift_bridgeObjectRetain(v5);
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  objc_msgSend(v6, "removeObserver:forKeyPath:", v0, v7);

  v9.receiver = v0;
  v9.super_class = (Class)type metadata accessor for NavigationAlertsOnlyOverrideSynchronizationTask();
  return objc_msgSendSuper2(&v9, "dealloc");
}

void sub_10003A7D4()
{
  uint64_t v0;
  void *v1;
  NSString v2;
  id v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  unint64_t v20;
  _DWORD *v21;
  NSObject *v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  NSString v34;
  _DWORD *v35;
  _QWORD *v36;
  uint8_t *buf;
  uint64_t v38;
  void *v39;
  os_log_t log;
  os_log_t loga;
  uint64_t v42;
  os_log_t v43;
  uint64_t v44;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_userDefaults);
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "dataForKey:", v2);

  if (v3)
  {
    v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v6 = v5;

    sub_10003C994();
    v7 = type metadata accessor for NavigationModeGuidanceConfiguration();
    v8 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v7, v4, v6, v7);
    v14 = (void *)v8;
    if (v8)
    {
      if (qword_101490CD0 != -1)
        swift_once(&qword_101490CD0, sub_10003C734);
      v15 = type metadata accessor for Logger(0);
      sub_10000E918(v15, (uint64_t)qword_101494398);
      v16 = v14;
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v17, v18))
      {
        v39 = v1;
        v19 = (uint8_t *)swift_slowAlloc(12, -1);
        v36 = (_QWORD *)swift_slowAlloc(8, -1);
        buf = v19;
        v38 = v4;
        v20 = v6;
        *(_DWORD *)v19 = 138412290;
        v21 = v19 + 12;
        v35 = v19 + 4;
        v43 = v16;
        v22 = v16;
        v23 = v21;
        v6 = v20;
        v4 = v38;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v35, v23);
        *v36 = v14;

        v1 = v39;
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Task was launched and we've detected a configuration: %@ from previous app session. Will apply it.", buf, 0xCu);
        v24 = sub_100008B04((uint64_t *)&unk_101494470);
        swift_arrayDestroy(v36, 1, v24);
        swift_slowDealloc(v36, -1, -1);
        swift_slowDealloc(buf, -1, -1);

      }
      else
      {

      }
      sub_10003AF54(v16);
      sub_100036B4C(v4, v6);

    }
    else
    {
      if (qword_101490CD0 != -1)
        swift_once(&qword_101490CD0, sub_10003C734);
      v25 = type metadata accessor for Logger(0);
      sub_10000E918(v25, (uint64_t)qword_101494398);
      sub_100036B08(v4, v6);
      v26 = sub_100036B08(v4, v6);
      v27 = Logger.logObject.getter(v26);
      v28 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v27, v28))
      {
        v29 = (uint8_t *)swift_slowAlloc(12, -1);
        loga = (os_log_t)swift_slowAlloc(32, -1);
        v43 = loga;
        *(_DWORD *)v29 = 136315138;
        sub_100036B08(v4, v6);
        v30 = Data.description.getter(v4, v6);
        v31 = v6;
        v33 = v32;
        sub_100036B4C(v4, v31);
        v42 = sub_1000C28FC(v30, v33, (uint64_t *)&v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v29 + 4, v29 + 12);
        swift_bridgeObjectRelease(v33);
        sub_100036B4C(v4, v31);
        sub_100036B4C(v4, v31);
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "Failed to unarchive persisted configuration: %s", v29, 0xCu);
        swift_arrayDestroy(loga, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(loga, -1, -1);
        swift_slowDealloc(v29, -1, -1);

        sub_100036B4C(v4, v31);
      }
      else
      {
        sub_100036B4C(v4, v6);
        sub_100036B4C(v4, v6);
        sub_100036B4C(v4, v6);

      }
    }
    v34 = String._bridgeToObjectiveC()();
    objc_msgSend(v1, "setURL:forKey:", 0, v34);

  }
  else
  {
    if (qword_101490CD0 != -1)
      swift_once(&qword_101490CD0, sub_10003C734);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_10000E918(v9, (uint64_t)qword_101494398);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "There was no persisted configuration, will continue regular setup", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

    log = (os_log_t)String._bridgeToObjectiveC()();
    objc_msgSend(v1, "setURL:forKey:", 0, log);

  }
}

void sub_10003AF54(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  NSString v20;
  id v21;
  id v22;
  NSString v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = v1;
  v4 = OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_isApplyingConfiguration;
  *(_BYTE *)(v2 + OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_isApplyingConfiguration) = 1;
  if (qword_101490CD0 != -1)
    swift_once(&qword_101490CD0, sub_10003C734);
  v5 = type metadata accessor for Logger(0);
  sub_10000E918(v5, (uint64_t)qword_101494398);
  v6 = a1;
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = v2;
    v10 = swift_slowAlloc(32, -1);
    v26 = v10;
    *(_DWORD *)v9 = 136315138;
    v11 = v6;
    v12 = objc_msgSend(v11, "description");
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v15 = v14;

    v25 = sub_1000C28FC(v13, v15, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v9 + 4, v9 + 12);

    swift_bridgeObjectRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "applyConfiguration: Will apply configuration override to: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    v16 = v10;
    v2 = v24;
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {

  }
  v17 = *(void **)(v2 + OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_audioPreferences);
  v18 = objc_msgSend(v17, "guidanceLevelForTransportType:", 0);
  if (v18 != *(id *)&v6[OBJC_IVAR____TtC4Maps35NavigationModeGuidanceConfiguration_guidanceLevel])
  {
    objc_msgSend(v17, "setGuidanceLevel:forTransportType:");
    objc_msgSend(v17, "synchronize");
  }
  v19 = *(void **)(v2 + OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_userDefaults);
  v20 = String._bridgeToObjectiveC()();
  v21 = objc_msgSend(v19, "integerForKey:", v20);

  v22 = *(id *)&v6[OBJC_IVAR____TtC4Maps35NavigationModeGuidanceConfiguration_navigationSignStyle];
  if (v21 != v22)
  {
    v23 = String._bridgeToObjectiveC()();
    objc_msgSend(v19, "setInteger:forKey:", v22, v23);

  }
  *(_BYTE *)(v2 + v4) = 0;
}

void sub_10003B234(uint64_t a1, void *a2, uint64_t a3, Class isa, uint64_t a5)
{
  char *v5;
  char *v6;
  NSString v10;
  uint64_t v12;
  void *v13;
  uint64_t v15;
  NSString v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  void *Strong;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  char *v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  NSString v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  __n128 v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  objc_class *v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  void *v67;
  NSString v68;
  char *v69;
  id v70;
  objc_super v71;
  uint64_t v72[3];
  uint64_t v73;

  v6 = v5;
  v10 = a2;
  if (!a2)
  {
LABEL_44:
    sub_1000110D4(a3, (uint64_t)v72);
    v56 = v73;
    if (v73)
    {
      v57 = sub_10000BE88(v72, v73);
      v58 = *(_QWORD *)(v56 - 8);
      v59 = __chkstk_darwin(v57);
      v61 = (char *)&v69 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, __n128))(v58 + 16))(v61, v59);
      v62 = _bridgeAnythingToObjectiveC<A>(_:)(v61, v56);
      (*(void (**)(char *, uint64_t))(v58 + 8))(v61, v56);
      sub_10000BEAC(v72);
      if (!isa)
      {
LABEL_47:
        v63 = (objc_class *)type metadata accessor for NavigationAlertsOnlyOverrideSynchronizationTask();
        v71.receiver = v6;
        v71.super_class = v63;
        objc_msgSendSuper2(&v71, "observeValueForKeyPath:ofObject:change:context:", v10, v62, isa, a5);

        swift_unknownObjectRelease(v62);
        return;
      }
    }
    else
    {
      v62 = 0;
      if (!isa)
        goto LABEL_47;
    }
    type metadata accessor for NSKeyValueChangeKey(0);
    sub_10003C9D0();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    goto LABEL_47;
  }
  v12 = *(_QWORD *)&v6[OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_audioKey];
  v13 = *(void **)&v6[OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_audioKey + 8];
  if (v12 == a1 && v13 == a2)
    goto LABEL_13;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, *(_QWORD *)&v6[OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_audioKey], *(_QWORD *)&v6[OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_audioKey + 8], 0) & 1) == 0)
  {
    v15 = *(_QWORD *)&v6[OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_signKey];
    v16 = *(NSString *)&v6[OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_signKey + 8];
    v17 = v15 == a1 && v16 == v10;
    if (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)(a1, v10, v15, v16, 0) & 1) == 0)
    {
      v10 = String._bridgeToObjectiveC()();
      goto LABEL_44;
    }
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(a1, v10, v12, v13, 0) & 1) != 0)
  {
LABEL_13:
    v18 = qword_101490CD0;
    swift_bridgeObjectRetain(v10);
    if (v18 != -1)
      swift_once(&qword_101490CD0, sub_10003C734);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_10000E918(v19, (uint64_t)qword_101494398);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "observeValue: called for audioKey, will reload values from default", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

    objc_msgSend(*(id *)&v6[OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_audioPreferences], "loadValuesFromDefaults");
    goto LABEL_18;
  }
  v47 = *(_QWORD *)&v6[OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_signKey];
  v48 = *(NSString *)&v6[OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_signKey + 8];
  v49 = v47 == a1 && v48 == v10;
  if (v49 || (_stringCompareWithSmolCheck(_:_:expecting:)(a1, v10, v47, v48, 0) & 1) != 0)
  {
    v50 = qword_101490CD0;
    swift_bridgeObjectRetain(v10);
    if (v50 != -1)
      swift_once(&qword_101490CD0, sub_10003C734);
    v51 = type metadata accessor for Logger(0);
    v52 = sub_10000E918(v51, (uint64_t)qword_101494398);
    v53 = Logger.logObject.getter(v52);
    v54 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v53, v54))
    {
      v55 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v55 = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "observeValue: called for signKey", v55, 2u);
      swift_slowDealloc(v55, -1, -1);
    }

  }
  else
  {
    swift_bridgeObjectRetain(v10);
  }
LABEL_18:
  Strong = (void *)swift_unknownObjectWeakLoadStrong(&v6[OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_platformController]);
  if (Strong
    && (v25 = Strong,
        v26 = objc_msgSend(Strong, "currentNavigationSession"),
        v25,
        v26))
  {

    if ((v6[OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_isApplyingConfiguration] & 1) == 0
      && *(_QWORD *)&v6[OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_initialGuidanceConfiguration])
    {
      if (qword_101490CD0 != -1)
        swift_once(&qword_101490CD0, sub_10003C734);
      v27 = type metadata accessor for Logger(0);
      sub_10000E918(v27, (uint64_t)qword_101494398);
      v28 = swift_bridgeObjectRetain(v10);
      v29 = Logger.logObject.getter(v28);
      v30 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v29, v30))
      {
        v31 = (uint8_t *)swift_slowAlloc(12, -1);
        v32 = swift_slowAlloc(32, -1);
        v72[0] = v32;
        *(_DWORD *)v31 = 136315138;
        swift_bridgeObjectRetain(v10);
        v70 = (id)sub_1000C28FC(a1, (unint64_t)v10, v72);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v31 + 4, v31 + 12);
        swift_bridgeObjectRelease_n(v10, 3);
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "observeValue: was called for %s during an Alerts Only navigation session -> We will not reset initial settings after nav ends", v31, 0xCu);
        swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v32, -1, -1);
        swift_slowDealloc(v31, -1, -1);

      }
      else
      {

        v33 = swift_bridgeObjectRelease_n(v10, 2);
      }
      v6[OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_userModifiedConfigurationDuringNavigation] = 1;
      v64 = Logger.logObject.getter(v33);
      v65 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v64, v65))
      {
        v66 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v66 = 0;
        _os_log_impl((void *)&_mh_execute_header, v64, v65, "user modified config during active nav -> will not persist configuration as we don't want to revert", v66, 2u);
        swift_slowDealloc(v66, -1, -1);
      }

      v67 = *(void **)&v6[OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_userDefaults];
      v68 = String._bridgeToObjectiveC()();
      objc_msgSend(v67, "setURL:forKey:", 0, v68);

      return;
    }
    v34 = 1;
  }
  else
  {
    v34 = 0;
  }
  if (qword_101490CD0 != -1)
    swift_once(&qword_101490CD0, sub_10003C734);
  v35 = type metadata accessor for Logger(0);
  sub_10000E918(v35, (uint64_t)qword_101494398);
  v36 = v6;
  swift_bridgeObjectRetain(v10);
  v69 = v36;
  v37 = Logger.logObject.getter(v69);
  v38 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v37, v38))
  {
    v39 = swift_slowAlloc(34, -1);
    v40 = swift_slowAlloc(64, -1);
    v72[0] = v40;
    *(_DWORD *)v39 = 136315906;
    swift_bridgeObjectRetain(v10);
    v70 = (id)sub_1000C28FC(a1, (unint64_t)v10, v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v39 + 4, v39 + 12);
    swift_bridgeObjectRelease_n(v10, 3);
    *(_WORD *)(v39 + 12) = 1024;
    LODWORD(v70) = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, (char *)&v70 + 4, v39 + 14, v39 + 18);
    *(_WORD *)(v39 + 18) = 1024;
    v41 = v69[OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_isApplyingConfiguration];

    LODWORD(v70) = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, (char *)&v70 + 4, v39 + 20, v39 + 24);

    *(_WORD *)(v39 + 24) = 2080;
    v70 = *(id *)&v69[OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_initialGuidanceConfiguration];
    v42 = v70;
    v43 = sub_100008B04(&qword_101494458);
    v44 = String.init<A>(describing:)(&v70, v43);
    v46 = v45;
    v70 = (id)sub_1000C28FC(v44, v45, v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v39 + 26, v39 + 34);

    swift_bridgeObjectRelease(v46);
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "observeValue: was called for %s, but it was ignored. isNavigating: %{BOOL}d, isApplyingConfiguration: %{BOOL}d, initialGuidanceConfiguration: %s", (uint8_t *)v39, 0x22u);
    swift_arrayDestroy(v40, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v39, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v10, 2);
  }
}

void sub_10003BBFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  _BYTE *v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  _DWORD *v25;
  NSObject *v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _DWORD *v31;
  void *v32;
  void *v33;
  _DWORD *v34;
  uint8_t *buf;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;

  v1 = v0;
  v2 = OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_initialGuidanceConfiguration;
  v3 = *(void **)(v0
                + OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_initialGuidanceConfiguration);
  if (v3)
  {
    v4 = (_BYTE *)(v0
                 + OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_userModifiedConfigurationDuringNavigation);
    v5 = *(unsigned __int8 *)(v0
                            + OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_userModifiedConfigurationDuringNavigation);
    v6 = qword_101490CD0;
    v7 = v3;
    if (v5 == 1)
    {
      if (v6 != -1)
        swift_once(&qword_101490CD0, sub_10003C734);
      v8 = type metadata accessor for Logger(0);
      v9 = sub_10000E918(v8, (uint64_t)qword_101494398);
      v10 = Logger.logObject.getter(v9);
      v11 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v10, v11))
      {
        v12 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "navigaitonWillEnd: navigation started with an override, but the user changed configuration during nav -> will not restore initial settings", v12, 2u);
        swift_slowDealloc(v12, -1, -1);
        v13 = v7;
      }
      else
      {
        v13 = v10;
        v10 = v7;
      }

      v32 = *(void **)(v1 + v2);
      *(_QWORD *)(v1 + v2) = 0;
      v33 = v32;
    }
    else
    {
      if (v6 != -1)
        swift_once(&qword_101490CD0, sub_10003C734);
      v20 = type metadata accessor for Logger(0);
      sub_10000E918(v20, (uint64_t)qword_101494398);
      v21 = v7;
      v22 = Logger.logObject.getter(v21);
      v23 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v22, v23))
      {
        v24 = (uint8_t *)swift_slowAlloc(12, -1);
        v36 = swift_slowAlloc(32, -1);
        v39 = v36;
        v37 = v4;
        *(_DWORD *)v24 = 136315138;
        v25 = v24 + 12;
        v34 = v24 + 4;
        buf = v24;
        v26 = v21;
        v27 = -[NSObject description](v26, "description");
        v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
        v30 = v29;

        v38 = sub_1000C28FC(v28, v30, &v39);
        v31 = v25;
        v4 = v37;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v34, v31);

        swift_bridgeObjectRelease(v30);
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "navigationWillEnd: navigation started with an override and the user did not change config during nav -> will apply back previous configuration (%s)", buf, 0xCu);
        swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v36, -1, -1);
        swift_slowDealloc(buf, -1, -1);

      }
      else
      {

      }
      sub_10003AF54(v21);

      v32 = *(void **)(v1 + v2);
      *(_QWORD *)(v1 + v2) = 0;
      v33 = v32;
    }
    sub_100039E6C(v33);

  }
  else
  {
    if (qword_101490CD0 != -1)
      swift_once(&qword_101490CD0, sub_10003C734);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_10000E918(v14, (uint64_t)qword_101494398);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "navigationWillEnd: did not have an initialGuidanceConfiguration so we were not overriding. -> nothing to do", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }

    v19 = *(void **)(v1 + v2);
    *(_QWORD *)(v1 + v2) = 0;
    sub_100039E6C(v19);

    v4 = (_BYTE *)(v1
                 + OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_userModifiedConfigurationDuringNavigation);
  }
  *v4 = 0;
}

uint64_t type metadata accessor for NavigationAlertsOnlyOverrideSynchronizationTask()
{
  return objc_opt_self(_TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask);
}

void sub_10003C0B0(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  unsigned int v4;
  void *v5;
  NSString v6;
  id v7;
  id v8;
  objc_class *v9;
  char *v10;
  id v11;
  id v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  id v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  id v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  id v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  void *v41;
  id v42;
  uint64_t v43;
  os_log_t osloga;
  NSObject *oslog;
  uint64_t v46;
  uint64_t v47;
  objc_super v48;

  v2 = v1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_userModifiedConfigurationDuringNavigation) = 0;
  v3 = objc_msgSend(a1, "configuration");
  v4 = objc_msgSend(v3, "isETAOnlyMode");

  if (v4)
  {
    v5 = *(void **)(v2 + OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_userDefaults);
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "integerForKey:", v6);

    v8 = objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_audioPreferences), "guidanceLevelForTransportType:", 0);
    v9 = (objc_class *)type metadata accessor for NavigationModeGuidanceConfiguration();
    v10 = (char *)objc_allocWithZone(v9);
    *(_QWORD *)&v10[OBJC_IVAR____TtC4Maps35NavigationModeGuidanceConfiguration_guidanceLevel] = v8;
    *(_QWORD *)&v10[OBJC_IVAR____TtC4Maps35NavigationModeGuidanceConfiguration_navigationSignStyle] = v7;
    v48.receiver = v10;
    v48.super_class = v9;
    v11 = objc_msgSendSuper2(&v48, "init");
    v12 = sub_10003C908((uint64_t)v11);
    if (v12)
    {
      v13 = qword_101490CD0;
      v14 = v12;
      if (v13 != -1)
        swift_once(&qword_101490CD0, sub_10003C734);
      v15 = type metadata accessor for Logger(0);
      sub_10000E918(v15, (uint64_t)qword_101494398);
      v16 = v11;
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc(12, -1);
        v43 = swift_slowAlloc(32, -1);
        v47 = v43;
        *(_DWORD *)v19 = 136315138;
        v20 = v16;
        v21 = objc_msgSend(v20, "description");
        v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
        osloga = v14;
        v24 = v23;

        v46 = sub_1000C28FC(v22, v24, &v47);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v19 + 4, v19 + 12);

        v25 = v24;
        v14 = osloga;
        swift_bridgeObjectRelease(v25);
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "navigationStarted: NavigationSession started in ETA only mode. Will save current configuration before overriding: %s", v19, 0xCu);
        swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v43, -1, -1);
        swift_slowDealloc(v19, -1, -1);

      }
      else
      {

      }
      v41 = *(void **)(v2
                     + OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_initialGuidanceConfiguration);
      *(_QWORD *)(v2
                + OBJC_IVAR____TtC4Maps47NavigationAlertsOnlyOverrideSynchronizationTask_initialGuidanceConfiguration) = v16;
      v42 = v16;
      sub_100039E6C(v41);

      sub_10003AF54(v14);
    }
    else
    {
      if (qword_101490CD0 != -1)
        swift_once(&qword_101490CD0, sub_10003C734);
      v30 = type metadata accessor for Logger(0);
      sub_10000E918(v30, (uint64_t)qword_101494398);
      v31 = v11;
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc(12, -1);
        v35 = swift_slowAlloc(32, -1);
        v47 = v35;
        *(_DWORD *)v34 = 136315138;
        v36 = v31;
        v37 = objc_msgSend(v36, "description");
        v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        v40 = v39;

        v46 = sub_1000C28FC(v38, v40, &v47);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v34 + 4, v34 + 12);

        swift_bridgeObjectRelease(v40);
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "navigationStarted: NavigationSession started in ETA only mode, but current configuration (%s) did not need to be overridden.", v34, 0xCu);
        swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v35, -1, -1);
        swift_slowDealloc(v34, -1, -1);

      }
      else
      {

      }
    }
  }
  else
  {
    if (qword_101490CD0 != -1)
      swift_once(&qword_101490CD0, sub_10003C734);
    v26 = type metadata accessor for Logger(0);
    v27 = sub_10000E918(v26, (uint64_t)qword_101494398);
    oslog = Logger.logObject.getter(v27);
    v28 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(oslog, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v28, "navigationStarted: session was not launched in ETA only mode. Nothing to do.", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }

  }
}

uint64_t sub_10003C734()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v0 = type metadata accessor for Logger(0);
  sub_10000E930(v0, qword_101494398);
  sub_10000E918(v0, (uint64_t)qword_101494398);
  v5 = type metadata accessor for NavigationAlertsOnlyOverrideSynchronizationTask();
  v1 = sub_100008B04(&qword_101494460);
  v2 = String.init<A>(describing:)(&v5, v1);
  return Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xEE007370614D2E65, v2, v3);
}

id sub_10003C7D0(void *a1)
{
  void *v1;
  char *v3;
  NSString v4;
  unint64_t v5;
  NSString v6;
  id v7;
  id result;
  char v9;
  objc_super v10;

  v3 = v1;
  v4 = String._bridgeToObjectiveC()();
  v5 = (unint64_t)objc_msgSend(a1, "decodeIntegerForKey:", v4);

  if ((v5 & 0x8000000000000000) != 0)
  {
    v9 = 2;
    result = (id)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, v9, 3451, 0);
    __break(1u);
  }
  else
  {
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(a1, "decodeIntegerForKey:", v6);

    *(_QWORD *)&v3[OBJC_IVAR____TtC4Maps35NavigationModeGuidanceConfiguration_guidanceLevel] = v5;
    *(_QWORD *)&v3[OBJC_IVAR____TtC4Maps35NavigationModeGuidanceConfiguration_navigationSignStyle] = v7;

    v10.receiver = v3;
    v10.super_class = (Class)type metadata accessor for NavigationModeGuidanceConfiguration();
    return objc_msgSendSuper2(&v10, "init");
  }
  return result;
}

id sub_10003C908(uint64_t a1)
{
  objc_class *v2;
  char *v3;
  objc_super v4;

  if (*(_QWORD *)(a1 + OBJC_IVAR____TtC4Maps35NavigationModeGuidanceConfiguration_guidanceLevel) == 1
    && *(_QWORD *)(a1 + OBJC_IVAR____TtC4Maps35NavigationModeGuidanceConfiguration_navigationSignStyle) == 1)
  {
    return 0;
  }
  v2 = (objc_class *)type metadata accessor for NavigationModeGuidanceConfiguration();
  v3 = (char *)objc_allocWithZone(v2);
  *(_QWORD *)&v3[OBJC_IVAR____TtC4Maps35NavigationModeGuidanceConfiguration_guidanceLevel] = 1;
  *(_QWORD *)&v3[OBJC_IVAR____TtC4Maps35NavigationModeGuidanceConfiguration_navigationSignStyle] = 1;
  v4.receiver = v3;
  v4.super_class = v2;
  return objc_msgSendSuper2(&v4, "init");
}

unint64_t sub_10003C994()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101494468;
  if (!qword_101494468)
  {
    v1 = objc_opt_self(NSKeyedUnarchiver);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_101494468);
  }
  return result;
}

unint64_t sub_10003C9D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101491E00;
  if (!qword_101491E00)
  {
    type metadata accessor for NSKeyValueChangeKey(255);
    result = swift_getWitnessTable(byte_100E23D0C, v1);
    atomic_store(result, (unint64_t *)&qword_101491E00);
  }
  return result;
}

double sub_10003CA18(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  double result;

  *(_QWORD *)&result = 136315650;
  *(_DWORD *)a1 = 136315650;
  *(_QWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2080;
  *(_QWORD *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 22) = 1024;
  *(_DWORD *)(a1 + 24) = a4;
  return result;
}

double sub_10003CA44(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)&result = 138412290;
  *(_DWORD *)a1 = 138412290;
  *(_QWORD *)(a1 + 4) = a2;
  return result;
}

id sub_10003CA58()
{
  void *v0;
  Class isa;
  id v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  objc_super v9;

  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v9.receiver = v0;
  v9.super_class = (Class)type metadata accessor for HomeListCompositionalLayout();
  v2 = objc_msgSendSuper2(&v9, "finalLayoutAttributesForDisappearingItemAtIndexPath:", isa);

  v3 = objc_msgSend(v0, "collectionView");
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend(v3, "dataSource");
    if (v5)
    {
      v6 = v5;
      if (objc_msgSend(v5, "collectionView:numberOfItemsInSection:", v4, IndexPath.section.getter()))
      {

        swift_unknownObjectRelease(v6);
        return v2;
      }
      if (v2)
      {
        v7 = v2;
        objc_msgSend(v7, "setAlpha:", 0.0);

      }
      swift_unknownObjectRelease(v6);
    }

  }
  return v2;
}

id sub_10003CBFC()
{
  void *v0;
  NSString v1;
  Class isa;
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  objc_super v10;

  v1 = String._bridgeToObjectiveC()();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v10.receiver = v0;
  v10.super_class = (Class)type metadata accessor for HomeListCompositionalLayout();
  v3 = objc_msgSendSuper2(&v10, "finalLayoutAttributesForDisappearingDecorationElementOfKind:atIndexPath:", v1, isa);

  v4 = objc_msgSend(v0, "collectionView");
  if (v4)
  {
    v5 = v4;
    v6 = objc_msgSend(v4, "dataSource");
    if (v6)
    {
      v7 = v6;
      if (objc_msgSend(v6, "collectionView:numberOfItemsInSection:", v5, IndexPath.section.getter()))
      {

        swift_unknownObjectRelease(v7);
        return v3;
      }
      if (v3)
      {
        v8 = v3;
        objc_msgSend(v8, "setAlpha:", 0.0);

      }
      swift_unknownObjectRelease(v7);
    }

  }
  return v3;
}

id sub_10003D0A0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HomeListCompositionalLayout();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for HomeListCompositionalLayout()
{
  return objc_opt_self(_TtC4Maps27HomeListCompositionalLayout);
}

uint64_t sub_10003D0F0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

id sub_10003D114()
{
  uint64_t v0;

  return (id)(*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_10003D13C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10003D14C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void *sub_10003D164()
{
  uint64_t v0;
  id v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v1 = *(id *)(v0 + OBJC_IVAR____TtC4Maps16PlaceCardContext_placeViewController);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  v3 = *(_QWORD *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
  v2 = *(_QWORD *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v3 >= v2 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v2 > 1, v3 + 1, 1);
  v4 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v3, v1);
  specialized Array._endMutation()(v4);
  v5 = *(void **)(v0 + OBJC_IVAR____TtC4Maps16PlaceCardContext_noteEditorViewController);
  if (v5)
  {
    v6 = v5;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v8 = *(_QWORD *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
    v7 = *(_QWORD *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v8 >= v7 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
    v9 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v6);
    specialized Array._endMutation()(v9);

  }
  return &_swiftEmptyArrayStorage;
}

void sub_10003D2EC()
{
  uint64_t v0;
  uint64_t v1;
  void *Strong;
  void *v3;
  id v4;
  id v5;
  id v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v1 = v0 + OBJC_IVAR____TtC4Maps16PlaceCardContext_chromeViewController;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC4Maps16PlaceCardContext_chromeViewController);
  if (Strong)
  {
    v3 = Strong;
    v4 = objc_msgSend(Strong, "searchPinsManager");

    if (!v4)
    {
      __break(1u);
      goto LABEL_15;
    }
    v5 = objc_msgSend(v4, "singleSearchResultItemSource");

    if (v5)
    {
      v6 = v5;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v8 = *(_QWORD *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      v7 = *(_QWORD *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v8 >= v7 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      v9 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v6);
      specialized Array._endMutation()(v9);

    }
  }
  v10 = (void *)swift_unknownObjectWeakLoadStrong(v1);
  if (!v10)
    return;
  v11 = v10;
  v12 = objc_msgSend(v10, "searchPinsManager");

  if (!v12)
  {
LABEL_15:
    __break(1u);
    return;
  }
  v13 = objc_msgSend(v12, "droppedPinsItemSource");

  if (v13)
  {
    v14 = v13;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v16 = *(_QWORD *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
    v15 = *(_QWORD *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v16 >= v15 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
    v17 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v14);
    specialized Array._endMutation()(v17);

  }
}

void sub_10003D64C(void *a1, void *a2)
{
  void *v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  void **v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;

  v5 = swift_allocObject(&unk_10119D4C8, 24, 7);
  *(_QWORD *)(v5 + 16) = a1;
  v17 = sub_10003D8D0;
  v18 = v5;
  v13 = _NSConcreteStackBlock;
  v14 = 1107296256;
  v15 = sub_1001BB8D4;
  v16 = &unk_10119D4E0;
  v6 = _Block_copy(&v13);
  v7 = v18;
  v8 = a1;
  swift_release(v7);
  objc_msgSend(a2, "addPreparation:", v6);
  _Block_release(v6);
  v9 = swift_allocObject(&unk_10119D518, 24, 7);
  *(_QWORD *)(v9 + 16) = v2;
  v17 = sub_10003D8F0;
  v18 = v9;
  v13 = _NSConcreteStackBlock;
  v14 = 1107296256;
  v15 = sub_1001E2858;
  v16 = &unk_10119D530;
  v10 = _Block_copy(&v13);
  v11 = v18;
  v12 = v2;
  swift_release(v11);
  objc_msgSend(a2, "addCompletion:", v10);
  _Block_release(v10);
}

void sub_10003D78C(void *a1)
{
  id v1;
  void *v2;
  id v3;
  Class isa;

  v1 = objc_msgSend(a1, "searchPinsManager");
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v1, "singleSearchResultItemSource");

    if (v3)
    {
      sub_10000E4BC(0, &qword_101494570, off_101197F50);
      isa = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v3, "setSearchResults:", isa);

    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10003D8AC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10003D8D0()
{
  uint64_t v0;

  sub_10003D78C(*(void **)(v0 + 16));
}

uint64_t sub_10003D8D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10003D8E8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

id sub_10003D8F0()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC4Maps16PlaceCardContext_placeViewController), "resetState");
}

uint64_t sub_10003D910()
{
  uint64_t v0;

  return swift_deallocObject(v0, 25, 7);
}

void sub_10003D934()
{
  uint64_t v0;

  sub_1001EC5B8(*(_BYTE *)(v0 + 24));
}

id sub_10003D95C()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC4Maps16PlaceCardContext_placeViewController);
  objc_msgSend(v1, "setPlaceCardItem:withHistory:", *(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC4Maps16PlaceCardContext_configuration)+ OBJC_IVAR____TtC4Maps29PlaceCardContextConfiguration_placeCardItem), *(unsigned __int8 *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC4Maps16PlaceCardContext_configuration)+ OBJC_IVAR____TtC4Maps29PlaceCardContextConfiguration_shouldInsertInHistory));
  objc_msgSend(v1, "setPlaceCardDelegate:", v0);
  return objc_msgSend(v1, "setContaineeDelegate:", v0);
}

uint64_t sub_10003D9FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

uint64_t sub_10003DA04(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 1, &v4, a1 + 24);
    return 0;
  }
  return result;
}

uint64_t *sub_10003DA70(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(_QWORD *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain(v8);
  }
  return v3;
}

uint64_t sub_10003DAE0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_10003DAF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))();
  return a1;
}

uint64_t sub_10003DB20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))();
  return a1;
}

uint64_t sub_10003DB50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))();
  return a1;
}

uint64_t sub_10003DB80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))();
  return a1;
}

uint64_t sub_10003DBB0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_10003DC60 + 4 * byte_100E25940[(v7 - 1)]))();
}

void sub_10003DCB0(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = &dword_100000004;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for AnyDynamicHashable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10001A6E8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyDynamicHashable);
}

uint64_t sub_10003DE6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, __n128);
  char v13;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _OWORD v21[2];
  uint64_t v22;

  __chkstk_darwin(a1);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v15 - v9;
  v12 = *(void (**)(char *, __n128))(v11 + 16);
  v12((char *)&v15 - v9, v8);
  if (!swift_dynamicCast(&v18, v10, a3, &type metadata for AnyHashable, 6))
  {
    v20 = 0;
    v18 = 0u;
    v19 = 0u;
    sub_100012C08((uint64_t)&v18);
LABEL_6:
    v13 = 0;
    return v13 & 1;
  }
  v21[0] = v18;
  v21[1] = v19;
  v22 = v20;
  ((void (*)(char *, uint64_t, uint64_t))v12)(v6, a2, a3);
  if (!swift_dynamicCast(&v15, v6, a3, &type metadata for AnyHashable, 6))
  {
    v17 = 0;
    v15 = 0u;
    v16 = 0u;
    sub_100012C08((uint64_t)&v15);
    sub_100012C48((uint64_t)v21);
    goto LABEL_6;
  }
  v18 = v15;
  v19 = v16;
  v20 = v17;
  v13 = static AnyHashable.== infix(_:_:)(v21, &v18);
  sub_100012C48((uint64_t)&v18);
  sub_100012C48((uint64_t)v21);
  return v13 & 1;
}

uint64_t sub_10003DFCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = __chkstk_darwin(a1);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16))(v7, v2, v4, v5);
  if (swift_dynamicCast(&v10, v7, v4, &type metadata for AnyHashable, 6))
  {
    v13[0] = v10;
    v13[1] = v11;
    v14 = v12;
    AnyHashable.hash(into:)(a1);
    return sub_100012C48((uint64_t)v13);
  }
  else
  {
    v12 = 0;
    v10 = 0u;
    v11 = 0u;
    return sub_100012C08((uint64_t)&v10);
  }
}

Swift::Int sub_10003E098(uint64_t a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  sub_10003DFCC((uint64_t)v3, a1);
  return Hasher._finalize()();
}

Swift::Int sub_10003E0E4(uint64_t a1, uint64_t a2)
{
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, a1);
  sub_10003DFCC((uint64_t)v4, a2);
  return Hasher._finalize()();
}

uint64_t sub_10003E124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003DE6C(a1, a2, *(_QWORD *)(a3 + 16));
}

Swift::UInt sub_10003E12C(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  Swift::UInt result;
  Swift::UInt v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong
    && (v6 = Strong,
        (swift_dynamicCast(&v7, &v6, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for AnyHashable, 6) & 1) != 0))
  {
    if (*((_QWORD *)&v8 + 1))
    {
      v10[0] = v7;
      v10[1] = v8;
      v11 = v9;
      AnyHashable.hash(into:)(a1);
      return sub_100012C48((uint64_t)v10);
    }
  }
  else
  {
    v9 = 0;
    v7 = 0u;
    v8 = 0u;
  }
  sub_100012C08((uint64_t)&v7);
  result = swift_unknownObjectWeakLoadStrong(v1);
  if (result)
  {
    v5 = result;
    Hasher._combine(_:)(result);
    return swift_unknownObjectRelease(v5);
  }
  return result;
}

Swift::Int sub_10003E1F4()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  sub_10003E12C((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_10003E238(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  sub_10003E12C((uint64_t)v2);
  return Hasher._finalize()();
}

uint64_t sub_10003E270(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100E25978, a1);
}

uint64_t sub_10003E280(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100E259E0, a1);
}

uint64_t sub_10003E2A4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10003E2C4(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

uint64_t type metadata accessor for AnyWeakHashable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10001A6E8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyWeakHashable);
}

uint64_t destroy for RefinementsBar(uint64_t a1)
{

  return swift_release(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for RefinementsBar(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  id v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 24) = v3;
  v5 = (id)v4;
  swift_retain(v3);
  return a1;
}

_QWORD *assignWithCopy for RefinementsBar(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = (void *)a2[1];
  v5 = (void *)a1[1];
  a1[1] = v4;
  v6 = v4;

  v8 = a2[2];
  v7 = a2[3];
  v9 = a1[3];
  a1[2] = v8;
  a1[3] = v7;
  swift_retain(v7);
  swift_release(v9);
  return a1;
}

uint64_t assignWithTake for RefinementsBar(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;

  v4 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for NearbyTransitCategory(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NearbyTransitCategory(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RefinementsBar()
{
  return &type metadata for RefinementsBar;
}

uint64_t sub_10003E4AC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1010658F8, 1);
}

uint64_t sub_10003E4BC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t KeyPath;
  uint64_t v17;
  id v18;
  _QWORD *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v40[2];
  uint64_t v41;
  uint64_t v42;

  v41 = a5;
  v9 = sub_100008B04(&qword_1014946A8);
  __chkstk_darwin(v9);
  v11 = (char *)v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100008B04(&qword_101494698);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v11 = static VerticalAlignment.center.getter(v13);
  *((_QWORD *)v11 + 1) = 0x4018000000000000;
  v11[16] = 0;
  v40[1] = &v11[*(int *)(sub_100008B04(&qword_1014946B8) + 44)];
  KeyPath = swift_getKeyPath(&unk_100E25AE0);
  v17 = swift_getKeyPath(&unk_100E25B08);
  v18 = a2;
  static Published.subscript.getter(&v42, v18, KeyPath, v17);

  swift_release(KeyPath);
  swift_release(v17);
  v19 = (_QWORD *)swift_allocObject(&unk_10119D748, 48, 7);
  v19[2] = a1;
  v19[3] = v18;
  v19[4] = a3;
  v19[5] = a4;
  v20 = v18;
  swift_retain(a4);
  v21 = sub_100008B04(&qword_1014936F0);
  v22 = type metadata accessor for UUID(0);
  v23 = sub_100008B04(&qword_1014946C0);
  v24 = sub_100010D70(&qword_1014946C8, &qword_1014936F0, (const char *)&protocol conformance descriptor for [A]);
  v25 = sub_10003F1B4();
  v26 = sub_10000BC84(&qword_1014946E0, type metadata accessor for RefinementsBarButtonViewModel, (uint64_t)&unk_100E24E70);
  v27 = ForEach<>.init(_:content:)(&v42, sub_10003F1A8, v19, v21, v22, v23, v24, v25, v26);
  LOBYTE(v24) = static Edge.Set.horizontal.getter(v27);
  sub_10000C1FC((uint64_t)v11, (uint64_t)v15, &qword_1014946A8);
  v28 = &v15[*(int *)(v12 + 36)];
  *v28 = v24;
  *(_OWORD *)(v28 + 8) = 0u;
  *(_OWORD *)(v28 + 24) = 0u;
  v28[40] = 1;
  v29 = sub_100010CC4((uint64_t)v11, &qword_1014946A8);
  LOBYTE(v24) = static Edge.Set.bottom.getter(v29);
  v30 = EdgeInsets.init(_all:)(14.0);
  v32 = v31;
  v34 = v33;
  v36 = v35;
  v37 = v41;
  sub_10000C1FC((uint64_t)v15, v41, &qword_101494698);
  v38 = v37 + *(int *)(sub_100008B04(&qword_101494680) + 36);
  *(_BYTE *)v38 = v24;
  *(double *)(v38 + 8) = v30;
  *(_QWORD *)(v38 + 16) = v32;
  *(_QWORD *)(v38 + 24) = v34;
  *(_QWORD *)(v38 + 32) = v36;
  *(_BYTE *)(v38 + 40) = 0;
  return sub_100010CC4((uint64_t)v15, &qword_101494698);
}

uint64_t sub_10003E798@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  void (*v41)(uint64_t, uint64_t);
  id v42;
  uint64_t v43;
  int *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (**v52)(uint64_t, uint64_t);
  uint64_t (*v53)(uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  void (*v70)(uint64_t);
  id v71;
  uint64_t v72;
  int *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  void (**v78)(uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  uint64_t v84;
  uint64_t v85;
  int v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  uint64_t v101;

  v100 = a3;
  v101 = a5;
  v93 = a2;
  v94 = a4;
  v99 = a6;
  v98 = type metadata accessor for RefinementMenu(0);
  __chkstk_darwin(v98);
  v8 = (char *)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v84 - v10;
  v95 = sub_100008B04(&qword_1014946E8);
  __chkstk_darwin(v95);
  v97 = (uint64_t)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v84 - v18;
  v96 = type metadata accessor for RefinementBarButton(0);
  __chkstk_darwin(v96);
  v21 = (char *)&v84 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v24 = (char *)&v84 - v23;
  v25 = (int *)type metadata accessor for RefinementsBarButtonViewModel(0);
  v26 = (uint64_t *)(a1 + v25[8]);
  v27 = *v26;
  if (*v26)
  {
    v28 = v26[3];
    v90 = v26[1];
    v91 = v28;
    LODWORD(v89) = *((_DWORD *)v26 + 4);
    v29 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    v88 = v27;
    v29(v16, a1, v13);
    v30 = v25[6];
    v31 = a1 + v25[5];
    v33 = *(_QWORD *)v31;
    v32 = *(_QWORD *)(v31 + 8);
    v34 = *(unsigned __int8 *)(v31 + 16);
    v92 = v34;
    v35 = v34 == 0;
    if (v34)
      v36 = v33;
    else
      v36 = 0;
    if (v34)
      v37 = v32;
    else
      v37 = 0;
    v84 = v36;
    v85 = v37;
    v87 = v11;
    if (v35)
      v38 = v33;
    else
      v38 = 0;
    if (v35)
      v39 = v32;
    else
      v39 = 0;
    v86 = *(unsigned __int8 *)(a1 + v30);
    v40 = *(_BYTE *)(a1 + v25[7]);
    v41 = (void (*)(uint64_t, uint64_t))swift_allocObject(&unk_10119D798, 48, 7);
    v42 = v100;
    *((_QWORD *)v41 + 2) = v93;
    *((_QWORD *)v41 + 3) = v42;
    v43 = v101;
    *((_QWORD *)v41 + 4) = v94;
    *((_QWORD *)v41 + 5) = v43;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v8, v16, v13);
    v44 = (int *)v98;
    v45 = &v8[*(int *)(v98 + 20)];
    *(_QWORD *)v45 = v38;
    *((_QWORD *)v45 + 1) = v39;
    v46 = &v8[v44[6]];
    v47 = v85;
    *(_QWORD *)v46 = v84;
    *((_QWORD *)v46 + 1) = v47;
    v8[v44[7]] = v86;
    v8[v44[8]] = v40;
    v48 = &v8[v44[9]];
    v49 = (uint64_t)v87;
    v50 = v88;
    v51 = v90;
    *(_QWORD *)v48 = v88;
    *((_QWORD *)v48 + 1) = v51;
    v48[16] = v89 & 1;
    *((_QWORD *)v48 + 3) = v91;
    v52 = (void (**)(uint64_t, uint64_t))&v8[v44[10]];
    *v52 = sub_10003F290;
    v52[1] = v41;
    v53 = type metadata accessor for RefinementMenu;
    sub_10003F29C((uint64_t)v8, v49, type metadata accessor for RefinementMenu);
    v54 = v97;
    sub_1000202AC(v49, v97, type metadata accessor for RefinementMenu);
    swift_storeEnumTagMultiPayload(v54, v95, 0);
    sub_10002126C(v33, v32);
    v55 = sub_10000BC84(&qword_1014946D8, type metadata accessor for RefinementMenu, (uint64_t)&unk_100E2A910);
    v56 = sub_10000BC84(&qword_101494D90, type metadata accessor for RefinementBarButton, (uint64_t)&unk_100E2A8C0);
    swift_bridgeObjectRetain(v50);
    v57 = v100;
    swift_retain(v101);
    _ConditionalContent<>.init(storage:)(v54, v44, v96, v55, v56);
    v58 = v49;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v19, a1, v13);
    v59 = v25[6];
    v60 = a1 + v25[5];
    v62 = *(_QWORD *)v60;
    v61 = *(_QWORD *)(v60 + 8);
    v63 = *(unsigned __int8 *)(v60 + 16);
    v92 = v63;
    v64 = v63 == 0;
    if (v63)
      v65 = v62;
    else
      v65 = 0;
    if (v63)
      v66 = v61;
    else
      v66 = 0;
    v89 = v65;
    v90 = v66;
    if (v64)
      v67 = v62;
    else
      v67 = 0;
    if (v64)
      v68 = v61;
    else
      v68 = 0;
    v88 = v68;
    LODWORD(v91) = *(unsigned __int8 *)(a1 + v59);
    v69 = *(_BYTE *)(a1 + v25[7]);
    v70 = (void (*)(uint64_t))swift_allocObject(&unk_10119D770, 48, 7);
    v71 = v100;
    *((_QWORD *)v70 + 2) = v93;
    *((_QWORD *)v70 + 3) = v71;
    v72 = v101;
    *((_QWORD *)v70 + 4) = v94;
    *((_QWORD *)v70 + 5) = v72;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v21, v19, v13);
    v73 = (int *)v96;
    v74 = &v21[*(int *)(v96 + 20)];
    v75 = v88;
    *(_QWORD *)v74 = v67;
    *((_QWORD *)v74 + 1) = v75;
    v76 = &v21[v73[6]];
    v77 = v90;
    *(_QWORD *)v76 = v89;
    *((_QWORD *)v76 + 1) = v77;
    v21[v73[7]] = v91;
    v21[v73[8]] = v69;
    v78 = (void (**)(uint64_t))&v21[v73[9]];
    *v78 = sub_10003F254;
    v78[1] = v70;
    v53 = type metadata accessor for RefinementBarButton;
    sub_10003F29C((uint64_t)v21, (uint64_t)v24, type metadata accessor for RefinementBarButton);
    v79 = v97;
    sub_1000202AC((uint64_t)v24, v97, type metadata accessor for RefinementBarButton);
    swift_storeEnumTagMultiPayload(v79, v95, 1);
    sub_10002126C(v62, v61);
    v80 = sub_10000BC84(&qword_1014946D8, type metadata accessor for RefinementMenu, (uint64_t)&unk_100E2A910);
    v81 = sub_10000BC84(&qword_101494D90, type metadata accessor for RefinementBarButton, (uint64_t)&unk_100E2A8C0);
    v82 = v100;
    swift_retain(v101);
    _ConditionalContent<>.init(storage:)(v79, v98, v73, v80, v81);
    v58 = (uint64_t)v24;
  }
  return sub_1000202F0(v58, v53);
}

void sub_10003ECCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, char *))
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v9 = sub_100008B04((uint64_t *)&unk_10149AA90);
  __chkstk_darwin(v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(a4 + OBJC_IVAR____TtC4Maps23RefinementsBarViewModel_tapInteractionEnabled) == 1)
  {
    v12 = type metadata accessor for UUID(0);
    v13 = *(_QWORD *)(v12 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v11, a2, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
    a5(a1, v11);
    sub_100010CC4((uint64_t)v11, (uint64_t *)&unk_10149AA90);
  }
}

void sub_10003EDBC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, char *))
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v7 = sub_100008B04((uint64_t *)&unk_10149AA90);
  __chkstk_darwin(v7);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(a3 + OBJC_IVAR____TtC4Maps23RefinementsBarViewModel_tapInteractionEnabled) == 1)
  {
    v10 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
    a4(a1, v9);
    sub_100010CC4((uint64_t)v9, (uint64_t *)&unk_10149AA90);
  }
}

uint64_t sub_10003EE88()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD v11[4];

  v1 = *v0;
  v2 = v0[3];
  v3 = static Axis.Set.horizontal.getter();
  v4 = swift_allocObject(&unk_10119D720, 48, 7);
  *(_QWORD *)(v4 + 16) = v1;
  v5 = *(_OWORD *)(v0 + 1);
  *(_OWORD *)(v4 + 24) = v5;
  *(_QWORD *)(v4 + 40) = v2;
  v11[2] = sub_10003EF70;
  v11[3] = v4;
  v6 = (id)v5;
  swift_retain(v2);
  v7 = sub_100008B04(&qword_101494680);
  v8 = sub_10003EF9C();
  ScrollView.init(_:showsIndicators:content:)(v3, 0, sub_10003EF7C, v11, v7, v8);
  v9 = sub_100008B04(&qword_1014946B0);
  ScrollView.scrollsContentToBeginningInRightToLeft.setter(1, v9);
  return swift_release(v4);
}

uint64_t sub_10003EF70@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10003E4BC(*(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

uint64_t sub_10003EF7C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

unint64_t sub_10003EF9C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101494688;
  if (!qword_101494688)
  {
    v1 = sub_10000E5D4(&qword_101494680);
    v2[0] = sub_10003F008();
    v2[1] = &protocol witness table for _PaddingLayout;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101494688);
  }
  return result;
}

unint64_t sub_10003F008()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101494690;
  if (!qword_101494690)
  {
    v1 = sub_10000E5D4(&qword_101494698);
    v2[0] = sub_100010D70(&qword_1014946A0, &qword_1014946A8, (const char *)&protocol conformance descriptor for HStack<A>);
    v2[1] = &protocol witness table for _PaddingLayout;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101494690);
  }
  return result;
}

uint64_t sub_10003F08C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10003F0AC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100E25AE0);
  v5 = swift_getKeyPath(&unk_100E25B08);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_10003F12C(uint64_t *a1, void **a2)
{
  uint64_t v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100E25AE0);
  v5 = swift_getKeyPath(&unk_100E25B08);
  v7 = v2;
  swift_bridgeObjectRetain(v2);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_10003F1A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10003E798(a1, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), a2);
}

unint64_t sub_10003F1B4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1014946D0;
  if (!qword_1014946D0)
  {
    v1 = sub_10000E5D4(&qword_1014946C0);
    v2[0] = sub_10000BC84(&qword_1014946D8, type metadata accessor for RefinementMenu, (uint64_t)&unk_100E2A910);
    v2[1] = sub_10000BC84(&qword_101494D90, type metadata accessor for RefinementBarButton, (uint64_t)&unk_100E2A8C0);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_1014946D0);
  }
  return result;
}

void sub_10003F254(uint64_t a1)
{
  uint64_t v1;

  sub_10003EDBC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(uint64_t, char *))(v1 + 32));
}

uint64_t sub_10003F264()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_10003F290(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10003ECCC(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(uint64_t, char *))(v2 + 32));
}

uint64_t sub_10003F29C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10003F2E0()
{
  return sub_100010D70(&qword_1014946F0, &qword_1014946F8, byte_100E2D3E0);
}

uint64_t sub_10003F400(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  objc_class *v12;
  unsigned __int8 v13;
  unint64_t v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  id v22;
  objc_super v23;
  _QWORD v24[3];
  uint64_t v25;

  sub_1000110D4(a2, (uint64_t)v24);
  v5 = v25;
  if (v25)
  {
    v6 = sub_10000BE88(v24, v25);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = __chkstk_darwin(v6);
    v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v7 + 16))(v10, v8);
    v11 = _bridgeAnythingToObjectiveC<A>(_:)(v10, v5);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v5);
    sub_10000BEAC(v24);
  }
  else
  {
    v11 = 0;
  }
  v12 = (objc_class *)type metadata accessor for LibraryAddCollectionItemViewController();
  v23.receiver = v2;
  v23.super_class = v12;
  v13 = objc_msgSendSuper2(&v23, "searchDataSource:shouldFilterItem:", a1, v11);
  swift_unknownObjectRelease(v11);
  if ((v13 & 1) != 0)
    return 1;
  sub_1000110D4(a2, (uint64_t)v24);
  if (v25)
  {
    v15 = sub_10003FED0();
    if ((swift_dynamicCast(&v22, v24, (char *)&type metadata for Any + 8, v15, 6) & 1) != 0)
    {
      v16 = v22;
      v17 = objc_msgSend(v22, "mapItem");
      if (v17)
      {
        v18 = v17;
        sub_10003FA44(v17, (void (*)(_QWORD))&type metadata accessor for CollectionPlaceItemRequest, (uint64_t (*)(void))&CollectionPlaceItemRequest.__allocating_init(), (uint64_t (*)(void *))&dispatch thunk of CollectionPlaceItemRequest.fetchSync(options:));
        v20 = v19;

        if (v20)
        {

          return 1;
        }
      }
      else
      {

      }
    }
  }
  else
  {
    sub_10000C180((uint64_t)v24);
  }
  return 0;
}

void sub_10003F650(void *a1)
{
  void *v1;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  _QWORD aBlock[5];
  _QWORD *v18;

  sub_10003FA44(a1, (void (*)(_QWORD))&type metadata accessor for CollectionPlaceItemRequest, (uint64_t (*)(void))&CollectionPlaceItemRequest.__allocating_init(), (uint64_t (*)(void *))&dispatch thunk of CollectionPlaceItemRequest.fetchSync(options:));
  v4 = v3;

  if (!v4)
  {
    v5 = objc_msgSend(a1, "_geoMapItem");
    if (v5)
    {
      v6 = v5;
      v7 = objc_msgSend((id)objc_opt_self(GEOMapItemStorage), "mapItemStorageForGEOMapItem:", v5);
      if (v7)
      {
        v16 = v7;
        if ((objc_msgSend(a1, "_maps_canRenameCollectionItem") & 1) != 0)
        {
          v8 = (void *)objc_opt_self(UIViewController);
          v9 = (_QWORD *)swift_allocObject(&unk_10119D800, 40, 7);
          v9[2] = v1;
          v9[3] = a1;
          v9[4] = v16;
          aBlock[4] = sub_10003FEA8;
          v18 = v9;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = sub_10003F86C;
          aBlock[3] = &unk_10119D818;
          v10 = _Block_copy(aBlock);
          v11 = v18;
          v12 = v1;
          v13 = a1;
          v14 = v16;
          swift_release(v11);
          v15 = objc_msgSend(v8, "_maps_viewControllerForRenamingMapItem:saveHandler:cancelHandler:", v13, v10, 0);
          _Block_release(v10);
          objc_msgSend(v12, "presentViewController:animated:completion:", v15, 1, 0);

          swift_unknownObjectRelease(v6);
        }
        else
        {
          sub_10003FC98(a1, v16, 0, 0);
          swift_unknownObjectRelease(v6);

        }
      }
      else
      {
        swift_unknownObjectRelease(v6);
      }
    }
  }
}

uint64_t sub_10003F86C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v6 = v5;
  swift_retain(v2);
  v3(v4, v6);
  swift_release(v2);
  return swift_bridgeObjectRelease(v6);
}

id sub_10003F9F4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LibraryAddCollectionItemViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for LibraryAddCollectionItemViewController()
{
  return objc_opt_self(_TtC4Maps38LibraryAddCollectionItemViewController);
}

void sub_10003FA44(void *a1, void (*a2)(_QWORD), uint64_t (*a3)(void), uint64_t (*a4)(void *))
{
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;

  v8 = objc_msgSend(a1, "_geoMapItem");
  if (!v8)
    goto LABEL_22;
  v9 = v8;
  v10 = objc_msgSend(a1, "_geoMapItemStorageForPersistence");
  v11 = v10;
  if (!v10)
  {
    v12 = 0;
    goto LABEL_9;
  }
  v12 = objc_msgSend(v10, "userValues");

  if (!v12)
  {
LABEL_8:
    v11 = 0;
    goto LABEL_9;
  }
  v13 = objc_msgSend(v12, "name");

  if (!v13)
  {
    v12 = 0;
    goto LABEL_8;
  }
  v12 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v11 = v14;

LABEL_9:
  v15 = objc_allocWithZone((Class)type metadata accessor for MapsSyncQueryPredicate(0));
  v16 = (void *)MapsSyncQueryPredicate.init(mapItem:customName:)(v9, v12, v11);
  v17 = objc_allocWithZone((Class)type metadata accessor for MapsSyncRange(0));
  v18 = v16;
  v19 = MapsSyncRange.init(offset:limit:)(0, 1);
  v20 = objc_allocWithZone((Class)type metadata accessor for MapsSyncQueryOptions(0));
  v21 = (void *)MapsSyncQueryOptions.init(predicate:sortDescriptors:range:)(v16, 0, v19);
  a2(0);
  v22 = (void *)a3();
  v23 = v21;
  v24 = a4(v21);

  if ((unint64_t)v24 >> 62)
  {
    if (v24 < 0)
      v26 = v24;
    else
      v26 = v24 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v24);
    v27 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(v24);
    if (!v27)
      goto LABEL_14;
  }
  else if (!*(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_14:

    swift_bridgeObjectRelease(v24);
    return;
  }
  if ((v24 & 0xC000000000000001) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)(0, v24);
    goto LABEL_14;
  }
  if (*(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v25 = *(id *)(v24 + 32);
    goto LABEL_14;
  }
  __break(1u);
LABEL_22:
  __break(1u);
}

void sub_10003FC98(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;

  v8 = sub_100008B04((uint64_t *)&unk_10149AA90);
  __chkstk_darwin(v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CollectionPlaceItem(0);
  v11 = (void *)MapsSyncObject.__allocating_init()();
  v12 = a2;
  dispatch thunk of CollectionPlaceItem.mapItemStorage.setter(a2);
  v13 = a4;
  if (!a4)
  {
    v14 = objc_msgSend(a1, "name");
    if (v14)
    {
      v15 = v14;
      a3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v13 = v16;

    }
    else
    {
      a3 = 0;
      v13 = 0;
    }
  }
  swift_bridgeObjectRetain(a4);
  dispatch thunk of CollectionPlaceItem.customName.setter(a3, v13);
  sub_10003FA44(a1, (void (*)(_QWORD))&type metadata accessor for FavoriteItemRequest, (uint64_t (*)(void))&FavoriteItemRequest.__allocating_init(), (uint64_t (*)(void *))&dispatch thunk of FavoriteItemRequest.fetchSync(options:));
  if (v17)
  {
    v18 = v17;
    dispatch thunk of CollectionPlaceItem.type.setter(2);
    v19 = v18;
    dispatch thunk of MapsSyncObject.identifier.getter();

    dispatch thunk of CollectionPlaceItem.originalIdentifier.setter(v10);
  }
  type metadata accessor for MapsSyncStore(0);
  v20 = (void *)static MapsSyncStore.sharedStore.getter();
  v21 = sub_100008B04((uint64_t *)&unk_101493B10);
  v22 = swift_allocObject(v21, 40, 7);
  *(_OWORD *)(v22 + 16) = xmmword_100E23F50;
  *(_QWORD *)(v22 + 32) = v11;
  v26 = v22;
  specialized Array._endMutation()(v22);
  v23 = v26;
  v24 = v11;
  dispatch thunk of MapsSyncStore.save(_:)(v23);
  swift_bridgeObjectRelease(v23);

}

uint64_t sub_10003FE74()
{
  id *v0;

  return swift_deallocObject(v0, 40, 7);
}

void sub_10003FEA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10003FC98(*(void **)(v2 + 24), *(void **)(v2 + 32), a1, a2);
}

uint64_t sub_10003FEB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10003FEC8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_10003FED0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101494728;
  if (!qword_101494728)
  {
    v1 = objc_opt_self(MKLocalSearchCompletion);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_101494728);
  }
  return result;
}

id sub_100040094()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  id v5;

  v1 = OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel____lazy_storage___chargerSymbolString;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel____lazy_storage___chargerSymbolString);
  v3 = v2;
  if (v2 == (void *)1)
  {
    v3 = sub_1000400FC();
    v4 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v3;
    v5 = v3;
    sub_100042EEC(v4);
  }
  sub_100042F44(v2);
  return v3;
}

id sub_1000400FC()
{
  id result;
  void *v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;

  result = objc_msgSend((id)objc_opt_self(UIFont), "_mapsCar_fontForTextStyle:weight:", UIFontTextStyleCaption2, UIFontWeightThin);
  if (result)
  {
    v1 = result;
    v2 = (void *)objc_opt_self(MUEVChargingHelper);
    v3 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithFont:scale:", v1, 1);

    v4 = objc_msgSend(v2, "evPlugIconWithConfiguration:", v3);
    if (!v4)
      return 0;
    v5 = objc_msgSend((id)objc_opt_self(NSTextAttachment), "textAttachmentWithImage:", v4);
    v6 = objc_msgSend((id)objc_opt_self(NSAttributedString), "attributedStringWithAttachment:", v5);

    return v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id CarPlaceCardEVChargingViewModel.__allocating_init(mapItem:virtualGarageService:)(void *a1, void *a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return CarPlaceCardEVChargingViewModel.init(mapItem:virtualGarageService:)(a1, a2);
}

id CarPlaceCardEVChargingViewModel.init(mapItem:virtualGarageService:)(void *a1, void *a2)
{
  void *v2;
  void *v3;
  id v6;
  void *v7;
  id result;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  Class isa;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ObjectType;

  v3 = v2;
  v6 = objc_msgSend(a1, "_identifier");
  if (!v6)
    goto LABEL_15;
  v7 = v6;
  result = objc_msgSend(a1, "_geoMapItem");
  if (!result)
  {
    __break(1u);
    goto LABEL_18;
  }
  v9 = result;
  v10 = objc_msgSend(result, "_evCharger");
  swift_unknownObjectRelease(v9);
  if (!v10)
  {

LABEL_15:
    ObjectType = swift_getObjectType(v3);
    swift_deallocPartialClassInstance(v3, ObjectType, 112, 7);
    return 0;
  }
  v11 = objc_msgSend(v10, "plugs");

  v12 = sub_10000E4BC(0, &qword_101494730, GEOEVChargerPlug_ptr);
  v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v12);

  if (!((unint64_t)v13 >> 62))
  {
    if (*(uint64_t *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10) > 0)
      goto LABEL_6;
    goto LABEL_14;
  }
  if (v13 < 0)
    v19 = v13;
  else
    v19 = v13 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v13);
  v20 = _CocoaArrayWrapper.endIndex.getter(v19);
  swift_bridgeObjectRelease(v13);
  if (v20 <= 0)
  {
LABEL_14:

    swift_bridgeObjectRelease(v13);
    goto LABEL_15;
  }
LABEL_6:
  result = objc_msgSend(a1, "_geoMapItem");
  if (!result)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v14 = result;
  v15 = objc_msgSend(result, "_evCharger");
  result = (id)swift_unknownObjectRelease(v14);
  if (v15)
  {
    v16 = objc_msgSend(v15, "aggregatedAvailabilityInfo");

    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v13);
    v18 = objc_msgSend(v3, "initWithMapItemIdentifier:plugs:initialAggregatedAvailabilityInfo:virtualGarageService:", v7, isa, v16, a2);

    return v18;
  }
LABEL_19:
  __break(1u);
  return result;
}

char *CarPlaceCardEVChargingViewModel.__allocating_init(mapItemIdentifier:plugs:initialAggregatedAvailabilityInfo:virtualGarageService:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  objc_class *v4;
  id v9;

  v9 = objc_allocWithZone(v4);
  return CarPlaceCardEVChargingViewModel.init(mapItemIdentifier:plugs:initialAggregatedAvailabilityInfo:virtualGarageService:)(a1, a2, a3, a4);
}

char *CarPlaceCardEVChargingViewModel.init(mapItemIdentifier:plugs:initialAggregatedAvailabilityInfo:virtualGarageService:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  _BYTE *v4;
  _BYTE *v5;
  objc_class *ObjectType;
  _QWORD *v11;
  id v12;
  id v13;
  char *v14;
  id v15;
  id v16;
  id v17;
  char *v18;
  void *v19;
  char *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  _QWORD v25[5];
  uint64_t v26;
  objc_super v27;

  v5 = v4;
  ObjectType = (objc_class *)swift_getObjectType(v5);
  *(_QWORD *)&v5[OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel_sections] = _swiftEmptyArrayStorage;
  v11 = &v5[OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel_summaryTitle];
  *v11 = 0;
  v11[1] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel_summaryDescription] = 0;
  swift_unknownObjectWeakInit(&v5[OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel_observer], 0);
  v5[OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel_isActive] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel_selectedVehicle] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel____lazy_storage___chargerSymbolString] = 1;
  *(_QWORD *)&v5[OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel_mapItemIdentifier] = a1;
  *(_QWORD *)&v5[OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel_plugs] = a2;
  *(_QWORD *)&v5[OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel_initialAggregatedAvailabilityInfo] = a3;
  *(_QWORD *)&v5[OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel_virtualGarageService] = a4;
  v12 = objc_allocWithZone((Class)MUEVChargerAvailabilityDownloader);
  v13 = a4;
  v14 = v5;
  v15 = a1;
  v16 = a3;
  v17 = objc_msgSend(v12, "initWithMapItemIdentifier:", v15);
  *(_QWORD *)&v14[OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel_availabilityRefresher] = v17;

  v27.receiver = v14;
  v27.super_class = ObjectType;
  v18 = (char *)objc_msgSendSuper2(&v27, "init");
  v19 = *(void **)&v18[OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel_availabilityRefresher];
  v20 = v18;
  objc_msgSend(v19, "setDelegate:", v20);
  v21 = *(void **)&v20[OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel_virtualGarageService];
  if (v21)
  {
    v22 = swift_allocObject(&unk_10119D850, 24, 7);
    swift_unknownObjectWeakInit(v22 + 16, v20);
    v25[4] = sub_100040A4C;
    v26 = v22;
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 1107296256;
    v25[2] = sub_1000142F0;
    v25[3] = &unk_10119D868;
    v23 = _Block_copy(v25);
    swift_release(v26);
    objc_msgSend(v21, "virtualGarageGetGarageWithReply:", v23);
    _Block_release(v23);
  }

  return v20;
}

uint64_t sub_10004076C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10004081C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD aBlock[5];
  uint64_t v28;
  char v29[24];

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&aBlock[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&aBlock[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3 += 16;
  swift_beginAccess(a3, v29, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(a3);
  if (result)
  {
    v14 = (void *)result;
    sub_10000E4BC(0, (unint64_t *)&qword_101492FA0, OS_dispatch_queue_ptr);
    v15 = static OS_dispatch_queue.main.getter();
    v26 = v6;
    v16 = (void *)v15;
    v17 = swift_allocObject(&unk_10119D920, 32, 7);
    *(_QWORD *)(v17 + 16) = v14;
    *(_QWORD *)(v17 + 24) = a1;
    aBlock[4] = sub_100042F80;
    v28 = v17;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1001BB8D4;
    aBlock[3] = &unk_10119D938;
    v18 = _Block_copy(aBlock);
    v19 = v28;
    v20 = a1;
    v21 = v14;
    v22 = swift_release(v19);
    static DispatchQoS.unspecified.getter(v22);
    aBlock[0] = _swiftEmptyArrayStorage;
    v23 = sub_10000BC84((unint64_t *)&qword_101492BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v24 = sub_100008B04((uint64_t *)&unk_101492FB0);
    v25 = sub_10000E588();
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v24, v25, v5, v23);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v18);
    _Block_release(v18);

    (*(void (**)(char *, uint64_t))(v26 + 8))(v8, v5);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  return result;
}

uint64_t sub_100040A4C(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10004081C(a1, a2, v2);
}

void *sub_100040A54(uint64_t a1, id a2)
{
  id v3;
  void *v4;
  void *result;
  void *v6;

  v3 = objc_msgSend(a2, "selectedVehicle");
  v4 = *(void **)(a1 + OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel_selectedVehicle);
  *(_QWORD *)(a1 + OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel_selectedVehicle) = v3;

  sub_100040B0C();
  result = (void *)sub_100040F4C();
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel_isActive) == 1)
  {
    result = (void *)swift_unknownObjectWeakLoadStrong(a1 + OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel_observer);
    if (result)
    {
      v6 = result;
      objc_msgSend(result, "evChargingViewModelDidUpdate:", a1);
      return (void *)swift_unknownObjectRelease(v6);
    }
  }
  return result;
}

uint64_t sub_100040AF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100040B04(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_100040B0C()
{
  uint64_t v0;
  void *v1;
  id v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  id v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t inited;
  void *v26;
  NSString *v27;
  id v28;
  unint64_t v29;
  id v30;
  NSString v31;
  Class isa;
  id v33;
  void *v34;
  _BYTE v35[72];
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel_initialAggregatedAvailabilityInfo);
  if (v1)
  {
    v2 = v1;
    if (objc_msgSend(v2, "_realTimePlugAvailabilityStatus"))
    {
      if (qword_101490ED0 != -1)
        swift_once(&qword_101490ED0, sub_10011833C);
      v3._countAndFlagsBits = 0xD000000000000021;
      v36._object = (void *)0x8000000100E43930;
      v3._object = (void *)0x8000000100E43A10;
      v4._countAndFlagsBits = 0x6C62616C69617641;
      v4._object = (void *)0xED0000776F4E2065;
      v36._countAndFlagsBits = 0xD000000000000039;
      v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)qword_1014D4B80, v4, v36);
      v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel_summaryTitle + 8);
      *(Swift::String *)(v0 + OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel_summaryTitle) = v5;
      swift_bridgeObjectRelease(v6);
      v7 = sub_10004293C((uint64_t)objc_msgSend(v2, "availableEVChargers"), (uint64_t)objc_msgSend(v2, "totalEVChargers"));

      v8 = *(void **)(v0 + OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel_summaryDescription);
      *(_QWORD *)(v0 + OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel_summaryDescription) = v7;

    }
    else
    {
      if (qword_101490ED0 != -1)
        swift_once(&qword_101490ED0, sub_10011833C);
      v12._countAndFlagsBits = 0xD00000000000001CLL;
      v37._object = (void *)0x8000000100E43930;
      v12._object = (void *)0x8000000100E43A40;
      v13._countAndFlagsBits = 0x7372656772616843;
      v13._object = (void *)0xE800000000000000;
      v37._countAndFlagsBits = 0xD000000000000039;
      v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v12, (Swift::String_optional)0, (NSBundle)qword_1014D4B80, v13, v37);
      v15 = *(_QWORD *)(v0 + OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel_summaryTitle + 8);
      *(Swift::String *)(v0 + OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel_summaryTitle) = v14;
      swift_bridgeObjectRelease(v15);
      v16._countAndFlagsBits = 0xD00000000000001DLL;
      v38._countAndFlagsBits = 0xD00000000000003ALL;
      v38._object = (void *)0x8000000100E43A80;
      v16._object = (void *)0x8000000100E43A60;
      v17._countAndFlagsBits = 0x61746F7420646C25;
      v17._object = (void *)0xE90000000000006CLL;
      v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, (Swift::String_optional)0, (NSBundle)qword_1014D4B80, v17, v38);
      v19 = sub_100008B04((uint64_t *)&unk_10149A4F0);
      v20 = swift_allocObject(v19, 72, 7);
      *(_OWORD *)(v20 + 16) = xmmword_100E22F40;
      v21 = objc_msgSend(v2, "totalEVChargers");
      *(_QWORD *)(v20 + 56) = &type metadata for UInt;
      *(_QWORD *)(v20 + 64) = &protocol witness table for UInt;
      *(_QWORD *)(v20 + 32) = v21;
      String.init(format:_:)(v18._countAndFlagsBits, v18._object, v20);
      v23 = v22;
      swift_bridgeObjectRelease(v18._object);
      v24 = sub_100008B04(&qword_10149B740);
      inited = swift_initStackObject(v24, v35);
      *(_OWORD *)(inited + 16) = xmmword_100E22F40;
      *(_QWORD *)(inited + 32) = NSForegroundColorAttributeName;
      v26 = (void *)objc_opt_self(UIColor);
      v27 = NSForegroundColorAttributeName;
      v28 = objc_msgSend(v26, "labelColor");
      *(_QWORD *)(inited + 64) = sub_10000E4BC(0, (unint64_t *)&qword_101493C20, UIColor_ptr);
      *(_QWORD *)(inited + 40) = v28;
      v29 = sub_100009A30(inited);
      v30 = objc_allocWithZone((Class)NSAttributedString);
      v31 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v23);
      type metadata accessor for Key(0);
      sub_10000BC84((unint64_t *)&qword_101491E10, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100E23D50);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v29);
      v33 = objc_msgSend(v30, "initWithString:attributes:", v31, isa);

      v34 = *(void **)(v0 + OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel_summaryDescription);
      *(_QWORD *)(v0 + OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel_summaryDescription) = v33;

    }
  }
  else
  {
    v9 = (_QWORD *)(v0 + OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel_summaryTitle);
    v10 = *(_QWORD *)(v0 + OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel_summaryTitle + 8);
    *v9 = 0;
    v9[1] = 0;
    swift_bridgeObjectRelease(v10);
    v11 = *(void **)(v0 + OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel_summaryDescription);
    *(_QWORD *)(v0 + OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel_summaryDescription) = 0;

  }
}

uint64_t sub_100040F4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  Swift::UInt32 v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  int64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  int *v33;
  id v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  int v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  id v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  _QWORD *v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  Swift::String v71;
  Swift::String v72;
  Swift::String v73;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  char *v91;
  Swift::String v92;
  Swift::String v93;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel_plugs);
  v91 = (char *)&_swiftEmptyDictionarySingleton;
  if ((unint64_t)v1 >> 62)
    goto LABEL_22;
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v1);
  while (v2)
  {
    v3 = &_swiftEmptyDictionarySingleton;
    v4 = 4;
    while (1)
    {
      v9 = (v1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, v1)
         : *(id *)(v1 + 8 * v4);
      v10 = v9;
      v11 = v4 - 3;
      if (__OFADD__(v4 - 4, 1))
        break;
      v12 = objc_msgSend(v9, "connectorType");
      v14 = sub_1000C1948(v12);
      v15 = v3[2];
      v16 = (v13 & 1) == 0;
      v17 = v15 + v16;
      if (__OFADD__(v15, v16))
        goto LABEL_20;
      v18 = v13;
      if (v3[3] < v17)
      {
        sub_1000D90AC(v17, 1);
        v3 = v91;
        v17 = sub_1000C1948(v12);
        if ((v18 & 1) != (v19 & 1))
        {
          type metadata accessor for GEOEVChargerPlugConnectorType(0);
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v86);
          __break(1u);
          swift_release(v91);
          __break(1u);
          JUMPOUT(0x100041754);
        }
        v14 = v17;
      }
      if ((v18 & 1) != 0)
      {
        v5 = (_QWORD *)(v3[7] + 8 * v14);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v17);
        v7 = *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v6 = *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v7 >= v6 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
        v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v10);
        specialized Array._endMutation()(v8);
      }
      else
      {
        v20 = sub_100008B04((uint64_t *)&unk_101493B10);
        v21 = swift_allocObject(v20, 40, 7);
        *(_OWORD *)(v21 + 16) = xmmword_100E23F50;
        *(_QWORD *)(v21 + 32) = v10;
        v90 = v21;
        specialized Array._endMutation()(v21);
        v3[(v14 >> 6) + 8] |= 1 << v14;
        *(_DWORD *)(v3[6] + 4 * v14) = v12;
        *(_QWORD *)(v3[7] + 8 * v14) = v90;
        v22 = v3[2];
        v23 = __OFADD__(v22, 1);
        v24 = v22 + 1;
        if (v23)
          goto LABEL_21;
        v3[2] = v24;
      }
      ++v4;
      if (v11 == v2)
        goto LABEL_27;
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    if (v1 < 0)
      v25 = v1;
    else
      v25 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v1, 2);
    v2 = _CocoaArrayWrapper.endIndex.getter(v25);
    swift_bridgeObjectRelease(v1);
  }
  v3 = &_swiftEmptyDictionarySingleton;
LABEL_27:
  swift_bridgeObjectRelease(v1);
  swift_retain(v3);
  v27 = swift_bridgeObjectRetain(v26);
  v28 = (char *)sub_1000D8780(v27);
  swift_release(v3);
  v91 = v28;
  sub_100041FDC((uint64_t *)&v91);
  swift_release(v3);
  v29 = v91;
  v30 = OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel_selectedVehicle;
  v31 = *(void **)(v87 + OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel_selectedVehicle);
  if (!v31)
  {
    v36 = _swiftEmptyArrayStorage;
    v35 = v91;
LABEL_64:
    swift_bridgeObjectRelease(v36);
    goto LABEL_65;
  }
  v32 = *((_QWORD *)v91 + 2);
  if (v32)
  {
    v88 = OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel_selectedVehicle;
    v89 = v91;
    v33 = (int *)(v91 + 32);
    v34 = v31;
    v35 = _swiftEmptyArrayStorage;
    v36 = _swiftEmptyArrayStorage;
    while (2)
    {
      v39 = *v33++;
      v38 = v39;
      v40 = 8;
      switch(v39)
      {
        case 1:
          goto LABEL_41;
        case 2:
          v40 = 1;
          goto LABEL_41;
        case 3:
          if ((objc_msgSend(v34, "supportedConnectors") & 0x40) != 0)
            goto LABEL_42;
          v40 = 256;
LABEL_41:
          if (((unint64_t)objc_msgSend(v34, "supportedConnectors") & v40) != 0)
          {
LABEL_42:
            if ((swift_isUniquelyReferenced_nonNull_native(v36) & 1) == 0)
              v36 = sub_1000A7D80(0, v36[2] + 1, 1, v36);
            v42 = v36[2];
            v41 = v36[3];
            v43 = v42 + 1;
            if (v42 < v41 >> 1)
            {
              v37 = v36;
            }
            else
            {
              v37 = sub_1000A7D80((_QWORD *)(v41 > 1), v42 + 1, 1, v36);
              v36 = v37;
            }
          }
          else
          {
LABEL_46:
            if ((swift_isUniquelyReferenced_nonNull_native(v35) & 1) != 0)
              v37 = v35;
            else
              v37 = sub_1000A7D80(0, v35[2] + 1, 1, v35);
            v42 = v37[2];
            v44 = v37[3];
            v43 = v42 + 1;
            if (v42 >= v44 >> 1)
              v37 = sub_1000A7D80((_QWORD *)(v44 > 1), v42 + 1, 1, v37);
            v35 = v37;
          }
          v37[2] = v43;
          *((_DWORD *)v37 + v42 + 8) = v38;
          if (--v32)
            continue;

          v29 = v89;
          v30 = v88;
          break;
        case 4:
          v40 = 2;
          goto LABEL_41;
        case 5:
          v40 = 4;
          goto LABEL_41;
        case 6:
          v40 = 16;
          goto LABEL_41;
        case 7:
          v40 = 32;
          goto LABEL_41;
        case 8:
          v40 = 128;
          goto LABEL_41;
        default:
          goto LABEL_46;
      }
      break;
    }
  }
  else
  {
    v35 = _swiftEmptyArrayStorage;
    v36 = _swiftEmptyArrayStorage;
  }
  swift_release(v29);
  v45 = *(void **)(v87 + v30);
  if (!v45 || !v36[2])
    goto LABEL_64;
  v46 = qword_101490ED0;
  v47 = v45;
  if (v46 != -1)
    swift_once(&qword_101490ED0, sub_10011833C);
  v48._countAndFlagsBits = 0xD000000000000020;
  v92._object = (void *)0x8000000100E439A0;
  v48._object = (void *)0x8000000100E43970;
  v49._countAndFlagsBits = 0x402520726F46;
  v49._object = (void *)0xE600000000000000;
  v92._countAndFlagsBits = 0xD000000000000015;
  v50 = NSLocalizedString(_:tableName:bundle:value:comment:)(v48, (Swift::String_optional)0, (NSBundle)qword_1014D4B80, v49, v92);
  v51 = sub_100008B04((uint64_t *)&unk_10149A4F0);
  v52 = swift_allocObject(v51, 72, 7);
  *(_OWORD *)(v52 + 16) = xmmword_100E22F40;
  v53 = objc_msgSend(v47, "displayName");
  v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
  v55 = v47;
  v57 = v56;

  *(_QWORD *)(v52 + 56) = &type metadata for String;
  *(_QWORD *)(v52 + 64) = sub_10000D8E0();
  *(_QWORD *)(v52 + 32) = v54;
  *(_QWORD *)(v52 + 40) = v57;
  v58 = String.init(format:_:)(v50._countAndFlagsBits, v50._object, v52);
  v60 = v59;
  swift_bridgeObjectRelease(v50._object);
  v61 = sub_100041774((uint64_t)v36, (uint64_t)v3, v58, v60);
  v63 = v62;
  v65 = v64;
  swift_bridgeObjectRelease(v36);
  swift_bridgeObjectRelease(v60);
  if (v65)
  {
    v66 = v55;
    v67 = sub_1000A7C5C(0, 1, 1, _swiftEmptyArrayStorage);
    v69 = v67[2];
    v68 = v67[3];
    if (v69 >= v68 >> 1)
      v67 = sub_1000A7C5C((_QWORD *)(v68 > 1), v69 + 1, 1, v67);
    v67[2] = v69 + 1;
    v70 = &v67[3 * v69];
    v70[4] = v61;
    v70[5] = v63;
    v70[6] = v65;

    if (!v35[2])
      goto LABEL_63;
    goto LABEL_66;
  }

LABEL_65:
  v67 = _swiftEmptyArrayStorage;
  if (!v35[2])
  {
LABEL_63:
    swift_release(v3);
    swift_bridgeObjectRelease(v35);
    goto LABEL_77;
  }
LABEL_66:
  if (v67[2])
  {
    if (qword_101490ED0 != -1)
      swift_once(&qword_101490ED0, sub_10011833C);
    v71._countAndFlagsBits = 0xD000000000000022;
    v93._countAndFlagsBits = 0xD000000000000039;
    v93._object = (void *)0x8000000100E43930;
    v71._object = (void *)0x8000000100E43900;
    v72._countAndFlagsBits = 0x684320726568744FLL;
    v72._object = (void *)0xEE00737265677261;
    v73 = NSLocalizedString(_:tableName:bundle:value:comment:)(v71, (Swift::String_optional)0, (NSBundle)qword_1014D4B80, v72, v93);
    countAndFlagsBits = v73._countAndFlagsBits;
    object = v73._object;
  }
  else
  {
    countAndFlagsBits = 0;
    object = (void *)0xE000000000000000;
  }
  v76 = sub_100041774((uint64_t)v35, (uint64_t)v3, countAndFlagsBits, (uint64_t)object);
  v78 = v77;
  v80 = v79;
  swift_bridgeObjectRelease(v35);
  swift_bridgeObjectRelease(object);
  swift_release(v3);
  if (v80)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v67) & 1) == 0)
      v67 = sub_1000A7C5C(0, v67[2] + 1, 1, v67);
    v82 = v67[2];
    v81 = v67[3];
    if (v82 >= v81 >> 1)
      v67 = sub_1000A7C5C((_QWORD *)(v81 > 1), v82 + 1, 1, v67);
    v67[2] = v82 + 1;
    v83 = &v67[3 * v82];
    v83[4] = v76;
    v83[5] = v78;
    v83[6] = v80;
  }
LABEL_77:
  v84 = *(_QWORD *)(v87 + OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel_sections);
  *(_QWORD *)(v87 + OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel_sections) = v67;
  return swift_bridgeObjectRelease(v84);
}

uint64_t sub_100041774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;

  v8 = sub_100008B04(&qword_101494828);
  v52 = *(_QWORD *)(v8 - 8);
  v53 = v8;
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AttributeContainer(0, v9);
  __chkstk_darwin(v12);
  v51 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for AttributedString(0);
  v54 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v55 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a1 + 16);
  if (!v16)
    return 0;
  v46 = a3;
  v47 = a4;
  swift_bridgeObjectRetain(a1);
  v17 = 0;
  v18 = _swiftEmptyArrayStorage;
  v49 = v11;
  v50 = a1;
  v48 = v14;
  while (1)
  {
    if (!*(_QWORD *)(a2 + 16))
      goto LABEL_4;
    v19 = sub_1000C1948(*(_DWORD *)(a1 + 4 * v17 + 32));
    if ((v20 & 1) == 0)
      goto LABEL_4;
    v21 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v19);
    if (!((unint64_t)v21 >> 62))
    {
      v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v19));
      if (v22)
        break;
      goto LABEL_3;
    }
    v44 = v21 < 0 ? *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v19) : v21 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v19));
    if (_CocoaArrayWrapper.endIndex.getter(v44))
      break;
LABEL_3:
    swift_bridgeObjectRelease(v21);
LABEL_4:
    if (v16 == ++v17)
    {
      swift_bridgeObjectRelease(a1);
      swift_bridgeObjectRetain(v47);
      return v46;
    }
  }
  result = sub_100042B00(v21);
  v24 = result;
  v26 = v25;
  v28 = v27;
  if ((v21 & 0xC000000000000001) != 0)
  {
    v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v21);
    goto LABEL_12;
  }
  if (*(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v29 = *(id *)(v21 + 32);
LABEL_12:
    v30 = v29;
    swift_bridgeObjectRelease(v21);
    v31 = objc_msgSend(v30, "connectorTypeDisplayText");

    if (v31)
    {
      v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      v34 = v33;

    }
    else
    {
      v32 = 0;
      v34 = 0xE000000000000000;
    }
    v35 = v51;
    AttributeContainer.init()();
    AttributedString.init(_:attributes:)(v32, v34, v35);
    a1 = v50;
    if ((v28 & 1) != 0)
      v36 = sub_100041AF8(v26);
    else
      v36 = sub_10004293C(v24, v26);
    v37 = v36;
    v39 = v48;
    v38 = (uint64_t)v49;
    v40 = *(int *)(v53 + 48);
    (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v49, v55, v48);
    *(_QWORD *)(v38 + v40) = v37;
    v41 = v37;
    if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
      v18 = (_QWORD *)sub_1000A7A4C(0, v18[2] + 1, 1, (unint64_t)v18);
    v43 = v18[2];
    v42 = v18[3];
    if (v43 >= v42 >> 1)
      v18 = (_QWORD *)sub_1000A7A4C(v42 > 1, v43 + 1, 1, (unint64_t)v18);
    v18[2] = v43 + 1;
    sub_100042EFC(v38, (uint64_t)v18+ ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80))+ *(_QWORD *)(v52 + 72) * v43);

    (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v39);
    goto LABEL_4;
  }
  __break(1u);
  return result;
}

id sub_100041AF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  NSString v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  Class isa;
  id v23;
  uint64_t v24;
  uint64_t inited;
  void *v26;
  NSString *v27;
  id v28;
  unint64_t v29;
  Class v30;
  _BYTE v32[72];
  uint64_t v33;

  v2 = type metadata accessor for AttributedString(0);
  __chkstk_darwin(v2);
  v4 = &v32[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = (void *)objc_opt_self(NSNumberFormatter);
  v6 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedInteger:", a1);
  v7 = objc_msgSend(v5, "localizedStringFromNumber:numberStyle:", v6, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v9 = v8;

  v10 = objc_allocWithZone((Class)NSAttributedString);
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  v12 = objc_msgSend(v10, "initWithString:", v11);

  v13 = sub_100040094();
  if (v13)
  {
    v14 = v13;
    v15 = sub_100008B04((uint64_t *)&unk_101493B10);
    v16 = swift_allocObject(v15, 56, 7);
    *(_OWORD *)(v16 + 16) = xmmword_100E25080;
    *(_QWORD *)(v16 + 32) = v12;
    sub_10000E4BC(0, (unint64_t *)&unk_101494830, NSAttributedString_ptr);
    v17 = v12;
    AttributedString.init(stringLiteral:)(32, 0xE100000000000000);
    v18 = NSAttributedString.init(_:)(v4);
    *(_QWORD *)(v16 + 40) = v18;
    *(_QWORD *)(v16 + 48) = v14;
    v33 = v16;
    specialized Array._endMutation()(v18);
    v19 = v33;
    v20 = (void *)objc_opt_self(MapsUILayout);
    v21 = v14;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v19);
    v23 = objc_msgSend(v20, "buildAttributedDisplayStringForComponents:", isa);

    v12 = objc_msgSend(objc_allocWithZone((Class)NSMutableAttributedString), "initWithAttributedString:", v23);
    v24 = sub_100008B04(&qword_10149B740);
    inited = swift_initStackObject(v24, v32);
    *(_OWORD *)(inited + 16) = xmmword_100E22F40;
    *(_QWORD *)(inited + 32) = NSForegroundColorAttributeName;
    v26 = (void *)objc_opt_self(UIColor);
    v27 = NSForegroundColorAttributeName;
    v28 = objc_msgSend(v26, "systemGrayColor");
    *(_QWORD *)(inited + 64) = sub_10000E4BC(0, (unint64_t *)&qword_101493C20, UIColor_ptr);
    *(_QWORD *)(inited + 40) = v28;
    v29 = sub_100009A30(inited);
    type metadata accessor for Key(0);
    sub_10000BC84((unint64_t *)&qword_101491E10, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100E23D50);
    v30 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v29);
    objc_msgSend(v12, "addAttributes:range:", v30, 0, objc_msgSend(v12, "length"));

  }
  return v12;
}

void CarPlaceCardEVChargingViewModel.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("Maps.CarPlaceCardEVChargingViewModel", 36, "init()", 6, 0);
  __break(1u);
}

void *CarPlaceCardEVChargingViewModel.evChargerAvailabilityDownloader(_:didDownloadAvailabilityWith:)(uint64_t a1, uint64_t a2)
{
  return sub_100042C9C(a2);
}

Swift::Int sub_100041FDC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_1000DDE84(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_100042044(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_100042044(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  Swift::Int v19;
  Swift::Int v20;
  int v21;
  Swift::Int v22;
  int *v23;
  int v24;
  Swift::Int v25;
  int *v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  char v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  Swift::Int v97;
  Swift::Int v98;
  uint64_t v99;
  char *__dst;

  v2 = a1;
  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v3 < 2)
        return result;
      v81 = 0;
      v82 = *v2;
      v83 = 1;
      while (1)
      {
        v84 = *(_DWORD *)(v82 + 4 * v83);
        v85 = v81;
        do
        {
          v86 = *(_DWORD *)(v82 + v85);
          if (v84 >= v86)
            break;
          if (!v82)
            goto LABEL_143;
          *(_DWORD *)(v82 + v85 + 4) = v86;
          *(_DWORD *)(v82 + v85) = v84;
          v85 -= 4;
        }
        while (v85 != -4);
        ++v83;
        v81 += 4;
        if (v83 == v3)
          return result;
      }
    }
    goto LABEL_139;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
LABEL_148:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return result;
  }
  v97 = result;
  v98 = v3;
  if (v3 < 2)
  {
    v9 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v13 = _swiftEmptyArrayStorage[2];
      v12 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_104;
    }
    v96 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    type metadata accessor for GEOEVChargerPlugConnectorType(0);
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)(v6, v7);
    *(_QWORD *)(v8 + 16) = v6;
    v3 = v98;
    v96 = (_QWORD *)v8;
    __dst = (char *)(v8 + 32);
  }
  v10 = 0;
  v11 = *v2;
  v94 = v2;
  v95 = *v2 - 4;
  v12 = (char *)_swiftEmptyArrayStorage;
  v99 = *v2;
  while (1)
  {
    v14 = v10++;
    if (v10 < v3)
    {
      v15 = *(_DWORD *)(v11 + 4 * v10);
      v16 = *(_DWORD *)(v11 + 4 * v14);
      v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        v17 = v15;
        while (1)
        {
          v18 = *(_DWORD *)(v11 + 4 * v10);
          if (v15 < v16 == v18 >= v17)
            break;
          ++v10;
          v17 = v18;
          if (v3 == v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v15 < v16)
      {
        if (v10 < v14)
          goto LABEL_140;
        if (v14 < v10)
        {
          v19 = v10 - 1;
          v20 = v14;
          do
          {
            if (v20 != v19)
            {
              if (!v11)
                goto LABEL_146;
              v21 = *(_DWORD *)(v11 + 4 * v20);
              *(_DWORD *)(v11 + 4 * v20) = *(_DWORD *)(v11 + 4 * v19);
              *(_DWORD *)(v11 + 4 * v19) = v21;
            }
            v60 = ++v20 < v19--;
          }
          while (v60);
        }
      }
    }
    if (v10 < v3)
    {
      if (__OFSUB__(v10, v14))
        goto LABEL_138;
      if (v10 - v14 < v97)
      {
        v22 = v14 + v97;
        if (__OFADD__(v14, v97))
          goto LABEL_141;
        if (v22 >= v3)
          v22 = v3;
        if (v22 < v14)
          goto LABEL_142;
        if (v10 != v22)
        {
          v23 = (int *)(v95 + 4 * v10);
          do
          {
            v24 = *(_DWORD *)(v11 + 4 * v10);
            v25 = v14;
            v26 = v23;
            do
            {
              v27 = *v26;
              if (v24 >= *v26)
                break;
              if (!v11)
                goto LABEL_144;
              *v26 = v24;
              v26[1] = v27;
              --v26;
              ++v25;
            }
            while (v10 != v25);
            ++v10;
            ++v23;
          }
          while (v10 != v22);
          v10 = v22;
        }
      }
    }
    if (v10 < v14)
    {
LABEL_133:
      __break(1u);
      goto LABEL_134;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
      v12 = sub_1000DCBFC(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v29 = *((_QWORD *)v12 + 2);
    v28 = *((_QWORD *)v12 + 3);
    v13 = v29 + 1;
    v11 = v99;
    if (v29 >= v28 >> 1)
    {
      v78 = sub_1000DCBFC((char *)(v28 > 1), v29 + 1, 1, v12);
      v11 = v99;
      v12 = v78;
    }
    *((_QWORD *)v12 + 2) = v13;
    v30 = v12 + 32;
    v31 = &v12[16 * v29 + 32];
    *(_QWORD *)v31 = v14;
    *((_QWORD *)v31 + 1) = v10;
    if (v29)
      break;
    v13 = 1;
LABEL_15:
    v3 = v98;
    if (v10 >= v98)
    {
      v9 = v96;
      v2 = v94;
LABEL_104:
      v96 = v9;
      if (v13 < 2)
      {
LABEL_115:
        v80 = v12;
        goto LABEL_116;
      }
      v87 = *v2;
      while (1)
      {
        v88 = v13 - 2;
        if (v13 < 2)
          break;
        if (!v87)
          goto LABEL_147;
        v79 = v12;
        v89 = v12 + 32;
        v90 = *(_QWORD *)&v12[16 * v88 + 32];
        v91 = *(_QWORD *)&v12[16 * v13 + 24];
        sub_1000426D0((char *)(v87 + 4 * v90), (char *)(v87 + 4 * *(_QWORD *)&v89[16 * v13 - 16]), v87 + 4 * v91, __dst);
        if (v1)
          goto LABEL_95;
        if (v91 < v90)
          goto LABEL_135;
        if ((swift_isUniquelyReferenced_nonNull_native(v79) & 1) == 0)
          v79 = sub_1000DD110((uint64_t)v79);
        if (v88 >= *((_QWORD *)v79 + 2))
          goto LABEL_136;
        v92 = &v79[16 * v88 + 32];
        *(_QWORD *)v92 = v90;
        *((_QWORD *)v92 + 1) = v91;
        v93 = *((_QWORD *)v79 + 2);
        if (v13 > v93)
          goto LABEL_137;
        memmove(&v79[16 * v13 + 16], &v79[16 * v13 + 32], 16 * (v93 - v13));
        v12 = v79;
        *((_QWORD *)v79 + 2) = v93 - 1;
        v13 = v93 - 1;
        if (v93 <= 2)
          goto LABEL_115;
      }
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
      goto LABEL_148;
    }
  }
  while (1)
  {
    v32 = v13 - 1;
    if (v13 >= 4)
    {
      v37 = &v30[16 * v13];
      v38 = *((_QWORD *)v37 - 8);
      v39 = *((_QWORD *)v37 - 7);
      v43 = __OFSUB__(v39, v38);
      v40 = v39 - v38;
      if (v43)
        goto LABEL_122;
      v42 = *((_QWORD *)v37 - 6);
      v41 = *((_QWORD *)v37 - 5);
      v43 = __OFSUB__(v41, v42);
      v35 = v41 - v42;
      v36 = v43;
      if (v43)
        goto LABEL_123;
      v44 = v13 - 2;
      v45 = &v30[16 * v13 - 32];
      v47 = *(_QWORD *)v45;
      v46 = *((_QWORD *)v45 + 1);
      v43 = __OFSUB__(v46, v47);
      v48 = v46 - v47;
      if (v43)
        goto LABEL_125;
      v43 = __OFADD__(v35, v48);
      v49 = v35 + v48;
      if (v43)
        goto LABEL_128;
      if (v49 >= v40)
      {
        v67 = &v30[16 * v32];
        v69 = *(_QWORD *)v67;
        v68 = *((_QWORD *)v67 + 1);
        v43 = __OFSUB__(v68, v69);
        v70 = v68 - v69;
        if (v43)
          goto LABEL_132;
        v60 = v35 < v70;
        goto LABEL_84;
      }
    }
    else
    {
      if (v13 != 3)
      {
        v61 = *((_QWORD *)v12 + 4);
        v62 = *((_QWORD *)v12 + 5);
        v43 = __OFSUB__(v62, v61);
        v54 = v62 - v61;
        v55 = v43;
        goto LABEL_78;
      }
      v34 = *((_QWORD *)v12 + 4);
      v33 = *((_QWORD *)v12 + 5);
      v43 = __OFSUB__(v33, v34);
      v35 = v33 - v34;
      v36 = v43;
    }
    if ((v36 & 1) != 0)
      goto LABEL_124;
    v44 = v13 - 2;
    v50 = &v30[16 * v13 - 32];
    v52 = *(_QWORD *)v50;
    v51 = *((_QWORD *)v50 + 1);
    v53 = __OFSUB__(v51, v52);
    v54 = v51 - v52;
    v55 = v53;
    if (v53)
      goto LABEL_127;
    v56 = &v30[16 * v32];
    v58 = *(_QWORD *)v56;
    v57 = *((_QWORD *)v56 + 1);
    v43 = __OFSUB__(v57, v58);
    v59 = v57 - v58;
    if (v43)
      goto LABEL_130;
    if (__OFADD__(v54, v59))
      goto LABEL_131;
    if (v54 + v59 >= v35)
    {
      v60 = v35 < v59;
LABEL_84:
      if (v60)
        v32 = v44;
      goto LABEL_86;
    }
LABEL_78:
    if ((v55 & 1) != 0)
      goto LABEL_126;
    v63 = &v30[16 * v32];
    v65 = *(_QWORD *)v63;
    v64 = *((_QWORD *)v63 + 1);
    v43 = __OFSUB__(v64, v65);
    v66 = v64 - v65;
    if (v43)
      goto LABEL_129;
    if (v66 < v54)
      goto LABEL_15;
LABEL_86:
    v71 = v32 - 1;
    if (v32 - 1 >= v13)
    {
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }
    if (!v11)
      goto LABEL_145;
    v72 = &v30[16 * v71];
    v73 = *(_QWORD *)v72;
    v74 = v30;
    v75 = &v30[16 * v32];
    v76 = *((_QWORD *)v75 + 1);
    sub_1000426D0((char *)(v11 + 4 * *(_QWORD *)v72), (char *)(v11 + 4 * *(_QWORD *)v75), v11 + 4 * v76, __dst);
    if (v1)
      break;
    if (v76 < v73)
      goto LABEL_119;
    if (v32 > *((_QWORD *)v12 + 2))
      goto LABEL_120;
    *(_QWORD *)v72 = v73;
    *(_QWORD *)&v74[16 * v71 + 8] = v76;
    v77 = *((_QWORD *)v12 + 2);
    if (v32 >= v77)
      goto LABEL_121;
    v13 = v77 - 1;
    memmove(v75, v75 + 16, 16 * (v77 - 1 - v32));
    v30 = v74;
    *((_QWORD *)v12 + 2) = v77 - 1;
    v11 = v99;
    if (v77 <= 2)
      goto LABEL_15;
  }
  v79 = v12;
LABEL_95:
  v80 = v79;
LABEL_116:
  swift_bridgeObjectRelease(v80);
  v96[2] = 0;
  return swift_bridgeObjectRelease(v96);
}

uint64_t sub_1000426D0(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  int v20;
  uint64_t result;
  char *v22;
  char *v23;
  char *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 3;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 2;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 3;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 2;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 2)
  {
    if (v11 >= -3)
    {
      if (__dst != a2 || &a2[4 * v13] <= __dst)
        memmove(__dst, a2, 4 * v13);
      v16 = &v4[4 * v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 4)
      {
        v17 = (char *)(a3 - 4);
        while (1)
        {
          v18 = v17 + 4;
          v19 = v6 - 4;
          v20 = *((_DWORD *)v6 - 1);
          if (*((_DWORD *)v16 - 1) >= v20)
          {
            v22 = v16 - 4;
            if (v18 < v16 || v17 >= v16 || v18 != v16)
              *(_DWORD *)v17 = *((_DWORD *)v16 - 1);
            v16 -= 4;
            if (v6 <= v7)
              goto LABEL_42;
          }
          else
          {
            if (v18 != v6 || v17 >= v6)
              *(_DWORD *)v17 = v20;
            v24 = v6 - 4;
            v6 -= 4;
            if (v19 <= v7)
              goto LABEL_42;
          }
          v17 -= 4;
          if (v16 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -3)
  {
    if (__dst != __src || &__src[4 * v10] <= __dst)
      memmove(__dst, __src, 4 * v10);
    v14 = &v4[4 * v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 4)
    {
      do
      {
        if (*(_DWORD *)v6 >= *(_DWORD *)v4)
        {
          if (v7 != v4)
            *(_DWORD *)v7 = *(_DWORD *)v4;
          v4 += 4;
          v23 = v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 4;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *(_DWORD *)v7 = *(_DWORD *)v6;
        }
        v7 += 4;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_42:
    sub_1000DCCF4((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

id sub_10004293C(uint64_t a1, uint64_t a2)
{
  id result;
  id v5;
  void *v6;
  char **v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t inited;
  NSString *v12;
  id v13;
  unint64_t v14;
  Class isa;
  _BYTE v16[72];

  result = (id)objc_opt_self(MUEVChargingHelper);
  if ((a2 | a1) < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = objc_msgSend(result, "localizedStringForAvailableChargers:outOfTotal:radiowavesSymbolScale:", a1, a2, 2);
    v6 = (void *)objc_opt_self(UIColor);
    v7 = &selRef_systemGrayColor;
    if (a1)
      v7 = &selRef_systemGreenColor;
    v8 = objc_msgSend(v6, *v7);
    v9 = objc_msgSend(objc_allocWithZone((Class)NSMutableAttributedString), "initWithAttributedString:", v5);
    v10 = sub_100008B04(&qword_10149B740);
    inited = swift_initStackObject(v10, v16);
    *(_OWORD *)(inited + 16) = xmmword_100E22F40;
    *(_QWORD *)(inited + 32) = NSForegroundColorAttributeName;
    *(_QWORD *)(inited + 64) = sub_10000E4BC(0, (unint64_t *)&qword_101493C20, UIColor_ptr);
    *(_QWORD *)(inited + 40) = v8;
    v12 = NSForegroundColorAttributeName;
    v13 = v8;
    v14 = sub_100009A30(inited);
    type metadata accessor for Key(0);
    sub_10000BC84((unint64_t *)&qword_101491E10, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100E23D50);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v14);
    objc_msgSend(v9, "addAttributes:range:", isa, 0, objc_msgSend(v9, "length"));

    return v9;
  }
  return result;
}

uint64_t sub_100042B00(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  BOOL v17;
  id v18;
  uint64_t v19;

  if ((unint64_t)a1 >> 62)
    goto LABEL_25;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v2; v2 = _CocoaArrayWrapper.endIndex.getter(v19))
  {
    v3 = a1 & 0xC000000000000001;
    v4 = 4;
    do
    {
      if (v3)
        v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, a1);
      else
        v5 = *(id *)(a1 + 8 * v4);
      v6 = v5;
      v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1))
      {
        __break(1u);
        goto LABEL_23;
      }
      v8 = objc_msgSend(v5, "realtimeStatus");

      ++v4;
      if (v8)
        v9 = 1;
      else
        v9 = v7 == v2;
    }
    while (!v9);
    result = swift_bridgeObjectRelease(a1);
    if (v2 < 1)
    {
      __break(1u);
      return result;
    }
    swift_bridgeObjectRetain(a1);
    v11 = 0;
    v12 = 0;
    v13 = 0;
    while (1)
    {
      v14 = v3 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11, a1) : *(id *)(a1 + 8 * v11 + 32);
      v15 = v14;
      v16 = objc_msgSend(v14, "availableNumberOfChargers");
      v17 = __CFADD__(v13, v16);
      v13 += (uint64_t)v16;
      if (v17)
        break;
      v18 = objc_msgSend(v15, "totalNumberOfChargers");

      v17 = __CFADD__(v12, v18);
      v12 += (uint64_t)v18;
      if (v17)
        goto LABEL_24;
      if (v2 == ++v11)
        goto LABEL_30;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    if (a1 < 0)
      v19 = a1;
    else
      v19 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
  v13 = 0;
LABEL_30:
  swift_bridgeObjectRelease(a1);
  return v13;
}

void *sub_100042C9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *result;
  void *v4;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel_plugs);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel_plugs) = a1;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRelease(v2);
  sub_100040B0C();
  result = (void *)sub_100040F4C();
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel_isActive) == 1)
  {
    result = (void *)swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC4Maps31CarPlaceCardEVChargingViewModel_observer);
    if (result)
    {
      v4 = result;
      objc_msgSend(result, "evChargingViewModelDidUpdate:", v1);
      return (void *)swift_unknownObjectRelease(v4);
    }
  }
  return result;
}

uint64_t type metadata accessor for CarPlaceCardEVChargingViewModel()
{
  return objc_opt_self(_TtC4Maps31CarPlaceCardEVChargingViewModel);
}

uint64_t destroy for CarPlaceCardEVChargingViewModel.EVChargingSection(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

_QWORD *_s4Maps31CarPlaceCardEVChargingViewModelC17EVChargingSectionVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for CarPlaceCardEVChargingViewModel.EVChargingSection(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for CarPlaceCardEVChargingViewModel.EVChargingSection(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CarPlaceCardEVChargingViewModel.EVChargingSection(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CarPlaceCardEVChargingViewModel.EVChargingSection(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CarPlaceCardEVChargingViewModel.EVChargingSection()
{
  return &type metadata for CarPlaceCardEVChargingViewModel.EVChargingSection;
}

void sub_100042EEC(id a1)
{
  if (a1 != (id)1)

}

uint64_t sub_100042EFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008B04(&qword_101494828);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id sub_100042F44(id result)
{
  if (result != (id)1)
    return result;
  return result;
}

uint64_t sub_100042F54()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void *sub_100042F80()
{
  uint64_t v0;

  return sub_100040A54(*(_QWORD *)(v0 + 16), *(id *)(v0 + 24));
}

ValueMetadata *type metadata accessor for PlaceSummaryUnitDistance()
{
  return &type metadata for PlaceSummaryUnitDistance;
}

ValueMetadata *_s17SearchLoadingViewVMa()
{
  return &_s17SearchLoadingViewVN;
}

uint64_t _s17RefinementButtonsVwxx(uint64_t a1)
{
  sub_10001A774(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

uint64_t _s17RefinementButtonsVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_10002057C(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t _s17RefinementButtonsVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_10002057C(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  sub_10001A774(v7, v8, v9);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t _s17RefinementButtonsVwta(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  sub_10001A774(v5, v6, v7);
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t _s17RefinementButtonsVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s17RefinementButtonsVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s17RefinementButtonsVMa()
{
  return &_s17RefinementButtonsVN;
}

_QWORD *initializeBufferWithCopyOfBuffer for PlaceSummaryUnitSecondaryName(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

_QWORD *assignWithCopy for PlaceSummaryUnitSecondaryName(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

_QWORD *assignWithTake for PlaceSummaryUnitSecondaryName(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *_s13ActionButtonsVMa()
{
  return &_s13ActionButtonsVN;
}

_QWORD *sub_100043258(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = (int *)type metadata accessor for PlaceSummaryViewModelLine(0);
    v9 = v8[5];
    v10 = *(_QWORD *)((char *)a2 + v9);
    *(_QWORD *)((char *)a1 + v9) = v10;
    *((_BYTE *)a1 + v8[6]) = *((_BYTE *)a2 + v8[6]);
    *((_BYTE *)a1 + v8[7]) = *((_BYTE *)a2 + v8[7]);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain(v10);
  }
  return a1;
}

uint64_t sub_100043314(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for PlaceSummaryViewModelLine(0) + 20));
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_10004335C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = (int *)type metadata accessor for PlaceSummaryViewModelLine(0);
  v8 = v7[5];
  v9 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  *(_BYTE *)(a1 + v7[6]) = *(_BYTE *)(a2 + v7[6]);
  *(_BYTE *)(a1 + v7[7]) = *(_BYTE *)(a2 + v7[7]);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t sub_1000433EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = (int *)type metadata accessor for PlaceSummaryViewModelLine(0);
  v8 = v7[5];
  v9 = *(_QWORD *)(a2 + v8);
  v10 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + v7[6]) = *(_BYTE *)(a2 + v7[6]);
  *(_BYTE *)(a1 + v7[7]) = *(_BYTE *)(a2 + v7[7]);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100043490(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = (int *)type metadata accessor for PlaceSummaryViewModelLine(0);
  *(_QWORD *)(a1 + v7[5]) = *(_QWORD *)(a2 + v7[5]);
  *(_BYTE *)(a1 + v7[6]) = *(_BYTE *)(a2 + v7[6]);
  *(_BYTE *)(a1 + v7[7]) = *(_BYTE *)(a2 + v7[7]);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100043518(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = (int *)type metadata accessor for PlaceSummaryViewModelLine(0);
  v8 = v7[5];
  v9 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + v7[6]) = *(_BYTE *)(a2 + v7[6]);
  *(_BYTE *)(a1 + v7[7]) = *(_BYTE *)(a2 + v7[7]);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1000435AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000435B8);
}

uint64_t sub_1000435B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100064498(a1, a2, a3, type metadata accessor for PlaceSummaryViewModelLine);
}

uint64_t sub_1000435C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000435D0);
}

uint64_t sub_1000435D0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10006453C(a1, a2, a3, a4, type metadata accessor for PlaceSummaryViewModelLine);
}

uint64_t _s4LineVMa(uint64_t a1)
{
  return sub_100021D9C(a1, qword_101494898, (uint64_t)&_s4LineVMn);
}

uint64_t sub_1000435F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000645C0(a1, a2, a3, type metadata accessor for PlaceSummaryViewModelLine);
}

ValueMetadata *_s23AutocompleteLoadingViewVMa()
{
  return &_s23AutocompleteLoadingViewVN;
}

uint64_t sub_10004360C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t sub_100043614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006F430(a1, a2, a3, (uint64_t)"\b");
}

unint64_t *sub_100043620(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((v7 + 8) & (unint64_t)~v7) + *(_QWORD *)(v6 + 64) > 0x18)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (unint64_t *)(v10 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain(v10);
  }
  else
  {
    v11 = *a2;
    sub_100020008(*a2);
    *a1 = v11;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(((unint64_t)a1 + v7 + 8) & ~v7, ((unint64_t)a2 + v7 + 8) & ~v7, v5);
  }
  return a1;
}

uint64_t sub_1000436EC(unint64_t *a1, uint64_t a2)
{
  sub_1000200C0(*a1);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((unint64_t)a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

unint64_t *sub_100043730(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;

  v6 = *a2;
  sub_100020008(*a2);
  *a1 = v6;
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 16))(((unint64_t)a1 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

unint64_t *sub_100043798(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v6 = *a2;
  sub_100020008(*a2);
  v7 = *a1;
  *a1 = v6;
  sub_1000200C0(v7);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

unint64_t *sub_10004380C(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;

  v6 = *a1;
  *a1 = *a2;
  sub_1000200C0(v6);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_100043874(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7B)
    v6 = 123;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 8) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(_WORD *)((char *)a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 > 0x7B)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 8) & ~v7);
      v15 = ((*a1 >> 57) >> 4) | (8 * ((*a1 >> 57) & 8 | *a1 & 7));
      v16 = v15 ^ 0x7F;
      v17 = 128 - v15;
      if (v16 >= 0x7B)
        return 0;
      else
        return v17;
    }
  }
  v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((_BYTE *)a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_100043948 + 4 * byte_100E25BE8[(v9 - 1)]))();
}

void sub_1000439D4(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7Bu)
    v6 = 123;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = &dword_100000004;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t _s13AccessoryViewVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10001A6E8(a1, a2, a3, a4, (uint64_t)&_s13AccessoryViewVMn);
}

uint64_t sub_100043BEC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_101065EBC, 1);
}

uint64_t sub_100043BFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v10 = type metadata accessor for _ConditionalContent.Storage(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))((char *)&v14 - v11, a1, a2);
  swift_storeEnumTagMultiPayload(v12, v10, 0);
  return _ConditionalContent<>.init(storage:)(v12, a2, a3, a4, a5);
}

uint64_t sub_100043CC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v10 = type metadata accessor for _ConditionalContent.Storage(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))((char *)&v14 - v11, a1, a3);
  swift_storeEnumTagMultiPayload(v12, v10, 1);
  return _ConditionalContent<>.init(storage:)(v12, a2, a3, a4, a5);
}

uint64_t sub_100043D84(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t TupleTypeMetadata;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v4 = a1;
  v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    TupleTypeMetadata = *v5;
    __chkstk_darwin(a1);
    v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
LABEL_12:
    v22 = 32;
    v23 = a2;
    do
    {
      if (a2 == 1)
        v24 = 0;
      else
        v24 = *(_DWORD *)(TupleTypeMetadata + v22);
      v26 = *v5++;
      v25 = v26;
      v27 = *v4++;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(&v8[v24], v27);
      v22 += 16;
      --v23;
    }
    while (v23);
    return TupleView.init(_:)(v8, TupleTypeMetadata);
  }
  __chkstk_darwin(a1);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v11 = 0;
    if (a2 < 4)
      goto LABEL_9;
    if ((unint64_t)(v10 - (char *)v5) < 0x20)
      goto LABEL_9;
    v11 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (__int128 *)(v5 + 2);
    v13 = v10 + 16;
    v14 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v11 != a2)
    {
LABEL_9:
      v16 = a2 - v11;
      v17 = v11;
      v18 = &v10[8 * v11];
      v19 = &v5[v17];
      do
      {
        v20 = *v19++;
        *(_QWORD *)v18 = v20;
        v18 += 8;
        --v16;
      }
      while (v16);
    }
  }
  TupleTypeMetadata = swift_getTupleTypeMetadata(0, a2);
  __chkstk_darwin(TupleTypeMetadata);
  v8 = (char *)&v29 - v21;
  if (a2)
    goto LABEL_12;
  return TupleView.init(_:)(v8, TupleTypeMetadata);
}

uint64_t sub_100043F38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = static Color.white.getter();
  v1 = Color.opacity(_:)(0.7);
  result = swift_release(v0);
  qword_1014D46A0 = v1;
  return result;
}

uint64_t sub_100043F7C()
{
  uint64_t result;

  result = static Color.secondary.getter();
  qword_1014D46A8 = result;
  return result;
}

uint64_t sub_100043F98@<X0>(uint64_t a1@<X8>)
{
  void **v1;
  void **v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t KeyPath;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[2];
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;

  v2 = v1;
  v58 = a1;
  v3 = sub_100008B04(&qword_101494BF0);
  __chkstk_darwin(v3);
  v5 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v57 - v7;
  v9 = _s10TitleLabelVMa(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AttributedString(0);
  v59 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100008B04(&qword_101495680);
  __chkstk_darwin(v15);
  v57 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *v2;
  if (!*v2)
    goto LABEL_10;
  KeyPath = swift_getKeyPath(&unk_100E26B00);
  v19 = swift_getKeyPath(&unk_100E26B28);
  v20 = v17;
  static Published.subscript.getter(v60, v20, KeyPath, v19);

  swift_release(KeyPath);
  swift_release(v19);
  LOBYTE(v19) = v60[0];
  sub_1000202AC((uint64_t)v2, (uint64_t)v11, _s10TitleLabelVMa);
  if ((v19 & 1) == 0)
  {
    sub_1000202F0((uint64_t)v11, _s10TitleLabelVMa);
    v21 = v59;
    goto LABEL_7;
  }
  sub_10000C1FC((uint64_t)&v11[*(int *)(v9 + 24)], (uint64_t)v8, &qword_101494BF0);
  sub_1000202F0((uint64_t)v11, _s10TitleLabelVMa);
  v21 = v59;
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v59 + 48);
  v23 = v22(v8, 1, v12);
  sub_100010CC4((uint64_t)v8, &qword_101494BF0);
  if (v23 == 1)
  {
LABEL_7:
    v5 = (char *)v2 + *(int *)(v9 + 20);
    v24 = 2;
    goto LABEL_8;
  }
  sub_10000C1FC((uint64_t)v2 + *(int *)(v9 + 24), (uint64_t)v5, &qword_101494BF0);
  if (v22(v5, 1, v12) != 1)
  {
    v24 = 4;
LABEL_8:
    (*(void (**)(char *, char *, uint64_t))(v21 + 8 * v24))(v14, v5, v12);
    v25 = Text.init(_:)(v14);
    v27 = v26;
    v29 = v28;
    v31 = v30 & 1;
    v32 = static Font.headline.getter();
    v33 = Text.font(_:)(v32, v25, v27, v31, v29);
    v35 = v34;
    v37 = v36;
    v39 = v38;
    swift_release(v32);
    LOBYTE(v32) = v37 & 1;
    sub_10006B77C(v25, v27, v31);
    v40 = swift_bridgeObjectRelease(v29);
    v41 = static Color.primary.getter(v40);
    v42 = Text.foregroundColor(_:)(v41, v33, v35, v37 & 1, v39);
    v44 = v43;
    LOBYTE(v29) = v45;
    v47 = v46;
    swift_release(v41);
    v48 = v29 & 1;
    sub_10006B77C(v33, v35, v32);
    swift_bridgeObjectRelease(v39);
    v49 = swift_getKeyPath(&unk_100E26B48);
    v60[0] = v42;
    v60[1] = v44;
    v61 = v48;
    v62 = v47;
    v63 = v49;
    v64 = 1;
    v65 = 0;
    v50 = sub_100008B04(&qword_101495688);
    v51 = sub_10006D028(&qword_101495690, &qword_101495688, &qword_101495698, &qword_1014956A0);
    v52 = (uint64_t)v57;
    View.accessibility(identifier:)(0xD000000000000016, 0x8000000100E441C0, v50, v51);
    sub_10006B77C(v42, v44, v48);
    swift_release(v49);
    swift_bridgeObjectRelease(v47);
    return sub_1000207BC(v52, v58, &qword_101495680);
  }
  __break(1u);
LABEL_10:
  v54 = v2[1];
  v55 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
  v56 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
  result = EnvironmentObject.error()(0, v54, v55, v56);
  __break(1u);
  return result;
}

uint64_t sub_1000443E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t result;
  char v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __n128 v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  uint64_t *v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t KeyPath;
  uint64_t v129;
  uint64_t v130;
  _QWORD v131[25];
  _QWORD v132[2];
  char v133;
  uint64_t v134;
  __int16 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  _OWORD v152[2];
  _BYTE v153[176];
  char v154;

  v120 = a1;
  v121 = sub_100008B04(&qword_1014956A8);
  __chkstk_darwin(v121);
  v123 = (char *)&v110 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = sub_100008B04(&qword_1014956B0);
  __chkstk_darwin(v117);
  v119 = (uint64_t)&v110 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_100008B04(&qword_1014956B8);
  __chkstk_darwin(v113);
  v115 = (uint64_t *)((char *)&v110 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v118 = sub_100008B04(&qword_1014956C0);
  __chkstk_darwin(v118);
  v116 = (char *)&v110 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100008B04(&qword_1014956C8);
  __chkstk_darwin(v6);
  v111 = (char *)&v110 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)_s5LabelVMa(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v110 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AttributedString(0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v110 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v15 + 16))(v14, v1, v12);
  v130 = Text.init(_:)(v14);
  v127 = v16;
  v18 = v17;
  v122 = v19;
  v126 = static Font.subheadline.getter();
  KeyPath = swift_getKeyPath(&unk_100E26B78);
  v20 = v1 + v8[11];
  v21 = *(void **)v20;
  if (*(_QWORD *)v20)
  {
    v22 = swift_getKeyPath(&unk_100E26B00);
    v23 = swift_getKeyPath(&unk_100E26B28);
    v24 = v21;
    static Published.subscript.getter(v131, v24, v22, v23);

    swift_release(v22);
    swift_release(v23);
    v129 = v1;
    v114 = v6;
    if ((v131[0] & 1) != 0)
    {
      if (qword_101490CD8 != -1)
        swift_once(&qword_101490CD8, sub_100043F38);
      v25 = &qword_1014D46A0;
    }
    else
    {
      if (qword_101490CE0 != -1)
        swift_once(&qword_101490CE0, sub_100043F7C);
      v25 = &qword_1014D46A8;
    }
    v26 = v18;
    v124 = *v25;
    swift_retain(v124);
    v27 = swift_getKeyPath(&unk_100E26100);
    v28 = v129;
    v29 = (uint64_t *)(v129 + v8[10]);
    v30 = *v29;
    v31 = *((_BYTE *)v29 + 8);
    v32 = swift_getKeyPath(&unk_100E26B48);
    v33 = *(_QWORD *)(v28 + v8[5] + 8);
    sub_1000202AC(v28, (uint64_t)v10, _s5LabelVMa);
    v112 = v27;
    v125 = v32;
    if (v33)
    {
      sub_1000202F0((uint64_t)v10, _s5LabelVMa);
LABEL_12:
      v132[0] = v130;
      v35 = KeyPath;
      v132[1] = v127;
      v133 = v26 & 1;
      LODWORD(v123) = v26 & 1;
      v36 = v122;
      v134 = v122;
      v135 = 256;
      v37 = v126;
      v136 = KeyPath;
      v137 = v126;
      v138 = v27;
      v139 = v124;
      v38 = v31;
      v39 = v124;
      v140 = v32;
      v141 = v30;
      v142 = v38;
      v40 = v127;
      sub_10006BB40(v130, v127, v26 & 1);
      swift_bridgeObjectRetain(v36);
      swift_retain(v35);
      swift_retain(v37);
      v41 = v27;
      swift_retain(v27);
      swift_retain(v39);
      v42 = v125;
      v43 = swift_retain(v125);
      v110 = static VerticalAlignment.center.getter(v43);
      sub_100044FE8(v129, (uint64_t)v132, (uint64_t)v131);
      sub_10006B77C(v130, v40, (char)v123);
      swift_release(v42);
      swift_release(v39);
      swift_release(v41);
      swift_release(v37);
      swift_release(v35);
      v44 = v36;
      swift_bridgeObjectRelease(v36);
      v151 = *(_OWORD *)&v131[16];
      v152[0] = *(_OWORD *)&v131[18];
      *(_OWORD *)((char *)v152 + 9) = *(_OWORD *)((char *)&v131[19] + 1);
      v147 = *(_OWORD *)&v131[8];
      v148 = *(_OWORD *)&v131[10];
      v149 = *(_OWORD *)&v131[12];
      v150 = *(_OWORD *)&v131[14];
      v143 = *(_OWORD *)v131;
      v144 = *(_OWORD *)&v131[2];
      v145 = *(_OWORD *)&v131[4];
      v146 = *(_OWORD *)&v131[6];
      *(_OWORD *)&v153[119] = *(_OWORD *)&v131[14];
      *(_OWORD *)&v153[55] = *(_OWORD *)&v131[6];
      *(_OWORD *)&v153[135] = *(_OWORD *)&v131[16];
      *(_OWORD *)&v153[151] = v152[0];
      *(_OWORD *)&v153[160] = *(_OWORD *)((char *)&v131[19] + 1);
      *(_OWORD *)&v153[71] = *(_OWORD *)&v131[8];
      *(_OWORD *)&v153[87] = *(_OWORD *)&v131[10];
      *(_OWORD *)&v153[103] = *(_OWORD *)&v131[12];
      *(_OWORD *)&v153[7] = *(_OWORD *)v131;
      *(_OWORD *)&v153[23] = *(_OWORD *)&v131[2];
      *(_OWORD *)&v153[39] = *(_OWORD *)&v131[4];
      *(_OWORD *)((char *)&v131[16] + 1) = *(_OWORD *)&v153[112];
      *(_OWORD *)((char *)&v131[18] + 1) = *(_OWORD *)&v153[128];
      *(_OWORD *)((char *)&v131[20] + 1) = *(_OWORD *)&v153[144];
      *(_OWORD *)((char *)&v131[22] + 1) = *(_OWORD *)&v153[160];
      *(_OWORD *)((char *)&v131[8] + 1) = *(_OWORD *)&v153[48];
      *(_OWORD *)((char *)&v131[10] + 1) = *(_OWORD *)&v153[64];
      v154 = 0;
      v131[0] = v110;
      v131[1] = 0x4010000000000000;
      LOBYTE(v131[2]) = 0;
      *(_OWORD *)((char *)&v131[12] + 1) = *(_OWORD *)&v153[80];
      *(_OWORD *)((char *)&v131[14] + 1) = *(_OWORD *)&v153[96];
      *(_OWORD *)((char *)&v131[2] + 1) = *(_OWORD *)v153;
      *(_OWORD *)((char *)&v131[4] + 1) = *(_OWORD *)&v153[16];
      *(_OWORD *)((char *)&v131[6] + 1) = *(_OWORD *)&v153[32];
      v45 = sub_1000456A8();
      v47 = v46;
      v48 = sub_100008B04(&qword_101495738);
      v49 = sub_100010D70(&qword_101495730, &qword_101495738, (const char *)&protocol conformance descriptor for HStack<A>);
      v50 = (uint64_t)v111;
      View.accessibility(identifier:)(v45, v47, v48, v49);
      swift_bridgeObjectRelease(v47);
      sub_10006BC90((uint64_t)&v143);
      v51 = &qword_1014956C8;
      v52 = v115;
      sub_10000C1FC(v50, (uint64_t)v115, &qword_1014956C8);
      swift_storeEnumTagMultiPayload(v52, v113, 0);
      v53 = sub_100008B04(&qword_101495748);
      v54 = sub_10006BA20();
      v55 = sub_100010D70(&qword_101495740, &qword_101495748, (const char *)&protocol conformance descriptor for HStack<A>);
      v56 = (uint64_t)v116;
      _ConditionalContent<>.init(storage:)(v52, v114, v53, v54, v55);
      v57 = v119;
      sub_10000C1FC(v56, v119, &qword_1014956C0);
      swift_storeEnumTagMultiPayload(v57, v117, 0);
      v58 = sub_10006B99C();
      v59 = sub_10006BABC();
      _ConditionalContent<>.init(storage:)(v57, v118, v121, v58, v59);
      sub_10006B77C(v130, v127, (char)v123);
      swift_release(v125);
      swift_release(v124);
      swift_release(v112);
      swift_release(v126);
      swift_release(KeyPath);
      swift_bridgeObjectRelease(v44);
      sub_100010CC4(v56, &qword_1014956C0);
      v60 = v50;
      return sub_100010CC4(v60, v51);
    }
    v34 = *(_QWORD *)&v10[v8[8]];
    sub_1000202F0((uint64_t)v10, _s5LabelVMa);
    if (v34)
      goto LABEL_12;
    v62 = v31;
    v63 = v27;
    v64 = *(char **)(v129 + v8[9]);
    if (!v64)
    {
      v94 = v127;
      v131[0] = v130;
      v131[1] = v127;
      v95 = v26 & 1;
      LOBYTE(v131[2]) = v26 & 1;
      v131[3] = v122;
      LOWORD(v131[4]) = 256;
      v131[5] = KeyPath;
      v131[6] = v126;
      v96 = v124;
      v131[7] = v63;
      v131[8] = v124;
      v97 = v32;
      v131[9] = v32;
      v131[10] = v30;
      LOBYTE(v131[11]) = v62;
      v98 = sub_1000456A8();
      v100 = v99;
      v101 = sub_100008B04(&qword_1014956D0);
      v102 = sub_10006B7F0();
      v103 = (uint64_t)v123;
      View.accessibility(identifier:)(v98, v100, v101, v102);
      swift_bridgeObjectRelease(v100);
      v51 = &qword_1014956A8;
      v104 = v119;
      sub_10000C1FC(v103, v119, &qword_1014956A8);
      swift_storeEnumTagMultiPayload(v104, v117, 1);
      v105 = sub_10006B99C();
      v106 = sub_10006BABC();
      _ConditionalContent<>.init(storage:)(v104, v118, v121, v105, v106);
      sub_10006B77C(v130, v94, v95);
      swift_release(v97);
      swift_release(v96);
      swift_release(v112);
      swift_release(v126);
      swift_release(KeyPath);
      swift_bridgeObjectRelease(v122);
      v60 = v103;
      return sub_100010CC4(v60, v51);
    }
    *(_QWORD *)&v143 = v130;
    v111 = v64;
    v65 = KeyPath;
    *((_QWORD *)&v143 + 1) = v127;
    LOBYTE(v144) = v26 & 1;
    LODWORD(v123) = v26 & 1;
    v66 = v122;
    *((_QWORD *)&v144 + 1) = v122;
    LOWORD(v145) = 256;
    v67 = v126;
    *((_QWORD *)&v145 + 1) = KeyPath;
    *(_QWORD *)&v146 = v126;
    *((_QWORD *)&v146 + 1) = v63;
    v68 = v124;
    *(_QWORD *)&v147 = v124;
    *((_QWORD *)&v147 + 1) = v32;
    *(_QWORD *)&v148 = v30;
    BYTE8(v148) = v62;
    v69 = v130;
    sub_10006BB40(v130, v127, v26 & 1);
    swift_bridgeObjectRetain(v66);
    v70 = v65;
    swift_retain(v65);
    v71 = v67;
    swift_retain(v67);
    v72 = v63;
    swift_retain(v63);
    v73 = v68;
    swift_retain(v68);
    v74 = v125;
    swift_retain(v125);
    v75 = (uint64_t)v111;
    v76 = swift_retain(v111);
    v110 = static VerticalAlignment.center.getter(v76);
    sub_100045774(v75, (uint64_t)&v143, (uint64_t)v131);
    v77 = v127;
    sub_10006B77C(v69, v127, (char)v123);
    swift_release(v74);
    v78 = v73;
    swift_release(v73);
    swift_release(v72);
    swift_release(v71);
    swift_release(v70);
    swift_bridgeObjectRelease(v122);
    *(_OWORD *)&v153[96] = *(_OWORD *)&v131[12];
    *(_OWORD *)&v153[112] = *(_OWORD *)&v131[14];
    *(_OWORD *)&v153[128] = *(_OWORD *)&v131[16];
    *(_OWORD *)&v153[137] = *(_OWORD *)((char *)&v131[17] + 1);
    *(_OWORD *)&v153[32] = *(_OWORD *)&v131[4];
    *(_OWORD *)&v153[48] = *(_OWORD *)&v131[6];
    *(_OWORD *)&v153[64] = *(_OWORD *)&v131[8];
    *(_OWORD *)&v153[80] = *(_OWORD *)&v131[10];
    *(_OWORD *)v153 = *(_OWORD *)v131;
    *(_OWORD *)&v153[16] = *(_OWORD *)&v131[2];
    LOBYTE(v132[0]) = 0;
    *(_OWORD *)((char *)&v131[4] + 7) = *(_OWORD *)&v131[4];
    *(_OWORD *)((char *)&v131[12] + 7) = *(_OWORD *)&v131[12];
    v79 = *(_OWORD *)&v131[8];
    *(_OWORD *)((char *)&v131[6] + 7) = *(_OWORD *)&v153[48];
    *(_OWORD *)((char *)&v131[14] + 7) = *(_OWORD *)&v153[112];
    *(_OWORD *)((char *)&v131[16] + 7) = *(_OWORD *)&v153[128];
    *(_OWORD *)&v131[18] = *(_OWORD *)&v153[137];
    *(_OWORD *)((char *)&v131[8] + 7) = v79;
    *(_OWORD *)((char *)&v131[10] + 7) = *(_OWORD *)&v153[80];
    v80 = *(_OWORD *)&v131[2];
    *(_OWORD *)((char *)v131 + 7) = *(_OWORD *)v131;
    *(_OWORD *)((char *)&v131[2] + 7) = v80;
    v81 = v115;
    *v115 = v110;
    v81[1] = 0x4010000000000000;
    *((_BYTE *)v81 + 16) = 0;
    v82 = *(_OWORD *)&v131[14];
    *(_OWORD *)((char *)v81 + 113) = *(_OWORD *)&v131[12];
    *(_OWORD *)((char *)v81 + 129) = v82;
    v83 = *(_OWORD *)&v131[18];
    *(_OWORD *)((char *)v81 + 145) = *(_OWORD *)&v131[16];
    *(_OWORD *)((char *)v81 + 161) = v83;
    v84 = *(_OWORD *)&v131[6];
    *(_OWORD *)((char *)v81 + 49) = *(_OWORD *)&v131[4];
    *(_OWORD *)((char *)v81 + 65) = v84;
    v85 = *(_OWORD *)&v131[10];
    *(_OWORD *)((char *)v81 + 81) = *(_OWORD *)&v131[8];
    *(_OWORD *)((char *)v81 + 97) = v85;
    v86 = *(_OWORD *)&v131[2];
    *(_OWORD *)((char *)v81 + 17) = *(_OWORD *)v131;
    *(_OWORD *)((char *)v81 + 33) = v86;
    swift_storeEnumTagMultiPayload(v81, v113, 1);
    sub_10006BB50((uint64_t)v153);
    v87 = sub_100008B04(&qword_101495748);
    v88 = sub_10006BA20();
    v89 = sub_100010D70(&qword_101495740, &qword_101495748, (const char *)&protocol conformance descriptor for HStack<A>);
    v90 = (uint64_t)v116;
    _ConditionalContent<>.init(storage:)(v81, v114, v87, v88, v89);
    v91 = v119;
    sub_10000C1FC(v90, v119, &qword_1014956C0);
    swift_storeEnumTagMultiPayload(v91, v117, 0);
    v92 = sub_10006B99C();
    v93 = sub_10006BABC();
    _ConditionalContent<>.init(storage:)(v91, v118, v121, v92, v93);
    swift_release(v111);
    sub_10006B77C(v130, v77, (char)v123);
    swift_release(v125);
    swift_release(v78);
    swift_release(v72);
    swift_release(v71);
    swift_release(KeyPath);
    swift_bridgeObjectRelease(v122);
    sub_100010CC4(v90, &qword_1014956C0);
    return sub_10006BBF0((uint64_t)v153);
  }
  else
  {
    v107 = *(_QWORD *)(v20 + 8);
    v108 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
    v109 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
    result = EnvironmentObject.error()(0, v107, v108, v109);
    __break(1u);
  }
  return result;
}

uint64_t sub_100044FE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t KeyPath;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t result;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  char v85;
  _QWORD v86[9];
  unsigned __int8 v87;
  uint64_t v88;
  unsigned __int8 v89;
  uint64_t v90;
  unsigned __int8 v91;
  __int128 v92;

  v6 = _s5LabelVMa(0);
  v7 = *(_QWORD *)(a1 + *(int *)(v6 + 32));
  if (v7)
  {
    v8 = type metadata accessor for PlaceSummaryImageViewModel(0);
    v9 = sub_10000BC84(&qword_101494CF0, type metadata accessor for PlaceSummaryImageViewModel, (uint64_t)&unk_100E282A4);
    v10 = swift_retain_n(v7, 2);
    v11 = ObservedObject.init(wrappedValue:)(v10, v8, v9);
    v13 = v12;
    v14 = static Alignment.center.getter(v11);
    _FrameLayout.init(width:height:alignment:)(&v88, 0x4030000000000000, 0, 0x4030000000000000, 0, v14, v15);
    v78 = v11;
    v79 = v13;
    v80 = 0;
    v81 = v88;
    v82 = v89;
    *(_QWORD *)&v83 = v90;
    *((_QWORD *)&v83 + 1) = v91;
    v84 = v92;
    v85 = 0;
    swift_retain(v13);
    v16 = sub_100008B04(&qword_101495758);
    v17 = sub_100008B04(&qword_101495760);
    v18 = sub_100070A00(&qword_101495768, &qword_101495758, &qword_101495770, &qword_101495778);
    v19 = sub_10006BE60();
    _ConditionalContent<>.init(storage:)(&v78, v16, v17, v18, v19);
    swift_release(v13);
    swift_release(v7);
LABEL_10:
    v35 = v86[0];
    v36 = v86[1];
    v37 = v86[2];
    v38 = v86[3];
    v39 = v86[4];
    v40 = v86[5];
    v41 = v86[6];
    v42 = v86[7];
    v43 = v86[8];
    v44 = v87;
    goto LABEL_11;
  }
  v20 = (int *)v6;
  v21 = (uint64_t *)(a1 + *(int *)(v6 + 20));
  v22 = v21[1];
  if (!v22)
  {
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = 0;
    v44 = -1;
LABEL_11:
    v69 = v44;
    v70 = v43;
    v50 = *(_QWORD *)a2;
    v51 = *(_QWORD *)(a2 + 8);
    v53 = *(_QWORD *)(a2 + 24);
    v54 = *(_BYTE *)(a2 + 32);
    v55 = *(_BYTE *)(a2 + 33);
    v56 = *(_QWORD *)(a2 + 40);
    v57 = *(_QWORD *)(a2 + 48);
    v58 = *(_QWORD *)(a2 + 56);
    v59 = *(_QWORD *)(a2 + 64);
    v61 = *(_QWORD *)(a2 + 72);
    v60 = *(_QWORD *)(a2 + 80);
    v62 = *(_BYTE *)(a2 + 88);
    LOBYTE(v86[0]) = *(_BYTE *)(a2 + 16);
    v52 = v86[0];
    LOBYTE(v78) = v62;
    *(_QWORD *)a3 = v35;
    *(_QWORD *)(a3 + 8) = v36;
    *(_QWORD *)(a3 + 16) = v37;
    *(_QWORD *)(a3 + 24) = v38;
    *(_QWORD *)(a3 + 32) = v39;
    *(_QWORD *)(a3 + 40) = v40;
    *(_QWORD *)(a3 + 48) = v41;
    *(_QWORD *)(a3 + 56) = v42;
    *(_QWORD *)(a3 + 64) = v43;
    *(_BYTE *)(a3 + 72) = v44;
    *(_QWORD *)(a3 + 80) = v50;
    *(_QWORD *)(a3 + 88) = v51;
    *(_BYTE *)(a3 + 96) = v52;
    *(_QWORD *)(a3 + 104) = v53;
    v63 = v53;
    *(_BYTE *)(a3 + 112) = v54;
    *(_BYTE *)(a3 + 113) = v55;
    *(_QWORD *)(a3 + 120) = v56;
    *(_QWORD *)(a3 + 128) = v57;
    *(_QWORD *)(a3 + 136) = v58;
    *(_QWORD *)(a3 + 144) = v59;
    *(_QWORD *)(a3 + 152) = v61;
    *(_QWORD *)(a3 + 160) = v60;
    *(_BYTE *)(a3 + 168) = v62;
    v64 = v35;
    v76 = v37;
    v77 = v36;
    v74 = v39;
    v75 = v38;
    v72 = v41;
    v73 = v40;
    v71 = v42;
    sub_10006BDD8(v35, v36, v37, v38, v39, v40, v41, v42, v43, v44);
    sub_10006BB40(v50, v51, v52);
    swift_retain(v59);
    swift_retain(v61);
    swift_bridgeObjectRetain(v63);
    swift_retain(v56);
    swift_retain(v57);
    swift_retain(v58);
    sub_10006BB40(v50, v51, v52);
    swift_bridgeObjectRetain(v63);
    swift_retain(v56);
    swift_retain(v57);
    swift_retain(v58);
    swift_retain(v59);
    swift_retain(v61);
    sub_10006B77C(v50, v51, v52);
    swift_release(v61);
    swift_release(v59);
    swift_release(v58);
    swift_release(v57);
    swift_release(v56);
    swift_bridgeObjectRelease(v63);
    return sub_10006BD54(v64, v77, v76, v75, v74, v73, v72, v71, v70, v69);
  }
  v23 = *v21;
  swift_bridgeObjectRetain(v21[1]);
  v24 = Image.init(_internalSystemName:)(v23, v22);
  v25 = static Font.caption.getter();
  KeyPath = swift_getKeyPath(&unk_100E26B78);
  v27 = a1 + v20[11];
  v28 = *(void **)v27;
  if (*(_QWORD *)v27)
  {
    v29 = KeyPath;
    v30 = swift_getKeyPath(&unk_100E26B00);
    v31 = swift_getKeyPath(&unk_100E26B28);
    v32 = v28;
    static Published.subscript.getter(v86, v32, v30, v31);

    swift_release(v30);
    v33 = swift_release(v31);
    if ((v86[0] & 1) != 0)
      v34 = static Color.white.getter(v33);
    else
      v34 = sub_10004558C(*(_QWORD *)(a1 + v20[6]), *(_QWORD *)(a1 + v20[7]));
    v45 = v34;
    v78 = v24;
    v79 = v29;
    v80 = v25;
    v81 = swift_getKeyPath(&unk_100E26100);
    v82 = v45;
    v83 = 0u;
    v84 = 0u;
    v85 = 1;
    v46 = sub_100008B04(&qword_101495758);
    v47 = sub_100008B04(&qword_101495760);
    v48 = sub_100070A00(&qword_101495768, &qword_101495758, &qword_101495770, &qword_101495778);
    v49 = sub_10006BE60();
    _ConditionalContent<>.init(storage:)(&v78, v46, v47, v48, v49);
    goto LABEL_10;
  }
  v66 = *(_QWORD *)(v27 + 8);
  v67 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
  v68 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
  result = EnvironmentObject.error()(0, v66, v67, v68);
  __break(1u);
  return result;
}

uint64_t sub_1000454DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v12 = type metadata accessor for PlaceSummaryImageViewModel(0);
  v13 = sub_10000BC84(&qword_101494CF0, type metadata accessor for PlaceSummaryImageViewModel, (uint64_t)&unk_100E282A4);
  *(_QWORD *)a5 = ObservedObject.init(wrappedValue:)(a1, v12, v13);
  *(_QWORD *)(a5 + 8) = v14;
  *(double *)(a5 + 16) = a6;
  v16 = a5 + *(int *)(_s9ImageViewVMa(0, a3, a4, v15) + 40);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(v16, a2, a3);
}

uint64_t sub_10004558C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  void (*v12)(char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v4 = type metadata accessor for ColorScheme(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v16 - v9;
  _s5LabelVMa(0);
  sub_100019F8C((uint64_t)v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for ColorScheme.dark(_:), v4);
  v11 = static ColorScheme.== infix(_:_:)(v10, v7);
  v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v7, v4);
  v13 = ((uint64_t (*)(char *, uint64_t))v12)(v10, v4);
  if ((v11 & 1) != 0 && a2)
  {
    v14 = a2;
  }
  else
  {
    a2 = a1;
    if (!a1)
      a2 = static Color.secondary.getter(v13);
    v14 = a1;
  }
  swift_retain(v14);
  return a2;
}

unint64_t sub_1000456A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  Swift::String v5;

  v1 = _s5LabelVMa(0);
  v2 = (uint64_t *)(v0 + *(int *)(v1 + 20));
  v3 = (void *)v2[1];
  if (v3)
  {
    v4 = *v2;
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease(0xE000000000000000);
    v5._countAndFlagsBits = v4;
    v5._object = v3;
    String.append(_:)(v5);
    return 0xD00000000000001ALL;
  }
  else if (*(_QWORD *)(v0 + *(int *)(v1 + 32)))
  {
    return 0xD00000000000001ALL;
  }
  else
  {
    return 0xD000000000000011;
  }
}

uint64_t sub_100045774@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  char v42;
  char v43;
  char v44;
  char v45;

  v6 = type metadata accessor for PlaceSummaryStackedImageViewModel(0);
  v7 = sub_10000BC84(&qword_101495798, type metadata accessor for PlaceSummaryStackedImageViewModel, (uint64_t)&unk_100E28304);
  swift_retain(a1);
  v9 = ObservedObject.init(wrappedValue:)(v8, v6, v7);
  v35 = v10;
  v36 = v9;
  v11 = sub_10004598C(a1);
  v13 = v12;
  v14 = static Alignment.center.getter(v11);
  _FrameLayout.init(width:height:alignment:)(&v37, v13, 0, 0x4030000000000000, 0, v14, v15);
  v16 = v37;
  v17 = v38;
  v18 = v39;
  v19 = v40;
  v20 = *(_QWORD *)a2;
  v21 = *(_QWORD *)(a2 + 8);
  v22 = *(_BYTE *)(a2 + 16);
  v23 = *(_QWORD *)(a2 + 24);
  v24 = *(_BYTE *)(a2 + 32);
  v25 = *(_BYTE *)(a2 + 33);
  v26 = *(_QWORD *)(a2 + 40);
  v27 = *(_QWORD *)(a2 + 48);
  v28 = *(_QWORD *)(a2 + 56);
  v29 = *(_QWORD *)(a2 + 64);
  v31 = *(_QWORD *)(a2 + 72);
  v30 = *(_QWORD *)(a2 + 80);
  v32 = *(_BYTE *)(a2 + 88);
  v45 = v38;
  v44 = v40;
  v43 = v22;
  v42 = v32;
  *(_QWORD *)a3 = v36;
  *(_QWORD *)(a3 + 8) = v35;
  *(_QWORD *)(a3 + 16) = v16;
  *(_BYTE *)(a3 + 24) = v17;
  *(_QWORD *)(a3 + 32) = v18;
  *(_BYTE *)(a3 + 40) = v19;
  *(_OWORD *)(a3 + 48) = v41;
  *(_QWORD *)(a3 + 64) = v20;
  *(_QWORD *)(a3 + 72) = v21;
  *(_BYTE *)(a3 + 80) = v22;
  v33 = v23;
  *(_QWORD *)(a3 + 88) = v23;
  *(_BYTE *)(a3 + 96) = v24;
  *(_BYTE *)(a3 + 97) = v25;
  *(_QWORD *)(a3 + 104) = v26;
  *(_QWORD *)(a3 + 112) = v27;
  *(_QWORD *)(a3 + 120) = v28;
  *(_QWORD *)(a3 + 128) = v29;
  *(_QWORD *)(a3 + 136) = v31;
  *(_QWORD *)(a3 + 144) = v30;
  *(_BYTE *)(a3 + 152) = v32;
  swift_retain(v35);
  sub_10006BB40(v20, v21, v22);
  swift_retain(v29);
  swift_retain(v31);
  swift_bridgeObjectRetain(v33);
  swift_retain(v26);
  swift_retain(v27);
  swift_retain(v28);
  sub_10006BB40(v20, v21, v22);
  swift_bridgeObjectRetain(v33);
  swift_retain(v26);
  swift_retain(v27);
  swift_retain(v28);
  swift_retain(v29);
  swift_retain(v31);
  sub_10006B77C(v20, v21, v22);
  swift_release(v35);
  swift_release(v31);
  swift_release(v29);
  swift_release(v28);
  swift_release(v27);
  swift_release(v26);
  return swift_bridgeObjectRelease(v33);
}

uint64_t sub_10004598C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(result + OBJC_IVAR____TtC4Maps33PlaceSummaryStackedImageViewModel_imageSpecs);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v3 = *(_QWORD *)(result + OBJC_IVAR____TtC4Maps33PlaceSummaryStackedImageViewModel_imageSpecs);
    else
      v3 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(result + OBJC_IVAR____TtC4Maps33PlaceSummaryStackedImageViewModel_imageSpecs));
    v4 = _CocoaArrayWrapper.endIndex.getter(v3);
    result = swift_bridgeObjectRelease(v1);
    if (v4)
    {
      swift_bridgeObjectRetain(v1);
      v5 = _CocoaArrayWrapper.endIndex.getter(v3);
      result = swift_bridgeObjectRelease(v1);
      if (__OFSUB__(v5, 1))
        goto LABEL_13;
      swift_bridgeObjectRetain(v1);
      v2 = _CocoaArrayWrapper.endIndex.getter(v3);
      result = swift_bridgeObjectRelease(v1);
LABEL_3:
      if ((unint64_t)(v2 - 0x800000000000000) >> 60 == 15)
        return result;
      __break(1u);
LABEL_13:
      __break(1u);
    }
  }
  else
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v2)
      goto LABEL_3;
  }
  return result;
}

uint64_t sub_100045A84@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  __n128 v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;

  v49 = a1;
  v2 = _s4LineVMa(0);
  v43 = *(_QWORD *)(v2 - 8);
  v3 = *(_QWORD *)(v43 + 64);
  __chkstk_darwin(v2);
  v4 = sub_100008B04(&qword_101494950);
  __chkstk_darwin(v4);
  v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_100008B04(&qword_101494958);
  __chkstk_darwin(v48);
  v44 = (uint64_t)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v45 = (uint64_t)&v43 - v9;
  v46 = sub_100008B04(&qword_101494960);
  __chkstk_darwin(v46);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_100008B04(&qword_101494968);
  __chkstk_darwin(v47);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v43 - v19;
  v21 = sub_100045EF4(v1);
  v23 = v21;
  if (v21[2] == 1)
  {
    sub_1000202AC((uint64_t)v21 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80)), (uint64_t)v17, type metadata accessor for PlaceSummaryViewModelUnit);
    swift_bridgeObjectRelease(v23);
    sub_10003F29C((uint64_t)v17, (uint64_t)v20, type metadata accessor for PlaceSummaryViewModelUnit);
    sub_10004632C((uint64_t)v20, (uint64_t)v13);
    sub_10000C1FC((uint64_t)v13, (uint64_t)v11, &qword_101494968);
    swift_storeEnumTagMultiPayload(v11, v46, 0);
    v24 = sub_100061904();
    v25 = sub_1000623C4();
    _ConditionalContent<>.init(storage:)(v11, v47, v48, v24, v25);
    sub_100010CC4((uint64_t)v13, &qword_101494968);
    return sub_1000202F0((uint64_t)v20, type metadata accessor for PlaceSummaryViewModelUnit);
  }
  else
  {
    *(_QWORD *)v6 = static VerticalAlignment.center.getter(v22);
    *((_QWORD *)v6 + 1) = 0;
    v6[16] = 0;
    sub_100008B04(&qword_101494970);
    v50 = v23;
    sub_1000202AC(v1, (uint64_t)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), _s4LineVMa);
    v27 = *(unsigned __int8 *)(v43 + 80);
    v28 = (v27 + 16) & ~v27;
    v29 = swift_allocObject(&unk_10119DB30, v28 + v3, v27 | 7);
    sub_10003F29C((uint64_t)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v29 + v28, _s4LineVMa);
    v30 = sub_100008B04(&qword_101494978);
    v31 = type metadata accessor for UUID(0);
    v32 = sub_100010D70(&qword_101494980, &qword_101494978, (const char *)&protocol conformance descriptor for [A]);
    v33 = sub_100061904();
    v34 = sub_10000BC84(&qword_101494B18, type metadata accessor for PlaceSummaryViewModelUnit, (uint64_t)&unk_100E28114);
    v35 = v30;
    v36 = v47;
    ForEach<>.init(_:content:)(&v50, sub_1000618B4, v29, v35, v31, v47, v32, v33, v34);
    v37 = v44;
    sub_10000C1FC((uint64_t)v6, v44, &qword_101494950);
    v38 = v48;
    v39 = v37 + *(int *)(v48 + 36);
    *(_QWORD *)v39 = 0xD000000000000010;
    *(_QWORD *)(v39 + 8) = 0x8000000100E43AC0;
    *(_BYTE *)(v39 + 16) = 9;
    sub_100010CC4((uint64_t)v6, &qword_101494950);
    v40 = v37;
    v41 = v45;
    sub_1000207BC(v40, v45, &qword_101494958);
    sub_10000C1FC(v41, (uint64_t)v11, &qword_101494958);
    swift_storeEnumTagMultiPayload(v11, v46, 1);
    v42 = sub_1000623C4();
    _ConditionalContent<>.init(storage:)(v11, v36, v38, v33, v42);
    return sub_100010CC4(v41, &qword_101494958);
  }
}

_QWORD *sub_100045EF4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *result;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  char v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  v59 = v2;
  v60 = v3;
  __chkstk_darwin(v2);
  v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v45 - v7;
  v46 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  v9 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v47 = (uint64_t)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v45 - v12;
  __chkstk_darwin(v14);
  v16 = (char *)&v45 - v15;
  __chkstk_darwin(v17);
  v62 = (uint64_t)&v45 - v18;
  v45 = type metadata accessor for PlaceSummaryViewModelLine(0);
  v56 = *(int *)(v45 + 20);
  v19 = *(_QWORD *)(a1 + v56);
  v53 = *(_QWORD *)(v19 + 16);
  if (!v53)
    return _swiftEmptyArrayStorage;
  v54 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v52 = v19 + v54;
  result = (_QWORD *)swift_bridgeObjectRetain(v19);
  v21 = 0;
  v58 = _swiftEmptyArrayStorage;
  v49 = v9;
  v50 = a1;
  v48 = v16;
  v51 = v19;
  v22 = v59;
  while (v21 < *(_QWORD *)(v19 + 16))
  {
    v61 = *(_QWORD *)(v9 + 72);
    v23 = v62;
    sub_1000202AC(v52 + v61 * v21, v62, type metadata accessor for PlaceSummaryViewModelUnit);
    sub_1000202AC(v23, (uint64_t)v16, type metadata accessor for PlaceSummaryViewModelUnit);
    v24 = (unint64_t)v58;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v58);
    v57 = v21;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v24 = sub_1000A7E94(0, *(_QWORD *)(v24 + 16) + 1, 1, v24);
    v27 = *(_QWORD *)(v24 + 16);
    v26 = *(_QWORD *)(v24 + 24);
    v58 = (_QWORD *)v24;
    v28 = v54;
    if (v27 >= v26 >> 1)
    {
      v44 = (_QWORD *)sub_1000A7E94(v26 > 1, v27 + 1, 1, (unint64_t)v58);
      v28 = v54;
      v58 = v44;
    }
    v29 = v58;
    v58[2] = v27 + 1;
    v30 = (uint64_t)v29 + v28 + v27 * v61;
    v31 = v28;
    sub_10003F29C((uint64_t)v16, v30, type metadata accessor for PlaceSummaryViewModelUnit);
    v32 = *(_QWORD *)(a1 + v56);
    v33 = *(_QWORD *)(v32 + 16);
    if (v33)
    {
      v34 = v32 + v31;
      v55 = *(_QWORD *)(a1 + v56);
      swift_bridgeObjectRetain(v32);
      v35 = 0;
      while (1)
      {
        sub_1000202AC(v34, (uint64_t)v13, type metadata accessor for PlaceSummaryViewModelUnit);
        sub_1000896E8((uint64_t)v8);
        sub_1000896E8((uint64_t)v5);
        v36 = static UUID.== infix(_:_:)(v8, v5);
        v37 = *(void (**)(char *, uint64_t))(v60 + 8);
        v37(v5, v22);
        v37(v8, v22);
        sub_1000202F0((uint64_t)v13, type metadata accessor for PlaceSummaryViewModelUnit);
        if ((v36 & 1) != 0)
          break;
        ++v35;
        v34 += v61;
        if (v33 == v35)
        {
          swift_bridgeObjectRelease(v55);
          v9 = v49;
          a1 = v50;
LABEL_3:
          v16 = v48;
          goto LABEL_4;
        }
      }
      v38 = swift_bridgeObjectRelease(v55);
      v9 = v49;
      a1 = v50;
      if (v35 >= *(_QWORD *)(*(_QWORD *)(v50 + v56) + 16) - 1)
        goto LABEL_3;
      v39 = *(_BYTE *)(v50 + *(int *)(v45 + 28));
      v40 = v47;
      UUID.init()(v38);
      *(_BYTE *)(v40 + *(int *)(type metadata accessor for PlaceSummaryViewModelUnit.Delimiter(0) + 20)) = (v39 & 1) == 0;
      swift_storeEnumTagMultiPayload(v40, v46, 11);
      v42 = v58[2];
      v41 = v58[3];
      v16 = v48;
      if (v42 >= v41 >> 1)
        v58 = (_QWORD *)sub_1000A7E94(v41 > 1, v42 + 1, 1, (unint64_t)v58);
      v43 = v58;
      v58[2] = v42 + 1;
      sub_10003F29C(v47, (uint64_t)v43 + v54 + v42 * v61, type metadata accessor for PlaceSummaryViewModelUnit);
    }
LABEL_4:
    v19 = v51;
    v21 = v57 + 1;
    result = (_QWORD *)sub_1000202F0(v62, type metadata accessor for PlaceSummaryViewModelUnit);
    if (v21 == v53)
    {
      swift_bridgeObjectRelease(v19);
      return v58;
    }
  }
  __break(1u);
  return result;
}

void sub_10004632C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t (*v73)(_QWORD);
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t PartyRatings;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t PartyRatingsVMa;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;

  v175 = a1;
  v179 = a2;
  v103 = type metadata accessor for PlaceSummaryViewModelUnit.PhotoCarousel(0);
  __chkstk_darwin(v103);
  v140 = (char *)&v75 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = _s28RealTimeAvailableChargerViewVMa(0);
  __chkstk_darwin(v138);
  v109 = (char *)&v75 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = sub_100008B04(&qword_101494B38);
  __chkstk_darwin(v156);
  v158 = (char *)&v75 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = sub_100008B04(&qword_101494B40);
  __chkstk_darwin(v136);
  v137 = (char *)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v157 = sub_100008B04(&qword_101494AD8);
  __chkstk_darwin(v157);
  v139 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = sub_100008B04(&qword_101494AC8);
  __chkstk_darwin(v168);
  v159 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = _s5HoursVMa(0);
  __chkstk_darwin(v135);
  v108 = (char *)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = type metadata accessor for PlaceSummaryViewModelUnit.Hours(0);
  __chkstk_darwin(v100);
  v106 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = _s9DelimiterVMa(0);
  __chkstk_darwin(v133);
  v107 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = type metadata accessor for PlaceSummaryViewModelUnit.Delimiter(0);
  __chkstk_darwin(v96);
  v105 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = sub_100008B04(&qword_101494B48);
  __chkstk_darwin(v129);
  v132 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = sub_100008B04(&qword_101494AA8);
  __chkstk_darwin(v154);
  v134 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = _s13TappableEntryVMa(0);
  __chkstk_darwin(v131);
  v104 = (char *)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for PlaceSummaryViewModelUnit.TappableEntry(0);
  __chkstk_darwin(v15);
  v93 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v102 = (char *)&v75 - v18;
  v163 = sub_100008B04(&qword_101494B50);
  __chkstk_darwin(v163);
  v165 = (char *)&v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = sub_100008B04(&qword_101494B58);
  __chkstk_darwin(v150);
  v151 = (char *)&v75 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = sub_100008B04(&qword_101494A78);
  __chkstk_darwin(v164);
  v155 = (char *)&v75 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v173 = sub_100008B04(&qword_101494A68);
  __chkstk_darwin(v173);
  v169 = (char *)&v75 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = type metadata accessor for PlaceSummaryViewModelUnit.TransitShields(0);
  __chkstk_darwin(v88);
  v98 = (char *)&v75 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = type metadata accessor for PlaceSummaryViewModelUnit.UGCUserRecommendations(0);
  __chkstk_darwin(v87);
  v101 = (char *)&v75 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = sub_100008B04(&qword_101494B60);
  __chkstk_darwin(v126);
  v128 = (char *)&v75 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = sub_100008B04(&qword_101494A48);
  __chkstk_darwin(v152);
  v130 = (char *)&v75 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = _s17ThirdPartyRatingsVMa(0);
  __chkstk_darwin(v127);
  v99 = (char *)&v75 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for PlaceSummaryViewModelUnit.ThirdPartyRatings(0);
  __chkstk_darwin(v28);
  v97 = (char *)&v75 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  PartyRatingsVMa = _s17FirstPartyRatingsVMa(0);
  __chkstk_darwin(PartyRatingsVMa);
  v95 = (char *)&v75 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  PartyRatings = type metadata accessor for PlaceSummaryViewModelUnit.FirstPartyRatings(0);
  __chkstk_darwin(PartyRatings);
  v94 = (char *)&v75 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = sub_100008B04(&qword_101494B68);
  __chkstk_darwin(v146);
  v149 = (char *)&v75 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = sub_100008B04(&qword_101494B70);
  __chkstk_darwin(v122);
  v123 = (char *)&v75 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = sub_100008B04(&qword_101494A28);
  __chkstk_darwin(v148);
  v124 = (char *)&v75 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = sub_100008B04(&qword_101494A18);
  __chkstk_darwin(v167);
  v153 = (char *)&v75 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = _s18UserGeneratedGuideVMa(0);
  __chkstk_darwin(v121);
  v92 = (char *)&v75 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for PlaceSummaryViewModelUnit.UserGeneratedGuide(0);
  __chkstk_darwin(v37);
  v82 = (char *)&v75 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  v90 = (char *)&v75 - v40;
  v120 = _s18SingleCuratedGuideVMa(0);
  __chkstk_darwin(v120);
  v91 = (char *)&v75 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(0);
  __chkstk_darwin(v42);
  v81 = (char *)&v75 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44);
  v89 = (char *)&v75 - v45;
  v113 = sub_100008B04(&qword_101494B78);
  __chkstk_darwin(v113);
  v117 = (char *)&v75 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = sub_100008B04(&qword_1014949F8);
  __chkstk_darwin(v147);
  v119 = (char *)&v75 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = _s26MultipleCuratedCollectionsVMa(0);
  __chkstk_darwin(v115);
  v85 = (char *)&v75 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for PlaceSummaryViewModelUnit.MultipleCuratedGuides(0);
  __chkstk_darwin(v49);
  v79 = (char *)&v75 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = __chkstk_darwin(v51);
  v83 = (char *)&v75 - v53;
  v54 = type metadata accessor for AttributeContainer(0, v52);
  __chkstk_darwin(v54);
  v78 = (char *)&v75 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = type metadata accessor for PlaceSummaryViewModelUnit.Distance(0);
  __chkstk_darwin(v76);
  v84 = (char *)&v75 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = sub_100008B04(&qword_101494B80);
  __chkstk_darwin(v176);
  v178 = (char *)&v75 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = sub_100008B04(&qword_101494B88);
  __chkstk_darwin(v170);
  v172 = (char *)&v75 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  v160 = sub_100008B04(&qword_101494B90);
  __chkstk_darwin(v160);
  v162 = (char *)&v75 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = sub_100008B04(&qword_101494B98);
  __chkstk_darwin(v142);
  v144 = (char *)&v75 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = sub_100008B04(&qword_101494BA0);
  __chkstk_darwin(v114);
  v116 = (char *)&v75 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = sub_100008B04(&qword_1014949C8);
  __chkstk_darwin(v143);
  v118 = (char *)&v75 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = sub_100008B04(&qword_1014949B8);
  __chkstk_darwin(v161);
  v145 = (char *)&v75 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  v171 = sub_100008B04(&qword_1014949A8);
  __chkstk_darwin(v171);
  v166 = (char *)&v75 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  v177 = sub_100008B04(&qword_101494998);
  __chkstk_darwin(v177);
  v174 = (char *)&v75 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = type metadata accessor for AttributedString(0);
  __chkstk_darwin(v141);
  v112 = _s5LabelVMa(0);
  __chkstk_darwin(v112);
  v110 = (char *)&v75 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_100008B04(&qword_101494BA8);
  __chkstk_darwin(v67);
  v77 = _s10TitleLabelVMa(0);
  __chkstk_darwin(v77);
  v111 = sub_100008B04(&qword_1014949D8);
  __chkstk_darwin(v111);
  v80 = (char *)&v75 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for PlaceSummaryViewModelUnit.Label(0);
  __chkstk_darwin(v69);
  v70 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  __chkstk_darwin(v70);
  v72 = (char *)&v75 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000202AC(v175, (uint64_t)v72, v73);
  v74 = (char *)sub_100047188 + 4 * word_100E25BF6[swift_getEnumCaseMultiPayload(v72, v70)];
  __asm { BR              X10 }
}

uint64_t sub_100047188()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t KeyPath;
  int *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  void (*v38)(uint64_t, uint64_t, _QWORD);
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;

  v9 = v2;
  sub_10003F29C(v3, v2, type metadata accessor for PlaceSummaryViewModelUnit.Label);
  v10 = _s4LineVMa(0);
  v11 = v2 + v4[5];
  if (*(_BYTE *)(*(_QWORD *)(v0 + 240) + *(int *)(v10 + 20)) == 1)
  {
    v12 = *(_QWORD *)(v0 + 16);
    (*(void (**)(char *, uint64_t, _QWORD))(v6 + 16))(&v8[*(int *)(v12 + 20)], v11, *(_QWORD *)(v0 + 536));
    sub_10000C1FC(v2 + v4[12], (uint64_t)&v8[*(int *)(v12 + 24)], &qword_101494BF0);
    v13 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
    v14 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
    *(_QWORD *)v8 = EnvironmentObject.init()(v13, v14);
    *((_QWORD *)v8 + 1) = v15;
    sub_1000202AC((uint64_t)v8, v5, _s10TitleLabelVMa);
    swift_storeEnumTagMultiPayload(v5, v1, 0);
    v16 = sub_10000BC84(&qword_1014949E0, _s10TitleLabelVMa, (uint64_t)&unk_100E26AA4);
    v17 = sub_10000BC84(&qword_1014949E8, _s5LabelVMa, (uint64_t)&unk_100E26A54);
    v18 = *(_QWORD *)(v0 + 40);
    v19 = *(int **)(v0 + 304);
    _ConditionalContent<>.init(storage:)(v5, v12, v19, v16, v17);
    sub_1000202F0((uint64_t)v8, _s10TitleLabelVMa);
    v20 = v9;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD))(v6 + 16))(v7, v11, *(_QWORD *)(v0 + 536));
    v21 = v4[7];
    v22 = (_QWORD *)(v2 + v4[6]);
    v23 = v22[1];
    *(_QWORD *)(v0 + 728) = *v22;
    *(_QWORD *)(v0 + 720) = v23;
    v24 = *(_QWORD *)(v2 + v21);
    *(_QWORD *)(v0 + 680) = v24;
    v25 = *(_QWORD *)(v9 + v4[8]);
    *(_QWORD *)(v0 + 808) = *(_QWORD *)(v9 + v4[9]);
    v26 = v4[11];
    *(_QWORD *)(v0 + 656) = *(_QWORD *)(v9 + v4[10]);
    *(_QWORD *)(v0 + 760) = *(_QWORD *)(v9 + v26);
    *(_DWORD *)(v0 + 752) = *(unsigned __int8 *)(v9 + v26 + 8);
    v27 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
    *(_QWORD *)(v0 + 712) = v9;
    v28 = v27;
    v29 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
    swift_bridgeObjectRetain(v23);
    swift_retain(v24);
    swift_retain(v25);
    swift_retain(*(_QWORD *)(v0 + 808));
    v30 = *(_QWORD *)(v0 + 656);
    swift_retain(v30);
    *(_QWORD *)(v0 + 672) = EnvironmentObject.init()(v28, v29);
    *(_QWORD *)(v0 + 664) = v31;
    KeyPath = swift_getKeyPath(&unk_100E26008);
    v33 = *(int **)(v0 + 304);
    v34 = *(_QWORD *)(v0 + 288);
    v35 = (uint64_t *)(v34 + v33[12]);
    *v35 = KeyPath;
    v36 = sub_100008B04(&qword_101493188);
    v37 = v35;
    v20 = *(_QWORD *)(v0 + 712);
    swift_storeEnumTagMultiPayload(v37, v36, 0);
    v38 = *(void (**)(uint64_t, uint64_t, _QWORD))(v6 + 32);
    v19 = v33;
    v38(v34, v7, *(_QWORD *)(v0 + 536));
    v39 = (_QWORD *)(v34 + v33[5]);
    v40 = *(_QWORD *)(v0 + 720);
    *v39 = *(_QWORD *)(v0 + 728);
    v39[1] = v40;
    *(_QWORD *)(v34 + v33[6]) = *(_QWORD *)(v0 + 680);
    *(_QWORD *)(v34 + v33[7]) = v25;
    *(_QWORD *)(v34 + v33[8]) = *(_QWORD *)(v0 + 808);
    *(_QWORD *)(v34 + v33[9]) = v30;
    v41 = v34 + v33[10];
    *(_QWORD *)v41 = *(_QWORD *)(v0 + 760);
    *(_BYTE *)(v41 + 8) = *(_DWORD *)(v0 + 752);
    v42 = (_QWORD *)(v34 + v33[11]);
    v43 = *(_QWORD *)(v0 + 664);
    *v42 = *(_QWORD *)(v0 + 672);
    v42[1] = v43;
    sub_1000202AC(v34, v5, _s5LabelVMa);
    swift_storeEnumTagMultiPayload(v5, v1, 1);
    v44 = sub_10000BC84(&qword_1014949E0, _s10TitleLabelVMa, (uint64_t)&unk_100E26AA4);
    v45 = sub_10000BC84(&qword_1014949E8, _s5LabelVMa, (uint64_t)&unk_100E26A54);
    v18 = *(_QWORD *)(v0 + 40);
    _ConditionalContent<>.init(storage:)(v5, *(_QWORD *)(v0 + 16), v33, v44, v45);
    sub_1000202F0(v34, _s5LabelVMa);
  }
  v46 = *(_QWORD *)(v0 + 336);
  sub_10000C1FC(v18, v46, &qword_1014949D8);
  swift_storeEnumTagMultiPayload(v46, *(_QWORD *)(v0 + 320), 0);
  v47 = sub_100061B38();
  v48 = sub_10000BC84(&qword_1014949E8, _s5LabelVMa, (uint64_t)&unk_100E26A54);
  v49 = *(_QWORD *)(v0 + 352);
  _ConditionalContent<>.init(storage:)(v46, *(_QWORD *)(v0 + 296), v19, v47, v48);
  v50 = *(_QWORD *)(v0 + 560);
  sub_10000C1FC(v49, v50, &qword_1014949C8);
  swift_storeEnumTagMultiPayload(v50, *(_QWORD *)(v0 + 544), 0);
  v51 = sub_100061AB4();
  v52 = sub_100061BFC();
  v53 = *(_QWORD *)(v0 + 568);
  _ConditionalContent<>.init(storage:)(v50, *(_QWORD *)(v0 + 552), *(_QWORD *)(v0 + 584), v51, v52);
  sub_100010CC4(v49, &qword_1014949C8);
  v54 = *(_QWORD *)(v0 + 704);
  sub_10000C1FC(v53, v54, &qword_1014949B8);
  swift_storeEnumTagMultiPayload(v54, *(_QWORD *)(v0 + 688), 0);
  v55 = sub_100061A48();
  v56 = sub_100061CC0();
  v57 = *(_QWORD *)(v0 + 736);
  _ConditionalContent<>.init(storage:)(v54, *(_QWORD *)(v0 + 696), *(_QWORD *)(v0 + 744), v55, v56);
  sub_100010CC4(v53, &qword_1014949B8);
  v58 = *(_QWORD *)(v0 + 784);
  sub_10000C1FC(v57, v58, &qword_1014949A8);
  swift_storeEnumTagMultiPayload(v58, *(_QWORD *)(v0 + 768), 0);
  v59 = sub_1000619DC();
  v60 = sub_100061ECC();
  v61 = *(_QWORD *)(v0 + 800);
  _ConditionalContent<>.init(storage:)(v58, *(_QWORD *)(v0 + 776), *(_QWORD *)(v0 + 792), v59, v60);
  sub_100010CC4(v57, &qword_1014949A8);
  v62 = *(_QWORD *)(v0 + 832);
  sub_10000C1FC(v61, v62, &qword_101494998);
  swift_storeEnumTagMultiPayload(v62, *(_QWORD *)(v0 + 816), 0);
  v63 = sub_100061970();
  v64 = sub_100062380();
  _ConditionalContent<>.init(storage:)(v62, *(_QWORD *)(v0 + 824), &_s12UserNoteViewVN, v63, v64);
  sub_100010CC4(v61, &qword_101494998);
  sub_100010CC4(v18, &qword_1014949D8);
  return sub_1000202F0(v20, type metadata accessor for PlaceSummaryViewModelUnit.Label);
}

uint64_t sub_10004A5A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  NSBundle v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;

  *(_QWORD *)a7 = a1;
  *(_QWORD *)(a7 + 8) = a2;
  *(_QWORD *)(a7 + 16) = a3;
  *(_QWORD *)(a7 + 24) = a4;
  *(_BYTE *)(a7 + 32) = a5 & 1;
  if (qword_101490ED0 != -1)
    swift_once(&qword_101490ED0, sub_10011833C);
  v9.super.isa = (Class)qword_1014D4B80;
  v20._countAndFlagsBits = 0xD00000000000002DLL;
  v20._object = (void *)0x8000000100E43E30;
  v10._object = (void *)0x8000000100E43E10;
  v10._countAndFlagsBits = 0xD000000000000016;
  v11._countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  *(Swift::String *)(a7 + 40) = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, (Swift::String_optional)0, (NSBundle)qword_1014D4B80, v11, v20);
  v21._countAndFlagsBits = 0xD00000000000007DLL;
  v21._object = (void *)0x8000000100E43E60;
  v12._countAndFlagsBits = 0x6469754720756C25;
  v12._object = (void *)0xEA00000000007365;
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  *(Swift::String *)(a7 + 56) = NSLocalizedString(_:tableName:bundle:value:comment:)(v12, (Swift::String_optional)0, v9, v13, v21);
  v22._object = (void *)0x8000000100E43DC0;
  v14._countAndFlagsBits = 0x5020739980E24025;
  v14._object = (void *)0xAB000000006B6369;
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  v22._countAndFlagsBits = 0x1000000000000048;
  *(Swift::String *)(a7 + 72) = NSLocalizedString(_:tableName:bundle:value:comment:)(v14, (Swift::String_optional)0, v9, v15, v22);
  v16 = (int *)_s26MultipleCuratedCollectionsVMa(0);
  v17 = sub_10003F29C(a6, a7 + v16[9], type metadata accessor for PlaceSummaryViewModelUnit.MultipleCuratedGuides);
  v18 = v16[10];
  result = MapsFeature_IsEnabled_SearchAndDiscovery(v17);
  *(_BYTE *)(a7 + v18) = result;
  *(_QWORD *)(a7 + v16[11]) = 0x4008000000000000;
  return result;
}

uint64_t sub_10004A748@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  void *v26;
  uint64_t KeyPath;
  uint64_t v28;
  id v29;
  uint64_t *v30;
  uint64_t v31;
  _QWORD *v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t result;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  char v91;
  char v92;
  double v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;

  v3 = sub_100008B04(&qword_101495B28);
  __chkstk_darwin(v3);
  v5 = (char *)&v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v76 - v7;
  v9 = sub_100008B04(&qword_101495B30);
  __chkstk_darwin(v9);
  v11 = (double *)((char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = _s9DelimiterVMa(0);
  if ((*(_BYTE *)(v1 + *(int *)(v12 + 24)) & 1) != 0)
  {
    v81 = v5;
    v82 = v8;
    v83 = v9;
    v84 = a1;
    v85 = v3;
    v13 = LocalizedStringKey.init(stringLiteral:)(47042, 0xA200000000000000);
    v14 = Text.init(_:tableName:bundle:comment:)(v13);
    v16 = v15;
    v18 = v17;
    v20 = v19 & 1;
    v21 = static Font.subheadline.getter();
    v22 = Text.font(_:)(v21, v14, v16, v20, v18);
    v79 = v23;
    LODWORD(v77) = v24;
    v80 = v25;
    swift_release(v21);
    sub_10006B77C(v14, v16, v20);
    swift_bridgeObjectRelease(v18);
    v26 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      KeyPath = swift_getKeyPath(&unk_100E26B00);
      v28 = swift_getKeyPath(&unk_100E26B28);
      v29 = v26;
      static Published.subscript.getter(&v86, v29, KeyPath, v28);

      swift_release(KeyPath);
      swift_release(v28);
      v78 = v12;
      if ((LOBYTE(v86) & 1) != 0)
      {
        if (qword_101490CD8 != -1)
          swift_once(&qword_101490CD8, sub_100043F38);
        v30 = &qword_1014D46A0;
      }
      else
      {
        if (qword_101490CE0 != -1)
          swift_once(&qword_101490CE0, sub_100043F7C);
        v30 = &qword_1014D46A8;
      }
      v44 = v77;
      v45 = *v30;
      swift_retain(*v30);
      v46 = v44 & 1;
      v47 = v22;
      v48 = v79;
      v49 = v44 & 1;
      v50 = v22;
      v51 = v80;
      *(double *)&v53 = COERCE_DOUBLE(Text.foregroundColor(_:)(v52, v47, v79, v49, v80));
      v55 = v54;
      v57 = v56;
      v77 = v58;
      swift_release(v45);
      v57 &= 1u;
      sub_10006B77C(v50, v48, v46);
      swift_bridgeObjectRelease(v51);
      v59 = swift_getKeyPath(&unk_100E26B48);
      LOBYTE(v45) = static Edge.Set.horizontal.getter(v59);
      v60 = sub_100008B04(&qword_10149D390);
      ScaledMetric.wrappedValue.getter(&v86, v60);
      v61 = EdgeInsets.init(_all:)(v86);
      v86 = *(double *)&v53;
      v87 = v55;
      LOBYTE(v88) = v57;
      v62 = v77;
      v89 = v77;
      *(_QWORD *)&v90 = v59;
      *((_QWORD *)&v90 + 1) = 1;
      v91 = 0;
      v92 = v45;
      v93 = v61;
      v94 = v63;
      v95 = v64;
      v96 = v65;
      v97 = 0;
      v66 = sub_100008B04(&qword_101495B38);
      v67 = sub_10006DA8C();
      v68 = (uint64_t)v81;
      View.accessibilityHidden(_:)(1, v66, v67);
      sub_10006B77C(v53, v55, v57);
      swift_release(v59);
      swift_bridgeObjectRelease(v62);
      v69 = (uint64_t)v82;
      sub_1000207BC(v68, (uint64_t)v82, &qword_101495B28);
      sub_10000C1FC(v69, (uint64_t)v11, &qword_101495B28);
      swift_storeEnumTagMultiPayload(v11, v83, 1);
      v70 = sub_100008B04(&qword_101495B48);
      v71 = sub_10006EB08(&qword_101495B50, &qword_101495B48, (uint64_t)&protocol witness table for Spacer, (uint64_t)&protocol witness table for _FrameLayout);
      v72 = sub_10006DB18();
      _ConditionalContent<>.init(storage:)(v11, v70, v85, v71, v72);
      return sub_100010CC4(v69, &qword_101495B28);
    }
    else
    {
      v73 = *(_QWORD *)(v1 + 8);
      v74 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
      v75 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
      result = EnvironmentObject.error()(0, v73, v74, v75);
      __break(1u);
    }
  }
  else
  {
    v31 = sub_100008B04(&qword_10149D390);
    v32 = ScaledMetric.wrappedValue.getter(&v86, v31);
    v33 = v86;
    v34 = static Alignment.center.getter(v32);
    _FrameLayout.init(width:height:alignment:)(&v86, *(_QWORD *)&v33, 0, 0, 1, v34, v35);
    v36 = v86;
    v37 = v87;
    v38 = v88;
    v39 = v89;
    *v11 = 0.0;
    *((_BYTE *)v11 + 8) = 1;
    v11[2] = v36;
    *((_BYTE *)v11 + 24) = v37;
    *((_QWORD *)v11 + 4) = v38;
    *((_BYTE *)v11 + 40) = v39;
    *((_OWORD *)v11 + 3) = v90;
    swift_storeEnumTagMultiPayload(v11, v9, 0);
    v40 = sub_100008B04(&qword_101495B48);
    v41 = sub_10006EB08(&qword_101495B50, &qword_101495B48, (uint64_t)&protocol witness table for Spacer, (uint64_t)&protocol witness table for _FrameLayout);
    v42 = sub_10006DB18();
    return _ConditionalContent<>.init(storage:)(v11, v40, v3, v41, v42);
  }
  return result;
}

uint64_t sub_10004ACA8@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  void **v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  int v29;
  void **v30;
  uint64_t (*v31)(_QWORD);
  unsigned __int8 *v32;
  int v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  uint64_t KeyPath;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t result;
  uint64_t v47;
  void *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __n128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  Swift::String v71;
  Swift::String v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _OWORD v111[10];
  char v112;
  _OWORD v113[6];
  _OWORD v114[2];
  _OWORD v115[8];
  char v116;
  __int128 v117;
  __int128 v118;
  _OWORD v119[9];
  Swift::String v120;

  v3 = v2;
  v109 = a1;
  v4 = type metadata accessor for AccessibilityTraits(0, a2);
  v98 = *(_QWORD *)(v4 - 8);
  v99 = v4;
  __chkstk_darwin(v4);
  v97 = (char *)&v90 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = sub_100008B04(&qword_1014957A0);
  __chkstk_darwin(v108);
  v95 = (char *)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v96 = (char *)&v90 - v8;
  __chkstk_darwin(v9);
  v101 = (char *)&v90 - v10;
  __chkstk_darwin(v11);
  v100 = (char *)&v90 - v12;
  __chkstk_darwin(v13);
  v15 = (char *)&v90 - v14;
  v103 = sub_100008B04(&qword_1014957A8);
  __chkstk_darwin(v103);
  v106 = (uint64_t)&v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_100008B04(&qword_1014957B0);
  __chkstk_darwin(v104);
  v18 = (char *)&v90 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = type metadata accessor for AttributedString(0);
  v105 = *(_QWORD *)(v107 - 8);
  __chkstk_darwin(v107);
  v110 = (uint64_t)&v90 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v22 = (char *)&v90 - v21;
  v23 = _s26MultipleCuratedCollectionsVMa(0);
  v93 = *(_QWORD *)(v23 - 8);
  v24 = *(_QWORD *)(v93 + 64);
  __chkstk_darwin(v23);
  v94 = (uint64_t)&v90 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v27 = (char *)&v90 - v26;
  v29 = *((unsigned __int8 *)v3 + *(int *)(v28 + 40));
  v30 = v3;
  sub_1000202AC((uint64_t)v3, (uint64_t)&v90 - v26, v31);
  v102 = v15;
  if (v29 == 1)
  {
    if (!*(_QWORD *)v27)
    {
      v87 = (void *)*((_QWORD *)v27 + 1);
      goto LABEL_15;
    }
    v32 = (unsigned __int8 *)*(id *)v27;
    sub_1000202F0((uint64_t)v27, _s26MultipleCuratedCollectionsVMa);
    v33 = v32[OBJC_IVAR____TtC4Maps29PlaceSummaryViewModelTemplate_useCase];

    if (v33 == 2)
    {
      v34 = (char *)v3 + *(int *)(v23 + 36);
      v35 = *(_QWORD *)&v34[*(int *)(type metadata accessor for PlaceSummaryViewModelUnit.MultipleCuratedGuides(0) + 20)];
      v36 = (_QWORD *)(v35 - 1);
      if (__OFSUB__(v35, 1))
      {
        __break(1u);
      }
      else
      {
        v37 = *v3;
        if (*v3)
        {
          KeyPath = swift_getKeyPath(&unk_100E26B00);
          v39 = swift_getKeyPath(&unk_100E26B28);
          v40 = v37;
          static Published.subscript.getter(&v117, v40, KeyPath, v39);

          swift_release(KeyPath);
          swift_release(v39);
          v41 = sub_10004B5C4(v36, v117, (uint64_t)v22);
          *(_QWORD *)v18 = static VerticalAlignment.bottom.getter(v41);
          *((_QWORD *)v18 + 1) = 0x4000000000000000;
          v18[16] = 0;
          v42 = v104;
          sub_10004C15C(v3, (uint64_t)v22, (uint64_t)&v18[*(int *)(v104 + 44)]);
          v43 = v106;
          sub_10000C1FC((uint64_t)v18, v106, &qword_1014957B0);
          swift_storeEnumTagMultiPayload(v43, v103, 0);
          v44 = sub_10006C190();
          v45 = sub_10006C22C();
          _ConditionalContent<>.init(storage:)(v43, v42, v108, v44, v45);
          sub_100010CC4((uint64_t)v18, &qword_1014957B0);
          return (*(uint64_t (**)(char *, uint64_t))(v105 + 8))(v22, v107);
        }
      }
      goto LABEL_13;
    }
  }
  else
  {
    sub_1000202F0((uint64_t)v27, _s26MultipleCuratedCollectionsVMa);
  }
  v47 = type metadata accessor for PlaceSummaryViewModelUnit.MultipleCuratedGuides(0);
  v48 = *v3;
  if (!*v30)
  {
LABEL_13:
    v87 = v30[1];
LABEL_15:
    v88 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
    v89 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
    result = EnvironmentObject.error()(0, v87, v88, v89);
    __break(1u);
    return result;
  }
  v49 = *(void **)((char *)v30 + *(int *)(v23 + 36) + *(int *)(v47 + 20));
  v50 = swift_getKeyPath(&unk_100E26B00);
  v51 = (uint64_t)v30;
  v52 = swift_getKeyPath(&unk_100E26B28);
  v53 = v48;
  static Published.subscript.getter(&v117, v53, v50, v52);

  swift_release(v50);
  swift_release(v52);
  v54 = v110;
  sub_10004B5C4(v49, v117, v110);
  v55 = (uint64_t)v30;
  v56 = v94;
  sub_1000202AC(v55, v94, _s26MultipleCuratedCollectionsVMa);
  v57 = *(unsigned __int8 *)(v93 + 80);
  v58 = (v57 + 16) & ~v57;
  v59 = v57 | 7;
  v91 = v58 + v24;
  v60 = swift_allocObject(&unk_10119E110, v58 + v24, v57 | 7);
  v92 = v58;
  sub_10003F29C(v56, v60 + v58, _s26MultipleCuratedCollectionsVMa);
  v62 = static VerticalAlignment.center.getter(v61);
  v93 = v51;
  sub_10004DE6C(v51, v54, (uint64_t)v113);
  *(_OWORD *)((char *)&v115[4] + 7) = v113[4];
  *(_OWORD *)((char *)&v115[5] + 7) = v113[5];
  *(_OWORD *)((char *)&v115[6] + 7) = v114[0];
  v115[7] = *(_OWORD *)((char *)v114 + 9);
  *(_OWORD *)((char *)v115 + 7) = v113[0];
  *(_OWORD *)((char *)&v115[1] + 7) = v113[1];
  *(_OWORD *)((char *)&v115[2] + 7) = v113[2];
  *(_OWORD *)((char *)&v115[3] + 7) = v113[3];
  *(_OWORD *)((char *)&v119[7] + 1) = *(_OWORD *)((char *)v114 + 9);
  *(_OWORD *)((char *)&v119[4] + 1) = v115[4];
  *(_OWORD *)((char *)&v119[5] + 1) = v115[5];
  *(_OWORD *)((char *)v119 + 1) = v115[0];
  *(_OWORD *)((char *)&v119[3] + 1) = v115[3];
  *(_OWORD *)((char *)&v119[2] + 1) = v115[2];
  v116 = 0;
  *(_QWORD *)&v117 = sub_10006BF08;
  *((_QWORD *)&v117 + 1) = v60;
  *(_QWORD *)&v118 = v62;
  *((_QWORD *)&v118 + 1) = 0x4010000000000000;
  LOBYTE(v119[0]) = 0;
  *(_OWORD *)((char *)&v119[1] + 1) = v115[1];
  *(_OWORD *)((char *)&v119[6] + 1) = v115[6];
  v111[8] = v119[6];
  v111[9] = v119[7];
  v112 = BYTE8(v114[1]);
  v111[4] = v119[2];
  v111[5] = v119[3];
  v111[6] = v119[4];
  v111[7] = v119[5];
  v111[0] = v117;
  v111[1] = v118;
  v111[2] = v119[0];
  v111[3] = v119[1];
  v63 = sub_100008B04(&qword_1014957B8);
  v64 = sub_100010D70((unint64_t *)&unk_1014957C0, &qword_1014957B8, "=u7");
  v65 = (uint64_t)v95;
  View.accessibility(identifier:)(0xD00000000000001BLL, 0x8000000100E44240, v63, v64);
  sub_10006BF1C((uint64_t)&v117);
  v66 = (uint64_t)v96;
  v67 = v108;
  ModifiedContent<>.accessibilityAutomationType(_:)(9, v108);
  v68 = sub_100010CC4(v65, &qword_1014957A0);
  v69 = v97;
  static AccessibilityTraits.isButton.getter(v68);
  v70 = (uint64_t)v101;
  ModifiedContent<>.accessibilityRemoveTraits(_:)(v69, v67);
  (*(void (**)(char *, uint64_t))(v98 + 8))(v69, v99);
  sub_100010CC4(v66, &qword_1014957A0);
  if (qword_101490ED0 != -1)
    swift_once(&qword_101490ED0, sub_10011833C);
  v120._countAndFlagsBits = 0xD00000000000004FLL;
  v120._object = (void *)0x8000000100E44280;
  v71._object = (void *)0x8000000100E44260;
  v71._countAndFlagsBits = 0xD00000000000001BLL;
  v72._countAndFlagsBits = 0x69754720776F6853;
  v72._object = (void *)0xEB00000000736564;
  v111[0] = NSLocalizedString(_:tableName:bundle:value:comment:)(v71, (Swift::String_optional)0, (NSBundle)qword_1014D4B80, v72, v120);
  v73 = sub_10006C008();
  v74 = Text.init<A>(_:)(v111, &type metadata for String, v73);
  v76 = v75;
  v78 = v77;
  v80 = v79 & 1;
  sub_1000202AC(v93, v56, _s26MultipleCuratedCollectionsVMa);
  v81 = swift_allocObject(&unk_10119E138, v91, v59);
  sub_10003F29C(v56, v81 + v92, _s26MultipleCuratedCollectionsVMa);
  v82 = (uint64_t)v100;
  ModifiedContent<>.accessibilityAction(named:_:)(v74, v76, v80, v78, sub_10006BF08, v81, v67);
  swift_release(v81);
  sub_10006B77C(v74, v76, v80);
  swift_bridgeObjectRelease(v78);
  sub_100010CC4(v70, &qword_1014957A0);
  v83 = (uint64_t)v102;
  sub_1000207BC(v82, (uint64_t)v102, &qword_1014957A0);
  v84 = v106;
  sub_10000C1FC(v83, v106, &qword_1014957A0);
  swift_storeEnumTagMultiPayload(v84, v103, 1);
  v85 = sub_10006C190();
  v86 = sub_10006C22C();
  _ConditionalContent<>.init(storage:)(v84, v104, v67, v85, v86);
  sub_100010CC4(v83, &qword_1014957A0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v105 + 8))(v110, v107);
}

uint64_t sub_10004B5C4@<X0>(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  int IsEnabled_SearchAndDiscovery;
  unsigned __int8 *v45;
  int v46;
  void *v47;
  NSString v48;
  NSString v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  void *v62;
  NSString v63;
  NSString v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  Swift::String v84;
  _QWORD *v85;
  Swift::String v86;
  uint64_t v87;
  void (*v88)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  Swift::String v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(_QWORD **, _QWORD);
  unint64_t v108;
  uint64_t v109;
  uint64_t KeyPath;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(_QWORD **, _QWORD);
  unint64_t v117;
  uint64_t result;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  __int128 v128;
  uint64_t v129;
  char *v130;
  char *v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  _QWORD v140[3];

  v132 = a1;
  v127 = a2;
  v137 = a3;
  v129 = type metadata accessor for AttributedString.FormattingOptions(0);
  v3 = __chkstk_darwin(v129);
  v5 = (char *)&v122 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for String.LocalizationValue(0, v3);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v122 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for String.LocalizationValue.StringInterpolation(0, v7);
  __chkstk_darwin(v10);
  v12 = (char *)&v122 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100008B04(&qword_1014958A0);
  __chkstk_darwin(v13);
  v15 = (char *)&v122 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100008B04(&qword_1014958A8);
  __chkstk_darwin(v16);
  v130 = (char *)&v122 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v123 = (char *)&v122 - v19;
  v20 = sub_100008B04(&qword_1014958B0);
  v133 = *(_QWORD *)(v20 - 8);
  v134 = v20;
  __chkstk_darwin(v20);
  v126 = (uint64_t)&v122 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v125 = (uint64_t)&v122 - v23;
  __chkstk_darwin(v24);
  v26 = (char *)&v122 - v25;
  v28 = __chkstk_darwin(v27);
  v122 = (uint64_t)&v122 - v29;
  v30 = type metadata accessor for AttributeContainer(0, v28);
  __chkstk_darwin(v30);
  v32 = (char *)&v122 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for AttributedString(0);
  v135 = *(_QWORD *)(v33 - 8);
  v136 = v33;
  __chkstk_darwin(v33);
  *(_QWORD *)&v128 = (char *)&v122 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  v37 = (char *)&v122 - v36;
  __chkstk_darwin(v38);
  v124 = (char *)&v122 - v39;
  v40 = _s26MultipleCuratedCollectionsVMa(0);
  __chkstk_darwin(v40);
  v42 = (char *)&v122 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  IsEnabled_SearchAndDiscovery = MapsFeature_IsEnabled_SearchAndDiscovery(v43);
  sub_1000202AC((uint64_t)v131, (uint64_t)v42, _s26MultipleCuratedCollectionsVMa);
  if (!IsEnabled_SearchAndDiscovery)
  {
    sub_1000202F0((uint64_t)v42, _s26MultipleCuratedCollectionsVMa);
    goto LABEL_9;
  }
  if (*(_QWORD *)v42)
  {
    v45 = (unsigned __int8 *)*(id *)v42;
    sub_1000202F0((uint64_t)v42, _s26MultipleCuratedCollectionsVMa);
    v46 = v45[OBJC_IVAR____TtC4Maps29PlaceSummaryViewModelTemplate_useCase];

    if (v46 == 2)
    {
      v130 = v26;
      v131 = v15;
      v129 = (uint64_t)v37;
      if (qword_101490ED0 != -1)
        swift_once(&qword_101490ED0, sub_10011833C);
      v47 = (void *)qword_1014D4B80;
      v48 = String._bridgeToObjectiveC()();
      v49 = String._bridgeToObjectiveC()();
      v50 = objc_msgSend(v47, "localizedStringForKey:value:table:", v48, v49, 0);

      v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
      v53 = v52;

      v54 = sub_100008B04((uint64_t *)&unk_10149A4F0);
      v55 = swift_allocObject(v54, 72, 7);
      v128 = xmmword_100E22F40;
      *(_OWORD *)(v55 + 16) = xmmword_100E22F40;
      *(_QWORD *)(v55 + 56) = &type metadata for Int;
      *(_QWORD *)(v55 + 64) = &protocol witness table for Int;
      v56 = v132;
      *(_QWORD *)(v55 + 32) = v132;
      v57 = static String.localizedStringWithFormat(_:_:)(v51, v53, v55);
      v59 = v58;
      swift_bridgeObjectRelease(v55);
      v60 = swift_bridgeObjectRelease(v53);
      AttributeContainer.init()(v60);
      v61 = v124;
      AttributedString.init(_:attributes:)(v57, v59, v32);
      v62 = (void *)qword_1014D4B80;
      v63 = String._bridgeToObjectiveC()();
      v64 = String._bridgeToObjectiveC()();
      v65 = objc_msgSend(v62, "localizedStringForKey:value:table:", v63, v64, 0);

      v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
      v68 = v67;

      v69 = swift_allocObject(v54, 72, 7);
      *(_OWORD *)(v69 + 16) = v128;
      *(_QWORD *)(v69 + 56) = &type metadata for Int;
      *(_QWORD *)(v69 + 64) = &protocol witness table for Int;
      v70 = v61;
      *(_QWORD *)(v69 + 32) = v56;
      v71 = static String.localizedStringWithFormat(_:_:)(v66, v68, v69);
      v73 = v72;
      swift_bridgeObjectRelease(v69);
      swift_bridgeObjectRelease(v68);
      v75 = v135;
      v74 = v136;
      v76 = v129;
      (*(void (**)(uint64_t, char *, uint64_t))(v135 + 16))(v129, v61, v136);
      v138 = (_QWORD *)v71;
      v139 = v73;
      v77 = type metadata accessor for Locale(0);
      v78 = (uint64_t)v131;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 56))(v131, 1, 1, v77);
      v79 = sub_10000BC84(&qword_1014958D0, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString, (uint64_t)&protocol conformance descriptor for AttributedString);
      v80 = sub_10006C008();
      v81 = (uint64_t)v123;
      AttributedStringProtocol.range<A>(of:options:locale:)(&v138, 0, v78, v74, &type metadata for String, v79, v80);
      sub_100010CC4(v78, &qword_1014958A0);
      (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v76, v74);
      swift_bridgeObjectRelease(v73);
      v82 = v134;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v133 + 48))(v81, 1, v134) == 1)
      {
        sub_100010CC4(v81, &qword_1014958A8);
        v83 = v137;
      }
      else
      {
        v109 = v122;
        sub_1000207BC(v81, v122, &qword_1014958B0);
        sub_10000C1FC(v109, (uint64_t)v130, &qword_1014958B0);
        KeyPath = swift_getKeyPath(&unk_100E26BA8);
        __chkstk_darwin(KeyPath);
        v111 = swift_getKeyPath(&unk_100E26BD8);
        v112 = v111;
        v83 = v137;
        if ((v127 & 1) != 0)
          v113 = static Color.white.getter(v111);
        else
          v113 = static Color.blue.getter();
        v140[0] = v113;
        v114 = sub_100010D70(&qword_1014958E0, &qword_1014958B0, (const char *)&protocol conformance descriptor for Range<A>);
        v115 = (uint64_t)v130;
        v116 = (void (*)(_QWORD **, _QWORD))AttributedString.subscript.modify(&v138, v130, v82, v114);
        v117 = sub_10006C5A8();
        AttributedSubstring.subscript.setter(v140, v112, v117);
        v116(&v138, 0);
        sub_100010CC4(v115, &qword_1014958B0);
        sub_100010CC4(v109, &qword_1014958B0);
      }
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v75 + 32))(v83, v70, v74);
    }
LABEL_9:
    String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(19, 1);
    v84._countAndFlagsBits = 0x6465727574616546;
    v84._object = (void *)0xEC000000206E6920;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v84);
    v85 = v132;
    v138 = v132;
    String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v138, 7695397, 0xE300000000000000, &type metadata for Int, &protocol witness table for Int);
    v86._countAndFlagsBits = 0x73656469754720;
    v86._object = (void *)0xE700000000000000;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v86);
    String.LocalizationValue.init(stringInterpolation:)(v12);
    v87 = type metadata accessor for Locale(0);
    v88 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 56);
    v88(v15, 1, 1, v87);
    v138 = _swiftEmptyArrayStorage;
    v89 = sub_10000BC84(&qword_1014958B8, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.FormattingOptions, (uint64_t)&protocol conformance descriptor for AttributedString.FormattingOptions);
    v90 = sub_100008B04(&qword_1014958C0);
    v91 = sub_100010D70(&qword_1014958C8, &qword_1014958C0, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v138, v90, v91, v129, v89);
    v92 = v9;
    v93 = (char *)v128;
    AttributedString.init(localized:options:table:bundle:locale:comment:)(v92, v5, 0, 0, 0, v15, 0, 0, 256);
    v75 = v135;
    v74 = v136;
    (*(void (**)(char *, char *, uint64_t))(v135 + 16))(v37, v93, v136);
    v140[0] = v85;
    v138 = (_QWORD *)dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v139 = v94;
    v95._countAndFlagsBits = 0x73656469754720;
    v95._object = (void *)0xE700000000000000;
    String.append(_:)(v95);
    v88(v15, 1, 1, v87);
    v96 = sub_10000BC84(&qword_1014958D0, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString, (uint64_t)&protocol conformance descriptor for AttributedString);
    v97 = sub_10006C008();
    v98 = (uint64_t)v130;
    AttributedStringProtocol.range<A>(of:options:locale:)(&v138, 0, v15, v74, &type metadata for String, v96, v97);
    sub_100010CC4((uint64_t)v15, &qword_1014958A0);
    swift_bridgeObjectRelease(v139);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v37, v74);
    v99 = v134;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v133 + 48))(v98, 1, v134) == 1)
    {
      sub_100010CC4(v98, &qword_1014958A8);
      v70 = v93;
      v83 = v137;
    }
    else
    {
      v100 = v125;
      sub_1000207BC(v98, v125, &qword_1014958B0);
      v101 = v126;
      sub_10000C1FC(v100, v126, &qword_1014958B0);
      v102 = swift_getKeyPath(&unk_100E26BA8);
      __chkstk_darwin(v102);
      v103 = swift_getKeyPath(&unk_100E26BD8);
      v104 = v103;
      if ((v127 & 1) != 0)
        v105 = static Color.white.getter(v103);
      else
        v105 = static Color.blue.getter();
      v83 = v137;
      v140[0] = v105;
      v106 = sub_100010D70(&qword_1014958E0, &qword_1014958B0, (const char *)&protocol conformance descriptor for Range<A>);
      v107 = (void (*)(_QWORD **, _QWORD))AttributedString.subscript.modify(&v138, v101, v99, v106);
      v108 = sub_10006C5A8();
      AttributedSubstring.subscript.setter(v140, v104, v108);
      v107(&v138, 0);
      sub_100010CC4(v101, &qword_1014958B0);
      sub_100010CC4(v100, &qword_1014958B0);
      v70 = v93;
    }
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v75 + 32))(v83, v70, v74);
  }
  v119 = *((_QWORD *)v42 + 1);
  v120 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
  v121 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
  result = EnvironmentObject.error()(0, v119, v120, v121);
  __break(1u);
  return result;
}

uint64_t sub_10004C15C@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t KeyPath;
  uint64_t v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  Swift::String v91;
  Swift::String v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __n128 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  Swift::String v124;
  Swift::String v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  __n128 v148;
  uint64_t v149;
  char v150;
  uint64_t v151;
  __int128 v152;
  __int128 v153;
  char v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  Swift::String v166;
  Swift::String v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t result;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  _QWORD *v201;
  char *v202;
  char *v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  char *v214;
  char *v215;
  void **v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  _OWORD v229[6];
  _OWORD v230[2];
  __int128 v231;
  _BYTE v232[48];
  __int128 v233;
  _BYTE v234[41];
  Swift::String v235;

  v211 = a2;
  v221 = a3;
  v218 = sub_100008B04(&qword_101495800);
  __chkstk_darwin(v218);
  v213 = (char *)&v187 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v214 = (char *)&v187 - v6;
  __chkstk_darwin(v7);
  v217 = (char *)&v187 - v8;
  __chkstk_darwin(v9);
  v220 = (char *)&v187 - v10;
  v12 = __chkstk_darwin(v11);
  v219 = (uint64_t)&v187 - v13;
  v14 = type metadata accessor for AccessibilityTraits(0, v12);
  v226 = *(_QWORD *)(v14 - 8);
  v227 = v14;
  __chkstk_darwin(v14);
  v225 = (char *)&v187 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = _s26MultipleCuratedCollectionsVMa(0);
  v223 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v199 = (uint64_t)&v187 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v224 = v17;
  __chkstk_darwin(v18);
  v20 = (char *)&v187 - v19;
  v206 = sub_100008B04(&qword_101495808);
  __chkstk_darwin(v206);
  v201 = (uint64_t *)((char *)&v187 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v222 = sub_100008B04(&qword_101495810);
  v210 = *(_QWORD *)(v222 - 8);
  __chkstk_darwin(v222);
  v200 = (char *)&v187 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v202 = (char *)&v187 - v24;
  __chkstk_darwin(v25);
  v209 = (char *)&v187 - v26;
  v28 = __chkstk_darwin(v27);
  v203 = (char *)&v187 - v29;
  v30 = type metadata accessor for LocalizedStringKey.StringInterpolation(0, v28);
  __chkstk_darwin(v30);
  v205 = (char *)&v187 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_100008B04(&qword_101495308);
  __chkstk_darwin(v32);
  v34 = (char *)&v187 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(0);
  v36 = *(_QWORD *)(v35 - 8);
  v37 = *(_QWORD *)(v36 + 64);
  __chkstk_darwin(v35);
  v198 = (uint64_t)&v187 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  v207 = (uint64_t)&v187 - v39;
  __chkstk_darwin(v40);
  v42 = (char *)&v187 - v41;
  v43 = sub_100008B04(&qword_101495818);
  __chkstk_darwin(v43);
  v212 = (uint64_t)&v187 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v45);
  v228 = (uint64_t)&v187 - v46;
  v47 = (char *)a1 + *(int *)(v16 + 36);
  v48 = type metadata accessor for PlaceSummaryViewModelUnit.MultipleCuratedGuides(0);
  sub_10000C1FC((uint64_t)&v47[*(int *)(v48 + 28)], (uint64_t)v34, &qword_101495308);
  v197 = v36;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35) == 1)
  {
    sub_100010CC4((uint64_t)v34, &qword_101495308);
    v49 = 1;
    v50 = v224;
    v51 = v225;
    v52 = v228;
    v54 = v222;
    v53 = v223;
  }
  else
  {
    v215 = v20;
    sub_10003F29C((uint64_t)v34, (uint64_t)v42, type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide);
    v55 = a1[9];
    v56 = a1[10];
    v57 = sub_100008B04((uint64_t *)&unk_10149A4F0);
    v58 = swift_allocObject(v57, 72, 7);
    *(_OWORD *)(v58 + 16) = xmmword_100E22F40;
    v59 = *(int *)(v35 + 24);
    v208 = v42;
    v60 = &v42[v59];
    v61 = *(_QWORD *)v60;
    v62 = *((_QWORD *)v60 + 1);
    *(_QWORD *)(v58 + 56) = &type metadata for String;
    *(_QWORD *)(v58 + 64) = sub_10000D8E0();
    *(_QWORD *)(v58 + 32) = v61;
    *(_QWORD *)(v58 + 40) = v62;
    swift_bridgeObjectRetain(v62);
    v63 = static String.localizedStringWithFormat(_:_:)(v55, v56, v58);
    v65 = v64;
    swift_bridgeObjectRelease(v58);
    *(_QWORD *)&v231 = v63;
    *((_QWORD *)&v231 + 1) = v65;
    v66 = sub_10006C008();
    v67 = Text.init<A>(_:)(&v231, &type metadata for String, v66);
    v216 = a1;
    v71 = *a1;
    if (!v71)
    {
      v184 = v216[1];
      v185 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
      v186 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
      result = EnvironmentObject.error()(0, v184, v185, v186);
      __break(1u);
      return result;
    }
    v72 = v67;
    v73 = v68;
    v74 = v69;
    v75 = v70;
    KeyPath = swift_getKeyPath(&unk_100E26B00);
    v77 = swift_getKeyPath(&unk_100E26B28);
    v78 = v71;
    static Published.subscript.getter(&v231, v78, KeyPath, v77);

    swift_release(KeyPath);
    v79 = swift_release(v77);
    v188 = v37;
    if ((v231 & 1) != 0)
      v80 = static Color.white.getter(v79);
    else
      v80 = static Color.blue.getter(v79);
    v81 = v80;
    v82 = v74 & 1;
    v83 = Text.foregroundColor(_:)(v80, v72, v73, v74 & 1, v75);
    v191 = v84;
    v192 = v83;
    v85 = v84;
    v87 = v86;
    v89 = v88;
    v193 = v88;
    swift_release(v81);
    v190 = v87 & 1;
    sub_10006B77C(v72, v73, v82);
    swift_bridgeObjectRelease(v75);
    v90 = v205;
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 1);
    v91._countAndFlagsBits = 0;
    v91._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v91);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v83, v85, v87 & 1, v89);
    v92._countAndFlagsBits = 0;
    v92._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v92);
    v93 = LocalizedStringKey.init(stringInterpolation:)(v90);
    v94 = Text.init(_:tableName:bundle:comment:)(v93);
    v204 = v95;
    v195 = v96;
    v194 = v97 & 1;
    v99 = (uint64_t)v215;
    v98 = (uint64_t)v216;
    sub_1000202AC((uint64_t)v216, (uint64_t)v215, _s26MultipleCuratedCollectionsVMa);
    v101 = v207;
    v100 = (uint64_t)v208;
    sub_1000202AC((uint64_t)v208, v207, type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide);
    v102 = *(unsigned __int8 *)(v223 + 80);
    v103 = (v102 + 16) & ~v102;
    v104 = *(unsigned __int8 *)(v197 + 80);
    v188 += (v224 + v104 + v103) & ~v104;
    v189 = v103;
    v105 = (v224 + v104 + v103) & ~v104;
    v197 = v105;
    v187 = v102 | v104 | 7;
    v106 = swift_allocObject(&unk_10119E1B0, v188, v187);
    sub_10003F29C(v99, v106 + v103, _s26MultipleCuratedCollectionsVMa);
    sub_10003F29C(v101, v106 + v105, type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide);
    v107 = v198;
    sub_1000202AC(v100, v198, type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide);
    v108 = v199;
    sub_1000202AC(v98, v199, _s26MultipleCuratedCollectionsVMa);
    v109 = (uint64_t)v201;
    *v201 = sub_10006C370;
    *(_QWORD *)(v109 + 8) = v106;
    v110 = v109 + *(int *)(v206 + 36);
    v111 = v94;
    v112 = v204;
    v113 = v194;
    sub_10006BB40(v94, v204, v194);
    v114 = v195;
    swift_bridgeObjectRetain(v195);
    v115 = swift_retain(v106);
    *(_QWORD *)v110 = static VerticalAlignment.center.getter(v115);
    *(_QWORD *)(v110 + 8) = 0x4010000000000000;
    *(_BYTE *)(v110 + 16) = 0;
    v116 = v110 + *(int *)(sub_100008B04(&qword_101495838) + 44);
    v196 = v111;
    sub_10004D028(v107, v108, v111, v112, v113, v114, v116);
    sub_1000202F0(v107, type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide);
    sub_1000202F0(v108, _s26MultipleCuratedCollectionsVMa);
    sub_10006B77C(v111, v112, v113);
    swift_release(v106);
    swift_bridgeObjectRelease(v114);
    v117 = sub_100010D70((unint64_t *)&unk_101495840, &qword_101495808, "=u7");
    v118 = (uint64_t)v200;
    View.accessibility(identifier:)(0xD000000000000018, 0x8000000100E442D0, v206, v117);
    sub_100010CC4(v109, &qword_101495808);
    v119 = (uint64_t)v202;
    v120 = v222;
    ModifiedContent<>.accessibilityAutomationType(_:)(9, v222);
    v121 = sub_100010CC4(v118, &qword_101495810);
    v122 = v225;
    static AccessibilityTraits.isButton.getter(v121);
    ModifiedContent<>.accessibilityRemoveTraits(_:)(v122, v120);
    (*(void (**)(char *, uint64_t))(v226 + 8))(v122, v227);
    sub_100010CC4(v119, &qword_101495810);
    v123 = v205;
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(5, 1);
    v124._countAndFlagsBits = 0x20776F6853;
    v124._object = (void *)0xE500000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v124);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v196, v204, v113, v114);
    v125._countAndFlagsBits = 0;
    v125._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v125);
    v126 = LocalizedStringKey.init(stringInterpolation:)(v123);
    v127 = Text.init(_:tableName:bundle:comment:)(v126);
    v129 = v128;
    v131 = v130;
    v133 = v132 & 1;
    v134 = (uint64_t)v215;
    sub_1000202AC((uint64_t)v216, (uint64_t)v215, _s26MultipleCuratedCollectionsVMa);
    v135 = v207;
    sub_1000202AC((uint64_t)v208, v207, type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide);
    v136 = swift_allocObject(&unk_10119E1D8, v188, v187);
    sub_10003F29C(v134, v136 + v189, _s26MultipleCuratedCollectionsVMa);
    v137 = v135;
    v54 = v222;
    sub_10003F29C(v137, v136 + v197, type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide);
    v138 = v203;
    v139 = (uint64_t)v209;
    ModifiedContent<>.accessibilityAction(named:_:)(v127, v129, v133, v131, sub_10006C370, v136, v54);
    v140 = v136;
    v50 = v224;
    swift_release(v140);
    v141 = v127;
    a1 = v216;
    sub_10006B77C(v141, v129, v133);
    v142 = v131;
    v53 = v223;
    swift_bridgeObjectRelease(v142);
    sub_10006B77C(v192, v191, v190);
    swift_bridgeObjectRelease(v193);
    v20 = v215;
    sub_10006B77C(v196, v204, v194);
    swift_bridgeObjectRelease(v195);
    sub_100010CC4(v139, &qword_101495810);
    sub_1000202F0((uint64_t)v208, type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide);
    v143 = (uint64_t)v138;
    v51 = v225;
    v52 = v228;
    sub_1000207BC(v143, v228, &qword_101495810);
    v49 = 0;
  }
  v144 = v214;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v210 + 56))(v52, v49, 1, v54);
  sub_1000202AC((uint64_t)a1, (uint64_t)v20, _s26MultipleCuratedCollectionsVMa);
  v145 = *(unsigned __int8 *)(v53 + 80);
  v146 = (v145 + 16) & ~v145;
  v222 = v145 | 7;
  v223 = v146 + v50;
  v147 = swift_allocObject(&unk_10119E160, v146 + v50, v145 | 7);
  v224 = v146;
  sub_10003F29C((uint64_t)v20, v147 + v146, _s26MultipleCuratedCollectionsVMa);
  v149 = static VerticalAlignment.center.getter(v148);
  sub_10004DB04(v211, (uint64_t)a1, (uint64_t)&v231);
  v150 = v232[0];
  v151 = *(_QWORD *)&v232[24];
  v152 = *(_OWORD *)&v232[32];
  v153 = v233;
  v154 = v234[0];
  v155 = *(_OWORD *)&v232[8];
  v156 = v231;
  *(_QWORD *)&v231 = sub_10006BF08;
  *((_QWORD *)&v231 + 1) = v147;
  *(_QWORD *)v232 = v149;
  *(_QWORD *)&v232[8] = 0x4010000000000000;
  v232[16] = 0;
  *(_OWORD *)&v232[24] = v156;
  v232[40] = v150;
  v233 = v155;
  *(_QWORD *)v234 = v151;
  *(_OWORD *)&v234[8] = v152;
  *(_OWORD *)&v234[24] = v153;
  v234[40] = v154;
  v229[4] = v155;
  v229[5] = *(_OWORD *)v234;
  v230[0] = *(_OWORD *)&v234[16];
  *(_OWORD *)((char *)v230 + 9) = *(_OWORD *)&v234[25];
  v229[0] = v231;
  v229[1] = *(_OWORD *)v232;
  v229[2] = *(_OWORD *)&v232[16];
  v229[3] = *(_OWORD *)&v232[32];
  v157 = sub_100008B04(&qword_101495820);
  v158 = sub_100010D70(&qword_101495828, &qword_101495820, "=u7");
  v159 = (uint64_t)v213;
  View.accessibility(identifier:)(0xD00000000000001BLL, 0x8000000100E44240, v157, v158);
  sub_10006C2CC((uint64_t)&v231);
  v160 = (uint64_t)a1;
  v161 = v218;
  ModifiedContent<>.accessibilityAutomationType(_:)(9, v218);
  v162 = sub_100010CC4(v159, &qword_101495800);
  static AccessibilityTraits.isButton.getter(v162);
  v163 = (uint64_t)v144;
  v164 = (uint64_t)v20;
  v165 = (uint64_t)v217;
  ModifiedContent<>.accessibilityRemoveTraits(_:)(v51, v161);
  (*(void (**)(char *, uint64_t))(v226 + 8))(v51, v227);
  sub_100010CC4(v163, &qword_101495800);
  if (qword_101490ED0 != -1)
    swift_once(&qword_101490ED0, sub_10011833C);
  v235._countAndFlagsBits = 0xD00000000000004FLL;
  v235._object = (void *)0x8000000100E44280;
  v166._object = (void *)0x8000000100E44260;
  v166._countAndFlagsBits = 0xD00000000000001BLL;
  v167._countAndFlagsBits = 0x69754720776F6853;
  v167._object = (void *)0xEB00000000736564;
  v229[0] = NSLocalizedString(_:tableName:bundle:value:comment:)(v166, (Swift::String_optional)0, (NSBundle)qword_1014D4B80, v167, v235);
  v168 = sub_10006C008();
  v169 = Text.init<A>(_:)(v229, &type metadata for String, v168);
  v171 = v170;
  v173 = v172;
  v175 = v174 & 1;
  sub_1000202AC(v160, v164, _s26MultipleCuratedCollectionsVMa);
  v176 = swift_allocObject(&unk_10119E188, v223, v222);
  sub_10003F29C(v164, v176 + v224, _s26MultipleCuratedCollectionsVMa);
  v177 = (uint64_t)v220;
  ModifiedContent<>.accessibilityAction(named:_:)(v169, v171, v175, v173, sub_10006BF08, v176, v161);
  swift_release(v176);
  sub_10006B77C(v169, v171, v175);
  swift_bridgeObjectRelease(v173);
  sub_100010CC4(v165, &qword_101495800);
  v178 = v219;
  sub_1000207BC(v177, v219, &qword_101495800);
  v179 = v228;
  v180 = v212;
  sub_10000C1FC(v228, v212, &qword_101495818);
  sub_10000C1FC(v178, v177, &qword_101495800);
  v181 = v221;
  sub_10000C1FC(v180, v221, &qword_101495818);
  v182 = sub_100008B04(&qword_101495830);
  sub_10000C1FC(v177, v181 + *(int *)(v182 + 48), &qword_101495800);
  sub_100010CC4(v178, &qword_101495800);
  sub_100010CC4(v179, &qword_101495818);
  sub_100010CC4(v177, &qword_101495800);
  return sub_100010CC4(v180, &qword_101495818);
}

uint64_t sub_10004D028@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  _BYTE *v65;
  _BYTE *v66;
  void *v67;
  uint64_t KeyPath;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t result;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _BYTE v93[4];
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _BYTE *v105;
  uint64_t v106;
  _BYTE *v107;
  uint64_t v108;
  uint64_t v109;
  _BYTE *v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _BYTE *v117;
  _BYTE *v118;
  char v119;
  uint64_t v120;
  unsigned __int8 v121;
  uint64_t v122;
  unsigned __int8 v123;
  uint64_t v124;
  uint64_t v125;
  _OWORD v126[2];
  uint64_t v127;

  v115 = a6;
  v113 = a5;
  v112 = a4;
  v111 = a3;
  v102 = a2;
  v114 = a7;
  v9 = sub_100008B04(&qword_101495850);
  __chkstk_darwin(v9);
  v110 = &v93[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v116 = sub_100008B04(&qword_101494DD0);
  __chkstk_darwin(v116);
  v12 = &v93[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for RoundedRectangle(0);
  v101 = v13;
  __chkstk_darwin(v13);
  v15 = &v93[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = type metadata accessor for Image.ResizingMode(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = &v93[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v104 = sub_100008B04(&qword_101495858);
  __chkstk_darwin(v104);
  v21 = &v93[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v106 = sub_100008B04(&qword_101495860);
  __chkstk_darwin(v106);
  v105 = &v93[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v108 = sub_100008B04(&qword_101495868);
  __chkstk_darwin(v108);
  v107 = &v93[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v109 = sub_100008B04(&qword_101495870);
  __chkstk_darwin(v109);
  v118 = &v93[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v25);
  v117 = &v93[-v26];
  v27 = objc_retain(*(id *)(a1
                          + *(int *)(type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(0) + 20)));
  v28 = Image.init(uiImage:)(v27);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v17 + 104))(v19, enum case for Image.ResizingMode.stretch(_:), v16);
  v29 = Image.resizable(capInsets:resizingMode:)(v19, v28, 0.0, 0.0, 0.0, 0.0);
  swift_release(v28);
  v30 = (*(uint64_t (**)(_BYTE *, uint64_t))(v17 + 8))(v19, v16);
  v31 = static Alignment.center.getter(v30);
  _FrameLayout.init(width:height:alignment:)(&v120, 0x4030000000000000, 0, 0x4030000000000000, 0, v31, v32);
  v100 = v120;
  v99 = v121;
  v98 = v122;
  v97 = v123;
  v96 = v124;
  v95 = v125;
  v103 = *(int *)(_s26MultipleCuratedCollectionsVMa(0) + 44);
  v33 = *(_QWORD *)(a2 + v103);
  v34 = &v15[*(int *)(v13 + 20)];
  v35 = enum case for RoundedCornerStyle.continuous(_:);
  v36 = type metadata accessor for RoundedCornerStyle(0);
  v37 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 104);
  v94 = v35;
  v37(v34, v35, v36);
  *(_QWORD *)v15 = v33;
  *((_QWORD *)v15 + 1) = v33;
  sub_1000202AC((uint64_t)v15, (uint64_t)v12, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)&v12[*(int *)(v116 + 36)] = 256;
  sub_10000C1FC((uint64_t)v12, (uint64_t)&v21[*(int *)(v104 + 36)], &qword_101494DD0);
  v38 = v100;
  *(_QWORD *)v21 = v29;
  *((_QWORD *)v21 + 1) = v38;
  v21[16] = v99;
  *((_QWORD *)v21 + 3) = v98;
  v21[32] = v97;
  v39 = v95;
  *((_QWORD *)v21 + 5) = v96;
  *((_QWORD *)v21 + 6) = v39;
  swift_retain(v29);
  sub_100010CC4((uint64_t)v12, &qword_101494DD0);
  sub_1000202F0((uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  swift_release(v29);
  v40 = v102;
  v41 = v103;
  v42 = *(_QWORD *)(v102 + v103);
  v43 = v101;
  v37(&v15[*(int *)(v101 + 20)], v35, v36);
  *(_QWORD *)v15 = v42;
  *((_QWORD *)v15 + 1) = v42;
  v44 = (uint64_t)v105;
  v45 = (uint64_t)&v105[*(int *)(v106 + 36)];
  sub_1000202AC((uint64_t)v15, v45, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v45 + *(int *)(v116 + 36)) = 256;
  sub_10000C1FC((uint64_t)v21, v44, &qword_101495858);
  sub_1000202F0((uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  sub_100010CC4((uint64_t)v21, &qword_101495858);
  v46 = *(_QWORD *)(v40 + v41);
  v37(&v15[*(int *)(v43 + 20)], v94, v36);
  *(_QWORD *)v15 = v46;
  *((_QWORD *)v15 + 1) = v46;
  v47 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemFillColor");
  v48 = Color.init(_:)(v47);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v126, 0, 0, _swiftEmptyArrayStorage, 0.5, 10.0, 0.0);
  v49 = v110;
  sub_1000202AC((uint64_t)v15, (uint64_t)v110, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v50 = &v49[*(int *)(sub_100008B04(&qword_101495878) + 36)];
  v51 = v126[1];
  *(_OWORD *)v50 = v126[0];
  *((_OWORD *)v50 + 1) = v51;
  *((_QWORD *)v50 + 4) = v127;
  v52 = sub_100008B04(&qword_101495880);
  *(_QWORD *)&v49[*(int *)(v52 + 52)] = v48;
  *(_WORD *)&v49[*(int *)(v52 + 56)] = 256;
  v53 = (uint64_t)v49;
  v54 = static Alignment.center.getter(v52);
  v56 = v55;
  v57 = (uint64_t *)(v53 + *(int *)(sub_100008B04(&qword_101495888) + 36));
  *v57 = v54;
  v57[1] = v56;
  v58 = sub_1000202F0((uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v59 = static Alignment.center.getter(v58);
  v61 = v60;
  v62 = (uint64_t)v107;
  v63 = (uint64_t)&v107[*(int *)(v108 + 36)];
  sub_10000C1FC(v53, v63, &qword_101495850);
  v64 = (uint64_t *)(v63 + *(int *)(sub_100008B04(&qword_101495890) + 36));
  *v64 = v59;
  v64[1] = v61;
  sub_10000C1FC(v44, v62, &qword_101495860);
  sub_100010CC4(v53, &qword_101495850);
  sub_100010CC4(v44, &qword_101495860);
  v65 = v118;
  sub_10000C1FC(v62, (uint64_t)v118, &qword_101495868);
  v65[*(int *)(v109 + 36)] = 1;
  sub_100010CC4(v62, &qword_101495868);
  v66 = v117;
  sub_1000207BC((uint64_t)v65, (uint64_t)v117, &qword_101495870);
  v67 = *(void **)v40;
  if (*(_QWORD *)v40)
  {
    KeyPath = swift_getKeyPath(&unk_100E26B00);
    v69 = swift_getKeyPath(&unk_100E26B28);
    v70 = v67;
    static Published.subscript.getter(&v119, v70, KeyPath, v69);

    swift_release(KeyPath);
    v71 = swift_release(v69);
    LOBYTE(v70) = v119;
    v72 = static Font.subheadline.getter(v71);
    v73 = swift_getKeyPath(&unk_100E26B78);
    v74 = v113;
    v75 = v111;
    v76 = v112;
    sub_10006BB40(v111, v112, v113 & 1);
    if ((v70 & 1) != 0)
    {
      v77 = qword_101490CD8;
      v78 = v115;
      swift_bridgeObjectRetain(v115);
      if (v77 != -1)
        swift_once(&qword_101490CD8, sub_100043F38);
      v79 = &qword_1014D46A0;
    }
    else
    {
      v80 = qword_101490CE0;
      v78 = v115;
      swift_bridgeObjectRetain(v115);
      if (v80 != -1)
        swift_once(&qword_101490CE0, sub_100043F7C);
      v79 = &qword_1014D46A8;
    }
    v81 = *v79;
    swift_retain(*v79);
    v82 = swift_getKeyPath(&unk_100E26100);
    v116 = swift_getKeyPath(&unk_100E26B48);
    sub_10006BB40(v75, v76, v74 & 1);
    swift_bridgeObjectRetain(v78);
    swift_retain(v73);
    swift_retain(v72);
    swift_retain(v82);
    swift_retain(v81);
    sub_10006B77C(v75, v76, v74 & 1);
    swift_release(v81);
    swift_release(v82);
    swift_release(v72);
    swift_release(v73);
    swift_bridgeObjectRelease(v78);
    v83 = (uint64_t)v66;
    v84 = v118;
    sub_10000C1FC(v83, (uint64_t)v118, &qword_101495870);
    v85 = (uint64_t)v84;
    v86 = v114;
    sub_10000C1FC(v85, v114, &qword_101495870);
    v87 = v86 + *(int *)(sub_100008B04(&qword_101495898) + 48);
    *(_QWORD *)v87 = v75;
    *(_QWORD *)(v87 + 8) = v76;
    *(_BYTE *)(v87 + 16) = v74 & 1;
    *(_QWORD *)(v87 + 24) = v78;
    *(_QWORD *)(v87 + 32) = v73;
    *(_QWORD *)(v87 + 40) = v72;
    *(_QWORD *)(v87 + 48) = v82;
    v88 = v116;
    *(_QWORD *)(v87 + 56) = v81;
    *(_QWORD *)(v87 + 64) = v88;
    *(_QWORD *)(v87 + 72) = 1;
    *(_BYTE *)(v87 + 80) = 0;
    sub_10006BB40(v75, v76, v74 & 1);
    swift_bridgeObjectRetain(v78);
    swift_retain(v73);
    swift_retain(v72);
    swift_retain(v82);
    swift_retain(v81);
    swift_retain(v88);
    sub_100010CC4((uint64_t)v117, &qword_101495870);
    sub_10006B77C(v75, v76, v74 & 1);
    swift_release(v88);
    swift_release(v81);
    swift_release(v82);
    swift_release(v72);
    swift_release(v73);
    swift_bridgeObjectRelease(v78);
    return sub_100010CC4((uint64_t)v118, &qword_101495870);
  }
  else
  {
    v90 = *(_QWORD *)(v40 + 8);
    v91 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
    v92 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
    result = EnvironmentObject.error()(0, v90, v91, v92);
    __break(1u);
  }
  return result;
}

uint64_t sub_10004DA24(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  void (*v6)(uint64_t *);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v15;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_BYTE *)(a1 + 32);
  sub_10002057C(v3, v4, v5);
  v6 = (void (*)(uint64_t *))sub_10001A1F4(v3, v4, v5);
  v8 = v7;
  sub_10001A774(v3, v4, v5);
  v9 = sub_100008B04((uint64_t *)&unk_101493B10);
  v10 = swift_allocObject(v9, 40, 7);
  *(_OWORD *)(v10 + 16) = xmmword_100E23F50;
  v11 = type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(0);
  v12 = *(void **)(a2 + *(int *)(v11 + 32));
  *(_QWORD *)(v10 + 32) = v12;
  v15 = v10;
  specialized Array._endMutation()(v11);
  v13 = v12;
  v6(&v15);
  swift_release(v8);
  return swift_bridgeObjectRelease(v10);
}

uint64_t sub_10004DB04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v6 = type metadata accessor for AttributedString(0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v10 + 16))(v9, a1, v7);
  v11 = Text.init(_:)(v9);
  v15 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    v16 = v11;
    v17 = v12;
    v18 = v13;
    v19 = v14;
    KeyPath = swift_getKeyPath(&unk_100E26B00);
    v21 = swift_getKeyPath(&unk_100E26B28);
    v22 = v15;
    static Published.subscript.getter(&v38, v22, KeyPath, v21);

    swift_release(KeyPath);
    v23 = swift_release(v21);
    LOBYTE(v22) = v38;
    v24 = static Font.subheadline.getter(v23);
    v25 = swift_getKeyPath(&unk_100E26B78);
    sub_10006BB40(v16, v17, v18 & 1);
    if ((v22 & 1) != 0)
    {
      v26 = qword_101490CD8;
      swift_bridgeObjectRetain(v19);
      if (v26 != -1)
        swift_once(&qword_101490CD8, sub_100043F38);
      v27 = &qword_1014D46A0;
    }
    else
    {
      v28 = qword_101490CE0;
      swift_bridgeObjectRetain(v19);
      if (v28 != -1)
        swift_once(&qword_101490CE0, sub_100043F7C);
      v27 = &qword_1014D46A8;
    }
    v29 = *v27;
    swift_retain(*v27);
    v30 = swift_getKeyPath(&unk_100E26100);
    v31 = swift_getKeyPath(&unk_100E26B48);
    v32 = v18 & 1;
    sub_10006BB40(v16, v17, v32);
    swift_bridgeObjectRetain(v19);
    swift_retain(v25);
    swift_retain(v24);
    swift_retain(v30);
    swift_retain(v29);
    sub_10006B77C(v16, v17, v32);
    swift_release(v29);
    swift_release(v30);
    swift_release(v24);
    swift_release(v25);
    swift_bridgeObjectRelease(v19);
    sub_10006B77C(v16, v17, v32);
    result = swift_bridgeObjectRelease(v19);
    *(_QWORD *)a3 = v16;
    *(_QWORD *)(a3 + 8) = v17;
    *(_BYTE *)(a3 + 16) = v32;
    *(_QWORD *)(a3 + 24) = v19;
    *(_QWORD *)(a3 + 32) = v25;
    *(_QWORD *)(a3 + 40) = v24;
    *(_QWORD *)(a3 + 48) = v30;
    *(_QWORD *)(a3 + 56) = v29;
    *(_QWORD *)(a3 + 64) = v31;
    *(_QWORD *)(a3 + 72) = 1;
    *(_BYTE *)(a3 + 80) = 0;
  }
  else
  {
    v34 = *(_QWORD *)(a2 + 8);
    v35 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
    v36 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
    result = EnvironmentObject.error()(0, v34, v35, v36);
    __break(1u);
  }
  return result;
}

uint64_t sub_10004DDC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  void (*v5)(uint64_t *);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_BYTE *)(a1 + 32);
  sub_10002057C(v2, v3, v4);
  v5 = (void (*)(uint64_t *))sub_10001A1F4(v2, v3, v4);
  v7 = v6;
  sub_10001A774(v2, v3, v4);
  v8 = a1 + *(int *)(_s26MultipleCuratedCollectionsVMa(0) + 36);
  v10 = *(_QWORD *)(v8 + *(int *)(type metadata accessor for PlaceSummaryViewModelUnit.MultipleCuratedGuides(0) + 24));
  v5(&v10);
  return swift_release(v7);
}

uint64_t sub_10004DE6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t result;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t KeyPath;
  uint64_t v69;
  char v70;
  _BYTE v71[7];
  char v72;
  uint64_t v73;

  v6 = type metadata accessor for AttributedString(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = Image.init(systemName:)(0x6C69662E72617473, 0xE90000000000006CLL);
  v69 = static Font.caption.getter();
  KeyPath = swift_getKeyPath(&unk_100E26B78);
  v11 = *(void **)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_14;
  v12 = swift_getKeyPath(&unk_100E26B00);
  v13 = swift_getKeyPath(&unk_100E26B28);
  v14 = v11;
  static Published.subscript.getter((uint64_t *)((char *)&v73 + 1), v14, v12, v13);

  swift_release(v12);
  v15 = swift_release(v13);
  v16 = (v73 & 0x100) != 0 ? static Color.white.getter(v15) : static Color.secondary.getter(v15);
  v17 = v16;
  v67 = v10;
  v63 = swift_getKeyPath(&unk_100E26100);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  v18 = Text.init(_:)(v9);
  v22 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    v23 = v18;
    v24 = v19;
    v25 = v20;
    v26 = v21;
    v27 = swift_getKeyPath(&unk_100E26B00);
    v28 = swift_getKeyPath(&unk_100E26B28);
    v29 = v22;
    static Published.subscript.getter(&v73, v29, v27, v28);

    swift_release(v27);
    v30 = swift_release(v28);
    LOBYTE(v28) = v73;
    v66 = static Font.subheadline.getter(v30);
    v31 = swift_getKeyPath(&unk_100E26B78);
    v32 = v24;
    sub_10006BB40(v23, v24, v25 & 1);
    v62 = v17;
    if ((v28 & 1) != 0)
    {
      v33 = qword_101490CD8;
      swift_bridgeObjectRetain(v26);
      if (v33 != -1)
        swift_once(&qword_101490CD8, sub_100043F38);
      v34 = &qword_1014D46A0;
    }
    else
    {
      v35 = qword_101490CE0;
      swift_bridgeObjectRetain(v26);
      if (v35 != -1)
        swift_once(&qword_101490CE0, sub_100043F7C);
      v34 = &qword_1014D46A8;
    }
    v36 = *v34;
    swift_retain(*v34);
    v37 = swift_getKeyPath(&unk_100E26100);
    v59 = v37;
    v65 = swift_getKeyPath(&unk_100E26B48);
    v38 = v25 & 1;
    v39 = v32;
    sub_10006BB40(v23, v32, v38);
    v40 = v26;
    swift_bridgeObjectRetain(v26);
    swift_retain(v31);
    v41 = v66;
    swift_retain(v66);
    swift_retain(v37);
    v64 = v36;
    swift_retain(v36);
    sub_10006B77C(v23, v32, v38);
    swift_release(v36);
    swift_release(v37);
    swift_release(v41);
    v42 = v31;
    swift_release(v31);
    swift_bridgeObjectRelease(v40);
    sub_10006B77C(v23, v32, v38);
    swift_bridgeObjectRelease(v40);
    v72 = v38;
    v70 = 0;
    *(_DWORD *)(a3 + 57) = *(_DWORD *)v71;
    *(_DWORD *)(a3 + 60) = *(_DWORD *)&v71[3];
    v43 = v67;
    v44 = KeyPath;
    *(_QWORD *)a3 = v67;
    *(_QWORD *)(a3 + 8) = v44;
    v45 = v43;
    v46 = v62;
    v47 = v63;
    *(_QWORD *)(a3 + 16) = v69;
    *(_QWORD *)(a3 + 24) = v47;
    *(_QWORD *)(a3 + 32) = v46;
    *(_QWORD *)(a3 + 40) = v23;
    *(_QWORD *)(a3 + 48) = v39;
    *(_BYTE *)(a3 + 56) = v38;
    *(_QWORD *)(a3 + 64) = v40;
    *(_QWORD *)(a3 + 72) = v42;
    v60 = v42;
    v61 = v40;
    *(_QWORD *)(a3 + 80) = v41;
    v48 = v59;
    v49 = v64;
    *(_QWORD *)(a3 + 88) = v59;
    *(_QWORD *)(a3 + 96) = v49;
    *(_QWORD *)(a3 + 104) = v65;
    *(_QWORD *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 120) = 0;
    swift_retain(v45);
    swift_retain(v44);
    v50 = v69;
    swift_retain(v69);
    swift_retain(v47);
    swift_retain(v46);
    sub_10006BB40(v23, v39, v38);
    swift_bridgeObjectRetain(v40);
    swift_retain(v42);
    v51 = v66;
    swift_retain(v66);
    swift_retain(v48);
    v52 = v64;
    swift_retain(v64);
    v53 = v65;
    swift_retain(v65);
    sub_10006B77C(v23, v39, v38);
    swift_release(v46);
    swift_release(v47);
    swift_release(v50);
    swift_release(KeyPath);
    swift_release(v67);
    swift_release(v53);
    swift_release(v52);
    swift_release(v48);
    swift_release(v51);
    swift_release(v60);
    return swift_bridgeObjectRelease(v61);
  }
  else
  {
LABEL_14:
    v55 = *(_QWORD *)(a1 + 8);
    v56 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
    v57 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
    result = EnvironmentObject.error()(0, v55, v56, v57);
    __break(1u);
  }
  return result;
}

uint64_t sub_10004E32C@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t KeyPath;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  void **v46;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  Swift::String *v51;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  unsigned __int8 *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  Swift::String v91;
  Swift::String v92;
  Swift::String v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  void **v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __n128 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  Swift::String v117;
  Swift::String v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t result;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t (**v141)();
  uint64_t v142;
  char *v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  void **v160;
  uint64_t v161;
  uint64_t v162;

  v149 = a1;
  v3 = type metadata accessor for AccessibilityTraits(0, a2);
  v146 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v145 = (char *)&v134 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = sub_100008B04(&qword_101495808);
  __chkstk_darwin(v142);
  v141 = (uint64_t (**)())((char *)&v134 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v148 = sub_100008B04(&qword_101495810);
  __chkstk_darwin(v148);
  v140 = (char *)&v134 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v143 = (char *)&v134 - v8;
  v10 = __chkstk_darwin(v9);
  v159 = (char *)&v134 - v11;
  v12 = type metadata accessor for LocalizedStringKey.StringInterpolation(0, v10);
  __chkstk_darwin(v12);
  v144 = (char *)&v134 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = _s18SingleCuratedGuideVMa(0);
  v137 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v139 = (uint64_t)&v134 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v158 = (uint64_t)&v134 - v17;
  v138 = v18;
  __chkstk_darwin(v19);
  v153 = (uint64_t)&v134 - v20;
  v150 = v21;
  v22 = (char *)v2 + *(int *)(v21 + 32);
  v23 = type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(0);
  v24 = (uint64_t *)&v22[*(int *)(v23 + 28)];
  v25 = v24[1];
  v161 = *v24;
  v162 = v25;
  v26 = sub_10006C008();
  swift_bridgeObjectRetain(v25);
  v152 = v26;
  v27 = Text.init<A>(_:)(&v161, &type metadata for String, v26);
  v160 = v2;
  v31 = *v2;
  if (!*v2)
    goto LABEL_16;
  v32 = v27;
  v33 = v28;
  v34 = v29;
  v35 = v30;
  KeyPath = swift_getKeyPath(&unk_100E26B00);
  v37 = swift_getKeyPath(&unk_100E26B28);
  v38 = v31;
  static Published.subscript.getter(&v161, v38, KeyPath, v37);

  swift_release(KeyPath);
  v39 = swift_release(v37);
  v147 = v3;
  v40 = (v161 & 1) != 0 ? static Color.white.getter(v39) : static Color.blue.getter(v39);
  v41 = v40;
  v42 = Text.foregroundColor(_:)(v40, v32, v33, v34 & 1, v35);
  v155 = v43;
  v156 = v42;
  v154 = v44;
  v157 = v45;
  swift_release(v41);
  sub_10006B77C(v32, v33, v34 & 1);
  swift_bridgeObjectRelease(v35);
  v46 = v160;
  v47 = v160[7];
  v48 = v160[8];
  v49 = sub_100008B04((uint64_t *)&unk_10149A4F0);
  v50 = swift_allocObject(v49, 72, 7);
  *(_OWORD *)(v50 + 16) = xmmword_100E22F40;
  v51 = (Swift::String *)&v22[*(int *)(v23 + 24)];
  countAndFlagsBits = v51->_countAndFlagsBits;
  object = v51->_object;
  *(_QWORD *)(v50 + 56) = &type metadata for String;
  *(_QWORD *)(v50 + 64) = sub_10000D8E0();
  *(_QWORD *)(v50 + 32) = countAndFlagsBits;
  *(_QWORD *)(v50 + 40) = object;
  swift_bridgeObjectRetain(object);
  v54 = static String.localizedStringWithFormat(_:_:)(v47, v48, v50);
  v56 = v55;
  swift_bridgeObjectRelease(v50);
  v161 = v54;
  v162 = v56;
  v57 = Text.init<A>(_:)(&v161, &type metadata for String, v152);
  v61 = *v46;
  if (*v46)
  {
    v62 = v57;
    v63 = v58;
    v64 = v59;
    v65 = v60;
    v66 = swift_getKeyPath(&unk_100E26B00);
    v67 = swift_getKeyPath(&unk_100E26B28);
    v68 = v61;
    static Published.subscript.getter(&v161, v68, v66, v67);

    swift_release(v66);
    v69 = swift_release(v67);
    if ((v161 & 1) != 0)
      v70 = static Color.white.getter(v69);
    else
      v70 = static Color.blue.getter(v69);
    v71 = v70;
    v72 = v156;
    v73 = v153;
    v74 = v64 & 1;
    v75 = Text.foregroundColor(_:)(v70, v62, v63, v64 & 1, v65);
    v152 = v76;
    v153 = v75;
    v151 = v77;
    v79 = v78;
    swift_release(v71);
    sub_10006B77C(v62, v63, v74);
    swift_bridgeObjectRelease(v65);
    v80 = *((unsigned __int8 *)v160 + *(int *)(v150 + 36));
    sub_1000202AC((uint64_t)v160, v73, _s18SingleCuratedGuideVMa);
    v136 = v79;
    if (v80 != 1)
    {
      sub_1000202F0(v73, _s18SingleCuratedGuideVMa);
      v81 = v144;
      v82 = v157;
      v83 = v155;
      v84 = v154;
      goto LABEL_14;
    }
    v81 = v144;
    v82 = v157;
    v83 = v155;
    v84 = v154;
    if (*(_QWORD *)v73)
    {
      v85 = (unsigned __int8 *)*(id *)v73;
      sub_1000202F0(v73, _s18SingleCuratedGuideVMa);
      v86 = v85[OBJC_IVAR____TtC4Maps29PlaceSummaryViewModelTemplate_useCase];

      if (v86 == 2)
      {
        LODWORD(v150) = v151 & 1;
        v88 = v152;
        v87 = v153;
        sub_10006BB40(v153, v152, v151 & 1);
        swift_bridgeObjectRetain(v79);
        v89 = v79;
        v90 = v150;
LABEL_15:
        v134 = v89;
        v98 = v160;
        v99 = v158;
        sub_1000202AC((uint64_t)v160, v158, _s18SingleCuratedGuideVMa);
        v100 = *(unsigned __int8 *)(v137 + 80);
        v101 = (char *)(((v100 + 16) & ~v100) + v138);
        v144 = v101;
        v102 = (v100 + 16) & ~v100;
        v150 = v102;
        v138 = v100 | 7;
        v103 = swift_allocObject(&unk_10119E220, v101, v100 | 7);
        sub_10003F29C(v99, v103 + v102, _s18SingleCuratedGuideVMa);
        v104 = (uint64_t)v98;
        v105 = v139;
        sub_1000202AC(v104, v139, _s18SingleCuratedGuideVMa);
        v106 = (uint64_t)v141;
        *v141 = sub_10006C628;
        *(_QWORD *)(v106 + 8) = v103;
        v107 = v142;
        v108 = v106 + *(int *)(v142 + 36);
        sub_10006BB40(v87, v88, v90);
        swift_bridgeObjectRetain(v89);
        v109 = swift_retain(v103);
        *(_QWORD *)v108 = static VerticalAlignment.center.getter(v109);
        *(_QWORD *)(v108 + 8) = 0x4010000000000000;
        *(_BYTE *)(v108 + 16) = 0;
        v110 = sub_100008B04(&qword_101495838);
        sub_10004ED44(v105, v87, v88, v90, v89, v108 + *(int *)(v110 + 44));
        sub_1000202F0(v105, _s18SingleCuratedGuideVMa);
        v135 = v87;
        sub_10006B77C(v87, v88, v90);
        swift_release(v103);
        swift_bridgeObjectRelease(v89);
        v111 = sub_100010D70((unint64_t *)&unk_101495840, &qword_101495808, "=u7");
        v112 = (uint64_t)v140;
        View.accessibility(identifier:)(0xD000000000000018, 0x8000000100E442D0, v107, v111);
        sub_100010CC4(v106, &qword_101495808);
        v113 = (uint64_t)v143;
        v114 = v148;
        ModifiedContent<>.accessibilityAutomationType(_:)(9, v148);
        v115 = sub_100010CC4(v112, &qword_101495810);
        v116 = v145;
        static AccessibilityTraits.isButton.getter(v115);
        ModifiedContent<>.accessibilityRemoveTraits(_:)(v116, v114);
        (*(void (**)(char *, uint64_t))(v146 + 8))(v116, v147);
        sub_100010CC4(v113, &qword_101495810);
        LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(5, 1);
        v117._countAndFlagsBits = 0x20776F6853;
        v117._object = (void *)0xE500000000000000;
        LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v117);
        LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v87, v88, v90, v89);
        v118._countAndFlagsBits = 0;
        v118._object = (void *)0xE000000000000000;
        LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v118);
        v119 = LocalizedStringKey.init(stringInterpolation:)(v81);
        v120 = Text.init(_:tableName:bundle:comment:)(v119);
        v122 = v121;
        v124 = v123;
        v126 = v125 & 1;
        v127 = v158;
        sub_1000202AC((uint64_t)v160, v158, _s18SingleCuratedGuideVMa);
        v128 = swift_allocObject(&unk_10119E248, v144, v138);
        sub_10003F29C(v127, v128 + v150, _s18SingleCuratedGuideVMa);
        v129 = (uint64_t)v159;
        ModifiedContent<>.accessibilityAction(named:_:)(v120, v122, v126, v124, sub_10006C628, v128, v114);
        swift_release(v128);
        sub_10006B77C(v120, v122, v126);
        swift_bridgeObjectRelease(v124);
        sub_10006B77C(v156, v155, v154 & 1);
        swift_bridgeObjectRelease(v157);
        sub_10006B77C(v153, v152, v151 & 1);
        swift_bridgeObjectRelease(v136);
        sub_10006B77C(v135, v88, v90);
        swift_bridgeObjectRelease(v134);
        return sub_100010CC4(v129, &qword_101495810);
      }
LABEL_14:
      LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(2, 2);
      v91._countAndFlagsBits = 0;
      v91._object = (void *)0xE000000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v91);
      LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(*v51);
      v92._countAndFlagsBits = 8250;
      v92._object = (void *)0xE200000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v92);
      LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v72, v83, v84 & 1, v82);
      v93._countAndFlagsBits = 0;
      v93._object = (void *)0xE000000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v93);
      v94 = LocalizedStringKey.init(stringInterpolation:)(v81);
      v87 = Text.init(_:tableName:bundle:comment:)(v94);
      v88 = v95;
      v89 = v96;
      v90 = v97 & 1;
      goto LABEL_15;
    }
    v131 = *(void **)(v73 + 8);
  }
  else
  {
LABEL_16:
    v131 = v160[1];
  }
  v132 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
  v133 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
  result = EnvironmentObject.error()(0, v131, v132, v133);
  __break(1u);
  return result;
}

uint64_t sub_10004ED44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  _BYTE *v50;
  _BYTE *v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  _BYTE *v65;
  _BYTE *v66;
  void *v67;
  uint64_t KeyPath;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t result;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _BYTE v93[12];
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  void (*v101)(char *, uint64_t, uint64_t);
  uint64_t v102;
  uint64_t v103;
  _BYTE *v104;
  uint64_t v105;
  _BYTE *v106;
  _BYTE *v107;
  uint64_t v108;
  uint64_t v109;
  _BYTE *v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _BYTE *v118;
  _BYTE *v119;
  char v120;
  uint64_t v121;
  unsigned __int8 v122;
  uint64_t v123;
  unsigned __int8 v124;
  uint64_t v125;
  uint64_t v126;
  _OWORD v127[2];
  uint64_t v128;

  v115 = a5;
  v113 = a4;
  v112 = a3;
  v111 = a2;
  v114 = a6;
  v7 = sub_100008B04(&qword_101495850);
  __chkstk_darwin(v7);
  v110 = &v93[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v117 = sub_100008B04(&qword_101494DD0);
  __chkstk_darwin(v117);
  v106 = &v93[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for RoundedRectangle(0);
  v102 = v10;
  __chkstk_darwin(v10);
  v12 = &v93[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for Image.ResizingMode(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = &v93[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v103 = sub_100008B04(&qword_101495858);
  __chkstk_darwin(v103);
  v18 = &v93[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v105 = sub_100008B04(&qword_101495860);
  __chkstk_darwin(v105);
  v104 = &v93[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v108 = sub_100008B04(&qword_101495868);
  __chkstk_darwin(v108);
  v107 = &v93[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v109 = sub_100008B04(&qword_101495870);
  __chkstk_darwin(v109);
  v119 = &v93[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v22);
  v118 = &v93[-v23];
  v24 = _s18SingleCuratedGuideVMa(0);
  v25 = a1 + *(int *)(v24 + 32);
  v116 = a1;
  v26 = objc_retain(*(id *)(v25
                          + *(int *)(type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(0) + 20)));
  v27 = Image.init(uiImage:)(v26);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for Image.ResizingMode.stretch(_:), v13);
  v28 = Image.resizable(capInsets:resizingMode:)(v16, v27, 0.0, 0.0, 0.0, 0.0);
  swift_release(v27);
  v29 = (*(uint64_t (**)(_BYTE *, uint64_t))(v14 + 8))(v16, v13);
  v30 = static Alignment.center.getter(v29);
  _FrameLayout.init(width:height:alignment:)(&v121, 0x4030000000000000, 0, 0x4030000000000000, 0, v30, v31);
  v100 = v121;
  v99 = v122;
  v98 = v123;
  v97 = v124;
  v32 = *(_QWORD *)(a1 + *(int *)(v24 + 40));
  v33 = *(int *)(v24 + 40);
  v95 = v125;
  v96 = v126;
  v34 = &v12[*(int *)(v10 + 20)];
  v35 = enum case for RoundedCornerStyle.continuous(_:);
  v36 = type metadata accessor for RoundedCornerStyle(0);
  v101 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 104);
  v94 = v35;
  v101(v34, v35, v36);
  *(_QWORD *)v12 = v32;
  *((_QWORD *)v12 + 1) = v32;
  v37 = v106;
  sub_1000202AC((uint64_t)v12, (uint64_t)v106, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)&v37[*(int *)(v117 + 36)] = 256;
  sub_10000C1FC((uint64_t)v37, (uint64_t)&v18[*(int *)(v103 + 36)], &qword_101494DD0);
  v38 = v100;
  *(_QWORD *)v18 = v28;
  *((_QWORD *)v18 + 1) = v38;
  v18[16] = v99;
  *((_QWORD *)v18 + 3) = v98;
  v18[32] = v97;
  v39 = v96;
  *((_QWORD *)v18 + 5) = v95;
  *((_QWORD *)v18 + 6) = v39;
  swift_retain(v28);
  sub_100010CC4((uint64_t)v37, &qword_101494DD0);
  sub_1000202F0((uint64_t)v12, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  swift_release(v28);
  v40 = v116;
  v41 = v33;
  v42 = *(_QWORD *)(v116 + v33);
  v43 = v102;
  v44 = v101;
  v101(&v12[*(int *)(v102 + 20)], v35, v36);
  *(_QWORD *)v12 = v42;
  *((_QWORD *)v12 + 1) = v42;
  v45 = (uint64_t)v104;
  v46 = (uint64_t)&v104[*(int *)(v105 + 36)];
  sub_1000202AC((uint64_t)v12, v46, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v46 + *(int *)(v117 + 36)) = 256;
  sub_10000C1FC((uint64_t)v18, v45, &qword_101495858);
  sub_1000202F0((uint64_t)v12, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  sub_100010CC4((uint64_t)v18, &qword_101495858);
  v47 = *(_QWORD *)(v40 + v41);
  v44(&v12[*(int *)(v43 + 20)], v94, v36);
  *(_QWORD *)v12 = v47;
  *((_QWORD *)v12 + 1) = v47;
  v48 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemFillColor");
  v49 = Color.init(_:)(v48);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v127, 0, 0, _swiftEmptyArrayStorage, 0.5, 10.0, 0.0);
  v50 = v110;
  sub_1000202AC((uint64_t)v12, (uint64_t)v110, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v51 = &v50[*(int *)(sub_100008B04(&qword_101495878) + 36)];
  v52 = v127[1];
  *(_OWORD *)v51 = v127[0];
  *((_OWORD *)v51 + 1) = v52;
  *((_QWORD *)v51 + 4) = v128;
  v53 = sub_100008B04(&qword_101495880);
  *(_QWORD *)&v50[*(int *)(v53 + 52)] = v49;
  *(_WORD *)&v50[*(int *)(v53 + 56)] = 256;
  v54 = static Alignment.center.getter(v53);
  v56 = v55;
  v57 = (uint64_t *)&v50[*(int *)(sub_100008B04(&qword_101495888) + 36)];
  *v57 = v54;
  v57[1] = v56;
  v58 = sub_1000202F0((uint64_t)v12, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v59 = static Alignment.center.getter(v58);
  v61 = v60;
  v62 = (uint64_t)v107;
  v63 = (uint64_t)&v107[*(int *)(v108 + 36)];
  sub_10000C1FC((uint64_t)v50, v63, &qword_101495850);
  v64 = (uint64_t *)(v63 + *(int *)(sub_100008B04(&qword_101495890) + 36));
  *v64 = v59;
  v64[1] = v61;
  sub_10000C1FC(v45, v62, &qword_101495860);
  sub_100010CC4((uint64_t)v50, &qword_101495850);
  sub_100010CC4(v45, &qword_101495860);
  v65 = v119;
  sub_10000C1FC(v62, (uint64_t)v119, &qword_101495868);
  v65[*(int *)(v109 + 36)] = 1;
  sub_100010CC4(v62, &qword_101495868);
  v66 = v118;
  sub_1000207BC((uint64_t)v65, (uint64_t)v118, &qword_101495870);
  v67 = *(void **)v116;
  if (*(_QWORD *)v116)
  {
    KeyPath = swift_getKeyPath(&unk_100E26B00);
    v69 = swift_getKeyPath(&unk_100E26B28);
    v70 = v67;
    static Published.subscript.getter(&v120, v70, KeyPath, v69);

    swift_release(KeyPath);
    v71 = swift_release(v69);
    LOBYTE(v70) = v120;
    v72 = static Font.subheadline.getter(v71);
    v73 = swift_getKeyPath(&unk_100E26B78);
    v74 = v113;
    v75 = v111;
    v76 = v112;
    sub_10006BB40(v111, v112, v113 & 1);
    if ((v70 & 1) != 0)
    {
      v77 = qword_101490CD8;
      v78 = v115;
      swift_bridgeObjectRetain(v115);
      if (v77 != -1)
        swift_once(&qword_101490CD8, sub_100043F38);
      v79 = &qword_1014D46A0;
    }
    else
    {
      v80 = qword_101490CE0;
      v78 = v115;
      swift_bridgeObjectRetain(v115);
      if (v80 != -1)
        swift_once(&qword_101490CE0, sub_100043F7C);
      v79 = &qword_1014D46A8;
    }
    v81 = *v79;
    swift_retain(*v79);
    v82 = swift_getKeyPath(&unk_100E26100);
    v117 = swift_getKeyPath(&unk_100E26B48);
    sub_10006BB40(v75, v76, v74 & 1);
    swift_bridgeObjectRetain(v78);
    swift_retain(v73);
    swift_retain(v72);
    swift_retain(v82);
    swift_retain(v81);
    sub_10006B77C(v75, v76, v74 & 1);
    swift_release(v81);
    swift_release(v82);
    swift_release(v72);
    swift_release(v73);
    swift_bridgeObjectRelease(v78);
    v83 = (uint64_t)v66;
    v84 = v119;
    sub_10000C1FC(v83, (uint64_t)v119, &qword_101495870);
    v85 = (uint64_t)v84;
    v86 = v114;
    sub_10000C1FC(v85, v114, &qword_101495870);
    v87 = v86 + *(int *)(sub_100008B04(&qword_101495898) + 48);
    *(_QWORD *)v87 = v75;
    *(_QWORD *)(v87 + 8) = v76;
    *(_BYTE *)(v87 + 16) = v74 & 1;
    *(_QWORD *)(v87 + 24) = v78;
    *(_QWORD *)(v87 + 32) = v73;
    *(_QWORD *)(v87 + 40) = v72;
    *(_QWORD *)(v87 + 48) = v82;
    v88 = v117;
    *(_QWORD *)(v87 + 56) = v81;
    *(_QWORD *)(v87 + 64) = v88;
    *(_QWORD *)(v87 + 72) = 1;
    *(_BYTE *)(v87 + 80) = 0;
    sub_10006BB40(v75, v76, v74 & 1);
    swift_bridgeObjectRetain(v78);
    swift_retain(v73);
    swift_retain(v72);
    swift_retain(v82);
    swift_retain(v81);
    swift_retain(v88);
    sub_100010CC4((uint64_t)v118, &qword_101495870);
    sub_10006B77C(v75, v76, v74 & 1);
    swift_release(v88);
    swift_release(v81);
    swift_release(v82);
    swift_release(v72);
    swift_release(v73);
    swift_bridgeObjectRelease(v78);
    return sub_100010CC4((uint64_t)v119, &qword_101495870);
  }
  else
  {
    v90 = *(_QWORD *)(v116 + 8);
    v91 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
    v92 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
    result = EnvironmentObject.error()(0, v90, v91, v92);
    __break(1u);
  }
  return result;
}

uint64_t sub_10004F758(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  void (*v5)(uint64_t *);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_BYTE *)(a1 + 32);
  sub_10002057C(v2, v3, v4);
  v5 = (void (*)(uint64_t *))sub_10001A1F4(v2, v3, v4);
  v7 = v6;
  sub_10001A774(v2, v3, v4);
  v8 = sub_100008B04((uint64_t *)&unk_101493B10);
  v9 = swift_allocObject(v8, 40, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100E23F50;
  v10 = a1 + *(int *)(_s18SingleCuratedGuideVMa(0) + 32);
  v11 = type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(0);
  v12 = *(void **)(v10 + *(int *)(v11 + 32));
  *(_QWORD *)(v9 + 32) = v12;
  v15 = v9;
  specialized Array._endMutation()(v11);
  v13 = v12;
  v5(&v15);
  swift_release(v7);
  return swift_bridgeObjectRelease(v9);
}

uint64_t sub_10004F84C@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  void **v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  uint64_t object;
  uint64_t countAndFlagsBits;
  uint64_t KeyPath;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  Swift::String v47;
  Swift::String v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t result;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  void **v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  Swift::String *v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  char v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  _OWORD v99[2];
  _OWORD v100[8];
  char v101;
  __int128 v102;
  __int128 v103;
  _OWORD v104[9];

  v80 = a1;
  v3 = type metadata accessor for LocalizedStringKey.StringInterpolation(0, a2);
  v4 = __chkstk_darwin(v3);
  v77 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AccessibilityTraits(0, v4);
  v75 = *(_QWORD *)(v6 - 8);
  v76 = v6;
  __chkstk_darwin(v6);
  v74 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = _s18UserGeneratedGuideVMa(0);
  v70 = *(_QWORD *)(v8 - 8);
  v9 = *(_QWORD *)(v70 + 64);
  __chkstk_darwin(v8);
  v81 = (uint64_t)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_100008B04(&qword_1014957A0);
  __chkstk_darwin(v78);
  v72 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v73 = (char *)&v63 - v12;
  __chkstk_darwin(v13);
  v79 = (char *)&v63 - v14;
  v15 = type metadata accessor for AttributedString(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for PlaceSummaryViewModelUnit.UserGeneratedGuide(0);
  v19 = *v2;
  if (*v2)
  {
    v71 = (Swift::String *)((char *)v2 + *(int *)(v8 + 28) + *(int *)(v18 + 20));
    countAndFlagsBits = v71->_countAndFlagsBits;
    object = (uint64_t)v71->_object;
    KeyPath = swift_getKeyPath(&unk_100E26B00);
    v23 = swift_getKeyPath(&unk_100E26B28);
    v24 = v19;
    static Published.subscript.getter(&v102, v24, KeyPath, v23);

    swift_release(KeyPath);
    swift_release(v23);
    sub_10004FF18(countAndFlagsBits, object, v102, (uint64_t)v17);
    v25 = Text.init(_:)(v17);
    v66 = v26;
    v67 = v25;
    v27 = v26;
    v29 = v28;
    v63 = v2;
    v64 = v28;
    LODWORD(KeyPath) = v30 & 1;
    v31 = (uint64_t)v2;
    v32 = v81;
    sub_1000202AC((uint64_t)v2, v81, _s18UserGeneratedGuideVMa);
    v33 = *(unsigned __int8 *)(v70 + 80);
    v69 = ((v33 + 16) & ~v33) + v9;
    v70 = (v33 + 16) & ~v33;
    v34 = v70;
    v68 = v33 | 7;
    v35 = swift_allocObject(&unk_10119E270, v69, v33 | 7);
    sub_10003F29C(v32, v35 + v34, _s18UserGeneratedGuideVMa);
    LOBYTE(v32) = KeyPath;
    v65 = KeyPath;
    sub_10006BB40(v25, v27, KeyPath);
    swift_bridgeObjectRetain(v29);
    v36 = swift_retain(v35);
    v37 = static VerticalAlignment.center.getter(v36);
    sub_1000503C8(v31, v25, v27, v32, v29, (uint64_t)&v102);
    sub_10006B77C(v25, v27, v32);
    swift_release(v35);
    swift_bridgeObjectRelease(v29);
    *(_OWORD *)((char *)v99 + 9) = *(_OWORD *)((char *)&v104[4] + 9);
    v98 = v104[3];
    v99[0] = v104[4];
    v93 = v102;
    v94 = v103;
    v95 = v104[0];
    v96 = v104[1];
    v97 = v104[2];
    v101 = 0;
    *(_OWORD *)((char *)&v100[3] + 7) = v104[1];
    *(_OWORD *)((char *)&v100[2] + 7) = v104[0];
    *(_OWORD *)((char *)&v100[1] + 7) = v103;
    *(_OWORD *)((char *)v100 + 7) = v102;
    v100[7] = *(_OWORD *)((char *)v99 + 9);
    *(_OWORD *)((char *)&v100[6] + 7) = v104[4];
    *(_OWORD *)((char *)&v100[5] + 7) = v104[3];
    *(_OWORD *)((char *)&v100[4] + 7) = v104[2];
    *(_QWORD *)&v102 = sub_10006C730;
    *((_QWORD *)&v102 + 1) = v35;
    *(_QWORD *)&v103 = v37;
    *((_QWORD *)&v103 + 1) = 0x4010000000000000;
    LOBYTE(v104[0]) = 0;
    *(_OWORD *)((char *)&v104[3] + 1) = v100[3];
    *(_OWORD *)((char *)&v104[2] + 1) = v100[2];
    *(_OWORD *)((char *)&v104[1] + 1) = v100[1];
    *(_OWORD *)((char *)v104 + 1) = v100[0];
    *(_OWORD *)((char *)&v104[7] + 1) = v100[7];
    *(_OWORD *)((char *)&v104[6] + 1) = v100[6];
    *(_OWORD *)((char *)&v104[5] + 1) = v100[5];
    *(_OWORD *)((char *)&v104[4] + 1) = v100[4];
    v90 = v104[6];
    v91 = v104[7];
    v92 = BYTE8(v99[1]);
    v84 = v104[0];
    v85 = v104[1];
    v86 = v104[2];
    v87 = v104[3];
    v88 = v104[4];
    v89 = v104[5];
    v82 = v102;
    v83 = v103;
    v38 = sub_100008B04(&qword_1014957B8);
    v39 = sub_100010D70((unint64_t *)&unk_1014957C0, &qword_1014957B8, "=u7");
    v40 = (uint64_t)v72;
    View.accessibility(identifier:)(0xD000000000000018, 0x8000000100E44350, v38, v39);
    sub_10006BF1C((uint64_t)&v102);
    v41 = (uint64_t)v73;
    v42 = v78;
    ModifiedContent<>.accessibilityAutomationType(_:)(9, v78);
    v43 = sub_100010CC4(v40, &qword_1014957A0);
    v44 = v74;
    static AccessibilityTraits.isButton.getter(v43);
    v45 = (uint64_t)v79;
    ModifiedContent<>.accessibilityRemoveTraits(_:)(v44, v42);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v44, v76);
    sub_100010CC4(v41, &qword_1014957A0);
    v46 = v77;
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(5, 1);
    v47._countAndFlagsBits = 0x20776F6853;
    v47._object = (void *)0xE500000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v47);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(*v71);
    v48._countAndFlagsBits = 0;
    v48._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v48);
    v49 = LocalizedStringKey.init(stringInterpolation:)(v46);
    v50 = Text.init(_:tableName:bundle:comment:)(v49);
    v52 = v51;
    v54 = v53;
    v56 = v55 & 1;
    v57 = v81;
    sub_1000202AC((uint64_t)v63, v81, _s18UserGeneratedGuideVMa);
    v58 = swift_allocObject(&unk_10119E298, v69, v68);
    sub_10003F29C(v57, v58 + v70, _s18UserGeneratedGuideVMa);
    ModifiedContent<>.accessibilityAction(named:_:)(v50, v52, v56, v54, sub_10006C730, v58, v42);
    swift_release(v58);
    sub_10006B77C(v50, v52, v56);
    swift_bridgeObjectRelease(v54);
    sub_10006B77C(v67, v66, v65);
    swift_bridgeObjectRelease(v64);
    return sub_100010CC4(v45, &qword_1014957A0);
  }
  else
  {
    v60 = v2[1];
    v61 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
    v62 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
    result = EnvironmentObject.error()(0, v60, v61, v62);
    __break(1u);
  }
  return result;
}

uint64_t sub_10004FF18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t KeyPath;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t *, _QWORD);
  unint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  Swift::String v62;

  v53 = a3;
  v58 = a4;
  v6 = sub_100008B04(&qword_1014958A0);
  __chkstk_darwin(v6);
  v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for AttributedString(0);
  v57 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008B04(&qword_1014958A8);
  __chkstk_darwin(v11);
  v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100008B04(&qword_1014958B0);
  v55 = *(_QWORD *)(v14 - 8);
  v56 = v14;
  __chkstk_darwin(v14);
  v52 = (uint64_t)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v16);
  v51 = (uint64_t)&v50 - v18;
  v19 = type metadata accessor for AttributeContainer(0, v17);
  __chkstk_darwin(v19);
  v21 = (char *)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101490ED0 != -1)
    swift_once(&qword_101490ED0, sub_10011833C);
  v22._countAndFlagsBits = 0xD00000000000002BLL;
  v62._object = (void *)0x8000000100E443A0;
  v22._object = (void *)0x8000000100E44370;
  v23._countAndFlagsBits = 0x4025206E49;
  v23._object = (void *)0xE500000000000000;
  v62._countAndFlagsBits = 0xD000000000000021;
  v24 = NSLocalizedString(_:tableName:bundle:value:comment:)(v22, (Swift::String_optional)0, (NSBundle)qword_1014D4B80, v23, v62);
  v25 = sub_100008B04((uint64_t *)&unk_10149A4F0);
  v26 = swift_allocObject(v25, 72, 7);
  *(_OWORD *)(v26 + 16) = xmmword_100E22F40;
  *(_QWORD *)(v26 + 56) = &type metadata for String;
  *(_QWORD *)(v26 + 64) = sub_10000D8E0();
  *(_QWORD *)(v26 + 32) = a1;
  *(_QWORD *)(v26 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  v27 = static String.localizedStringWithFormat(_:_:)(v24._countAndFlagsBits, v24._object, v26);
  v29 = v28;
  swift_bridgeObjectRelease(v26);
  v30 = swift_bridgeObjectRelease(v24._object);
  AttributeContainer.init()(v30);
  v31 = v58;
  AttributedString.init(_:attributes:)(v27, v29, v21);
  v32 = v57;
  v33 = v54;
  (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v10, v31, v54);
  v59 = a1;
  v60 = a2;
  v34 = type metadata accessor for Locale(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v8, 1, 1, v34);
  v35 = sub_10000BC84(&qword_1014958D0, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString, (uint64_t)&protocol conformance descriptor for AttributedString);
  v36 = sub_10006C008();
  swift_bridgeObjectRetain(a2);
  AttributedStringProtocol.range<A>(of:options:locale:)(&v59, 0, v8, v33, &type metadata for String, v35, v36);
  sub_100010CC4((uint64_t)v8, &qword_1014958A0);
  swift_bridgeObjectRelease(v60);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v33);
  v37 = v56;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v13, 1, v56) == 1)
  {
    v38 = &qword_1014958A8;
    v39 = (uint64_t)v13;
  }
  else
  {
    v40 = v51;
    sub_1000207BC((uint64_t)v13, v51, &qword_1014958B0);
    v41 = v52;
    sub_10000C1FC(v40, v52, &qword_1014958B0);
    KeyPath = swift_getKeyPath(&unk_100E26BA8);
    __chkstk_darwin(KeyPath);
    v43 = swift_getKeyPath(&unk_100E26BD8);
    v44 = v43;
    if ((v53 & 1) != 0)
      v45 = static Color.white.getter(v43);
    else
      v45 = static Color.blue.getter(v43);
    v61 = v45;
    v46 = sub_100010D70(&qword_1014958E0, &qword_1014958B0, (const char *)&protocol conformance descriptor for Range<A>);
    v47 = (void (*)(uint64_t *, _QWORD))AttributedString.subscript.modify(&v59, v41, v37, v46);
    v48 = sub_10006C5A8();
    AttributedSubstring.subscript.setter(&v61, v44, v48);
    v47(&v59, 0);
    sub_100010CC4(v41, &qword_1014958B0);
    v39 = v40;
    v38 = &qword_1014958B0;
  }
  return sub_100010CC4(v39, v38);
}

uint64_t sub_1000503C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;

  v10 = Image.init(systemName:)(0x72616D6B63656863, 0xE90000000000006BLL);
  v11 = static Font.caption.getter();
  KeyPath = swift_getKeyPath(&unk_100E26B78);
  v13 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    v14 = KeyPath;
    v15 = swift_getKeyPath(&unk_100E26B00);
    v16 = swift_getKeyPath(&unk_100E26B28);
    v17 = v13;
    static Published.subscript.getter((uint64_t *)((char *)&v40 + 1), v17, v15, v16);

    swift_release(v15);
    v18 = swift_release(v16);
    if ((v40 & 0x100) != 0)
      v19 = static Color.white.getter(v18);
    else
      v19 = static Color.secondary.getter(v18);
    v38 = v19;
    v37 = swift_getKeyPath(&unk_100E26100);
    v20 = swift_getKeyPath(&unk_100E26B00);
    v21 = swift_getKeyPath(&unk_100E26B28);
    v22 = v17;
    static Published.subscript.getter(&v40, v22, v20, v21);

    swift_release(v20);
    v23 = swift_release(v21);
    LODWORD(v20) = v40;
    v24 = static Font.subheadline.getter(v23);
    v25 = swift_getKeyPath(&unk_100E26B78);
    sub_10006BB40(a2, a3, a4 & 1);
    if ((_DWORD)v20 == 1)
    {
      v26 = qword_101490CD8;
      swift_bridgeObjectRetain(a5);
      if (v26 != -1)
        swift_once(&qword_101490CD8, sub_100043F38);
      v27 = &qword_1014D46A0;
    }
    else
    {
      v28 = qword_101490CE0;
      swift_bridgeObjectRetain(a5);
      if (v28 != -1)
        swift_once(&qword_101490CE0, sub_100043F7C);
      v27 = &qword_1014D46A8;
    }
    v29 = *v27;
    swift_retain(*v27);
    v30 = swift_getKeyPath(&unk_100E26100);
    v35 = swift_getKeyPath(&unk_100E26B48);
    sub_10006BB40(a2, a3, a4 & 1);
    swift_bridgeObjectRetain(a5);
    swift_retain(v25);
    swift_retain(v24);
    swift_retain(v30);
    swift_retain(v29);
    sub_10006B77C(a2, a3, a4 & 1);
    swift_release(v29);
    swift_release(v30);
    swift_release(v24);
    swift_release(v25);
    swift_bridgeObjectRelease(a5);
    *(_QWORD *)a6 = v10;
    *(_QWORD *)(a6 + 8) = v14;
    *(_QWORD *)(a6 + 16) = v11;
    *(_QWORD *)(a6 + 24) = v37;
    *(_QWORD *)(a6 + 32) = v38;
    *(_QWORD *)(a6 + 40) = a2;
    *(_QWORD *)(a6 + 48) = a3;
    *(_BYTE *)(a6 + 56) = a4 & 1;
    *(_QWORD *)(a6 + 64) = a5;
    *(_QWORD *)(a6 + 72) = v25;
    *(_QWORD *)(a6 + 80) = v24;
    *(_QWORD *)(a6 + 88) = v30;
    *(_QWORD *)(a6 + 96) = v29;
    *(_QWORD *)(a6 + 104) = v35;
    *(_QWORD *)(a6 + 112) = 1;
    *(_BYTE *)(a6 + 120) = 0;
    swift_retain(v10);
    swift_retain(v14);
    swift_retain(v11);
    swift_retain(v37);
    swift_retain(v38);
    sub_10006BB40(a2, a3, a4 & 1);
    swift_bridgeObjectRetain(a5);
    swift_retain(v25);
    swift_retain(v24);
    swift_retain(v30);
    swift_retain(v29);
    swift_retain(v35);
    sub_10006B77C(a2, a3, a4 & 1);
    swift_release(v38);
    swift_release(v37);
    swift_release(v11);
    swift_release(v14);
    swift_release(v10);
    swift_release(v35);
    swift_release(v29);
    swift_release(v30);
    swift_release(v24);
    swift_release(v25);
    return swift_bridgeObjectRelease(a5);
  }
  else
  {
    v32 = *(_QWORD *)(a1 + 8);
    v33 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
    v34 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
    result = EnvironmentObject.error()(0, v32, v33, v34);
    __break(1u);
  }
  return result;
}

uint64_t sub_100050810(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  void (*v5)(uint64_t *);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_BYTE *)(a1 + 32);
  sub_10002057C(v2, v3, v4);
  v5 = (void (*)(uint64_t *))sub_10001A208(v2, v3, v4);
  v7 = v6;
  sub_10001A774(v2, v3, v4);
  v8 = a1 + *(int *)(_s18UserGeneratedGuideVMa(0) + 28);
  v10 = *(_QWORD *)(v8 + *(int *)(type metadata accessor for PlaceSummaryViewModelUnit.UserGeneratedGuide(0) + 24));
  v5(&v10);
  return swift_release(v7);
}

uint64_t sub_1000508BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  NSString v29;
  NSString v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  NSString v44;
  NSString v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  void *v61;
  uint64_t KeyPath;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  Swift::String v74;
  uint64_t v75;
  int v76;
  Swift::String v77;
  void *object;
  Swift::String v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  void **v121;
  uint64_t v122;
  uint64_t v123;
  __n128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __n128 v130;
  __n128 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  __n128 v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t result;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int *v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  char *v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  __int128 v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char v197;
  uint64_t v198;

  v186 = a1;
  v1 = sub_100008B04(&qword_101495908);
  __chkstk_darwin(v1);
  v165 = (uint64_t *)((char *)&v159 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v185 = sub_100008B04(&qword_101495910);
  __chkstk_darwin(v185);
  v164 = (uint64_t)&v159 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v166 = (uint64_t)&v159 - v5;
  v183 = sub_100008B04(&qword_101495918);
  __chkstk_darwin(v183);
  v184 = (uint64_t)&v159 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008B04(&qword_101495920);
  __chkstk_darwin(v7);
  v162 = (uint64_t *)((char *)&v159 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v182 = sub_100008B04(&qword_101495928);
  __chkstk_darwin(v182);
  v161 = (uint64_t)&v159 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v163 = (uint64_t)&v159 - v11;
  v12 = sub_100008B04(&qword_101495930);
  __chkstk_darwin(v12);
  v181 = (char *)&v159 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100008B04(&qword_101495938);
  __chkstk_darwin(v14);
  v178 = (uint64_t *)((char *)&v159 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v177 = sub_100008B04(&qword_101495940);
  v16 = __chkstk_darwin(v177);
  v180 = (char *)&v159 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for LocalizedStringKey.StringInterpolation(0, v16);
  __chkstk_darwin(v18);
  v169 = (char *)&v159 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = sub_100008B04(&qword_101495948);
  __chkstk_darwin(v176);
  v175 = (char *)&v159 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v179 = (char *)&v159 - v22;
  v23 = sub_100008B04(&qword_101495900);
  __chkstk_darwin(v23);
  v25 = (char *)&v159 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100008B04(&qword_101495950);
  __chkstk_darwin(v26);
  v188 = (uint64_t)&v159 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101490ED0 != -1)
    swift_once(&qword_101490ED0, sub_10011833C);
  v28 = (void *)qword_1014D4B80;
  v29 = String._bridgeToObjectiveC()();
  v30 = String._bridgeToObjectiveC()();
  v31 = objc_msgSend(v28, "localizedStringForKey:value:table:", v29, v30, 0);

  v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
  v34 = v33;

  v35 = sub_100008B04((uint64_t *)&unk_10149A4F0);
  v36 = swift_allocObject(v35, 72, 7);
  v187 = xmmword_100E22F40;
  *(_OWORD *)(v36 + 16) = xmmword_100E22F40;
  v37 = _s17ThirdPartyRatingsVMa(0);
  v38 = v190;
  v39 = v190 + *(int *)(v37 + 28);
  v40 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.ThirdPartyRatings(0);
  v41 = *(_QWORD *)(v39 + v40[7]);
  *(_QWORD *)(v36 + 56) = &type metadata for Int;
  *(_QWORD *)(v36 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v36 + 32) = v41;
  v173 = static String.localizedStringWithFormat(_:_:)(v32, v34, v36);
  v174 = v42;
  swift_bridgeObjectRelease(v36);
  swift_bridgeObjectRelease(v34);
  v43 = (void *)qword_1014D4B80;
  v44 = String._bridgeToObjectiveC()();
  v45 = String._bridgeToObjectiveC()();
  v46 = objc_msgSend(v43, "localizedStringForKey:value:table:", v44, v45, 0);

  v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
  v49 = v48;

  v168 = v35;
  v50 = swift_allocObject(v35, 72, 7);
  *(_OWORD *)(v50 + 16) = v187;
  v167 = v40[5];
  v51 = *(_DWORD *)(v39 + v167);
  *(_QWORD *)(v50 + 56) = &type metadata for Float;
  *(_QWORD *)(v50 + 64) = &protocol witness table for Float;
  *(_DWORD *)(v50 + 32) = v51;
  v170 = static String.localizedStringWithFormat(_:_:)(v47, v49, v50);
  v53 = v52;
  swift_bridgeObjectRelease(v50);
  swift_bridgeObjectRelease(v49);
  v54 = Image.init(systemName:)(0x6C69662E72617473, 0xE90000000000006CLL);
  v55 = enum case for Image.TemplateRenderingMode.template(_:);
  v56 = type metadata accessor for Image.TemplateRenderingMode(0);
  v57 = *(_QWORD *)(v56 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v57 + 104))(v25, v55, v56);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v25, 0, 1, v56);
  v58 = Image.renderingMode(_:)(v25, v54);
  swift_release(v54);
  sub_100010CC4((uint64_t)v25, &qword_101495900);
  v172 = v37;
  v189 = *(int *)(v37 + 32);
  v59 = *(_BYTE *)(v38 + v189) == 1;
  v171 = v53;
  v160 = v40;
  if (v59)
  {
    v60 = v58;
    v61 = *(void **)v38;
    if (!*(_QWORD *)v38)
    {
      v156 = *(_QWORD *)(v38 + 8);
      goto LABEL_34;
    }
    KeyPath = swift_getKeyPath(&unk_100E26B00);
    v63 = swift_getKeyPath(&unk_100E26B28);
    v64 = v61;
    static Published.subscript.getter(&v191, v64, KeyPath, v63);

    swift_release(KeyPath);
    swift_release(v63);
    if ((v191 & 1) != 0)
    {
      v58 = v60;
      if (qword_101490CD8 != -1)
        swift_once(&qword_101490CD8, sub_100043F38);
      v65 = qword_1014D46A0;
    }
    else
    {
      v58 = v60;
      if (qword_101490CE0 != -1)
        swift_once(&qword_101490CE0, sub_100043F7C);
      v65 = qword_1014D46A8;
    }
    swift_retain(v65);
  }
  else
  {
    v65 = Color.init(uiColor:)(*(id *)(v39 + v40[6]));
  }
  v66 = swift_getKeyPath(&unk_100E26100);
  v67 = static Font.caption.getter();
  static Font.Weight.semibold.getter();
  v68 = Font.weight(_:)(v67);
  swift_release(v67);
  v69 = swift_getKeyPath(&unk_100E26B78);
  v191 = v58;
  v192 = v66;
  v193 = v65;
  v194 = v69;
  v195 = v68;
  v196 = 0x4059000000000000;
  v70 = v58;
  v71 = sub_100008B04(&qword_101495958);
  v72 = sub_10006CB94();
  View.accessibilityIdentifier(_:)(0xD000000000000015, 0x8000000100E44450, v71, v72);
  swift_release(v68);
  swift_release(v69);
  swift_release(v65);
  swift_release(v66);
  swift_release(v70);
  v73 = v169;
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 1);
  v74._countAndFlagsBits = 0;
  v74._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v74);
  v75 = swift_allocObject(v168, 72, 7);
  *(_OWORD *)(v75 + 16) = v187;
  v76 = *(_DWORD *)(v39 + v167);
  *(_QWORD *)(v75 + 56) = &type metadata for Float;
  *(_QWORD *)(v75 + 64) = &protocol witness table for Float;
  *(_DWORD *)(v75 + 32) = v76;
  v77._countAndFlagsBits = String.init(format:_:)(1714499109, 0xE400000000000000, v75);
  object = v77._object;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v77);
  swift_bridgeObjectRelease(object);
  v79._countAndFlagsBits = 0;
  v79._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v79);
  v80 = LocalizedStringKey.init(stringInterpolation:)(v73);
  v81 = Text.init(_:tableName:bundle:comment:)(v80);
  v83 = v82;
  v85 = v84;
  v87 = v86;
  v88 = v190;
  if (*(_BYTE *)(v190 + v189) == 1)
  {
    v89 = *(void **)v190;
    if (*(_QWORD *)v190)
    {
      v90 = swift_getKeyPath(&unk_100E26B00);
      v91 = swift_getKeyPath(&unk_100E26B28);
      v92 = v89;
      static Published.subscript.getter(&v191, v92, v90, v91);

      swift_release(v90);
      swift_release(v91);
      if ((v191 & 1) != 0)
      {
        if (qword_101490CD8 != -1)
          swift_once(&qword_101490CD8, sub_100043F38);
        v93 = qword_1014D46A0;
      }
      else
      {
        if (qword_101490CE0 != -1)
          swift_once(&qword_101490CE0, sub_100043F7C);
        v93 = qword_1014D46A8;
      }
      swift_retain(v93);
      goto LABEL_25;
    }
    v156 = *(_QWORD *)(v190 + 8);
LABEL_34:
    v157 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
    v158 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
    result = EnvironmentObject.error()(0, v156, v157, v158);
    __break(1u);
    return result;
  }
  v93 = Color.init(uiColor:)(*(id *)(v39 + v160[6]));
LABEL_25:
  v94 = v85 & 1;
  v95 = Text.foregroundColor(_:)(v93, v81, v83, v85 & 1, v87);
  v97 = v96;
  v99 = v98;
  v101 = v100;
  swift_release(v93);
  sub_10006B77C(v81, v83, v94);
  v102 = swift_bridgeObjectRelease(v87);
  v103 = static Font.subheadline.getter(v102);
  if (*(_BYTE *)(v88 + v189) == 1)
    static Font.Weight.regular.getter();
  else
    static Font.Weight.bold.getter();
  v104 = (uint64_t)v180;
  v105 = Font.weight(_:)(v103);
  swift_release(v103);
  v106 = v99 & 1;
  v107 = Text.font(_:)(v105, v95, v97, v99 & 1, v101);
  v109 = v108;
  v111 = v110;
  v113 = v112;
  swift_release(v105);
  sub_10006B77C(v95, v97, v106);
  swift_bridgeObjectRelease(v101);
  v114 = swift_getKeyPath(&unk_100E26B48);
  v191 = v107;
  v192 = v109;
  LOBYTE(v193) = v111 & 1;
  v194 = v113;
  v195 = v114;
  v196 = 1;
  v197 = 0;
  v198 = 0x4059000000000000;
  v115 = sub_100008B04(&qword_101495998);
  v116 = sub_10006CD3C();
  v117 = (uint64_t)v175;
  View.accessibilityIdentifier(_:)(0xD000000000000014, 0x8000000100E44470, v115, v116);
  sub_10006B77C(v107, v109, v111 & 1);
  swift_release(v114);
  swift_bridgeObjectRelease(v113);
  v118 = v171;
  v191 = v170;
  v192 = v171;
  v119 = sub_10006C008();
  v120 = (uint64_t)v179;
  ModifiedContent<>.accessibilityLabel<A>(_:)(&v191, v176, &type metadata for String, v119);
  sub_100010CC4(v117, &qword_101495948);
  swift_bridgeObjectRelease(v118);
  v121 = (void **)v190;
  v122 = sub_100008B04(&qword_10149D390);
  ScaledMetric.wrappedValue.getter(&v191, v122);
  v123 = v191;
  v125 = static VerticalAlignment.center.getter(v124);
  v126 = (uint64_t)v178;
  *v178 = v125;
  *(_QWORD *)(v126 + 8) = v123;
  *(_BYTE *)(v126 + 16) = 0;
  v127 = sub_100008B04(&qword_1014959A8);
  v128 = v173;
  v129 = v174;
  sub_100051844(v120, v121, v173, v174, v126 + *(int *)(v127 + 44), v130);
  sub_10000C1FC(v126, v104, &qword_101495938);
  *(_BYTE *)(v104 + *(int *)(v177 + 36)) = 0;
  sub_100010CC4(v126, &qword_101495938);
  if (*((_BYTE *)v121 + v189) == 1)
  {
    v132 = static VerticalAlignment.center.getter(v131);
    v133 = (uint64_t)v162;
    *v162 = v132;
    *(_QWORD *)(v133 + 8) = 0x4008000000000000;
    *(_BYTE *)(v133 + 16) = 0;
    v134 = sub_100008B04(&qword_1014959D8);
    v135 = v188;
    sub_100052230(v188, v120, (uint64_t)v121, v128, v129, v133 + *(int *)(v134 + 44));
    swift_bridgeObjectRelease(v129);
    v136 = v161;
    sub_10000C1FC(v133, v161, &qword_101495920);
    v137 = v182;
    *(_QWORD *)(v136 + *(int *)(v182 + 36)) = 0x4024000000000000;
    sub_100010CC4(v133, &qword_101495920);
    v138 = &qword_101495928;
    v139 = v163;
    sub_1000207BC(v136, v163, &qword_101495928);
    v140 = v184;
    sub_10000C1FC(v139, v184, &qword_101495928);
    swift_storeEnumTagMultiPayload(v140, v183, 0);
    v141 = sub_10006CDE0();
    v142 = sub_10006CE7C();
    v143 = (uint64_t)v181;
    v144 = v140;
    v145 = v137;
    v146 = v185;
  }
  else
  {
    swift_bridgeObjectRelease(v129);
    v148 = static VerticalAlignment.center.getter(v147);
    v149 = (uint64_t)v165;
    *v165 = v148;
    *(_QWORD *)(v149 + 8) = 0x4008000000000000;
    *(_BYTE *)(v149 + 16) = 0;
    v150 = sub_100008B04(&qword_1014959B0);
    v135 = v188;
    sub_100052F00(v188, v104, &qword_101495940, &qword_101495A70, v149 + *(int *)(v150 + 44));
    v151 = v164;
    sub_10000C1FC(v149, v164, &qword_101495908);
    v152 = v185;
    v153 = v151 + *(int *)(v185 + 36);
    *(_QWORD *)v153 = 0xD000000000000016;
    *(_QWORD *)(v153 + 8) = 0x8000000100E44490;
    *(_BYTE *)(v153 + 16) = 9;
    sub_100010CC4(v149, &qword_101495908);
    v138 = &qword_101495910;
    v139 = v166;
    sub_1000207BC(v151, v166, &qword_101495910);
    v154 = v184;
    sub_10000C1FC(v139, v184, &qword_101495910);
    swift_storeEnumTagMultiPayload(v154, v183, 1);
    v141 = sub_10006CDE0();
    v142 = sub_10006CE7C();
    v143 = (uint64_t)v181;
    v145 = v182;
    v144 = v154;
    v146 = v152;
  }
  _ConditionalContent<>.init(storage:)(v144, v145, v146, v141, v142);
  sub_100010CC4(v139, v138);
  sub_1000207BC(v143, v186, &qword_101495930);
  sub_100010CC4(v104, &qword_101495940);
  sub_100010CC4(v120, &qword_101495948);
  return sub_100010CC4(v135, &qword_101495950);
}

uint64_t sub_100051844@<X0>(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, __n128 a6@<Q0>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  char *v25;
  uint64_t v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t KeyPath;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  void **v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t result;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  void **v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  uint64_t v135;

  v119 = a4;
  v117 = a3;
  v9 = type metadata accessor for LocalizedStringKey.StringInterpolation(0, a6);
  __chkstk_darwin(v9);
  v11 = (char *)&v107 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = sub_100008B04(&qword_1014959F0);
  __chkstk_darwin(v116);
  v13 = (char *)&v107 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v112 = (uint64_t)&v107 - v15;
  __chkstk_darwin(v16);
  v115 = (char *)&v107 - v17;
  __chkstk_darwin(v18);
  v123 = (uint64_t)&v107 - v19;
  v20 = sub_100008B04(&qword_101495948);
  __chkstk_darwin(v20);
  v121 = (uint64_t)&v107 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v120 = (uint64_t)&v107 - v23;
  sub_10000C1FC(a1, (uint64_t)&v107 - v23, &qword_101495948);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(2, 1);
  v24._countAndFlagsBits = 40;
  v24._object = (void *)0xE100000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v24);
  v25 = (char *)a2 + *(int *)(_s17ThirdPartyRatingsVMa(0) + 28);
  v113 = type metadata accessor for PlaceSummaryViewModelUnit.ThirdPartyRatings(0);
  v26 = *(int *)(v113 + 28);
  v114 = (uint64_t)v25;
  v124 = *(_QWORD *)&v25[v26];
  LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v124, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
  v27._countAndFlagsBits = 41;
  v27._object = (void *)0xE100000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v27);
  v108 = v11;
  v28 = LocalizedStringKey.init(stringInterpolation:)(v11);
  v29 = Text.init(_:tableName:bundle:comment:)(v28);
  v109 = a2;
  v33 = *a2;
  if (*a2)
  {
    v34 = v29;
    v35 = v30;
    v36 = v31;
    v37 = v32;
    KeyPath = swift_getKeyPath(&unk_100E26B00);
    v39 = swift_getKeyPath(&unk_100E26B28);
    v40 = v33;
    static Published.subscript.getter(&v124, v40, KeyPath, v39);

    swift_release(KeyPath);
    v41 = swift_release(v39);
    LOBYTE(KeyPath) = v124;
    v42 = static Font.subheadline.getter(v41);
    v43 = swift_getKeyPath(&unk_100E26B78);
    sub_10006BB40(v34, v35, v36 & 1);
    v122 = v13;
    v118 = a5;
    if ((KeyPath & 1) != 0)
    {
      v44 = qword_101490CD8;
      swift_bridgeObjectRetain(v37);
      if (v44 != -1)
        swift_once(&qword_101490CD8, sub_100043F38);
      v45 = &qword_1014D46A0;
    }
    else
    {
      v46 = qword_101490CE0;
      swift_bridgeObjectRetain(v37);
      if (v46 != -1)
        swift_once(&qword_101490CE0, sub_100043F7C);
      v45 = &qword_1014D46A8;
    }
    v47 = *v45;
    swift_retain(*v45);
    v48 = swift_getKeyPath(&unk_100E26100);
    v49 = swift_getKeyPath(&unk_100E26B48);
    v110 = v49;
    sub_10006BB40(v34, v35, v36 & 1);
    swift_bridgeObjectRetain(v37);
    swift_retain(v43);
    swift_retain(v42);
    swift_retain(v48);
    swift_retain(v47);
    sub_10006B77C(v34, v35, v36 & 1);
    swift_release(v47);
    swift_release(v48);
    swift_release(v42);
    swift_release(v43);
    swift_bridgeObjectRelease(v37);
    sub_10006B77C(v34, v35, v36 & 1);
    swift_bridgeObjectRelease(v37);
    v124 = v34;
    v125 = v35;
    v126 = v36 & 1;
    v127 = v37;
    v128 = v43;
    v129 = v42;
    v130 = v48;
    v131 = v47;
    v132 = v49;
    v133 = 1;
    v134 = 0;
    v135 = 0x4059000000000000;
    v50 = sub_100008B04(&qword_101495A58);
    v111 = v42;
    v51 = v50;
    v52 = sub_10006D0A8();
    v53 = v112;
    View.accessibilityIdentifier(_:)(0xD000000000000016, 0x8000000100E444D0, v51, v52);
    sub_10006B77C(v34, v35, v36 & 1);
    swift_release(v110);
    swift_release(v47);
    swift_release(v48);
    swift_release(v111);
    swift_release(v43);
    swift_bridgeObjectRelease(v37);
    v124 = v117;
    v125 = v119;
    v54 = sub_10006C008();
    v55 = (uint64_t)v115;
    ModifiedContent<>.accessibilityLabel<A>(_:)(&v124, v116, &type metadata for String, v54);
    sub_100010CC4(v53, &qword_1014959F0);
    sub_1000207BC(v55, v123, &qword_1014959F0);
    v56 = (uint64_t *)(v114 + *(int *)(v113 + 32));
    v57 = v56[1];
    if (!v57)
      goto LABEL_18;
    v58 = *v56;
    v59 = HIBYTE(v57) & 0xF;
    if ((v57 & 0x2000000000000000) == 0)
      v59 = v58 & 0xFFFFFFFFFFFFLL;
    if (!v59)
    {
LABEL_18:
      v71 = 0;
      v119 = 0;
      v82 = 0;
      v83 = 0;
      v84 = 0;
      v85 = 0;
      v116 = 0;
      v117 = 0;
      v115 = 0;
      v114 = 0;
      v113 = 0;
LABEL_23:
      v90 = v121;
      sub_10000C1FC(v120, v121, &qword_101495948);
      v91 = (uint64_t)v122;
      sub_10000C1FC(v123, (uint64_t)v122, &qword_1014959F0);
      v92 = v118;
      sub_10000C1FC(v90, v118, &qword_101495948);
      v93 = sub_100008B04(&qword_101495A78);
      sub_10000C1FC(v91, v92 + *(int *)(v93 + 48), &qword_1014959F0);
      v94 = (uint64_t *)(v92 + *(int *)(v93 + 64));
      v95 = v119;
      *v94 = v71;
      v94[1] = v95;
      v94[2] = v82;
      v94[3] = v83;
      v94[4] = v84;
      v94[5] = v85;
      v96 = v85;
      v112 = v85;
      v97 = v116;
      v98 = v117;
      v94[6] = v116;
      v94[7] = v98;
      v99 = v71;
      v100 = (uint64_t)v115;
      v101 = v114;
      v94[8] = (uint64_t)v115;
      v94[9] = v101;
      v102 = v113;
      v94[10] = 0;
      v94[11] = v102;
      sub_10006CA7C(v99, v95, v82, v83, v84, v96, v97, v98, v100);
      sub_100010CC4(v123, &qword_1014959F0);
      sub_100010CC4(v120, &qword_101495948);
      sub_10006C964(v99, v95, v82, v83, v84, v112, v97, v98, v100);
      sub_100010CC4((uint64_t)v122, &qword_1014959F0);
      return sub_100010CC4(v121, &qword_101495948);
    }
    v60 = v108;
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(3, 1);
    v61._countAndFlagsBits = 2125423;
    v61._object = (void *)0xE300000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v61);
    v62._countAndFlagsBits = v58;
    v62._object = (void *)v57;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v62);
    v63._countAndFlagsBits = 0;
    v63._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v63);
    v64 = LocalizedStringKey.init(stringInterpolation:)(v60);
    v65 = Text.init(_:tableName:bundle:comment:)(v64);
    v119 = v68;
    v69 = v109;
    v70 = *v109;
    if (*v109)
    {
      v71 = v65;
      v72 = v67;
      v73 = v66 & 1;
      v74 = swift_getKeyPath(&unk_100E26B00);
      v75 = swift_getKeyPath(&unk_100E26B28);
      v76 = v70;
      static Published.subscript.getter(&v124, v76, v74, v75);

      swift_release(v74);
      v77 = swift_release(v75);
      LOBYTE(v74) = v124;
      v78 = static Font.subheadline.getter(v77);
      v79 = swift_getKeyPath(&unk_100E26B78);
      sub_10006BB40(v71, v119, v73);
      if ((v74 & 1) != 0)
      {
        v80 = qword_101490CD8;
        swift_bridgeObjectRetain(v72);
        if (v80 != -1)
          swift_once(&qword_101490CD8, sub_100043F38);
        v81 = &qword_1014D46A0;
      }
      else
      {
        v86 = qword_101490CE0;
        swift_bridgeObjectRetain(v72);
        if (v86 != -1)
          swift_once(&qword_101490CE0, sub_100043F7C);
        v81 = &qword_1014D46A8;
      }
      v87 = *v81;
      swift_retain(*v81);
      v88 = swift_getKeyPath(&unk_100E26100);
      v115 = (char *)swift_getKeyPath(&unk_100E26B48);
      v89 = v119;
      sub_10006BB40(v71, v119, v73);
      swift_bridgeObjectRetain(v72);
      swift_retain(v79);
      swift_retain(v78);
      swift_retain(v88);
      swift_retain(v87);
      sub_10006B77C(v71, v89, v73);
      v117 = v87;
      swift_release(v87);
      v116 = v88;
      swift_release(v88);
      swift_release(v78);
      swift_release(v79);
      swift_bridgeObjectRelease(v72);
      sub_10006B77C(v71, v89, v73);
      swift_bridgeObjectRelease(v72);
      v113 = 0x4024000000000000;
      v114 = 1;
      v83 = v72;
      v82 = v73;
      v84 = v79;
      v85 = v78;
      goto LABEL_23;
    }
  }
  else
  {
    v69 = v109;
  }
  v104 = v69[1];
  v105 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
  v106 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
  result = EnvironmentObject.error()(0, v104, v105, v106);
  __break(1u);
  return result;
}

uint64_t sub_100052230@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  int *v44;
  BOOL v45;
  Swift::String v46;
  uint64_t v47;
  Swift::String v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t KeyPath;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  Swift::String v87;
  Swift::String v88;
  Swift::String v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t result;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int *v132;
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD v153[2];
  uint64_t v154;
  uint64_t v155;
  char v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  uint64_t v165;

  v139 = a5;
  v138 = a4;
  v152 = a3;
  v143 = (char *)a2;
  v140 = a1;
  v149 = a6;
  v147 = sub_100008B04(&qword_1014959E0);
  v146 = *(_QWORD *)(v147 - 8);
  __chkstk_darwin(v147);
  v135 = (char *)&v129 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v134 = (uint64_t)&v129 - v8;
  v9 = sub_100008B04(&qword_1014959E8);
  __chkstk_darwin(v9);
  v148 = (uint64_t)&v129 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v11);
  v151 = (uint64_t)&v129 - v13;
  v14 = type metadata accessor for LocalizedStringKey.StringInterpolation(0, v12);
  __chkstk_darwin(v14);
  v16 = (char *)&v129 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = sub_100008B04(&qword_1014959F0);
  v141 = *(_QWORD *)(v142 - 8);
  __chkstk_darwin(v142);
  v137 = (char *)&v129 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v136 = (uint64_t)&v129 - v19;
  v20 = sub_100008B04(&qword_1014959F8);
  __chkstk_darwin(v20);
  v145 = (uint64_t)&v129 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v150 = (uint64_t)&v129 - v23;
  v24 = sub_100008B04(&qword_101495A00);
  __chkstk_darwin(v24);
  v26 = (char *)&v129 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100008B04(&qword_101495A08);
  __chkstk_darwin(v27);
  v29 = (char *)&v129 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_100008B04(&qword_101495A10);
  __chkstk_darwin(v30);
  v144 = (uint64_t)&v129 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v34 = (char *)&v129 - v33;
  v36 = __chkstk_darwin(v35);
  v38 = (char *)&v129 - v37;
  *(_QWORD *)v26 = static VerticalAlignment.center.getter(v36);
  *((_QWORD *)v26 + 1) = 0x4008000000000000;
  v26[16] = 0;
  v39 = sub_100008B04(&qword_101495A18);
  sub_100052F00(v140, (uint64_t)v143, &qword_101495948, &qword_101495A68, (uint64_t)&v26[*(int *)(v39 + 44)]);
  sub_10000C1FC((uint64_t)v26, (uint64_t)v29, &qword_101495A00);
  v40 = *(int *)(v27 + 36);
  v41 = v152;
  *(_QWORD *)&v29[v40] = 0x4059000000000000;
  sub_100010CC4((uint64_t)v26, &qword_101495A00);
  sub_10000C1FC((uint64_t)v29, (uint64_t)v34, &qword_101495A08);
  v42 = &v34[*(int *)(v30 + 36)];
  *(_QWORD *)v42 = 0xD000000000000016;
  *((_QWORD *)v42 + 1) = 0x8000000100E44490;
  v42[16] = 9;
  sub_100010CC4((uint64_t)v29, &qword_101495A08);
  v143 = v38;
  sub_1000207BC((uint64_t)v34, (uint64_t)v38, &qword_101495A10);
  v43 = v41 + *(int *)(_s17ThirdPartyRatingsVMa(0) + 28);
  v44 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.ThirdPartyRatings(0);
  v45 = *(_BYTE *)(v43 + v44[9]) == 1;
  v133 = v16;
  if (v45)
  {
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(2, 1);
    v46._countAndFlagsBits = 40;
    v46._object = (void *)0xE100000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v46);
    v132 = v44;
    v47 = v44[7];
    v140 = v43;
    v154 = *(_QWORD *)(v43 + v47);
    LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v154, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
    v48._countAndFlagsBits = 41;
    v48._object = (void *)0xE100000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v48);
    v49 = LocalizedStringKey.init(stringInterpolation:)(v16);
    v50 = Text.init(_:tableName:bundle:comment:)(v49);
    v54 = *(void **)v41;
    if (!*(_QWORD *)v41)
      goto LABEL_27;
    v55 = v50;
    v56 = v51;
    v57 = v52;
    v58 = v53;
    KeyPath = swift_getKeyPath(&unk_100E26B00);
    v60 = swift_getKeyPath(&unk_100E26B28);
    v61 = v54;
    static Published.subscript.getter(&v154, v61, KeyPath, v60);

    swift_release(KeyPath);
    v62 = swift_release(v60);
    LOBYTE(KeyPath) = v154;
    v63 = static Font.subheadline.getter(v62);
    v64 = swift_getKeyPath(&unk_100E26B78);
    sub_10006BB40(v55, v56, v57 & 1);
    if ((KeyPath & 1) != 0)
    {
      v65 = qword_101490CD8;
      swift_bridgeObjectRetain(v58);
      if (v65 != -1)
        swift_once(&qword_101490CD8, sub_100043F38);
      v66 = &qword_1014D46A0;
    }
    else
    {
      v69 = qword_101490CE0;
      swift_bridgeObjectRetain(v58);
      if (v69 != -1)
        swift_once(&qword_101490CE0, sub_100043F7C);
      v66 = &qword_1014D46A8;
    }
    v70 = *v66;
    swift_retain(*v66);
    v71 = swift_getKeyPath(&unk_100E26100);
    v72 = swift_getKeyPath(&unk_100E26B48);
    v130 = v72;
    v73 = v57 & 1;
    sub_10006BB40(v55, v56, v57 & 1);
    swift_bridgeObjectRetain(v58);
    swift_retain(v64);
    swift_retain(v63);
    swift_retain(v71);
    swift_retain(v70);
    sub_10006B77C(v55, v56, v57 & 1);
    swift_release(v70);
    v131 = v71;
    swift_release(v71);
    swift_release(v63);
    swift_release(v64);
    swift_bridgeObjectRelease(v58);
    sub_10006B77C(v55, v56, v57 & 1);
    swift_bridgeObjectRelease(v58);
    v154 = v55;
    v155 = v56;
    v156 = v57 & 1;
    v157 = v58;
    v158 = v64;
    v159 = v63;
    v160 = v71;
    v161 = v70;
    v162 = v72;
    v163 = 1;
    v164 = 0;
    v165 = 0x4024000000000000;
    v153[0] = v138;
    v153[1] = v139;
    v74 = sub_100008B04(&qword_101495A58);
    v75 = sub_10006D0A8();
    v76 = sub_10006C008();
    v139 = v58;
    v77 = v63;
    v78 = (uint64_t)v137;
    View.accessibilityLabel<A>(_:)(v153, v74, &type metadata for String, v75, v76);
    sub_10006B77C(v55, v56, v73);
    swift_release(v130);
    swift_release(v70);
    swift_release(v131);
    swift_release(v77);
    swift_release(v64);
    swift_bridgeObjectRelease(v139);
    v79 = v136;
    sub_1000207BC(v78, v136, &qword_1014959F0);
    v68 = v150;
    sub_1000207BC(v79, v150, &qword_1014959F0);
    v67 = 0;
    v41 = v152;
    v43 = v140;
    v44 = v132;
  }
  else
  {
    v67 = 1;
    v68 = v150;
  }
  v80 = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v141 + 56))(v68, v67, 1, v142);
  v81 = (uint64_t *)(v43 + v44[8]);
  v82 = v81[1];
  v83 = v151;
  if (!v82)
  {
LABEL_26:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v146 + 56))(v83, v80, 1, v147);
    v119 = (uint64_t)v143;
    v120 = v144;
    sub_10000C1FC((uint64_t)v143, v144, &qword_101495A10);
    v121 = v145;
    sub_10000C1FC(v68, v145, &qword_1014959F8);
    v122 = v148;
    sub_10000C1FC(v83, v148, &qword_1014959E8);
    v123 = v149;
    sub_10000C1FC(v120, v149, &qword_101495A10);
    v124 = sub_100008B04(&qword_101495A20);
    sub_10000C1FC(v121, v123 + *(int *)(v124 + 48), &qword_1014959F8);
    sub_10000C1FC(v122, v123 + *(int *)(v124 + 64), &qword_1014959E8);
    sub_100010CC4(v83, &qword_1014959E8);
    sub_100010CC4(v68, &qword_1014959F8);
    sub_100010CC4(v119, &qword_101495A10);
    sub_100010CC4(v122, &qword_1014959E8);
    sub_100010CC4(v121, &qword_1014959F8);
    return sub_100010CC4(v120, &qword_101495A10);
  }
  v84 = *v81;
  v85 = HIBYTE(v82) & 0xF;
  if ((v82 & 0x2000000000000000) == 0)
    v85 = v84 & 0xFFFFFFFFFFFFLL;
  if (!v85)
  {
    v80 = 1;
    goto LABEL_26;
  }
  v86 = v133;
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 1);
  v87._countAndFlagsBits = 0;
  v87._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v87);
  v88._countAndFlagsBits = v84;
  v88._object = (void *)v82;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v88);
  v89._countAndFlagsBits = 0;
  v89._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v89);
  v90 = LocalizedStringKey.init(stringInterpolation:)(v86);
  v91 = Text.init(_:tableName:bundle:comment:)(v90);
  v95 = *(void **)v41;
  if (*(_QWORD *)v41)
  {
    v96 = v91;
    v97 = v92;
    v98 = v93;
    v99 = v94;
    v100 = swift_getKeyPath(&unk_100E26B00);
    v101 = swift_getKeyPath(&unk_100E26B28);
    v102 = v95;
    static Published.subscript.getter(&v154, v102, v100, v101);

    swift_release(v100);
    v103 = swift_release(v101);
    LOBYTE(v100) = v154;
    v104 = static Font.subheadline.getter(v103);
    v105 = swift_getKeyPath(&unk_100E26B78);
    sub_10006BB40(v96, v97, v98 & 1);
    if ((v100 & 1) != 0)
    {
      v106 = qword_101490CD8;
      swift_bridgeObjectRetain(v99);
      if (v106 != -1)
        swift_once(&qword_101490CD8, sub_100043F38);
      v107 = &qword_1014D46A0;
    }
    else
    {
      v108 = qword_101490CE0;
      swift_bridgeObjectRetain(v99);
      if (v108 != -1)
        swift_once(&qword_101490CE0, sub_100043F7C);
      v107 = &qword_1014D46A8;
    }
    v109 = *v107;
    swift_retain(*v107);
    v110 = swift_getKeyPath(&unk_100E26100);
    v111 = swift_getKeyPath(&unk_100E26B48);
    v142 = v111;
    sub_10006BB40(v96, v97, v98 & 1);
    swift_bridgeObjectRetain(v99);
    swift_retain(v105);
    swift_retain(v104);
    swift_retain(v110);
    swift_retain(v109);
    sub_10006B77C(v96, v97, v98 & 1);
    swift_release(v109);
    v152 = v110;
    swift_release(v110);
    swift_release(v104);
    swift_release(v105);
    swift_bridgeObjectRelease(v99);
    sub_10006B77C(v96, v97, v98 & 1);
    swift_bridgeObjectRelease(v99);
    v154 = v96;
    v155 = v97;
    v156 = v98 & 1;
    v157 = v99;
    v158 = v105;
    v159 = v104;
    v160 = v110;
    v161 = v109;
    v162 = v111;
    v163 = 1;
    v164 = 0;
    v112 = sub_100008B04(&qword_101495A28);
    v113 = sub_10006CF00();
    v114 = v99;
    v115 = v105;
    v116 = v104;
    v117 = (uint64_t)v135;
    View.accessibilityIdentifier(_:)(0xD00000000000001CLL, 0x8000000100E444B0, v112, v113);
    sub_10006B77C(v96, v97, v98 & 1);
    swift_release(v142);
    swift_release(v109);
    swift_release(v152);
    swift_release(v116);
    swift_release(v115);
    swift_bridgeObjectRelease(v114);
    v118 = v134;
    sub_1000207BC(v117, v134, &qword_1014959E0);
    v83 = v151;
    sub_1000207BC(v118, v151, &qword_1014959E0);
    v80 = 0;
    v68 = v150;
    goto LABEL_26;
  }
LABEL_27:
  v126 = *(_QWORD *)(v41 + 8);
  v127 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
  v128 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
  result = EnvironmentObject.error()(0, v126, v127, v128);
  __break(1u);
  return result;
}

uint64_t sub_100052F00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;

  v10 = sub_100008B04(a3);
  __chkstk_darwin(v10);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v24 - v14;
  v16 = sub_100008B04(&qword_101495950);
  __chkstk_darwin(v16);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v24 - v20;
  sub_10000C1FC(a1, (uint64_t)&v24 - v20, &qword_101495950);
  sub_10000C1FC(a2, (uint64_t)v15, a3);
  sub_10000C1FC((uint64_t)v21, (uint64_t)v18, &qword_101495950);
  sub_10000C1FC((uint64_t)v15, (uint64_t)v12, a3);
  sub_10000C1FC((uint64_t)v18, a5, &qword_101495950);
  v22 = sub_100008B04(a4);
  sub_10000C1FC((uint64_t)v12, a5 + *(int *)(v22 + 48), a3);
  sub_100010CC4((uint64_t)v15, a3);
  sub_100010CC4((uint64_t)v21, &qword_101495950);
  sub_100010CC4((uint64_t)v12, a3);
  return sub_100010CC4((uint64_t)v18, &qword_101495950);
}

uint64_t sub_100053098@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t OpaqueTypeConformance2;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  _BYTE v25[232];
  _OWORD v26[13];
  __int128 v27;
  _BYTE v28[231];
  char v29;
  _OWORD v30[15];
  uint64_t v31;

  v2 = v1;
  v23 = a1;
  v3 = type metadata accessor for AccessibilityChildBehavior(0);
  v20 = *(_QWORD *)(v3 - 8);
  v21 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100008B04(&qword_1014958E8);
  v22 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s17FirstPartyRatingsVMa(0);
  v9 = sub_100008B04(&qword_10149D390);
  ScaledMetric.wrappedValue.getter(v30, v9);
  v10 = *(_QWORD *)&v30[0];
  v12 = static VerticalAlignment.center.getter(v11);
  v14 = sub_10005338C(v2, (uint64_t)v26, v13);
  *(_OWORD *)&v28[167] = v26[10];
  *(_OWORD *)&v28[183] = v26[11];
  *(_OWORD *)&v28[199] = v26[12];
  *(_OWORD *)&v28[215] = v27;
  *(_OWORD *)&v28[103] = v26[6];
  *(_OWORD *)&v28[119] = v26[7];
  *(_OWORD *)&v28[135] = v26[8];
  *(_OWORD *)&v28[151] = v26[9];
  *(_OWORD *)&v28[39] = v26[2];
  *(_OWORD *)&v28[55] = v26[3];
  *(_OWORD *)&v28[71] = v26[4];
  *(_OWORD *)&v28[87] = v26[5];
  *(_OWORD *)&v28[7] = v26[0];
  *(_OWORD *)&v28[23] = v26[1];
  *(_OWORD *)&v25[177] = *(_OWORD *)&v28[176];
  *(_OWORD *)&v25[193] = *(_OWORD *)&v28[192];
  *(_OWORD *)&v25[209] = *(_OWORD *)&v28[208];
  *(_OWORD *)&v25[113] = *(_OWORD *)&v28[112];
  *(_OWORD *)&v25[129] = *(_OWORD *)&v28[128];
  *(_OWORD *)&v25[145] = *(_OWORD *)&v28[144];
  *(_OWORD *)&v25[161] = *(_OWORD *)&v28[160];
  *(_OWORD *)&v25[49] = *(_OWORD *)&v28[48];
  *(_OWORD *)&v25[65] = *(_OWORD *)&v28[64];
  *(_OWORD *)&v25[81] = *(_OWORD *)&v28[80];
  *(_OWORD *)&v25[97] = *(_OWORD *)&v28[96];
  *(_OWORD *)&v25[1] = *(_OWORD *)v28;
  *(_OWORD *)&v25[17] = *(_OWORD *)&v28[16];
  v29 = 0;
  *(_QWORD *)&v24 = v12;
  *((_QWORD *)&v24 + 1) = v10;
  v25[0] = 0;
  *(_QWORD *)&v25[224] = *((_QWORD *)&v27 + 1);
  *(_OWORD *)&v25[33] = *(_OWORD *)&v28[32];
  static AccessibilityChildBehavior.combine.getter(v14);
  v15 = sub_100008B04(&qword_1014958F0);
  v16 = sub_100010D70(&qword_1014958F8, &qword_1014958F0, (const char *)&protocol conformance descriptor for HStack<A>);
  View.accessibilityElement(children:)(v5, v15, v16);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v21);
  v30[12] = *(_OWORD *)&v25[176];
  v30[13] = *(_OWORD *)&v25[192];
  v30[14] = *(_OWORD *)&v25[208];
  v31 = *(_QWORD *)&v25[224];
  v30[8] = *(_OWORD *)&v25[112];
  v30[9] = *(_OWORD *)&v25[128];
  v30[10] = *(_OWORD *)&v25[144];
  v30[11] = *(_OWORD *)&v25[160];
  v30[4] = *(_OWORD *)&v25[48];
  v30[5] = *(_OWORD *)&v25[64];
  v30[6] = *(_OWORD *)&v25[80];
  v30[7] = *(_OWORD *)&v25[96];
  v30[0] = v24;
  v30[1] = *(_OWORD *)v25;
  v30[2] = *(_OWORD *)&v25[16];
  v30[3] = *(_OWORD *)&v25[32];
  sub_10006C850((uint64_t)v30);
  *(_QWORD *)&v24 = v15;
  *((_QWORD *)&v24 + 1) = v16;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v24, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  View.accessibility(identifier:)(0xD000000000000016, 0x8000000100E443D0, v6, OpaqueTypeConformance2);
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v8, v6);
}

uint64_t sub_10005338C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t PartyRatingsVMa;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t KeyPath;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  _BYTE v94[7];
  uint64_t v95;
  char v96;
  char v97;
  char v98;
  _BYTE v99[7];
  _BYTE v100[7];
  _DWORD v101[3];

  v61 = static VerticalAlignment.center.getter(a3);
  sub_1000538F8((uint64_t)a1, &v79, v5);
  v6 = v80;
  v60 = v79;
  v7 = v81;
  v65 = v83;
  v66 = v82;
  v63 = v85;
  v64 = v84;
  v69 = v88;
  v70 = v87;
  v68 = v89;
  v8 = v91;
  v98 = 0;
  v62 = v86;
  v97 = v86;
  v67 = v90;
  v96 = v90;
  PartyRatingsVMa = _s17FirstPartyRatingsVMa(0);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v58 = v6;
  v59 = v7;
  if ((*((_BYTE *)a1 + *(int *)(PartyRatingsVMa + 36)) & 1) != 0)
  {
LABEL_11:
    *(_QWORD *)&v71 = v61;
    *((_QWORD *)&v71 + 1) = 0x4010000000000000;
    LOBYTE(v72) = 0;
    *(_DWORD *)((char *)&v72 + 1) = v101[0];
    DWORD1(v72) = *(_DWORD *)((char *)v101 + 3);
    *((_QWORD *)&v72 + 1) = v60;
    *(_QWORD *)&v73 = v6;
    *((_QWORD *)&v73 + 1) = v7;
    *(_QWORD *)&v74 = v66;
    *((_QWORD *)&v74 + 1) = v65;
    *(_QWORD *)&v75 = v64;
    *((_QWORD *)&v75 + 1) = v63;
    LOBYTE(v76) = v62;
    DWORD1(v76) = *(_DWORD *)&v100[3];
    *(_DWORD *)((char *)&v76 + 1) = *(_DWORD *)v100;
    *((_QWORD *)&v76 + 1) = v70;
    *(_QWORD *)&v77 = v69;
    *((_QWORD *)&v77 + 1) = v68;
    LOBYTE(v78) = v67;
    *(_DWORD *)((char *)&v78 + 1) = *(_DWORD *)v99;
    DWORD1(v78) = *(_DWORD *)&v99[3];
    *((_QWORD *)&v78 + 1) = v8;
    v42 = v72;
    *(_OWORD *)a2 = v71;
    *(_OWORD *)(a2 + 16) = v42;
    v43 = v74;
    *(_OWORD *)(a2 + 32) = v73;
    *(_OWORD *)(a2 + 48) = v43;
    v44 = v76;
    *(_OWORD *)(a2 + 64) = v75;
    *(_OWORD *)(a2 + 80) = v44;
    v45 = v78;
    *(_OWORD *)(a2 + 96) = v77;
    *(_OWORD *)(a2 + 112) = v45;
    *(_QWORD *)(a2 + 128) = v10;
    *(_QWORD *)(a2 + 136) = v11;
    *(_QWORD *)(a2 + 144) = v12;
    *(_QWORD *)(a2 + 152) = v13;
    *(_QWORD *)(a2 + 160) = v14;
    *(_QWORD *)(a2 + 168) = v15;
    *(_QWORD *)(a2 + 176) = v16;
    *(_QWORD *)(a2 + 184) = v17;
    *(_QWORD *)(a2 + 192) = v18;
    *(_QWORD *)(a2 + 200) = v19;
    *(_QWORD *)(a2 + 208) = 0;
    *(_QWORD *)(a2 + 216) = v20;
    v46 = v12;
    v47 = v17;
    v48 = v16;
    v49 = v18;
    sub_10006C9E0((uint64_t)&v71);
    sub_10006CA7C(v10, v11, v46, v13, v14, v15, v48, v47, v49);
    sub_10006C964(v10, v11, v46, v13, v14, v15, v48, v47, v49);
    v79 = v61;
    v80 = 0x4010000000000000;
    LOBYTE(v81) = 0;
    *(_DWORD *)((char *)&v81 + 1) = v101[0];
    HIDWORD(v81) = *(_DWORD *)((char *)v101 + 3);
    v82 = v60;
    v83 = v58;
    v84 = v59;
    v85 = v66;
    v86 = v65;
    v87 = v64;
    v88 = v63;
    LOBYTE(v89) = v62;
    *(_DWORD *)((char *)&v89 + 1) = *(_DWORD *)v100;
    HIDWORD(v89) = *(_DWORD *)&v100[3];
    v90 = v70;
    v91 = v69;
    v92 = v68;
    v93 = v67;
    *(_DWORD *)v94 = *(_DWORD *)v99;
    *(_DWORD *)&v94[3] = *(_DWORD *)&v99[3];
    v95 = v8;
    return sub_10006CAF8((uint64_t)&v79);
  }
  v21 = (_QWORD *)((char *)a1 + *(int *)(PartyRatingsVMa + 24));
  v22 = v21[1];
  v79 = *v21;
  v80 = v22;
  v23 = sub_10006C008();
  swift_bridgeObjectRetain(v22);
  v24 = Text.init<A>(_:)(&v79, &type metadata for String, v23);
  v28 = (void *)*a1;
  if (*a1)
  {
    v10 = v24;
    v29 = v25;
    v30 = v27;
    v31 = v26 & 1;
    KeyPath = swift_getKeyPath(&unk_100E26B00);
    v33 = swift_getKeyPath(&unk_100E26B28);
    v34 = v28;
    static Published.subscript.getter(&v79, v34, KeyPath, v33);

    swift_release(KeyPath);
    v35 = swift_release(v33);
    LOBYTE(KeyPath) = v79;
    v57 = static Font.subheadline.getter(v35);
    v55 = v31;
    v56 = swift_getKeyPath(&unk_100E26B78);
    sub_10006BB40(v10, v29, v31);
    v36 = v29;
    if ((KeyPath & 1) != 0)
    {
      v37 = qword_101490CD8;
      v13 = v30;
      swift_bridgeObjectRetain(v30);
      if (v37 != -1)
        swift_once(&qword_101490CD8, sub_100043F38);
      v38 = &qword_1014D46A0;
    }
    else
    {
      v39 = qword_101490CE0;
      v13 = v30;
      swift_bridgeObjectRetain(v30);
      if (v39 != -1)
        swift_once(&qword_101490CE0, sub_100043F7C);
      v38 = &qword_1014D46A8;
    }
    v7 = v59;
    v40 = *v38;
    swift_retain(*v38);
    v41 = swift_getKeyPath(&unk_100E26100);
    v54 = swift_getKeyPath(&unk_100E26B48);
    sub_10006BB40(v10, v36, v31);
    swift_bridgeObjectRetain(v13);
    swift_retain(v56);
    swift_retain(v57);
    swift_retain(v41);
    swift_retain(v40);
    sub_10006B77C(v10, v36, v31);
    swift_release(v40);
    swift_release(v41);
    swift_release(v57);
    swift_release(v56);
    swift_bridgeObjectRelease(v13);
    sub_10006B77C(v10, v36, v31);
    swift_bridgeObjectRelease(v13);
    v18 = v54;
    v16 = v41;
    v17 = v40;
    v14 = v56;
    v15 = v57;
    v12 = v55;
    v20 = 0xBFF0000000000000;
    v11 = v36;
    v19 = 1;
    v6 = v58;
    goto LABEL_11;
  }
  v51 = a1[1];
  v52 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
  v53 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
  result = EnvironmentObject.error()(0, v51, v52, v53);
  __break(1u);
  return result;
}

uint64_t sub_1000538F8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t PartyRatingsVMa;
  uint64_t v16;
  int v17;
  void *v18;
  uint64_t KeyPath;
  uint64_t v20;
  id v21;
  uint64_t *v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  unint64_t v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t *v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t result;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v75 = a2;
  v4 = type metadata accessor for LocalizedStringKey.StringInterpolation(0, a3);
  __chkstk_darwin(v4);
  v6 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008B04(&qword_101495900);
  __chkstk_darwin(v7);
  v9 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = Image.init(systemName:)(0xD000000000000012, 0x8000000100E443F0);
  v11 = enum case for Image.TemplateRenderingMode.template(_:);
  v12 = type metadata accessor for Image.TemplateRenderingMode(0);
  v13 = *(_QWORD *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 104))(v9, v11, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
  v14 = Image.renderingMode(_:)(v9, v10);
  swift_release(v10);
  sub_100010CC4((uint64_t)v9, &qword_101495900);
  PartyRatingsVMa = _s17FirstPartyRatingsVMa(0);
  v16 = PartyRatingsVMa;
  v17 = *(unsigned __int8 *)(a1 + *(int *)(PartyRatingsVMa + 36));
  if (v17 == 1)
  {
    v18 = *(void **)a1;
    if (!*(_QWORD *)a1)
    {
      v69 = *(_QWORD *)(a1 + 8);
      goto LABEL_30;
    }
    KeyPath = swift_getKeyPath(&unk_100E26B00);
    v20 = swift_getKeyPath(&unk_100E26B28);
    v21 = v18;
    static Published.subscript.getter(&v81, v21, KeyPath, v20);

    swift_release(KeyPath);
    swift_release(v20);
    if ((v81 & 1) != 0)
    {
      if (qword_101490CD8 != -1)
        swift_once(&qword_101490CD8, sub_100043F38);
      v22 = &qword_1014D46A0;
    }
    else
    {
      if (qword_101490CE0 != -1)
        swift_once(&qword_101490CE0, sub_100043F7C);
      v22 = &qword_1014D46A8;
    }
  }
  else
  {
    v22 = (uint64_t *)(a1 + *(int *)(PartyRatingsVMa + 28));
  }
  v79 = *v22;
  swift_retain(v79);
  v78 = swift_getKeyPath(&unk_100E26100);
  v23 = static Font.caption.getter();
  static Font.Weight.bold.getter();
  v77 = Font.weight(_:)(v23);
  swift_release(v23);
  v76 = swift_getKeyPath(&unk_100E26B78);
  v80 = v14;
  v73 = v16;
  if (v17)
  {
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(1, 1);
    v24._countAndFlagsBits = 0;
    v24._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v24);
    v81 = *(_QWORD *)(a1 + *(int *)(v16 + 32));
    LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v81, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
    v25 = 37;
    v26 = 0xE100000000000000;
  }
  else
  {
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(2, 1);
    v27._countAndFlagsBits = 0;
    v27._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v27);
    v81 = *(_QWORD *)(a1 + *(int *)(v16 + 32));
    LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v81, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
    v25 = 9504;
    v26 = 0xE200000000000000;
  }
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(*(Swift::String *)&v25);
  v28 = LocalizedStringKey.init(stringInterpolation:)(v6);
  v29 = Text.init(_:tableName:bundle:comment:)(v28);
  v31 = v30;
  v33 = v32;
  v35 = v34;
  v36 = static Font.subheadline.getter(v29);
  v37 = a1;
  if (v17)
    static Font.Weight.regular.getter();
  else
    static Font.Weight.bold.getter();
  v38 = Font.weight(_:)(v36);
  swift_release(v36);
  v39 = v33 & 1;
  v40 = Text.font(_:)(v38, v29, v31, v33 & 1, v35);
  v42 = v41;
  v74 = v43;
  v45 = v44;
  swift_release(v38);
  sub_10006B77C(v29, v31, v39);
  swift_bridgeObjectRelease(v35);
  if (!v17)
  {
    v50 = (uint64_t *)(v37 + *(int *)(v73 + 28));
LABEL_27:
    v51 = *v50;
    swift_retain(*v50);
    v52 = v74 & 1;
    v54 = Text.foregroundColor(_:)(v53, v40, v42, v74 & 1, v45);
    v56 = v55;
    v58 = v57;
    v60 = v59;
    swift_release(v51);
    v58 &= 1u;
    sub_10006B77C(v40, v42, v52);
    swift_bridgeObjectRelease(v45);
    v61 = swift_getKeyPath(&unk_100E26B48);
    v63 = v79;
    v62 = v80;
    v64 = v75;
    v65 = v76;
    v67 = v77;
    v66 = v78;
    *v75 = v80;
    v64[1] = v66;
    v64[2] = v63;
    v64[3] = v65;
    v64[4] = v67;
    v64[5] = v54;
    v64[6] = v56;
    *((_BYTE *)v64 + 56) = v58;
    v64[8] = v60;
    v64[9] = v61;
    v64[10] = 1;
    *((_BYTE *)v64 + 88) = 0;
    v64[12] = 0x3FF0000000000000;
    swift_retain(v62);
    swift_retain(v66);
    swift_retain(v63);
    swift_retain(v65);
    swift_retain(v67);
    sub_10006BB40(v54, v56, v58);
    swift_bridgeObjectRetain(v60);
    swift_retain(v61);
    sub_10006B77C(v54, v56, v58);
    swift_release(v67);
    swift_release(v65);
    swift_release(v63);
    swift_release(v66);
    swift_release(v62);
    swift_release(v61);
    return swift_bridgeObjectRelease(v60);
  }
  v46 = *(void **)v37;
  if (*(_QWORD *)v37)
  {
    v47 = swift_getKeyPath(&unk_100E26B00);
    v48 = swift_getKeyPath(&unk_100E26B28);
    v49 = v46;
    static Published.subscript.getter(&v81, v49, v47, v48);

    swift_release(v47);
    swift_release(v48);
    if ((v81 & 1) != 0)
    {
      if (qword_101490CD8 != -1)
        swift_once(&qword_101490CD8, sub_100043F38);
      v50 = &qword_1014D46A0;
    }
    else
    {
      if (qword_101490CE0 != -1)
        swift_once(&qword_101490CE0, sub_100043F7C);
      v50 = &qword_1014D46A8;
    }
    goto LABEL_27;
  }
  v69 = *(_QWORD *)(v37 + 8);
LABEL_30:
  v70 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
  v71 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
  result = EnvironmentObject.error()(0, v69, v70, v71);
  __break(1u);
  return result;
}

uint64_t sub_100053F40@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t OpaqueTypeConformance2;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[145];
  _OWORD v44[6];
  _OWORD v45[2];
  _OWORD v46[8];
  char v47;
  __int128 v48;
  _BYTE v49[129];

  v42 = a1;
  v41 = sub_100008B04(&qword_101495A80);
  __chkstk_darwin(v41);
  v3 = (char *)&v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_100008B04(&qword_101495A88);
  __chkstk_darwin(v39);
  v40 = (uint64_t)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AccessibilityChildBehavior(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100008B04(&qword_101495A90);
  v36 = *(_QWORD *)(v9 - 8);
  v37 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_100008B04(&qword_101495A98);
  __chkstk_darwin(v38);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v35 - v16;
  if ((*(_BYTE *)(v1 + 48) & 1) != 0)
  {
    v35 = static VerticalAlignment.center.getter(v15);
    v26 = sub_10005444C(v1, (uint64_t)v44);
    *(_OWORD *)((char *)&v46[4] + 7) = v44[4];
    *(_OWORD *)((char *)&v46[5] + 7) = v44[5];
    *(_OWORD *)((char *)&v46[6] + 7) = v45[0];
    v46[7] = *(_OWORD *)((char *)v45 + 9);
    *(_OWORD *)((char *)v46 + 7) = v44[0];
    *(_OWORD *)((char *)&v46[1] + 7) = v44[1];
    *(_OWORD *)((char *)&v46[2] + 7) = v44[2];
    *(_OWORD *)((char *)&v46[3] + 7) = v44[3];
    *(_OWORD *)&v43[81] = v46[4];
    *(_OWORD *)&v43[97] = v46[5];
    *(_OWORD *)&v43[113] = v46[6];
    *(_OWORD *)&v43[129] = *(_OWORD *)((char *)v45 + 9);
    *(_OWORD *)&v43[17] = v46[0];
    *(_OWORD *)&v43[33] = v46[1];
    *(_OWORD *)&v43[49] = v46[2];
    v47 = 0;
    *(_QWORD *)v43 = v35;
    *(_QWORD *)&v43[8] = 0x4010000000000000;
    v43[16] = 0;
    *(_OWORD *)&v43[65] = v46[3];
    static AccessibilityChildBehavior.combine.getter(v26);
    v27 = sub_100008B04(&qword_101495AA0);
    v28 = sub_100010D70(&qword_101495AA8, &qword_101495AA0, (const char *)&protocol conformance descriptor for HStack<A>);
    View.accessibilityElement(children:)(v8, v27, v28);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_OWORD *)&v49[80] = *(_OWORD *)&v43[96];
    *(_OWORD *)&v49[96] = *(_OWORD *)&v43[112];
    *(_OWORD *)&v49[112] = *(_OWORD *)&v43[128];
    v49[128] = v43[144];
    *(_OWORD *)&v49[16] = *(_OWORD *)&v43[32];
    *(_OWORD *)&v49[32] = *(_OWORD *)&v43[48];
    *(_OWORD *)&v49[48] = *(_OWORD *)&v43[64];
    *(_OWORD *)&v49[64] = *(_OWORD *)&v43[80];
    v48 = *(_OWORD *)v43;
    *(_OWORD *)v49 = *(_OWORD *)&v43[16];
    sub_10006D364((uint64_t)&v48);
    *(_QWORD *)v43 = v27;
    *(_QWORD *)&v43[8] = v28;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v43, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    v30 = v37;
    View.accessibility(identifier:)(0xD000000000000016, 0x8000000100E26200, v37, OpaqueTypeConformance2);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v11, v30);
    v21 = &qword_101495A98;
    sub_1000207BC((uint64_t)v13, (uint64_t)v17, &qword_101495A98);
    v31 = v40;
    sub_10000C1FC((uint64_t)v17, v40, &qword_101495A98);
    swift_storeEnumTagMultiPayload(v31, v39, 0);
    v32 = sub_10006D204(&qword_101495AB0, &qword_101495A98, &qword_101495AA0, &qword_101495AA8);
    v33 = sub_10006D2C8();
    _ConditionalContent<>.init(storage:)(v31, v38, v41, v32, v33);
    v25 = (uint64_t)v17;
  }
  else
  {
    v18 = static VerticalAlignment.center.getter(v15);
    sub_100054948(v1, (uint64_t)v46);
    *(_OWORD *)&v43[71] = v46[4];
    *(_OWORD *)&v43[87] = v46[5];
    *(_OWORD *)&v43[103] = v46[6];
    *(_OWORD *)&v43[112] = *(_OWORD *)((char *)&v46[6] + 9);
    *(_OWORD *)&v43[7] = v46[0];
    *(_OWORD *)&v43[23] = v46[1];
    *(_OWORD *)&v43[39] = v46[2];
    *(_OWORD *)&v43[55] = v46[3];
    *(_OWORD *)&v49[65] = *(_OWORD *)&v43[64];
    *(_OWORD *)&v49[81] = *(_OWORD *)&v43[80];
    *(_OWORD *)&v49[97] = *(_OWORD *)&v43[96];
    *(_OWORD *)&v49[113] = *(_OWORD *)((char *)&v46[6] + 9);
    *(_OWORD *)&v49[1] = *(_OWORD *)v43;
    *(_OWORD *)&v49[17] = *(_OWORD *)&v43[16];
    *(_OWORD *)&v49[33] = *(_OWORD *)&v43[32];
    LOBYTE(v44[0]) = 0;
    *(_QWORD *)&v48 = v18;
    *((_QWORD *)&v48 + 1) = 0x4010000000000000;
    v49[0] = 0;
    *(_OWORD *)&v49[49] = *(_OWORD *)&v43[48];
    v19 = sub_100008B04(&qword_101495AA0);
    v20 = sub_100010D70(&qword_101495AA8, &qword_101495AA0, (const char *)&protocol conformance descriptor for HStack<A>);
    View.accessibility(identifier:)(0xD000000000000016, 0x8000000100E26200, v19, v20);
    sub_10006D12C((uint64_t *)v46);
    v21 = &qword_101495A80;
    v22 = v40;
    sub_10000C1FC((uint64_t)v3, v40, &qword_101495A80);
    swift_storeEnumTagMultiPayload(v22, v39, 1);
    v23 = sub_10006D204(&qword_101495AB0, &qword_101495A98, &qword_101495AA0, &qword_101495AA8);
    v24 = sub_10006D2C8();
    _ConditionalContent<>.init(storage:)(v22, v38, v41, v23, v24);
    v25 = (uint64_t)v3;
  }
  return sub_100010CC4(v25, v21);
}

uint64_t sub_10005444C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t KeyPath;
  uint64_t v70;
  char v71;
  char v72;
  _QWORD v73[2];

  v4 = sub_100008B04(&qword_101495900);
  __chkstk_darwin(v4);
  v6 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = Image.init(systemName:)(0xD000000000000012, 0x8000000100E443F0);
  v8 = enum case for Image.TemplateRenderingMode.template(_:);
  v9 = type metadata accessor for Image.TemplateRenderingMode(0);
  v10 = *(_QWORD *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 104))(v6, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v9);
  v67 = Image.renderingMode(_:)(v6, v7);
  swift_release(v7);
  v11 = sub_100010CC4((uint64_t)v6, &qword_101495900);
  v12 = static Color.primary.getter(v11);
  KeyPath = swift_getKeyPath(&unk_100E26100);
  v13 = static Font.caption.getter();
  static Font.Weight.bold.getter();
  v65 = Font.weight(_:)(v13);
  swift_release(v13);
  v68 = swift_getKeyPath(&unk_100E26B78);
  v14 = *(_QWORD *)(a1 + 24);
  v73[0] = *(_QWORD *)(a1 + 16);
  v73[1] = v14;
  v15 = sub_10006C008();
  swift_bridgeObjectRetain(v14);
  v16 = Text.init<A>(_:)(v73, &type metadata for String, v15);
  v20 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    v21 = v16;
    v22 = v17;
    v23 = v18;
    v24 = v19;
    v70 = v12;
    v25 = swift_getKeyPath(&unk_100E26B00);
    v26 = swift_getKeyPath(&unk_100E26B28);
    v27 = v20;
    static Published.subscript.getter(v73, v27, v25, v26);

    swift_release(v25);
    v28 = swift_release(v26);
    LOBYTE(v26) = v73[0];
    v64 = static Font.subheadline.getter(v28);
    v29 = swift_getKeyPath(&unk_100E26B78);
    sub_10006BB40(v21, v22, v23 & 1);
    v30 = v22;
    if ((v26 & 1) != 0)
    {
      v31 = qword_101490CD8;
      swift_bridgeObjectRetain(v24);
      if (v31 != -1)
        swift_once(&qword_101490CD8, sub_100043F38);
      v32 = &qword_1014D46A0;
    }
    else
    {
      v33 = qword_101490CE0;
      swift_bridgeObjectRetain(v24);
      if (v33 != -1)
        swift_once(&qword_101490CE0, sub_100043F7C);
      v32 = &qword_1014D46A8;
    }
    v34 = *v32;
    swift_retain(*v32);
    v35 = swift_getKeyPath(&unk_100E26100);
    v66 = swift_getKeyPath(&unk_100E26B48);
    v36 = v23 & 1;
    sub_10006BB40(v21, v30, v23 & 1);
    v37 = v24;
    swift_bridgeObjectRetain(v24);
    swift_retain(v29);
    v38 = v64;
    swift_retain(v64);
    swift_retain(v35);
    v62 = v34;
    swift_retain(v34);
    sub_10006B77C(v21, v30, v36);
    swift_release(v34);
    v39 = v35;
    swift_release(v35);
    swift_release(v38);
    v61 = v29;
    swift_release(v29);
    swift_bridgeObjectRelease(v24);
    sub_10006B77C(v21, v30, v36);
    swift_bridgeObjectRelease(v24);
    v72 = v36;
    v71 = 0;
    *(_DWORD *)(a2 + 57) = v73[0];
    *(_DWORD *)(a2 + 60) = *(_DWORD *)((char *)v73 + 3);
    v40 = v68;
    v41 = v67;
    v42 = KeyPath;
    *(_QWORD *)a2 = v67;
    *(_QWORD *)(a2 + 8) = v42;
    v43 = v30;
    v60 = v30;
    v44 = v38;
    v45 = v70;
    *(_QWORD *)(a2 + 16) = v70;
    *(_QWORD *)(a2 + 24) = v40;
    v47 = v65;
    v46 = v66;
    *(_QWORD *)(a2 + 32) = v65;
    *(_QWORD *)(a2 + 40) = v21;
    *(_QWORD *)(a2 + 48) = v43;
    *(_BYTE *)(a2 + 56) = v36;
    LOBYTE(v38) = v36;
    *(_QWORD *)(a2 + 64) = v37;
    *(_QWORD *)(a2 + 72) = v29;
    v48 = v37;
    v63 = v37;
    *(_QWORD *)(a2 + 80) = v44;
    *(_QWORD *)(a2 + 88) = v39;
    v49 = v44;
    v50 = v62;
    *(_QWORD *)(a2 + 96) = v62;
    *(_QWORD *)(a2 + 104) = v46;
    *(_QWORD *)(a2 + 112) = 1;
    *(_BYTE *)(a2 + 120) = 0;
    swift_retain(v41);
    swift_retain(v42);
    swift_retain(v45);
    v51 = v68;
    swift_retain(v68);
    swift_retain(v47);
    v52 = v60;
    sub_10006BB40(v21, v60, v38);
    swift_bridgeObjectRetain(v48);
    v53 = v61;
    swift_retain(v61);
    swift_retain(v49);
    swift_retain(v39);
    swift_retain(v50);
    v54 = v66;
    swift_retain(v66);
    sub_10006B77C(v21, v52, v38);
    swift_release(v47);
    swift_release(v51);
    swift_release(v70);
    swift_release(KeyPath);
    swift_release(v67);
    swift_release(v54);
    swift_release(v50);
    swift_release(v39);
    swift_release(v49);
    swift_release(v53);
    return swift_bridgeObjectRelease(v63);
  }
  else
  {
    v56 = *(_QWORD *)(a1 + 8);
    v57 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
    v58 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
    result = EnvironmentObject.error()(0, v56, v57, v58);
    __break(1u);
  }
  return result;
}

uint64_t sub_100054948@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t result;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t KeyPath;
  uint64_t v69;
  char v70;
  char v71;
  _QWORD v72[2];

  v4 = sub_100008B04(&qword_101495900);
  __chkstk_darwin(v4);
  v6 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = Image.init(systemName:)(0xD000000000000014, 0x8000000100E444F0);
  v8 = enum case for Image.TemplateRenderingMode.template(_:);
  v9 = type metadata accessor for Image.TemplateRenderingMode(0);
  v10 = *(_QWORD *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 104))(v6, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v9);
  v66 = Image.renderingMode(_:)(v6, v7);
  swift_release(v7);
  sub_100010CC4((uint64_t)v6, &qword_101495900);
  v11 = objc_msgSend((id)objc_opt_self(UIColor), "_maps_systemGrayColor");
  v12 = Color.init(uiColor:)(v11);
  KeyPath = swift_getKeyPath(&unk_100E26100);
  v64 = static Font.caption.getter();
  v67 = swift_getKeyPath(&unk_100E26B78);
  v13 = *(_QWORD *)(a1 + 40);
  v72[0] = *(_QWORD *)(a1 + 32);
  v72[1] = v13;
  v14 = sub_10006C008();
  swift_bridgeObjectRetain(v13);
  v15 = Text.init<A>(_:)(v72, &type metadata for String, v14);
  v19 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    v20 = v15;
    v21 = v16;
    v22 = v17;
    v23 = v18;
    v69 = v12;
    v24 = swift_getKeyPath(&unk_100E26B00);
    v25 = swift_getKeyPath(&unk_100E26B28);
    v26 = v19;
    static Published.subscript.getter(v72, v26, v24, v25);

    swift_release(v24);
    v27 = swift_release(v25);
    LOBYTE(v25) = v72[0];
    v63 = static Font.subheadline.getter(v27);
    v28 = swift_getKeyPath(&unk_100E26B78);
    sub_10006BB40(v20, v21, v22 & 1);
    v29 = v21;
    if ((v25 & 1) != 0)
    {
      v30 = qword_101490CD8;
      swift_bridgeObjectRetain(v23);
      if (v30 != -1)
        swift_once(&qword_101490CD8, sub_100043F38);
      v31 = &qword_1014D46A0;
    }
    else
    {
      v32 = qword_101490CE0;
      swift_bridgeObjectRetain(v23);
      if (v32 != -1)
        swift_once(&qword_101490CE0, sub_100043F7C);
      v31 = &qword_1014D46A8;
    }
    v33 = *v31;
    swift_retain(*v31);
    v34 = swift_getKeyPath(&unk_100E26100);
    v65 = swift_getKeyPath(&unk_100E26B48);
    v35 = v22 & 1;
    sub_10006BB40(v20, v29, v22 & 1);
    v36 = v23;
    swift_bridgeObjectRetain(v23);
    swift_retain(v28);
    v37 = v63;
    swift_retain(v63);
    swift_retain(v34);
    v61 = v33;
    swift_retain(v33);
    sub_10006B77C(v20, v29, v35);
    swift_release(v33);
    v38 = v34;
    swift_release(v34);
    swift_release(v37);
    v60 = v28;
    swift_release(v28);
    swift_bridgeObjectRelease(v23);
    sub_10006B77C(v20, v29, v35);
    swift_bridgeObjectRelease(v23);
    v71 = v35;
    v70 = 0;
    *(_DWORD *)(a2 + 57) = v72[0];
    *(_DWORD *)(a2 + 60) = *(_DWORD *)((char *)v72 + 3);
    v39 = v67;
    v40 = v66;
    v41 = KeyPath;
    *(_QWORD *)a2 = v66;
    *(_QWORD *)(a2 + 8) = v41;
    v42 = v29;
    v59 = v29;
    v43 = v37;
    v44 = v69;
    *(_QWORD *)(a2 + 16) = v69;
    *(_QWORD *)(a2 + 24) = v39;
    v46 = v64;
    v45 = v65;
    *(_QWORD *)(a2 + 32) = v64;
    *(_QWORD *)(a2 + 40) = v20;
    *(_QWORD *)(a2 + 48) = v42;
    *(_BYTE *)(a2 + 56) = v35;
    LOBYTE(v37) = v35;
    *(_QWORD *)(a2 + 64) = v36;
    *(_QWORD *)(a2 + 72) = v28;
    v47 = v36;
    v62 = v36;
    *(_QWORD *)(a2 + 80) = v43;
    *(_QWORD *)(a2 + 88) = v38;
    v48 = v43;
    v49 = v61;
    *(_QWORD *)(a2 + 96) = v61;
    *(_QWORD *)(a2 + 104) = v45;
    *(_QWORD *)(a2 + 112) = 1;
    *(_BYTE *)(a2 + 120) = 0;
    swift_retain(v40);
    swift_retain(v41);
    swift_retain(v44);
    v50 = v67;
    swift_retain(v67);
    swift_retain(v46);
    v51 = v59;
    sub_10006BB40(v20, v59, v37);
    swift_bridgeObjectRetain(v47);
    v52 = v60;
    swift_retain(v60);
    swift_retain(v48);
    swift_retain(v38);
    swift_retain(v49);
    v53 = v65;
    swift_retain(v65);
    sub_10006B77C(v20, v51, v37);
    swift_release(v46);
    swift_release(v50);
    swift_release(v69);
    swift_release(KeyPath);
    swift_release(v66);
    swift_release(v53);
    swift_release(v49);
    swift_release(v38);
    swift_release(v48);
    swift_release(v52);
    return swift_bridgeObjectRelease(v62);
  }
  else
  {
    v55 = *(_QWORD *)(a1 + 8);
    v56 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
    v57 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
    result = EnvironmentObject.error()(0, v55, v56, v57);
    __break(1u);
  }
  return result;
}

uint64_t sub_100054E4C@<X0>(uint64_t a1@<X8>)
{
  return sub_100053F40(a1);
}

uint64_t sub_100054E8C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t KeyPath;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  void *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  Swift::String v102;
  Swift::String v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  _OWORD *v109;
  __int128 v110;
  __int128 v111;
  void *v112;
  __n128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  Swift::String v122;
  Swift::String v123;
  void *v124;
  Swift::String v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  __int128 v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t result;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  id v152;
  int v153;
  char *v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _BYTE *v171;
  uint64_t v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int16 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int16 v194;
  _OWORD v195[10];
  __int16 v196;
  __int128 v197;

  v170 = a1;
  v2 = (int *)_s5LabelVMa(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v148 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = sub_100008B04(&qword_101495AC0);
  __chkstk_darwin(v164);
  v163 = (uint64_t)&v148 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = sub_100008B04(&qword_101495AC8);
  __chkstk_darwin(v169);
  v162 = (uint64_t)&v148 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v165 = (char *)&v148 - v8;
  v167 = sub_100008B04(&qword_101495AD0);
  v9 = __chkstk_darwin(v167);
  v168 = (uint64_t)&v148 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AccessibilityTraits(0, v9);
  v157 = *(_QWORD *)(v11 - 8);
  v158 = v11;
  __chkstk_darwin(v11);
  v156 = (char *)&v148 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = sub_100008B04(&qword_101495AD8);
  __chkstk_darwin(v172);
  v154 = (char *)&v148 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v155 = (char *)&v148 - v15;
  __chkstk_darwin(v16);
  v160 = (char *)&v148 - v17;
  __chkstk_darwin(v18);
  v159 = (char *)&v148 - v19;
  __chkstk_darwin(v20);
  v161 = (uint64_t)&v148 - v21;
  v22 = type metadata accessor for AttributedString(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v166 = (uint64_t)&v148 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for LocalizedStringKey.StringInterpolation(0, v24);
  __chkstk_darwin(v26);
  v28 = (char *)&v148 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v171 = (_BYTE *)v1;
  v197 = *(_OWORD *)(v1 + 40);
  v29 = *((_QWORD *)&v197 + 1);
  KeyPath = swift_getKeyPath(&unk_100E26C18);
  v31 = swift_getKeyPath(&unk_100E26C40);
  swift_retain(v29);
  static Published.subscript.getter(v195, v32, KeyPath, v31);
  swift_release(KeyPath);
  swift_release(v31);
  sub_10006E910((uint64_t)&v197);
  v33 = *(void **)&v195[0];
  if (!*(_QWORD *)&v195[0])
    goto LABEL_7;
  v34 = objc_msgSend(*(id *)&v195[0], "name");
  if (!v34)
  {

LABEL_7:
    v57 = v166;
    AttributedString.init(stringLiteral:)(0, 0xE000000000000000);
    v58 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
    v59 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
    v60 = EnvironmentObject.init()(v58, v59);
    v62 = v61;
    v63 = swift_getKeyPath(&unk_100E26008);
    v64 = (uint64_t *)&v4[v2[12]];
    *v64 = v63;
    v65 = sub_100008B04(&qword_101493188);
    swift_storeEnumTagMultiPayload(v64, v65, 0);
    v66 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 32))(v4, v57, v22);
    v67 = &v4[v2[5]];
    *(_QWORD *)v67 = 0;
    *((_QWORD *)v67 + 1) = 0;
    *(_QWORD *)&v4[v2[6]] = 0;
    *(_QWORD *)&v4[v2[7]] = 0;
    *(_QWORD *)&v4[v2[8]] = 0;
    *(_QWORD *)&v4[v2[9]] = 0;
    v68 = &v4[v2[10]];
    *(_QWORD *)v68 = 1;
    v68[8] = 0;
    v69 = (uint64_t *)&v4[v2[11]];
    *v69 = v60;
    v69[1] = v62;
    v70 = static Color.clear.getter(v66);
    v71 = swift_getKeyPath(&unk_100E26100);
    v72 = v163;
    sub_1000202AC((uint64_t)v4, v163, _s5LabelVMa);
    v73 = v164;
    v74 = (uint64_t *)(v72 + *(int *)(v164 + 36));
    *v74 = v71;
    v74[1] = v70;
    sub_1000202F0((uint64_t)v4, _s5LabelVMa);
    v75 = sub_10006D444();
    v76 = v162;
    View.accessibilityHidden(_:)(1, v73, v75);
    sub_100010CC4(v72, &qword_101495AC0);
    v77 = (uint64_t)v165;
    sub_1000207BC(v76, (uint64_t)v165, &qword_101495AC8);
    v78 = v168;
    sub_10000C1FC(v77, v168, &qword_101495AC8);
    swift_storeEnumTagMultiPayload(v78, v167, 1);
    v79 = sub_10006D4E0();
    v80 = sub_10006D57C();
    _ConditionalContent<>.init(storage:)(v78, v172, v169, v79, v80);
    v81 = v77;
    v82 = &qword_101495AC8;
    return sub_100010CC4(v81, v82);
  }
  v35 = v34;
  v152 = v33;
  v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
  v38 = v37;

  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 1);
  v39._countAndFlagsBits = 0;
  v39._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v39);
  v162 = v36;
  v40._countAndFlagsBits = v36;
  v165 = v38;
  v40._object = v38;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v40);
  v41._countAndFlagsBits = 0;
  v41._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v41);
  v42 = LocalizedStringKey.init(stringInterpolation:)(v28);
  v43 = Text.init(_:tableName:bundle:comment:)(v42);
  v47 = *(void **)v171;
  if (*(_QWORD *)v171)
  {
    v48 = v43;
    v49 = v44;
    v50 = v45;
    v51 = v46;
    v52 = swift_getKeyPath(&unk_100E26B00);
    v53 = swift_getKeyPath(&unk_100E26B28);
    v54 = v47;
    static Published.subscript.getter(v195, v54, v52, v53);

    swift_release(v52);
    v55 = swift_release(v53);
    if ((v195[0] & 1) != 0)
      v56 = static Color.white.getter(v55);
    else
      v56 = static Color.blue.getter(v55);
    v83 = v56;
    v84 = v50 & 1;
    v163 = Text.foregroundColor(_:)(v56, v48, v49, v50 & 1, v51);
    v164 = v85;
    v87 = v86;
    v89 = v88;
    swift_release(v83);
    sub_10006B77C(v48, v49, v84);
    swift_bridgeObjectRelease(v51);
    v90 = v171[88];
    v91 = (uint64_t)v165;
    v153 = v87;
    v151 = v89;
    if ((v90 & 1) != 0 && *((_BYTE *)v54 + OBJC_IVAR____TtC4Maps29PlaceSummaryViewModelTemplate_useCase) == 2)
    {
      v92 = swift_getKeyPath(&unk_100E26B00);
      v93 = swift_getKeyPath(&unk_100E26B28);
      v94 = v54;
      static Published.subscript.getter(v195, v94, v92, v93);

      swift_release(v92);
      swift_release(v93);
      v95 = v166;
      sub_100055AF0(v162, v91, LOBYTE(v195[0]), v166);
      v97 = Text.init(_:)(v95);
      v99 = v98;
      v101 = v100;
    }
    else
    {
      LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(9, 1);
      v102._countAndFlagsBits = 0x6E6F697461636F4CLL;
      v102._object = (void *)0xE900000000000020;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v102);
      LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v163, v164, v87 & 1, v89);
      v103._countAndFlagsBits = 0;
      v103._object = (void *)0xE000000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v103);
      v104 = LocalizedStringKey.init(stringInterpolation:)(v28);
      v97 = Text.init(_:tableName:bundle:comment:)(v104);
      v101 = v105;
      v99 = v106;
    }
    v148 = v101;
    v149 = v97;
    v150 = v99;
    v107 = v96 & 1;
    v108 = swift_allocObject(&unk_10119E2C0, 120, 7);
    v109 = v171;
    v110 = *((_OWORD *)v171 + 3);
    *(_OWORD *)(v108 + 48) = *((_OWORD *)v171 + 2);
    *(_OWORD *)(v108 + 64) = v110;
    *(_OWORD *)(v108 + 80) = v109[4];
    *(_OWORD *)(v108 + 89) = *(_OWORD *)((char *)v109 + 73);
    v111 = v109[1];
    *(_OWORD *)(v108 + 16) = *v109;
    *(_OWORD *)(v108 + 32) = v111;
    v112 = v152;
    *(_QWORD *)(v108 + 112) = v152;
    *(_QWORD *)&v184 = sub_100070E04;
    *((_QWORD *)&v184 + 1) = v108;
    sub_10006D604((uint64_t)v109);
    v152 = v112;
    LODWORD(v166) = v107;
    sub_10006BB40(v97, v101, v107);
    swift_bridgeObjectRetain(v99);
    v113 = swift_retain(v108);
    sub_100055F9C((uint64_t)v109, v97, v101, v107, v99, (uint64_t)&v185, v113);
    sub_10006B77C(v97, v101, v107);
    swift_release(v108);
    swift_bridgeObjectRelease(v99);
    v195[8] = v192;
    v195[9] = v193;
    v195[4] = v188;
    v195[5] = v189;
    v195[6] = v190;
    v195[7] = v191;
    v195[0] = v184;
    v195[1] = v185;
    v195[2] = v186;
    v195[3] = v187;
    v181 = v192;
    v182 = v193;
    v177 = v188;
    v178 = v189;
    v179 = v190;
    v180 = v191;
    v173 = v184;
    v174 = v185;
    v196 = v194;
    v183 = v194;
    v175 = v186;
    v176 = v187;
    v114 = sub_100008B04(&qword_101495AF8);
    v115 = sub_100010D70(&qword_101495AF0, &qword_101495AF8, "=u7");
    v116 = (uint64_t)v154;
    View.accessibility(identifier:)(0xD000000000000017, 0x8000000100E44510, v114, v115);
    sub_10006D680((uint64_t)v195);
    v117 = (uint64_t)v155;
    v118 = v172;
    ModifiedContent<>.accessibilityAutomationType(_:)(9, v172);
    v119 = sub_100010CC4(v116, &qword_101495AD8);
    v120 = v156;
    static AccessibilityTraits.isButton.getter(v119);
    v121 = (uint64_t)v160;
    ModifiedContent<>.accessibilityRemoveTraits(_:)(v120, v118);
    (*(void (**)(char *, uint64_t))(v157 + 8))(v120, v158);
    sub_100010CC4(v117, &qword_101495AD8);
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(6, 1);
    v122._countAndFlagsBits = 0x206F74206F47;
    v122._object = (void *)0xE600000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v122);
    v123._countAndFlagsBits = v162;
    v124 = v165;
    v123._object = v165;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v123);
    swift_bridgeObjectRelease(v124);
    v125._countAndFlagsBits = 0;
    v125._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v125);
    v126 = LocalizedStringKey.init(stringInterpolation:)(v28);
    v127 = Text.init(_:tableName:bundle:comment:)(v126);
    v129 = v128;
    v131 = v130;
    v133 = v132 & 1;
    v134 = swift_allocObject(&unk_10119E2E8, 120, 7);
    v135 = v109[3];
    *(_OWORD *)(v134 + 48) = v109[2];
    *(_OWORD *)(v134 + 64) = v135;
    *(_OWORD *)(v134 + 80) = v109[4];
    *(_OWORD *)(v134 + 89) = *(_OWORD *)((char *)v109 + 73);
    v136 = v109[1];
    *(_OWORD *)(v134 + 16) = *v109;
    *(_OWORD *)(v134 + 32) = v136;
    v137 = v152;
    *(_QWORD *)(v134 + 112) = v152;
    sub_10006D604((uint64_t)v109);
    v171 = v137;
    v138 = (uint64_t)v159;
    v139 = v172;
    ModifiedContent<>.accessibilityAction(named:_:)(v127, v129, v133, v131, sub_10006D8C0, v134, v172);
    swift_release(v134);
    sub_10006B77C(v127, v129, v133);
    swift_bridgeObjectRelease(v131);
    sub_100010CC4(v121, &qword_101495AD8);
    v140 = v161;
    sub_1000207BC(v138, v161, &qword_101495AD8);
    v141 = v168;
    sub_10000C1FC(v140, v168, &qword_101495AD8);
    swift_storeEnumTagMultiPayload(v141, v167, 0);
    v142 = sub_10006D4E0();
    v143 = sub_10006D57C();
    _ConditionalContent<>.init(storage:)(v141, v139, v169, v142, v143);
    sub_10006B77C(v163, v164, v153 & 1);
    swift_bridgeObjectRelease(v151);
    sub_10006B77C(v149, v148, v166);

    swift_bridgeObjectRelease(v150);
    v81 = v140;
    v82 = &qword_101495AD8;
    return sub_100010CC4(v81, v82);
  }
  v145 = *((_QWORD *)v171 + 1);
  v146 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
  v147 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
  result = EnvironmentObject.error()(0, v145, v146, v147);
  __break(1u);
  return result;
}

uint64_t sub_100055AF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t KeyPath;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t *, _QWORD);
  unint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  Swift::String v62;

  v53 = a3;
  v58 = a4;
  v6 = sub_100008B04(&qword_1014958A0);
  __chkstk_darwin(v6);
  v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for AttributedString(0);
  v57 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008B04(&qword_1014958A8);
  __chkstk_darwin(v11);
  v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100008B04(&qword_1014958B0);
  v55 = *(_QWORD *)(v14 - 8);
  v56 = v14;
  __chkstk_darwin(v14);
  v52 = (uint64_t)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v16);
  v51 = (uint64_t)&v50 - v18;
  v19 = type metadata accessor for AttributeContainer(0, v17);
  __chkstk_darwin(v19);
  v21 = (char *)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101490ED0 != -1)
    swift_once(&qword_101490ED0, sub_10011833C);
  v62._countAndFlagsBits = 0xD000000000000023;
  v62._object = (void *)0x8000000100E44560;
  v22._object = (void *)0x8000000100E44530;
  v22._countAndFlagsBits = 0xD000000000000022;
  v23._countAndFlagsBits = 0x4025206E49;
  v23._object = (void *)0xE500000000000000;
  v24 = NSLocalizedString(_:tableName:bundle:value:comment:)(v22, (Swift::String_optional)0, (NSBundle)qword_1014D4B80, v23, v62);
  v25 = sub_100008B04((uint64_t *)&unk_10149A4F0);
  v26 = swift_allocObject(v25, 72, 7);
  *(_OWORD *)(v26 + 16) = xmmword_100E22F40;
  *(_QWORD *)(v26 + 56) = &type metadata for String;
  *(_QWORD *)(v26 + 64) = sub_10000D8E0();
  *(_QWORD *)(v26 + 32) = a1;
  *(_QWORD *)(v26 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  v27 = static String.localizedStringWithFormat(_:_:)(v24._countAndFlagsBits, v24._object, v26);
  v29 = v28;
  swift_bridgeObjectRelease(v26);
  v30 = swift_bridgeObjectRelease(v24._object);
  AttributeContainer.init()(v30);
  v31 = v58;
  AttributedString.init(_:attributes:)(v27, v29, v21);
  v32 = v57;
  v33 = v54;
  (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v10, v31, v54);
  v59 = a1;
  v60 = a2;
  v34 = type metadata accessor for Locale(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v8, 1, 1, v34);
  v35 = sub_10000BC84(&qword_1014958D0, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString, (uint64_t)&protocol conformance descriptor for AttributedString);
  v36 = sub_10006C008();
  swift_bridgeObjectRetain(a2);
  AttributedStringProtocol.range<A>(of:options:locale:)(&v59, 0, v8, v33, &type metadata for String, v35, v36);
  sub_100010CC4((uint64_t)v8, &qword_1014958A0);
  swift_bridgeObjectRelease(v60);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v33);
  v37 = v56;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v13, 1, v56) == 1)
  {
    v38 = &qword_1014958A8;
    v39 = (uint64_t)v13;
  }
  else
  {
    v40 = v51;
    sub_1000207BC((uint64_t)v13, v51, &qword_1014958B0);
    v41 = v52;
    sub_10000C1FC(v40, v52, &qword_1014958B0);
    KeyPath = swift_getKeyPath(&unk_100E26BA8);
    __chkstk_darwin(KeyPath);
    v43 = swift_getKeyPath(&unk_100E26BD8);
    v44 = v43;
    if ((v53 & 1) != 0)
      v45 = static Color.white.getter(v43);
    else
      v45 = static Color.blue.getter(v43);
    v61 = v45;
    v46 = sub_100010D70(&qword_1014958E0, &qword_1014958B0, (const char *)&protocol conformance descriptor for Range<A>);
    v47 = (void (*)(uint64_t *, _QWORD))AttributedString.subscript.modify(&v59, v41, v37, v46);
    v48 = sub_10006C5A8();
    AttributedSubstring.subscript.setter(&v61, v44, v48);
    v47(&v59, 0);
    sub_100010CC4(v41, &qword_1014958B0);
    v39 = v40;
    v38 = &qword_1014958B0;
  }
  return sub_100010CC4(v39, v38);
}

uint64_t sub_100055F9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>, __n128 a7@<Q0>)
{
  void *v13;
  uint64_t KeyPath;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t result;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD v40[6];
  _OWORD v41[2];
  _OWORD v42[8];
  char v43;
  _BYTE v44[152];
  uint64_t v45;
  uint64_t v46;
  char v47;
  _BYTE v48[64];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _OWORD v53[9];
  __int16 v54;

  if ((*(_BYTE *)(a1 + 88) & 1) != 0)
  {
    v22 = static VerticalAlignment.center.getter(a7);
    sub_10005635C(a1, a2, a3, a4 & 1, a5, (uint64_t)v40);
    *(_OWORD *)((char *)&v42[4] + 7) = v40[4];
    *(_OWORD *)((char *)&v42[5] + 7) = v40[5];
    *(_OWORD *)((char *)&v42[6] + 7) = v41[0];
    v42[7] = *(_OWORD *)((char *)v41 + 9);
    *(_OWORD *)((char *)v42 + 7) = v40[0];
    *(_OWORD *)((char *)&v42[1] + 7) = v40[1];
    *(_OWORD *)((char *)&v42[2] + 7) = v40[2];
    *(_OWORD *)((char *)&v42[3] + 7) = v40[3];
    v52 = *(_OWORD *)((char *)v41 + 9);
    v49 = v42[4];
    v50 = v42[5];
    *(_OWORD *)&v48[48] = v42[3];
    *(_OWORD *)&v48[32] = v42[2];
    *(_OWORD *)&v48[16] = v42[1];
    *(_OWORD *)v48 = v42[0];
    v43 = 0;
    v45 = v22;
    v46 = 0x4010000000000000;
    v47 = 0;
    v51 = v42[6];
    sub_10006D8E8((uint64_t)&v45);
LABEL_12:
    sub_1000207BC((uint64_t)&v45, (uint64_t)v44, &qword_101495B08);
    v28 = sub_100008B04(&qword_101495B10);
    v29 = sub_100008B04(&qword_101495A28);
    v30 = sub_100010D70(&qword_101495B18, &qword_101495B10, (const char *)&protocol conformance descriptor for HStack<A>);
    v31 = sub_10006CF00();
    result = _ConditionalContent<>.init(storage:)(v44, v28, v29, v30, v31);
    v33 = v53[7];
    *(_OWORD *)(a6 + 96) = v53[6];
    *(_OWORD *)(a6 + 112) = v33;
    *(_OWORD *)(a6 + 128) = v53[8];
    *(_WORD *)(a6 + 144) = v54;
    v34 = v53[3];
    *(_OWORD *)(a6 + 32) = v53[2];
    *(_OWORD *)(a6 + 48) = v34;
    v35 = v53[5];
    *(_OWORD *)(a6 + 64) = v53[4];
    *(_OWORD *)(a6 + 80) = v35;
    v36 = v53[1];
    *(_OWORD *)a6 = v53[0];
    *(_OWORD *)(a6 + 16) = v36;
    return result;
  }
  v13 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    KeyPath = swift_getKeyPath(&unk_100E26B00);
    v15 = swift_getKeyPath(&unk_100E26B28);
    v16 = v13;
    static Published.subscript.getter(v53, v16, KeyPath, v15);

    swift_release(KeyPath);
    v17 = swift_release(v15);
    LOBYTE(v16) = v53[0];
    v18 = static Font.subheadline.getter(v17);
    v19 = swift_getKeyPath(&unk_100E26B78);
    sub_10006BB40(a2, a3, a4 & 1);
    if ((v16 & 1) != 0)
    {
      v20 = qword_101490CD8;
      swift_bridgeObjectRetain(a5);
      if (v20 != -1)
        swift_once(&qword_101490CD8, sub_100043F38);
      v21 = &qword_1014D46A0;
    }
    else
    {
      v23 = qword_101490CE0;
      swift_bridgeObjectRetain(a5);
      if (v23 != -1)
        swift_once(&qword_101490CE0, sub_100043F7C);
      v21 = &qword_1014D46A8;
    }
    v24 = *v21;
    swift_retain(*v21);
    v25 = swift_getKeyPath(&unk_100E26100);
    v26 = swift_getKeyPath(&unk_100E26B48);
    v27 = a4 & 1;
    sub_10006BB40(a2, a3, v27);
    swift_bridgeObjectRetain(a5);
    swift_retain(v19);
    swift_retain(v18);
    swift_retain(v25);
    swift_retain(v24);
    sub_10006B77C(a2, a3, v27);
    swift_release(v24);
    swift_release(v25);
    swift_release(v18);
    swift_release(v19);
    swift_bridgeObjectRelease(a5);
    v45 = a2;
    v46 = a3;
    v47 = v27;
    *(_QWORD *)&v48[7] = a5;
    *(_QWORD *)&v48[15] = v19;
    *(_QWORD *)&v48[23] = v18;
    *(_QWORD *)&v48[31] = v25;
    *(_QWORD *)&v48[39] = v24;
    *(_QWORD *)&v48[47] = v26;
    *(_QWORD *)&v48[55] = 1;
    v48[63] = 0;
    sub_10006D8DC((uint64_t)&v45);
    goto LABEL_12;
  }
  v37 = *(_QWORD *)(a1 + 8);
  v38 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
  v39 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
  result = EnvironmentObject.error()(0, v37, v38, v39);
  __break(1u);
  return result;
}

uint64_t sub_10005635C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v41;

  v10 = Image.init(_internalSystemName:)(0xD00000000000001ALL, 0x8000000100E44590);
  v11 = static Font.caption.getter();
  KeyPath = swift_getKeyPath(&unk_100E26B78);
  v13 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    v14 = KeyPath;
    v15 = swift_getKeyPath(&unk_100E26B00);
    v16 = swift_getKeyPath(&unk_100E26B28);
    v17 = v13;
    static Published.subscript.getter((uint64_t *)((char *)&v41 + 1), v17, v15, v16);

    swift_release(v15);
    v18 = swift_release(v16);
    v19 = v10;
    if ((v41 & 0x100) != 0)
      v20 = static Color.white.getter(v18);
    else
      v20 = static Color.secondary.getter(v18);
    v37 = v20;
    v39 = swift_getKeyPath(&unk_100E26100);
    v21 = swift_getKeyPath(&unk_100E26B00);
    v22 = swift_getKeyPath(&unk_100E26B28);
    v23 = v17;
    static Published.subscript.getter(&v41, v23, v21, v22);

    swift_release(v21);
    v24 = swift_release(v22);
    LODWORD(v21) = v41;
    v25 = static Font.subheadline.getter(v24);
    v26 = swift_getKeyPath(&unk_100E26B78);
    sub_10006BB40(a2, a3, a4 & 1);
    if ((_DWORD)v21 == 1)
    {
      v27 = qword_101490CD8;
      swift_bridgeObjectRetain(a5);
      if (v27 != -1)
        swift_once(&qword_101490CD8, sub_100043F38);
      v28 = &qword_1014D46A0;
    }
    else
    {
      v29 = qword_101490CE0;
      swift_bridgeObjectRetain(a5);
      if (v29 != -1)
        swift_once(&qword_101490CE0, sub_100043F7C);
      v28 = &qword_1014D46A8;
    }
    v30 = *v28;
    swift_retain(*v28);
    v31 = swift_getKeyPath(&unk_100E26100);
    v36 = swift_getKeyPath(&unk_100E26B48);
    sub_10006BB40(a2, a3, a4 & 1);
    swift_bridgeObjectRetain(a5);
    swift_retain(v26);
    swift_retain(v25);
    swift_retain(v31);
    swift_retain(v30);
    sub_10006B77C(a2, a3, a4 & 1);
    swift_release(v30);
    swift_release(v31);
    swift_release(v25);
    swift_release(v26);
    swift_bridgeObjectRelease(a5);
    *(_QWORD *)a6 = v19;
    *(_QWORD *)(a6 + 8) = v14;
    *(_QWORD *)(a6 + 16) = v11;
    *(_QWORD *)(a6 + 24) = v39;
    *(_QWORD *)(a6 + 32) = v37;
    *(_QWORD *)(a6 + 40) = a2;
    *(_QWORD *)(a6 + 48) = a3;
    *(_BYTE *)(a6 + 56) = a4 & 1;
    *(_QWORD *)(a6 + 64) = a5;
    *(_QWORD *)(a6 + 72) = v26;
    *(_QWORD *)(a6 + 80) = v25;
    *(_QWORD *)(a6 + 88) = v31;
    *(_QWORD *)(a6 + 96) = v30;
    *(_QWORD *)(a6 + 104) = v36;
    *(_QWORD *)(a6 + 112) = 1;
    *(_BYTE *)(a6 + 120) = 0;
    swift_retain(v19);
    swift_retain(v14);
    swift_retain(v11);
    swift_retain(v39);
    swift_retain(v37);
    sub_10006BB40(a2, a3, a4 & 1);
    swift_bridgeObjectRetain(a5);
    swift_retain(v26);
    swift_retain(v25);
    swift_retain(v31);
    swift_retain(v30);
    swift_retain(v36);
    sub_10006B77C(a2, a3, a4 & 1);
    swift_release(v37);
    swift_release(v39);
    swift_release(v11);
    swift_release(v14);
    swift_release(v19);
    swift_release(v36);
    swift_release(v30);
    swift_release(v31);
    swift_release(v25);
    swift_release(v26);
    return swift_bridgeObjectRelease(a5);
  }
  else
  {
    v33 = *(_QWORD *)(a1 + 8);
    v34 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
    v35 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
    result = EnvironmentObject.error()(0, v33, v34, v35);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000567B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  void (*v6)(uint64_t *);
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_BYTE *)(a1 + 32);
  sub_10002057C(v3, v4, v5);
  v6 = (void (*)(uint64_t *))sub_10001A21C(v3, v4, v5);
  v8 = v7;
  sub_10001A774(v3, v4, v5);
  v10 = a2;
  v6(&v10);
  return swift_release(v8);
}

uint64_t sub_100056838@<X0>(uint64_t a1@<X8>)
{
  return sub_100054E8C(a1);
}

uint64_t sub_100056880(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  void (*v5)(uint64_t *);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_BYTE *)(a1 + 32);
  sub_10002057C(v2, v3, v4);
  v5 = (void (*)(uint64_t *))sub_10001A230(v2, v3, v4);
  v7 = v6;
  sub_10001A774(v2, v3, v4);
  v8 = a1 + *(int *)(_s13TappableEntryVMa(0) + 24);
  v10 = *(_QWORD *)(v8 + *(int *)(type metadata accessor for PlaceSummaryViewModelUnit.TappableEntry(0) + 24));
  v5(&v10);
  return swift_release(v7);
}

uint64_t sub_100056928@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  uint64_t KeyPath;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t);
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t result;
  _QWORD *v52;
  uint64_t v53;
  uint64_t *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;

  v4 = sub_100008B04(&qword_101494BF0);
  __chkstk_darwin(v4);
  v61 = (uint64_t)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v58 - v7;
  v9 = _s13TappableEntryVMa(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AttributedString(0);
  v63 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v64 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v58 - v15;
  v17 = *a1;
  if (!*a1)
    goto LABEL_10;
  KeyPath = swift_getKeyPath(&unk_100E26B00);
  v19 = swift_getKeyPath(&unk_100E26B28);
  v20 = v17;
  static Published.subscript.getter(&v65, v20, KeyPath, v19);

  swift_release(KeyPath);
  swift_release(v19);
  LOBYTE(v20) = v65;
  sub_1000202AC((uint64_t)a1, (uint64_t)v11, _s13TappableEntryVMa);
  v62 = a2;
  if ((v20 & 1) == 0)
  {
    sub_1000202F0((uint64_t)v11, _s13TappableEntryVMa);
    goto LABEL_7;
  }
  v21 = *(int *)(v9 + 24);
  v22 = type metadata accessor for PlaceSummaryViewModelUnit.TappableEntry(0);
  v23 = v21 + *(int *)(v22 + 20);
  v24 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.Label(0);
  sub_10000C1FC((uint64_t)&v11[v23 + v24[12]], (uint64_t)v8, &qword_101494BF0);
  sub_1000202F0((uint64_t)v11, _s13TappableEntryVMa);
  v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v63 + 48);
  v26 = v25(v8, 1, v12);
  sub_100010CC4((uint64_t)v8, &qword_101494BF0);
  if (v26 == 1)
  {
LABEL_7:
    v30 = (char *)a1 + *(int *)(v9 + 24);
    v22 = type metadata accessor for PlaceSummaryViewModelUnit.TappableEntry(0);
    v31 = *(int *)(v22 + 20);
    v24 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.Label(0);
    v32 = &v30[v31 + v24[5]];
    v29 = v63;
    v33 = *(void (**)(char *, char *, uint64_t))(v63 + 16);
    v33(v16, v32, v12);
    v33(v64, v16, v12);
    goto LABEL_8;
  }
  v27 = v61;
  sub_10000C1FC((uint64_t)a1 + *(int *)(v9 + 24) + *(int *)(v22 + 20) + (uint64_t)v24[12], v61, &qword_101494BF0);
  v28 = v25((char *)v27, 1, v12);
  v29 = v63;
  if (v28 != 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v63 + 32))(v16, v27, v12);
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v64, v16, v12);
LABEL_8:
    v34 = (char *)a1 + *(int *)(v9 + 24);
    type metadata accessor for PlaceSummaryViewModelUnit.TappableEntry(0);
    v35 = &v34[*(int *)(v22 + 20)];
    type metadata accessor for PlaceSummaryViewModelUnit.Label(0);
    v36 = v24[7];
    v37 = &v35[v24[6]];
    v38 = *((_QWORD *)v37 + 1);
    v60 = *(_QWORD *)v37;
    v39 = *(_QWORD *)&v35[v36];
    v40 = *(_QWORD *)&v35[v24[8]];
    v41 = &v35[v24[11]];
    v63 = *(_QWORD *)v41;
    LODWORD(v61) = v41[8];
    v42 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
    v43 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
    swift_bridgeObjectRetain(v38);
    swift_retain(v39);
    swift_retain(v40);
    v59 = EnvironmentObject.init()(v42, v43);
    v45 = v44;
    (*(void (**)(char *, uint64_t))(v29 + 8))(v16, v12);
    v46 = swift_getKeyPath(&unk_100E26008);
    v47 = (int *)_s5LabelVMa(0);
    v48 = v62;
    v49 = (uint64_t *)(v62 + v47[12]);
    *v49 = v46;
    v50 = sub_100008B04(&qword_101493188);
    swift_storeEnumTagMultiPayload(v49, v50, 0);
    result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v29 + 32))(v48, v64, v12);
    v52 = (_QWORD *)(v48 + v47[5]);
    *v52 = v60;
    v52[1] = v38;
    *(_QWORD *)(v48 + v47[6]) = v39;
    *(_QWORD *)(v48 + v47[7]) = v40;
    *(_QWORD *)(v48 + v47[8]) = 0;
    *(_QWORD *)(v48 + v47[9]) = 0;
    v53 = v48 + v47[10];
    *(_QWORD *)v53 = v63;
    *(_BYTE *)(v53 + 8) = v61;
    v54 = (uint64_t *)(v48 + v47[11]);
    *v54 = v59;
    v54[1] = v45;
    return result;
  }
  __break(1u);
LABEL_10:
  v55 = a1[1];
  v56 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
  v57 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
  result = EnvironmentObject.error()(0, v55, v56, v57);
  __break(1u);
  return result;
}

uint64_t sub_100056DD4@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  void **v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = *(_QWORD *)(a1 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(a1);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000202AC((uint64_t)v2, (uint64_t)v6, _s13TappableEntryVMa);
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = (v7 + 16) & ~v7;
  v9 = swift_allocObject(&unk_10119E310, v8 + v5, v7 | 7);
  sub_10003F29C((uint64_t)v6, v9 + v8, _s13TappableEntryVMa);
  *a2 = sub_10006DA78;
  a2[1] = (uint64_t (*)())v9;
  v10 = sub_100008B04(&qword_101495B20);
  return sub_100056928(v2, (uint64_t)a2 + *(int *)(v10 + 36));
}

uint64_t sub_100056EA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t *v25;
  double v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;

  v32 = a1;
  v2 = type metadata accessor for AttributedString(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (int *)_s5LabelVMa(0);
  __chkstk_darwin(v6);
  v8 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_100008B04(&qword_101495B60);
  __chkstk_darwin(v31);
  v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008B04(&qword_101495B68);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))(v5, v1, v2, v12);
  v15 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
  v16 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
  v17 = EnvironmentObject.init()(v15, v16);
  v19 = v18;
  KeyPath = swift_getKeyPath(&unk_100E26008);
  v21 = (uint64_t *)&v8[v6[12]];
  *v21 = KeyPath;
  v22 = sub_100008B04(&qword_101493188);
  swift_storeEnumTagMultiPayload(v21, v22, 0);
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v8, v5, v2);
  v23 = &v8[v6[5]];
  *(_QWORD *)v23 = 0;
  *((_QWORD *)v23 + 1) = 0;
  *(_QWORD *)&v8[v6[6]] = 0;
  *(_QWORD *)&v8[v6[7]] = 0;
  *(_QWORD *)&v8[v6[8]] = 0;
  *(_QWORD *)&v8[v6[9]] = 0;
  v24 = &v8[v6[10]];
  *(_QWORD *)v24 = 1;
  v24[8] = 0;
  v25 = (uint64_t *)&v8[v6[11]];
  *v25 = v17;
  v25[1] = v19;
  if (*(_BYTE *)(v30[1] + *(int *)(_s5HoursVMa(0) + 20)))
    v26 = 10.0;
  else
    v26 = 0.0;
  sub_1000202AC((uint64_t)v8, (uint64_t)v10, _s5LabelVMa);
  v27 = v31;
  *(double *)&v10[*(int *)(v31 + 36)] = v26;
  sub_1000202F0((uint64_t)v8, _s5LabelVMa);
  v28 = sub_10006DB9C();
  View.accessibility(identifier:)(0xD000000000000011, 0x8000000100E445B0, v27, v28);
  sub_100010CC4((uint64_t)v10, &qword_101495B60);
  return sub_1000207BC((uint64_t)v14, v32, &qword_101495B68);
}

uint64_t sub_100057168@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  void (*v16)(_BYTE *, uint64_t);
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = type metadata accessor for Button(0, v4, v5);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  v12 = &v18[-v11];
  v13 = *v2;
  v14 = v2[1];
  v19 = v4;
  v20 = v5;
  v21 = v2;
  v15 = swift_retain(v14);
  Button.init(action:label:)(v13, v14, sub_10007095C, v18, v4, v5, v15);
  swift_getWitnessTable((const char *)&protocol conformance descriptor for Button<A>, v6);
  sub_100129028((uint64_t)v9, v6, (uint64_t)v12);
  v16 = *(void (**)(_BYTE *, uint64_t))(v7 + 8);
  v16(v9, v6);
  sub_100128F38((uint64_t)v12, v6, a2);
  return ((uint64_t (*)(_BYTE *, uint64_t))v16)(v12, v6);
}

uint64_t sub_10005729C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v6 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = _s16BorderlessButtonVMa(0, v9, v10, v11);
  sub_100129028(a1 + *(int *)(v12 + 36), a2, (uint64_t)v8);
  sub_100128F38((uint64_t)v8, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, a2);
}

void sub_10005734C(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  _QWORD *v2;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  double v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  _OWORD v20[11];
  _BYTE v21[183];
  char v22;

  v4 = static VerticalAlignment.center.getter(a2);
  v6 = sub_1000574B8(v2, (uint64_t)v20, v5);
  *(_OWORD *)&v21[119] = v20[7];
  *(_OWORD *)&v21[135] = v20[8];
  *(_OWORD *)&v21[151] = v20[9];
  *(_OWORD *)&v21[167] = v20[10];
  *(_OWORD *)&v21[55] = v20[3];
  *(_OWORD *)&v21[71] = v20[4];
  *(_OWORD *)&v21[87] = v20[5];
  *(_OWORD *)&v21[103] = v20[6];
  *(_OWORD *)&v21[7] = v20[0];
  *(_OWORD *)&v21[23] = v20[1];
  v22 = 0;
  *(_OWORD *)&v21[39] = v20[2];
  v7 = static Edge.Set.leading.getter(v6);
  _s28RealTimeAvailableChargerViewVMa(0);
  v8 = sub_100008B04(&qword_10149CF20);
  ScaledMetric.wrappedValue.getter(&v19, v8);
  v9 = EdgeInsets.init(_all:)(v19);
  v10 = *(_OWORD *)&v21[144];
  *(_OWORD *)(a1 + 145) = *(_OWORD *)&v21[128];
  *(_OWORD *)(a1 + 161) = v10;
  *(_OWORD *)(a1 + 177) = *(_OWORD *)&v21[160];
  v11 = *(_OWORD *)&v21[80];
  *(_OWORD *)(a1 + 81) = *(_OWORD *)&v21[64];
  *(_OWORD *)(a1 + 97) = v11;
  v12 = *(_OWORD *)&v21[112];
  *(_OWORD *)(a1 + 113) = *(_OWORD *)&v21[96];
  *(_OWORD *)(a1 + 129) = v12;
  v13 = *(_OWORD *)&v21[16];
  *(_OWORD *)(a1 + 17) = *(_OWORD *)v21;
  *(_OWORD *)(a1 + 33) = v13;
  v14 = *(_OWORD *)&v21[48];
  *(_OWORD *)(a1 + 49) = *(_OWORD *)&v21[32];
  LOBYTE(v19) = 0;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0x4000000000000000;
  *(_BYTE *)(a1 + 16) = 0;
  v15 = *(_QWORD *)&v21[175];
  *(_OWORD *)(a1 + 65) = v14;
  *(_QWORD *)(a1 + 192) = v15;
  *(_QWORD *)(a1 + 200) = 0xD000000000000018;
  *(_QWORD *)(a1 + 208) = 0x8000000100E445D0;
  *(_BYTE *)(a1 + 216) = 12;
  *(_BYTE *)(a1 + 224) = v7;
  *(double *)(a1 + 232) = v9;
  *(_QWORD *)(a1 + 240) = v16;
  *(_QWORD *)(a1 + 248) = v17;
  *(_QWORD *)(a1 + 256) = v18;
  *(_BYTE *)(a1 + 264) = LOBYTE(v19);
}

uint64_t sub_1000574B8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *object;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t KeyPath;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  Swift::String v74;

  v5 = type metadata accessor for LocalizedStringKey.StringInterpolation(0, a3);
  __chkstk_darwin(v5);
  v7 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[2];
  v9 = a1[3];
  swift_bridgeObjectRetain(v9);
  v70 = Image.init(systemName:)(v8, v9);
  v10 = static Font.caption2.getter();
  static Font.Weight.bold.getter();
  v69 = Font.weight(_:)(v10);
  swift_release(v10);
  KeyPath = swift_getKeyPath(&unk_100E26B78);
  v67 = static Color.secondary.getter(KeyPath);
  v66 = swift_getKeyPath(&unk_100E26100);
  v11 = *(_QWORD *)((char *)a1 + *(int *)(_s28RealTimeAvailableChargerViewVMa(0) + 32));
  v12 = static UnitPoint.center.getter();
  v14 = v13;
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 1);
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v15);
  v16 = a1[1];
  v17 = swift_getKeyPath(&unk_100E26C60);
  v18 = swift_getKeyPath(&unk_100E26C88);
  swift_retain(v16);
  static Published.subscript.getter(&v74, v19, v17, v18);
  swift_release(v16);
  swift_release(v17);
  swift_release(v18);
  object = v74._object;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v74);
  swift_bridgeObjectRelease(object);
  v21._countAndFlagsBits = 0;
  v21._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v21);
  v22 = LocalizedStringKey.init(stringInterpolation:)(v7);
  v23 = Text.init(_:tableName:bundle:comment:)(v22);
  v64 = v24;
  v65 = v23;
  v26 = v25;
  v73 = v27;
  v28 = static Font.subheadline.getter(v23);
  static Font.Weight.medium.getter();
  v72 = Font.weight(_:)(v28);
  swift_release(v28);
  v29 = swift_getKeyPath(&unk_100E26B78);
  v30 = a1[1];
  swift_retain(v30);
  v63 = sub_1000893C8();
  swift_release(v30);
  v71 = swift_getKeyPath(&unk_100E26100);
  v31 = swift_getKeyPath(&unk_100E26CA8);
  v32 = swift_getKeyPath(&unk_100E26CD0);
  swift_retain(v30);
  static Published.subscript.getter(&v74, v33, v31, v32);
  swift_release(v30);
  swift_release(v31);
  swift_release(v32);
  if (LODWORD(v74._countAndFlagsBits))
  {
    v34 = a1[4];
    v35 = a1[5];
    swift_bridgeObjectRetain(v35);
    v62 = Image.init(systemName:)(v34, v35);
    v36 = static Font.subheadline.getter(v62);
    static Font.Weight.medium.getter();
    v61 = Font.weight(_:)(v36);
    swift_release(v36);
    v37 = swift_getKeyPath(&unk_100E26B78);
    swift_retain(v30);
    v38 = sub_1000893C8();
    swift_release(v30);
    v39 = swift_getKeyPath(&unk_100E26100);
  }
  else
  {
    v61 = 0;
    v62 = 0;
    v37 = 0;
    v39 = 0;
    v38 = 0;
  }
  v59 = v39;
  v40 = v26 & 1;
  LOBYTE(v74._countAndFlagsBits) = v26 & 1;
  v41 = v69;
  v42 = v70;
  v43 = KeyPath;
  *(_QWORD *)a2 = v70;
  *(_QWORD *)(a2 + 8) = v43;
  v45 = v66;
  v44 = v67;
  *(_QWORD *)(a2 + 16) = v41;
  *(_QWORD *)(a2 + 24) = v45;
  *(_QWORD *)(a2 + 32) = v44;
  *(_QWORD *)(a2 + 40) = v11;
  *(double *)(a2 + 48) = v12;
  *(_QWORD *)(a2 + 56) = v14;
  v46 = v64;
  *(_QWORD *)(a2 + 64) = v65;
  *(_QWORD *)(a2 + 72) = v46;
  *(_BYTE *)(a2 + 80) = v40;
  *(_QWORD *)(a2 + 88) = v73;
  *(_WORD *)(a2 + 96) = 256;
  v47 = v29;
  v60 = v29;
  v48 = v72;
  *(_QWORD *)(a2 + 104) = v29;
  *(_QWORD *)(a2 + 112) = v48;
  v50 = v62;
  v49 = v63;
  *(_QWORD *)(a2 + 120) = v71;
  *(_QWORD *)(a2 + 128) = v49;
  *(_QWORD *)(a2 + 136) = v50;
  *(_QWORD *)(a2 + 144) = v37;
  v51 = v61;
  *(_QWORD *)(a2 + 152) = v61;
  *(_QWORD *)(a2 + 160) = v39;
  *(_QWORD *)(a2 + 168) = v38;
  swift_retain(v42);
  swift_retain(v43);
  swift_retain(v41);
  swift_retain(v45);
  v52 = v67;
  swift_retain(v67);
  v54 = v64;
  v53 = v65;
  sub_10006BB40(v65, v64, v40);
  swift_bridgeObjectRetain(v73);
  swift_retain(v47);
  swift_retain(v72);
  swift_retain(v71);
  v55 = v63;
  swift_retain(v63);
  v56 = v59;
  sub_10006DC48(v50, v37, v51, v59, v38);
  sub_10006DCA4(v50, v37, v51, v56, v38);
  sub_10006B77C(v53, v54, v40);
  swift_release(v52);
  swift_release(v66);
  swift_release(v69);
  swift_release(KeyPath);
  swift_release(v70);
  swift_release(v55);
  swift_release(v71);
  swift_release(v72);
  swift_release(v60);
  return swift_bridgeObjectRelease(v73);
}

uint64_t sub_100057954@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  void *v29;
  uint64_t KeyPath;
  uint64_t v31;
  id v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  _OWORD *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t result;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _BYTE v98[16];
  uint64_t v99;
  _OWORD v100[7];
  _QWORD v101[4];
  char v102;
  _QWORD v103[4];
  char v104;

  v2 = v1;
  v97 = a1;
  v3 = sub_100008B04(&qword_101495B78);
  v86 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_100008B04(&qword_101495B80);
  v6 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v8 = (char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_100008B04(&qword_101495B88);
  __chkstk_darwin(v83);
  v10 = (char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_100008B04(&qword_101495B90);
  __chkstk_darwin(v84);
  v12 = (char *)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = sub_100008B04(&qword_101495B98);
  __chkstk_darwin(v87);
  v90 = (uint64_t)&v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_100008B04(&qword_101495BA0);
  __chkstk_darwin(v88);
  v92 = (char *)&v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_100008B04(&qword_101495BA8);
  __chkstk_darwin(v89);
  v94 = (char *)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = sub_100008B04(&qword_101495BB0);
  __chkstk_darwin(v91);
  v96 = (uint64_t)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_100008B04(&qword_101495BB8);
  v17 = __chkstk_darwin(v93);
  v95 = (uint64_t)&v82 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = static Axis.Set.horizontal.getter(v17);
  v99 = v2;
  v20 = sub_100008B04(&qword_101495BC0);
  v21 = sub_100010D70(&qword_101495BC8, &qword_101495BC0, (const char *)&protocol conformance descriptor for LazyHStack<A>);
  ScrollView.init(_:showsIndicators:content:)(v19, 0, sub_10006DCFC, v98, v20, v21);
  v22 = (_OWORD *)swift_allocObject(&unk_10119E338, 96, 7);
  v23 = *(_OWORD *)(v2 + 48);
  v22[3] = *(_OWORD *)(v2 + 32);
  v22[4] = v23;
  v22[5] = *(_OWORD *)(v2 + 64);
  v24 = *(_OWORD *)(v2 + 16);
  v22[1] = *(_OWORD *)v2;
  v22[2] = v24;
  sub_10006DD14(v2);
  v25 = sub_100010D70(&qword_101495BD0, &qword_101495B78, (const char *)&protocol conformance descriptor for ScrollView<A>);
  View.onScrollPhaseChange(_:)(sub_10006DD0C, v22, v3, v25);
  swift_release(v22);
  (*(void (**)(char *, uint64_t))(v86 + 8))(v5, v3);
  v26 = v85;
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v10, v8, v85);
  v27 = &v10[*(int *)(v83 + 36)];
  *(_QWORD *)v27 = 0x6C6C6F726373;
  *((_QWORD *)v27 + 1) = 0xE600000000000000;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v26);
  sub_10000C1FC((uint64_t)v10, (uint64_t)v12, &qword_101495B88);
  v28 = &v12[*(int *)(v84 + 36)];
  *(_OWORD *)v28 = xmmword_100E27230;
  v28[16] = 12;
  sub_100010CC4((uint64_t)v10, &qword_101495B88);
  v29 = *(void **)(v2 + 16);
  if (v29)
  {
    KeyPath = swift_getKeyPath(&unk_100E26D00);
    v31 = swift_getKeyPath(&unk_100E26D28);
    v32 = v29;
    static Published.subscript.getter(v100, v32, KeyPath, v31);

    swift_release(KeyPath);
    v33 = swift_release(v31);
    v34 = *(double *)v100;
    v35 = static Alignment.center.getter(v33);
    v37 = v36;
    v38.n128_u64[0] = 0xFFF0000000000000;
    if (v34 < -INFINITY)
    {
      v39 = static os_log_type_t.fault.getter(v38);
      v40 = (void *)static Log.runtimeIssuesLog.getter();
      os_log(_:dso:log:_:_:)(v39, &_mh_execute_header, v40, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    }
    _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v100, 0, 1, 0, 1, *(_QWORD *)&v34, 0, 0x4044000000000000, 0, 0, 1, 0, 1, v35, v37);
    v41 = v90;
    sub_10000C1FC((uint64_t)v12, v90, &qword_101495B90);
    v42 = (_OWORD *)(v41 + *(int *)(v87 + 36));
    v43 = v100[5];
    v42[4] = v100[4];
    v42[5] = v43;
    v42[6] = v100[6];
    v44 = v100[1];
    *v42 = v100[0];
    v42[1] = v44;
    v45 = v100[3];
    v42[2] = v100[2];
    v42[3] = v45;
    v46 = sub_100010CC4((uint64_t)v12, &qword_101495B90);
    v47 = static Edge.Set.trailing.getter(v46);
    v103[0] = EdgeInsets.init(_all:)(16.0);
    v103[1] = v48;
    v103[2] = v49;
    v103[3] = v50;
    v104 = 0;
    v51 = (uint64_t)v92;
    SafeAreaPaddingModifier.init(edges:insets:)(v47, v103);
    v52 = sub_1000207BC(v41, v51, &qword_101495B98);
    v53 = static Edge.Set.leading.getter(v52);
    v101[0] = EdgeInsets.init(_all:)(16.0);
    v101[1] = v54;
    v101[2] = v55;
    v101[3] = v56;
    v102 = 0;
    v57 = (uint64_t)v94;
    SafeAreaPaddingModifier.init(edges:insets:)(v53, v101);
    v58 = sub_1000207BC(v51, v57, &qword_101495BA0);
    LOBYTE(v53) = static Edge.Set.trailing.getter(v58);
    v59 = EdgeInsets.init(_all:)(-16.0);
    v61 = v60;
    v63 = v62;
    v65 = v64;
    v66 = v96;
    sub_10000C1FC(v57, v96, &qword_101495BA8);
    v67 = v66 + *(int *)(v91 + 36);
    *(_BYTE *)v67 = v53;
    *(double *)(v67 + 8) = v59;
    *(_QWORD *)(v67 + 16) = v61;
    *(_QWORD *)(v67 + 24) = v63;
    *(_QWORD *)(v67 + 32) = v65;
    *(_BYTE *)(v67 + 40) = 0;
    v68 = sub_100010CC4(v57, &qword_101495BA8);
    LOBYTE(v53) = static Edge.Set.leading.getter(v68);
    v69 = EdgeInsets.init(_all:)(-16.0);
    v71 = v70;
    v73 = v72;
    v75 = v74;
    v76 = v95;
    sub_10000C1FC(v66, v95, &qword_101495BB0);
    v77 = v76 + *(int *)(v93 + 36);
    *(_BYTE *)v77 = v53;
    *(double *)(v77 + 8) = v69;
    *(_QWORD *)(v77 + 16) = v71;
    *(_QWORD *)(v77 + 24) = v73;
    *(_QWORD *)(v77 + 32) = v75;
    *(_BYTE *)(v77 + 40) = 0;
    sub_100010CC4(v66, &qword_101495BB0);
    return sub_1000207BC(v76, v97, &qword_101495BB8);
  }
  else
  {
    v79 = *(_QWORD *)(v2 + 24);
    v80 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
    v81 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
    result = EnvironmentObject.error()(0, v79, v80, v81);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000580F8(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[16];
  uint64_t v12;
  int v13;

  v2 = type metadata accessor for PinnedScrollableViews(0);
  v3 = __chkstk_darwin(v2);
  v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = static VerticalAlignment.center.getter(v3);
  v12 = a1;
  v13 = 0;
  v7 = sub_10000BC84(&qword_101494D00, (uint64_t (*)(uint64_t))&type metadata accessor for PinnedScrollableViews, (uint64_t)&protocol conformance descriptor for PinnedScrollableViews);
  dispatch thunk of OptionSet.init(rawValue:)(&v13, v2, v7);
  v8 = sub_100008B04(&qword_101495BE8);
  v9 = sub_100070348(&qword_101495BF0, &qword_101495BE8, (uint64_t (*)(void))sub_10006DDD8, (const char *)&protocol conformance descriptor for <> ForEach<A, B, C>);
  return LazyHStack.init(alignment:spacing:pinnedViews:content:)(v6, 0x4020000000000000, 0, v5, sub_10006DDD0, v11, v8, v9);
}

id sub_100058210@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id result;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t KeyPath;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  __int128 v23;

  v4 = sub_100008B04(&qword_101495BE8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *a1;
  result = objc_msgSend(*(id *)(*((_QWORD *)&v23 + 1) + OBJC_IVAR____TtC4Maps34PlaceSummaryPhotoCarouselViewModel_mapItem), "_searchResultPhotoCarousel", swift_retain(*((_QWORD *)&v23 + 1)).n128_f64[0]);
  if (result)
  {
    v9 = result;
    v10 = sub_100008B04(&qword_101495C28);
    v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v10);

    if ((unint64_t)v11 >> 62)
    {
      if (v11 < 0)
        v21 = v11;
      else
        v21 = v11 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v11);
      v12 = _CocoaArrayWrapper.endIndex.getter(v21);
      swift_bridgeObjectRelease(v11);
    }
    else
    {
      v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v11);
    result = (id)sub_10006E910((uint64_t)&v23);
    if (__OFSUB__(v12, 1))
    {
      __break(1u);
    }
    else if (((v12 - 1) & 0x8000000000000000) == 0)
    {
      v22[0] = 0;
      v22[1] = v12 - 1;
      KeyPath = swift_getKeyPath(&unk_100E26D58);
      v14 = (_OWORD *)swift_allocObject(&unk_10119E360, 96, 7);
      v15 = a1[3];
      v14[3] = a1[2];
      v14[4] = v15;
      v14[5] = a1[4];
      v16 = a1[1];
      v14[1] = *a1;
      v14[2] = v16;
      sub_10006DD14((uint64_t)a1);
      v17 = sub_100008B04(&qword_101495C30);
      v18 = sub_100008B04(&qword_101495C00);
      v19 = sub_10006DEF0();
      v20 = sub_10006DDD8();
      ForEach<>.init(_:id:content:)(v22, KeyPath, sub_10006DEE8, v14, v17, v18, v19, &protocol witness table for Int, v20);
      return (id)(*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v7, v4);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10005841C@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  __int128 *v26[2];

  v26[0] = a2;
  v26[1] = a3;
  v5 = type metadata accessor for AccessibilityTraits(0, a4);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100008B04(&qword_101495C20);
  __chkstk_darwin(v9);
  v11 = (__int128 **)((char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_100008B04(&qword_101495C10);
  __chkstk_darwin(v12);
  v14 = (char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100008B04(&qword_101495C00);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *a1;
  *v11 = static Alignment.leading.getter(v16);
  v11[1] = v20;
  v21 = sub_100008B04(&qword_101495C48);
  sub_100058618(v26[0], v19, (uint64_t)v11 + *(int *)(v21 + 44));
  sub_10000C1FC((uint64_t)v11, (uint64_t)v14, &qword_101495C20);
  v22 = &v14[*(int *)(v12 + 36)];
  *(_OWORD *)v22 = xmmword_100E27240;
  v22[16] = 3;
  sub_100010CC4((uint64_t)v11, &qword_101495C20);
  v23 = sub_10006DE5C();
  View.accessibilityAutomationType(_:)(9, v12, v23);
  v24 = sub_100010CC4((uint64_t)v14, &qword_101495C10);
  static AccessibilityTraits.isButton.getter(v24);
  ModifiedContent<>.accessibilityRemoveTraits(_:)(v8, v15);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return sub_100010CC4((uint64_t)v18, &qword_101495C00);
}

uint64_t sub_100058618@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, _QWORD, uint64_t);
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  void *v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  id (**v100)();
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _OWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t result;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  __int128 v119;
  void (*v120)(uint64_t, _QWORD, uint64_t);
  uint64_t v121;
  unsigned int v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t KeyPath;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  __int128 *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  double v154[2];
  __int16 v155;
  uint64_t v156;
  char v157;
  uint64_t v158;
  char v159;
  __int128 v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  char v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char v168;
  uint64_t v169;
  char v170;
  __int128 v171;
  __int128 v172;

  v136 = a2;
  v149 = a3;
  v125 = type metadata accessor for Image.ResizingMode(0);
  v124 = *(_QWORD *)(v125 - 8);
  __chkstk_darwin(v125);
  v123 = (char *)&v117 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = sub_100008B04(&qword_101495C50);
  v131 = *(_QWORD *)(v133 - 8);
  __chkstk_darwin(v133);
  v130 = (char *)&v117 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = sub_100008B04(&qword_101495C58);
  __chkstk_darwin(v126);
  v129 = (char *)&v117 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = sub_100008B04(&qword_101495C60);
  __chkstk_darwin(v127);
  v135 = (uint64_t)&v117 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = sub_100008B04(&qword_101495C68);
  __chkstk_darwin(v128);
  v134 = (char *)&v117 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = sub_100008B04(&qword_101495C70);
  v153 = *(_QWORD *)(v146 - 8);
  __chkstk_darwin(v146);
  v132 = (uint64_t)&v117 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008B04(&qword_101495C78);
  __chkstk_darwin(v10);
  v148 = (char *)&v117 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v147 = (uint64_t)&v117 - v13;
  v151 = sub_100008B04(&qword_101494DD0);
  __chkstk_darwin(v151);
  v143 = (char *)&v117 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = type metadata accessor for RoundedRectangle(0);
  v15 = __chkstk_darwin(v150);
  v17 = (_OWORD *)((char *)&v117 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = type metadata accessor for Color.RGBColorSpace(0, v15);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v117 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = sub_100008B04(&qword_101495C80);
  __chkstk_darwin(v141);
  v145 = (uint64_t)&v117 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v25 = (char *)&v117 - v24;
  __chkstk_darwin(v26);
  v152 = (uint64_t)&v117 - v27;
  v28 = objc_msgSend((id)objc_opt_self(UIColor), "tertiarySystemFillColor");
  v142 = Color.init(uiColor:)(v28);
  KeyPath = swift_getKeyPath(&unk_100E26100);
  (*(void (**)(char *, _QWORD, uint64_t))(v19 + 104))(v21, enum case for Color.RGBColorSpace.sRGBLinear(_:), v18);
  v139 = Color.init(_:white:opacity:)(v21, 0.0, 0.1);
  v144 = a1;
  v29 = (void *)*((_QWORD *)a1 + 2);
  if (v29)
  {
    v30 = swift_getKeyPath(&unk_100E26D00);
    v31 = swift_getKeyPath(&unk_100E26D28);
    v32 = v29;
    static Published.subscript.getter(v154, v32, v30, v31);

    swift_release(v30);
    swift_release(v31);
    v33 = (v154[0] + -64.0 + -16.0) / 3.0;
    v34 = swift_getKeyPath(&unk_100E26D00);
    v35 = swift_getKeyPath(&unk_100E26D28);
    v36 = v32;
    static Published.subscript.getter(v154, v36, v34, v35);
    v118 = v36;

    swift_release(v34);
    v37 = swift_release(v35);
    v38 = (v154[0] + -64.0 + -16.0) / 3.0;
    v39 = static Alignment.center.getter(v37);
    _FrameLayout.init(width:height:alignment:)(&v161, *(_QWORD *)&v33, 0, *(_QWORD *)&v38, 0, v39, v40);
    v41 = v161;
    LOBYTE(v34) = v162;
    v138 = v163;
    v42 = v164;
    v43 = v166;
    v137 = v165;
    v44 = (char *)v17 + *(int *)(v150 + 20);
    v45 = enum case for RoundedCornerStyle.continuous(_:);
    v46 = type metadata accessor for RoundedCornerStyle(0);
    v47 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v46 - 8) + 104);
    v122 = v45;
    v121 = v46;
    v120 = v47;
    ((void (*)(char *, uint64_t))v47)(v44, v45);
    __asm { FMOV            V0.2D, #6.0 }
    v119 = _Q0;
    *v17 = _Q0;
    v53 = v143;
    sub_1000202AC((uint64_t)v17, (uint64_t)v143, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
    *(_WORD *)&v53[*(int *)(v151 + 36)] = 256;
    sub_10000C1FC((uint64_t)v53, (uint64_t)&v25[*(int *)(v141 + 36)], &qword_101494DD0);
    v54 = KeyPath;
    v55 = v142;
    *(_QWORD *)v25 = KeyPath;
    *((_QWORD *)v25 + 1) = v55;
    v56 = v139;
    *((_QWORD *)v25 + 2) = v139;
    *(_OWORD *)(v25 + 24) = xmmword_100E27250;
    *((_QWORD *)v25 + 5) = 0x4010000000000000;
    *((_QWORD *)v25 + 6) = v41;
    v25[56] = v34;
    *((_QWORD *)v25 + 8) = v138;
    v25[72] = v42;
    *((_QWORD *)v25 + 10) = v137;
    *((_QWORD *)v25 + 11) = v43;
    *((_QWORD *)v25 + 12) = 0;
    *((_WORD *)v25 + 52) = 257;
    swift_retain(v54);
    swift_retain(v55);
    swift_retain(v56);
    sub_100010CC4((uint64_t)v53, &qword_101494DD0);
    sub_1000202F0((uint64_t)v17, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
    swift_release(v56);
    swift_release(v55);
    swift_release(v54);
    v57 = v152;
    sub_1000207BC((uint64_t)v25, v152, &qword_101495C80);
    v58 = v144;
    v172 = *v144;
    v59 = *((_QWORD *)&v172 + 1);
    v60 = swift_getKeyPath(&unk_100E26D70);
    v61 = swift_getKeyPath(&unk_100E26D98);
    swift_retain(v59);
    static Published.subscript.getter(v154, v62, v60, v61);
    swift_release(v60);
    swift_release(v61);
    sub_10006E910((uint64_t)&v172);
    v63 = v154[0];
    if (*(_QWORD *)&v154[0])
    {
      v64 = (uint64_t)v148;
      if (*(_QWORD *)(*(_QWORD *)&v154[0] + 16))
      {
        v65 = sub_1000C163C(v136);
        if ((v66 & 1) != 0)
        {
          v67 = *(void **)(*(_QWORD *)(*(_QWORD *)&v63 + 56) + 8 * v65);
          v68 = v67;
          swift_bridgeObjectRelease(*(_QWORD *)&v63);
          v69 = 1;
          v70 = v149;
          v71 = v153;
          if (v67)
          {
            v143 = (char *)v68;
            v72 = Image.init(uiImage:)(v143);
            v73 = v124;
            v74 = v123;
            v75 = v125;
            (*(void (**)(char *, _QWORD, uint64_t))(v124 + 104))(v123, enum case for Image.ResizingMode.stretch(_:), v125);
            v141 = Image.resizable(capInsets:resizingMode:)(v74, v72, 0.0, 0.0, 0.0, 0.0);
            swift_release(v72);
            (*(void (**)(char *, uint64_t))(v73 + 8))(v74, v75);
            v76 = swift_getKeyPath(&unk_100E26D00);
            v142 = (uint64_t)v17;
            v77 = swift_getKeyPath(&unk_100E26D28);
            v78 = v118;
            static Published.subscript.getter(v154, v78, v76, v77);

            swift_release(v76);
            swift_release(v77);
            v79 = (v154[0] + -64.0 + -16.0) / 3.0;
            v80 = swift_getKeyPath(&unk_100E26D00);
            v81 = swift_getKeyPath(&unk_100E26D28);
            v82 = v78;
            static Published.subscript.getter(v154, v82, v80, v81);

            swift_release(v80);
            v83 = swift_release(v81);
            v84 = (v154[0] + -64.0 + -16.0) / 3.0;
            v85 = static Alignment.center.getter(v83);
            _FrameLayout.init(width:height:alignment:)(&v167, *(_QWORD *)&v79, 0, *(_QWORD *)&v84, 0, v85, v86);
            *(_QWORD *)&v154[0] = v141;
            v154[1] = 0.0;
            v155 = 257;
            v156 = v167;
            v157 = v168;
            v158 = v169;
            v159 = v170;
            v160 = v171;
            v87 = swift_allocObject(&unk_10119E388, 104, 7);
            v88 = v58[3];
            *(_OWORD *)(v87 + 48) = v58[2];
            *(_OWORD *)(v87 + 64) = v88;
            *(_OWORD *)(v87 + 80) = v58[4];
            v89 = v58[1];
            *(_OWORD *)(v87 + 16) = *v58;
            *(_OWORD *)(v87 + 32) = v89;
            v90 = v136;
            *(_QWORD *)(v87 + 96) = v136;
            sub_10006DD14((uint64_t)v58);
            v91 = sub_100008B04(&qword_101495C90);
            v92 = sub_10006E008();
            v93 = v130;
            View.onTapGesture(count:perform:)(1, sub_10006DFFC, v87, v91, v92);
            swift_release(v87);
            swift_release(*(_QWORD *)&v154[0]);
            v94 = swift_allocObject(&unk_10119E3B0, 104, 7);
            *(_QWORD *)(v94 + 16) = v90;
            v95 = *v58;
            *(_OWORD *)(v94 + 40) = v58[1];
            v96 = v58[3];
            *(_OWORD *)(v94 + 56) = v58[2];
            *(_OWORD *)(v94 + 72) = v96;
            *(_OWORD *)(v94 + 88) = v58[4];
            *(_OWORD *)(v94 + 24) = v95;
            v97 = v131;
            v98 = (uint64_t)v129;
            v99 = v133;
            (*(void (**)(char *, char *, uint64_t))(v131 + 16))(v129, v93, v133);
            v100 = (id (**)())(v98 + *(int *)(v126 + 36));
            *v100 = sub_10006E0D4;
            v100[1] = (id (*)())v94;
            v100[2] = 0;
            v100[3] = 0;
            sub_10006DD14((uint64_t)v58);
            (*(void (**)(char *, uint64_t))(v97 + 8))(v93, v99);
            v101 = v135;
            sub_10000C1FC(v98, v135, &qword_101495C58);
            v102 = v101 + *(int *)(v127 + 36);
            *(_QWORD *)v102 = 0;
            *(_WORD *)(v102 + 8) = 257;
            v103 = v98;
            v57 = v152;
            sub_100010CC4(v103, &qword_101495C58);
            v104 = (_OWORD *)v142;
            v120(v142 + *(int *)(v150 + 20), v122, v121);
            *v104 = v119;
            v105 = (uint64_t)v134;
            v106 = (uint64_t)&v134[*(int *)(v128 + 36)];
            sub_1000202AC((uint64_t)v104, v106, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
            *(_WORD *)(v106 + *(int *)(v151 + 36)) = 256;
            sub_10000C1FC(v101, v105, &qword_101495C60);
            sub_1000202F0((uint64_t)v104, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);

            sub_100010CC4(v101, &qword_101495C60);
            v107 = v132;
            sub_10000C1FC(v105, v132, &qword_101495C68);
            v108 = v146;
            *(_BYTE *)(v107 + *(int *)(v146 + 36)) = 1;
            sub_100010CC4(v105, &qword_101495C68);
            v109 = v107;
            v110 = v147;
            sub_1000207BC(v109, v147, &qword_101495C70);
            v71 = v153;
            v69 = 0;
          }
          else
          {
            v110 = v147;
            v108 = v146;
          }
          goto LABEL_10;
        }
      }
      swift_bridgeObjectRelease(*(_QWORD *)&v63);
      v69 = 1;
      v70 = v149;
    }
    else
    {
      v69 = 1;
      v70 = v149;
      v64 = (uint64_t)v148;
    }
    v110 = v147;
    v108 = v146;
    v71 = v153;
LABEL_10:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v71 + 56))(v110, v69, 1, v108);
    v111 = v145;
    sub_10000C1FC(v57, v145, &qword_101495C80);
    sub_10000C1FC(v110, v64, &qword_101495C78);
    sub_10000C1FC(v111, v70, &qword_101495C80);
    v112 = sub_100008B04(&qword_101495C88);
    sub_10000C1FC(v64, v70 + *(int *)(v112 + 48), &qword_101495C78);
    sub_100010CC4(v110, &qword_101495C78);
    sub_100010CC4(v57, &qword_101495C80);
    sub_100010CC4(v64, &qword_101495C78);
    return sub_100010CC4(v111, &qword_101495C80);
  }
  v114 = *((_QWORD *)v144 + 3);
  v115 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
  v116 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
  result = EnvironmentObject.error()(0, v114, v115, v116);
  __break(1u);
  return result;
}

id sub_1000593C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  void (*v6)(uint64_t *);
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_BYTE *)(a1 + 48);
  sub_10002057C(v3, v4, v5);
  v6 = (void (*)(uint64_t *))sub_10001A438(v3, v4, v5);
  v8 = v7;
  sub_10001A774(v3, v4, v5);
  v10 = a2;
  v6(&v10);
  swift_release(v8);
  return objc_msgSend((id)objc_opt_self(SearchResultsAnalyticsManager), "didTapPhotoCarouselPhoto:", a2);
}

id sub_100059468(uint64_t a1, __int128 *a2)
{
  id result;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v9 = *a2;
  result = objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + OBJC_IVAR____TtC4Maps34PlaceSummaryPhotoCarouselViewModel_mapItem), "_searchResultPhotoCarousel", swift_retain(*((_QWORD *)&v9 + 1)).n128_f64[0], (_QWORD)v9);
  if (!result)
    goto LABEL_13;
  v4 = result;
  v5 = sub_100008B04(&qword_101495C28);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

  if ((unint64_t)v6 >> 62)
  {
    if (v6 < 0)
      v8 = v6;
    else
      v8 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v7 = _CocoaArrayWrapper.endIndex.getter(v8);
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v6);
  result = (id)sub_10006E910((uint64_t)&v9);
  if (__OFSUB__(v7, 1))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  if (v7 - 1 == a1)
    return objc_msgSend((id)objc_opt_self(SearchResultsAnalyticsManager), "didScrollPhotoCarouselToEnd");
  return result;
}

uint64_t sub_100059570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  __n128 v13;
  uint64_t v14;
  _QWORD *v15;
  double v16;
  uint64_t v17;
  double v18;
  void (*v19)(char *, uint64_t);
  void *v20;
  char **v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  _QWORD v25[2];
  __int128 v26;
  uint64_t v27;
  _QWORD v28[2];
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v7 = type metadata accessor for ScrollGeometry(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = static ScrollPhase.== infix(_:_:)(a2, 0, v9);
  if ((result & 1) != 0)
  {
    result = static ScrollPhase.== infix(_:_:)(a1, 0, v13);
    if ((result & 1) == 0)
    {
      v29 = *(_OWORD *)(a4 + 56);
      v30 = *(_QWORD *)(a4 + 72);
      v26 = *(_OWORD *)(a4 + 56);
      v27 = *(_QWORD *)(a4 + 72);
      v14 = sub_100008B04(&qword_101495BD8);
      v15 = State.wrappedValue.getter(v28);
      v16 = *(double *)v28;
      v17 = ScrollPhaseChangeContext.geometry.getter(v15);
      v18 = ScrollGeometry.contentOffset.getter(v17);
      v19 = *(void (**)(char *, uint64_t))(v8 + 8);
      v19(v11, v7);
      v20 = (void *)objc_opt_self(SearchResultsAnalyticsManager);
      v21 = &selRef_didScrollPhotoCarouselToRight;
      if (v16 >= v18)
        v21 = &selRef_didScrollPhotoCarouselToLeft;
      objc_msgSend(v20, *v21);
      v22 = sub_1000207BC((uint64_t)&v30, (uint64_t)&v31, &qword_101495BE0);
      v23 = ScrollPhaseChangeContext.geometry.getter(v22);
      v24 = ScrollGeometry.contentOffset.getter(v23);
      v19(v11, v7);
      v26 = v29;
      v27 = v30;
      sub_10006DD80(&v31);
      State.wrappedValue.getter(v28);
      v26 = v29;
      v27 = v30;
      *(double *)v25 = v24;
      v25[1] = v28[1];
      State.wrappedValue.setter(v25, v14);
      return sub_10006DDA8((uint64_t)&v29);
    }
  }
  return result;
}

uint64_t sub_100059740@<X0>(uint64_t a1@<X8>)
{
  return sub_100057954(a1);
}

uint64_t sub_100059780@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __n128 v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  _OWORD v106[10];
  _OWORD v107[10];
  _OWORD v108[2];
  _OWORD v109[8];
  char v110;
  __int128 v111;
  __int128 v112;
  _OWORD v113[10];
  __int128 v114;

  v3 = v2;
  v5 = type metadata accessor for AccessibilityTraits(0, a2);
  v102 = *(_QWORD *)(v5 - 8);
  v103 = v5;
  __chkstk_darwin(v5);
  v101 = (char *)&v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008B04(&qword_101495CB0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v100 = (char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v105 = (char *)&v87 - v11;
  v13 = __chkstk_darwin(v12);
  v104 = (char *)&v87 - v14;
  v15 = type metadata accessor for LocalizedStringKey.StringInterpolation(0, v13);
  __chkstk_darwin(v15);
  v17 = (char *)&v87 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = *(_OWORD *)(v3 + 40);
  v18 = *((_QWORD *)&v114 + 1);
  KeyPath = swift_getKeyPath(&unk_100E26DB8);
  v20 = swift_getKeyPath(&unk_100E26DE0);
  swift_retain(v18);
  static Published.subscript.getter(&v111, v21, KeyPath, v20);
  swift_release(KeyPath);
  swift_release(v20);
  sub_10006E910((uint64_t)&v114);
  if (v111 != 1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a1, 1, 1, v7);
  v94 = v8;
  v95 = v7;
  v96 = a1;
  v22 = *(_QWORD *)(v3 + 80);
  *(_QWORD *)&v111 = *(_QWORD *)(v3 + 72);
  *((_QWORD *)&v111 + 1) = v22;
  v23 = sub_10006C008();
  swift_bridgeObjectRetain(v22);
  v93 = v23;
  v24 = Text.init<A>(_:)(&v111, &type metadata for String, v23);
  v91 = v27;
  v28 = *(void **)v3;
  if (*(_QWORD *)v3)
  {
    v29 = v24;
    v30 = v25;
    v31 = v26;
    v32 = swift_getKeyPath(&unk_100E26B00);
    v33 = swift_getKeyPath(&unk_100E26B28);
    v34 = v28;
    static Published.subscript.getter(&v111, v34, v32, v33);

    swift_release(v32);
    v35 = swift_release(v33);
    if ((v111 & 1) != 0)
      v36 = static Color.white.getter(v35);
    else
      v36 = static Color.blue.getter(v35);
    v38 = v36;
    v39 = v30 & 1;
    v40 = v91;
    v41 = Text.foregroundColor(_:)(v36, v29, v91, v39, v31);
    v97 = v42;
    v98 = v41;
    v44 = v43;
    v99 = v45;
    swift_release(v38);
    v92 = v44 & 1;
    sub_10006B77C(v29, v40, v39);
    swift_bridgeObjectRelease(v31);
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(1, 2);
    v46._countAndFlagsBits = 0;
    v46._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v46);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)(v3 + 56));
    v47._countAndFlagsBits = 32;
    v47._object = (void *)0xE100000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v47);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v98, v97, v44 & 1, v99);
    v48._countAndFlagsBits = 0;
    v48._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v48);
    v49 = LocalizedStringKey.init(stringInterpolation:)(v17);
    v50 = Text.init(_:tableName:bundle:comment:)(v49);
    v90 = v51;
    v91 = v50;
    v52 = v51;
    v54 = v53;
    v88 = v53;
    v56 = v55 & 1;
    v89 = v55 & 1;
    v57 = swift_allocObject(&unk_10119E3D8, 120, 7);
    v58 = *(_OWORD *)(v3 + 80);
    *(_OWORD *)(v57 + 80) = *(_OWORD *)(v3 + 64);
    *(_OWORD *)(v57 + 96) = v58;
    *(_QWORD *)(v57 + 112) = *(_QWORD *)(v3 + 96);
    v59 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)(v57 + 16) = *(_OWORD *)v3;
    *(_OWORD *)(v57 + 32) = v59;
    v60 = *(_OWORD *)(v3 + 48);
    *(_OWORD *)(v57 + 48) = *(_OWORD *)(v3 + 32);
    *(_OWORD *)(v57 + 64) = v60;
    sub_100062690(v3);
    sub_10006BB40(v50, v52, v56);
    swift_bridgeObjectRetain(v54);
    v61 = swift_retain(v57);
    v62 = static VerticalAlignment.center.getter(v61);
    sub_1000503C8(v3, v50, v52, v56, v54, (uint64_t)&v111);
    sub_10006B77C(v50, v52, v56);
    swift_release(v57);
    swift_bridgeObjectRelease(v54);
    *(_OWORD *)((char *)v108 + 9) = *(_OWORD *)((char *)&v113[4] + 9);
    v107[9] = v113[3];
    v108[0] = v113[4];
    v107[4] = v111;
    v107[5] = v112;
    v107[6] = v113[0];
    v107[7] = v113[1];
    v107[8] = v113[2];
    v110 = 0;
    *(_OWORD *)((char *)&v109[3] + 7) = v113[1];
    *(_OWORD *)((char *)&v109[2] + 7) = v113[0];
    *(_OWORD *)((char *)&v109[1] + 7) = v112;
    *(_OWORD *)((char *)v109 + 7) = v111;
    v109[7] = *(_OWORD *)((char *)v108 + 9);
    *(_OWORD *)((char *)&v109[6] + 7) = v113[4];
    *(_OWORD *)((char *)&v109[5] + 7) = v113[3];
    *(_OWORD *)((char *)&v109[4] + 7) = v113[2];
    *(_QWORD *)&v111 = sub_100070DF0;
    *((_QWORD *)&v111 + 1) = v57;
    *(_QWORD *)&v112 = v62;
    *((_QWORD *)&v112 + 1) = 0x4010000000000000;
    LOBYTE(v113[0]) = 0;
    *(_OWORD *)((char *)&v113[3] + 1) = v109[3];
    *(_OWORD *)((char *)&v113[2] + 1) = v109[2];
    *(_OWORD *)((char *)&v113[1] + 1) = v109[1];
    *(_OWORD *)((char *)v113 + 1) = v109[0];
    *(_OWORD *)((char *)&v113[7] + 1) = v109[7];
    *(_OWORD *)((char *)&v113[6] + 1) = v109[6];
    *(_OWORD *)((char *)&v113[5] + 1) = v109[5];
    *(_OWORD *)((char *)&v113[4] + 1) = v109[4];
    *(_OWORD *)((char *)&v113[8] + 8) = xmmword_100E27260;
    BYTE8(v113[9]) = 0;
    v106[9] = v113[7];
    v107[0] = v113[8];
    *(_OWORD *)((char *)v107 + 9) = *(_OWORD *)((char *)&v113[8] + 9);
    v106[8] = v113[6];
    v106[4] = v113[2];
    v106[5] = v113[3];
    v106[6] = v113[4];
    v106[7] = v113[5];
    v106[0] = v111;
    v106[1] = v112;
    v106[2] = v113[0];
    v106[3] = v113[1];
    v63 = sub_100008B04(&qword_101495CB8);
    v64 = sub_10006E0EC();
    v65 = (uint64_t)v100;
    View.accessibilityAutomationType(_:)(9, v63, v64);
    v66 = sub_10006E170((uint64_t)&v111);
    v67 = v101;
    static AccessibilityTraits.isButton.getter(v66);
    v68 = (uint64_t)v105;
    v69 = v95;
    ModifiedContent<>.accessibilityRemoveTraits(_:)(v67, v95);
    (*(void (**)(char *, uint64_t))(v102 + 8))(v67, v103);
    sub_100010CC4(v65, &qword_101495CB0);
    v70 = *(_QWORD *)(v3 + 96);
    *(_QWORD *)&v106[0] = *(_QWORD *)(v3 + 88);
    *((_QWORD *)&v106[0] + 1) = v70;
    swift_bridgeObjectRetain(v70);
    v71 = Text.init<A>(_:)(v106, &type metadata for String, v93);
    v73 = v72;
    v75 = v74;
    v77 = v76 & 1;
    v78 = swift_allocObject(&unk_10119E400, 120, 7);
    v79 = *(_OWORD *)(v3 + 80);
    *(_OWORD *)(v78 + 80) = *(_OWORD *)(v3 + 64);
    *(_OWORD *)(v78 + 96) = v79;
    *(_QWORD *)(v78 + 112) = *(_QWORD *)(v3 + 96);
    v80 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)(v78 + 16) = *(_OWORD *)v3;
    *(_OWORD *)(v78 + 32) = v80;
    v81 = *(_OWORD *)(v3 + 48);
    *(_OWORD *)(v78 + 48) = *(_OWORD *)(v3 + 32);
    *(_OWORD *)(v78 + 64) = v81;
    sub_100062690(v3);
    v82 = (uint64_t)v104;
    ModifiedContent<>.accessibilityAction(named:_:)(v71, v73, v77, v75, sub_10006E2E8, v78, v69);
    swift_release(v78);
    sub_10006B77C(v71, v73, v77);
    swift_bridgeObjectRelease(v75);
    sub_10006B77C(v98, v97, v92);
    swift_bridgeObjectRelease(v99);
    sub_10006B77C(v91, v90, v89);
    swift_bridgeObjectRelease(v88);
    sub_100010CC4(v68, &qword_101495CB0);
    v83 = v96;
    sub_1000207BC(v82, v96, &qword_101495CB0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v94 + 56))(v83, 0, 1, v69);
  }
  else
  {
    v84 = *(_QWORD *)(v3 + 8);
    v85 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
    v86 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
    result = EnvironmentObject.error()(0, v84, v85, v86);
    __break(1u);
  }
  return result;
}

void sub_100059EB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  void (*v5)(id *);
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_BYTE *)(a1 + 32);
  sub_10002057C(v2, v3, v4);
  v5 = (void (*)(id *))sub_10001A21C(v2, v3, v4);
  v7 = v6;
  sub_10001A774(v2, v3, v4);
  v9 = *(id *)(*(_QWORD *)(a1 + 48) + OBJC_IVAR____TtCO4Maps25PlaceSummaryViewModelUnit11UserLibrary_mapItem);
  v8 = v9;
  v5(&v9);
  swift_release(v7);

}

uint64_t sub_100059F5C@<X0>(uint64_t a1@<X8>)
{
  __n128 *v1;

  return sub_100059780(a1, v1[3]);
}

uint64_t sub_100059FA4@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)();
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  void (*v65)();
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;

  v3 = v2;
  v51 = a1;
  v50 = type metadata accessor for AccessibilityTraits(0, a2);
  v49 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v48 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_100008B04(&qword_101495CC8);
  __chkstk_darwin(v47);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v45 = (char *)&v40 - v8;
  __chkstk_darwin(v9);
  v46 = (char *)&v40 - v10;
  v11 = swift_allocObject(&unk_10119E428, 88, 7);
  v12 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v11 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v11 + 64) = v12;
  *(_QWORD *)(v11 + 80) = *(_QWORD *)(v2 + 64);
  v13 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v11 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v11 + 32) = v13;
  v65 = sub_100070DF4;
  v66 = v11;
  sub_10006E304(v2);
  swift_retain(v11);
  sub_10005A3BC(v2, (uint64_t)&v67);
  swift_release(v11);
  v14 = v66;
  v15 = v67;
  v16 = v68;
  v17 = v69;
  v42 = v70;
  v41 = v71;
  v18 = v73;
  v43 = v72;
  v19 = v75;
  v44 = v74;
  v52 = v65;
  v53 = v66;
  v54 = v67;
  v55 = v68;
  v56 = v69;
  v57 = v70;
  v58 = v71;
  v59 = v72;
  v60 = v73;
  v61 = v74;
  v62 = v75;
  v63 = v76;
  v64 = v77;
  v20 = sub_100008B04(&qword_101495CD0);
  v21 = sub_100010D70(&qword_101495CD8, &qword_101495CD0, "=u7");
  View.accessibility(identifier:)(0x65746F4E72657355, 0xEE006E6F74747542, v20, v21);
  swift_release(v14);
  sub_10006B77C(v15, v16, v17);
  swift_release(v19);
  swift_release(v18);
  swift_release(v41);
  swift_bridgeObjectRelease(v42);
  swift_release(v43);
  swift_release(v44);
  v22 = (uint64_t)v45;
  v23 = v47;
  ModifiedContent<>.accessibilityAutomationType(_:)(9, v47);
  v24 = sub_100010CC4((uint64_t)v6, &qword_101495CC8);
  v25 = v48;
  static AccessibilityTraits.isButton.getter(v24);
  v26 = (uint64_t)v46;
  ModifiedContent<>.accessibilityRemoveTraits(_:)(v25, v23);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v25, v50);
  sub_100010CC4(v22, &qword_101495CC8);
  v27 = *(_QWORD *)(v2 + 64);
  v65 = *(void (**)())(v2 + 56);
  v66 = v27;
  v28 = sub_10006C008();
  swift_bridgeObjectRetain(v27);
  v29 = Text.init<A>(_:)(&v65, &type metadata for String, v28);
  v31 = v30;
  v33 = v32;
  v35 = v34 & 1;
  v36 = swift_allocObject(&unk_10119E450, 88, 7);
  v37 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(v36 + 48) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v36 + 64) = v37;
  *(_QWORD *)(v36 + 80) = *(_QWORD *)(v3 + 64);
  v38 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v36 + 16) = *(_OWORD *)v3;
  *(_OWORD *)(v36 + 32) = v38;
  sub_10006E304(v3);
  ModifiedContent<>.accessibilityAction(named:_:)(v29, v31, v35, v33, sub_10006E3B0, v36, v23);
  swift_release(v36);
  sub_10006B77C(v29, v31, v35);
  swift_bridgeObjectRelease(v33);
  return sub_100010CC4(v26, &qword_101495CC8);
}

uint64_t sub_10005A3BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  Swift::String v4;
  Swift::String v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];

  v4 = *(Swift::String *)(*(_QWORD *)(a1 + 48) + OBJC_IVAR____TtCO4Maps25PlaceSummaryViewModelUnit8UserNote_userNote);
  v33[0] = 10256610;
  v33[1] = 0xA300000000000000;
  String.append(_:)(v4);
  swift_bridgeObjectRetain(0xA300000000000000);
  v5._countAndFlagsBits = 10322146;
  v5._object = (void *)0xA300000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(0xA300000000000000);
  v6 = sub_10006C008();
  v7 = Text.init<A>(_:)(v33, &type metadata for String, v6);
  v11 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    v12 = v7;
    v13 = v8;
    v14 = v9;
    v15 = v10;
    KeyPath = swift_getKeyPath(&unk_100E26B00);
    v17 = swift_getKeyPath(&unk_100E26B28);
    v18 = v11;
    static Published.subscript.getter(v33, v18, KeyPath, v17);

    swift_release(KeyPath);
    v19 = swift_release(v17);
    LOBYTE(v18) = v33[0];
    v20 = static Font.subheadline.getter(v19);
    v21 = swift_getKeyPath(&unk_100E26B78);
    sub_10006BB40(v12, v13, v14 & 1);
    if ((v18 & 1) != 0)
    {
      v22 = qword_101490CD8;
      swift_bridgeObjectRetain(v15);
      if (v22 != -1)
        swift_once(&qword_101490CD8, sub_100043F38);
      v23 = &qword_1014D46A0;
    }
    else
    {
      v24 = qword_101490CE0;
      swift_bridgeObjectRetain(v15);
      if (v24 != -1)
        swift_once(&qword_101490CE0, sub_100043F7C);
      v23 = &qword_1014D46A8;
    }
    v25 = *v23;
    swift_retain(*v23);
    v26 = swift_getKeyPath(&unk_100E26100);
    v27 = swift_getKeyPath(&unk_100E26B48);
    v28 = v14 & 1;
    sub_10006BB40(v12, v13, v28);
    swift_bridgeObjectRetain(v15);
    swift_retain(v21);
    swift_retain(v20);
    swift_retain(v26);
    swift_retain(v25);
    sub_10006B77C(v12, v13, v28);
    swift_release(v25);
    swift_release(v26);
    swift_release(v20);
    swift_release(v21);
    swift_bridgeObjectRelease(v15);
    sub_10006B77C(v12, v13, v28);
    result = swift_bridgeObjectRelease(v15);
    *(_QWORD *)a2 = v12;
    *(_QWORD *)(a2 + 8) = v13;
    *(_BYTE *)(a2 + 16) = v28;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v21;
    *(_QWORD *)(a2 + 40) = v20;
    *(_QWORD *)(a2 + 48) = v26;
    *(_QWORD *)(a2 + 56) = v25;
    *(_QWORD *)(a2 + 64) = v27;
    *(_QWORD *)(a2 + 72) = 1;
    *(_BYTE *)(a2 + 80) = 0;
  }
  else
  {
    v30 = *(_QWORD *)(a1 + 8);
    v31 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
    v32 = sub_10000BC84((unint64_t *)&qword_101494BB0, type metadata accessor for PlaceSummaryViewModelTemplate, (uint64_t)&unk_100E2857C);
    result = EnvironmentObject.error()(0, v30, v31, v32);
    __break(1u);
  }
  return result;
}

void sub_10005A6A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  void (*v5)(id *);
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_BYTE *)(a1 + 32);
  sub_10002057C(v2, v3, v4);
  v5 = (void (*)(id *))sub_10001A21C(v2, v3, v4);
  v7 = v6;
  sub_10001A774(v2, v3, v4);
  v9 = *(id *)(*(_QWORD *)(a1 + 48) + OBJC_IVAR____TtCO4Maps25PlaceSummaryViewModelUnit8UserNote_mapItem);
  v8 = v9;
  v5(&v9);
  swift_release(v7);

}

uint64_t sub_10005A74C@<X0>(uint64_t a1@<X8>)
{
  __n128 *v1;

  return sub_100059FA4(a1, v1[1]);
}

void sub_10005A78C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v44[2];
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v80 = a2;
  v65 = sub_100008B04(&qword_101494C00);
  __chkstk_darwin(v65);
  v66 = (char *)v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100008B04(&qword_101494C08);
  __chkstk_darwin(v4);
  v67 = (char *)v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_100008B04(&qword_101494C10);
  __chkstk_darwin(v64);
  v56 = (char *)v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v58 = (char *)v44 - v8;
  v47 = sub_100008B04(&qword_101494C18);
  __chkstk_darwin(v47);
  v48 = (char *)v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008B04(&qword_101494C20);
  __chkstk_darwin(v10);
  v50 = (char *)v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_100008B04(&qword_101494C28);
  __chkstk_darwin(v45);
  v46 = (char *)v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100008B04(&qword_101494C30);
  __chkstk_darwin(v13);
  v49 = (char *)v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_100008B04(&qword_101494C38);
  __chkstk_darwin(v59);
  v68 = (char *)v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_100008B04(&qword_101494C40);
  __chkstk_darwin(v52);
  v54 = (char *)v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_100008B04(&qword_101494C48);
  __chkstk_darwin(v53);
  v44[1] = (char *)v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100008B04(&qword_101494C50);
  __chkstk_darwin(v18);
  v57 = (char *)v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_QWORD *)(a1 + 16);
  v20 = *(_QWORD *)(a1 + 24);
  v55 = a1;
  v51 = v20;
  v23 = _s9ImageViewVMa(255, v21, v20, v22);
  v24 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v25 = type metadata accessor for ModifiedContent(255, v23, v24);
  v61 = v18;
  v26 = type metadata accessor for _ConditionalContent(0, v25, v18);
  v63 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v62 = (char *)v44 - v27;
  v81 = v28;
  v71 = v13;
  v29 = type metadata accessor for _ConditionalContent(0, v28, v13);
  v70 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v69 = (char *)v44 - v30;
  v84 = v31;
  v72 = v10;
  v32 = type metadata accessor for _ConditionalContent(0, v31, v10);
  v73 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v74 = (char *)v44 - v33;
  __chkstk_darwin(v34);
  v82 = v23;
  __chkstk_darwin(v35);
  v83 = v25;
  __chkstk_darwin(v36);
  __chkstk_darwin(v37);
  __chkstk_darwin(v38);
  v60 = (char *)v44 - v39;
  v78 = v40;
  v79 = v4;
  v41 = type metadata accessor for _ConditionalContent(0, v40, v4);
  v76 = *(_QWORD *)(v41 - 8);
  v77 = v41;
  __chkstk_darwin(v41);
  v75 = (char *)v44 - v42;
  __asm { BR              X10 }
}

uint64_t sub_10005ACD8()
{
  uint64_t v0;
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  unint64_t v16;
  uint64_t WitnessTable;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;

  if (*(_BYTE *)(v8 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_cornerRadius + 8))
    v12 = 0.0;
  else
    v12 = *(double *)(v8 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_cornerRadius);
  v13 = v0 + *(int *)(v1[12] + 36);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *v1 = v8;
  v14(v6, v13, v10);
  v15 = swift_retain_n(v8, 2);
  sub_1000454DC(v15, v6, v10, v1[8], v2, v12);
  v16 = v1[40];
  WitnessTable = swift_getWitnessTable("Ł7", v16);
  View.accessibility(identifier:)(0xD000000000000022, 0x8000000100E44120, v16, WitnessTable);
  (*(void (**)(uint64_t, unint64_t))(v4 + 8))(v2, v16);
  v18 = sub_10000BC84((unint64_t *)&qword_10149CE30, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v1[49] = WitnessTable;
  v1[50] = v18;
  v19 = v1[41];
  v20 = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v19, v1 + 49);
  v21 = v1[17];
  sub_100129028(v7, v19, v21);
  v22 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v22(v7, v19);
  sub_100128F38(v21, v19, v5);
  v23 = sub_1000629F4();
  v24 = v1[19];
  sub_100043BFC(v5, v19, v1[18], v20, v23);
  v22(v5, v19);
  v1[47] = v20;
  v1[48] = v23;
  v25 = v1[39];
  v26 = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v25, v1 + 47);
  v27 = sub_100070714(&qword_101494CB0, &qword_101494C30, (uint64_t (*)(void))sub_1000628E8);
  v28 = v1[26];
  sub_100043BFC(v24, v25, v1[28], v26, v27);
  (*(void (**)(uint64_t, uint64_t))(v1[20] + 8))(v24, v25);
  v1[45] = v26;
  v1[46] = v27;
  v29 = v1[42];
  v30 = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v29, v1 + 45);
  v31 = sub_100062B28();
  v32 = v1[31];
  sub_100043BFC(v28, v29, v1[29], v30, v31);
  (*(void (**)(uint64_t, uint64_t))(v1[27] + 8))(v28, v29);
  v1[43] = v30;
  v1[44] = v31;
  v33 = v1[36];
  v34 = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v33, v1 + 43);
  v35 = sub_100062CA0();
  v36 = v1[33];
  sub_100043BFC(v32, v33, v1[37], v34, v35);
  sub_1000200C0(*v1);
  (*(void (**)(uint64_t, uint64_t))(v1[30] + 8))(v32, v33);
  v22(v1[17], v19);
  v37 = swift_getWitnessTable("Ł7", v1[40]);
  v38 = sub_10000BC84((unint64_t *)&qword_10149CE30, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  *(_QWORD *)(v11 - 192) = v37;
  *(_QWORD *)(v11 - 184) = v38;
  v39 = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1[41], v11 - 192);
  v40 = sub_1000629F4();
  *(_QWORD *)(v11 - 208) = v39;
  *(_QWORD *)(v11 - 200) = v40;
  v41 = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v25, v11 - 208);
  v42 = sub_100070714(&qword_101494CB0, &qword_101494C30, (uint64_t (*)(void))sub_1000628E8);
  *(_QWORD *)(v11 - 224) = v41;
  *(_QWORD *)(v11 - 216) = v42;
  v43 = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1[42], v11 - 224);
  v44 = sub_100062B28();
  *(_QWORD *)(v11 - 240) = v43;
  *(_QWORD *)(v11 - 232) = v44;
  v45 = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v33, v11 - 240);
  v46 = sub_100062CA0();
  *(_QWORD *)(v11 - 256) = v45;
  *(_QWORD *)(v11 - 248) = v46;
  v47 = v1[35];
  swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v47, v11 - 256);
  sub_100128F38(v36, v47, v1[38]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1[34] + 8))(v36, v47);
}

void sub_10005C324()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  unint64_t v3;
  unint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t WitnessTable;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  KeyPath = swift_getKeyPath(&unk_100E26038);
  *(_QWORD *)(v0 + 856) = KeyPath;
  *(_QWORD *)(v0 + 864) = 0;
  *(_WORD *)(v0 + 872) = 0;
  v3 = sub_100062C18();
  v4 = sub_100062C5C();
  swift_retain(KeyPath);
  _ConditionalContent<>.init(storage:)(v0 + 856, &_s16QueryAcceleratorVN, &_s7AddViewVN, v3, v4);
  v5 = *(_BYTE *)(v0 + 960);
  v6 = *(_BYTE *)(v0 + 961);
  v7 = *(_QWORD *)(v0 + 32);
  v8 = *(_QWORD *)(v0 + 40);
  *(_OWORD *)v8 = *(_OWORD *)(v0 + 944);
  *(_BYTE *)(v8 + 16) = v5;
  *(_BYTE *)(v8 + 17) = v6;
  swift_storeEnumTagMultiPayload(v8, v7, 1);
  v9 = sub_100008B04(&qword_101494CC8);
  v10 = sub_100070714(&qword_101494CB0, &qword_101494C30, (uint64_t (*)(void))sub_1000628E8);
  v11 = sub_100062BAC();
  v12 = *(_QWORD *)(v0 + 56);
  _ConditionalContent<>.init(storage:)(v8, *(_QWORD *)(v0 + 224), v9, v10, v11);
  WitnessTable = swift_getWitnessTable("Ł7", *(_QWORD *)(v0 + 320));
  v14 = sub_10000BC84((unint64_t *)&qword_10149CE30, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  *(_QWORD *)(v0 + 776) = WitnessTable;
  *(_QWORD *)(v0 + 784) = v14;
  v15 = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, *(_QWORD *)(v0 + 328), v0 + 776);
  v16 = sub_1000629F4();
  *(_QWORD *)(v0 + 760) = v15;
  *(_QWORD *)(v0 + 768) = v16;
  *(_QWORD *)(v0 + 744) = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1, v0 + 760);
  *(_QWORD *)(v0 + 752) = v10;
  v17 = *(_QWORD *)(v0 + 336);
  v18 = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v17, v0 + 744);
  v19 = sub_100062B28();
  v20 = *(_QWORD *)(v0 + 248);
  sub_100043CC0(v12, v17, *(_QWORD *)(v0 + 232), v18, v19);
  sub_100010CC4(v12, &qword_101494C20);
  *(_QWORD *)(v0 + 728) = v18;
  *(_QWORD *)(v0 + 736) = v19;
  v21 = *(_QWORD *)(v0 + 288);
  v22 = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v21, v0 + 728);
  v23 = sub_100062CA0();
  sub_100043BFC(v20, v21, *(_QWORD *)(v0 + 296), v22, v23);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 240) + 8))(v20, v21);
  swift_release(KeyPath);
  JUMPOUT(0x10005C1FCLL);
}

void sub_10005C52C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t WitnessTable;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  *(_QWORD *)(v0 + 864) = 0;
  *(_QWORD *)(v0 + 856) = 0;
  *(_WORD *)(v0 + 872) = 256;
  v2 = sub_100062C18();
  v3 = sub_100062C5C();
  _ConditionalContent<>.init(storage:)(v0 + 856, &_s16QueryAcceleratorVN, &_s7AddViewVN, v2, v3);
  v4 = *(_BYTE *)(v0 + 960);
  v5 = *(_BYTE *)(v0 + 961);
  v6 = *(_QWORD *)(v0 + 32);
  v7 = *(_QWORD *)(v0 + 40);
  *(_OWORD *)v7 = *(_OWORD *)(v0 + 944);
  *(_BYTE *)(v7 + 16) = v4;
  *(_BYTE *)(v7 + 17) = v5;
  swift_storeEnumTagMultiPayload(v7, v6, 1);
  v8 = sub_100008B04(&qword_101494CC8);
  v9 = sub_100070714(&qword_101494CB0, &qword_101494C30, (uint64_t (*)(void))sub_1000628E8);
  v10 = sub_100062BAC();
  v11 = *(_QWORD *)(v0 + 56);
  _ConditionalContent<>.init(storage:)(v7, *(_QWORD *)(v0 + 224), v8, v9, v10);
  WitnessTable = swift_getWitnessTable("Ł7", *(_QWORD *)(v0 + 320));
  v13 = sub_10000BC84((unint64_t *)&qword_10149CE30, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  *(_QWORD *)(v0 + 840) = WitnessTable;
  *(_QWORD *)(v0 + 848) = v13;
  v14 = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, *(_QWORD *)(v0 + 328), v0 + 840);
  v15 = sub_1000629F4();
  *(_QWORD *)(v0 + 824) = v14;
  *(_QWORD *)(v0 + 832) = v15;
  *(_QWORD *)(v0 + 808) = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1, v0 + 824);
  *(_QWORD *)(v0 + 816) = v9;
  v16 = *(_QWORD *)(v0 + 336);
  v17 = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v16, v0 + 808);
  v18 = sub_100062B28();
  v19 = *(_QWORD *)(v0 + 248);
  sub_100043CC0(v11, v16, *(_QWORD *)(v0 + 232), v17, v18);
  sub_100010CC4(v11, &qword_101494C20);
  *(_QWORD *)(v0 + 792) = v17;
  *(_QWORD *)(v0 + 800) = v18;
  v20 = *(_QWORD *)(v0 + 288);
  v21 = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v20, v0 + 792);
  v22 = sub_100062CA0();
  sub_100043BFC(v19, v20, *(_QWORD *)(v0 + 296), v21, v22);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 240) + 8))(v19, v20);
  JUMPOUT(0x10005C1FCLL);
}

uint64_t sub_10005C730@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t TupleTypeMetadata2;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t KeyPath;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t WitnessTable;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD v82[2];
  _QWORD v83[2];
  _QWORD v84[2];
  _QWORD v85[2];
  _QWORD v86[2];
  _QWORD v87[2];
  _QWORD v88[2];
  uint64_t v89;

  v3 = v2;
  v80 = a2;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v7 = type metadata accessor for ModifiedContent(0, v5, v6);
  v69 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v71 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v70 = (uint64_t)&v68 - v10;
  v11 = sub_10000E5D4(&qword_101495DA0);
  v12 = sub_10000E5D4(&qword_101495DA8);
  v68 = a1;
  v13 = *(_QWORD *)(a1 + 24);
  v76 = v5;
  v81 = v13;
  v15 = _s12ContactBadgeVMa(255, v5, v13, v14);
  v16 = type metadata accessor for ModifiedContent(255, v15, &type metadata for _FrameLayout);
  v17 = type metadata accessor for ModifiedContent(255, v16, &type metadata for _OffsetEffect);
  v18 = type metadata accessor for _ConditionalContent(255, v12, v17);
  v19 = type metadata accessor for Optional(255, v18);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v11, v19, 0, 0);
  v21 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for TupleView<A>, v21);
  v22 = type metadata accessor for ZStack(0, v21);
  v73 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v24 = (char *)&v68 - v23;
  v75 = v25;
  v26 = type metadata accessor for ModifiedContent(0, v25, v6);
  v74 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v28 = (char *)&v68 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v31 = (char *)&v68 - v30;
  v32 = type metadata accessor for _ConditionalContent(0, v26, v7);
  v78 = *(_QWORD *)(v32 - 8);
  v79 = v32;
  __chkstk_darwin(v32);
  v77 = (char *)&v68 - v33;
  v34 = v3;
  v35 = *(_QWORD *)(v3 + 8);
  KeyPath = swift_getKeyPath(&unk_100E26E90);
  v37 = swift_getKeyPath(&unk_100E26EB8);
  swift_retain(v35);
  static Published.subscript.getter(&v89, v38, KeyPath, v37);
  swift_release(v35);
  swift_release(KeyPath);
  v39 = swift_release(v37);
  v40 = v89;
  if (v89)
  {
    v41 = static Alignment.bottomTrailing.getter(v39);
    v42 = __chkstk_darwin(v41);
    v43 = v76;
    v76 = v7;
    v44 = v81;
    *(&v68 - 4) = v43;
    *(&v68 - 3) = v44;
    *(&v68 - 2) = v40;
    *(&v68 - 1) = v34;
    ZStack.init(alignment:content:)(v42);
    v45 = v75;
    v46 = swift_getWitnessTable((const char *)&protocol conformance descriptor for ZStack<A>, v75);
    View.accessibility(identifier:)(0xD000000000000015, 0x8000000100E44640, v45, v46);
    v47 = v24;
    v48 = v45;
    (*(void (**)(char *, uint64_t))(v73 + 8))(v47, v45);
    v49 = sub_10000BC84((unint64_t *)&qword_10149CE30, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    v83[0] = v46;
    v83[1] = v49;
    v50 = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v26, v83);
    sub_100129028((uint64_t)v28, v26, (uint64_t)v31);
    v51 = *(void (**)(char *, uint64_t))(v74 + 8);
    v51(v28, v26);
    sub_100128F38((uint64_t)v31, v26, (uint64_t)v28);
    v82[0] = v44;
    v82[1] = v49;
    v7 = v76;
    v52 = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v76, v82);
    v53 = (uint64_t)v77;
    sub_100043BFC((uint64_t)v28, v26, v7, v50, v52);
    swift_release(v40);
    v51(v28, v26);
    v51(v31, v26);
  }
  else
  {
    v54 = (uint64_t)v71;
    v55 = v81;
    View.accessibility(identifier:)(0xD000000000000017, 0x8000000100E44620, v76, v81);
    v56 = sub_10000BC84((unint64_t *)&qword_10149CE30, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    v88[0] = v55;
    v88[1] = v56;
    v57 = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v7, v88);
    v58 = v70;
    sub_100129028(v54, v7, v70);
    v59 = *(void (**)(uint64_t, uint64_t))(v69 + 8);
    v59(v54, v7);
    sub_100128F38(v58, v7, v54);
    v48 = v75;
    v87[0] = swift_getWitnessTable((const char *)&protocol conformance descriptor for ZStack<A>, v75);
    v87[1] = v56;
    v60 = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v26, v87);
    v61 = v77;
    sub_100043CC0(v54, v26, v7, v60, v57);
    v59(v54, v7);
    v59(v58, v7);
    v53 = (uint64_t)v61;
  }
  v62 = swift_getWitnessTable((const char *)&protocol conformance descriptor for ZStack<A>, v48);
  v63 = sub_10000BC84((unint64_t *)&qword_10149CE30, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v86[0] = v62;
  v86[1] = v63;
  v64 = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v26, v86);
  v85[0] = v81;
  v85[1] = v63;
  v65 = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v7, v85);
  v84[0] = v64;
  v84[1] = v65;
  v66 = v79;
  swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v79, v84);
  sub_100128F38(v53, v66, v80);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v78 + 8))(v53, v66);
}

uint64_t sub_10005CD90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t KeyPath;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  _QWORD *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v79;
  uint64_t v80;
  uint64_t WitnessTable;
  char *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(uint64_t, uint64_t);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(char *, char *, uint64_t);
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  void (*v112)(char *, uint64_t);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD v152[2];
  _QWORD v153[2];
  uint64_t v154;
  char *v155;
  uint64_t v156;
  char v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  _QWORD v161[2];
  _QWORD v162[2];
  uint64_t v163;
  _QWORD v164[2];
  _QWORD v165[2];
  _QWORD v166[4];
  _QWORD v167[2];
  uint64_t v168;
  _QWORD v169[2];
  _QWORD v170[2];
  uint64_t v171;
  char v172;
  uint64_t v173;
  char v174;
  __int128 v175;

  v129 = a4;
  v149 = a2;
  v131 = a1;
  v144 = a5;
  v119 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(a1);
  v118 = (char *)&v117 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = _s12ContactBadgeVMa(0, v7, v8, v8);
  v122 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v121 = (uint64_t *)((char *)&v117 - v10);
  v148 = v11;
  v12 = type metadata accessor for ModifiedContent(0, v11, &type metadata for _FrameLayout);
  v124 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v123 = (char *)&v117 - v13;
  v147 = v14;
  v15 = type metadata accessor for ModifiedContent(0, v14, &type metadata for _OffsetEffect);
  v125 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v127 = (char *)&v117 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v126 = (uint64_t)&v117 - v18;
  v128 = sub_10000E5D4(&qword_101495DA8);
  v146 = v15;
  v140 = type metadata accessor for _ConditionalContent(255, v128, v15);
  v143 = type metadata accessor for Optional(0, v140);
  v139 = *(_QWORD *)(v143 - 8);
  __chkstk_darwin(v143);
  v142 = (char *)&v117 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v141 = (char *)&v117 - v21;
  v135 = sub_100008B04(&qword_101494DD0);
  __chkstk_darwin(v135);
  v137 = (uint64_t)&v117 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v134);
  v136 = (char *)&v117 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = type metadata accessor for Image.ResizingMode(0);
  v24 = *(_QWORD *)(v130 - 8);
  __chkstk_darwin(v130);
  v26 = (char *)&v117 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100008B04(&qword_101495DB0);
  __chkstk_darwin(v27);
  v29 = (char *)&v117 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for PlaceSummaryImageViewModel.ImageType(0);
  __chkstk_darwin(v30);
  v32 = (uint64_t *)((char *)&v117 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  v33 = sub_100008B04(&qword_101495900);
  __chkstk_darwin(v33);
  v35 = (char *)&v117 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = sub_100008B04(&qword_101495DB8);
  __chkstk_darwin(v132);
  v37 = (char *)&v117 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = sub_100008B04(&qword_101495DA0);
  __chkstk_darwin(v145);
  v138 = (uint64_t)&v117 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  v133 = (uint64_t)&v117 - v40;
  __chkstk_darwin(v41);
  v150 = (uint64_t)&v117 - v42;
  v120 = a3;
  v129 = _s9ImageViewVMa(0, a3, v129, v43);
  v44 = *(_QWORD *)(v149 + 8);
  sub_1000202AC(v44 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_type, (uint64_t)v32, type metadata accessor for PlaceSummaryImageViewModel.ImageType);
  if (swift_getEnumCaseMultiPayload(v32, v30) == 2)
  {
    v44 = *v32;
    v45 = swift_projectBox(*v32);
    v46 = *(int *)(v27 + 96);
    v47 = &v29[v46];
    v48 = v45 + v46;
    v49 = type metadata accessor for Image.TemplateRenderingMode(0);
    v50 = *(_QWORD *)(v49 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v47, v48, v49);
    (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v35, v47, v49);
  }
  else
  {
    swift_retain(v44);
    sub_1000202F0((uint64_t)v32, type metadata accessor for PlaceSummaryImageViewModel.ImageType);
    v51 = enum case for Image.TemplateRenderingMode.original(_:);
    v49 = type metadata accessor for Image.TemplateRenderingMode(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 104))(v35, v51, v49);
  }
  swift_release(v44);
  type metadata accessor for Image.TemplateRenderingMode(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v35, 0, 1, v49);
  v52 = Image.renderingMode(_:)(v35, v131);
  sub_100010CC4((uint64_t)v35, &qword_101495900);
  v53 = v130;
  (*(void (**)(char *, _QWORD, uint64_t))(v24 + 104))(v26, enum case for Image.ResizingMode.stretch(_:), v130);
  v131 = Image.resizable(capInsets:resizingMode:)(v26, v52, 0.0, 0.0, 0.0, 0.0);
  swift_release(v52);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v53);
  v54 = objc_msgSend((id)objc_opt_self(UIColor), "tertiaryLabelColor");
  v55 = Color.init(uiColor:)(v54);
  KeyPath = swift_getKeyPath(&unk_100E26100);
  v57 = v149;
  v58 = *(_QWORD *)(v149 + 8);
  swift_retain(v58);
  v59 = sub_100088AC0();
  swift_release(v58);
  LOBYTE(v58) = static Edge.Set.all.getter(v60);
  v61 = *(_QWORD *)(v57 + 16);
  v62 = v136;
  v63 = &v136[*(int *)(v134 + 20)];
  v64 = enum case for RoundedCornerStyle.continuous(_:);
  v65 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 104))(v63, v64, v65);
  *v62 = v61;
  v62[1] = v61;
  v66 = v137;
  sub_1000202AC((uint64_t)v62, v137, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v66 + *(int *)(v135 + 36)) = 256;
  sub_10000C1FC(v66, (uint64_t)&v37[*(int *)(v132 + 36)], &qword_101494DD0);
  v67 = v131;
  *(_QWORD *)v37 = v131;
  *((_QWORD *)v37 + 1) = 0;
  *((_WORD *)v37 + 8) = 257;
  *((_QWORD *)v37 + 3) = KeyPath;
  *((_QWORD *)v37 + 4) = v55;
  *((_QWORD *)v37 + 5) = v59;
  v37[48] = v58;
  v68 = v67;
  swift_retain(v67);
  swift_retain(KeyPath);
  swift_retain(v55);
  swift_retain(v59);
  sub_100010CC4(v66, &qword_101494DD0);
  sub_1000202F0((uint64_t)v62, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  swift_release(v59);
  swift_release(v55);
  swift_release(KeyPath);
  swift_release(v68);
  v69 = v133;
  sub_10000C1FC((uint64_t)v37, v133, &qword_101495DB8);
  *(_BYTE *)(v69 + *(int *)(v145 + 36)) = 1;
  sub_100010CC4((uint64_t)v37, &qword_101495DB8);
  sub_1000207BC(v69, v150, &qword_101495DA0);
  v70 = *(_QWORD *)(v57 + 8);
  swift_retain(v70);
  LOBYTE(v55) = sub_1000887C8();
  v71 = swift_release(v70);
  if ((v55 & 1) != 0)
  {
    v72 = static Alignment.center.getter(v71);
    _FrameLayout.init(width:height:alignment:)(&v171, 0x4030000000000000, 0, 0x4030000000000000, 0, v72, v73);
    v154 = v171;
    LOBYTE(v155) = v172;
    v156 = v173;
    v157 = v174;
    __asm { FMOV            V1.2D, #4.0 }
    v158 = v175;
    v159 = _Q1;
    v79 = sub_10002067C(&qword_101495DC0, &qword_101495DA8, sub_10006E644, (uint64_t)&protocol witness table for _OffsetEffect);
    v153[0] = swift_getWitnessTable(byte_100E270EC, v148);
    v153[1] = &protocol witness table for _FrameLayout;
    v152[0] = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v147, v153);
    v152[1] = &protocol witness table for _OffsetEffect;
    v80 = v146;
    WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v146, v152);
    v82 = v142;
    sub_100043BFC((uint64_t)&v154, v128, v80, v79, WitnessTable);
    v83 = v140;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v140 - 8) + 56))(v82, 0, 1, v140);
    v151 = v79;
    v84 = &v151;
  }
  else
  {
    swift_retain(v70);
    v85 = sub_100088940();
    swift_release(v70);
    v86 = v147;
    v87 = v148;
    v82 = v142;
    v88 = v146;
    if (v85)
    {
      v90 = v118;
      v89 = v119;
      v91 = v120;
      (*(void (**)(char *, uint64_t, uint64_t))(v119 + 16))(v118, v149 + *(int *)(v129 + 40), v120);
      v92 = v121;
      *v121 = v85;
      (*(void (**)(char *, char *, uint64_t))(v89 + 32))((char *)v92 + *(int *)(v87 + 36), v90, v91);
      swift_retain(v85);
      v94 = static Alignment.center.getter(v93);
      v96 = v95;
      v97 = swift_getWitnessTable(byte_100E270EC, v87);
      v149 = v85;
      v98 = v86;
      v99 = v123;
      View.frame(width:height:alignment:)(0x4030000000000000, 0, 0x4030000000000000, 0, v94, v96, v87, v97);
      (*(void (**)(uint64_t *, uint64_t))(v122 + 8))(v92, v87);
      v162[0] = v97;
      v162[1] = &protocol witness table for _FrameLayout;
      v100 = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v98, v162);
      v101 = (uint64_t)v127;
      View.offset(x:y:)(v98, v100, 4.0, 4.0);
      (*(void (**)(char *, uint64_t))(v124 + 8))(v99, v98);
      v161[0] = v100;
      v161[1] = &protocol witness table for _OffsetEffect;
      WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v88, v161);
      v102 = v126;
      sub_100129028(v101, v88, v126);
      v103 = *(void (**)(uint64_t, uint64_t))(v125 + 8);
      v103(v101, v88);
      sub_100128F38(v102, v88, v101);
      v104 = sub_10002067C(&qword_101495DC0, &qword_101495DA8, sub_10006E644, (uint64_t)&protocol witness table for _OffsetEffect);
      sub_100043CC0(v101, v128, v88, v104, WitnessTable);
      swift_release(v149);
      v103(v101, v88);
      v103(v102, v88);
      v83 = v140;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v140 - 8) + 56))(v82, 0, 1, v140);
      v160 = v104;
      v84 = &v160;
    }
    else
    {
      v83 = v140;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v140 - 8) + 56))(v142, 1, 1, v140);
      v105 = sub_10002067C(&qword_101495DC0, &qword_101495DA8, sub_10006E644, (uint64_t)&protocol witness table for _OffsetEffect);
      v170[0] = swift_getWitnessTable(byte_100E270EC, v87);
      v170[1] = &protocol witness table for _FrameLayout;
      v169[0] = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v86, v170);
      v169[1] = &protocol witness table for _OffsetEffect;
      WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v88, v169);
      v168 = v105;
      v84 = &v168;
    }
  }
  v84[1] = WitnessTable;
  swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v83);
  v106 = v139;
  v107 = *(void (**)(char *, char *, uint64_t))(v139 + 16);
  v108 = v141;
  v109 = v82;
  v110 = v82;
  v111 = v143;
  v107(v141, v109, v143);
  v112 = *(void (**)(char *, uint64_t))(v106 + 8);
  v112(v110, v111);
  v113 = v138;
  sub_10000C1FC(v150, v138, &qword_101495DA0);
  v154 = v113;
  v107(v110, v108, v111);
  v155 = v110;
  v167[0] = v145;
  v167[1] = v111;
  v166[2] = sub_10006E6AC();
  v114 = sub_10002067C(&qword_101495DC0, &qword_101495DA8, sub_10006E644, (uint64_t)&protocol witness table for _OffsetEffect);
  v166[0] = swift_getWitnessTable(byte_100E270EC, v148);
  v166[1] = &protocol witness table for _FrameLayout;
  v165[0] = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v147, v166);
  v165[1] = &protocol witness table for _OffsetEffect;
  v115 = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v146, v165);
  v164[0] = v114;
  v164[1] = v115;
  v163 = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v83, v164);
  v166[3] = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> A?, v111, &v163);
  sub_100043D84(&v154, 2uLL, (uint64_t)v167);
  v112(v108, v111);
  sub_100010CC4(v150, &qword_101495DA0);
  v112(v110, v111);
  return sub_100010CC4(v113, &qword_101495DA0);
}

uint64_t sub_10005DA94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  uint64_t v6;
  uint64_t KeyPath;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[5];
  int v34;
  __int16 v35;

  v2 = sub_100008B04(&qword_10149DAE0);
  __chkstk_darwin(v2);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (void *)objc_opt_self(UIColor);
  v6 = Color.init(uiColor:)(objc_msgSend(v5, "_maps_systemGrayColor"));
  KeyPath = swift_getKeyPath(&unk_100E26100);
  v32 = Color.init(uiColor:)(objc_msgSend(v5, "systemBackgroundColor"));
  v8 = StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v33, 0, 0, _swiftEmptyArrayStorage, 1.0, 10.0, 0.0);
  v9 = v33[0];
  v10 = v33[2];
  v11 = v33[3];
  v12 = v33[4];
  v13 = static Alignment.center.getter(v8);
  v30 = v14;
  v31 = v13;
  v15 = static Alignment.center.getter(v13);
  v29 = v16;
  v17 = Image.init(systemName:)(0x697966696E67616DLL, 0xEF7373616C67676ELL);
  v18 = static Color.white.getter(v17);
  v19 = swift_getKeyPath(&unk_100E26100);
  v20 = static Font.Weight.semibold.getter();
  v21 = type metadata accessor for Font.Design(0);
  v22 = v33[1];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v4, 1, 1, v21);
  v23 = static Font.system(size:weight:design:)(*(_QWORD *)&v20, 0, v4, 8.0);
  sub_100010CC4((uint64_t)v4, &qword_10149DAE0);
  v24 = swift_getKeyPath(&unk_100E26B78);
  *(_DWORD *)(a1 + 66) = v34;
  *(_WORD *)(a1 + 70) = v35;
  *(_QWORD *)a1 = KeyPath;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v22;
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 48) = v12;
  *(_QWORD *)(a1 + 56) = v32;
  *(_WORD *)(a1 + 64) = 256;
  v25 = v30;
  *(_QWORD *)(a1 + 72) = v31;
  *(_QWORD *)(a1 + 80) = v25;
  v26 = v29;
  *(_QWORD *)(a1 + 88) = v15;
  *(_QWORD *)(a1 + 96) = v26;
  *(_QWORD *)(a1 + 104) = v17;
  *(_QWORD *)(a1 + 112) = v19;
  *(_QWORD *)(a1 + 120) = v18;
  *(_QWORD *)(a1 + 128) = v24;
  *(_QWORD *)(a1 + 136) = v23;
  *(_OWORD *)(a1 + 144) = xmmword_100E27270;
  swift_retain(KeyPath);
  swift_retain(v6);
  v27 = swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v27);
  swift_release(v6);
  return swift_release(KeyPath);
}

double sub_10005DCF4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  double result;
  __int128 v11;
  _OWORD v12[10];

  v3 = static Alignment.center.getter(a1);
  v5 = v4;
  sub_10005DA94((uint64_t)v12);
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v5;
  v6 = v12[7];
  *(_OWORD *)(a2 + 112) = v12[6];
  *(_OWORD *)(a2 + 128) = v6;
  v7 = v12[9];
  *(_OWORD *)(a2 + 144) = v12[8];
  *(_OWORD *)(a2 + 160) = v7;
  v8 = v12[3];
  *(_OWORD *)(a2 + 48) = v12[2];
  *(_OWORD *)(a2 + 64) = v8;
  v9 = v12[5];
  *(_OWORD *)(a2 + 80) = v12[4];
  *(_OWORD *)(a2 + 96) = v9;
  result = *(double *)v12;
  v11 = v12[1];
  *(_OWORD *)(a2 + 16) = v12[0];
  *(_OWORD *)(a2 + 32) = v11;
  return result;
}

uint64_t sub_10005DD60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  __n128 v20;
  void (*v21)(_BYTE *, uint64_t);
  _BYTE v23[16];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = sub_10000E5D4(&qword_101496160);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v9 = _s9ImageViewVMa(255, v6, v7, v8);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v5, v9, 0, 0);
  v11 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  swift_getWitnessTable((const char *)&protocol conformance descriptor for TupleView<A>, v11);
  v12 = type metadata accessor for ZStack(0, v11);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = &v23[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v16);
  v18 = &v23[-v17];
  static Alignment.center.getter(v19);
  v24 = v6;
  v25 = v7;
  v26 = v2;
  ZStack.init(alignment:content:)(v20);
  swift_getWitnessTable((const char *)&protocol conformance descriptor for ZStack<A>, v12);
  sub_100129028((uint64_t)v15, v12, (uint64_t)v18);
  v21 = *(void (**)(_BYTE *, uint64_t))(v13 + 8);
  v21(v15, v12);
  sub_100128F38((uint64_t)v18, v12, a2);
  return ((uint64_t (*)(_BYTE *, uint64_t))v21)(v18, v12);
}

uint64_t sub_10005DEE4@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t WitnessTable;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t KeyPath;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD v54[2];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68[2];
  _QWORD v69[5];

  v51 = a4;
  v7 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = _s9ImageViewVMa(0, v10, v11, v12);
  v50 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v49 = (uint64_t)&v43 - v17;
  v18 = (void *)objc_opt_self(UIColor);
  v48 = Color.init(uiColor:)(objc_msgSend(v18, "_maps_systemGrayColor"));
  KeyPath = swift_getKeyPath(&unk_100E26100);
  v19 = Color.init(uiColor:)(objc_msgSend(v18, "systemBackgroundColor"));
  v20 = StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v69, 0, 0, _swiftEmptyArrayStorage, 2.0, 10.0, 0.0);
  v21 = v69[0];
  v22 = v69[2];
  v23 = v69[3];
  v24 = v69[4];
  v46 = static Alignment.center.getter(v20);
  v45 = v25;
  v44 = static Alignment.center.getter(v46);
  v43 = v26;
  v27 = a1;
  v28 = *(_QWORD *)a1;
  v30 = _s12ContactBadgeVMa(0, a2, a3, v29);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, &v27[*(int *)(v30 + 36)], a2);
  swift_retain(v28);
  sub_1000454DC(v31, (uint64_t)v9, a2, a3, (uint64_t)v15, 0.0);
  WitnessTable = swift_getWitnessTable("Ł7", v13);
  v33 = v69[1];
  v34 = v49;
  sub_100129028((uint64_t)v15, v13, v49);
  v35 = v50;
  v36 = *(void (**)(char *, uint64_t))(v50 + 8);
  v36(v15, v13);
  v37 = KeyPath;
  v55 = KeyPath;
  v38 = v48;
  v56 = v48;
  v57 = v21;
  v58 = v33;
  v59 = v22;
  v60 = v23;
  v61 = v24;
  v62 = v19;
  v63 = 256;
  v64 = v46;
  v65 = v45;
  v66 = v44;
  v67 = v43;
  v68[0] = (uint64_t)&v55;
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v15, v34, v13);
  v68[1] = (uint64_t)v15;
  swift_retain(v37);
  swift_retain(v38);
  swift_bridgeObjectRetain(v23);
  swift_retain(v19);
  v54[0] = sub_100008B04(&qword_101496160);
  v54[1] = v13;
  v52 = sub_100070974();
  v53 = WitnessTable;
  sub_100043D84(v68, 2uLL, (uint64_t)v54);
  v36((char *)v34, v13);
  swift_release(v19);
  swift_bridgeObjectRelease(v23);
  swift_release(v38);
  swift_release(v37);
  v36(v15, v13);
  v39 = v55;
  v40 = v56;
  v41 = v60;
  swift_release(v62);
  swift_bridgeObjectRelease(v41);
  swift_release(v39);
  return swift_release(v40);
}

uint64_t sub_10005E298@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  char *v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v4 = sub_100008B04(&qword_1014961A0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)a2 = static VerticalAlignment.lastTextBaseline.getter(v5);
  *(_QWORD *)(a2 + 8) = 0xC014000000000000;
  *(_BYTE *)(a2 + 16) = 0;
  KeyPath = swift_getKeyPath(&unk_100E271E0);
  v9 = swift_getKeyPath(&unk_100E27208);
  swift_retain(a1);
  static Published.subscript.getter(&v22, v10, KeyPath, v9);
  swift_release(a1);
  swift_release(KeyPath);
  swift_release(v9);
  if (v22)
  {
    v11 = sub_100008B04(&qword_1014961B8);
    v12 = type metadata accessor for UUID(0);
    v13 = sub_100008B04(&qword_1014961C0);
    v14 = sub_100010D70(&qword_1014961C8, &qword_1014961B8, (const char *)&protocol conformance descriptor for [A]);
    v15 = sub_100070A00(&qword_1014961D0, &qword_1014961C0, &qword_1014961D8, &qword_1014961E0);
    v16 = sub_10000BC84(&qword_1014961E8, type metadata accessor for PlaceSummaryImageViewModel, (uint64_t)&unk_100E28244);
    ForEach<>.init(_:content:)(&v22, sub_10005E4B0, 0, v11, v12, v13, v14, v15, v16);
    v17 = sub_100008B04(&qword_1014961A8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v7, 0, 1, v17);
  }
  else
  {
    v18 = sub_100008B04(&qword_1014961A8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v7, 1, 1, v18);
  }
  v19 = sub_100008B04(&qword_1014961B0);
  return sub_1000207BC((uint64_t)v7, a2 + *(int *)(v19 + 44), &qword_1014961A0);
}

double sub_10005E4B0@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  double result;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  __int128 v21;

  v3 = *a1;
  v4 = type metadata accessor for PlaceSummaryImageViewModel(0);
  v5 = sub_10000BC84(&qword_101494CF0, type metadata accessor for PlaceSummaryImageViewModel, (uint64_t)&unk_100E282A4);
  swift_retain(v3);
  v7 = ObservedObject.init(wrappedValue:)(v6, v4, v5);
  v9 = v8;
  v10 = static Alignment.center.getter(v7);
  _FrameLayout.init(width:height:alignment:)(&v17, 0x4030000000000000, 0, 0x4030000000000000, 0, v10, v11);
  v12 = v17;
  v13 = v18;
  v14 = v19;
  v15 = v20;
  *(_QWORD *)a2 = v7;
  *(_QWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = v12;
  *(_BYTE *)(a2 + 32) = v13;
  *(_QWORD *)(a2 + 40) = v14;
  *(_BYTE *)(a2 + 48) = v15;
  result = *(double *)&v21;
  *(_OWORD *)(a2 + 56) = v21;
  return result;
}

uint64_t sub_10005E578@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10005E298(*(_QWORD *)(v1 + 8), a1);
}

double sub_10005E580@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  double result;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  unint64_t v33;
  uint64_t v34;
  _BYTE *(*v35)(_BYTE *);
  uint64_t v36;
  char v37;
  _OWORD v38[5];
  uint64_t v39;
  char v40;
  _OWORD v41[2];

  v41[0] = *(_OWORD *)v1;
  v3 = *((_QWORD *)&v41[0] + 1);
  KeyPath = swift_getKeyPath(&unk_100E26ED8);
  v5 = swift_getKeyPath(&unk_100E26F00);
  swift_retain(*((_QWORD *)&v41[0] + 1));
  static Published.subscript.getter(v38, v6, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  sub_10006E910((uint64_t)v41);
  v7 = v38[0];
  v9 = *(_QWORD *)(v1 + 24);
  v8 = *(_QWORD *)(v1 + 32);
  v10 = *(_QWORD *)(v1 + 16);
  v11 = swift_getKeyPath(&unk_100E26038);
  v12 = swift_getKeyPath(&unk_100E26F20);
  v13 = swift_getKeyPath(&unk_100E26F48);
  sub_10006E940((uint64_t)v41);
  swift_bridgeObjectRetain(v8);
  sub_100020008(v10);
  static Published.subscript.getter(v38, v3, v12, v13);
  swift_release(v12);
  swift_release(v13);
  sub_10006E910((uint64_t)v41);
  v14 = v38[0];
  v15 = swift_getKeyPath(&unk_100E260A8);
  if (*((_QWORD *)&v7 + 1))
  {
    v16 = swift_allocObject(&unk_10119E4C8, 17, 7);
    *(_BYTE *)(v16 + 16) = (v14 & 1) == 0;
    v27 = v11;
    v28 = 0;
    v29 = 0;
    v30 = v9;
    v31 = v8;
    v32 = v7;
    v33 = v10;
    v34 = v15;
    v35 = sub_100070E00;
    v36 = v16;
    v37 = 0;
  }
  else
  {
    v17 = swift_allocObject(&unk_10119E4A0, 17, 7);
    *(_BYTE *)(v17 + 16) = (v14 & 1) == 0;
    v27 = v11;
    v28 = 0;
    v29 = 0;
    v30 = v9;
    v31 = v8;
    v32 = (unint64_t)v7;
    v33 = v10;
    v34 = v15;
    v35 = sub_100070E00;
    v36 = v17;
    v37 = 1;
  }
  v18 = sub_100008B04(&qword_101495E28);
  v19 = sub_10006E978();
  _ConditionalContent<>.init(storage:)(&v27, v18, v18, v19, v19);
  result = *(double *)v38;
  v21 = v38[1];
  v22 = v38[2];
  v23 = v38[3];
  v24 = v38[4];
  v25 = v39;
  v26 = v40;
  *(_OWORD *)a1 = v38[0];
  *(_OWORD *)(a1 + 16) = v21;
  *(_OWORD *)(a1 + 32) = v22;
  *(_OWORD *)(a1 + 48) = v23;
  *(_OWORD *)(a1 + 64) = v24;
  *(_QWORD *)(a1 + 80) = v25;
  *(_BYTE *)(a1 + 88) = v26;
  return result;
}

uint64_t sub_10005E7F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  void (*v5)(uint64_t *);
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_BYTE *)(a1 + 16);
  sub_10002057C(*(_QWORD *)a1, v3, v4);
  v5 = (void (*)(uint64_t *))sub_10001A460(v2, v3, v4);
  v7 = v6;
  sub_10001A774(v2, v3, v4);
  sub_10006E3C8((_QWORD *)(a1 + 56), &v10);
  sub_10006E3C8(&v10, &v9);
  v5(&v9);
  return swift_release(v7);
}

uint64_t sub_10005E894@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v21;
  uint64_t v23;

  v4 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v4);
  v6 = (_OWORD *)((char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100008B04(&qword_101495D00);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v9 = static Alignment.center.getter(v10);
  v9[1] = v11;
  v12 = sub_100008B04(&qword_101495D08);
  sub_10005EA10(a1, (_QWORD *)((char *)v9 + *(int *)(v12 + 44)));
  v13 = (char *)v6 + *(int *)(v4 + 20);
  v14 = enum case for RoundedCornerStyle.continuous(_:);
  v15 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v13, v14, v15);
  __asm { FMOV            V0.2D, #6.0 }
  *v6 = _Q0;
  v21 = a2 + *(int *)(sub_100008B04(&qword_101495CE8) + 36);
  sub_1000202AC((uint64_t)v6, v21, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v21 + *(int *)(sub_100008B04(&qword_101494DD0) + 36)) = 256;
  sub_10000C1FC((uint64_t)v9, a2, &qword_101495D00);
  sub_1000202F0((uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  return sub_100010CC4((uint64_t)v9, &qword_101495D00);
}

uint64_t sub_10005EA10@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v4 = sub_100008B04(&qword_101495D10);
  __chkstk_darwin(v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v16 - v8;
  v10 = objc_msgSend((id)objc_opt_self(UIColor), "tertiarySystemFillColor");
  v11 = Color.init(uiColor:)(v10);
  KeyPath = swift_getKeyPath(&unk_100E26100);
  *(_QWORD *)v9 = static HorizontalAlignment.center.getter();
  *((_QWORD *)v9 + 1) = 0x4014000000000000;
  v9[16] = 0;
  v13 = sub_100008B04(&qword_101495D18);
  sub_10005EB74(a1, (uint64_t)&v9[*(int *)(v13 + 44)]);
  sub_10000C1FC((uint64_t)v9, (uint64_t)v6, &qword_101495D10);
  *a2 = KeyPath;
  a2[1] = v11;
  v14 = sub_100008B04(&qword_101495D20);
  sub_10000C1FC((uint64_t)v6, (uint64_t)a2 + *(int *)(v14 + 48), &qword_101495D10);
  swift_retain(KeyPath);
  swift_retain(v11);
  sub_100010CC4((uint64_t)v9, &qword_101495D10);
  sub_100010CC4((uint64_t)v6, &qword_101495D10);
  swift_release(v11);
  return swift_release(KeyPath);
}

uint64_t sub_10005EB74@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t KeyPath;
  uint64_t v34;
  void (*v35)(_QWORD);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  char *v45;
  __int128 v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD *v77;
  __int128 v78;
  uint64_t v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v98;
  unsigned int v99;
  void (*v100)(char *, _QWORD, uint64_t);
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  _OWORD v120[3];
  __int128 v121;
  __int128 v122;
  __int128 v123;

  v117 = a2;
  v105 = sub_100008B04(&qword_101495D28);
  v104 = *(_QWORD *)(v105 - 8);
  __chkstk_darwin(v105);
  v102 = (char *)&v98 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = sub_100008B04(&qword_101495D30);
  __chkstk_darwin(v101);
  v106 = (char *)&v98 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = sub_100008B04(&qword_101495D38);
  __chkstk_darwin(v103);
  v108 = (uint64_t)&v98 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = sub_100008B04(&qword_101495D40);
  v113 = *(_QWORD *)(v114 - 8);
  __chkstk_darwin(v114);
  v107 = (uint64_t)&v98 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008B04(&qword_101495D48);
  __chkstk_darwin(v7);
  v116 = (uint64_t)&v98 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v115 = (uint64_t)&v98 - v10;
  v11 = type metadata accessor for DynamicTypeSize(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v118 = (char *)&v98 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = (_QWORD *)sub_100008B04(&qword_101495D50);
  v14 = *(v111 - 1);
  __chkstk_darwin(v111);
  v16 = (char *)&v98 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_100008B04(&qword_101495D58);
  __chkstk_darwin(v109);
  v18 = (char *)&v98 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = sub_100008B04(&qword_101495D60);
  __chkstk_darwin(v110);
  v112 = (uint64_t)&v98 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v22 = (char *)&v98 - v21;
  __chkstk_darwin(v23);
  v119 = (uint64_t)&v98 - v24;
  v25 = a1[3];
  v26 = a1[4];
  swift_bridgeObjectRetain(v26);
  v27 = Image.init(_internalSystemName:)(v25, v26);
  v28 = a1[6];
  v98 = a1[5];
  v29 = v11;
  if (v28)
    v30 = static Font.headline.getter();
  else
    v30 = static Font.title3.getter();
  v31 = v30;
  static Font.Weight.semibold.getter();
  v32 = Font.weight(_:)(v31);
  swift_release(v31);
  KeyPath = swift_getKeyPath(&unk_100E26B78);
  v34 = static Color.blue.getter(KeyPath);
  *(_QWORD *)&v121 = v27;
  *((_QWORD *)&v121 + 1) = KeyPath;
  *(_QWORD *)&v122 = v32;
  *((_QWORD *)&v122 + 1) = v34;
  v35 = *(void (**)(_QWORD))(v12 + 104);
  v36 = v118;
  v99 = enum case for DynamicTypeSize.medium(_:);
  v37 = v29;
  v100 = (void (*)(char *, _QWORD, uint64_t))v35;
  v35(v118);
  v38 = sub_100008B04(&qword_101495D68);
  v39 = sub_10006E570();
  View.dynamicTypeSize(_:)(v36, v38, v39);
  v40 = *(void (**)(char *, uint64_t))(v12 + 8);
  v40(v36, v37);
  swift_release(v121);
  swift_release(*((_QWORD *)&v121 + 1));
  swift_release(v122);
  v41 = swift_release(*((_QWORD *)&v122 + 1));
  v42 = static Alignment.center.getter(v41);
  _FrameLayout.init(width:height:alignment:)(v120, 0x4043000000000000, 0, 0x4038000000000000, 0, v42, v43);
  v44 = v111;
  (*(void (**)(char *, char *, _QWORD *))(v14 + 16))(v18, v16, v111);
  v45 = &v18[*(int *)(v109 + 36)];
  v46 = v120[1];
  *(_OWORD *)v45 = v120[0];
  *((_OWORD *)v45 + 1) = v46;
  *((_OWORD *)v45 + 2) = v120[2];
  (*(void (**)(char *, _QWORD *))(v14 + 8))(v16, v44);
  sub_10000C1FC((uint64_t)v18, (uint64_t)v22, &qword_101495D58);
  v47 = &v22[*(int *)(v110 + 36)];
  *(_QWORD *)v47 = 0;
  v48 = 1;
  *((_WORD *)v47 + 4) = 1;
  sub_100010CC4((uint64_t)v18, &qword_101495D58);
  sub_1000207BC((uint64_t)v22, v119, &qword_101495D60);
  if (v28)
  {
    *(_QWORD *)&v121 = v98;
    *((_QWORD *)&v121 + 1) = v28;
    v49 = sub_10006C008();
    swift_bridgeObjectRetain(v28);
    v50 = Text.init<A>(_:)(&v121, &type metadata for String, v49);
    v52 = v51;
    v54 = v53;
    v56 = v55 & 1;
    v57 = static Font.caption2.getter();
    static Font.Weight.semibold.getter();
    v58 = Font.weight(_:)(v57);
    swift_release(v57);
    v59 = Text.font(_:)(v58, v50, v52, v56, v54);
    v61 = v60;
    v63 = v62;
    v111 = v40;
    v65 = v64;
    swift_release(v58);
    sub_10006B77C(v50, v52, v56);
    swift_bridgeObjectRelease(v54);
    *(_QWORD *)&v121 = v59;
    *((_QWORD *)&v121 + 1) = v61;
    LOBYTE(v122) = v63 & 1;
    *((_QWORD *)&v122 + 1) = v65;
    v66 = v118;
    v100(v118, v99, v37);
    v67 = v102;
    View.dynamicTypeSize(_:)(v66, &type metadata for Text, &protocol witness table for Text);
    ((void (*)(char *, uint64_t))v111)(v66, v37);
    sub_10006B77C(v121, *((uint64_t *)&v121 + 1), v122);
    v68 = swift_bridgeObjectRelease(*((_QWORD *)&v122 + 1));
    v69 = static Color.blue.getter(v68);
    v70 = v104;
    v71 = (uint64_t)v106;
    v72 = v105;
    (*(void (**)(char *, char *, uint64_t))(v104 + 16))(v106, v67, v105);
    *(_QWORD *)(v71 + *(int *)(v101 + 36)) = v69;
    v73 = (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v67, v72);
    v74 = static Alignment.center.getter(v73);
    _FrameLayout.init(width:height:alignment:)(&v121, 0x4047000000000000, 0, 0x402A000000000000, 0, v74, v75);
    v76 = v108;
    sub_10000C1FC(v71, v108, &qword_101495D30);
    v77 = (_OWORD *)(v76 + *(int *)(v103 + 36));
    v78 = v122;
    *v77 = v121;
    v77[1] = v78;
    v77[2] = v123;
    v79 = sub_100010CC4(v71, &qword_101495D30);
    LOBYTE(v69) = static Edge.Set.horizontal.getter(v79);
    v80 = EdgeInsets.init(_all:)(4.0);
    v82 = v81;
    v84 = v83;
    v86 = v85;
    v87 = v107;
    sub_10000C1FC(v76, v107, &qword_101495D38);
    v88 = v114;
    v89 = v87 + *(int *)(v114 + 36);
    *(_BYTE *)v89 = v69;
    *(double *)(v89 + 8) = v80;
    *(_QWORD *)(v89 + 16) = v82;
    *(_QWORD *)(v89 + 24) = v84;
    *(_QWORD *)(v89 + 32) = v86;
    *(_BYTE *)(v89 + 40) = 0;
    sub_100010CC4(v76, &qword_101495D38);
    v90 = v87;
    v91 = v115;
    sub_1000207BC(v90, v115, &qword_101495D40);
    v48 = 0;
  }
  else
  {
    v91 = v115;
    v88 = v114;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v113 + 56))(v91, v48, 1, v88);
  v92 = v119;
  v93 = v112;
  sub_10000C1FC(v119, v112, &qword_101495D60);
  v94 = v116;
  sub_10000C1FC(v91, v116, &qword_101495D48);
  v95 = v117;
  sub_10000C1FC(v93, v117, &qword_101495D60);
  v96 = sub_100008B04(&qword_101495D88);
  sub_10000C1FC(v94, v95 + *(int *)(v96 + 48), &qword_101495D48);
  sub_100010CC4(v91, &qword_101495D48);
  sub_100010CC4(v92, &qword_101495D60);
  sub_100010CC4(v94, &qword_101495D48);
  return sub_100010CC4(v93, &qword_101495D60);
}

uint64_t sub_10005F3CC()
{
  _OWORD *v0;
  __int128 v1;
  __int128 v2;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  unint64_t v7;
  __n128 v8;
  _QWORD v10[4];
  __int128 v11;
  _BYTE v12[32];
  __int128 v13;
  __int128 v14;
  char v15;
  __int128 v16;
  _BYTE v17[16];
  unint64_t v18;

  v1 = v0[1];
  v11 = *v0;
  *(_OWORD *)v12 = v1;
  v2 = v0[3];
  *(_OWORD *)&v12[16] = v0[2];
  v13 = v2;
  v14 = v11;
  v15 = *((_BYTE *)v0 + 16);
  v16 = *(_OWORD *)&v12[8];
  sub_1000207BC((uint64_t)&v12[24], (uint64_t)v17, &qword_101495CE0);
  sub_10006E3C8((_QWORD *)&v13 + 1, &v18);
  v3 = (_OWORD *)swift_allocObject(&unk_10119E478, 80, 7);
  v4 = *(_OWORD *)v12;
  v3[1] = v11;
  v3[2] = v4;
  v5 = v13;
  v3[3] = *(_OWORD *)&v12[16];
  v3[4] = v5;
  v10[2] = &v11;
  sub_10006E454((uint64_t)&v14);
  sub_10006E484((uint64_t)&v16);
  sub_10006E484((uint64_t)v17);
  sub_10006E4AC(&v18);
  v6 = sub_100008B04(&qword_101495CE8);
  v7 = sub_10006E4D4();
  return Button.init(action:label:)(sub_10006E444, v3, sub_10006E44C, v10, v6, v7, v8);
}

uint64_t sub_10005F4C8(uint64_t a1, uint64_t a2, char a3)
{
  char v5;
  void (*v6)(unint64_t *);
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;

  v5 = a3 & 1;
  sub_10002057C(a1, a2, a3 & 1);
  v6 = (void (*)(unint64_t *))sub_10001A460(a1, a2, v5);
  v8 = v7;
  sub_10001A774(a1, a2, v5);
  v10 = 0x8000000000000020;
  v6(&v10);
  return swift_release(v8);
}

double sub_10005F550@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  char v19;
  double result;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  _BYTE v29[11];
  __int16 v30;
  char v31;
  _BYTE v32[7];
  _BYTE v33[7];

  v2 = type metadata accessor for Image.ResizingMode(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = Image.init(systemName:)(0xD000000000000018, 0x8000000100E44660);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Image.ResizingMode.stretch(_:), v2);
  v7 = Image.resizable(capInsets:resizingMode:)(v5, v6, 0.0, 0.0, 0.0, 0.0);
  swift_release(v6);
  v8 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v9 = static Alignment.center.getter(v8);
  v11 = _FrameLayout.init(width:height:alignment:)(&v22, 0x4034000000000000, 0, 0x4034000000000000, 0, v9, v10);
  v12 = v22;
  LOBYTE(v3) = v23;
  v13 = v24;
  v14 = v25;
  v15 = v26;
  v16 = v27;
  v17 = static Color.secondary.getter(v11);
  KeyPath = swift_getKeyPath(&unk_100E26100);
  v19 = static Edge.Set.all.getter();
  v31 = 1;
  v28 = 1;
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v12;
  *(_BYTE *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 17) = *(_DWORD *)v33;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)&v33[3];
  *(_QWORD *)(a1 + 24) = v13;
  *(_BYTE *)(a1 + 32) = v14;
  *(_DWORD *)(a1 + 33) = *(_DWORD *)v32;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)&v32[3];
  *(_QWORD *)(a1 + 40) = v15;
  *(_QWORD *)(a1 + 48) = v16;
  *(_QWORD *)(a1 + 56) = KeyPath;
  *(_QWORD *)(a1 + 64) = v17;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = v31;
  *(_BYTE *)(a1 + 81) = 0;
  *(_DWORD *)(a1 + 82) = *(_DWORD *)&v29[7];
  *(_WORD *)(a1 + 86) = v30;
  *(_BYTE *)(a1 + 88) = v19;
  *(_DWORD *)(a1 + 89) = *(_DWORD *)v29;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)&v29[3];
  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_BYTE *)(a1 + 128) = v28;
  return result;
}

uint64_t sub_10005F724()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_BYTE *)(v0 + 16);
  v4 = swift_allocObject(&unk_10119E4F0, 33, 7);
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = v2;
  *(_BYTE *)(v4 + 32) = v3;
  sub_10002057C(v1, v2, v3);
  v5 = sub_100008B04(&qword_101495E38);
  v6 = sub_10002067C(&qword_101495E40, &qword_101495E38, sub_10006EA40, (uint64_t)&protocol witness table for _PaddingLayout);
  return Button.init(action:label:)(sub_10006EA34, v4, sub_10005F550, 0, v5, v6, v7);
}

uint64_t sub_10005F7E0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, __n128);
  __n128 v29;
  uint64_t v31;
  uint64_t KeyPath;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v35 = a1;
  v31 = type metadata accessor for DynamicTypeSize(0);
  v1 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100008B04(&qword_101495E80);
  v34 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v31 - v8;
  v10 = objc_msgSend((id)objc_opt_self(UIColor), "systemGray5Color");
  v33 = Color.init(uiColor:)(v10);
  KeyPath = swift_getKeyPath(&unk_100E26100);
  v11 = Image.init(systemName:)(1937075312, 0xE400000000000000);
  v12 = static Color.blue.getter(v11);
  v13 = swift_getKeyPath(&unk_100E26100);
  v14 = static Font.subheadline.getter(v13);
  static Font.Weight.semibold.getter();
  v15 = Font.weight(_:)(v14);
  swift_release(v14);
  v16 = swift_getKeyPath(&unk_100E26B78);
  v36 = v11;
  v37 = v13;
  v38 = v12;
  v39 = v16;
  v40 = v15;
  v17 = v31;
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for DynamicTypeSize.medium(_:), v31);
  v18 = sub_100008B04((uint64_t *)&unk_101495970);
  v19 = sub_10006CC18();
  View.dynamicTypeSize(_:)(v3, v18, v19);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v17);
  swift_release(v36);
  swift_release(v37);
  swift_release(v38);
  swift_release(v39);
  swift_release(v40);
  v20 = v34;
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v9, v6, v4);
  v21 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
  v22 = v20;
  v21(v6, v9, v4);
  v23 = v35;
  v25 = KeyPath;
  v24 = v33;
  *v35 = KeyPath;
  v23[1] = v24;
  v26 = v23;
  v27 = sub_100008B04(&qword_101495E88);
  v21((char *)v26 + *(int *)(v27 + 48), v6, v4);
  v28 = *(void (**)(char *, uint64_t, __n128))(v22 + 8);
  swift_retain(v25);
  v29 = swift_retain(v24);
  v28(v9, v4, v29);
  ((void (*)(char *, uint64_t))v28)(v6, v4);
  swift_release(v24);
  return swift_release(v25);
}

uint64_t sub_10005FA74@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  *a2 = static Alignment.center.getter(a1);
  a2[1] = v3;
  v4 = sub_100008B04(&qword_101495E78);
  return sub_10005F7E0((_QWORD *)((char *)a2 + *(int *)(v4 + 44)));
}

uint64_t sub_10005FAB0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 v61;
  uint64_t v62;

  v57 = sub_100008B04(&qword_101494DD0);
  __chkstk_darwin(v57);
  v58 = (uint64_t)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v55);
  v6 = (_OWORD *)((char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for Image.ResizingMode(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008B04(&qword_101495900);
  __chkstk_darwin(v11);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100008B04(&qword_101495D98);
  v59 = *(_QWORD *)(v14 - 8);
  v60 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v56 = (uint64_t)&v53 - v18;
  KeyPath = swift_getKeyPath(&unk_100E26E00);
  v20 = swift_getKeyPath(&unk_100E26E28);
  swift_retain(a1);
  static Published.subscript.getter(&v62, v21, KeyPath, v20);
  swift_release(a1);
  swift_release(KeyPath);
  swift_release(v20);
  v22 = v62;
  v23 = 1;
  if (v62)
  {
    v24 = swift_getKeyPath(&unk_100E26E48);
    v54 = a2;
    v25 = v24;
    v26 = swift_getKeyPath(&unk_100E26E70);
    swift_retain(a1);
    static Published.subscript.getter(&v61, v27, v25, v26);
    swift_release(a1);
    swift_release(v25);
    swift_release(v26);
    v28 = v61;
    v29 = type metadata accessor for Image.TemplateRenderingMode(0);
    v30 = *(_QWORD *)(v29 - 8);
    v31 = (unsigned int *)&enum case for Image.TemplateRenderingMode.template(_:);
    if (!v28)
      v31 = (unsigned int *)&enum case for Image.TemplateRenderingMode.original(_:);
    (*(void (**)(char *, _QWORD, uint64_t))(v30 + 104))(v13, *v31, v29);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v13, 0, 1, v29);
    v32 = Image.renderingMode(_:)(v13, v22);
    sub_100010CC4((uint64_t)v13, &qword_101495900);
    (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for Image.ResizingMode.stretch(_:), v7);
    v33 = Image.resizable(capInsets:resizingMode:)(v10, v32, 0.0, 0.0, 0.0, 0.0);
    swift_release(v32);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v34 = (void *)objc_opt_self(UIColor);
    v35 = Color.init(uiColor:)(objc_msgSend(v34, "tertiaryLabelColor"));
    v36 = swift_getKeyPath(&unk_100E26100);
    v37 = Color.init(uiColor:)(objc_msgSend(v34, "systemGray5Color"));
    LOBYTE(v34) = static Edge.Set.all.getter(v38);
    v39 = *(int *)(v55 + 20);
    v55 = v22;
    v40 = (uint64_t)v6;
    v41 = (char *)v6 + v39;
    v42 = enum case for RoundedCornerStyle.continuous(_:);
    v43 = type metadata accessor for RoundedCornerStyle(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 104))(v41, v42, v43);
    __asm { FMOV            V0.2D, #6.0 }
    *v6 = _Q0;
    v49 = (uint64_t)v6;
    v50 = v58;
    sub_1000202AC(v49, v58, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
    *(_WORD *)(v50 + *(int *)(v57 + 36)) = 256;
    sub_10000C1FC(v50, (uint64_t)&v16[*(int *)(v60 + 36)], &qword_101494DD0);
    *(_QWORD *)v16 = v33;
    *((_QWORD *)v16 + 1) = v36;
    *((_QWORD *)v16 + 2) = v35;
    *((_QWORD *)v16 + 3) = v37;
    v16[32] = (char)v34;
    a2 = v54;
    *((_QWORD *)v16 + 5) = 0;
    *((_WORD *)v16 + 24) = 1;
    swift_retain(v33);
    swift_retain(v36);
    swift_retain(v35);
    swift_retain(v37);
    sub_100010CC4(v50, &qword_101494DD0);
    sub_1000202F0(v40, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
    swift_release(v37);
    swift_release(v35);
    swift_release(v36);
    swift_release(v33);
    swift_release(v55);
    v51 = v56;
    sub_1000207BC((uint64_t)v16, v56, &qword_101495D98);
    sub_1000207BC(v51, a2, &qword_101495D98);
    v23 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 56))(a2, v23, 1, v60);
}

uint64_t sub_10005FF74@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(v2 + 8);
  *a2 = static Alignment.center.getter(a1);
  a2[1] = v5;
  v6 = sub_100008B04(&qword_101495D90);
  return sub_10005FAB0(v4, (uint64_t)a2 + *(int *)(v6 + 44));
}

uint64_t sub_10005FFC4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  id v10;
  uint64_t v11;
  uint64_t KeyPath;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v21;
  _QWORD v23[2];

  v23[1] = a1;
  v1 = sub_100008B04(&qword_101494DD0);
  __chkstk_darwin(v1);
  v3 = (char *)v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v4);
  v6 = (_OWORD *)((char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100008B04(&qword_101494DD8);
  __chkstk_darwin(v7);
  v9 = (_QWORD *)((char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = objc_msgSend((id)objc_opt_self(UIColor), "systemGray5Color");
  v11 = Color.init(uiColor:)(v10);
  KeyPath = swift_getKeyPath(&unk_100E26100);
  v13 = (char *)v6 + *(int *)(v4 + 20);
  v14 = enum case for RoundedCornerStyle.continuous(_:);
  v15 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v13, v14, v15);
  __asm { FMOV            V0.2D, #8.0 }
  *v6 = _Q0;
  sub_1000202AC((uint64_t)v6, (uint64_t)v3, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)&v3[*(int *)(v1 + 36)] = 256;
  sub_10000C1FC((uint64_t)v3, (uint64_t)v9 + *(int *)(v7 + 36), &qword_101494DD0);
  *v9 = KeyPath;
  v9[1] = v11;
  swift_retain(KeyPath);
  swift_retain(v11);
  sub_100010CC4((uint64_t)v3, &qword_101494DD0);
  sub_1000202F0((uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  swift_release(v11);
  swift_release(KeyPath);
  v21 = sub_1000632B0();
  View.accessibility(identifier:)(0xD000000000000011, 0x8000000100E25C40, v7, v21);
  return sub_100010CC4((uint64_t)v9, &qword_101494DD8);
}

uint64_t sub_1000601E8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_101065E94, 1);
}

uint64_t sub_1000601F8()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t KeyPath;

  v0 = objc_msgSend((id)objc_opt_self(UIColor), "systemGray5Color");
  v1 = Color.init(uiColor:)(v0);
  KeyPath = swift_getKeyPath(&unk_100E26100);
  v2 = sub_100008B04(&qword_101494DA8);
  v3 = sub_1000631E8();
  View.accessibility(identifier:)(0xD000000000000017, 0x8000000100E25CA0, v2, v3);
  swift_release(v1);
  return swift_release(KeyPath);
}

uint64_t sub_1000602B8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_101065E6C, 1);
}

uint64_t sub_1000602C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = static Color.clear.getter();
  result = static Edge.Set.all.getter();
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000602F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE v20[16];
  uint64_t v21;
  uint64_t v22;
  int v23;

  v6 = type metadata accessor for PinnedScrollableViews(0);
  __chkstk_darwin(v6);
  v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_100008B04(&qword_101494CF8);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v20[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = sub_100062D94(a1);
  v21 = a1;
  v22 = a2;
  v14 = static HorizontalAlignment.center.getter();
  v23 = 0;
  v15 = sub_10000BC84(&qword_101494D00, (uint64_t (*)(uint64_t))&type metadata accessor for PinnedScrollableViews, (uint64_t)&protocol conformance descriptor for PinnedScrollableViews);
  dispatch thunk of OptionSet.init(rawValue:)(&v23, v6, v15);
  v16 = sub_100008B04(&qword_101494D08);
  v17 = sub_100062F50();
  LazyVGrid.init(columns:alignment:spacing:pinnedViews:content:)(v13, v14, 0x4020000000000000, 0, v8, sub_100062F48, v20, v16, v17);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v10 + 16))(a3, v12, v9);
  v18 = a3 + *(int *)(sub_100008B04(&qword_101494D20) + 36);
  *(_QWORD *)v18 = 0xD00000000000001DLL;
  *(_QWORD *)(v18 + 8) = 0x8000000100E44150;
  *(_BYTE *)(v18 + 16) = 9;
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_1000604B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v9 = a2;
  swift_bridgeObjectRetain(a2);
  v2 = sub_100008B04(&qword_101494D28);
  v3 = type metadata accessor for UUID(0);
  v4 = _s12ActionButtonVMa(0);
  v5 = sub_100010D70(&qword_101494D30, &qword_101494D28, (const char *)&protocol conformance descriptor for [A]);
  v6 = sub_10000BC84(&qword_101494D18, _s12ActionButtonVMa, (uint64_t)&unk_100E263C4);
  v7 = sub_10000BC84(&qword_101494D38, type metadata accessor for PlaceSummaryViewModelActionButtons.Button, (uint64_t)"ej7");
  return ForEach<>.init(_:content:)(&v9, sub_1000605A8, 0, v2, v3, v4, v5, v6, v7);
}

uint64_t sub_1000605A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for PlaceSummaryViewModelActionButtons.Button(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000202AC(a1, (uint64_t)v6, type metadata accessor for PlaceSummaryViewModelActionButtons.Button);
  *(_QWORD *)a2 = swift_getKeyPath(&unk_100E260D8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  v7 = _s12ActionButtonVMa(0);
  return sub_10003F29C((uint64_t)v6, a2 + *(int *)(v7 + 20), type metadata accessor for PlaceSummaryViewModelActionButtons.Button);
}

uint64_t sub_100060650@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000602F8(*v1, v1[1], a1);
}

uint64_t sub_100060658@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __n128 v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t OpaqueTypeConformance2;
  _QWORD v24[2];
  _BYTE v25[16];
  uint64_t v26;
  _QWORD v27[4];

  v2 = v1;
  v24[1] = a1;
  v3 = _s12ActionButtonVMa(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008B04(&qword_101495E90);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008B04(&qword_101495E98);
  v24[0] = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000202AC(v2, (uint64_t)v6, _s12ActionButtonVMa);
  v14 = *(unsigned __int8 *)(v4 + 80);
  v15 = (v14 + 16) & ~v14;
  v16 = swift_allocObject(&unk_10119E518, v15 + v5, v14 | 7);
  sub_10003F29C((uint64_t)v6, v16 + v15, _s12ActionButtonVMa);
  v26 = v2;
  v17 = sub_100008B04(&qword_101495EA0);
  v18 = sub_10006EC7C();
  Button.init(action:label:)(sub_10006EC20, v16, sub_10006EC74, v25, v17, v18, v19);
  v20 = sub_100010D70(&qword_101495EC0, &qword_101495E90, (const char *)&protocol conformance descriptor for Button<A>);
  v21 = sub_10006ED00();
  View.buttonStyle<A>(_:)(v21, v7, &_s17ActionButtonStyleVN, v20, v21);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v27[0] = v7;
  v27[1] = &_s17ActionButtonStyleVN;
  v27[2] = v20;
  v27[3] = v21;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v27, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  View.accessibility(identifier:)(0xD000000000000018, 0x8000000100E44680, v11, OpaqueTypeConformance2);
  return (*(uint64_t (**)(char *, uint64_t))(v24[0] + 8))(v13, v11);
}

uint64_t sub_100060890(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  void (*v5)(uint64_t *, uint64_t *);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_BYTE *)(a1 + 16);
  sub_10002057C(*(_QWORD *)a1, v3, v4);
  v5 = (void (*)(uint64_t *, uint64_t *))sub_10001A484(v2, v3, v4);
  v7 = v6;
  sub_10001A774(v2, v3, v4);
  v8 = a1 + *(int *)(_s12ActionButtonVMa(0) + 20);
  v9 = type metadata accessor for PlaceSummaryViewModelActionButtons.Button(0);
  v10 = *(_QWORD *)(v8 + *(int *)(v9 + 24));
  v12 = *(_QWORD *)(v8 + *(int *)(v9 + 28));
  v13 = v10;
  v5(&v13, &v12);
  return swift_release(v7);
}

__n128 sub_100060940@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t KeyPath;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __n128 result;
  uint64_t v42;
  uint64_t v43;
  _OWORD v44[15];
  uint64_t v45;
  uint64_t v46;
  char v47;
  _BYTE v48[7];
  uint64_t v49;
  uint64_t v50;
  char v51;
  _BYTE v52[7];
  uint64_t v53;
  char v54;
  _BYTE v55[7];
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  _BYTE v61[7];
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  _BYTE v66[7];
  char v67;
  _BYTE v68[7];
  _BYTE v69[7];
  char v70;
  _BYTE v71[7];
  char v72;

  v43 = static VerticalAlignment.center.getter(a3);
  v5 = a1 + *(int *)(_s12ActionButtonVMa(0) + 20);
  v6 = (_QWORD *)(v5 + *(int *)(type metadata accessor for PlaceSummaryViewModelActionButtons.Button(0) + 20));
  v7 = v6[1];
  *(_QWORD *)&v44[0] = *v6;
  *((_QWORD *)&v44[0] + 1) = v7;
  v8 = sub_10006C008();
  swift_bridgeObjectRetain(v7);
  v9 = Text.init<A>(_:)(v44, &type metadata for String, v8);
  v11 = v10;
  v13 = v12;
  v15 = v14 & 1;
  v16 = static Font.subheadline.getter(v9);
  static Font.Weight.semibold.getter();
  v17 = Font.weight(_:)(v16);
  swift_release(v16);
  v18 = Text.font(_:)(v17, v9, v11, v15, v13);
  v42 = v19;
  LOBYTE(v5) = v20;
  v22 = v21;
  swift_release(v17);
  LOBYTE(v17) = v5 & 1;
  sub_10006B77C(v9, v11, v15);
  v23 = swift_bridgeObjectRelease(v13);
  LOBYTE(v5) = static Edge.Set.horizontal.getter(v23);
  v24 = EdgeInsets.init(_all:)(10.0);
  v26 = v25;
  v28 = v27;
  v30 = v29;
  KeyPath = swift_getKeyPath(&unk_100E26B48);
  v72 = 1;
  v70 = v17;
  v67 = 0;
  v65 = 0;
  *(_DWORD *)v48 = *(_DWORD *)v71;
  *(_DWORD *)&v48[3] = *(_DWORD *)&v71[3];
  *(_DWORD *)v52 = *(_DWORD *)v69;
  *(_DWORD *)&v52[3] = *(_DWORD *)&v69[3];
  *(_DWORD *)v55 = *(_DWORD *)v68;
  *(_DWORD *)&v55[3] = *(_DWORD *)&v68[3];
  *(_DWORD *)v61 = *(_DWORD *)v66;
  *(_DWORD *)&v61[3] = *(_DWORD *)&v66[3];
  v45 = v43;
  v46 = 0;
  v47 = 1;
  v49 = v18;
  v50 = v42;
  v51 = v17;
  v53 = v22;
  v54 = v5;
  v56 = v24;
  v57 = v26;
  v58 = v28;
  v59 = v30;
  v60 = 0;
  v62 = KeyPath;
  v63 = 1;
  v64 = 0;
  v32 = static Alignment.center.getter(KeyPath);
  sub_1000C749C(0, 1, 0.0, 1, INFINITY, 0, 0x4044000000000000uLL, 0, v44, v34, 0.0, 1, 0.0, 1, v32, v33);
  sub_10006B77C(v18, v42, v17);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v22);
  v35 = v44[13];
  *(_OWORD *)(a2 + 192) = v44[12];
  *(_OWORD *)(a2 + 208) = v35;
  *(_OWORD *)(a2 + 224) = v44[14];
  v36 = v44[9];
  *(_OWORD *)(a2 + 128) = v44[8];
  *(_OWORD *)(a2 + 144) = v36;
  v37 = v44[11];
  *(_OWORD *)(a2 + 160) = v44[10];
  *(_OWORD *)(a2 + 176) = v37;
  v38 = v44[5];
  *(_OWORD *)(a2 + 64) = v44[4];
  *(_OWORD *)(a2 + 80) = v38;
  v39 = v44[7];
  *(_OWORD *)(a2 + 96) = v44[6];
  *(_OWORD *)(a2 + 112) = v39;
  v40 = v44[1];
  *(_OWORD *)a2 = v44[0];
  *(_OWORD *)(a2 + 16) = v40;
  result = (__n128)v44[3];
  *(_OWORD *)(a2 + 32) = v44[2];
  *(__n128 *)(a2 + 48) = result;
  return result;
}

uint64_t sub_100060BD0@<X0>(uint64_t a1@<X8>)
{
  __n128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t *v19;
  id v20;
  uint64_t v21;
  __n128 v22;
  char *v23;
  uint64_t v24;
  double v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;

  v44 = a1;
  v43 = type metadata accessor for RoundedRectangle(0);
  v1 = __chkstk_darwin(v43);
  v42 = (char *)&v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for ButtonStyleConfiguration.Label(0, v1);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_100008B04(&qword_101496180);
  __chkstk_darwin(v38);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_100008B04(&qword_101496188);
  __chkstk_darwin(v39);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_100008B04(&qword_101496190);
  __chkstk_darwin(v40);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_100008B04(&qword_101496198);
  v13 = __chkstk_darwin(v41);
  v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = ButtonStyleConfiguration.label.getter(v13);
  v17 = static Color.blue.getter(v16);
  KeyPath = swift_getKeyPath(&unk_100E26100);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v8, v6, v3);
  v19 = (uint64_t *)&v8[*(int *)(v38 + 36)];
  *v19 = KeyPath;
  v19[1] = v17;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v20 = objc_msgSend((id)objc_opt_self(UIColor), "tertiarySystemFillColor");
  v21 = Color.init(uiColor:)(v20);
  LOBYTE(KeyPath) = static Edge.Set.all.getter(v22);
  sub_10000C1FC((uint64_t)v8, (uint64_t)v10, &qword_101496180);
  v23 = &v10[*(int *)(v39 + 36)];
  *(_QWORD *)v23 = v21;
  v23[8] = KeyPath;
  v24 = sub_100010CC4((uint64_t)v8, &qword_101496180);
  if ((ButtonStyleConfiguration.isPressed.getter(v24) & 1) != 0)
    v25 = 0.85;
  else
    v25 = 1.0;
  sub_10000C1FC((uint64_t)v10, (uint64_t)v12, &qword_101496188);
  *(double *)&v12[*(int *)(v40 + 36)] = v25;
  sub_100010CC4((uint64_t)v10, &qword_101496188);
  v26 = v42;
  v27 = &v42[*(int *)(v43 + 20)];
  v28 = enum case for RoundedCornerStyle.continuous(_:);
  v29 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v27, v28, v29);
  __asm { FMOV            V0.2D, #10.0 }
  *v26 = _Q0;
  v35 = (uint64_t)&v15[*(int *)(v41 + 36)];
  sub_1000202AC((uint64_t)v26, v35, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v35 + *(int *)(sub_100008B04(&qword_101494DD0) + 36)) = 256;
  sub_10000C1FC((uint64_t)v12, (uint64_t)v15, &qword_101496190);
  sub_1000202F0((uint64_t)v26, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  sub_100010CC4((uint64_t)v12, &qword_101496190);
  return sub_1000207BC((uint64_t)v15, v44, &qword_101496198);
}

uint64_t sub_100060F50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>, __n128 a6@<Q0>)
{
  uint64_t v11;

  *(_QWORD *)a5 = static VerticalAlignment.center.getter(a6);
  *(_QWORD *)(a5 + 8) = 0x4018000000000000;
  *(_BYTE *)(a5 + 16) = 0;
  v11 = sub_100008B04(&qword_101494D60);
  return sub_100060FCC(a1, a2, a3 & 1, a4, a5 + *(int *)(v11 + 44));
}

uint64_t sub_100060FCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, __n128);
  __n128 v42;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t KeyPath;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  unsigned __int8 v62;
  uint64_t v63;
  unsigned __int8 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 v68;
  uint64_t v69;
  unsigned __int8 v70;
  uint64_t v71;
  uint64_t v72;

  v59 = sub_100008B04(&qword_101494D68);
  v10 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v60 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v44 - v13;
  v58 = static Color.clear.getter(v15);
  KeyPath = swift_getKeyPath(&unk_100E26100);
  v16 = static Alignment.center.getter(KeyPath);
  _FrameLayout.init(width:height:alignment:)(&v61, 0x4049000000000000, 0, 0, 1, v16, v17);
  v56 = v61;
  v55 = v62;
  v54 = v63;
  v53 = v64;
  v52 = v65;
  v51 = v66;
  v67 = a4;
  v18 = swift_allocObject(&unk_10119DB80, 48, 7);
  *(_QWORD *)(v18 + 16) = a1;
  *(_QWORD *)(v18 + 24) = a2;
  a3 &= 1u;
  *(_BYTE *)(v18 + 32) = a3;
  *(_QWORD *)(v18 + 40) = a4;
  swift_bridgeObjectRetain_n(a4, 2);
  sub_10002057C(a1, a2, a3);
  v19 = sub_100008B04(&qword_101494D70);
  v20 = type metadata accessor for UUID(0);
  v21 = sub_100008B04(&qword_101494D78);
  v22 = sub_100010D70(&qword_101494D80, &qword_101494D70, (const char *)&protocol conformance descriptor for [A]);
  v23 = sub_100063050();
  v24 = sub_10000BC84(&qword_101494D98, type metadata accessor for PlaceSummaryViewModelRefinementButtons.Button, (uint64_t)&unk_100E28BC4);
  v50 = v14;
  v25 = ForEach<>.init(_:content:)(&v67, sub_100063038, v18, v19, v20, v21, v22, v23, v24);
  v26 = static Color.clear.getter(v25);
  v27 = swift_getKeyPath(&unk_100E26100);
  v28 = static Alignment.center.getter(v27);
  _FrameLayout.init(width:height:alignment:)(&v67, 0x4020000000000000, 0, 0, 1, v28, v29);
  v49 = v67;
  v48 = v68;
  v47 = v69;
  v46 = v70;
  v45 = v71;
  v44 = v72;
  v30 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v31 = v10;
  v32 = v60;
  v33 = v14;
  v34 = v59;
  v30(v60, v33, v59);
  v35 = KeyPath;
  v36 = v58;
  *(_QWORD *)a5 = KeyPath;
  *(_QWORD *)(a5 + 8) = v36;
  *(_QWORD *)(a5 + 16) = v56;
  *(_BYTE *)(a5 + 24) = v55;
  *(_QWORD *)(a5 + 32) = v54;
  *(_BYTE *)(a5 + 40) = v53;
  v37 = v51;
  *(_QWORD *)(a5 + 48) = v52;
  *(_QWORD *)(a5 + 56) = v37;
  v38 = sub_100008B04(&qword_101494DA0);
  v30((char *)(a5 + *(int *)(v38 + 48)), v32, v34);
  v39 = a5 + *(int *)(v38 + 64);
  *(_QWORD *)v39 = v27;
  *(_QWORD *)(v39 + 8) = v26;
  *(_QWORD *)(v39 + 16) = v49;
  *(_BYTE *)(v39 + 24) = v48;
  *(_QWORD *)(v39 + 32) = v47;
  *(_BYTE *)(v39 + 40) = v46;
  v40 = v44;
  *(_QWORD *)(v39 + 48) = v45;
  *(_QWORD *)(v39 + 56) = v40;
  v41 = *(void (**)(char *, uint64_t, __n128))(v31 + 8);
  swift_retain(v35);
  swift_retain(v36);
  swift_retain(v27);
  v42 = swift_retain(v26);
  v41(v50, v34, v42);
  swift_release(v26);
  swift_release(v27);
  ((void (*)(char *, uint64_t))v41)(v60, v34);
  swift_release(v36);
  return swift_release(v35);
}

uint64_t sub_100061394@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t (**v28)(uint64_t);
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;

  v39 = a5;
  v40 = a6;
  v38 = a4;
  v37 = a3;
  v32 = a2;
  v8 = type metadata accessor for PlaceSummaryViewModelRefinementButtons.Button(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v35 = *(_QWORD *)(v12 - 8);
  v36 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (int *)type metadata accessor for RefinementBarButton(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()(v18);
  v19 = (uint64_t *)(a1 + *(int *)(v8 + 20));
  v20 = v19[1];
  v33 = *v19;
  v34 = *(unsigned __int8 *)(a1 + *(int *)(v8 + 28));
  sub_1000202AC(a1, (uint64_t)v11, type metadata accessor for PlaceSummaryViewModelRefinementButtons.Button);
  v21 = *(unsigned __int8 *)(v9 + 80);
  v22 = (v21 + 48) & ~v21;
  v23 = swift_allocObject(&unk_10119DBA8, v22 + v10, v21 | 7);
  *(_QWORD *)(v23 + 16) = a2;
  v24 = v37;
  *(_QWORD *)(v23 + 24) = v37;
  LOBYTE(v10) = v38 & 1;
  *(_BYTE *)(v23 + 32) = v38 & 1;
  v25 = v39;
  *(_QWORD *)(v23 + 40) = v39;
  sub_10003F29C((uint64_t)v11, v23 + v22, type metadata accessor for PlaceSummaryViewModelRefinementButtons.Button);
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v17, v14, v36);
  v26 = &v17[v15[5]];
  *(_QWORD *)v26 = v33;
  *((_QWORD *)v26 + 1) = v20;
  v27 = &v17[v15[6]];
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v27 + 1) = 0;
  v17[v15[7]] = v34;
  v17[v15[8]] = 0;
  v28 = (uint64_t (**)(uint64_t))&v17[v15[9]];
  *v28 = sub_100063198;
  v28[1] = (uint64_t (*)(uint64_t))v23;
  swift_bridgeObjectRetain(v20);
  sub_10002057C(v32, v24, v10);
  v29 = sub_10000BC84(&qword_101494D90, type metadata accessor for RefinementBarButton, (uint64_t)&unk_100E2A8C0);
  swift_bridgeObjectRetain(v25);
  View.accessibility(identifier:)(0xD00000000000001CLL, 0x8000000100E441A0, v15, v29);
  return sub_1000202F0((uint64_t)v17, type metadata accessor for RefinementBarButton);
}

uint64_t sub_1000615F8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  char v9;
  void (*v10)(uint64_t *);
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v9 = a4 & 1;
  sub_10002057C(a2, a3, a4 & 1);
  v10 = (void (*)(uint64_t *))sub_10001A4A8(a2, a3, v9);
  v12 = v11;
  sub_10001A774(a2, a3, v9);
  v14 = *(_QWORD *)(a6 + *(int *)(type metadata accessor for PlaceSummaryViewModelRefinementButtons.Button(0) + 24));
  v10(&v14);
  return swift_release(v12);
}

uint64_t sub_100061694()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[16];
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v1 = sub_100008B04(&qword_101494D40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = *v0;
  v7 = v0[1];
  v8 = *((_BYTE *)v0 + 16);
  v9 = v0[3];
  v10 = static Axis.Set.horizontal.getter(v3);
  v16 = v6;
  v17 = v7;
  v18 = v8;
  v19 = v9;
  v11 = sub_100008B04(&qword_101494D48);
  v12 = sub_100010D70(&qword_101494D50, &qword_101494D48, (const char *)&protocol conformance descriptor for HStack<A>);
  ScrollView.init(_:showsIndicators:content:)(v10, 0, sub_100062FE8, v15, v11, v12);
  v13 = sub_100010D70(&qword_101494D58, &qword_101494D40, (const char *)&protocol conformance descriptor for ScrollView<A>);
  View.accessibility(identifier:)(0xD000000000000021, 0x8000000100E44170, v1, v13);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v2 + 8))(v5, v1);
}

uint64_t sub_1000617DC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_101065E44, 1);
}

uint64_t sub_1000617EC(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_101065E10, 1);
}

uint64_t sub_100061820(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_101065DE8, 1);
}

uint64_t sub_100061830()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(_s4LineVMa(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = v3 + *(_QWORD *)(v1 + 64);
  v5 = v2 | 7;
  v6 = v0 + v3;
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = type metadata accessor for PlaceSummaryViewModelLine(0);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + *(int *)(v8 + 20)));
  return swift_deallocObject(v0, v4, v5);
}

void sub_1000618B4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _s4LineVMa(0);
  sub_10004632C(a1, a2);
}

unint64_t sub_100061904()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101494988;
  if (!qword_101494988)
  {
    v1 = sub_10000E5D4(&qword_101494968);
    v2[0] = sub_100061970();
    v2[1] = sub_100062380();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101494988);
  }
  return result;
}

unint64_t sub_100061970()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101494990;
  if (!qword_101494990)
  {
    v1 = sub_10000E5D4(&qword_101494998);
    v2[0] = sub_1000619DC();
    v2[1] = sub_100061ECC();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101494990);
  }
  return result;
}

unint64_t sub_1000619DC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1014949A0;
  if (!qword_1014949A0)
  {
    v1 = sub_10000E5D4(&qword_1014949A8);
    v2[0] = sub_100061A48();
    v2[1] = sub_100061CC0();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_1014949A0);
  }
  return result;
}

unint64_t sub_100061A48()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1014949B0;
  if (!qword_1014949B0)
  {
    v1 = sub_10000E5D4(&qword_1014949B8);
    v2[0] = sub_100061AB4();
    v2[1] = sub_100061BFC();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_1014949B0);
  }
  return result;
}

unint64_t sub_100061AB4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1014949C0;
  if (!qword_1014949C0)
  {
    v1 = sub_10000E5D4(&qword_1014949C8);
    v2[0] = sub_100061B38();
    v2[1] = sub_10000BC84(&qword_1014949E8, _s5LabelVMa, (uint64_t)&unk_100E26A54);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_1014949C0);
  }
  return result;
}

unint64_t sub_100061B38()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1014949D0;
  if (!qword_1014949D0)
  {
    v1 = sub_10000E5D4(&qword_1014949D8);
    v2[0] = sub_10000BC84(&qword_1014949E0, _s10TitleLabelVMa, (uint64_t)&unk_100E26AA4);
    v2[1] = sub_10000BC84(&qword_1014949E8, _s5LabelVMa, (uint64_t)&unk_100E26A54);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_1014949D0);
  }
  return result;
}

uint64_t _s10TitleLabelVMa(uint64_t a1)
{
  return sub_100021D9C(a1, (uint64_t *)&unk_1014954D0, (uint64_t)&_s10TitleLabelVMn);
}

uint64_t _s5LabelVMa(uint64_t a1)
{
  return sub_100021D9C(a1, (uint64_t *)&unk_101495418, (uint64_t)&_s5LabelVMn);
}

unint64_t sub_100061BFC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1014949F0;
  if (!qword_1014949F0)
  {
    v1 = sub_10000E5D4(&qword_1014949F8);
    v2[0] = sub_10000BC84(&qword_101494A00, _s26MultipleCuratedCollectionsVMa, (uint64_t)&unk_100E26A04);
    v2[1] = sub_10000BC84(&qword_101494A08, _s18SingleCuratedGuideVMa, (uint64_t)&unk_100E269B4);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_1014949F0);
  }
  return result;
}

uint64_t _s26MultipleCuratedCollectionsVMa(uint64_t a1)
{
  return sub_100021D9C(a1, qword_101495368, (uint64_t)&_s26MultipleCuratedCollectionsVMn);
}

uint64_t _s18SingleCuratedGuideVMa(uint64_t a1)
{
  return sub_100021D9C(a1, qword_1014952B8, (uint64_t)&_s18SingleCuratedGuideVMn);
}

unint64_t sub_100061CC0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101494A10;
  if (!qword_101494A10)
  {
    v1 = sub_10000E5D4(&qword_101494A18);
    v2[0] = sub_100061D2C();
    v2[1] = sub_100061DF0();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101494A10);
  }
  return result;
}

unint64_t sub_100061D2C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101494A20;
  if (!qword_101494A20)
  {
    v1 = sub_10000E5D4(&qword_101494A28);
    v2[0] = sub_10000BC84(&qword_101494A30, _s18UserGeneratedGuideVMa, (uint64_t)&unk_100E26964);
    v2[1] = sub_10000BC84(&qword_101494A38, _s17FirstPartyRatingsVMa, (uint64_t)&unk_100E26914);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101494A20);
  }
  return result;
}

uint64_t _s18UserGeneratedGuideVMa(uint64_t a1)
{
  return sub_100021D9C(a1, qword_101495220, (uint64_t)&_s18UserGeneratedGuideVMn);
}

uint64_t _s17FirstPartyRatingsVMa(uint64_t a1)
{
  return sub_100021D9C(a1, qword_101495180, (uint64_t)&_s17FirstPartyRatingsVMn);
}

unint64_t sub_100061DF0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101494A40;
  if (!qword_101494A40)
  {
    v1 = sub_10000E5D4(&qword_101494A48);
    v2[0] = sub_10000BC84(&qword_101494A50, _s17ThirdPartyRatingsVMa, (uint64_t)&unk_100E268C4);
    v2[1] = sub_100061E88();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101494A40);
  }
  return result;
}

uint64_t _s17ThirdPartyRatingsVMa(uint64_t a1)
{
  return sub_100021D9C(a1, qword_1014950E0, (uint64_t)&_s17ThirdPartyRatingsVMn);
}

unint64_t sub_100061E88()
{
  unint64_t result;

  result = qword_101494A58;
  if (!qword_101494A58)
  {
    result = swift_getWitnessTable(&unk_100E26874, &_s22UGCUserRecommendationsVN);
    atomic_store(result, (unint64_t *)&qword_101494A58);
  }
  return result;
}

unint64_t sub_100061ECC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101494A60;
  if (!qword_101494A60)
  {
    v1 = sub_10000E5D4(&qword_101494A68);
    v2[0] = sub_100061F38();
    v2[1] = sub_10006215C();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101494A60);
  }
  return result;
}

unint64_t sub_100061F38()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101494A70;
  if (!qword_101494A70)
  {
    v1 = sub_10000E5D4(&qword_101494A78);
    v2[0] = sub_100061FA4();
    v2[1] = sub_100062098();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101494A70);
  }
  return result;
}

unint64_t sub_100061FA4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101494A80;
  if (!qword_101494A80)
  {
    v1 = sub_10000E5D4(&qword_101494A88);
    v2[0] = sub_100062010();
    v2[1] = sub_100062054();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101494A80);
  }
  return result;
}

unint64_t sub_100062010()
{
  unint64_t result;

  result = qword_101494A90;
  if (!qword_101494A90)
  {
    result = swift_getWitnessTable(&unk_100E27B74, &type metadata for TransitShields);
    atomic_store(result, (unint64_t *)&qword_101494A90);
  }
  return result;
}

unint64_t sub_100062054()
{
  unint64_t result;

  result = qword_101494A98;
  if (!qword_101494A98)
  {
    result = swift_getWitnessTable(&unk_100E26824, &_s17ContainmentParentVN);
    atomic_store(result, (unint64_t *)&qword_101494A98);
  }
  return result;
}

unint64_t sub_100062098()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101494AA0;
  if (!qword_101494AA0)
  {
    v1 = sub_10000E5D4(&qword_101494AA8);
    v2[0] = sub_10000BC84(&qword_101494AB0, _s13TappableEntryVMa, (uint64_t)&unk_100E267D4);
    v2[1] = sub_10000BC84(&qword_101494AB8, _s9DelimiterVMa, (uint64_t)&unk_100E26784);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101494AA0);
  }
  return result;
}

uint64_t _s13TappableEntryVMa(uint64_t a1)
{
  return sub_100021D9C(a1, qword_101495048, (uint64_t)&_s13TappableEntryVMn);
}

uint64_t _s9DelimiterVMa(uint64_t a1)
{
  return sub_100021D9C(a1, qword_101494FA8, (uint64_t)&_s9DelimiterVMn);
}

unint64_t sub_10006215C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101494AC0;
  if (!qword_101494AC0)
  {
    v1 = sub_10000E5D4(&qword_101494AC8);
    v2[0] = sub_1000621C8();
    v2[1] = sub_10006228C();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101494AC0);
  }
  return result;
}

unint64_t sub_1000621C8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101494AD0;
  if (!qword_101494AD0)
  {
    v1 = sub_10000E5D4(&qword_101494AD8);
    v2[0] = sub_10000BC84(&qword_101494AE0, _s5HoursVMa, (uint64_t)&unk_100E26734);
    v2[1] = sub_10000BC84(&qword_101494AE8, _s28RealTimeAvailableChargerViewVMa, (uint64_t)&unk_100E266E4);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101494AD0);
  }
  return result;
}

uint64_t _s5HoursVMa(uint64_t a1)
{
  return sub_100021D9C(a1, qword_101494F10, (uint64_t)&_s5HoursVMn);
}

uint64_t _s28RealTimeAvailableChargerViewVMa(uint64_t a1)
{
  return sub_100021D9C(a1, qword_101494E68, (uint64_t)&_s28RealTimeAvailableChargerViewVMn);
}

unint64_t sub_10006228C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101494AF0;
  if (!qword_101494AF0)
  {
    v1 = sub_10000E5D4(&qword_101494AF8);
    v2[0] = sub_1000622F8();
    v2[1] = sub_10006233C();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101494AF0);
  }
  return result;
}

unint64_t sub_1000622F8()
{
  unint64_t result;

  result = qword_101494B00;
  if (!qword_101494B00)
  {
    result = swift_getWitnessTable(&unk_100E26694, &_s17PhotoCarouselViewVN);
    atomic_store(result, (unint64_t *)&qword_101494B00);
  }
  return result;
}

unint64_t sub_10006233C()
{
  unint64_t result;

  result = qword_101494B08;
  if (!qword_101494B08)
  {
    result = swift_getWitnessTable(&unk_100E26644, &_s15UserLibraryViewVN);
    atomic_store(result, (unint64_t *)&qword_101494B08);
  }
  return result;
}

unint64_t sub_100062380()
{
  unint64_t result;

  result = qword_101494B10;
  if (!qword_101494B10)
  {
    result = swift_getWitnessTable(&unk_100E265F4, &_s12UserNoteViewVN);
    atomic_store(result, (unint64_t *)&qword_101494B10);
  }
  return result;
}

unint64_t sub_1000623C4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101494B20;
  if (!qword_101494B20)
  {
    v1 = sub_10000E5D4(&qword_101494958);
    v2[0] = sub_100010D70(&qword_101494B28, &qword_101494950, (const char *)&protocol conformance descriptor for HStack<A>);
    v2[1] = sub_100020AE0();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101494B20);
  }
  return result;
}

uint64_t sub_100062458@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_100062488(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1000624B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSBundle v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t result;
  Swift::String v25;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;

  v10 = type metadata accessor for PlaceSummaryViewModelUnit.UserLibrary(0);
  v11 = sub_10000BC84(&qword_101494BF8, type metadata accessor for PlaceSummaryViewModelUnit.UserLibrary, (uint64_t)&unk_100E284E4);
  v12 = ObservedObject.init(wrappedValue:)(a6, v10, v11);
  v14 = v13;
  if (qword_101490ED0 != -1)
    swift_once(&qword_101490ED0, sub_10011833C);
  v15.super.isa = (Class)qword_1014D4B80;
  v30._object = (void *)0x8000000100E43EE0;
  v16._countAndFlagsBits = 0x6F74206465646441;
  v16._object = (void *)0xE800000000000000;
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v30._countAndFlagsBits = 0xD00000000000001BLL;
  v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, (Swift::String_optional)0, (NSBundle)qword_1014D4B80, v17, v30);
  v31._object = (void *)0x8000000100E43EE0;
  v19._countAndFlagsBits = 0x7972617262694CLL;
  v19._object = (void *)0xE700000000000000;
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  v31._countAndFlagsBits = 0xD00000000000001BLL;
  v21 = NSLocalizedString(_:tableName:bundle:value:comment:)(v19, (Swift::String_optional)0, v15, v20, v31);
  v32._countAndFlagsBits = 0xD000000000000041;
  v32._object = (void *)0x8000000100E43F00;
  v22._countAndFlagsBits = 0x62694C20776F6853;
  v22._object = (void *)0xEC00000079726172;
  v23._countAndFlagsBits = 0;
  v23._object = (void *)0xE000000000000000;
  v25 = NSLocalizedString(_:tableName:bundle:value:comment:)(v22, (Swift::String_optional)0, v15, v23, v32);
  result = v25._countAndFlagsBits;
  *(_QWORD *)a7 = a1;
  *(_QWORD *)(a7 + 8) = a2;
  *(_QWORD *)(a7 + 16) = a3;
  *(_QWORD *)(a7 + 24) = a4;
  *(_BYTE *)(a7 + 32) = a5 & 1;
  *(_QWORD *)(a7 + 40) = v12;
  *(_QWORD *)(a7 + 48) = v14;
  *(Swift::String *)(a7 + 56) = v18;
  *(Swift::String *)(a7 + 72) = v21;
  *(Swift::String *)(a7 + 88) = v25;
  return result;
}

uint64_t sub_100062690(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 80);
  v8 = *(_QWORD *)(a1 + 96);
  v9 = *(id *)a1;
  sub_10002057C(v2, v3, v4);
  swift_retain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t sub_100062718(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 80);
  v8 = *(_QWORD *)(a1 + 96);

  sub_10001A774(v2, v3, v4);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_release(v5);
  return a1;
}

unint64_t sub_1000627A8()
{
  unint64_t result;

  result = qword_101494BD0;
  if (!qword_101494BD0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Double, &type metadata for Double);
    atomic_store(result, (unint64_t *)&qword_101494BD0);
  }
  return result;
}

unint64_t sub_1000627EC()
{
  unint64_t result;

  result = qword_101494BD8;
  if (!qword_101494BD8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_101494BD8);
  }
  return result;
}

uint64_t _s9ImageViewVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10001A6E8(a1, a2, a3, a4, (uint64_t)&_s9ImageViewVMn);
}

unint64_t sub_100062864()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101494C60;
  if (!qword_101494C60)
  {
    v1 = sub_10000E5D4(&qword_101494C10);
    v2[0] = sub_1000628E8();
    v2[1] = sub_100010D70(&qword_101494C80, &qword_101494C88, (const char *)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101494C60);
  }
  return result;
}

unint64_t sub_1000628E8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101494C68;
  if (!qword_101494C68)
  {
    v1 = sub_10000E5D4(&qword_101494C38);
    v2[0] = sub_10006296C();
    v2[1] = sub_10000BC84((unint64_t *)&qword_10149CE30, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101494C68);
  }
  return result;
}

unint64_t sub_10006296C()
{
  unint64_t result;

  result = qword_101494C70;
  if (!qword_101494C70)
  {
    result = swift_getWitnessTable(&unk_100E265A4, &_s15AccessoryButtonVN);
    atomic_store(result, (unint64_t *)&qword_101494C70);
  }
  return result;
}

unint64_t sub_1000629B0()
{
  unint64_t result;

  result = qword_101494C90;
  if (!qword_101494C90)
  {
    result = swift_getWitnessTable(&unk_100E26554, &_s21HikeRouteSnapshotViewVN);
    atomic_store(result, (unint64_t *)&qword_101494C90);
  }
  return result;
}

unint64_t sub_1000629F4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101494C98;
  if (!qword_101494C98)
  {
    v1 = sub_10000E5D4(&qword_101494C50);
    v2[0] = sub_100062A60();
    v2[1] = sub_1000628E8();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101494C98);
  }
  return result;
}

unint64_t sub_100062A60()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101494CA0;
  if (!qword_101494CA0)
  {
    v1 = sub_10000E5D4(&qword_101494C48);
    v2[0] = sub_100062AE4();
    v2[1] = sub_10000BC84((unint64_t *)&qword_10149CE30, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101494CA0);
  }
  return result;
}

unint64_t sub_100062AE4()
{
  unint64_t result;

  result = qword_101494CA8;
  if (!qword_101494CA8)
  {
    result = swift_getWitnessTable(&unk_100E264B4, &_s16DirectionsButtonVN);
    atomic_store(result, (unint64_t *)&qword_101494CA8);
  }
  return result;
}

unint64_t sub_100062B28()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101494CB8;
  if (!qword_101494CB8)
  {
    v1 = sub_10000E5D4(&qword_101494C20);
    v2[0] = sub_100070714(&qword_101494CB0, &qword_101494C30, (uint64_t (*)(void))sub_1000628E8);
    v2[1] = sub_100062BAC();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101494CB8);
  }
  return result;
}

unint64_t sub_100062BAC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101494CC0;
  if (!qword_101494CC0)
  {
    v1 = sub_10000E5D4(&qword_101494CC8);
    v2[0] = sub_100062C18();
    v2[1] = sub_100062C5C();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101494CC0);
  }
  return result;
}

unint64_t sub_100062C18()
{
  unint64_t result;

  result = qword_101494CD0;
  if (!qword_101494CD0)
  {
    result = swift_getWitnessTable(&unk_100E26464, &_s16QueryAcceleratorVN);
    atomic_store(result, (unint64_t *)&qword_101494CD0);
  }
  return result;
}

unint64_t sub_100062C5C()
{
  unint64_t result;

  result = qword_101494CD8;
  if (!qword_101494CD8)
  {
    result = swift_getWitnessTable(&unk_100E26414, &_s7AddViewVN);
    atomic_store(result, (unint64_t *)&qword_101494CD8);
  }
  return result;
}

unint64_t sub_100062CA0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101494CE0;
  if (!qword_101494CE0)
  {
    v1 = sub_10000E5D4(&qword_101494C08);
    v2[0] = sub_100062864();
    v2[1] = sub_1000629B0();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101494CE0);
  }
  return result;
}

uint64_t sub_100062D1C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100062D48(unsigned __int8 *a1)
{
  return EnvironmentValues.isEnabled.setter(*a1);
}

uint64_t sub_100062D6C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

_BYTE *sub_100062D7C(_BYTE *result)
{
  uint64_t v1;

  *result &= ~*(_BYTE *)(v1 + 16) & 1;
  return result;
}

_QWORD *sub_100062D94(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  int64x2_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int8 *v9;
  uint64_t v10;
  void (*v11)(int64x2_t *, uint64_t, uint64_t);
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  int64x2_t v16;
  uint64_t v17;

  v17 = type metadata accessor for GridItem.Size(0);
  v2 = *(_QWORD *)(v17 - 8);
  v3 = __chkstk_darwin(v17);
  v5 = (int64x2_t *)((char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for GridItem(0, v3);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v16.i8[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (!a1)
    return _swiftEmptyArrayStorage;
  v10 = enum case for GridItem.Size.adaptive(_:);
  v11 = *(void (**)(int64x2_t *, uint64_t, uint64_t))(v2 + 104);
  v12 = _swiftEmptyArrayStorage;
  v16 = vdupq_n_s64(0x7FF0000000000000uLL);
  do
  {
    *v5 = v16;
    v11(v5, v10, v17);
    GridItem.init(_:spacing:alignment:)(v5, 0, 1, 0, 0, 1);
    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
      v12 = (_QWORD *)sub_1000A80B4(0, v12[2] + 1, 1, (unint64_t)v12);
    v14 = v12[2];
    v13 = v12[3];
    if (v14 >= v13 >> 1)
      v12 = (_QWORD *)sub_1000A80B4(v13 > 1, v14 + 1, 1, (unint64_t)v12);
    v12[2] = v14 + 1;
    (*(void (**)(unint64_t, __int8 *, uint64_t))(v7 + 32))((unint64_t)v12+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v14, v9, v6);
    --a1;
  }
  while (a1);
  return v12;
}

uint64_t sub_100062F48()
{
  uint64_t v0;

  return sub_1000604B0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

unint64_t sub_100062F50()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_101494D10;
  if (!qword_101494D10)
  {
    v1 = sub_10000E5D4(&qword_101494D08);
    v2 = sub_10000BC84(&qword_101494D18, _s12ActionButtonVMa, (uint64_t)&unk_100E263C4);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ForEach<A, B, C>, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_101494D10);
  }
  return result;
}

uint64_t _s12ActionButtonVMa(uint64_t a1)
{
  return sub_100021D9C(a1, qword_1014955F0, (uint64_t)&_s12ActionButtonVMn);
}

uint64_t sub_100062FE8@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;

  return sub_100060F50(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_BYTE *)(v2 + 32), *(_QWORD *)(v2 + 40), a1, a2);
}

uint64_t sub_100063008()
{
  uint64_t v0;

  sub_10001A774(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100063038@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100061394(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(unsigned __int8 *)(v2 + 32), *(_QWORD *)(v2 + 40), a2);
}

unint64_t sub_100063050()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101494D88;
  if (!qword_101494D88)
  {
    v1 = sub_10000E5D4(&qword_101494D78);
    v2[0] = sub_10000BC84(&qword_101494D90, type metadata accessor for RefinementBarButton, (uint64_t)&unk_100E2A8C0);
    v2[1] = sub_10000BC84((unint64_t *)&qword_10149CE30, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101494D88);
  }
  return result;
}

uint64_t sub_1000630EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for PlaceSummaryViewModelRefinementButtons.Button(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  sub_10001A774(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + *(int *)(v1 + 20) + 8));
  swift_unknownObjectRelease(*(_QWORD *)(v7 + *(int *)(v1 + 24)));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100063198(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PlaceSummaryViewModelRefinementButtons.Button(0) - 8)
                          + 80);
  return sub_1000615F8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32), *(_QWORD *)(v1 + 40), v1 + ((v3 + 48) & ~v3));
}

unint64_t sub_1000631E8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101494DB0;
  if (!qword_101494DB0)
  {
    v1 = sub_10000E5D4(&qword_101494DA8);
    v2[0] = sub_10006326C();
    v2[1] = sub_100010D70((unint64_t *)&unk_101494DC0, &qword_10149D530, (const char *)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101494DB0);
  }
  return result;
}

unint64_t sub_10006326C()
{
  unint64_t result;

  result = qword_101494DB8;
  if (!qword_101494DB8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Circle, &type metadata for Circle);
    atomic_store(result, (unint64_t *)&qword_101494DB8);
  }
  return result;
}

unint64_t sub_1000632B0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101494DE0;
  if (!qword_101494DE0)
  {
    v1 = sub_10000E5D4(&qword_101494DD8);
    v2[0] = sub_100063334();
    v2[1] = sub_100010D70((unint64_t *)&unk_101494E00, &qword_101494DD0, (const char *)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101494DE0);
  }
  return result;
}

unint64_t sub_100063334()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101494DE8;
  if (!qword_101494DE8)
  {
    v1 = sub_10000E5D4(&qword_101494DF0);
    v2[0] = sub_1000633B8();
    v2[1] = sub_100010D70((unint64_t *)&unk_101494DC0, &qword_10149D530, (const char *)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101494DE8);
  }
  return result;
}

unint64_t sub_1000633B8()
{
  unint64_t result;

  result = qword_101494DF8;
  if (!qword_101494DF8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Rectangle, &type metadata for Rectangle);
    atomic_store(result, (unint64_t *)&qword_101494DF8);
  }
  return result;
}

uint64_t _s12UserNoteViewVwxx(uint64_t a1)
{

  sub_10001A774(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  swift_release(*(_QWORD *)(a1 + 48));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 64));
}

uint64_t _s12UserNoteViewVwcp(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  v9 = v4;
  sub_10002057C(v6, v7, v8);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  v10 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  v11 = *(_QWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v12;
  swift_retain(v10);
  swift_bridgeObjectRetain(v12);
  return a1;
}

uint64_t _s12UserNoteViewVwca(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_BYTE *)(a2 + 32);
  sub_10002057C(v7, v8, v9);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 32) = v9;
  sub_10001A774(v10, v11, v12);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v13 = *(_QWORD *)(a2 + 48);
  v14 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v13;
  swift_retain(v13);
  swift_release(v14);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v15 = *(_QWORD *)(a2 + 64);
  v16 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  return a1;
}

__n128 _s12UserNoteViewVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t _s12UserNoteViewVwta(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_BYTE *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_BYTE *)(a1 + 32);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  sub_10001A774(v7, v8, v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_release(v11);
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v12;
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t _s12UserNoteViewVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s12UserNoteViewVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s12UserNoteViewVMa()
{
  return &_s12UserNoteViewVN;
}

uint64_t _s15UserLibraryViewVwxx(uint64_t a1)
{

  sub_10001A774(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  swift_release(*(_QWORD *)(a1 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 80));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 96));
}

uint64_t _s15UserLibraryViewVwcp(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  v9 = v4;
  sub_10002057C(v6, v7, v8);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  v10 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  v11 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v11;
  v12 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v12;
  v13 = *(_QWORD *)(a2 + 88);
  v14 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v13;
  *(_QWORD *)(a1 + 96) = v14;
  swift_retain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v14);
  return a1;
}

uint64_t _s15UserLibraryViewVwca(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_BYTE *)(a2 + 32);
  sub_10002057C(v7, v8, v9);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 32) = v9;
  sub_10001A774(v10, v11, v12);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v13 = *(_QWORD *)(a2 + 48);
  v14 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v13;
  swift_retain(v13);
  swift_release(v14);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v15 = *(_QWORD *)(a2 + 64);
  v16 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v17 = *(_QWORD *)(a2 + 80);
  v18 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v19 = *(_QWORD *)(a2 + 96);
  v20 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  return a1;
}

__n128 initializeWithTake for PlaceSummaryUnitString(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t _s15UserLibraryViewVwta(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_BYTE *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_BYTE *)(a1 + 32);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  sub_10001A774(v7, v8, v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_release(v11);
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v14;
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v16;
  swift_bridgeObjectRelease(v17);
  return a1;
}

uint64_t _s15UserLibraryViewVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s15UserLibraryViewVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s15UserLibraryViewVMa()
{
  return &_s15UserLibraryViewVN;
}

uint64_t _s17PhotoCarouselViewVwxx(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 8));

  sub_10001A774(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
  return swift_release(*(_QWORD *)(a1 + 72));
}

uint64_t _s17PhotoCarouselViewVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  id v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v6 = *(void **)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v5;
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  swift_retain(v4);
  v10 = v6;
  sub_10002057C(v7, v8, v9);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v11;
  swift_retain(v11);
  return a1;
}

uint64_t _s17PhotoCarouselViewVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain(v4);
  swift_release(v5);
  v6 = *(void **)(a1 + 16);
  v7 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  v8 = v7;

  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_BYTE *)(a2 + 48);
  sub_10002057C(v9, v10, v11);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  *(_BYTE *)(a1 + 48) = v11;
  sub_10001A774(v12, v13, v14);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v15 = *(_QWORD *)(a1 + 72);
  v16 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v16;
  swift_retain(v16);
  swift_release(v15);
  return a1;
}

__n128 _s17PhotoCarouselViewVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t _s17PhotoCarouselViewVwta(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release(*(_QWORD *)(a1 + 8));
  v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_BYTE *)(a2 + 48);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_BYTE *)(a1 + 48);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = v6;
  sub_10001A774(v7, v8, v9);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_release(v10);
  return a1;
}

uint64_t _s17PhotoCarouselViewVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s17PhotoCarouselViewVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s17PhotoCarouselViewVMa()
{
  return &_s17PhotoCarouselViewVN;
}

uint64_t *sub_100063CD4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a2[5];
    v10 = *(int *)(a3 + 28);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    a1[4] = a2[4];
    a1[5] = v9;
    swift_retain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    v13 = sub_100008B04(&qword_10149CF20);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 32)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 32));
  }
  return a1;
}

uint64_t sub_100063DA8(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_release(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  v4 = (char *)a1 + *(int *)(a2 + 28);
  v5 = sub_100008B04(&qword_10149CF20);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_100063E04(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a2[5];
  v9 = *(int *)(a3 + 28);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  a1[4] = a2[4];
  a1[5] = v8;
  swift_retain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  v12 = sub_100008B04(&qword_10149CF20);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 32)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 32));
  return a1;
}

_QWORD *sub_100063EAC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[4] = a2[4];
  v10 = a2[5];
  v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(int *)(a3 + 28);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = sub_100008B04(&qword_10149CF20);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 32)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 32));
  return a1;
}

_OWORD *sub_100063F80(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = *(int *)(a3 + 28);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_100008B04(&qword_10149CF20);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 32)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 32));
  return a1;
}

_QWORD *sub_100064004(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_release(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a2[5];
  v11 = a1[5];
  a1[4] = a2[4];
  a1[5] = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(int *)(a3 + 28);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = sub_100008B04(&qword_10149CF20);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 32)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t sub_1000640A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000640B4);
}

uint64_t sub_1000640B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100008B04(&qword_10149CF20);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t sub_100064134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100064140);
}

uint64_t sub_100064140(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100008B04(&qword_10149CF20);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

void sub_1000641B8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_100E26190;
  v4[1] = &unk_100E26190;
  v4[2] = &unk_100E26190;
  sub_100064AF0(319, (unint64_t *)&unk_10149CF90, (uint64_t (*)(void))sub_1000627A8, (uint64_t)&type metadata for Double);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
  }
}

_QWORD *sub_100064254(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v8);
  }
  else
  {
    v7 = type metadata accessor for AttributedString(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t sub_1000642DC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AttributedString(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_100064310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for AttributedString(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10006436C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for AttributedString(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1000643C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for AttributedString(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100064424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for AttributedString(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100064480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006448C);
}

uint64_t sub_10006448C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100064498(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for AttributedString);
}

uint64_t sub_100064498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v10;

  v7 = a4(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_DWORD *)(v8 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(a1, a2, v7);
  v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v10 >= 2)
    return ((v10 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_100064524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100064530);
}

uint64_t sub_100064530(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10006453C(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for AttributedString);
}

uint64_t sub_10006453C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;
  uint64_t v10;

  result = a5(0);
  v10 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v10 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  return result;
}

uint64_t sub_1000645B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000645C0(a1, a2, a3, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString);
}

uint64_t sub_1000645C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  unint64_t v6;
  _QWORD v7[2];

  result = a4(319);
  if (v6 <= 0x3F)
  {
    v7[0] = *(_QWORD *)(result - 8) + 64;
    v7[1] = &unk_100E25CA8;
    swift_initStructMetadata(a1, 256, 2, v7, a1 + 16);
    return 0;
  }
  return result;
}

char *sub_100064630(char *a1, char **a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain(v5);
  }
  else
  {
    *((_QWORD *)a1 + 1) = a2[1];
    v8 = *(int *)(a3 + 20);
    v9 = &a1[v8];
    v10 = (uint64_t)a2 + v8;
    v11 = v5;
    v12 = sub_100008B04(&qword_10149D390);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
    a1[*(int *)(a3 + 24)] = *((_BYTE *)a2 + *(int *)(a3 + 24));
  }
  return a1;
}

uint64_t sub_1000646DC(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = sub_100008B04(&qword_10149D390);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_100064728(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;

  v6 = *(void **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v7;
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = a2 + v8;
  v11 = v6;
  v12 = sub_100008B04(&qword_10149D390);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1000647A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(void **)a1;
  v7 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v7;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v9 = *(int *)(a3 + 20);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = sub_100008B04(&qword_10149D390);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

_OWORD *sub_100064838(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_100008B04(&qword_10149D390);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1000648B4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  *(_QWORD *)(a1 + 8) = a2[1];
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_100008B04(&qword_10149D390);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_100064940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006494C);
}

uint64_t sub_10006494C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = sub_100008B04(&qword_10149D390);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v9);
  }
}

uint64_t sub_1000649D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000649E4);
}

char *sub_1000649E4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)result = a2;
  }
  else
  {
    v7 = sub_100008B04(&qword_10149D390);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

void sub_100064A5C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_100E261B8;
  sub_100064AF0(319, (unint64_t *)&unk_10149D400, (uint64_t (*)(void))sub_1000627EC, (uint64_t)&type metadata for CGFloat);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_100E25CA8;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

void sub_100064AF0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3();
    v8 = type metadata accessor for ScaledMetric(a1, a4, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

char *sub_100064B48(char *a1, char **a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  const void *v43;
  unsigned int (*v44)(const void *, uint64_t, uint64_t, __n128);
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  id v49;
  void (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  char *v54;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain(v5);
  }
  else
  {
    v8 = (uint64_t)a2[2];
    *((_QWORD *)a1 + 1) = a2[1];
    v9 = (uint64_t)a2[3];
    v10 = *((_BYTE *)a2 + 32);
    v11 = v5;
    sub_10002057C(v8, v9, v10);
    *((_QWORD *)a1 + 2) = v8;
    *((_QWORD *)a1 + 3) = v9;
    a1[32] = v10;
    v12 = *(int *)(a3 + 24);
    v13 = &a1[v12];
    v14 = (uint64_t)a2 + v12;
    v15 = type metadata accessor for UUID(0);
    v16 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    v16(v13, v14, v15);
    v52 = type metadata accessor for PlaceSummaryViewModelUnit.TappableEntry(0);
    v53 = v14;
    v17 = *(int *)(v52 + 20);
    v54 = v13;
    v18 = &v13[v17];
    v19 = v14 + v17;
    v16(&v13[v17], v14 + v17, v15);
    v20 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.Label(0);
    v21 = v20[5];
    v22 = &v18[v21];
    v23 = v19 + v21;
    v24 = type metadata accessor for AttributedString(0);
    v25 = *(_QWORD *)(v24 - 8);
    v51 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
    v51(v22, v23, v24);
    v26 = v20[6];
    v27 = &v18[v26];
    v28 = (_QWORD *)(v19 + v26);
    v29 = v28[1];
    *(_QWORD *)v27 = *v28;
    *((_QWORD *)v27 + 1) = v29;
    v30 = v20[7];
    v31 = *(_QWORD *)(v19 + v30);
    *(_QWORD *)&v18[v30] = v31;
    v32 = v20[8];
    v33 = *(_QWORD *)(v19 + v32);
    *(_QWORD *)&v18[v32] = v33;
    v34 = v20[9];
    v35 = *(_QWORD *)(v19 + v34);
    *(_QWORD *)&v18[v34] = v35;
    v36 = v20[10];
    v37 = *(_QWORD *)(v19 + v36);
    *(_QWORD *)&v18[v36] = v37;
    v38 = v20[11];
    v39 = &v18[v38];
    v40 = v19 + v38;
    *(_QWORD *)v39 = *(_QWORD *)v40;
    v39[8] = *(_BYTE *)(v40 + 8);
    v41 = v20[12];
    v42 = &v18[v41];
    v43 = (const void *)(v19 + v41);
    v44 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v25 + 48);
    swift_bridgeObjectRetain(v29);
    swift_retain(v31);
    swift_retain(v33);
    swift_retain(v35);
    v45 = swift_retain(v37);
    if (v44(v43, 1, v24, v45))
    {
      v46 = sub_100008B04(&qword_101494BF0);
      memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    }
    else
    {
      v51(v42, (uint64_t)v43, v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v42, 0, 1, v24);
    }
    v47 = *(int *)(v52 + 24);
    v48 = *(void **)(v53 + v47);
    *(_QWORD *)&v54[v47] = v48;
    v49 = v48;
  }
  return a1;
}

void sub_100064D9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;

  sub_10001A774(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UUID(0);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = type metadata accessor for PlaceSummaryViewModelUnit.TappableEntry(0);
  v8 = v4 + *(int *)(v7 + 20);
  v6(v8, v5);
  v9 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.Label(0);
  v10 = v8 + v9[5];
  v11 = type metadata accessor for AttributedString(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v13(v10, v11);
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + v9[6] + 8));
  swift_release(*(_QWORD *)(v8 + v9[7]));
  swift_release(*(_QWORD *)(v8 + v9[8]));
  swift_release(*(_QWORD *)(v8 + v9[9]));
  swift_release(*(_QWORD *)(v8 + v9[10]));
  v14 = v8 + v9[12];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v14, 1, v11))
    v13(v14, v11);

}

uint64_t sub_100064ED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const void *v43;
  unsigned int (*v44)(const void *, uint64_t, uint64_t, __n128);
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  id v49;
  void (*v51)(void *, const void *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v6 = *(void **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v7;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 32);
  v11 = v6;
  sub_10002057C(v8, v9, v10);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_BYTE *)(a1 + 32) = v10;
  v12 = *(int *)(a3 + 24);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for UUID(0);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
  v16(v13, v14, v15);
  v52 = type metadata accessor for PlaceSummaryViewModelUnit.TappableEntry(0);
  v53 = v14;
  v17 = *(int *)(v52 + 20);
  v54 = v13;
  v18 = v13 + v17;
  v19 = v14 + v17;
  v16(v13 + v17, v14 + v17, v15);
  v20 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.Label(0);
  v21 = v20[5];
  v22 = (void *)(v18 + v21);
  v23 = (const void *)(v19 + v21);
  v24 = type metadata accessor for AttributedString(0);
  v25 = *(_QWORD *)(v24 - 8);
  v51 = *(void (**)(void *, const void *, uint64_t))(v25 + 16);
  v51(v22, v23, v24);
  v26 = v20[6];
  v27 = (_QWORD *)(v18 + v26);
  v28 = (_QWORD *)(v19 + v26);
  v29 = v28[1];
  *v27 = *v28;
  v27[1] = v29;
  v30 = v20[7];
  v31 = *(_QWORD *)(v19 + v30);
  *(_QWORD *)(v18 + v30) = v31;
  v32 = v20[8];
  v33 = *(_QWORD *)(v19 + v32);
  *(_QWORD *)(v18 + v32) = v33;
  v34 = v20[9];
  v35 = *(_QWORD *)(v19 + v34);
  *(_QWORD *)(v18 + v34) = v35;
  v36 = v20[10];
  v37 = *(_QWORD *)(v19 + v36);
  *(_QWORD *)(v18 + v36) = v37;
  v38 = v20[11];
  v39 = v18 + v38;
  v40 = v19 + v38;
  *(_QWORD *)v39 = *(_QWORD *)v40;
  *(_BYTE *)(v39 + 8) = *(_BYTE *)(v40 + 8);
  v41 = v20[12];
  v42 = (void *)(v18 + v41);
  v43 = (const void *)(v19 + v41);
  v44 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v25 + 48);
  swift_bridgeObjectRetain(v29);
  swift_retain(v31);
  swift_retain(v33);
  swift_retain(v35);
  v45 = swift_retain(v37);
  if (v44(v43, 1, v24, v45))
  {
    v46 = sub_100008B04(&qword_101494BF0);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    v51(v42, v43, v24);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v42, 0, 1, v24);
  }
  v47 = *(int *)(v52 + 24);
  v48 = *(void **)(v53 + v47);
  *(_QWORD *)(v54 + v47) = v48;
  v49 = v48;
  return a1;
}

uint64_t sub_100065100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t (*v55)(void *, uint64_t, uint64_t);
  int v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  id v61;
  uint64_t v63;

  v6 = *(void **)a1;
  v7 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v7;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_BYTE *)(a2 + 32);
  sub_10002057C(v9, v10, v11);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v10;
  *(_BYTE *)(a1 + 32) = v11;
  sub_10001A774(v12, v13, v14);
  v15 = *(int *)(a3 + 24);
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for UUID(0);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24);
  v19(v16, v17, v18);
  v63 = type metadata accessor for PlaceSummaryViewModelUnit.TappableEntry(0);
  v20 = *(int *)(v63 + 20);
  v21 = v16 + v20;
  v22 = v17 + v20;
  v19(v16 + v20, v17 + v20, v18);
  v23 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.Label(0);
  v24 = v23[5];
  v25 = v21 + v24;
  v26 = v22 + v24;
  v27 = type metadata accessor for AttributedString(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = v26;
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 24);
  v30(v25, v29, v27);
  v31 = v23[6];
  v32 = (_QWORD *)(v21 + v31);
  v33 = (_QWORD *)(v22 + v31);
  *v32 = *v33;
  v34 = v33[1];
  v35 = v32[1];
  v32[1] = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v35);
  v36 = v23[7];
  v37 = *(_QWORD *)(v21 + v36);
  v38 = *(_QWORD *)(v22 + v36);
  *(_QWORD *)(v21 + v36) = v38;
  swift_retain(v38);
  swift_release(v37);
  v39 = v23[8];
  v40 = *(_QWORD *)(v21 + v39);
  v41 = *(_QWORD *)(v22 + v39);
  *(_QWORD *)(v21 + v39) = v41;
  swift_retain(v41);
  swift_release(v40);
  v42 = v23[9];
  v43 = *(_QWORD *)(v21 + v42);
  v44 = *(_QWORD *)(v22 + v42);
  *(_QWORD *)(v21 + v42) = v44;
  swift_retain(v44);
  swift_release(v43);
  v45 = v23[10];
  v46 = *(_QWORD *)(v21 + v45);
  v47 = *(_QWORD *)(v22 + v45);
  *(_QWORD *)(v21 + v45) = v47;
  swift_retain(v47);
  swift_release(v46);
  v48 = v23[11];
  v49 = v21 + v48;
  v50 = (uint64_t *)(v22 + v48);
  v51 = *v50;
  *(_BYTE *)(v49 + 8) = *((_BYTE *)v50 + 8);
  *(_QWORD *)v49 = v51;
  v52 = v23[12];
  v53 = (void *)(v21 + v52);
  v54 = (void *)(v22 + v52);
  v55 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v28 + 48);
  LODWORD(v23) = v55(v53, 1, v27);
  v56 = v55(v54, 1, v27);
  if (!(_DWORD)v23)
  {
    if (!v56)
    {
      v30((uint64_t)v53, (uint64_t)v54, v27);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v28 + 8))(v53, v27);
    goto LABEL_6;
  }
  if (v56)
  {
LABEL_6:
    v57 = sub_100008B04(&qword_101494BF0);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v28 + 16))(v53, v54, v27);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v53, 0, 1, v27);
LABEL_7:
  v58 = *(int *)(v63 + 24);
  v59 = *(void **)(v17 + v58);
  v60 = *(void **)(v16 + v58);
  *(_QWORD *)(v16 + v58) = v59;
  v61 = v59;

  return a1;
}

uint64_t sub_1000653B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(void *, const void *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32);
  v9(v6, v7, v8);
  v28 = type metadata accessor for PlaceSummaryViewModelUnit.TappableEntry(0);
  v29 = v6;
  v10 = *(int *)(v28 + 20);
  v11 = v6 + v10;
  v12 = v7 + v10;
  v9(v6 + v10, v7 + v10, v8);
  v13 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.Label(0);
  v14 = v13[5];
  v15 = (void *)(v11 + v14);
  v16 = (const void *)(v12 + v14);
  v17 = type metadata accessor for AttributedString(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(void (**)(void *, const void *, uint64_t))(v18 + 32);
  v19(v15, v16, v17);
  *(_OWORD *)(v11 + v13[6]) = *(_OWORD *)(v12 + v13[6]);
  *(_QWORD *)(v11 + v13[7]) = *(_QWORD *)(v12 + v13[7]);
  *(_QWORD *)(v11 + v13[8]) = *(_QWORD *)(v12 + v13[8]);
  *(_QWORD *)(v11 + v13[9]) = *(_QWORD *)(v12 + v13[9]);
  *(_QWORD *)(v11 + v13[10]) = *(_QWORD *)(v12 + v13[10]);
  v20 = v13[11];
  v21 = v11 + v20;
  v22 = v12 + v20;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  v23 = v13[12];
  v24 = (void *)(v11 + v23);
  v25 = (const void *)(v12 + v23);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48))(v25, 1, v17))
  {
    v26 = sub_100008B04(&qword_101494BF0);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v19(v24, v25, v17);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v24, 0, 1, v17);
  }
  *(_QWORD *)(v29 + *(int *)(v28 + 24)) = *(_QWORD *)(v7 + *(int *)(v28 + 24));
  return a1;
}

uint64_t sub_10006557C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t (*v47)(void *, uint64_t, uint64_t);
  int v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v53;
  uint64_t v54;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_BYTE *)(a1 + 32);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  sub_10001A774(v9, v10, v11);
  v12 = *(int *)(a3 + 24);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for UUID(0);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40);
  v16(v13, v14, v15);
  v53 = type metadata accessor for PlaceSummaryViewModelUnit.TappableEntry(0);
  v54 = v14;
  v17 = *(int *)(v53 + 20);
  v18 = v13 + v17;
  v19 = v14 + v17;
  v16(v13 + v17, v14 + v17, v15);
  v20 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.Label(0);
  v21 = v20[5];
  v22 = v18 + v21;
  v23 = v19 + v21;
  v24 = type metadata accessor for AttributedString(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 40);
  v26(v22, v23, v24);
  v27 = v20[6];
  v28 = (_QWORD *)(v18 + v27);
  v29 = (uint64_t *)(v19 + v27);
  v31 = *v29;
  v30 = v29[1];
  v32 = v28[1];
  *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease(v32);
  v33 = v20[7];
  v34 = *(_QWORD *)(v18 + v33);
  *(_QWORD *)(v18 + v33) = *(_QWORD *)(v19 + v33);
  swift_release(v34);
  v35 = v20[8];
  v36 = *(_QWORD *)(v18 + v35);
  *(_QWORD *)(v18 + v35) = *(_QWORD *)(v19 + v35);
  swift_release(v36);
  v37 = v20[9];
  v38 = *(_QWORD *)(v18 + v37);
  *(_QWORD *)(v18 + v37) = *(_QWORD *)(v19 + v37);
  swift_release(v38);
  v39 = v20[10];
  v40 = *(_QWORD *)(v18 + v39);
  *(_QWORD *)(v18 + v39) = *(_QWORD *)(v19 + v39);
  swift_release(v40);
  v41 = v20[11];
  v42 = v18 + v41;
  v43 = v19 + v41;
  *(_QWORD *)v42 = *(_QWORD *)v43;
  *(_BYTE *)(v42 + 8) = *(_BYTE *)(v43 + 8);
  v44 = v20[12];
  v45 = (void *)(v18 + v44);
  v46 = (void *)(v19 + v44);
  v47 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v25 + 48);
  LODWORD(v20) = v47(v45, 1, v24);
  v48 = v47(v46, 1, v24);
  if (!(_DWORD)v20)
  {
    if (!v48)
    {
      v26((uint64_t)v45, (uint64_t)v46, v24);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v25 + 8))(v45, v24);
    goto LABEL_6;
  }
  if (v48)
  {
LABEL_6:
    v49 = sub_100008B04(&qword_101494BF0);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v25 + 32))(v45, v46, v24);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v45, 0, 1, v24);
LABEL_7:
  v50 = *(int *)(v53 + 24);
  v51 = *(void **)(v13 + v50);
  *(_QWORD *)(v13 + v50) = *(_QWORD *)(v54 + v50);

  return a1;
}

uint64_t sub_1000657E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000657F4);
}

uint64_t sub_1000657F4(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = type metadata accessor for PlaceSummaryViewModelUnit.TappableEntry(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v9);
  }
}

uint64_t sub_10006587C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100065888);
}

char *sub_100065888(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)result = a2;
  }
  else
  {
    v7 = type metadata accessor for PlaceSummaryViewModelUnit.TappableEntry(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_1000658FC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_100E261B8;
  v4[1] = &unk_100E261E0;
  result = type metadata accessor for PlaceSummaryViewModelUnit.TappableEntry(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t _s17ContainmentParentVwxx(uint64_t a1)
{

  sub_10001A774(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  swift_release(*(_QWORD *)(a1 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 64));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 80));
}

uint64_t _s17ContainmentParentVwcp(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  v9 = v4;
  sub_10002057C(v6, v7, v8);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  v10 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  v11 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v11;
  v12 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v12;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  swift_retain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  return a1;
}

uint64_t _s17ContainmentParentVwca(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_BYTE *)(a2 + 32);
  sub_10002057C(v7, v8, v9);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 32) = v9;
  sub_10001A774(v10, v11, v12);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v13 = *(_QWORD *)(a2 + 48);
  v14 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v13;
  swift_retain(v13);
  swift_release(v14);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v15 = *(_QWORD *)(a2 + 64);
  v16 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v17 = *(_QWORD *)(a2 + 80);
  v18 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  return a1;
}

__n128 _s17ContainmentParentVwtk(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t _s17ContainmentParentVwta(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_BYTE *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_BYTE *)(a1 + 32);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  sub_10001A774(v7, v8, v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_release(v11);
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v14;
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  return a1;
}

uint64_t _s17ContainmentParentVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 89))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s17ContainmentParentVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 88) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 89) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 89) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s17ContainmentParentVMa()
{
  return &_s17ContainmentParentVN;
}

uint64_t _s22UGCUserRecommendationsVwxx(uint64_t a1)
{

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
}

uint64_t _s22UGCUserRecommendationsVwcp(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v4;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v7 = v3;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t _s22UGCUserRecommendationsVwca(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

__n128 _s22UGCUserRecommendationsVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s22UGCUserRecommendationsVwta(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t _s22UGCUserRecommendationsVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 49))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s22UGCUserRecommendationsVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s22UGCUserRecommendationsVMa()
{
  return &_s22UGCUserRecommendationsVN;
}

char *sub_100065EE4(char *a1, char **a2, int *a3)
{
  int v4;
  char *v5;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  int *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  id v29;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain(v5);
  }
  else
  {
    *((_QWORD *)a1 + 1) = a2[1];
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = (uint64_t)a2 + v8;
    v11 = v5;
    v12 = sub_100008B04(&qword_10149D390);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
    v13 = a3[6];
    v14 = a3[7];
    v15 = &a1[v13];
    v16 = (char **)((char *)a2 + v13);
    v17 = v16[1];
    *(_QWORD *)v15 = *v16;
    *((_QWORD *)v15 + 1) = v17;
    v18 = &a1[v14];
    v19 = (uint64_t)a2 + v14;
    v20 = type metadata accessor for UUID(0);
    v21 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
    swift_bridgeObjectRetain(v17);
    v21(v18, v19, v20);
    v22 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.ThirdPartyRatings(0);
    *(_DWORD *)&v18[v22[5]] = *(_DWORD *)(v19 + v22[5]);
    v23 = v22[6];
    v24 = *(void **)(v19 + v23);
    *(_QWORD *)&v18[v23] = v24;
    *(_QWORD *)&v18[v22[7]] = *(_QWORD *)(v19 + v22[7]);
    v25 = v22[8];
    v26 = &v18[v25];
    v27 = (_QWORD *)(v19 + v25);
    v28 = v27[1];
    *(_QWORD *)v26 = *v27;
    *((_QWORD *)v26 + 1) = v28;
    v18[v22[9]] = *(_BYTE *)(v19 + v22[9]);
    a1[a3[8]] = *((_BYTE *)a2 + a3[8]);
    v29 = v24;
    swift_bridgeObjectRetain(v28);
  }
  return a1;
}

uint64_t sub_100066038(id *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (char *)a1 + a2[5];
  v5 = sub_100008B04(&qword_10149D390);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease(*(id *)((char *)a1 + a2[6] + 8));
  v6 = (char *)a1 + a2[7];
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = type metadata accessor for PlaceSummaryViewModelUnit.ThirdPartyRatings(0);

  return swift_bridgeObjectRelease(*(_QWORD *)&v6[*(int *)(v8 + 32) + 8]);
}

_QWORD *sub_1000660E8(_QWORD *a1, uint64_t a2, int *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  int *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  id v29;

  v6 = *(void **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v7;
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = a2 + v8;
  v11 = v6;
  v12 = sub_100008B04(&qword_10149D390);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
  v13 = a3[6];
  v14 = a3[7];
  v15 = (_QWORD *)((char *)a1 + v13);
  v16 = (_QWORD *)(a2 + v13);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v18 = (char *)a1 + v14;
  v19 = a2 + v14;
  v20 = type metadata accessor for UUID(0);
  v21 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
  swift_bridgeObjectRetain(v17);
  v21(v18, v19, v20);
  v22 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.ThirdPartyRatings(0);
  *(_DWORD *)&v18[v22[5]] = *(_DWORD *)(v19 + v22[5]);
  v23 = v22[6];
  v24 = *(void **)(v19 + v23);
  *(_QWORD *)&v18[v23] = v24;
  *(_QWORD *)&v18[v22[7]] = *(_QWORD *)(v19 + v22[7]);
  v25 = v22[8];
  v26 = &v18[v25];
  v27 = (_QWORD *)(v19 + v25);
  v28 = v27[1];
  *(_QWORD *)v26 = *v27;
  *((_QWORD *)v26 + 1) = v28;
  v18[v22[9]] = *(_BYTE *)(v19 + v22[9]);
  *((_BYTE *)a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v29 = v24;
  swift_bridgeObjectRetain(v28);
  return a1;
}

uint64_t sub_100066210(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;

  v6 = *(void **)a1;
  v7 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v7;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = sub_100008B04(&qword_10149D390);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  v13 = a3[6];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  *v14 = *v15;
  v16 = v15[1];
  v17 = v14[1];
  v14[1] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = a3[7];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 24))(v19, v20, v21);
  v22 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.ThirdPartyRatings(0);
  *(_DWORD *)(v19 + v22[5]) = *(_DWORD *)(v20 + v22[5]);
  v23 = v22[6];
  v24 = *(void **)(v20 + v23);
  v25 = *(void **)(v19 + v23);
  *(_QWORD *)(v19 + v23) = v24;
  v26 = v24;

  *(_QWORD *)(v19 + v22[7]) = *(_QWORD *)(v20 + v22[7]);
  v27 = v22[8];
  v28 = (_QWORD *)(v19 + v27);
  v29 = (_QWORD *)(v20 + v27);
  *v28 = *v29;
  v30 = v29[1];
  v31 = v28[1];
  v28[1] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  *(_BYTE *)(v19 + v22[9]) = *(_BYTE *)(v20 + v22[9]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

_OWORD *sub_100066374(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int *v14;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_100008B04(&qword_10149D390);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v14 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.ThirdPartyRatings(0);
  *(_DWORD *)&v11[v14[5]] = *(_DWORD *)&v12[v14[5]];
  *(_QWORD *)&v11[v14[6]] = *(_QWORD *)&v12[v14[6]];
  *(_QWORD *)&v11[v14[7]] = *(_QWORD *)&v12[v14[7]];
  *(_OWORD *)&v11[v14[8]] = *(_OWORD *)&v12[v14[8]];
  v11[v14[9]] = v12[v14[9]];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

uint64_t sub_100066468(uint64_t a1, _QWORD *a2, int *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  *(_QWORD *)(a1 + 8) = a2[1];
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_100008B04(&qword_10149D390);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  v15 = *v13;
  v14 = v13[1];
  v16 = v12[1];
  *v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease(v16);
  v17 = a3[7];
  v18 = a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v18, v19, v20);
  v21 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.ThirdPartyRatings(0);
  *(_DWORD *)(v18 + v21[5]) = *(_DWORD *)&v19[v21[5]];
  v22 = v21[6];
  v23 = *(void **)(v18 + v22);
  *(_QWORD *)(v18 + v22) = *(_QWORD *)&v19[v22];

  *(_QWORD *)(v18 + v21[7]) = *(_QWORD *)&v19[v21[7]];
  v24 = v21[8];
  v25 = (_QWORD *)(v18 + v24);
  v26 = &v19[v24];
  v28 = *(_QWORD *)v26;
  v27 = *((_QWORD *)v26 + 1);
  v29 = v25[1];
  *v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease(v29);
  *(_BYTE *)(v18 + v21[9]) = v19[v21[9]];
  *(_BYTE *)(a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

uint64_t sub_10006659C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000665A8);
}

uint64_t sub_1000665A8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v6 = sub_100008B04(&qword_10149D390);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for PlaceSummaryViewModelUnit.ThirdPartyRatings(0);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = *(_QWORD *)(a1 + a3[6] + 8);
  if (v10 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  return (v10 + 1);
}

uint64_t sub_100066654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100066660);
}

uint64_t sub_100066660(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_100008B04(&qword_10149D390);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[5];
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[6] + 8) = (a2 - 1);
      return result;
    }
    v10 = type metadata accessor for PlaceSummaryViewModelUnit.ThirdPartyRatings(0);
    v9 = *(_QWORD *)(v10 - 8);
    v11 = a4[7];
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void sub_100066708(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  v6[0] = &unk_100E261B8;
  sub_100064AF0(319, (unint64_t *)&unk_10149D400, (uint64_t (*)(void))sub_1000627EC, (uint64_t)&type metadata for CGFloat);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    v6[2] = &unk_100E26190;
    v4 = type metadata accessor for PlaceSummaryViewModelUnit.ThirdPartyRatings(319);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      v6[4] = &unk_100E25CA8;
      swift_initStructMetadata(a1, 256, 5, v6, a1 + 16);
    }
  }
}

char *sub_1000667C0(char *a1, char **a2, int *a3)
{
  int v3;
  char *v4;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
  }
  else
  {
    v7 = a1;
    *((_QWORD *)a1 + 1) = a2[1];
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = (uint64_t)a2 + v8;
    v11 = v4;
    v12 = sub_100008B04(&qword_10149D390);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
    v13 = a3[6];
    v14 = a3[7];
    v15 = &v7[v13];
    v16 = (char **)((char *)a2 + v13);
    v17 = v16[1];
    *(_QWORD *)v15 = *v16;
    *((_QWORD *)v15 + 1) = v17;
    v4 = *(char **)((char *)a2 + v14);
    *(_QWORD *)&v7[v14] = v4;
    v18 = a3[9];
    *(_QWORD *)&v7[a3[8]] = *(char **)((char *)a2 + a3[8]);
    v7[v18] = *((_BYTE *)a2 + v18);
    swift_bridgeObjectRetain(v17);
  }
  swift_retain(v4);
  return v7;
}

uint64_t sub_100066898(id *a1, int *a2)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)a1 + a2[5];
  v5 = sub_100008B04(&qword_10149D390);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease(*(id *)((char *)a1 + a2[6] + 8));
  return swift_release(*(id *)((char *)a1 + a2[7]));
}

_QWORD *sub_100066908(_QWORD *a1, uint64_t a2, int *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *(void **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v7;
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = a2 + v8;
  v11 = v6;
  v12 = sub_100008B04(&qword_10149D390);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
  v13 = a3[6];
  v14 = a3[7];
  v15 = (_QWORD *)((char *)a1 + v13);
  v16 = (_QWORD *)(a2 + v13);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v18 = *(_QWORD *)(a2 + v14);
  *(_QWORD *)((char *)a1 + v14) = v18;
  v19 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *((_BYTE *)a1 + v19) = *(_BYTE *)(a2 + v19);
  swift_bridgeObjectRetain(v17);
  swift_retain(v18);
  return a1;
}

uint64_t sub_1000669B8(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *(void **)a1;
  v7 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v7;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = sub_100008B04(&qword_10149D390);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  v13 = a3[6];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  *v14 = *v15;
  v16 = v15[1];
  v17 = v14[1];
  v14[1] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = a3[7];
  v19 = *(_QWORD *)(a2 + v18);
  v20 = *(_QWORD *)(a1 + v18);
  *(_QWORD *)(a1 + v18) = v19;
  swift_retain(v19);
  swift_release(v20);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

_OWORD *sub_100066A9C(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_100008B04(&qword_10149D390);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
  v11 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *((_BYTE *)a1 + v11) = *((_BYTE *)a2 + v11);
  return a1;
}

uint64_t sub_100066B34(uint64_t a1, _QWORD *a2, int *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  *(_QWORD *)(a1 + 8) = a2[1];
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_100008B04(&qword_10149D390);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  v15 = *v13;
  v14 = v13[1];
  v16 = v12[1];
  *v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease(v16);
  v17 = a3[7];
  v18 = *(_QWORD *)(a1 + v17);
  *(_QWORD *)(a1 + v17) = *(_QWORD *)((char *)a2 + v17);
  swift_release(v18);
  v19 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(_BYTE *)(a1 + v19) = *((_BYTE *)a2 + v19);
  return a1;
}

uint64_t sub_100066BF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100066C04);
}

uint64_t sub_100066C04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100008B04(&qword_10149D390);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100066C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100066C98);
}

uint64_t sub_100066C98(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100008B04(&qword_10149D390);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

void sub_100066D1C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_100E261B8;
  sub_100064AF0(319, (unint64_t *)&unk_10149D400, (uint64_t (*)(void))sub_1000627EC, (uint64_t)&type metadata for CGFloat);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_100E26190;
    v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[5] = &unk_100E25CA8;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
  }
}

char *sub_100066DD8(char *a1, char **a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain(v5);
  }
  else
  {
    v8 = (uint64_t)a2[2];
    *((_QWORD *)a1 + 1) = a2[1];
    v9 = (uint64_t)a2[3];
    v10 = *((_BYTE *)a2 + 32);
    v11 = v5;
    sub_10002057C(v8, v9, v10);
    *((_QWORD *)a1 + 2) = v8;
    *((_QWORD *)a1 + 3) = v9;
    a1[32] = v10;
    v12 = a2[6];
    *((_QWORD *)a1 + 5) = a2[5];
    *((_QWORD *)a1 + 6) = v12;
    v13 = *(int *)(a3 + 28);
    v14 = &a1[v13];
    v15 = (uint64_t)a2 + v13;
    v16 = type metadata accessor for UUID(0);
    v17 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
    swift_bridgeObjectRetain(v12);
    v17(v14, v15, v16);
    v18 = type metadata accessor for PlaceSummaryViewModelUnit.UserGeneratedGuide(0);
    v19 = *(int *)(v18 + 20);
    v20 = &v14[v19];
    v21 = (uint64_t *)(v15 + v19);
    v23 = *v21;
    v22 = v21[1];
    *(_QWORD *)v20 = v23;
    *((_QWORD *)v20 + 1) = v22;
    v24 = *(int *)(v18 + 24);
    v25 = *(void **)(v15 + v24);
    *(_QWORD *)&v14[v24] = v25;
    swift_bridgeObjectRetain(v22);
    v26 = v25;
  }
  return a1;
}

void sub_100066EDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10001A774(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = type metadata accessor for PlaceSummaryViewModelUnit.UserGeneratedGuide(0);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + *(int *)(v6 + 20) + 8));

}

uint64_t sub_100066F60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;

  v6 = *(void **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v7;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 32);
  v11 = v6;
  sub_10002057C(v8, v9, v10);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_BYTE *)(a1 + 32) = v10;
  v12 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v12;
  v13 = *(int *)(a3 + 28);
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = type metadata accessor for UUID(0);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
  swift_bridgeObjectRetain(v12);
  v17(v14, v15, v16);
  v18 = type metadata accessor for PlaceSummaryViewModelUnit.UserGeneratedGuide(0);
  v19 = *(int *)(v18 + 20);
  v20 = (_QWORD *)(v14 + v19);
  v21 = (uint64_t *)(v15 + v19);
  v23 = *v21;
  v22 = v21[1];
  *v20 = v23;
  v20[1] = v22;
  v24 = *(int *)(v18 + 24);
  v25 = *(void **)(v15 + v24);
  *(_QWORD *)(v14 + v24) = v25;
  swift_bridgeObjectRetain(v22);
  v26 = v25;
  return a1;
}

uint64_t sub_100067038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  id v30;

  v6 = *(void **)a1;
  v7 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v7;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_BYTE *)(a2 + 32);
  sub_10002057C(v9, v10, v11);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v10;
  *(_BYTE *)(a1 + 32) = v11;
  sub_10001A774(v12, v13, v14);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v15 = *(_QWORD *)(a2 + 48);
  v16 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = *(int *)(a3 + 28);
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 24))(v18, v19, v20);
  v21 = type metadata accessor for PlaceSummaryViewModelUnit.UserGeneratedGuide(0);
  v22 = *(int *)(v21 + 20);
  v23 = (_QWORD *)(v18 + v22);
  v24 = (_QWORD *)(v19 + v22);
  *v23 = *v24;
  v25 = v24[1];
  v26 = v23[1];
  v23[1] = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  v27 = *(int *)(v21 + 24);
  v28 = *(void **)(v19 + v27);
  v29 = *(void **)(v18 + v27);
  *(_QWORD *)(v18 + v27) = v28;
  v30 = v28;

  return a1;
}

uint64_t sub_100067154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v5 = *(int *)(a3 + 28);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  v9 = type metadata accessor for PlaceSummaryViewModelUnit.UserGeneratedGuide(0);
  *(_OWORD *)(v6 + *(int *)(v9 + 20)) = *(_OWORD *)(v7 + *(int *)(v9 + 20));
  *(_QWORD *)(v6 + *(int *)(v9 + 24)) = *(_QWORD *)(v7 + *(int *)(v9 + 24));
  return a1;
}

uint64_t sub_1000671E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_BYTE *)(a1 + 32);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  sub_10001A774(v9, v10, v11);
  v12 = *(_QWORD *)(a2 + 48);
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(int *)(a3 + 28);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v15, v16, v17);
  v18 = type metadata accessor for PlaceSummaryViewModelUnit.UserGeneratedGuide(0);
  v19 = *(int *)(v18 + 20);
  v20 = (_QWORD *)(v15 + v19);
  v21 = (uint64_t *)(v16 + v19);
  v23 = *v21;
  v22 = v21[1];
  v24 = v20[1];
  *v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease(v24);
  v25 = *(int *)(v18 + 24);
  v26 = *(void **)(v15 + v25);
  *(_QWORD *)(v15 + v25) = *(_QWORD *)(v16 + v25);

  return a1;
}

uint64_t sub_1000672BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000672C8);
}

uint64_t sub_1000672C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 48);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for PlaceSummaryViewModelUnit.UserGeneratedGuide(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t sub_100067344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100067350);
}

uint64_t sub_100067350(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 48) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for PlaceSummaryViewModelUnit.UserGeneratedGuide(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1000673C4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_100E261B8;
  v4[1] = &unk_100E261E0;
  v4[2] = &unk_100E26190;
  result = type metadata accessor for PlaceSummaryViewModelUnit.UserGeneratedGuide(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

char *sub_10006744C(char *a1, char **a2, int *a3)
{
  int v4;
  char *v5;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  int *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  id v33;
  id v34;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain(v5);
  }
  else
  {
    v8 = (uint64_t)a2[2];
    *((_QWORD *)a1 + 1) = a2[1];
    v9 = (uint64_t)a2[3];
    v10 = *((_BYTE *)a2 + 32);
    v11 = v5;
    sub_10002057C(v8, v9, v10);
    *((_QWORD *)a1 + 2) = v8;
    *((_QWORD *)a1 + 3) = v9;
    a1[32] = v10;
    v12 = a2[6];
    *((_QWORD *)a1 + 5) = a2[5];
    *((_QWORD *)a1 + 6) = v12;
    v13 = a2[8];
    v14 = a3[8];
    v15 = &a1[v14];
    v16 = (uint64_t)a2 + v14;
    *((_QWORD *)a1 + 7) = a2[7];
    *((_QWORD *)a1 + 8) = v13;
    v17 = type metadata accessor for UUID(0);
    v18 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    v18(v15, v16, v17);
    v19 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(0);
    v20 = v19[5];
    v21 = *(void **)(v16 + v20);
    *(_QWORD *)&v15[v20] = v21;
    v22 = v19[6];
    v23 = &v15[v22];
    v24 = (_QWORD *)(v16 + v22);
    v25 = v24[1];
    *(_QWORD *)v23 = *v24;
    *((_QWORD *)v23 + 1) = v25;
    v26 = v19[7];
    v27 = &v15[v26];
    v28 = (_QWORD *)(v16 + v26);
    v29 = v28[1];
    *(_QWORD *)v27 = *v28;
    *((_QWORD *)v27 + 1) = v29;
    v30 = v19[8];
    v31 = *(void **)(v16 + v30);
    *(_QWORD *)&v15[v30] = v31;
    v32 = a3[10];
    a1[a3[9]] = *((_BYTE *)a2 + a3[9]);
    *(_QWORD *)&a1[v32] = *(char **)((char *)a2 + v32);
    v33 = v21;
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v29);
    v34 = v31;
  }
  return a1;
}

void sub_1000675B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;

  sub_10001A774(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 64));
  v4 = a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(0);

  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v6[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v6[7] + 8));

}

uint64_t sub_100067658(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  int *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  id v33;
  id v34;

  v6 = *(void **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v7;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 32);
  v11 = v6;
  sub_10002057C(v8, v9, v10);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_BYTE *)(a1 + 32) = v10;
  v12 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v12;
  v13 = *(_QWORD *)(a2 + 64);
  v14 = a3[8];
  v15 = a1 + v14;
  v16 = a2 + v14;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v13;
  v17 = type metadata accessor for UUID(0);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  v18(v15, v16, v17);
  v19 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(0);
  v20 = v19[5];
  v21 = *(void **)(v16 + v20);
  *(_QWORD *)(v15 + v20) = v21;
  v22 = v19[6];
  v23 = (_QWORD *)(v15 + v22);
  v24 = (_QWORD *)(v16 + v22);
  v25 = v24[1];
  *v23 = *v24;
  v23[1] = v25;
  v26 = v19[7];
  v27 = (_QWORD *)(v15 + v26);
  v28 = (_QWORD *)(v16 + v26);
  v29 = v28[1];
  *v27 = *v28;
  v27[1] = v29;
  v30 = v19[8];
  v31 = *(void **)(v16 + v30);
  *(_QWORD *)(v15 + v30) = v31;
  v32 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_QWORD *)(a1 + v32) = *(_QWORD *)(a2 + v32);
  v33 = v21;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v29);
  v34 = v31;
  return a1;
}

uint64_t sub_100067790(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  id v41;

  v6 = *(void **)a1;
  v7 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v7;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_BYTE *)(a2 + 32);
  sub_10002057C(v9, v10, v11);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v10;
  *(_BYTE *)(a1 + 32) = v11;
  sub_10001A774(v12, v13, v14);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v15 = *(_QWORD *)(a2 + 48);
  v16 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v17 = *(_QWORD *)(a2 + 64);
  v18 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  v23 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(0);
  v24 = v23[5];
  v25 = *(void **)(v21 + v24);
  v26 = *(void **)(v20 + v24);
  *(_QWORD *)(v20 + v24) = v25;
  v27 = v25;

  v28 = v23[6];
  v29 = (_QWORD *)(v20 + v28);
  v30 = (_QWORD *)(v21 + v28);
  *v29 = *v30;
  v31 = v30[1];
  v32 = v29[1];
  v29[1] = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  v33 = v23[7];
  v34 = (_QWORD *)(v20 + v33);
  v35 = (_QWORD *)(v21 + v33);
  *v34 = *v35;
  v36 = v35[1];
  v37 = v34[1];
  v34[1] = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  v38 = v23[8];
  v39 = *(void **)(v21 + v38);
  v40 = *(void **)(v20 + v38);
  *(_QWORD *)(v20 + v38) = v39;
  v41 = v39;

  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_100067930(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v7 = a3[8];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(0);
  *(_QWORD *)(v8 + v11[5]) = *(_QWORD *)(v9 + v11[5]);
  *(_OWORD *)(v8 + v11[6]) = *(_OWORD *)(v9 + v11[6]);
  *(_OWORD *)(v8 + v11[7]) = *(_OWORD *)(v9 + v11[7]);
  *(_QWORD *)(v8 + v11[8]) = *(_QWORD *)(v9 + v11[8]);
  v12 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  return a1;
}

uint64_t sub_100067A00(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_BYTE *)(a1 + 32);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  sub_10001A774(v9, v10, v11);
  v12 = *(_QWORD *)(a2 + 48);
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 64);
  v15 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v14;
  swift_bridgeObjectRelease(v15);
  v16 = a3[8];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 40))(v17, v18, v19);
  v20 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(0);
  v21 = v20[5];
  v22 = *(void **)(v17 + v21);
  *(_QWORD *)(v17 + v21) = *(_QWORD *)(v18 + v21);

  v23 = v20[6];
  v24 = (_QWORD *)(v17 + v23);
  v25 = (uint64_t *)(v18 + v23);
  v27 = *v25;
  v26 = v25[1];
  v28 = v24[1];
  *v24 = v27;
  v24[1] = v26;
  swift_bridgeObjectRelease(v28);
  v29 = v20[7];
  v30 = (_QWORD *)(v17 + v29);
  v31 = (uint64_t *)(v18 + v29);
  v33 = *v31;
  v32 = v31[1];
  v34 = v30[1];
  *v30 = v33;
  v30[1] = v32;
  swift_bridgeObjectRelease(v34);
  v35 = v20[8];
  v36 = *(void **)(v17 + v35);
  *(_QWORD *)(v17 + v35) = *(_QWORD *)(v18 + v35);

  v37 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_QWORD *)(a1 + v37) = *(_QWORD *)(a2 + v37);
  return a1;
}

uint64_t sub_100067B38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100067B44);
}

uint64_t sub_100067B44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 48);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t sub_100067BC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100067BCC);
}

uint64_t sub_100067BCC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 48) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t sub_100067C40(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = &unk_100E261B8;
  v4[1] = &unk_100E261E0;
  v4[2] = &unk_100E26190;
  v4[3] = &unk_100E26190;
  result = type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    v4[5] = &unk_100E25CA8;
    v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
    return 0;
  }
  return result;
}

char *sub_100067CE0(char *a1, char **a2, int *a3)
{
  int v4;
  char *v5;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int *v26;
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, int *);
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void (*v42)(char *, _QWORD, uint64_t, int *);
  id v43;
  id v44;
  uint64_t v45;
  void (*v47)(char *, char *, uint64_t);

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain(v5);
  }
  else
  {
    v8 = (uint64_t)a2[2];
    *((_QWORD *)a1 + 1) = a2[1];
    v9 = (uint64_t)a2[3];
    v10 = *((_BYTE *)a2 + 32);
    v11 = v5;
    sub_10002057C(v8, v9, v10);
    *((_QWORD *)a1 + 2) = v8;
    *((_QWORD *)a1 + 3) = v9;
    a1[32] = v10;
    v12 = a2[6];
    *((_QWORD *)a1 + 5) = a2[5];
    *((_QWORD *)a1 + 6) = v12;
    v13 = a2[8];
    *((_QWORD *)a1 + 7) = a2[7];
    *((_QWORD *)a1 + 8) = v13;
    v14 = a2[10];
    v15 = a3[9];
    v16 = &a1[v15];
    v17 = (char *)a2 + v15;
    *((_QWORD *)a1 + 9) = a2[9];
    *((_QWORD *)a1 + 10) = v14;
    v18 = type metadata accessor for UUID(0);
    v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
    v47 = v19;
    v19(v16, v17, v18);
    v20 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.MultipleCuratedGuides(0);
    *(_QWORD *)&v16[v20[5]] = *(_QWORD *)&v17[v20[5]];
    v21 = v20[6];
    v22 = *(_QWORD *)&v17[v21];
    *(_QWORD *)&v16[v21] = v22;
    v23 = v20[7];
    v24 = &v16[v23];
    v25 = &v17[v23];
    v26 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(0);
    v27 = *((_QWORD *)v26 - 1);
    v28 = *(unsigned int (**)(char *, uint64_t, int *))(v27 + 48);
    swift_bridgeObjectRetain(v22);
    if (v28(v25, 1, v26))
    {
      v29 = sub_100008B04(&qword_101495308);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      v47(v24, v25, v18);
      v30 = v26[5];
      v31 = *(void **)&v25[v30];
      *(_QWORD *)&v24[v30] = v31;
      v32 = v26[6];
      v33 = &v24[v32];
      v34 = &v25[v32];
      v35 = *((_QWORD *)v34 + 1);
      *(_QWORD *)v33 = *(_QWORD *)v34;
      *((_QWORD *)v33 + 1) = v35;
      v36 = v26[7];
      v37 = &v24[v36];
      v38 = &v25[v36];
      v39 = *((_QWORD *)v38 + 1);
      *(_QWORD *)v37 = *(_QWORD *)v38;
      *((_QWORD *)v37 + 1) = v39;
      v40 = v26[8];
      v41 = *(void **)&v25[v40];
      *(_QWORD *)&v24[v40] = v41;
      v42 = *(void (**)(char *, _QWORD, uint64_t, int *))(v27 + 56);
      v43 = v31;
      swift_bridgeObjectRetain(v35);
      swift_bridgeObjectRetain(v39);
      v44 = v41;
      v42(v24, 0, 1, v26);
    }
    v45 = a3[11];
    a1[a3[10]] = *((_BYTE *)a2 + a3[10]);
    *(_QWORD *)&a1[v45] = *(char **)((char *)a2 + v45);
  }
  return a1;
}

void sub_100067F04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  int *v9;

  sub_10001A774(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 80));
  v4 = a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for UUID(0);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = type metadata accessor for PlaceSummaryViewModelUnit.MultipleCuratedGuides(0);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + *(int *)(v7 + 24)));
  v8 = v4 + *(int *)(v7 + 28);
  v9 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v9 - 1) + 48))(v8, 1, v9))
  {
    v6(v8, v5);

    swift_bridgeObjectRelease(*(_QWORD *)(v8 + v9[6] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v8 + v9[7] + 8));

  }
}

uint64_t sub_100068018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int *v26;
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, int *);
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void (*v42)(char *, _QWORD, uint64_t, int *);
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v47;

  v6 = *(void **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v7;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 32);
  v11 = v6;
  sub_10002057C(v8, v9, v10);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_BYTE *)(a1 + 32) = v10;
  v12 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v12;
  v13 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v13;
  v14 = *(_QWORD *)(a2 + 80);
  v47 = a3;
  v15 = *(int *)(a3 + 36);
  v16 = a1 + v15;
  v17 = a2 + v15;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v14;
  v18 = type metadata accessor for UUID(0);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  v19(v16, v17, v18);
  v20 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.MultipleCuratedGuides(0);
  *(_QWORD *)(v16 + v20[5]) = *(_QWORD *)(v17 + v20[5]);
  v21 = v20[6];
  v22 = *(_QWORD *)(v17 + v21);
  *(_QWORD *)(v16 + v21) = v22;
  v23 = v20[7];
  v24 = (char *)(v16 + v23);
  v25 = (char *)(v17 + v23);
  v26 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(0);
  v27 = *((_QWORD *)v26 - 1);
  v28 = *(unsigned int (**)(char *, uint64_t, int *))(v27 + 48);
  swift_bridgeObjectRetain(v22);
  if (v28(v25, 1, v26))
  {
    v29 = sub_100008B04(&qword_101495308);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    v19((uint64_t)v24, (uint64_t)v25, v18);
    v30 = v26[5];
    v31 = *(void **)&v25[v30];
    *(_QWORD *)&v24[v30] = v31;
    v32 = v26[6];
    v33 = &v24[v32];
    v34 = &v25[v32];
    v35 = *((_QWORD *)v34 + 1);
    *(_QWORD *)v33 = *(_QWORD *)v34;
    *((_QWORD *)v33 + 1) = v35;
    v36 = v26[7];
    v37 = &v24[v36];
    v38 = &v25[v36];
    v39 = *((_QWORD *)v38 + 1);
    *(_QWORD *)v37 = *(_QWORD *)v38;
    *((_QWORD *)v37 + 1) = v39;
    v40 = v26[8];
    v41 = *(void **)&v25[v40];
    *(_QWORD *)&v24[v40] = v41;
    v42 = *(void (**)(char *, _QWORD, uint64_t, int *))(v27 + 56);
    v43 = v31;
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRetain(v39);
    v44 = v41;
    v42(v24, 0, 1, v26);
  }
  v45 = *(int *)(v47 + 44);
  *(_BYTE *)(a1 + *(int *)(v47 + 40)) = *(_BYTE *)(a2 + *(int *)(v47 + 40));
  *(_QWORD *)(a1 + v45) = *(_QWORD *)(a2 + v45);
  return a1;
}

uint64_t sub_100068210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int *v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, int *);
  int v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void (*v49)(char *, _QWORD, uint64_t, int *);
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v54;
  void *v55;
  void *v56;
  id v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  id v71;
  uint64_t v72;
  uint64_t v73;

  v6 = *(void **)a1;
  v7 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v7;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_BYTE *)(a2 + 32);
  sub_10002057C(v9, v10, v11);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v10;
  *(_BYTE *)(a1 + 32) = v11;
  sub_10001A774(v12, v13, v14);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v15 = *(_QWORD *)(a2 + 48);
  v16 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v17 = *(_QWORD *)(a2 + 64);
  v18 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v19 = *(_QWORD *)(a2 + 80);
  v20 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  v73 = a3;
  v21 = *(int *)(a3 + 36);
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = type metadata accessor for UUID(0);
  v72 = *(_QWORD *)(v24 - 8);
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 24);
  v25(v22, v23, v24);
  v26 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.MultipleCuratedGuides(0);
  *(_QWORD *)(v22 + v26[5]) = *(_QWORD *)(v23 + v26[5]);
  v27 = v26[6];
  v28 = *(_QWORD *)(v23 + v27);
  v29 = *(_QWORD *)(v22 + v27);
  *(_QWORD *)(v22 + v27) = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  v30 = v26[7];
  v31 = (char *)(v22 + v30);
  v32 = (char *)(v23 + v30);
  v33 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(0);
  v34 = *((_QWORD *)v33 - 1);
  v35 = *(uint64_t (**)(char *, uint64_t, int *))(v34 + 48);
  LODWORD(v29) = v35(v31, 1, v33);
  v36 = v35(v32, 1, v33);
  if (!(_DWORD)v29)
  {
    if (!v36)
    {
      v25((uint64_t)v31, (uint64_t)v32, v24);
      v54 = v33[5];
      v55 = *(void **)&v32[v54];
      v56 = *(void **)&v31[v54];
      *(_QWORD *)&v31[v54] = v55;
      v57 = v55;

      v58 = v33[6];
      v59 = &v31[v58];
      v60 = &v32[v58];
      *(_QWORD *)v59 = *(_QWORD *)v60;
      v61 = *((_QWORD *)v60 + 1);
      v62 = *((_QWORD *)v59 + 1);
      *((_QWORD *)v59 + 1) = v61;
      swift_bridgeObjectRetain(v61);
      swift_bridgeObjectRelease(v62);
      v63 = v33[7];
      v64 = &v31[v63];
      v65 = &v32[v63];
      *(_QWORD *)v64 = *(_QWORD *)v65;
      v66 = *((_QWORD *)v65 + 1);
      v67 = *((_QWORD *)v64 + 1);
      *((_QWORD *)v64 + 1) = v66;
      swift_bridgeObjectRetain(v66);
      swift_bridgeObjectRelease(v67);
      v68 = v33[8];
      v69 = *(void **)&v32[v68];
      v70 = *(void **)&v31[v68];
      *(_QWORD *)&v31[v68] = v69;
      v71 = v69;

      goto LABEL_7;
    }
    sub_1000202F0((uint64_t)v31, type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide);
    goto LABEL_6;
  }
  if (v36)
  {
LABEL_6:
    v52 = sub_100008B04(&qword_101495308);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v31, v32, v24);
  v37 = v33[5];
  v38 = *(void **)&v32[v37];
  *(_QWORD *)&v31[v37] = v38;
  v39 = v33[6];
  v40 = &v31[v39];
  v41 = &v32[v39];
  *(_QWORD *)v40 = *(_QWORD *)v41;
  v42 = *((_QWORD *)v41 + 1);
  *((_QWORD *)v40 + 1) = v42;
  v43 = v33[7];
  v44 = &v31[v43];
  v45 = &v32[v43];
  *(_QWORD *)v44 = *(_QWORD *)v45;
  v46 = *((_QWORD *)v45 + 1);
  *((_QWORD *)v44 + 1) = v46;
  v47 = v33[8];
  v48 = *(void **)&v32[v47];
  *(_QWORD *)&v31[v47] = v48;
  v49 = *(void (**)(char *, _QWORD, uint64_t, int *))(v34 + 56);
  v50 = v38;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRetain(v46);
  v51 = v48;
  v49(v31, 0, 1, v33);
LABEL_7:
  *(_BYTE *)(a1 + *(int *)(v73 + 40)) = *(_BYTE *)(a2 + *(int *)(v73 + 40));
  *(_QWORD *)(a1 + *(int *)(v73 + 44)) = *(_QWORD *)(a2 + *(int *)(v73 + 44));
  return a1;
}

uint64_t sub_100068548(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v7 = a3[9];
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v10 = type metadata accessor for UUID(0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v12 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.MultipleCuratedGuides(0);
  *(_QWORD *)(v8 + v12[5]) = *(_QWORD *)(v9 + v12[5]);
  *(_QWORD *)(v8 + v12[6]) = *(_QWORD *)(v9 + v12[6]);
  v13 = v12[7];
  v14 = (char *)(v8 + v13);
  v15 = (char *)(v9 + v13);
  v16 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(0);
  v17 = *((_QWORD *)v16 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v17 + 48))(v15, 1, v16))
  {
    v18 = sub_100008B04(&qword_101495308);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v11((uint64_t)v14, (uint64_t)v15, v10);
    *(_QWORD *)&v14[v16[5]] = *(_QWORD *)&v15[v16[5]];
    *(_OWORD *)&v14[v16[6]] = *(_OWORD *)&v15[v16[6]];
    *(_OWORD *)&v14[v16[7]] = *(_OWORD *)&v15[v16[7]];
    *(_QWORD *)&v14[v16[8]] = *(_QWORD *)&v15[v16[8]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
  }
  v19 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_QWORD *)(a1 + v19) = *(_QWORD *)(a2 + v19);
  return a1;
}

uint64_t sub_1000686CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int *v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, int *);
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_BYTE *)(a1 + 32);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  sub_10001A774(v9, v10, v11);
  v12 = *(_QWORD *)(a2 + 48);
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 64);
  v15 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v14;
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a2 + 80);
  v17 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v16;
  swift_bridgeObjectRelease(v17);
  v54 = a3;
  v18 = *(int *)(a3 + 36);
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for UUID(0);
  v53 = *(_QWORD *)(v21 - 8);
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 40);
  v22(v19, v20, v21);
  v23 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.MultipleCuratedGuides(0);
  *(_QWORD *)(v19 + v23[5]) = *(_QWORD *)(v20 + v23[5]);
  v24 = v23[6];
  v25 = *(_QWORD *)(v19 + v24);
  *(_QWORD *)(v19 + v24) = *(_QWORD *)(v20 + v24);
  swift_bridgeObjectRelease(v25);
  v26 = v23[7];
  v27 = (char *)(v19 + v26);
  v28 = (char *)(v20 + v26);
  v29 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(0);
  v30 = *((_QWORD *)v29 - 1);
  v31 = *(uint64_t (**)(char *, uint64_t, int *))(v30 + 48);
  v32 = v31(v27, 1, v29);
  v33 = v31(v28, 1, v29);
  if (!v32)
  {
    if (!v33)
    {
      v22((uint64_t)v27, (uint64_t)v28, v21);
      v37 = v29[5];
      v38 = *(void **)&v27[v37];
      *(_QWORD *)&v27[v37] = *(_QWORD *)&v28[v37];

      v39 = v29[6];
      v40 = &v27[v39];
      v41 = &v28[v39];
      v43 = *(_QWORD *)v41;
      v42 = *((_QWORD *)v41 + 1);
      v44 = *((_QWORD *)v40 + 1);
      *(_QWORD *)v40 = v43;
      *((_QWORD *)v40 + 1) = v42;
      swift_bridgeObjectRelease(v44);
      v45 = v29[7];
      v46 = &v27[v45];
      v47 = &v28[v45];
      v49 = *(_QWORD *)v47;
      v48 = *((_QWORD *)v47 + 1);
      v50 = *((_QWORD *)v46 + 1);
      *(_QWORD *)v46 = v49;
      *((_QWORD *)v46 + 1) = v48;
      swift_bridgeObjectRelease(v50);
      v51 = v29[8];
      v52 = *(void **)&v27[v51];
      *(_QWORD *)&v27[v51] = *(_QWORD *)&v28[v51];

      goto LABEL_7;
    }
    sub_1000202F0((uint64_t)v27, type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide);
    goto LABEL_6;
  }
  if (v33)
  {
LABEL_6:
    v34 = sub_100008B04(&qword_101495308);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v27, v28, v21);
  *(_QWORD *)&v27[v29[5]] = *(_QWORD *)&v28[v29[5]];
  *(_OWORD *)&v27[v29[6]] = *(_OWORD *)&v28[v29[6]];
  *(_OWORD *)&v27[v29[7]] = *(_OWORD *)&v28[v29[7]];
  *(_QWORD *)&v27[v29[8]] = *(_QWORD *)&v28[v29[8]];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v30 + 56))(v27, 0, 1, v29);
LABEL_7:
  v35 = *(int *)(v54 + 44);
  *(_BYTE *)(a1 + *(int *)(v54 + 40)) = *(_BYTE *)(a2 + *(int *)(v54 + 40));
  *(_QWORD *)(a1 + v35) = *(_QWORD *)(a2 + v35);
  return a1;
}

uint64_t sub_100068954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100068960);
}

uint64_t sub_100068960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 48);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for PlaceSummaryViewModelUnit.MultipleCuratedGuides(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 36), a2, v8);
  }
}

uint64_t sub_1000689DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000689E8);
}

uint64_t sub_1000689E8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 48) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for PlaceSummaryViewModelUnit.MultipleCuratedGuides(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

uint64_t sub_100068A5C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = &unk_100E261B8;
  v4[1] = &unk_100E261E0;
  v4[2] = &unk_100E26190;
  v4[3] = &unk_100E26190;
  v4[4] = &unk_100E26190;
  result = type metadata accessor for PlaceSummaryViewModelUnit.MultipleCuratedGuides(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(result - 8) + 64;
    v4[6] = &unk_100E25CA8;
    v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 8, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_100068B00(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  uint64_t *v29;
  uint64_t *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v37 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v37 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v37);
  }
  else
  {
    v7 = type metadata accessor for AttributedString(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = *(uint64_t *)((char *)a2 + v9);
    *(uint64_t *)((char *)a1 + v9) = v13;
    v14 = a3[7];
    v15 = a3[8];
    v16 = *(uint64_t *)((char *)a2 + v14);
    *(uint64_t *)((char *)a1 + v14) = v16;
    v17 = *(uint64_t *)((char *)a2 + v15);
    *(uint64_t *)((char *)a1 + v15) = v17;
    v18 = a3[9];
    v19 = a3[10];
    v20 = *(uint64_t *)((char *)a2 + v18);
    *(uint64_t *)((char *)a1 + v18) = v20;
    v21 = (char *)a1 + v19;
    v22 = (char *)a2 + v19;
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v23 = a3[11];
    v24 = a3[12];
    v25 = (uint64_t *)((char *)a1 + v23);
    v26 = (char *)a2 + v23;
    v28 = *(void **)v26;
    v27 = *((_QWORD *)v26 + 1);
    v29 = (uint64_t *)((char *)a2 + v24);
    v30 = (uint64_t *)((char *)a1 + v24);
    *v25 = v28;
    v25[1] = v27;
    swift_bridgeObjectRetain(v12);
    swift_retain(v13);
    swift_retain(v16);
    swift_retain(v17);
    swift_retain(v20);
    v31 = v28;
    v32 = sub_100008B04(&qword_101493188);
    if (swift_getEnumCaseMultiPayload(v29, v32) == 1)
    {
      v33 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v30, v29, v33);
      v34 = v30;
      v35 = v32;
      v36 = 1;
    }
    else
    {
      v38 = *v29;
      *v30 = *v29;
      swift_retain(v38);
      v34 = v30;
      v35 = v32;
      v36 = 0;
    }
    swift_storeEnumTagMultiPayload(v34, v35, v36);
  }
  return a1;
}

uint64_t sub_100068C94(uint64_t a1, int *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for AttributedString(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[5] + 8));
  swift_release(*(_QWORD *)(a1 + a2[6]));
  swift_release(*(_QWORD *)(a1 + a2[7]));
  swift_release(*(_QWORD *)(a1 + a2[8]));
  swift_release(*(_QWORD *)(a1 + a2[9]));

  v5 = (_QWORD *)(a1 + a2[12]);
  v6 = sub_100008B04(&qword_101493188);
  if (swift_getEnumCaseMultiPayload(v5, v6) != 1)
    return swift_release(*v5);
  v7 = type metadata accessor for ColorScheme(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
}

uint64_t sub_100068D6C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t *v28;
  uint64_t *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = type metadata accessor for AttributedString(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v12;
  v13 = a3[7];
  v14 = a3[8];
  v15 = *(_QWORD *)(a2 + v13);
  *(_QWORD *)(a1 + v13) = v15;
  v16 = *(_QWORD *)(a2 + v14);
  *(_QWORD *)(a1 + v14) = v16;
  v17 = a3[9];
  v18 = a3[10];
  v19 = *(_QWORD *)(a2 + v17);
  *(_QWORD *)(a1 + v17) = v19;
  v20 = a1 + v18;
  v21 = a2 + v18;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
  v22 = a3[11];
  v23 = a3[12];
  v24 = (_QWORD *)(a1 + v22);
  v25 = a2 + v22;
  v27 = *(void **)v25;
  v26 = *(_QWORD *)(v25 + 8);
  v28 = (uint64_t *)(a2 + v23);
  v29 = (uint64_t *)(a1 + v23);
  *v24 = v27;
  v24[1] = v26;
  swift_bridgeObjectRetain(v11);
  swift_retain(v12);
  swift_retain(v15);
  swift_retain(v16);
  swift_retain(v19);
  v30 = v27;
  v31 = sub_100008B04(&qword_101493188);
  if (swift_getEnumCaseMultiPayload(v28, v31) == 1)
  {
    v32 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v29, v28, v32);
    v33 = 1;
  }
  else
  {
    v34 = *v28;
    *v29 = *v28;
    swift_retain(v34);
    v33 = 0;
  }
  swift_storeEnumTagMultiPayload(v29, v31, v33);
  return a1;
}

uint64_t sub_100068ECC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v6 = type metadata accessor for AttributedString(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a3[6];
  v13 = *(_QWORD *)(a1 + v12);
  v14 = *(_QWORD *)(a2 + v12);
  *(_QWORD *)(a1 + v12) = v14;
  swift_retain(v14);
  swift_release(v13);
  v15 = a3[7];
  v16 = *(_QWORD *)(a1 + v15);
  v17 = *(_QWORD *)(a2 + v15);
  *(_QWORD *)(a1 + v15) = v17;
  swift_retain(v17);
  swift_release(v16);
  v18 = a3[8];
  v19 = *(_QWORD *)(a1 + v18);
  v20 = *(_QWORD *)(a2 + v18);
  *(_QWORD *)(a1 + v18) = v20;
  swift_retain(v20);
  swift_release(v19);
  v21 = a3[9];
  v22 = *(_QWORD *)(a1 + v21);
  v23 = *(_QWORD *)(a2 + v21);
  *(_QWORD *)(a1 + v21) = v23;
  swift_retain(v23);
  swift_release(v22);
  v24 = a3[10];
  v25 = a1 + v24;
  v26 = (uint64_t *)(a2 + v24);
  v27 = *v26;
  *(_BYTE *)(v25 + 8) = *((_BYTE *)v26 + 8);
  *(_QWORD *)v25 = v27;
  v28 = a3[11];
  v29 = (_QWORD *)(a1 + v28);
  v30 = a2 + v28;
  v31 = *(void **)(a1 + v28);
  v32 = *(void **)(a2 + v28);
  *v29 = v32;
  v33 = v32;

  v29[1] = *(_QWORD *)(v30 + 8);
  if (a1 != a2)
  {
    v34 = a3[12];
    v35 = (uint64_t *)(a1 + v34);
    v36 = (uint64_t *)(a2 + v34);
    sub_100010CC4(a1 + v34, &qword_101493188);
    v37 = sub_100008B04(&qword_101493188);
    if (swift_getEnumCaseMultiPayload(v36, v37) == 1)
    {
      v38 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v35, v36, v38);
      v39 = 1;
    }
    else
    {
      v40 = *v36;
      *v35 = *v36;
      swift_retain(v40);
      v39 = 0;
    }
    swift_storeEnumTagMultiPayload(v35, v37, v39);
  }
  return a1;
}

uint64_t sub_100069090(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for AttributedString(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v9 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  v10 = a1 + v9;
  v11 = a2 + v9;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  v12 = a3[11];
  v13 = a3[12];
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  v16 = sub_100008B04(&qword_101493188);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v17 = type metadata accessor for ColorScheme(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v14, v15, v17);
    swift_storeEnumTagMultiPayload(v14, v16, 1);
  }
  else
  {
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1000691AC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;

  v6 = type metadata accessor for AttributedString(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = a3[6];
  v14 = *(_QWORD *)(a1 + v13);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  swift_release(v14);
  v15 = a3[7];
  v16 = *(_QWORD *)(a1 + v15);
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  swift_release(v16);
  v17 = a3[8];
  v18 = *(_QWORD *)(a1 + v17);
  *(_QWORD *)(a1 + v17) = *(_QWORD *)(a2 + v17);
  swift_release(v18);
  v19 = a3[9];
  v20 = *(_QWORD *)(a1 + v19);
  *(_QWORD *)(a1 + v19) = *(_QWORD *)(a2 + v19);
  swift_release(v20);
  v21 = a3[10];
  v22 = a3[11];
  v23 = a1 + v21;
  v24 = a2 + v21;
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
  v25 = a1 + v22;
  v26 = a2 + v22;
  v27 = *(void **)(a1 + v22);
  *(_QWORD *)(a1 + v22) = *(_QWORD *)(a2 + v22);

  *(_QWORD *)(v25 + 8) = *(_QWORD *)(v26 + 8);
  if (a1 != a2)
  {
    v28 = a3[12];
    v29 = (void *)(a1 + v28);
    v30 = (const void *)(a2 + v28);
    sub_100010CC4(a1 + v28, &qword_101493188);
    v31 = sub_100008B04(&qword_101493188);
    if (swift_getEnumCaseMultiPayload(v30, v31) == 1)
    {
      v32 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v29, v30, v32);
      swift_storeEnumTagMultiPayload(v29, v31, 1);
    }
    else
    {
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10006933C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100069348);
}

uint64_t sub_100069348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;
  uint64_t v11;

  v6 = type metadata accessor for AttributedString(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 2147483646)
  {
    v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
    if (v9 >= 0xFFFFFFFF)
      LODWORD(v9) = -1;
    v10 = v9 - 1;
    if (v10 < 0)
      v10 = -1;
    return (v10 + 1);
  }
  else
  {
    v11 = sub_100008B04(&qword_1014953B8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(a1 + *(int *)(a3 + 48), a2, v11);
  }
}

uint64_t sub_100069404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100069410);
}

uint64_t sub_100069410(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for AttributedString(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
      return result;
    }
    v10 = sub_100008B04(&qword_1014953B8);
    v12 = a1 + *(int *)(a4 + 48);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1000694BC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[9];

  v2 = type metadata accessor for AttributedString(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_100E261B8;
    v6[2] = "\b";
    v6[3] = "\b";
    v6[4] = "\b";
    v6[5] = "\b";
    v6[6] = &unk_100E26300;
    v6[7] = &unk_100E261B8;
    sub_100069DB8(319, (unint64_t *)&unk_101495428, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v6[8] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 9, v6, a1 + 16);
    }
  }
}

char *sub_10006957C(char *a1, char **a2, uint64_t a3)
{
  int v3;
  char *v4;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    *((_QWORD *)a1 + 1) = a2[1];
    v8 = *(int *)(a3 + 20);
    v9 = &a1[v8];
    v10 = (uint64_t)a2 + v8;
    v11 = type metadata accessor for AttributedString(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    v14 = v4;
    v13(v9, v10, v11);
    v15 = *(int *)(a3 + 24);
    v16 = &v7[v15];
    v17 = (char *)a2 + v15;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v17, 1, v11))
    {
      v18 = sub_100008B04(&qword_101494BF0);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v13(v16, (uint64_t)v17, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v16, 0, 1, v11);
    }
  }
  return v7;
}

uint64_t sub_1000696A0(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  void (*v9)(char *, uint64_t);

  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for AttributedString(0);
  v6 = *(_QWORD *)(v5 - 8);
  v9 = *(void (**)(char *, uint64_t))(v6 + 8);
  v9(v4, v5);
  v7 = (char *)a1 + *(int *)(a2 + 24);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5);
  if (!(_DWORD)result)
    return ((uint64_t (*)(char *, uint64_t))v9)(v7, v5);
  return result;
}

_QWORD *sub_100069750(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  id v14;
  uint64_t v15;
  char *v16;
  const void *v17;
  uint64_t v18;

  v7 = *(void **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v6;
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for AttributedString(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v14 = v7;
  v13(v9, v10, v11);
  v15 = *(int *)(a3 + 24);
  v16 = (char *)a1 + v15;
  v17 = (const void *)(a2 + v15);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v17, 1, v11))
  {
    v18 = sub_100008B04(&qword_101494BF0);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v13(v16, (uint64_t)v17, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v16, 0, 1, v11);
  }
  return a1;
}

uint64_t sub_100069844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(void *, const void *, uint64_t);
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t (*v18)(const void *, uint64_t, uint64_t);
  int v19;
  uint64_t v20;

  v6 = *(void **)a1;
  v7 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v7;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v9 = *(int *)(a3 + 20);
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  v12 = type metadata accessor for AttributedString(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(void (**)(void *, const void *, uint64_t))(v13 + 24);
  v14(v10, v11, v12);
  v15 = *(int *)(a3 + 24);
  v16 = (void *)(a1 + v15);
  v17 = (const void *)(a2 + v15);
  v18 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v13 + 48);
  LODWORD(v10) = v18((const void *)(a1 + v15), 1, v12);
  v19 = v18(v17, 1, v12);
  if (!(_DWORD)v10)
  {
    if (!v19)
    {
      v14(v16, v17, v12);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v16, v12);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v20 = sub_100008B04(&qword_101494BF0);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v16, v17, v12);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
  return a1;
}

_OWORD *sub_100069984(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for AttributedString(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v14, 1, v9))
  {
    v15 = sub_100008B04(&qword_101494BF0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
  }
  return a1;
}

uint64_t sub_100069A6C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, char *, uint64_t);
  uint64_t v13;
  void *v14;
  char *v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  int v17;
  uint64_t v18;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  *(_QWORD *)(a1 + 8) = a2[1];
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for AttributedString(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, char *, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  v13 = *(int *)(a3 + 24);
  v14 = (void *)(a1 + v13);
  v15 = (char *)a2 + v13;
  v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  LODWORD(v8) = v16(a1 + v13, 1, v10);
  v17 = v16((uint64_t)v15, 1, v10);
  if (!(_DWORD)v8)
  {
    if (!v17)
    {
      v12((uint64_t)v14, v15, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v14, v10);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v18 = sub_100008B04(&qword_101494BF0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, char *, uint64_t))(v11 + 32))(v14, v15, v10);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
  return a1;
}

uint64_t sub_100069BA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100069BB4);
}

uint64_t sub_100069BB4(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = type metadata accessor for AttributedString(0);
    v10 = *(_QWORD *)(v9 - 8);
    if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    {
      v11 = v9;
      v12 = *(int *)(a3 + 20);
    }
    else
    {
      v11 = sub_100008B04(&qword_101494BF0);
      v10 = *(_QWORD *)(v11 - 8);
      v12 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(&a1[v12], a2, v11);
  }
}

uint64_t sub_100069C64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100069C70);
}

char *sub_100069C70(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)result = a2;
  }
  else
  {
    v8 = type metadata accessor for AttributedString(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_100008B04(&qword_101494BF0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void sub_100069D10(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  v6[0] = &unk_100E261B8;
  v2 = type metadata accessor for AttributedString(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_100069DB8(319, (unint64_t *)&unk_1014954E0, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v6, a1 + 16);
    }
  }
}

void sub_100069DB8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

_QWORD *_s21HikeRouteSnapshotViewVwCP(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain(v3);
  return a1;
}

uint64_t _s21HikeRouteSnapshotViewVwxx(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 8));
}

_QWORD *_s21HikeRouteSnapshotViewVwta(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release(v4);
  return a1;
}

ValueMetadata *_s21HikeRouteSnapshotViewVMa()
{
  return &_s21HikeRouteSnapshotViewVN;
}

ValueMetadata *_s7AddViewVMa()
{
  return &_s7AddViewVN;
}

uint64_t _s16QueryAcceleratorVwxx(uint64_t a1)
{
  return sub_10001A774(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s16QueryAcceleratorVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_10002057C(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t _s16QueryAcceleratorVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_10002057C(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_10001A774(v6, v7, v8);
  return a1;
}

uint64_t _s16QueryAcceleratorVwta(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_10001A774(v4, v5, v6);
  return a1;
}

ValueMetadata *_s16QueryAcceleratorVMa()
{
  return &_s16QueryAcceleratorVN;
}

unint64_t _s15AccessoryButtonVwxx(uint64_t a1)
{
  sub_10001A774(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
  return sub_1000200C0(*(_QWORD *)(a1 + 56));
}

uint64_t _s15AccessoryButtonVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_10002057C(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  v9 = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  sub_100020008(v9);
  *(_QWORD *)(a1 + 56) = v9;
  return a1;
}

uint64_t _s15AccessoryButtonVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_10002057C(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  sub_10001A774(v7, v8, v9);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 56);
  sub_100020008(v14);
  v15 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v14;
  sub_1000200C0(v15);
  return a1;
}

__n128 initializeWithTake for NearbyTransitGroupViewModel(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s15AccessoryButtonVwta(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  sub_10001A774(v5, v6, v7);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  sub_1000200C0(v12);
  return a1;
}

uint64_t _s15AccessoryButtonVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s15AccessoryButtonVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s15AccessoryButtonVMa()
{
  return &_s15AccessoryButtonVN;
}

uint64_t _s16DirectionsButtonVwxx(_QWORD *a1)
{
  swift_release(a1[1]);
  sub_1000200C0(a1[2]);
  return swift_bridgeObjectRelease(a1[4]);
}

_QWORD *_s16DirectionsButtonVwcp(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  swift_retain(v4);
  sub_100020008(v5);
  v7 = a2[3];
  v6 = a2[4];
  a1[2] = v5;
  a1[3] = v7;
  a1[4] = v6;
  swift_bridgeObjectRetain(v6);
  return a1;
}

_QWORD *_s16DirectionsButtonVwca(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[2];
  sub_100020008(v6);
  v7 = a1[2];
  a1[2] = v6;
  sub_1000200C0(v7);
  a1[3] = a2[3];
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 _s16DirectionsButtonVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

_QWORD *_s16DirectionsButtonVwta(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = a1[1];
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_release(v5);
  sub_1000200C0(a1[2]);
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  v6 = a1[4];
  a1[4] = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t _s16DirectionsButtonVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s16DirectionsButtonVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s16DirectionsButtonVMa()
{
  return &_s16DirectionsButtonVN;
}

uint64_t sub_10006A454(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_100E26190;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 3, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_10006A4D8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 24) & (unint64_t)~v6) + *(_QWORD *)(v5 + 64) > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain(v9);
  }
  else
  {
    v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    v11 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
    v12 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v11 = *v12;
    v13 = ((unint64_t)v11 + v6 + 8) & ~v6;
    v14 = ((unint64_t)v12 + v6 + 8) & ~v6;
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain(v10);
    v15(v13, v14, v4);
  }
  return a1;
}

uint64_t sub_10006A5B4(uint64_t a1, uint64_t a2)
{
  swift_release(*(_QWORD *)(a1 + 8));
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *sub_10006A600(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)v5 + v9 + 8) & ~v9;
  v11 = ((unint64_t)v6 + v9 + 8) & ~v9;
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  swift_retain(v4);
  v12(v10, v11, v7);
  return a1;
}

_QWORD *sub_10006A688(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v9 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v8 = *v9;
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 24))(((unint64_t)v8 + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), ((unint64_t)v9 + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

_OWORD *sub_10006A718(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_QWORD *sub_10006A780(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_release(v7);
  v8 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v9 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v8 = *v9;
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 40))(((unint64_t)v8 + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), ((unint64_t)v9 + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

uint64_t sub_10006A800(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 24) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & ~v7);
      v15 = *(_QWORD *)(a1 + 8);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_10006A8D4 + 4 * byte_100E25C2E[(v9 - 1)]))();
}

void sub_10006A94C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = &dword_100000004;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

unint64_t sub_10006AB4C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v22 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v22);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_BYTE *)(a2 + 16);
    sub_10002057C(*(_QWORD *)a2, v8, v9);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v9;
    v10 = *(int *)(a3 + 20);
    v11 = a1 + v10;
    v12 = a2 + v10;
    v13 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
    v14 = (int *)type metadata accessor for PlaceSummaryViewModelActionButtons.Button(0);
    v15 = v14[5];
    v16 = (_QWORD *)(v11 + v15);
    v17 = (uint64_t *)(v12 + v15);
    v19 = *v17;
    v18 = v17[1];
    *v16 = v19;
    v16[1] = v18;
    v20 = v14[6];
    v21 = *(_QWORD *)(v12 + v20);
    *(_QWORD *)(v11 + v20) = v21;
    *(_QWORD *)(v11 + v14[7]) = *(_QWORD *)(v12 + v14[7]);
    swift_bridgeObjectRetain(v18);
    swift_unknownObjectRetain(v21);
  }
  return a1;
}

uint64_t sub_10006AC40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10001A774(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = type metadata accessor for PlaceSummaryViewModelActionButtons.Button(0);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + *(int *)(v6 + 20) + 8));
  return swift_unknownObjectRelease(*(_QWORD *)(v4 + *(int *)(v6 + 24)));
}

uint64_t sub_10006ACB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_10002057C(*(_QWORD *)a2, v7, v8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  v9 = *(int *)(a3 + 20);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  v13 = (int *)type metadata accessor for PlaceSummaryViewModelActionButtons.Button(0);
  v14 = v13[5];
  v15 = (_QWORD *)(v10 + v14);
  v16 = (uint64_t *)(v11 + v14);
  v18 = *v16;
  v17 = v16[1];
  *v15 = v18;
  v15[1] = v17;
  v19 = v13[6];
  v20 = *(_QWORD *)(v11 + v19);
  *(_QWORD *)(v10 + v19) = v20;
  *(_QWORD *)(v10 + v13[7]) = *(_QWORD *)(v11 + v13[7]);
  swift_bridgeObjectRetain(v17);
  swift_unknownObjectRetain(v20);
  return a1;
}

uint64_t sub_10006AD80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_10002057C(*(_QWORD *)a2, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  sub_10001A774(v9, v10, v11);
  v12 = *(int *)(a3 + 20);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  v16 = (int *)type metadata accessor for PlaceSummaryViewModelActionButtons.Button(0);
  v17 = v16[5];
  v18 = (_QWORD *)(v13 + v17);
  v19 = (_QWORD *)(v14 + v17);
  *v18 = *v19;
  v20 = v19[1];
  v21 = v18[1];
  v18[1] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  v22 = v16[6];
  v23 = *(_QWORD *)(v14 + v22);
  v24 = *(_QWORD *)(v13 + v22);
  *(_QWORD *)(v13 + v22) = v23;
  swift_unknownObjectRetain(v23);
  swift_unknownObjectRelease(v24);
  *(_QWORD *)(v13 + v16[7]) = *(_QWORD *)(v14 + v16[7]);
  return a1;
}

uint64_t sub_10006AE70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(int *)(a3 + 20);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  v8 = (int *)type metadata accessor for PlaceSummaryViewModelActionButtons.Button(0);
  *(_OWORD *)(v5 + v8[5]) = *(_OWORD *)(v6 + v8[5]);
  *(_QWORD *)(v5 + v8[6]) = *(_QWORD *)(v6 + v8[6]);
  *(_QWORD *)(v5 + v8[7]) = *(_QWORD *)(v6 + v8[7]);
  return a1;
}

uint64_t sub_10006AF00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v6;
  sub_10001A774(v7, v8, v9);
  v10 = *(int *)(a3 + 20);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  v14 = (int *)type metadata accessor for PlaceSummaryViewModelActionButtons.Button(0);
  v15 = v14[5];
  v16 = (_QWORD *)(v11 + v15);
  v17 = (uint64_t *)(v12 + v15);
  v19 = *v17;
  v18 = v17[1];
  v20 = v16[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease(v20);
  v21 = v14[6];
  v22 = *(_QWORD *)(v11 + v21);
  *(_QWORD *)(v11 + v21) = *(_QWORD *)(v12 + v21);
  swift_unknownObjectRelease(v22);
  *(_QWORD *)(v11 + v14[7]) = *(_QWORD *)(v12 + v14[7]);
  return a1;
}

uint64_t sub_10006AFC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006AFD0);
}

uint64_t sub_10006AFD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 16);
    if (v4 > 1)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for PlaceSummaryViewModelActionButtons.Button(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_10006B044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006B050);
}

uint64_t sub_10006B050(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 16) = -(char)a2;
  }
  else
  {
    v7 = type metadata accessor for PlaceSummaryViewModelActionButtons.Button(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_10006B0C0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_100E261E0;
  result = type metadata accessor for PlaceSummaryViewModelActionButtons.Button(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_10006B138()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101495628;
  if (!qword_101495628)
  {
    v1 = sub_10000E5D4(&qword_101495630);
    v2[0] = sub_100061904();
    v2[1] = sub_1000623C4();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101495628);
  }
  return result;
}

uint64_t sub_10006B1A4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];
  _QWORD v17[2];
  _QWORD v18[2];
  _QWORD v19[2];
  _QWORD v20[2];

  v4 = _s9ImageViewVMa(255, *a1, a1[1], a4);
  v5 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v6 = type metadata accessor for ModifiedContent(255, v4, v5);
  v7 = sub_10000E5D4(&qword_101494C50);
  v8 = type metadata accessor for _ConditionalContent(255, v6, v7);
  v9 = sub_10000E5D4(&qword_101494C30);
  v10 = type metadata accessor for _ConditionalContent(255, v8, v9);
  v11 = sub_10000E5D4(&qword_101494C20);
  v12 = type metadata accessor for _ConditionalContent(255, v10, v11);
  v13 = sub_10000E5D4(&qword_101494C08);
  v14 = type metadata accessor for _ConditionalContent(255, v12, v13);
  v20[0] = swift_getWitnessTable("Ł7", v4);
  v20[1] = sub_10000BC84((unint64_t *)&qword_10149CE30, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v19[0] = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v6, v20);
  v19[1] = sub_1000629F4();
  v18[0] = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v8, v19);
  v18[1] = sub_100070714(&qword_101494CB0, &qword_101494C30, (uint64_t (*)(void))sub_1000628E8);
  v17[0] = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v10, v18);
  v17[1] = sub_100062B28();
  v16[0] = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v12, v17);
  v16[1] = sub_100062CA0();
  return swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v14, v16);
}

unint64_t sub_10006B368()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101495638;
  if (!qword_101495638)
  {
    v1 = sub_10000E5D4(&qword_101494D20);
    v2[0] = sub_100010D70(&qword_101495640, &qword_101494CF8, (const char *)&protocol conformance descriptor for LazyVGrid<A>);
    v2[1] = sub_10006B3EC();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101495638);
  }
  return result;
}

unint64_t sub_10006B3EC()
{
  unint64_t result;
  double vars0;

  result = qword_101495648;
  if (!qword_101495648)
  {
    result = swift_getWitnessTable("%f7", vars0);
    atomic_store(result, (unint64_t *)&qword_101495648);
  }
  return result;
}

unint64_t sub_10006B434()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101495650;
  if (!qword_101495650)
  {
    v1 = sub_10000E5D4(&qword_101495658);
    v2[0] = sub_100010D70(&qword_101494D58, &qword_101494D40, (const char *)&protocol conformance descriptor for ScrollView<A>);
    v2[1] = sub_10000BC84((unint64_t *)&qword_10149CE30, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101495650);
  }
  return result;
}

unint64_t sub_10006B4D4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101495660;
  if (!qword_101495660)
  {
    v1 = sub_10000E5D4(&qword_101495668);
    v2[0] = sub_1000631E8();
    v2[1] = sub_10000BC84((unint64_t *)&qword_10149CE30, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101495660);
  }
  return result;
}

unint64_t sub_10006B55C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101495670;
  if (!qword_101495670)
  {
    v1 = sub_10000E5D4(&qword_101495678);
    v2[0] = sub_1000632B0();
    v2[1] = sub_10000BC84((unint64_t *)&qword_10149CE30, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101495670);
  }
  return result;
}

uint64_t sub_10006B5E0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_101066348, 1);
}

uint64_t sub_10006B5F0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_101066320, 1);
}

uint64_t sub_10006B600(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1010662F8, 1);
}

uint64_t sub_10006B610(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1010662D0, 1);
}

uint64_t sub_10006B620(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_10106629C, 1);
}

uint64_t sub_10006B654(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_101066274, 1);
}

uint64_t sub_10006B664(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10106624C, 1);
}

uint64_t sub_10006B674(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_101066224, 1);
}

uint64_t sub_10006B684(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1010661FC, 1);
}

uint64_t sub_10006B694(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1010661D4, 1);
}

uint64_t sub_10006B6A4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1010661AC, 1);
}

uint64_t sub_10006B6B4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_101066184, 1);
}

uint64_t sub_10006B6C4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10106615C, 1);
}

uint64_t sub_10006B6D4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_101066134, 1);
}

uint64_t sub_10006B6E4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10106610C, 1);
}

uint64_t sub_10006B6F4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1010660E4, 1);
}

uint64_t sub_10006B704(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1010660BC, 1);
}

uint64_t sub_10006B714(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_101066094, 1);
}

uint64_t sub_10006B724(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10106606C, 1);
}

uint64_t sub_10006B734(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_101066044, 1);
}

uint64_t sub_10006B744(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10106601C, 1);
}

uint64_t sub_10006B754(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_101065FF4, 1);
}

uint64_t sub_10006B764(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_101065FCC, 1);
}

uint64_t sub_10006B77C(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release(a1);
  else
    return swift_bridgeObjectRelease(a2);
}

uint64_t sub_10006B78C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_10006B7BC(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

unint64_t sub_10006B7F0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1014956D8;
  if (!qword_1014956D8)
  {
    v1 = sub_10000E5D4(&qword_1014956D0);
    v2[0] = sub_10006B874();
    v2[1] = sub_100010D70(&qword_101495698, &qword_1014956A0, (const char *)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_1014956D8);
  }
  return result;
}

unint64_t sub_10006B874()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1014956E0;
  if (!qword_1014956E0)
  {
    v1 = sub_10000E5D4(&qword_1014956E8);
    v2[0] = sub_10006B8F8();
    v2[1] = sub_100010D70((unint64_t *)&unk_101494DC0, &qword_10149D530, (const char *)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_1014956E0);
  }
  return result;
}

unint64_t sub_10006B8F8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1014956F0;
  if (!qword_1014956F0)
  {
    v1 = sub_10000E5D4(&qword_1014956F8);
    v2[0] = sub_10006EB08(&qword_101495700, &qword_101495708, (uint64_t)&protocol witness table for Text, (uint64_t)&protocol witness table for _FixedSizeLayout);
    v2[1] = sub_100010D70((unint64_t *)&unk_101495710, (uint64_t *)&unk_10149D520, (const char *)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_1014956F0);
  }
  return result;
}

unint64_t sub_10006B99C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101495720;
  if (!qword_101495720)
  {
    v1 = sub_10000E5D4(&qword_1014956C0);
    v2[0] = sub_10006BA20();
    v2[1] = sub_100010D70(&qword_101495740, &qword_101495748, (const char *)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101495720);
  }
  return result;
}

unint64_t sub_10006BA20()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101495728;
  if (!qword_101495728)
  {
    v1 = sub_10000E5D4(&qword_1014956C8);
    v2[0] = sub_100010D70(&qword_101495730, &qword_101495738, (const char *)&protocol conformance descriptor for HStack<A>);
    v2[1] = sub_10000BC84((unint64_t *)&qword_10149CE30, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101495728);
  }
  return result;
}

unint64_t sub_10006BABC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101495750;
  if (!qword_101495750)
  {
    v1 = sub_10000E5D4(&qword_1014956A8);
    v2[0] = sub_10006B7F0();
    v2[1] = sub_10000BC84((unint64_t *)&qword_10149CE30, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101495750);
  }
  return result;
}

uint64_t sub_10006BB40(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain(a1);
  else
    return swift_bridgeObjectRetain(a2);
}

uint64_t sub_10006BB50(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  v4 = *(_BYTE *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 128);
  v10 = *(_QWORD *)(a1 + 136);
  swift_retain(*(_QWORD *)(a1 + 8));
  sub_10006BB40(v2, v3, v4);
  swift_retain(v9);
  swift_retain(v10);
  swift_bridgeObjectRetain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  return a1;
}

uint64_t sub_10006BBF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  v4 = *(_BYTE *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 128);
  v10 = *(_QWORD *)(a1 + 136);
  swift_release(*(_QWORD *)(a1 + 8));
  sub_10006B77C(v2, v3, v4);
  swift_release(v10);
  swift_release(v8);
  swift_release(v6);
  swift_bridgeObjectRelease(v5);
  swift_release(v7);
  swift_release(v9);
  return a1;
}

uint64_t sub_10006BC90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 80);
  v3 = *(_QWORD *)(a1 + 88);
  v4 = *(_BYTE *)(a1 + 96);
  v5 = *(_QWORD *)(a1 + 104);
  v6 = *(_QWORD *)(a1 + 120);
  v7 = *(_QWORD *)(a1 + 128);
  v8 = *(_QWORD *)(a1 + 136);
  v9 = *(_QWORD *)(a1 + 144);
  v10 = *(_QWORD *)(a1 + 152);
  sub_10006BD54(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_BYTE *)(a1 + 72));
  sub_10006B77C(v2, v3, v4);
  swift_release(v10);
  swift_release(v8);
  swift_release(v6);
  swift_bridgeObjectRelease(v5);
  swift_release(v7);
  swift_release(v9);
  return a1;
}

uint64_t sub_10006BD54(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  if (a10 != 255)
    return sub_10006BD78(result, a2, a3, a4, a5, a6, a7, a8, a9, a10 & 1);
  return result;
}

uint64_t sub_10006BD78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  if ((a10 & 1) != 0)
  {
    swift_release(a1);
    swift_release(a2);
    swift_release(a4);
    swift_release(a3);
  }
  else
  {
    a5 = a2;
  }
  return swift_release(a5);
}

uint64_t sub_10006BDD8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  if (a10 != 255)
    return sub_10006BDFC(result, a2, a3, a4, a5, a6, a7, a8, a9, a10 & 1);
  return result;
}

uint64_t sub_10006BDFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  if ((a10 & 1) != 0)
  {
    swift_retain(a5);
    swift_retain(a1);
    swift_retain(a2);
    swift_retain(a3);
  }
  else
  {
    a4 = a2;
  }
  return swift_retain(a4);
}

unint64_t sub_10006BE60()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101495780;
  if (!qword_101495780)
  {
    v1 = sub_10000E5D4(&qword_101495760);
    v2[0] = sub_10006CCBC((unint64_t *)&qword_101495788, &qword_101495790, (unint64_t *)&unk_101495710, (uint64_t *)&unk_10149D520);
    v2[1] = sub_100010D70((unint64_t *)&unk_101494DC0, &qword_10149D530, (const char *)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101495780);
  }
  return result;
}

uint64_t sub_10006BF08()
{
  return sub_10006C810(_s26MultipleCuratedCollectionsVMa, sub_10004DDC4);
}

uint64_t sub_10006BF1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  v8 = *(_QWORD *)(a1 + 88);
  v9 = *(_BYTE *)(a1 + 96);
  v13 = *(_QWORD *)(a1 + 112);
  v14 = *(_QWORD *)(a1 + 104);
  v12 = *(_QWORD *)(a1 + 128);
  v10 = *(_QWORD *)(a1 + 144);
  v15 = *(_QWORD *)(a1 + 120);
  v16 = *(_QWORD *)(a1 + 136);
  swift_release(*(_QWORD *)(a1 + 64));
  swift_release(v4);
  swift_release(v3);
  swift_release(v2);
  swift_release(v5);
  swift_release(v6);
  sub_10006B77C(v7, v8, v9);
  swift_release(v10);
  swift_release(v12);
  swift_release(v13);
  swift_bridgeObjectRelease(v14);
  swift_release(v15);
  swift_release(v16);
  return a1;
}

unint64_t sub_10006C008()
{
  unint64_t result;

  result = qword_10149A490;
  if (!qword_10149A490)
  {
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10149A490);
  }
  return result;
}

uint64_t sub_10006C050()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  int *v11;

  v1 = _s26MultipleCuratedCollectionsVMa(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);

  sub_10001A774(*(_QWORD *)(v0 + v4 + 16), *(_QWORD *)(v0 + v4 + 24), *(_BYTE *)(v0 + v4 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 80));
  v6 = v0 + v4 + *(int *)(v1 + 36);
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v9 = type metadata accessor for PlaceSummaryViewModelUnit.MultipleCuratedGuides(0);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + *(int *)(v9 + 24)));
  v10 = v6 + *(int *)(v9 + 28);
  v11 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v11 - 1) + 48))(v10, 1, v11))
  {
    v8(v10, v7);

    swift_bridgeObjectRelease(*(_QWORD *)(v10 + v11[6] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v10 + v11[7] + 8));

  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

unint64_t sub_10006C190()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1014957D0;
  if (!qword_1014957D0)
  {
    v1 = sub_10000E5D4(&qword_1014957B0);
    v2[0] = sub_100010D70(&qword_1014957D8, &qword_1014957E0, (const char *)&protocol conformance descriptor for _LayoutRoot<A>);
    v2[1] = sub_100010D70(&qword_1014957E8, &qword_1014957F0, (const char *)&protocol conformance descriptor for TupleView<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _VariadicView.Tree<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_1014957D0);
  }
  return result;
}

unint64_t sub_10006C22C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1014957F8;
  if (!qword_1014957F8)
  {
    v1 = sub_10000E5D4(&qword_1014957A0);
    v2[0] = sub_100010D70((unint64_t *)&unk_1014957C0, &qword_1014957B8, "=u7");
    v2[1] = sub_10000BC84((unint64_t *)&qword_10149CE30, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_1014957F8);
  }
  return result;
}

uint64_t sub_10006C2CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_BYTE *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  v8 = *(_QWORD *)(a1 + 88);
  v9 = *(_QWORD *)(a1 + 96);
  v10 = *(_QWORD *)(a1 + 104);
  swift_release(*(_QWORD *)(a1 + 8));
  sub_10006B77C(v2, v3, v4);
  swift_release(v10);
  swift_release(v8);
  swift_release(v6);
  swift_bridgeObjectRelease(v5);
  swift_release(v7);
  swift_release(v9);
  return a1;
}

uint64_t sub_10006C378()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v1 = _s26MultipleCuratedCollectionsVMa(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v19 = *(_QWORD *)(v2 + 64);
  v5 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(0);
  v6 = *((_QWORD *)v5 - 1);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v18 = *(_QWORD *)(v6 + 64);

  sub_10001A774(*(_QWORD *)(v0 + v4 + 16), *(_QWORD *)(v0 + v4 + 24), *(_BYTE *)(v0 + v4 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 80));
  v8 = v0 + v4 + *(int *)(v1 + 36);
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v11 = type metadata accessor for PlaceSummaryViewModelUnit.MultipleCuratedGuides(0);
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + *(int *)(v11 + 24)));
  v12 = v8 + *(int *)(v11 + 28);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(v6 + 48))(v12, 1, v5))
  {
    v10(v12, v9);

    swift_bridgeObjectRelease(*(_QWORD *)(v12 + v5[6] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v12 + v5[7] + 8));

  }
  v13 = v3 | v7 | 7;
  v14 = (v4 + v19 + v7) & ~v7;
  v15 = v14 + v18;
  v16 = v0 + v14;
  v10(v0 + v14, v9);

  swift_bridgeObjectRelease(*(_QWORD *)(v16 + v5[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v16 + v5[7] + 8));

  return swift_deallocObject(v0, v15, v13);
}

uint64_t sub_10006C53C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(_s26MultipleCuratedCollectionsVMa(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(0) - 8)
                          + 80);
  return sub_10004DA24(v0 + v2, v0 + ((v2 + v3 + v4) & ~v4));
}

unint64_t sub_10006C5A8()
{
  unint64_t result;

  result = qword_1014958D8;
  if (!qword_1014958D8)
  {
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute, &type metadata for AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute);
    atomic_store(result, (unint64_t *)&qword_1014958D8);
  }
  return result;
}

uint64_t sub_10006C5F0()
{
  return 8;
}

uint64_t sub_10006C5FC(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t sub_10006C604(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *a1;
  *a2 = v2;
  return swift_retain(v2);
}

_QWORD *sub_10006C618(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_10006C628()
{
  return sub_10006C810(_s18SingleCuratedGuideVMa, sub_10004F758);
}

uint64_t sub_10006C640()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;

  v1 = _s18SingleCuratedGuideVMa(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;

  sub_10001A774(*(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 24), *(_BYTE *)(v7 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + 64));
  v8 = v7 + *(int *)(v1 + 32);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(0);

  swift_bridgeObjectRelease(*(_QWORD *)(v8 + v10[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + v10[7] + 8));

  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10006C730()
{
  return sub_10006C810(_s18UserGeneratedGuideVMa, sub_100050810);
}

uint64_t sub_10006C748()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = _s18UserGeneratedGuideVMa(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;

  sub_10001A774(*(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 24), *(_BYTE *)(v7 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + 48));
  v8 = v7 + *(int *)(v1 + 28);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = type metadata accessor for PlaceSummaryViewModelUnit.UserGeneratedGuide(0);
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + *(int *)(v10 + 20) + 8));

  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10006C810(uint64_t (*a1)(_QWORD), uint64_t (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(a1(0) - 8) + 80);
  return a2(v2 + ((v4 + 16) & ~v4));
}

uint64_t sub_10006C850(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(_QWORD *)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 96);
  v8 = *(_BYTE *)(a1 + 104);
  v9 = *(_QWORD *)(a1 + 120);
  v12 = *(_QWORD *)(a1 + 112);
  v19 = *(_QWORD *)(a1 + 160);
  v20 = *(_QWORD *)(a1 + 152);
  v18 = *(_QWORD *)(a1 + 168);
  v16 = *(_QWORD *)(a1 + 184);
  v17 = *(_QWORD *)(a1 + 176);
  v14 = *(_QWORD *)(a1 + 200);
  v15 = *(_QWORD *)(a1 + 192);
  v13 = *(_QWORD *)(a1 + 208);
  v11 = *(_OWORD *)(a1 + 216);
  swift_release(*(_QWORD *)(a1 + 72));
  swift_release(v3);
  swift_release(v2);
  swift_release(v4);
  swift_release(v5);
  sub_10006B77C(v6, v7, v8);
  swift_release(v9);
  swift_bridgeObjectRelease(v12);
  sub_10006C964(v20, v19, v18, v17, v16, v15, v14, v13, v11);
  return a1;
}

uint64_t sub_10006C964(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a4)
  {
    sub_10006B77C(result, a2, a3 & 1);
    swift_release(a9);
    swift_release(a7);
    swift_release(a5);
    swift_bridgeObjectRelease(a4);
    swift_release(a6);
    return swift_release(a8);
  }
  return result;
}

uint64_t sub_10006C9E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_BYTE *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 88);
  v10 = *(_QWORD *)(a1 + 96);
  swift_retain(*(_QWORD *)(a1 + 56));
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  sub_10006BB40(v6, v7, v8);
  swift_bridgeObjectRetain(v9);
  swift_retain(v10);
  return a1;
}

double sub_10006CA7C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  double result;

  if (a4)
  {
    sub_10006BB40(a1, a2, a3 & 1);
    swift_retain(a8);
    swift_retain(a9);
    swift_bridgeObjectRetain(a4);
    swift_retain(a5);
    swift_retain(a6);
    *(_QWORD *)&result = swift_retain(a7).n128_u64[0];
  }
  return result;
}

uint64_t sub_10006CAF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_BYTE *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 88);
  v10 = *(_QWORD *)(a1 + 96);
  swift_release(*(_QWORD *)(a1 + 48));
  swift_release(v3);
  swift_release(v2);
  swift_release(v4);
  swift_release(v5);
  sub_10006B77C(v6, v7, v8);
  swift_release(v10);
  swift_bridgeObjectRelease(v9);
  return a1;
}

unint64_t sub_10006CB94()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101495960;
  if (!qword_101495960)
  {
    v1 = sub_10000E5D4(&qword_101495958);
    v2[0] = sub_10006CC18();
    v2[1] = sub_100010D70(&qword_101495988, &qword_101495990, (const char *)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101495960);
  }
  return result;
}

unint64_t sub_10006CC18()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101495968;
  if (!qword_101495968)
  {
    v1 = sub_10000E5D4((uint64_t *)&unk_101495970);
    v2[0] = sub_10006CCBC((unint64_t *)&unk_10149DB20, &qword_101495980, (unint64_t *)&unk_101494DC0, &qword_10149D530);
    v2[1] = sub_100010D70((unint64_t *)&unk_101495710, (uint64_t *)&unk_10149D520, (const char *)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101495968);
  }
  return result;
}

uint64_t sub_10006CCBC(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = sub_10000E5D4(a2);
    v9[0] = &protocol witness table for Image;
    v9[1] = sub_100010D70(a3, a4, (const char *)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10006CD3C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1014959A0;
  if (!qword_1014959A0)
  {
    v1 = sub_10000E5D4(&qword_101495998);
    v2[0] = sub_10006D028(&qword_101495690, &qword_101495688, &qword_101495698, &qword_1014956A0);
    v2[1] = sub_100010D70(&qword_101495988, &qword_101495990, (const char *)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_1014959A0);
  }
  return result;
}

unint64_t sub_10006CDE0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1014959B8;
  if (!qword_1014959B8)
  {
    v1 = sub_10000E5D4(&qword_101495928);
    v2[0] = sub_100010D70(&qword_1014959C0, &qword_101495920, (const char *)&protocol conformance descriptor for HStack<A>);
    v2[1] = sub_100010D70(&qword_101495988, &qword_101495990, (const char *)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_1014959B8);
  }
  return result;
}

unint64_t sub_10006CE7C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1014959C8;
  if (!qword_1014959C8)
  {
    v1 = sub_10000E5D4(&qword_101495910);
    v2[0] = sub_100010D70(&qword_1014959D0, &qword_101495908, (const char *)&protocol conformance descriptor for HStack<A>);
    v2[1] = sub_100020AE0();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_1014959C8);
  }
  return result;
}

unint64_t sub_10006CF00()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101495A30;
  if (!qword_101495A30)
  {
    v1 = sub_10000E5D4(&qword_101495A28);
    v2[0] = sub_10006CF84();
    v2[1] = sub_100010D70(&qword_101495698, &qword_1014956A0, (const char *)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101495A30);
  }
  return result;
}

unint64_t sub_10006CF84()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101495A38;
  if (!qword_101495A38)
  {
    v1 = sub_10000E5D4(&qword_101495A40);
    v2[0] = sub_10006D028(&qword_101495A48, &qword_101495A50, (unint64_t *)&unk_101495710, (uint64_t *)&unk_10149D520);
    v2[1] = sub_100010D70((unint64_t *)&unk_101494DC0, &qword_10149D530, (const char *)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101495A38);
  }
  return result;
}

uint64_t sub_10006D028(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = sub_10000E5D4(a2);
    v9[0] = &protocol witness table for Text;
    v9[1] = sub_100010D70(a3, a4, (const char *)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10006D0A8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101495A60;
  if (!qword_101495A60)
  {
    v1 = sub_10000E5D4(&qword_101495A58);
    v2[0] = sub_10006CF00();
    v2[1] = sub_100010D70(&qword_101495988, &qword_101495990, (const char *)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101495A60);
  }
  return result;
}

uint64_t *sub_10006D12C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[4];
  v6 = a1[5];
  v7 = a1[6];
  v8 = *((_BYTE *)a1 + 56);
  v12 = a1[9];
  v13 = a1[8];
  v9 = a1[11];
  v10 = a1[13];
  v14 = a1[10];
  v15 = a1[12];
  swift_release(a1[3]);
  swift_release(v3);
  swift_release(v2);
  swift_release(v4);
  swift_release(v5);
  sub_10006B77C(v6, v7, v8);
  swift_release(v10);
  swift_release(v9);
  swift_release(v12);
  swift_bridgeObjectRelease(v13);
  swift_release(v14);
  swift_release(v15);
  return a1;
}

uint64_t sub_10006D204(unint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    v8 = sub_10000E5D4(a2);
    v10[0] = sub_10000E5D4(a3);
    v10[1] = sub_100010D70(a4, a3, (const char *)&protocol conformance descriptor for HStack<A>);
    v9[0] = swift_getOpaqueTypeConformance2(v10, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    v9[1] = sub_10000BC84((unint64_t *)&qword_10149CE30, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10006D2C8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101495AB8;
  if (!qword_101495AB8)
  {
    v1 = sub_10000E5D4(&qword_101495A80);
    v2[0] = sub_100010D70(&qword_101495AA8, &qword_101495AA0, (const char *)&protocol conformance descriptor for HStack<A>);
    v2[1] = sub_10000BC84((unint64_t *)&qword_10149CE30, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101495AB8);
  }
  return result;
}

uint64_t sub_10006D364(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_BYTE *)(a1 + 80);
  v12 = *(_QWORD *)(a1 + 96);
  v13 = *(_QWORD *)(a1 + 88);
  v9 = *(_QWORD *)(a1 + 112);
  v10 = *(_QWORD *)(a1 + 128);
  v14 = *(_QWORD *)(a1 + 104);
  v15 = *(_QWORD *)(a1 + 120);
  swift_release(*(_QWORD *)(a1 + 48));
  swift_release(v3);
  swift_release(v2);
  swift_release(v4);
  swift_release(v5);
  sub_10006B77C(v6, v7, v8);
  swift_release(v10);
  swift_release(v9);
  swift_release(v12);
  swift_bridgeObjectRelease(v13);
  swift_release(v14);
  swift_release(v15);
  return a1;
}

unint64_t sub_10006D444()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101495AE0;
  if (!qword_101495AE0)
  {
    v1 = sub_10000E5D4(&qword_101495AC0);
    v2[0] = sub_10000BC84(&qword_1014949E8, _s5LabelVMa, (uint64_t)&unk_100E26A54);
    v2[1] = sub_100010D70((unint64_t *)&unk_101494DC0, &qword_10149D530, (const char *)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101495AE0);
  }
  return result;
}

unint64_t sub_10006D4E0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101495AE8;
  if (!qword_101495AE8)
  {
    v1 = sub_10000E5D4(&qword_101495AD8);
    v2[0] = sub_100010D70(&qword_101495AF0, &qword_101495AF8, "=u7");
    v2[1] = sub_10000BC84((unint64_t *)&qword_10149CE30, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101495AE8);
  }
  return result;
}

unint64_t sub_10006D57C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101495B00;
  if (!qword_101495B00)
  {
    v1 = sub_10000E5D4(&qword_101495AC8);
    v2[0] = sub_10006D444();
    v2[1] = sub_10000BC84((unint64_t *)&qword_10149CE30, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101495B00);
  }
  return result;
}

uint64_t sub_10006D604(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 80);
  v8 = *(id *)a1;
  sub_10002057C(v2, v3, v4);
  swift_retain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t sub_10006D680(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v17 = *(_QWORD *)(a1 + 24);
  v18 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 72);
  v15 = *(_OWORD *)(a1 + 80);
  v13 = *(_OWORD *)(a1 + 112);
  v14 = *(_OWORD *)(a1 + 96);
  v12 = *(_OWORD *)(a1 + 128);
  v8 = *(_QWORD *)(a1 + 144);
  v7 = *(_QWORD *)(a1 + 152);
  v9 = *(_BYTE *)(a1 + 160);
  v10 = *(_BYTE *)(a1 + 161);
  swift_release(*(_QWORD *)(a1 + 8));
  sub_10006D75C(v18, v17, v16, v2, v3, v4, v5, v6, v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v8, v7, v9,
    v10);
  return a1;
}

uint64_t sub_10006D75C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, char a20)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v24 = a4;
  v25 = a9;
  if ((a20 & 1) != 0)
  {
    sub_10006B77C(a1, a2, a3 & 1);
    v26 = a7;
  }
  else
  {
    v26 = a15;
    swift_release(a4);
    swift_release(a5);
    swift_release(a7);
    swift_release(a6);
    swift_release(a8);
    sub_10006B77C(a9, a10, a11 & 1);
    a6 = a14;
    v25 = a17;
    a5 = a13;
    v24 = a12;
    a8 = a16;
  }
  swift_release(v25);
  swift_release(v26);
  swift_release(a5);
  swift_bridgeObjectRelease(v24);
  swift_release(a6);
  return swift_release(a8);
}

uint64_t sub_10006D870()
{
  uint64_t v0;

  sub_10001A774(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));

  return swift_deallocObject(v0, 120, 7);
}

uint64_t sub_10006D8C0()
{
  uint64_t v0;

  return sub_1000567B0(v0 + 16, *(_QWORD *)(v0 + 112));
}

uint64_t sub_10006D8DC(uint64_t result)
{
  *(_BYTE *)(result + 145) = 1;
  return result;
}

uint64_t sub_10006D8E8(uint64_t result)
{
  *(_BYTE *)(result + 145) = 0;
  return result;
}

uint64_t sub_10006D8F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v1 = _s13TappableEntryVMa(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v17 = *(_QWORD *)(v2 + 64);
  v18 = v0;

  sub_10001A774(*(_QWORD *)(v0 + v4 + 16), *(_QWORD *)(v0 + v4 + 24), *(_BYTE *)(v0 + v4 + 32));
  v5 = v0 + v4 + *(int *)(v1 + 24);
  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v7(v5, v6);
  v8 = type metadata accessor for PlaceSummaryViewModelUnit.TappableEntry(0);
  v9 = v5 + *(int *)(v8 + 20);
  v7(v9, v6);
  v10 = (int *)type metadata accessor for PlaceSummaryViewModelUnit.Label(0);
  v11 = v9 + v10[5];
  v12 = type metadata accessor for AttributedString(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  v14(v11, v12);
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + v10[6] + 8));
  swift_release(*(_QWORD *)(v9 + v10[7]));
  swift_release(*(_QWORD *)(v9 + v10[8]));
  swift_release(*(_QWORD *)(v9 + v10[9]));
  swift_release(*(_QWORD *)(v9 + v10[10]));
  v15 = v9 + v10[12];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v15, 1, v12))
    v14(v15, v12);

  return swift_deallocObject(v18, v4 + v17, v3 | 7);
}

uint64_t sub_10006DA78()
{
  return sub_10006EC34(_s13TappableEntryVMa, sub_100056880);
}

unint64_t sub_10006DA8C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101495B40;
  if (!qword_101495B40)
  {
    v1 = sub_10000E5D4(&qword_101495B38);
    v2[0] = sub_10006D028(&qword_101495690, &qword_101495688, &qword_101495698, &qword_1014956A0);
    v2[1] = &protocol witness table for _PaddingLayout;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101495B40);
  }
  return result;
}

unint64_t sub_10006DB18()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101495B58;
  if (!qword_101495B58)
  {
    v1 = sub_10000E5D4(&qword_101495B28);
    v2[0] = sub_10006DA8C();
    v2[1] = sub_10000BC84((unint64_t *)&qword_10149CE30, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101495B58);
  }
  return result;
}

unint64_t sub_10006DB9C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101495B70;
  if (!qword_101495B70)
  {
    v1 = sub_10000E5D4(&qword_101495B60);
    v2[0] = sub_10000BC84(&qword_1014949E8, _s5LabelVMa, (uint64_t)&unk_100E26A54);
    v2[1] = sub_100010D70(&qword_101495988, &qword_101495990, (const char *)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101495B70);
  }
  return result;
}

uint64_t sub_10006DC48(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;

  if (result)
  {
    v8 = result;
    swift_retain(a5);
    swift_retain(v8);
    swift_retain(a2);
    swift_retain(a3);
    return swift_retain(a4);
  }
  return result;
}

uint64_t sub_10006DCA4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result)
  {
    swift_release(result);
    swift_release(a2);
    swift_release(a4);
    swift_release(a3);
    return swift_release(a5);
  }
  return result;
}

uint64_t sub_10006DCFC()
{
  uint64_t v0;

  return sub_1000580F8(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10006DD04()
{
  return sub_10006DFB0(96);
}

uint64_t sub_10006DD0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_100059570(a1, a2, a3, v3 + 16);
}

uint64_t sub_10006DD14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  id v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_BYTE *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(id *)(a1 + 16);
  swift_retain(v2);
  sub_10002057C(v3, v4, v5);
  swift_retain(v6);
  return a1;
}

_QWORD *sub_10006DD80(_QWORD *a1)
{
  swift_retain(*a1);
  return a1;
}

uint64_t sub_10006DDA8(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 16));
  return a1;
}

id sub_10006DDD0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100058210(*(__int128 **)(v1 + 16), a1);
}

unint64_t sub_10006DDD8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101495BF8;
  if (!qword_101495BF8)
  {
    v1 = sub_10000E5D4(&qword_101495C00);
    v2[0] = sub_10006DE5C();
    v2[1] = sub_10000BC84((unint64_t *)&qword_10149CE30, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101495BF8);
  }
  return result;
}

unint64_t sub_10006DE5C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101495C08;
  if (!qword_101495C08)
  {
    v1 = sub_10000E5D4(&qword_101495C10);
    v2[0] = sub_100010D70(&qword_101495C18, &qword_101495C20, (const char *)&protocol conformance descriptor for ZStack<A>);
    v2[1] = sub_100020AE0();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101495C08);
  }
  return result;
}

uint64_t sub_10006DEE0()
{
  return sub_10006DFB0(96);
}

uint64_t sub_10006DEE8@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v3;

  return sub_10005841C(a1, (__int128 *)(v3 + 16), a2, a3);
}

unint64_t sub_10006DEF0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101495C38;
  if (!qword_101495C38)
  {
    v1 = sub_10000E5D4(&qword_101495C30);
    v2[0] = &protocol witness table for Int;
    v2[1] = sub_10006DF5C();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ClosedRange<A>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101495C38);
  }
  return result;
}

unint64_t sub_10006DF5C()
{
  unint64_t result;

  result = qword_101495C40;
  if (!qword_101495C40)
  {
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_101495C40);
  }
  return result;
}

uint64_t sub_10006DFA8()
{
  return sub_10006DFB0(104);
}

uint64_t sub_10006DFB0(uint64_t a1)
{
  uint64_t v1;

  swift_release(*(_QWORD *)(v1 + 24));

  sub_10001A774(*(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_BYTE *)(v1 + 64));
  swift_release(*(_QWORD *)(v1 + 88));
  return swift_deallocObject(v1, a1, 7);
}

id sub_10006DFFC()
{
  uint64_t v0;

  return sub_1000593C4(v0 + 16, *(_QWORD *)(v0 + 96));
}

unint64_t sub_10006E008()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101495C98;
  if (!qword_101495C98)
  {
    v1 = sub_10000E5D4(&qword_101495C90);
    v2[0] = sub_10006EB08((unint64_t *)&qword_101495CA0, &qword_101495CA8, (uint64_t)&protocol witness table for Image, (uint64_t)&protocol witness table for _AspectRatioLayout);
    v2[1] = &protocol witness table for _FrameLayout;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101495C98);
  }
  return result;
}

uint64_t sub_10006E094()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));

  sub_10001A774(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_BYTE *)(v0 + 72));
  swift_release(*(_QWORD *)(v0 + 96));
  return swift_deallocObject(v0, 104, 7);
}

id sub_10006E0D4()
{
  uint64_t v0;

  return sub_100059468(*(_QWORD *)(v0 + 16), (__int128 *)(v0 + 24));
}

unint64_t sub_10006E0EC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101495CC0;
  if (!qword_101495CC0)
  {
    v1 = sub_10000E5D4(&qword_101495CB8);
    v2[0] = sub_100010D70((unint64_t *)&unk_1014957C0, &qword_1014957B8, "=u7");
    v2[1] = sub_10006B3EC();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101495CC0);
  }
  return result;
}

uint64_t sub_10006E170(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  v8 = *(_QWORD *)(a1 + 88);
  v9 = *(_BYTE *)(a1 + 96);
  v13 = *(_QWORD *)(a1 + 112);
  v14 = *(_QWORD *)(a1 + 104);
  v12 = *(_QWORD *)(a1 + 128);
  v10 = *(_QWORD *)(a1 + 144);
  v15 = *(_QWORD *)(a1 + 120);
  v16 = *(_QWORD *)(a1 + 136);
  v18 = *(_QWORD *)(a1 + 176);
  v19 = *(_QWORD *)(a1 + 168);
  v17 = *(_BYTE *)(a1 + 184);
  swift_release(*(_QWORD *)(a1 + 64));
  swift_release(v4);
  swift_release(v3);
  swift_release(v2);
  swift_release(v5);
  swift_release(v6);
  sub_10006B77C(v7, v8, v9);
  swift_release(v10);
  swift_release(v12);
  swift_release(v13);
  swift_bridgeObjectRelease(v14);
  swift_release(v15);
  swift_release(v16);
  sub_10006E27C(v19, v18, v17);
  return a1;
}

uint64_t sub_10006E27C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 0xCu)
    return swift_bridgeObjectRelease(a2);
  return result;
}

uint64_t sub_10006E298()
{
  uint64_t v0;

  sub_10001A774(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
  return swift_deallocObject(v0, 120, 7);
}

void sub_10006E2E8()
{
  uint64_t v0;

  sub_100059EB0(v0 + 16);
}

uint64_t sub_10006E304(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(id *)a1;
  sub_10002057C(v2, v3, v4);
  swift_retain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t sub_10006E370()
{
  uint64_t v0;

  sub_10001A774(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
  return swift_deallocObject(v0, 88, 7);
}

void sub_10006E3B0()
{
  uint64_t v0;

  sub_10005A6A0(v0 + 16);
}

_QWORD *sub_10006E3C8(_QWORD *a1, _QWORD *a2)
{
  initializeWithTake for PlaceSummaryStringFormatType(a2, a1);
  return a2;
}

uint64_t sub_10006E404()
{
  uint64_t v0;

  sub_10001A774(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  sub_1000200C0(*(_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10006E444()
{
  uint64_t v0;

  return sub_10005E7F4(v0 + 16);
}

uint64_t sub_10006E44C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10005E894(*(_QWORD **)(v1 + 16), a1);
}

uint64_t sub_10006E454(uint64_t a1)
{
  sub_10002057C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

uint64_t sub_10006E484(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  return a1;
}

unint64_t *sub_10006E4AC(unint64_t *a1)
{
  sub_100020008(*a1);
  return a1;
}

unint64_t sub_10006E4D4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101495CF0;
  if (!qword_101495CF0)
  {
    v1 = sub_10000E5D4(&qword_101495CE8);
    v2[0] = sub_100010D70(&qword_101495CF8, &qword_101495D00, (const char *)&protocol conformance descriptor for ZStack<A>);
    v2[1] = sub_100010D70((unint64_t *)&unk_101494E00, &qword_101494DD0, (const char *)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101495CF0);
  }
  return result;
}

unint64_t sub_10006E570()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101495D70;
  if (!qword_101495D70)
  {
    v1 = sub_10000E5D4(&qword_101495D68);
    v2[0] = sub_10006CCBC((unint64_t *)&qword_101495788, &qword_101495790, (unint64_t *)&unk_101495710, (uint64_t *)&unk_10149D520);
    v2[1] = sub_100010D70(&qword_101495D78, &qword_101495D80, (const char *)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101495D70);
  }
  return result;
}

uint64_t _s12ContactBadgeVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10001A6E8(a1, a2, a3, a4, (uint64_t)&_s12ContactBadgeVMn);
}

uint64_t sub_10006E638@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10005CD90(v1[4], v1[5], v1[2], v1[3], a1);
}

uint64_t sub_10006E644()
{
  return sub_10002067C(&qword_101495DC8, &qword_101495DD0, (uint64_t (*)(void))sub_10006E668, (uint64_t)&protocol witness table for _FrameLayout);
}

unint64_t sub_10006E668()
{
  unint64_t result;

  result = qword_101495DD8;
  if (!qword_101495DD8)
  {
    result = swift_getWitnessTable(byte_100E2713C, &_s11SearchBadgeVN);
    atomic_store(result, (unint64_t *)&qword_101495DD8);
  }
  return result;
}

unint64_t sub_10006E6AC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101495DE0;
  if (!qword_101495DE0)
  {
    v1 = sub_10000E5D4(&qword_101495DA0);
    v2[0] = sub_10006E718();
    v2[1] = sub_10006E8C4();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101495DE0);
  }
  return result;
}

unint64_t sub_10006E718()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101495DE8;
  if (!qword_101495DE8)
  {
    v1 = sub_10000E5D4(&qword_101495DB8);
    v2[0] = sub_10006E79C();
    v2[1] = sub_100010D70((unint64_t *)&unk_101494E00, &qword_101494DD0, (const char *)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101495DE8);
  }
  return result;
}

unint64_t sub_10006E79C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101495DF0;
  if (!qword_101495DF0)
  {
    v1 = sub_10000E5D4(&qword_101495DF8);
    v2[0] = sub_10006E820();
    v2[1] = sub_100010D70((unint64_t *)&unk_101495E10, &qword_10149CED0, (const char *)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101495DF0);
  }
  return result;
}

unint64_t sub_10006E820()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101495E00;
  if (!qword_101495E00)
  {
    v1 = sub_10000E5D4(&qword_101495E08);
    v2[0] = sub_10006EB08((unint64_t *)&qword_101495CA0, &qword_101495CA8, (uint64_t)&protocol witness table for Image, (uint64_t)&protocol witness table for _AspectRatioLayout);
    v2[1] = sub_100010D70((unint64_t *)&unk_101494DC0, &qword_10149D530, (const char *)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101495E00);
  }
  return result;
}

unint64_t sub_10006E8C4()
{
  unint64_t result;

  result = qword_101495E20;
  if (!qword_101495E20)
  {
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for _AccessibilityIgnoresInvertColorsViewModifier, &type metadata for _AccessibilityIgnoresInvertColorsViewModifier);
    atomic_store(result, (unint64_t *)&qword_101495E20);
  }
  return result;
}

uint64_t sub_10006E910(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_10006E940(uint64_t a1)
{
  swift_retain(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_10006E968()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

unint64_t sub_10006E978()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101495E30;
  if (!qword_101495E30)
  {
    v1 = sub_10000E5D4(&qword_101495E28);
    v2[0] = sub_10006296C();
    v2[1] = sub_100010D70(&qword_101494C80, &qword_101494C88, (const char *)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101495E30);
  }
  return result;
}

uint64_t sub_10006E9FC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10006EA0C()
{
  uint64_t v0;

  sub_10001A774(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  return swift_deallocObject(v0, 33, 7);
}

uint64_t sub_10006EA34()
{
  uint64_t v0;

  return sub_10005F4C8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
}

uint64_t sub_10006EA40()
{
  return sub_10002067C(&qword_101495E48, &qword_101495E50, (uint64_t (*)(void))sub_10006EA64, (uint64_t)&protocol witness table for _AspectRatioLayout);
}

unint64_t sub_10006EA64()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101495E58;
  if (!qword_101495E58)
  {
    v1 = sub_10000E5D4(&qword_101495E60);
    v2[0] = sub_10006EB08(&qword_101495E68, &qword_101495E70, (uint64_t)&protocol witness table for Image, (uint64_t)&protocol witness table for _FrameLayout);
    v2[1] = sub_100010D70((unint64_t *)&unk_101494DC0, &qword_10149D530, (const char *)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101495E58);
  }
  return result;
}

uint64_t sub_10006EB08(unint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = sub_10000E5D4(a2);
    v9[0] = a3;
    v9[1] = a4;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10006EB68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = _s12ActionButtonVMa(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  sub_10001A774(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8), *(_BYTE *)(v0 + v4 + 16));
  v8 = v7 + *(int *)(v1 + 20);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = type metadata accessor for PlaceSummaryViewModelActionButtons.Button(0);
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + *(int *)(v10 + 20) + 8));
  swift_unknownObjectRelease(*(_QWORD *)(v8 + *(int *)(v10 + 24)));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10006EC20()
{
  return sub_10006EC34(_s12ActionButtonVMa, sub_100060890);
}

uint64_t sub_10006EC34(uint64_t (*a1)(_QWORD), uint64_t (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1(0) - 8) + 80);
  return a2(v2 + ((v3 + 16) & ~v3));
}

double sub_10006EC74@<D0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;
  double result;

  *(_QWORD *)&result = sub_100060940(*(_QWORD *)(v2 + 16), a1, a2).n128_u64[0];
  return result;
}

unint64_t sub_10006EC7C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101495EA8;
  if (!qword_101495EA8)
  {
    v1 = sub_10000E5D4(&qword_101495EA0);
    v2[0] = sub_100010D70(&qword_101495EB0, &qword_101495EB8, (const char *)&protocol conformance descriptor for HStack<A>);
    v2[1] = &protocol witness table for _FlexFrameLayout;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101495EA8);
  }
  return result;
}

unint64_t sub_10006ED00()
{
  unint64_t result;

  result = qword_101495EC8[0];
  if (!qword_101495EC8[0])
  {
    result = swift_getWitnessTable(byte_100E270B4, &_s17ActionButtonStyleVN);
    atomic_store(result, qword_101495EC8);
  }
  return result;
}

_QWORD *_s21HikeRouteSnapshotViewVwca_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlaceSummaryViewModelActionButtons(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlaceSummaryViewModelActionButtons(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s13StackedImagesVMa()
{
  return &_s13StackedImagesVN;
}

ValueMetadata *_s20InvisibleLoadingViewVMa()
{
  return &_s20InvisibleLoadingViewVN;
}

uint64_t sub_10006EE28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006F430(a1, a2, a3, (uint64_t)&value witness table for () + 64);
}

_QWORD *sub_10006EE38(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *a2;
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 16) & (unint64_t)~v6) + *(_QWORD *)(v5 + 64) > 0x18)
  {
    *a1 = v7;
    a1 = (_QWORD *)(v7 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain(v7);
  }
  else
  {
    v10 = a2[1];
    *a1 = v7;
    a1[1] = v10;
    v11 = ((unint64_t)a1 + v6 + 16) & ~v6;
    v12 = ((unint64_t)a2 + v6 + 16) & ~v6;
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain(v10);
    v13(v11, v12, v4);
  }
  return a1;
}

uint64_t sub_10006EEFC(uint64_t a1, uint64_t a2)
{
  swift_release(*(_QWORD *)(a1 + 8));
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *sub_10006EF40(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 16) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 16) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_retain(v4);
  v10(v8, v9, v5);
  return a1;
}

_QWORD *sub_10006EFB0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

_OWORD *sub_10006F020(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t sub_10006F070(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  swift_release(v6);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))((*(unsigned __int8 *)(v7 + 80) + 16 + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_10006F0D8(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  uint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 16) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(_WORD *)((char *)a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 16) & ~v7);
      v15 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((_BYTE *)a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_10006F1AC + 4 * byte_100E25C3C[(v9 - 1)]))();
}

void sub_10006F21C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = &dword_100000004;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t _s16BorderlessButtonVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10001A6E8(a1, a2, a3, a4, (uint64_t)&_s16BorderlessButtonVMn);
}

uint64_t sub_10006F420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006F430(a1, a2, a3, (uint64_t)&value witness table for Builtin.NativeObject + 64);
}

uint64_t sub_10006F430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v6;
  _QWORD v7[2];

  v7[0] = a4;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v6 <= 0x3F)
  {
    v7[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 2, v7, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_10006F4A0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ((v6 + 8) & ~v6) + *(_QWORD *)(v5 + 64);
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain(v9);
  }
  else
  {
    v12 = ((unint64_t)a1 + v6 + 8) & ~v6;
    v13 = ((unint64_t)a2 + v6 + 8) & ~v6;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain(v9);
    v14(v12, v13, v4);
  }
  return a1;
}

uint64_t sub_10006F55C(_QWORD *a1, uint64_t a2)
{
  swift_release(*a1);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((unint64_t)a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t *sub_10006F5A0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = *a2;
  *a1 = *a2;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_retain(v4);
  v10(v8, v9, v5);
  return a1;
}

uint64_t *sub_10006F610(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v7);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

_QWORD *sub_10006F680(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t *sub_10006F6D0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_10006F738(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  uint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 8) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(_WORD *)((char *)a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 8) & ~v7);
      v15 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((_BYTE *)a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_10006F80C + 4 * byte_100E25C4A[(v9 - 1)]))();
}

void sub_10006F87C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = &dword_100000004;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

ValueMetadata *_s11SearchBadgeVMa()
{
  return &_s11SearchBadgeVN;
}

ValueMetadata *_s17ActionButtonStyleVMa()
{
  return &_s17ActionButtonStyleVN;
}

unint64_t sub_10006FA94()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101495FD0;
  if (!qword_101495FD0)
  {
    v1 = sub_10000E5D4(&qword_101495680);
    v2[0] = sub_10006D028(&qword_101495690, &qword_101495688, &qword_101495698, &qword_1014956A0);
    v2[1] = sub_10000BC84((unint64_t *)&qword_10149CE30, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101495FD0);
  }
  return result;
}

unint64_t sub_10006FB3C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101495FD8;
  if (!qword_101495FD8)
  {
    v1 = sub_10000E5D4(&qword_101495FE0);
    v2[0] = sub_10006B99C();
    v2[1] = sub_10006BABC();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101495FD8);
  }
  return result;
}

unint64_t sub_10006FBAC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101495FE8;
  if (!qword_101495FE8)
  {
    v1 = sub_10000E5D4(&qword_101495FF0);
    v2[0] = sub_10006C190();
    v2[1] = sub_10006C22C();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101495FE8);
  }
  return result;
}

unint64_t sub_10006FC1C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101495FF8;
  if (!qword_101495FF8)
  {
    v1 = sub_10000E5D4(&qword_101495810);
    v2[0] = sub_100010D70((unint64_t *)&unk_101495840, &qword_101495808, "=u7");
    v2[1] = sub_10000BC84((unint64_t *)&qword_10149CE30, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101495FF8);
  }
  return result;
}

uint64_t sub_10006FCBC()
{
  return sub_10006D204(&qword_101496000, &qword_101496008, &qword_1014958F0, &qword_1014958F8);
}

unint64_t sub_10006FCF4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101496010;
  if (!qword_101496010)
  {
    v1 = sub_10000E5D4(&qword_101495930);
    v2[0] = sub_10006CDE0();
    v2[1] = sub_10006CE7C();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101496010);
  }
  return result;
}

unint64_t sub_10006FD64()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101496018;
  if (!qword_101496018)
  {
    v1 = sub_10000E5D4(&qword_101496020);
    v2[0] = sub_10006D204(&qword_101495AB0, &qword_101495A98, &qword_101495AA0, &qword_101495AA8);
    v2[1] = sub_10006D2C8();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101496018);
  }
  return result;
}

unint64_t sub_10006FDF4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101496028;
  if (!qword_101496028)
  {
    v1 = sub_10000E5D4(&qword_101496030);
    v2[0] = sub_10006D4E0();
    v2[1] = sub_10006D57C();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101496028);
  }
  return result;
}

uint64_t sub_10006FE60()
{
  return sub_100010D70(&qword_101496038, &qword_101495B20, "=u7");
}

unint64_t sub_10006FE90()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101496040;
  if (!qword_101496040)
  {
    v1 = sub_10000E5D4(&qword_101496048);
    v2[0] = sub_10006EB08(&qword_101495B50, &qword_101495B48, (uint64_t)&protocol witness table for Spacer, (uint64_t)&protocol witness table for _FrameLayout);
    v2[1] = sub_10006DB18();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101496040);
  }
  return result;
}

unint64_t sub_10006FF20()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101496050;
  if (!qword_101496050)
  {
    v1 = sub_10000E5D4(&qword_101495B68);
    v2[0] = sub_10006DB9C();
    v2[1] = sub_10000BC84((unint64_t *)&qword_10149CE30, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101496050);
  }
  return result;
}

uint64_t sub_10006FFA4()
{
  return sub_10002067C(&qword_101496058, &qword_101496060, (uint64_t (*)(void))sub_10006FFD8, (uint64_t)&protocol witness table for _PaddingLayout);
}

unint64_t sub_10006FFD8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101496068;
  if (!qword_101496068)
  {
    v1 = sub_10000E5D4(&qword_101496070);
    v2[0] = sub_100010D70(&qword_101496078, &qword_101496080, (const char *)&protocol conformance descriptor for HStack<A>);
    v2[1] = sub_10006B3EC();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101496068);
  }
  return result;
}

uint64_t sub_10007005C()
{
  return sub_10002067C(&qword_101496088, &qword_101495BB8, sub_100070090, (uint64_t)&protocol witness table for _PaddingLayout);
}

uint64_t sub_100070090()
{
  return sub_10002067C(&qword_101496090, &qword_101495BB0, (uint64_t (*)(void))sub_1000700B4, (uint64_t)&protocol witness table for _PaddingLayout);
}

unint64_t sub_1000700B4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101496098;
  if (!qword_101496098)
  {
    v1 = sub_10000E5D4(&qword_101495BA8);
    v2[0] = sub_100070138();
    v2[1] = sub_10000BC84(&qword_1014960D0, (uint64_t (*)(uint64_t))&type metadata accessor for SafeAreaPaddingModifier, (uint64_t)&protocol conformance descriptor for SafeAreaPaddingModifier);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101496098);
  }
  return result;
}

unint64_t sub_100070138()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1014960A0;
  if (!qword_1014960A0)
  {
    v1 = sub_10000E5D4(&qword_101495BA0);
    v2[0] = sub_10002067C(&qword_1014960A8, &qword_101495B98, (uint64_t (*)(void))sub_1000701DC, (uint64_t)&protocol witness table for _FlexFrameLayout);
    v2[1] = sub_10000BC84(&qword_1014960D0, (uint64_t (*)(uint64_t))&type metadata accessor for SafeAreaPaddingModifier, (uint64_t)&protocol conformance descriptor for SafeAreaPaddingModifier);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_1014960A0);
  }
  return result;
}

unint64_t sub_1000701DC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1014960B0;
  if (!qword_1014960B0)
  {
    v1 = sub_10000E5D4(&qword_101495B90);
    v2[0] = sub_100070248();
    v2[1] = sub_10006B3EC();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_1014960B0);
  }
  return result;
}

unint64_t sub_100070248()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];
  _QWORD v3[2];

  result = qword_1014960B8;
  if (!qword_1014960B8)
  {
    v1 = sub_10000E5D4(&qword_101495B88);
    v3[0] = sub_10000E5D4(&qword_101495B78);
    v3[1] = sub_100010D70(&qword_101495BD0, &qword_101495B78, (const char *)&protocol conformance descriptor for ScrollView<A>);
    v2[0] = swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of View.onScrollPhaseChange(_:)>>, 1);
    v2[1] = sub_100010D70(&qword_1014960C0, &qword_1014960C8, (const char *)&protocol conformance descriptor for _CoordinateSpaceModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_1014960B8);
  }
  return result;
}

uint64_t sub_100070314()
{
  return sub_100070348(&qword_1014960D8, &qword_1014960E0, (uint64_t (*)(void))sub_1000703AC, (const char *)&protocol conformance descriptor for <A> A?);
}

uint64_t sub_100070348(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), const char *a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = sub_10000E5D4(a2);
    v9 = a3();
    result = swift_getWitnessTable(a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000703AC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1014960E8;
  if (!qword_1014960E8)
  {
    v1 = sub_10000E5D4(&qword_101495CB0);
    v2[0] = sub_10006E0EC();
    v2[1] = sub_10000BC84((unint64_t *)&qword_10149CE30, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_1014960E8);
  }
  return result;
}

unint64_t sub_100070434()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1014960F0;
  if (!qword_1014960F0)
  {
    v1 = sub_10000E5D4(&qword_101495CC8);
    v2[0] = sub_100010D70(&qword_101495CD8, &qword_101495CD0, "=u7");
    v2[1] = sub_10000BC84((unint64_t *)&qword_10149CE30, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_1014960F0);
  }
  return result;
}

uint64_t sub_1000704D0()
{
  return sub_100010D70(&qword_1014960F8, &qword_101496100, (const char *)&protocol conformance descriptor for Button<A>);
}

uint64_t sub_1000704FC()
{
  return sub_100010D70(&qword_101496108, &qword_101496110, (const char *)&protocol conformance descriptor for ZStack<A>);
}

uint64_t sub_100070528(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  _QWORD v20[2];
  uint64_t WitnessTable;
  uint64_t v22;

  v2 = *a1;
  v1 = a1[1];
  v3 = sub_10000E5D4(&qword_101495DA0);
  v4 = sub_10000E5D4(&qword_101495DA8);
  v6 = _s12ContactBadgeVMa(255, v2, v1, v5);
  v7 = type metadata accessor for ModifiedContent(255, v6, &type metadata for _FrameLayout);
  v8 = type metadata accessor for ModifiedContent(255, v7, &type metadata for _OffsetEffect);
  v9 = type metadata accessor for _ConditionalContent(255, v4, v8);
  v10 = type metadata accessor for Optional(255, v9);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v3, v10, 0, 0);
  v12 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  swift_getWitnessTable((const char *)&protocol conformance descriptor for TupleView<A>, v12);
  v13 = type metadata accessor for ZStack(255, v12);
  v14 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v15 = type metadata accessor for ModifiedContent(255, v13, v14);
  v16 = type metadata accessor for ModifiedContent(255, v2, v14);
  v17 = type metadata accessor for _ConditionalContent(255, v15, v16);
  WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for ZStack<A>, v13);
  v22 = sub_10000BC84((unint64_t *)&qword_10149CE30, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v20[0] = v1;
  v20[1] = v22;
  v19[0] = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v15, &WitnessTable);
  v19[1] = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v16, v20);
  return swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v17, v19);
}

uint64_t sub_1000706E8()
{
  return sub_100070714(&qword_101496118, &qword_101496120, (uint64_t (*)(void))sub_10006E978);
}

uint64_t sub_100070714(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v6 = sub_10000E5D4(a2);
    v7[0] = a3();
    v7[1] = v7[0];
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v6, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100070778()
{
  return sub_100010D70(&qword_101496128, &qword_101496130, (const char *)&protocol conformance descriptor for Button<A>);
}

uint64_t sub_1000707A4()
{
  return sub_100010D70(&qword_101496138, &qword_101496140, (const char *)&protocol conformance descriptor for ZStack<A>);
}

unint64_t sub_1000707D4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];
  _QWORD v3[4];

  result = qword_101496148;
  if (!qword_101496148)
  {
    v1 = sub_10000E5D4((uint64_t *)&unk_101496150);
    v3[0] = sub_10000E5D4(&qword_101495E90);
    v3[1] = &_s17ActionButtonStyleVN;
    v3[2] = sub_100010D70(&qword_101495EC0, &qword_101495E90, (const char *)&protocol conformance descriptor for Button<A>);
    v3[3] = sub_10006ED00();
    v2[0] = swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    v2[1] = sub_10000BC84((unint64_t *)&qword_10149CE30, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101496148);
  }
  return result;
}

uint64_t sub_1000708B4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_101066450, 1);
}

uint64_t sub_1000708C4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_101066428, 1);
}

uint64_t sub_1000708D4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_101066400, 1);
}

uint64_t sub_1000708E4(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_1010663CC, 1);
}

uint64_t sub_100070918(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1010663A4, 1);
}

uint64_t sub_100070928(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_101066370, 1);
}

uint64_t sub_10007095C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10005729C(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_100070968@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10005DEE4(*(char **)(v1 + 32), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_100070974()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101496168;
  if (!qword_101496168)
  {
    v1 = sub_10000E5D4(&qword_101496160);
    v2[0] = sub_1000631E8();
    v2[1] = sub_100010D70(&qword_101496170, &qword_101496178, (const char *)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101496168);
  }
  return result;
}

uint64_t sub_100070A00(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = sub_10000E5D4(a2);
    v9[0] = sub_100010D70(a3, a4, "Ł7");
    v9[1] = &protocol witness table for _FrameLayout;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100070A80(_QWORD *a1)
{
  uint64_t v1;

  v1 = type metadata accessor for Button(255, *a1, a1[1]);
  return swift_getWitnessTable((const char *)&protocol conformance descriptor for Button<A>, v1);
}

uint64_t sub_100070AA8()
{
  return sub_100010D70(&qword_1014961F0, &qword_1014961F8, (const char *)&protocol conformance descriptor for ZStack<A>);
}

uint64_t sub_100070AD4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t TupleTypeMetadata2;
  uint64_t v7;
  uint64_t v8;

  v1 = *a1;
  v2 = a1[1];
  v3 = sub_10000E5D4(&qword_101496160);
  v5 = _s9ImageViewVMa(255, v1, v2, v4);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v3, v5, 0, 0);
  v7 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  swift_getWitnessTable((const char *)&protocol conformance descriptor for TupleView<A>, v7);
  v8 = type metadata accessor for ZStack(255, v7);
  return swift_getWitnessTable((const char *)&protocol conformance descriptor for ZStack<A>, v8);
}

unint64_t sub_100070B70()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101496200;
  if (!qword_101496200)
  {
    v1 = sub_10000E5D4(&qword_101496198);
    v2[0] = sub_10002067C(&qword_101496208, &qword_101496190, (uint64_t (*)(void))sub_100070C14, (uint64_t)&protocol witness table for _OpacityEffect);
    v2[1] = sub_100010D70((unint64_t *)&unk_101494E00, &qword_101494DD0, (const char *)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101496200);
  }
  return result;
}

unint64_t sub_100070C14()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101496210;
  if (!qword_101496210)
  {
    v1 = sub_10000E5D4(&qword_101496188);
    v2[0] = sub_100070C98();
    v2[1] = sub_100010D70((unint64_t *)&unk_101495E10, &qword_10149CED0, (const char *)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101496210);
  }
  return result;
}

unint64_t sub_100070C98()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101496218;
  if (!qword_101496218)
  {
    v1 = sub_10000E5D4(&qword_101496180);
    v2[0] = sub_10000BC84(&qword_101496220, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label, (uint64_t)&protocol conformance descriptor for ButtonStyleConfiguration.Label);
    v2[1] = sub_100010D70((unint64_t *)&unk_101494DC0, &qword_10149D530, (const char *)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101496218);
  }
  return result;
}

uint64_t sub_100070D34()
{
  return sub_100010D70(&qword_101496228, &qword_101496230, (const char *)&protocol conformance descriptor for HStack<A>);
}

unint64_t sub_100070D64()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101496238;
  if (!qword_101496238)
  {
    v1 = sub_10000E5D4((uint64_t *)&unk_101496240);
    v2[0] = sub_10006326C();
    v2[1] = sub_100010D70((unint64_t *)&unk_101495E10, &qword_10149CED0, (const char *)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101496238);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PlaceSummaryStringFormat(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;

  v4 = *(void **)a2;
  if (*(_QWORD *)a2 >= 3uLL)
    v5 = v4;
  *(_QWORD *)a1 = v4;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

void destroy for PlaceSummaryStringFormat(void **a1)
{
  void *v1;

  v1 = *a1;
  if ((unint64_t)v1 >= 3)

}

uint64_t assignWithCopy for PlaceSummaryStringFormat(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  id v7;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  if (*(_QWORD *)a1 >= 3uLL)
  {
    if ((unint64_t)v5 >= 3)
    {
      *(_QWORD *)a1 = v5;
      v7 = v5;

      goto LABEL_8;
    }

    v5 = *(void **)a2;
    goto LABEL_6;
  }
  if ((unint64_t)v5 < 3)
  {
LABEL_6:
    *(_QWORD *)a1 = v5;
    goto LABEL_8;
  }
  *(_QWORD *)a1 = v5;
  v6 = v5;
LABEL_8:
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for PlaceSummaryStringFormat(uint64_t a1, uint64_t a2)
{
  void *v4;
  unint64_t v5;

  v4 = *(void **)a1;
  v5 = *(_QWORD *)a2;
  if (*(_QWORD *)a1 >= 3uLL)
  {
    if (v5 >= 3)
    {
      *(_QWORD *)a1 = v5;

      goto LABEL_6;
    }

  }
  *(_QWORD *)a1 = v5;
LABEL_6:
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlaceSummaryStringFormat(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFD && *((_BYTE *)a1 + 24))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 3;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PlaceSummaryStringFormat(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFC)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlaceSummaryStringFormat()
{
  return &type metadata for PlaceSummaryStringFormat;
}

_QWORD *initializeBufferWithCopyOfBuffer for PlaceSummaryStringFormatType(_QWORD *a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF)
    v4 = v3;
  *a1 = v3;
  return a1;
}

void destroy for PlaceSummaryStringFormatType(void **a1)
{
  void *v1;

  v1 = *a1;
  if ((unint64_t)v1 >= 0xFFFFFFFF)

}

void **assignWithCopy for PlaceSummaryStringFormatType(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *a1;
  v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF)
    {
      *a1 = v4;
      v6 = v4;
      return a1;
    }
LABEL_7:
    *a1 = v4;
    return a1;
  }
  if ((unint64_t)v4 < 0xFFFFFFFF)
  {

    v4 = *a2;
    goto LABEL_7;
  }
  *a1 = v4;
  v5 = v4;

  return a1;
}

_QWORD *initializeWithTake for PlaceSummaryStringFormatType(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

void **assignWithTake for PlaceSummaryStringFormatType(void **a1, unint64_t *a2)
{
  void *v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF)
    goto LABEL_6;
  if (v4 < 0xFFFFFFFF)
  {

LABEL_6:
    *a1 = (void *)v4;
    return a1;
  }
  *a1 = (void *)v4;

  return a1;
}

uint64_t getEnumTagSinglePayload for PlaceSummaryStringFormatType(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFD && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 2;
  if (v4 >= 4)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PlaceSummaryStringFormatType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 2;
  }
  return result;
}

uint64_t sub_100071208(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_100071220(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for PlaceSummaryStringFormatType()
{
  return &type metadata for PlaceSummaryStringFormatType;
}

uint64_t sub_100071274(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t (*v9)(char *);
  uint64_t v11;

  v4 = type metadata accessor for IndexPath(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(uint64_t (**)(char *))(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(a2);
  swift_retain(v8);
  LOBYTE(a2) = v9(v7);
  swift_release(v8);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return a2 & 1;
}

uint64_t sub_1000713A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *);
  uint64_t v11;

  v4 = type metadata accessor for IndexPath(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void (**)(char *))(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(a2);
  swift_retain(v8);
  v9(v7);
  swift_release(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

id sub_1000714D4(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD v10[5];
  uint64_t v11;

  v5 = (_QWORD *)(a1 + *a3);
  if (!*v5)
    return 0;
  v6 = v5[1];
  v10[4] = *v5;
  v11 = v6;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = a4;
  v10[3] = a5;
  v7 = _Block_copy(v10);
  v8 = v11;
  swift_retain(v6);
  swift_release(v8);
  return v7;
}

unint64_t sub_1000715C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, __n128);
  uint64_t v11;
  __n128 v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  id v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, __n128);
  uint64_t v26;
  __n128 v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  id v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v41;
  void **aBlock;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, void *);
  void *v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  unint64_t v48;

  v4 = v3;
  v41 = type metadata accessor for IndexPath(0);
  v8 = *(_QWORD *)(v41 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v41);
  v48 = (unint64_t)_swiftEmptyArrayStorage;
  v10 = *(uint64_t (**)(uint64_t, __n128))(v3
                                                  + OBJC_IVAR____TtC4Maps34SearchHomeUserGuidesLayoutProvider_isDeletable);
  if (v10)
  {
    v11 = *(_QWORD *)(v3 + OBJC_IVAR____TtC4Maps34SearchHomeUserGuidesLayoutProvider_isDeletable + 8);
    v12 = swift_retain(v11);
    v13 = v10(a1, v12);
    sub_10000BF74((uint64_t)v10, v11);
    if ((v13 & 1) != 0)
    {
      v14 = v41;
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v41);
      v15 = *(unsigned __int8 *)(v8 + 80);
      v16 = (v15 + 32) & ~v15;
      v17 = swift_allocObject(&unk_10119E9B8, v16 + v9, v15 | 7);
      *(_QWORD *)(v17 + 16) = a2;
      *(_QWORD *)(v17 + 24) = a3;
      (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v17 + v16, (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v14);
      v46 = sub_1000725CC;
      v47 = v17;
      aBlock = _NSConcreteStackBlock;
      v43 = 1107296256;
      v44 = sub_1001FABC8;
      v45 = &unk_10119E9D0;
      v18 = _Block_copy(&aBlock);
      v19 = v47;
      sub_10000C128(a2, a3);
      swift_release(v19);
      v20 = sub_100A3CEB8(v18);
      _Block_release(v18);
      v21 = v20;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v21);
      v23 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v22 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v23 >= v22 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
      v24 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v21);
      specialized Array._endMutation()(v24);

    }
  }
  v25 = *(uint64_t (**)(uint64_t, __n128))(v4
                                                  + OBJC_IVAR____TtC4Maps34SearchHomeUserGuidesLayoutProvider_isShareable);
  if (v25)
  {
    v26 = *(_QWORD *)(v4 + OBJC_IVAR____TtC4Maps34SearchHomeUserGuidesLayoutProvider_isShareable + 8);
    v27 = swift_retain(v26);
    v28 = v25(a1, v27);
    sub_10000BF74((uint64_t)v25, v26);
    if ((v28 & 1) != 0)
    {
      v29 = swift_allocObject(&unk_10119E918, 24, 7);
      swift_unknownObjectWeakInit(v29 + 16, v4);
      v30 = v41;
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v41);
      v31 = *(unsigned __int8 *)(v8 + 80);
      v32 = (v31 + 24) & ~v31;
      v33 = swift_allocObject(&unk_10119E968, v32 + v9, v31 | 7);
      *(_QWORD *)(v33 + 16) = v29;
      (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v33 + v32, (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v30);
      v46 = sub_1000724E8;
      v47 = v33;
      aBlock = _NSConcreteStackBlock;
      v43 = 1107296256;
      v44 = sub_1001FABC8;
      v45 = &unk_10119E980;
      v34 = _Block_copy(&aBlock);
      swift_release(v47);
      v35 = sub_100A3D0BC(v34);
      _Block_release(v34);
      v36 = v35;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v36);
      v38 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v37 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v38 >= v37 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1);
      v39 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v38, v36);
      specialized Array._endMutation()(v39);

    }
  }
  return v48;
}

void sub_100071924(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  char v4;

  if (a3)
  {
    if (IndexPath.row.getter() < 0)
    {
      v4 = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, v4, 3451, 0);
      __break(1u);
    }
    else
    {
      a3();
    }
  }
}

void sub_1000719B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t Strong;
  void *v7;
  void (*v8)(uint64_t, __n128);
  uint64_t v9;
  __n128 v10;
  _BYTE v11[24];

  v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v11, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    v7 = (void *)Strong;
    v8 = *(void (**)(uint64_t, __n128))(Strong
                                                + OBJC_IVAR____TtC4Maps34SearchHomeUserGuidesLayoutProvider_shareHandler);
    if (v8)
    {
      v9 = *(_QWORD *)(Strong + OBJC_IVAR____TtC4Maps34SearchHomeUserGuidesLayoutProvider_shareHandler + 8);
      v10 = swift_retain(v9);
      v8(a4, v10);
      sub_10000BF74((uint64_t)v8, v9);
    }

  }
}

id sub_100071AB0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SearchHomeUserGuidesLayoutProvider();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SearchHomeUserGuidesLayoutProvider()
{
  return objc_opt_self(_TtC4Maps34SearchHomeUserGuidesLayoutProvider);
}

id sub_100071C58(uint64_t a1, void *a2, uint64_t a3)
{
  void *v3;
  id v6;
  Class isa;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  char *v15;
  _BYTE v16[32];

  v6 = objc_msgSend(v3, "cellReuseIdentifier");
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v8 = objc_msgSend(a2, "dequeueReusableCellWithReuseIdentifier:forIndexPath:", v6, isa);

  v9 = objc_opt_self(CollectionHandlerCollectionViewCell);
  v10 = swift_dynamicCastObjCClass(v8, v9);
  if (v10)
  {
    v11 = (void *)v10;
    sub_100011E20(a3, (uint64_t)v16);
    v12 = type metadata accessor for SearchHomeUserGuidesCellViewModel();
    if ((swift_dynamicCast(&v15, v16, (char *)&type metadata for Any + 8, v12, 6) & 1) != 0)
    {
      v13 = v15;
      objc_msgSend(v11, "setCollectionInfo:", *(_QWORD *)&v15[OBJC_IVAR____TtC4Maps33SearchHomeUserGuidesCellViewModel_collections]);

    }
    return v11;
  }
  else
  {

    return objc_msgSend(objc_allocWithZone((Class)UICollectionViewCell), "init");
  }
}

id sub_100071E90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t Strong;
  void *v9;
  _QWORD *v10;
  Class isa;
  id v12;
  _BYTE v14[24];

  v7 = a2 + 16;
  swift_beginAccess(a2 + 16, v14, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v7);
  if (Strong)
  {
    v9 = (void *)Strong;
    v10 = (_QWORD *)sub_1000715C8(a1, a3, a4);

  }
  else
  {
    v10 = _swiftEmptyArrayStorage;
  }
  sub_10000E4BC(0, (unint64_t *)&unk_1014A0740, UIContextualAction_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v10);
  v12 = objc_msgSend((id)objc_opt_self(UISwipeActionsConfiguration), "configurationWithActions:", isa);

  return v12;
}

void *sub_100072040(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  NSString v25;
  id v26;
  id v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  Class isa;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v39 = a3;
  v42 = a1;
  v6 = type metadata accessor for UICollectionLayoutListConfiguration.HeaderMode(0);
  v40 = *(_QWORD *)(v6 - 8);
  v41 = v6;
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance(0, v7);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UICollectionLayoutListConfiguration(0, v12);
  v43 = *(_QWORD *)(v15 - 8);
  v44 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (void *)objc_opt_self(NSCollectionLayoutDimension);
  v19 = objc_msgSend(v18, "fractionalWidthDimension:", 1.0);
  v20 = objc_msgSend(v18, "estimatedDimension:", a4);
  v21 = objc_msgSend((id)objc_opt_self(NSCollectionLayoutSize), "sizeWithWidthDimension:heightDimension:", v19, v20);

  static String._unconditionallyBridgeFromObjectiveC(_:)(UICollectionElementKindSectionHeader);
  v23 = v22;
  v24 = v21;
  v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v23);
  v26 = objc_msgSend((id)objc_opt_self(NSCollectionLayoutBoundarySupplementaryItem), "boundarySupplementaryItemWithLayoutSize:elementKind:alignment:", v24, v25, 1);

  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v14, enum case for UICollectionLayoutListConfiguration.Appearance.insetGrouped(_:), v10);
  UICollectionLayoutListConfiguration.init(appearance:)(v14);
  UICollectionLayoutListConfiguration.headerTopPadding.setter(0, 0);
  v27 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
  UICollectionLayoutListConfiguration.backgroundColor.setter(v27);
  v28 = swift_allocObject(&unk_10119E918, 24, 7);
  swift_unknownObjectWeakInit(v28 + 16, v38);
  v29 = (_QWORD *)swift_allocObject(&unk_10119E940, 40, 7);
  v29[2] = v28;
  v29[3] = a2;
  v30 = v39;
  v29[4] = v39;
  sub_10000C128(a2, v30);
  UICollectionLayoutListConfiguration.trailingSwipeActionsConfigurationProvider.setter(sub_100072468, v29);
  (*(void (**)(char *, _QWORD, uint64_t))(v40 + 104))(v9, enum case for UICollectionLayoutListConfiguration.HeaderMode.supplementary(_:), v41);
  UICollectionLayoutListConfiguration.headerMode.setter(v9);
  sub_10000E4BC(0, (unint64_t *)&unk_101496350, NSCollectionLayoutSection_ptr);
  v31 = (void *)static NSCollectionLayoutSection.list(using:layoutEnvironment:)(v17, v42);
  v32 = sub_100008B04((uint64_t *)&unk_101493B10);
  v33 = swift_allocObject(v32, 40, 7);
  *(_OWORD *)(v33 + 16) = xmmword_100E23F50;
  *(_QWORD *)(v33 + 32) = v26;
  v45 = v33;
  specialized Array._endMutation()(v33);
  v34 = v45;
  sub_10000E4BC(0, (unint64_t *)&unk_101496360, NSCollectionLayoutBoundarySupplementaryItem_ptr);
  v35 = v26;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v34);
  objc_msgSend(v31, "setBoundarySupplementaryItems:", isa);

  (*(void (**)(char *, uint64_t))(v43 + 8))(v17, v44);
  return v31;
}

uint64_t sub_1000723EC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100072410()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100072434()
{
  _QWORD *v0;

  swift_release(v0[2]);
  if (v0[3])
    swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

id sub_100072468(uint64_t a1)
{
  uint64_t *v1;

  return sub_100071E90(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100072474()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for IndexPath(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_1000724E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for IndexPath(0) - 8) + 80);
  sub_1000719B4(a1, a2, *(_QWORD *)(v2 + 16), v2 + ((v5 + 24) & ~v5));
}

uint64_t sub_100072538(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100072548(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100072550()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = type metadata accessor for IndexPath(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));
  v5 = v3 | 7;
  v6 = (v3 + 32) & ~v3;
  v7 = v6 + v4;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v6, v1);
  return swift_deallocObject(v0, v7, v5);
}

void sub_1000725CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  type metadata accessor for IndexPath(0);
  sub_100071924(a1, a2, *(void (**)(void))(v2 + 16));
}

void sub_100072620()
{
  uint64_t v0;
  uint64_t v1;
  Class isa;

  v1 = *(_QWORD *)(v0 + 16);
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(v1 + 16))(v1, isa);

}

uint64_t sub_100072664()
{
  uint64_t v0;
  uint64_t v1;
  Class isa;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v3 = (*(uint64_t (**)(uint64_t, Class))(v1 + 16))(v1, isa);

  return v3;
}

unint64_t sub_1000726D8()
{
  unint64_t result;

  result = qword_101496390;
  if (!qword_101496390)
  {
    result = swift_getWitnessTable(byte_100E27380, &type metadata for AvoidTollsEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_101496390);
  }
  return result;
}

uint64_t sub_10007271C()
{
  return sub_100010D70(&qword_101496398, &qword_1014963A0, (const char *)&protocol conformance descriptor for _IntentUpdatableEntityProperty<A, B, C>);
}

uint64_t sub_100072748()
{
  uint64_t v0;
  __n128 v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[2];

  v0 = sub_100008B04(&qword_101494370);
  v1 = __chkstk_darwin(v0);
  v3 = (char *)v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0, v1);
  v4 = *(_QWORD *)(v23[0] - 8);
  __chkstk_darwin(v23[0]);
  v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for String.LocalizationValue(0, v8);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for LocalizedStringResource(0, v12);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for TypeDisplayRepresentation(0, v17);
  sub_10000E930(v20, qword_1014D46B0);
  sub_10000E918(v20, (uint64_t)qword_1014D46B0);
  v21 = String.LocalizationValue.init(stringLiteral:)(0x6F542064696F7641, 0xEB00000000736C6CLL);
  static Locale.current.getter(v21);
  (*(void (**)(char *, _QWORD, _QWORD))(v4 + 104))(v6, enum case for LocalizedStringResource.BundleDescription.main(_:), v23[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v10, v6, "A setting to avoid tolls when driving", 37, 2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v3, 1, 1, v15);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v19, v3);
}

uint64_t sub_100072960(__n128 a1)
{
  uint64_t v1;

  v1 = type metadata accessor for LocalizedStringResource(0, a1);
  sub_10000E930(v1, qword_1014D46C8);
  sub_10000E918(v1, (uint64_t)qword_1014D46C8);
  return LocalizedStringResource.init(stringLiteral:)(0xD000000000000012, 0x8000000100E448D0);
}

uint64_t sub_1000729C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_100008B04(&qword_1014964F0);
  sub_10000E930(v0, qword_1014D46E0);
  v1 = sub_10000E918(v0, (uint64_t)qword_1014D46E0);
  IntentDescription.init(stringLiteral:)(0xD00000000000002BLL, 0x8000000100E448A0);
  v2 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 0, 1, v2);
}

uint64_t sub_100072A48()
{
  uint64_t result;

  result = swift_getKeyPath(&unk_100E27848);
  qword_1014D46F8 = result;
  return result;
}

uint64_t sub_100072A70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  return swift_task_switch(sub_100072A8C, 0, 0);
}

uint64_t sub_100072A8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v0 + 24) = v1;
  *(_QWORD *)(v0 + 72) = v1;
  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 146));
  *(_BYTE *)(v0 + 145) = *(_BYTE *)(v0 + 146);
  if (qword_101490D00 != -1)
    swift_once(&qword_101490D00, sub_100072A48);
  v2 = qword_1014D46F8;
  *(_QWORD *)(v0 + 80) = qword_1014D46F8;
  v3 = async function pointer to AppEntity._setValue<A, B, C>(_:for:)[1];
  swift_retain(v2);
  v4 = (_QWORD *)swift_task_alloc(v3);
  *(_QWORD *)(v0 + 88) = v4;
  v5 = sub_100010D70(&qword_1014964B0, &qword_1014964B8, (const char *)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  *(_QWORD *)(v0 + 96) = v5;
  *v4 = v0;
  v4[1] = sub_100072B8C;
  return AppEntity._setValue<A, B, C>(_:for:)(v0 + 145, v2, &type metadata for Bool, v5);
}

uint64_t sub_100072B8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  swift_release(v4);
  swift_release(v3);
  if (v0)
    v5 = sub_100072D78;
  else
    v5 = sub_100072C0C;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100072C0C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  IntentParameter.wrappedValue.getter(v0 + 5);
  v1 = v0[5];
  v0[4] = v1;
  v2 = qword_1014D46F8;
  v0[14] = v1;
  v0[15] = v2;
  v3 = async function pointer to AppEntity._value<A, B>(for:)[1];
  swift_retain(v2);
  v4 = (_QWORD *)swift_task_alloc(v3);
  v0[16] = v4;
  *v4 = v0;
  v4[1] = sub_100072CA0;
  return AppEntity._value<A, B>(for:)(v0 + 18, v2, v0[12]);
}

uint64_t sub_100072CA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc(v2);
  swift_release(v4);
  swift_release(v3);
  if (v0)
    v5 = sub_100072D84;
  else
    v5 = sub_100072D20;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100072D20()
{
  uint64_t v0;
  unint64_t v1;

  *(_BYTE *)(v0 + 147) = *(_BYTE *)(v0 + 144);
  v1 = sub_100074254();
  static IntentResult.result<A>(value:)(v0 + 147, &type metadata for Bool, v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100072D78()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100072D84()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *sub_100072D90@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;

  result = IntentParameter.wrappedValue.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_100072DC8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  v1 = *a1;
  v3 = v1;
  swift_retain(v1);
  IntentParameter.wrappedValue.setter(&v3);
  return swift_release(v1);
}

uint64_t (*sub_100072E0C(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return sub_100072E54;
}

_QWORD *sub_100072E58@<X0>(_BYTE *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;

  result = IntentParameter.wrappedValue.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_100072E90(char *a1)
{
  char v2;

  v2 = *a1;
  return IntentParameter.wrappedValue.setter(&v2);
}

uint64_t (*sub_100072EC4(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return sub_100072E54;
}

void sub_100072F0C(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 32))(*a1, 0);
  free(v1);
}

double sub_100072F3C()
{
  double result;

  if (qword_101490D00 != -1)
    swift_once(&qword_101490D00, sub_100072A48);
  *(_QWORD *)&result = swift_retain(qword_1014D46F8).n128_u64[0];
  return result;
}

unint64_t sub_100072F80()
{
  unint64_t result;

  result = qword_1014963A8;
  if (!qword_1014963A8)
  {
    result = swift_getWitnessTable("qx7", &type metadata for AvoidTollsEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_1014963A8);
  }
  return result;
}

unint64_t sub_100072FC8()
{
  unint64_t result;

  result = qword_1014963B0;
  if (!qword_1014963B0)
  {
    result = swift_getWitnessTable("Yx7", &type metadata for AvoidTollsEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_1014963B0);
  }
  return result;
}

uint64_t sub_10007300C(uint64_t a1)
{
  return *(_QWORD *)(swift_getOpaqueTypeConformance2(a1, &unk_101066590, 1) + 8);
}

uint64_t sub_100073030(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_1000726D8();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t sub_100073070@<X0>(uint64_t a1@<X8>)
{
  return sub_100073694(&qword_101490CF0, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1014D46C8, (uint64_t)sub_100072960, a1);
}

uint64_t sub_1000730A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_101490CF8 != -1)
    swift_once(&qword_101490CF8, sub_1000729C0);
  v2 = sub_100008B04(&qword_1014964F0);
  v3 = sub_10000E918(v2, (uint64_t)qword_1014D46E0);
  return sub_1000742A4(v3, a1);
}

uint64_t sub_100073104(uint64_t a1)
{
  _OWORD *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = swift_task_alloc(dword_1014964E4);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_10000DD08;
  *(_OWORD *)(v4 + 56) = *v1;
  *(_QWORD *)(v4 + 48) = a1;
  return swift_task_switch(sub_100072A8C, 0, 0);
}

uint64_t sub_10007316C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_100073F30();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_100073190()
{
  return 0xD000000000000021;
}

unint64_t sub_1000731B0()
{
  unint64_t result;

  result = qword_1014963C0;
  if (!qword_1014963C0)
  {
    result = swift_getWitnessTable("-x7", &type metadata for AvoidTollsEntity);
    atomic_store(result, (unint64_t *)&qword_1014963C0);
  }
  return result;
}

unint64_t sub_1000731F8()
{
  unint64_t result;

  result = qword_1014963C8;
  if (!qword_1014963C8)
  {
    result = swift_getWitnessTable("Ew7", &type metadata for AvoidTollsQuery);
    atomic_store(result, (unint64_t *)&qword_1014963C8);
  }
  return result;
}

unint64_t sub_100073240()
{
  unint64_t result;

  result = qword_1014963D0;
  if (!qword_1014963D0)
  {
    result = swift_getWitnessTable(byte_100E274DC, &type metadata for AvoidTollsEntity);
    atomic_store(result, (unint64_t *)&qword_1014963D0);
  }
  return result;
}

unint64_t sub_100073288()
{
  unint64_t result;

  result = qword_1014963D8;
  if (!qword_1014963D8)
  {
    result = swift_getWitnessTable(byte_100E27514, &type metadata for AvoidTollsEntity);
    atomic_store(result, (unint64_t *)&qword_1014963D8);
  }
  return result;
}

unint64_t sub_1000732D0()
{
  unint64_t result;

  result = qword_1014963E0;
  if (!qword_1014963E0)
  {
    result = swift_getWitnessTable(byte_100E27544, &type metadata for AvoidTollsEntity);
    atomic_store(result, (unint64_t *)&qword_1014963E0);
  }
  return result;
}

unint64_t sub_100073318()
{
  unint64_t result;

  result = qword_1014963E8;
  if (!qword_1014963E8)
  {
    result = swift_getWitnessTable(byte_100E276F4, &type metadata for AvoidTollsQuery);
    atomic_store(result, (unint64_t *)&qword_1014963E8);
  }
  return result;
}

void *sub_10007335C()
{
  return &protocol witness table for String;
}

uint64_t sub_100073368(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100073380, 0, 0);
}

uint64_t sub_100073380()
{
  uint64_t v0;
  _BYTE *v1;
  id v2;
  id v3;

  v1 = *(_BYTE **)(v0 + 16);
  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v3 = objc_msgSend(objc_allocWithZone((Class)DrivePreferences), "initWithDefaults:", v2);

  LOBYTE(v2) = objc_msgSend(v3, "avoidTolls");
  *v1 = (_BYTE)v2;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007341C(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 16) = *a2;
  return swift_task_switch(sub_100073438, 0, 0);
}

uint64_t sub_100073438()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  int BOOL;

  v1 = *(unsigned __int8 *)(v0 + 16);
  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v3 = objc_msgSend(objc_allocWithZone((Class)DrivePreferences), "initWithDefaults:", v2);

  objc_msgSend(v3, "setAvoidTolls:", v1);
  objc_msgSend(v3, "synchronize");
  BOOL = GEOConfigGetBOOL(MapsConfig_PreferencesUniqueEntityDidUpdate, off_1014B5518);
  GEOConfigSetBOOL(MapsConfig_PreferencesUniqueEntityDidUpdate, off_1014B5518, BOOL ^ 1u);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_10007350C()
{
  unint64_t result;

  result = qword_1014963F0;
  if (!qword_1014963F0)
  {
    result = swift_getWitnessTable(byte_100E2757C, &type metadata for AvoidTollsEntity);
    atomic_store(result, (unint64_t *)&qword_1014963F0);
  }
  return result;
}

unint64_t sub_100073554()
{
  unint64_t result;

  result = qword_1014963F8;
  if (!qword_1014963F8)
  {
    result = swift_getWitnessTable(byte_100E275A4, &type metadata for AvoidTollsEntity);
    atomic_store(result, (unint64_t *)&qword_1014963F8);
  }
  return result;
}

unint64_t sub_10007359C()
{
  unint64_t result;

  result = qword_101496400;
  if (!qword_101496400)
  {
    result = swift_getWitnessTable(byte_100E275CC, &type metadata for AvoidTollsEntity);
    atomic_store(result, (unint64_t *)&qword_101496400);
  }
  return result;
}

unint64_t sub_1000735E4()
{
  unint64_t result;

  result = qword_101496408;
  if (!qword_101496408)
  {
    result = swift_getWitnessTable("uw7", &type metadata for AvoidTollsEntity);
    atomic_store(result, (unint64_t *)&qword_101496408);
  }
  return result;
}

void *sub_100073628()
{
  return &protocol witness table for String;
}

uint64_t sub_100073634@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = sub_10007386C();
  result = UniqueAppEntity<>.id.getter(a1, v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_100073670@<X0>(uint64_t a1@<X8>)
{
  return sub_100073694(&qword_101490CE8, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_1014D46B0, (uint64_t)sub_100072748, a1);
}

uint64_t sub_100073694@<X0>(_QWORD *a1@<X2>, uint64_t (*a2)(_QWORD)@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  if (*a1 != -1)
    swift_once(a1, a4);
  v8 = a2(0);
  v9 = sub_10000E918(v8, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a5, v9, v8);
}

uint64_t sub_100073704()
{
  return sub_100010D70(&qword_101496410, &qword_101496418, (const char *)&protocol conformance descriptor for EmptyResolverSpecification<A>);
}

uint64_t sub_100073730(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000731B0();
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_10007376C()
{
  unint64_t result;

  result = qword_101496420;
  if (!qword_101496420)
  {
    result = swift_getWitnessTable("]w7", &type metadata for AvoidTollsEntity);
    atomic_store(result, (unint64_t *)&qword_101496420);
  }
  return result;
}

uint64_t sub_1000737B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10007386C();
  return UniqueAppEntity.displayRepresentation.getter(a1, v2);
}

uint64_t sub_1000737E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000735E4();
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_100073824()
{
  unint64_t result;

  result = qword_101496428;
  if (!qword_101496428)
  {
    result = swift_getWitnessTable("-w7", &type metadata for AvoidTollsQuery);
    atomic_store(result, (unint64_t *)&qword_101496428);
  }
  return result;
}

unint64_t sub_10007386C()
{
  unint64_t result;

  result = qword_101496430[0];
  if (!qword_101496430[0])
  {
    result = swift_getWitnessTable("Ex7", &type metadata for AvoidTollsEntity);
    atomic_store(result, qword_101496430);
  }
  return result;
}

uint64_t sub_1000738B0(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 16) = a1;
  v3 = type metadata accessor for LocalizedStringResource(0, a2);
  *(_QWORD *)(v2 + 24) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100073908, 0, 0);
}

uint64_t sub_100073908()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  sub_100008B04(&qword_1014963A0);
  LocalizedStringResource.init(stringLiteral:)(0x6F542064696F7641, 0xEB00000000736C6CLL);
  v3 = sub_100010D70(&qword_1014964B0, &qword_1014964B8, (const char *)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  *v2 = _IntentUpdatableEntityProperty<>.init(title:get:set:intent:)(v1, &unk_1014964A0, 0, &unk_1014964A8, 0, &type metadata for AvoidTollsEntity.UpdateIntent_value, v3);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000739CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to UniqueAppEntityQuery.allEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_1000731F8();
  *v4 = v2;
  v4[1] = sub_100073A34;
  return UniqueAppEntityQuery.allEntities()(a2, v5);
}

uint64_t sub_100073A34(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 24);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (!v1)
    **(_QWORD **)(v4 + 16) = a1;
  return (*(uint64_t (**)(void))(v6 + 8))();
}

unint64_t sub_100073A98()
{
  unint64_t result;

  result = qword_101496448;
  if (!qword_101496448)
  {
    result = swift_getWitnessTable(byte_100E2774C, &type metadata for AvoidTollsQuery);
    atomic_store(result, (unint64_t *)&qword_101496448);
  }
  return result;
}

unint64_t sub_100073AE0()
{
  unint64_t result;

  result = qword_101496450[0];
  if (!qword_101496450[0])
  {
    result = swift_getWitnessTable(byte_100E277AC, &type metadata for AvoidTollsQuery);
    atomic_store(result, qword_101496450);
  }
  return result;
}

uint64_t sub_100073B28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to UniqueAppEntityQuery.entities(for:)[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_1000731F8();
  *v5 = v2;
  v5[1] = sub_100073B94;
  return UniqueAppEntityQuery.entities(for:)(a1, a2, v6);
}

uint64_t sub_100073B94(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(*v2 + 16);
  v5 = *v2;
  v6 = swift_task_dealloc(v4);
  if (!v1)
    v6 = a1;
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_100073BE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to UniqueAppEntityQuery.suggestedEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_1000731F8();
  *v4 = v2;
  v4[1] = sub_1000742EC;
  return UniqueAppEntityQuery.suggestedEntities()(a2, v5);
}

unint64_t sub_100073C54()
{
  unint64_t result;

  result = qword_101496468;
  if (!qword_101496468)
  {
    result = swift_getWitnessTable(byte_100E277D4, &type metadata for AvoidTollsQuery);
    atomic_store(result, (unint64_t *)&qword_101496468);
  }
  return result;
}

unint64_t sub_100073C9C()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_101496470;
  if (!qword_101496470)
  {
    v1 = sub_10000E5D4(qword_101496478);
    v2 = sub_10007359C();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_101496470);
  }
  return result;
}

uint64_t sub_100073D00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100073318();
  *v5 = v2;
  v5[1] = sub_10000C0E0;
  return EntityQuery.results()(a1, a2, v6);
}

uint64_t sub_100073D6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to DynamicOptionsProvider.defaultResult()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10000C0E0;
  return DynamicOptionsProvider.defaultResult()(a1, a2, a3);
}

ValueMetadata *type metadata accessor for AvoidTollsQuery()
{
  return &type metadata for AvoidTollsQuery;
}

uint64_t destroy for AvoidTollsEntity.UpdateIntent_value(_QWORD *a1)
{
  swift_release(*a1);
  return swift_release(a1[1]);
}

uint64_t *_s4Maps16AvoidTollsEntityV18UpdateIntent_valueVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t *assignWithCopy for AvoidTollsEntity.UpdateIntent_value(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  return a1;
}

_QWORD *assignWithTake for AvoidTollsEntity.UpdateIntent_value(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  return a1;
}

ValueMetadata *type metadata accessor for AvoidTollsEntity.UpdateIntent_value()
{
  return &type metadata for AvoidTollsEntity.UpdateIntent_value;
}

ValueMetadata *type metadata accessor for AvoidTollsEntity()
{
  return &type metadata for AvoidTollsEntity;
}

uint64_t sub_100073F04()
{
  return sub_100010D70(&qword_101496490, &qword_101496498, (const char *)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

uint64_t sub_100073F30()
{
  uint64_t v0;
  __n128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  char *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v27;
  void (*v28)(char *);
  unsigned int v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  char *v31;
  char *v32;
  char v33;
  uint64_t v34;

  v0 = sub_100008B04(&qword_1014964C0);
  v1 = __chkstk_darwin(v0);
  v32 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for InputConnectionBehavior(0, v1);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v31 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100008B04(&qword_1014964C8);
  __chkstk_darwin(v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v27 - v10;
  v12 = sub_100008B04(&qword_101494370);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for LocalizedStringResource(0, v13);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100008B04(&qword_1014964D0);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000015, 0x8000000100E44850);
  v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
  v30(v15, 1, 1, v16);
  v34 = 0;
  v20 = type metadata accessor for IntentDialog(0);
  v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56);
  v21(v11, 1, 1, v20);
  v21(v8, 1, 1, v20);
  v29 = enum case for InputConnectionBehavior.default(_:);
  v28 = *(void (**)(char *))(v4 + 104);
  v22 = v31;
  v28(v31);
  v23 = sub_1000731B0();
  v27 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v19, v15, &v34, v11, v8, v22, v23);
  sub_100008B04(&qword_1014964D8);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000024, 0x8000000100E44870);
  v30(v15, 1, 1, v16);
  v33 = 2;
  v24 = type metadata accessor for Bool.IntentDisplayName(0);
  v25 = v32;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v32, 1, 1, v24);
  v21(v11, 1, 1, v20);
  ((void (*)(char *, _QWORD, uint64_t))v28)(v22, v29, v3);
  IntentParameter<>.init(title:description:default:displayName:requestValueDialog:inputConnectionBehavior:)(v19, v15, &v33, v25, v11, v22);
  return v27;
}

unint64_t sub_100074254()
{
  unint64_t result;

  result = qword_1014964E8;
  if (!qword_1014964E8)
  {
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for Bool, &type metadata for Bool);
    atomic_store(result, (unint64_t *)&qword_1014964E8);
  }
  return result;
}

uint64_t sub_100074298@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_1000742A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008B04(&qword_1014964F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id sub_100074698()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TransitSchedulesContext();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TransitSchedulesContext()
{
  return objc_opt_self(_TtC4Maps23TransitSchedulesContext);
}

id sub_100074720(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  void *v4;
  void *v5;
  uint64_t v10;
  uint64_t v11;
  Class isa;
  uint64_t v13;
  uint64_t v14;
  Class v15;
  id v16;

  v5 = v4;
  v10 = type metadata accessor for TimeZone(0);
  v11 = *(_QWORD *)(v10 - 8);
  isa = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a2, 1, v10) != 1)
  {
    isa = TimeZone._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a2, v10);
  }
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(a3, 1, v13) != 1)
  {
    v15 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a3, v13);
  }
  v16 = objc_msgSend(v5, "initWithDepartureSequence:timeZone:scheduleWindowStartDate:includeAllDirections:", a1, isa, v15, a4 & 1);

  swift_unknownObjectRelease(a1);
  return v16;
}

id sub_100074830(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char *v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  objc_class *v17;
  id v18;
  objc_super v20;

  v9 = sub_100008B04((uint64_t *)&unk_10149E140);
  __chkstk_darwin(v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100008B04((uint64_t *)&unk_10149E730);
  __chkstk_darwin(v12);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectWeakInit(&v4[OBJC_IVAR____TtC4Maps23TransitSchedulesContext_chromeViewController], 0);
  sub_10000C1FC(a2, (uint64_t)v14, (uint64_t *)&unk_10149E730);
  sub_10000C1FC(a3, (uint64_t)v11, (uint64_t *)&unk_10149E140);
  objc_allocWithZone((Class)TransitSchedulesViewController);
  v15 = v4;
  v16 = swift_unknownObjectRetain(a1);
  *(_QWORD *)&v15[OBJC_IVAR____TtC4Maps23TransitSchedulesContext_viewController] = sub_100074720(v16, (uint64_t)v14, (uint64_t)v11, a4);

  v17 = (objc_class *)type metadata accessor for TransitSchedulesContext();
  v20.receiver = v15;
  v20.super_class = v17;
  v18 = objc_msgSendSuper2(&v20, "init");
  sub_100010CC4(a3, (uint64_t *)&unk_10149E140);
  sub_100010CC4(a2, (uint64_t *)&unk_10149E730);
  return v18;
}

id sub_100074A24()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UniqueEntityHelper();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for UniqueEntityHelper()
{
  return objc_opt_self(_TtC4Maps18UniqueEntityHelper);
}

uint64_t *sub_100074A74(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void *v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v45 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v45 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v45);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v8 = a2[2];
    v7 = a2[3];
    a1[2] = v8;
    a1[3] = v7;
    v10 = (void *)a2[4];
    v9 = a2[5];
    a1[4] = (uint64_t)v10;
    a1[5] = v9;
    v11 = (void *)a2[6];
    a1[6] = (uint64_t)v11;
    v12 = (int *)type metadata accessor for MapsElevationChartViewModel(0);
    v13 = v12[11];
    v14 = (char *)v4 + v13;
    v15 = (char *)a2 + v13;
    swift_bridgeObjectRetain(v8);
    v16 = v10;
    v17 = v11;
    v18 = sub_100008B04(&qword_10149A1F0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v14, v15, v18);
    v19 = v12[12];
    v20 = (uint64_t *)((char *)v4 + v19);
    v21 = (uint64_t *)((char *)a2 + v19);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    v23 = v12[13];
    v24 = (uint64_t *)((char *)v4 + v23);
    v25 = (uint64_t *)((char *)a2 + v23);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    v27 = v12[14];
    v28 = *(void **)((char *)a2 + v27);
    *(uint64_t *)((char *)v4 + v27) = (uint64_t)v28;
    v29 = v12[15];
    v30 = (char *)v4 + v29;
    v31 = (char *)a2 + v29;
    *(_OWORD *)v30 = *(_OWORD *)v31;
    v30[16] = v31[16];
    v32 = v12[16];
    v33 = (uint64_t *)((char *)v4 + v32);
    v34 = (uint64_t *)((char *)a2 + v32);
    v35 = v34[1];
    *v33 = *v34;
    v33[1] = v35;
    v36 = v12[17];
    v37 = *(uint64_t *)((char *)a2 + v36);
    *(uint64_t *)((char *)v4 + v36) = v37;
    v38 = v12[18];
    v39 = *(void **)((char *)a2 + v38);
    *(uint64_t *)((char *)v4 + v38) = (uint64_t)v39;
    v40 = v12[19];
    v41 = *(void **)((char *)a2 + v40);
    *(uint64_t *)((char *)v4 + v40) = (uint64_t)v41;
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v26);
    v42 = v28;
    swift_retain(v35);
    swift_bridgeObjectRetain(v37);
    v43 = v39;
    v44 = v41;
  }
  return v4;
}

void sub_100074C10(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));

  v2 = (int *)type metadata accessor for MapsElevationChartViewModel(0);
  v3 = a1 + v2[11];
  v4 = sub_100008B04(&qword_10149A1F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v2[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v2[13] + 8));

  swift_release(*(_QWORD *)(a1 + v2[16] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v2[17]));

}

uint64_t sub_100074CDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  id v41;
  id v42;
  id v43;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v7 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v6;
  v9 = *(void **)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v8;
  v10 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  v11 = (int *)type metadata accessor for MapsElevationChartViewModel(0);
  v12 = v11[11];
  v13 = a1 + v12;
  v14 = a2 + v12;
  swift_bridgeObjectRetain(v7);
  v15 = v9;
  v16 = v10;
  v17 = sub_100008B04(&qword_10149A1F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v13, v14, v17);
  v18 = v11[12];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  v22 = v11[13];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (_QWORD *)(a2 + v22);
  v25 = v24[1];
  *v23 = *v24;
  v23[1] = v25;
  v26 = v11[14];
  v27 = *(void **)(a2 + v26);
  *(_QWORD *)(a1 + v26) = v27;
  v28 = v11[15];
  v29 = a1 + v28;
  v30 = a2 + v28;
  *(_OWORD *)v29 = *(_OWORD *)v30;
  *(_BYTE *)(v29 + 16) = *(_BYTE *)(v30 + 16);
  v31 = v11[16];
  v32 = (_QWORD *)(a1 + v31);
  v33 = (_QWORD *)(a2 + v31);
  v34 = v33[1];
  *v32 = *v33;
  v32[1] = v34;
  v35 = v11[17];
  v36 = *(_QWORD *)(a2 + v35);
  *(_QWORD *)(a1 + v35) = v36;
  v37 = v11[18];
  v38 = *(void **)(a2 + v37);
  *(_QWORD *)(a1 + v37) = v38;
  v39 = v11[19];
  v40 = *(void **)(a2 + v39);
  *(_QWORD *)(a1 + v39) = v40;
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v25);
  v41 = v27;
  swift_retain(v34);
  swift_bridgeObjectRetain(v36);
  v42 = v38;
  v43 = v40;
  return a1;
}

_QWORD *sub_100074E4C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  id v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  id v48;
  uint64_t v49;
  void *v50;
  void *v51;
  id v52;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[3] = a2[3];
  v8 = (void *)a2[4];
  v9 = (void *)a1[4];
  a1[4] = v8;
  v10 = v8;

  a1[5] = a2[5];
  v11 = (void *)a2[6];
  v12 = (void *)a1[6];
  a1[6] = v11;
  v13 = v11;

  v14 = (int *)type metadata accessor for MapsElevationChartViewModel(0);
  v15 = v14[11];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = sub_100008B04(&qword_10149A1F0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = v14[12];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  *v20 = *v21;
  v22 = v21[1];
  v23 = v20[1];
  v20[1] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  v24 = v14[13];
  v25 = (_QWORD *)((char *)a1 + v24);
  v26 = (_QWORD *)((char *)a2 + v24);
  *v25 = *v26;
  v27 = v26[1];
  v28 = v25[1];
  v25[1] = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  v29 = v14[14];
  v30 = *(void **)((char *)a2 + v29);
  v31 = *(void **)((char *)a1 + v29);
  *(_QWORD *)((char *)a1 + v29) = v30;
  v32 = v30;

  v33 = v14[15];
  v34 = (char *)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = v35[16];
  *(_OWORD *)v34 = *(_OWORD *)v35;
  v34[16] = v36;
  v37 = v14[16];
  v38 = (_QWORD *)((char *)a1 + v37);
  v39 = (_QWORD *)((char *)a2 + v37);
  v40 = v39[1];
  v41 = v38[1];
  *v38 = *v39;
  v38[1] = v40;
  swift_retain(v40);
  swift_release(v41);
  v42 = v14[17];
  v43 = *(_QWORD *)((char *)a2 + v42);
  v44 = *(_QWORD *)((char *)a1 + v42);
  *(_QWORD *)((char *)a1 + v42) = v43;
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRelease(v44);
  v45 = v14[18];
  v46 = *(void **)((char *)a2 + v45);
  v47 = *(void **)((char *)a1 + v45);
  *(_QWORD *)((char *)a1 + v45) = v46;
  v48 = v46;

  v49 = v14[19];
  v50 = *(void **)((char *)a2 + v49);
  v51 = *(void **)((char *)a1 + v49);
  *(_QWORD *)((char *)a1 + v49) = v50;
  v52 = v50;

  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100075028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v7 = (int *)type metadata accessor for MapsElevationChartViewModel(0);
  v8 = v7[11];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_100008B04(&qword_10149A1F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  *(_OWORD *)(a1 + v7[12]) = *(_OWORD *)(a2 + v7[12]);
  *(_OWORD *)(a1 + v7[13]) = *(_OWORD *)(a2 + v7[13]);
  *(_QWORD *)(a1 + v7[14]) = *(_QWORD *)(a2 + v7[14]);
  v12 = v7[15];
  v13 = a1 + v12;
  v14 = a2 + v12;
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *(_BYTE *)(v13 + 16) = *(_BYTE *)(v14 + 16);
  *(_OWORD *)(a1 + v7[16]) = *(_OWORD *)(a2 + v7[16]);
  *(_QWORD *)(a1 + v7[17]) = *(_QWORD *)(a2 + v7[17]);
  *(_QWORD *)(a1 + v7[18]) = *(_QWORD *)(a2 + v7[18]);
  *(_QWORD *)(a1 + v7[19]) = *(_QWORD *)(a2 + v7[19]);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100075130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v6);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v7 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);

  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v8 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);

  v9 = (int *)type metadata accessor for MapsElevationChartViewModel(0);
  v10 = v9[11];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = sub_100008B04(&qword_10149A1F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  v14 = v9[12];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (uint64_t *)(a2 + v14);
  v18 = *v16;
  v17 = v16[1];
  v19 = v15[1];
  *v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease(v19);
  v20 = v9[13];
  v21 = (_QWORD *)(a1 + v20);
  v22 = (uint64_t *)(a2 + v20);
  v24 = *v22;
  v23 = v22[1];
  v25 = v21[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease(v25);
  v26 = v9[14];
  v27 = *(void **)(a1 + v26);
  *(_QWORD *)(a1 + v26) = *(_QWORD *)(a2 + v26);

  v28 = v9[15];
  v29 = a1 + v28;
  v30 = a2 + v28;
  *(_OWORD *)v29 = *(_OWORD *)v30;
  *(_BYTE *)(v29 + 16) = *(_BYTE *)(v30 + 16);
  v31 = v9[16];
  v32 = *(_QWORD *)(a1 + v31 + 8);
  *(_OWORD *)(a1 + v31) = *(_OWORD *)(a2 + v31);
  swift_release(v32);
  v33 = v9[17];
  v34 = *(_QWORD *)(a1 + v33);
  *(_QWORD *)(a1 + v33) = *(_QWORD *)(a2 + v33);
  swift_bridgeObjectRelease(v34);
  v35 = v9[18];
  v36 = *(void **)(a1 + v35);
  *(_QWORD *)(a1 + v35) = *(_QWORD *)(a2 + v35);

  v37 = v9[19];
  v38 = *(void **)(a1 + v37);
  *(_QWORD *)(a1 + v37) = *(_QWORD *)(a2 + v37);

  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1000752B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000752C0);
}

uint64_t sub_1000752C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MapsElevationChartViewModel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1000752FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100075308);
}

uint64_t sub_100075308(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MapsElevationChartViewModel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for MapsElevationChart(uint64_t a1)
{
  uint64_t result;

  result = qword_1014965B0;
  if (!qword_1014965B0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MapsElevationChart);
  return result;
}

uint64_t sub_100075384(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for MapsElevationChartViewModel(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1000753F8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10106667C, 1);
}

uint64_t sub_100075408@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3;

  sub_1000754B0();
  *(_QWORD *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_100E278B0;
  *(_BYTE *)(a1 + 24) = 2;
  *(_QWORD *)(a1 + 32) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  swift_retain();
  sub_100080AC4(0x6F69746176656C45, 0xE90000000000006ELL, 2u);
  swift_release();
  return sub_10006E27C(0x6F69746176656C45, 0xE90000000000006ELL, 2u);
}

void sub_1000754B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v6 = sub_100008B04(&qword_1014965E8);
  __chkstk_darwin(v6);
  v1 = sub_100008B04(&qword_1014965F0);
  __chkstk_darwin(v1);
  v2 = sub_100008B04(&qword_1014965F8);
  __chkstk_darwin(v2);
  v3 = sub_100008B04(&qword_101496600);
  __chkstk_darwin(v3);
  v4 = sub_100008B04(&qword_101496608);
  __chkstk_darwin(v4);
  v5 = (char *)sub_100075638
     + 4
     * byte_100E278D0[*(unsigned __int8 *)(*(_QWORD *)(v0
                                                     + *(int *)(type metadata accessor for MapsElevationChartViewModel(0)
                                                              + 56))
                                         + OBJC_IVAR____TtC4Maps23MapsElevationChartStyle_contextStyle)];
  __asm { BR              X10 }
}

uint64_t sub_100075638()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t OpaqueTypeConformance2;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  sub_100076E40(v1);
  *(_QWORD *)(v2 - 128) = sub_10000E5D4(&qword_1014966C0);
  *(_QWORD *)(v2 - 136) = sub_10000E5D4(&qword_101496638);
  v3 = sub_10000E5D4(&qword_1014966C8);
  v4 = sub_10000E5D4(&qword_1014966D0);
  v5 = sub_10000E5D4(&qword_1014966D8);
  v6 = sub_10000E5D4(&qword_1014966E0);
  v7 = sub_100010D70(&qword_1014966E8, &qword_1014966D8, (const char *)&protocol conformance descriptor for Chart<A>);
  v8 = sub_100010D70(&qword_1014966F0, &qword_1014966E0, (const char *)&protocol conformance descriptor for AxisMarks<A>);
  *(_QWORD *)(v2 - 112) = v5;
  *(_QWORD *)(v2 - 104) = v6;
  *(_QWORD *)(v2 - 96) = v7;
  *(_QWORD *)(v2 - 88) = v8;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v2 - 112, &opaque type descriptor for <<opaque return type of View.chartXAxis<A>(content:)>>, 1);
  v10 = sub_100010D70(&qword_1014966F8, &qword_1014966D0, (const char *)&protocol conformance descriptor for AxisMarks<A>);
  *(_QWORD *)(v2 - 112) = v3;
  *(_QWORD *)(v2 - 104) = v4;
  *(_QWORD *)(v2 - 96) = OpaqueTypeConformance2;
  *(_QWORD *)(v2 - 88) = v10;
  v11 = swift_getOpaqueTypeConformance2(v2 - 112, &opaque type descriptor for <<opaque return type of View.chartYAxis<A>(content:)>>, 1);
  v12 = sub_100080ADC();
  v13 = *(_QWORD *)(v2 - 136);
  *(_QWORD *)(v2 - 112) = *(_QWORD *)(v2 - 128);
  *(_QWORD *)(v2 - 104) = v13;
  *(_QWORD *)(v2 - 96) = v11;
  *(_QWORD *)(v2 - 88) = v12;
  v14 = swift_getOpaqueTypeConformance2(v2 - 112, &opaque type descriptor for <<opaque return type of View.chartYScale<A>(domain:type:)>>, 1);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))AnyView.init<A>(_:))(v1, v0, v14);
  **(_QWORD **)(v2 - 120) = result;
  return result;
}

uint64_t sub_100075A88@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t OpaqueTypeConformance2;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t KeyPath;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  _QWORD v72[2];
  __int128 v73;
  __int128 v74;
  __int128 v75;

  v71 = a1;
  v2 = sub_100008B04(&qword_101496740);
  __chkstk_darwin(v2);
  v70 = (char *)&KeyPath - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for MapsElevationChart(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = (char *)&KeyPath - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008B04(&qword_1014966A8);
  v60 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&KeyPath - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_100008B04(&qword_101496728);
  v63 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v12 = (char *)&KeyPath - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_100008B04(&qword_101496748);
  v62 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v14 = (char *)&KeyPath - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_100008B04(&qword_101496720);
  __chkstk_darwin(v59);
  v16 = (char *)&KeyPath - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_100008B04(&qword_101496708);
  __chkstk_darwin(v66);
  v65 = (uint64_t)&KeyPath - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100008B04(&qword_101496750);
  v68 = *(_QWORD *)(v18 - 8);
  v69 = v18;
  __chkstk_darwin(v18);
  v67 = (char *)&KeyPath - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = v1;
  v72[0] = *(_QWORD *)(v1 + 16);
  v20 = v72[0];
  KeyPath = swift_getKeyPath(&unk_100E27948);
  sub_1000202AC(v1, (uint64_t)v7, type metadata accessor for MapsElevationChart);
  v21 = *(unsigned __int8 *)(v5 + 80);
  v22 = (v21 + 16) & ~v21;
  v23 = swift_allocObject(&unk_10119EEA8, v22 + v6, v21 | 7);
  sub_100080DD8((uint64_t)v7, v23 + v22);
  swift_bridgeObjectRetain(v20);
  v24 = sub_100008B04(&qword_101496758);
  v25 = sub_100008B04(&qword_101496760);
  v26 = sub_100010D70(&qword_101496768, &qword_101496758, (const char *)&protocol conformance descriptor for [A]);
  *(_QWORD *)&v73 = type metadata accessor for BarMark(255, v27);
  *((_QWORD *)&v73 + 1) = &type metadata for Color;
  *(_QWORD *)&v74 = &protocol witness table for BarMark;
  *((_QWORD *)&v74 + 1) = &protocol witness table for Color;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v73, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
  Chart.init<A, B, C>(_:id:content:)(v72, KeyPath, sub_100080E1C, v23, v24, v25, v26, &protocol witness table for Int, OpaqueTypeConformance2);
  v29 = sub_100010D70(&qword_1014966B0, &qword_1014966A8, (const char *)&protocol conformance descriptor for Chart<A>);
  View.chartXAxis(_:)(2, v8, v29);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v10, v8);
  *(_QWORD *)&v73 = v8;
  *((_QWORD *)&v73 + 1) = v29;
  v30 = swift_getOpaqueTypeConformance2(&v73, &opaque type descriptor for <<opaque return type of View.chartXAxis(_:)>>, 1);
  v31 = v61;
  View.chartYAxis(_:)(2, v61, v30);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v12, v31);
  v32 = *(int *)(type metadata accessor for MapsElevationChartViewModel(0) + 56);
  v33 = v58;
  v34 = *(_QWORD *)(*(_QWORD *)(v58 + v32) + OBJC_IVAR____TtC4Maps23MapsElevationChartStyle_gapWidth);
  v35 = v62;
  v36 = v64;
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v16, v14, v64);
  v37 = &v16[*(int *)(v59 + 36)];
  *(_QWORD *)v37 = v34;
  *((_QWORD *)v37 + 1) = 0;
  v38 = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v14, v36);
  v39 = (*(double *)(*(_QWORD *)(v33 + v32) + OBJC_IVAR____TtC4Maps23MapsElevationChartStyle_gapWidth)
       + *(double *)(*(_QWORD *)(v33 + v32) + OBJC_IVAR____TtC4Maps23MapsElevationChartStyle_barWidth))
      * (double)*(uint64_t *)(*(_QWORD *)(v33 + 16) + 16);
  v40 = static Alignment.center.getter(v38);
  _FrameLayout.init(width:height:alignment:)(&v73, *(_QWORD *)&v39, 0, 0, 1, v40, v41);
  v42 = v65;
  sub_10000C1FC((uint64_t)v16, v65, &qword_101496720);
  v43 = v66;
  v44 = (_OWORD *)(v42 + *(int *)(v66 + 36));
  v45 = v74;
  *v44 = v73;
  v44[1] = v45;
  v44[2] = v75;
  sub_100010CC4((uint64_t)v16, &qword_101496720);
  v72[0] = sub_1000D6BA0();
  v72[1] = v46;
  v47 = type metadata accessor for ScaleType(0);
  v48 = (uint64_t)v70;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v70, 1, 1, v47);
  v49 = sub_100008B04(&qword_101496638);
  v50 = sub_100080C8C();
  v51 = sub_100080ADC();
  v52 = v67;
  View.chartYScale<A>(domain:type:)(v72, v48, v43, v49, v50, v51);
  sub_100010CC4(v48, &qword_101496740);
  sub_100010CC4(v42, &qword_101496708);
  v54 = v68;
  v53 = v69;
  v55 = v71;
  (*(void (**)(uint64_t, char *, uint64_t))(v68 + 16))(v71, v52, v69);
  *(_WORD *)(v55 + *(int *)(sub_100008B04(&qword_101496608) + 36)) = 0;
  return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v52, v53);
}

uint64_t sub_10007606C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t OpaqueTypeConformance2;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t result;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char v55[16];
  uint64_t v56;
  char v57[16];
  uint64_t v58;
  _QWORD v59[2];
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;

  v2 = v1;
  v51 = a1;
  v3 = sub_100008B04(&qword_101496740);
  __chkstk_darwin(v3);
  v50 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MapsElevationChart(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100008B04(&qword_1014966A8);
  v53 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100008B04(&qword_101496698);
  v54 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_100008B04(&qword_101496690);
  v48 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v52 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_100008B04(&qword_1014965F8);
  v46 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v45 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59[0] = *(_QWORD *)(v2 + 16);
  v17 = v59[0];
  KeyPath = swift_getKeyPath(&unk_100E27948);
  sub_1000202AC(v2, (uint64_t)v8, type metadata accessor for MapsElevationChart);
  v19 = *(unsigned __int8 *)(v6 + 80);
  v20 = (v19 + 16) & ~v19;
  v21 = swift_allocObject(&unk_10119EF98, v20 + v7, v19 | 7);
  sub_100080DD8((uint64_t)v8, v21 + v20);
  swift_bridgeObjectRetain(v17);
  v22 = sub_100008B04(&qword_101496758);
  v23 = sub_100008B04(&qword_101496760);
  v24 = sub_100010D70(&qword_101496768, &qword_101496758, (const char *)&protocol conformance descriptor for [A]);
  v60 = type metadata accessor for BarMark(255, v25);
  v61 = &type metadata for Color;
  v62 = &protocol witness table for BarMark;
  v63 = &protocol witness table for Color;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v60, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
  Chart.init<A, B, C>(_:id:content:)(v59, KeyPath, sub_100081D60, v21, v22, v23, v24, &protocol witness table for Int, OpaqueTypeConformance2);
  v58 = v2;
  v27 = sub_100008B04(&qword_1014966A0);
  v28 = sub_100010D70(&qword_1014966B0, &qword_1014966A8, (const char *)&protocol conformance descriptor for Chart<A>);
  v29 = sub_100010D70(&qword_1014966B8, &qword_1014966A0, (const char *)&protocol conformance descriptor for AxisMarks<A>);
  View.chartXAxis<A>(content:)(sub_100081D6C, v57, v9, v27, v28, v29);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v11, v9);
  v56 = v2;
  v60 = v9;
  v61 = (void *)v27;
  v62 = (void *)v28;
  v63 = (void *)v29;
  v30 = v52;
  v31 = swift_getOpaqueTypeConformance2(&v60, &opaque type descriptor for <<opaque return type of View.chartXAxis<A>(content:)>>, 1);
  View.chartYAxis<A>(content:)(sub_100081D9C, v55, v12, v27, v31, v29);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v14, v12);
  v32 = sub_1000D6F2C();
  v33 = *(_QWORD *)(v32 + 16);
  if (!v33)
  {
LABEL_6:
    v35 = swift_bridgeObjectRelease(v32);
    __break(1u);
    goto LABEL_7;
  }
  v34 = *(double *)(v32 + 8 * v33 + 24);
  swift_bridgeObjectRelease(v32);
  v35 = sub_1000D6F2C();
  if (*(_QWORD *)(v35 + 16))
  {
    v36 = *(double *)(v35 + 32);
    v32 = swift_bridgeObjectRelease(v35);
    if (v34 <= v36)
    {
      *(double *)v59 = v34;
      *(double *)&v59[1] = v36;
      v37 = type metadata accessor for ScaleType(0);
      v38 = (uint64_t)v50;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v50, 1, 1, v37);
      v39 = sub_100008B04(&qword_101496638);
      v60 = v12;
      v61 = (void *)v27;
      v62 = (void *)v31;
      v63 = (void *)v29;
      v40 = swift_getOpaqueTypeConformance2(&v60, &opaque type descriptor for <<opaque return type of View.chartYAxis<A>(content:)>>, 1);
      v41 = sub_100080ADC();
      v42 = v45;
      v43 = v49;
      View.chartYScale<A>(domain:type:)(v59, v38, v49, v39, v40, v41);
      sub_100010CC4(v38, &qword_101496740);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v30, v43);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v46 + 32))(v51, v42, v47);
    }
    __break(1u);
    goto LABEL_6;
  }
LABEL_7:
  result = swift_bridgeObjectRelease(v35);
  __break(1u);
  return result;
}

uint64_t sub_100076574@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t OpaqueTypeConformance2;
  char *v27;
  uint64_t v28;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40[16];
  uint64_t v41;
  _QWORD v42[2];

  v39 = a1;
  v2 = sub_100008B04(&qword_101496880);
  __chkstk_darwin(v2);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for BlendMode(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v31 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008B04(&qword_101496688);
  v35 = *(_QWORD *)(v8 - 8);
  v36 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008B04(&qword_101496670);
  __chkstk_darwin(v11);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100008B04(&qword_101496668);
  v37 = *(_QWORD *)(v14 - 8);
  v38 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100008B04(&qword_1014965F0);
  v33 = *(_QWORD *)(v17 - 8);
  v34 = v17;
  __chkstk_darwin(v17);
  v32 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = v1;
  v19 = sub_100008B04(&qword_101496888);
  v20 = sub_100070348(&qword_101496890, &qword_101496888, (uint64_t (*)(void))sub_100081EF4, (const char *)&protocol conformance descriptor for <> ForEach<A, B, C>);
  Chart.init(content:)(sub_100081EEC, v40, v19, v20);
  v21 = type metadata accessor for MapsElevationChartViewModel(0);
  sub_10000C1FC(*(_QWORD *)(v1 + *(int *)(v21 + 56)) + OBJC_IVAR____TtC4Maps23MapsElevationChartStyle_blendMode, (uint64_t)v4, &qword_101496880);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    v22 = v31;
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v31, enum case for BlendMode.normal(_:), v5);
    sub_100010CC4((uint64_t)v4, &qword_101496880);
  }
  else
  {
    v22 = v31;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v31, v4, v5);
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(&v13[*(int *)(v11 + 36)], v22, v5);
  v24 = v35;
  v23 = v36;
  (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v13, v10, v36);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v22, v5);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v23);
  v25 = sub_100080B38();
  View.chartXAxis(_:)(2, v11, v25);
  sub_100010CC4((uint64_t)v13, &qword_101496670);
  v42[0] = v11;
  v42[1] = v25;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v42, &opaque type descriptor for <<opaque return type of View.chartXAxis(_:)>>, 1);
  v27 = v32;
  v28 = v38;
  View.chartYAxis(_:)(2, v38, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v16, v28);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v33 + 32))(v39, v27, v34);
}

uint64_t sub_1000768EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  double v31;
  uint64_t OpaqueTypeConformance2;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  char v65[16];
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD v71[2];
  _QWORD v72[3];

  v2 = v1;
  v62 = a1;
  v3 = sub_100008B04(&qword_101496740);
  __chkstk_darwin(v3);
  v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100008B04(&qword_101496640);
  v7 = *(uint64_t **)(v6 - 8);
  v63 = v6;
  v64 = v7;
  __chkstk_darwin(v6);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_100008B04(&qword_101496630);
  v51 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_100008B04(&qword_101496620);
  v54 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v53 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100008B04(&qword_101496610);
  v60 = *(_QWORD *)(v13 - 8);
  v61 = v13;
  __chkstk_darwin(v13);
  v59 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100008B04(&qword_1014965E8);
  v57 = *(_QWORD *)(v15 - 8);
  v58 = v15;
  __chkstk_darwin(v15);
  v55 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = v1;
  v17 = sub_100008B04(&qword_1014968D8);
  v18 = sub_1000820D4();
  Chart.init(content:)(sub_1000820CC, v65, v17, v18);
  sub_1000D7BF4();
  v72[0] = v19;
  v72[1] = v20;
  v21 = type metadata accessor for ScaleType(0);
  v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
  v22(v5, 1, 1, v21);
  v23 = sub_100008B04(&qword_101496638);
  v24 = sub_100010D70(&qword_101496648, &qword_101496640, (const char *)&protocol conformance descriptor for Chart<A>);
  v25 = sub_100080ADC();
  v50 = v11;
  v26 = v63;
  View.chartXScale<A>(domain:type:)(v72, v5, v63, v23, v24, v25);
  sub_100010CC4((uint64_t)v5, &qword_101496740);
  ((void (*)(char *, uint64_t))v64[1])(v9, v26);
  v27 = sub_1000D6F2C();
  v28 = *(_QWORD *)(v27 + 16);
  if (!v28)
  {
LABEL_6:
    v30 = swift_bridgeObjectRelease(v27);
    __break(1u);
    goto LABEL_7;
  }
  v29 = *(double *)(v27 + 8 * v28 + 24);
  swift_bridgeObjectRelease(v27);
  v30 = sub_1000D6F2C();
  if (*(_QWORD *)(v30 + 16))
  {
    v31 = *(double *)(v30 + 32);
    v27 = swift_bridgeObjectRelease(v30);
    if (v29 <= v31)
    {
      *(double *)v71 = v29;
      *(double *)&v71[1] = v31;
      v22(v5, 1, 1, v21);
      v67 = v26;
      v68 = v23;
      v69 = v24;
      v70 = v25;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v67, &opaque type descriptor for <<opaque return type of View.chartXScale<A>(domain:type:)>>, 1);
      v33 = v53;
      v34 = v52;
      v35 = v50;
      View.chartYScale<A>(domain:type:)(v71, v5, v52, v23, OpaqueTypeConformance2, v25);
      sub_100010CC4((uint64_t)v5, &qword_101496740);
      v36 = (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v35, v34);
      v64 = &v49;
      __chkstk_darwin(v36);
      *(&v49 - 2) = v2;
      v37 = sub_100008B04(&qword_101496628);
      v67 = v34;
      v68 = v23;
      v69 = OpaqueTypeConformance2;
      v70 = v25;
      v38 = swift_getOpaqueTypeConformance2(&v67, &opaque type descriptor for <<opaque return type of View.chartYScale<A>(domain:type:)>>, 1);
      v39 = sub_100010D70(&qword_101496658, &qword_101496628, (const char *)&protocol conformance descriptor for AxisMarks<A>);
      v40 = v59;
      v41 = v56;
      View.chartXAxis<A>(content:)(sub_1000825E0, &v49 - 4, v56, v37, v38, v39);
      v42 = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v33, v41);
      __chkstk_darwin(v42);
      *(&v49 - 2) = v2;
      v43 = sub_100008B04(&qword_101496618);
      v67 = v41;
      v68 = v37;
      v69 = v38;
      v70 = v39;
      v44 = swift_getOpaqueTypeConformance2(&v67, &opaque type descriptor for <<opaque return type of View.chartXAxis<A>(content:)>>, 1);
      v45 = sub_100010D70(&qword_101496660, &qword_101496618, (const char *)&protocol conformance descriptor for AxisMarks<A>);
      v46 = v55;
      v47 = v61;
      View.chartYAxis<A>(content:)(sub_1000825E8, &v49 - 4, v61, v43, v44, v45);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v40, v47);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v57 + 32))(v62, v46, v58);
    }
    __break(1u);
    goto LABEL_6;
  }
LABEL_7:
  result = swift_bridgeObjectRelease(v30);
  __break(1u);
  return result;
}

uint64_t sub_100076E40@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t OpaqueTypeConformance2;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t result;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t KeyPath;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71[16];
  uint64_t v72;
  char v73[16];
  uint64_t v74;
  _QWORD v75[2];
  uint64_t v76;
  void *v77;
  uint64_t v78;
  unint64_t v79;

  v61 = a1;
  v2 = sub_100008B04(&qword_101496740);
  __chkstk_darwin(v2);
  v60 = (char *)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for MapsElevationChart(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = sub_100008B04(&qword_1014966D8);
  v8 = *(_QWORD *)(v7 - 8);
  v68 = v7;
  v69 = v8;
  __chkstk_darwin(v7);
  v65 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_100008B04(&qword_1014966C8);
  v70 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v66 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_100008B04(&qword_1014966C0);
  v58 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v67 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_100008B04(&qword_101496600);
  v56 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v55 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(int *)(type metadata accessor for MapsElevationChartViewModel(0) + 68);
  v63 = v1;
  v75[0] = *(_QWORD *)(v1 + v13);
  v14 = v75[0];
  KeyPath = swift_getKeyPath(&unk_100E27968);
  sub_1000202AC(v1, (uint64_t)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for MapsElevationChart);
  v15 = *(unsigned __int8 *)(v5 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = swift_allocObject(&unk_10119EED0, v16 + v6, v15 | 7);
  sub_100080DD8((uint64_t)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v16);
  v18 = swift_allocObject(&unk_10119EEF8, 32, 7);
  *(_QWORD *)(v18 + 16) = sub_100080E2C;
  *(_QWORD *)(v18 + 24) = v17;
  swift_bridgeObjectRetain(v14);
  v19 = sub_100008B04(&qword_101496778);
  v20 = sub_100008B04(&qword_101496780);
  v21 = sub_100010D70(&qword_101496788, &qword_101496778, (const char *)&protocol conformance descriptor for [A]);
  v22 = sub_10000E5D4(&qword_101496790);
  v23 = sub_10000E5D4(&qword_101496798);
  v24 = sub_100010D70(&qword_1014967A0, &qword_101496798, (const char *)&protocol conformance descriptor for Plot<A>);
  v25 = sub_10006C008();
  v76 = v23;
  v77 = &type metadata for String;
  v78 = v24;
  v79 = v25;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v76, &opaque type descriptor for <<opaque return type of ChartContent.accessibilityLabel<A>(_:)>>, 1);
  v76 = v22;
  v77 = &type metadata for String;
  v27 = v64;
  v78 = OpaqueTypeConformance2;
  v79 = v25;
  v28 = swift_getOpaqueTypeConformance2(&v76, &opaque type descriptor for <<opaque return type of ChartContent.accessibilityValue<A>(_:)>>, 1);
  v29 = v65;
  Chart.init<A, B, C>(_:id:content:)(v75, KeyPath, sub_100080EA4, v18, v19, v20, v21, &protocol witness table for Int, v28);
  v30 = v63;
  v74 = v63;
  v31 = sub_100008B04(&qword_1014966E0);
  v32 = sub_100010D70(&qword_1014966E8, &qword_1014966D8, (const char *)&protocol conformance descriptor for Chart<A>);
  v33 = sub_100010D70(&qword_1014966F0, &qword_1014966E0, (const char *)&protocol conformance descriptor for AxisMarks<A>);
  v34 = v66;
  v35 = v68;
  View.chartXAxis<A>(content:)(sub_100080ECC, v73, v68, v31, v32, v33);
  v36 = v29;
  v37 = v35;
  (*(void (**)(char *, uint64_t))(v69 + 8))(v36, v35);
  v72 = v30;
  v38 = sub_100008B04(&qword_1014966D0);
  v76 = v37;
  v77 = (void *)v31;
  v78 = v32;
  v79 = v33;
  v39 = swift_getOpaqueTypeConformance2(&v76, &opaque type descriptor for <<opaque return type of View.chartXAxis<A>(content:)>>, 1);
  v40 = v67;
  v41 = sub_100010D70(&qword_1014966F8, &qword_1014966D0, (const char *)&protocol conformance descriptor for AxisMarks<A>);
  View.chartYAxis<A>(content:)(sub_100080ED4, v71, v27, v38, v39, v41);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v34, v27);
  v42 = sub_1000D6F2C();
  v43 = *(_QWORD *)(v42 + 16);
  if (!v43)
  {
LABEL_6:
    v45 = swift_bridgeObjectRelease(v42);
    __break(1u);
    goto LABEL_7;
  }
  v44 = *(double *)(v42 + 8 * v43 + 24);
  swift_bridgeObjectRelease(v42);
  v45 = sub_1000D6F2C();
  if (*(_QWORD *)(v45 + 16))
  {
    v46 = *(double *)(v45 + 32);
    v42 = swift_bridgeObjectRelease(v45);
    if (v44 <= v46)
    {
      *(double *)v75 = v44;
      *(double *)&v75[1] = v46;
      v47 = type metadata accessor for ScaleType(0);
      v48 = (uint64_t)v60;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v60, 1, 1, v47);
      v49 = sub_100008B04(&qword_101496638);
      v76 = v27;
      v77 = (void *)v38;
      v78 = v39;
      v79 = v41;
      v50 = swift_getOpaqueTypeConformance2(&v76, &opaque type descriptor for <<opaque return type of View.chartYAxis<A>(content:)>>, 1);
      v51 = sub_100080ADC();
      v52 = v55;
      v53 = v59;
      View.chartYScale<A>(domain:type:)(v75, v48, v59, v49, v50, v51);
      sub_100010CC4(v48, &qword_101496740);
      (*(void (**)(char *, uint64_t))(v58 + 8))(v40, v53);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v56 + 32))(v61, v52, v57);
    }
    __break(1u);
    goto LABEL_6;
  }
LABEL_7:
  result = swift_bridgeObjectRelease(v45);
  __break(1u);
  return result;
}

uint64_t sub_10007744C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  double v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;

  v48 = a2;
  v44 = a1;
  v51 = a3;
  v3 = sub_100008B04(&qword_10149A1F0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008B04(&qword_101496770);
  __chkstk_darwin(v7);
  v46 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v9);
  v45 = (char *)&v43 - v11;
  v12 = type metadata accessor for BarMark(0, v10);
  v13 = *(_QWORD *)(v12 - 8);
  v49 = v12;
  v50 = v13;
  __chkstk_darwin(v12);
  v47 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = LocalizedStringKey.init(stringLiteral:)(0x74657366664FLL, 0xE600000000000000);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  type metadata accessor for MapsElevationChartViewModel.ElevationDatum(0);
  v21 = objc_msgSend((id)objc_opt_self(NSUnitLength), "meters");
  ((void (*)(void))Measurement<>.converted(to:))();

  v22 = Measurement.value.getter(v3);
  v23 = *(void (**)(char *, uint64_t))(v4 + 8);
  v23(v6, v3);
  v52 = v22;
  static PlottableValue.value(_:_:)(v43, v16, v18 & 1, v20, &v52, &type metadata for Double, &protocol witness table for Double);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v16);
  v24 = LocalizedStringKey.init(stringLiteral:)(0x6F69746176656C45, 0xE90000000000006ELL);
  v26 = v25;
  v28 = v27;
  v30 = v29;
  v31 = v44;
  v32 = v48;
  Measurement<>.converted(to:)(*(_QWORD *)(v48 + 32), v3);
  v33 = Measurement.value.getter(v3);
  v23(v6, v3);
  v52 = v33;
  v34 = v46;
  static PlottableValue.value(_:_:)(v24, v26, v28 & 1, v30, &v52, &type metadata for Double, &protocol witness table for Double);
  swift_bridgeObjectRelease(v30);
  swift_bridgeObjectRelease(v26);
  v35 = type metadata accessor for MapsElevationChartViewModel(0);
  v36 = v32;
  v37 = *(_QWORD *)(*(_QWORD *)(v32 + *(int *)(v35 + 56)) + OBJC_IVAR____TtC4Maps23MapsElevationChartStyle_barWidth);
  v38 = v47;
  BarMark.init<A, B>(x:y:width:height:stacking:)(v45, v34, v37, 0, 0, 3, 0, &type metadata for Double, &type metadata for Double, &protocol witness table for Double, &protocol witness table for Double);
  v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + *(int *)(v35 + 64)))(v31, v36);
  v40 = Color.init(_:)(v39);
  v52 = *(double *)&v40;
  v41 = v49;
  ChartContent.foregroundStyle<A>(_:)(&v52, v49, &type metadata for Color, &protocol witness table for BarMark, &protocol witness table for Color);
  swift_release(v40);
  return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v38, v41);
}

uint64_t sub_1000777C8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t OpaqueTypeConformance2;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27[16];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD v34[2];

  v26 = a3;
  v5 = sub_100008B04(&qword_101496798);
  v24 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008B04(&qword_101496790);
  v25 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = a1;
  v29 = a2;
  v11 = sub_100008B04(&qword_101496850);
  v12 = sub_10008158C();
  Plot.init(content:)(sub_100081584, v27, v11, v12);
  v13 = sub_100081628(a1);
  v15 = v14;
  v30 = v13;
  v31 = v14;
  v16 = sub_100010D70(&qword_1014967A0, &qword_101496798, (const char *)&protocol conformance descriptor for Plot<A>);
  v17 = sub_10006C008();
  ChartContent.accessibilityLabel<A>(_:)(&v30, v5, &type metadata for String, v16, v17);
  swift_bridgeObjectRelease(v15);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v5);
  v18 = sub_1000818F8(a1);
  v20 = v19;
  v34[0] = v18;
  v34[1] = v19;
  v30 = v5;
  v31 = &type metadata for String;
  v32 = v16;
  v33 = v17;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v30, &opaque type descriptor for <<opaque return type of ChartContent.accessibilityLabel<A>(_:)>>, 1);
  ChartContent.accessibilityValue<A>(_:)(v34, v8, &type metadata for String, OpaqueTypeConformance2, v17);
  swift_bridgeObjectRelease(v20);
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v10, v8);
}

uint64_t sub_1000779BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t OpaqueTypeConformance2;
  unint64_t v16;
  _QWORD v19[4];
  uint64_t v20;

  v4 = type metadata accessor for MapsElevationChart(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v20 = a1;
  sub_1000202AC(a2, (uint64_t)&v19[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_10119EF70, v9 + v6, v8 | 7);
  sub_100080DD8((uint64_t)&v19[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v10 + v9);
  swift_bridgeObjectRetain(a1);
  v11 = sub_100008B04(&qword_101496758);
  v12 = sub_100008B04(&qword_101496760);
  v13 = sub_100010D70(&qword_101496768, &qword_101496758, (const char *)&protocol conformance descriptor for [A]);
  v19[0] = type metadata accessor for BarMark(255, v14);
  v19[1] = &type metadata for Color;
  v19[2] = &protocol witness table for BarMark;
  v19[3] = &protocol witness table for Color;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v19, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
  v16 = sub_100081D14();
  return ForEach<>.init(_:content:)(&v20, sub_100081D08, v10, v11, &type metadata for Int, v12, v13, OpaqueTypeConformance2, v16);
}

uint64_t sub_100077B38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t result;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;

  v72 = a3;
  v73 = a2;
  v4 = sub_100008B04(&qword_10149A1F0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008B04(&qword_101496770);
  __chkstk_darwin(v8);
  v64 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v63 = (char *)&v59 - v11;
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v59 - v14;
  v16 = type metadata accessor for BarMark(0, v13);
  v69 = *(_QWORD *)(v16 - 8);
  v70 = v16;
  __chkstk_darwin(v16);
  v68 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100008B04(&qword_101496760);
  v66 = *(_QWORD *)(v18 - 8);
  v67 = v18;
  __chkstk_darwin(v18);
  v65 = (char *)&v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = LocalizedStringKey.init(stringLiteral:)(0x74657366664FLL, 0xE600000000000000);
  v22 = v21;
  v24 = v23;
  v26 = v25;
  v61 = type metadata accessor for MapsElevationChartViewModel.ElevationDatum(0);
  v71 = a1;
  v27 = objc_msgSend((id)objc_opt_self(NSUnitLength), "meters");
  Measurement<>.converted(to:)(v27, v4);

  v28 = Measurement.value.getter(v4);
  v60 = *(void (**)(char *, uint64_t))(v5 + 8);
  v60(v7, v4);
  v74 = v28;
  v62 = v15;
  static PlottableValue.value(_:_:)(v20, v22, v24 & 1, v26, &v74, &type metadata for Double, &protocol witness table for Double);
  swift_bridgeObjectRelease(v26);
  swift_bridgeObjectRelease(v22);
  v29 = LocalizedStringKey.init(stringLiteral:)(0x6F69746176656C45, 0xEA0000000000306ELL);
  v31 = v30;
  v33 = v32;
  v35 = v34;
  v36 = v73;
  v37 = sub_1000D6F2C();
  v38 = *(_QWORD *)(v37 + 16);
  if (v38)
  {
    v39 = *(double *)(v37 + 8 * v38 + 24);
    swift_bridgeObjectRelease(v37);
    v74 = v39;
    v40 = v33 & 1;
    v41 = v63;
    static PlottableValue.value(_:_:)(v29, v31, v40, v35, &v74, &type metadata for Double, &protocol witness table for Double);
    swift_bridgeObjectRelease(v35);
    swift_bridgeObjectRelease(v31);
    v42 = LocalizedStringKey.init(stringLiteral:)(0x6F69746176656C45, 0xE90000000000006ELL);
    v44 = v43;
    v46 = v45;
    v48 = v47;
    v49 = v71;
    Measurement<>.converted(to:)(*(_QWORD *)(v36 + 32), v4);
    v50 = Measurement.value.getter(v4);
    v60(v7, v4);
    v74 = v50;
    v51 = v64;
    static PlottableValue.value(_:_:)(v42, v44, v46 & 1, v48, &v74, &type metadata for Double, &protocol witness table for Double);
    swift_bridgeObjectRelease(v48);
    swift_bridgeObjectRelease(v44);
    v52 = type metadata accessor for MapsElevationChartViewModel(0);
    v53 = v68;
    BarMark.init<A, B>(x:yStart:yEnd:width:)(v62, v41, v51, *(_QWORD *)(*(_QWORD *)(v36 + *(int *)(v52 + 56)) + OBJC_IVAR____TtC4Maps23MapsElevationChartStyle_barWidth), 0, &type metadata for Double, &type metadata for Double, &protocol witness table for Double, &protocol witness table for Double);
    v54 = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + *(int *)(v52 + 64)))(v49, v36);
    *(double *)&v55 = COERCE_DOUBLE(Color.init(_:)(v54));
    v74 = *(double *)&v55;
    v56 = v65;
    v57 = v70;
    ChartContent.foregroundStyle<A>(_:)(&v74, v70, &type metadata for Color, &protocol witness table for BarMark, &protocol witness table for Color);
    swift_release(v55);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v53, v57);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v66 + 32))(v72, v56, v67);
  }
  else
  {
    result = swift_bridgeObjectRelease(v37);
    __break(1u);
  }
  return result;
}

uint64_t sub_100077FBC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = sub_1000D73B0();
  sub_100077FFC(v2, 1, a1);
  return swift_bridgeObjectRelease(v2);
}

void sub_100077FFC(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;

  v4 = v3;
  v38 = a2;
  v40 = a3;
  v6 = type metadata accessor for AxisMarkPosition(0);
  v7 = __chkstk_darwin(v6);
  v39 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AxisMarkPreset(0, v7);
  __chkstk_darwin(v9);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for MapsElevationChart(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a1 + 16);
  v17 = _swiftEmptyArrayStorage;
  if (v16)
  {
    v37 = v4;
    v41 = _swiftEmptyArrayStorage;
    sub_1001324A0(0, v16, 0);
    v17 = v41;
    v18 = (uint64_t *)(a1 + 32);
    v19 = v41[2];
    do
    {
      v20 = *v18;
      v41 = v17;
      v21 = v17[3];
      if (v19 >= v21 >> 1)
      {
        sub_1001324A0(v21 > 1, v19 + 1, 1);
        v17 = v41;
      }
      v17[2] = v19 + 1;
      v17[v19 + 4] = v20;
      v18 += 2;
      ++v19;
      --v16;
    }
    while (v16);
    v4 = v37;
  }
  v22 = *(_QWORD *)(v4 + *(int *)(type metadata accessor for MapsElevationChartViewModel(0) + 56));
  v23 = *(void **)(v22 + OBJC_IVAR____TtC4Maps23MapsElevationChartStyle_xAxisFont);
  if (v23)
    v24 = *(id *)(v22 + OBJC_IVAR____TtC4Maps23MapsElevationChartStyle_xAxisFont);
  else
    v24 = objc_msgSend((id)objc_opt_self(UIFont), "preferredFontForTextStyle:", UIFontTextStyleCaption2);
  sub_1000202AC(v4, (uint64_t)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for MapsElevationChart);
  v25 = *(unsigned __int8 *)(v13 + 80);
  v26 = (v25 + 32) & ~v25;
  v27 = v26 + v14;
  v28 = (v26 + v14) & 0xFFFFFFFFFFFFFFF8;
  v29 = swift_allocObject(&unk_10119EF48, v28 + 16, v25 | 7);
  *(_QWORD *)(v29 + 16) = a1;
  *(_QWORD *)(v29 + 24) = v17;
  sub_100080DD8((uint64_t)v15, v29 + v26);
  *(_BYTE *)(v29 + v27) = v38 & 1;
  *(_QWORD *)(v28 + v29 + 8) = v24;
  v30 = v23;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(v17);
  v31 = v24;
  v32 = static AxisMarkPreset.automatic.getter(v31);
  v33 = v39;
  static AxisMarkPosition.automatic.getter(v32);
  v34 = sub_100008B04(&qword_101496828);
  v35 = sub_100081454();
  AxisMarks.init<A>(preset:position:values:content:)(v11, v33, v17, sub_1000813EC, v29, v34, &type metadata for Double, v35, &protocol witness table for Double);

}

uint64_t sub_1000782D0(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;

  v2 = type metadata accessor for AxisMarkPosition(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AxisMarkPreset(0, v3);
  __chkstk_darwin(v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MapsElevationChart(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000D6F2C();
  sub_1000202AC(a1, (uint64_t)v12, type metadata accessor for MapsElevationChart);
  v14 = *(unsigned __int8 *)(v10 + 80);
  v15 = (v14 + 17) & ~v14;
  v16 = (v11 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = swift_allocObject(&unk_10119EF20, v16 + 8, v14 | 7);
  *(_BYTE *)(v17 + 16) = 0;
  sub_100080DD8((uint64_t)v12, v17 + v15);
  *(_QWORD *)(v17 + v16) = v13;
  v18 = swift_bridgeObjectRetain_n(v13, 2);
  v19 = static AxisMarkPreset.automatic.getter(v18);
  static AxisMarkPosition.automatic.getter(v19);
  v20 = sub_100008B04(&qword_1014967A8);
  v21 = sub_100081064();
  AxisMarks.init<A>(preset:position:values:content:)(v8, v5, v13, sub_100081000, v17, v20, &type metadata for Double, v21, &protocol witness table for Double);
  return swift_bridgeObjectRelease(v13);
}

unint64_t sub_100078490@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, int a4@<W4>, uint64_t (*a5)(char *, char *, uint64_t)@<X5>, char *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t result;
  double v55;
  char v56;
  uint64_t v57;
  double v58;
  id v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  double v64;
  id v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t OpaqueTypeConformance2;
  char *v86;
  uint64_t v87;
  uint64_t (*v88)(char *, char *, uint64_t);
  char *v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  char *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  double v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  unint64_t v123;
  char *v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  void (*v140)(char *, char *, uint64_t);
  char *v141;
  char *v142;
  uint64_t v143;
  void (*v144)(char *, uint64_t);
  uint64_t v145;
  uint64_t v146;
  double v147;
  uint64_t v148;
  double v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  char *v154;
  unint64_t v155;
  char *v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  char *v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  char *v177;
  char *v178;
  char *v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  char *v188;
  void (*v189)(char *, uint64_t);
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  uint64_t (*v205)(char *, char *, uint64_t);
  int v206;
  char *v207;
  char *v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  void *v212;
  uint64_t v213;
  __int128 v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  __int128 v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;

  v205 = a5;
  v204 = a4;
  v196 = sub_100008B04(&qword_101496840);
  __chkstk_darwin(v196);
  v195 = (char *)&v170 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008B04(&qword_1014967E0);
  v12 = __chkstk_darwin(v11);
  v181 = (char *)&v170 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for AxisValueLabelOrientation(0, v12);
  v15 = __chkstk_darwin(v14);
  v188 = (char *)&v170 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for AxisValueLabelCollisionResolution(0, v15);
  __chkstk_darwin(v17);
  v187 = (char *)&v170 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v184 = sub_100008B04(&qword_1014967E8);
  v183 = *(_QWORD *)(v184 - 8);
  __chkstk_darwin(v184);
  v172 = (char *)&v170 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v177 = (char *)&v170 - v21;
  __chkstk_darwin(v22);
  v180 = (char *)&v170 - v23;
  v186 = sub_100008B04(&qword_101496800);
  v185 = *(_QWORD *)(v186 - 8);
  __chkstk_darwin(v186);
  v170 = (char *)&v170 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v171 = (char *)&v170 - v26;
  __chkstk_darwin(v27);
  v175 = (char *)&v170 - v28;
  __chkstk_darwin(v29);
  v176 = (char *)&v170 - v30;
  __chkstk_darwin(v31);
  v178 = (char *)&v170 - v32;
  __chkstk_darwin(v33);
  v179 = (char *)&v170 - v34;
  v35 = sub_100008B04(&qword_1014967C0);
  __chkstk_darwin(v35);
  v198 = (uint64_t)&v170 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  v197 = (uint64_t)&v170 - v38;
  v39 = type metadata accessor for AxisGridLine(0);
  v203 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v41 = (char *)&v170 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v201 = sub_100008B04(&qword_101496838);
  v200 = *(_QWORD *)(v201 - 8);
  __chkstk_darwin(v201);
  v43 = (char *)&v170 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v202 = sub_100008B04(&qword_101496848);
  v210 = *(_QWORD **)(v202 - 8);
  __chkstk_darwin(v202);
  v194 = (char *)&v170 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v45);
  v199 = (char *)&v170 - v46;
  __chkstk_darwin(v47);
  v207 = (char *)&v170 - v48;
  v209 = sub_100008B04(&qword_10149A1F0);
  v49 = *(_QWORD *)(v209 - 8);
  __chkstk_darwin(v209);
  v51 = (char *)&v170 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v52);
  v208 = (char *)&v170 - v53;
  result = (unint64_t)AxisValue.as<A>(_:)(&v218, &type metadata for Double, &type metadata for Double, &protocol witness table for Double);
  if ((BYTE8(v218) & 1) != 0)
    goto LABEL_29;
  v55 = *(double *)&v218;
  result = sub_100180C7C(a2, *(double *)&v218);
  if ((v56 & 1) != 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  if (result >= *(_QWORD *)(a1 + 16))
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v174 = *(_QWORD *)(a1 + 16);
  v190 = a6;
  v192 = a1;
  v173 = a1 + 32;
  v57 = a1 + 32 + 16 * result;
  v58 = *(double *)v57;
  v206 = *(unsigned __int8 *)(v57 + 8);
  v59 = objc_msgSend((id)objc_opt_self(NSUnitLength), "meters");
  v60 = sub_100081548();
  Measurement.init(value:unit:)(v59, v60, v55);
  v61 = v209;
  Measurement<>.converted(to:)(*(_QWORD *)(a3 + 48), v209);
  v189 = *(void (**)(char *, uint64_t))(v49 + 8);
  v189(v51, v61);
  v191 = type metadata accessor for MapsElevationChartViewModel(0);
  v62 = *(int *)(v191 + 72);
  v193 = a3;
  v63 = *(void **)(a3 + v62);
  v64 = Measurement.value.getter(v61);
  v65 = objc_msgSend(v63, "stringFromValue:unit:", sub_1000D6D98(), v64);
  v182 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
  v67 = v66;

  if ((v204 & 1) != 0)
  {
    v68 = sub_100008B04(&qword_101496820);
    v69 = swift_allocObject(v68, 48, 7);
    __asm { FMOV            V1.2D, #2.0 }
    *(_OWORD *)(v69 + 16) = xmmword_100E22F70;
    *(_OWORD *)(v69 + 32) = _Q1;
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(&v214, 0, 0, v69, 1.0, 10.0, 0.0);
    v75 = v214;
    v76 = v215;
    v77 = v216;
    v78 = v217;
  }
  else
  {
    v76 = 0;
    v77 = 0;
    v78 = 0;
    v75 = 0uLL;
  }
  v218 = v75;
  v219 = v76;
  v220 = v77;
  v221 = v78;
  AxisGridLine.init(centered:stroke:)(2, &v218);
  v79 = Font.init(_:)(v205);
  AxisMark.font(_:)(v79, v39, &protocol witness table for AxisGridLine);
  swift_release(v79);
  result = (*(uint64_t (**)(char *, uint64_t))(v203 + 8))(v41, v39);
  v80 = v191;
  v81 = v193;
  v82 = *(char **)(v193 + *(int *)(v191 + 56));
  v83 = v192;
  if (v206)
  {
    v82 = *(char **)&v82[OBJC_IVAR____TtC4Maps23MapsElevationChartStyle_gridHighlightColor];
    if (v82)
      goto LABEL_12;
    __break(1u);
  }
  v82 = *(char **)&v82[OBJC_IVAR____TtC4Maps23MapsElevationChartStyle_gridColor];
  if (!v82)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
LABEL_12:
  v84 = Color.init(_:)(v82);
  v212 = &protocol witness table for AxisGridLine;
  v213 = v84;
  v211 = v39;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v211, &opaque type descriptor for <<opaque return type of AxisMark.font(_:)>>, 1);
  v86 = v199;
  v87 = v201;
  AxisMark.foregroundStyle<A>(_:)(&v213, v201, &type metadata for Color, OpaqueTypeConformance2, &protocol witness table for Color);
  swift_release(v84);
  (*(void (**)(char *, uint64_t))(v200 + 8))(v43, v87);
  v88 = (uint64_t (*)(char *, char *, uint64_t))v210[4];
  v89 = v86;
  v90 = v202;
  v91 = v88(v207, v89, v202);
  v205 = v88;
  if (v206)
  {
    v211 = v182;
    v212 = v67;
    v92 = static UnitPoint.center.getter(v91);
    v94 = v93;
    v95 = v187;
    v96 = static AxisValueLabelCollisionResolution.greedy(priority:minimumSpacing:)(0x3FE0000000000000, 0, 2.0);
    v97 = v188;
    static AxisValueLabelOrientation.automatic.getter(v96);
    v98 = sub_10006C008();
    v99 = v180;
    result = AxisValueLabel.init<A>(_:centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:)(&v211, 2, *(_QWORD *)&v92, v94, 0, 0, 0, 1, v95, 2, v97, 0, 1, 0, 1, &type metadata for String, v98);
    v100 = *(void **)(*(_QWORD *)(v81 + *(int *)(v80 + 56))
                    + OBJC_IVAR____TtC4Maps23MapsElevationChartStyle_gridHighlightColor);
    if (v100)
    {
      v101 = Color.init(_:)(v100);
      v211 = v101;
      v102 = sub_100010D70(&qword_1014967F0, &qword_1014967E8, (const char *)&protocol conformance descriptor for AxisValueLabel<A>);
      v103 = v178;
      v104 = v184;
      AxisMark.foregroundStyle<A>(_:)(&v211, v184, &type metadata for Color, v102, &protocol witness table for Color);
      swift_release(v101);
      (*(void (**)(char *, uint64_t))(v183 + 8))(v99, v104);
      v105 = v185;
      v106 = v179;
      v107 = v186;
      (*(void (**)(char *, char *, uint64_t))(v185 + 32))(v179, v103, v186);
      v108 = (uint64_t)v181;
      (*(void (**)(char *, char *, uint64_t))(v105 + 16))(v181, v106, v107);
      v109 = sub_100008B04(&qword_101496818);
      swift_storeEnumTagMultiPayload(v108, v109, 0);
      v110 = v198;
      sub_10000C1FC(v108, v198, &qword_1014967E0);
      v111 = sub_100008B04(&qword_101496810);
      swift_storeEnumTagMultiPayload(v110, v111, 0);
      sub_100010CC4(v108, &qword_1014967E0);
      (*(void (**)(char *, uint64_t))(v105 + 8))(v106, v107);
      v112 = sub_100008B04(&qword_1014967D0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v112 - 8) + 56))(v110, 0, 1, v112);
      v113 = v110;
      v114 = v197;
      sub_1000207BC(v110, v197, &qword_1014967C0);
      v115 = v190;
LABEL_15:
      v116 = v196;
LABEL_20:
      v139 = v195;
LABEL_21:
      v140 = (void (*)(char *, char *, uint64_t))v210[2];
      v141 = v194;
      v142 = v207;
      v140(v194, v207, v90);
      sub_10000C1FC(v114, v113, &qword_1014967C0);
      v140(v139, v141, v90);
      sub_100070348(&qword_1014967B8, &qword_1014967C0, (uint64_t (*)(void))sub_100081130, (const char *)&protocol conformance descriptor for <A> A?);
      v143 = (uint64_t)&v139[*(int *)(v116 + 48)];
      sub_10000C1FC(v113, v143, &qword_1014967C0);
      v205(v115, v139, v90);
      sub_1000207BC(v143, (uint64_t)&v115[*(int *)(v116 + 48)], &qword_1014967C0);
      sub_100010CC4(v114, &qword_1014967C0);
      v144 = (void (*)(char *, uint64_t))v210[1];
      v144(v142, v90);
      v189(v208, v209);
      sub_100010CC4(v113, &qword_1014967C0);
      return ((uint64_t (*)(char *, uint64_t))v144)(v141, v90);
    }
    goto LABEL_32;
  }
  if (v58 == *(double *)(v83 + 32) && (*(_BYTE *)(v83 + 40) & 1) == 0)
  {
    v211 = v182;
    v212 = v67;
    v117 = static UnitPoint.topLeading.getter(v91);
    v119 = v118;
    v120 = v187;
    v121 = static AxisValueLabelCollisionResolution.greedy(priority:minimumSpacing:)(0x3FE0000000000000, 0, 1.0);
    v122 = v188;
    static AxisValueLabelOrientation.automatic.getter(v121);
    v123 = sub_10006C008();
    v168 = v120;
    v124 = v177;
    result = AxisValueLabel.init<A>(_:centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:)(&v211, 2, *(_QWORD *)&v117, v119, 0, 0, 0, 1, v168, 2, v122, 0, 1, 0, 1, &type metadata for String, v123);
    v125 = *(void **)(*(_QWORD *)(v81 + *(int *)(v80 + 56)) + OBJC_IVAR____TtC4Maps23MapsElevationChartStyle_labelColor);
    v115 = v190;
    v126 = v198;
    v127 = v197;
    if (v125)
    {
      v128 = Color.init(_:)(v125);
      v211 = v128;
      v129 = sub_100010D70(&qword_1014967F0, &qword_1014967E8, (const char *)&protocol conformance descriptor for AxisValueLabel<A>);
      v130 = v175;
      v131 = v184;
      AxisMark.foregroundStyle<A>(_:)(&v211, v184, &type metadata for Color, v129, &protocol witness table for Color);
      swift_release(v128);
      (*(void (**)(char *, uint64_t))(v183 + 8))(v124, v131);
      v132 = v185;
      v133 = v176;
      v134 = v186;
      (*(void (**)(char *, char *, uint64_t))(v185 + 32))(v176, v130, v186);
      v135 = (uint64_t)v181;
      (*(void (**)(char *, char *, uint64_t))(v132 + 16))(v181, v133, v134);
      v136 = sub_100008B04(&qword_101496818);
      swift_storeEnumTagMultiPayload(v135, v136, 1);
      sub_10000C1FC(v135, v126, &qword_1014967E0);
      v137 = sub_100008B04(&qword_101496810);
      swift_storeEnumTagMultiPayload(v126, v137, 0);
      sub_100010CC4(v135, &qword_1014967E0);
      (*(void (**)(char *, uint64_t))(v132 + 8))(v133, v134);
      v138 = sub_100008B04(&qword_1014967D0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v138 - 8) + 56))(v126, 0, 1, v138);
      sub_1000207BC(v126, v127, &qword_1014967C0);
      v116 = v196;
      v113 = v126;
      v114 = v127;
      goto LABEL_20;
    }
    goto LABEL_33;
  }
  v145 = v173 + 16 * v174;
  v147 = *(double *)(v145 - 16);
  v146 = v145 - 16;
  v115 = v190;
  v114 = v197;
  if (v58 != v147 || (*(_BYTE *)(v146 + 8) & 1) != 0)
  {
    swift_bridgeObjectRelease(v67);
    v148 = sub_100008B04(&qword_1014967D0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v148 - 8) + 56))(v114, 1, 1, v148);
    v116 = v196;
    v139 = v195;
    v113 = v198;
    goto LABEL_21;
  }
  v211 = v182;
  v212 = v67;
  v149 = static UnitPoint.topTrailing.getter(v91);
  v151 = v150;
  v152 = v187;
  v153 = static AxisValueLabelCollisionResolution.greedy(priority:minimumSpacing:)(0x3FE0000000000000, 0, 1.0);
  v154 = v188;
  static AxisValueLabelOrientation.automatic.getter(v153);
  v155 = sub_10006C008();
  v169 = v152;
  v156 = v172;
  result = AxisValueLabel.init<A>(_:centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:)(&v211, 2, *(_QWORD *)&v149, v151, 0, 0, 0, 1, v169, 2, v154, 0, 1, 0, 1, &type metadata for String, v155);
  v157 = *(void **)(*(_QWORD *)(v81 + *(int *)(v80 + 56)) + OBJC_IVAR____TtC4Maps23MapsElevationChartStyle_labelColor);
  if (v157)
  {
    v158 = Color.init(_:)(v157);
    v211 = v158;
    v159 = sub_100010D70(&qword_1014967F0, &qword_1014967E8, (const char *)&protocol conformance descriptor for AxisValueLabel<A>);
    v160 = v170;
    v161 = v184;
    AxisMark.foregroundStyle<A>(_:)(&v211, v184, &type metadata for Color, v159, &protocol witness table for Color);
    swift_release(v158);
    (*(void (**)(char *, uint64_t))(v183 + 8))(v156, v161);
    v162 = v185;
    v163 = v171;
    v164 = v186;
    (*(void (**)(char *, char *, uint64_t))(v185 + 32))(v171, v160, v186);
    v165 = v198;
    (*(void (**)(uint64_t, char *, uint64_t))(v162 + 16))(v198, v163, v164);
    v166 = sub_100008B04(&qword_101496810);
    swift_storeEnumTagMultiPayload(v165, v166, 1);
    (*(void (**)(char *, uint64_t))(v162 + 8))(v163, v164);
    v167 = sub_100008B04(&qword_1014967D0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v167 - 8) + 56))(v165, 0, 1, v167);
    v113 = v165;
    sub_1000207BC(v165, v114, &qword_1014967C0);
    goto LABEL_15;
  }
LABEL_34:
  __break(1u);
  return result;
}

_QWORD *sub_10007953C@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *result;
  uint64_t v61;
  void *v62;
  _QWORD *v63;
  uint64_t v64;
  void (*v65)(char *, char *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  unint64_t v88;
  char *v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  char *v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  unint64_t v125;
  char *v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  void (*v136)(char *, char *, uint64_t);
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void (*v140)(char *, uint64_t);
  char *v141;
  char *v142;
  char *v143;
  uint64_t v144;
  char *v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  void (*v162)(uint64_t, char *, uint64_t);
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  double v174;
  uint64_t v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  __int128 v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;

  v159 = a4;
  v161 = a1;
  v169 = a5;
  v168 = sub_100008B04(&qword_1014967F8);
  __chkstk_darwin(v168);
  v167 = (char *)&v144 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008B04(&qword_1014967E0);
  v9 = __chkstk_darwin(v8);
  v153 = (char *)&v144 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AxisValueLabelOrientation(0, v9);
  v12 = __chkstk_darwin(v11);
  v158 = (char *)&v144 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for AxisValueLabelCollisionResolution(0, v12);
  __chkstk_darwin(v14);
  v157 = (char *)&v144 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = sub_100008B04(&qword_1014967E8);
  v154 = *(_QWORD *)(v155 - 8);
  __chkstk_darwin(v155);
  v147 = (char *)&v144 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v150 = (char *)&v144 - v18;
  __chkstk_darwin(v19);
  v152 = (char *)&v144 - v20;
  v156 = sub_100008B04(&qword_101496800);
  v160 = *(_QWORD *)(v156 - 8);
  __chkstk_darwin(v156);
  v145 = (char *)&v144 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v146 = (char *)&v144 - v23;
  __chkstk_darwin(v24);
  v148 = (char *)&v144 - v25;
  __chkstk_darwin(v26);
  v149 = (char *)&v144 - v27;
  __chkstk_darwin(v28);
  v151 = (char *)&v144 - v29;
  __chkstk_darwin(v30);
  v32 = (char *)&v144 - v31;
  v164 = sub_100008B04(&qword_1014967D0);
  v163 = *(_QWORD *)(v164 - 8);
  __chkstk_darwin(v164);
  v34 = (char *)&v144 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_100008B04(&qword_1014967C0);
  __chkstk_darwin(v35);
  v166 = (char *)&v144 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  v165 = (uint64_t)&v144 - v38;
  v39 = type metadata accessor for AxisGridLine(0);
  v40 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v42 = (char *)&v144 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = sub_100008B04(&qword_101496808);
  v173 = *(_QWORD *)(v170 - 8);
  __chkstk_darwin(v170);
  v171 = (char *)&v144 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44);
  v46 = (char *)&v144 - v45;
  __chkstk_darwin(v47);
  v172 = (char *)&v144 - v48;
  if ((a2 & 1) != 0)
  {
    v49 = sub_100008B04(&qword_101496820);
    v50 = swift_allocObject(v49, 48, 7);
    __asm { FMOV            V1.2D, #2.0 }
    *(_OWORD *)(v50 + 16) = xmmword_100E22F70;
    *(_OWORD *)(v50 + 32) = _Q1;
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(&v176, 0, 0, v50, 1.0, 10.0, 0.0);
    v56 = v176;
    v57 = v177;
    v58 = v178;
    v59 = v179;
  }
  else
  {
    v57 = 0;
    v58 = 0;
    v59 = 0;
    v56 = 0uLL;
  }
  v180 = v56;
  v181 = v57;
  v182 = v58;
  v183 = v59;
  AxisGridLine.init(centered:stroke:)(2, &v180);
  result = (_QWORD *)type metadata accessor for MapsElevationChartViewModel(0);
  v61 = *((int *)result + 14);
  v62 = *(void **)(*(_QWORD *)(a3 + v61) + OBJC_IVAR____TtC4Maps23MapsElevationChartStyle_gridColor);
  if (!v62)
    goto LABEL_24;
  v63 = result;
  v64 = Color.init(_:)(v62);
  v174 = *(double *)&v64;
  AxisMark.foregroundStyle<A>(_:)(&v174, v39, &type metadata for Color, &protocol witness table for AxisGridLine, &protocol witness table for Color);
  swift_release(v64);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v39);
  v65 = *(void (**)(char *, char *, uint64_t))(v173 + 32);
  v66 = v170;
  v65(v172, v46, v170);
  v67 = *(_QWORD *)(a3 + v61);
  _ZF = *(_BYTE *)(v67 + OBJC_IVAR____TtC4Maps23MapsElevationChartStyle_contextStyle) == 2;
  v162 = (void (*)(uint64_t, char *, uint64_t))v65;
  if (_ZF)
  {
    v68 = v66;
    v69 = 1;
    v70 = v168;
    v71 = v167;
    v72 = (uint64_t)v166;
    v73 = v165;
    v74 = v171;
    v75 = v164;
    v76 = v163;
LABEL_22:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v76 + 56))(v73, v69, 1, v75);
    v135 = v172;
    v134 = v173;
    v136 = *(void (**)(char *, char *, uint64_t))(v173 + 16);
    v136(v74, v172, v68);
    sub_10000C1FC(v73, v72, &qword_1014967C0);
    v136(v71, v74, v68);
    sub_100070348(&qword_1014967B8, &qword_1014967C0, (uint64_t (*)(void))sub_100081130, (const char *)&protocol conformance descriptor for <A> A?);
    v137 = v70;
    v138 = (uint64_t)&v71[*(int *)(v70 + 48)];
    sub_10000C1FC(v72, v138, &qword_1014967C0);
    v139 = v169;
    v162(v169, v71, v68);
    sub_1000207BC(v138, v139 + *(int *)(v137 + 48), &qword_1014967C0);
    sub_100010CC4(v73, &qword_1014967C0);
    v140 = *(void (**)(char *, uint64_t))(v134 + 8);
    v140(v135, v68);
    sub_100010CC4(v72, &qword_1014967C0);
    return (_QWORD *)((uint64_t (*)(char *, uint64_t))v140)(v171, v68);
  }
  result = AxisValue.as<A>(_:)(&v174, &type metadata for Double, &type metadata for Double, &protocol witness table for Double);
  if ((v175 & 1) != 0)
    goto LABEL_25;
  v77 = *(_QWORD *)(v159 + 16);
  v78 = v160;
  if (!v77)
  {
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v79 = (uint64_t)v34;
  if (v174 == *(double *)(v159 + 32))
  {
    v80 = *(void **)(a3 + *((int *)v63 + 19));
    result = AxisValue.as<A>(_:)(&v174, &type metadata for Double, &type metadata for Double, &protocol witness table for Double);
    if ((v175 & 1) == 0)
    {
      v81 = objc_msgSend(v80, "stringFromValue:unit:", sub_1000D6D98(), v174);
      v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(v81);
      v84 = v83;

      v174 = *(double *)&v82;
      v175 = v84;
      v85 = v157;
      v86 = static AxisValueLabelCollisionResolution.greedy(priority:minimumSpacing:)(0x3FE0000000000000, 0, 2.0);
      v87 = v158;
      static AxisValueLabelOrientation.automatic.getter(v86);
      v88 = sub_10006C008();
      v141 = v85;
      v89 = v152;
      result = (_QWORD *)AxisValueLabel.init<A>(_:centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:)(&v174, 2, 0, 0, 1, 0, 0, 1, v141, 2, v87, 0, 1, 0, 1, &type metadata for String, v88);
      v90 = *(void **)(v67 + OBJC_IVAR____TtC4Maps23MapsElevationChartStyle_labelColor);
      if (v90)
      {
        v91 = Color.init(_:)(v90);
        v174 = *(double *)&v91;
        v92 = sub_100010D70(&qword_1014967F0, &qword_1014967E8, (const char *)&protocol conformance descriptor for AxisValueLabel<A>);
        v93 = v151;
        v94 = v155;
        AxisMark.foregroundStyle<A>(_:)(&v174, v155, &type metadata for Color, v92, &protocol witness table for Color);
        swift_release(v91);
        (*(void (**)(char *, uint64_t))(v154 + 8))(v89, v94);
        v95 = v156;
        (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v32, v93, v156);
        v96 = (uint64_t)v153;
        (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v153, v32, v95);
        v97 = sub_100008B04(&qword_101496818);
        swift_storeEnumTagMultiPayload(v96, v97, 0);
        sub_10000C1FC(v96, (uint64_t)v34, &qword_1014967E0);
        v98 = sub_100008B04(&qword_101496810);
        swift_storeEnumTagMultiPayload(v34, v98, 0);
        sub_100010CC4(v96, &qword_1014967E0);
LABEL_21:
        v133 = v168;
        v71 = v167;
        v72 = (uint64_t)v166;
        v68 = v170;
        (*(void (**)(char *, uint64_t))(v78 + 8))(v32, v95);
        v73 = v165;
        sub_1000207BC(v79, v165, &qword_1014967D0);
        v69 = 0;
        v74 = v171;
        v75 = v164;
        v76 = v163;
        v70 = v133;
        goto LABEL_22;
      }
      goto LABEL_27;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v99 = *(void **)(a3 + *((int *)v63 + 19));
  if (v174 == *(double *)(v159 + 32 + 8 * v77 - 8))
  {
    result = AxisValue.as<A>(_:)(&v174, &type metadata for Double, &type metadata for Double, &protocol witness table for Double);
    if ((v175 & 1) == 0)
    {
      v100 = objc_msgSend(v99, "stringFromValue:unit:", sub_1000D6D98(), v174);
      v101 = static String._unconditionallyBridgeFromObjectiveC(_:)(v100);
      v103 = v102;

      v174 = *(double *)&v101;
      v175 = v103;
      v104 = v157;
      v105 = static AxisValueLabelCollisionResolution.greedy(priority:minimumSpacing:)(0x3FE0000000000000, 0, 2.0);
      v106 = v158;
      static AxisValueLabelOrientation.automatic.getter(v105);
      v107 = sub_10006C008();
      v142 = v104;
      v108 = v150;
      result = (_QWORD *)AxisValueLabel.init<A>(_:centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:)(&v174, 2, 0, 0, 1, 0, 0, 1, v142, 2, v106, 0, 1, 0, 1, &type metadata for String, v107);
      v109 = *(void **)(v67 + OBJC_IVAR____TtC4Maps23MapsElevationChartStyle_labelColor);
      if (v109)
      {
        v110 = Color.init(_:)(v109);
        v174 = *(double *)&v110;
        v111 = sub_100010D70(&qword_1014967F0, &qword_1014967E8, (const char *)&protocol conformance descriptor for AxisValueLabel<A>);
        v112 = v148;
        v113 = v155;
        AxisMark.foregroundStyle<A>(_:)(&v174, v155, &type metadata for Color, v111, &protocol witness table for Color);
        swift_release(v110);
        (*(void (**)(char *, uint64_t))(v154 + 8))(v108, v113);
        v114 = v149;
        v95 = v156;
        (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v149, v112, v156);
        v115 = (uint64_t)v153;
        (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v153, v114, v95);
        v116 = sub_100008B04(&qword_101496818);
        swift_storeEnumTagMultiPayload(v115, v116, 1);
        sub_10000C1FC(v115, (uint64_t)v34, &qword_1014967E0);
        v117 = sub_100008B04(&qword_101496810);
        swift_storeEnumTagMultiPayload(v34, v117, 0);
        sub_100010CC4(v115, &qword_1014967E0);
        v32 = v114;
        goto LABEL_21;
      }
      goto LABEL_29;
    }
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  result = AxisValue.as<A>(_:)(&v174, &type metadata for Double, &type metadata for Double, &protocol witness table for Double);
  if ((v175 & 1) != 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v118 = objc_msgSend(v99, "stringFromValue:unit:", sub_1000D6D98(), v174);
  v119 = static String._unconditionallyBridgeFromObjectiveC(_:)(v118);
  v121 = v120;

  v174 = *(double *)&v119;
  v175 = v121;
  v122 = v157;
  v123 = static AxisValueLabelCollisionResolution.greedy(priority:minimumSpacing:)(0x3FE0000000000000, 0, 1.0);
  v124 = v158;
  static AxisValueLabelOrientation.automatic.getter(v123);
  v125 = sub_10006C008();
  v143 = v122;
  v126 = v147;
  result = (_QWORD *)AxisValueLabel.init<A>(_:centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:)(&v174, 2, 0, 0, 1, 0, 0, 1, v143, 2, v124, 0, 1, 0, 1, &type metadata for String, v125);
  v127 = *(void **)(v67 + OBJC_IVAR____TtC4Maps23MapsElevationChartStyle_labelColor);
  if (v127)
  {
    v128 = Color.init(_:)(v127);
    v174 = *(double *)&v128;
    v129 = sub_100010D70(&qword_1014967F0, &qword_1014967E8, (const char *)&protocol conformance descriptor for AxisValueLabel<A>);
    v130 = v145;
    v131 = v155;
    AxisMark.foregroundStyle<A>(_:)(&v174, v155, &type metadata for Color, v129, &protocol witness table for Color);
    swift_release(v128);
    (*(void (**)(char *, uint64_t))(v154 + 8))(v126, v131);
    v32 = v146;
    v95 = v156;
    (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v146, v130, v156);
    (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v34, v32, v95);
    v132 = sub_100008B04(&qword_101496810);
    swift_storeEnumTagMultiPayload(v34, v132, 1);
    goto LABEL_21;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_10007A320@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  double v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  _QWORD v52[2];
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  double v64;

  v54 = a2;
  v52[0] = a1;
  v62 = a3;
  v3 = sub_100008B04(&qword_10149A1F0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008B04(&qword_101496770);
  __chkstk_darwin(v7);
  v56 = (char *)v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v63 = (char *)v52 - v10;
  v12 = __chkstk_darwin(v11);
  v53 = (char *)v52 - v13;
  v59 = type metadata accessor for BarMark(0, v12);
  v61 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v55 = (char *)v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_100008B04(&qword_101496760);
  v58 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v57 = (char *)v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = LocalizedStringKey.init(stringLiteral:)(0x74657366664FLL, 0xE600000000000000);
  v18 = v17;
  v20 = v19;
  v22 = v21;
  v52[1] = type metadata accessor for MapsElevationChartViewModel.ElevationDatum(0);
  v23 = objc_msgSend((id)objc_opt_self(NSUnitLength), "meters");
  Measurement<>.converted(to:)(v23, v3);

  v24 = Measurement.value.getter(v3);
  v25 = *(void (**)(char *, uint64_t))(v4 + 8);
  v25(v6, v3);
  v64 = v24;
  static PlottableValue.value(_:_:)(v16, v18, v20 & 1, v22, &v64, &type metadata for Double, &protocol witness table for Double);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v18);
  v26 = LocalizedStringKey.init(stringLiteral:)(0x6F69746176656C45, 0xEA0000000000306ELL);
  v28 = v27;
  v30 = v29;
  v32 = v31;
  v33 = v54;
  v34 = sub_1000D6BA0();
  if (v34 <= 0.0)
    v34 = 0.0;
  v64 = v34;
  static PlottableValue.value(_:_:)(v26, v28, v30 & 1, v32, &v64, &type metadata for Double, &protocol witness table for Double);
  swift_bridgeObjectRelease(v32);
  swift_bridgeObjectRelease(v28);
  v35 = LocalizedStringKey.init(stringLiteral:)(0x6F69746176656C45, 0xE90000000000006ELL);
  v37 = v36;
  v39 = v38;
  v41 = v40;
  v42 = v52[0];
  Measurement<>.converted(to:)(*(_QWORD *)(v33 + 32), v3);
  v43 = Measurement.value.getter(v3);
  v25(v6, v3);
  v64 = v43;
  v44 = v56;
  static PlottableValue.value(_:_:)(v35, v37, v39 & 1, v41, &v64, &type metadata for Double, &protocol witness table for Double);
  swift_bridgeObjectRelease(v41);
  swift_bridgeObjectRelease(v37);
  v45 = type metadata accessor for MapsElevationChartViewModel(0);
  v46 = v55;
  BarMark.init<A, B>(x:yStart:yEnd:width:)(v53, v63, v44, *(_QWORD *)(*(_QWORD *)(v33 + *(int *)(v45 + 56)) + OBJC_IVAR____TtC4Maps23MapsElevationChartStyle_barWidth), 0, &type metadata for Double, &type metadata for Double, &protocol witness table for Double, &protocol witness table for Double);
  v47 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + *(int *)(v45 + 64)))(v42, v33);
  v48 = Color.init(_:)(v47);
  v64 = *(double *)&v48;
  v49 = v57;
  v50 = v59;
  ChartContent.foregroundStyle<A>(_:)(&v64, v59, &type metadata for Color, &protocol witness table for BarMark, &protocol witness table for Color);
  swift_release(v48);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v46, v50);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v58 + 32))(v62, v49, v60);
}

_QWORD *sub_10007A794@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *result;
  void *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  double v47;
  id v48;
  unint64_t v49;
  char *v50;
  char *v51;
  void (*v52)(char *, uint64_t);
  double v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  unint64_t v61;
  char *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, char *, uint64_t);
  char *v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  char *v73;
  void (*v74)(char *, char *, uint64_t);
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  void (*v81)(char *, uint64_t);
  void (*v82)(char *, uint64_t);
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  double v106;
  uint64_t v107;
  _OWORD v108[2];
  uint64_t v109;
  _OWORD v110[2];
  uint64_t v111;

  v104 = a1;
  v95 = a3;
  v94 = sub_100008B04(&qword_101496878);
  v4 = __chkstk_darwin(v94);
  v93 = (char *)&v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AxisValueLabelOrientation(0, v4);
  v7 = __chkstk_darwin(v6);
  v101 = (char *)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AxisValueLabelCollisionResolution(0, v7);
  __chkstk_darwin(v9);
  v100 = (char *)&v84 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008B04(&qword_10149A1F0);
  v99 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v97 = (char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v98 = (char *)&v84 - v14;
  v89 = sub_100008B04(&qword_1014967E8);
  v87 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v102 = (char *)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_100008B04(&qword_101496800);
  v91 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v92 = (char *)&v84 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v86 = (char *)&v84 - v18;
  __chkstk_darwin(v19);
  v90 = (char *)&v84 - v20;
  v21 = type metadata accessor for AxisGridLine(0);
  v103 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v23 = (char *)&v84 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100008B04(&qword_101496808);
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v105 = (char *)&v84 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v29 = (char *)&v84 - v28;
  __chkstk_darwin(v30);
  v32 = (char *)&v84 - v31;
  v33 = sub_100008B04(&qword_101496820);
  v34 = swift_allocObject(v33, 48, 7);
  __asm { FMOV            V1.2D, #2.0 }
  *(_OWORD *)(v34 + 16) = xmmword_100E22F70;
  *(_OWORD *)(v34 + 32) = _Q1;
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v108, 0, 0, v34, 1.0, 10.0, 0.0);
  v110[0] = v108[0];
  v110[1] = v108[1];
  v111 = v109;
  AxisGridLine.init(centered:stroke:)(2, v110);
  result = (_QWORD *)type metadata accessor for MapsElevationChartViewModel(0);
  v96 = *((int *)result + 14);
  v41 = *(void **)(*(_QWORD *)(a2 + v96) + OBJC_IVAR____TtC4Maps23MapsElevationChartStyle_gridColor);
  if (!v41)
  {
    __break(1u);
    goto LABEL_6;
  }
  v42 = result;
  v43 = a2;
  v44 = Color.init(_:)(v41);
  v106 = *(double *)&v44;
  AxisMark.foregroundStyle<A>(_:)(&v106, v21, &type metadata for Color, &protocol witness table for AxisGridLine, &protocol witness table for Color);
  swift_release(v44);
  (*(void (**)(char *, uint64_t))(v103 + 8))(v23, v21);
  v103 = *(_QWORD *)(v25 + 32);
  ((void (*)(char *, char *, uint64_t))v103)(v32, v29, v24);
  v45 = *(void **)(v43 + *((int *)v42 + 18));
  result = AxisValue.as<A>(_:)(&v106, &type metadata for Double, &type metadata for Double, &protocol witness table for Double);
  if ((v107 & 1) != 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v46 = v24;
  v104 = v32;
  v47 = v106;
  v48 = objc_msgSend((id)objc_opt_self(NSUnitLength), "meters");
  v49 = sub_100081548();
  v50 = v97;
  Measurement.init(value:unit:)(v48, v49, v47);
  v51 = v98;
  Measurement<>.converted(to:)(*(_QWORD *)(v43 + 48), v11);
  v52 = *(void (**)(char *, uint64_t))(v99 + 8);
  v52(v50, v11);
  v53 = Measurement.value.getter(v11);
  v52(v51, v11);
  v54 = objc_msgSend(v45, "stringFromValue:unit:", sub_1000D6D98(), v53);
  v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
  v57 = v56;

  v106 = *(double *)&v55;
  v107 = v57;
  v58 = v100;
  v59 = static AxisValueLabelCollisionResolution.automatic.getter();
  v60 = v101;
  static AxisValueLabelOrientation.automatic.getter(v59);
  v61 = sub_10006C008();
  v83 = v58;
  v62 = v102;
  result = (_QWORD *)AxisValueLabel.init<A>(_:centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:)(&v106, 2, 0, 0, 1, 0, 0, 1, v83, 2, v60, 0, 1, 0, 1, &type metadata for String, v61);
  v63 = *(void **)(*(_QWORD *)(v43 + v96) + OBJC_IVAR____TtC4Maps23MapsElevationChartStyle_labelColor);
  if (v63)
  {
    v64 = Color.init(_:)(v63);
    v106 = *(double *)&v64;
    v65 = sub_100010D70(&qword_1014967F0, &qword_1014967E8, (const char *)&protocol conformance descriptor for AxisValueLabel<A>);
    v66 = v86;
    v67 = v89;
    AxisMark.foregroundStyle<A>(_:)(&v106, v89, &type metadata for Color, v65, &protocol witness table for Color);
    swift_release(v64);
    (*(void (**)(char *, uint64_t))(v87 + 8))(v62, v67);
    v68 = v91;
    v69 = *(void (**)(char *, char *, uint64_t))(v91 + 32);
    v70 = v90;
    v71 = v88;
    v69(v90, v66, v88);
    v85 = v25;
    v72 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
    v73 = v105;
    v72(v105, v104, v46);
    v74 = *(void (**)(char *, char *, uint64_t))(v68 + 16);
    v75 = v92;
    v74(v92, v70, v71);
    v76 = v46;
    v77 = v93;
    v72(v93, v73, v76);
    v78 = v94;
    v79 = &v77[*(int *)(v94 + 48)];
    v74(v79, v75, v71);
    v80 = v95;
    ((void (*)(uint64_t, char *, uint64_t))v103)(v95, v77, v76);
    v69((char *)(v80 + *(int *)(v78 + 48)), v79, v71);
    v81 = *(void (**)(char *, uint64_t))(v68 + 8);
    v81(v70, v71);
    v82 = *(void (**)(char *, uint64_t))(v85 + 8);
    v82(v104, v76);
    v81(v75, v71);
    return (_QWORD *)((uint64_t (*)(char *, uint64_t))v82)(v105, v76);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_10007AF04(uint64_t a1, uint64_t (*a2)(__n128), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;

  v28 = a4;
  v7 = type metadata accessor for AxisMarkPosition(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AxisMarkPreset(0, v8);
  __chkstk_darwin(v11);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for MapsElevationChart(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  v17 = __chkstk_darwin(v14);
  v18 = a2(v17);
  sub_1000202AC(a1, (uint64_t)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for MapsElevationChart);
  v19 = *(unsigned __int8 *)(v15 + 80);
  v20 = (v19 + 16) & ~v19;
  v21 = swift_allocObject(a3, v20 + v16, v19 | 7);
  v22 = sub_100080DD8((uint64_t)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v21 + v20);
  v23 = static AxisMarkPreset.automatic.getter(v22);
  static AxisMarkPosition.automatic.getter(v23);
  v24 = sub_100008B04(&qword_101496868);
  v25 = sub_100081DDC();
  return AxisMarks.init<A>(preset:position:values:content:)(v13, v10, v18, v28, v21, v24, &type metadata for Double, v25, &protocol witness table for Double);
}

_QWORD *sub_10007B0A0@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _QWORD *result;
  void *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  void *v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  char *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  char *v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  char *v57;
  void (*v58)(char *, char *, uint64_t);
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t);
  void (*v65)(char *, uint64_t);
  char *v66;
  uint64_t v67;
  void (*v68)(uint64_t, char *, uint64_t);
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  double v85;
  uint64_t v86;
  _OWORD v87[2];
  uint64_t v88;

  v83 = a1;
  v78 = a3;
  v77 = sub_100008B04(&qword_101496878);
  v4 = __chkstk_darwin(v77);
  v76 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AxisValueLabelOrientation(0, v4);
  v7 = __chkstk_darwin(v6);
  v81 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AxisValueLabelCollisionResolution(0, v7);
  __chkstk_darwin(v9);
  v80 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_100008B04(&qword_1014967E8);
  v70 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v82 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_100008B04(&qword_101496800);
  v74 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v75 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v69 = (char *)&v67 - v14;
  __chkstk_darwin(v15);
  v72 = (char *)&v67 - v16;
  v17 = type metadata accessor for AxisGridLine(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100008B04(&qword_101496808);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v84 = (char *)&v67 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v26 = (char *)&v67 - v25;
  __chkstk_darwin(v27);
  v29 = (char *)&v67 - v28;
  v88 = 0;
  memset(v87, 0, sizeof(v87));
  AxisGridLine.init(centered:stroke:)(2, v87);
  result = (_QWORD *)type metadata accessor for MapsElevationChartViewModel(0);
  v79 = *((int *)result + 14);
  v31 = *(void **)(*(_QWORD *)(a2 + v79) + OBJC_IVAR____TtC4Maps23MapsElevationChartStyle_gridColor);
  if (!v31)
  {
    __break(1u);
    goto LABEL_6;
  }
  v32 = result;
  v33 = a2;
  v34 = Color.init(_:)(v31);
  v85 = *(double *)&v34;
  AxisMark.foregroundStyle<A>(_:)(&v85, v17, &type metadata for Color, &protocol witness table for AxisGridLine, &protocol witness table for Color);
  swift_release(v34);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  v35 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
  v35(v29, v26, v21);
  v36 = *(void **)(v33 + *((int *)v32 + 19));
  result = AxisValue.as<A>(_:)(&v85, &type metadata for Double, &type metadata for Double, &protocol witness table for Double);
  if ((v86 & 1) != 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v37 = v21;
  v68 = (void (*)(uint64_t, char *, uint64_t))v35;
  v83 = v29;
  v38 = objc_msgSend(v36, "stringFromValue:unit:", sub_1000D6D98(), v85);
  v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
  v41 = v40;

  v85 = *(double *)&v39;
  v86 = v41;
  v42 = v80;
  v43 = static AxisValueLabelCollisionResolution.automatic.getter();
  v44 = v81;
  static AxisValueLabelOrientation.automatic.getter(v43);
  v45 = sub_10006C008();
  v66 = v42;
  v46 = v82;
  result = (_QWORD *)AxisValueLabel.init<A>(_:centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:)(&v85, 2, 0, 0, 1, 0, 0, 1, v66, 2, v44, 0, 1, 0, 1, &type metadata for String, v45);
  v47 = *(void **)(*(_QWORD *)(v33 + v79) + OBJC_IVAR____TtC4Maps23MapsElevationChartStyle_labelColor);
  if (v47)
  {
    v48 = Color.init(_:)(v47);
    v85 = *(double *)&v48;
    v49 = sub_100010D70(&qword_1014967F0, &qword_1014967E8, (const char *)&protocol conformance descriptor for AxisValueLabel<A>);
    v50 = v69;
    v51 = v73;
    AxisMark.foregroundStyle<A>(_:)(&v85, v73, &type metadata for Color, v49, &protocol witness table for Color);
    swift_release(v48);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v46, v51);
    v52 = v74;
    v53 = *(void (**)(char *, char *, uint64_t))(v74 + 32);
    v54 = v72;
    v55 = v71;
    v53(v72, v50, v71);
    v67 = v22;
    v56 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
    v57 = v84;
    v56(v84, v83, v37);
    v58 = *(void (**)(char *, char *, uint64_t))(v52 + 16);
    v59 = v75;
    v58(v75, v54, v55);
    v60 = v76;
    v56(v76, v57, v37);
    v61 = v77;
    v62 = &v60[*(int *)(v77 + 48)];
    v58(v62, v59, v55);
    v63 = v78;
    v68(v78, v60, v37);
    v53((char *)(v63 + *(int *)(v61 + 48)), v62, v55);
    v64 = *(void (**)(char *, uint64_t))(v52 + 8);
    v64(v54, v55);
    v65 = *(void (**)(char *, uint64_t))(v67 + 8);
    v65(v83, v37);
    v64(v59, v55);
    return (_QWORD *)((uint64_t (*)(char *, uint64_t))v65)(v84, v37);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_10007B67C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v2 = type metadata accessor for MapsElevationChart(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v16 = *(_QWORD *)(a1 + 16);
  v5 = v16;
  KeyPath = swift_getKeyPath(&unk_100E27988);
  sub_1000202AC(a1, (uint64_t)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for MapsElevationChart);
  v7 = *(unsigned __int8 *)(v3 + 80);
  v8 = (v7 + 16) & ~v7;
  v9 = swift_allocObject(&unk_10119F010, v8 + v4, v7 | 7);
  sub_100080DD8((uint64_t)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v9 + v8);
  swift_bridgeObjectRetain(v5);
  v10 = sub_100008B04(&qword_101496758);
  v11 = sub_100008B04(&qword_1014968A0);
  v12 = sub_100010D70(&qword_101496768, &qword_101496758, (const char *)&protocol conformance descriptor for [A]);
  v13 = sub_100081EF4();
  return ForEach<>.init(_:id:content:)(&v16, KeyPath, sub_100082070, v9, v10, v11, v12, &protocol witness table for Int, v13);
}

uint64_t sub_10007B7D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  double v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  char *v51;
  char *v52;
  _QWORD *v53;
  uint64_t v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  char *v60;
  uint64_t v61;
  uint64_t OpaqueTypeConformance2;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  double v72;
  void (*v73)(char *, uint64_t);
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  void (*v98)(char *, char *, uint64_t);
  char *v99;
  uint64_t v100;
  void (*v101)(char *, char *, uint64_t);
  char *v102;
  char *v103;
  uint64_t v104;
  void (*v105)(char *, char *, uint64_t);
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  void (*v110)(char *, uint64_t);
  void (*v111)(char *, uint64_t);
  char *v113;
  uint64_t v114;
  char *v115;
  char *v116;
  id v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  void (*v139)(char *, uint64_t);
  char *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  _OWORD v152[2];
  uint64_t v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;

  v141 = a2;
  v114 = a1;
  v136 = a3;
  v135 = sub_100008B04(&qword_1014968C0);
  __chkstk_darwin(v135);
  v134 = (char *)&v113 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = type metadata accessor for LineMark(0);
  v127 = *(_QWORD *)(v125 - 8);
  __chkstk_darwin(v125);
  v123 = (char *)&v113 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = sub_100008B04(&qword_1014968B8);
  v130 = *(_QWORD *)(v129 - 8);
  __chkstk_darwin(v129);
  v124 = (char *)&v113 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = sub_100008B04(&qword_1014968B0);
  v133 = *(_QWORD *)(v132 - 8);
  __chkstk_darwin(v132);
  v126 = (char *)&v113 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = sub_100008B04(&qword_1014968C8);
  v145 = *(_QWORD *)(v131 - 8);
  __chkstk_darwin(v131);
  v128 = (char *)&v113 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v144 = (char *)&v113 - v10;
  v11 = sub_100008B04(&qword_10149A1F0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v113 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100008B04(&qword_101496770);
  __chkstk_darwin(v15);
  v115 = (char *)&v113 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v138 = (char *)&v113 - v18;
  __chkstk_darwin(v19);
  v137 = (char *)&v113 - v20;
  v119 = type metadata accessor for AreaMark(0);
  v120 = *(_QWORD *)(v119 - 8);
  __chkstk_darwin(v119);
  v113 = (char *)&v113 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = sub_100008B04(&qword_1014968A8);
  v122 = *(_QWORD *)(v121 - 8);
  __chkstk_darwin(v121);
  v116 = (char *)&v113 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = sub_100008B04(&qword_1014968D0);
  v146 = *(_QWORD **)(v143 - 8);
  __chkstk_darwin(v143);
  v140 = (char *)&v113 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v142 = (char *)&v113 - v25;
  v26 = LocalizedStringKey.init(stringLiteral:)(0x65636E6174736964, 0xE800000000000000);
  v28 = v27;
  v30 = v29;
  v32 = v31;
  v33 = type metadata accessor for MapsElevationChartViewModel.ElevationDatum(0);
  v118 = a1 + *(int *)(v33 + 20);
  v117 = (id)objc_opt_self(NSUnitLength);
  v34 = objc_msgSend(v117, "meters");
  Measurement<>.converted(to:)(v34, v11);

  v35 = Measurement.value.getter(v11);
  v139 = *(void (**)(char *, uint64_t))(v12 + 8);
  v139(v14, v11);
  *(double *)&v154 = v35;
  v36 = v137;
  static PlottableValue.value(_:_:)(v26, v28, v30 & 1, v32, &v154, &type metadata for Double, &protocol witness table for Double);
  swift_bridgeObjectRelease(v32);
  swift_bridgeObjectRelease(v28);
  v37 = LocalizedStringKey.init(stringLiteral:)(0x656C652065736162, 0xEE006E6F69746176);
  v39 = v38;
  v41 = v40;
  *(_QWORD *)&v154 = 0;
  v43 = v138;
  static PlottableValue.value(_:_:)(v37, v38, v42 & 1, v40, &v154, &type metadata for Double, &protocol witness table for Double);
  swift_bridgeObjectRelease(v41);
  swift_bridgeObjectRelease(v39);
  v44 = LocalizedStringKey.init(stringLiteral:)(0x6F69746176656C65, 0xE90000000000006ELL);
  v46 = v45;
  LOBYTE(v32) = v47;
  v49 = v48;
  v114 += *(int *)(v33 + 24);
  Measurement<>.converted(to:)(*(_QWORD *)(v141 + 32), v11);
  v50 = Measurement.value.getter(v11);
  v139(v14, v11);
  *(double *)&v154 = v50;
  v51 = v115;
  static PlottableValue.value(_:_:)(v44, v46, v32 & 1, v49, &v154, &type metadata for Double, &protocol witness table for Double);
  swift_bridgeObjectRelease(v49);
  swift_bridgeObjectRelease(v46);
  v52 = v113;
  AreaMark.init<A, B>(x:yStart:yEnd:)(v36, v43, v51, &type metadata for Double, &type metadata for Double, &protocol witness table for Double, &protocol witness table for Double);
  v115 = (char *)*(int *)(type metadata accessor for MapsElevationChartViewModel(0) + 56);
  v53 = sub_1001A4518();
  v54 = Gradient.init(colors:)(v53);
  v55 = static UnitPoint.top.getter();
  v57 = v56;
  v58 = static UnitPoint.bottom.getter();
  LinearGradient.init(gradient:startPoint:endPoint:)(v152, v54, v55, v57, v58, v59);
  v154 = v152[0];
  v155 = v152[1];
  v156 = v153;
  v60 = v116;
  v61 = v119;
  ChartContent.foregroundStyle<A>(_:)(&v154, v119, &type metadata for LinearGradient, &protocol witness table for AreaMark, &protocol witness table for LinearGradient);
  sub_10008207C(v152);
  (*(void (**)(char *, uint64_t))(v120 + 8))(v52, v61);
  *(_QWORD *)&v154 = v61;
  *((_QWORD *)&v154 + 1) = &type metadata for LinearGradient;
  *(_QWORD *)&v155 = &protocol witness table for AreaMark;
  *((_QWORD *)&v155 + 1) = &protocol witness table for LinearGradient;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v154, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
  v63 = v140;
  v64 = v121;
  ChartContent.interpolationMethod(_:)(0, 0, v121, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v122 + 8))(v60, v64);
  v122 = v146[4];
  ((void (*)(char *, char *, uint64_t))v122)(v142, v63, v143);
  v65 = LocalizedStringKey.init(stringLiteral:)(0x65636E6174736964, 0xE800000000000000);
  v67 = v66;
  LOBYTE(v60) = v68;
  v70 = v69;
  v71 = objc_msgSend(v117, "meters");
  Measurement<>.converted(to:)(v71, v11);

  v72 = Measurement.value.getter(v11);
  v73 = v139;
  v139(v14, v11);
  *(double *)&v154 = v72;
  v74 = v137;
  static PlottableValue.value(_:_:)(v65, v67, v60 & 1, v70, &v154, &type metadata for Double, &protocol witness table for Double);
  swift_bridgeObjectRelease(v70);
  swift_bridgeObjectRelease(v67);
  v75 = LocalizedStringKey.init(stringLiteral:)(0x6F69746176656C65, 0xE90000000000006ELL);
  v77 = v76;
  LOBYTE(v60) = v78;
  v80 = v79;
  v81 = v141;
  Measurement<>.converted(to:)(*(_QWORD *)(v141 + 32), v11);
  v82 = Measurement.value.getter(v11);
  v73(v14, v11);
  *(double *)&v154 = v82;
  v83 = v138;
  static PlottableValue.value(_:_:)(v75, v77, v60 & 1, v80, &v154, &type metadata for Double, &protocol witness table for Double);
  swift_bridgeObjectRelease(v80);
  swift_bridgeObjectRelease(v77);
  v84 = v123;
  LineMark.init<A, B>(x:y:)(v74, v83, &type metadata for Double, &type metadata for Double, &protocol witness table for Double, &protocol witness table for Double);
  v85 = v115;
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(&v154, 1, 0, _swiftEmptyArrayStorage, *(double *)(*(_QWORD *)&v115[v81] + OBJC_IVAR____TtC4Maps23MapsElevationChartStyle_barWidth), 10.0, 0.0);
  v86 = v124;
  v87 = v125;
  ChartContent.lineStyle(_:)(&v154, v125, &protocol witness table for LineMark);
  sub_1000820A4((uint64_t)&v154);
  v88 = v87;
  (*(void (**)(char *, uint64_t))(v127 + 8))(v84, v87);
  v89 = Color.init(_:)(*(id *)(*(_QWORD *)&v85[v81] + OBJC_IVAR____TtC4Maps23MapsElevationChartStyle_barColor));
  v151 = v89;
  v147 = v88;
  v148 = &protocol witness table for LineMark;
  v90 = swift_getOpaqueTypeConformance2(&v147, &opaque type descriptor for <<opaque return type of ChartContent.lineStyle(_:)>>, 1);
  v91 = v126;
  v92 = v129;
  ChartContent.foregroundStyle<A>(_:)(&v151, v129, &type metadata for Color, v90, &protocol witness table for Color);
  swift_release(v89);
  (*(void (**)(char *, uint64_t))(v130 + 8))(v86, v92);
  v147 = v92;
  v148 = &type metadata for Color;
  v149 = v90;
  v150 = &protocol witness table for Color;
  v93 = swift_getOpaqueTypeConformance2(&v147, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
  v94 = v128;
  v95 = v132;
  ChartContent.interpolationMethod(_:)(0, 0, v132, v93);
  (*(void (**)(char *, uint64_t))(v133 + 8))(v91, v95);
  v97 = v144;
  v96 = v145;
  v98 = *(void (**)(char *, char *, uint64_t))(v145 + 32);
  v99 = v94;
  v100 = v131;
  v98(v144, v94, v131);
  v101 = (void (*)(char *, char *, uint64_t))v146[2];
  v102 = v140;
  v103 = v142;
  v104 = v143;
  v101(v140, v142, v143);
  v105 = *(void (**)(char *, char *, uint64_t))(v96 + 16);
  v105(v99, v97, v100);
  v106 = v134;
  v101(v134, v102, v104);
  v107 = v135;
  v108 = &v106[*(int *)(v135 + 48)];
  v105(v108, v99, v100);
  v109 = v136;
  ((void (*)(uint64_t, char *, uint64_t))v122)(v136, v106, v104);
  v98((char *)(v109 + *(int *)(v107 + 48)), v108, v100);
  v110 = *(void (**)(char *, uint64_t))(v145 + 8);
  v110(v144, v100);
  v111 = (void (*)(char *, uint64_t))v146[1];
  v111(v103, v104);
  v110(v99, v100);
  return ((uint64_t (*)(char *, uint64_t))v111)(v102, v104);
}

uint64_t sub_10007C390@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  char *v14;
  void (*v15)(uint64_t, char *, uint64_t);
  uint64_t v16;
  void (*v17)(uint64_t, char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v22 = a2;
  v3 = (int *)sub_100008B04(&qword_101496A50);
  __chkstk_darwin(v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100008B04(&qword_101496A40);
  type metadata accessor for RectangleMark(255);
  sub_100082204();
  v7 = *a1;
  v20 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void))(v20 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v8)(v5, v7, v6);
  v21 = &v5[v3[12]];
  v8();
  v9 = sub_100008B04(&qword_101496A38);
  type metadata accessor for PointMark(255);
  sub_100082560(&qword_101496928, &qword_101496920, &qword_101496930, &qword_101496938);
  v10 = &v5[v3[16]];
  v11 = *(_QWORD *)(v9 - 8);
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v12(v10, a1[2], v9);
  sub_100082428();
  v13 = (uint64_t)&v5[v3[20]];
  sub_10000C1FC(a1[3], v13, &qword_101496948);
  v14 = &v5[v3[24]];
  v12(v14, a1[4], v9);
  v15 = *(void (**)(uint64_t, char *, uint64_t))(v20 + 32);
  v16 = v22;
  v15(v22, v5, v6);
  v15(v16 + v3[12], v21, v6);
  v17 = *(void (**)(uint64_t, char *, uint64_t))(v11 + 32);
  v17(v16 + v3[16], v10, v9);
  sub_1000207BC(v13, v16 + v3[20], &qword_101496948);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v17)(v16 + v3[24], v14, v9);
}

uint64_t sub_10007C56C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t OpaqueTypeConformance2;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  void (*v60)(char *, uint64_t);
  uint64_t v62;
  uint64_t KeyPath;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  void *v84;
  void *v85;
  _QWORD v86[2];

  v65 = a2;
  v75 = a1;
  v78 = a4;
  v77 = sub_100008B04(&qword_101496A58);
  __chkstk_darwin(v77);
  v76 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_100008B04(&qword_101496908);
  v74 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72);
  v67 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_100008B04(&qword_101496A60);
  v81 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v71 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v80 = (char *)&v62 - v11;
  v12 = type metadata accessor for MapsElevationChart(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v15 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100008B04(&qword_101496900);
  v69 = *(_QWORD *)(v16 - 8);
  v70 = v16;
  __chkstk_darwin(v16);
  v68 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v79 = (char *)&v62 - v19;
  v66 = v4;
  v86[0] = *(_QWORD *)(v4 + 16);
  v20 = v86[0];
  KeyPath = swift_getKeyPath(&unk_100E27988);
  sub_1000202AC(v4, (uint64_t)v15, type metadata accessor for MapsElevationChart);
  v21 = *(unsigned __int8 *)(v13 + 80);
  v22 = (v21 + 16) & ~v21;
  v64 = v21 | 7;
  v23 = (v14 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = swift_allocObject(&unk_10119F088, v23 + 16, v21 | 7);
  sub_100080DD8((uint64_t)v15, v24 + v22);
  v25 = (_QWORD *)(v24 + v23);
  *v25 = a2;
  v25[1] = a3;
  v62 = a3;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(a3);
  v26 = sub_100008B04(&qword_101496758);
  v27 = sub_100008B04(&qword_1014968D0);
  v28 = sub_100010D70(&qword_101496768, &qword_101496758, (const char *)&protocol conformance descriptor for [A]);
  v29 = sub_10000E5D4(&qword_1014968A8);
  v82 = type metadata accessor for AreaMark(255);
  v83 = &type metadata for LinearGradient;
  v84 = &protocol witness table for AreaMark;
  v85 = &protocol witness table for LinearGradient;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v82, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
  v82 = v29;
  v83 = (void *)OpaqueTypeConformance2;
  v31 = swift_getOpaqueTypeConformance2(&v82, &opaque type descriptor for <<opaque return type of ChartContent.interpolationMethod(_:)>>, 1);
  ForEach<>.init(_:id:content:)(v86, KeyPath, sub_100082C80, v24, v26, v27, v28, &protocol witness table for Int, v31);
  v32 = v66;
  v86[0] = *(_QWORD *)(v66 + 16);
  v33 = v86[0];
  v34 = swift_getKeyPath(&unk_100E27988);
  sub_1000202AC(v32, (uint64_t)v15, type metadata accessor for MapsElevationChart);
  v35 = swift_allocObject(&unk_10119F0B0, v23 + 16, v64);
  sub_100080DD8((uint64_t)v15, v35 + v22);
  v36 = (_QWORD *)(v35 + v23);
  v37 = v62;
  *v36 = v65;
  v36[1] = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRetain(v33);
  v38 = sub_100008B04(&qword_101496A68);
  v39 = sub_10000E5D4(&qword_101496918);
  v82 = type metadata accessor for LineMark(255);
  v83 = &protocol witness table for LineMark;
  v40 = swift_getOpaqueTypeConformance2(&v82, &opaque type descriptor for <<opaque return type of ChartContent.interpolationMethod(_:)>>, 1);
  v82 = v39;
  v83 = (void *)v40;
  v41 = swift_getOpaqueTypeConformance2(&v82, &opaque type descriptor for <<opaque return type of ChartContent.lineStyle(_:)>>, 1);
  v42 = v67;
  ForEach<>.init(_:id:content:)(v86, v34, sub_100082DB8, v35, v26, v38, v28, &protocol witness table for Int, v41);
  v82 = v75;
  v43 = sub_100082378();
  v45 = v71;
  v44 = v72;
  ChartContent.foregroundStyle<A>(_:)(&v82, v72, &type metadata for Color, v43, &protocol witness table for Color);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v42, v44);
  v47 = v80;
  v46 = v81;
  v48 = *(void (**)(char *, char *, uint64_t))(v81 + 32);
  v49 = v73;
  v48(v80, v45, v73);
  v50 = v68;
  v51 = v69;
  v52 = *(void (**)(char *, char *, uint64_t))(v69 + 16);
  v53 = v70;
  v52(v68, v79, v70);
  v54 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
  v54(v45, v47, v49);
  sub_1000822B4();
  v55 = v76;
  v52(v76, v50, v53);
  v56 = v77;
  v57 = &v55[*(int *)(v77 + 48)];
  v54(v57, v45, v49);
  v58 = v78;
  (*(void (**)(uint64_t, char *, uint64_t))(v51 + 32))(v78, v55, v53);
  v48((char *)(v58 + *(int *)(v56 + 48)), v57, v49);
  v59 = *(void (**)(char *, uint64_t))(v81 + 8);
  v59(v80, v49);
  v60 = *(void (**)(char *, uint64_t))(v51 + 8);
  v60(v79, v53);
  v59(v45, v49);
  return ((uint64_t (*)(char *, uint64_t))v60)(v50, v53);
}

uint64_t sub_10007CB08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char *v58;
  char *v59;
  _QWORD *v60;
  uint64_t v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  char *v67;
  uint64_t v68;
  uint64_t OpaqueTypeConformance2;
  char *v70;
  uint64_t v71;
  uint64_t result;
  _QWORD v73[3];
  char *v74;
  char *v75;
  char *v76;
  __int128 v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  _OWORD v93[2];
  uint64_t v94;

  *((_QWORD *)&v77 + 1) = a4;
  *(_QWORD *)&v77 = a3;
  v88 = a5;
  v89 = a2;
  v6 = sub_100008B04(&qword_101496A70);
  __chkstk_darwin(v6);
  v78 = (char *)v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008B04(&qword_10149A1F0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100008B04(&qword_101496770);
  __chkstk_darwin(v12);
  v76 = (char *)v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v75 = (char *)v73 - v15;
  __chkstk_darwin(v16);
  v18 = (char *)v73 - v17;
  v83 = type metadata accessor for AreaMark(0);
  v81 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v79 = (char *)v73 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100008B04(&qword_1014968A8);
  v86 = *(_QWORD *)(v20 - 8);
  v87 = v20;
  __chkstk_darwin(v20);
  v85 = (char *)v73 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_100008B04(&qword_1014968D0);
  v82 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v80 = (char *)v73 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = LocalizedStringKey.init(stringLiteral:)(0x65636E6174736964, 0xE800000000000000);
  v25 = v24;
  v27 = v26;
  v29 = v28;
  v73[1] = type metadata accessor for MapsElevationChartViewModel.ElevationDatum(0);
  v73[2] = a1;
  v30 = objc_msgSend((id)objc_opt_self(NSUnitLength), "meters");
  Measurement<>.converted(to:)(v30, v8);

  v31 = Measurement.value.getter(v8);
  v73[0] = *(_QWORD *)(v9 + 8);
  ((void (*)(char *, uint64_t))v73[0])(v11, v8);
  *(double *)v93 = v31;
  v74 = v18;
  static PlottableValue.value(_:_:)(v23, v25, v27 & 1, v29, v93, &type metadata for Double, &protocol witness table for Double);
  swift_bridgeObjectRelease(v29);
  swift_bridgeObjectRelease(v25);
  v32 = LocalizedStringKey.init(stringLiteral:)(0x656C652065736162, 0xEE006E6F69746176);
  v34 = v33;
  v36 = v35;
  v38 = v37;
  v39 = sub_1000D6F2C();
  v40 = *(_QWORD *)(v39 + 16);
  if (v40)
  {
    v41 = *(_QWORD *)(v39 + 8 * v40 + 24);
    swift_bridgeObjectRelease(v39);
    *(_QWORD *)&v93[0] = v41;
    v42 = v75;
    static PlottableValue.value(_:_:)(v32, v34, v36 & 1, v38, v93, &type metadata for Double, &protocol witness table for Double);
    swift_bridgeObjectRelease(v38);
    swift_bridgeObjectRelease(v34);
    v43 = LocalizedStringKey.init(stringLiteral:)(0x6F69746176656C65, 0xE90000000000006ELL);
    v45 = v44;
    v47 = v46;
    v49 = v48;
    Measurement<>.converted(to:)(*(_QWORD *)(v89 + 32), v8);
    v50 = Measurement.value.getter(v8);
    ((void (*)(char *, uint64_t))v73[0])(v11, v8);
    *(double *)v93 = v50;
    v51 = v76;
    static PlottableValue.value(_:_:)(v43, v45, v47 & 1, v49, v93, &type metadata for Double, &protocol witness table for Double);
    swift_bridgeObjectRelease(v49);
    swift_bridgeObjectRelease(v45);
    v52 = LocalizedStringKey.init(stringLiteral:)(0x736569726573, 0xE600000000000000);
    v54 = v53;
    v56 = v55;
    v93[0] = v77;
    v58 = v78;
    static PlottableValue.value(_:_:)(v52, v53, v57 & 1, v55, v93, &type metadata for String, &protocol witness table for String);
    swift_bridgeObjectRelease(v56);
    swift_bridgeObjectRelease(v54);
    v59 = v79;
    AreaMark.init<A, B, C>(x:yStart:yEnd:series:)(v74, v42, v51, v58, &type metadata for Double, &type metadata for Double, &type metadata for String, &protocol witness table for Double, &protocol witness table for Double, &protocol witness table for String);
    type metadata accessor for MapsElevationChartViewModel(0);
    v60 = sub_1001A4518();
    v61 = Gradient.init(colors:)(v60);
    v62 = static UnitPoint.top.getter();
    v64 = v63;
    v65 = static UnitPoint.bottom.getter();
    LinearGradient.init(gradient:startPoint:endPoint:)(v93, v61, v62, v64, v65, v66);
    v90 = v93[0];
    v91 = v93[1];
    v92 = v94;
    v67 = v85;
    v68 = v83;
    ChartContent.foregroundStyle<A>(_:)(&v90, v83, &type metadata for LinearGradient, &protocol witness table for AreaMark, &protocol witness table for LinearGradient);
    sub_10008207C(v93);
    (*(void (**)(char *, uint64_t))(v81 + 8))(v59, v68);
    *(_QWORD *)&v90 = v68;
    *((_QWORD *)&v90 + 1) = &type metadata for LinearGradient;
    *(_QWORD *)&v91 = &protocol witness table for AreaMark;
    *((_QWORD *)&v91 + 1) = &protocol witness table for LinearGradient;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v90, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
    v70 = v80;
    v71 = v87;
    ChartContent.interpolationMethod(_:)(0, 0, v87, OpaqueTypeConformance2);
    (*(void (**)(char *, uint64_t))(v86 + 8))(v67, v71);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v82 + 32))(v88, v70, v84);
  }
  else
  {
    result = swift_bridgeObjectRelease(v39);
    __break(1u);
  }
  return result;
}

uint64_t sub_10007D160@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  id v23;
  double v24;
  void (*v25)(char *, uint64_t);
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t OpaqueTypeConformance2;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[2];
  _QWORD v67[6];

  v61 = a2;
  v62 = a3;
  v55 = a1;
  v65 = a4;
  v5 = sub_100008B04(&qword_101496A70);
  __chkstk_darwin(v5);
  v58 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008B04(&qword_101496770);
  __chkstk_darwin(v7);
  v56 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v54 - v10;
  v12 = type metadata accessor for LineMark(0);
  v13 = *(_QWORD *)(v12 - 8);
  v59 = v12;
  v60 = v13;
  __chkstk_darwin(v12);
  v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100008B04(&qword_101496918);
  v17 = *(_QWORD *)(v16 - 8);
  v63 = v16;
  v64 = v17;
  __chkstk_darwin(v16);
  v57 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100008B04(&qword_10149A1F0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MapsElevationChartViewModel.ElevationDatum(0);
  v23 = objc_msgSend((id)objc_opt_self(NSUnitLength), "meters");
  Measurement<>.converted(to:)(v23, v19);

  v24 = Measurement.value.getter(v19);
  v25 = *(void (**)(char *, uint64_t))(v20 + 8);
  v25(v22, v19);
  Measurement<>.converted(to:)(*(_QWORD *)(a1 + 32), v19);
  v26 = Measurement.value.getter(v19);
  v25(v22, v19);
  v27 = LocalizedStringKey.init(stringLiteral:)(0x65636E6174736964, 0xE800000000000000);
  v29 = v28;
  v31 = v30;
  *(double *)v67 = v24;
  v33 = v11;
  static PlottableValue.value(_:_:)(v27, v28, v32 & 1, v30, v67, &type metadata for Double, &protocol witness table for Double);
  swift_bridgeObjectRelease(v31);
  swift_bridgeObjectRelease(v29);
  v34 = LocalizedStringKey.init(stringLiteral:)(0x6F69746176656C65, 0xE90000000000006ELL);
  v36 = v35;
  v38 = v37;
  *(double *)v67 = v26;
  v40 = v56;
  static PlottableValue.value(_:_:)(v34, v35, v39 & 1, v37, v67, &type metadata for Double, &protocol witness table for Double);
  swift_bridgeObjectRelease(v38);
  swift_bridgeObjectRelease(v36);
  v41 = LocalizedStringKey.init(stringLiteral:)(0x736569726573, 0xE600000000000000);
  v43 = v42;
  v45 = v44;
  v67[0] = v61;
  v67[1] = v62;
  v47 = v58;
  static PlottableValue.value(_:_:)(v41, v42, v46 & 1, v44, v67, &type metadata for String, &protocol witness table for String);
  swift_bridgeObjectRelease(v45);
  swift_bridgeObjectRelease(v43);
  LineMark.init<A, B, C>(x:y:series:)(v33, v40, v47, &type metadata for Double, &type metadata for Double, &type metadata for String, &protocol witness table for Double, &protocol witness table for Double, &protocol witness table for String);
  v48 = v57;
  v49 = v59;
  ChartContent.interpolationMethod(_:)(0, 0, v59, &protocol witness table for LineMark);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v15, v49);
  v50 = type metadata accessor for MapsElevationChartViewModel(0);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v67, 1, 0, _swiftEmptyArrayStorage, *(double *)(*(_QWORD *)(v55 + *(int *)(v50 + 56)) + OBJC_IVAR____TtC4Maps23MapsElevationChartStyle_barWidth), 10.0, 0.0);
  v66[0] = v49;
  v66[1] = &protocol witness table for LineMark;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v66, &opaque type descriptor for <<opaque return type of ChartContent.interpolationMethod(_:)>>, 1);
  v52 = v63;
  ChartContent.lineStyle(_:)(v67, v63, OpaqueTypeConformance2);
  sub_1000820A4((uint64_t)v67);
  return (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v48, v52);
}

void sub_10007D5BC()
{
  qword_1014D4700 = 0x4024000000000000;
}

void sub_10007D5CC()
{
  qword_1014D4708 = 0x4024000000000000;
}

uint64_t sub_10007D5DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t KeyPath;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v44 = a3;
  v5 = sub_100008B04(&qword_10149DAE0);
  v6 = __chkstk_darwin(v5);
  v43 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for _BlendModeEffect(0, v6);
  __chkstk_darwin(v8);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for BlendMode(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100008B04(&qword_1014958A0);
  __chkstk_darwin(v15);
  v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_100008B04(&qword_101496A20);
  __chkstk_darwin(v42);
  v19 = (char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = a1;
  v46 = a2;
  static Locale.current.getter(v20);
  v21 = type metadata accessor for Locale(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v17, 0, 1, v21);
  v22 = sub_10006C008();
  v23 = StringProtocol.uppercased(with:)(v17, &type metadata for String, v22);
  v25 = v24;
  sub_100010CC4((uint64_t)v17, &qword_1014958A0);
  v45 = v23;
  v46 = v25;
  v26 = Text.init<A>(_:)(&v45, &type metadata for String, v22);
  v28 = v27;
  v30 = v29;
  LOBYTE(v25) = v31 & 1;
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for BlendMode.plusLighter(_:), v11);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v10, v14, v11);
  sub_1000202AC((uint64_t)v10, (uint64_t)&v19[*(int *)(v42 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  *(_QWORD *)v19 = v26;
  *((_QWORD *)v19 + 1) = v28;
  v19[16] = v25;
  *((_QWORD *)v19 + 3) = v30;
  sub_10006BB40(v26, v28, v25);
  swift_bridgeObjectRetain(v30);
  sub_1000202F0((uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  sub_10006B77C(v26, v28, v25);
  v32 = swift_bridgeObjectRelease(v30);
  v33 = static Font.Weight.medium.getter(v32);
  v34 = type metadata accessor for Font.Design(0);
  v35 = (uint64_t)v43;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v43, 1, 1, v34);
  v36 = static Font.system(size:weight:design:)(*(_QWORD *)&v33, 0, v35, 13.0);
  sub_100010CC4(v35, &qword_10149DAE0);
  KeyPath = swift_getKeyPath(&unk_100E279B0);
  v38 = v44;
  sub_10000C1FC((uint64_t)v19, v44, &qword_101496A20);
  v39 = (uint64_t *)(v38 + *(int *)(sub_100008B04(&qword_101496A10) + 36));
  *v39 = KeyPath;
  v39[1] = v36;
  return sub_100010CC4((uint64_t)v19, &qword_101496A20);
}

uint64_t sub_10007D924@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD v31[2];
  _BYTE v32[16];
  uint64_t v33;
  double v34;

  v31[1] = a1;
  v6 = sub_100008B04(&qword_101496770);
  __chkstk_darwin(v6);
  v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)v31 - v10;
  v12 = type metadata accessor for PointMark(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000010, 0x8000000100E44B60);
  v18 = v17;
  v20 = v19;
  v34 = a2;
  static PlottableValue.value(_:_:)(v16, v17, v21 & 1, v19, &v34, &type metadata for Double, &protocol witness table for Double);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v18);
  v22 = LocalizedStringKey.init(stringLiteral:)(0x6F69746176656C65, 0xE90000000000006ELL);
  v24 = v23;
  v26 = v25;
  v34 = a3;
  static PlottableValue.value(_:_:)(v22, v23, v27 & 1, v25, &v34, &type metadata for Double, &protocol witness table for Double);
  swift_bridgeObjectRelease(v26);
  swift_bridgeObjectRelease(v24);
  PointMark.init<A, B>(x:y:)(v11, v8, &type metadata for Double, &type metadata for Double, &protocol witness table for Double, &protocol witness table for Double);
  v33 = v3;
  v28 = sub_100008B04(&qword_101496950);
  v29 = sub_1000824D4();
  ChartContent.symbol<A>(symbol:)(sub_100082C6C, v32, v12, v28, &protocol witness table for PointMark, v29);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

double sub_10007DB28@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  double result;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[5];
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;

  v4 = static Alignment.center.getter(a1);
  v27 = v5;
  v28 = v4;
  v6 = static Color.blue.getter();
  v7 = StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v29, 0, 0, &_swiftEmptyArrayStorage, 2.0, 10.0, 0.0);
  v8 = v29[0];
  v9 = v29[2];
  v10 = v29[3];
  v11 = v29[4];
  v12 = static Color.white.getter(v7);
  v13 = *a1;
  v14 = static Alignment.center.getter(v12);
  v16 = _FrameLayout.init(width:height:alignment:)(&v30, v13, 0, v13, 0, v14, v15);
  v17 = v30;
  v18 = v32;
  v19 = v34;
  v20 = v35;
  v37 = v31;
  v36 = v33;
  v21 = static Color.black.getter(v16);
  v22 = Color.opacity(_:)(0.32);
  swift_release(v21);
  v23 = v37;
  v24 = v36;
  *(_QWORD *)a2 = v28;
  *(_QWORD *)(a2 + 8) = v27;
  *(_QWORD *)(a2 + 16) = v6;
  *(_WORD *)(a2 + 24) = 256;
  v25 = v29[1];
  *(_QWORD *)(a2 + 32) = v8;
  *(_QWORD *)(a2 + 40) = v25;
  *(_QWORD *)(a2 + 48) = v9;
  *(_QWORD *)(a2 + 56) = v10;
  *(_QWORD *)(a2 + 64) = v11;
  *(_QWORD *)(a2 + 72) = v12;
  *(_WORD *)(a2 + 80) = 256;
  *(_QWORD *)(a2 + 88) = v17;
  *(_BYTE *)(a2 + 96) = v23;
  *(_QWORD *)(a2 + 104) = v18;
  *(_BYTE *)(a2 + 112) = v24;
  *(_QWORD *)(a2 + 120) = v19;
  *(_QWORD *)(a2 + 128) = v20;
  *(_QWORD *)(a2 + 136) = v22;
  result = 4.0;
  *(_OWORD *)(a2 + 144) = xmmword_100E278C0;
  *(_QWORD *)(a2 + 160) = 0x4000000000000000;
  return result;
}

uint64_t sub_10007DC98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v32[2];
  _BYTE v33[16];
  uint64_t v34;
  uint64_t v35;
  double v36;

  v32[1] = a2;
  v7 = sub_100008B04(&qword_101496770);
  __chkstk_darwin(v7);
  v9 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)v32 - v11;
  v13 = type metadata accessor for PointMark(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000010, 0x8000000100E44B60);
  v19 = v18;
  v21 = v20;
  v36 = a3;
  static PlottableValue.value(_:_:)(v17, v18, v22 & 1, v20, &v36, &type metadata for Double, &protocol witness table for Double);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v19);
  v23 = LocalizedStringKey.init(stringLiteral:)(0x6F69746176656C65, 0xE90000000000006ELL);
  v25 = v24;
  v27 = v26;
  v36 = a4;
  static PlottableValue.value(_:_:)(v23, v24, v28 & 1, v26, &v36, &type metadata for Double, &protocol witness table for Double);
  swift_bridgeObjectRelease(v27);
  swift_bridgeObjectRelease(v25);
  PointMark.init<A, B>(x:y:)(v12, v9, &type metadata for Double, &type metadata for Double, &protocol witness table for Double, &protocol witness table for Double);
  v34 = v32[0];
  v35 = a1;
  v29 = sub_100008B04(&qword_101496920);
  v30 = sub_100082560(&qword_101496928, &qword_101496920, &qword_101496930, &qword_101496938);
  ChartContent.symbol<A>(symbol:)(sub_100082C74, v33, v13, v29, &protocol witness table for PointMark, v30);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

double sub_10007DEC4@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  double result;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  char v25;
  char v26;
  _OWORD v27[7];
  _OWORD v28[2];

  v6 = static Alignment.center.getter(a1);
  v8 = v7;
  sub_10007DFA8((uint64_t)a1, a2, (uint64_t)v27);
  v9 = *a1;
  v11 = static Alignment.center.getter(v10);
  _FrameLayout.init(width:height:alignment:)(&v20, v9, 0, v9, 0, v11, v12);
  v13 = v20;
  v14 = v22;
  v26 = v21;
  v25 = v23;
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v8;
  v15 = v28[0];
  *(_OWORD *)(a3 + 112) = v27[6];
  *(_OWORD *)(a3 + 128) = v15;
  *(_OWORD *)(a3 + 137) = *(_OWORD *)((char *)v28 + 9);
  v16 = v27[3];
  *(_OWORD *)(a3 + 48) = v27[2];
  *(_OWORD *)(a3 + 64) = v16;
  v17 = v27[5];
  *(_OWORD *)(a3 + 80) = v27[4];
  *(_OWORD *)(a3 + 96) = v17;
  v18 = v27[1];
  *(_OWORD *)(a3 + 16) = v27[0];
  *(_OWORD *)(a3 + 32) = v18;
  *(_QWORD *)(a3 + 160) = v13;
  *(_BYTE *)(a3 + 168) = v26;
  *(_QWORD *)(a3 + 176) = v14;
  *(_BYTE *)(a3 + 184) = v25;
  result = *(double *)&v24;
  *(_OWORD *)(a3 + 192) = v24;
  return result;
}

void sub_10007DFA8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v5;
  id v6;
  uint64_t v7;
  __n128 v8;
  char v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  char v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *(void **)(*(_QWORD *)(a1 + *(int *)(type metadata accessor for MapsElevationChartViewModel(0) + 56))
                + OBJC_IVAR____TtC4Maps23MapsElevationChartStyle_dotStrokeColor);
  if (v5)
  {
    v6 = v5;
    v7 = Color.init(uiColor:)(v6);
    v8 = swift_retain(a2);
    v9 = static Edge.Set.all.getter(v8);
    v10 = EdgeInsets.init(_all:)(1.0);
    v12 = v11;
    v14 = v13;
    v16 = v15;
    v17 = Color.init(uiColor:)(v6);
    v19 = static Edge.Set.all.getter(v18);
    v20 = EdgeInsets.init(_all:)(4.0);
    *(_QWORD *)a3 = v7;
    *(_WORD *)(a3 + 8) = 256;
    *(_QWORD *)(a3 + 16) = a2;
    *(_WORD *)(a3 + 24) = 256;
    *(_BYTE *)(a3 + 32) = v9;
    *(double *)(a3 + 40) = v10;
    *(_QWORD *)(a3 + 48) = v12;
    *(_QWORD *)(a3 + 56) = v14;
    *(_QWORD *)(a3 + 64) = v16;
    *(_BYTE *)(a3 + 72) = 0;
    *(_QWORD *)(a3 + 80) = v17;
    *(_WORD *)(a3 + 88) = 256;
    *(_BYTE *)(a3 + 96) = v19;
    *(double *)(a3 + 104) = v20;
    *(_QWORD *)(a3 + 112) = v21;
    *(_QWORD *)(a3 + 120) = v22;
    *(_QWORD *)(a3 + 128) = v23;
    *(_BYTE *)(a3 + 136) = 0;
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10007E0B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  id v56;
  double v57;
  _QWORD *v58;
  uint64_t (*v59)(char *, uint64_t);
  uint64_t v60;
  uint64_t result;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  void *v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  double v75;
  id v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(char *, unint64_t, uint64_t);
  unint64_t v88;
  void *v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  id v93;
  uint64_t v94;
  double v95;
  uint64_t v96;
  uint64_t v97;
  double v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(char *, char *, uint64_t);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(char *, char *, uint64_t);
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(uint64_t, uint64_t);
  void (*v114)(char *, uint64_t);
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  _QWORD *v127;
  char *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  char v139[16];
  uint64_t v140;
  char v141[16];
  uint64_t v142;
  uint64_t v143[5];

  v119 = a2;
  v3 = sub_100008B04(&qword_101496948);
  __chkstk_darwin(v3);
  v120 = (uint64_t)&v115 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v135 = (uint64_t)&v115 - v6;
  v7 = sub_100008B04(&qword_10149A1F0);
  v127 = *(_QWORD **)(v7 - 8);
  __chkstk_darwin(v7);
  v136 = (char *)&v115 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v126 = (char *)&v115 - v10;
  v11 = sub_100008B04(&qword_101496A38);
  v133 = *(_QWORD *)(v11 - 8);
  v134 = v11;
  __chkstk_darwin(v11);
  v117 = (char *)&v115 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v118 = (char *)&v115 - v14;
  __chkstk_darwin(v15);
  v116 = (uint64_t)&v115 - v16;
  __chkstk_darwin(v17);
  v121 = (uint64_t)&v115 - v18;
  __chkstk_darwin(v19);
  v132 = (char *)&v115 - v20;
  v21 = sub_100008B04(&qword_1014968E8);
  __chkstk_darwin(v21);
  v125 = (unint64_t)&v115 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v25 = (char *)&v115 - v24;
  v26 = sub_100008B04(&qword_101496A40);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v131 = (char *)&v115 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v130 = (char *)&v115 - v30;
  __chkstk_darwin(v31);
  v124 = (uint64_t)&v115 - v32;
  __chkstk_darwin(v33);
  v137 = (char *)&v115 - v34;
  __chkstk_darwin(v35);
  v37 = (char *)&v115 - v36;
  __chkstk_darwin(v38);
  v40 = (char *)&v115 - v39;
  v42 = static Color.blue.getter(v41);
  sub_10007C56C(v42, 0x64657370616C65, 0xE700000000000000, (uint64_t)v25);
  swift_release(v42);
  v142 = a1;
  v43 = a1;
  v44 = type metadata accessor for RectangleMark(0);
  v123 = v44;
  v122 = sub_100082204();
  ChartContent.mask<A>(content:)(sub_100082C5C, v141, v21, v44, v122, &protocol witness table for RectangleMark);
  sub_100010CC4((uint64_t)v25, &qword_1014968E8);
  v129 = v27;
  v45 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
  v128 = v40;
  v45(v40, v37, v26);
  v46 = type metadata accessor for MapsElevationChartViewModel(0);
  v47 = Color.init(uiColor:)(objc_retain(*(id *)(*(_QWORD *)(v43 + *(int *)(v46 + 56))
                                               + OBJC_IVAR____TtC4Maps23MapsElevationChartStyle_barColor)));
  v48 = v125;
  sub_10007C56C(v47, 0x676E696D6F637075, 0xE800000000000000, v125);
  swift_release(v47);
  v140 = v43;
  v49 = v124;
  v50 = v21;
  v51 = v126;
  v52 = v127;
  ChartContent.mask<A>(content:)(sub_100082C64, v139, v50, v123, v122, &protocol witness table for RectangleMark);
  sub_100010CC4(v48, &qword_1014968E8);
  v123 = v26;
  v45(v137, (char *)v49, v26);
  v53 = *(int *)(v46 + 44);
  v138 = v43;
  v54 = v43 + v53;
  v55 = (void *)objc_opt_self(NSUnitLength);
  v56 = objc_msgSend(v55, "meters");
  Measurement<>.converted(to:)(v56, v7);

  v57 = Measurement.value.getter(v7);
  v58 = v52;
  v59 = (uint64_t (*)(char *, uint64_t))v52[1];
  v60 = v59(v51, v7);
  if (v57 <= 0.0)
  {
    v62 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
    result = Color.init(uiColor:)(v62);
  }
  else
  {
    result = static Color.blue.getter(v60);
  }
  v63 = v138;
  v64 = *(_QWORD *)(v138 + 16);
  if (!*(_QWORD *)(v64 + 16))
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v65 = result;
  v66 = type metadata accessor for MapsElevationChartViewModel.ElevationDatum(0);
  v124 = v54;
  v67 = v66;
  v115 = *(_QWORD *)(v66 - 8);
  v68 = v64 + *(int *)(v66 + 24);
  v125 = (*(unsigned __int8 *)(v115 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v115 + 80);
  v69 = (uint64_t)v136;
  v127 = (_QWORD *)v58[2];
  ((void (*)(char *, unint64_t, uint64_t))v127)(v136, v68 + v125, v7);
  Measurement<>.converted(to:)(*(_QWORD *)(v63 + 32), v7);
  v59((char *)v69, v7);
  v70 = Measurement.value.getter(v7);
  v59(v51, v7);
  v71 = v55;
  v72 = v121;
  sub_10007DC98(v65, v121, 0.0, v70);
  swift_release(v65);
  (*(void (**)(char *, uint64_t, uint64_t))(v133 + 32))(v132, v72, v134);
  v73 = objc_msgSend(v71, "meters");
  v74 = v124;
  Measurement<>.converted(to:)(v73, v7);

  v75 = Measurement.value.getter(v7);
  v59(v51, v7);
  v122 = v67;
  if (v75 <= 0.0)
  {
    v83 = sub_100008B04(&qword_101496A48);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 56))(v135, 1, 1, v83);
    v79 = v138;
  }
  else
  {
    v76 = objc_msgSend(v71, "meters");
    Measurement<>.converted(to:)(v76, v7);

    v77 = Measurement.value.getter(v7);
    v59(v51, v7);
    v78 = v74;
    v79 = v138;
    sub_1000D77A0(v78, v69);
    Measurement<>.converted(to:)(*(_QWORD *)(v79 + 32), v7);
    v59((char *)v69, v7);
    v80 = Measurement.value.getter(v7);
    v59(v51, v7);
    v81 = v135;
    sub_10007D924(v135, v77, v80);
    v82 = sub_100008B04(&qword_101496A48);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 56))(v81, 0, 1, v82);
  }
  v84 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
  result = Color.init(uiColor:)(v84);
  v85 = *(_QWORD *)(v79 + 16);
  v86 = *(_QWORD *)(v85 + 16);
  v87 = (void (*)(char *, unint64_t, uint64_t))v127;
  v88 = v125;
  if (!v86)
    goto LABEL_12;
  v124 = result;
  v89 = v71;
  v90 = *(_QWORD *)(v115 + 72);
  v91 = v122;
  v92 = v136;
  ((void (*)(char *, unint64_t, uint64_t))v127)(v136, v85 + v125 + v90 * (v86 - 1) + *(int *)(v122 + 20), v7);
  v93 = objc_msgSend(v89, "meters");
  Measurement<>.converted(to:)(v93, v7);

  v94 = v138;
  v59(v92, v7);
  v95 = Measurement.value.getter(v7);
  result = v59(v51, v7);
  v96 = *(_QWORD *)(v94 + 16);
  v97 = *(_QWORD *)(v96 + 16);
  if (v97)
  {
    v87(v92, v96 + v88 + (v97 - 1) * v90 + *(int *)(v91 + 24), v7);
    Measurement<>.converted(to:)(*(_QWORD *)(v94 + 32), v7);
    v59(v92, v7);
    v98 = Measurement.value.getter(v7);
    v59(v51, v7);
    v99 = v116;
    v100 = v124;
    sub_10007DC98(v124, v116, v95, v98);
    swift_release(v100);
    v101 = *(void (**)(char *, char *, uint64_t))(v129 + 16);
    v102 = (uint64_t)v130;
    v103 = v123;
    v101(v130, v128, v123);
    v143[0] = v102;
    v104 = (uint64_t)v131;
    v101(v131, v137, v103);
    v143[1] = v104;
    v106 = v133;
    v105 = v134;
    v107 = *(void (**)(char *, char *, uint64_t))(v133 + 16);
    v108 = (uint64_t)v118;
    v109 = v132;
    v107(v118, v132, v134);
    v143[2] = v108;
    v110 = v135;
    v111 = v120;
    sub_10000C1FC(v135, v120, &qword_101496948);
    v143[3] = v111;
    v112 = (uint64_t)v117;
    v107(v117, (char *)v99, v105);
    v143[4] = v112;
    sub_10007C390(v143, v119);
    v113 = *(void (**)(uint64_t, uint64_t))(v106 + 8);
    v113(v99, v105);
    sub_100010CC4(v110, &qword_101496948);
    v113((uint64_t)v109, v105);
    v114 = *(void (**)(char *, uint64_t))(v129 + 8);
    v114(v137, v103);
    v114(v128, v103);
    v113(v112, v105);
    sub_100010CC4(v111, &qword_101496948);
    v113(v108, v105);
    v114(v131, v103);
    return ((uint64_t (*)(char *, uint64_t))v114)(v130, v103);
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_10007EB68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  double v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;

  v31 = a2;
  v3 = sub_100008B04(&qword_10149A1F0);
  v30 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100008B04(&qword_101496770);
  __chkstk_darwin(v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v29 - v10;
  v12 = LocalizedStringKey.init(stringLiteral:)(0x7472617473, 0xE500000000000000);
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v32 = -*(double *)(a1 + *(int *)(type metadata accessor for MapsElevationChart(0) + 20));
  static PlottableValue.value(_:_:)(v12, v14, v16 & 1, v18, &v32, &type metadata for Double, &protocol witness table for Double);
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v14);
  v19 = LocalizedStringKey.init(stringLiteral:)(6581861, 0xE300000000000000);
  v21 = v20;
  v23 = v22;
  v25 = v24;
  type metadata accessor for MapsElevationChartViewModel(0);
  v26 = objc_msgSend((id)objc_opt_self(NSUnitLength), "meters");
  Measurement<>.converted(to:)(v26, v3);

  v27 = Measurement.value.getter(v3);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v5, v3);
  v32 = v27;
  static PlottableValue.value(_:_:)(v19, v21, v23 & 1, v25, &v32, &type metadata for Double, &protocol witness table for Double);
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(v21);
  return RectangleMark.init<A>(xStart:xEnd:yStart:yEnd:)(v11, v8, 0, 1, 0, 1, &type metadata for Double, &protocol witness table for Double);
}

uint64_t sub_10007EDBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  double v32;
  char *v33;
  char *v34;
  uint64_t result;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  double v43;

  v41 = a2;
  v3 = sub_100008B04(&qword_10149A1F0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008B04(&qword_101496770);
  __chkstk_darwin(v7);
  v40 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v36 - v10;
  v12 = type metadata accessor for RectangleMark(0);
  v38 = *(_QWORD *)(v12 - 8);
  v39 = v12;
  __chkstk_darwin(v12);
  v37 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = LocalizedStringKey.init(stringLiteral:)(0x7472617473, 0xE500000000000000);
  v15 = v14;
  v17 = v16;
  v19 = v18;
  type metadata accessor for MapsElevationChartViewModel(0);
  v20 = objc_msgSend((id)objc_opt_self(NSUnitLength), "meters");
  Measurement<>.converted(to:)(v20, v3);

  v21 = Measurement.value.getter(v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v43 = v21;
  v22 = a1;
  static PlottableValue.value(_:_:)(v42, v15, v17 & 1, v19, &v43, &type metadata for Double, &protocol witness table for Double);
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(v15);
  v23 = LocalizedStringKey.init(stringLiteral:)(6581861, 0xE300000000000000);
  v25 = v24;
  v27 = v26;
  v29 = v28;
  v30 = sub_1000D76AC();
  v31 = v30[2];
  if (v31)
  {
    v32 = *(double *)&v30[v31 + 3];
    swift_bridgeObjectRelease(v30);
    v43 = v32 + *(double *)(v22 + *(int *)(type metadata accessor for MapsElevationChart(0) + 20));
    v33 = v40;
    static PlottableValue.value(_:_:)(v23, v25, v27 & 1, v29, &v43, &type metadata for Double, &protocol witness table for Double);
    swift_bridgeObjectRelease(v29);
    swift_bridgeObjectRelease(v25);
    v34 = v37;
    RectangleMark.init<A>(xStart:xEnd:yStart:yEnd:)(v11, v33, 0, 1, 0, 1, &type metadata for Double, &protocol witness table for Double);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v38 + 32))(v41, v34, v39);
  }
  else
  {
    result = swift_bridgeObjectRelease(v30);
    __break(1u);
  }
  return result;
}

uint64_t sub_10007F088@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t OpaqueTypeConformance2;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];

  v33 = a2;
  v3 = type metadata accessor for AxisMarkPosition(0);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AxisMarkPreset(0, v4);
  __chkstk_darwin(v7);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MapsElevationChart(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = sub_100008B04(&qword_101496628);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100008B04(&qword_101496A30);
  v18 = swift_allocObject(v17, 48, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E22F70;
  *(_QWORD *)(v18 + 32) = 0;
  v19 = sub_1000D76AC();
  v20 = v19[2];
  if (v20)
  {
    v21 = v19[v20 + 3];
    swift_bridgeObjectRelease(v19);
    *(_QWORD *)(v18 + 40) = v21;
    sub_1000202AC(a1, (uint64_t)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for MapsElevationChart);
    v22 = *(unsigned __int8 *)(v11 + 80);
    v23 = (v22 + 16) & ~v22;
    v24 = swift_allocObject(&unk_10119F060, v23 + v12, v22 | 7);
    v25 = sub_100080DD8((uint64_t)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v24 + v23);
    v26 = static AxisMarkPreset.automatic.getter(v25);
    static AxisMarkPosition.automatic.getter(v26);
    v27 = sub_100008B04(&qword_1014969E8);
    v28 = sub_10000E5D4(&qword_1014969B0);
    v29 = sub_100010D70(&qword_1014969B8, &qword_1014969B0, (const char *)&protocol conformance descriptor for AxisValueLabel<A>);
    v34[0] = v28;
    v34[1] = v29;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v34, &opaque type descriptor for <<opaque return type of AxisMark.offset(x:y:)>>, 1);
    AxisMarks.init<A>(preset:position:values:content:)(v9, v6, v18, sub_100082BEC, v24, v27, &type metadata for Double, OpaqueTypeConformance2, &protocol witness table for Double);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(v33, v16, v13);
  }
  else
  {
    result = swift_bridgeObjectRelease(v19);
    __break(1u);
  }
  return result;
}

uint64_t sub_10007F2FC@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  __n128 v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  char v29;
  char v30;
  _QWORD v31[4];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v37 = a1;
  v2 = type metadata accessor for AxisValueLabelOrientation(0, a2);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AxisValueLabelCollisionResolution(0, v3);
  __chkstk_darwin(v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100008B04(&qword_1014969B0);
  v35 = *(_QWORD *)(v9 - 8);
  v36 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100008B04(&qword_1014969E8);
  v33 = *(_QWORD *)(v12 - 8);
  v34 = v12;
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (AxisValue.index.getter(v13))
    v16 = static UnitPoint.topTrailing.getter();
  else
    v16 = static UnitPoint.topLeading.getter();
  v19 = v18;
  v20 = v17;
  v21 = __chkstk_darwin(v16);
  v22 = static AxisValueLabelCollisionResolution.automatic.getter(v21);
  static AxisValueLabelOrientation.automatic.getter(v22);
  v31[2] = sub_100008B04(&qword_1014969F8);
  v31[3] = sub_10008296C();
  v31[1] = v31;
  v30 = 1;
  v29 = 1;
  v28 = 2;
  ((void (*)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, char *, char, char *, _QWORD, char, _QWORD, char, _QWORD *(*)@<X0>(uint64_t@<X8>)))AxisValueLabel.init(centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:content:))(2, v20, v19, 0, 0, 0, 1, v8, v28, v5, 0, v29, 0, v30, sub_100082C54);
  if (AxisValue.index.getter(v23))
    v24 = 4.0;
  else
    v24 = -8.0;
  v25 = sub_100010D70(&qword_1014969B8, &qword_1014969B0, (const char *)&protocol conformance descriptor for AxisValueLabel<A>);
  v26 = v36;
  AxisMark.offset(x:y:)(v36, v25, v24, 0.0);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v11, v26);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v33 + 32))(v37, v15, v34);
}

_QWORD *sub_10007F56C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  _QWORD *result;
  double v18;
  id v19;
  unint64_t v20;
  void (*v21)(char *, uint64_t);
  double v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  char v32;

  v30 = a2;
  v3 = sub_100008B04(&qword_10149A1F0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v29 - v8;
  v10 = sub_100008B04(&qword_101496A10);
  __chkstk_darwin(v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100008B04(&qword_1014969F8);
  __chkstk_darwin(v13);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(void **)(a1 + *(int *)(type metadata accessor for MapsElevationChartViewModel(0) + 72));
  result = AxisValue.as<A>(_:)(&v31, &type metadata for Double, &type metadata for Double, &protocol witness table for Double);
  if ((v32 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v18 = v31;
    v19 = objc_msgSend((id)objc_opt_self(NSUnitLength), "meters");
    v20 = sub_100081548();
    Measurement.init(value:unit:)(v19, v20, v18);
    Measurement<>.converted(to:)(*(_QWORD *)(a1 + 48), v3);
    v21 = *(void (**)(char *, uint64_t))(v4 + 8);
    v21(v6, v3);
    v22 = Measurement.value.getter(v3);
    v21(v9, v3);
    v23 = objc_msgSend(v16, "stringFromValue:unit:", sub_1000D6D98(), v22);
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v26 = v25;

    sub_10007D5DC(v24, v26, (uint64_t)v12);
    v27 = swift_bridgeObjectRelease(v26);
    v28 = static Color.secondary.getter(v27);
    sub_10000C1FC((uint64_t)v12, (uint64_t)v15, &qword_101496A10);
    *(_QWORD *)&v15[*(int *)(v13 + 36)] = v28;
    sub_100010CC4((uint64_t)v12, &qword_101496A10);
    return (_QWORD *)sub_1000207BC((uint64_t)v15, v30, &qword_1014969F8);
  }
  return result;
}

uint64_t sub_10007F7E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;

  v2 = type metadata accessor for AxisMarkPosition(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MapsElevationChart(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = __chkstk_darwin(v5);
  v9 = type metadata accessor for AxisMarkPreset(0, v8);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static AxisMarkPreset.inset.getter(v10);
  v13 = sub_1000D6F2C();
  sub_1000202AC(a1, (uint64_t)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for MapsElevationChart);
  v14 = *(unsigned __int8 *)(v6 + 80);
  v15 = (v14 + 16) & ~v14;
  v16 = swift_allocObject(&unk_10119F038, v15 + v7, v14 | 7);
  v17 = sub_100080DD8((uint64_t)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v16 + v15);
  static AxisMarkPosition.automatic.getter(v17);
  v18 = sub_100008B04(&qword_101496980);
  v19 = sub_100082600();
  return AxisMarks.init<A>(preset:position:values:content:)(v12, v4, v13, sub_1000825F4, v16, v18, &type metadata for Double, v19, &protocol witness table for Double);
}

_QWORD *sub_10007F97C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *result;
  double v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  char *v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  id v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  _QWORD *v62;
  double v63;
  uint64_t OpaqueTypeConformance2;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  _QWORD *v69;
  void (*v70)(char *, char *, uint64_t);
  char *v71;
  uint64_t v72;
  void (*v73)(char *, char *, _QWORD *);
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  void (*v78)(char *, _QWORD *);
  void (*v79)(char *, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __n128 v96;
  uint64_t v97;
  double v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  char *v102;
  char *v103;
  double v104;
  uint64_t v105;
  _QWORD *v106;
  char *v107;
  char *v108;
  id v109;
  _QWORD *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  void (*v114)(char *, char *, uint64_t);
  char *v115;
  uint64_t v116;
  void (*v117)(char *, char *, uint64_t);
  void (*v118)(char *, char *, uint64_t);
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  void (*v123)(char *, uint64_t);
  void (*v124)(char *, uint64_t);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  id v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  double v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  char *v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t *v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  char *v151;
  _QWORD *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  _QWORD *v160;
  char *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  char *v169;
  char *v170;
  _QWORD *v171;
  char *v172;
  uint64_t v173;
  void *v174;
  void *v175;
  void *v176;
  __int128 v177;
  __int128 v178;
  uint64_t v179;
  __int128 v180;
  __int128 v181;
  uint64_t v182;

  v150 = sub_100008B04(&qword_1014969D0);
  __chkstk_darwin(v150);
  v149 = (char *)&v147 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008B04(&qword_1014969C8);
  __chkstk_darwin(v5);
  v151 = (char *)&v147 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v157 = sub_100008B04(&qword_1014969D8);
  __chkstk_darwin(v157);
  v156 = (char *)&v147 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008B04(&qword_1014969A8);
  __chkstk_darwin(v8);
  v158 = (char *)&v147 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008B04(&qword_101496998);
  __chkstk_darwin(v10);
  v12 = (char *)&v147 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = type metadata accessor for AxisGridLine(0);
  v13 = *(_QWORD *)(v168 - 8);
  __chkstk_darwin(v168);
  v167 = (char *)&v147 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100008B04(&qword_101496808);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v148 = (char *)&v147 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v170 = (char *)&v147 - v19;
  v165 = (_QWORD *)sub_100008B04(&qword_1014969E0);
  v164 = *(v165 - 1);
  __chkstk_darwin(v165);
  v163 = (char *)&v147 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v21);
  v169 = (char *)&v147 - v23;
  v24 = type metadata accessor for AxisValueLabelOrientation(0, v22);
  v25 = __chkstk_darwin(v24);
  v27 = (char *)&v147 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for AxisValueLabelCollisionResolution(0, v25);
  __chkstk_darwin(v28);
  v30 = (char *)&v147 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v160 = (_QWORD *)sub_100008B04(&qword_1014969B0);
  v159 = *(v160 - 1);
  __chkstk_darwin(v160);
  v32 = (char *)&v147 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v162 = sub_100008B04(&qword_1014969E8);
  v171 = *(_QWORD **)(v162 - 8);
  __chkstk_darwin(v162);
  v161 = (char *)&v147 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v172 = (char *)&v147 - v35;
  result = AxisValue.as<A>(_:)(&v180, &type metadata for Double, &type metadata for Double, &protocol witness table for Double);
  if ((BYTE8(v180) & 1) != 0)
  {
    __break(1u);
    return result;
  }
  v37 = *(double *)&v180;
  v38 = sub_1000D6F2C();
  v39 = *(_QWORD *)(v38 + 16);
  v166 = v13;
  if (v39)
  {
    v40 = *(double *)(v38 + 32);
    swift_bridgeObjectRelease(v38);
    if (v37 == v40)
    {
      v152 = (_QWORD *)v16;
      v153 = v12;
      v154 = v15;
      v155 = a2;
      v151 = (char *)type metadata accessor for MapsElevationChartViewModel(0);
      v41 = objc_msgSend(*(id *)(a1 + *((int *)v151 + 19)), "stringFromValue:unit:", sub_1000D6D98(), v37);
      static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
      v43 = v42;

      v44 = static UnitPoint.trailing.getter();
      v46 = v45;
      v48 = v47;
      v49 = __chkstk_darwin(v44);
      v50 = static AxisValueLabelCollisionResolution.automatic.getter(v49);
      static AxisValueLabelOrientation.automatic.getter(v50);
      v145 = sub_100008B04(&qword_1014969F8);
      v146 = sub_10008296C();
      v144 = &v142;
      LOBYTE(v143) = 1;
      ((void (*)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, char *, char, char *, _QWORD, char, _QWORD, int, uint64_t (*)@<X0>(uint64_t@<X8>)))AxisValueLabel.init(centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:content:))(2, v46, v48, 0, 0, 0, 1, v30, 2, v27, 0, 1, 0, v143, sub_100082E64);
      swift_bridgeObjectRelease(v43);
      if (qword_101490D10 != -1)
        swift_once(&qword_101490D10, sub_10007D5CC);
      v51 = -*(double *)&qword_1014D4708;
      v52 = sub_100010D70(&qword_1014969B8, &qword_1014969B0, (const char *)&protocol conformance descriptor for AxisValueLabel<A>);
      v53 = v161;
      v54 = v160;
      AxisMark.offset(x:y:)(v160, v52, v51, 0.0);
      (*(void (**)(char *, _QWORD *))(v159 + 8))(v32, v54);
      v55 = v53;
      v56 = v162;
      v160 = (_QWORD *)v171[4];
      ((void (*)(char *, char *))v160)(v172, v53);
      StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(&v177, 1, 0, _swiftEmptyArrayStorage, *(double *)(*(_QWORD *)(a1 + *((int *)v151 + 14)) + OBJC_IVAR____TtC4Maps23MapsElevationChartStyle_gridLineWidth), 10.0, 0.0);
      v180 = v177;
      v181 = v178;
      v182 = v179;
      v57 = v167;
      AxisGridLine.init(centered:stroke:)(2, &v180);
      v58 = objc_msgSend((id)objc_opt_self(UIColor), "tertiaryLabelColor");
      v59 = Color.init(uiColor:)(v58);
      v173 = v59;
      v60 = v170;
      v61 = v168;
      AxisMark.foregroundStyle<A>(_:)(&v173, v168, &type metadata for Color, &protocol witness table for AxisGridLine, &protocol witness table for Color);
      swift_release(v59);
      (*(void (**)(char *, uint64_t))(v166 + 8))(v57, v61);
      v62 = v152;
      if (qword_101490D08 != -1)
        swift_once(&qword_101490D08, sub_10007D5BC);
      v63 = -*(double *)&qword_1014D4700;
      v173 = v61;
      v174 = &type metadata for Color;
      v175 = &protocol witness table for AxisGridLine;
      v176 = &protocol witness table for Color;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v173, &opaque type descriptor for <<opaque return type of AxisMark.foregroundStyle<A>(_:)>>, 1);
      v65 = v163;
      v66 = v154;
      AxisMark.offset(x:y:)(v154, OpaqueTypeConformance2, 0.0, v63);
      ((void (*)(char *, uint64_t))v62[1])(v60, v66);
      v67 = v164;
      v170 = *(char **)(v164 + 32);
      v68 = v169;
      v69 = v165;
      ((void (*)(char *, char *, _QWORD *))v170)(v169, v65, v165);
      v70 = (void (*)(char *, char *, uint64_t))v171[2];
      v71 = v55;
      v72 = v56;
      v70(v55, v172, v56);
      v73 = *(void (**)(char *, char *, _QWORD *))(v67 + 16);
      v73(v65, v68, v69);
      v74 = v156;
      v70(v156, v55, v56);
      v75 = v157;
      v76 = &v74[*(int *)(v157 + 48)];
      v73(v76, v65, v69);
      v77 = (uint64_t)v158;
      ((void (*)(char *, char *, uint64_t))v160)(v158, v74, v72);
      ((void (*)(uint64_t, char *, _QWORD *))v170)(v77 + *(int *)(v75 + 48), v76, v69);
      v78 = *(void (**)(char *, _QWORD *))(v67 + 8);
      v78(v65, v69);
      v79 = (void (*)(char *, uint64_t))v171[1];
      v80 = v72;
      v79(v71, v72);
      v81 = (uint64_t)v153;
      sub_10000C1FC(v77, (uint64_t)v153, &qword_1014969A8);
      v82 = sub_100008B04(&qword_101496A28);
      swift_storeEnumTagMultiPayload(v81, v82, 0);
      sub_100010CC4(v77, &qword_1014969A8);
      v83 = v155;
      sub_10000C1FC(v81, v155, &qword_101496998);
      v84 = sub_100008B04(&qword_1014969F0);
      swift_storeEnumTagMultiPayload(v83, v84, 0);
      sub_100010CC4(v81, &qword_101496998);
      v78(v169, v69);
      return (_QWORD *)((uint64_t (*)(char *, uint64_t))v79)(v172, v80);
    }
  }
  else
  {
    swift_bridgeObjectRelease(v38);
  }
  v85 = sub_1000D6F2C();
  v86 = *(_QWORD *)(v85 + 16);
  if (v86)
  {
    v87 = *(double *)(v85 + 8 * v86 + 24);
    swift_bridgeObjectRelease(v85);
    if (v37 == v87)
    {
      v152 = (_QWORD *)v16;
      v153 = v12;
      v154 = v15;
      v155 = a2;
      v169 = (char *)type metadata accessor for MapsElevationChartViewModel(0);
      v88 = objc_msgSend(*(id *)(a1 + *((int *)v169 + 19)), "stringFromValue:unit:", sub_1000D6D98(), v37);
      static String._unconditionallyBridgeFromObjectiveC(_:)(v88);
      v90 = v89;

      v91 = static UnitPoint.trailing.getter();
      v93 = v92;
      v95 = v94;
      v96 = __chkstk_darwin(v91);
      v97 = static AxisValueLabelCollisionResolution.automatic.getter(v96);
      static AxisValueLabelOrientation.automatic.getter(v97);
      v145 = sub_100008B04(&qword_1014969F8);
      v146 = sub_10008296C();
      v144 = &v142;
      LOBYTE(v143) = 1;
      ((void (*)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, char *, char, char *, _QWORD, char, _QWORD, int, uint64_t (*)@<X0>(uint64_t@<X8>)))AxisValueLabel.init(centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:content:))(2, v93, v95, 0, 0, 0, 1, v30, 2, v27, 0, 1, 0, v143, sub_100082950);
      swift_bridgeObjectRelease(v90);
      if (qword_101490D10 != -1)
        swift_once(&qword_101490D10, sub_10007D5CC);
      v98 = -*(double *)&qword_1014D4708;
      v99 = v152;
      v100 = v162;
      v101 = v171;
      v102 = v172;
      v103 = v161;
      if (qword_101490D08 != -1)
        swift_once(&qword_101490D08, sub_10007D5BC);
      v104 = -*(double *)&qword_1014D4700;
      v105 = sub_100010D70(&qword_1014969B8, &qword_1014969B0, (const char *)&protocol conformance descriptor for AxisValueLabel<A>);
      v106 = v160;
      AxisMark.offset(x:y:)(v160, v105, v98, v104);
      (*(void (**)(char *, _QWORD *))(v159 + 8))(v32, v106);
      v107 = v103;
      v165 = (_QWORD *)v101[4];
      ((void (*)(char *, char *, uint64_t))v165)(v102, v103, v100);
      StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(&v177, 1, 0, _swiftEmptyArrayStorage, *(double *)(*(_QWORD *)(a1 + *((int *)v169 + 14)) + OBJC_IVAR____TtC4Maps23MapsElevationChartStyle_gridLineWidth), 10.0, 0.0);
      v180 = v177;
      v181 = v178;
      v182 = v179;
      v108 = v167;
      AxisGridLine.init(centered:stroke:)(2, &v180);
      v109 = objc_msgSend((id)objc_opt_self(UIColor), "tertiaryLabelColor");
      v110 = v101;
      v111 = Color.init(uiColor:)(v109);
      v173 = v111;
      v112 = v148;
      v113 = v168;
      AxisMark.foregroundStyle<A>(_:)(&v173, v168, &type metadata for Color, &protocol witness table for AxisGridLine, &protocol witness table for Color);
      swift_release(v111);
      (*(void (**)(char *, uint64_t))(v166 + 8))(v108, v113);
      v114 = (void (*)(char *, char *, uint64_t))v99[4];
      v115 = v170;
      v116 = v154;
      v114(v170, v112, v154);
      v117 = (void (*)(char *, char *, uint64_t))v110[2];
      v117(v107, v172, v100);
      v118 = (void (*)(char *, char *, uint64_t))v99[2];
      v118(v112, v115, v116);
      v119 = v149;
      v117(v149, v107, v100);
      v120 = v150;
      v121 = &v119[*(int *)(v150 + 48)];
      v118(v121, v112, v116);
      v122 = (uint64_t)v151;
      ((void (*)(char *, char *, uint64_t))v165)(v151, v119, v100);
      v114((char *)(v122 + *(int *)(v120 + 48)), v121, v116);
      v123 = (void (*)(char *, uint64_t))v99[1];
      v123(v112, v116);
      v124 = (void (*)(char *, uint64_t))v171[1];
      v124(v107, v100);
      v125 = (uint64_t)v153;
      sub_10000C1FC(v122, (uint64_t)v153, &qword_1014969C8);
      v126 = sub_100008B04(&qword_101496A28);
      swift_storeEnumTagMultiPayload(v125, v126, 1);
      sub_100010CC4(v122, &qword_1014969C8);
      v127 = v155;
      sub_10000C1FC(v125, v155, &qword_101496998);
      v128 = sub_100008B04(&qword_1014969F0);
      swift_storeEnumTagMultiPayload(v127, v128, 0);
      sub_100010CC4(v125, &qword_101496998);
      v123(v170, v116);
      return (_QWORD *)((uint64_t (*)(char *, uint64_t))v124)(v172, v100);
    }
  }
  else
  {
    swift_bridgeObjectRelease(v85);
  }
  v129 = type metadata accessor for MapsElevationChartViewModel(0);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(&v177, 1, 0, _swiftEmptyArrayStorage, *(double *)(*(_QWORD *)(a1 + *(int *)(v129 + 56)) + OBJC_IVAR____TtC4Maps23MapsElevationChartStyle_gridLineWidth), 10.0, 0.0);
  v180 = v177;
  v181 = v178;
  v182 = v179;
  v130 = v167;
  AxisGridLine.init(centered:stroke:)(2, &v180);
  v131 = objc_msgSend((id)objc_opt_self(UIColor), "tertiaryLabelColor");
  v132 = Color.init(uiColor:)(v131);
  v173 = v132;
  v133 = v170;
  v134 = v168;
  AxisMark.foregroundStyle<A>(_:)(&v173, v168, &type metadata for Color, &protocol witness table for AxisGridLine, &protocol witness table for Color);
  swift_release(v132);
  (*(void (**)(char *, uint64_t))(v166 + 8))(v130, v134);
  if (qword_101490D08 != -1)
    swift_once(&qword_101490D08, sub_10007D5BC);
  v135 = *(double *)&qword_1014D4700 * -0.5;
  v173 = v134;
  v174 = &type metadata for Color;
  v175 = &protocol witness table for AxisGridLine;
  v176 = &protocol witness table for Color;
  v136 = swift_getOpaqueTypeConformance2(&v173, &opaque type descriptor for <<opaque return type of AxisMark.foregroundStyle<A>(_:)>>, 1);
  v137 = v163;
  AxisMark.offset(x:y:)(v15, v136, 0.0, v135);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v133, v15);
  v138 = v164;
  v139 = v169;
  v140 = v165;
  (*(void (**)(char *, char *, _QWORD *))(v164 + 32))(v169, v137, v165);
  (*(void (**)(uint64_t, char *, _QWORD *))(v138 + 16))(a2, v139, v140);
  v141 = sub_100008B04(&qword_1014969F0);
  swift_storeEnumTagMultiPayload(a2, v141, 1);
  return (_QWORD *)(*(uint64_t (**)(char *, _QWORD *))(v138 + 8))(v139, v140);
}

uint64_t sub_100080964@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  uint64_t v12;

  v6 = sub_100008B04(&qword_101496A10);
  __chkstk_darwin(v6);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007D5DC(a1, a2, (uint64_t)v8);
  v9 = objc_msgSend((id)objc_opt_self(UIColor), "tertiaryLabelColor");
  v10 = Color.init(uiColor:)(v9);
  sub_10000C1FC((uint64_t)v8, a3, &qword_101496A10);
  *(_QWORD *)(a3 + *(int *)(sub_100008B04(&qword_1014969F8) + 36)) = v10;
  return sub_100010CC4((uint64_t)v8, &qword_101496A10);
}

double sub_100080A40@<D0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  double result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  char v13;
  double v14;
  uint64_t v15;
  char v16;
  uint64_t v17;

  v3 = static VerticalAlignment.center.getter(a2);
  sub_100075408((uint64_t)&v11);
  v4 = v11;
  v5 = v13;
  result = v14;
  v7 = v15;
  v8 = v16;
  v9 = v17;
  v10 = v12;
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = v10;
  *(_BYTE *)(a1 + 48) = v5;
  *(double *)(a1 + 56) = result;
  *(_QWORD *)(a1 + 64) = v7;
  *(_BYTE *)(a1 + 72) = v8;
  *(_QWORD *)(a1 + 80) = v9;
  return result;
}

uint64_t sub_100080AC4(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 0xCu)
    return swift_bridgeObjectRetain(a2);
  return result;
}

unint64_t sub_100080ADC()
{
  unint64_t result;
  uint64_t v1;
  void *v2;

  result = qword_101496650;
  if (!qword_101496650)
  {
    v1 = sub_10000E5D4(&qword_101496638);
    v2 = &protocol witness table for Double;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ClosedRange<A>, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_101496650);
  }
  return result;
}

unint64_t sub_100080B38()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101496678;
  if (!qword_101496678)
  {
    v1 = sub_10000E5D4(&qword_101496670);
    v2[0] = sub_100010D70(&qword_101496680, &qword_101496688, (const char *)&protocol conformance descriptor for Chart<A>);
    v2[1] = &protocol witness table for _BlendModeEffect;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101496678);
  }
  return result;
}

unint64_t sub_100080BBC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];
  _QWORD v3[4];

  result = qword_101496700;
  if (!qword_101496700)
  {
    v1 = sub_10000E5D4(&qword_101496608);
    v3[0] = sub_10000E5D4(&qword_101496708);
    v3[1] = sub_10000E5D4(&qword_101496638);
    v3[2] = sub_100080C8C();
    v3[3] = sub_100080ADC();
    v2[0] = swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of View.chartYScale<A>(domain:type:)>>, 1);
    v2[1] = sub_100010D70(&qword_101496730, &qword_101496738, (const char *)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101496700);
  }
  return result;
}

unint64_t sub_100080C8C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101496710;
  if (!qword_101496710)
  {
    v1 = sub_10000E5D4(&qword_101496708);
    v2[0] = sub_100080CF8();
    v2[1] = &protocol witness table for _FrameLayout;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101496710);
  }
  return result;
}

unint64_t sub_100080CF8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  _QWORD v4[2];
  uint64_t v5;
  uint64_t v6;

  result = qword_101496718;
  if (!qword_101496718)
  {
    v1 = sub_10000E5D4(&qword_101496720);
    v2 = sub_10000E5D4(&qword_101496728);
    v5 = sub_10000E5D4(&qword_1014966A8);
    v6 = sub_100010D70(&qword_1014966B0, &qword_1014966A8, (const char *)&protocol conformance descriptor for Chart<A>);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.chartXAxis(_:)>>, 1);
    v5 = v2;
    v6 = OpaqueTypeConformance2;
    v4[0] = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.chartYAxis(_:)>>, 1);
    v4[1] = &protocol witness table for _OffsetEffect;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v4);
    atomic_store(result, (unint64_t *)&qword_101496718);
  }
  return result;
}

uint64_t sub_100080DD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MapsElevationChart(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100080E1C(uint64_t a1)
{
  return sub_100082BF8(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10007744C);
}

uint64_t sub_100080E2C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MapsElevationChart(0) - 8) + 80);
  return sub_1000777C8(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t sub_100080E80()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100080EA4(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v1 + 16))(*a1, a1[1]);
}

uint64_t sub_100080ECC@<X0>(uint64_t a1@<X8>)
{
  return sub_100077FBC(a1);
}

uint64_t sub_100080ED4()
{
  uint64_t v0;

  return sub_1000782D0(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100080EDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(type metadata accessor for MapsElevationChart(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 17) & ~v2;
  v4 = v2 | 7;
  v5 = (*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v0 + v3;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v3 + 16));

  v7 = (int *)type metadata accessor for MapsElevationChartViewModel(0);
  v8 = v6 + v7[11];
  v9 = sub_100008B04(&qword_10149A1F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[13] + 8));

  swift_release();
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[17]));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5));
  return swift_deallocObject(v0, v5 + 8, v4);
}

_QWORD *sub_100081000@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(type metadata accessor for MapsElevationChart(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return sub_10007953C(a1, *(_BYTE *)(v2 + 16), v2 + v6, *(_QWORD *)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8)), a2);
}

unint64_t sub_100081064()
{
  unint64_t result;
  uint64_t v1;
  uint64_t *p_OpaqueTypeConformance2;
  uint64_t OpaqueTypeConformance2;
  void *v4;
  void *v5;
  void *v6;

  result = qword_1014967B0;
  if (!qword_1014967B0)
  {
    v1 = sub_10000E5D4(&qword_1014967A8);
    OpaqueTypeConformance2 = type metadata accessor for AxisGridLine(255);
    v4 = &type metadata for Color;
    v5 = &protocol witness table for AxisGridLine;
    v6 = &protocol witness table for Color;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&OpaqueTypeConformance2, &opaque type descriptor for <<opaque return type of AxisMark.foregroundStyle<A>(_:)>>, 1);
    v4 = (void *)sub_100070348(&qword_1014967B8, &qword_1014967C0, (uint64_t (*)(void))sub_100081130, (const char *)&protocol conformance descriptor for <A> A?);
    p_OpaqueTypeConformance2 = &OpaqueTypeConformance2;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <each A> BuilderTuple<Pack{repeat A}>, v1, &p_OpaqueTypeConformance2);
    atomic_store(result, (unint64_t *)&qword_1014967B0);
  }
  return result;
}

unint64_t sub_100081130()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;
  _QWORD v3[2];
  _QWORD v4[4];

  result = qword_1014967C8;
  if (!qword_1014967C8)
  {
    v1 = sub_10000E5D4(&qword_1014967D0);
    v2 = sub_1000811F8();
    v4[0] = sub_10000E5D4(&qword_1014967E8);
    v4[1] = &type metadata for Color;
    v4[2] = sub_100010D70(&qword_1014967F0, &qword_1014967E8, (const char *)&protocol conformance descriptor for AxisValueLabel<A>);
    v4[3] = &protocol witness table for Color;
    v3[0] = v2;
    v3[1] = swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of AxisMark.foregroundStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> BuilderConditional<A, B>, v1, v3);
    atomic_store(result, (unint64_t *)&qword_1014967C8);
  }
  return result;
}

unint64_t sub_1000811F8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];
  _QWORD v3[4];

  result = qword_1014967D8;
  if (!qword_1014967D8)
  {
    v1 = sub_10000E5D4(&qword_1014967E0);
    v3[0] = sub_10000E5D4(&qword_1014967E8);
    v3[1] = &type metadata for Color;
    v3[2] = sub_100010D70(&qword_1014967F0, &qword_1014967E8, (const char *)&protocol conformance descriptor for AxisValueLabel<A>);
    v3[3] = &protocol witness table for Color;
    v2[0] = swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of AxisMark.foregroundStyle<A>(_:)>>, 1);
    v2[1] = v2[0];
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> BuilderConditional<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_1014967D8);
  }
  return result;
}

uint64_t sub_1000812B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(type metadata accessor for MapsElevationChart(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = v2 | 7;
  v5 = (v3 + *(_QWORD *)(v1 + 64)) & 0xFFFFFFFFFFFFFFF8;
  v6 = v5 + v0;
  v7 = v5 + 16;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  v8 = v0 + v3;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v3 + 16));

  v9 = (int *)type metadata accessor for MapsElevationChartViewModel(0);
  v10 = v8 + v9[11];
  v11 = sub_100008B04(&qword_10149A1F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + v9[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + v9[13] + 8));

  swift_release();
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + v9[17]));

  return swift_deallocObject(v0, v7, v4);
}

unint64_t sub_1000813EC@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for MapsElevationChart(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_100078490(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + v4, *(unsigned __int8 *)(v1 + v4 + *(_QWORD *)(v3 + 64)), *(uint64_t (**)(char *, char *, uint64_t))(((v4 + *(_QWORD *)(v3 + 64)) & 0xFFFFFFFFFFFFF8)+ v1+ 8), a1);
}

unint64_t sub_100081454()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;

  result = qword_101496830;
  if (!qword_101496830)
  {
    v1 = sub_10000E5D4(&qword_101496828);
    v2 = sub_10000E5D4(&qword_101496838);
    v5 = type metadata accessor for AxisGridLine(255);
    v6 = &protocol witness table for AxisGridLine;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of AxisMark.font(_:)>>, 1);
    v5 = v2;
    v6 = &type metadata for Color;
    v7 = OpaqueTypeConformance2;
    v8 = &protocol witness table for Color;
    v5 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of AxisMark.foregroundStyle<A>(_:)>>, 1);
    v6 = (void *)sub_100070348(&qword_1014967B8, &qword_1014967C0, (uint64_t (*)(void))sub_100081130, (const char *)&protocol conformance descriptor for <A> A?);
    v4 = &v5;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <each A> BuilderTuple<Pack{repeat A}>, v1, &v4);
    atomic_store(result, (unint64_t *)&qword_101496830);
  }
  return result;
}

unint64_t sub_100081548()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10149A210;
  if (!qword_10149A210)
  {
    v1 = objc_opt_self(NSUnitLength);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10149A210);
  }
  return result;
}

uint64_t sub_100081584()
{
  uint64_t v0;

  return sub_1000779BC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

unint64_t sub_10008158C()
{
  unint64_t result;
  uint64_t v1;
  __n128 v2;
  uint64_t OpaqueTypeConformance2;
  _QWORD v4[4];

  result = qword_101496858;
  if (!qword_101496858)
  {
    v1 = sub_10000E5D4(&qword_101496850);
    v4[0] = type metadata accessor for BarMark(255, v2);
    v4[1] = &type metadata for Color;
    v4[2] = &protocol witness table for BarMark;
    v4[3] = &protocol witness table for Color;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ForEach<A, B, C>, v1, &OpaqueTypeConformance2);
    atomic_store(result, (unint64_t *)&qword_101496858);
  }
  return result;
}

uint64_t sub_100081628(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t result;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  double v14;
  void (*v15)(char *, uint64_t);
  id v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *object;
  uint64_t countAndFlagsBits;
  Swift::String v34;

  v3 = sub_100008B04(&qword_10149A1F0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101490ED0 != -1)
    swift_once(&qword_101490ED0, sub_10011833C);
  v34._countAndFlagsBits = 0xD00000000000005CLL;
  v34._object = (void *)0x8000000100E44B00;
  v7._object = (void *)0x8000000100E44AD0;
  v7._countAndFlagsBits = 0xD000000000000029;
  v8._countAndFlagsBits = 0x4025206F74204025;
  v8._object = (void *)0xE90000000000002ELL;
  v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)qword_1014D4B80, v8, v34);
  result = type metadata accessor for MapsElevationChartViewModel(0);
  if (*(_QWORD *)(a1 + 16))
  {
    v11 = *(int *)(result + 72);
    countAndFlagsBits = v9._countAndFlagsBits;
    v12 = *(void **)(v1 + v11);
    type metadata accessor for MapsElevationChartViewModel.ElevationDatum(0);
    object = v9._object;
    v13 = *(_QWORD *)(v1 + 48);
    Measurement<>.converted(to:)(v13, v3);
    v14 = Measurement.value.getter(v3);
    v15 = *(void (**)(char *, uint64_t))(v4 + 8);
    v15(v6, v3);
    v16 = objc_msgSend(v12, "stringFromValue:unit:", sub_1000D6D98(), v14);
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v30 = v18;
    v31 = v17;

    Measurement<>.converted(to:)(v13, v3);
    v19 = Measurement.value.getter(v3);
    v15(v6, v3);
    v20 = objc_msgSend(v12, "stringFromValue:unit:", sub_1000D6D98(), v19);
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v24 = sub_100008B04((uint64_t *)&unk_10149A4F0);
    v25 = swift_allocObject(v24, 112, 7);
    *(_OWORD *)(v25 + 16) = xmmword_100E22F70;
    *(_QWORD *)(v25 + 56) = &type metadata for String;
    v26 = sub_10000D8E0();
    v27 = v30;
    *(_QWORD *)(v25 + 32) = v31;
    *(_QWORD *)(v25 + 40) = v27;
    *(_QWORD *)(v25 + 96) = &type metadata for String;
    *(_QWORD *)(v25 + 104) = v26;
    *(_QWORD *)(v25 + 64) = v26;
    *(_QWORD *)(v25 + 72) = v21;
    *(_QWORD *)(v25 + 80) = v23;
    v28 = object;
    v29 = String.init(format:_:)(countAndFlagsBits, object, v25);
    swift_bridgeObjectRelease(v28);
    return v29;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000818F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t result;
  Swift::String v12;
  int64_t v13;
  void *v14;
  uint64_t v15;
  double *v16;
  id v17;
  double v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  double v22;
  unint64_t v23;
  double *v24;
  double v25;
  double v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  double *v35;
  double v36;
  double v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *object;
  uint64_t v46;
  uint64_t v47;
  Swift::String v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  double *v53;
  Swift::String v54;

  v3 = sub_100008B04(&qword_10149A1F0);
  v52 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for MapsElevationChartViewModel.ElevationDatum(0);
  v6 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101490ED0 != -1)
    swift_once(&qword_101490ED0, sub_10011833C);
  v9._countAndFlagsBits = 0xD00000000000002BLL;
  v54._countAndFlagsBits = 0xD000000000000034;
  v54._object = (void *)0x8000000100E44A90;
  v10._object = (void *)0x8000000100E44A30;
  v9._object = (void *)0x8000000100E44A60;
  v10._countAndFlagsBits = 0xD000000000000029;
  v12 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, (Swift::String_optional)0, (NSBundle)qword_1014D4B80, v9, v54);
  result = v12._countAndFlagsBits;
  v13 = *(_QWORD *)(a1 + 16);
  v48 = v12;
  if (v13)
  {
    v47 = v1;
    v53 = (double *)_swiftEmptyArrayStorage;
    sub_1001324A0(0, v13, 0);
    v14 = (void *)objc_opt_self(NSUnitLength);
    v15 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v49 = *(_QWORD *)(v6 + 72);
    v50 = v14;
    v16 = v53;
    do
    {
      sub_1000202AC(v15, (uint64_t)v8, type metadata accessor for MapsElevationChartViewModel.ElevationDatum);
      v17 = objc_msgSend(v50, "meters");
      Measurement<>.converted(to:)(v17, v3);

      v18 = Measurement.value.getter(v3);
      (*(void (**)(char *, uint64_t))(v52 + 8))(v5, v3);
      sub_1000202F0((uint64_t)v8, type metadata accessor for MapsElevationChartViewModel.ElevationDatum);
      if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
      {
        sub_1001324A0(0, *((_QWORD *)v16 + 2) + 1, 1);
        v16 = v53;
      }
      v20 = *((_QWORD *)v16 + 2);
      v19 = *((_QWORD *)v16 + 3);
      v21 = v20 + 1;
      if (v20 >= v19 >> 1)
      {
        sub_1001324A0(v19 > 1, v20 + 1, 1);
        v16 = v53;
      }
      *((_QWORD *)v16 + 2) = v21;
      v16[v20 + 4] = v18;
      v15 += v49;
      --v13;
    }
    while (v13);
    v1 = v47;
  }
  else
  {
    v16 = (double *)_swiftEmptyArrayStorage;
    v21 = _swiftEmptyArrayStorage[2];
    if (!v21)
    {
LABEL_25:
      __break(1u);
      return result;
    }
  }
  v22 = v16[4];
  v23 = v21 - 1;
  if (v21 != 1)
  {
    v24 = v16 + 5;
    do
    {
      v25 = *v24++;
      v26 = v25;
      if (v25 < v22)
        v22 = v26;
      --v23;
    }
    while (v23);
  }
  v27 = *(void **)(v1 + *(int *)(type metadata accessor for MapsElevationChartViewModel(0) + 76));
  v28 = objc_msgSend(v27, "stringFromValue:unit:", sub_1000D6D98(), v22);
  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
  v31 = v30;

  v32 = *((_QWORD *)v16 + 2);
  if (!v32)
  {
    result = swift_bridgeObjectRelease(v16);
    __break(1u);
    goto LABEL_25;
  }
  v33 = v16[4];
  v34 = v32 - 1;
  if (v34)
  {
    v35 = v16 + 5;
    do
    {
      v36 = *v35++;
      v37 = v36;
      if (v33 < v36)
        v33 = v37;
      --v34;
    }
    while (v34);
  }
  swift_bridgeObjectRelease(v16);
  v38 = objc_msgSend(v27, "stringFromValue:unit:", sub_1000D6D98(), v33);
  v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
  v41 = v40;

  v42 = sub_100008B04((uint64_t *)&unk_10149A4F0);
  v43 = swift_allocObject(v42, 112, 7);
  *(_OWORD *)(v43 + 16) = xmmword_100E22F70;
  *(_QWORD *)(v43 + 56) = &type metadata for String;
  v44 = sub_10000D8E0();
  *(_QWORD *)(v43 + 32) = v29;
  *(_QWORD *)(v43 + 40) = v31;
  *(_QWORD *)(v43 + 96) = &type metadata for String;
  *(_QWORD *)(v43 + 104) = v44;
  *(_QWORD *)(v43 + 64) = v44;
  *(_QWORD *)(v43 + 72) = v39;
  *(_QWORD *)(v43 + 80) = v41;
  object = v48._object;
  v46 = String.init(format:_:)(v48._countAndFlagsBits, v48._object, v43);
  swift_bridgeObjectRelease(object);
  return v46;
}

uint64_t sub_100081D08(uint64_t a1)
{
  return sub_100082BF8(a1, (uint64_t (*)(uint64_t, uint64_t))sub_100077B38);
}

unint64_t sub_100081D14()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101496860;
  if (!qword_101496860)
  {
    v1 = type metadata accessor for MapsElevationChartViewModel.ElevationDatum(255);
    result = swift_getWitnessTable("Ql7", v1);
    atomic_store(result, (unint64_t *)&qword_101496860);
  }
  return result;
}

uint64_t sub_100081D60(uint64_t a1)
{
  return sub_100082BF8(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10007A320);
}

uint64_t sub_100081D6C()
{
  uint64_t v0;

  return sub_10007AF04(*(_QWORD *)(v0 + 16), (uint64_t (*)(__n128))sub_1000D76AC, (uint64_t)&unk_10119EFE8, (uint64_t)sub_100081EE0);
}

uint64_t sub_100081D9C()
{
  uint64_t v0;

  return sub_10007AF04(*(_QWORD *)(v0 + 16), (uint64_t (*)(__n128))sub_1000D6F2C, (uint64_t)&unk_10119EFC0, (uint64_t)sub_100081DD0);
}

uint64_t sub_100081DD0(uint64_t a1)
{
  return sub_100082BF8(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10007B0A0);
}

unint64_t sub_100081DDC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v9[2];

  result = qword_101496870;
  if (!qword_101496870)
  {
    v1 = sub_10000E5D4(&qword_101496868);
    v5 = type metadata accessor for AxisGridLine(255);
    v6 = &type metadata for Color;
    v7 = &protocol witness table for AxisGridLine;
    v8 = &protocol witness table for Color;
    v9[0] = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of AxisMark.foregroundStyle<A>(_:)>>, 1);
    v2 = sub_10000E5D4(&qword_1014967E8);
    v3 = sub_100010D70(&qword_1014967F0, &qword_1014967E8, (const char *)&protocol conformance descriptor for AxisValueLabel<A>);
    v5 = v2;
    v6 = &type metadata for Color;
    v7 = (void *)v3;
    v8 = &protocol witness table for Color;
    v9[1] = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of AxisMark.foregroundStyle<A>(_:)>>, 1);
    v4 = v9;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <each A> BuilderTuple<Pack{repeat A}>, v1, &v4);
    atomic_store(result, (unint64_t *)&qword_101496870);
  }
  return result;
}

uint64_t sub_100081EE0(uint64_t a1)
{
  return sub_100082BF8(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10007A794);
}

uint64_t sub_100081EEC()
{
  uint64_t v0;

  return sub_10007B67C(*(_QWORD *)(v0 + 16));
}

unint64_t sub_100081EF4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v13[2];

  result = qword_101496898;
  if (!qword_101496898)
  {
    v1 = sub_10000E5D4(&qword_1014968A0);
    v2 = sub_10000E5D4(&qword_1014968A8);
    v9 = type metadata accessor for AreaMark(255);
    v10 = &type metadata for LinearGradient;
    v11 = &protocol witness table for AreaMark;
    v12 = &protocol witness table for LinearGradient;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
    v9 = v2;
    v10 = (void *)OpaqueTypeConformance2;
    v13[0] = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of ChartContent.interpolationMethod(_:)>>, 1);
    v4 = sub_10000E5D4(&qword_1014968B0);
    v5 = sub_10000E5D4(&qword_1014968B8);
    v9 = type metadata accessor for LineMark(255);
    v10 = &protocol witness table for LineMark;
    v6 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of ChartContent.lineStyle(_:)>>, 1);
    v9 = v5;
    v10 = &type metadata for Color;
    v11 = (void *)v6;
    v12 = &protocol witness table for Color;
    v7 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
    v9 = v4;
    v10 = (void *)v7;
    v13[1] = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of ChartContent.interpolationMethod(_:)>>, 1);
    v8 = v13;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <each A> BuilderTuple<Pack{repeat A}>, v1, &v8);
    atomic_store(result, (unint64_t *)&qword_101496898);
  }
  return result;
}

_QWORD *sub_100082060@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100082070(uint64_t a1)
{
  return sub_100082BF8(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10007B7D4);
}

_QWORD *sub_10008207C(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

uint64_t sub_1000820A4(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  return a1;
}

uint64_t sub_1000820CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10007E0B4(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1000820D4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t *p_OpaqueTypeConformance2;
  _QWORD v4[4];
  uint64_t OpaqueTypeConformance2;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;

  result = qword_1014968E0;
  if (!qword_1014968E0)
  {
    v1 = sub_10000E5D4(&qword_1014968D8);
    OpaqueTypeConformance2 = sub_10000E5D4(&qword_1014968E8);
    v6 = type metadata accessor for RectangleMark(255);
    v7 = sub_100082204();
    v8 = &protocol witness table for RectangleMark;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&OpaqueTypeConformance2, &opaque type descriptor for <<opaque return type of ChartContent.mask<A>(content:)>>, 1);
    v6 = OpaqueTypeConformance2;
    v4[0] = type metadata accessor for PointMark(255);
    v4[1] = sub_10000E5D4(&qword_101496920);
    v4[2] = &protocol witness table for PointMark;
    v4[3] = sub_100082560(&qword_101496928, &qword_101496920, &qword_101496930, &qword_101496938);
    v2 = swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of ChartContent.symbol<A>(symbol:)>>, 1);
    v7 = v2;
    v8 = (void *)sub_100082428();
    v9 = v2;
    p_OpaqueTypeConformance2 = &OpaqueTypeConformance2;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <each A> BuilderTuple<Pack{repeat A}>, v1, &p_OpaqueTypeConformance2);
    atomic_store(result, (unint64_t *)&qword_1014968E0);
  }
  return result;
}

unint64_t sub_100082204()
{
  unint64_t result;
  uint64_t v1;
  _QWORD *v2;
  _QWORD v3[4];
  _QWORD v4[2];

  result = qword_1014968F0;
  if (!qword_1014968F0)
  {
    v1 = sub_10000E5D4(&qword_1014968E8);
    v4[0] = sub_1000822B4();
    v3[0] = sub_10000E5D4(&qword_101496908);
    v3[1] = &type metadata for Color;
    v3[2] = sub_100082378();
    v3[3] = &protocol witness table for Color;
    v4[1] = swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
    v2 = v4;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <each A> BuilderTuple<Pack{repeat A}>, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1014968F0);
  }
  return result;
}

unint64_t sub_1000822B4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  result = qword_1014968F8;
  if (!qword_1014968F8)
  {
    v1 = sub_10000E5D4(&qword_101496900);
    v2 = sub_10000E5D4(&qword_1014968A8);
    v5 = type metadata accessor for AreaMark(255);
    v6 = &type metadata for LinearGradient;
    v7 = &protocol witness table for AreaMark;
    v8 = &protocol witness table for LinearGradient;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
    v5 = v2;
    v6 = (void *)OpaqueTypeConformance2;
    v4 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of ChartContent.interpolationMethod(_:)>>, 1);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ForEach<A, B, C>, v1, &v4);
    atomic_store(result, (unint64_t *)&qword_1014968F8);
  }
  return result;
}

unint64_t sub_100082378()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  result = qword_101496910;
  if (!qword_101496910)
  {
    v1 = sub_10000E5D4(&qword_101496908);
    v2 = sub_10000E5D4(&qword_101496918);
    v5 = type metadata accessor for LineMark(255);
    v6 = &protocol witness table for LineMark;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of ChartContent.interpolationMethod(_:)>>, 1);
    v5 = v2;
    v6 = (void *)OpaqueTypeConformance2;
    v4 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of ChartContent.lineStyle(_:)>>, 1);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ForEach<A, B, C>, v1, &v4);
    atomic_store(result, (unint64_t *)&qword_101496910);
  }
  return result;
}

unint64_t sub_100082428()
{
  unint64_t result;
  uint64_t v1;
  uint64_t OpaqueTypeConformance2;
  _QWORD v3[4];

  result = qword_101496940;
  if (!qword_101496940)
  {
    v1 = sub_10000E5D4(&qword_101496948);
    v3[0] = type metadata accessor for PointMark(255);
    v3[1] = sub_10000E5D4(&qword_101496950);
    v3[2] = &protocol witness table for PointMark;
    v3[3] = sub_1000824D4();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of ChartContent.symbol<A>(symbol:)>>, 1);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> A?, v1, &OpaqueTypeConformance2);
    atomic_store(result, (unint64_t *)&qword_101496940);
  }
  return result;
}

unint64_t sub_1000824D4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101496958;
  if (!qword_101496958)
  {
    v1 = sub_10000E5D4(&qword_101496950);
    v2[0] = sub_100082560(&qword_101496960, &qword_101496968, &qword_101496970, &qword_101496978);
    v2[1] = &protocol witness table for _ShadowEffect;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101496958);
  }
  return result;
}

uint64_t sub_100082560(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = sub_10000E5D4(a2);
    v9[0] = sub_100010D70(a3, a4, (const char *)&protocol conformance descriptor for ZStack<A>);
    v9[1] = &protocol witness table for _FrameLayout;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000825E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10007F088(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1000825E8()
{
  uint64_t v0;

  return sub_10007F7E8(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000825F4(uint64_t a1)
{
  return sub_100082BF8(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10007F97C);
}

unint64_t sub_100082600()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  _QWORD v5[2];
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;

  result = qword_101496988;
  if (!qword_101496988)
  {
    v1 = sub_10000E5D4(&qword_101496980);
    v2 = sub_1000826D4();
    v3 = sub_10000E5D4(&qword_101496808);
    v6 = type metadata accessor for AxisGridLine(255);
    v7 = &type metadata for Color;
    v8 = &protocol witness table for AxisGridLine;
    v9 = &protocol witness table for Color;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of AxisMark.foregroundStyle<A>(_:)>>, 1);
    v6 = v3;
    v7 = (void *)OpaqueTypeConformance2;
    v5[0] = v2;
    v5[1] = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of AxisMark.offset(x:y:)>>, 1);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> BuilderConditional<A, B>, v1, v5);
    atomic_store(result, (unint64_t *)&qword_101496988);
  }
  return result;
}

unint64_t sub_1000826D4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101496990;
  if (!qword_101496990)
  {
    v1 = sub_10000E5D4(&qword_101496998);
    v2[0] = sub_100082740();
    v2[1] = sub_10008285C();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> BuilderConditional<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101496990);
  }
  return result;
}

unint64_t sub_100082740()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v9[2];

  result = qword_1014969A0;
  if (!qword_1014969A0)
  {
    v1 = sub_10000E5D4(&qword_1014969A8);
    v5 = sub_10000E5D4(&qword_1014969B0);
    v6 = (void *)sub_100010D70(&qword_1014969B8, &qword_1014969B0, (const char *)&protocol conformance descriptor for AxisValueLabel<A>);
    v9[0] = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of AxisMark.offset(x:y:)>>, 1);
    v2 = sub_10000E5D4(&qword_101496808);
    v5 = type metadata accessor for AxisGridLine(255);
    v6 = &type metadata for Color;
    v7 = &protocol witness table for AxisGridLine;
    v8 = &protocol witness table for Color;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of AxisMark.foregroundStyle<A>(_:)>>, 1);
    v5 = v2;
    v6 = (void *)OpaqueTypeConformance2;
    v9[1] = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of AxisMark.offset(x:y:)>>, 1);
    v4 = v9;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <each A> BuilderTuple<Pack{repeat A}>, v1, &v4);
    atomic_store(result, (unint64_t *)&qword_1014969A0);
  }
  return result;
}

unint64_t sub_10008285C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v7[2];

  result = qword_1014969C0;
  if (!qword_1014969C0)
  {
    v1 = sub_10000E5D4(&qword_1014969C8);
    v3 = sub_10000E5D4(&qword_1014969B0);
    v4 = (void *)sub_100010D70(&qword_1014969B8, &qword_1014969B0, (const char *)&protocol conformance descriptor for AxisValueLabel<A>);
    v7[0] = swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of AxisMark.offset(x:y:)>>, 1);
    v3 = type metadata accessor for AxisGridLine(255);
    v4 = &type metadata for Color;
    v5 = &protocol witness table for AxisGridLine;
    v6 = &protocol witness table for Color;
    v7[1] = swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of AxisMark.foregroundStyle<A>(_:)>>, 1);
    v2 = v7;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <each A> BuilderTuple<Pack{repeat A}>, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1014969C0);
  }
  return result;
}

uint64_t sub_100082950@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100080964(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

unint64_t sub_10008296C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101496A00;
  if (!qword_101496A00)
  {
    v1 = sub_10000E5D4(&qword_1014969F8);
    v2[0] = sub_1000829F0();
    v2[1] = sub_100010D70(&qword_101495D78, &qword_101495D80, (const char *)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101496A00);
  }
  return result;
}

unint64_t sub_1000829F0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101496A08;
  if (!qword_101496A08)
  {
    v1 = sub_10000E5D4(&qword_101496A10);
    v2[0] = sub_100082A74();
    v2[1] = sub_100010D70((unint64_t *)&unk_101495710, (uint64_t *)&unk_10149D520, (const char *)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101496A08);
  }
  return result;
}

unint64_t sub_100082A74()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101496A18;
  if (!qword_101496A18)
  {
    v1 = sub_10000E5D4(&qword_101496A20);
    v2[0] = &protocol witness table for Text;
    v2[1] = &protocol witness table for _BlendModeEffect;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_101496A18);
  }
  return result;
}

uint64_t sub_100082AE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(type metadata accessor for MapsElevationChart(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = v3 + *(_QWORD *)(v1 + 64);
  v5 = v2 | 7;
  v6 = v0 + v3;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v3 + 16));

  v7 = (int *)type metadata accessor for MapsElevationChartViewModel(0);
  v8 = v6 + v7[11];
  v9 = sub_100008B04(&qword_10149A1F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[13] + 8));

  swift_release();
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[17]));

  return swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100082BEC(uint64_t a1)
{
  return sub_100082BF8(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10007F2FC);
}

uint64_t sub_100082BF8(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MapsElevationChart(0) - 8) + 80);
  return a2(a1, v2 + ((v4 + 16) & ~v4));
}

_QWORD *sub_100082C54@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10007F56C(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_100082C5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10007EB68(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_100082C64@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10007EDBC(*(_QWORD *)(v1 + 16), a1);
}

double sub_100082C6C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10007DB28(*(uint64_t **)(v1 + 16), a1);
}

double sub_100082C74@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10007DEC4(*(uint64_t **)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_100082C80(uint64_t a1)
{
  return sub_100082DC4(a1, (uint64_t (*)(uint64_t, unint64_t, _QWORD, _QWORD))sub_10007CB08);
}

uint64_t sub_100082C90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(type metadata accessor for MapsElevationChart(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = v2 | 7;
  v5 = (*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v0 + v3;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v3 + 16));

  v7 = (int *)type metadata accessor for MapsElevationChartViewModel(0);
  v8 = v6 + v7[11];
  v9 = sub_100008B04(&qword_10149A1F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[13] + 8));

  swift_release();
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[17]));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5 + 8));
  return swift_deallocObject(v0, v5 + 16, v4);
}

uint64_t sub_100082DB8(uint64_t a1)
{
  return sub_100082DC4(a1, (uint64_t (*)(uint64_t, unint64_t, _QWORD, _QWORD))sub_10007D160);
}

uint64_t sub_100082DC4(uint64_t a1, uint64_t (*a2)(uint64_t, unint64_t, _QWORD, _QWORD))
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(type metadata accessor for MapsElevationChart(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (_QWORD *)(v2 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  return a2(a1, v2 + v5, *v6, v6[1]);
}

uint64_t sub_100082E38()
{
  return sub_100010D70(&qword_101496A78, (uint64_t *)&unk_101496A80, (const char *)&protocol conformance descriptor for HStack<A>);
}

uint64_t destroy for NearbyTransitCategory(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  return swift_unknownObjectRelease(a1[3]);
}

_QWORD *initializeWithCopy for NearbyTransitCategory(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  v5 = a2[3];
  a1[2] = v4;
  a1[3] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_unknownObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for NearbyTransitCategory(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a1[3];
  v9 = a2[3];
  a1[3] = v9;
  swift_unknownObjectRetain(v9);
  swift_unknownObjectRelease(v8);
  return a1;
}

_QWORD *assignWithTake for NearbyTransitCategory(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  v5 = a1[3];
  a1[3] = *(_QWORD *)(a2 + 24);
  swift_unknownObjectRelease(v5);
  return a1;
}

ValueMetadata *type metadata accessor for NearbyTransitCategory()
{
  return &type metadata for NearbyTransitCategory;
}

unint64_t sub_100082FC8()
{
  unint64_t result;

  result = qword_101496A90;
  if (!qword_101496A90)
  {
    result = swift_getWitnessTable("iw7", &type metadata for NearbyTransitCategory);
    atomic_store(result, (unint64_t *)&qword_101496A90);
  }
  return result;
}

uint64_t sub_10008300C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_100083018(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a2[1];
  v8 = a2[2];
  v9 = v4 == *a2 && v5 == v7;
  if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v7, 0) & 1) != 0)
    return sub_100083F10(v6, v8);
  else
    return 0;
}

Swift::Int sub_100083078()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4, 0);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v4, v1, v2);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

uint64_t sub_1000830D0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v4 = *v1;
  v3 = v1[1];
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(a1, v4, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100083114(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v2 = *v1;
  v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100083168(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t result;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2)
      return 1;
    v3 = a2;
    if (a1 == a2)
      return 1;
    v4 = 0;
    v32 = a1;
    while (1)
    {
      v5 = (_QWORD *)(a1 + v4);
      v6 = *(_QWORD *)(a1 + v4 + 32);
      v7 = v5[5];
      v8 = v5[6];
      v9 = v5[7];
      v11 = v5[8];
      v10 = v5[9];
      v35 = v5[10];
      v42 = v5[11];
      v41 = v5[12];
      v37 = (void *)v5[13];
      v39 = v5[14];
      v12 = *(_QWORD *)(v3 + v4 + 32);
      v13 = *(_QWORD *)(v3 + v4 + 40);
      v14 = *(_QWORD *)(v3 + v4 + 48);
      v15 = *(_QWORD *)(v3 + v4 + 56);
      v16 = *(_QWORD *)(v3 + v4 + 64);
      v17 = *(_QWORD *)(v3 + v4 + 72);
      v18 = *(_QWORD *)(v3 + v4 + 88);
      v34 = *(_QWORD *)(v3 + v4 + 80);
      v40 = *(_QWORD *)(v3 + v4 + 96);
      v36 = *(_QWORD *)(v3 + v4 + 104);
      v38 = *(_QWORD *)(v3 + v4 + 112);
      if (v6 != v12 || v7 != v13)
      {
        v31 = v4;
        v19 = *(_QWORD *)(v3 + v4 + 64);
        v20 = v5[8];
        v21 = v17;
        v22 = v18;
        v23 = v5[9];
        v24 = v2;
        v25 = v14;
        v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v12, v13, 0);
        v14 = v25;
        v2 = v24;
        v10 = v23;
        v18 = v22;
        v17 = v21;
        v11 = v20;
        v16 = v19;
        v4 = v31;
        if ((v26 & 1) == 0)
          break;
      }
      if (v9)
      {
        if (!v15)
          return 0;
        if (v8 != v14 || v9 != v15)
        {
          v27 = v10;
          v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v14, v15, 0);
          v10 = v27;
          if ((v28 & 1) == 0)
            return 0;
        }
      }
      else if (v15)
      {
        return 0;
      }
      if ((v11 != v16 || v10 != v17) && (_stringCompareWithSmolCheck(_:_:expecting:)(v11, v10, v16, v17, 0) & 1) == 0)
        return 0;
      if (v42)
      {
        if (!v18)
          return 0;
        if (v35 == v34 && v42 == v18)
        {
          result = 0;
        }
        else
        {
          if ((_stringCompareWithSmolCheck(_:_:expecting:)(v35, v42, v34, v18, 0) & 1) == 0)
            return 0;
          v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v35, v42, v34, v18, 0);
          result = 0;
          if ((v30 & 1) == 0)
            return result;
        }
      }
      else
      {
        result = 0;
        if (v18)
          return result;
      }
      if (v41 != v40 || v39 != v38)
        return result;
      if ((objc_msgSend(v37, "isEqual:", v36) & 1) == 0)
        return 0;
      v4 += 88;
      --v2;
      a1 = v32;
      v3 = a2;
      if (!v2)
        return 1;
    }
  }
  return 0;
}

void sub_1000833B8(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v4 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v21 = a1;
    else
      v21 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = _CocoaArrayWrapper.endIndex.getter(v21);
    swift_bridgeObjectRelease(a1);
    v6 = (unint64_t)a2 >> 62;
    if (!((unint64_t)a2 >> 62))
    {
LABEL_3:
      if (v5 != *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
        return;
      goto LABEL_4;
    }
  }
  else
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = (unint64_t)a2 >> 62;
    if (!((unint64_t)a2 >> 62))
      goto LABEL_3;
  }
  if (a2 < 0)
    v22 = a2;
  else
    v22 = a2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a2);
  v23 = _CocoaArrayWrapper.endIndex.getter(v22);
  swift_bridgeObjectRelease(a2);
  if (v5 != v23)
    return;
LABEL_4:
  if (!v5)
    return;
  v7 = a1 & 0xFFFFFFFFFFFFFF8;
  v8 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a1 < 0)
    v9 = a1;
  else
    v9 = a1 & 0xFFFFFFFFFFFFFF8;
  if (v4)
    v8 = v9;
  v10 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a2 < 0)
    v11 = a2;
  else
    v11 = a2 & 0xFFFFFFFFFFFFFF8;
  if (v6)
    v10 = v11;
  if (v8 == v10)
    return;
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_55;
  v25 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_56:
    v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    v13 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
      goto LABEL_20;
LABEL_57:
    v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
    goto LABEL_22;
  }
  if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_59;
  }
  v12 = *(_QWORD *)(a1 + 32);
  swift_retain();
  v13 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0)
    goto LABEL_57;
LABEL_20:
  if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_59:
    __break(1u);
    return;
  }
  v14 = *(_QWORD *)(a2 + 32);
  swift_retain();
LABEL_22:
  if ((sub_100087FC8(v12 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_type, (void *)(v14 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_type)) & 1) != 0)
  {
    v24 = v7;
    v15 = 1 - v5;
    v16 = 5;
    do
    {
      v17 = *(double *)(v12 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_cornerRadius);
      v7 = *(unsigned __int8 *)(v12 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_cornerRadius + 8);
      v18 = *(double *)(v14 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_cornerRadius);
      v19 = *(unsigned __int8 *)(v14 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_cornerRadius + 8);
      swift_release();
      swift_release();
      if ((v7 & 1) != 0)
      {
        if (!v19)
          return;
      }
      else
      {
        if (v17 == v18)
          v20 = v19;
        else
          v20 = 1;
        if ((v20 & 1) != 0)
          return;
      }
      if (v15 + v16 == 5)
        return;
      v5 = v16 - 4;
      if (v25)
      {
        v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(v16 - 4, a1);
        if (v13)
          goto LABEL_24;
      }
      else
      {
        if (v5 >= *(_QWORD *)(v24 + 16))
        {
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
          goto LABEL_56;
        }
        v12 = *(_QWORD *)(a1 + 8 * v16);
        swift_retain();
        if (v13)
        {
LABEL_24:
          v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(v16 - 4, a2);
          goto LABEL_25;
        }
      }
      if (v5 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_54;
      v14 = *(_QWORD *)(a2 + 8 * v16);
      swift_retain();
LABEL_25:
      ++v16;
    }
    while ((sub_100087FC8(v12 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_type, (void *)(v14 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_type)) & 1) != 0);
  }
  swift_release();
  swift_release();
}

uint64_t sub_100083684(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  char v20;
  uint64_t v22;
  void *v23;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
  {
LABEL_13:
    v20 = 0;
    return v20 & 1;
  }
  if (v2 && a1 != a2)
  {
    sub_10000E4BC(0, (unint64_t *)&qword_101492E60, NSObject_ptr);
    v5 = v2 - 1;
    v6 = (uint64_t *)(a2 + 56);
    v7 = (uint64_t *)(a1 + 56);
    while (1)
    {
      v22 = v5;
      v8 = *(v7 - 2);
      v9 = *(v7 - 1);
      v10 = *v7;
      v12 = (void *)*(v6 - 3);
      v11 = *(v6 - 2);
      v13 = *(v6 - 1);
      v14 = *v6;
      v15 = (id)*(v7 - 3);
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v10);
      v16 = v12;
      v17 = v11;
      v18 = v16;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v14);
      v23 = v18;
      if ((static NSObject.== infix(_:_:)(v15, v18) & 1) == 0
        || (sub_10008385C(v8, v17) & 1) == 0
        || (sub_100083A34(v9, v13) & 1) == 0)
      {
        break;
      }
      v19 = v17;
      v20 = sub_10008DD70(v10, v14);
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v8);

      swift_bridgeObjectRelease(v14);
      swift_bridgeObjectRelease(v13);
      swift_bridgeObjectRelease(v19);

      v5 = v22 - 1;
      if ((v20 & 1) != 0)
      {
        v6 += 4;
        v7 += 4;
        if (v22)
          continue;
      }
      return v20 & 1;
    }
    swift_bridgeObjectRelease(v8);

    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v17);

    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v9);
    goto LABEL_13;
  }
  v20 = 1;
  return v20 & 1;
}

uint64_t sub_10008385C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _OWORD v14[2];
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
      return 1;
    v3 = a1 + 32;
    v4 = a2 + 32;
    sub_10000E4BC(0, (unint64_t *)&qword_101492E60, NSObject_ptr);
    while (1)
    {
      sub_100084BD4(v3, (uint64_t)&v20);
      sub_100084BD4(v4, (uint64_t)&v18);
      if ((static NSObject.== infix(_:_:)(v20, v18) & 1) == 0)
        break;
      sub_100084C44((uint64_t)&v21, (uint64_t)v14);
      v5 = sub_100008B04(&qword_101496AB0);
      if (!swift_dynamicCast(&v11, v14, v5, &type metadata for AnyHashable, 6))
      {
        v13 = 0;
        v11 = 0u;
        v12 = 0u;
        sub_100012C08((uint64_t)&v11);
        break;
      }
      v16[0] = v11;
      v16[1] = v12;
      v17 = v13;
      sub_100084C44((uint64_t)&v19, (uint64_t)&v11);
      if ((swift_dynamicCast(&v8, &v11, v5, &type metadata for AnyHashable, 6) & 1) == 0)
      {
        v10 = 0;
        v8 = 0u;
        v9 = 0u;
        sub_100012C08((uint64_t)&v8);
        sub_100012C48((uint64_t)v16);
        break;
      }
      v14[0] = v8;
      v14[1] = v9;
      v15 = v10;
      v6 = static AnyHashable.== infix(_:_:)(v16, v14);
      sub_100012C48((uint64_t)v14);
      sub_100012C48((uint64_t)v16);
      if ((v6 & 1) == 0)
        break;
      sub_100084C10(&v18);
      sub_100084C10(&v20);
      v3 += 48;
      v4 += 48;
      if (!--v2)
        return 1;
    }
    sub_100084C10(&v18);
    sub_100084C10(&v20);
  }
  return 0;
}

uint64_t sub_100083A34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  char v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  _OWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
      return 1;
    v3 = a1 + 32;
    v4 = a2 + 32;
    sub_10000E4BC(0, (unint64_t *)&qword_101492E60, NSObject_ptr);
    while (1)
    {
      sub_100084B64(v3, (uint64_t)&v23);
      sub_100084B64(v4, (uint64_t)&v19);
      if ((static NSObject.== infix(_:_:)(v23, v19) & 1) == 0)
        break;
      v5 = v24 == v20 && v25 == v21;
      if (!v5 && (_stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, v20, v21, 0) & 1) == 0)
        break;
      sub_100084C44((uint64_t)&v26, (uint64_t)v15);
      v6 = sub_100008B04((uint64_t *)&unk_101496AA0);
      if (!swift_dynamicCast(&v12, v15, v6, &type metadata for AnyHashable, 6))
      {
        v14 = 0;
        v12 = 0u;
        v13 = 0u;
        sub_100012C08((uint64_t)&v12);
        break;
      }
      v17[0] = v12;
      v17[1] = v13;
      v18 = v14;
      sub_100084C44((uint64_t)&v22, (uint64_t)&v12);
      if ((swift_dynamicCast(&v9, &v12, v6, &type metadata for AnyHashable, 6) & 1) == 0)
      {
        v11 = 0;
        v9 = 0u;
        v10 = 0u;
        sub_100012C08((uint64_t)&v9);
        sub_100012C48((uint64_t)v17);
        break;
      }
      v15[0] = v9;
      v15[1] = v10;
      v16 = v11;
      v7 = static AnyHashable.== infix(_:_:)(v17, v15);
      sub_100012C48((uint64_t)v15);
      sub_100012C48((uint64_t)v17);
      if ((v7 & 1) == 0)
        break;
      sub_100084BA0((uint64_t)&v19);
      sub_100084BA0((uint64_t)&v23);
      v3 += 64;
      v4 += 64;
      if (!--v2)
        return 1;
    }
    sub_100084BA0((uint64_t)&v19);
    sub_100084BA0((uint64_t)&v23);
  }
  return 0;
}

uint64_t sub_100083C2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _OWORD *v3;
  _OWORD *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;
  BOOL v12;
  _OWORD v14[3];
  _OWORD v15[2];
  _OWORD v16[3];
  _OWORD v17[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      v10 = 1;
    }
    else
    {
      v3 = (_OWORD *)(a1 + 32);
      v4 = (_OWORD *)(a2 + 32);
      v5 = v2 - 1;
      do
      {
        v6 = v3[3];
        v14[2] = v3[2];
        v15[0] = v6;
        *(_OWORD *)((char *)v15 + 9) = *(_OWORD *)((char *)v3 + 57);
        v7 = v3[1];
        v14[0] = *v3;
        v14[1] = v7;
        v8 = v4[3];
        v16[2] = v4[2];
        v17[0] = v8;
        *(_OWORD *)((char *)v17 + 9) = *(_OWORD *)((char *)v4 + 57);
        v9 = v4[1];
        v16[0] = *v4;
        v16[1] = v9;
        sub_100084A9C(v14);
        sub_100084A9C(v16);
        v10 = sub_100194DB0((uint64_t *)v14, (uint64_t)v16);
        sub_100084B00(v16);
        sub_100084B00(v14);
        v12 = v5-- != 0;
        if ((v10 & 1) == 0)
          break;
        v4 += 5;
        v3 += 5;
      }
      while (v12);
    }
  }
  else
  {
    v10 = 0;
  }
  return v10 & 1;
}

uint64_t sub_100083D08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  BOOL v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v33 - v9;
  v11 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = *(_QWORD *)(a1 + 16);
  if (v17 == *(_QWORD *)(a2 + 16))
  {
    if (!v17 || a1 == a2)
    {
      v25 = 1;
    }
    else
    {
      v36 = (uint64_t)&v33 - v16;
      v37 = v7;
      v38 = v4;
      v18 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
      v33 = *(_QWORD *)(v15 + 72);
      v34 = a2;
      v19 = v17 - 1;
      v35 = a1;
      do
      {
        v20 = a1 + v18;
        v21 = v36;
        sub_1000202AC(v20, v36, type metadata accessor for PlaceSummaryViewModelUnit);
        sub_1000202AC(a2 + v18, (uint64_t)v13, type metadata accessor for PlaceSummaryViewModelUnit);
        sub_1000896E8((uint64_t)v10);
        v22 = (uint64_t)v13;
        v23 = v10;
        v24 = (uint64_t)v37;
        sub_1000896E8((uint64_t)v37);
        v25 = static UUID.== infix(_:_:)(v23, v24);
        v26 = v5;
        v27 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
        v28 = v24;
        v10 = v23;
        v13 = (char *)v22;
        v29 = v38;
        v27(v28, v38);
        v27((uint64_t)v10, v29);
        sub_1000202F0(v22, type metadata accessor for PlaceSummaryViewModelUnit);
        sub_1000202F0(v21, type metadata accessor for PlaceSummaryViewModelUnit);
        v31 = v19-- != 0;
        if ((v25 & 1) == 0)
          break;
        a2 = v34;
        v18 += v33;
        a1 = v35;
        v5 = v26;
      }
      while (v31);
    }
  }
  else
  {
    v25 = 0;
  }
  return v25 & 1;
}

uint64_t sub_100083F10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _OWORD *v3;
  _OWORD *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;
  BOOL v12;
  _OWORD v14[4];
  _OWORD v15[4];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      v10 = 1;
    }
    else
    {
      v3 = (_OWORD *)(a1 + 32);
      v4 = (_OWORD *)(a2 + 32);
      v5 = v2 - 1;
      do
      {
        v6 = v3[1];
        v14[0] = *v3;
        v14[1] = v6;
        v7 = v3[3];
        v14[2] = v3[2];
        v14[3] = v7;
        v8 = v4[1];
        v15[0] = *v4;
        v15[1] = v8;
        v9 = v4[3];
        v15[2] = v4[2];
        v15[3] = v9;
        sub_1000849FC(v14);
        sub_1000849FC(v15);
        v10 = sub_100197B6C((uint64_t *)v14, (uint64_t)v15);
        sub_100084A4C(v15);
        sub_100084A4C(v14);
        v12 = v5-- != 0;
        if ((v10 & 1) == 0)
          break;
        v3 += 4;
        v4 += 4;
      }
      while (v12);
    }
  }
  else
  {
    v10 = 0;
  }
  return v10 & 1;
}

uint64_t sub_100083FDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t result;
  uint64_t v38;
  char v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v45 - v9;
  v11 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v45 - v16;
  v18 = type metadata accessor for PlaceSummaryViewModelLine(0);
  __chkstk_darwin(v18);
  __chkstk_darwin(v19);
  v23 = *(_QWORD *)(a1 + 16);
  if (v23 != *(_QWORD *)(a2 + 16))
  {
    v44 = 0;
    return v44 & 1;
  }
  v62 = v17;
  v53 = (uint64_t)&v45 - v21;
  v54 = v22;
  if (!v23 || a1 == a2)
  {
    v44 = 1;
    return v44 & 1;
  }
  v46 = v12;
  v47 = v23;
  v56 = v14;
  v57 = v10;
  v58 = v7;
  v59 = v5;
  v60 = v4;
  v24 = 0;
  v25 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  v49 = a2 + v25;
  v50 = a1 + v25;
  v48 = *(_QWORD *)(v20 + 72);
  v27 = v53;
  v26 = v54;
  v52 = (int *)v18;
  v28 = (uint64_t)v14;
  while (1)
  {
    v51 = v24;
    v29 = v48 * v24;
    sub_1000202AC(v50 + v48 * v24, v27, type metadata accessor for PlaceSummaryViewModelLine);
    sub_1000202AC(v49 + v29, v26, type metadata accessor for PlaceSummaryViewModelLine);
    v30 = static UUID.== infix(_:_:)(v27, v26);
    v31 = (uint64_t)v62;
    if ((v30 & 1) == 0
      || (v32 = v52[5],
          v33 = *(_QWORD *)(v54 + v32),
          v61 = *(_QWORD *)(v53 + v32),
          v34 = *(_QWORD *)(v61 + 16),
          v34 != *(_QWORD *)(v33 + 16)))
    {
LABEL_19:
      sub_1000202F0(v54, type metadata accessor for PlaceSummaryViewModelLine);
      sub_1000202F0(v53, type metadata accessor for PlaceSummaryViewModelLine);
      v44 = 0;
      return v44 & 1;
    }
    if (v34 && v61 != v33)
      break;
LABEL_13:
    if (*(unsigned __int8 *)(v53 + v52[6]) != *(unsigned __int8 *)(v54 + v52[6]))
      goto LABEL_19;
    v27 = v53;
    v26 = v54;
    v43 = *(_BYTE *)(v53 + v52[7]) ^ *(_BYTE *)(v54 + v52[7]);
    sub_1000202F0(v54, type metadata accessor for PlaceSummaryViewModelLine);
    sub_1000202F0(v27, type metadata accessor for PlaceSummaryViewModelLine);
    if ((v43 & 1) == 0)
    {
      v24 = v51 + 1;
      if (v51 + 1 != v47)
        continue;
    }
    v44 = v43 ^ 1;
    return v44 & 1;
  }
  v35 = 0;
  v36 = (*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
  v55 = *(_QWORD *)(v46 + 72);
  while (1)
  {
    result = sub_1000202AC(v61 + v36, v31, type metadata accessor for PlaceSummaryViewModelUnit);
    if (v35 >= *(_QWORD *)(v33 + 16))
      break;
    sub_1000202AC(v33 + v36, v28, type metadata accessor for PlaceSummaryViewModelUnit);
    sub_1000896E8((uint64_t)v10);
    v38 = (uint64_t)v58;
    sub_1000896E8((uint64_t)v58);
    v39 = static UUID.== infix(_:_:)(v10, v38);
    v40 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
    v41 = v38;
    v42 = v60;
    v40(v41, v60);
    v40((uint64_t)v10, v42);
    v31 = (uint64_t)v62;
    sub_1000202F0(v28, type metadata accessor for PlaceSummaryViewModelUnit);
    sub_1000202F0(v31, type metadata accessor for PlaceSummaryViewModelUnit);
    if ((v39 & 1) == 0)
      goto LABEL_19;
    ++v35;
    v36 += v55;
    if (v34 == v35)
      goto LABEL_13;
  }
  __break(1u);
  return result;
}

id sub_100084398(uint64_t a1, unint64_t a2)
{
  return sub_100084708(a1, a2, (unint64_t *)&qword_101491C90, GEOComposedWaypoint_ptr);
}

uint64_t sub_1000843AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  char v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  int v11;
  id v12;
  id v13;
  char v14;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v21;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  sub_10000E4BC(0, (unint64_t *)&qword_101492E60, NSObject_ptr);
  for (i = 0; ; i += 32)
  {
    v21 = v2;
    v5 = *(_QWORD *)(a1 + i + 40);
    v6 = *(_QWORD *)(a1 + i + 48);
    v7 = *(unsigned __int8 *)(a1 + i + 56);
    v9 = *(void **)(a2 + i + 32);
    v8 = *(_QWORD *)(a2 + i + 40);
    v10 = *(_QWORD *)(a2 + i + 48);
    v11 = *(unsigned __int8 *)(a2 + i + 56);
    v12 = *(id *)(a1 + i + 32);
    sub_10000BE70(v5, v6, v7);
    v13 = v9;
    sub_10000BE70(v8, v10, v11);
    if ((static NSObject.== infix(_:_:)(v12, v13) & 1) == 0)
    {

      sub_100084C88(v8, v10, v11);
      v16 = v5;
      v17 = v6;
      v18 = v7;
      goto LABEL_37;
    }
    if (!v7)
      break;
    if (v7 == 1)
    {
      if (v11 != 1)
      {

        sub_100084C88(v8, v10, v11);
        v16 = v5;
        v17 = v6;
        v18 = 1;
        goto LABEL_37;
      }
      if (v5 == v8 && v6 == v10)
      {

        sub_100084C88(v5, v6, 1u);
        sub_100084C88(v5, v6, 1u);
      }
      else
      {
        v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v8, v10, 0);

        sub_100084C88(v8, v10, 1u);
        sub_100084C88(v5, v6, 1u);
        if ((v4 & 1) == 0)
          return 0;
      }
    }
    else
    {
      if (v5 | v6)
      {
        if (v5 ^ 1 | v6)
        {
          if (v11 != 2 || v8 != 2)
            goto LABEL_34;
        }
        else if (v11 != 2 || v8 != 1)
        {
          goto LABEL_34;
        }
        if (v10)
          goto LABEL_34;
      }
      else if (v11 != 2 || v10 | v8)
      {
LABEL_34:

        sub_100084C88(v8, v10, v11);
        return 0;
      }

    }
LABEL_6:
    v2 = v21 - 1;
    if (v21 == 1)
      return 1;
  }
  if (!v11)
  {
    if (v5 == v8 && v6 == v10)
    {

      sub_100084C88(v5, v6, 0);
      sub_100084C88(v5, v6, 0);
    }
    else
    {
      v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v8, v10, 0);

      sub_100084C88(v8, v10, 0);
      sub_100084C88(v5, v6, 0);
      if ((v14 & 1) == 0)
        return 0;
    }
    goto LABEL_6;
  }

  sub_100084C88(v8, v10, v11);
  v16 = v5;
  v17 = v6;
  v18 = 0;
LABEL_37:
  sub_100084C88(v16, v17, v18);
  return 0;
}

id sub_1000846F4(uint64_t a1, unint64_t a2)
{
  return sub_100084708(a1, a2, &qword_10149A2F0, MKMapItemIdentifier_ptr);
}

id sub_100084708(uint64_t a1, unint64_t a2, unint64_t *a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id result;
  void *v16;
  id v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  id v23;
  void *v24;
  unint64_t v26;
  void **v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;

  v6 = a2;
  v7 = a1;
  v8 = (unint64_t)a1 >> 62;
  if (!((unint64_t)a1 >> 62))
  {
    v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v10 = a2 >> 62;
    if (!(a2 >> 62))
      goto LABEL_3;
LABEL_50:
    if (v6 < 0)
      v32 = v6;
    else
      v32 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v33 = _CocoaArrayWrapper.endIndex.getter(v32);
    swift_bridgeObjectRelease(v6);
    if (v9 == v33)
      goto LABEL_4;
LABEL_54:
    LOBYTE(v9) = 0;
    return (id)(v9 & 1);
  }
  if (a1 < 0)
    v31 = a1;
  else
    v31 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v9 = _CocoaArrayWrapper.endIndex.getter(v31);
  swift_bridgeObjectRelease(v7);
  v10 = (unint64_t)v6 >> 62;
  if ((unint64_t)v6 >> 62)
    goto LABEL_50;
LABEL_3:
  if (v9 != *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_54;
LABEL_4:
  if (!v9)
    goto LABEL_37;
  v11 = v7 & 0xFFFFFFFFFFFFFF8;
  if (v7 < 0)
    v11 = v7;
  if (!v8)
    v11 = (v7 & 0xFFFFFFFFFFFFFF8) + 32;
  v12 = v6 & 0xFFFFFFFFFFFFFF8;
  v13 = (v6 & 0xFFFFFFFFFFFFFF8) + 32;
  if (v6 < 0)
    v14 = v6;
  else
    v14 = v6 & 0xFFFFFFFFFFFFFF8;
  if (v10)
    v13 = v14;
  if (v11 == v13)
  {
LABEL_37:
    LOBYTE(v9) = 1;
    return (id)(v9 & 1);
  }
  if ((v9 & 0x8000000000000000) != 0)
    goto LABEL_60;
  v34 = v7 & 0xC000000000000001;
  if ((v7 & 0xC000000000000001) != 0)
    goto LABEL_61;
  for (result = *(id *)(v7 + 32); ; result = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v7))
  {
    v16 = result;
    if ((v6 & 0xC000000000000001) == 0)
      break;
    v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v6);
LABEL_21:
    v18 = v17;
    a4 = (_QWORD *)sub_10000E4BC(0, a3, a4);
    a3 = (unint64_t *)static NSObject.== infix(_:_:)(v16, v18);

    if ((a3 & 1) == 0)
      goto LABEL_54;
    v19 = v9 - 1;
    if (v9 == 1)
      return (id)(v9 & 1);
    if (((v6 | v7) & 0xC000000000000001) != 0)
    {
      v20 = 0;
      v21 = v9 - 2;
      while (v19 != v20)
      {
        v9 = v20 + 1;
        if (v34)
          v22 = (unint64_t *)specialized _ArrayBuffer._getElementSlowPath(_:)(v20 + 1, v7);
        else
          v22 = (unint64_t *)*(id *)(v7 + 40 + 8 * v20);
        a3 = v22;
        if ((v6 & 0xC000000000000001) != 0)
        {
          v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20 + 1, v6);
        }
        else
        {
          if (v9 >= *(_QWORD *)(v12 + 16))
            goto LABEL_59;
          v23 = *(id *)(v6 + 40 + 8 * v20);
        }
        v24 = v23;
        v9 = static NSObject.== infix(_:_:)(a3, v23);

        if ((v9 & 1) != 0 && v21 != v20++)
          continue;
        return (id)(v9 & 1);
      }
      __break(1u);
    }
    else
    {
      v26 = *(_QWORD *)(v12 + 16);
      if (v26 <= 1)
        v26 = 1;
      a3 = (unint64_t *)(v26 - 1);
      v27 = (void **)(v7 + 40);
      v12 = v6 + 40;
      while (v19)
      {
        if (!a3)
          goto LABEL_58;
        v29 = *v27++;
        v28 = v29;
        v30 = *(void **)v12;
        v12 += 8;
        v6 = v28;
        v7 = v30;
        v9 = static NSObject.== infix(_:_:)(v6, v7);

        if ((v9 & 1) != 0)
        {
          a3 = (unint64_t *)((char *)a3 - 1);
          if (--v19)
            continue;
        }
        return (id)(v9 & 1);
      }
    }
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    ;
  }
  if (*(_QWORD *)(v12 + 16))
  {
    v17 = *(id *)(v6 + 32);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000849FC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v3 = a1[4];
  v4 = a1[5];
  swift_bridgeObjectRetain(a1[3]);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v2);
  return a1;
}

_QWORD *sub_100084A4C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[4];
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return a1;
}

_QWORD *sub_100084A9C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[8];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  swift_unknownObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *sub_100084B00(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[5];
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(v5);
  swift_unknownObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_100084B64(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for HomeListSupplementaryViewSnapshot(a2, a1);
  return a2;
}

uint64_t sub_100084BA0(uint64_t a1)
{
  destroy for HomeListSupplementaryViewSnapshot(a1);
  return a1;
}

uint64_t sub_100084BD4(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for HomeListCellSnapshot(a2, a1);
  return a2;
}

id *sub_100084C10(id *a1)
{
  destroy for HomeListCellSnapshot(a1);
  return a1;
}

uint64_t sub_100084C44(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100084C88(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_bridgeObjectRelease(a2);
  return result;
}

id MapsSharedTripAnalyticsHelper.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MapsSharedTripAnalyticsHelper();
  return objc_msgSendSuper2(&v2, "init");
}

id MapsSharedTripAnalyticsHelper.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MapsSharedTripAnalyticsHelper();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void _s4Maps0A25SharedTripAnalyticsHelperC19sendSuccessAnalytic3forySo09MSPSharedC7ContactC_tFZ_0(void *a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  void *v18;
  id v19;

  v2 = objc_msgSend((id)objc_opt_self(MNNavigationService), "sharedService");
  if (!v2)
  {
    __break(1u);
    goto LABEL_17;
  }
  v3 = v2;
  v4 = objc_msgSend(v2, "destination");

  if (!v4)
  {
LABEL_17:
    __break(1u);
    return;
  }
  v5 = objc_msgSend(v4, "contact");

  if (!v5)
  {
LABEL_13:
    objc_msgSend((id)objc_opt_self(GEOAPPortal), "captureUserAction:target:value:", 104, 0, 0);
    return;
  }
  v6 = objc_msgSend(a1, "contact");
  if (!v6)
  {
    v7 = v5;
    goto LABEL_12;
  }
  v7 = v6;
  v8 = objc_msgSend(v5, "identifier");
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  v12 = objc_msgSend(v7, "identifier");
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;

  if (v9 == v13 && v11 == v15)
  {
    swift_bridgeObjectRelease_n(v11, 2);
  }
  else
  {
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v11, v13, v15, 0);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v15);
    if ((v17 & 1) == 0)
    {

LABEL_12:
      goto LABEL_13;
    }
  }
  v18 = (void *)objc_opt_self(GEOAPPortal);
  v19 = String._bridgeToObjectiveC()();
  objc_msgSend(v18, "captureUserAction:target:value:", 104, 0, v19);

}

uint64_t type metadata accessor for MapsSharedTripAnalyticsHelper()
{
  return objc_opt_self(_TtC4Maps29MapsSharedTripAnalyticsHelper);
}

id sub_10008506C(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    return (id)swift_bridgeObjectRetain(a1);
  else
    return a1;
}

void destroy for TransitShields(uint64_t a1)
{
  sub_1000850A4(*(void **)a1, *(_BYTE *)(a1 + 8));

}

void sub_1000850A4(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    swift_bridgeObjectRelease(a1);
  else

}

uint64_t initializeWithCopy for TransitShields(uint64_t a1, uint64_t a2)
{
  void *v4;
  char v5;
  void *v6;
  uint64_t v7;
  id v8;

  v4 = *(void **)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_10008506C(*(void **)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(void **)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v8 = v6;
  return a1;
}

uint64_t assignWithCopy for TransitShields(uint64_t a1, uint64_t a2)
{
  void *v4;
  char v5;
  void *v6;
  char v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;

  v4 = *(void **)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_10008506C(*(void **)a2, v5);
  v6 = *(void **)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_1000850A4(v6, v7);
  v8 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  v9 = *(void **)(a1 + 32);
  v10 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v10;
  v11 = v10;

  v12 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v12;
  return a1;
}

uint64_t assignWithTake for TransitShields(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  void *v6;
  char v7;
  void *v8;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(void **)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_1000850A4(v6, v7);
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  v8 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = a2[4];

  *(_QWORD *)(a1 + 40) = a2[5];
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for TransitShields(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TransitShields(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_QWORD *)(result + 32) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TransitShields()
{
  return &type metadata for TransitShields;
}

void *sub_1000852E8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  double v4;
  char v5;
  id v6;
  void *v7;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(double *)(v0 + 40);
  v5 = *(_BYTE *)(v0 + 48);
  v6 = objc_msgSend(objc_allocWithZone((Class)MKTransitInfoLabelView), "init");
  v7 = v6;
  if ((v2 & 1) == 0)
  {
    objc_msgSend(v6, "setShieldSize:", v1);
    objc_msgSend(v7, "setIconSize:", v1);
  }
  if (v3)
    objc_msgSend(v7, "setFont:", v3);
  if ((v5 & 1) == 0)
    objc_msgSend(v7, "setMaxShieldHeight:", v4);
  return v7;
}

id sub_1000853A8(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100085518(a1, a2, *(void **)v2, *(_BYTE *)(v2 + 8));
}

uint64_t sub_1000853C4(uint64_t a1, char a2)
{
  return UIViewRepresentable.sizeThatFits(_:uiView:context:)(a1, a2 & 1);
}

void *sub_100085404()
{
  return &protocol witness table for Never;
}

uint64_t sub_100085410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000854D4();
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100085460(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000854D4();
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1000854B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000854D4();
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

unint64_t sub_1000854D4()
{
  unint64_t result;

  result = qword_101496AE0;
  if (!qword_101496AE0)
  {
    result = swift_getWitnessTable(byte_100E27AE4, &type metadata for TransitShields);
    atomic_store(result, (unint64_t *)&qword_101496AE0);
  }
  return result;
}

id sub_100085518(void *a1, uint64_t a2, void *a3, char a4)
{
  id v6;
  id v7;
  id v8;
  id v9;
  double v10;
  Class isa;
  double v12;

  if ((a4 & 1) != 0)
  {
    swift_bridgeObjectRetain(a3);
    isa = Array._bridgeToObjectiveC()().super.isa;
    sub_1000850A4(a3, 1);
    objc_msgSend(a1, "setLabelItems:", isa);

  }
  else
  {
    v6 = a3;
    v7 = objc_msgSend(v6, "_preloadedTransitInfo");
    if (v7)
    {
      v8 = v7;
      v9 = objc_msgSend((id)objc_opt_self(MKTransitInfoPreloader), "attributedTextFromPreload:view:", v7, a1);
      objc_msgSend(a1, "setAttributedText:", v9);
      sub_1000850A4(a3, 0);
      swift_unknownObjectRelease(v8);

    }
    else
    {
      objc_msgSend(a1, "setMapItem:", v6);
      sub_1000850A4(a3, 0);
    }
  }
  LODWORD(v10) = 1144750080;
  objc_msgSend(a1, "setContentHuggingPriority:forAxis:", 0, v10);
  LODWORD(v12) = 1132068864;
  return objc_msgSend(a1, "setContentCompressionResistancePriority:forAxis:", 0, v12);
}

uint64_t initializeBufferWithCopyOfBuffer for TransitShields.TransitShieldsDataSource(uint64_t a1, uint64_t a2)
{
  void *v3;
  char v4;

  v3 = *(void **)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_10008506C(*(void **)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

void destroy for TransitShields.TransitShieldsDataSource(uint64_t a1)
{
  sub_1000850A4(*(void **)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for TransitShields.TransitShieldsDataSource(uint64_t a1, uint64_t a2)
{
  void *v3;
  char v4;
  void *v5;
  char v6;

  v3 = *(void **)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_10008506C(*(void **)a2, v4);
  v5 = *(void **)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_1000850A4(v5, v6);
  return a1;
}

uint64_t assignWithTake for TransitShields.TransitShieldsDataSource(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  void *v5;
  char v6;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *(void **)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_1000850A4(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for TransitShields.TransitShieldsDataSource(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TransitShields.TransitShieldsDataSource(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_1000857CC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_1000857D4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for TransitShields.TransitShieldsDataSource()
{
  return &type metadata for TransitShields.TransitShieldsDataSource;
}

uint64_t sub_1000857F4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100E287B0);
  v2 = swift_getKeyPath(&unk_100E287D8);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_100085864()
{
  return sub_100088DCC((uint64_t)&unk_100E28720, (uint64_t)&unk_100E28748);
}

uint64_t sub_100085878()
{
  return sub_100088DCC((uint64_t)&unk_100E28768, (uint64_t)&unk_100E28790);
}

uint64_t sub_100085908()
{
  return sub_100087BF8((uint64_t)&unk_100E28A38, (uint64_t)&unk_100E28A60);
}

double sub_100085A04()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  double v4;

  KeyPath = swift_getKeyPath(&unk_100E289F0);
  v2 = swift_getKeyPath(&unk_100E28A18);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

id sub_100085B5C(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, unsigned __int8 a10)
{
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  objc_class *v40;
  id v41;
  void (*v42)(char *, uint64_t);
  void *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  objc_super v62;
  unint64_t v63;
  _QWORD v64[4];

  v51 = a7;
  v52 = a8;
  v57 = a5;
  v58 = a6;
  v50 = a4;
  v60 = a3;
  v61 = a2;
  v53 = a1;
  v59 = a9;
  v11 = sub_100008B04(&qword_101497920);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100008B04(&qword_101497928);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = &v10[OBJC_IVAR____TtC4Maps29PlaceSummaryViewModelTemplate__leadingEntity];
  v64[0] = 0xF000000000000007;
  v20 = v10;
  v21 = sub_100008B04(&qword_101496B58);
  Published.init(initialValue:)(v64, v21);
  v54 = v19;
  v55 = v16;
  v22 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  v22(v19, v18, v15);
  v23 = &v20[OBJC_IVAR____TtC4Maps29PlaceSummaryViewModelTemplate__trailingEntity];
  v64[0] = 0xF000000000000007;
  v49 = v21;
  v24 = v21;
  v25 = v15;
  Published.init(initialValue:)(v64, v24);
  v22(v23, v18, v15);
  v26 = &v20[OBJC_IVAR____TtC4Maps29PlaceSummaryViewModelTemplate__containerWidth];
  v64[0] = 0x4069000000000000;
  Published.init(initialValue:)(v64, &type metadata for CGFloat);
  v47 = v12;
  v48 = v11;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v26, v14, v11);
  v56 = OBJC_IVAR____TtC4Maps29PlaceSummaryViewModelTemplate_backgroundColor;
  *(_QWORD *)&v20[OBJC_IVAR____TtC4Maps29PlaceSummaryViewModelTemplate_backgroundColor] = 0;
  v27 = &v20[OBJC_IVAR____TtC4Maps29PlaceSummaryViewModelTemplate_actionButtons];
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v27 + 1) = 0;
  v28 = OBJC_IVAR____TtC4Maps29PlaceSummaryViewModelTemplate_refinementButtons;
  *(_QWORD *)&v20[OBJC_IVAR____TtC4Maps29PlaceSummaryViewModelTemplate_refinementButtons] = 0;
  v29 = OBJC_IVAR____TtC4Maps29PlaceSummaryViewModelTemplate_metrics;
  *(_QWORD *)&v20[OBJC_IVAR____TtC4Maps29PlaceSummaryViewModelTemplate_metrics] = 0;
  v20[OBJC_IVAR____TtC4Maps29PlaceSummaryViewModelTemplate_containsPhotoCarouselLine] = 0;
  v30 = v53;
  if (*(_QWORD *)(v53 + 16))
  {
    LODWORD(v48) = a10;
    swift_beginAccess(&v20[OBJC_IVAR____TtC4Maps29PlaceSummaryViewModelTemplate__lines], v64, 33, 0);
    v63 = v30;
    v31 = sub_100008B04(&qword_101493460);
    Published.init(initialValue:)(&v63, v31);
    swift_endAccess(v64);
    v32 = v54;
    swift_beginAccess(v54, v64, 33, 0);
    v33 = v61;
    sub_10001FFF4(v61);
    v34 = *(void (**)(char *, uint64_t))(v55 + 8);
    v34(v32, v25);
    v63 = v33;
    v35 = v49;
    Published.init(initialValue:)(&v63, v49);
    swift_endAccess(v64);
    swift_beginAccess(v23, v64, 33, 0);
    v36 = v60;
    sub_10001FFF4(v60);
    v34(v23, v25);
    v63 = v36;
    Published.init(initialValue:)(&v63, v35);
    swift_endAccess(v64);
    v37 = *((_QWORD *)v27 + 1);
    v38 = v57;
    *(_QWORD *)v27 = v50;
    *((_QWORD *)v27 + 1) = v38;
    swift_bridgeObjectRelease(v37);
    v39 = *(_QWORD *)&v20[v28];
    *(_QWORD *)&v20[v28] = v58;
    swift_bridgeObjectRelease(v39);
    v20[OBJC_IVAR____TtC4Maps29PlaceSummaryViewModelTemplate_useCase] = v51;
    swift_beginAccess(&v20[OBJC_IVAR____TtC4Maps29PlaceSummaryViewModelTemplate__isSelected], v64, 33, 0);
    LOBYTE(v63) = v52 & 1;
    Published.init(initialValue:)(&v63, &type metadata for Bool);
    swift_endAccess(v64);
    *(_QWORD *)&v20[v56] = v59;
    swift_retain();
    swift_release();
    v20[OBJC_IVAR____TtC4Maps29PlaceSummaryViewModelTemplate_searchAlongRoute] = v48 & 1;

    v40 = (objc_class *)type metadata accessor for PlaceSummaryViewModelTemplate(0);
    v62.receiver = v20;
    v62.super_class = v40;
    v41 = objc_msgSendSuper2(&v62, "init");
    swift_release();
    sub_1000200AC(v36);
    sub_1000200AC(v33);
  }
  else
  {
    swift_release();
    sub_1000200AC(v60);
    sub_1000200AC(v61);
    swift_bridgeObjectRelease(v30);
    swift_bridgeObjectRelease(v58);
    swift_bridgeObjectRelease(v57);
    v42 = *(void (**)(char *, uint64_t))(v55 + 8);
    v42(v54, v25);
    v42(v23, v25);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v26, v48);
    swift_release();
    swift_bridgeObjectRelease(*((_QWORD *)v27 + 1));
    swift_bridgeObjectRelease(*(_QWORD *)&v20[v28]);
    v43 = *(void **)&v20[v29];

    v44 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
    swift_deallocPartialClassInstance(v20, v44, *(unsigned int *)((swift_isaMask & *(_QWORD *)v20) + 0x30), *(unsigned __int16 *)((swift_isaMask & *(_QWORD *)v20) + 0x34));
    return 0;
  }
  return v41;
}

uint64_t sub_100085FF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  char v29;
  void *v30;
  uint64_t v31[4];

  sub_10000C1FC(a1, (uint64_t)v31, (uint64_t *)&unk_101493350);
  if (v31[3])
  {
    v2 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
    if ((swift_dynamicCast(&v30, v31, (char *)&type metadata for Any + 8, v2, 6) & 1) != 0)
    {
      v3 = v30;
      KeyPath = swift_getKeyPath(&unk_100E287B0);
      v5 = swift_getKeyPath(&unk_100E287D8);
      static Published.subscript.getter(v31, v1, KeyPath, v5);
      swift_release();
      swift_release();
      v6 = v31[0];
      v7 = swift_getKeyPath(&unk_100E287B0);
      v8 = swift_getKeyPath(&unk_100E287D8);
      static Published.subscript.getter(v31, v3, v7, v8);
      swift_release();
      swift_release();
      v9 = v31[0];
      v10 = sub_100083FDC(v6, v31[0]);
      swift_bridgeObjectRelease(v6);
      swift_bridgeObjectRelease(v9);
      v11 = swift_getKeyPath(&unk_100E28768);
      v12 = swift_getKeyPath(&unk_100E28790);
      static Published.subscript.getter(v31, v1, v11, v12);
      swift_release();
      swift_release();
      v13 = v31[0];
      v14 = swift_getKeyPath(&unk_100E28768);
      v15 = swift_getKeyPath(&unk_100E28790);
      static Published.subscript.getter(v31, v3, v14, v15);
      swift_release();
      swift_release();
      v16 = v31[0];
      v17 = v31[0] & 0xF000000000000007;
      if ((~v13 & 0xF000000000000007) != 0)
      {
        if (v17 == 0xF000000000000007)
        {
          v18 = 0;
        }
        else
        {
          sub_10001FFF4(v13);
          sub_10008E9BC(v13);
          v18 = v19;
          sub_1000200AC(v16);
          sub_1000200AC(v13);
        }
      }
      else
      {
        if (v17 == 0xF000000000000007)
        {
          v18 = 1;
          goto LABEL_12;
        }
        v18 = 0;
        v13 = v31[0];
      }
      sub_1000200AC(v13);
LABEL_12:
      v20 = swift_getKeyPath(&unk_100E28720);
      v21 = swift_getKeyPath(&unk_100E28748);
      static Published.subscript.getter(v31, v1, v20, v21);
      swift_release();
      swift_release();
      v22 = v31[0];
      v23 = swift_getKeyPath(&unk_100E28720);
      v24 = swift_getKeyPath(&unk_100E28748);
      static Published.subscript.getter(v31, v3, v23, v24);
      swift_release();
      swift_release();
      v25 = v31[0];
      if ((~v22 & 0xF000000000000007) != 0)
      {
        if ((~v31[0] & 0xF000000000000007) != 0)
        {
          sub_10001FFF4(v22);
          sub_10008E9BC(v22);
          v26 = v29;

          sub_1000200AC(v25);
          sub_1000200AC(v22);
        }
        else
        {

          v26 = 0;
        }
        v25 = v22;
      }
      else
      {

        if ((~v25 & 0xF000000000000007) == 0)
        {
          v26 = 1;
          if ((v10 & 1) == 0)
            goto LABEL_15;
LABEL_23:
          v27 = v18 & v26;
          return v27 & 1;
        }
        v26 = 0;
      }
      sub_1000200AC(v25);
      if ((v10 & 1) == 0)
        goto LABEL_15;
      goto LABEL_23;
    }
  }
  else
  {
    sub_100010CC4((uint64_t)v31, (uint64_t *)&unk_101493350);
  }
LABEL_15:
  v27 = 0;
  return v27 & 1;
}

_QWORD *sub_1000863C4(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  _QWORD *result;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  _BYTE v20[4];
  int v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  _QWORD *v26;

  v23 = type metadata accessor for PlaceSummaryViewModelLine(0);
  v3 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v25 = &v20[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v24 = &v20[-v6];
  KeyPath = swift_getKeyPath(&unk_100E287B0);
  v8 = swift_getKeyPath(&unk_100E287D8);
  static Published.subscript.getter(&v26, v1, KeyPath, v8);
  swift_release(KeyPath);
  swift_release(v8);
  result = v26;
  v10 = _swiftEmptyArrayStorage;
  v26 = _swiftEmptyArrayStorage;
  v11 = result[2];
  if (v11)
  {
    v12 = 0;
    v13 = a1 & 1;
    v22 = v3;
    v21 = v13;
    while (v12 < result[2])
    {
      v14 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
      v15 = *(_QWORD *)(v3 + 72);
      v16 = result;
      v17 = v24;
      sub_1000202AC((uint64_t)result + v14 + v15 * v12, (uint64_t)v24, type metadata accessor for PlaceSummaryViewModelLine);
      if (v17[*(int *)(v23 + 24)] == v13)
      {
        sub_10003F29C((uint64_t)v17, (uint64_t)v25, type metadata accessor for PlaceSummaryViewModelLine);
        if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
          sub_100132418(0, v10[2] + 1, 1);
        v10 = v26;
        v19 = v26[2];
        v18 = v26[3];
        if (v19 >= v18 >> 1)
        {
          sub_100132418(v18 > 1, v19 + 1, 1);
          v10 = v26;
        }
        v10[2] = v19 + 1;
        sub_10003F29C((uint64_t)v25, (uint64_t)v10 + v14 + v19 * v15, type metadata accessor for PlaceSummaryViewModelLine);
        v3 = v22;
        v13 = v21;
      }
      else
      {
        sub_1000202F0((uint64_t)v17, type metadata accessor for PlaceSummaryViewModelLine);
      }
      ++v12;
      result = v16;
      if (v11 == v12)
      {
        v10 = v26;
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease(result);
    return v10;
  }
  return result;
}

uint64_t sub_1000865F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v2 = v1;
  v4 = sub_100008B04((uint64_t *)&unk_10149A500);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PlaceSummaryViewModelLine(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_100E287B0);
  v12 = swift_getKeyPath(&unk_100E287D8);
  static Published.subscript.getter(&v19, v2, KeyPath, v12);
  swift_release(KeyPath);
  swift_release(v12);
  v13 = v19;
  v14 = *(_QWORD *)(v19 + 16);
  if (v14)
  {
    sub_1000202AC(v19+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * (v14 - 1), (uint64_t)v6, type metadata accessor for PlaceSummaryViewModelLine);
    v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
    v15(v6, 0, 1, v7);
  }
  else
  {
    v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
    v15(v6, 1, 1, v7);
  }
  swift_bridgeObjectRelease(v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_100010CC4((uint64_t)v6, (uint64_t *)&unk_10149A500);
LABEL_9:
    v16 = 1;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v15)(a1, v16, 1, v7);
  }
  sub_10003F29C((uint64_t)v6, (uint64_t)v10, type metadata accessor for PlaceSummaryViewModelLine);
  if (!sub_1000867E0())
  {
    sub_1000202F0((uint64_t)v10, type metadata accessor for PlaceSummaryViewModelLine);
    goto LABEL_9;
  }
  sub_10003F29C((uint64_t)v10, a1, type metadata accessor for PlaceSummaryViewModelLine);
  v16 = 0;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v15)(a1, v16, 1, v7);
}

BOOL sub_1000867E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int EnumCaseMultiPayload;
  _BOOL8 v15;
  uint64_t v17;

  v1 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v17 - v6;
  v8 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for PlaceSummaryViewModelLine(0) + 20));
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
    return 0;
  v10 = v8 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v11 = *(_QWORD *)(v2 + 72);
  swift_bridgeObjectRetain(v8);
  v12 = v9 - 1;
  do
  {
    v13 = v12;
    sub_1000202AC(v10, (uint64_t)v7, type metadata accessor for PlaceSummaryViewModelUnit);
    sub_1000202AC((uint64_t)v7, (uint64_t)v4, type metadata accessor for PlaceSummaryViewModelUnit);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v4, v1);
    sub_1000202F0((uint64_t)v4, type metadata accessor for PlaceSummaryViewModelUnit);
    sub_1000202F0((uint64_t)v7, type metadata accessor for PlaceSummaryViewModelUnit);
    v15 = EnumCaseMultiPayload == 14;
    if (EnumCaseMultiPayload == 14)
      break;
    v12 = v13 - 1;
    v10 += v11;
  }
  while (v13);
  swift_bridgeObjectRelease(v8);
  return v15;
}

id sub_100086954()
{
  return sub_100086D98(0, (uint64_t (*)(void))type metadata accessor for PlaceSummaryViewModelTemplate);
}

uint64_t sub_100086A90()
{
  return type metadata accessor for PlaceSummaryViewModelTemplate(0);
}

uint64_t type metadata accessor for PlaceSummaryViewModelTemplate(uint64_t a1)
{
  return sub_100021D9C(a1, (uint64_t *)&unk_101496B38, (uint64_t)&nominal type descriptor for PlaceSummaryViewModelTemplate);
}

void sub_100086AAC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  sub_1000891E8(319, &qword_101496B48, &qword_101493460);
  if (v3 <= 0x3F)
  {
    v10 = *(_QWORD *)(v2 - 8) + 64;
    sub_1000891E8(319, &qword_101496B50, &qword_101496B58);
    if (v5 <= 0x3F)
    {
      v11 = *(_QWORD *)(v4 - 8) + 64;
      v12 = v11;
      sub_10008964C(319, (unint64_t *)&qword_101493738, (uint64_t)&type metadata for Bool);
      if (v7 <= 0x3F)
      {
        v13 = *(_QWORD *)(v6 - 8) + 64;
        sub_10008964C(319, (unint64_t *)&qword_101496B60, (uint64_t)&type metadata for CGFloat);
        if (v9 <= 0x3F)
        {
          v14 = *(_QWORD *)(v8 - 8) + 64;
          v15 = &unk_100E27D30;
          v16 = &unk_100E27D48;
          v17 = &unk_100E27D60;
          v18 = &unk_100E27D78;
          v19 = &unk_100E27D48;
          v20 = &unk_100E27D48;
          v21 = &unk_100E27D60;
          swift_updateClassMetadata2(a1, 256, 12, &v10, a1 + 80);
        }
      }
    }
  }
}

uint64_t sub_100086BD4@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for PlaceSummaryViewModelTemplate(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

id sub_100086CA0(char a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  _BYTE *v9;
  objc_super v11;

  *(double *)&v9[OBJC_IVAR____TtC4Maps19PlaceSummaryMetrics_leadingMargin] = a2;
  *(double *)&v9[OBJC_IVAR____TtC4Maps19PlaceSummaryMetrics_trailingMargin] = a3;
  *(double *)&v9[OBJC_IVAR____TtC4Maps19PlaceSummaryMetrics_topMargin] = a4;
  *(double *)&v9[OBJC_IVAR____TtC4Maps19PlaceSummaryMetrics_bottomMargin] = a5;
  *(double *)&v9[OBJC_IVAR____TtC4Maps19PlaceSummaryMetrics_topLeadingCornerRadius] = a6;
  *(double *)&v9[OBJC_IVAR____TtC4Maps19PlaceSummaryMetrics_topTrailingCornerRadius] = a7;
  *(double *)&v9[OBJC_IVAR____TtC4Maps19PlaceSummaryMetrics_bottomLeadingCornerRadius] = a8;
  *(double *)&v9[OBJC_IVAR____TtC4Maps19PlaceSummaryMetrics_bottomTrailingCornerRadius] = a9;
  v9[OBJC_IVAR____TtC4Maps19PlaceSummaryMetrics_showsDivider] = a1;
  v11.receiver = v9;
  v11.super_class = (Class)type metadata accessor for PlaceSummaryMetrics();
  return objc_msgSendSuper2(&v11, "init");
}

id sub_100086D8C(uint64_t a1)
{
  return sub_100086D98(a1, type metadata accessor for PlaceSummaryMetrics);
}

id sub_100086D98(uint64_t a1, uint64_t (*a2)(void))
{
  void *v2;
  objc_super v4;

  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t type metadata accessor for PlaceSummaryMetrics()
{
  return objc_opt_self(_TtC4Maps19PlaceSummaryMetrics);
}

uint64_t sub_100086DEC()
{
  return sub_100088DCC((uint64_t)&unk_100E289A8, (uint64_t)&unk_100E289D0);
}

uint64_t sub_100086E00()
{
  return sub_100087304(&OBJC_IVAR____TtCO4Maps25PlaceSummaryViewModelUnit17ContainmentParent_id, &OBJC_IVAR____TtCO4Maps25PlaceSummaryViewModelUnit17ContainmentParent_parentIdentifier, &OBJC_IVAR____TtCO4Maps25PlaceSummaryViewModelUnit17ContainmentParent__mapItem, &qword_101497968);
}

uint64_t sub_100086E24()
{
  return type metadata accessor for PlaceSummaryViewModelUnit.ContainmentParent(0);
}

uint64_t type metadata accessor for PlaceSummaryViewModelUnit.ContainmentParent(uint64_t a1)
{
  return sub_100021D9C(a1, (uint64_t *)&unk_101496C08, (uint64_t)&nominal type descriptor for PlaceSummaryViewModelUnit.ContainmentParent);
}

uint64_t sub_100086E40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000873D4(a1, a2, a3, (uint64_t)&unk_101496C18, (uint64_t)&unk_101496C20, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000891E8);
}

uint64_t sub_100086E5C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for PlaceSummaryViewModelUnit.ContainmentParent(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

id sub_100086E98(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_100087E1C(a1, a2, a3, a4, &OBJC_IVAR____TtCO4Maps25PlaceSummaryViewModelUnit17ContainmentParent_parentIdentifier);
}

uint64_t sub_100086EA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtCO4Maps25PlaceSummaryViewModelUnit24RealTimeAvailableCharger_id;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtCO4Maps25PlaceSummaryViewModelUnit24RealTimeAvailableCharger__chargerViewModel
                          + 8));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100086F08()
{
  return type metadata accessor for PlaceSummaryViewModelUnit.RealTimeAvailableCharger(0);
}

uint64_t type metadata accessor for PlaceSummaryViewModelUnit.RealTimeAvailableCharger(uint64_t a1)
{
  return sub_100021D9C(a1, qword_101496D10, (uint64_t)&nominal type descriptor for PlaceSummaryViewModelUnit.RealTimeAvailableCharger);
}

uint64_t sub_100086F24(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100E27DF0;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100086F98()
{
  return sub_100087BF8((uint64_t)&unk_100E285B8, (uint64_t)&unk_100E285E0);
}

uint64_t sub_100086FAC(void *a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  _QWORD aBlock[6];

  v5 = sub_100008B04((uint64_t *)&unk_10149A660);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()(v9);
  v10 = v2 + OBJC_IVAR____TtCO4Maps25PlaceSummaryViewModelUnit11UserLibrary__isSavedInLibrary;
  LOBYTE(aBlock[0]) = 0;
  Published.init(initialValue:)(aBlock, &type metadata for Bool);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v10, v8, v5);
  *(_QWORD *)(v2 + OBJC_IVAR____TtCO4Maps25PlaceSummaryViewModelUnit11UserLibrary_mapItem) = a1;
  KeyPath = swift_getKeyPath(&unk_100E285B8);
  v12 = swift_getKeyPath(&unk_100E285E0);
  LOBYTE(aBlock[0]) = a2;
  v13 = a1;
  swift_retain();
  static Published.subscript.setter(aBlock, v2, KeyPath, v12);
  v14 = objc_msgSend(v13, "_hikeAssociatedInfo");
  if (v14)
  {
    v15 = v14;
    v16 = objc_msgSend(v14, "encryptedTourMuid");

    v17 = (void *)objc_opt_self(MapsSavedRoutesManager);
    aBlock[4] = sub_10008ECB0;
    aBlock[5] = v2;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100087254;
    aBlock[3] = &unk_10119F510;
    v18 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v17, "fetchSavedRoutesWithTourMuid:completion:", v16, v18);

    _Block_release(v18);
  }
  else
  {

  }
  return v2;
}

uint64_t sub_100087190(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  if (result)
  {
    v4 = result;
    if (!((unint64_t)result >> 62))
    {
      if (*(uint64_t *)((result & 0xFFFFFFFFFFFFF8) + 0x10) < 1)
        return result;
      goto LABEL_4;
    }
    if (result >= 0)
      v7 = result & 0xFFFFFFFFFFFFFF8;
    else
      v7 = result;
    swift_bridgeObjectRetain(result);
    v8 = _CocoaArrayWrapper.endIndex.getter(v7);
    result = swift_bridgeObjectRelease(v4);
    if (v8 >= 1)
    {
LABEL_4:
      KeyPath = swift_getKeyPath(&unk_100E285B8);
      v6 = swift_getKeyPath(&unk_100E285E0);
      v9 = 1;
      swift_retain(a3);
      return static Published.subscript.setter(&v9, a3, KeyPath, v6);
    }
  }
  return result;
}

double sub_100087254(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  uint64_t v6;
  id v7;
  double result;

  v4 = a2;
  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    v6 = sub_10000E4BC(0, (unint64_t *)&unk_10149F3A0, GEOComposedGeometryRoutePersistentData_ptr);
    v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v6);
  }
  swift_retain();
  v7 = a3;
  v5(v4, a3);
  swift_release();

  *(_QWORD *)&result = swift_bridgeObjectRelease(v4).n128_u64[0];
  return result;
}

uint64_t sub_1000872E0()
{
  return sub_100087304(&OBJC_IVAR____TtCO4Maps25PlaceSummaryViewModelUnit11UserLibrary_id, &OBJC_IVAR____TtCO4Maps25PlaceSummaryViewModelUnit11UserLibrary_mapItem, &OBJC_IVAR____TtCO4Maps25PlaceSummaryViewModelUnit11UserLibrary__isSavedInLibrary, (uint64_t *)&unk_10149A660);
}

uint64_t sub_100087304(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = v4 + *a1;
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);

  v10 = v4 + *a3;
  v11 = sub_100008B04(a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  return swift_deallocClassInstance(v4, *(unsigned int *)(*(_QWORD *)v4 + 48), *(unsigned __int16 *)(*(_QWORD *)v4 + 52));
}

uint64_t sub_10008739C()
{
  return type metadata accessor for PlaceSummaryViewModelUnit.UserLibrary(0);
}

uint64_t type metadata accessor for PlaceSummaryViewModelUnit.UserLibrary(uint64_t a1)
{
  return sub_100021D9C(a1, qword_101496DF0, (uint64_t)&nominal type descriptor for PlaceSummaryViewModelUnit.UserLibrary);
}

uint64_t sub_1000873B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000873D4(a1, a2, a3, (uint64_t)&qword_101493738, (uint64_t)&type metadata for Bool, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10008964C);
}

uint64_t sub_1000873D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t))
{
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  _QWORD v13[3];

  result = type metadata accessor for UUID(319);
  if (v11 <= 0x3F)
  {
    v13[0] = *(_QWORD *)(result - 8) + 64;
    v13[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    result = a6(319, a4, a5);
    if (v12 <= 0x3F)
    {
      v13[2] = *(_QWORD *)(result - 8) + 64;
      result = swift_updateClassMetadata2(a1, 256, 3, v13, a1 + 80);
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t sub_100087484@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for PlaceSummaryViewModelUnit.UserLibrary(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000874C0(uint64_t *a1, uint64_t *a2)
{
  return sub_10008E47C(*a1, *a2);
}

uint64_t sub_1000874CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtCO4Maps25PlaceSummaryViewModelUnit8UserNote_id;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtCO4Maps25PlaceSummaryViewModelUnit8UserNote_userNote + 8));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100087540()
{
  return type metadata accessor for PlaceSummaryViewModelUnit.UserNote(0);
}

uint64_t type metadata accessor for PlaceSummaryViewModelUnit.UserNote(uint64_t a1)
{
  return sub_100021D9C(a1, qword_101496EE0, (uint64_t)&nominal type descriptor for PlaceSummaryViewModelUnit.UserNote);
}

uint64_t sub_10008755C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[2] = &unk_100E27DF0;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000875E0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100E28600);
  v2 = swift_getKeyPath(&unk_100E28628);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_100087650@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for PlaceSummaryViewModelUnit.UserNote(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

id sub_10008768C(uint64_t *a1, uint64_t *a2)
{
  return sub_10008E5C0(*a1, *a2);
}

void sub_100087698(uint64_t *a1)
{
  sub_10008E9BC(*a1);
}

uint64_t sub_1000876A4()
{
  return sub_100087BF8((uint64_t)&unk_100E28960, (uint64_t)&unk_100E28988);
}

uint64_t sub_1000876B8(char a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[12];
  int v20;
  _QWORD v21[2];

  v20 = a3;
  v6 = sub_100008B04((uint64_t *)&unk_10149A660);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_100008B04(&qword_101497938);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = &v19[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = v3 + OBJC_IVAR____TtC4Maps18DirectionsETAModel__ETAString;
  v21[0] = 0;
  v21[1] = 0;
  v15 = sub_100008B04(&qword_101495CE0);
  Published.init(initialValue:)(v21, v15);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v11 + 32))(v14, v13, v10);
  v16 = v3 + OBJC_IVAR____TtC4Maps18DirectionsETAModel__isDriveable;
  LOBYTE(v21[0]) = 1;
  Published.init(initialValue:)(v21, &type metadata for Bool);
  v17 = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v7 + 32))(v16, v9, v6);
  UUID.init()(v17);
  *(_BYTE *)(v3 + OBJC_IVAR____TtC4Maps18DirectionsETAModel_showETA) = a1;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC4Maps18DirectionsETAModel_mapItem) = a2;
  *(_BYTE *)(v3 + OBJC_IVAR____TtC4Maps18DirectionsETAModel_searchAlongRoute) = v20;
  return v3;
}

uint64_t sub_100087834()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0 + OBJC_IVAR____TtC4Maps18DirectionsETAModel__ETAString;
  v2 = sub_100008B04(&qword_101497938);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC4Maps18DirectionsETAModel__isDriveable;
  v4 = sub_100008B04((uint64_t *)&unk_10149A660);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);

  v5 = v0 + OBJC_IVAR____TtC4Maps18DirectionsETAModel_id;
  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000878EC()
{
  return type metadata accessor for DirectionsETAModel(0);
}

uint64_t type metadata accessor for DirectionsETAModel(uint64_t a1)
{
  return sub_100021D9C(a1, (uint64_t *)&unk_101496FB0, (uint64_t)&nominal type descriptor for DirectionsETAModel);
}

void sub_100087908(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[6];

  sub_1000891E8(319, (unint64_t *)&unk_101496FC0, &qword_101495CE0);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10008964C(319, (unint64_t *)&qword_101493738, (uint64_t)&type metadata for Bool);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v8[2] = &unk_100E27D60;
      v8[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v8[4] = &unk_100E27D60;
      v6 = type metadata accessor for UUID(319);
      if (v7 <= 0x3F)
      {
        v8[5] = *(_QWORD *)(v6 - 8) + 64;
        swift_updateClassMetadata2(a1, 256, 6, v8, a1 + 80);
      }
    }
  }
}

uint64_t sub_1000879E0()
{
  return sub_100087BF8((uint64_t)&unk_100E28648, (uint64_t)&unk_100E28670);
}

uint64_t sub_1000879F4@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for DirectionsETAModel(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_100087A30(uint64_t *a1, uint64_t *a2)
{
  return sub_10008E15C(*a1, *a2);
}

uint64_t sub_100087A3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC4Maps24AccessoryButtonViewModel__isDriveable;
  v2 = sub_100008B04((uint64_t *)&unk_10149A660);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  v3 = v0 + OBJC_IVAR____TtC4Maps24AccessoryButtonViewModel_id;
  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100087AC8()
{
  return type metadata accessor for AccessoryButtonViewModel(0);
}

uint64_t type metadata accessor for AccessoryButtonViewModel(uint64_t a1)
{
  return sub_100021D9C(a1, qword_1014970F8, (uint64_t)&nominal type descriptor for AccessoryButtonViewModel);
}

void sub_100087AE4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  sub_10008964C(319, (unint64_t *)&qword_101493738, (uint64_t)&type metadata for Bool);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4 = type metadata accessor for UUID(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 3, v6, a1 + 80);
    }
  }
}

uint64_t sub_100087B88()
{
  return sub_100088DCC((uint64_t)&unk_100E28918, (uint64_t)&unk_100E28940);
}

uint64_t sub_100087B9C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for AccessoryButtonViewModel(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_100087BD8(uint64_t *a1, uint64_t *a2)
{
  return sub_10008E2DC(*a1, *a2);
}

uint64_t sub_100087BE4()
{
  return sub_100087BF8((uint64_t)&unk_100E288D0, (uint64_t)&unk_100E288F8);
}

uint64_t sub_100087BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(&v7, v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  return v7;
}

uint64_t sub_100087C60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC4Maps26HikeRouteSnapshotViewModel__snapshotImage;
  v2 = sub_100008B04(&qword_101497958);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC4Maps26HikeRouteSnapshotViewModel__fallbackImage;
  v4 = sub_100008B04((uint64_t *)&unk_10149A660);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);

  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100087CF0()
{
  return type metadata accessor for HikeRouteSnapshotViewModel(0);
}

uint64_t type metadata accessor for HikeRouteSnapshotViewModel(uint64_t a1)
{
  return sub_100021D9C(a1, (uint64_t *)&unk_1014971F8, (uint64_t)&nominal type descriptor for HikeRouteSnapshotViewModel);
}

void sub_100087D0C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  sub_1000891E8(319, (unint64_t *)&qword_101497208, (uint64_t *)&unk_101497210);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10008964C(319, (unint64_t *)&qword_101493738, (uint64_t)&type metadata for Bool);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
      swift_updateClassMetadata2(a1, 256, 3, v6, a1 + 80);
    }
  }
}

uint64_t sub_100087DC0()
{
  return sub_100088DCC((uint64_t)&unk_100E28690, (uint64_t)&unk_100E286B8);
}

uint64_t sub_100087DD4@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for HikeRouteSnapshotViewModel(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

id sub_100087E10(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_100087E1C(a1, a2, a3, a4, &OBJC_IVAR____TtC4Maps26HikeRouteSnapshotViewModel_mapItem);
}

id sub_100087E1C(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  return objc_msgSend(*(id *)(*a1 + *a5), "isEqual:", *(_QWORD *)(*a2 + *a5));
}

uint64_t sub_100087E4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC4Maps33PlaceSummaryStackedImageViewModel__images;
  v2 = sub_100008B04(&qword_101497960);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC4Maps33PlaceSummaryStackedImageViewModel_imageSpecs));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100087EB0()
{
  return type metadata accessor for PlaceSummaryStackedImageViewModel(0);
}

uint64_t type metadata accessor for PlaceSummaryStackedImageViewModel(uint64_t a1)
{
  return sub_100021D9C(a1, (uint64_t *)&unk_101497330, (uint64_t)&nominal type descriptor for PlaceSummaryStackedImageViewModel);
}

void sub_100087ECC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_1000891E8(319, (unint64_t *)&unk_101497340, (uint64_t *)&unk_10149A640);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
  }
}

uint64_t sub_100087F54@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for PlaceSummaryStackedImageViewModel(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_100087F90(uint64_t *a1, uint64_t *a2)
{
  return sub_10008E6F4(*a1, *a2, (uint64_t)&unk_100E28690, (uint64_t)&unk_100E286B8, (uint64_t (*)(uint64_t, uint64_t))sub_1000833B8) & 1;
}

uint64_t sub_100087FC8(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  char *v24;
  int EnumCaseMultiPayload;
  void *v26;
  void *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  id v48;
  id v49;
  id v50;
  id v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  id v62;
  char v63;
  char *v64;
  char *v65;
  void (*v66)(char *, uint64_t);
  uint64_t v67;
  void (*v69)(char *, uint64_t);
  void (*v70)(char *, uint64_t);
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __n128 v75;
  double v76;
  char v77;
  double v78;
  char v79;
  void (*v80)(char *, uint64_t);
  void (*v81)(char *, uint64_t);
  uint64_t v82;
  int v83;
  int v84;
  id v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  id v96;

  v96 = a2;
  v92 = type metadata accessor for Image.TemplateRenderingMode(0);
  v95 = *(_QWORD *)(v92 - 8);
  __chkstk_darwin(v92);
  v93 = (char *)&v82 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v94 = (char *)&v82 - v5;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PlaceSummaryImageViewModel.ImageType(0);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13);
  v15 = (void **)((char *)&v82 - v14);
  __chkstk_darwin(v16);
  v18 = (char *)&v82 - v17;
  v19 = sub_100008B04(&qword_1014978F8);
  __chkstk_darwin(v19);
  v22 = (void **)((char *)&v82 + *(int *)(v21 + 48) - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = a1;
  v24 = (char *)&v82 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000202AC(v23, (uint64_t)v24, type metadata accessor for PlaceSummaryImageViewModel.ImageType);
  sub_1000202AC((uint64_t)v96, (uint64_t)v22, type metadata accessor for PlaceSummaryImageViewModel.ImageType);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v24, v10);
  if (!EnumCaseMultiPayload)
  {
    sub_1000202AC((uint64_t)v24, (uint64_t)v18, type metadata accessor for PlaceSummaryImageViewModel.ImageType);
    if (!swift_getEnumCaseMultiPayload(v22, v10))
    {
      (*(void (**)(char *, void **, uint64_t))(v7 + 32))(v9, v22, v6);
      v28 = static URL.== infix(_:_:)(v18, v9);
      v66 = *(void (**)(char *, uint64_t))(v7 + 8);
      v66(v9, v6);
      v66(v18, v6);
      goto LABEL_19;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v18, v6);
    goto LABEL_16;
  }
  if (EnumCaseMultiPayload == 1)
  {
    sub_1000202AC((uint64_t)v24, (uint64_t)v15, type metadata accessor for PlaceSummaryImageViewModel.ImageType);
    v26 = *v15;
    if (swift_getEnumCaseMultiPayload(v22, v10) == 1)
    {
      v27 = *v22;
      sub_10000E4BC(0, (unint64_t *)&qword_101492E60, NSObject_ptr);
      v28 = static NSObject.== infix(_:_:)(v26, v27);

LABEL_19:
      v67 = (uint64_t)v24;
LABEL_20:
      sub_1000202F0(v67, type metadata accessor for PlaceSummaryImageViewModel.ImageType);
      return v28 & 1;
    }

    goto LABEL_16;
  }
  v91 = v24;
  sub_1000202AC((uint64_t)v24, (uint64_t)v12, type metadata accessor for PlaceSummaryImageViewModel.ImageType);
  v29 = *v12;
  v30 = sub_100008B04(&qword_101495DB0);
  v31 = swift_projectBox(v29);
  v96 = *(id *)(v31 + 8);
  v32 = *(unsigned __int8 *)(v31 + 16);
  v33 = *(_QWORD *)(v31 + 24);
  v34 = *(int *)(v30 + 112);
  v35 = *(_QWORD *)(v31 + v34);
  if (swift_getEnumCaseMultiPayload(v22, v10) == 2)
  {
    v84 = v32;
    v87 = v29;
    v36 = *(void **)v31;
    v37 = *(int *)(v30 + 96);
    v38 = v31 + v37;
    v89 = *v22;
    v90 = v33;
    v39 = swift_projectBox(v89);
    v40 = *(void **)v39;
    v41 = *(void **)(v39 + 8);
    v83 = *(unsigned __int8 *)(v39 + 16);
    v42 = *(_QWORD *)(v39 + 24);
    v43 = v39 + v37;
    v44 = *(_QWORD *)(v39 + v34);
    v45 = *(void (**)(char *, uint64_t, uint64_t))(v95 + 16);
    v46 = v92;
    v45(v94, v38, v92);
    v45(v93, v43, v46);
    v47 = v44;
    sub_10000E4BC(0, (unint64_t *)&qword_101492E60, NSObject_ptr);
    v88 = v42;
    swift_retain();
    swift_retain();
    v48 = v36;
    v49 = v40;
    v50 = v96;
    swift_retain();
    swift_retain();
    v86 = v41;
    v51 = v41;
    LOBYTE(v43) = static NSObject.== infix(_:_:)(v48, v49);

    if ((v43 & 1) == 0)
    {

      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v69 = *(void (**)(char *, uint64_t))(v95 + 8);
      v69(v93, v46);
      v69(v94, v46);
      swift_release();
LABEL_38:
      swift_release();
      sub_1000202F0((uint64_t)v91, type metadata accessor for PlaceSummaryImageViewModel.ImageType);
      goto LABEL_17;
    }
    v52 = v50;
    v85 = v51;
    v53 = v35;
    v82 = v47;
    v54 = v88;
    v55 = (uint64_t)v91;
    if (v96)
    {
      v56 = v92;
      v57 = v95;
      if (v86)
      {
        sub_10000E4BC(0, (unint64_t *)&qword_101497900, UIImage_ptr);
        v58 = v50;
        v59 = v57;
        v60 = v58;
        v61 = v55;
        v62 = v85;
        v63 = static NSObject.== infix(_:_:)(v60, v62);

        v57 = v59;
        v55 = v61;
        if ((v63 & 1) != 0)
        {
LABEL_12:
          v65 = v93;
          v64 = v94;
          if (v84 != v83)
          {

            swift_release();
            swift_release();
            swift_release();
LABEL_36:
            swift_release();
            v80 = *(void (**)(char *, uint64_t))(v57 + 8);
            v80(v65, v56);
LABEL_37:
            v80(v64, v56);
            swift_release();
            goto LABEL_38;
          }
          v71 = v52;
          if (v90)
          {
            if (!v54)
            {
              swift_release();
              swift_release();
              goto LABEL_35;
            }
            v72 = v90;
            v73 = v90 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_type;
            v74 = v54 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_type;
            swift_retain();
            v75 = swift_retain();
            if ((sub_100087FC8(v73, v74, v75) & 1) == 0)
            {
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              v57 = v95;
              v71 = v52;
              goto LABEL_35;
            }
            v76 = *(double *)(v72 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_cornerRadius);
            v77 = *(_BYTE *)(v72 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_cornerRadius + 8);
            v78 = *(double *)(v54 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_cornerRadius);
            v79 = *(_BYTE *)(v54 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_cornerRadius + 8);
            swift_release();
            swift_release();
            if ((v77 & 1) != 0)
            {
              v71 = v52;
              if ((v79 & 1) != 0)
                goto LABEL_41;
            }
            else
            {
              v71 = v52;
              if ((v79 & 1) == 0 && v76 == v78)
                goto LABEL_41;
            }
          }
          else if (!v54)
          {
LABEL_41:
            if ((static Image.TemplateRenderingMode.== infix(_:_:)(v64, v65) & 1) != 0)
            {
              v28 = static Color.== infix(_:_:)(v53, v82);

              swift_release();
              swift_release();
              swift_release();
              swift_release();
              v81 = *(void (**)(char *, uint64_t))(v95 + 8);
              v81(v65, v56);
              v81(v64, v56);
              swift_release();
              swift_release();
              v67 = (uint64_t)v91;
              goto LABEL_20;
            }

            swift_release();
            swift_release();
            swift_release();
            swift_release();
            v80 = *(void (**)(char *, uint64_t))(v95 + 8);
            v80(v65, v56);
            goto LABEL_37;
          }
          swift_release();
          swift_release();
          v57 = v95;
LABEL_35:

          swift_release();
          goto LABEL_36;
        }
      }
    }
    else
    {
      v56 = v92;
      v57 = v95;
      if (!v86)
        goto LABEL_12;
    }
    swift_release();
    swift_release();

    swift_release();
    swift_release();
    v70 = *(void (**)(char *, uint64_t))(v57 + 8);
    v70(v93, v56);
    v70(v94, v56);
    swift_release();
    swift_release();
    sub_1000202F0(v55, type metadata accessor for PlaceSummaryImageViewModel.ImageType);
    goto LABEL_17;
  }
  swift_release();
  v24 = v91;
LABEL_16:
  sub_100010CC4((uint64_t)v24, &qword_1014978F8);
LABEL_17:
  v28 = 0;
  return v28 & 1;
}

uint64_t sub_1000887B0()
{
  return sub_100088DCC((uint64_t)&unk_100E28888, (uint64_t)&unk_100E288B0);
}

uint64_t sub_1000887C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v7)(_QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v1 = sub_100008B04(&qword_101495DB0);
  __chkstk_darwin(v1);
  v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for PlaceSummaryImageViewModel.ImageType(0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000202AC(v0 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_type, (uint64_t)v6, v7);
  if (swift_getEnumCaseMultiPayload(v6, v4) == 2)
  {
    v8 = *v6;
    v9 = swift_projectBox(*v6);
    v10 = *(int *)(v1 + 96);
    v11 = &v3[v10];
    v12 = *(int *)(v1 + 112);
    v13 = v9 + v10;
    v14 = *(_QWORD *)(v9 + 8);
    *(_QWORD *)v3 = *(_QWORD *)v9;
    *((_QWORD *)v3 + 1) = v14;
    v15 = *(unsigned __int8 *)(v9 + 16);
    v3[16] = v15;
    *((_QWORD *)v3 + 3) = *(_QWORD *)(v9 + 24);
    v16 = type metadata accessor for Image.TemplateRenderingMode(0);
    v17 = *(_QWORD *)(v16 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v11, v13, v16);
    *(_QWORD *)&v3[v12] = *(_QWORD *)(v9 + v12);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v11, v16);
    swift_release(v8);
  }
  else
  {
    sub_1000202F0((uint64_t)v6, type metadata accessor for PlaceSummaryImageViewModel.ImageType);
    return 0;
  }
  return v15;
}

uint64_t sub_100088940()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v7)(_QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, __n128);
  __n128 v19;
  uint64_t v21;

  v1 = sub_100008B04(&qword_101495DB0);
  __chkstk_darwin(v1);
  v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for PlaceSummaryImageViewModel.ImageType(0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000202AC(v0 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_type, (uint64_t)v6, v7);
  if (swift_getEnumCaseMultiPayload(v6, v4) == 2)
  {
    v8 = *v6;
    v9 = swift_projectBox(*v6);
    v10 = *(int *)(v1 + 96);
    v11 = &v3[v10];
    v12 = *(int *)(v1 + 112);
    v13 = v9 + v10;
    v14 = *(_QWORD *)(v9 + 8);
    *(_QWORD *)v3 = *(_QWORD *)v9;
    *((_QWORD *)v3 + 1) = v14;
    v3[16] = *(_BYTE *)(v9 + 16);
    v15 = *(_QWORD *)(v9 + 24);
    *((_QWORD *)v3 + 3) = v15;
    v16 = type metadata accessor for Image.TemplateRenderingMode(0);
    v17 = *(_QWORD *)(v16 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v11, v13, v16);
    *(_QWORD *)&v3[v12] = *(_QWORD *)(v9 + v12);
    v18 = *(void (**)(char *, uint64_t, __n128))(v17 + 8);
    v19 = swift_retain(v15);
    v18(v11, v16, v19);
    swift_release(v8);
  }
  else
  {
    sub_1000202F0((uint64_t)v6, type metadata accessor for PlaceSummaryImageViewModel.ImageType);
    return 0;
  }
  return v15;
}

uint64_t sub_100088AC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v7)(_QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, __n128);
  __n128 v19;
  uint64_t v20;
  uint64_t v22;

  v1 = sub_100008B04(&qword_101495DB0);
  __chkstk_darwin(v1);
  v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for PlaceSummaryImageViewModel.ImageType(0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000202AC(v0 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_type, (uint64_t)v6, v7);
  if (swift_getEnumCaseMultiPayload(v6, v4) == 2)
  {
    v8 = *v6;
    v9 = swift_projectBox(*v6);
    v10 = *(int *)(v1 + 96);
    v11 = &v3[v10];
    v12 = *(int *)(v1 + 112);
    v13 = v9 + v10;
    v14 = *(_QWORD *)(v9 + 8);
    *(_QWORD *)v3 = *(_QWORD *)v9;
    *((_QWORD *)v3 + 1) = v14;
    v3[16] = *(_BYTE *)(v9 + 16);
    *((_QWORD *)v3 + 3) = *(_QWORD *)(v9 + 24);
    v15 = type metadata accessor for Image.TemplateRenderingMode(0);
    v16 = *(_QWORD *)(v15 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v11, v13, v15);
    v17 = *(_QWORD *)(v9 + v12);
    *(_QWORD *)&v3[v12] = v17;
    v18 = *(void (**)(char *, uint64_t, __n128))(v16 + 8);
    v19 = swift_retain(v17);
    v18(v11, v15, v19);
    swift_release(v8);
  }
  else
  {
    v20 = sub_1000202F0((uint64_t)v6, type metadata accessor for PlaceSummaryImageViewModel.ImageType);
    return static Color.clear.getter(v20);
  }
  return v17;
}

uint64_t sub_100088C3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel__image;
  v2 = sub_100008B04(&qword_101497958);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1000202F0(v0 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_type, type metadata accessor for PlaceSummaryImageViewModel.ImageType);
  v3 = v0 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_id;
  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100088CD0()
{
  return type metadata accessor for PlaceSummaryImageViewModel(0);
}

uint64_t type metadata accessor for PlaceSummaryImageViewModel(uint64_t a1)
{
  return sub_100021D9C(a1, qword_101497428, (uint64_t)&nominal type descriptor for PlaceSummaryImageViewModel);
}

void sub_100088CEC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[4];

  sub_1000891E8(319, (unint64_t *)&qword_101497208, (uint64_t *)&unk_101497210);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for PlaceSummaryImageViewModel.ImageType(319);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v8[2] = "\t";
      v6 = type metadata accessor for UUID(319);
      if (v7 <= 0x3F)
      {
        v8[3] = *(_QWORD *)(v6 - 8) + 64;
        swift_updateClassMetadata2(a1, 256, 4, v8, a1 + 80);
      }
    }
  }
}

uint64_t type metadata accessor for PlaceSummaryImageViewModel.ImageType(uint64_t a1)
{
  return sub_100021D9C(a1, qword_101497828, (uint64_t)&nominal type descriptor for PlaceSummaryImageViewModel.ImageType);
}

uint64_t sub_100088DB8()
{
  return sub_100088DCC((uint64_t)&unk_100E286D8, (uint64_t)&unk_100E28700);
}

uint64_t sub_100088DCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(&v7, v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  return v7;
}

uint64_t sub_100088E34@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for PlaceSummaryImageViewModel(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_100088E70(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  if ((sub_100087FC8(*a1 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_type, (void *)(*a2 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_type)) & 1) == 0)return 0;
  result = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_cornerRadius + 8);
  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_cornerRadius + 8) & 1) == 0)
    return (*(double *)(v2 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_cornerRadius) == *(double *)(v3 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_cornerRadius)) & ~(_DWORD)result;
  return result;
}

uint64_t sub_100088EE0@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_id;
  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_100088F28(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v5 = sub_100008B04(&qword_101497920);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100008B04(&qword_101497930);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = v2 + OBJC_IVAR____TtC4Maps34PlaceSummaryPhotoCarouselViewModel__images;
  v18 = 0;
  v14 = sub_100008B04((uint64_t *)&unk_101497568);
  Published.init(initialValue:)(&v18, v14);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v13, v12, v9);
  v15 = v2 + OBJC_IVAR____TtC4Maps34PlaceSummaryPhotoCarouselViewModel__width;
  v18 = 0x4079000000000000;
  Published.init(initialValue:)(&v18, &type metadata for CGFloat);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v15, v8, v5);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC4Maps34PlaceSummaryPhotoCarouselViewModel_mapItem) = a1;
  *(_BYTE *)(v2 + OBJC_IVAR____TtC4Maps34PlaceSummaryPhotoCarouselViewModel_searchAlongRoute) = a2;
  return v2;
}

uint64_t sub_100089080()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC4Maps34PlaceSummaryPhotoCarouselViewModel__images;
  v2 = sub_100008B04(&qword_101497930);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC4Maps34PlaceSummaryPhotoCarouselViewModel__width;
  v4 = sub_100008B04(&qword_101497920);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);

  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100089110()
{
  return type metadata accessor for PlaceSummaryPhotoCarouselViewModel(0);
}

uint64_t type metadata accessor for PlaceSummaryPhotoCarouselViewModel(uint64_t a1)
{
  return sub_100021D9C(a1, (uint64_t *)&unk_101497550, (uint64_t)&nominal type descriptor for PlaceSummaryPhotoCarouselViewModel);
}

void sub_10008912C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  sub_1000891E8(319, &qword_101497560, (uint64_t *)&unk_101497568);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10008964C(319, (unint64_t *)&qword_101496B60, (uint64_t)&type metadata for CGFloat);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v6[3] = &unk_100E27D60;
      swift_updateClassMetadata2(a1, 256, 4, v6, a1 + 80);
    }
  }
}

void sub_1000891E8(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = sub_10000E5D4(a3);
    v6 = type metadata accessor for Published(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_100089234@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for PlaceSummaryPhotoCarouselViewModel(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_100089270(uint64_t *a1, uint64_t *a2)
{
  return sub_10008E6F4(*a1, *a2, (uint64_t)&unk_100E286D8, (uint64_t)&unk_100E28700, (uint64_t (*)(uint64_t, uint64_t))sub_10008D848) & 1;
}

uint64_t sub_1000892A8@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for PlaceSummaryPhotoCarouselViewModel(0);
  result = Identifiable<>.id.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000892E8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100E28840);
  v2 = swift_getKeyPath(&unk_100E28868);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_100089358()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100E287F8);
  v2 = swift_getKeyPath(&unk_100E28820);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_1000893C8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  id v3;
  uint64_t result;
  uint64_t v5;

  KeyPath = swift_getKeyPath(&unk_100E287F8);
  v2 = swift_getKeyPath(&unk_100E28820);
  static Published.subscript.getter(&v5, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  if (v5 >= 3)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Maps/PlaceSummaryViewModel.swift", 32, 2, 475, 0);
    __break(1u);
  }
  else
  {
    v3 = objc_msgSend((id)objc_opt_self(UIColor), *off_10119F5C8[(int)v5]);
    return Color.init(_:)(v3);
  }
  return result;
}

uint64_t sub_1000894A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0 + OBJC_IVAR____TtC4Maps30PlaceSummaryEVChargerViewModel__displayString;
  v2 = sub_100008B04(&qword_101497948);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC4Maps30PlaceSummaryEVChargerViewModel__evChargerStatus;
  v4 = sub_100008B04(&qword_101497950);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC4Maps30PlaceSummaryEVChargerViewModel_id;
  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);

  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100089560()
{
  return type metadata accessor for PlaceSummaryEVChargerViewModel(0);
}

uint64_t type metadata accessor for PlaceSummaryEVChargerViewModel(uint64_t a1)
{
  return sub_100021D9C(a1, (uint64_t *)&unk_1014976A0, (uint64_t)&nominal type descriptor for PlaceSummaryEVChargerViewModel);
}

void sub_10008957C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[4];

  sub_10008964C(319, &qword_1014976B0, (uint64_t)&type metadata for String);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100069DB8(319, (unint64_t *)&unk_1014976B8, (uint64_t (*)(uint64_t))type metadata accessor for GEOEVChargerAvailability_RealTimeStatus, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for UUID(319);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        v8[3] = &unk_100E27D48;
        swift_updateClassMetadata2(a1, 256, 4, v8, a1 + 80);
      }
    }
  }
}

void sub_10008964C(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = type metadata accessor for Published(0, a3);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_100089690@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for PlaceSummaryEVChargerViewModel(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000896CC(_QWORD *a1, _QWORD *a2)
{
  return static UUID.== infix(_:_:)(*a1 + OBJC_IVAR____TtC4Maps30PlaceSummaryEVChargerViewModel_id, *a2 + OBJC_IVAR____TtC4Maps30PlaceSummaryEVChargerViewModel_id);
}

void sub_1000896E8(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t PartyRatings;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t (*v22)(_QWORD);
  char *v23;
  _QWORD v24[8];

  v24[7] = a1;
  v1 = type metadata accessor for PlaceSummaryViewModelUnit.PhotoCarousel(0);
  __chkstk_darwin(v1);
  v24[5] = (char *)v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for PlaceSummaryViewModelUnit.Hours(0);
  __chkstk_darwin(v3);
  v24[4] = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PlaceSummaryViewModelUnit.Delimiter(0);
  __chkstk_darwin(v5);
  v24[3] = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PlaceSummaryViewModelUnit.TappableEntry(0);
  __chkstk_darwin(v7);
  v24[2] = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PlaceSummaryViewModelUnit.TransitShields(0);
  __chkstk_darwin(v9);
  v24[1] = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PlaceSummaryViewModelUnit.UGCUserRecommendations(0);
  __chkstk_darwin(v11);
  v12 = type metadata accessor for PlaceSummaryViewModelUnit.ThirdPartyRatings(0);
  __chkstk_darwin(v12);
  PartyRatings = type metadata accessor for PlaceSummaryViewModelUnit.FirstPartyRatings(0);
  __chkstk_darwin(PartyRatings);
  v14 = type metadata accessor for PlaceSummaryViewModelUnit.UserGeneratedGuide(0);
  __chkstk_darwin(v14);
  v15 = type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(0);
  __chkstk_darwin(v15);
  v16 = type metadata accessor for PlaceSummaryViewModelUnit.MultipleCuratedGuides(0);
  __chkstk_darwin(v16);
  v17 = type metadata accessor for PlaceSummaryViewModelUnit.Distance(0);
  __chkstk_darwin(v17);
  v18 = type metadata accessor for PlaceSummaryViewModelUnit.Label(0);
  __chkstk_darwin(v18);
  v19 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  __chkstk_darwin(v19);
  v21 = (char *)v24 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000202AC(v24[6], (uint64_t)v21, v22);
  v23 = (char *)sub_100089A38 + 4 * byte_100E27BF0[swift_getEnumCaseMultiPayload(v21, v19)];
  __asm { BR              X10 }
}

uint64_t sub_100089A38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_10003F29C(v0, v1, type metadata accessor for PlaceSummaryViewModelUnit.Label);
  v3 = type metadata accessor for UUID(0);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(*(_QWORD *)(v2 - 88), v1, v3);
  return sub_1000202F0(v1, type metadata accessor for PlaceSummaryViewModelUnit.Label);
}

uint64_t sub_100089D58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  void (*v8)(char *, uint64_t);
  uint64_t v10;

  v0 = type metadata accessor for UUID(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v10 - v5;
  sub_1000896E8((uint64_t)&v10 - v5);
  sub_1000896E8((uint64_t)v3);
  v7 = static UUID.== infix(_:_:)(v6, v3);
  v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v3, v0);
  v8(v6, v0);
  return v7 & 1;
}

uint64_t sub_100089E24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t KeyPath;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, __n128);
  __n128 v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  uint64_t *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62[3];

  v52 = sub_100008B04(&qword_101495DB0);
  __chkstk_darwin(v52);
  v51 = (uint64_t *)((char *)&v47 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  v58 = type metadata accessor for PlaceSummaryImageViewModel.ImageType(0);
  __chkstk_darwin(v58);
  v3 = (uint64_t *)((char *)&v47 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for PlaceSummaryViewModelUnit.Label(0);
  __chkstk_darwin(v61);
  v59 = (uint64_t)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = swift_allocObject(&unk_10119F4F8, 24, 7);
  v53 = v9;
  *(_QWORD *)(v9 + 16) = _swiftEmptyArrayStorage;
  v10 = (uint64_t *)(v9 + 16);
  KeyPath = swift_getKeyPath(&unk_100E28720);
  v12 = swift_getKeyPath(&unk_100E28748);
  static Published.subscript.getter(v62, v0, KeyPath, v12);
  swift_release();
  swift_release();
  v13 = v62[0];
  if ((~v62[0] & 0xF000000000000007) != 0)
  {
    if (!(v62[0] >> 61))
    {
      sub_100020008(v62[0]);
      sub_10008A3C8(v13, v53);
      sub_1000200AC(v13);
    }
    sub_1000200AC(v13);
  }
  v14 = swift_getKeyPath(&unk_100E28768);
  v15 = swift_getKeyPath(&unk_100E28790);
  static Published.subscript.getter(v62, v0, v14, v15);
  swift_release();
  swift_release();
  v16 = v62[0];
  if ((~v62[0] & 0xF000000000000007) != 0)
  {
    if (!(v62[0] >> 61))
    {
      sub_100020008(v62[0]);
      sub_10008A3C8(v16, v53);
      sub_1000200AC(v16);
    }
    sub_1000200AC(v16);
  }
  v17 = sub_10008A4F4(0);
  if (v17)
  {
    v48 = v17;
    v18 = v17[2];
    v19 = v59;
    if (v18)
    {
      v20 = (uint64_t)v48 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
      v21 = *(_QWORD *)(v5 + 72);
      v56 = v4;
      v57 = v3;
      v49 = v7;
      v50 = v10;
      v60 = v21;
      do
      {
        sub_1000202AC(v20, (uint64_t)v7, type metadata accessor for PlaceSummaryViewModelUnit);
        if (swift_getEnumCaseMultiPayload(v7, v4))
        {
          sub_1000202F0((uint64_t)v7, type metadata accessor for PlaceSummaryViewModelUnit);
        }
        else
        {
          sub_10003F29C((uint64_t)v7, v19, type metadata accessor for PlaceSummaryViewModelUnit.Label);
          v22 = *(_QWORD *)(v19 + *(int *)(v61 + 36));
          if (v22)
          {
            swift_beginAccess(v10, v62, 33, 0);
            v23 = swift_retain_n(v22, 2);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v23);
            v25 = *(_QWORD *)((*v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v24 = *(_QWORD *)((*v10 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v25 >= v24 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
            v26 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v22);
            specialized Array._endMutation()(v26);
            swift_endAccess(v62);
            sub_1000202AC(v22 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_type, (uint64_t)v3, type metadata accessor for PlaceSummaryImageViewModel.ImageType);
            if (swift_getEnumCaseMultiPayload(v3, v58) == 2)
            {
              v55 = *v3;
              v27 = swift_projectBox(v55);
              v28 = v51;
              v29 = *(int *)(v52 + 96);
              v30 = (char *)v51 + v29;
              v31 = *(int *)(v52 + 112);
              v54 = v27 + v29;
              v32 = *(_QWORD *)(v27 + 8);
              *v51 = *(_QWORD *)v27;
              v28[1] = v32;
              *((_BYTE *)v28 + 16) = *(_BYTE *)(v27 + 16);
              v33 = *(_QWORD *)(v27 + 24);
              v28[3] = v33;
              v34 = type metadata accessor for Image.TemplateRenderingMode(0);
              v35 = *(_QWORD *)(v34 - 8);
              (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v30, v54, v34);
              *(_QWORD *)((char *)v28 + v31) = *(_QWORD *)(v27 + v31);
              v36 = *(void (**)(char *, uint64_t, __n128))(v35 + 8);
              v37 = swift_retain();
              v36(v30, v34, v37);
              swift_release();
              if (v33)
              {
                v10 = v50;
                swift_beginAccess(v50, v62, 33, 0);
                swift_retain();
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v38);
                v40 = *(_QWORD *)((*v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
                v39 = *(_QWORD *)((*v10 & 0xFFFFFFFFFFFFFF8) + 0x18);
                v7 = v49;
                if (v40 >= v39 >> 1)
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1);
                v41 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v40, v33);
                specialized Array._endMutation()(v41);
                swift_endAccess(v62);
                swift_release();
              }
              else
              {
                v7 = v49;
                v10 = v50;
              }
            }
            else
            {
              sub_1000202F0((uint64_t)v3, type metadata accessor for PlaceSummaryImageViewModel.ImageType);
            }
            swift_release();
            v19 = v59;
            sub_1000202F0(v59, type metadata accessor for PlaceSummaryViewModelUnit.Label);
            v4 = v56;
            v3 = v57;
            v21 = v60;
          }
          else
          {
            sub_1000202F0(v19, type metadata accessor for PlaceSummaryViewModelUnit.Label);
            v21 = v60;
          }
        }
        v20 += v21;
        --v18;
      }
      while (v18);
    }
    swift_bridgeObjectRelease(v48);
  }
  swift_beginAccess(v10, v62, 0, 0);
  v42 = *v10;
  if ((unint64_t)*v10 >> 62)
  {
    if (v42 < 0)
      v44 = *v10;
    else
      v44 = v42 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v10);
    v45 = _CocoaArrayWrapper.endIndex.getter(v44);
    swift_bridgeObjectRelease(v42);
    if (v45)
      goto LABEL_30;
LABEL_35:
    v43 = 0;
    goto LABEL_36;
  }
  if (!*(_QWORD *)((v42 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_35;
LABEL_30:
  v43 = *v10;
  swift_bridgeObjectRetain(*v10);
LABEL_36:
  swift_release();
  return v43;
}

uint64_t sub_10008A3C8(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE v16[24];

  v4 = (_QWORD *)(a2 + 16);
  swift_beginAccess(a2 + 16, v16, 33, 0);
  swift_retain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v5);
  v6 = *(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)(v6 + 0x10);
  v7 = *(_QWORD *)(v6 + 24);
  if (v8 >= v7 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
  v9 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, a1);
  specialized Array._endMutation()(v9);
  swift_endAccess(v16);
  result = sub_100088940();
  if (result)
  {
    v11 = result;
    swift_beginAccess(v4, v16, 33, 0);
    swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v12);
    v14 = *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v13 = *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v14 >= v13 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
    v15 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v11);
    specialized Array._endMutation()(v15);
    swift_endAccess(v16);
    return swift_release();
  }
  return result;
}

_QWORD *sub_10008A4F4(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v33 = a1;
  v35 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  v25 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  __chkstk_darwin(v2);
  v4 = (char *)v24 - v3;
  __chkstk_darwin(v5);
  v7 = (char *)v24 - v6;
  v8 = type metadata accessor for PlaceSummaryViewModelLine(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v30 = (uint64_t)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_100E287B0);
  v12 = swift_getKeyPath(&unk_100E287D8);
  static Published.subscript.getter(&v36, v1, KeyPath, v12);
  swift_release();
  swift_release();
  v13 = v36;
  v29 = *(_QWORD *)(v36 + 16);
  if (!v29)
  {
    swift_bridgeObjectRelease(v36);
    v16 = _swiftEmptyArrayStorage;
    if (_swiftEmptyArrayStorage[2])
      return v16;
    goto LABEL_9;
  }
  v14 = 0;
  v15 = *(int *)(v8 + 20);
  v27 = v36 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  v28 = v15;
  v16 = _swiftEmptyArrayStorage;
  v24[1] = v9;
  v26 = v36;
  do
  {
    if (v14 >= *(_QWORD *)(v13 + 16))
    {
      __break(1u);
      JUMPOUT(0x10008AA28);
    }
    v17 = *(_QWORD *)(v9 + 72);
    v32 = v14;
    v18 = v30;
    sub_1000202AC(v27 + v17 * v14, v30, type metadata accessor for PlaceSummaryViewModelLine);
    v19 = v9;
    v20 = *(_QWORD *)(v18 + v28);
    swift_bridgeObjectRetain(v20);
    sub_1000202F0(v18, type metadata accessor for PlaceSummaryViewModelLine);
    if (*(_QWORD *)(v20 + 16))
    {
      v21 = *(unsigned __int8 *)(v25 + 80);
      v31 = v20;
      v34 = (v21 + 32) & ~v21;
      sub_1000202AC(v20 + v34, (uint64_t)v7, type metadata accessor for PlaceSummaryViewModelUnit);
      sub_1000202AC((uint64_t)v7, (uint64_t)v4, type metadata accessor for PlaceSummaryViewModelUnit);
      v22 = (char *)&loc_10008A764 + *((int *)qword_10008AA28 + swift_getEnumCaseMultiPayload(v4, v35));
      __asm { BR              X9 }
    }
    swift_bridgeObjectRelease(v20);
    v9 = v19;
    v13 = v26;
    v14 = v32 + 1;
  }
  while (v32 + 1 != v29);
  swift_bridgeObjectRelease(v26);
  if (!_swiftEmptyArrayStorage[2])
  {
LABEL_9:
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    return 0;
  }
  return v16;
}

uint64_t sub_10008AA6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD *v15;

  v0 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for PlaceSummaryViewModelUnit.Label(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10008A4F4(0);
  if (v7)
  {
    v8 = v7[2];
    if (v8)
    {
      v9 = *(unsigned __int8 *)(v1 + 80);
      v15 = v7;
      v10 = (uint64_t)v7 + ((v9 + 32) & ~v9);
      v11 = *(_QWORD *)(v1 + 72);
      do
      {
        sub_1000202AC(v10, (uint64_t)v3, type metadata accessor for PlaceSummaryViewModelUnit);
        if (swift_getEnumCaseMultiPayload(v3, v0))
        {
          sub_1000202F0((uint64_t)v3, type metadata accessor for PlaceSummaryViewModelUnit);
        }
        else
        {
          sub_10003F29C((uint64_t)v3, (uint64_t)v6, type metadata accessor for PlaceSummaryViewModelUnit.Label);
          v12 = *(_QWORD *)&v6[*(int *)(v4 + 40)];
          swift_retain();
          sub_1000202F0((uint64_t)v6, type metadata accessor for PlaceSummaryViewModelUnit.Label);
          if (v12)
          {
            swift_bridgeObjectRelease(v15);
            return v12;
          }
        }
        v10 += v11;
        --v8;
      }
      while (v8);
      v7 = v15;
    }
    swift_bridgeObjectRelease(v7);
  }
  return 0;
}

uint64_t sub_10008ABE0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v0 = type metadata accessor for PlaceSummaryViewModelUnit.PhotoCarousel(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100008B04(&qword_101497918);
  __chkstk_darwin(v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v15 - v11;
  sub_10008ADA4((uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_100010CC4((uint64_t)v5, &qword_101497918);
    return 0;
  }
  sub_10003F29C((uint64_t)v5, (uint64_t)v12, type metadata accessor for PlaceSummaryViewModelUnit);
  sub_10003F29C((uint64_t)v12, (uint64_t)v9, type metadata accessor for PlaceSummaryViewModelUnit);
  if (swift_getEnumCaseMultiPayload(v9, v6) != 14)
  {
    sub_1000202F0((uint64_t)v9, type metadata accessor for PlaceSummaryViewModelUnit);
    return 0;
  }
  sub_10003F29C((uint64_t)v9, (uint64_t)v2, type metadata accessor for PlaceSummaryViewModelUnit.PhotoCarousel);
  v13 = *(_QWORD *)&v2[*(int *)(v0 + 20) + 8];
  swift_retain();
  sub_1000202F0((uint64_t)v2, type metadata accessor for PlaceSummaryViewModelUnit.PhotoCarousel);
  return v13;
}

uint64_t sub_10008ADA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = v1;
  v25 = a1;
  v3 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v23 - v8;
  v10 = type metadata accessor for PlaceSummaryViewModelLine(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v31 = (uint64_t)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_100E287B0);
  v14 = swift_getKeyPath(&unk_100E287D8);
  static Published.subscript.getter(&v32, v2, KeyPath, v14);
  swift_release();
  swift_release();
  v15 = v32;
  v26 = *(_QWORD *)(v32 + 16);
  if (v26)
  {
    v16 = 0;
    v17 = *(int *)(v10 + 20);
    v29 = v32 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v30 = v17;
    v23 = v4;
    v24 = v11;
    v28 = v32;
    do
    {
      if (v16 >= *(_QWORD *)(v15 + 16))
      {
        __break(1u);
        JUMPOUT(0x10008B22CLL);
      }
      v18 = v31;
      sub_1000202AC(v29 + *(_QWORD *)(v11 + 72) * v16, v31, type metadata accessor for PlaceSummaryViewModelLine);
      v19 = *(_QWORD *)(v18 + v30);
      swift_bridgeObjectRetain(v19);
      sub_1000202F0(v18, type metadata accessor for PlaceSummaryViewModelLine);
      if (*(_QWORD *)(v19 + 16))
      {
        v20 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
        v27 = v19;
        sub_1000202AC(v19 + v20, (uint64_t)v9, type metadata accessor for PlaceSummaryViewModelUnit);
        sub_1000202AC((uint64_t)v9, (uint64_t)v6, type metadata accessor for PlaceSummaryViewModelUnit);
        v21 = (char *)&loc_10008AFB8 + dword_10008B22C[swift_getEnumCaseMultiPayload(v6, v3)];
        __asm { BR              X9 }
      }
      swift_bridgeObjectRelease(v19);
      ++v16;
      v11 = v24;
      v15 = v28;
    }
    while (v16 != v26);
  }
  swift_bridgeObjectRelease(v15);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v25, 1, 1, v3);
}

uint64_t sub_10008B270()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _BYTE v21[24];
  unint64_t v22;

  v0 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (uint64_t *)((char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = sub_10008A4F4(13);
  if (!v4)
    return 0;
  v22 = (unint64_t)_swiftEmptyArrayStorage;
  v5 = v4[2];
  if (!v5)
  {
    swift_bridgeObjectRelease(v4);
    v15 = (uint64_t)_swiftEmptyArrayStorage;
    if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
      goto LABEL_11;
LABEL_16:
    if (v15 < 0)
      v17 = v15;
    else
      v17 = v15 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v15);
    v18 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease(v15);
    if (!v18)
      goto LABEL_12;
    return v15;
  }
  v6 = *(unsigned __int8 *)(v1 + 80);
  v20 = v4;
  v7 = (uint64_t)v4 + ((v6 + 32) & ~v6);
  v8 = *(_QWORD *)(v1 + 72);
  do
  {
    sub_1000202AC(v7, (uint64_t)v3, type metadata accessor for PlaceSummaryViewModelUnit);
    if (swift_getEnumCaseMultiPayload(v3, v0) == 13)
    {
      v9 = *v3 + OBJC_IVAR____TtCO4Maps25PlaceSummaryViewModelUnit24RealTimeAvailableCharger__chargerViewModel;
      swift_beginAccess(v9, v21, 0, 0);
      v10 = *(_QWORD *)(v9 + 8);
      swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11);
      v13 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v12 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v13 >= v12 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
      v14 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v10);
      specialized Array._endMutation()(v14);
      swift_release();
    }
    else
    {
      sub_1000202F0((uint64_t)v3, type metadata accessor for PlaceSummaryViewModelUnit);
    }
    v7 += v8;
    --v5;
  }
  while (v5);
  swift_bridgeObjectRelease(v20);
  v15 = v22;
  if (v22 >> 62)
    goto LABEL_16;
LABEL_11:
  if (!*(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_12:
    swift_bridgeObjectRelease(v15);
    return 0;
  }
  return v15;
}

uint64_t sub_10008B45C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v1 = v0;
  v22 = (uint64_t)_swiftEmptyArrayStorage;
  KeyPath = swift_getKeyPath(&unk_100E28720);
  v3 = swift_getKeyPath(&unk_100E28748);
  static Published.subscript.getter(&v21, v1, KeyPath, v3);
  swift_release();
  swift_release();
  v4 = v21;
  if ((~v21 & 0xF000000000000007) != 0)
  {
    if (v21 >> 61 == 1)
    {
      v5 = sub_100020008(v21);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v5);
      v6 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v7 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v6 >= v7 >> 1)
      {
        v20 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v6 + 1, 1);
        v6 = v20;
      }
      v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v4 & 0x1FFFFFFFFFFFFFFFLL);
      specialized Array._endMutation()(v8);
    }
    sub_1000200AC(v4);
  }
  v9 = swift_getKeyPath(&unk_100E28768);
  v10 = swift_getKeyPath(&unk_100E28790);
  static Published.subscript.getter(&v21, v1, v9, v10);
  swift_release();
  swift_release();
  v11 = v21;
  if ((~v21 & 0xF000000000000007) != 0)
  {
    if (v21 >> 61 == 1)
    {
      v12 = sub_100020008(v21);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v12);
      v14 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v13 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v14 >= v13 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
      v15 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v11 & 0x1FFFFFFFFFFFFFFFLL);
      specialized Array._endMutation()(v15);
    }
    sub_1000200AC(v11);
  }
  v16 = v22;
  if ((unint64_t)v22 >> 62)
  {
    if (v22 < 0)
      v18 = v22;
    else
      v18 = v22 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v22);
    v19 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(v16);
    if (!v19)
      goto LABEL_15;
  }
  else if (!*(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_15:
    swift_bridgeObjectRelease(v16);
    return 0;
  }
  return v16;
}

uint64_t sub_10008B680()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v1 = v0;
  v22 = (uint64_t)_swiftEmptyArrayStorage;
  KeyPath = swift_getKeyPath(&unk_100E28720);
  v3 = swift_getKeyPath(&unk_100E28748);
  static Published.subscript.getter(&v21, v1, KeyPath, v3);
  swift_release();
  swift_release();
  v4 = v21;
  if ((~v21 & 0xF000000000000007) != 0)
  {
    if (v21 >> 61 == 3)
    {
      v5 = sub_100020008(v21);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v5);
      v6 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v7 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v6 >= v7 >> 1)
      {
        v20 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v6 + 1, 1);
        v6 = v20;
      }
      v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v4 & 0x1FFFFFFFFFFFFFFFLL);
      specialized Array._endMutation()(v8);
    }
    sub_1000200AC(v4);
  }
  v9 = swift_getKeyPath(&unk_100E28768);
  v10 = swift_getKeyPath(&unk_100E28790);
  static Published.subscript.getter(&v21, v1, v9, v10);
  swift_release();
  swift_release();
  v11 = v21;
  if ((~v21 & 0xF000000000000007) != 0)
  {
    if (v21 >> 61 == 3)
    {
      v12 = sub_100020008(v21);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v12);
      v14 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v13 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v14 >= v13 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
      v15 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v11 & 0x1FFFFFFFFFFFFFFFLL);
      specialized Array._endMutation()(v15);
    }
    sub_1000200AC(v11);
  }
  v16 = v22;
  if ((unint64_t)v22 >> 62)
  {
    if (v22 < 0)
      v18 = v22;
    else
      v18 = v22 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v22);
    v19 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(v16);
    if (!v19)
      goto LABEL_15;
  }
  else if (!*(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_15:
    swift_bridgeObjectRelease(v16);
    return 0;
  }
  return v16;
}

uint64_t sub_10008B8A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v0 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (uint64_t *)((char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = sub_10008A4F4(9);
  if (!v4)
    return 0;
  v5 = v4;
  v19 = (unint64_t)_swiftEmptyArrayStorage;
  v6 = v4[2];
  if (!v6)
  {
    swift_bridgeObjectRelease(v4);
    v14 = (uint64_t)_swiftEmptyArrayStorage;
    if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
      goto LABEL_11;
LABEL_16:
    if (v14 < 0)
      v16 = v14;
    else
      v16 = v14 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v14);
    v17 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(v14);
    if (!v17)
      goto LABEL_12;
    return v14;
  }
  v7 = (uint64_t)v4 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  v8 = *(_QWORD *)(v1 + 72);
  do
  {
    sub_1000202AC(v7, (uint64_t)v3, type metadata accessor for PlaceSummaryViewModelUnit);
    if (swift_getEnumCaseMultiPayload(v3, v0) == 9)
    {
      v9 = *v3;
      swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v10);
      v12 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v11 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v12 >= v11 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
      v13 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v9);
      specialized Array._endMutation()(v13);
      swift_release();
    }
    else
    {
      sub_1000202F0((uint64_t)v3, type metadata accessor for PlaceSummaryViewModelUnit);
    }
    v7 += v8;
    --v6;
  }
  while (v6);
  swift_bridgeObjectRelease(v5);
  v14 = v19;
  if (v19 >> 62)
    goto LABEL_16;
LABEL_11:
  if (!*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_12:
    swift_bridgeObjectRelease(v14);
    return 0;
  }
  return v14;
}

uint64_t sub_10008BA70()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100E28768);
  v2 = swift_getKeyPath(&unk_100E28790);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release();
  swift_release();
  if ((~v4 & 0xF000000000000007) != 0)
    __asm { BR              X10 }
  return 0;
}

void sub_10008BB0C(unint64_t a1)
{
  sub_1000200AC(a1);
  JUMPOUT(0x10008BADCLL);
}

void sub_10008BB18(unint64_t a1)
{
  sub_1000200AC(a1);
  JUMPOUT(0x10008BADCLL);
}

void sub_10008BB3C(unint64_t a1)
{
  sub_1000200AC(a1);
  JUMPOUT(0x10008BADCLL);
}

void sub_10008BB48(unint64_t a1)
{
  sub_1000200AC(a1);
  JUMPOUT(0x10008BADCLL);
}

void sub_10008BB54()
{
  JUMPOUT(0x10008BADCLL);
}

uint64_t sub_10008BBA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  unsigned int (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  void *v48;
  Swift::String v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t);
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  Swift::String v58;
  uint64_t *v59;
  uint64_t v60;
  void *v61;
  Swift::String v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  Swift::String v73;
  void *object;
  Swift::String v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  Swift::String v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  Swift::String v96;
  uint64_t *v97;
  uint64_t v98;
  void *v99;
  Swift::String v100;
  Swift::String v101;
  Swift::String v102;
  void *v103;
  Swift::String v104;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  id v128;
  _QWORD v129[2];

  v108 = type metadata accessor for PlaceSummaryViewModelUnit.TappableEntry(0);
  __chkstk_darwin(v108);
  v109 = (uint64_t)&v106 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1 = sub_100008B04(&qword_101495308);
  __chkstk_darwin(v1);
  v111 = (uint64_t)&v106 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = type metadata accessor for PlaceSummaryViewModelUnit.MultipleCuratedGuides(0);
  __chkstk_darwin(v112);
  v113 = (uint64_t)&v106 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(0);
  v110 = *(_QWORD *)(v120 - 8);
  __chkstk_darwin(v120);
  v107 = (uint64_t)&v106 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v116 = (uint64_t)&v106 - v6;
  v118 = type metadata accessor for PlaceSummaryViewModelUnit.UserGeneratedGuide(0);
  __chkstk_darwin(v118);
  v125 = (char *)&v106 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008B04(&qword_101497918);
  __chkstk_darwin(v8);
  v124 = (char *)&v106 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v122 = (uint64_t)&v106 - v11;
  __chkstk_darwin(v12);
  v126 = (uint64_t)&v106 - v13;
  __chkstk_darwin(v14);
  v16 = (char *)&v106 - v15;
  __chkstk_darwin(v17);
  v19 = (char *)&v106 - v18;
  v20 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v114 = (uint64_t)&v106 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v115 = (uint64_t)&v106 - v24;
  __chkstk_darwin(v25);
  v117 = (uint64_t *)((char *)&v106 - v26);
  __chkstk_darwin(v27);
  v123 = (char *)&v106 - v28;
  __chkstk_darwin(v29);
  v119 = (uint64_t)&v106 - v30;
  __chkstk_darwin(v31);
  v127 = (uint64_t)&v106 - v32;
  __chkstk_darwin(v33);
  v35 = (char *)&v106 - v34;
  __chkstk_darwin(v36);
  v121 = (uint64_t)&v106 - v37;
  __chkstk_darwin(v38);
  v40 = (char *)&v106 - v39;
  __chkstk_darwin(v41);
  v43 = (char *)&v106 - v42;
  sub_10008ADA4((uint64_t)v19);
  v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  if (v44(v19, 1, v20) == 1)
  {
    sub_100010CC4((uint64_t)v19, &qword_101497918);
  }
  else
  {
    v45 = (uint64_t)v125;
    sub_10003F29C((uint64_t)v19, (uint64_t)v43, type metadata accessor for PlaceSummaryViewModelUnit);
    sub_1000202AC((uint64_t)v43, (uint64_t)v40, type metadata accessor for PlaceSummaryViewModelUnit);
    if (swift_getEnumCaseMultiPayload(v40, v20) == 4)
    {
      sub_10003F29C((uint64_t)v40, v45, type metadata accessor for PlaceSummaryViewModelUnit.UserGeneratedGuide);
      v129[0] = 0;
      v129[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease(v129[1]);
      strcpy((char *)v129, "In your Guide ");
      HIBYTE(v129[1]) = -18;
      v46 = (uint64_t *)(v45 + *(int *)(v118 + 20));
      v47 = *v46;
      v48 = (void *)v46[1];
      swift_bridgeObjectRetain(v48);
      v49._countAndFlagsBits = v47;
      v49._object = v48;
      String.append(_:)(v49);
      swift_bridgeObjectRelease(v48);
      v50 = v129[0];
      sub_1000202F0(v45, type metadata accessor for PlaceSummaryViewModelUnit.UserGeneratedGuide);
      v51 = (uint64_t)v43;
      goto LABEL_29;
    }
    sub_1000202F0((uint64_t)v43, type metadata accessor for PlaceSummaryViewModelUnit);
    sub_1000202F0((uint64_t)v40, type metadata accessor for PlaceSummaryViewModelUnit);
  }
  sub_10008ADA4((uint64_t)v16);
  if (v44(v16, 1, v20) == 1)
  {
    sub_100010CC4((uint64_t)v16, &qword_101497918);
  }
  else
  {
    v52 = v121;
    sub_10003F29C((uint64_t)v16, v121, type metadata accessor for PlaceSummaryViewModelUnit);
    sub_1000202AC(v52, (uint64_t)v35, type metadata accessor for PlaceSummaryViewModelUnit);
    if (swift_getEnumCaseMultiPayload(v35, v20) == 3)
    {
      v53 = type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide;
      v54 = v116;
      sub_10003F29C((uint64_t)v35, v116, type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide);
      v55 = v120;
      v56 = (_QWORD *)(v54 + *(int *)(v120 + 24));
      v57 = v56[1];
      v129[0] = *v56;
      v129[1] = v57;
      swift_bridgeObjectRetain(v57);
      v58._countAndFlagsBits = 8250;
      v58._object = (void *)0xE200000000000000;
      String.append(_:)(v58);
      v59 = (uint64_t *)(v54 + *(int *)(v55 + 28));
      v60 = *v59;
      v61 = (void *)v59[1];
      swift_bridgeObjectRetain(v61);
      v62._countAndFlagsBits = v60;
      v62._object = v61;
      String.append(_:)(v62);
      swift_bridgeObjectRelease(v61);
      v50 = v129[0];
      v63 = v54;
LABEL_26:
      sub_1000202F0(v63, v53);
      v51 = v52;
      goto LABEL_29;
    }
    sub_1000202F0(v52, type metadata accessor for PlaceSummaryViewModelUnit);
    sub_1000202F0((uint64_t)v35, type metadata accessor for PlaceSummaryViewModelUnit);
  }
  v64 = v126;
  sub_10008ADA4(v126);
  v65 = v44((char *)v64, 1, v20);
  v66 = v127;
  if (v65 == 1)
  {
    sub_100010CC4(v64, &qword_101497918);
  }
  else
  {
    sub_10003F29C(v64, v127, type metadata accessor for PlaceSummaryViewModelUnit);
    v67 = v119;
    sub_1000202AC(v66, v119, type metadata accessor for PlaceSummaryViewModelUnit);
    if (swift_getEnumCaseMultiPayload(v67, v20) == 2)
    {
      v68 = v67;
      v69 = v113;
      sub_10003F29C(v68, v113, type metadata accessor for PlaceSummaryViewModelUnit.MultipleCuratedGuides);
      v71 = v111;
      v70 = v112;
      sub_10000C1FC(v69 + *(int *)(v112 + 28), v111, &qword_101495308);
      v72 = v120;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v110 + 48))(v71, 1, v120) == 1)
      {
        sub_100010CC4(v71, &qword_101495308);
        v129[0] = 0;
        v129[1] = 0xE000000000000000;
        _StringGuts.grow(_:)(21);
        swift_bridgeObjectRelease(v129[1]);
        strcpy((char *)v129, "Featured in ");
        BYTE5(v129[1]) = 0;
        HIWORD(v129[1]) = -5120;
        v128 = *(id *)(v69 + *(int *)(v70 + 20));
        v73._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        object = v73._object;
        String.append(_:)(v73);
        swift_bridgeObjectRelease(object);
        v75._countAndFlagsBits = 0x73656469754720;
        v75._object = (void *)0xE700000000000000;
        String.append(_:)(v75);
        v50 = v129[0];
      }
      else
      {
        v89 = v107;
        sub_10003F29C(v71, v107, type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide);
        v129[0] = 0;
        v129[1] = 0xE000000000000000;
        _StringGuts.grow(_:)(20);
        v90 = v70;
        v91 = v129[1];
        v92 = (uint64_t *)(v89 + *(int *)(v72 + 24));
        v93 = v72;
        v95 = *v92;
        v94 = v92[1];
        swift_bridgeObjectRetain(v94);
        swift_bridgeObjectRelease(v91);
        v129[0] = v95;
        v129[1] = v94;
        v96._countAndFlagsBits = 8250;
        v96._object = (void *)0xE200000000000000;
        String.append(_:)(v96);
        v97 = (uint64_t *)(v89 + *(int *)(v93 + 28));
        v98 = *v97;
        v99 = (void *)v97[1];
        swift_bridgeObjectRetain(v99);
        v100._countAndFlagsBits = v98;
        v100._object = v99;
        String.append(_:)(v100);
        swift_bridgeObjectRelease(v99);
        v101._countAndFlagsBits = 0x20646E6120;
        v101._object = (void *)0xE500000000000000;
        String.append(_:)(v101);
        v128 = *(id *)(v69 + *(int *)(v90 + 20));
        v102._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        v103 = v102._object;
        String.append(_:)(v102);
        swift_bridgeObjectRelease(v103);
        v104._countAndFlagsBits = 0x73656469754720;
        v104._object = (void *)0xE700000000000000;
        String.append(_:)(v104);
        v50 = v129[0];
        sub_1000202F0(v89, type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide);
      }
      sub_1000202F0(v69, type metadata accessor for PlaceSummaryViewModelUnit.MultipleCuratedGuides);
      v51 = v66;
      goto LABEL_29;
    }
    sub_1000202F0(v66, type metadata accessor for PlaceSummaryViewModelUnit);
    sub_1000202F0(v67, type metadata accessor for PlaceSummaryViewModelUnit);
  }
  v77 = (uint64_t)v123;
  v76 = (uint64_t)v124;
  v78 = v122;
  sub_10008ADA4(v122);
  if (v44((char *)v78, 1, v20) == 1)
  {
    sub_100010CC4(v78, &qword_101497918);
LABEL_22:
    sub_10008ADA4(v76);
    if (v44((char *)v76, 1, v20) == 1)
    {
      sub_100010CC4(v76, &qword_101497918);
      return 0;
    }
    v83 = v115;
    sub_10003F29C(v76, v115, type metadata accessor for PlaceSummaryViewModelUnit);
    v84 = v114;
    sub_1000202AC(v83, v114, type metadata accessor for PlaceSummaryViewModelUnit);
    if (swift_getEnumCaseMultiPayload(v84, v20) != 10)
    {
      sub_1000202F0(v83, type metadata accessor for PlaceSummaryViewModelUnit);
      sub_1000202F0(v84, type metadata accessor for PlaceSummaryViewModelUnit);
      return 0;
    }
    v53 = type metadata accessor for PlaceSummaryViewModelUnit.TappableEntry;
    v85 = v84;
    v52 = v83;
    v86 = v109;
    sub_10003F29C(v85, v109, type metadata accessor for PlaceSummaryViewModelUnit.TappableEntry);
    type metadata accessor for PlaceSummaryViewModelUnit.Label(0);
    v87 = type metadata accessor for AttributedString(0);
    v88 = sub_10000BC84(&qword_101497940, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString, (uint64_t)&protocol conformance descriptor for AttributedString);
    v50 = dispatch thunk of CustomStringConvertible.description.getter(v87, v88);
    v63 = v86;
    goto LABEL_26;
  }
  sub_10003F29C(v78, v77, type metadata accessor for PlaceSummaryViewModelUnit);
  v79 = v117;
  sub_1000202AC(v77, (uint64_t)v117, type metadata accessor for PlaceSummaryViewModelUnit);
  if (swift_getEnumCaseMultiPayload(v79, v20) != 9)
  {
    sub_1000202F0(v77, type metadata accessor for PlaceSummaryViewModelUnit);
    sub_1000202F0((uint64_t)v79, type metadata accessor for PlaceSummaryViewModelUnit);
    goto LABEL_22;
  }
  v80 = *v79;
  strcpy((char *)v129, "Location ");
  WORD1(v129[1]) = 0;
  HIDWORD(v129[1]) = -385875968;
  v128 = objc_msgSend(*(id *)(v80 + OBJC_IVAR____TtCO4Maps25PlaceSummaryViewModelUnit17ContainmentParent_parentIdentifier), "muid");
  v81._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v82 = v81._object;
  String.append(_:)(v81);
  swift_release();
  swift_bridgeObjectRelease(v82);
  v50 = v129[0];
  v51 = v77;
LABEL_29:
  sub_1000202F0(v51, type metadata accessor for PlaceSummaryViewModelUnit);
  return v50;
}

uint64_t sub_10008C720()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v23;

  v0 = sub_100008B04(&qword_101497918);
  __chkstk_darwin(v0);
  v2 = (char *)&v23 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v5 = (char *)&v23 - v4;
  __chkstk_darwin(v6);
  v8 = (char *)&v23 - v7;
  __chkstk_darwin(v9);
  v11 = (char *)&v23 - v10;
  __chkstk_darwin(v12);
  v14 = (char *)&v23 - v13;
  sub_10008ADA4((uint64_t)&v23 - v13);
  v15 = type metadata accessor for PlaceSummaryViewModelUnit(0);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48);
  v17 = v16(v14, 1, v15);
  sub_100010CC4((uint64_t)v14, &qword_101497918);
  if (v17 != 1)
    return 9;
  sub_10008ADA4((uint64_t)v11);
  v18 = v16(v11, 1, v15);
  sub_100010CC4((uint64_t)v11, &qword_101497918);
  if (v18 != 1)
    return 10;
  sub_10008ADA4((uint64_t)v8);
  v19 = v16(v8, 1, v15);
  sub_100010CC4((uint64_t)v8, &qword_101497918);
  if (v19 != 1)
    return 10;
  sub_10008ADA4((uint64_t)v5);
  v20 = v16(v5, 1, v15);
  sub_100010CC4((uint64_t)v5, &qword_101497918);
  if (v20 != 1)
    return 15;
  sub_10008ADA4((uint64_t)v2);
  v21 = v16(v2, 1, v15);
  sub_100010CC4((uint64_t)v2, &qword_101497918);
  if (v21 == 1)
    return 0;
  else
    return 13;
}

char *sub_10008C97C(char *a1, char **a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v13[(v5 + 16) & ~(unint64_t)v5];
    swift_retain(v13);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v14 = *a2;
      *(_QWORD *)a1 = *a2;
      swift_retain(v14);
      v10 = a1;
      v11 = a3;
      v12 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v8 = *a2;
      *(_QWORD *)a1 = *a2;
      v9 = v8;
      v10 = a1;
      v11 = a3;
      v12 = 1;
    }
    else
    {
      v15 = type metadata accessor for URL(0);
      (*(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a1, a2, v15);
      v10 = a1;
      v11 = a3;
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v11, v12);
  }
  return a1;
}

void sub_10008CA5C(id *a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v4;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, a2);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      swift_release(*a1);
      break;
    case 1:

      break;
    case 0:
      v4 = type metadata accessor for URL(0);
      (*(void (**)(id *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      break;
  }
}

void **sub_10008CAD4(void **a1, void **a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  void *v7;
  id v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    v12 = *a2;
    *a1 = *a2;
    swift_retain(v12);
    v9 = a1;
    v10 = a3;
    v11 = 2;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v7 = *a2;
    *a1 = *a2;
    v8 = v7;
    v9 = a1;
    v10 = a3;
    v11 = 1;
  }
  else
  {
    v13 = type metadata accessor for URL(0);
    (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
    v9 = a1;
    v10 = a3;
    v11 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v10, v11);
  return a1;
}

_QWORD *sub_10008CB88(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  void *v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    sub_1000202F0((uint64_t)a1, type metadata accessor for PlaceSummaryImageViewModel.ImageType);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      swift_retain();
      v9 = a1;
      v10 = a3;
      v11 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v7 = (void *)*a2;
      *a1 = *a2;
      v8 = v7;
      v9 = a1;
      v10 = a3;
      v11 = 1;
    }
    else
    {
      v12 = type metadata accessor for URL(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      v9 = a1;
      v10 = a3;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
  }
  return a1;
}

void *sub_10008CC54(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for URL(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

void *sub_10008CCDC(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_1000202F0((uint64_t)a1, type metadata accessor for PlaceSummaryImageViewModel.ImageType);
    if (swift_getEnumCaseMultiPayload(a2, a3))
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for URL(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t sub_10008CD80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_10008CD90(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[2] = "\b";
    swift_initEnumMetadataMultiPayload(a1, 256, 3, v4);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlaceSummaryViewModelRefinementButtons()
{
  return &type metadata for PlaceSummaryViewModelRefinementButtons;
}

ValueMetadata *type metadata accessor for PlaceSummaryViewModelActionButtons()
{
  return &type metadata for PlaceSummaryViewModelActionButtons;
}

unint64_t *initializeBufferWithCopyOfBuffer for PlaceSummaryViewModelAccessoryEntity(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  sub_100020008(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for PlaceSummaryViewModelAccessoryEntity(unint64_t *a1)
{
  return sub_1000200C0(*a1);
}

unint64_t *assignWithCopy for PlaceSummaryViewModelAccessoryEntity(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  sub_100020008(*a2);
  v4 = *a1;
  *a1 = v3;
  sub_1000200C0(v4);
  return a1;
}

unint64_t *assignWithTake for PlaceSummaryViewModelAccessoryEntity(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  sub_1000200C0(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlaceSummaryViewModelAccessoryEntity(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7C && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 124);
  v3 = (((*(_QWORD *)a1 >> 57) >> 4) | (8 * ((*(_QWORD *)a1 >> 57) & 8 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7B)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for PlaceSummaryViewModelAccessoryEntity(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7B)
  {
    *(_QWORD *)result = a2 - 124;
    if (a3 >= 0x7C)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7C)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 3) & 0xF | (16 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_10008CF78(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 61;
  if (v1 <= 3)
    return v1;
  else
    return (*a1 >> 3) + 4;
}

_QWORD *sub_10008CF94(_QWORD *result)
{
  *result &= 0x1FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_10008CFA4(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if (a2 < 4)
  {
    v2 = *result & 0xFFFFFFFFFFFFFF8;
    v3 = a2 << 61;
  }
  else
  {
    v2 = 8 * (a2 - 4);
    v3 = 0x8000000000000000;
  }
  *result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for PlaceSummaryViewModelAccessoryEntity()
{
  return &type metadata for PlaceSummaryViewModelAccessoryEntity;
}

_QWORD *sub_10008CFE0(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = *(_QWORD *)((char *)a2 + v8);
    *(_QWORD *)((char *)a1 + v8) = v10;
    *((_BYTE *)a1 + v9) = *((_BYTE *)a2 + v9);
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    swift_bridgeObjectRetain(v10);
  }
  return a1;
}

uint64_t sub_10008D080(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20)));
}

uint64_t sub_10008D0C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t sub_10008D138(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(_QWORD *)(a2 + v7);
  v9 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10008D1BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10008D22C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_bridgeObjectRelease(v8);
  v9 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v9) = *(_BYTE *)(a2 + v9);
  return a1;
}

uint64_t sub_10008D2A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008D2B0);
}

uint64_t sub_10008D2B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008D2C0);
}

uint64_t type metadata accessor for PlaceSummaryViewModelLine(uint64_t a1)
{
  return sub_100021D9C(a1, qword_1014978B8, (uint64_t)&nominal type descriptor for PlaceSummaryViewModelLine);
}

uint64_t sub_10008D2D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000939B8(a1, a2, a3, (uint64_t)&value witness table for Builtin.BridgeObject + 64, (uint64_t)&unk_100E27D60, (uint64_t)&unk_100E27D60);
}

uint64_t sub_10008D2F4()
{
  return sub_10000BC84((unint64_t *)&qword_1014938B8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
}

void *sub_10008D320()
{
  return &protocol witness table for ObjectIdentifier;
}

uint64_t sub_10008D32C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100E287B0);
  v5 = swift_getKeyPath(&unk_100E287D8);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_10008D3A8(uint64_t *a1, void **a2)
{
  uint64_t v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100E287B0);
  v5 = swift_getKeyPath(&unk_100E287D8);
  v7 = v2;
  swift_bridgeObjectRetain(v2);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_10008D41C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10008D748(a1, (uint64_t)&unk_100E28720, (uint64_t)&unk_100E28748, a2);
}

uint64_t sub_10008D430(unint64_t *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_10008D46C(a1, a2, a3, a4, (uint64_t)&unk_100E28720, (uint64_t)&unk_100E28748);
}

uint64_t sub_10008D444@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10008D748(a1, (uint64_t)&unk_100E28768, (uint64_t)&unk_100E28790, a2);
}

uint64_t sub_10008D458(unint64_t *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_10008D46C(a1, a2, a3, a4, (uint64_t)&unk_100E28768, (uint64_t)&unk_100E28790);
}

uint64_t sub_10008D46C(unint64_t *a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v7;
  void *v8;
  uint64_t KeyPath;
  uint64_t v10;
  unint64_t v12;

  v7 = *a1;
  v8 = *a2;
  KeyPath = swift_getKeyPath(a5);
  v10 = swift_getKeyPath(a6);
  v12 = v7;
  sub_10001FFF4(v7);
  return static Published.subscript.setter(&v12, v8, KeyPath, v10);
}

uint64_t sub_10008D4DC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_10008D614(a1, (uint64_t)&unk_100E285B8, (uint64_t)&unk_100E285E0, a2);
}

uint64_t sub_10008D4F0(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10008D6A0(a1, a2, a3, a4, (uint64_t)&unk_100E285B8, (uint64_t)&unk_100E285E0);
}

double sub_10008D504@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  __int128 v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100E28600);
  v5 = swift_getKeyPath(&unk_100E28628);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  result = *(double *)&v7;
  *a2 = v7;
  return result;
}

uint64_t sub_10008D580(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[2];

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_100E28600);
  v6 = swift_getKeyPath(&unk_100E28628);
  v8[0] = v3;
  v8[1] = v2;
  swift_bridgeObjectRetain(v2);
  swift_retain(v4);
  return static Published.subscript.setter(v8, v4, KeyPath, v6);
}

uint64_t sub_10008D600@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_10008D614(a1, (uint64_t)&unk_100E28648, (uint64_t)&unk_100E28670, a2);
}

uint64_t sub_10008D614@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, _BYTE *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v8 = swift_getKeyPath(a3);
  static Published.subscript.getter(&v10, v6, KeyPath, v8);
  swift_release(KeyPath);
  result = swift_release(v8);
  *a4 = v10;
  return result;
}

uint64_t sub_10008D68C(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10008D6A0(a1, a2, a3, a4, (uint64_t)&unk_100E28648, (uint64_t)&unk_100E28670);
}

uint64_t sub_10008D6A0(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  char v12;

  v7 = *a1;
  v8 = *a2;
  KeyPath = swift_getKeyPath(a5);
  v10 = swift_getKeyPath(a6);
  v12 = v7;
  swift_retain(v8);
  return static Published.subscript.setter(&v12, v8, KeyPath, v10);
}

uint64_t sub_10008D70C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10008D748(a1, (uint64_t)&unk_100E28690, (uint64_t)&unk_100E286B8, a2);
}

uint64_t sub_10008D720(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10008D7D4(a1, a2, a3, a4, (uint64_t)&unk_100E28690, (uint64_t)&unk_100E286B8);
}

uint64_t sub_10008D734@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10008D748(a1, (uint64_t)&unk_100E286D8, (uint64_t)&unk_100E28700, a2);
}

uint64_t sub_10008D748@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v8 = swift_getKeyPath(a3);
  static Published.subscript.getter(&v10, v6, KeyPath, v8);
  swift_release(KeyPath);
  result = swift_release(v8);
  *a4 = v10;
  return result;
}

uint64_t sub_10008D7C0(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10008D7D4(a1, a2, a3, a4, (uint64_t)&unk_100E286D8, (uint64_t)&unk_100E28700);
}

uint64_t sub_10008D7D4(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v12;

  v7 = *a1;
  v8 = *a2;
  KeyPath = swift_getKeyPath(a5);
  v10 = swift_getKeyPath(a6);
  v12 = v7;
  swift_bridgeObjectRetain(v7);
  swift_retain(v8);
  return static Published.subscript.setter(&v12, v8, KeyPath, v10);
}

void sub_10008D848(uint64_t a1, uint64_t a2)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  char v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  char v23;

  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v4 = 0;
  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    v10 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v11 = v10 | (v4 << 6);
LABEL_23:
    v15 = 8 * v11;
    v16 = *(void **)(*(_QWORD *)(a1 + 56) + v15);
    v17 = sub_1000C163C(*(_QWORD *)(*(_QWORD *)(a1 + 48) + v15));
    if ((v18 & 1) == 0)
      return;
    v19 = *(void **)(*(_QWORD *)(a2 + 56) + 8 * v17);
    if (v19)
    {
      if (!v16)
        return;
      sub_10000E4BC(0, (unint64_t *)&qword_101497900, UIImage_ptr);
      v20 = v16;
      v21 = v19;
      v22 = v20;
      v23 = static NSObject.== infix(_:_:)(v21, v22);

      if ((v23 & 1) == 0)
        return;
    }
    else if (v16)
    {
      return;
    }
  }
  v12 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v12 >= v9)
    return;
  v13 = *(_QWORD *)(v5 + 8 * v12);
  ++v4;
  if (v13)
    goto LABEL_22;
  v4 = v12 + 1;
  if (v12 + 1 >= v9)
    return;
  v13 = *(_QWORD *)(v5 + 8 * v4);
  if (v13)
    goto LABEL_22;
  v4 = v12 + 2;
  if (v12 + 2 >= v9)
    return;
  v13 = *(_QWORD *)(v5 + 8 * v4);
  if (v13)
  {
LABEL_22:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
    goto LABEL_23;
  }
  v14 = v12 + 3;
  if (v14 >= v9)
    return;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_22;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_22;
  }
LABEL_30:
  __break(1u);
}

uint64_t sub_10008DA20(uint64_t result, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  id v21;
  id v22;
  unint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  char v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;

  if (result == a2)
    return 1;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v35 = result;
  v2 = 0;
  v33 = result + 64;
  v3 = 1 << *(_BYTE *)(result + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(result + 64);
  v34 = (unint64_t)(v3 + 63) >> 6;
  while (1)
  {
    if (v5)
    {
      v37 = (v5 - 1) & v5;
      v38 = v2;
      v6 = __clz(__rbit64(v5)) | (v2 << 6);
      goto LABEL_22;
    }
    v7 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v7 >= v34)
      return 1;
    v8 = *(_QWORD *)(v33 + 8 * v7);
    v9 = v2 + 1;
    if (!v8)
    {
      v9 = v2 + 2;
      if (v2 + 2 >= v34)
        return 1;
      v8 = *(_QWORD *)(v33 + 8 * v9);
      if (!v8)
      {
        v9 = v2 + 3;
        if (v2 + 3 >= v34)
          return 1;
        v8 = *(_QWORD *)(v33 + 8 * v9);
        if (!v8)
          break;
      }
    }
LABEL_21:
    v37 = (v8 - 1) & v8;
    v38 = v9;
    v6 = __clz(__rbit64(v8)) + (v9 << 6);
LABEL_22:
    v11 = 32 * v6;
    v12 = *(_QWORD *)(result + 48) + v11;
    v13 = *(_QWORD *)(v12 + 8);
    v14 = *(_QWORD *)(v12 + 16);
    v15 = *(_QWORD *)(result + 56) + v11;
    v16 = *(void **)v15;
    v17 = *(_QWORD *)(v15 + 8);
    v19 = *(_QWORD *)(v15 + 16);
    v18 = *(_QWORD *)(v15 + 24);
    v20 = *(_BYTE *)(v12 + 24);
    v21 = *(id *)v12;
    sub_10000BE70(v13, v14, v20);
    v22 = v16;
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v19);
    v39 = v18;
    swift_bridgeObjectRetain(v18);
    v23 = sub_1000C1674((uint64_t)v21, v13, v14, v20);
    v25 = v24;

    sub_100084C88(v13, v14, v20);
    if ((v25 & 1) == 0)
    {
      swift_bridgeObjectRelease(v18);
      swift_bridgeObjectRelease(v19);
      swift_bridgeObjectRelease(v17);

      return 0;
    }
    v26 = *(_QWORD *)(a2 + 56) + 32 * v23;
    v27 = *(void **)v26;
    v28 = *(_QWORD *)(v26 + 8);
    v30 = *(_QWORD *)(v26 + 16);
    v29 = *(_QWORD *)(v26 + 24);
    sub_10000E4BC(0, (unint64_t *)&qword_101492E60, NSObject_ptr);
    v31 = v27;
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v29);
    if ((static NSObject.== infix(_:_:)(v31, v22) & 1) == 0
      || (sub_10008385C(v28, v17) & 1) == 0
      || (sub_100083A34(v30, v19) & 1) == 0)
    {
      swift_bridgeObjectRelease(v19);
      swift_bridgeObjectRelease(v17);

      swift_bridgeObjectRelease(v29);
      swift_bridgeObjectRelease(v30);
      swift_bridgeObjectRelease(v28);

      swift_bridgeObjectRelease(v18);
      return 0;
    }
    v32 = sub_10008DD70(v29, v18);
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(v17);

    swift_bridgeObjectRelease(v29);
    swift_bridgeObjectRelease(v30);
    swift_bridgeObjectRelease(v28);

    swift_bridgeObjectRelease(v39);
    result = v35;
    v5 = v37;
    v2 = v38;
    if ((v32 & 1) == 0)
      return 0;
  }
  v10 = v2 + 4;
  if (v2 + 4 >= v34)
    return 1;
  v8 = *(_QWORD *)(v33 + 8 * v10);
  if (v8)
  {
    v9 = v2 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    v9 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v9 >= v34)
      return 1;
    v8 = *(_QWORD *)(v33 + 8 * v9);
    ++v10;
    if (v8)
      goto LABEL_21;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_10008DD70(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  id v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  void *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  unint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  int64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  _OWORD v38[2];
  uint64_t v39;
  _OWORD v40[2];
  uint64_t v41;
  _BYTE v42[40];
  __int128 v43;
  __int128 v44;
  _OWORD v45[2];
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;

  if (result == a2)
    return 1;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v28 = result + 64;
  v3 = 1 << *(_BYTE *)(result + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(result + 64);
  v30 = result;
  v31 = 0;
  v29 = (unint64_t)(v3 + 63) >> 6;
  v6 = (uint64_t *)&unk_10149E930;
  while (1)
  {
    if (v5)
    {
      v7 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v8 = v7 | (v31 << 6);
LABEL_8:
      v9 = *(_QWORD *)(v30 + 48) + 32 * v8;
      v10 = *(void **)v9;
      v11 = *(_QWORD *)(v9 + 8);
      v12 = *(_QWORD *)(v9 + 16);
      v13 = *(_BYTE *)(v9 + 24);
      sub_10000C1FC(*(_QWORD *)(v30 + 56) + 40 * v8, (uint64_t)v45, v6);
      *(_QWORD *)&v43 = v10;
      *((_QWORD *)&v43 + 1) = v11;
      *(_QWORD *)&v44 = v12;
      BYTE8(v44) = v13;
      v14 = v10;
      sub_10000BE70(v11, v12, v13);
      goto LABEL_27;
    }
    v15 = v31 + 1;
    if (__OFADD__(v31, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v15 < v29)
    {
      v16 = *(_QWORD *)(v28 + 8 * v15);
      if (v16)
        goto LABEL_12;
      v17 = v31 + 2;
      ++v31;
      if (v15 + 1 < v29)
      {
        v16 = *(_QWORD *)(v28 + 8 * v17);
        if (v16)
          goto LABEL_15;
        v31 = v15 + 1;
        if (v15 + 2 < v29)
        {
          v16 = *(_QWORD *)(v28 + 8 * (v15 + 2));
          if (v16)
          {
            v15 += 2;
            goto LABEL_12;
          }
          v17 = v15 + 3;
          v31 = v15 + 2;
          if (v15 + 3 < v29)
            break;
        }
      }
    }
LABEL_26:
    v5 = 0;
    v46 = 0;
    memset(v45, 0, sizeof(v45));
    v43 = 0u;
    v44 = 0u;
LABEL_27:
    sub_10008E974((uint64_t)&v43, (uint64_t)&v47);
    v18 = v47;
    if (!v47)
      return 1;
    v19 = v6;
    v20 = v48;
    v21 = v49;
    v43 = v51;
    v44 = v52;
    *(_QWORD *)&v45[0] = v53;
    v22 = v50;
    v23 = sub_1000C1674((uint64_t)v47, v48, v49, v50);
    v25 = v24;

    sub_100084C88(v20, v21, v22);
    if ((v25 & 1) == 0)
      goto LABEL_38;
    v6 = v19;
    sub_10000C1FC(*(_QWORD *)(a2 + 56) + 40 * v23, (uint64_t)v42, v19);
    sub_100084C44((uint64_t)v42, (uint64_t)v38);
    v26 = sub_100008B04(&qword_101497910);
    if (!swift_dynamicCast(&v35, v38, v26, &type metadata for AnyHashable, 6))
    {
      v37 = 0;
      v35 = 0u;
      v36 = 0u;
      sub_100010CC4((uint64_t)&v35, &qword_101493FF0);
LABEL_37:
      sub_100010CC4((uint64_t)v42, (uint64_t *)&unk_10149E930);
LABEL_38:
      sub_100010CC4((uint64_t)&v43, (uint64_t *)&unk_10149E930);
      return 0;
    }
    v40[0] = v35;
    v40[1] = v36;
    v41 = v37;
    sub_100084C44((uint64_t)&v43, (uint64_t)&v35);
    if ((swift_dynamicCast(&v32, &v35, v26, &type metadata for AnyHashable, 6) & 1) == 0)
    {
      v34 = 0;
      v32 = 0u;
      v33 = 0u;
      sub_100010CC4((uint64_t)&v32, &qword_101493FF0);
      sub_100012C48((uint64_t)v40);
      goto LABEL_37;
    }
    v38[0] = v32;
    v38[1] = v33;
    v39 = v34;
    v27 = static AnyHashable.== infix(_:_:)(v40, v38);
    sub_100012C48((uint64_t)v38);
    sub_100012C48((uint64_t)v40);
    sub_100010CC4((uint64_t)v42, v19);
    result = sub_100010CC4((uint64_t)&v43, v19);
    if ((v27 & 1) == 0)
      return 0;
  }
  v16 = *(_QWORD *)(v28 + 8 * v17);
  if (v16)
  {
LABEL_15:
    v15 = v17;
LABEL_12:
    v5 = (v16 - 1) & v16;
    v8 = __clz(__rbit64(v16)) + (v15 << 6);
    v31 = v15;
    goto LABEL_8;
  }
  while (1)
  {
    v15 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v15 >= v29)
    {
      v31 = v29 - 1;
      goto LABEL_26;
    }
    v16 = *(_QWORD *)(v28 + 8 * v15);
    ++v17;
    if (v16)
      goto LABEL_12;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10008E15C(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  uint64_t v14;

  if (*(unsigned __int8 *)(a1 + OBJC_IVAR____TtC4Maps18DirectionsETAModel_showETA) == *(unsigned __int8 *)(a2 + OBJC_IVAR____TtC4Maps18DirectionsETAModel_showETA)
    && objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC4Maps18DirectionsETAModel_mapItem), "isEqual:", *(_QWORD *)(a2 + OBJC_IVAR____TtC4Maps18DirectionsETAModel_mapItem)))
  {
    KeyPath = swift_getKeyPath(&unk_100E28600);
    v5 = swift_getKeyPath(&unk_100E28628);
    static Published.subscript.getter(&v13, a1, KeyPath, v5);
    swift_release(KeyPath);
    swift_release(v5);
    v7 = v13;
    v6 = v14;
    v8 = swift_getKeyPath(&unk_100E28600);
    v9 = swift_getKeyPath(&unk_100E28628);
    static Published.subscript.getter(&v13, a2, v8, v9);
    swift_release(v8);
    swift_release(v9);
    v10 = v14;
    if (v6)
    {
      if (v14)
      {
        if (v7 == v13 && v6 == v14)
        {
          swift_bridgeObjectRelease(v6);
          v11 = 1;
        }
        else
        {
          v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v6, v13, v14, 0);
          swift_bridgeObjectRelease(v6);
        }
      }
      else
      {
        v11 = 0;
        v10 = v6;
      }
    }
    else
    {
      if (!v14)
      {
        v11 = 1;
        return v11 & 1;
      }
      v11 = 0;
    }
    swift_bridgeObjectRelease(v10);
  }
  else
  {
    v11 = 0;
  }
  return v11 & 1;
}

uint64_t sub_10008E2DC(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;

  if (objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC4Maps24AccessoryButtonViewModel_mapItem), "isEqual:", *(_QWORD *)(a2 + OBJC_IVAR____TtC4Maps24AccessoryButtonViewModel_mapItem))&& (static UUID.== infix(_:_:)(a1 + OBJC_IVAR____TtC4Maps24AccessoryButtonViewModel_id, a2 + OBJC_IVAR____TtC4Maps24AccessoryButtonViewModel_id) & 1) != 0)
  {
    KeyPath = swift_getKeyPath(&unk_100E28648);
    v5 = swift_getKeyPath(&unk_100E28670);
    static Published.subscript.getter((uint64_t *)((char *)&v10 + 1), a1, KeyPath, v5);
    swift_release(KeyPath);
    swift_release(v5);
    LOBYTE(KeyPath) = BYTE1(v10);
    v6 = swift_getKeyPath(&unk_100E28648);
    v7 = swift_getKeyPath(&unk_100E28670);
    static Published.subscript.getter(&v10, a2, v6, v7);
    swift_release(v6);
    swift_release(v7);
    v8 = KeyPath ^ v10 ^ 1;
  }
  else
  {
    v8 = 0;
  }
  return v8 & 1;
}

uint64_t sub_10008E3F0(uint64_t a1, uint64_t a2)
{
  int *v4;
  char v5;

  if ((static UUID.== infix(_:_:)(a1, a2) & 1) != 0
    && (v4 = (int *)type metadata accessor for PlaceSummaryViewModelLine(0),
        (sub_100083D08(*(_QWORD *)(a1 + v4[5]), *(_QWORD *)(a2 + v4[5])) & 1) != 0)
    && *(unsigned __int8 *)(a1 + v4[6]) == *(unsigned __int8 *)(a2 + v4[6]))
  {
    v5 = *(_BYTE *)(a1 + v4[7]) ^ *(_BYTE *)(a2 + v4[7]) ^ 1;
  }
  else
  {
    v5 = 0;
  }
  return v5 & 1;
}

uint64_t sub_10008E47C(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;

  if (objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtCO4Maps25PlaceSummaryViewModelUnit11UserLibrary_mapItem), "isEqual:", *(_QWORD *)(a2 + OBJC_IVAR____TtCO4Maps25PlaceSummaryViewModelUnit11UserLibrary_mapItem)))
  {
    KeyPath = swift_getKeyPath(&unk_100E285B8);
    v5 = swift_getKeyPath(&unk_100E285E0);
    static Published.subscript.getter((uint64_t *)((char *)&v10 + 1), a1, KeyPath, v5);
    swift_release(KeyPath);
    swift_release(v5);
    LOBYTE(KeyPath) = BYTE1(v10);
    v6 = swift_getKeyPath(&unk_100E285B8);
    v7 = swift_getKeyPath(&unk_100E285E0);
    static Published.subscript.getter(&v10, a2, v6, v7);
    swift_release(v6);
    swift_release(v7);
    v8 = KeyPath ^ v10 ^ 1;
  }
  else
  {
    v8 = 0;
  }
  return v8 & 1;
}

uint64_t sub_10008E578@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_10008D614(a1, (uint64_t)&unk_100E285B8, (uint64_t)&unk_100E285E0, a2);
}

uint64_t sub_10008E59C(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10008D6A0(a1, a2, a3, a4, (uint64_t)&unk_100E285B8, (uint64_t)&unk_100E285E0);
}

id sub_10008E5C0(uint64_t a1, uint64_t a2)
{
  NSString v2;
  NSString v3;
  id v4;

  if (!objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtCO4Maps25PlaceSummaryViewModelUnit8UserNote_mapItem), "isEqual:", *(_QWORD *)(a2 + OBJC_IVAR____TtCO4Maps25PlaceSummaryViewModelUnit8UserNote_mapItem)))return 0;
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "isEqual:", v3);

  return v4;
}

uint64_t sub_10008E664@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_10008D614(a1, (uint64_t)&unk_100E28648, (uint64_t)&unk_100E28670, a2);
}

uint64_t sub_10008E688(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10008D6A0(a1, a2, a3, a4, (uint64_t)&unk_100E28648, (uint64_t)&unk_100E28670);
}

uint64_t sub_10008E6AC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10008D748(a1, (uint64_t)&unk_100E28690, (uint64_t)&unk_100E286B8, a2);
}

uint64_t sub_10008E6D0(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10008D7D4(a1, a2, a3, a4, (uint64_t)&unk_100E28690, (uint64_t)&unk_100E286B8);
}

uint64_t sub_10008E6F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v19;

  KeyPath = swift_getKeyPath(a3);
  v11 = swift_getKeyPath(a4);
  static Published.subscript.getter(&v19, a1, KeyPath, v11);
  swift_release(KeyPath);
  swift_release(v11);
  v12 = v19;
  v13 = swift_getKeyPath(a3);
  v14 = swift_getKeyPath(a4);
  static Published.subscript.getter(&v19, a2, v13, v14);
  swift_release(v13);
  swift_release(v14);
  v15 = v19;
  if (v12)
  {
    if (!v19)
    {
      v17 = 0;
      goto LABEL_8;
    }
    v16 = swift_bridgeObjectRetain(v12);
    v17 = a5(v16, v15);
    swift_bridgeObjectRelease_n(v12, 2);
  }
  else
  {
    if (!v19)
    {
      v17 = 1;
      return v17 & 1;
    }
    v17 = 0;
  }
  v12 = v15;
LABEL_8:
  swift_bridgeObjectRelease(v12);
  return v17 & 1;
}

uint64_t sub_10008E814@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10008D748(a1, (uint64_t)&unk_100E286D8, (uint64_t)&unk_100E28700, a2);
}

uint64_t sub_10008E838(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10008D7D4(a1, a2, a3, a4, (uint64_t)&unk_100E286D8, (uint64_t)&unk_100E28700);
}

uint64_t type metadata accessor for PlaceSummaryViewModelUnit.PhotoCarousel(uint64_t a1)
{
  return sub_100021D9C(a1, qword_1014979D0, (uint64_t)&nominal type descriptor for PlaceSummaryViewModelUnit.PhotoCarousel);
}

uint64_t type metadata accessor for PlaceSummaryViewModelUnit.Hours(uint64_t a1)
{
  return sub_100021D9C(a1, qword_101497A60, (uint64_t)&nominal type descriptor for PlaceSummaryViewModelUnit.Hours);
}

uint64_t type metadata accessor for PlaceSummaryViewModelUnit.Delimiter(uint64_t a1)
{
  return sub_100021D9C(a1, qword_101497AF0, (uint64_t)&nominal type descriptor for PlaceSummaryViewModelUnit.Delimiter);
}

uint64_t type metadata accessor for PlaceSummaryViewModelUnit.TappableEntry(uint64_t a1)
{
  return sub_100021D9C(a1, qword_101497B80, (uint64_t)&nominal type descriptor for PlaceSummaryViewModelUnit.TappableEntry);
}

uint64_t type metadata accessor for PlaceSummaryViewModelUnit.TransitShields(uint64_t a1)
{
  return sub_100021D9C(a1, qword_101497C18, (uint64_t)&nominal type descriptor for PlaceSummaryViewModelUnit.TransitShields);
}

uint64_t type metadata accessor for PlaceSummaryViewModelUnit.UGCUserRecommendations(uint64_t a1)
{
  return sub_100021D9C(a1, qword_101497CA8, (uint64_t)&nominal type descriptor for PlaceSummaryViewModelUnit.UGCUserRecommendations);
}

uint64_t type metadata accessor for PlaceSummaryViewModelUnit.ThirdPartyRatings(uint64_t a1)
{
  return sub_100021D9C(a1, qword_101497D38, (uint64_t)&nominal type descriptor for PlaceSummaryViewModelUnit.ThirdPartyRatings);
}

uint64_t type metadata accessor for PlaceSummaryViewModelUnit.FirstPartyRatings(uint64_t a1)
{
  return sub_100021D9C(a1, qword_101497DD8, (uint64_t)&nominal type descriptor for PlaceSummaryViewModelUnit.FirstPartyRatings);
}

uint64_t type metadata accessor for PlaceSummaryViewModelUnit.UserGeneratedGuide(uint64_t a1)
{
  return sub_100021D9C(a1, qword_101497E70, (uint64_t)&nominal type descriptor for PlaceSummaryViewModelUnit.UserGeneratedGuide);
}

uint64_t type metadata accessor for PlaceSummaryViewModelUnit.SingleCuratedGuide(uint64_t a1)
{
  return sub_100021D9C(a1, qword_101497F08, (uint64_t)&nominal type descriptor for PlaceSummaryViewModelUnit.SingleCuratedGuide);
}

uint64_t type metadata accessor for PlaceSummaryViewModelUnit.MultipleCuratedGuides(uint64_t a1)
{
  return sub_100021D9C(a1, (uint64_t *)&unk_101497FA8, (uint64_t)&nominal type descriptor for PlaceSummaryViewModelUnit.MultipleCuratedGuides);
}

uint64_t type metadata accessor for PlaceSummaryViewModelUnit.Distance(uint64_t a1)
{
  return sub_100021D9C(a1, qword_101498048, (uint64_t)&nominal type descriptor for PlaceSummaryViewModelUnit.Distance);
}

uint64_t type metadata accessor for PlaceSummaryViewModelUnit.Label(uint64_t a1)
{
  return sub_100021D9C(a1, qword_1014980D8, (uint64_t)&nominal type descriptor for PlaceSummaryViewModelUnit.Label);
}

uint64_t type metadata accessor for PlaceSummaryViewModelUnit(uint64_t a1)
{
  return sub_100021D9C(a1, qword_1014982D0, (uint64_t)&nominal type descriptor for PlaceSummaryViewModelUnit);
}

uint64_t sub_10008E974(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008B04(&qword_101497908);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10008E9BC(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10008E9F4()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  void *v3;
  double v4;
  char v5;
  double v6;
  char v7;
  char v9;

  if (!(v0 >> 61))
  {
    v2 = v1 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_type;
    v3 = (void *)(v0 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_type);
    sub_100020008(v1);
    sub_100020008(v0);
    if ((sub_100087FC8(v2, v3) & 1) != 0)
    {
      v4 = *(double *)(v1 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_cornerRadius);
      v5 = *(_BYTE *)(v1 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_cornerRadius + 8);
      v6 = *(double *)(v0 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_cornerRadius);
      v7 = *(_BYTE *)(v0 + OBJC_IVAR____TtC4Maps26PlaceSummaryImageViewModel_cornerRadius + 8);
      sub_1000200C0(v0);
      sub_1000200C0(v1);
      if ((v5 & 1) != 0)
      {
        if ((v7 & 1) != 0)
          return 1;
      }
      else
      {
        if (v4 == v6)
          v9 = v7;
        else
          v9 = 1;
        if ((v9 & 1) == 0)
          return 1;
      }
    }
    else
    {
      sub_1000200C0(v0);
      sub_1000200C0(v1);
    }
  }
  return 0;
}

uint64_t sub_10008EBF4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10008D748(a1, (uint64_t)&unk_100E28720, (uint64_t)&unk_100E28748, a2);
}

uint64_t sub_10008EC18(unint64_t *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_10008D46C(a1, a2, a3, a4, (uint64_t)&unk_100E28720, (uint64_t)&unk_100E28748);
}

uint64_t sub_10008EC3C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10008D748(a1, (uint64_t)&unk_100E28768, (uint64_t)&unk_100E28790, a2);
}

uint64_t sub_10008EC60(unint64_t *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_10008D46C(a1, a2, a3, a4, (uint64_t)&unk_100E28768, (uint64_t)&unk_100E28790);
}

uint64_t sub_10008EC8C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10008ECB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100087190(a1, a2, v2);
}

uint64_t sub_10008ECB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10008ECC8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t *sub_10008ED18(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
  }
  swift_retain(v11);
  return a1;
}

uint64_t sub_10008EDA8(uint64_t a1, uint64_t a2)
{
  return sub_1000923C0(a1, a2, (uint64_t (*)(_QWORD))&_swift_release);
}

uint64_t sub_10008EDB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_retain(v10);
  return a1;
}

uint64_t sub_10008EE1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_retain(v10);
  swift_release(v11);
  return a1;
}

uint64_t sub_10008EE9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100092564(a1, a2, a3, (void (*)(uint64_t))&_swift_release);
}

uint64_t sub_10008EEA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008EEB4);
}

uint64_t sub_10008EEB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008EEC4);
}

uint64_t sub_10008EEC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000925F4(a1, a2, a3, (uint64_t)&unk_100E27DF0);
}

uint64_t *sub_10008EED4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for AttributedString(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t sub_10008EF7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for AttributedString(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t sub_10008EFD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for AttributedString(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t sub_10008F054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for AttributedString(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t sub_10008F0D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for AttributedString(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t sub_10008F14C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for AttributedString(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_10008F1C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008F1D4);
}

uint64_t sub_10008F1D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for AttributedString(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

